"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddOTPSMSRequestSchema = exports.RemoveTOTPResponseSchema = exports.RemoveTOTPRequestSchema = exports.VerifyTOTPRegistrationResponseSchema = exports.VerifyTOTPRegistrationRequestSchema = exports.RegisterTOTPResponseSchema = exports.RegisterTOTPRequestSchema = exports.RemoveU2FResponseSchema = exports.RemoveU2FRequestSchema = exports.VerifyU2FRegistrationResponseSchema = exports.VerifyU2FRegistrationRequestSchema = exports.RegisterU2FResponseSchema = exports.RegisterU2FRequestSchema = exports.VerifyPasskeyRegistrationResponseSchema = exports.VerifyPasskeyRegistrationRequestSchema = exports.RegisterPasskeyResponseSchema = exports.RegisterPasskeyRequestSchema = exports.UnlockUserResponseSchema = exports.UnlockUserRequestSchema = exports.LockUserResponseSchema = exports.LockUserRequestSchema = exports.ReactivateUserResponseSchema = exports.ReactivateUserRequestSchema = exports.DeactivateUserResponseSchema = exports.DeactivateUserRequestSchema = exports.UpdateHumanUserResponseSchema = exports.UpdateHumanUserRequestSchema = exports.DeleteUserResponseSchema = exports.DeleteUserRequestSchema = exports.VerifyPhoneResponseSchema = exports.VerifyPhoneRequestSchema = exports.ResendPhoneCodeResponseSchema = exports.ResendPhoneCodeRequestSchema = exports.RemovePhoneResponseSchema = exports.RemovePhoneRequestSchema = exports.SetPhoneResponseSchema = exports.SetPhoneRequestSchema = exports.VerifyEmailResponseSchema = exports.VerifyEmailRequestSchema = exports.ResendEmailCodeResponseSchema = exports.ResendEmailCodeRequestSchema = exports.SetEmailResponseSchema = exports.SetEmailRequestSchema = exports.ListUsersResponseSchema = exports.ListUsersRequestSchema = exports.GetUserByIDResponseSchema = exports.GetUserByIDRequestSchema = exports.AddHumanUserResponseSchema = exports.AddHumanUserRequestSchema = exports.file_zitadel_user_v2_user_service = void 0;
exports.UserService = exports.AuthenticationMethodTypeSchema = exports.AuthenticationMethodType = exports.VerifyInviteCodeResponseSchema = exports.VerifyInviteCodeRequestSchema = exports.ResendInviteCodeResponseSchema = exports.ResendInviteCodeRequestSchema = exports.CreateInviteCodeResponseSchema = exports.CreateInviteCodeRequestSchema = exports.ListAuthenticationMethodTypesResponseSchema = exports.ListAuthenticationMethodTypesRequestSchema = exports.SetPasswordResponseSchema = exports.SetPasswordRequestSchema = exports.PasswordResetResponseSchema = exports.PasswordResetRequestSchema = exports.RemoveIDPLinkResponseSchema = exports.RemoveIDPLinkRequestSchema = exports.ListIDPLinksResponseSchema = exports.ListIDPLinksRequestSchema = exports.AddIDPLinkResponseSchema = exports.AddIDPLinkRequestSchema = exports.RetrieveIdentityProviderIntentResponseSchema = exports.RetrieveIdentityProviderIntentRequestSchema = exports.StartIdentityProviderIntentResponseSchema = exports.StartIdentityProviderIntentRequestSchema = exports.RemovePasskeyResponseSchema = exports.RemovePasskeyRequestSchema = exports.ListPasskeysResponseSchema = exports.ListPasskeysRequestSchema = exports.CreatePasskeyRegistrationLinkResponseSchema = exports.CreatePasskeyRegistrationLinkRequestSchema = exports.RemoveOTPEmailResponseSchema = exports.RemoveOTPEmailRequestSchema = exports.AddOTPEmailResponseSchema = exports.AddOTPEmailRequestSchema = exports.RemoveOTPSMSResponseSchema = exports.RemoveOTPSMSRequestSchema = exports.AddOTPSMSResponseSchema = void 0;
const codegenv1_1 = require("@bufbuild/protobuf/codegenv1");
const object_pb_1 = require("../../object/v2/object_pb");
const options_pb_1 = require("../../protoc_gen_zitadel/v2/options_pb");
const auth_pb_1 = require("./auth_pb");
const email_pb_1 = require("./email_pb");
const phone_pb_1 = require("./phone_pb");
const idp_pb_1 = require("./idp_pb");
const password_pb_1 = require("./password_pb");
const user_pb_1 = require("./user_pb");
const query_pb_1 = require("./query_pb");
const annotations_pb_1 = require("../../../google/api/annotations_pb");
const field_behavior_pb_1 = require("../../../google/api/field_behavior_pb");
const wkt_1 = require("@bufbuild/protobuf/wkt");
const annotations_pb_2 = require("../../../protoc-gen-openapiv2/options/annotations_pb");
const validate_pb_1 = require("../../../validate/validate_pb");
exports.file_zitadel_user_v2_user_service = (0, codegenv1_1.fileDesc)("", [object_pb_1.file_zitadel_object_v2_object, options_pb_1.file_zitadel_protoc_gen_zitadel_v2_options, auth_pb_1.file_zitadel_user_v2_auth, email_pb_1.file_zitadel_user_v2_email, phone_pb_1.file_zitadel_user_v2_phone, idp_pb_1.file_zitadel_user_v2_idp, password_pb_1.file_zitadel_user_v2_password, user_pb_1.file_zitadel_user_v2_user, query_pb_1.file_zitadel_user_v2_query, annotations_pb_1.file_google_api_annotations, field_behavior_pb_1.file_google_api_field_behavior, wkt_1.file_google_protobuf_duration, wkt_1.file_google_protobuf_struct, annotations_pb_2.file_protoc_gen_openapiv2_options_annotations, validate_pb_1.file_validate_validate]);
exports.AddHumanUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 0);
exports.AddHumanUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 1);
exports.GetUserByIDRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 2);
exports.GetUserByIDResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 3);
exports.ListUsersRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 4);
exports.ListUsersResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 5);
exports.SetEmailRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 6);
exports.SetEmailResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 7);
exports.ResendEmailCodeRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 8);
exports.ResendEmailCodeResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 9);
exports.VerifyEmailRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 10);
exports.VerifyEmailResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 11);
exports.SetPhoneRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 12);
exports.SetPhoneResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 13);
exports.RemovePhoneRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 14);
exports.RemovePhoneResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 15);
exports.ResendPhoneCodeRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 16);
exports.ResendPhoneCodeResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 17);
exports.VerifyPhoneRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 18);
exports.VerifyPhoneResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 19);
exports.DeleteUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 20);
exports.DeleteUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 21);
exports.UpdateHumanUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 22);
exports.UpdateHumanUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 23);
exports.DeactivateUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 24);
exports.DeactivateUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 25);
exports.ReactivateUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 26);
exports.ReactivateUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 27);
exports.LockUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 28);
exports.LockUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 29);
exports.UnlockUserRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 30);
exports.UnlockUserResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 31);
exports.RegisterPasskeyRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 32);
exports.RegisterPasskeyResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 33);
exports.VerifyPasskeyRegistrationRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 34);
exports.VerifyPasskeyRegistrationResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 35);
exports.RegisterU2FRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 36);
exports.RegisterU2FResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 37);
exports.VerifyU2FRegistrationRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 38);
exports.VerifyU2FRegistrationResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 39);
exports.RemoveU2FRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 40);
exports.RemoveU2FResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 41);
exports.RegisterTOTPRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 42);
exports.RegisterTOTPResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 43);
exports.VerifyTOTPRegistrationRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 44);
exports.VerifyTOTPRegistrationResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 45);
exports.RemoveTOTPRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 46);
exports.RemoveTOTPResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 47);
exports.AddOTPSMSRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 48);
exports.AddOTPSMSResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 49);
exports.RemoveOTPSMSRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 50);
exports.RemoveOTPSMSResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 51);
exports.AddOTPEmailRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 52);
exports.AddOTPEmailResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 53);
exports.RemoveOTPEmailRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 54);
exports.RemoveOTPEmailResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 55);
exports.CreatePasskeyRegistrationLinkRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 56);
exports.CreatePasskeyRegistrationLinkResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 57);
exports.ListPasskeysRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 58);
exports.ListPasskeysResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 59);
exports.RemovePasskeyRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 60);
exports.RemovePasskeyResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 61);
exports.StartIdentityProviderIntentRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 62);
exports.StartIdentityProviderIntentResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 63);
exports.RetrieveIdentityProviderIntentRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 64);
exports.RetrieveIdentityProviderIntentResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 65);
exports.AddIDPLinkRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 66);
exports.AddIDPLinkResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 67);
exports.ListIDPLinksRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 68);
exports.ListIDPLinksResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 69);
exports.RemoveIDPLinkRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 70);
exports.RemoveIDPLinkResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 71);
exports.PasswordResetRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 72);
exports.PasswordResetResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 73);
exports.SetPasswordRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 74);
exports.SetPasswordResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 75);
exports.ListAuthenticationMethodTypesRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 76);
exports.ListAuthenticationMethodTypesResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 77);
exports.CreateInviteCodeRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 78);
exports.CreateInviteCodeResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 79);
exports.ResendInviteCodeRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 80);
exports.ResendInviteCodeResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 81);
exports.VerifyInviteCodeRequestSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 82);
exports.VerifyInviteCodeResponseSchema = (0, codegenv1_1.messageDesc)(exports.file_zitadel_user_v2_user_service, 83);
var AuthenticationMethodType;
(function (AuthenticationMethodType) {
    AuthenticationMethodType[AuthenticationMethodType["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    AuthenticationMethodType[AuthenticationMethodType["PASSWORD"] = 1] = "PASSWORD";
    AuthenticationMethodType[AuthenticationMethodType["PASSKEY"] = 2] = "PASSKEY";
    AuthenticationMethodType[AuthenticationMethodType["IDP"] = 3] = "IDP";
    AuthenticationMethodType[AuthenticationMethodType["TOTP"] = 4] = "TOTP";
    AuthenticationMethodType[AuthenticationMethodType["U2F"] = 5] = "U2F";
    AuthenticationMethodType[AuthenticationMethodType["OTP_SMS"] = 6] = "OTP_SMS";
    AuthenticationMethodType[AuthenticationMethodType["OTP_EMAIL"] = 7] = "OTP_EMAIL";
})(AuthenticationMethodType = exports.AuthenticationMethodType || (exports.AuthenticationMethodType = {}));
exports.AuthenticationMethodTypeSchema = (0, codegenv1_1.enumDesc)(exports.file_zitadel_user_v2_user_service, 0);
exports.UserService = (0, codegenv1_1.serviceDesc)(exports.file_zitadel_user_v2_user_service, 0);
//# sourceMappingURL=user_service_pb.js.map