"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestSMTPConfigByIdRequest = exports.RemoveSMTPConfigResponse = exports.RemoveSMTPConfigRequest = exports.DeactivateSMTPConfigResponse = exports.DeactivateSMTPConfigRequest = exports.ActivateSMTPConfigResponse = exports.ActivateSMTPConfigRequest = exports.UpdateSMTPConfigPasswordResponse = exports.UpdateSMTPConfigPasswordRequest = exports.UpdateSMTPConfigResponse = exports.UpdateSMTPConfigRequest = exports.AddSMTPConfigResponse = exports.AddSMTPConfigRequest = exports.ListSMTPConfigsResponse = exports.ListSMTPConfigsRequest = exports.GetSMTPConfigByIdResponse = exports.GetSMTPConfigByIdRequest = exports.GetSMTPConfigResponse = exports.GetSMTPConfigRequest = exports.UpdateSecretGeneratorResponse = exports.UpdateSecretGeneratorRequest = exports.GetSecretGeneratorResponse = exports.GetSecretGeneratorRequest = exports.ListSecretGeneratorsResponse = exports.ListSecretGeneratorsRequest = exports.RemoveInstanceTrustedDomainResponse = exports.RemoveInstanceTrustedDomainRequest = exports.AddInstanceTrustedDomainResponse = exports.AddInstanceTrustedDomainRequest = exports.ListInstanceTrustedDomainsResponse = exports.ListInstanceTrustedDomainsRequest = exports.ListInstanceDomainsResponse = exports.ListInstanceDomainsRequest = exports.GetMyInstanceResponse = exports.GetMyInstanceRequest = exports.GetDefaultOrgResponse = exports.GetDefaultOrgRequest = exports.SetDefaultOrgResponse = exports.SetDefaultOrgRequest = exports.GetDefaultLanguageResponse = exports.GetDefaultLanguageRequest = exports.SetDefaultLanguageResponse = exports.SetDefaultLanguageRequest = exports.GetAllowedLanguagesResponse = exports.GetAllowedLanguagesRequest = exports.GetSupportedLanguagesResponse = exports.GetSupportedLanguagesRequest = exports.HealthzResponse = exports.HealthzRequest = exports.protobufPackage = void 0;
exports.GetFileSystemNotificationProviderRequest = exports.RemoveSMSProviderResponse = exports.RemoveSMSProviderRequest = exports.DeactivateSMSProviderResponse = exports.DeactivateSMSProviderRequest = exports.ActivateSMSProviderResponse = exports.ActivateSMSProviderRequest = exports.UpdateSMSProviderHTTPResponse = exports.UpdateSMSProviderHTTPRequest = exports.AddSMSProviderHTTPResponse = exports.AddSMSProviderHTTPRequest = exports.UpdateSMSProviderTwilioTokenResponse = exports.UpdateSMSProviderTwilioTokenRequest = exports.UpdateSMSProviderTwilioResponse = exports.UpdateSMSProviderTwilioRequest = exports.AddSMSProviderTwilioResponse = exports.AddSMSProviderTwilioRequest = exports.GetSMSProviderResponse = exports.GetSMSProviderRequest = exports.ListSMSProvidersResponse = exports.ListSMSProvidersRequest = exports.TestEmailProviderSMTPResponse = exports.TestEmailProviderSMTPRequest = exports.TestEmailProviderSMTPByIdResponse = exports.TestEmailProviderSMTPByIdRequest = exports.RemoveEmailProviderResponse = exports.RemoveEmailProviderRequest = exports.DeactivateEmailProviderResponse = exports.DeactivateEmailProviderRequest = exports.ActivateEmailProviderResponse = exports.ActivateEmailProviderRequest = exports.UpdateEmailProviderHTTPResponse = exports.UpdateEmailProviderHTTPRequest = exports.AddEmailProviderHTTPResponse = exports.AddEmailProviderHTTPRequest = exports.UpdateEmailProviderSMTPPasswordResponse = exports.UpdateEmailProviderSMTPPasswordRequest = exports.UpdateEmailProviderSMTPResponse = exports.UpdateEmailProviderSMTPRequest = exports.AddEmailProviderSMTPResponse = exports.AddEmailProviderSMTPRequest = exports.ListEmailProvidersResponse = exports.ListEmailProvidersRequest = exports.GetEmailProviderByIdResponse = exports.GetEmailProviderByIdRequest = exports.GetEmailProviderResponse = exports.GetEmailProviderRequest = exports.TestSMTPConfigResponse = exports.TestSMTPConfigRequest = exports.TestSMTPConfigByIdResponse = void 0;
exports.ListProvidersRequest = exports.UpdateIDPJWTConfigResponse = exports.UpdateIDPJWTConfigRequest = exports.UpdateIDPOIDCConfigResponse = exports.UpdateIDPOIDCConfigRequest = exports.RemoveIDPResponse = exports.RemoveIDPRequest = exports.ReactivateIDPResponse = exports.ReactivateIDPRequest = exports.DeactivateIDPResponse = exports.DeactivateIDPRequest = exports.UpdateIDPResponse = exports.UpdateIDPRequest = exports.AddJWTIDPResponse = exports.AddJWTIDPRequest = exports.AddOIDCIDPResponse = exports.AddOIDCIDPRequest = exports.ListIDPsResponse = exports.IDPQuery = exports.ListIDPsRequest = exports.GetIDPByIDResponse = exports.GetIDPByIDRequest = exports.RemoveOrgResponse = exports.RemoveOrgRequest = exports.SetUpOrgResponse = exports.SetUpOrgRequest_Human_Phone = exports.SetUpOrgRequest_Human_Email = exports.SetUpOrgRequest_Human_Profile = exports.SetUpOrgRequest_Human = exports.SetUpOrgRequest_Org = exports.SetUpOrgRequest = exports.ListOrgsResponse = exports.ListOrgsRequest = exports.GetOrgByIDResponse = exports.GetOrgByIDRequest = exports.IsOrgUniqueResponse = exports.IsOrgUniqueRequest = exports.SetSecurityPolicyResponse = exports.SetSecurityPolicyRequest = exports.GetSecurityPolicyResponse = exports.GetSecurityPolicyRequest = exports.UpdateOIDCSettingsResponse = exports.UpdateOIDCSettingsRequest = exports.AddOIDCSettingsResponse = exports.AddOIDCSettingsRequest = exports.GetOIDCSettingsResponse = exports.GetOIDCSettingsRequest = exports.GetLogNotificationProviderResponse = exports.GetLogNotificationProviderRequest = exports.GetFileSystemNotificationProviderResponse = void 0;
exports.UpdateAppleProviderResponse = exports.UpdateAppleProviderRequest = exports.AddAppleProviderResponse = exports.AddAppleProviderRequest = exports.UpdateLDAPProviderResponse = exports.UpdateLDAPProviderRequest = exports.AddLDAPProviderResponse = exports.AddLDAPProviderRequest = exports.UpdateGoogleProviderResponse = exports.UpdateGoogleProviderRequest = exports.AddGoogleProviderResponse = exports.AddGoogleProviderRequest = exports.UpdateGitLabSelfHostedProviderResponse = exports.UpdateGitLabSelfHostedProviderRequest = exports.AddGitLabSelfHostedProviderResponse = exports.AddGitLabSelfHostedProviderRequest = exports.UpdateGitLabProviderResponse = exports.UpdateGitLabProviderRequest = exports.AddGitLabProviderResponse = exports.AddGitLabProviderRequest = exports.UpdateGitHubEnterpriseServerProviderResponse = exports.UpdateGitHubEnterpriseServerProviderRequest = exports.AddGitHubEnterpriseServerProviderResponse = exports.AddGitHubEnterpriseServerProviderRequest = exports.UpdateGitHubProviderResponse = exports.UpdateGitHubProviderRequest = exports.AddGitHubProviderResponse = exports.AddGitHubProviderRequest = exports.UpdateAzureADProviderResponse = exports.UpdateAzureADProviderRequest = exports.AddAzureADProviderResponse = exports.AddAzureADProviderRequest = exports.UpdateJWTProviderResponse = exports.UpdateJWTProviderRequest = exports.AddJWTProviderResponse = exports.AddJWTProviderRequest = exports.MigrateGenericOIDCProviderResponse = exports.MigrateGenericOIDCProviderRequest = exports.UpdateGenericOIDCProviderResponse = exports.UpdateGenericOIDCProviderRequest = exports.AddGenericOIDCProviderResponse = exports.AddGenericOIDCProviderRequest = exports.UpdateGenericOAuthProviderResponse = exports.UpdateGenericOAuthProviderRequest = exports.AddGenericOAuthProviderResponse = exports.AddGenericOAuthProviderRequest = exports.GetProviderByIDResponse = exports.GetProviderByIDRequest = exports.ListProvidersResponse = exports.ProviderQuery = void 0;
exports.RemoveLabelPolicyFontResponse = exports.RemoveLabelPolicyFontRequest = exports.RemoveLabelPolicyIconDarkResponse = exports.RemoveLabelPolicyIconDarkRequest = exports.RemoveLabelPolicyIconResponse = exports.RemoveLabelPolicyIconRequest = exports.RemoveLabelPolicyLogoDarkResponse = exports.RemoveLabelPolicyLogoDarkRequest = exports.RemoveLabelPolicyLogoResponse = exports.RemoveLabelPolicyLogoRequest = exports.ActivateLabelPolicyResponse = exports.ActivateLabelPolicyRequest = exports.UpdateLabelPolicyResponse = exports.UpdateLabelPolicyRequest = exports.GetPreviewLabelPolicyResponse = exports.GetPreviewLabelPolicyRequest = exports.GetLabelPolicyResponse = exports.GetLabelPolicyRequest = exports.ResetCustomDomainPolicyToDefaultResponse = exports.ResetCustomDomainPolicyToDefaultRequest = exports.UpdateCustomDomainPolicyResponse = exports.UpdateCustomDomainPolicyRequest = exports.AddCustomDomainPolicyResponse = exports.AddCustomDomainPolicyRequest = exports.GetCustomDomainPolicyResponse = exports.GetCustomDomainPolicyRequest = exports.UpdateDomainPolicyResponse = exports.UpdateDomainPolicyRequest = exports.GetDomainPolicyResponse = exports.GetDomainPolicyRequest = exports.ResetCustomOrgIAMPolicyToDefaultResponse = exports.ResetCustomOrgIAMPolicyToDefaultRequest = exports.UpdateCustomOrgIAMPolicyResponse = exports.UpdateCustomOrgIAMPolicyRequest = exports.AddCustomOrgIAMPolicyResponse = exports.AddCustomOrgIAMPolicyRequest = exports.GetCustomOrgIAMPolicyResponse = exports.GetCustomOrgIAMPolicyRequest = exports.UpdateOrgIAMPolicyResponse = exports.UpdateOrgIAMPolicyRequest = exports.GetOrgIAMPolicyResponse = exports.GetOrgIAMPolicyRequest = exports.DeleteProviderResponse = exports.DeleteProviderRequest = exports.RegenerateSAMLProviderCertificateResponse = exports.RegenerateSAMLProviderCertificateRequest = exports.UpdateSAMLProviderResponse = exports.UpdateSAMLProviderRequest = exports.AddSAMLProviderResponse = exports.AddSAMLProviderRequest = void 0;
exports.SetDefaultInitMessageTextResponse = exports.SetDefaultInitMessageTextRequest = exports.GetCustomInitMessageTextResponse = exports.GetCustomInitMessageTextRequest = exports.GetDefaultInitMessageTextResponse = exports.GetDefaultInitMessageTextRequest = exports.UpdateNotificationPolicyResponse = exports.UpdateNotificationPolicyRequest = exports.GetNotificationPolicyResponse = exports.GetNotificationPolicyRequest = exports.AddNotificationPolicyResponse = exports.AddNotificationPolicyRequest = exports.UpdatePrivacyPolicyResponse = exports.UpdatePrivacyPolicyRequest = exports.GetPrivacyPolicyResponse = exports.GetPrivacyPolicyRequest = exports.UpdateLockoutPolicyResponse = exports.UpdateLockoutPolicyRequest = exports.GetLockoutPolicyResponse = exports.GetLockoutPolicyRequest = exports.UpdatePasswordAgePolicyResponse = exports.UpdatePasswordAgePolicyRequest = exports.GetPasswordAgePolicyResponse = exports.GetPasswordAgePolicyRequest = exports.UpdatePasswordComplexityPolicyResponse = exports.UpdatePasswordComplexityPolicyRequest = exports.GetPasswordComplexityPolicyResponse = exports.GetPasswordComplexityPolicyRequest = exports.RemoveMultiFactorFromLoginPolicyResponse = exports.RemoveMultiFactorFromLoginPolicyRequest = exports.AddMultiFactorToLoginPolicyResponse = exports.AddMultiFactorToLoginPolicyRequest = exports.ListLoginPolicyMultiFactorsResponse = exports.ListLoginPolicyMultiFactorsRequest = exports.RemoveSecondFactorFromLoginPolicyResponse = exports.RemoveSecondFactorFromLoginPolicyRequest = exports.AddSecondFactorToLoginPolicyResponse = exports.AddSecondFactorToLoginPolicyRequest = exports.ListLoginPolicySecondFactorsResponse = exports.ListLoginPolicySecondFactorsRequest = exports.RemoveIDPFromLoginPolicyResponse = exports.RemoveIDPFromLoginPolicyRequest = exports.AddIDPToLoginPolicyResponse = exports.AddIDPToLoginPolicyRequest = exports.ListLoginPolicyIDPsResponse = exports.ListLoginPolicyIDPsRequest = exports.UpdateLoginPolicyResponse = exports.UpdateLoginPolicyRequest = exports.GetLoginPolicyResponse = exports.GetLoginPolicyRequest = void 0;
exports.ResetCustomDomainClaimedMessageTextToDefaultResponse = exports.ResetCustomDomainClaimedMessageTextToDefaultRequest = exports.SetDefaultDomainClaimedMessageTextResponse = exports.SetDefaultDomainClaimedMessageTextRequest = exports.GetCustomDomainClaimedMessageTextResponse = exports.GetCustomDomainClaimedMessageTextRequest = exports.GetDefaultDomainClaimedMessageTextResponse = exports.GetDefaultDomainClaimedMessageTextRequest = exports.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse = exports.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest = exports.SetDefaultVerifyEmailOTPMessageTextResponse = exports.SetDefaultVerifyEmailOTPMessageTextRequest = exports.GetDefaultVerifyEmailOTPMessageTextResponse = exports.GetDefaultVerifyEmailOTPMessageTextRequest = exports.GetCustomVerifyEmailOTPMessageTextResponse = exports.GetCustomVerifyEmailOTPMessageTextRequest = exports.ResetCustomVerifySMSOTPMessageTextToDefaultResponse = exports.ResetCustomVerifySMSOTPMessageTextToDefaultRequest = exports.SetDefaultVerifySMSOTPMessageTextResponse = exports.SetDefaultVerifySMSOTPMessageTextRequest = exports.GetDefaultVerifySMSOTPMessageTextResponse = exports.GetDefaultVerifySMSOTPMessageTextRequest = exports.GetCustomVerifySMSOTPMessageTextResponse = exports.GetCustomVerifySMSOTPMessageTextRequest = exports.ResetCustomVerifyPhoneMessageTextToDefaultResponse = exports.ResetCustomVerifyPhoneMessageTextToDefaultRequest = exports.SetDefaultVerifyPhoneMessageTextResponse = exports.SetDefaultVerifyPhoneMessageTextRequest = exports.GetCustomVerifyPhoneMessageTextResponse = exports.GetCustomVerifyPhoneMessageTextRequest = exports.GetDefaultVerifyPhoneMessageTextResponse = exports.GetDefaultVerifyPhoneMessageTextRequest = exports.ResetCustomVerifyEmailMessageTextToDefaultResponse = exports.ResetCustomVerifyEmailMessageTextToDefaultRequest = exports.SetDefaultVerifyEmailMessageTextResponse = exports.SetDefaultVerifyEmailMessageTextRequest = exports.GetCustomVerifyEmailMessageTextResponse = exports.GetCustomVerifyEmailMessageTextRequest = exports.GetDefaultVerifyEmailMessageTextResponse = exports.GetDefaultVerifyEmailMessageTextRequest = exports.ResetCustomPasswordResetMessageTextToDefaultResponse = exports.ResetCustomPasswordResetMessageTextToDefaultRequest = exports.SetDefaultPasswordResetMessageTextResponse = exports.SetDefaultPasswordResetMessageTextRequest = exports.GetCustomPasswordResetMessageTextResponse = exports.GetCustomPasswordResetMessageTextRequest = exports.GetDefaultPasswordResetMessageTextResponse = exports.GetDefaultPasswordResetMessageTextRequest = exports.ResetCustomInitMessageTextToDefaultResponse = exports.ResetCustomInitMessageTextToDefaultRequest = void 0;
exports.FailedEvent = exports.View = exports.RemoveFailedEventResponse = exports.RemoveFailedEventRequest = exports.ListFailedEventsResponse = exports.ListFailedEventsRequest = exports.ListViewsResponse = exports.ListViewsRequest = exports.ListIAMMembersResponse = exports.ListIAMMembersRequest = exports.ListIAMMemberRolesResponse = exports.ListIAMMemberRolesRequest = exports.RemoveIAMMemberResponse = exports.RemoveIAMMemberRequest = exports.UpdateIAMMemberResponse = exports.UpdateIAMMemberRequest = exports.AddIAMMemberResponse = exports.AddIAMMemberRequest = exports.ResetCustomLoginTextsToDefaultResponse = exports.ResetCustomLoginTextsToDefaultRequest = exports.SetCustomLoginTextsResponse = exports.SetCustomLoginTextsRequest = exports.GetCustomLoginTextsResponse = exports.GetCustomLoginTextsRequest = exports.GetDefaultLoginTextsResponse = exports.GetDefaultLoginTextsRequest = exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = exports.SetDefaultPasswordlessRegistrationMessageTextResponse = exports.SetDefaultPasswordlessRegistrationMessageTextRequest = exports.GetCustomPasswordlessRegistrationMessageTextResponse = exports.GetCustomPasswordlessRegistrationMessageTextRequest = exports.GetDefaultPasswordlessRegistrationMessageTextResponse = exports.GetDefaultPasswordlessRegistrationMessageTextRequest = exports.ResetCustomInviteUserMessageTextToDefaultResponse = exports.ResetCustomInviteUserMessageTextToDefaultRequest = exports.SetDefaultInviteUserMessageTextResponse = exports.SetDefaultInviteUserMessageTextRequest = exports.GetCustomInviteUserMessageTextResponse = exports.GetCustomInviteUserMessageTextRequest = exports.GetDefaultInviteUserMessageTextResponse = exports.GetDefaultInviteUserMessageTextRequest = exports.ResetCustomPasswordChangeMessageTextToDefaultResponse = exports.ResetCustomPasswordChangeMessageTextToDefaultRequest = exports.SetDefaultPasswordChangeMessageTextResponse = exports.SetDefaultPasswordChangeMessageTextRequest = exports.GetCustomPasswordChangeMessageTextResponse = exports.GetCustomPasswordChangeMessageTextRequest = exports.GetDefaultPasswordChangeMessageTextResponse = exports.GetDefaultPasswordChangeMessageTextRequest = void 0;
exports.AdminServiceDefinition = exports.GetRestrictionsResponse = exports.GetRestrictionsRequest = exports.SetRestrictionsResponse = exports.SelectLanguages = exports.SetRestrictionsRequest = exports.ListMilestonesResponse = exports.ListMilestonesRequest = exports.ActivateFeatureLoginDefaultOrgResponse = exports.ActivateFeatureLoginDefaultOrgRequest = exports.ListAggregateTypesResponse = exports.ListAggregateTypesRequest = exports.ListEventTypesResponse = exports.ListEventTypesRequest = exports.ListEventsResponse = exports.ListEventsRequest_creationDateRange = exports.ListEventsRequest = exports.ExportDataResponse = exports.ExportDataRequest_GCSOutput = exports.ExportDataRequest_S3Output = exports.ExportDataRequest_LocalOutput = exports.ExportDataRequest = exports.ImportDataSuccessUserMetadata = exports.ImportDataSuccessUserLinks = exports.ImportDataSuccessProjectGrantMember = exports.ImportDataSuccessProjectMember = exports.ImportDataSuccessUserGrant = exports.ImportDataSuccessProjectGrant = exports.ImportDataSuccessOrg = exports.ImportDataSuccess = exports.ImportDataError = exports.ImportDataResponse = exports.DataOrg = exports.ImportDataOrg = exports.ImportDataRequest_GCSInput = exports.ImportDataRequest_S3Input = exports.ImportDataRequest_LocalInput = exports.ImportDataRequest = void 0;
const wire_1 = require("@bufbuild/protobuf/wire");
const long_1 = __importDefault(require("long"));
const duration_js_1 = require("../google/protobuf/duration.js");
const timestamp_js_1 = require("../google/protobuf/timestamp.js");
const event_js_1 = require("./event.js");
const idp_js_1 = require("./idp.js");
const instance_js_1 = require("./instance.js");
const management_js_1 = require("./management.js");
const member_js_1 = require("./member.js");
const milestone_js_1 = require("./milestone/v1/milestone.js");
const object_js_1 = require("./object.js");
const org_js_1 = require("./org.js");
const policy_js_1 = require("./policy.js");
const settings_js_1 = require("./settings.js");
const text_js_1 = require("./text.js");
const user_js_1 = require("./user.js");
const v1_js_1 = require("./v1.js");
exports.protobufPackage = "zitadel.admin.v1";
function createBaseHealthzRequest() {
    return {};
}
exports.HealthzRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.HealthzRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseHealthzRequest();
        return message;
    },
};
function createBaseHealthzResponse() {
    return {};
}
exports.HealthzResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthzResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.HealthzResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseHealthzResponse();
        return message;
    },
};
function createBaseGetSupportedLanguagesRequest() {
    return {};
}
exports.GetSupportedLanguagesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetSupportedLanguagesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetSupportedLanguagesRequest();
        return message;
    },
};
function createBaseGetSupportedLanguagesResponse() {
    return { languages: [] };
}
exports.GetSupportedLanguagesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.languages) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupportedLanguagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.languages.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            languages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.languages)
                ? object.languages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.languages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.languages = message.languages;
        }
        return obj;
    },
    create(base) {
        return exports.GetSupportedLanguagesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSupportedLanguagesResponse();
        message.languages = ((_a = object.languages) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseGetAllowedLanguagesRequest() {
    return {};
}
exports.GetAllowedLanguagesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllowedLanguagesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetAllowedLanguagesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetAllowedLanguagesRequest();
        return message;
    },
};
function createBaseGetAllowedLanguagesResponse() {
    return { languages: [] };
}
exports.GetAllowedLanguagesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.languages) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetAllowedLanguagesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.languages.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            languages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.languages)
                ? object.languages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.languages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.languages = message.languages;
        }
        return obj;
    },
    create(base) {
        return exports.GetAllowedLanguagesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetAllowedLanguagesResponse();
        message.languages = ((_a = object.languages) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseSetDefaultLanguageRequest() {
    return { language: "" };
}
exports.SetDefaultLanguageRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultLanguageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultLanguageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetDefaultLanguageRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSetDefaultLanguageResponse() {
    return { details: undefined };
}
exports.SetDefaultLanguageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultLanguageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultLanguageResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultLanguageResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultLanguageRequest() {
    return {};
}
exports.GetDefaultLanguageRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLanguageRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetDefaultLanguageRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetDefaultLanguageRequest();
        return message;
    },
};
function createBaseGetDefaultLanguageResponse() {
    return { language: "" };
}
exports.GetDefaultLanguageResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLanguageResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultLanguageResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultLanguageResponse();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSetDefaultOrgRequest() {
    return { orgId: "" };
}
exports.SetDefaultOrgRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultOrgRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetDefaultOrgRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseSetDefaultOrgResponse() {
    return { details: undefined };
}
exports.SetDefaultOrgResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultOrgResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultOrgRequest() {
    return {};
}
exports.GetDefaultOrgRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetDefaultOrgRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetDefaultOrgRequest();
        return message;
    },
};
function createBaseGetDefaultOrgResponse() {
    return { org: undefined };
}
exports.GetDefaultOrgResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.org !== undefined) {
            org_js_1.Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.org = org_js_1.Org.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { org: isSet(object.org) ? org_js_1.Org.fromJSON(object.org) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.org !== undefined) {
            obj.org = org_js_1.Org.toJSON(message.org);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultOrgResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultOrgResponse();
        message.org = (object.org !== undefined && object.org !== null) ? org_js_1.Org.fromPartial(object.org) : undefined;
        return message;
    },
};
function createBaseGetMyInstanceRequest() {
    return {};
}
exports.GetMyInstanceRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyInstanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetMyInstanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetMyInstanceRequest();
        return message;
    },
};
function createBaseGetMyInstanceResponse() {
    return { instance: undefined };
}
exports.GetMyInstanceResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.instance !== undefined) {
            instance_js_1.InstanceDetail.encode(message.instance, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetMyInstanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.instance = instance_js_1.InstanceDetail.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { instance: isSet(object.instance) ? instance_js_1.InstanceDetail.fromJSON(object.instance) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.instance !== undefined) {
            obj.instance = instance_js_1.InstanceDetail.toJSON(message.instance);
        }
        return obj;
    },
    create(base) {
        return exports.GetMyInstanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetMyInstanceResponse();
        message.instance = (object.instance !== undefined && object.instance !== null)
            ? instance_js_1.InstanceDetail.fromPartial(object.instance)
            : undefined;
        return message;
    },
};
function createBaseListInstanceDomainsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
exports.ListInstanceDomainsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            instance_js_1.DomainSearchQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceDomainsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(instance_js_1.DomainSearchQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, instance_js_1.domainFieldNameFromJSON)(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries)
                ? object.queries.map((e) => instance_js_1.DomainSearchQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, instance_js_1.domainFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => instance_js_1.DomainSearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListInstanceDomainsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListInstanceDomainsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.queries = ((_b = object.queries) === null || _b === void 0 ? void 0 : _b.map((e) => instance_js_1.DomainSearchQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListInstanceDomainsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
exports.ListInstanceDomainsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            instance_js_1.Domain.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceDomainsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(instance_js_1.Domain.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, instance_js_1.domainFieldNameFromJSON)(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => instance_js_1.Domain.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, instance_js_1.domainFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => instance_js_1.Domain.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListInstanceDomainsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListInstanceDomainsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.result = ((_b = object.result) === null || _b === void 0 ? void 0 : _b.map((e) => instance_js_1.Domain.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListInstanceTrustedDomainsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
exports.ListInstanceTrustedDomainsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            instance_js_1.TrustedDomainSearchQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceTrustedDomainsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(instance_js_1.TrustedDomainSearchQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, instance_js_1.domainFieldNameFromJSON)(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries)
                ? object.queries.map((e) => instance_js_1.TrustedDomainSearchQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, instance_js_1.domainFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => instance_js_1.TrustedDomainSearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListInstanceTrustedDomainsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListInstanceTrustedDomainsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.queries = ((_b = object.queries) === null || _b === void 0 ? void 0 : _b.map((e) => instance_js_1.TrustedDomainSearchQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListInstanceTrustedDomainsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
exports.ListInstanceTrustedDomainsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            instance_js_1.TrustedDomain.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListInstanceTrustedDomainsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(instance_js_1.TrustedDomain.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, instance_js_1.domainFieldNameFromJSON)(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => instance_js_1.TrustedDomain.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, instance_js_1.domainFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => instance_js_1.TrustedDomain.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListInstanceTrustedDomainsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListInstanceTrustedDomainsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.result = ((_b = object.result) === null || _b === void 0 ? void 0 : _b.map((e) => instance_js_1.TrustedDomain.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddInstanceTrustedDomainRequest() {
    return { domain: "" };
}
exports.AddInstanceTrustedDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddInstanceTrustedDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.AddInstanceTrustedDomainRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddInstanceTrustedDomainRequest();
        message.domain = (_a = object.domain) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddInstanceTrustedDomainResponse() {
    return { details: undefined };
}
exports.AddInstanceTrustedDomainResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddInstanceTrustedDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddInstanceTrustedDomainResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddInstanceTrustedDomainResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveInstanceTrustedDomainRequest() {
    return { domain: "" };
}
exports.RemoveInstanceTrustedDomainRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.domain !== "") {
            writer.uint32(10).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveInstanceTrustedDomainRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { domain: isSet(object.domain) ? globalThis.String(object.domain) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveInstanceTrustedDomainRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveInstanceTrustedDomainRequest();
        message.domain = (_a = object.domain) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveInstanceTrustedDomainResponse() {
    return { details: undefined };
}
exports.RemoveInstanceTrustedDomainResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveInstanceTrustedDomainResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveInstanceTrustedDomainResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveInstanceTrustedDomainResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListSecretGeneratorsRequest() {
    return { query: undefined, queries: [] };
}
exports.ListSecretGeneratorsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            settings_js_1.SecretGeneratorQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSecretGeneratorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(settings_js_1.SecretGeneratorQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries)
                ? object.queries.map((e) => settings_js_1.SecretGeneratorQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => settings_js_1.SecretGeneratorQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListSecretGeneratorsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSecretGeneratorsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = ((_a = object.queries) === null || _a === void 0 ? void 0 : _a.map((e) => settings_js_1.SecretGeneratorQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListSecretGeneratorsResponse() {
    return { details: undefined, result: [] };
}
exports.ListSecretGeneratorsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            settings_js_1.SecretGenerator.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSecretGeneratorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(settings_js_1.SecretGenerator.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result)
                ? object.result.map((e) => settings_js_1.SecretGenerator.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => settings_js_1.SecretGenerator.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListSecretGeneratorsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSecretGeneratorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => settings_js_1.SecretGenerator.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetSecretGeneratorRequest() {
    return { generatorType: 0 };
}
exports.GetSecretGeneratorRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.generatorType !== 0) {
            writer.uint32(8).int32(message.generatorType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecretGeneratorRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.generatorType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { generatorType: isSet(object.generatorType) ? (0, settings_js_1.secretGeneratorTypeFromJSON)(object.generatorType) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.generatorType !== 0) {
            obj.generatorType = (0, settings_js_1.secretGeneratorTypeToJSON)(message.generatorType);
        }
        return obj;
    },
    create(base) {
        return exports.GetSecretGeneratorRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSecretGeneratorRequest();
        message.generatorType = (_a = object.generatorType) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseGetSecretGeneratorResponse() {
    return { secretGenerator: undefined };
}
exports.GetSecretGeneratorResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.secretGenerator !== undefined) {
            settings_js_1.SecretGenerator.encode(message.secretGenerator, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecretGeneratorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.secretGenerator = settings_js_1.SecretGenerator.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            secretGenerator: isSet(object.secretGenerator) ? settings_js_1.SecretGenerator.fromJSON(object.secretGenerator) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.secretGenerator !== undefined) {
            obj.secretGenerator = settings_js_1.SecretGenerator.toJSON(message.secretGenerator);
        }
        return obj;
    },
    create(base) {
        return exports.GetSecretGeneratorResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSecretGeneratorResponse();
        message.secretGenerator = (object.secretGenerator !== undefined && object.secretGenerator !== null)
            ? settings_js_1.SecretGenerator.fromPartial(object.secretGenerator)
            : undefined;
        return message;
    },
};
function createBaseUpdateSecretGeneratorRequest() {
    return {
        generatorType: 0,
        length: 0,
        expiry: undefined,
        includeLowerLetters: false,
        includeUpperLetters: false,
        includeDigits: false,
        includeSymbols: false,
    };
}
exports.UpdateSecretGeneratorRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.generatorType !== 0) {
            writer.uint32(8).int32(message.generatorType);
        }
        if (message.length !== 0) {
            writer.uint32(16).uint32(message.length);
        }
        if (message.expiry !== undefined) {
            duration_js_1.Duration.encode(message.expiry, writer.uint32(26).fork()).join();
        }
        if (message.includeLowerLetters !== false) {
            writer.uint32(32).bool(message.includeLowerLetters);
        }
        if (message.includeUpperLetters !== false) {
            writer.uint32(40).bool(message.includeUpperLetters);
        }
        if (message.includeDigits !== false) {
            writer.uint32(48).bool(message.includeDigits);
        }
        if (message.includeSymbols !== false) {
            writer.uint32(56).bool(message.includeSymbols);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSecretGeneratorRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.generatorType = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.length = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.expiry = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.includeLowerLetters = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.includeUpperLetters = reader.bool();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.includeDigits = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.includeSymbols = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            generatorType: isSet(object.generatorType) ? (0, settings_js_1.secretGeneratorTypeFromJSON)(object.generatorType) : 0,
            length: isSet(object.length) ? globalThis.Number(object.length) : 0,
            expiry: isSet(object.expiry) ? duration_js_1.Duration.fromJSON(object.expiry) : undefined,
            includeLowerLetters: isSet(object.includeLowerLetters) ? globalThis.Boolean(object.includeLowerLetters) : false,
            includeUpperLetters: isSet(object.includeUpperLetters) ? globalThis.Boolean(object.includeUpperLetters) : false,
            includeDigits: isSet(object.includeDigits) ? globalThis.Boolean(object.includeDigits) : false,
            includeSymbols: isSet(object.includeSymbols) ? globalThis.Boolean(object.includeSymbols) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.generatorType !== 0) {
            obj.generatorType = (0, settings_js_1.secretGeneratorTypeToJSON)(message.generatorType);
        }
        if (message.length !== 0) {
            obj.length = Math.round(message.length);
        }
        if (message.expiry !== undefined) {
            obj.expiry = duration_js_1.Duration.toJSON(message.expiry);
        }
        if (message.includeLowerLetters !== false) {
            obj.includeLowerLetters = message.includeLowerLetters;
        }
        if (message.includeUpperLetters !== false) {
            obj.includeUpperLetters = message.includeUpperLetters;
        }
        if (message.includeDigits !== false) {
            obj.includeDigits = message.includeDigits;
        }
        if (message.includeSymbols !== false) {
            obj.includeSymbols = message.includeSymbols;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSecretGeneratorRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateSecretGeneratorRequest();
        message.generatorType = (_a = object.generatorType) !== null && _a !== void 0 ? _a : 0;
        message.length = (_b = object.length) !== null && _b !== void 0 ? _b : 0;
        message.expiry = (object.expiry !== undefined && object.expiry !== null)
            ? duration_js_1.Duration.fromPartial(object.expiry)
            : undefined;
        message.includeLowerLetters = (_c = object.includeLowerLetters) !== null && _c !== void 0 ? _c : false;
        message.includeUpperLetters = (_d = object.includeUpperLetters) !== null && _d !== void 0 ? _d : false;
        message.includeDigits = (_e = object.includeDigits) !== null && _e !== void 0 ? _e : false;
        message.includeSymbols = (_f = object.includeSymbols) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseUpdateSecretGeneratorResponse() {
    return { details: undefined };
}
exports.UpdateSecretGeneratorResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSecretGeneratorResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSecretGeneratorResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSecretGeneratorResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetSMTPConfigRequest() {
    return {};
}
exports.GetSMTPConfigRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetSMTPConfigRequest();
        return message;
    },
};
function createBaseGetSMTPConfigResponse() {
    return { smtpConfig: undefined };
}
exports.GetSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.smtpConfig !== undefined) {
            settings_js_1.SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.smtpConfig = settings_js_1.SMTPConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { smtpConfig: isSet(object.smtpConfig) ? settings_js_1.SMTPConfig.fromJSON(object.smtpConfig) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.smtpConfig !== undefined) {
            obj.smtpConfig = settings_js_1.SMTPConfig.toJSON(message.smtpConfig);
        }
        return obj;
    },
    create(base) {
        return exports.GetSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSMTPConfigResponse();
        message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
            ? settings_js_1.SMTPConfig.fromPartial(object.smtpConfig)
            : undefined;
        return message;
    },
};
function createBaseGetSMTPConfigByIdRequest() {
    return { id: "" };
}
exports.GetSMTPConfigByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetSMTPConfigByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSMTPConfigByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSMTPConfigByIdResponse() {
    return { smtpConfig: undefined };
}
exports.GetSMTPConfigByIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.smtpConfig !== undefined) {
            settings_js_1.SMTPConfig.encode(message.smtpConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMTPConfigByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.smtpConfig = settings_js_1.SMTPConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { smtpConfig: isSet(object.smtpConfig) ? settings_js_1.SMTPConfig.fromJSON(object.smtpConfig) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.smtpConfig !== undefined) {
            obj.smtpConfig = settings_js_1.SMTPConfig.toJSON(message.smtpConfig);
        }
        return obj;
    },
    create(base) {
        return exports.GetSMTPConfigByIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSMTPConfigByIdResponse();
        message.smtpConfig = (object.smtpConfig !== undefined && object.smtpConfig !== null)
            ? settings_js_1.SMTPConfig.fromPartial(object.smtpConfig)
            : undefined;
        return message;
    },
};
function createBaseListSMTPConfigsRequest() {
    return { query: undefined };
}
exports.ListSMTPConfigsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMTPConfigsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ListSMTPConfigsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListSMTPConfigsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListSMTPConfigsResponse() {
    return { details: undefined, result: [] };
}
exports.ListSMTPConfigsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            settings_js_1.SMTPConfig.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMTPConfigsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(settings_js_1.SMTPConfig.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => settings_js_1.SMTPConfig.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => settings_js_1.SMTPConfig.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListSMTPConfigsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSMTPConfigsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => settings_js_1.SMTPConfig.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        replyToAddress: "",
        description: "",
    };
}
exports.AddSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(58).string(message.replyToAddress);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAddSMTPConfigRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.password = (_f = object.password) !== null && _f !== void 0 ? _f : "";
        message.replyToAddress = (_g = object.replyToAddress) !== null && _g !== void 0 ? _g : "";
        message.description = (_h = object.description) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseAddSMTPConfigResponse() {
    return { details: undefined, id: "" };
}
exports.AddSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        replyToAddress: "",
        password: "",
        description: "",
        id: "",
    };
}
exports.UpdateSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(50).string(message.replyToAddress);
        }
        if (message.password !== "") {
            writer.uint32(58).string(message.password);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        if (message.id !== "") {
            writer.uint32(74).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateSMTPConfigRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.replyToAddress = (_f = object.replyToAddress) !== null && _f !== void 0 ? _f : "";
        message.password = (_g = object.password) !== null && _g !== void 0 ? _g : "";
        message.description = (_h = object.description) !== null && _h !== void 0 ? _h : "";
        message.id = (_j = object.id) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseUpdateSMTPConfigResponse() {
    return { details: undefined };
}
exports.UpdateSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateSMTPConfigPasswordRequest() {
    return { password: "", id: "" };
}
exports.UpdateSMTPConfigPasswordRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.password !== "") {
            writer.uint32(10).string(message.password);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigPasswordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMTPConfigPasswordRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateSMTPConfigPasswordRequest();
        message.password = (_a = object.password) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUpdateSMTPConfigPasswordResponse() {
    return { details: undefined };
}
exports.UpdateSMTPConfigPasswordResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMTPConfigPasswordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMTPConfigPasswordResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMTPConfigPasswordResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateSMTPConfigRequest() {
    return { id: "" };
}
exports.ActivateSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.ActivateSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseActivateSMTPConfigRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseActivateSMTPConfigResponse() {
    return { details: undefined };
}
exports.ActivateSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateSMTPConfigRequest() {
    return { id: "" };
}
exports.DeactivateSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeactivateSMTPConfigRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeactivateSMTPConfigResponse() {
    return { details: undefined };
}
exports.DeactivateSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSMTPConfigRequest() {
    return { id: "" };
}
exports.RemoveSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveSMTPConfigRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveSMTPConfigResponse() {
    return { details: undefined };
}
exports.RemoveSMTPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMTPConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseTestSMTPConfigByIdRequest() {
    return { id: "", receiverAddress: "" };
}
exports.TestSMTPConfigByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(18).string(message.receiverAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        return obj;
    },
    create(base) {
        return exports.TestSMTPConfigByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTestSMTPConfigByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.receiverAddress = (_b = object.receiverAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTestSMTPConfigByIdResponse() {
    return {};
}
exports.TestSMTPConfigByIdResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.TestSMTPConfigByIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseTestSMTPConfigByIdResponse();
        return message;
    },
};
function createBaseTestSMTPConfigRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        receiverAddress: "",
        id: "",
    };
}
exports.TestSMTPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(58).string(message.receiverAddress);
        }
        if (message.id !== "") {
            writer.uint32(66).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.TestSMTPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseTestSMTPConfigRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.password = (_f = object.password) !== null && _f !== void 0 ? _f : "";
        message.receiverAddress = (_g = object.receiverAddress) !== null && _g !== void 0 ? _g : "";
        message.id = (_h = object.id) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseTestSMTPConfigResponse() {
    return {};
}
exports.TestSMTPConfigResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestSMTPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.TestSMTPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseTestSMTPConfigResponse();
        return message;
    },
};
function createBaseGetEmailProviderRequest() {
    return {};
}
exports.GetEmailProviderRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetEmailProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetEmailProviderRequest();
        return message;
    },
};
function createBaseGetEmailProviderResponse() {
    return { config: undefined };
}
exports.GetEmailProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.config !== undefined) {
            settings_js_1.EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.config = settings_js_1.EmailProvider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? settings_js_1.EmailProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = settings_js_1.EmailProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return exports.GetEmailProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetEmailProviderResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? settings_js_1.EmailProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseGetEmailProviderByIdRequest() {
    return { id: "" };
}
exports.GetEmailProviderByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetEmailProviderByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetEmailProviderByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetEmailProviderByIdResponse() {
    return { config: undefined };
}
exports.GetEmailProviderByIdResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.config !== undefined) {
            settings_js_1.EmailProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetEmailProviderByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.config = settings_js_1.EmailProvider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? settings_js_1.EmailProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = settings_js_1.EmailProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return exports.GetEmailProviderByIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetEmailProviderByIdResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? settings_js_1.EmailProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseListEmailProvidersRequest() {
    return { query: undefined };
}
exports.ListEmailProvidersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEmailProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ListEmailProvidersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListEmailProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListEmailProvidersResponse() {
    return { details: undefined, result: [] };
}
exports.ListEmailProvidersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            settings_js_1.EmailProvider.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEmailProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(settings_js_1.EmailProvider.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => settings_js_1.EmailProvider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => settings_js_1.EmailProvider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListEmailProvidersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListEmailProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => settings_js_1.EmailProvider.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        replyToAddress: "",
        description: "",
    };
}
exports.AddEmailProviderSMTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(58).string(message.replyToAddress);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.AddEmailProviderSMTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAddEmailProviderSMTPRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.password = (_f = object.password) !== null && _f !== void 0 ? _f : "";
        message.replyToAddress = (_g = object.replyToAddress) !== null && _g !== void 0 ? _g : "";
        message.description = (_h = object.description) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseAddEmailProviderSMTPResponse() {
    return { details: undefined, id: "" };
}
exports.AddEmailProviderSMTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddEmailProviderSMTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddEmailProviderSMTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        replyToAddress: "",
        password: "",
        description: "",
        id: "",
    };
}
exports.UpdateEmailProviderSMTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.replyToAddress !== "") {
            writer.uint32(50).string(message.replyToAddress);
        }
        if (message.password !== "") {
            writer.uint32(58).string(message.password);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        if (message.id !== "") {
            writer.uint32(74).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.replyToAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            replyToAddress: isSet(object.replyToAddress) ? globalThis.String(object.replyToAddress) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.replyToAddress !== "") {
            obj.replyToAddress = message.replyToAddress;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderSMTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateEmailProviderSMTPRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.replyToAddress = (_f = object.replyToAddress) !== null && _f !== void 0 ? _f : "";
        message.password = (_g = object.password) !== null && _g !== void 0 ? _g : "";
        message.description = (_h = object.description) !== null && _h !== void 0 ? _h : "";
        message.id = (_j = object.id) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPResponse() {
    return { details: undefined };
}
exports.UpdateEmailProviderSMTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderSMTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPPasswordRequest() {
    return { password: "", id: "" };
}
exports.UpdateEmailProviderSMTPPasswordRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.password !== "") {
            writer.uint32(10).string(message.password);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderSMTPPasswordRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateEmailProviderSMTPPasswordRequest();
        message.password = (_a = object.password) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUpdateEmailProviderSMTPPasswordResponse() {
    return { details: undefined };
}
exports.UpdateEmailProviderSMTPPasswordResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderSMTPPasswordResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderSMTPPasswordResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddEmailProviderHTTPRequest() {
    return { endpoint: "", description: "" };
}
exports.AddEmailProviderHTTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.endpoint !== "") {
            writer.uint32(10).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.AddEmailProviderHTTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddEmailProviderHTTPRequest();
        message.endpoint = (_a = object.endpoint) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddEmailProviderHTTPResponse() {
    return { details: undefined, id: "" };
}
exports.AddEmailProviderHTTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddEmailProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddEmailProviderHTTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddEmailProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateEmailProviderHTTPRequest() {
    return { id: "", endpoint: "", description: "" };
}
exports.UpdateEmailProviderHTTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderHTTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateEmailProviderHTTPRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.endpoint = (_b = object.endpoint) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUpdateEmailProviderHTTPResponse() {
    return { details: undefined };
}
exports.UpdateEmailProviderHTTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateEmailProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateEmailProviderHTTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateEmailProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateEmailProviderRequest() {
    return { id: "" };
}
exports.ActivateEmailProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.ActivateEmailProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseActivateEmailProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseActivateEmailProviderResponse() {
    return { details: undefined };
}
exports.ActivateEmailProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateEmailProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseActivateEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateEmailProviderRequest() {
    return { id: "" };
}
exports.DeactivateEmailProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateEmailProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeactivateEmailProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeactivateEmailProviderResponse() {
    return { details: undefined };
}
exports.DeactivateEmailProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateEmailProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveEmailProviderRequest() {
    return { id: "" };
}
exports.RemoveEmailProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveEmailProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveEmailProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveEmailProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveEmailProviderResponse() {
    return { details: undefined };
}
exports.RemoveEmailProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveEmailProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveEmailProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveEmailProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseTestEmailProviderSMTPByIdRequest() {
    return { id: "", receiverAddress: "" };
}
exports.TestEmailProviderSMTPByIdRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(18).string(message.receiverAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        return obj;
    },
    create(base) {
        return exports.TestEmailProviderSMTPByIdRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTestEmailProviderSMTPByIdRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.receiverAddress = (_b = object.receiverAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTestEmailProviderSMTPByIdResponse() {
    return {};
}
exports.TestEmailProviderSMTPByIdResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.TestEmailProviderSMTPByIdResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseTestEmailProviderSMTPByIdResponse();
        return message;
    },
};
function createBaseTestEmailProviderSMTPRequest() {
    return {
        senderAddress: "",
        senderName: "",
        tls: false,
        host: "",
        user: "",
        password: "",
        receiverAddress: "",
        id: "",
    };
}
exports.TestEmailProviderSMTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.senderAddress !== "") {
            writer.uint32(10).string(message.senderAddress);
        }
        if (message.senderName !== "") {
            writer.uint32(18).string(message.senderName);
        }
        if (message.tls !== false) {
            writer.uint32(24).bool(message.tls);
        }
        if (message.host !== "") {
            writer.uint32(34).string(message.host);
        }
        if (message.user !== "") {
            writer.uint32(42).string(message.user);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        if (message.receiverAddress !== "") {
            writer.uint32(58).string(message.receiverAddress);
        }
        if (message.id !== "") {
            writer.uint32(66).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.senderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.senderName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.tls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.host = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.user = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.receiverAddress = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            senderAddress: isSet(object.senderAddress) ? globalThis.String(object.senderAddress) : "",
            senderName: isSet(object.senderName) ? globalThis.String(object.senderName) : "",
            tls: isSet(object.tls) ? globalThis.Boolean(object.tls) : false,
            host: isSet(object.host) ? globalThis.String(object.host) : "",
            user: isSet(object.user) ? globalThis.String(object.user) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            receiverAddress: isSet(object.receiverAddress) ? globalThis.String(object.receiverAddress) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.senderAddress !== "") {
            obj.senderAddress = message.senderAddress;
        }
        if (message.senderName !== "") {
            obj.senderName = message.senderName;
        }
        if (message.tls !== false) {
            obj.tls = message.tls;
        }
        if (message.host !== "") {
            obj.host = message.host;
        }
        if (message.user !== "") {
            obj.user = message.user;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.receiverAddress !== "") {
            obj.receiverAddress = message.receiverAddress;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.TestEmailProviderSMTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseTestEmailProviderSMTPRequest();
        message.senderAddress = (_a = object.senderAddress) !== null && _a !== void 0 ? _a : "";
        message.senderName = (_b = object.senderName) !== null && _b !== void 0 ? _b : "";
        message.tls = (_c = object.tls) !== null && _c !== void 0 ? _c : false;
        message.host = (_d = object.host) !== null && _d !== void 0 ? _d : "";
        message.user = (_e = object.user) !== null && _e !== void 0 ? _e : "";
        message.password = (_f = object.password) !== null && _f !== void 0 ? _f : "";
        message.receiverAddress = (_g = object.receiverAddress) !== null && _g !== void 0 ? _g : "";
        message.id = (_h = object.id) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseTestEmailProviderSMTPResponse() {
    return {};
}
exports.TestEmailProviderSMTPResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestEmailProviderSMTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.TestEmailProviderSMTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseTestEmailProviderSMTPResponse();
        return message;
    },
};
function createBaseListSMSProvidersRequest() {
    return { query: undefined };
}
exports.ListSMSProvidersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMSProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ListSMSProvidersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListSMSProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListSMSProvidersResponse() {
    return { details: undefined, result: [] };
}
exports.ListSMSProvidersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            settings_js_1.SMSProvider.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSMSProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(settings_js_1.SMSProvider.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => settings_js_1.SMSProvider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => settings_js_1.SMSProvider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListSMSProvidersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSMSProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => settings_js_1.SMSProvider.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetSMSProviderRequest() {
    return { id: "" };
}
exports.GetSMSProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetSMSProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSMSProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSMSProviderResponse() {
    return { config: undefined };
}
exports.GetSMSProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.config !== undefined) {
            settings_js_1.SMSProvider.encode(message.config, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.config = settings_js_1.SMSProvider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { config: isSet(object.config) ? settings_js_1.SMSProvider.fromJSON(object.config) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = settings_js_1.SMSProvider.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return exports.GetSMSProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSMSProviderResponse();
        message.config = (object.config !== undefined && object.config !== null)
            ? settings_js_1.SMSProvider.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseAddSMSProviderTwilioRequest() {
    return { sid: "", token: "", senderNumber: "", description: "", verifyServiceSid: "" };
}
exports.AddSMSProviderTwilioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sid !== "") {
            writer.uint32(10).string(message.sid);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        if (message.senderNumber !== "") {
            writer.uint32(26).string(message.senderNumber);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.verifyServiceSid !== "") {
            writer.uint32(42).string(message.verifyServiceSid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderTwilioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sid = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.senderNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.verifyServiceSid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sid !== "") {
            obj.sid = message.sid;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        if (message.senderNumber !== "") {
            obj.senderNumber = message.senderNumber;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.verifyServiceSid !== "") {
            obj.verifyServiceSid = message.verifyServiceSid;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMSProviderTwilioRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAddSMSProviderTwilioRequest();
        message.sid = (_a = object.sid) !== null && _a !== void 0 ? _a : "";
        message.token = (_b = object.token) !== null && _b !== void 0 ? _b : "";
        message.senderNumber = (_c = object.senderNumber) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.verifyServiceSid = (_e = object.verifyServiceSid) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseAddSMSProviderTwilioResponse() {
    return { details: undefined, id: "" };
}
exports.AddSMSProviderTwilioResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderTwilioResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMSProviderTwilioResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddSMSProviderTwilioResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioRequest() {
    return { id: "", sid: "", senderNumber: "", description: "", verifyServiceSid: "" };
}
exports.UpdateSMSProviderTwilioRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sid !== "") {
            writer.uint32(18).string(message.sid);
        }
        if (message.senderNumber !== "") {
            writer.uint32(26).string(message.senderNumber);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.verifyServiceSid !== "") {
            writer.uint32(42).string(message.verifyServiceSid);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.sid = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.senderNumber = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.verifyServiceSid = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
            senderNumber: isSet(object.senderNumber) ? globalThis.String(object.senderNumber) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            verifyServiceSid: isSet(object.verifyServiceSid) ? globalThis.String(object.verifyServiceSid) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.sid !== "") {
            obj.sid = message.sid;
        }
        if (message.senderNumber !== "") {
            obj.senderNumber = message.senderNumber;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.verifyServiceSid !== "") {
            obj.verifyServiceSid = message.verifyServiceSid;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderTwilioRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateSMSProviderTwilioRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.sid = (_b = object.sid) !== null && _b !== void 0 ? _b : "";
        message.senderNumber = (_c = object.senderNumber) !== null && _c !== void 0 ? _c : "";
        message.description = (_d = object.description) !== null && _d !== void 0 ? _d : "";
        message.verifyServiceSid = (_e = object.verifyServiceSid) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioResponse() {
    return { details: undefined };
}
exports.UpdateSMSProviderTwilioResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderTwilioResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioTokenRequest() {
    return { id: "", token: "" };
}
exports.UpdateSMSProviderTwilioTokenRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.token !== "") {
            writer.uint32(18).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            token: isSet(object.token) ? globalThis.String(object.token) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.token !== "") {
            obj.token = message.token;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderTwilioTokenRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateSMSProviderTwilioTokenRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.token = (_b = object.token) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseUpdateSMSProviderTwilioTokenResponse() {
    return { details: undefined };
}
exports.UpdateSMSProviderTwilioTokenResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderTwilioTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderTwilioTokenResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderTwilioTokenResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddSMSProviderHTTPRequest() {
    return { endpoint: "", description: "" };
}
exports.AddSMSProviderHTTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.endpoint !== "") {
            writer.uint32(10).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMSProviderHTTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddSMSProviderHTTPRequest();
        message.endpoint = (_a = object.endpoint) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseAddSMSProviderHTTPResponse() {
    return { details: undefined, id: "" };
}
exports.AddSMSProviderHTTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSMSProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddSMSProviderHTTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddSMSProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateSMSProviderHTTPRequest() {
    return { id: "", endpoint: "", description: "" };
}
exports.UpdateSMSProviderHTTPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.description !== "") {
            writer.uint32(26).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderHTTPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderHTTPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateSMSProviderHTTPRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.endpoint = (_b = object.endpoint) !== null && _b !== void 0 ? _b : "";
        message.description = (_c = object.description) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseUpdateSMSProviderHTTPResponse() {
    return { details: undefined };
}
exports.UpdateSMSProviderHTTPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSMSProviderHTTPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSMSProviderHTTPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSMSProviderHTTPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateSMSProviderRequest() {
    return { id: "" };
}
exports.ActivateSMSProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.ActivateSMSProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseActivateSMSProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseActivateSMSProviderResponse() {
    return { details: undefined };
}
exports.ActivateSMSProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateSMSProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseActivateSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateSMSProviderRequest() {
    return { id: "" };
}
exports.DeactivateSMSProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateSMSProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeactivateSMSProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeactivateSMSProviderResponse() {
    return { details: undefined };
}
exports.DeactivateSMSProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateSMSProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSMSProviderRequest() {
    return { id: "" };
}
exports.RemoveSMSProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMSProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSMSProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveSMSProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveSMSProviderResponse() {
    return { details: undefined };
}
exports.RemoveSMSProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSMSProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSMSProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSMSProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetFileSystemNotificationProviderRequest() {
    return {};
}
exports.GetFileSystemNotificationProviderRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileSystemNotificationProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetFileSystemNotificationProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetFileSystemNotificationProviderRequest();
        return message;
    },
};
function createBaseGetFileSystemNotificationProviderResponse() {
    return { provider: undefined };
}
exports.GetFileSystemNotificationProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.provider !== undefined) {
            settings_js_1.DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetFileSystemNotificationProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.provider = settings_js_1.DebugNotificationProvider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { provider: isSet(object.provider) ? settings_js_1.DebugNotificationProvider.fromJSON(object.provider) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.provider !== undefined) {
            obj.provider = settings_js_1.DebugNotificationProvider.toJSON(message.provider);
        }
        return obj;
    },
    create(base) {
        return exports.GetFileSystemNotificationProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetFileSystemNotificationProviderResponse();
        message.provider = (object.provider !== undefined && object.provider !== null)
            ? settings_js_1.DebugNotificationProvider.fromPartial(object.provider)
            : undefined;
        return message;
    },
};
function createBaseGetLogNotificationProviderRequest() {
    return {};
}
exports.GetLogNotificationProviderRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLogNotificationProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetLogNotificationProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetLogNotificationProviderRequest();
        return message;
    },
};
function createBaseGetLogNotificationProviderResponse() {
    return { provider: undefined };
}
exports.GetLogNotificationProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.provider !== undefined) {
            settings_js_1.DebugNotificationProvider.encode(message.provider, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLogNotificationProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.provider = settings_js_1.DebugNotificationProvider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { provider: isSet(object.provider) ? settings_js_1.DebugNotificationProvider.fromJSON(object.provider) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.provider !== undefined) {
            obj.provider = settings_js_1.DebugNotificationProvider.toJSON(message.provider);
        }
        return obj;
    },
    create(base) {
        return exports.GetLogNotificationProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetLogNotificationProviderResponse();
        message.provider = (object.provider !== undefined && object.provider !== null)
            ? settings_js_1.DebugNotificationProvider.fromPartial(object.provider)
            : undefined;
        return message;
    },
};
function createBaseGetOIDCSettingsRequest() {
    return {};
}
exports.GetOIDCSettingsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetOIDCSettingsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetOIDCSettingsRequest();
        return message;
    },
};
function createBaseGetOIDCSettingsResponse() {
    return { settings: undefined };
}
exports.GetOIDCSettingsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.settings !== undefined) {
            settings_js_1.OIDCSettings.encode(message.settings, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.settings = settings_js_1.OIDCSettings.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { settings: isSet(object.settings) ? settings_js_1.OIDCSettings.fromJSON(object.settings) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.settings !== undefined) {
            obj.settings = settings_js_1.OIDCSettings.toJSON(message.settings);
        }
        return obj;
    },
    create(base) {
        return exports.GetOIDCSettingsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOIDCSettingsResponse();
        message.settings = (object.settings !== undefined && object.settings !== null)
            ? settings_js_1.OIDCSettings.fromPartial(object.settings)
            : undefined;
        return message;
    },
};
function createBaseAddOIDCSettingsRequest() {
    return {
        accessTokenLifetime: undefined,
        idTokenLifetime: undefined,
        refreshTokenIdleExpiration: undefined,
        refreshTokenExpiration: undefined,
    };
}
exports.AddOIDCSettingsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessTokenLifetime !== undefined) {
            duration_js_1.Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
        }
        if (message.idTokenLifetime !== undefined) {
            duration_js_1.Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            duration_js_1.Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
        }
        if (message.refreshTokenExpiration !== undefined) {
            duration_js_1.Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accessTokenLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idTokenLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.refreshTokenIdleExpiration = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshTokenExpiration = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokenLifetime: isSet(object.accessTokenLifetime)
                ? duration_js_1.Duration.fromJSON(object.accessTokenLifetime)
                : undefined,
            idTokenLifetime: isSet(object.idTokenLifetime) ? duration_js_1.Duration.fromJSON(object.idTokenLifetime) : undefined,
            refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
                ? duration_js_1.Duration.fromJSON(object.refreshTokenIdleExpiration)
                : undefined,
            refreshTokenExpiration: isSet(object.refreshTokenExpiration)
                ? duration_js_1.Duration.fromJSON(object.refreshTokenExpiration)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokenLifetime !== undefined) {
            obj.accessTokenLifetime = duration_js_1.Duration.toJSON(message.accessTokenLifetime);
        }
        if (message.idTokenLifetime !== undefined) {
            obj.idTokenLifetime = duration_js_1.Duration.toJSON(message.idTokenLifetime);
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            obj.refreshTokenIdleExpiration = duration_js_1.Duration.toJSON(message.refreshTokenIdleExpiration);
        }
        if (message.refreshTokenExpiration !== undefined) {
            obj.refreshTokenExpiration = duration_js_1.Duration.toJSON(message.refreshTokenExpiration);
        }
        return obj;
    },
    create(base) {
        return exports.AddOIDCSettingsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCSettingsRequest();
        message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
            ? duration_js_1.Duration.fromPartial(object.accessTokenLifetime)
            : undefined;
        message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
            ? duration_js_1.Duration.fromPartial(object.idTokenLifetime)
            : undefined;
        message.refreshTokenIdleExpiration =
            (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
                ? duration_js_1.Duration.fromPartial(object.refreshTokenIdleExpiration)
                : undefined;
        message.refreshTokenExpiration =
            (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
                ? duration_js_1.Duration.fromPartial(object.refreshTokenExpiration)
                : undefined;
        return message;
    },
};
function createBaseAddOIDCSettingsResponse() {
    return { details: undefined };
}
exports.AddOIDCSettingsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddOIDCSettingsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddOIDCSettingsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateOIDCSettingsRequest() {
    return {
        accessTokenLifetime: undefined,
        idTokenLifetime: undefined,
        refreshTokenIdleExpiration: undefined,
        refreshTokenExpiration: undefined,
    };
}
exports.UpdateOIDCSettingsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessTokenLifetime !== undefined) {
            duration_js_1.Duration.encode(message.accessTokenLifetime, writer.uint32(10).fork()).join();
        }
        if (message.idTokenLifetime !== undefined) {
            duration_js_1.Duration.encode(message.idTokenLifetime, writer.uint32(18).fork()).join();
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            duration_js_1.Duration.encode(message.refreshTokenIdleExpiration, writer.uint32(26).fork()).join();
        }
        if (message.refreshTokenExpiration !== undefined) {
            duration_js_1.Duration.encode(message.refreshTokenExpiration, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOIDCSettingsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accessTokenLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idTokenLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.refreshTokenIdleExpiration = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.refreshTokenExpiration = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accessTokenLifetime: isSet(object.accessTokenLifetime)
                ? duration_js_1.Duration.fromJSON(object.accessTokenLifetime)
                : undefined,
            idTokenLifetime: isSet(object.idTokenLifetime) ? duration_js_1.Duration.fromJSON(object.idTokenLifetime) : undefined,
            refreshTokenIdleExpiration: isSet(object.refreshTokenIdleExpiration)
                ? duration_js_1.Duration.fromJSON(object.refreshTokenIdleExpiration)
                : undefined,
            refreshTokenExpiration: isSet(object.refreshTokenExpiration)
                ? duration_js_1.Duration.fromJSON(object.refreshTokenExpiration)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accessTokenLifetime !== undefined) {
            obj.accessTokenLifetime = duration_js_1.Duration.toJSON(message.accessTokenLifetime);
        }
        if (message.idTokenLifetime !== undefined) {
            obj.idTokenLifetime = duration_js_1.Duration.toJSON(message.idTokenLifetime);
        }
        if (message.refreshTokenIdleExpiration !== undefined) {
            obj.refreshTokenIdleExpiration = duration_js_1.Duration.toJSON(message.refreshTokenIdleExpiration);
        }
        if (message.refreshTokenExpiration !== undefined) {
            obj.refreshTokenExpiration = duration_js_1.Duration.toJSON(message.refreshTokenExpiration);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOIDCSettingsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOIDCSettingsRequest();
        message.accessTokenLifetime = (object.accessTokenLifetime !== undefined && object.accessTokenLifetime !== null)
            ? duration_js_1.Duration.fromPartial(object.accessTokenLifetime)
            : undefined;
        message.idTokenLifetime = (object.idTokenLifetime !== undefined && object.idTokenLifetime !== null)
            ? duration_js_1.Duration.fromPartial(object.idTokenLifetime)
            : undefined;
        message.refreshTokenIdleExpiration =
            (object.refreshTokenIdleExpiration !== undefined && object.refreshTokenIdleExpiration !== null)
                ? duration_js_1.Duration.fromPartial(object.refreshTokenIdleExpiration)
                : undefined;
        message.refreshTokenExpiration =
            (object.refreshTokenExpiration !== undefined && object.refreshTokenExpiration !== null)
                ? duration_js_1.Duration.fromPartial(object.refreshTokenExpiration)
                : undefined;
        return message;
    },
};
function createBaseUpdateOIDCSettingsResponse() {
    return { details: undefined };
}
exports.UpdateOIDCSettingsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOIDCSettingsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOIDCSettingsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOIDCSettingsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetSecurityPolicyRequest() {
    return {};
}
exports.GetSecurityPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecurityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetSecurityPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetSecurityPolicyRequest();
        return message;
    },
};
function createBaseGetSecurityPolicyResponse() {
    return { policy: undefined };
}
exports.GetSecurityPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            settings_js_1.SecurityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSecurityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = settings_js_1.SecurityPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? settings_js_1.SecurityPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = settings_js_1.SecurityPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetSecurityPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSecurityPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? settings_js_1.SecurityPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseSetSecurityPolicyRequest() {
    return { enableIframeEmbedding: false, allowedOrigins: [], enableImpersonation: false };
}
exports.SetSecurityPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enableIframeEmbedding !== false) {
            writer.uint32(8).bool(message.enableIframeEmbedding);
        }
        for (const v of message.allowedOrigins) {
            writer.uint32(18).string(v);
        }
        if (message.enableImpersonation !== false) {
            writer.uint32(24).bool(message.enableImpersonation);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetSecurityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enableIframeEmbedding = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.allowedOrigins.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.enableImpersonation = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enableIframeEmbedding: isSet(object.enableIframeEmbedding)
                ? globalThis.Boolean(object.enableIframeEmbedding)
                : false,
            allowedOrigins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allowedOrigins)
                ? object.allowedOrigins.map((e) => globalThis.String(e))
                : [],
            enableImpersonation: isSet(object.enableImpersonation) ? globalThis.Boolean(object.enableImpersonation) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.enableIframeEmbedding !== false) {
            obj.enableIframeEmbedding = message.enableIframeEmbedding;
        }
        if ((_a = message.allowedOrigins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.allowedOrigins = message.allowedOrigins;
        }
        if (message.enableImpersonation !== false) {
            obj.enableImpersonation = message.enableImpersonation;
        }
        return obj;
    },
    create(base) {
        return exports.SetSecurityPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSetSecurityPolicyRequest();
        message.enableIframeEmbedding = (_a = object.enableIframeEmbedding) !== null && _a !== void 0 ? _a : false;
        message.allowedOrigins = ((_b = object.allowedOrigins) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.enableImpersonation = (_c = object.enableImpersonation) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseSetSecurityPolicyResponse() {
    return { details: undefined };
}
exports.SetSecurityPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetSecurityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetSecurityPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetSecurityPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseIsOrgUniqueRequest() {
    return { name: "", domain: "" };
}
exports.IsOrgUniqueRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsOrgUniqueRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.IsOrgUniqueRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseIsOrgUniqueRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.domain = (_b = object.domain) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseIsOrgUniqueResponse() {
    return { isUnique: false };
}
exports.IsOrgUniqueResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isUnique !== false) {
            writer.uint32(8).bool(message.isUnique);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsOrgUniqueResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.isUnique = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { isUnique: isSet(object.isUnique) ? globalThis.Boolean(object.isUnique) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.isUnique !== false) {
            obj.isUnique = message.isUnique;
        }
        return obj;
    },
    create(base) {
        return exports.IsOrgUniqueResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIsOrgUniqueResponse();
        message.isUnique = (_a = object.isUnique) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseGetOrgByIDRequest() {
    return { id: "" };
}
exports.GetOrgByIDRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgByIDRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetOrgByIDRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetOrgByIDResponse() {
    return { org: undefined };
}
exports.GetOrgByIDResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.org !== undefined) {
            org_js_1.Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.org = org_js_1.Org.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { org: isSet(object.org) ? org_js_1.Org.fromJSON(object.org) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.org !== undefined) {
            obj.org = org_js_1.Org.toJSON(message.org);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgByIDResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgByIDResponse();
        message.org = (object.org !== undefined && object.org !== null) ? org_js_1.Org.fromPartial(object.org) : undefined;
        return message;
    },
};
function createBaseListOrgsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
exports.ListOrgsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            org_js_1.OrgQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrgsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(org_js_1.OrgQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, org_js_1.orgFieldNameFromJSON)(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries) ? object.queries.map((e) => org_js_1.OrgQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, org_js_1.orgFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => org_js_1.OrgQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListOrgsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListOrgsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.queries = ((_b = object.queries) === null || _b === void 0 ? void 0 : _b.map((e) => org_js_1.OrgQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListOrgsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
exports.ListOrgsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            org_js_1.Org.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListOrgsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(org_js_1.Org.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, org_js_1.orgFieldNameFromJSON)(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => org_js_1.Org.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, org_js_1.orgFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => org_js_1.Org.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListOrgsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListOrgsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.result = ((_b = object.result) === null || _b === void 0 ? void 0 : _b.map((e) => org_js_1.Org.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSetUpOrgRequest() {
    return { org: undefined, human: undefined, roles: [] };
}
exports.SetUpOrgRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.org !== undefined) {
            exports.SetUpOrgRequest_Org.encode(message.org, writer.uint32(10).fork()).join();
        }
        if (message.human !== undefined) {
            exports.SetUpOrgRequest_Human.encode(message.human, writer.uint32(18).fork()).join();
        }
        for (const v of message.roles) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.org = exports.SetUpOrgRequest_Org.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.human = exports.SetUpOrgRequest_Human.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            org: isSet(object.org) ? exports.SetUpOrgRequest_Org.fromJSON(object.org) : undefined,
            human: isSet(object.human) ? exports.SetUpOrgRequest_Human.fromJSON(object.human) : undefined,
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.org !== undefined) {
            obj.org = exports.SetUpOrgRequest_Org.toJSON(message.org);
        }
        if (message.human !== undefined) {
            obj.human = exports.SetUpOrgRequest_Human.toJSON(message.human);
        }
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetUpOrgRequest();
        message.org = (object.org !== undefined && object.org !== null)
            ? exports.SetUpOrgRequest_Org.fromPartial(object.org)
            : undefined;
        message.human = (object.human !== undefined && object.human !== null)
            ? exports.SetUpOrgRequest_Human.fromPartial(object.human)
            : undefined;
        message.roles = ((_a = object.roles) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseSetUpOrgRequest_Org() {
    return { name: "", domain: "" };
}
exports.SetUpOrgRequest_Org = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.domain !== "") {
            writer.uint32(18).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Org();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest_Org.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetUpOrgRequest_Org();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.domain = (_b = object.domain) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSetUpOrgRequest_Human() {
    return { userName: "", profile: undefined, email: undefined, phone: undefined, password: "" };
}
exports.SetUpOrgRequest_Human = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userName !== "") {
            writer.uint32(10).string(message.userName);
        }
        if (message.profile !== undefined) {
            exports.SetUpOrgRequest_Human_Profile.encode(message.profile, writer.uint32(18).fork()).join();
        }
        if (message.email !== undefined) {
            exports.SetUpOrgRequest_Human_Email.encode(message.email, writer.uint32(26).fork()).join();
        }
        if (message.phone !== undefined) {
            exports.SetUpOrgRequest_Human_Phone.encode(message.phone, writer.uint32(34).fork()).join();
        }
        if (message.password !== "") {
            writer.uint32(42).string(message.password);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.profile = exports.SetUpOrgRequest_Human_Profile.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.email = exports.SetUpOrgRequest_Human_Email.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.phone = exports.SetUpOrgRequest_Human_Phone.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.password = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userName: isSet(object.userName) ? globalThis.String(object.userName) : "",
            profile: isSet(object.profile) ? exports.SetUpOrgRequest_Human_Profile.fromJSON(object.profile) : undefined,
            email: isSet(object.email) ? exports.SetUpOrgRequest_Human_Email.fromJSON(object.email) : undefined,
            phone: isSet(object.phone) ? exports.SetUpOrgRequest_Human_Phone.fromJSON(object.phone) : undefined,
            password: isSet(object.password) ? globalThis.String(object.password) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userName !== "") {
            obj.userName = message.userName;
        }
        if (message.profile !== undefined) {
            obj.profile = exports.SetUpOrgRequest_Human_Profile.toJSON(message.profile);
        }
        if (message.email !== undefined) {
            obj.email = exports.SetUpOrgRequest_Human_Email.toJSON(message.email);
        }
        if (message.phone !== undefined) {
            obj.phone = exports.SetUpOrgRequest_Human_Phone.toJSON(message.phone);
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest_Human.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetUpOrgRequest_Human();
        message.userName = (_a = object.userName) !== null && _a !== void 0 ? _a : "";
        message.profile = (object.profile !== undefined && object.profile !== null)
            ? exports.SetUpOrgRequest_Human_Profile.fromPartial(object.profile)
            : undefined;
        message.email = (object.email !== undefined && object.email !== null)
            ? exports.SetUpOrgRequest_Human_Email.fromPartial(object.email)
            : undefined;
        message.phone = (object.phone !== undefined && object.phone !== null)
            ? exports.SetUpOrgRequest_Human_Phone.fromPartial(object.phone)
            : undefined;
        message.password = (_b = object.password) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Profile() {
    return { firstName: "", lastName: "", nickName: "", displayName: "", preferredLanguage: "", gender: 0 };
}
exports.SetUpOrgRequest_Human_Profile = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.firstName !== "") {
            writer.uint32(10).string(message.firstName);
        }
        if (message.lastName !== "") {
            writer.uint32(18).string(message.lastName);
        }
        if (message.nickName !== "") {
            writer.uint32(26).string(message.nickName);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.preferredLanguage !== "") {
            writer.uint32(42).string(message.preferredLanguage);
        }
        if (message.gender !== 0) {
            writer.uint32(48).int32(message.gender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Profile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.firstName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.lastName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.preferredLanguage = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.gender = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
            lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
            nickName: isSet(object.nickName) ? globalThis.String(object.nickName) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            preferredLanguage: isSet(object.preferredLanguage) ? globalThis.String(object.preferredLanguage) : "",
            gender: isSet(object.gender) ? (0, user_js_1.genderFromJSON)(object.gender) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.firstName !== "") {
            obj.firstName = message.firstName;
        }
        if (message.lastName !== "") {
            obj.lastName = message.lastName;
        }
        if (message.nickName !== "") {
            obj.nickName = message.nickName;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.preferredLanguage !== "") {
            obj.preferredLanguage = message.preferredLanguage;
        }
        if (message.gender !== 0) {
            obj.gender = (0, user_js_1.genderToJSON)(message.gender);
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest_Human_Profile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSetUpOrgRequest_Human_Profile();
        message.firstName = (_a = object.firstName) !== null && _a !== void 0 ? _a : "";
        message.lastName = (_b = object.lastName) !== null && _b !== void 0 ? _b : "";
        message.nickName = (_c = object.nickName) !== null && _c !== void 0 ? _c : "";
        message.displayName = (_d = object.displayName) !== null && _d !== void 0 ? _d : "";
        message.preferredLanguage = (_e = object.preferredLanguage) !== null && _e !== void 0 ? _e : "";
        message.gender = (_f = object.gender) !== null && _f !== void 0 ? _f : 0;
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Email() {
    return { email: "", isEmailVerified: false };
}
exports.SetUpOrgRequest_Human_Email = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.email !== "") {
            writer.uint32(10).string(message.email);
        }
        if (message.isEmailVerified !== false) {
            writer.uint32(16).bool(message.isEmailVerified);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Email();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isEmailVerified = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            isEmailVerified: isSet(object.isEmailVerified) ? globalThis.Boolean(object.isEmailVerified) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.isEmailVerified !== false) {
            obj.isEmailVerified = message.isEmailVerified;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest_Human_Email.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetUpOrgRequest_Human_Email();
        message.email = (_a = object.email) !== null && _a !== void 0 ? _a : "";
        message.isEmailVerified = (_b = object.isEmailVerified) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseSetUpOrgRequest_Human_Phone() {
    return { phone: "", isPhoneVerified: false };
}
exports.SetUpOrgRequest_Human_Phone = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.phone !== "") {
            writer.uint32(10).string(message.phone);
        }
        if (message.isPhoneVerified !== false) {
            writer.uint32(16).bool(message.isPhoneVerified);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgRequest_Human_Phone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isPhoneVerified = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            isPhoneVerified: isSet(object.isPhoneVerified) ? globalThis.Boolean(object.isPhoneVerified) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.isPhoneVerified !== false) {
            obj.isPhoneVerified = message.isPhoneVerified;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgRequest_Human_Phone.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetUpOrgRequest_Human_Phone();
        message.phone = (_a = object.phone) !== null && _a !== void 0 ? _a : "";
        message.isPhoneVerified = (_b = object.isPhoneVerified) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseSetUpOrgResponse() {
    return { details: undefined, orgId: "", userId: "" };
}
exports.SetUpOrgResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.orgId !== "") {
            writer.uint32(18).string(message.orgId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetUpOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.SetUpOrgResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetUpOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRemoveOrgRequest() {
    return { orgId: "" };
}
exports.RemoveOrgRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveOrgRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveOrgRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveOrgResponse() {
    return { details: undefined };
}
exports.RemoveOrgResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveOrgResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetIDPByIDRequest() {
    return { id: "" };
}
exports.GetIDPByIDRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIDPByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetIDPByIDRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetIDPByIDRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetIDPByIDResponse() {
    return { idp: undefined };
}
exports.GetIDPByIDResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idp !== undefined) {
            idp_js_1.IDP.encode(message.idp, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetIDPByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idp = idp_js_1.IDP.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idp: isSet(object.idp) ? idp_js_1.IDP.fromJSON(object.idp) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.idp !== undefined) {
            obj.idp = idp_js_1.IDP.toJSON(message.idp);
        }
        return obj;
    },
    create(base) {
        return exports.GetIDPByIDResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetIDPByIDResponse();
        message.idp = (object.idp !== undefined && object.idp !== null) ? idp_js_1.IDP.fromPartial(object.idp) : undefined;
        return message;
    },
};
function createBaseListIDPsRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
exports.ListIDPsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            exports.IDPQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIDPsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(exports.IDPQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, idp_js_1.iDPFieldNameFromJSON)(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries) ? object.queries.map((e) => exports.IDPQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, idp_js_1.iDPFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => exports.IDPQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListIDPsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListIDPsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.queries = ((_b = object.queries) === null || _b === void 0 ? void 0 : _b.map((e) => exports.IDPQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseIDPQuery() {
    return { idpIdQuery: undefined, idpNameQuery: undefined };
}
exports.IDPQuery = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpIdQuery !== undefined) {
            idp_js_1.IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
        }
        if (message.idpNameQuery !== undefined) {
            idp_js_1.IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIDPQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpIdQuery = idp_js_1.IDPIDQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idpNameQuery = idp_js_1.IDPNameQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpIdQuery: isSet(object.idpIdQuery) ? idp_js_1.IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
            idpNameQuery: isSet(object.idpNameQuery) ? idp_js_1.IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpIdQuery !== undefined) {
            obj.idpIdQuery = idp_js_1.IDPIDQuery.toJSON(message.idpIdQuery);
        }
        if (message.idpNameQuery !== undefined) {
            obj.idpNameQuery = idp_js_1.IDPNameQuery.toJSON(message.idpNameQuery);
        }
        return obj;
    },
    create(base) {
        return exports.IDPQuery.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseIDPQuery();
        message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
            ? idp_js_1.IDPIDQuery.fromPartial(object.idpIdQuery)
            : undefined;
        message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
            ? idp_js_1.IDPNameQuery.fromPartial(object.idpNameQuery)
            : undefined;
        return message;
    },
};
function createBaseListIDPsResponse() {
    return { details: undefined, sortingColumn: 0, result: [] };
}
exports.ListIDPsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.result) {
            idp_js_1.IDP.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIDPsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.result.push(idp_js_1.IDP.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, idp_js_1.iDPFieldNameFromJSON)(object.sortingColumn) : 0,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => idp_js_1.IDP.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, idp_js_1.iDPFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => idp_js_1.IDP.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListIDPsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListIDPsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.result = ((_b = object.result) === null || _b === void 0 ? void 0 : _b.map((e) => idp_js_1.IDP.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddOIDCIDPRequest() {
    return {
        name: "",
        stylingType: 0,
        clientId: "",
        clientSecret: "",
        issuer: "",
        scopes: [],
        displayNameMapping: 0,
        usernameMapping: 0,
        autoRegister: false,
    };
}
exports.AddOIDCIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(16).int32(message.stylingType);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.issuer !== "") {
            writer.uint32(42).string(message.issuer);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.displayNameMapping !== 0) {
            writer.uint32(56).int32(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            writer.uint32(64).int32(message.usernameMapping);
        }
        if (message.autoRegister !== false) {
            writer.uint32(72).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.displayNameMapping = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.usernameMapping = reader.int32();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? (0, idp_js_1.iDPStylingTypeFromJSON)(object.stylingType) : 0,
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            displayNameMapping: isSet(object.displayNameMapping) ? (0, idp_js_1.oIDCMappingFieldFromJSON)(object.displayNameMapping) : 0,
            usernameMapping: isSet(object.usernameMapping) ? (0, idp_js_1.oIDCMappingFieldFromJSON)(object.usernameMapping) : 0,
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = (0, idp_js_1.iDPStylingTypeToJSON)(message.stylingType);
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.displayNameMapping !== 0) {
            obj.displayNameMapping = (0, idp_js_1.oIDCMappingFieldToJSON)(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            obj.usernameMapping = (0, idp_js_1.oIDCMappingFieldToJSON)(message.usernameMapping);
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return exports.AddOIDCIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseAddOIDCIDPRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.stylingType = (_b = object.stylingType) !== null && _b !== void 0 ? _b : 0;
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.issuer = (_e = object.issuer) !== null && _e !== void 0 ? _e : "";
        message.scopes = ((_f = object.scopes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.displayNameMapping = (_g = object.displayNameMapping) !== null && _g !== void 0 ? _g : 0;
        message.usernameMapping = (_h = object.usernameMapping) !== null && _h !== void 0 ? _h : 0;
        message.autoRegister = (_j = object.autoRegister) !== null && _j !== void 0 ? _j : false;
        return message;
    },
};
function createBaseAddOIDCIDPResponse() {
    return { details: undefined, idpId: "" };
}
exports.AddOIDCIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.idpId !== "") {
            writer.uint32(18).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddOIDCIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.AddOIDCIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddOIDCIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddJWTIDPRequest() {
    return {
        name: "",
        stylingType: 0,
        jwtEndpoint: "",
        issuer: "",
        keysEndpoint: "",
        headerName: "",
        autoRegister: false,
    };
}
exports.AddJWTIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(16).int32(message.stylingType);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(26).string(message.jwtEndpoint);
        }
        if (message.issuer !== "") {
            writer.uint32(34).string(message.issuer);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(42).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(50).string(message.headerName);
        }
        if (message.autoRegister !== false) {
            writer.uint32(56).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? (0, idp_js_1.iDPStylingTypeFromJSON)(object.stylingType) : 0,
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = (0, idp_js_1.iDPStylingTypeToJSON)(message.stylingType);
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return exports.AddJWTIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAddJWTIDPRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.stylingType = (_b = object.stylingType) !== null && _b !== void 0 ? _b : 0;
        message.jwtEndpoint = (_c = object.jwtEndpoint) !== null && _c !== void 0 ? _c : "";
        message.issuer = (_d = object.issuer) !== null && _d !== void 0 ? _d : "";
        message.keysEndpoint = (_e = object.keysEndpoint) !== null && _e !== void 0 ? _e : "";
        message.headerName = (_f = object.headerName) !== null && _f !== void 0 ? _f : "";
        message.autoRegister = (_g = object.autoRegister) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseAddJWTIDPResponse() {
    return { details: undefined, idpId: "" };
}
exports.AddJWTIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.idpId !== "") {
            writer.uint32(18).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.AddJWTIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddJWTIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateIDPRequest() {
    return { idpId: "", name: "", stylingType: 0, autoRegister: false };
}
exports.UpdateIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.stylingType !== 0) {
            writer.uint32(24).int32(message.stylingType);
        }
        if (message.autoRegister !== false) {
            writer.uint32(32).bool(message.autoRegister);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.stylingType = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.autoRegister = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            stylingType: isSet(object.stylingType) ? (0, idp_js_1.iDPStylingTypeFromJSON)(object.stylingType) : 0,
            autoRegister: isSet(object.autoRegister) ? globalThis.Boolean(object.autoRegister) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.stylingType !== 0) {
            obj.stylingType = (0, idp_js_1.iDPStylingTypeToJSON)(message.stylingType);
        }
        if (message.autoRegister !== false) {
            obj.autoRegister = message.autoRegister;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUpdateIDPRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.stylingType = (_c = object.stylingType) !== null && _c !== void 0 ? _c : 0;
        message.autoRegister = (_d = object.autoRegister) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseUpdateIDPResponse() {
    return { details: undefined };
}
exports.UpdateIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeactivateIDPRequest() {
    return { idpId: "" };
}
exports.DeactivateIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeactivateIDPRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeactivateIDPResponse() {
    return { details: undefined };
}
exports.DeactivateIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeactivateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeactivateIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeactivateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseReactivateIDPRequest() {
    return { idpId: "" };
}
exports.ReactivateIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReactivateIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.ReactivateIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseReactivateIDPRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseReactivateIDPResponse() {
    return { details: undefined };
}
exports.ReactivateIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReactivateIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ReactivateIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseReactivateIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIDPRequest() {
    return { idpId: "" };
}
exports.RemoveIDPRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIDPRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveIDPRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveIDPResponse() {
    return { details: undefined };
}
exports.RemoveIDPResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIDPResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIDPOIDCConfigRequest() {
    return {
        idpId: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        displayNameMapping: 0,
        usernameMapping: 0,
    };
}
exports.UpdateIDPOIDCConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.displayNameMapping !== 0) {
            writer.uint32(48).int32(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            writer.uint32(56).int32(message.usernameMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPOIDCConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.displayNameMapping = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.usernameMapping = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            displayNameMapping: isSet(object.displayNameMapping) ? (0, idp_js_1.oIDCMappingFieldFromJSON)(object.displayNameMapping) : 0,
            usernameMapping: isSet(object.usernameMapping) ? (0, idp_js_1.oIDCMappingFieldFromJSON)(object.usernameMapping) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.displayNameMapping !== 0) {
            obj.displayNameMapping = (0, idp_js_1.oIDCMappingFieldToJSON)(message.displayNameMapping);
        }
        if (message.usernameMapping !== 0) {
            obj.usernameMapping = (0, idp_js_1.oIDCMappingFieldToJSON)(message.usernameMapping);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPOIDCConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdateIDPOIDCConfigRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.displayNameMapping = (_f = object.displayNameMapping) !== null && _f !== void 0 ? _f : 0;
        message.usernameMapping = (_g = object.usernameMapping) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function createBaseUpdateIDPOIDCConfigResponse() {
    return { details: undefined };
}
exports.UpdateIDPOIDCConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPOIDCConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPOIDCConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPOIDCConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIDPJWTConfigRequest() {
    return { idpId: "", jwtEndpoint: "", issuer: "", keysEndpoint: "", headerName: "" };
}
exports.UpdateIDPJWTConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(18).string(message.jwtEndpoint);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(34).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(42).string(message.headerName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPJWTConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPJWTConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateIDPJWTConfigRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        message.jwtEndpoint = (_b = object.jwtEndpoint) !== null && _b !== void 0 ? _b : "";
        message.issuer = (_c = object.issuer) !== null && _c !== void 0 ? _c : "";
        message.keysEndpoint = (_d = object.keysEndpoint) !== null && _d !== void 0 ? _d : "";
        message.headerName = (_e = object.headerName) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseUpdateIDPJWTConfigResponse() {
    return { details: undefined };
}
exports.UpdateIDPJWTConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIDPJWTConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIDPJWTConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIDPJWTConfigResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListProvidersRequest() {
    return { query: undefined, queries: [] };
}
exports.ListProvidersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            exports.ProviderQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProvidersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(exports.ProviderQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries)
                ? object.queries.map((e) => exports.ProviderQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => exports.ProviderQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListProvidersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListProvidersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = ((_a = object.queries) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ProviderQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseProviderQuery() {
    return { idpIdQuery: undefined, idpNameQuery: undefined };
}
exports.ProviderQuery = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpIdQuery !== undefined) {
            idp_js_1.IDPIDQuery.encode(message.idpIdQuery, writer.uint32(10).fork()).join();
        }
        if (message.idpNameQuery !== undefined) {
            idp_js_1.IDPNameQuery.encode(message.idpNameQuery, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProviderQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpIdQuery = idp_js_1.IDPIDQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.idpNameQuery = idp_js_1.IDPNameQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            idpIdQuery: isSet(object.idpIdQuery) ? idp_js_1.IDPIDQuery.fromJSON(object.idpIdQuery) : undefined,
            idpNameQuery: isSet(object.idpNameQuery) ? idp_js_1.IDPNameQuery.fromJSON(object.idpNameQuery) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpIdQuery !== undefined) {
            obj.idpIdQuery = idp_js_1.IDPIDQuery.toJSON(message.idpIdQuery);
        }
        if (message.idpNameQuery !== undefined) {
            obj.idpNameQuery = idp_js_1.IDPNameQuery.toJSON(message.idpNameQuery);
        }
        return obj;
    },
    create(base) {
        return exports.ProviderQuery.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseProviderQuery();
        message.idpIdQuery = (object.idpIdQuery !== undefined && object.idpIdQuery !== null)
            ? idp_js_1.IDPIDQuery.fromPartial(object.idpIdQuery)
            : undefined;
        message.idpNameQuery = (object.idpNameQuery !== undefined && object.idpNameQuery !== null)
            ? idp_js_1.IDPNameQuery.fromPartial(object.idpNameQuery)
            : undefined;
        return message;
    },
};
function createBaseListProvidersResponse() {
    return { details: undefined, result: [] };
}
exports.ListProvidersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            idp_js_1.Provider.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListProvidersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(idp_js_1.Provider.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => idp_js_1.Provider.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => idp_js_1.Provider.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListProvidersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListProvidersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => idp_js_1.Provider.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetProviderByIDRequest() {
    return { id: "" };
}
exports.GetProviderByIDRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProviderByIDRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.GetProviderByIDRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetProviderByIDRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetProviderByIDResponse() {
    return { idp: undefined };
}
exports.GetProviderByIDResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idp !== undefined) {
            idp_js_1.Provider.encode(message.idp, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProviderByIDResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idp = idp_js_1.Provider.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idp: isSet(object.idp) ? idp_js_1.Provider.fromJSON(object.idp) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.idp !== undefined) {
            obj.idp = idp_js_1.Provider.toJSON(message.idp);
        }
        return obj;
    },
    create(base) {
        return exports.GetProviderByIDResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetProviderByIDResponse();
        message.idp = (object.idp !== undefined && object.idp !== null) ? idp_js_1.Provider.fromPartial(object.idp) : undefined;
        return message;
    },
};
function createBaseAddGenericOAuthProviderRequest() {
    return {
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        idAttribute: "",
        providerOptions: undefined,
    };
}
exports.AddGenericOAuthProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(34).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(42).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(50).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.idAttribute !== "") {
            writer.uint32(66).string(message.idAttribute);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOAuthProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.idAttribute = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.idAttribute !== "") {
            obj.idAttribute = message.idAttribute;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGenericOAuthProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseAddGenericOAuthProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.authorizationEndpoint = (_d = object.authorizationEndpoint) !== null && _d !== void 0 ? _d : "";
        message.tokenEndpoint = (_e = object.tokenEndpoint) !== null && _e !== void 0 ? _e : "";
        message.userEndpoint = (_f = object.userEndpoint) !== null && _f !== void 0 ? _f : "";
        message.scopes = ((_g = object.scopes) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.idAttribute = (_h = object.idAttribute) !== null && _h !== void 0 ? _h : "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGenericOAuthProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGenericOAuthProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOAuthProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGenericOAuthProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGenericOAuthProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGenericOAuthProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        idAttribute: "",
        providerOptions: undefined,
    };
}
exports.UpdateGenericOAuthProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(42).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(50).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(58).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(66).string(v);
        }
        if (message.idAttribute !== "") {
            writer.uint32(74).string(message.idAttribute);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOAuthProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.idAttribute = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            idAttribute: isSet(object.idAttribute) ? globalThis.String(object.idAttribute) : "",
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.idAttribute !== "") {
            obj.idAttribute = message.idAttribute;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGenericOAuthProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseUpdateGenericOAuthProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.authorizationEndpoint = (_e = object.authorizationEndpoint) !== null && _e !== void 0 ? _e : "";
        message.tokenEndpoint = (_f = object.tokenEndpoint) !== null && _f !== void 0 ? _f : "";
        message.userEndpoint = (_g = object.userEndpoint) !== null && _g !== void 0 ? _g : "";
        message.scopes = ((_h = object.scopes) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.idAttribute = (_j = object.idAttribute) !== null && _j !== void 0 ? _j : "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGenericOAuthProviderResponse() {
    return { details: undefined };
}
exports.UpdateGenericOAuthProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOAuthProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGenericOAuthProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOAuthProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGenericOIDCProviderRequest() {
    return {
        name: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        providerOptions: undefined,
        isIdTokenMapping: false,
    };
}
exports.AddGenericOIDCProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        if (message.isIdTokenMapping !== false) {
            writer.uint32(56).bool(message.isIdTokenMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.isIdTokenMapping = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
            isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        if (message.isIdTokenMapping !== false) {
            obj.isIdTokenMapping = message.isIdTokenMapping;
        }
        return obj;
    },
    create(base) {
        return exports.AddGenericOIDCProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseAddGenericOIDCProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        message.isIdTokenMapping = (_f = object.isIdTokenMapping) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function createBaseAddGenericOIDCProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGenericOIDCProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGenericOIDCProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGenericOIDCProviderRequest() {
    return {
        id: "",
        name: "",
        issuer: "",
        clientId: "",
        clientSecret: "",
        scopes: [],
        providerOptions: undefined,
        isIdTokenMapping: false,
    };
}
exports.UpdateGenericOIDCProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.clientId !== "") {
            writer.uint32(34).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(42).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        if (message.isIdTokenMapping !== false) {
            writer.uint32(64).bool(message.isIdTokenMapping);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.isIdTokenMapping = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
            isIdTokenMapping: isSet(object.isIdTokenMapping) ? globalThis.Boolean(object.isIdTokenMapping) : false,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        if (message.isIdTokenMapping !== false) {
            obj.isIdTokenMapping = message.isIdTokenMapping;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGenericOIDCProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdateGenericOIDCProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.issuer = (_c = object.issuer) !== null && _c !== void 0 ? _c : "";
        message.clientId = (_d = object.clientId) !== null && _d !== void 0 ? _d : "";
        message.clientSecret = (_e = object.clientSecret) !== null && _e !== void 0 ? _e : "";
        message.scopes = ((_f = object.scopes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        message.isIdTokenMapping = (_g = object.isIdTokenMapping) !== null && _g !== void 0 ? _g : false;
        return message;
    },
};
function createBaseUpdateGenericOIDCProviderResponse() {
    return { details: undefined };
}
exports.UpdateGenericOIDCProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGenericOIDCProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseMigrateGenericOIDCProviderRequest() {
    return { id: "", azure: undefined, google: undefined };
}
exports.MigrateGenericOIDCProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.azure !== undefined) {
            exports.AddAzureADProviderRequest.encode(message.azure, writer.uint32(18).fork()).join();
        }
        if (message.google !== undefined) {
            exports.AddGoogleProviderRequest.encode(message.google, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrateGenericOIDCProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.azure = exports.AddAzureADProviderRequest.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.google = exports.AddGoogleProviderRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            azure: isSet(object.azure) ? exports.AddAzureADProviderRequest.fromJSON(object.azure) : undefined,
            google: isSet(object.google) ? exports.AddGoogleProviderRequest.fromJSON(object.google) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.azure !== undefined) {
            obj.azure = exports.AddAzureADProviderRequest.toJSON(message.azure);
        }
        if (message.google !== undefined) {
            obj.google = exports.AddGoogleProviderRequest.toJSON(message.google);
        }
        return obj;
    },
    create(base) {
        return exports.MigrateGenericOIDCProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMigrateGenericOIDCProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.azure = (object.azure !== undefined && object.azure !== null)
            ? exports.AddAzureADProviderRequest.fromPartial(object.azure)
            : undefined;
        message.google = (object.google !== undefined && object.google !== null)
            ? exports.AddGoogleProviderRequest.fromPartial(object.google)
            : undefined;
        return message;
    },
};
function createBaseMigrateGenericOIDCProviderResponse() {
    return { details: undefined };
}
exports.MigrateGenericOIDCProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrateGenericOIDCProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.MigrateGenericOIDCProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMigrateGenericOIDCProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddJWTProviderRequest() {
    return { name: "", issuer: "", jwtEndpoint: "", keysEndpoint: "", headerName: "", providerOptions: undefined };
}
exports.AddJWTProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(26).string(message.jwtEndpoint);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(34).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(42).string(message.headerName);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddJWTProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAddJWTProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.jwtEndpoint = (_c = object.jwtEndpoint) !== null && _c !== void 0 ? _c : "";
        message.keysEndpoint = (_d = object.keysEndpoint) !== null && _d !== void 0 ? _d : "";
        message.headerName = (_e = object.headerName) !== null && _e !== void 0 ? _e : "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddJWTProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddJWTProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddJWTProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddJWTProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddJWTProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateJWTProviderRequest() {
    return {
        id: "",
        name: "",
        issuer: "",
        jwtEndpoint: "",
        keysEndpoint: "",
        headerName: "",
        providerOptions: undefined,
    };
}
exports.UpdateJWTProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.issuer !== "") {
            writer.uint32(26).string(message.issuer);
        }
        if (message.jwtEndpoint !== "") {
            writer.uint32(34).string(message.jwtEndpoint);
        }
        if (message.keysEndpoint !== "") {
            writer.uint32(42).string(message.keysEndpoint);
        }
        if (message.headerName !== "") {
            writer.uint32(50).string(message.headerName);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateJWTProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.jwtEndpoint = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.keysEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.headerName = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            jwtEndpoint: isSet(object.jwtEndpoint) ? globalThis.String(object.jwtEndpoint) : "",
            keysEndpoint: isSet(object.keysEndpoint) ? globalThis.String(object.keysEndpoint) : "",
            headerName: isSet(object.headerName) ? globalThis.String(object.headerName) : "",
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.jwtEndpoint !== "") {
            obj.jwtEndpoint = message.jwtEndpoint;
        }
        if (message.keysEndpoint !== "") {
            obj.keysEndpoint = message.keysEndpoint;
        }
        if (message.headerName !== "") {
            obj.headerName = message.headerName;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateJWTProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateJWTProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.issuer = (_c = object.issuer) !== null && _c !== void 0 ? _c : "";
        message.jwtEndpoint = (_d = object.jwtEndpoint) !== null && _d !== void 0 ? _d : "";
        message.keysEndpoint = (_e = object.keysEndpoint) !== null && _e !== void 0 ? _e : "";
        message.headerName = (_f = object.headerName) !== null && _f !== void 0 ? _f : "";
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateJWTProviderResponse() {
    return { details: undefined };
}
exports.UpdateJWTProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateJWTProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateJWTProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateJWTProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddAzureADProviderRequest() {
    return {
        name: "",
        clientId: "",
        clientSecret: "",
        tenant: undefined,
        emailVerified: false,
        scopes: [],
        providerOptions: undefined,
    };
}
exports.AddAzureADProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.tenant !== undefined) {
            idp_js_1.AzureADTenant.encode(message.tenant, writer.uint32(34).fork()).join();
        }
        if (message.emailVerified !== false) {
            writer.uint32(40).bool(message.emailVerified);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAzureADProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.tenant = idp_js_1.AzureADTenant.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.emailVerified = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            tenant: isSet(object.tenant) ? idp_js_1.AzureADTenant.fromJSON(object.tenant) : undefined,
            emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.tenant !== undefined) {
            obj.tenant = idp_js_1.AzureADTenant.toJSON(message.tenant);
        }
        if (message.emailVerified !== false) {
            obj.emailVerified = message.emailVerified;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddAzureADProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAddAzureADProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.tenant = (object.tenant !== undefined && object.tenant !== null)
            ? idp_js_1.AzureADTenant.fromPartial(object.tenant)
            : undefined;
        message.emailVerified = (_d = object.emailVerified) !== null && _d !== void 0 ? _d : false;
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddAzureADProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddAzureADProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAzureADProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddAzureADProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddAzureADProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateAzureADProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        tenant: undefined,
        emailVerified: false,
        scopes: [],
        providerOptions: undefined,
    };
}
exports.UpdateAzureADProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.tenant !== undefined) {
            idp_js_1.AzureADTenant.encode(message.tenant, writer.uint32(42).fork()).join();
        }
        if (message.emailVerified !== false) {
            writer.uint32(48).bool(message.emailVerified);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAzureADProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tenant = idp_js_1.AzureADTenant.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.emailVerified = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            tenant: isSet(object.tenant) ? idp_js_1.AzureADTenant.fromJSON(object.tenant) : undefined,
            emailVerified: isSet(object.emailVerified) ? globalThis.Boolean(object.emailVerified) : false,
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.tenant !== undefined) {
            obj.tenant = idp_js_1.AzureADTenant.toJSON(message.tenant);
        }
        if (message.emailVerified !== false) {
            obj.emailVerified = message.emailVerified;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAzureADProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateAzureADProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.tenant = (object.tenant !== undefined && object.tenant !== null)
            ? idp_js_1.AzureADTenant.fromPartial(object.tenant)
            : undefined;
        message.emailVerified = (_e = object.emailVerified) !== null && _e !== void 0 ? _e : false;
        message.scopes = ((_f = object.scopes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateAzureADProviderResponse() {
    return { details: undefined };
}
exports.UpdateAzureADProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAzureADProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAzureADProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAzureADProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.AddGitHubProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGitHubProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAddGitHubProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.scopes = ((_d = object.scopes) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGitHubProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGitHubProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGitHubProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGitHubProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.UpdateGitHubProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitHubProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateGitHubProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitHubProviderResponse() {
    return { details: undefined };
}
exports.UpdateGitHubProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitHubProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubEnterpriseServerProviderRequest() {
    return {
        clientId: "",
        name: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        providerOptions: undefined,
    };
}
exports.AddGitHubEnterpriseServerProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(34).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(42).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(50).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubEnterpriseServerProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGitHubEnterpriseServerProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAddGitHubEnterpriseServerProviderRequest();
        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.authorizationEndpoint = (_d = object.authorizationEndpoint) !== null && _d !== void 0 ? _d : "";
        message.tokenEndpoint = (_e = object.tokenEndpoint) !== null && _e !== void 0 ? _e : "";
        message.userEndpoint = (_f = object.userEndpoint) !== null && _f !== void 0 ? _f : "";
        message.scopes = ((_g = object.scopes) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitHubEnterpriseServerProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGitHubEnterpriseServerProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitHubEnterpriseServerProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGitHubEnterpriseServerProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGitHubEnterpriseServerProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGitHubEnterpriseServerProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        clientSecret: "",
        authorizationEndpoint: "",
        tokenEndpoint: "",
        userEndpoint: "",
        scopes: [],
        providerOptions: undefined,
    };
}
exports.UpdateGitHubEnterpriseServerProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        if (message.authorizationEndpoint !== "") {
            writer.uint32(42).string(message.authorizationEndpoint);
        }
        if (message.tokenEndpoint !== "") {
            writer.uint32(50).string(message.tokenEndpoint);
        }
        if (message.userEndpoint !== "") {
            writer.uint32(58).string(message.userEndpoint);
        }
        for (const v of message.scopes) {
            writer.uint32(66).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.authorizationEndpoint = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.tokenEndpoint = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.userEndpoint = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            authorizationEndpoint: isSet(object.authorizationEndpoint) ? globalThis.String(object.authorizationEndpoint) : "",
            tokenEndpoint: isSet(object.tokenEndpoint) ? globalThis.String(object.tokenEndpoint) : "",
            userEndpoint: isSet(object.userEndpoint) ? globalThis.String(object.userEndpoint) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if (message.authorizationEndpoint !== "") {
            obj.authorizationEndpoint = message.authorizationEndpoint;
        }
        if (message.tokenEndpoint !== "") {
            obj.tokenEndpoint = message.tokenEndpoint;
        }
        if (message.userEndpoint !== "") {
            obj.userEndpoint = message.userEndpoint;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitHubEnterpriseServerProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUpdateGitHubEnterpriseServerProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.authorizationEndpoint = (_e = object.authorizationEndpoint) !== null && _e !== void 0 ? _e : "";
        message.tokenEndpoint = (_f = object.tokenEndpoint) !== null && _f !== void 0 ? _f : "";
        message.userEndpoint = (_g = object.userEndpoint) !== null && _g !== void 0 ? _g : "";
        message.scopes = ((_h = object.scopes) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitHubEnterpriseServerProviderResponse() {
    return { details: undefined };
}
exports.UpdateGitHubEnterpriseServerProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitHubEnterpriseServerProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitHubEnterpriseServerProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.AddGitLabProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGitLabProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAddGitLabProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.scopes = ((_d = object.scopes) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGitLabProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGitLabProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGitLabProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGitLabProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.UpdateGitLabProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitLabProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateGitLabProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitLabProviderResponse() {
    return { details: undefined };
}
exports.UpdateGitLabProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitLabProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabSelfHostedProviderRequest() {
    return { issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.AddGitLabSelfHostedProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.issuer !== "") {
            writer.uint32(10).string(message.issuer);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabSelfHostedProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGitLabSelfHostedProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseAddGitLabSelfHostedProviderRequest();
        message.issuer = (_a = object.issuer) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGitLabSelfHostedProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGitLabSelfHostedProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGitLabSelfHostedProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGitLabSelfHostedProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGitLabSelfHostedProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGitLabSelfHostedProviderRequest() {
    return { id: "", issuer: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.UpdateGitLabSelfHostedProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.issuer !== "") {
            writer.uint32(18).string(message.issuer);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(34).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(42).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabSelfHostedProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.issuer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.issuer !== "") {
            obj.issuer = message.issuer;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitLabSelfHostedProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseUpdateGitLabSelfHostedProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.issuer = (_b = object.issuer) !== null && _b !== void 0 ? _b : "";
        message.name = (_c = object.name) !== null && _c !== void 0 ? _c : "";
        message.clientId = (_d = object.clientId) !== null && _d !== void 0 ? _d : "";
        message.clientSecret = (_e = object.clientSecret) !== null && _e !== void 0 ? _e : "";
        message.scopes = ((_f = object.scopes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGitLabSelfHostedProviderResponse() {
    return { details: undefined };
}
exports.UpdateGitLabSelfHostedProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGitLabSelfHostedProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGitLabSelfHostedProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGitLabSelfHostedProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddGoogleProviderRequest() {
    return { name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.AddGoogleProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(26).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(34).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGoogleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddGoogleProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAddGoogleProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.clientSecret = (_c = object.clientSecret) !== null && _c !== void 0 ? _c : "";
        message.scopes = ((_d = object.scopes) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddGoogleProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddGoogleProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddGoogleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddGoogleProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddGoogleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateGoogleProviderRequest() {
    return { id: "", name: "", clientId: "", clientSecret: "", scopes: [], providerOptions: undefined };
}
exports.UpdateGoogleProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.clientSecret !== "") {
            writer.uint32(34).string(message.clientSecret);
        }
        for (const v of message.scopes) {
            writer.uint32(42).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGoogleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.clientSecret = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            clientSecret: isSet(object.clientSecret) ? globalThis.String(object.clientSecret) : "",
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.clientSecret !== "") {
            obj.clientSecret = message.clientSecret;
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGoogleProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdateGoogleProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.clientSecret = (_d = object.clientSecret) !== null && _d !== void 0 ? _d : "";
        message.scopes = ((_e = object.scopes) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateGoogleProviderResponse() {
    return { details: undefined };
}
exports.UpdateGoogleProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateGoogleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateGoogleProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateGoogleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddLDAPProviderRequest() {
    return {
        name: "",
        servers: [],
        startTls: false,
        baseDn: "",
        bindDn: "",
        bindPassword: "",
        userBase: "",
        userObjectClasses: [],
        userFilters: [],
        timeout: undefined,
        attributes: undefined,
        providerOptions: undefined,
    };
}
exports.AddLDAPProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.servers) {
            writer.uint32(18).string(v);
        }
        if (message.startTls !== false) {
            writer.uint32(24).bool(message.startTls);
        }
        if (message.baseDn !== "") {
            writer.uint32(34).string(message.baseDn);
        }
        if (message.bindDn !== "") {
            writer.uint32(42).string(message.bindDn);
        }
        if (message.bindPassword !== "") {
            writer.uint32(50).string(message.bindPassword);
        }
        if (message.userBase !== "") {
            writer.uint32(58).string(message.userBase);
        }
        for (const v of message.userObjectClasses) {
            writer.uint32(66).string(v);
        }
        for (const v of message.userFilters) {
            writer.uint32(74).string(v);
        }
        if (message.timeout !== undefined) {
            duration_js_1.Duration.encode(message.timeout, writer.uint32(82).fork()).join();
        }
        if (message.attributes !== undefined) {
            idp_js_1.LDAPAttributes.encode(message.attributes, writer.uint32(90).fork()).join();
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(98).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddLDAPProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.servers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.startTls = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseDn = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.bindDn = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bindPassword = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.userBase = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.userObjectClasses.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.userFilters.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.timeout = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.attributes = idp_js_1.LDAPAttributes.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            servers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.servers) ? object.servers.map((e) => globalThis.String(e)) : [],
            startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
            baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
            bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
            bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
            userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
            userObjectClasses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userObjectClasses)
                ? object.userObjectClasses.map((e) => globalThis.String(e))
                : [],
            userFilters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userFilters)
                ? object.userFilters.map((e) => globalThis.String(e))
                : [],
            timeout: isSet(object.timeout) ? duration_js_1.Duration.fromJSON(object.timeout) : undefined,
            attributes: isSet(object.attributes) ? idp_js_1.LDAPAttributes.fromJSON(object.attributes) : undefined,
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if ((_a = message.servers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.servers = message.servers;
        }
        if (message.startTls !== false) {
            obj.startTls = message.startTls;
        }
        if (message.baseDn !== "") {
            obj.baseDn = message.baseDn;
        }
        if (message.bindDn !== "") {
            obj.bindDn = message.bindDn;
        }
        if (message.bindPassword !== "") {
            obj.bindPassword = message.bindPassword;
        }
        if (message.userBase !== "") {
            obj.userBase = message.userBase;
        }
        if ((_b = message.userObjectClasses) === null || _b === void 0 ? void 0 : _b.length) {
            obj.userObjectClasses = message.userObjectClasses;
        }
        if ((_c = message.userFilters) === null || _c === void 0 ? void 0 : _c.length) {
            obj.userFilters = message.userFilters;
        }
        if (message.timeout !== undefined) {
            obj.timeout = duration_js_1.Duration.toJSON(message.timeout);
        }
        if (message.attributes !== undefined) {
            obj.attributes = idp_js_1.LDAPAttributes.toJSON(message.attributes);
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddLDAPProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseAddLDAPProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.servers = ((_b = object.servers) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.startTls = (_c = object.startTls) !== null && _c !== void 0 ? _c : false;
        message.baseDn = (_d = object.baseDn) !== null && _d !== void 0 ? _d : "";
        message.bindDn = (_e = object.bindDn) !== null && _e !== void 0 ? _e : "";
        message.bindPassword = (_f = object.bindPassword) !== null && _f !== void 0 ? _f : "";
        message.userBase = (_g = object.userBase) !== null && _g !== void 0 ? _g : "";
        message.userObjectClasses = ((_h = object.userObjectClasses) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.userFilters = ((_j = object.userFilters) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? duration_js_1.Duration.fromPartial(object.timeout)
            : undefined;
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? idp_js_1.LDAPAttributes.fromPartial(object.attributes)
            : undefined;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddLDAPProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddLDAPProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddLDAPProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddLDAPProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddLDAPProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateLDAPProviderRequest() {
    return {
        id: "",
        name: "",
        servers: [],
        startTls: false,
        baseDn: "",
        bindDn: "",
        bindPassword: "",
        userBase: "",
        userObjectClasses: [],
        userFilters: [],
        timeout: undefined,
        attributes: undefined,
        providerOptions: undefined,
    };
}
exports.UpdateLDAPProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        for (const v of message.servers) {
            writer.uint32(26).string(v);
        }
        if (message.startTls !== false) {
            writer.uint32(32).bool(message.startTls);
        }
        if (message.baseDn !== "") {
            writer.uint32(42).string(message.baseDn);
        }
        if (message.bindDn !== "") {
            writer.uint32(50).string(message.bindDn);
        }
        if (message.bindPassword !== "") {
            writer.uint32(58).string(message.bindPassword);
        }
        if (message.userBase !== "") {
            writer.uint32(66).string(message.userBase);
        }
        for (const v of message.userObjectClasses) {
            writer.uint32(74).string(v);
        }
        for (const v of message.userFilters) {
            writer.uint32(82).string(v);
        }
        if (message.timeout !== undefined) {
            duration_js_1.Duration.encode(message.timeout, writer.uint32(90).fork()).join();
        }
        if (message.attributes !== undefined) {
            idp_js_1.LDAPAttributes.encode(message.attributes, writer.uint32(98).fork()).join();
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLDAPProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.servers.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.startTls = reader.bool();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.baseDn = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bindDn = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.bindPassword = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.userBase = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.userObjectClasses.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.userFilters.push(reader.string());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.timeout = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.attributes = idp_js_1.LDAPAttributes.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            servers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.servers) ? object.servers.map((e) => globalThis.String(e)) : [],
            startTls: isSet(object.startTls) ? globalThis.Boolean(object.startTls) : false,
            baseDn: isSet(object.baseDn) ? globalThis.String(object.baseDn) : "",
            bindDn: isSet(object.bindDn) ? globalThis.String(object.bindDn) : "",
            bindPassword: isSet(object.bindPassword) ? globalThis.String(object.bindPassword) : "",
            userBase: isSet(object.userBase) ? globalThis.String(object.userBase) : "",
            userObjectClasses: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userObjectClasses)
                ? object.userObjectClasses.map((e) => globalThis.String(e))
                : [],
            userFilters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userFilters)
                ? object.userFilters.map((e) => globalThis.String(e))
                : [],
            timeout: isSet(object.timeout) ? duration_js_1.Duration.fromJSON(object.timeout) : undefined,
            attributes: isSet(object.attributes) ? idp_js_1.LDAPAttributes.fromJSON(object.attributes) : undefined,
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if ((_a = message.servers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.servers = message.servers;
        }
        if (message.startTls !== false) {
            obj.startTls = message.startTls;
        }
        if (message.baseDn !== "") {
            obj.baseDn = message.baseDn;
        }
        if (message.bindDn !== "") {
            obj.bindDn = message.bindDn;
        }
        if (message.bindPassword !== "") {
            obj.bindPassword = message.bindPassword;
        }
        if (message.userBase !== "") {
            obj.userBase = message.userBase;
        }
        if ((_b = message.userObjectClasses) === null || _b === void 0 ? void 0 : _b.length) {
            obj.userObjectClasses = message.userObjectClasses;
        }
        if ((_c = message.userFilters) === null || _c === void 0 ? void 0 : _c.length) {
            obj.userFilters = message.userFilters;
        }
        if (message.timeout !== undefined) {
            obj.timeout = duration_js_1.Duration.toJSON(message.timeout);
        }
        if (message.attributes !== undefined) {
            obj.attributes = idp_js_1.LDAPAttributes.toJSON(message.attributes);
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLDAPProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseUpdateLDAPProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.servers = ((_c = object.servers) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.startTls = (_d = object.startTls) !== null && _d !== void 0 ? _d : false;
        message.baseDn = (_e = object.baseDn) !== null && _e !== void 0 ? _e : "";
        message.bindDn = (_f = object.bindDn) !== null && _f !== void 0 ? _f : "";
        message.bindPassword = (_g = object.bindPassword) !== null && _g !== void 0 ? _g : "";
        message.userBase = (_h = object.userBase) !== null && _h !== void 0 ? _h : "";
        message.userObjectClasses = ((_j = object.userObjectClasses) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.userFilters = ((_k = object.userFilters) === null || _k === void 0 ? void 0 : _k.map((e) => e)) || [];
        message.timeout = (object.timeout !== undefined && object.timeout !== null)
            ? duration_js_1.Duration.fromPartial(object.timeout)
            : undefined;
        message.attributes = (object.attributes !== undefined && object.attributes !== null)
            ? idp_js_1.LDAPAttributes.fromPartial(object.attributes)
            : undefined;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateLDAPProviderResponse() {
    return { details: undefined };
}
exports.UpdateLDAPProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLDAPProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLDAPProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLDAPProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddAppleProviderRequest() {
    return {
        name: "",
        clientId: "",
        teamId: "",
        keyId: "",
        privateKey: Buffer.alloc(0),
        scopes: [],
        providerOptions: undefined,
    };
}
exports.AddAppleProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(18).string(message.clientId);
        }
        if (message.teamId !== "") {
            writer.uint32(26).string(message.teamId);
        }
        if (message.keyId !== "") {
            writer.uint32(34).string(message.keyId);
        }
        if (message.privateKey.length !== 0) {
            writer.uint32(42).bytes(message.privateKey);
        }
        for (const v of message.scopes) {
            writer.uint32(50).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAppleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.keyId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.privateKey = Buffer.from(reader.bytes());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
            keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
            privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.teamId !== "") {
            obj.teamId = message.teamId;
        }
        if (message.keyId !== "") {
            obj.keyId = message.keyId;
        }
        if (message.privateKey.length !== 0) {
            obj.privateKey = base64FromBytes(message.privateKey);
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.AddAppleProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseAddAppleProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.clientId = (_b = object.clientId) !== null && _b !== void 0 ? _b : "";
        message.teamId = (_c = object.teamId) !== null && _c !== void 0 ? _c : "";
        message.keyId = (_d = object.keyId) !== null && _d !== void 0 ? _d : "";
        message.privateKey = (_e = object.privateKey) !== null && _e !== void 0 ? _e : Buffer.alloc(0);
        message.scopes = ((_f = object.scopes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseAddAppleProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddAppleProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddAppleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddAppleProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddAppleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateAppleProviderRequest() {
    return {
        id: "",
        name: "",
        clientId: "",
        teamId: "",
        keyId: "",
        privateKey: Buffer.alloc(0),
        scopes: [],
        providerOptions: undefined,
    };
}
exports.UpdateAppleProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.clientId !== "") {
            writer.uint32(26).string(message.clientId);
        }
        if (message.teamId !== "") {
            writer.uint32(34).string(message.teamId);
        }
        if (message.keyId !== "") {
            writer.uint32(42).string(message.keyId);
        }
        if (message.privateKey.length !== 0) {
            writer.uint32(50).bytes(message.privateKey);
        }
        for (const v of message.scopes) {
            writer.uint32(58).string(v);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppleProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.clientId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.teamId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.keyId = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.privateKey = Buffer.from(reader.bytes());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.scopes.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            teamId: isSet(object.teamId) ? globalThis.String(object.teamId) : "",
            keyId: isSet(object.keyId) ? globalThis.String(object.keyId) : "",
            privateKey: isSet(object.privateKey) ? Buffer.from(bytesFromBase64(object.privateKey)) : Buffer.alloc(0),
            scopes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.scopes) ? object.scopes.map((e) => globalThis.String(e)) : [],
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.teamId !== "") {
            obj.teamId = message.teamId;
        }
        if (message.keyId !== "") {
            obj.keyId = message.keyId;
        }
        if (message.privateKey.length !== 0) {
            obj.privateKey = base64FromBytes(message.privateKey);
        }
        if ((_a = message.scopes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.scopes = message.scopes;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAppleProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdateAppleProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.clientId = (_c = object.clientId) !== null && _c !== void 0 ? _c : "";
        message.teamId = (_d = object.teamId) !== null && _d !== void 0 ? _d : "";
        message.keyId = (_e = object.keyId) !== null && _e !== void 0 ? _e : "";
        message.privateKey = (_f = object.privateKey) !== null && _f !== void 0 ? _f : Buffer.alloc(0);
        message.scopes = ((_g = object.scopes) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        return message;
    },
};
function createBaseUpdateAppleProviderResponse() {
    return { details: undefined };
}
exports.UpdateAppleProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateAppleProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateAppleProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateAppleProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddSAMLProviderRequest() {
    return {
        name: "",
        metadataXml: undefined,
        metadataUrl: undefined,
        binding: 0,
        withSignedRequest: false,
        providerOptions: undefined,
        nameIdFormat: undefined,
        transientMappingAttributeName: undefined,
    };
}
exports.AddSAMLProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.metadataXml !== undefined) {
            writer.uint32(18).bytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            writer.uint32(26).string(message.metadataUrl);
        }
        if (message.binding !== 0) {
            writer.uint32(32).int32(message.binding);
        }
        if (message.withSignedRequest !== false) {
            writer.uint32(40).bool(message.withSignedRequest);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(50).fork()).join();
        }
        if (message.nameIdFormat !== undefined) {
            writer.uint32(56).int32(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            writer.uint32(66).string(message.transientMappingAttributeName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSAMLProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.metadataXml = Buffer.from(reader.bytes());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadataUrl = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.binding = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.withSignedRequest = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.nameIdFormat = reader.int32();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.transientMappingAttributeName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
            metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
            binding: isSet(object.binding) ? (0, idp_js_1.sAMLBindingFromJSON)(object.binding) : 0,
            withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
            nameIdFormat: isSet(object.nameIdFormat) ? (0, idp_js_1.sAMLNameIDFormatFromJSON)(object.nameIdFormat) : undefined,
            transientMappingAttributeName: isSet(object.transientMappingAttributeName)
                ? globalThis.String(object.transientMappingAttributeName)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.metadataXml !== undefined) {
            obj.metadataXml = base64FromBytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            obj.metadataUrl = message.metadataUrl;
        }
        if (message.binding !== 0) {
            obj.binding = (0, idp_js_1.sAMLBindingToJSON)(message.binding);
        }
        if (message.withSignedRequest !== false) {
            obj.withSignedRequest = message.withSignedRequest;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        if (message.nameIdFormat !== undefined) {
            obj.nameIdFormat = (0, idp_js_1.sAMLNameIDFormatToJSON)(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            obj.transientMappingAttributeName = message.transientMappingAttributeName;
        }
        return obj;
    },
    create(base) {
        return exports.AddSAMLProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAddSAMLProviderRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.metadataXml = (_b = object.metadataXml) !== null && _b !== void 0 ? _b : undefined;
        message.metadataUrl = (_c = object.metadataUrl) !== null && _c !== void 0 ? _c : undefined;
        message.binding = (_d = object.binding) !== null && _d !== void 0 ? _d : 0;
        message.withSignedRequest = (_e = object.withSignedRequest) !== null && _e !== void 0 ? _e : false;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        message.nameIdFormat = (_f = object.nameIdFormat) !== null && _f !== void 0 ? _f : undefined;
        message.transientMappingAttributeName = (_g = object.transientMappingAttributeName) !== null && _g !== void 0 ? _g : undefined;
        return message;
    },
};
function createBaseAddSAMLProviderResponse() {
    return { details: undefined, id: "" };
}
exports.AddSAMLProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSAMLProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.AddSAMLProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddSAMLProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseUpdateSAMLProviderRequest() {
    return {
        id: "",
        name: "",
        metadataXml: undefined,
        metadataUrl: undefined,
        binding: 0,
        withSignedRequest: false,
        providerOptions: undefined,
        nameIdFormat: undefined,
        transientMappingAttributeName: undefined,
    };
}
exports.UpdateSAMLProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.metadataXml !== undefined) {
            writer.uint32(26).bytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            writer.uint32(34).string(message.metadataUrl);
        }
        if (message.binding !== 0) {
            writer.uint32(40).int32(message.binding);
        }
        if (message.withSignedRequest !== false) {
            writer.uint32(48).bool(message.withSignedRequest);
        }
        if (message.providerOptions !== undefined) {
            idp_js_1.Options.encode(message.providerOptions, writer.uint32(58).fork()).join();
        }
        if (message.nameIdFormat !== undefined) {
            writer.uint32(64).int32(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            writer.uint32(74).string(message.transientMappingAttributeName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSAMLProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.metadataXml = Buffer.from(reader.bytes());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.metadataUrl = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.binding = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.withSignedRequest = reader.bool();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.providerOptions = idp_js_1.Options.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.nameIdFormat = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.transientMappingAttributeName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            metadataXml: isSet(object.metadataXml) ? Buffer.from(bytesFromBase64(object.metadataXml)) : undefined,
            metadataUrl: isSet(object.metadataUrl) ? globalThis.String(object.metadataUrl) : undefined,
            binding: isSet(object.binding) ? (0, idp_js_1.sAMLBindingFromJSON)(object.binding) : 0,
            withSignedRequest: isSet(object.withSignedRequest) ? globalThis.Boolean(object.withSignedRequest) : false,
            providerOptions: isSet(object.providerOptions) ? idp_js_1.Options.fromJSON(object.providerOptions) : undefined,
            nameIdFormat: isSet(object.nameIdFormat) ? (0, idp_js_1.sAMLNameIDFormatFromJSON)(object.nameIdFormat) : undefined,
            transientMappingAttributeName: isSet(object.transientMappingAttributeName)
                ? globalThis.String(object.transientMappingAttributeName)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.metadataXml !== undefined) {
            obj.metadataXml = base64FromBytes(message.metadataXml);
        }
        if (message.metadataUrl !== undefined) {
            obj.metadataUrl = message.metadataUrl;
        }
        if (message.binding !== 0) {
            obj.binding = (0, idp_js_1.sAMLBindingToJSON)(message.binding);
        }
        if (message.withSignedRequest !== false) {
            obj.withSignedRequest = message.withSignedRequest;
        }
        if (message.providerOptions !== undefined) {
            obj.providerOptions = idp_js_1.Options.toJSON(message.providerOptions);
        }
        if (message.nameIdFormat !== undefined) {
            obj.nameIdFormat = (0, idp_js_1.sAMLNameIDFormatToJSON)(message.nameIdFormat);
        }
        if (message.transientMappingAttributeName !== undefined) {
            obj.transientMappingAttributeName = message.transientMappingAttributeName;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSAMLProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseUpdateSAMLProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.metadataXml = (_c = object.metadataXml) !== null && _c !== void 0 ? _c : undefined;
        message.metadataUrl = (_d = object.metadataUrl) !== null && _d !== void 0 ? _d : undefined;
        message.binding = (_e = object.binding) !== null && _e !== void 0 ? _e : 0;
        message.withSignedRequest = (_f = object.withSignedRequest) !== null && _f !== void 0 ? _f : false;
        message.providerOptions = (object.providerOptions !== undefined && object.providerOptions !== null)
            ? idp_js_1.Options.fromPartial(object.providerOptions)
            : undefined;
        message.nameIdFormat = (_g = object.nameIdFormat) !== null && _g !== void 0 ? _g : undefined;
        message.transientMappingAttributeName = (_h = object.transientMappingAttributeName) !== null && _h !== void 0 ? _h : undefined;
        return message;
    },
};
function createBaseUpdateSAMLProviderResponse() {
    return { details: undefined };
}
exports.UpdateSAMLProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateSAMLProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateSAMLProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateSAMLProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRegenerateSAMLProviderCertificateRequest() {
    return { id: "" };
}
exports.RegenerateSAMLProviderCertificateRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegenerateSAMLProviderCertificateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.RegenerateSAMLProviderCertificateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRegenerateSAMLProviderCertificateRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRegenerateSAMLProviderCertificateResponse() {
    return { details: undefined };
}
exports.RegenerateSAMLProviderCertificateResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRegenerateSAMLProviderCertificateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RegenerateSAMLProviderCertificateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRegenerateSAMLProviderCertificateResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseDeleteProviderRequest() {
    return { id: "" };
}
exports.DeleteProviderRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteProviderRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create(base) {
        return exports.DeleteProviderRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseDeleteProviderRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseDeleteProviderResponse() {
    return { details: undefined };
}
exports.DeleteProviderResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteProviderResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.DeleteProviderResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseDeleteProviderResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetOrgIAMPolicyRequest() {
    return {};
}
exports.GetOrgIAMPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetOrgIAMPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetOrgIAMPolicyRequest();
        return message;
    },
};
function createBaseGetOrgIAMPolicyResponse() {
    return { policy: undefined };
}
exports.GetOrgIAMPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.OrgIAMPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.OrgIAMPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.OrgIAMPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetOrgIAMPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetOrgIAMPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.OrgIAMPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateOrgIAMPolicyRequest() {
    return { userLoginMustBeDomain: false };
}
exports.UpdateOrgIAMPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(8).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrgIAMPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUpdateOrgIAMPolicyRequest();
        message.userLoginMustBeDomain = (_a = object.userLoginMustBeDomain) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseUpdateOrgIAMPolicyResponse() {
    return { details: undefined };
}
exports.UpdateOrgIAMPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateOrgIAMPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomOrgIAMPolicyRequest() {
    return { orgId: "" };
}
exports.GetCustomOrgIAMPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomOrgIAMPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomOrgIAMPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomOrgIAMPolicyResponse() {
    return { policy: undefined, isDefault: false };
}
exports.GetCustomOrgIAMPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.OrgIAMPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        if (message.isDefault !== false) {
            writer.uint32(16).bool(message.isDefault);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.OrgIAMPolicy.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isDefault = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: isSet(object.policy) ? policy_js_1.OrgIAMPolicy.fromJSON(object.policy) : undefined,
            isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.OrgIAMPolicy.toJSON(message.policy);
        }
        if (message.isDefault !== false) {
            obj.isDefault = message.isDefault;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomOrgIAMPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomOrgIAMPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.OrgIAMPolicy.fromPartial(object.policy)
            : undefined;
        message.isDefault = (_a = object.isDefault) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseAddCustomOrgIAMPolicyRequest() {
    return { orgId: "", userLoginMustBeDomain: false };
}
exports.AddCustomOrgIAMPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return exports.AddCustomOrgIAMPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddCustomOrgIAMPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.userLoginMustBeDomain = (_b = object.userLoginMustBeDomain) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseAddCustomOrgIAMPolicyResponse() {
    return { details: undefined };
}
exports.AddCustomOrgIAMPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddCustomOrgIAMPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateCustomOrgIAMPolicyRequest() {
    return { orgId: "", userLoginMustBeDomain: false };
}
exports.UpdateCustomOrgIAMPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomOrgIAMPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCustomOrgIAMPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateCustomOrgIAMPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.userLoginMustBeDomain = (_b = object.userLoginMustBeDomain) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseUpdateCustomOrgIAMPolicyResponse() {
    return { details: undefined };
}
exports.UpdateCustomOrgIAMPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomOrgIAMPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCustomOrgIAMPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomOrgIAMPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomOrgIAMPolicyToDefaultRequest() {
    return { orgId: "" };
}
exports.ResetCustomOrgIAMPolicyToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomOrgIAMPolicyToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomOrgIAMPolicyToDefaultRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomOrgIAMPolicyToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomOrgIAMPolicyToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomOrgIAMPolicyToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomOrgIAMPolicyToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDomainPolicyRequest() {
    return {};
}
exports.GetDomainPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetDomainPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetDomainPolicyRequest();
        return message;
    },
};
function createBaseGetDomainPolicyResponse() {
    return { policy: undefined };
}
exports.GetDomainPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.DomainPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.DomainPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.DomainPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetDomainPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDomainPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.DomainPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateDomainPolicyRequest() {
    return { userLoginMustBeDomain: false, validateOrgDomains: false, smtpSenderAddressMatchesInstanceDomain: false };
}
exports.UpdateDomainPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(8).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(16).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(24).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateDomainPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateDomainPolicyRequest();
        message.userLoginMustBeDomain = (_a = object.userLoginMustBeDomain) !== null && _a !== void 0 ? _a : false;
        message.validateOrgDomains = (_b = object.validateOrgDomains) !== null && _b !== void 0 ? _b : false;
        message.smtpSenderAddressMatchesInstanceDomain = (_c = object.smtpSenderAddressMatchesInstanceDomain) !== null && _c !== void 0 ? _c : false;
        return message;
    },
};
function createBaseUpdateDomainPolicyResponse() {
    return { details: undefined };
}
exports.UpdateDomainPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateDomainPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomDomainPolicyRequest() {
    return { orgId: "" };
}
exports.GetCustomDomainPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomDomainPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomDomainPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomDomainPolicyResponse() {
    return { policy: undefined, isDefault: false };
}
exports.GetCustomDomainPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.DomainPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        if (message.isDefault !== false) {
            writer.uint32(16).bool(message.isDefault);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.DomainPolicy.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isDefault = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            policy: isSet(object.policy) ? policy_js_1.DomainPolicy.fromJSON(object.policy) : undefined,
            isDefault: isSet(object.isDefault) ? globalThis.Boolean(object.isDefault) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.DomainPolicy.toJSON(message.policy);
        }
        if (message.isDefault !== false) {
            obj.isDefault = message.isDefault;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomDomainPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomDomainPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.DomainPolicy.fromPartial(object.policy)
            : undefined;
        message.isDefault = (_a = object.isDefault) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseAddCustomDomainPolicyRequest() {
    return {
        orgId: "",
        userLoginMustBeDomain: false,
        validateOrgDomains: false,
        smtpSenderAddressMatchesInstanceDomain: false,
    };
}
exports.AddCustomDomainPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(24).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return exports.AddCustomDomainPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseAddCustomDomainPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.userLoginMustBeDomain = (_b = object.userLoginMustBeDomain) !== null && _b !== void 0 ? _b : false;
        message.validateOrgDomains = (_c = object.validateOrgDomains) !== null && _c !== void 0 ? _c : false;
        message.smtpSenderAddressMatchesInstanceDomain = (_d = object.smtpSenderAddressMatchesInstanceDomain) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseAddCustomDomainPolicyResponse() {
    return { details: undefined };
}
exports.AddCustomDomainPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddCustomDomainPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddCustomDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateCustomDomainPolicyRequest() {
    return {
        orgId: "",
        userLoginMustBeDomain: false,
        validateOrgDomains: false,
        smtpSenderAddressMatchesInstanceDomain: false,
    };
}
exports.UpdateCustomDomainPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.userLoginMustBeDomain !== false) {
            writer.uint32(16).bool(message.userLoginMustBeDomain);
        }
        if (message.validateOrgDomains !== false) {
            writer.uint32(24).bool(message.validateOrgDomains);
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            writer.uint32(32).bool(message.smtpSenderAddressMatchesInstanceDomain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomDomainPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.userLoginMustBeDomain = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.validateOrgDomains = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.smtpSenderAddressMatchesInstanceDomain = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            userLoginMustBeDomain: isSet(object.userLoginMustBeDomain)
                ? globalThis.Boolean(object.userLoginMustBeDomain)
                : false,
            validateOrgDomains: isSet(object.validateOrgDomains) ? globalThis.Boolean(object.validateOrgDomains) : false,
            smtpSenderAddressMatchesInstanceDomain: isSet(object.smtpSenderAddressMatchesInstanceDomain)
                ? globalThis.Boolean(object.smtpSenderAddressMatchesInstanceDomain)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.userLoginMustBeDomain !== false) {
            obj.userLoginMustBeDomain = message.userLoginMustBeDomain;
        }
        if (message.validateOrgDomains !== false) {
            obj.validateOrgDomains = message.validateOrgDomains;
        }
        if (message.smtpSenderAddressMatchesInstanceDomain !== false) {
            obj.smtpSenderAddressMatchesInstanceDomain = message.smtpSenderAddressMatchesInstanceDomain;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCustomDomainPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseUpdateCustomDomainPolicyRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.userLoginMustBeDomain = (_b = object.userLoginMustBeDomain) !== null && _b !== void 0 ? _b : false;
        message.validateOrgDomains = (_c = object.validateOrgDomains) !== null && _c !== void 0 ? _c : false;
        message.smtpSenderAddressMatchesInstanceDomain = (_d = object.smtpSenderAddressMatchesInstanceDomain) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseUpdateCustomDomainPolicyResponse() {
    return { details: undefined };
}
exports.UpdateCustomDomainPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateCustomDomainPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateCustomDomainPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateCustomDomainPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomDomainPolicyToDefaultRequest() {
    return { orgId: "" };
}
exports.ResetCustomDomainPolicyToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainPolicyToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomDomainPolicyToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomDomainPolicyToDefaultRequest();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomDomainPolicyToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomDomainPolicyToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainPolicyToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomDomainPolicyToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainPolicyToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLabelPolicyRequest() {
    return {};
}
exports.GetLabelPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetLabelPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetLabelPolicyRequest();
        return message;
    },
};
function createBaseGetLabelPolicyResponse() {
    return { policy: undefined };
}
exports.GetLabelPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.LabelPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.LabelPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.LabelPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetLabelPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetLabelPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.LabelPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseGetPreviewLabelPolicyRequest() {
    return {};
}
exports.GetPreviewLabelPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviewLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetPreviewLabelPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPreviewLabelPolicyRequest();
        return message;
    },
};
function createBaseGetPreviewLabelPolicyResponse() {
    return { policy: undefined };
}
exports.GetPreviewLabelPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.LabelPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPreviewLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.LabelPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.LabelPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.LabelPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetPreviewLabelPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetPreviewLabelPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.LabelPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLabelPolicyRequest() {
    return {
        primaryColor: "",
        hideLoginNameSuffix: false,
        warnColor: "",
        backgroundColor: "",
        fontColor: "",
        primaryColorDark: "",
        backgroundColorDark: "",
        warnColorDark: "",
        fontColorDark: "",
        disableWatermark: false,
        themeMode: 0,
    };
}
exports.UpdateLabelPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.primaryColor !== "") {
            writer.uint32(10).string(message.primaryColor);
        }
        if (message.hideLoginNameSuffix !== false) {
            writer.uint32(24).bool(message.hideLoginNameSuffix);
        }
        if (message.warnColor !== "") {
            writer.uint32(34).string(message.warnColor);
        }
        if (message.backgroundColor !== "") {
            writer.uint32(42).string(message.backgroundColor);
        }
        if (message.fontColor !== "") {
            writer.uint32(50).string(message.fontColor);
        }
        if (message.primaryColorDark !== "") {
            writer.uint32(58).string(message.primaryColorDark);
        }
        if (message.backgroundColorDark !== "") {
            writer.uint32(66).string(message.backgroundColorDark);
        }
        if (message.warnColorDark !== "") {
            writer.uint32(74).string(message.warnColorDark);
        }
        if (message.fontColorDark !== "") {
            writer.uint32(82).string(message.fontColorDark);
        }
        if (message.disableWatermark !== false) {
            writer.uint32(88).bool(message.disableWatermark);
        }
        if (message.themeMode !== 0) {
            writer.uint32(96).int32(message.themeMode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.primaryColor = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hideLoginNameSuffix = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.warnColor = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.backgroundColor = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.fontColor = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.primaryColorDark = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.backgroundColorDark = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.warnColorDark = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.fontColorDark = reader.string();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.disableWatermark = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.themeMode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            primaryColor: isSet(object.primaryColor) ? globalThis.String(object.primaryColor) : "",
            hideLoginNameSuffix: isSet(object.hideLoginNameSuffix) ? globalThis.Boolean(object.hideLoginNameSuffix) : false,
            warnColor: isSet(object.warnColor) ? globalThis.String(object.warnColor) : "",
            backgroundColor: isSet(object.backgroundColor) ? globalThis.String(object.backgroundColor) : "",
            fontColor: isSet(object.fontColor) ? globalThis.String(object.fontColor) : "",
            primaryColorDark: isSet(object.primaryColorDark) ? globalThis.String(object.primaryColorDark) : "",
            backgroundColorDark: isSet(object.backgroundColorDark) ? globalThis.String(object.backgroundColorDark) : "",
            warnColorDark: isSet(object.warnColorDark) ? globalThis.String(object.warnColorDark) : "",
            fontColorDark: isSet(object.fontColorDark) ? globalThis.String(object.fontColorDark) : "",
            disableWatermark: isSet(object.disableWatermark) ? globalThis.Boolean(object.disableWatermark) : false,
            themeMode: isSet(object.themeMode) ? (0, policy_js_1.themeModeFromJSON)(object.themeMode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.primaryColor !== "") {
            obj.primaryColor = message.primaryColor;
        }
        if (message.hideLoginNameSuffix !== false) {
            obj.hideLoginNameSuffix = message.hideLoginNameSuffix;
        }
        if (message.warnColor !== "") {
            obj.warnColor = message.warnColor;
        }
        if (message.backgroundColor !== "") {
            obj.backgroundColor = message.backgroundColor;
        }
        if (message.fontColor !== "") {
            obj.fontColor = message.fontColor;
        }
        if (message.primaryColorDark !== "") {
            obj.primaryColorDark = message.primaryColorDark;
        }
        if (message.backgroundColorDark !== "") {
            obj.backgroundColorDark = message.backgroundColorDark;
        }
        if (message.warnColorDark !== "") {
            obj.warnColorDark = message.warnColorDark;
        }
        if (message.fontColorDark !== "") {
            obj.fontColorDark = message.fontColorDark;
        }
        if (message.disableWatermark !== false) {
            obj.disableWatermark = message.disableWatermark;
        }
        if (message.themeMode !== 0) {
            obj.themeMode = (0, policy_js_1.themeModeToJSON)(message.themeMode);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLabelPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseUpdateLabelPolicyRequest();
        message.primaryColor = (_a = object.primaryColor) !== null && _a !== void 0 ? _a : "";
        message.hideLoginNameSuffix = (_b = object.hideLoginNameSuffix) !== null && _b !== void 0 ? _b : false;
        message.warnColor = (_c = object.warnColor) !== null && _c !== void 0 ? _c : "";
        message.backgroundColor = (_d = object.backgroundColor) !== null && _d !== void 0 ? _d : "";
        message.fontColor = (_e = object.fontColor) !== null && _e !== void 0 ? _e : "";
        message.primaryColorDark = (_f = object.primaryColorDark) !== null && _f !== void 0 ? _f : "";
        message.backgroundColorDark = (_g = object.backgroundColorDark) !== null && _g !== void 0 ? _g : "";
        message.warnColorDark = (_h = object.warnColorDark) !== null && _h !== void 0 ? _h : "";
        message.fontColorDark = (_j = object.fontColorDark) !== null && _j !== void 0 ? _j : "";
        message.disableWatermark = (_k = object.disableWatermark) !== null && _k !== void 0 ? _k : false;
        message.themeMode = (_l = object.themeMode) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
function createBaseUpdateLabelPolicyResponse() {
    return { details: undefined };
}
exports.UpdateLabelPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLabelPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLabelPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseActivateLabelPolicyRequest() {
    return {};
}
exports.ActivateLabelPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateLabelPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ActivateLabelPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseActivateLabelPolicyRequest();
        return message;
    },
};
function createBaseActivateLabelPolicyResponse() {
    return { details: undefined };
}
exports.ActivateLabelPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateLabelPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateLabelPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseActivateLabelPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoRequest() {
    return {};
}
exports.RemoveLabelPolicyLogoRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyLogoRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyLogoRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoResponse() {
    return { details: undefined };
}
exports.RemoveLabelPolicyLogoResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyLogoResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyLogoResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoDarkRequest() {
    return {};
}
exports.RemoveLabelPolicyLogoDarkRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoDarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyLogoDarkRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyLogoDarkRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyLogoDarkResponse() {
    return { details: undefined };
}
exports.RemoveLabelPolicyLogoDarkResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyLogoDarkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyLogoDarkResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyLogoDarkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyIconRequest() {
    return {};
}
exports.RemoveLabelPolicyIconRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyIconRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyIconRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyIconResponse() {
    return { details: undefined };
}
exports.RemoveLabelPolicyIconResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyIconResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyIconResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyIconDarkRequest() {
    return {};
}
exports.RemoveLabelPolicyIconDarkRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconDarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyIconDarkRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyIconDarkRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyIconDarkResponse() {
    return { details: undefined };
}
exports.RemoveLabelPolicyIconDarkResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyIconDarkResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyIconDarkResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyIconDarkResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveLabelPolicyFontRequest() {
    return {};
}
exports.RemoveLabelPolicyFontRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyFontRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyFontRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveLabelPolicyFontRequest();
        return message;
    },
};
function createBaseRemoveLabelPolicyFontResponse() {
    return { details: undefined };
}
exports.RemoveLabelPolicyFontResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveLabelPolicyFontResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveLabelPolicyFontResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveLabelPolicyFontResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLoginPolicyRequest() {
    return {};
}
exports.GetLoginPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetLoginPolicyRequest();
        return message;
    },
};
function createBaseGetLoginPolicyResponse() {
    return { policy: undefined };
}
exports.GetLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.LoginPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.LoginPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.LoginPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.LoginPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetLoginPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.LoginPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLoginPolicyRequest() {
    return {
        allowUsernamePassword: false,
        allowRegister: false,
        allowExternalIdp: false,
        forceMfa: false,
        passwordlessType: 0,
        hidePasswordReset: false,
        ignoreUnknownUsernames: false,
        defaultRedirectUri: "",
        passwordCheckLifetime: undefined,
        externalLoginCheckLifetime: undefined,
        mfaInitSkipLifetime: undefined,
        secondFactorCheckLifetime: undefined,
        multiFactorCheckLifetime: undefined,
        allowDomainDiscovery: false,
        disableLoginWithEmail: false,
        disableLoginWithPhone: false,
        forceMfaLocalOnly: false,
    };
}
exports.UpdateLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.allowUsernamePassword !== false) {
            writer.uint32(8).bool(message.allowUsernamePassword);
        }
        if (message.allowRegister !== false) {
            writer.uint32(16).bool(message.allowRegister);
        }
        if (message.allowExternalIdp !== false) {
            writer.uint32(24).bool(message.allowExternalIdp);
        }
        if (message.forceMfa !== false) {
            writer.uint32(32).bool(message.forceMfa);
        }
        if (message.passwordlessType !== 0) {
            writer.uint32(40).int32(message.passwordlessType);
        }
        if (message.hidePasswordReset !== false) {
            writer.uint32(48).bool(message.hidePasswordReset);
        }
        if (message.ignoreUnknownUsernames !== false) {
            writer.uint32(56).bool(message.ignoreUnknownUsernames);
        }
        if (message.defaultRedirectUri !== "") {
            writer.uint32(66).string(message.defaultRedirectUri);
        }
        if (message.passwordCheckLifetime !== undefined) {
            duration_js_1.Duration.encode(message.passwordCheckLifetime, writer.uint32(74).fork()).join();
        }
        if (message.externalLoginCheckLifetime !== undefined) {
            duration_js_1.Duration.encode(message.externalLoginCheckLifetime, writer.uint32(82).fork()).join();
        }
        if (message.mfaInitSkipLifetime !== undefined) {
            duration_js_1.Duration.encode(message.mfaInitSkipLifetime, writer.uint32(90).fork()).join();
        }
        if (message.secondFactorCheckLifetime !== undefined) {
            duration_js_1.Duration.encode(message.secondFactorCheckLifetime, writer.uint32(98).fork()).join();
        }
        if (message.multiFactorCheckLifetime !== undefined) {
            duration_js_1.Duration.encode(message.multiFactorCheckLifetime, writer.uint32(106).fork()).join();
        }
        if (message.allowDomainDiscovery !== false) {
            writer.uint32(112).bool(message.allowDomainDiscovery);
        }
        if (message.disableLoginWithEmail !== false) {
            writer.uint32(120).bool(message.disableLoginWithEmail);
        }
        if (message.disableLoginWithPhone !== false) {
            writer.uint32(128).bool(message.disableLoginWithPhone);
        }
        if (message.forceMfaLocalOnly !== false) {
            writer.uint32(136).bool(message.forceMfaLocalOnly);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.allowUsernamePassword = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.allowRegister = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.allowExternalIdp = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.forceMfa = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.passwordlessType = reader.int32();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.hidePasswordReset = reader.bool();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.ignoreUnknownUsernames = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.defaultRedirectUri = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.passwordCheckLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.externalLoginCheckLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.mfaInitSkipLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.secondFactorCheckLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.multiFactorCheckLifetime = duration_js_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.allowDomainDiscovery = reader.bool();
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.disableLoginWithEmail = reader.bool();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.disableLoginWithPhone = reader.bool();
                    continue;
                case 17:
                    if (tag !== 136) {
                        break;
                    }
                    message.forceMfaLocalOnly = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            allowUsernamePassword: isSet(object.allowUsernamePassword)
                ? globalThis.Boolean(object.allowUsernamePassword)
                : false,
            allowRegister: isSet(object.allowRegister) ? globalThis.Boolean(object.allowRegister) : false,
            allowExternalIdp: isSet(object.allowExternalIdp) ? globalThis.Boolean(object.allowExternalIdp) : false,
            forceMfa: isSet(object.forceMfa) ? globalThis.Boolean(object.forceMfa) : false,
            passwordlessType: isSet(object.passwordlessType) ? (0, policy_js_1.passwordlessTypeFromJSON)(object.passwordlessType) : 0,
            hidePasswordReset: isSet(object.hidePasswordReset) ? globalThis.Boolean(object.hidePasswordReset) : false,
            ignoreUnknownUsernames: isSet(object.ignoreUnknownUsernames)
                ? globalThis.Boolean(object.ignoreUnknownUsernames)
                : false,
            defaultRedirectUri: isSet(object.defaultRedirectUri) ? globalThis.String(object.defaultRedirectUri) : "",
            passwordCheckLifetime: isSet(object.passwordCheckLifetime)
                ? duration_js_1.Duration.fromJSON(object.passwordCheckLifetime)
                : undefined,
            externalLoginCheckLifetime: isSet(object.externalLoginCheckLifetime)
                ? duration_js_1.Duration.fromJSON(object.externalLoginCheckLifetime)
                : undefined,
            mfaInitSkipLifetime: isSet(object.mfaInitSkipLifetime)
                ? duration_js_1.Duration.fromJSON(object.mfaInitSkipLifetime)
                : undefined,
            secondFactorCheckLifetime: isSet(object.secondFactorCheckLifetime)
                ? duration_js_1.Duration.fromJSON(object.secondFactorCheckLifetime)
                : undefined,
            multiFactorCheckLifetime: isSet(object.multiFactorCheckLifetime)
                ? duration_js_1.Duration.fromJSON(object.multiFactorCheckLifetime)
                : undefined,
            allowDomainDiscovery: isSet(object.allowDomainDiscovery)
                ? globalThis.Boolean(object.allowDomainDiscovery)
                : false,
            disableLoginWithEmail: isSet(object.disableLoginWithEmail)
                ? globalThis.Boolean(object.disableLoginWithEmail)
                : false,
            disableLoginWithPhone: isSet(object.disableLoginWithPhone)
                ? globalThis.Boolean(object.disableLoginWithPhone)
                : false,
            forceMfaLocalOnly: isSet(object.forceMfaLocalOnly) ? globalThis.Boolean(object.forceMfaLocalOnly) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.allowUsernamePassword !== false) {
            obj.allowUsernamePassword = message.allowUsernamePassword;
        }
        if (message.allowRegister !== false) {
            obj.allowRegister = message.allowRegister;
        }
        if (message.allowExternalIdp !== false) {
            obj.allowExternalIdp = message.allowExternalIdp;
        }
        if (message.forceMfa !== false) {
            obj.forceMfa = message.forceMfa;
        }
        if (message.passwordlessType !== 0) {
            obj.passwordlessType = (0, policy_js_1.passwordlessTypeToJSON)(message.passwordlessType);
        }
        if (message.hidePasswordReset !== false) {
            obj.hidePasswordReset = message.hidePasswordReset;
        }
        if (message.ignoreUnknownUsernames !== false) {
            obj.ignoreUnknownUsernames = message.ignoreUnknownUsernames;
        }
        if (message.defaultRedirectUri !== "") {
            obj.defaultRedirectUri = message.defaultRedirectUri;
        }
        if (message.passwordCheckLifetime !== undefined) {
            obj.passwordCheckLifetime = duration_js_1.Duration.toJSON(message.passwordCheckLifetime);
        }
        if (message.externalLoginCheckLifetime !== undefined) {
            obj.externalLoginCheckLifetime = duration_js_1.Duration.toJSON(message.externalLoginCheckLifetime);
        }
        if (message.mfaInitSkipLifetime !== undefined) {
            obj.mfaInitSkipLifetime = duration_js_1.Duration.toJSON(message.mfaInitSkipLifetime);
        }
        if (message.secondFactorCheckLifetime !== undefined) {
            obj.secondFactorCheckLifetime = duration_js_1.Duration.toJSON(message.secondFactorCheckLifetime);
        }
        if (message.multiFactorCheckLifetime !== undefined) {
            obj.multiFactorCheckLifetime = duration_js_1.Duration.toJSON(message.multiFactorCheckLifetime);
        }
        if (message.allowDomainDiscovery !== false) {
            obj.allowDomainDiscovery = message.allowDomainDiscovery;
        }
        if (message.disableLoginWithEmail !== false) {
            obj.disableLoginWithEmail = message.disableLoginWithEmail;
        }
        if (message.disableLoginWithPhone !== false) {
            obj.disableLoginWithPhone = message.disableLoginWithPhone;
        }
        if (message.forceMfaLocalOnly !== false) {
            obj.forceMfaLocalOnly = message.forceMfaLocalOnly;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = createBaseUpdateLoginPolicyRequest();
        message.allowUsernamePassword = (_a = object.allowUsernamePassword) !== null && _a !== void 0 ? _a : false;
        message.allowRegister = (_b = object.allowRegister) !== null && _b !== void 0 ? _b : false;
        message.allowExternalIdp = (_c = object.allowExternalIdp) !== null && _c !== void 0 ? _c : false;
        message.forceMfa = (_d = object.forceMfa) !== null && _d !== void 0 ? _d : false;
        message.passwordlessType = (_e = object.passwordlessType) !== null && _e !== void 0 ? _e : 0;
        message.hidePasswordReset = (_f = object.hidePasswordReset) !== null && _f !== void 0 ? _f : false;
        message.ignoreUnknownUsernames = (_g = object.ignoreUnknownUsernames) !== null && _g !== void 0 ? _g : false;
        message.defaultRedirectUri = (_h = object.defaultRedirectUri) !== null && _h !== void 0 ? _h : "";
        message.passwordCheckLifetime =
            (object.passwordCheckLifetime !== undefined && object.passwordCheckLifetime !== null)
                ? duration_js_1.Duration.fromPartial(object.passwordCheckLifetime)
                : undefined;
        message.externalLoginCheckLifetime =
            (object.externalLoginCheckLifetime !== undefined && object.externalLoginCheckLifetime !== null)
                ? duration_js_1.Duration.fromPartial(object.externalLoginCheckLifetime)
                : undefined;
        message.mfaInitSkipLifetime = (object.mfaInitSkipLifetime !== undefined && object.mfaInitSkipLifetime !== null)
            ? duration_js_1.Duration.fromPartial(object.mfaInitSkipLifetime)
            : undefined;
        message.secondFactorCheckLifetime =
            (object.secondFactorCheckLifetime !== undefined && object.secondFactorCheckLifetime !== null)
                ? duration_js_1.Duration.fromPartial(object.secondFactorCheckLifetime)
                : undefined;
        message.multiFactorCheckLifetime =
            (object.multiFactorCheckLifetime !== undefined && object.multiFactorCheckLifetime !== null)
                ? duration_js_1.Duration.fromPartial(object.multiFactorCheckLifetime)
                : undefined;
        message.allowDomainDiscovery = (_j = object.allowDomainDiscovery) !== null && _j !== void 0 ? _j : false;
        message.disableLoginWithEmail = (_k = object.disableLoginWithEmail) !== null && _k !== void 0 ? _k : false;
        message.disableLoginWithPhone = (_l = object.disableLoginWithPhone) !== null && _l !== void 0 ? _l : false;
        message.forceMfaLocalOnly = (_m = object.forceMfaLocalOnly) !== null && _m !== void 0 ? _m : false;
        return message;
    },
};
function createBaseUpdateLoginPolicyResponse() {
    return { details: undefined };
}
exports.UpdateLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyIDPsRequest() {
    return { query: undefined };
}
exports.ListLoginPolicyIDPsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyIDPsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicyIDPsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListLoginPolicyIDPsRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyIDPsResponse() {
    return { details: undefined, result: [] };
}
exports.ListLoginPolicyIDPsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            idp_js_1.IDPLoginPolicyLink.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyIDPsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(idp_js_1.IDPLoginPolicyLink.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result)
                ? object.result.map((e) => idp_js_1.IDPLoginPolicyLink.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => idp_js_1.IDPLoginPolicyLink.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicyIDPsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListLoginPolicyIDPsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => idp_js_1.IDPLoginPolicyLink.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAddIDPToLoginPolicyRequest() {
    return { idpId: "" };
}
exports.AddIDPToLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIDPToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.AddIDPToLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddIDPToLoginPolicyRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAddIDPToLoginPolicyResponse() {
    return { details: undefined };
}
exports.AddIDPToLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIDPToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddIDPToLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddIDPToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIDPFromLoginPolicyRequest() {
    return { idpId: "" };
}
exports.RemoveIDPFromLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.idpId !== "") {
            writer.uint32(10).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIDPFromLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveIDPFromLoginPolicyRequest();
        message.idpId = (_a = object.idpId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveIDPFromLoginPolicyResponse() {
    return { details: undefined };
}
exports.RemoveIDPFromLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIDPFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIDPFromLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIDPFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicySecondFactorsRequest() {
    return {};
}
exports.ListLoginPolicySecondFactorsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicySecondFactorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicySecondFactorsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListLoginPolicySecondFactorsRequest();
        return message;
    },
};
function createBaseListLoginPolicySecondFactorsResponse() {
    return { details: undefined, result: [] };
}
exports.ListLoginPolicySecondFactorsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.result) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicySecondFactorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag === 16) {
                        message.result.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.result.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result)
                ? object.result.map((e) => (0, policy_js_1.secondFactorTypeFromJSON)(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => (0, policy_js_1.secondFactorTypeToJSON)(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicySecondFactorsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListLoginPolicySecondFactorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseAddSecondFactorToLoginPolicyRequest() {
    return { type: 0 };
}
exports.AddSecondFactorToLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSecondFactorToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? (0, policy_js_1.secondFactorTypeFromJSON)(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = (0, policy_js_1.secondFactorTypeToJSON)(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.AddSecondFactorToLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddSecondFactorToLoginPolicyRequest();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseAddSecondFactorToLoginPolicyResponse() {
    return { details: undefined };
}
exports.AddSecondFactorToLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddSecondFactorToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddSecondFactorToLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddSecondFactorToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveSecondFactorFromLoginPolicyRequest() {
    return { type: 0 };
}
exports.RemoveSecondFactorFromLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? (0, policy_js_1.secondFactorTypeFromJSON)(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = (0, policy_js_1.secondFactorTypeToJSON)(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSecondFactorFromLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveSecondFactorFromLoginPolicyRequest();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseRemoveSecondFactorFromLoginPolicyResponse() {
    return { details: undefined };
}
exports.RemoveSecondFactorFromLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveSecondFactorFromLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveSecondFactorFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListLoginPolicyMultiFactorsRequest() {
    return {};
}
exports.ListLoginPolicyMultiFactorsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyMultiFactorsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicyMultiFactorsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListLoginPolicyMultiFactorsRequest();
        return message;
    },
};
function createBaseListLoginPolicyMultiFactorsResponse() {
    return { details: undefined, result: [] };
}
exports.ListLoginPolicyMultiFactorsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.result) {
            writer.int32(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListLoginPolicyMultiFactorsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag === 16) {
                        message.result.push(reader.int32());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.result.push(reader.int32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => (0, policy_js_1.multiFactorTypeFromJSON)(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => (0, policy_js_1.multiFactorTypeToJSON)(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListLoginPolicyMultiFactorsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListLoginPolicyMultiFactorsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseAddMultiFactorToLoginPolicyRequest() {
    return { type: 0 };
}
exports.AddMultiFactorToLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMultiFactorToLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? (0, policy_js_1.multiFactorTypeFromJSON)(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = (0, policy_js_1.multiFactorTypeToJSON)(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.AddMultiFactorToLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddMultiFactorToLoginPolicyRequest();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseAddMultiFactorToLoginPolicyResponse() {
    return { details: undefined };
}
exports.AddMultiFactorToLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddMultiFactorToLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddMultiFactorToLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddMultiFactorToLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveMultiFactorFromLoginPolicyRequest() {
    return { type: 0 };
}
exports.RemoveMultiFactorFromLoginPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { type: isSet(object.type) ? (0, policy_js_1.multiFactorTypeFromJSON)(object.type) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== 0) {
            obj.type = (0, policy_js_1.multiFactorTypeToJSON)(message.type);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveMultiFactorFromLoginPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveMultiFactorFromLoginPolicyRequest();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseRemoveMultiFactorFromLoginPolicyResponse() {
    return { details: undefined };
}
exports.RemoveMultiFactorFromLoginPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveMultiFactorFromLoginPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveMultiFactorFromLoginPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPasswordComplexityPolicyRequest() {
    return {};
}
exports.GetPasswordComplexityPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordComplexityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetPasswordComplexityPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPasswordComplexityPolicyRequest();
        return message;
    },
};
function createBaseGetPasswordComplexityPolicyResponse() {
    return { policy: undefined };
}
exports.GetPasswordComplexityPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.PasswordComplexityPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordComplexityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.PasswordComplexityPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.PasswordComplexityPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.PasswordComplexityPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetPasswordComplexityPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetPasswordComplexityPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.PasswordComplexityPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePasswordComplexityPolicyRequest() {
    return { minLength: 0, hasUppercase: false, hasLowercase: false, hasNumber: false, hasSymbol: false };
}
exports.UpdatePasswordComplexityPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.minLength !== 0) {
            writer.uint32(8).uint32(message.minLength);
        }
        if (message.hasUppercase !== false) {
            writer.uint32(16).bool(message.hasUppercase);
        }
        if (message.hasLowercase !== false) {
            writer.uint32(24).bool(message.hasLowercase);
        }
        if (message.hasNumber !== false) {
            writer.uint32(32).bool(message.hasNumber);
        }
        if (message.hasSymbol !== false) {
            writer.uint32(40).bool(message.hasSymbol);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordComplexityPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.minLength = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.hasUppercase = reader.bool();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.hasLowercase = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.hasNumber = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.hasSymbol = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            minLength: isSet(object.minLength) ? globalThis.Number(object.minLength) : 0,
            hasUppercase: isSet(object.hasUppercase) ? globalThis.Boolean(object.hasUppercase) : false,
            hasLowercase: isSet(object.hasLowercase) ? globalThis.Boolean(object.hasLowercase) : false,
            hasNumber: isSet(object.hasNumber) ? globalThis.Boolean(object.hasNumber) : false,
            hasSymbol: isSet(object.hasSymbol) ? globalThis.Boolean(object.hasSymbol) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.minLength !== 0) {
            obj.minLength = Math.round(message.minLength);
        }
        if (message.hasUppercase !== false) {
            obj.hasUppercase = message.hasUppercase;
        }
        if (message.hasLowercase !== false) {
            obj.hasLowercase = message.hasLowercase;
        }
        if (message.hasNumber !== false) {
            obj.hasNumber = message.hasNumber;
        }
        if (message.hasSymbol !== false) {
            obj.hasSymbol = message.hasSymbol;
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePasswordComplexityPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseUpdatePasswordComplexityPolicyRequest();
        message.minLength = (_a = object.minLength) !== null && _a !== void 0 ? _a : 0;
        message.hasUppercase = (_b = object.hasUppercase) !== null && _b !== void 0 ? _b : false;
        message.hasLowercase = (_c = object.hasLowercase) !== null && _c !== void 0 ? _c : false;
        message.hasNumber = (_d = object.hasNumber) !== null && _d !== void 0 ? _d : false;
        message.hasSymbol = (_e = object.hasSymbol) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function createBaseUpdatePasswordComplexityPolicyResponse() {
    return { details: undefined };
}
exports.UpdatePasswordComplexityPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordComplexityPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePasswordComplexityPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordComplexityPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPasswordAgePolicyRequest() {
    return {};
}
exports.GetPasswordAgePolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordAgePolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetPasswordAgePolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPasswordAgePolicyRequest();
        return message;
    },
};
function createBaseGetPasswordAgePolicyResponse() {
    return { policy: undefined };
}
exports.GetPasswordAgePolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.PasswordAgePolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPasswordAgePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.PasswordAgePolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.PasswordAgePolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.PasswordAgePolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetPasswordAgePolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetPasswordAgePolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.PasswordAgePolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePasswordAgePolicyRequest() {
    return { maxAgeDays: 0, expireWarnDays: 0 };
}
exports.UpdatePasswordAgePolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.maxAgeDays !== 0) {
            writer.uint32(8).uint32(message.maxAgeDays);
        }
        if (message.expireWarnDays !== 0) {
            writer.uint32(16).uint32(message.expireWarnDays);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordAgePolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.maxAgeDays = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.expireWarnDays = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxAgeDays: isSet(object.maxAgeDays) ? globalThis.Number(object.maxAgeDays) : 0,
            expireWarnDays: isSet(object.expireWarnDays) ? globalThis.Number(object.expireWarnDays) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxAgeDays !== 0) {
            obj.maxAgeDays = Math.round(message.maxAgeDays);
        }
        if (message.expireWarnDays !== 0) {
            obj.expireWarnDays = Math.round(message.expireWarnDays);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePasswordAgePolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdatePasswordAgePolicyRequest();
        message.maxAgeDays = (_a = object.maxAgeDays) !== null && _a !== void 0 ? _a : 0;
        message.expireWarnDays = (_b = object.expireWarnDays) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseUpdatePasswordAgePolicyResponse() {
    return { details: undefined };
}
exports.UpdatePasswordAgePolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePasswordAgePolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePasswordAgePolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePasswordAgePolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetLockoutPolicyRequest() {
    return {};
}
exports.GetLockoutPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLockoutPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetLockoutPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetLockoutPolicyRequest();
        return message;
    },
};
function createBaseGetLockoutPolicyResponse() {
    return { policy: undefined };
}
exports.GetLockoutPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.LockoutPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLockoutPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.LockoutPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.LockoutPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.LockoutPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetLockoutPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetLockoutPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.LockoutPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateLockoutPolicyRequest() {
    return { maxPasswordAttempts: 0, maxOtpAttempts: 0 };
}
exports.UpdateLockoutPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.maxPasswordAttempts !== 0) {
            writer.uint32(8).uint32(message.maxPasswordAttempts);
        }
        if (message.maxOtpAttempts !== 0) {
            writer.uint32(16).uint32(message.maxOtpAttempts);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLockoutPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.maxPasswordAttempts = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.maxOtpAttempts = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            maxPasswordAttempts: isSet(object.maxPasswordAttempts) ? globalThis.Number(object.maxPasswordAttempts) : 0,
            maxOtpAttempts: isSet(object.maxOtpAttempts) ? globalThis.Number(object.maxOtpAttempts) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.maxPasswordAttempts !== 0) {
            obj.maxPasswordAttempts = Math.round(message.maxPasswordAttempts);
        }
        if (message.maxOtpAttempts !== 0) {
            obj.maxOtpAttempts = Math.round(message.maxOtpAttempts);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLockoutPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateLockoutPolicyRequest();
        message.maxPasswordAttempts = (_a = object.maxPasswordAttempts) !== null && _a !== void 0 ? _a : 0;
        message.maxOtpAttempts = (_b = object.maxOtpAttempts) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseUpdateLockoutPolicyResponse() {
    return { details: undefined };
}
exports.UpdateLockoutPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateLockoutPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateLockoutPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateLockoutPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetPrivacyPolicyRequest() {
    return {};
}
exports.GetPrivacyPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPrivacyPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetPrivacyPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetPrivacyPolicyRequest();
        return message;
    },
};
function createBaseGetPrivacyPolicyResponse() {
    return { policy: undefined };
}
exports.GetPrivacyPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.PrivacyPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPrivacyPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.PrivacyPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.PrivacyPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.PrivacyPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetPrivacyPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetPrivacyPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.PrivacyPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdatePrivacyPolicyRequest() {
    return {
        tosLink: "",
        privacyLink: "",
        helpLink: "",
        supportEmail: "",
        docsLink: "",
        customLink: "",
        customLinkText: "",
    };
}
exports.UpdatePrivacyPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tosLink !== "") {
            writer.uint32(10).string(message.tosLink);
        }
        if (message.privacyLink !== "") {
            writer.uint32(18).string(message.privacyLink);
        }
        if (message.helpLink !== "") {
            writer.uint32(26).string(message.helpLink);
        }
        if (message.supportEmail !== "") {
            writer.uint32(34).string(message.supportEmail);
        }
        if (message.docsLink !== "") {
            writer.uint32(42).string(message.docsLink);
        }
        if (message.customLink !== "") {
            writer.uint32(50).string(message.customLink);
        }
        if (message.customLinkText !== "") {
            writer.uint32(58).string(message.customLinkText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePrivacyPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.tosLink = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.privacyLink = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.helpLink = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.supportEmail = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.docsLink = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.customLink = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.customLinkText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            tosLink: isSet(object.tosLink) ? globalThis.String(object.tosLink) : "",
            privacyLink: isSet(object.privacyLink) ? globalThis.String(object.privacyLink) : "",
            helpLink: isSet(object.helpLink) ? globalThis.String(object.helpLink) : "",
            supportEmail: isSet(object.supportEmail) ? globalThis.String(object.supportEmail) : "",
            docsLink: isSet(object.docsLink) ? globalThis.String(object.docsLink) : "",
            customLink: isSet(object.customLink) ? globalThis.String(object.customLink) : "",
            customLinkText: isSet(object.customLinkText) ? globalThis.String(object.customLinkText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.tosLink !== "") {
            obj.tosLink = message.tosLink;
        }
        if (message.privacyLink !== "") {
            obj.privacyLink = message.privacyLink;
        }
        if (message.helpLink !== "") {
            obj.helpLink = message.helpLink;
        }
        if (message.supportEmail !== "") {
            obj.supportEmail = message.supportEmail;
        }
        if (message.docsLink !== "") {
            obj.docsLink = message.docsLink;
        }
        if (message.customLink !== "") {
            obj.customLink = message.customLink;
        }
        if (message.customLinkText !== "") {
            obj.customLinkText = message.customLinkText;
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePrivacyPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseUpdatePrivacyPolicyRequest();
        message.tosLink = (_a = object.tosLink) !== null && _a !== void 0 ? _a : "";
        message.privacyLink = (_b = object.privacyLink) !== null && _b !== void 0 ? _b : "";
        message.helpLink = (_c = object.helpLink) !== null && _c !== void 0 ? _c : "";
        message.supportEmail = (_d = object.supportEmail) !== null && _d !== void 0 ? _d : "";
        message.docsLink = (_e = object.docsLink) !== null && _e !== void 0 ? _e : "";
        message.customLink = (_f = object.customLink) !== null && _f !== void 0 ? _f : "";
        message.customLinkText = (_g = object.customLinkText) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseUpdatePrivacyPolicyResponse() {
    return { details: undefined };
}
exports.UpdatePrivacyPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdatePrivacyPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdatePrivacyPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdatePrivacyPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddNotificationPolicyRequest() {
    return { passwordChange: false };
}
exports.AddNotificationPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.passwordChange !== false) {
            writer.uint32(8).bool(message.passwordChange);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.passwordChange = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.passwordChange !== false) {
            obj.passwordChange = message.passwordChange;
        }
        return obj;
    },
    create(base) {
        return exports.AddNotificationPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAddNotificationPolicyRequest();
        message.passwordChange = (_a = object.passwordChange) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseAddNotificationPolicyResponse() {
    return { details: undefined };
}
exports.AddNotificationPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddNotificationPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddNotificationPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetNotificationPolicyRequest() {
    return {};
}
exports.GetNotificationPolicyRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetNotificationPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetNotificationPolicyRequest();
        return message;
    },
};
function createBaseGetNotificationPolicyResponse() {
    return { policy: undefined };
}
exports.GetNotificationPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.policy !== undefined) {
            policy_js_1.NotificationPolicy.encode(message.policy, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.policy = policy_js_1.NotificationPolicy.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { policy: isSet(object.policy) ? policy_js_1.NotificationPolicy.fromJSON(object.policy) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.policy !== undefined) {
            obj.policy = policy_js_1.NotificationPolicy.toJSON(message.policy);
        }
        return obj;
    },
    create(base) {
        return exports.GetNotificationPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetNotificationPolicyResponse();
        message.policy = (object.policy !== undefined && object.policy !== null)
            ? policy_js_1.NotificationPolicy.fromPartial(object.policy)
            : undefined;
        return message;
    },
};
function createBaseUpdateNotificationPolicyRequest() {
    return { passwordChange: false };
}
exports.UpdateNotificationPolicyRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.passwordChange !== false) {
            writer.uint32(8).bool(message.passwordChange);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateNotificationPolicyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.passwordChange = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { passwordChange: isSet(object.passwordChange) ? globalThis.Boolean(object.passwordChange) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.passwordChange !== false) {
            obj.passwordChange = message.passwordChange;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateNotificationPolicyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseUpdateNotificationPolicyRequest();
        message.passwordChange = (_a = object.passwordChange) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseUpdateNotificationPolicyResponse() {
    return { details: undefined };
}
exports.UpdateNotificationPolicyResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateNotificationPolicyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateNotificationPolicyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateNotificationPolicyResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultInitMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultInitMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultInitMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultInitMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultInitMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultInitMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultInitMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInitMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomInitMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomInitMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomInitMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomInitMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomInitMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomInitMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomInitMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInitMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultInitMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultInitMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInitMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultInitMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultInitMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultInitMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultInitMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInitMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultInitMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInitMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomInitMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomInitMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInitMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomInitMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomInitMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomInitMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomInitMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInitMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomInitMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInitMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordResetMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultPasswordResetMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordResetMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultPasswordResetMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultPasswordResetMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultPasswordResetMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordResetMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordResetMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordResetMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomPasswordResetMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordResetMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomPasswordResetMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomPasswordResetMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomPasswordResetMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordResetMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordResetMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordResetMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultPasswordResetMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordResetMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordResetMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultPasswordResetMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultPasswordResetMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultPasswordResetMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordResetMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordResetMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordResetMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordResetMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomPasswordResetMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordResetMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomPasswordResetMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomPasswordResetMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordResetMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordResetMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyEmailMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultVerifyEmailMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyEmailMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultVerifyEmailMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultVerifyEmailMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultVerifyEmailMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyEmailMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyEmailMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomVerifyEmailMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyEmailMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomVerifyEmailMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomVerifyEmailMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomVerifyEmailMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyEmailMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyEmailMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultVerifyEmailMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyEmailMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultVerifyEmailMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultVerifyEmailMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultVerifyEmailMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyEmailMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyEmailMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomVerifyEmailMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyEmailMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomVerifyEmailMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomVerifyEmailMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyEmailMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyPhoneMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultVerifyPhoneMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyPhoneMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultVerifyPhoneMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultVerifyPhoneMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultVerifyPhoneMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyPhoneMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyPhoneMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyPhoneMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomVerifyPhoneMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyPhoneMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomVerifyPhoneMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomVerifyPhoneMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomVerifyPhoneMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyPhoneMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyPhoneMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyPhoneMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultVerifyPhoneMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyPhoneMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultVerifyPhoneMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultVerifyPhoneMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultVerifyPhoneMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyPhoneMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyPhoneMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomVerifyPhoneMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyPhoneMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomVerifyPhoneMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyPhoneMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyPhoneMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifySMSOTPMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifySMSOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomVerifySMSOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomVerifySMSOTPMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifySMSOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifySMSOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifySMSOTPMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultVerifySMSOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultVerifySMSOTPMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifySMSOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifySMSOTPMessageTextRequest() {
    return { language: "", text: "" };
}
exports.SetDefaultVerifySMSOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifySMSOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetDefaultVerifySMSOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.text = (_b = object.text) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseSetDefaultVerifySMSOTPMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultVerifySMSOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifySMSOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifySMSOTPMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomVerifySMSOTPMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifySMSOTPMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomVerifySMSOTPMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifySMSOTPMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifySMSOTPMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetCustomVerifyEmailOTPMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyEmailOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomVerifyEmailOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomVerifyEmailOTPMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomVerifyEmailOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomVerifyEmailOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultVerifyEmailOTPMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultVerifyEmailOTPMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultVerifyEmailOTPMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultVerifyEmailOTPMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultVerifyEmailOTPMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyEmailOTPMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultVerifyEmailOTPMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultVerifyEmailOTPMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultVerifyEmailOTPMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultVerifyEmailOTPMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomVerifyEmailOTPMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultDomainClaimedMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultDomainClaimedMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultDomainClaimedMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultDomainClaimedMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultDomainClaimedMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultDomainClaimedMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultDomainClaimedMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultDomainClaimedMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomDomainClaimedMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomDomainClaimedMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomDomainClaimedMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomDomainClaimedMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomDomainClaimedMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomDomainClaimedMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomDomainClaimedMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomDomainClaimedMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultDomainClaimedMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultDomainClaimedMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultDomainClaimedMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultDomainClaimedMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultDomainClaimedMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultDomainClaimedMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultDomainClaimedMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultDomainClaimedMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomDomainClaimedMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomDomainClaimedMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomDomainClaimedMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomDomainClaimedMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomDomainClaimedMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomDomainClaimedMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomDomainClaimedMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordChangeMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultPasswordChangeMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordChangeMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultPasswordChangeMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultPasswordChangeMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultPasswordChangeMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordChangeMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordChangeMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordChangeMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomPasswordChangeMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordChangeMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomPasswordChangeMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomPasswordChangeMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomPasswordChangeMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordChangeMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordChangeMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordChangeMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultPasswordChangeMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordChangeMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultPasswordChangeMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultPasswordChangeMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultPasswordChangeMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordChangeMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordChangeMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordChangeMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomPasswordChangeMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordChangeMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomPasswordChangeMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomPasswordChangeMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordChangeMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordChangeMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultInviteUserMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultInviteUserMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultInviteUserMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultInviteUserMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultInviteUserMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultInviteUserMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultInviteUserMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultInviteUserMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomInviteUserMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomInviteUserMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomInviteUserMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomInviteUserMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomInviteUserMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomInviteUserMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomInviteUserMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomInviteUserMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultInviteUserMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultInviteUserMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInviteUserMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultInviteUserMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultInviteUserMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultInviteUserMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultInviteUserMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultInviteUserMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultInviteUserMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultInviteUserMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomInviteUserMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomInviteUserMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomInviteUserMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomInviteUserMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomInviteUserMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomInviteUserMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomInviteUserMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomInviteUserMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultPasswordlessRegistrationMessageTextRequest() {
    return { language: "" };
}
exports.GetDefaultPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultPasswordlessRegistrationMessageTextResponse() {
    return { customText: undefined };
}
exports.GetDefaultPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultPasswordlessRegistrationMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomPasswordlessRegistrationMessageTextRequest() {
    return { language: "" };
}
exports.GetCustomPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomPasswordlessRegistrationMessageTextResponse() {
    return { customText: undefined };
}
exports.GetCustomPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.MessageCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.MessageCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.MessageCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.MessageCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomPasswordlessRegistrationMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomPasswordlessRegistrationMessageTextResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.MessageCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetDefaultPasswordlessRegistrationMessageTextRequest() {
    return {
        language: "",
        title: "",
        preHeader: "",
        subject: "",
        greeting: "",
        text: "",
        buttonText: "",
        footerText: "",
    };
}
exports.SetDefaultPasswordlessRegistrationMessageTextRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.preHeader !== "") {
            writer.uint32(26).string(message.preHeader);
        }
        if (message.subject !== "") {
            writer.uint32(34).string(message.subject);
        }
        if (message.greeting !== "") {
            writer.uint32(42).string(message.greeting);
        }
        if (message.text !== "") {
            writer.uint32(50).string(message.text);
        }
        if (message.buttonText !== "") {
            writer.uint32(58).string(message.buttonText);
        }
        if (message.footerText !== "") {
            writer.uint32(66).string(message.footerText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.preHeader = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.greeting = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.buttonText = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.footerText = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            preHeader: isSet(object.preHeader) ? globalThis.String(object.preHeader) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            greeting: isSet(object.greeting) ? globalThis.String(object.greeting) : "",
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            buttonText: isSet(object.buttonText) ? globalThis.String(object.buttonText) : "",
            footerText: isSet(object.footerText) ? globalThis.String(object.footerText) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.preHeader !== "") {
            obj.preHeader = message.preHeader;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.greeting !== "") {
            obj.greeting = message.greeting;
        }
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.buttonText !== "") {
            obj.buttonText = message.buttonText;
        }
        if (message.footerText !== "") {
            obj.footerText = message.footerText;
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordlessRegistrationMessageTextRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.title = (_b = object.title) !== null && _b !== void 0 ? _b : "";
        message.preHeader = (_c = object.preHeader) !== null && _c !== void 0 ? _c : "";
        message.subject = (_d = object.subject) !== null && _d !== void 0 ? _d : "";
        message.greeting = (_e = object.greeting) !== null && _e !== void 0 ? _e : "";
        message.text = (_f = object.text) !== null && _f !== void 0 ? _f : "";
        message.buttonText = (_g = object.buttonText) !== null && _g !== void 0 ? _g : "";
        message.footerText = (_h = object.footerText) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseSetDefaultPasswordlessRegistrationMessageTextResponse() {
    return { details: undefined };
}
exports.SetDefaultPasswordlessRegistrationMessageTextResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetDefaultPasswordlessRegistrationMessageTextResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetDefaultPasswordlessRegistrationMessageTextResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomPasswordlessRegistrationMessageTextToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetDefaultLoginTextsRequest() {
    return { language: "" };
}
exports.GetDefaultLoginTextsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultLoginTextsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetDefaultLoginTextsRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetDefaultLoginTextsResponse() {
    return { customText: undefined };
}
exports.GetDefaultLoginTextsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDefaultLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.LoginCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.LoginCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.LoginCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetDefaultLoginTextsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetDefaultLoginTextsResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.LoginCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseGetCustomLoginTextsRequest() {
    return { language: "" };
}
exports.GetCustomLoginTextsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomLoginTextsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetCustomLoginTextsRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetCustomLoginTextsResponse() {
    return { customText: undefined };
}
exports.GetCustomLoginTextsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customText !== undefined) {
            text_js_1.LoginCustomText.encode(message.customText, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetCustomLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.customText = text_js_1.LoginCustomText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { customText: isSet(object.customText) ? text_js_1.LoginCustomText.fromJSON(object.customText) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.customText !== undefined) {
            obj.customText = text_js_1.LoginCustomText.toJSON(message.customText);
        }
        return obj;
    },
    create(base) {
        return exports.GetCustomLoginTextsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetCustomLoginTextsResponse();
        message.customText = (object.customText !== undefined && object.customText !== null)
            ? text_js_1.LoginCustomText.fromPartial(object.customText)
            : undefined;
        return message;
    },
};
function createBaseSetCustomLoginTextsRequest() {
    return {
        language: "",
        selectAccountText: undefined,
        loginText: undefined,
        passwordText: undefined,
        usernameChangeText: undefined,
        usernameChangeDoneText: undefined,
        initPasswordText: undefined,
        initPasswordDoneText: undefined,
        emailVerificationText: undefined,
        emailVerificationDoneText: undefined,
        initializeUserText: undefined,
        initializeDoneText: undefined,
        initMfaPromptText: undefined,
        initMfaOtpText: undefined,
        initMfaU2fText: undefined,
        initMfaDoneText: undefined,
        mfaProvidersText: undefined,
        verifyMfaOtpText: undefined,
        verifyMfaU2fText: undefined,
        passwordlessText: undefined,
        passwordChangeText: undefined,
        passwordChangeDoneText: undefined,
        passwordResetDoneText: undefined,
        registrationOptionText: undefined,
        registrationUserText: undefined,
        registrationOrgText: undefined,
        linkingUserDoneText: undefined,
        externalUserNotFoundText: undefined,
        successLoginText: undefined,
        logoutText: undefined,
        footerText: undefined,
        passwordlessPromptText: undefined,
        passwordlessRegistrationText: undefined,
        passwordlessRegistrationDoneText: undefined,
        externalRegistrationUserOverviewText: undefined,
        linkingUserPromptText: undefined,
    };
}
exports.SetCustomLoginTextsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        if (message.selectAccountText !== undefined) {
            text_js_1.SelectAccountScreenText.encode(message.selectAccountText, writer.uint32(18).fork()).join();
        }
        if (message.loginText !== undefined) {
            text_js_1.LoginScreenText.encode(message.loginText, writer.uint32(26).fork()).join();
        }
        if (message.passwordText !== undefined) {
            text_js_1.PasswordScreenText.encode(message.passwordText, writer.uint32(34).fork()).join();
        }
        if (message.usernameChangeText !== undefined) {
            text_js_1.UsernameChangeScreenText.encode(message.usernameChangeText, writer.uint32(42).fork()).join();
        }
        if (message.usernameChangeDoneText !== undefined) {
            text_js_1.UsernameChangeDoneScreenText.encode(message.usernameChangeDoneText, writer.uint32(50).fork()).join();
        }
        if (message.initPasswordText !== undefined) {
            text_js_1.InitPasswordScreenText.encode(message.initPasswordText, writer.uint32(58).fork()).join();
        }
        if (message.initPasswordDoneText !== undefined) {
            text_js_1.InitPasswordDoneScreenText.encode(message.initPasswordDoneText, writer.uint32(66).fork()).join();
        }
        if (message.emailVerificationText !== undefined) {
            text_js_1.EmailVerificationScreenText.encode(message.emailVerificationText, writer.uint32(74).fork()).join();
        }
        if (message.emailVerificationDoneText !== undefined) {
            text_js_1.EmailVerificationDoneScreenText.encode(message.emailVerificationDoneText, writer.uint32(82).fork()).join();
        }
        if (message.initializeUserText !== undefined) {
            text_js_1.InitializeUserScreenText.encode(message.initializeUserText, writer.uint32(90).fork()).join();
        }
        if (message.initializeDoneText !== undefined) {
            text_js_1.InitializeUserDoneScreenText.encode(message.initializeDoneText, writer.uint32(98).fork()).join();
        }
        if (message.initMfaPromptText !== undefined) {
            text_js_1.InitMFAPromptScreenText.encode(message.initMfaPromptText, writer.uint32(106).fork()).join();
        }
        if (message.initMfaOtpText !== undefined) {
            text_js_1.InitMFAOTPScreenText.encode(message.initMfaOtpText, writer.uint32(114).fork()).join();
        }
        if (message.initMfaU2fText !== undefined) {
            text_js_1.InitMFAU2FScreenText.encode(message.initMfaU2fText, writer.uint32(122).fork()).join();
        }
        if (message.initMfaDoneText !== undefined) {
            text_js_1.InitMFADoneScreenText.encode(message.initMfaDoneText, writer.uint32(130).fork()).join();
        }
        if (message.mfaProvidersText !== undefined) {
            text_js_1.MFAProvidersText.encode(message.mfaProvidersText, writer.uint32(138).fork()).join();
        }
        if (message.verifyMfaOtpText !== undefined) {
            text_js_1.VerifyMFAOTPScreenText.encode(message.verifyMfaOtpText, writer.uint32(146).fork()).join();
        }
        if (message.verifyMfaU2fText !== undefined) {
            text_js_1.VerifyMFAU2FScreenText.encode(message.verifyMfaU2fText, writer.uint32(154).fork()).join();
        }
        if (message.passwordlessText !== undefined) {
            text_js_1.PasswordlessScreenText.encode(message.passwordlessText, writer.uint32(162).fork()).join();
        }
        if (message.passwordChangeText !== undefined) {
            text_js_1.PasswordChangeScreenText.encode(message.passwordChangeText, writer.uint32(170).fork()).join();
        }
        if (message.passwordChangeDoneText !== undefined) {
            text_js_1.PasswordChangeDoneScreenText.encode(message.passwordChangeDoneText, writer.uint32(178).fork()).join();
        }
        if (message.passwordResetDoneText !== undefined) {
            text_js_1.PasswordResetDoneScreenText.encode(message.passwordResetDoneText, writer.uint32(186).fork()).join();
        }
        if (message.registrationOptionText !== undefined) {
            text_js_1.RegistrationOptionScreenText.encode(message.registrationOptionText, writer.uint32(194).fork()).join();
        }
        if (message.registrationUserText !== undefined) {
            text_js_1.RegistrationUserScreenText.encode(message.registrationUserText, writer.uint32(202).fork()).join();
        }
        if (message.registrationOrgText !== undefined) {
            text_js_1.RegistrationOrgScreenText.encode(message.registrationOrgText, writer.uint32(210).fork()).join();
        }
        if (message.linkingUserDoneText !== undefined) {
            text_js_1.LinkingUserDoneScreenText.encode(message.linkingUserDoneText, writer.uint32(218).fork()).join();
        }
        if (message.externalUserNotFoundText !== undefined) {
            text_js_1.ExternalUserNotFoundScreenText.encode(message.externalUserNotFoundText, writer.uint32(226).fork()).join();
        }
        if (message.successLoginText !== undefined) {
            text_js_1.SuccessLoginScreenText.encode(message.successLoginText, writer.uint32(234).fork()).join();
        }
        if (message.logoutText !== undefined) {
            text_js_1.LogoutDoneScreenText.encode(message.logoutText, writer.uint32(242).fork()).join();
        }
        if (message.footerText !== undefined) {
            text_js_1.FooterText.encode(message.footerText, writer.uint32(250).fork()).join();
        }
        if (message.passwordlessPromptText !== undefined) {
            text_js_1.PasswordlessPromptScreenText.encode(message.passwordlessPromptText, writer.uint32(258).fork()).join();
        }
        if (message.passwordlessRegistrationText !== undefined) {
            text_js_1.PasswordlessRegistrationScreenText.encode(message.passwordlessRegistrationText, writer.uint32(266).fork()).join();
        }
        if (message.passwordlessRegistrationDoneText !== undefined) {
            text_js_1.PasswordlessRegistrationDoneScreenText.encode(message.passwordlessRegistrationDoneText, writer.uint32(274).fork())
                .join();
        }
        if (message.externalRegistrationUserOverviewText !== undefined) {
            text_js_1.ExternalRegistrationUserOverviewScreenText.encode(message.externalRegistrationUserOverviewText, writer.uint32(282).fork()).join();
        }
        if (message.linkingUserPromptText !== undefined) {
            text_js_1.LinkingUserPromptScreenText.encode(message.linkingUserPromptText, writer.uint32(290).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCustomLoginTextsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.selectAccountText = text_js_1.SelectAccountScreenText.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.loginText = text_js_1.LoginScreenText.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.passwordText = text_js_1.PasswordScreenText.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.usernameChangeText = text_js_1.UsernameChangeScreenText.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.usernameChangeDoneText = text_js_1.UsernameChangeDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.initPasswordText = text_js_1.InitPasswordScreenText.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.initPasswordDoneText = text_js_1.InitPasswordDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.emailVerificationText = text_js_1.EmailVerificationScreenText.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.emailVerificationDoneText = text_js_1.EmailVerificationDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.initializeUserText = text_js_1.InitializeUserScreenText.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.initializeDoneText = text_js_1.InitializeUserDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.initMfaPromptText = text_js_1.InitMFAPromptScreenText.decode(reader, reader.uint32());
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.initMfaOtpText = text_js_1.InitMFAOTPScreenText.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.initMfaU2fText = text_js_1.InitMFAU2FScreenText.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.initMfaDoneText = text_js_1.InitMFADoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.mfaProvidersText = text_js_1.MFAProvidersText.decode(reader, reader.uint32());
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.verifyMfaOtpText = text_js_1.VerifyMFAOTPScreenText.decode(reader, reader.uint32());
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.verifyMfaU2fText = text_js_1.VerifyMFAU2FScreenText.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.passwordlessText = text_js_1.PasswordlessScreenText.decode(reader, reader.uint32());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.passwordChangeText = text_js_1.PasswordChangeScreenText.decode(reader, reader.uint32());
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.passwordChangeDoneText = text_js_1.PasswordChangeDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.passwordResetDoneText = text_js_1.PasswordResetDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.registrationOptionText = text_js_1.RegistrationOptionScreenText.decode(reader, reader.uint32());
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.registrationUserText = text_js_1.RegistrationUserScreenText.decode(reader, reader.uint32());
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.registrationOrgText = text_js_1.RegistrationOrgScreenText.decode(reader, reader.uint32());
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.linkingUserDoneText = text_js_1.LinkingUserDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.externalUserNotFoundText = text_js_1.ExternalUserNotFoundScreenText.decode(reader, reader.uint32());
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.successLoginText = text_js_1.SuccessLoginScreenText.decode(reader, reader.uint32());
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.logoutText = text_js_1.LogoutDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.footerText = text_js_1.FooterText.decode(reader, reader.uint32());
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.passwordlessPromptText = text_js_1.PasswordlessPromptScreenText.decode(reader, reader.uint32());
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.passwordlessRegistrationText = text_js_1.PasswordlessRegistrationScreenText.decode(reader, reader.uint32());
                    continue;
                case 34:
                    if (tag !== 274) {
                        break;
                    }
                    message.passwordlessRegistrationDoneText = text_js_1.PasswordlessRegistrationDoneScreenText.decode(reader, reader.uint32());
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.externalRegistrationUserOverviewText = text_js_1.ExternalRegistrationUserOverviewScreenText.decode(reader, reader.uint32());
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.linkingUserPromptText = text_js_1.LinkingUserPromptScreenText.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            language: isSet(object.language) ? globalThis.String(object.language) : "",
            selectAccountText: isSet(object.selectAccountText)
                ? text_js_1.SelectAccountScreenText.fromJSON(object.selectAccountText)
                : undefined,
            loginText: isSet(object.loginText) ? text_js_1.LoginScreenText.fromJSON(object.loginText) : undefined,
            passwordText: isSet(object.passwordText) ? text_js_1.PasswordScreenText.fromJSON(object.passwordText) : undefined,
            usernameChangeText: isSet(object.usernameChangeText)
                ? text_js_1.UsernameChangeScreenText.fromJSON(object.usernameChangeText)
                : undefined,
            usernameChangeDoneText: isSet(object.usernameChangeDoneText)
                ? text_js_1.UsernameChangeDoneScreenText.fromJSON(object.usernameChangeDoneText)
                : undefined,
            initPasswordText: isSet(object.initPasswordText)
                ? text_js_1.InitPasswordScreenText.fromJSON(object.initPasswordText)
                : undefined,
            initPasswordDoneText: isSet(object.initPasswordDoneText)
                ? text_js_1.InitPasswordDoneScreenText.fromJSON(object.initPasswordDoneText)
                : undefined,
            emailVerificationText: isSet(object.emailVerificationText)
                ? text_js_1.EmailVerificationScreenText.fromJSON(object.emailVerificationText)
                : undefined,
            emailVerificationDoneText: isSet(object.emailVerificationDoneText)
                ? text_js_1.EmailVerificationDoneScreenText.fromJSON(object.emailVerificationDoneText)
                : undefined,
            initializeUserText: isSet(object.initializeUserText)
                ? text_js_1.InitializeUserScreenText.fromJSON(object.initializeUserText)
                : undefined,
            initializeDoneText: isSet(object.initializeDoneText)
                ? text_js_1.InitializeUserDoneScreenText.fromJSON(object.initializeDoneText)
                : undefined,
            initMfaPromptText: isSet(object.initMfaPromptText)
                ? text_js_1.InitMFAPromptScreenText.fromJSON(object.initMfaPromptText)
                : undefined,
            initMfaOtpText: isSet(object.initMfaOtpText) ? text_js_1.InitMFAOTPScreenText.fromJSON(object.initMfaOtpText) : undefined,
            initMfaU2fText: isSet(object.initMfaU2fText) ? text_js_1.InitMFAU2FScreenText.fromJSON(object.initMfaU2fText) : undefined,
            initMfaDoneText: isSet(object.initMfaDoneText)
                ? text_js_1.InitMFADoneScreenText.fromJSON(object.initMfaDoneText)
                : undefined,
            mfaProvidersText: isSet(object.mfaProvidersText) ? text_js_1.MFAProvidersText.fromJSON(object.mfaProvidersText) : undefined,
            verifyMfaOtpText: isSet(object.verifyMfaOtpText)
                ? text_js_1.VerifyMFAOTPScreenText.fromJSON(object.verifyMfaOtpText)
                : undefined,
            verifyMfaU2fText: isSet(object.verifyMfaU2fText)
                ? text_js_1.VerifyMFAU2FScreenText.fromJSON(object.verifyMfaU2fText)
                : undefined,
            passwordlessText: isSet(object.passwordlessText)
                ? text_js_1.PasswordlessScreenText.fromJSON(object.passwordlessText)
                : undefined,
            passwordChangeText: isSet(object.passwordChangeText)
                ? text_js_1.PasswordChangeScreenText.fromJSON(object.passwordChangeText)
                : undefined,
            passwordChangeDoneText: isSet(object.passwordChangeDoneText)
                ? text_js_1.PasswordChangeDoneScreenText.fromJSON(object.passwordChangeDoneText)
                : undefined,
            passwordResetDoneText: isSet(object.passwordResetDoneText)
                ? text_js_1.PasswordResetDoneScreenText.fromJSON(object.passwordResetDoneText)
                : undefined,
            registrationOptionText: isSet(object.registrationOptionText)
                ? text_js_1.RegistrationOptionScreenText.fromJSON(object.registrationOptionText)
                : undefined,
            registrationUserText: isSet(object.registrationUserText)
                ? text_js_1.RegistrationUserScreenText.fromJSON(object.registrationUserText)
                : undefined,
            registrationOrgText: isSet(object.registrationOrgText)
                ? text_js_1.RegistrationOrgScreenText.fromJSON(object.registrationOrgText)
                : undefined,
            linkingUserDoneText: isSet(object.linkingUserDoneText)
                ? text_js_1.LinkingUserDoneScreenText.fromJSON(object.linkingUserDoneText)
                : undefined,
            externalUserNotFoundText: isSet(object.externalUserNotFoundText)
                ? text_js_1.ExternalUserNotFoundScreenText.fromJSON(object.externalUserNotFoundText)
                : undefined,
            successLoginText: isSet(object.successLoginText)
                ? text_js_1.SuccessLoginScreenText.fromJSON(object.successLoginText)
                : undefined,
            logoutText: isSet(object.logoutText) ? text_js_1.LogoutDoneScreenText.fromJSON(object.logoutText) : undefined,
            footerText: isSet(object.footerText) ? text_js_1.FooterText.fromJSON(object.footerText) : undefined,
            passwordlessPromptText: isSet(object.passwordlessPromptText)
                ? text_js_1.PasswordlessPromptScreenText.fromJSON(object.passwordlessPromptText)
                : undefined,
            passwordlessRegistrationText: isSet(object.passwordlessRegistrationText)
                ? text_js_1.PasswordlessRegistrationScreenText.fromJSON(object.passwordlessRegistrationText)
                : undefined,
            passwordlessRegistrationDoneText: isSet(object.passwordlessRegistrationDoneText)
                ? text_js_1.PasswordlessRegistrationDoneScreenText.fromJSON(object.passwordlessRegistrationDoneText)
                : undefined,
            externalRegistrationUserOverviewText: isSet(object.externalRegistrationUserOverviewText)
                ? text_js_1.ExternalRegistrationUserOverviewScreenText.fromJSON(object.externalRegistrationUserOverviewText)
                : undefined,
            linkingUserPromptText: isSet(object.linkingUserPromptText)
                ? text_js_1.LinkingUserPromptScreenText.fromJSON(object.linkingUserPromptText)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        if (message.selectAccountText !== undefined) {
            obj.selectAccountText = text_js_1.SelectAccountScreenText.toJSON(message.selectAccountText);
        }
        if (message.loginText !== undefined) {
            obj.loginText = text_js_1.LoginScreenText.toJSON(message.loginText);
        }
        if (message.passwordText !== undefined) {
            obj.passwordText = text_js_1.PasswordScreenText.toJSON(message.passwordText);
        }
        if (message.usernameChangeText !== undefined) {
            obj.usernameChangeText = text_js_1.UsernameChangeScreenText.toJSON(message.usernameChangeText);
        }
        if (message.usernameChangeDoneText !== undefined) {
            obj.usernameChangeDoneText = text_js_1.UsernameChangeDoneScreenText.toJSON(message.usernameChangeDoneText);
        }
        if (message.initPasswordText !== undefined) {
            obj.initPasswordText = text_js_1.InitPasswordScreenText.toJSON(message.initPasswordText);
        }
        if (message.initPasswordDoneText !== undefined) {
            obj.initPasswordDoneText = text_js_1.InitPasswordDoneScreenText.toJSON(message.initPasswordDoneText);
        }
        if (message.emailVerificationText !== undefined) {
            obj.emailVerificationText = text_js_1.EmailVerificationScreenText.toJSON(message.emailVerificationText);
        }
        if (message.emailVerificationDoneText !== undefined) {
            obj.emailVerificationDoneText = text_js_1.EmailVerificationDoneScreenText.toJSON(message.emailVerificationDoneText);
        }
        if (message.initializeUserText !== undefined) {
            obj.initializeUserText = text_js_1.InitializeUserScreenText.toJSON(message.initializeUserText);
        }
        if (message.initializeDoneText !== undefined) {
            obj.initializeDoneText = text_js_1.InitializeUserDoneScreenText.toJSON(message.initializeDoneText);
        }
        if (message.initMfaPromptText !== undefined) {
            obj.initMfaPromptText = text_js_1.InitMFAPromptScreenText.toJSON(message.initMfaPromptText);
        }
        if (message.initMfaOtpText !== undefined) {
            obj.initMfaOtpText = text_js_1.InitMFAOTPScreenText.toJSON(message.initMfaOtpText);
        }
        if (message.initMfaU2fText !== undefined) {
            obj.initMfaU2fText = text_js_1.InitMFAU2FScreenText.toJSON(message.initMfaU2fText);
        }
        if (message.initMfaDoneText !== undefined) {
            obj.initMfaDoneText = text_js_1.InitMFADoneScreenText.toJSON(message.initMfaDoneText);
        }
        if (message.mfaProvidersText !== undefined) {
            obj.mfaProvidersText = text_js_1.MFAProvidersText.toJSON(message.mfaProvidersText);
        }
        if (message.verifyMfaOtpText !== undefined) {
            obj.verifyMfaOtpText = text_js_1.VerifyMFAOTPScreenText.toJSON(message.verifyMfaOtpText);
        }
        if (message.verifyMfaU2fText !== undefined) {
            obj.verifyMfaU2fText = text_js_1.VerifyMFAU2FScreenText.toJSON(message.verifyMfaU2fText);
        }
        if (message.passwordlessText !== undefined) {
            obj.passwordlessText = text_js_1.PasswordlessScreenText.toJSON(message.passwordlessText);
        }
        if (message.passwordChangeText !== undefined) {
            obj.passwordChangeText = text_js_1.PasswordChangeScreenText.toJSON(message.passwordChangeText);
        }
        if (message.passwordChangeDoneText !== undefined) {
            obj.passwordChangeDoneText = text_js_1.PasswordChangeDoneScreenText.toJSON(message.passwordChangeDoneText);
        }
        if (message.passwordResetDoneText !== undefined) {
            obj.passwordResetDoneText = text_js_1.PasswordResetDoneScreenText.toJSON(message.passwordResetDoneText);
        }
        if (message.registrationOptionText !== undefined) {
            obj.registrationOptionText = text_js_1.RegistrationOptionScreenText.toJSON(message.registrationOptionText);
        }
        if (message.registrationUserText !== undefined) {
            obj.registrationUserText = text_js_1.RegistrationUserScreenText.toJSON(message.registrationUserText);
        }
        if (message.registrationOrgText !== undefined) {
            obj.registrationOrgText = text_js_1.RegistrationOrgScreenText.toJSON(message.registrationOrgText);
        }
        if (message.linkingUserDoneText !== undefined) {
            obj.linkingUserDoneText = text_js_1.LinkingUserDoneScreenText.toJSON(message.linkingUserDoneText);
        }
        if (message.externalUserNotFoundText !== undefined) {
            obj.externalUserNotFoundText = text_js_1.ExternalUserNotFoundScreenText.toJSON(message.externalUserNotFoundText);
        }
        if (message.successLoginText !== undefined) {
            obj.successLoginText = text_js_1.SuccessLoginScreenText.toJSON(message.successLoginText);
        }
        if (message.logoutText !== undefined) {
            obj.logoutText = text_js_1.LogoutDoneScreenText.toJSON(message.logoutText);
        }
        if (message.footerText !== undefined) {
            obj.footerText = text_js_1.FooterText.toJSON(message.footerText);
        }
        if (message.passwordlessPromptText !== undefined) {
            obj.passwordlessPromptText = text_js_1.PasswordlessPromptScreenText.toJSON(message.passwordlessPromptText);
        }
        if (message.passwordlessRegistrationText !== undefined) {
            obj.passwordlessRegistrationText = text_js_1.PasswordlessRegistrationScreenText.toJSON(message.passwordlessRegistrationText);
        }
        if (message.passwordlessRegistrationDoneText !== undefined) {
            obj.passwordlessRegistrationDoneText = text_js_1.PasswordlessRegistrationDoneScreenText.toJSON(message.passwordlessRegistrationDoneText);
        }
        if (message.externalRegistrationUserOverviewText !== undefined) {
            obj.externalRegistrationUserOverviewText = text_js_1.ExternalRegistrationUserOverviewScreenText.toJSON(message.externalRegistrationUserOverviewText);
        }
        if (message.linkingUserPromptText !== undefined) {
            obj.linkingUserPromptText = text_js_1.LinkingUserPromptScreenText.toJSON(message.linkingUserPromptText);
        }
        return obj;
    },
    create(base) {
        return exports.SetCustomLoginTextsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetCustomLoginTextsRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        message.selectAccountText = (object.selectAccountText !== undefined && object.selectAccountText !== null)
            ? text_js_1.SelectAccountScreenText.fromPartial(object.selectAccountText)
            : undefined;
        message.loginText = (object.loginText !== undefined && object.loginText !== null)
            ? text_js_1.LoginScreenText.fromPartial(object.loginText)
            : undefined;
        message.passwordText = (object.passwordText !== undefined && object.passwordText !== null)
            ? text_js_1.PasswordScreenText.fromPartial(object.passwordText)
            : undefined;
        message.usernameChangeText = (object.usernameChangeText !== undefined && object.usernameChangeText !== null)
            ? text_js_1.UsernameChangeScreenText.fromPartial(object.usernameChangeText)
            : undefined;
        message.usernameChangeDoneText =
            (object.usernameChangeDoneText !== undefined && object.usernameChangeDoneText !== null)
                ? text_js_1.UsernameChangeDoneScreenText.fromPartial(object.usernameChangeDoneText)
                : undefined;
        message.initPasswordText = (object.initPasswordText !== undefined && object.initPasswordText !== null)
            ? text_js_1.InitPasswordScreenText.fromPartial(object.initPasswordText)
            : undefined;
        message.initPasswordDoneText = (object.initPasswordDoneText !== undefined && object.initPasswordDoneText !== null)
            ? text_js_1.InitPasswordDoneScreenText.fromPartial(object.initPasswordDoneText)
            : undefined;
        message.emailVerificationText =
            (object.emailVerificationText !== undefined && object.emailVerificationText !== null)
                ? text_js_1.EmailVerificationScreenText.fromPartial(object.emailVerificationText)
                : undefined;
        message.emailVerificationDoneText =
            (object.emailVerificationDoneText !== undefined && object.emailVerificationDoneText !== null)
                ? text_js_1.EmailVerificationDoneScreenText.fromPartial(object.emailVerificationDoneText)
                : undefined;
        message.initializeUserText = (object.initializeUserText !== undefined && object.initializeUserText !== null)
            ? text_js_1.InitializeUserScreenText.fromPartial(object.initializeUserText)
            : undefined;
        message.initializeDoneText = (object.initializeDoneText !== undefined && object.initializeDoneText !== null)
            ? text_js_1.InitializeUserDoneScreenText.fromPartial(object.initializeDoneText)
            : undefined;
        message.initMfaPromptText = (object.initMfaPromptText !== undefined && object.initMfaPromptText !== null)
            ? text_js_1.InitMFAPromptScreenText.fromPartial(object.initMfaPromptText)
            : undefined;
        message.initMfaOtpText = (object.initMfaOtpText !== undefined && object.initMfaOtpText !== null)
            ? text_js_1.InitMFAOTPScreenText.fromPartial(object.initMfaOtpText)
            : undefined;
        message.initMfaU2fText = (object.initMfaU2fText !== undefined && object.initMfaU2fText !== null)
            ? text_js_1.InitMFAU2FScreenText.fromPartial(object.initMfaU2fText)
            : undefined;
        message.initMfaDoneText = (object.initMfaDoneText !== undefined && object.initMfaDoneText !== null)
            ? text_js_1.InitMFADoneScreenText.fromPartial(object.initMfaDoneText)
            : undefined;
        message.mfaProvidersText = (object.mfaProvidersText !== undefined && object.mfaProvidersText !== null)
            ? text_js_1.MFAProvidersText.fromPartial(object.mfaProvidersText)
            : undefined;
        message.verifyMfaOtpText = (object.verifyMfaOtpText !== undefined && object.verifyMfaOtpText !== null)
            ? text_js_1.VerifyMFAOTPScreenText.fromPartial(object.verifyMfaOtpText)
            : undefined;
        message.verifyMfaU2fText = (object.verifyMfaU2fText !== undefined && object.verifyMfaU2fText !== null)
            ? text_js_1.VerifyMFAU2FScreenText.fromPartial(object.verifyMfaU2fText)
            : undefined;
        message.passwordlessText = (object.passwordlessText !== undefined && object.passwordlessText !== null)
            ? text_js_1.PasswordlessScreenText.fromPartial(object.passwordlessText)
            : undefined;
        message.passwordChangeText = (object.passwordChangeText !== undefined && object.passwordChangeText !== null)
            ? text_js_1.PasswordChangeScreenText.fromPartial(object.passwordChangeText)
            : undefined;
        message.passwordChangeDoneText =
            (object.passwordChangeDoneText !== undefined && object.passwordChangeDoneText !== null)
                ? text_js_1.PasswordChangeDoneScreenText.fromPartial(object.passwordChangeDoneText)
                : undefined;
        message.passwordResetDoneText =
            (object.passwordResetDoneText !== undefined && object.passwordResetDoneText !== null)
                ? text_js_1.PasswordResetDoneScreenText.fromPartial(object.passwordResetDoneText)
                : undefined;
        message.registrationOptionText =
            (object.registrationOptionText !== undefined && object.registrationOptionText !== null)
                ? text_js_1.RegistrationOptionScreenText.fromPartial(object.registrationOptionText)
                : undefined;
        message.registrationUserText = (object.registrationUserText !== undefined && object.registrationUserText !== null)
            ? text_js_1.RegistrationUserScreenText.fromPartial(object.registrationUserText)
            : undefined;
        message.registrationOrgText = (object.registrationOrgText !== undefined && object.registrationOrgText !== null)
            ? text_js_1.RegistrationOrgScreenText.fromPartial(object.registrationOrgText)
            : undefined;
        message.linkingUserDoneText = (object.linkingUserDoneText !== undefined && object.linkingUserDoneText !== null)
            ? text_js_1.LinkingUserDoneScreenText.fromPartial(object.linkingUserDoneText)
            : undefined;
        message.externalUserNotFoundText =
            (object.externalUserNotFoundText !== undefined && object.externalUserNotFoundText !== null)
                ? text_js_1.ExternalUserNotFoundScreenText.fromPartial(object.externalUserNotFoundText)
                : undefined;
        message.successLoginText = (object.successLoginText !== undefined && object.successLoginText !== null)
            ? text_js_1.SuccessLoginScreenText.fromPartial(object.successLoginText)
            : undefined;
        message.logoutText = (object.logoutText !== undefined && object.logoutText !== null)
            ? text_js_1.LogoutDoneScreenText.fromPartial(object.logoutText)
            : undefined;
        message.footerText = (object.footerText !== undefined && object.footerText !== null)
            ? text_js_1.FooterText.fromPartial(object.footerText)
            : undefined;
        message.passwordlessPromptText =
            (object.passwordlessPromptText !== undefined && object.passwordlessPromptText !== null)
                ? text_js_1.PasswordlessPromptScreenText.fromPartial(object.passwordlessPromptText)
                : undefined;
        message.passwordlessRegistrationText =
            (object.passwordlessRegistrationText !== undefined && object.passwordlessRegistrationText !== null)
                ? text_js_1.PasswordlessRegistrationScreenText.fromPartial(object.passwordlessRegistrationText)
                : undefined;
        message.passwordlessRegistrationDoneText =
            (object.passwordlessRegistrationDoneText !== undefined && object.passwordlessRegistrationDoneText !== null)
                ? text_js_1.PasswordlessRegistrationDoneScreenText.fromPartial(object.passwordlessRegistrationDoneText)
                : undefined;
        message.externalRegistrationUserOverviewText =
            (object.externalRegistrationUserOverviewText !== undefined &&
                object.externalRegistrationUserOverviewText !== null)
                ? text_js_1.ExternalRegistrationUserOverviewScreenText.fromPartial(object.externalRegistrationUserOverviewText)
                : undefined;
        message.linkingUserPromptText =
            (object.linkingUserPromptText !== undefined && object.linkingUserPromptText !== null)
                ? text_js_1.LinkingUserPromptScreenText.fromPartial(object.linkingUserPromptText)
                : undefined;
        return message;
    },
};
function createBaseSetCustomLoginTextsResponse() {
    return { details: undefined };
}
exports.SetCustomLoginTextsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetCustomLoginTextsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetCustomLoginTextsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetCustomLoginTextsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseResetCustomLoginTextsToDefaultRequest() {
    return { language: "" };
}
exports.ResetCustomLoginTextsToDefaultRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.language !== "") {
            writer.uint32(10).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomLoginTextsToDefaultRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { language: isSet(object.language) ? globalThis.String(object.language) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.language !== "") {
            obj.language = message.language;
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomLoginTextsToDefaultRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseResetCustomLoginTextsToDefaultRequest();
        message.language = (_a = object.language) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseResetCustomLoginTextsToDefaultResponse() {
    return { details: undefined };
}
exports.ResetCustomLoginTextsToDefaultResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResetCustomLoginTextsToDefaultResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ResetCustomLoginTextsToDefaultResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseResetCustomLoginTextsToDefaultResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseAddIAMMemberRequest() {
    return { userId: "", roles: [] };
}
exports.AddIAMMemberRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.AddIAMMemberRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAddIAMMemberRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.roles = ((_b = object.roles) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseAddIAMMemberResponse() {
    return { details: undefined };
}
exports.AddIAMMemberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAddIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.AddIAMMemberResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAddIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseUpdateIAMMemberRequest() {
    return { userId: "", roles: [] };
}
exports.UpdateIAMMemberRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIAMMemberRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseUpdateIAMMemberRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.roles = ((_b = object.roles) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseUpdateIAMMemberResponse() {
    return { details: undefined };
}
exports.UpdateIAMMemberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.UpdateIAMMemberResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseUpdateIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseRemoveIAMMemberRequest() {
    return { userId: "" };
}
exports.RemoveIAMMemberRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIAMMemberRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIAMMemberRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRemoveIAMMemberRequest();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRemoveIAMMemberResponse() {
    return { details: undefined };
}
exports.RemoveIAMMemberResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveIAMMemberResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.RemoveIAMMemberResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRemoveIAMMemberResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListIAMMemberRolesRequest() {
    return {};
}
exports.ListIAMMemberRolesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMemberRolesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListIAMMemberRolesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListIAMMemberRolesRequest();
        return message;
    },
};
function createBaseListIAMMemberRolesResponse() {
    return { details: undefined, roles: [] };
}
exports.ListIAMMemberRolesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.roles) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMemberRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.ListIAMMemberRolesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListIAMMemberRolesResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.roles = ((_a = object.roles) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseListIAMMembersRequest() {
    return { query: undefined, queries: [] };
}
exports.ListIAMMembersRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        for (const v of message.queries) {
            member_js_1.SearchQuery.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMembersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.queries.push(member_js_1.SearchQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries) ? object.queries.map((e) => member_js_1.SearchQuery.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => member_js_1.SearchQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListIAMMembersRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListIAMMembersRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.queries = ((_a = object.queries) === null || _a === void 0 ? void 0 : _a.map((e) => member_js_1.SearchQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListIAMMembersResponse() {
    return { details: undefined, result: [] };
}
exports.ListIAMMembersResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            member_js_1.Member.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListIAMMembersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(member_js_1.Member.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => member_js_1.Member.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => member_js_1.Member.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListIAMMembersResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListIAMMembersResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => member_js_1.Member.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListViewsRequest() {
    return {};
}
exports.ListViewsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListViewsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListViewsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListViewsRequest();
        return message;
    },
};
function createBaseListViewsResponse() {
    return { result: [] };
}
exports.ListViewsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.result) {
            exports.View.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListViewsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(exports.View.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => exports.View.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => exports.View.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListViewsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListViewsResponse();
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => exports.View.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListFailedEventsRequest() {
    return {};
}
exports.ListFailedEventsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFailedEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListFailedEventsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListFailedEventsRequest();
        return message;
    },
};
function createBaseListFailedEventsResponse() {
    return { result: [] };
}
exports.ListFailedEventsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.result) {
            exports.FailedEvent.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListFailedEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.result.push(exports.FailedEvent.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => exports.FailedEvent.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => exports.FailedEvent.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListFailedEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListFailedEventsResponse();
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => exports.FailedEvent.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRemoveFailedEventRequest() {
    return { database: "", viewName: "", failedSequence: long_1.default.UZERO };
}
exports.RemoveFailedEventRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.failedSequence.equals(long_1.default.UZERO)) {
            writer.uint32(24).uint64(message.failedSequence.toString());
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFailedEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.failedSequence = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            failedSequence: isSet(object.failedSequence) ? long_1.default.fromValue(object.failedSequence) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.failedSequence.equals(long_1.default.UZERO)) {
            obj.failedSequence = (message.failedSequence || long_1.default.UZERO).toString();
        }
        return obj;
    },
    create(base) {
        return exports.RemoveFailedEventRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRemoveFailedEventRequest();
        message.database = (_a = object.database) !== null && _a !== void 0 ? _a : "";
        message.viewName = (_b = object.viewName) !== null && _b !== void 0 ? _b : "";
        message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
            ? long_1.default.fromValue(object.failedSequence)
            : long_1.default.UZERO;
        return message;
    },
};
function createBaseRemoveFailedEventResponse() {
    return {};
}
exports.RemoveFailedEventResponse = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRemoveFailedEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.RemoveFailedEventResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseRemoveFailedEventResponse();
        return message;
    },
};
function createBaseView() {
    return {
        database: "",
        viewName: "",
        processedSequence: long_1.default.UZERO,
        eventTimestamp: undefined,
        lastSuccessfulSpoolerRun: undefined,
    };
}
exports.View = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.processedSequence.equals(long_1.default.UZERO)) {
            writer.uint32(24).uint64(message.processedSequence.toString());
        }
        if (message.eventTimestamp !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.eventTimestamp), writer.uint32(34).fork()).join();
        }
        if (message.lastSuccessfulSpoolerRun !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.lastSuccessfulSpoolerRun), writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseView();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.processedSequence = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.eventTimestamp = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.lastSuccessfulSpoolerRun = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            processedSequence: isSet(object.processedSequence) ? long_1.default.fromValue(object.processedSequence) : long_1.default.UZERO,
            eventTimestamp: isSet(object.eventTimestamp) ? fromJsonTimestamp(object.eventTimestamp) : undefined,
            lastSuccessfulSpoolerRun: isSet(object.lastSuccessfulSpoolerRun)
                ? fromJsonTimestamp(object.lastSuccessfulSpoolerRun)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.processedSequence.equals(long_1.default.UZERO)) {
            obj.processedSequence = (message.processedSequence || long_1.default.UZERO).toString();
        }
        if (message.eventTimestamp !== undefined) {
            obj.eventTimestamp = message.eventTimestamp.toISOString();
        }
        if (message.lastSuccessfulSpoolerRun !== undefined) {
            obj.lastSuccessfulSpoolerRun = message.lastSuccessfulSpoolerRun.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.View.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseView();
        message.database = (_a = object.database) !== null && _a !== void 0 ? _a : "";
        message.viewName = (_b = object.viewName) !== null && _b !== void 0 ? _b : "";
        message.processedSequence = (object.processedSequence !== undefined && object.processedSequence !== null)
            ? long_1.default.fromValue(object.processedSequence)
            : long_1.default.UZERO;
        message.eventTimestamp = (_c = object.eventTimestamp) !== null && _c !== void 0 ? _c : undefined;
        message.lastSuccessfulSpoolerRun = (_d = object.lastSuccessfulSpoolerRun) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseFailedEvent() {
    return {
        database: "",
        viewName: "",
        failedSequence: long_1.default.UZERO,
        failureCount: long_1.default.UZERO,
        errorMessage: "",
        lastFailed: undefined,
    };
}
exports.FailedEvent = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.database !== "") {
            writer.uint32(10).string(message.database);
        }
        if (message.viewName !== "") {
            writer.uint32(18).string(message.viewName);
        }
        if (!message.failedSequence.equals(long_1.default.UZERO)) {
            writer.uint32(24).uint64(message.failedSequence.toString());
        }
        if (!message.failureCount.equals(long_1.default.UZERO)) {
            writer.uint32(32).uint64(message.failureCount.toString());
        }
        if (message.errorMessage !== "") {
            writer.uint32(42).string(message.errorMessage);
        }
        if (message.lastFailed !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.lastFailed), writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFailedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.database = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.viewName = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.failedSequence = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.failureCount = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.errorMessage = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.lastFailed = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            database: isSet(object.database) ? globalThis.String(object.database) : "",
            viewName: isSet(object.viewName) ? globalThis.String(object.viewName) : "",
            failedSequence: isSet(object.failedSequence) ? long_1.default.fromValue(object.failedSequence) : long_1.default.UZERO,
            failureCount: isSet(object.failureCount) ? long_1.default.fromValue(object.failureCount) : long_1.default.UZERO,
            errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
            lastFailed: isSet(object.lastFailed) ? fromJsonTimestamp(object.lastFailed) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.database !== "") {
            obj.database = message.database;
        }
        if (message.viewName !== "") {
            obj.viewName = message.viewName;
        }
        if (!message.failedSequence.equals(long_1.default.UZERO)) {
            obj.failedSequence = (message.failedSequence || long_1.default.UZERO).toString();
        }
        if (!message.failureCount.equals(long_1.default.UZERO)) {
            obj.failureCount = (message.failureCount || long_1.default.UZERO).toString();
        }
        if (message.errorMessage !== "") {
            obj.errorMessage = message.errorMessage;
        }
        if (message.lastFailed !== undefined) {
            obj.lastFailed = message.lastFailed.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.FailedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseFailedEvent();
        message.database = (_a = object.database) !== null && _a !== void 0 ? _a : "";
        message.viewName = (_b = object.viewName) !== null && _b !== void 0 ? _b : "";
        message.failedSequence = (object.failedSequence !== undefined && object.failedSequence !== null)
            ? long_1.default.fromValue(object.failedSequence)
            : long_1.default.UZERO;
        message.failureCount = (object.failureCount !== undefined && object.failureCount !== null)
            ? long_1.default.fromValue(object.failureCount)
            : long_1.default.UZERO;
        message.errorMessage = (_c = object.errorMessage) !== null && _c !== void 0 ? _c : "";
        message.lastFailed = (_d = object.lastFailed) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function createBaseImportDataRequest() {
    return {
        dataOrgs: undefined,
        dataOrgsv1: undefined,
        dataOrgsLocal: undefined,
        dataOrgsv1Local: undefined,
        dataOrgsS3: undefined,
        dataOrgsv1S3: undefined,
        dataOrgsGcs: undefined,
        dataOrgsv1Gcs: undefined,
        timeout: "",
    };
}
exports.ImportDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataOrgs !== undefined) {
            exports.ImportDataOrg.encode(message.dataOrgs, writer.uint32(10).fork()).join();
        }
        if (message.dataOrgsv1 !== undefined) {
            v1_js_1.ImportDataOrg.encode(message.dataOrgsv1, writer.uint32(18).fork()).join();
        }
        if (message.dataOrgsLocal !== undefined) {
            exports.ImportDataRequest_LocalInput.encode(message.dataOrgsLocal, writer.uint32(26).fork()).join();
        }
        if (message.dataOrgsv1Local !== undefined) {
            exports.ImportDataRequest_LocalInput.encode(message.dataOrgsv1Local, writer.uint32(34).fork()).join();
        }
        if (message.dataOrgsS3 !== undefined) {
            exports.ImportDataRequest_S3Input.encode(message.dataOrgsS3, writer.uint32(42).fork()).join();
        }
        if (message.dataOrgsv1S3 !== undefined) {
            exports.ImportDataRequest_S3Input.encode(message.dataOrgsv1S3, writer.uint32(50).fork()).join();
        }
        if (message.dataOrgsGcs !== undefined) {
            exports.ImportDataRequest_GCSInput.encode(message.dataOrgsGcs, writer.uint32(58).fork()).join();
        }
        if (message.dataOrgsv1Gcs !== undefined) {
            exports.ImportDataRequest_GCSInput.encode(message.dataOrgsv1Gcs, writer.uint32(66).fork()).join();
        }
        if (message.timeout !== "") {
            writer.uint32(74).string(message.timeout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.dataOrgs = exports.ImportDataOrg.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.dataOrgsv1 = v1_js_1.ImportDataOrg.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.dataOrgsLocal = exports.ImportDataRequest_LocalInput.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.dataOrgsv1Local = exports.ImportDataRequest_LocalInput.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.dataOrgsS3 = exports.ImportDataRequest_S3Input.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.dataOrgsv1S3 = exports.ImportDataRequest_S3Input.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.dataOrgsGcs = exports.ImportDataRequest_GCSInput.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.dataOrgsv1Gcs = exports.ImportDataRequest_GCSInput.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.timeout = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            dataOrgs: isSet(object.dataOrgs) ? exports.ImportDataOrg.fromJSON(object.dataOrgs) : undefined,
            dataOrgsv1: isSet(object.dataOrgsv1) ? v1_js_1.ImportDataOrg.fromJSON(object.dataOrgsv1) : undefined,
            dataOrgsLocal: isSet(object.dataOrgsLocal)
                ? exports.ImportDataRequest_LocalInput.fromJSON(object.dataOrgsLocal)
                : undefined,
            dataOrgsv1Local: isSet(object.dataOrgsv1Local)
                ? exports.ImportDataRequest_LocalInput.fromJSON(object.dataOrgsv1Local)
                : undefined,
            dataOrgsS3: isSet(object.dataOrgsS3) ? exports.ImportDataRequest_S3Input.fromJSON(object.dataOrgsS3) : undefined,
            dataOrgsv1S3: isSet(object.dataOrgsv1S3) ? exports.ImportDataRequest_S3Input.fromJSON(object.dataOrgsv1S3) : undefined,
            dataOrgsGcs: isSet(object.dataOrgsGcs) ? exports.ImportDataRequest_GCSInput.fromJSON(object.dataOrgsGcs) : undefined,
            dataOrgsv1Gcs: isSet(object.dataOrgsv1Gcs)
                ? exports.ImportDataRequest_GCSInput.fromJSON(object.dataOrgsv1Gcs)
                : undefined,
            timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.dataOrgs !== undefined) {
            obj.dataOrgs = exports.ImportDataOrg.toJSON(message.dataOrgs);
        }
        if (message.dataOrgsv1 !== undefined) {
            obj.dataOrgsv1 = v1_js_1.ImportDataOrg.toJSON(message.dataOrgsv1);
        }
        if (message.dataOrgsLocal !== undefined) {
            obj.dataOrgsLocal = exports.ImportDataRequest_LocalInput.toJSON(message.dataOrgsLocal);
        }
        if (message.dataOrgsv1Local !== undefined) {
            obj.dataOrgsv1Local = exports.ImportDataRequest_LocalInput.toJSON(message.dataOrgsv1Local);
        }
        if (message.dataOrgsS3 !== undefined) {
            obj.dataOrgsS3 = exports.ImportDataRequest_S3Input.toJSON(message.dataOrgsS3);
        }
        if (message.dataOrgsv1S3 !== undefined) {
            obj.dataOrgsv1S3 = exports.ImportDataRequest_S3Input.toJSON(message.dataOrgsv1S3);
        }
        if (message.dataOrgsGcs !== undefined) {
            obj.dataOrgsGcs = exports.ImportDataRequest_GCSInput.toJSON(message.dataOrgsGcs);
        }
        if (message.dataOrgsv1Gcs !== undefined) {
            obj.dataOrgsv1Gcs = exports.ImportDataRequest_GCSInput.toJSON(message.dataOrgsv1Gcs);
        }
        if (message.timeout !== "") {
            obj.timeout = message.timeout;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImportDataRequest();
        message.dataOrgs = (object.dataOrgs !== undefined && object.dataOrgs !== null)
            ? exports.ImportDataOrg.fromPartial(object.dataOrgs)
            : undefined;
        message.dataOrgsv1 = (object.dataOrgsv1 !== undefined && object.dataOrgsv1 !== null)
            ? v1_js_1.ImportDataOrg.fromPartial(object.dataOrgsv1)
            : undefined;
        message.dataOrgsLocal = (object.dataOrgsLocal !== undefined && object.dataOrgsLocal !== null)
            ? exports.ImportDataRequest_LocalInput.fromPartial(object.dataOrgsLocal)
            : undefined;
        message.dataOrgsv1Local = (object.dataOrgsv1Local !== undefined && object.dataOrgsv1Local !== null)
            ? exports.ImportDataRequest_LocalInput.fromPartial(object.dataOrgsv1Local)
            : undefined;
        message.dataOrgsS3 = (object.dataOrgsS3 !== undefined && object.dataOrgsS3 !== null)
            ? exports.ImportDataRequest_S3Input.fromPartial(object.dataOrgsS3)
            : undefined;
        message.dataOrgsv1S3 = (object.dataOrgsv1S3 !== undefined && object.dataOrgsv1S3 !== null)
            ? exports.ImportDataRequest_S3Input.fromPartial(object.dataOrgsv1S3)
            : undefined;
        message.dataOrgsGcs = (object.dataOrgsGcs !== undefined && object.dataOrgsGcs !== null)
            ? exports.ImportDataRequest_GCSInput.fromPartial(object.dataOrgsGcs)
            : undefined;
        message.dataOrgsv1Gcs = (object.dataOrgsv1Gcs !== undefined && object.dataOrgsv1Gcs !== null)
            ? exports.ImportDataRequest_GCSInput.fromPartial(object.dataOrgsv1Gcs)
            : undefined;
        message.timeout = (_a = object.timeout) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseImportDataRequest_LocalInput() {
    return { path: "" };
}
exports.ImportDataRequest_LocalInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_LocalInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataRequest_LocalInput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImportDataRequest_LocalInput();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseImportDataRequest_S3Input() {
    return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}
exports.ImportDataRequest_S3Input = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.accessKeyId !== "") {
            writer.uint32(26).string(message.accessKeyId);
        }
        if (message.secretAccessKey !== "") {
            writer.uint32(34).string(message.secretAccessKey);
        }
        if (message.ssl !== false) {
            writer.uint32(40).bool(message.ssl);
        }
        if (message.bucket !== "") {
            writer.uint32(50).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_S3Input();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.accessKeyId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.secretAccessKey = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.ssl = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
            secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
            ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.accessKeyId !== "") {
            obj.accessKeyId = message.accessKeyId;
        }
        if (message.secretAccessKey !== "") {
            obj.secretAccessKey = message.secretAccessKey;
        }
        if (message.ssl !== false) {
            obj.ssl = message.ssl;
        }
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataRequest_S3Input.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseImportDataRequest_S3Input();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        message.endpoint = (_b = object.endpoint) !== null && _b !== void 0 ? _b : "";
        message.accessKeyId = (_c = object.accessKeyId) !== null && _c !== void 0 ? _c : "";
        message.secretAccessKey = (_d = object.secretAccessKey) !== null && _d !== void 0 ? _d : "";
        message.ssl = (_e = object.ssl) !== null && _e !== void 0 ? _e : false;
        message.bucket = (_f = object.bucket) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseImportDataRequest_GCSInput() {
    return { bucket: "", serviceaccountJson: "", path: "" };
}
exports.ImportDataRequest_GCSInput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bucket !== "") {
            writer.uint32(10).string(message.bucket);
        }
        if (message.serviceaccountJson !== "") {
            writer.uint32(18).string(message.serviceaccountJson);
        }
        if (message.path !== "") {
            writer.uint32(26).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataRequest_GCSInput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.serviceaccountJson = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
            serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        if (message.serviceaccountJson !== "") {
            obj.serviceaccountJson = message.serviceaccountJson;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataRequest_GCSInput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseImportDataRequest_GCSInput();
        message.bucket = (_a = object.bucket) !== null && _a !== void 0 ? _a : "";
        message.serviceaccountJson = (_b = object.serviceaccountJson) !== null && _b !== void 0 ? _b : "";
        message.path = (_c = object.path) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseImportDataOrg() {
    return { orgs: [] };
}
exports.ImportDataOrg = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.orgs) {
            exports.DataOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(exports.DataOrg.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgs) ? object.orgs.map((e) => exports.DataOrg.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.orgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.orgs = message.orgs.map((e) => exports.DataOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataOrg.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImportDataOrg();
        message.orgs = ((_a = object.orgs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.DataOrg.fromPartial(e))) || [];
        return message;
    },
};
function createBaseDataOrg() {
    return {
        orgId: "",
        org: undefined,
        domainPolicy: undefined,
        labelPolicy: undefined,
        lockoutPolicy: undefined,
        loginPolicy: undefined,
        passwordComplexityPolicy: undefined,
        privacyPolicy: undefined,
        projects: [],
        projectRoles: [],
        apiApps: [],
        oidcApps: [],
        humanUsers: [],
        machineUsers: [],
        triggerActions: [],
        actions: [],
        projectGrants: [],
        userGrants: [],
        orgMembers: [],
        projectMembers: [],
        projectGrantMembers: [],
        userMetadata: [],
        loginTexts: [],
        initMessages: [],
        passwordResetMessages: [],
        verifyEmailMessages: [],
        verifyPhoneMessages: [],
        domainClaimedMessages: [],
        passwordlessRegistrationMessages: [],
        oidcIdps: [],
        jwtIdps: [],
        userLinks: [],
        domains: [],
        appKeys: [],
        machineKeys: [],
        verifySmsOtpMessages: [],
        verifyEmailOtpMessages: [],
        inviteUserMessages: [],
    };
}
exports.DataOrg = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        if (message.org !== undefined) {
            management_js_1.AddOrgRequest.encode(message.org, writer.uint32(26).fork()).join();
        }
        if (message.domainPolicy !== undefined) {
            exports.AddCustomDomainPolicyRequest.encode(message.domainPolicy, writer.uint32(34).fork()).join();
        }
        if (message.labelPolicy !== undefined) {
            management_js_1.AddCustomLabelPolicyRequest.encode(message.labelPolicy, writer.uint32(42).fork()).join();
        }
        if (message.lockoutPolicy !== undefined) {
            management_js_1.AddCustomLockoutPolicyRequest.encode(message.lockoutPolicy, writer.uint32(50).fork()).join();
        }
        if (message.loginPolicy !== undefined) {
            management_js_1.AddCustomLoginPolicyRequest.encode(message.loginPolicy, writer.uint32(58).fork()).join();
        }
        if (message.passwordComplexityPolicy !== undefined) {
            management_js_1.AddCustomPasswordComplexityPolicyRequest.encode(message.passwordComplexityPolicy, writer.uint32(66).fork())
                .join();
        }
        if (message.privacyPolicy !== undefined) {
            management_js_1.AddCustomPrivacyPolicyRequest.encode(message.privacyPolicy, writer.uint32(74).fork()).join();
        }
        for (const v of message.projects) {
            v1_js_1.DataProject.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.projectRoles) {
            management_js_1.AddProjectRoleRequest.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.apiApps) {
            v1_js_1.DataAPIApplication.encode(v, writer.uint32(98).fork()).join();
        }
        for (const v of message.oidcApps) {
            v1_js_1.DataOIDCApplication.encode(v, writer.uint32(106).fork()).join();
        }
        for (const v of message.humanUsers) {
            v1_js_1.DataHumanUser.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.machineUsers) {
            v1_js_1.DataMachineUser.encode(v, writer.uint32(122).fork()).join();
        }
        for (const v of message.triggerActions) {
            management_js_1.SetTriggerActionsRequest.encode(v, writer.uint32(130).fork()).join();
        }
        for (const v of message.actions) {
            v1_js_1.DataAction.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.projectGrants) {
            v1_js_1.DataProjectGrant.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.userGrants) {
            management_js_1.AddUserGrantRequest.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.orgMembers) {
            management_js_1.AddOrgMemberRequest.encode(v, writer.uint32(162).fork()).join();
        }
        for (const v of message.projectMembers) {
            management_js_1.AddProjectMemberRequest.encode(v, writer.uint32(170).fork()).join();
        }
        for (const v of message.projectGrantMembers) {
            management_js_1.AddProjectGrantMemberRequest.encode(v, writer.uint32(178).fork()).join();
        }
        for (const v of message.userMetadata) {
            management_js_1.SetUserMetadataRequest.encode(v, writer.uint32(186).fork()).join();
        }
        for (const v of message.loginTexts) {
            management_js_1.SetCustomLoginTextsRequest.encode(v, writer.uint32(194).fork()).join();
        }
        for (const v of message.initMessages) {
            management_js_1.SetCustomInitMessageTextRequest.encode(v, writer.uint32(202).fork()).join();
        }
        for (const v of message.passwordResetMessages) {
            management_js_1.SetCustomPasswordResetMessageTextRequest.encode(v, writer.uint32(210).fork()).join();
        }
        for (const v of message.verifyEmailMessages) {
            management_js_1.SetCustomVerifyEmailMessageTextRequest.encode(v, writer.uint32(218).fork()).join();
        }
        for (const v of message.verifyPhoneMessages) {
            management_js_1.SetCustomVerifyPhoneMessageTextRequest.encode(v, writer.uint32(226).fork()).join();
        }
        for (const v of message.domainClaimedMessages) {
            management_js_1.SetCustomDomainClaimedMessageTextRequest.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.passwordlessRegistrationMessages) {
            management_js_1.SetCustomPasswordlessRegistrationMessageTextRequest.encode(v, writer.uint32(242).fork()).join();
        }
        for (const v of message.oidcIdps) {
            v1_js_1.DataOIDCIDP.encode(v, writer.uint32(250).fork()).join();
        }
        for (const v of message.jwtIdps) {
            v1_js_1.DataJWTIDP.encode(v, writer.uint32(258).fork()).join();
        }
        for (const v of message.userLinks) {
            idp_js_1.IDPUserLink.encode(v, writer.uint32(266).fork()).join();
        }
        for (const v of message.domains) {
            org_js_1.Domain.encode(v, writer.uint32(274).fork()).join();
        }
        for (const v of message.appKeys) {
            v1_js_1.DataAppKey.encode(v, writer.uint32(282).fork()).join();
        }
        for (const v of message.machineKeys) {
            v1_js_1.DataMachineKey.encode(v, writer.uint32(290).fork()).join();
        }
        for (const v of message.verifySmsOtpMessages) {
            management_js_1.SetCustomVerifySMSOTPMessageTextRequest.encode(v, writer.uint32(298).fork()).join();
        }
        for (const v of message.verifyEmailOtpMessages) {
            management_js_1.SetCustomVerifyEmailOTPMessageTextRequest.encode(v, writer.uint32(306).fork()).join();
        }
        for (const v of message.inviteUserMessages) {
            management_js_1.SetCustomInviteUserMessageTextRequest.encode(v, writer.uint32(314).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDataOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.org = management_js_1.AddOrgRequest.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domainPolicy = exports.AddCustomDomainPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.labelPolicy = management_js_1.AddCustomLabelPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.lockoutPolicy = management_js_1.AddCustomLockoutPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.loginPolicy = management_js_1.AddCustomLoginPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.passwordComplexityPolicy = management_js_1.AddCustomPasswordComplexityPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.privacyPolicy = management_js_1.AddCustomPrivacyPolicyRequest.decode(reader, reader.uint32());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.projects.push(v1_js_1.DataProject.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.projectRoles.push(management_js_1.AddProjectRoleRequest.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.apiApps.push(v1_js_1.DataAPIApplication.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.oidcApps.push(v1_js_1.DataOIDCApplication.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.humanUsers.push(v1_js_1.DataHumanUser.decode(reader, reader.uint32()));
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.machineUsers.push(v1_js_1.DataMachineUser.decode(reader, reader.uint32()));
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.triggerActions.push(management_js_1.SetTriggerActionsRequest.decode(reader, reader.uint32()));
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.actions.push(v1_js_1.DataAction.decode(reader, reader.uint32()));
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.projectGrants.push(v1_js_1.DataProjectGrant.decode(reader, reader.uint32()));
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.userGrants.push(management_js_1.AddUserGrantRequest.decode(reader, reader.uint32()));
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.orgMembers.push(management_js_1.AddOrgMemberRequest.decode(reader, reader.uint32()));
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.projectMembers.push(management_js_1.AddProjectMemberRequest.decode(reader, reader.uint32()));
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.projectGrantMembers.push(management_js_1.AddProjectGrantMemberRequest.decode(reader, reader.uint32()));
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.userMetadata.push(management_js_1.SetUserMetadataRequest.decode(reader, reader.uint32()));
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.loginTexts.push(management_js_1.SetCustomLoginTextsRequest.decode(reader, reader.uint32()));
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.initMessages.push(management_js_1.SetCustomInitMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 26:
                    if (tag !== 210) {
                        break;
                    }
                    message.passwordResetMessages.push(management_js_1.SetCustomPasswordResetMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 27:
                    if (tag !== 218) {
                        break;
                    }
                    message.verifyEmailMessages.push(management_js_1.SetCustomVerifyEmailMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 28:
                    if (tag !== 226) {
                        break;
                    }
                    message.verifyPhoneMessages.push(management_js_1.SetCustomVerifyPhoneMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 29:
                    if (tag !== 234) {
                        break;
                    }
                    message.domainClaimedMessages.push(management_js_1.SetCustomDomainClaimedMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 30:
                    if (tag !== 242) {
                        break;
                    }
                    message.passwordlessRegistrationMessages.push(management_js_1.SetCustomPasswordlessRegistrationMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 31:
                    if (tag !== 250) {
                        break;
                    }
                    message.oidcIdps.push(v1_js_1.DataOIDCIDP.decode(reader, reader.uint32()));
                    continue;
                case 32:
                    if (tag !== 258) {
                        break;
                    }
                    message.jwtIdps.push(v1_js_1.DataJWTIDP.decode(reader, reader.uint32()));
                    continue;
                case 33:
                    if (tag !== 266) {
                        break;
                    }
                    message.userLinks.push(idp_js_1.IDPUserLink.decode(reader, reader.uint32()));
                    continue;
                case 34:
                    if (tag !== 274) {
                        break;
                    }
                    message.domains.push(org_js_1.Domain.decode(reader, reader.uint32()));
                    continue;
                case 35:
                    if (tag !== 282) {
                        break;
                    }
                    message.appKeys.push(v1_js_1.DataAppKey.decode(reader, reader.uint32()));
                    continue;
                case 36:
                    if (tag !== 290) {
                        break;
                    }
                    message.machineKeys.push(v1_js_1.DataMachineKey.decode(reader, reader.uint32()));
                    continue;
                case 37:
                    if (tag !== 298) {
                        break;
                    }
                    message.verifySmsOtpMessages.push(management_js_1.SetCustomVerifySMSOTPMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 38:
                    if (tag !== 306) {
                        break;
                    }
                    message.verifyEmailOtpMessages.push(management_js_1.SetCustomVerifyEmailOTPMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
                case 39:
                    if (tag !== 314) {
                        break;
                    }
                    message.inviteUserMessages.push(management_js_1.SetCustomInviteUserMessageTextRequest.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            org: isSet(object.org) ? management_js_1.AddOrgRequest.fromJSON(object.org) : undefined,
            domainPolicy: isSet(object.domainPolicy) ? exports.AddCustomDomainPolicyRequest.fromJSON(object.domainPolicy) : undefined,
            labelPolicy: isSet(object.labelPolicy) ? management_js_1.AddCustomLabelPolicyRequest.fromJSON(object.labelPolicy) : undefined,
            lockoutPolicy: isSet(object.lockoutPolicy)
                ? management_js_1.AddCustomLockoutPolicyRequest.fromJSON(object.lockoutPolicy)
                : undefined,
            loginPolicy: isSet(object.loginPolicy) ? management_js_1.AddCustomLoginPolicyRequest.fromJSON(object.loginPolicy) : undefined,
            passwordComplexityPolicy: isSet(object.passwordComplexityPolicy)
                ? management_js_1.AddCustomPasswordComplexityPolicyRequest.fromJSON(object.passwordComplexityPolicy)
                : undefined,
            privacyPolicy: isSet(object.privacyPolicy)
                ? management_js_1.AddCustomPrivacyPolicyRequest.fromJSON(object.privacyPolicy)
                : undefined,
            projects: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projects)
                ? object.projects.map((e) => v1_js_1.DataProject.fromJSON(e))
                : [],
            projectRoles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectRoles)
                ? object.projectRoles.map((e) => management_js_1.AddProjectRoleRequest.fromJSON(e))
                : [],
            apiApps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.apiApps)
                ? object.apiApps.map((e) => v1_js_1.DataAPIApplication.fromJSON(e))
                : [],
            oidcApps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oidcApps)
                ? object.oidcApps.map((e) => v1_js_1.DataOIDCApplication.fromJSON(e))
                : [],
            humanUsers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.humanUsers)
                ? object.humanUsers.map((e) => v1_js_1.DataHumanUser.fromJSON(e))
                : [],
            machineUsers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.machineUsers)
                ? object.machineUsers.map((e) => v1_js_1.DataMachineUser.fromJSON(e))
                : [],
            triggerActions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.triggerActions)
                ? object.triggerActions.map((e) => management_js_1.SetTriggerActionsRequest.fromJSON(e))
                : [],
            actions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.actions)
                ? object.actions.map((e) => v1_js_1.DataAction.fromJSON(e))
                : [],
            projectGrants: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectGrants)
                ? object.projectGrants.map((e) => v1_js_1.DataProjectGrant.fromJSON(e))
                : [],
            userGrants: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userGrants)
                ? object.userGrants.map((e) => management_js_1.AddUserGrantRequest.fromJSON(e))
                : [],
            orgMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgMembers)
                ? object.orgMembers.map((e) => management_js_1.AddOrgMemberRequest.fromJSON(e))
                : [],
            projectMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectMembers)
                ? object.projectMembers.map((e) => management_js_1.AddProjectMemberRequest.fromJSON(e))
                : [],
            projectGrantMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectGrantMembers)
                ? object.projectGrantMembers.map((e) => management_js_1.AddProjectGrantMemberRequest.fromJSON(e))
                : [],
            userMetadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userMetadata)
                ? object.userMetadata.map((e) => management_js_1.SetUserMetadataRequest.fromJSON(e))
                : [],
            loginTexts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.loginTexts)
                ? object.loginTexts.map((e) => management_js_1.SetCustomLoginTextsRequest.fromJSON(e))
                : [],
            initMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.initMessages)
                ? object.initMessages.map((e) => management_js_1.SetCustomInitMessageTextRequest.fromJSON(e))
                : [],
            passwordResetMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.passwordResetMessages)
                ? object.passwordResetMessages.map((e) => management_js_1.SetCustomPasswordResetMessageTextRequest.fromJSON(e))
                : [],
            verifyEmailMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.verifyEmailMessages)
                ? object.verifyEmailMessages.map((e) => management_js_1.SetCustomVerifyEmailMessageTextRequest.fromJSON(e))
                : [],
            verifyPhoneMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.verifyPhoneMessages)
                ? object.verifyPhoneMessages.map((e) => management_js_1.SetCustomVerifyPhoneMessageTextRequest.fromJSON(e))
                : [],
            domainClaimedMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.domainClaimedMessages)
                ? object.domainClaimedMessages.map((e) => management_js_1.SetCustomDomainClaimedMessageTextRequest.fromJSON(e))
                : [],
            passwordlessRegistrationMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.passwordlessRegistrationMessages)
                ? object.passwordlessRegistrationMessages.map((e) => management_js_1.SetCustomPasswordlessRegistrationMessageTextRequest.fromJSON(e))
                : [],
            oidcIdps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oidcIdps)
                ? object.oidcIdps.map((e) => v1_js_1.DataOIDCIDP.fromJSON(e))
                : [],
            jwtIdps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.jwtIdps) ? object.jwtIdps.map((e) => v1_js_1.DataJWTIDP.fromJSON(e)) : [],
            userLinks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userLinks)
                ? object.userLinks.map((e) => idp_js_1.IDPUserLink.fromJSON(e))
                : [],
            domains: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.domains) ? object.domains.map((e) => org_js_1.Domain.fromJSON(e)) : [],
            appKeys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.appKeys) ? object.appKeys.map((e) => v1_js_1.DataAppKey.fromJSON(e)) : [],
            machineKeys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.machineKeys)
                ? object.machineKeys.map((e) => v1_js_1.DataMachineKey.fromJSON(e))
                : [],
            verifySmsOtpMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.verifySmsOtpMessages)
                ? object.verifySmsOtpMessages.map((e) => management_js_1.SetCustomVerifySMSOTPMessageTextRequest.fromJSON(e))
                : [],
            verifyEmailOtpMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.verifyEmailOtpMessages)
                ? object.verifyEmailOtpMessages.map((e) => management_js_1.SetCustomVerifyEmailOTPMessageTextRequest.fromJSON(e))
                : [],
            inviteUserMessages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.inviteUserMessages)
                ? object.inviteUserMessages.map((e) => management_js_1.SetCustomInviteUserMessageTextRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5;
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if (message.org !== undefined) {
            obj.org = management_js_1.AddOrgRequest.toJSON(message.org);
        }
        if (message.domainPolicy !== undefined) {
            obj.domainPolicy = exports.AddCustomDomainPolicyRequest.toJSON(message.domainPolicy);
        }
        if (message.labelPolicy !== undefined) {
            obj.labelPolicy = management_js_1.AddCustomLabelPolicyRequest.toJSON(message.labelPolicy);
        }
        if (message.lockoutPolicy !== undefined) {
            obj.lockoutPolicy = management_js_1.AddCustomLockoutPolicyRequest.toJSON(message.lockoutPolicy);
        }
        if (message.loginPolicy !== undefined) {
            obj.loginPolicy = management_js_1.AddCustomLoginPolicyRequest.toJSON(message.loginPolicy);
        }
        if (message.passwordComplexityPolicy !== undefined) {
            obj.passwordComplexityPolicy = management_js_1.AddCustomPasswordComplexityPolicyRequest.toJSON(message.passwordComplexityPolicy);
        }
        if (message.privacyPolicy !== undefined) {
            obj.privacyPolicy = management_js_1.AddCustomPrivacyPolicyRequest.toJSON(message.privacyPolicy);
        }
        if ((_a = message.projects) === null || _a === void 0 ? void 0 : _a.length) {
            obj.projects = message.projects.map((e) => v1_js_1.DataProject.toJSON(e));
        }
        if ((_b = message.projectRoles) === null || _b === void 0 ? void 0 : _b.length) {
            obj.projectRoles = message.projectRoles.map((e) => management_js_1.AddProjectRoleRequest.toJSON(e));
        }
        if ((_c = message.apiApps) === null || _c === void 0 ? void 0 : _c.length) {
            obj.apiApps = message.apiApps.map((e) => v1_js_1.DataAPIApplication.toJSON(e));
        }
        if ((_d = message.oidcApps) === null || _d === void 0 ? void 0 : _d.length) {
            obj.oidcApps = message.oidcApps.map((e) => v1_js_1.DataOIDCApplication.toJSON(e));
        }
        if ((_e = message.humanUsers) === null || _e === void 0 ? void 0 : _e.length) {
            obj.humanUsers = message.humanUsers.map((e) => v1_js_1.DataHumanUser.toJSON(e));
        }
        if ((_f = message.machineUsers) === null || _f === void 0 ? void 0 : _f.length) {
            obj.machineUsers = message.machineUsers.map((e) => v1_js_1.DataMachineUser.toJSON(e));
        }
        if ((_g = message.triggerActions) === null || _g === void 0 ? void 0 : _g.length) {
            obj.triggerActions = message.triggerActions.map((e) => management_js_1.SetTriggerActionsRequest.toJSON(e));
        }
        if ((_h = message.actions) === null || _h === void 0 ? void 0 : _h.length) {
            obj.actions = message.actions.map((e) => v1_js_1.DataAction.toJSON(e));
        }
        if ((_j = message.projectGrants) === null || _j === void 0 ? void 0 : _j.length) {
            obj.projectGrants = message.projectGrants.map((e) => v1_js_1.DataProjectGrant.toJSON(e));
        }
        if ((_k = message.userGrants) === null || _k === void 0 ? void 0 : _k.length) {
            obj.userGrants = message.userGrants.map((e) => management_js_1.AddUserGrantRequest.toJSON(e));
        }
        if ((_l = message.orgMembers) === null || _l === void 0 ? void 0 : _l.length) {
            obj.orgMembers = message.orgMembers.map((e) => management_js_1.AddOrgMemberRequest.toJSON(e));
        }
        if ((_m = message.projectMembers) === null || _m === void 0 ? void 0 : _m.length) {
            obj.projectMembers = message.projectMembers.map((e) => management_js_1.AddProjectMemberRequest.toJSON(e));
        }
        if ((_o = message.projectGrantMembers) === null || _o === void 0 ? void 0 : _o.length) {
            obj.projectGrantMembers = message.projectGrantMembers.map((e) => management_js_1.AddProjectGrantMemberRequest.toJSON(e));
        }
        if ((_p = message.userMetadata) === null || _p === void 0 ? void 0 : _p.length) {
            obj.userMetadata = message.userMetadata.map((e) => management_js_1.SetUserMetadataRequest.toJSON(e));
        }
        if ((_q = message.loginTexts) === null || _q === void 0 ? void 0 : _q.length) {
            obj.loginTexts = message.loginTexts.map((e) => management_js_1.SetCustomLoginTextsRequest.toJSON(e));
        }
        if ((_r = message.initMessages) === null || _r === void 0 ? void 0 : _r.length) {
            obj.initMessages = message.initMessages.map((e) => management_js_1.SetCustomInitMessageTextRequest.toJSON(e));
        }
        if ((_s = message.passwordResetMessages) === null || _s === void 0 ? void 0 : _s.length) {
            obj.passwordResetMessages = message.passwordResetMessages.map((e) => management_js_1.SetCustomPasswordResetMessageTextRequest.toJSON(e));
        }
        if ((_t = message.verifyEmailMessages) === null || _t === void 0 ? void 0 : _t.length) {
            obj.verifyEmailMessages = message.verifyEmailMessages.map((e) => management_js_1.SetCustomVerifyEmailMessageTextRequest.toJSON(e));
        }
        if ((_u = message.verifyPhoneMessages) === null || _u === void 0 ? void 0 : _u.length) {
            obj.verifyPhoneMessages = message.verifyPhoneMessages.map((e) => management_js_1.SetCustomVerifyPhoneMessageTextRequest.toJSON(e));
        }
        if ((_v = message.domainClaimedMessages) === null || _v === void 0 ? void 0 : _v.length) {
            obj.domainClaimedMessages = message.domainClaimedMessages.map((e) => management_js_1.SetCustomDomainClaimedMessageTextRequest.toJSON(e));
        }
        if ((_w = message.passwordlessRegistrationMessages) === null || _w === void 0 ? void 0 : _w.length) {
            obj.passwordlessRegistrationMessages = message.passwordlessRegistrationMessages.map((e) => management_js_1.SetCustomPasswordlessRegistrationMessageTextRequest.toJSON(e));
        }
        if ((_x = message.oidcIdps) === null || _x === void 0 ? void 0 : _x.length) {
            obj.oidcIdps = message.oidcIdps.map((e) => v1_js_1.DataOIDCIDP.toJSON(e));
        }
        if ((_y = message.jwtIdps) === null || _y === void 0 ? void 0 : _y.length) {
            obj.jwtIdps = message.jwtIdps.map((e) => v1_js_1.DataJWTIDP.toJSON(e));
        }
        if ((_z = message.userLinks) === null || _z === void 0 ? void 0 : _z.length) {
            obj.userLinks = message.userLinks.map((e) => idp_js_1.IDPUserLink.toJSON(e));
        }
        if ((_0 = message.domains) === null || _0 === void 0 ? void 0 : _0.length) {
            obj.domains = message.domains.map((e) => org_js_1.Domain.toJSON(e));
        }
        if ((_1 = message.appKeys) === null || _1 === void 0 ? void 0 : _1.length) {
            obj.appKeys = message.appKeys.map((e) => v1_js_1.DataAppKey.toJSON(e));
        }
        if ((_2 = message.machineKeys) === null || _2 === void 0 ? void 0 : _2.length) {
            obj.machineKeys = message.machineKeys.map((e) => v1_js_1.DataMachineKey.toJSON(e));
        }
        if ((_3 = message.verifySmsOtpMessages) === null || _3 === void 0 ? void 0 : _3.length) {
            obj.verifySmsOtpMessages = message.verifySmsOtpMessages.map((e) => management_js_1.SetCustomVerifySMSOTPMessageTextRequest.toJSON(e));
        }
        if ((_4 = message.verifyEmailOtpMessages) === null || _4 === void 0 ? void 0 : _4.length) {
            obj.verifyEmailOtpMessages = message.verifyEmailOtpMessages.map((e) => management_js_1.SetCustomVerifyEmailOTPMessageTextRequest.toJSON(e));
        }
        if ((_5 = message.inviteUserMessages) === null || _5 === void 0 ? void 0 : _5.length) {
            obj.inviteUserMessages = message.inviteUserMessages.map((e) => management_js_1.SetCustomInviteUserMessageTextRequest.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.DataOrg.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
        const message = createBaseDataOrg();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.org = (object.org !== undefined && object.org !== null) ? management_js_1.AddOrgRequest.fromPartial(object.org) : undefined;
        message.domainPolicy = (object.domainPolicy !== undefined && object.domainPolicy !== null)
            ? exports.AddCustomDomainPolicyRequest.fromPartial(object.domainPolicy)
            : undefined;
        message.labelPolicy = (object.labelPolicy !== undefined && object.labelPolicy !== null)
            ? management_js_1.AddCustomLabelPolicyRequest.fromPartial(object.labelPolicy)
            : undefined;
        message.lockoutPolicy = (object.lockoutPolicy !== undefined && object.lockoutPolicy !== null)
            ? management_js_1.AddCustomLockoutPolicyRequest.fromPartial(object.lockoutPolicy)
            : undefined;
        message.loginPolicy = (object.loginPolicy !== undefined && object.loginPolicy !== null)
            ? management_js_1.AddCustomLoginPolicyRequest.fromPartial(object.loginPolicy)
            : undefined;
        message.passwordComplexityPolicy =
            (object.passwordComplexityPolicy !== undefined && object.passwordComplexityPolicy !== null)
                ? management_js_1.AddCustomPasswordComplexityPolicyRequest.fromPartial(object.passwordComplexityPolicy)
                : undefined;
        message.privacyPolicy = (object.privacyPolicy !== undefined && object.privacyPolicy !== null)
            ? management_js_1.AddCustomPrivacyPolicyRequest.fromPartial(object.privacyPolicy)
            : undefined;
        message.projects = ((_b = object.projects) === null || _b === void 0 ? void 0 : _b.map((e) => v1_js_1.DataProject.fromPartial(e))) || [];
        message.projectRoles = ((_c = object.projectRoles) === null || _c === void 0 ? void 0 : _c.map((e) => management_js_1.AddProjectRoleRequest.fromPartial(e))) || [];
        message.apiApps = ((_d = object.apiApps) === null || _d === void 0 ? void 0 : _d.map((e) => v1_js_1.DataAPIApplication.fromPartial(e))) || [];
        message.oidcApps = ((_e = object.oidcApps) === null || _e === void 0 ? void 0 : _e.map((e) => v1_js_1.DataOIDCApplication.fromPartial(e))) || [];
        message.humanUsers = ((_f = object.humanUsers) === null || _f === void 0 ? void 0 : _f.map((e) => v1_js_1.DataHumanUser.fromPartial(e))) || [];
        message.machineUsers = ((_g = object.machineUsers) === null || _g === void 0 ? void 0 : _g.map((e) => v1_js_1.DataMachineUser.fromPartial(e))) || [];
        message.triggerActions = ((_h = object.triggerActions) === null || _h === void 0 ? void 0 : _h.map((e) => management_js_1.SetTriggerActionsRequest.fromPartial(e))) || [];
        message.actions = ((_j = object.actions) === null || _j === void 0 ? void 0 : _j.map((e) => v1_js_1.DataAction.fromPartial(e))) || [];
        message.projectGrants = ((_k = object.projectGrants) === null || _k === void 0 ? void 0 : _k.map((e) => v1_js_1.DataProjectGrant.fromPartial(e))) || [];
        message.userGrants = ((_l = object.userGrants) === null || _l === void 0 ? void 0 : _l.map((e) => management_js_1.AddUserGrantRequest.fromPartial(e))) || [];
        message.orgMembers = ((_m = object.orgMembers) === null || _m === void 0 ? void 0 : _m.map((e) => management_js_1.AddOrgMemberRequest.fromPartial(e))) || [];
        message.projectMembers = ((_o = object.projectMembers) === null || _o === void 0 ? void 0 : _o.map((e) => management_js_1.AddProjectMemberRequest.fromPartial(e))) || [];
        message.projectGrantMembers = ((_p = object.projectGrantMembers) === null || _p === void 0 ? void 0 : _p.map((e) => management_js_1.AddProjectGrantMemberRequest.fromPartial(e))) ||
            [];
        message.userMetadata = ((_q = object.userMetadata) === null || _q === void 0 ? void 0 : _q.map((e) => management_js_1.SetUserMetadataRequest.fromPartial(e))) || [];
        message.loginTexts = ((_r = object.loginTexts) === null || _r === void 0 ? void 0 : _r.map((e) => management_js_1.SetCustomLoginTextsRequest.fromPartial(e))) || [];
        message.initMessages = ((_s = object.initMessages) === null || _s === void 0 ? void 0 : _s.map((e) => management_js_1.SetCustomInitMessageTextRequest.fromPartial(e))) || [];
        message.passwordResetMessages =
            ((_t = object.passwordResetMessages) === null || _t === void 0 ? void 0 : _t.map((e) => management_js_1.SetCustomPasswordResetMessageTextRequest.fromPartial(e))) || [];
        message.verifyEmailMessages =
            ((_u = object.verifyEmailMessages) === null || _u === void 0 ? void 0 : _u.map((e) => management_js_1.SetCustomVerifyEmailMessageTextRequest.fromPartial(e))) || [];
        message.verifyPhoneMessages =
            ((_v = object.verifyPhoneMessages) === null || _v === void 0 ? void 0 : _v.map((e) => management_js_1.SetCustomVerifyPhoneMessageTextRequest.fromPartial(e))) || [];
        message.domainClaimedMessages =
            ((_w = object.domainClaimedMessages) === null || _w === void 0 ? void 0 : _w.map((e) => management_js_1.SetCustomDomainClaimedMessageTextRequest.fromPartial(e))) || [];
        message.passwordlessRegistrationMessages =
            ((_x = object.passwordlessRegistrationMessages) === null || _x === void 0 ? void 0 : _x.map((e) => management_js_1.SetCustomPasswordlessRegistrationMessageTextRequest.fromPartial(e))) || [];
        message.oidcIdps = ((_y = object.oidcIdps) === null || _y === void 0 ? void 0 : _y.map((e) => v1_js_1.DataOIDCIDP.fromPartial(e))) || [];
        message.jwtIdps = ((_z = object.jwtIdps) === null || _z === void 0 ? void 0 : _z.map((e) => v1_js_1.DataJWTIDP.fromPartial(e))) || [];
        message.userLinks = ((_0 = object.userLinks) === null || _0 === void 0 ? void 0 : _0.map((e) => idp_js_1.IDPUserLink.fromPartial(e))) || [];
        message.domains = ((_1 = object.domains) === null || _1 === void 0 ? void 0 : _1.map((e) => org_js_1.Domain.fromPartial(e))) || [];
        message.appKeys = ((_2 = object.appKeys) === null || _2 === void 0 ? void 0 : _2.map((e) => v1_js_1.DataAppKey.fromPartial(e))) || [];
        message.machineKeys = ((_3 = object.machineKeys) === null || _3 === void 0 ? void 0 : _3.map((e) => v1_js_1.DataMachineKey.fromPartial(e))) || [];
        message.verifySmsOtpMessages =
            ((_4 = object.verifySmsOtpMessages) === null || _4 === void 0 ? void 0 : _4.map((e) => management_js_1.SetCustomVerifySMSOTPMessageTextRequest.fromPartial(e))) || [];
        message.verifyEmailOtpMessages =
            ((_5 = object.verifyEmailOtpMessages) === null || _5 === void 0 ? void 0 : _5.map((e) => management_js_1.SetCustomVerifyEmailOTPMessageTextRequest.fromPartial(e))) || [];
        message.inviteUserMessages =
            ((_6 = object.inviteUserMessages) === null || _6 === void 0 ? void 0 : _6.map((e) => management_js_1.SetCustomInviteUserMessageTextRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseImportDataResponse() {
    return { errors: [], success: undefined };
}
exports.ImportDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.errors) {
            exports.ImportDataError.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.success !== undefined) {
            exports.ImportDataSuccess.encode(message.success, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.errors.push(exports.ImportDataError.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.success = exports.ImportDataSuccess.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            errors: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.errors)
                ? object.errors.map((e) => exports.ImportDataError.fromJSON(e))
                : [],
            success: isSet(object.success) ? exports.ImportDataSuccess.fromJSON(object.success) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.errors) === null || _a === void 0 ? void 0 : _a.length) {
            obj.errors = message.errors.map((e) => exports.ImportDataError.toJSON(e));
        }
        if (message.success !== undefined) {
            obj.success = exports.ImportDataSuccess.toJSON(message.success);
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImportDataResponse();
        message.errors = ((_a = object.errors) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ImportDataError.fromPartial(e))) || [];
        message.success = (object.success !== undefined && object.success !== null)
            ? exports.ImportDataSuccess.fromPartial(object.success)
            : undefined;
        return message;
    },
};
function createBaseImportDataError() {
    return { type: "", id: "", message: "" };
}
exports.ImportDataError = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.message !== "") {
            writer.uint32(26).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            message: isSet(object.message) ? globalThis.String(object.message) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataError.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseImportDataError();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : "";
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.message = (_c = object.message) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseImportDataSuccess() {
    return { orgs: [] };
}
exports.ImportDataSuccess = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.orgs) {
            exports.ImportDataSuccessOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccess();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(exports.ImportDataSuccessOrg.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgs) ? object.orgs.map((e) => exports.ImportDataSuccessOrg.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.orgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.orgs = message.orgs.map((e) => exports.ImportDataSuccessOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccess.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseImportDataSuccess();
        message.orgs = ((_a = object.orgs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ImportDataSuccessOrg.fromPartial(e))) || [];
        return message;
    },
};
function createBaseImportDataSuccessOrg() {
    return {
        orgId: "",
        projectIds: [],
        projectRoles: [],
        oidcAppIds: [],
        apiAppIds: [],
        humanUserIds: [],
        machineUserIds: [],
        actionIds: [],
        triggerActions: [],
        projectGrants: [],
        userGrants: [],
        orgMembers: [],
        projectMembers: [],
        projectGrantMembers: [],
        oidcIpds: [],
        jwtIdps: [],
        idpLinks: [],
        userLinks: [],
        userMetadata: [],
        domains: [],
        appKeys: [],
        machineKeys: [],
    };
}
exports.ImportDataSuccessOrg = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.orgId !== "") {
            writer.uint32(10).string(message.orgId);
        }
        for (const v of message.projectIds) {
            writer.uint32(18).string(v);
        }
        for (const v of message.projectRoles) {
            writer.uint32(26).string(v);
        }
        for (const v of message.oidcAppIds) {
            writer.uint32(34).string(v);
        }
        for (const v of message.apiAppIds) {
            writer.uint32(42).string(v);
        }
        for (const v of message.humanUserIds) {
            writer.uint32(50).string(v);
        }
        for (const v of message.machineUserIds) {
            writer.uint32(58).string(v);
        }
        for (const v of message.actionIds) {
            writer.uint32(66).string(v);
        }
        for (const v of message.triggerActions) {
            management_js_1.SetTriggerActionsRequest.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.projectGrants) {
            exports.ImportDataSuccessProjectGrant.encode(v, writer.uint32(82).fork()).join();
        }
        for (const v of message.userGrants) {
            exports.ImportDataSuccessUserGrant.encode(v, writer.uint32(90).fork()).join();
        }
        for (const v of message.orgMembers) {
            writer.uint32(98).string(v);
        }
        for (const v of message.projectMembers) {
            exports.ImportDataSuccessProjectMember.encode(v, writer.uint32(106).fork()).join();
        }
        for (const v of message.projectGrantMembers) {
            exports.ImportDataSuccessProjectGrantMember.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.oidcIpds) {
            writer.uint32(122).string(v);
        }
        for (const v of message.jwtIdps) {
            writer.uint32(130).string(v);
        }
        for (const v of message.idpLinks) {
            writer.uint32(138).string(v);
        }
        for (const v of message.userLinks) {
            exports.ImportDataSuccessUserLinks.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.userMetadata) {
            exports.ImportDataSuccessUserMetadata.encode(v, writer.uint32(154).fork()).join();
        }
        for (const v of message.domains) {
            writer.uint32(162).string(v);
        }
        for (const v of message.appKeys) {
            writer.uint32(170).string(v);
        }
        for (const v of message.machineKeys) {
            writer.uint32(178).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessOrg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.projectIds.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.projectRoles.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.oidcAppIds.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.apiAppIds.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.humanUserIds.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.machineUserIds.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.actionIds.push(reader.string());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.triggerActions.push(management_js_1.SetTriggerActionsRequest.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.projectGrants.push(exports.ImportDataSuccessProjectGrant.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.userGrants.push(exports.ImportDataSuccessUserGrant.decode(reader, reader.uint32()));
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.orgMembers.push(reader.string());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.projectMembers.push(exports.ImportDataSuccessProjectMember.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.projectGrantMembers.push(exports.ImportDataSuccessProjectGrantMember.decode(reader, reader.uint32()));
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.oidcIpds.push(reader.string());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.jwtIdps.push(reader.string());
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.idpLinks.push(reader.string());
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.userLinks.push(exports.ImportDataSuccessUserLinks.decode(reader, reader.uint32()));
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.userMetadata.push(exports.ImportDataSuccessUserMetadata.decode(reader, reader.uint32()));
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.domains.push(reader.string());
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.appKeys.push(reader.string());
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.machineKeys.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
            projectIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectIds)
                ? object.projectIds.map((e) => globalThis.String(e))
                : [],
            projectRoles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectRoles)
                ? object.projectRoles.map((e) => globalThis.String(e))
                : [],
            oidcAppIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oidcAppIds)
                ? object.oidcAppIds.map((e) => globalThis.String(e))
                : [],
            apiAppIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.apiAppIds)
                ? object.apiAppIds.map((e) => globalThis.String(e))
                : [],
            humanUserIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.humanUserIds)
                ? object.humanUserIds.map((e) => globalThis.String(e))
                : [],
            machineUserIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.machineUserIds)
                ? object.machineUserIds.map((e) => globalThis.String(e))
                : [],
            actionIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.actionIds)
                ? object.actionIds.map((e) => globalThis.String(e))
                : [],
            triggerActions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.triggerActions)
                ? object.triggerActions.map((e) => management_js_1.SetTriggerActionsRequest.fromJSON(e))
                : [],
            projectGrants: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectGrants)
                ? object.projectGrants.map((e) => exports.ImportDataSuccessProjectGrant.fromJSON(e))
                : [],
            userGrants: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userGrants)
                ? object.userGrants.map((e) => exports.ImportDataSuccessUserGrant.fromJSON(e))
                : [],
            orgMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgMembers)
                ? object.orgMembers.map((e) => globalThis.String(e))
                : [],
            projectMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectMembers)
                ? object.projectMembers.map((e) => exports.ImportDataSuccessProjectMember.fromJSON(e))
                : [],
            projectGrantMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.projectGrantMembers)
                ? object.projectGrantMembers.map((e) => exports.ImportDataSuccessProjectGrantMember.fromJSON(e))
                : [],
            oidcIpds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.oidcIpds) ? object.oidcIpds.map((e) => globalThis.String(e)) : [],
            jwtIdps: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.jwtIdps) ? object.jwtIdps.map((e) => globalThis.String(e)) : [],
            idpLinks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.idpLinks) ? object.idpLinks.map((e) => globalThis.String(e)) : [],
            userLinks: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userLinks)
                ? object.userLinks.map((e) => exports.ImportDataSuccessUserLinks.fromJSON(e))
                : [],
            userMetadata: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.userMetadata)
                ? object.userMetadata.map((e) => exports.ImportDataSuccessUserMetadata.fromJSON(e))
                : [],
            domains: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.domains)
                ? object.domains.map((e) => globalThis.String(e))
                : [],
            appKeys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.appKeys) ? object.appKeys.map((e) => globalThis.String(e)) : [],
            machineKeys: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.machineKeys)
                ? object.machineKeys.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        const obj = {};
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        if ((_a = message.projectIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.projectIds = message.projectIds;
        }
        if ((_b = message.projectRoles) === null || _b === void 0 ? void 0 : _b.length) {
            obj.projectRoles = message.projectRoles;
        }
        if ((_c = message.oidcAppIds) === null || _c === void 0 ? void 0 : _c.length) {
            obj.oidcAppIds = message.oidcAppIds;
        }
        if ((_d = message.apiAppIds) === null || _d === void 0 ? void 0 : _d.length) {
            obj.apiAppIds = message.apiAppIds;
        }
        if ((_e = message.humanUserIds) === null || _e === void 0 ? void 0 : _e.length) {
            obj.humanUserIds = message.humanUserIds;
        }
        if ((_f = message.machineUserIds) === null || _f === void 0 ? void 0 : _f.length) {
            obj.machineUserIds = message.machineUserIds;
        }
        if ((_g = message.actionIds) === null || _g === void 0 ? void 0 : _g.length) {
            obj.actionIds = message.actionIds;
        }
        if ((_h = message.triggerActions) === null || _h === void 0 ? void 0 : _h.length) {
            obj.triggerActions = message.triggerActions.map((e) => management_js_1.SetTriggerActionsRequest.toJSON(e));
        }
        if ((_j = message.projectGrants) === null || _j === void 0 ? void 0 : _j.length) {
            obj.projectGrants = message.projectGrants.map((e) => exports.ImportDataSuccessProjectGrant.toJSON(e));
        }
        if ((_k = message.userGrants) === null || _k === void 0 ? void 0 : _k.length) {
            obj.userGrants = message.userGrants.map((e) => exports.ImportDataSuccessUserGrant.toJSON(e));
        }
        if ((_l = message.orgMembers) === null || _l === void 0 ? void 0 : _l.length) {
            obj.orgMembers = message.orgMembers;
        }
        if ((_m = message.projectMembers) === null || _m === void 0 ? void 0 : _m.length) {
            obj.projectMembers = message.projectMembers.map((e) => exports.ImportDataSuccessProjectMember.toJSON(e));
        }
        if ((_o = message.projectGrantMembers) === null || _o === void 0 ? void 0 : _o.length) {
            obj.projectGrantMembers = message.projectGrantMembers.map((e) => exports.ImportDataSuccessProjectGrantMember.toJSON(e));
        }
        if ((_p = message.oidcIpds) === null || _p === void 0 ? void 0 : _p.length) {
            obj.oidcIpds = message.oidcIpds;
        }
        if ((_q = message.jwtIdps) === null || _q === void 0 ? void 0 : _q.length) {
            obj.jwtIdps = message.jwtIdps;
        }
        if ((_r = message.idpLinks) === null || _r === void 0 ? void 0 : _r.length) {
            obj.idpLinks = message.idpLinks;
        }
        if ((_s = message.userLinks) === null || _s === void 0 ? void 0 : _s.length) {
            obj.userLinks = message.userLinks.map((e) => exports.ImportDataSuccessUserLinks.toJSON(e));
        }
        if ((_t = message.userMetadata) === null || _t === void 0 ? void 0 : _t.length) {
            obj.userMetadata = message.userMetadata.map((e) => exports.ImportDataSuccessUserMetadata.toJSON(e));
        }
        if ((_u = message.domains) === null || _u === void 0 ? void 0 : _u.length) {
            obj.domains = message.domains;
        }
        if ((_v = message.appKeys) === null || _v === void 0 ? void 0 : _v.length) {
            obj.appKeys = message.appKeys;
        }
        if ((_w = message.machineKeys) === null || _w === void 0 ? void 0 : _w.length) {
            obj.machineKeys = message.machineKeys;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessOrg.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
        const message = createBaseImportDataSuccessOrg();
        message.orgId = (_a = object.orgId) !== null && _a !== void 0 ? _a : "";
        message.projectIds = ((_b = object.projectIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.projectRoles = ((_c = object.projectRoles) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.oidcAppIds = ((_d = object.oidcAppIds) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.apiAppIds = ((_e = object.apiAppIds) === null || _e === void 0 ? void 0 : _e.map((e) => e)) || [];
        message.humanUserIds = ((_f = object.humanUserIds) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.machineUserIds = ((_g = object.machineUserIds) === null || _g === void 0 ? void 0 : _g.map((e) => e)) || [];
        message.actionIds = ((_h = object.actionIds) === null || _h === void 0 ? void 0 : _h.map((e) => e)) || [];
        message.triggerActions = ((_j = object.triggerActions) === null || _j === void 0 ? void 0 : _j.map((e) => management_js_1.SetTriggerActionsRequest.fromPartial(e))) || [];
        message.projectGrants = ((_k = object.projectGrants) === null || _k === void 0 ? void 0 : _k.map((e) => exports.ImportDataSuccessProjectGrant.fromPartial(e))) || [];
        message.userGrants = ((_l = object.userGrants) === null || _l === void 0 ? void 0 : _l.map((e) => exports.ImportDataSuccessUserGrant.fromPartial(e))) || [];
        message.orgMembers = ((_m = object.orgMembers) === null || _m === void 0 ? void 0 : _m.map((e) => e)) || [];
        message.projectMembers = ((_o = object.projectMembers) === null || _o === void 0 ? void 0 : _o.map((e) => exports.ImportDataSuccessProjectMember.fromPartial(e))) || [];
        message.projectGrantMembers =
            ((_p = object.projectGrantMembers) === null || _p === void 0 ? void 0 : _p.map((e) => exports.ImportDataSuccessProjectGrantMember.fromPartial(e))) || [];
        message.oidcIpds = ((_q = object.oidcIpds) === null || _q === void 0 ? void 0 : _q.map((e) => e)) || [];
        message.jwtIdps = ((_r = object.jwtIdps) === null || _r === void 0 ? void 0 : _r.map((e) => e)) || [];
        message.idpLinks = ((_s = object.idpLinks) === null || _s === void 0 ? void 0 : _s.map((e) => e)) || [];
        message.userLinks = ((_t = object.userLinks) === null || _t === void 0 ? void 0 : _t.map((e) => exports.ImportDataSuccessUserLinks.fromPartial(e))) || [];
        message.userMetadata = ((_u = object.userMetadata) === null || _u === void 0 ? void 0 : _u.map((e) => exports.ImportDataSuccessUserMetadata.fromPartial(e))) || [];
        message.domains = ((_v = object.domains) === null || _v === void 0 ? void 0 : _v.map((e) => e)) || [];
        message.appKeys = ((_w = object.appKeys) === null || _w === void 0 ? void 0 : _w.map((e) => e)) || [];
        message.machineKeys = ((_x = object.machineKeys) === null || _x === void 0 ? void 0 : _x.map((e) => e)) || [];
        return message;
    },
};
function createBaseImportDataSuccessProjectGrant() {
    return { grantId: "", projectId: "", orgId: "" };
}
exports.ImportDataSuccessProjectGrant = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.grantId !== "") {
            writer.uint32(10).string(message.grantId);
        }
        if (message.projectId !== "") {
            writer.uint32(18).string(message.projectId);
        }
        if (message.orgId !== "") {
            writer.uint32(26).string(message.orgId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.grantId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.orgId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.grantId !== "") {
            obj.grantId = message.grantId;
        }
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.orgId !== "") {
            obj.orgId = message.orgId;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessProjectGrant.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseImportDataSuccessProjectGrant();
        message.grantId = (_a = object.grantId) !== null && _a !== void 0 ? _a : "";
        message.projectId = (_b = object.projectId) !== null && _b !== void 0 ? _b : "";
        message.orgId = (_c = object.orgId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseImportDataSuccessUserGrant() {
    return { projectId: "", userId: "" };
}
exports.ImportDataSuccessUserGrant = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserGrant();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessUserGrant.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseImportDataSuccessUserGrant();
        message.projectId = (_a = object.projectId) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseImportDataSuccessProjectMember() {
    return { projectId: "", userId: "" };
}
exports.ImportDataSuccessProjectMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessProjectMember.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseImportDataSuccessProjectMember();
        message.projectId = (_a = object.projectId) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseImportDataSuccessProjectGrantMember() {
    return { projectId: "", grantId: "", userId: "" };
}
exports.ImportDataSuccessProjectGrantMember = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.projectId !== "") {
            writer.uint32(10).string(message.projectId);
        }
        if (message.grantId !== "") {
            writer.uint32(18).string(message.grantId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessProjectGrantMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.projectId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.grantId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
            grantId: isSet(object.grantId) ? globalThis.String(object.grantId) : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.projectId !== "") {
            obj.projectId = message.projectId;
        }
        if (message.grantId !== "") {
            obj.grantId = message.grantId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessProjectGrantMember.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseImportDataSuccessProjectGrantMember();
        message.projectId = (_a = object.projectId) !== null && _a !== void 0 ? _a : "";
        message.grantId = (_b = object.grantId) !== null && _b !== void 0 ? _b : "";
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseImportDataSuccessUserLinks() {
    return { userId: "", externalUserId: "", displayName: "", idpId: "" };
}
exports.ImportDataSuccessUserLinks = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.externalUserId !== "") {
            writer.uint32(18).string(message.externalUserId);
        }
        if (message.displayName !== "") {
            writer.uint32(26).string(message.displayName);
        }
        if (message.idpId !== "") {
            writer.uint32(34).string(message.idpId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserLinks();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.externalUserId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.displayName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.idpId = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            externalUserId: isSet(object.externalUserId) ? globalThis.String(object.externalUserId) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            idpId: isSet(object.idpId) ? globalThis.String(object.idpId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.externalUserId !== "") {
            obj.externalUserId = message.externalUserId;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.idpId !== "") {
            obj.idpId = message.idpId;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessUserLinks.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseImportDataSuccessUserLinks();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.externalUserId = (_b = object.externalUserId) !== null && _b !== void 0 ? _b : "";
        message.displayName = (_c = object.displayName) !== null && _c !== void 0 ? _c : "";
        message.idpId = (_d = object.idpId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseImportDataSuccessUserMetadata() {
    return { userId: "", key: "" };
}
exports.ImportDataSuccessUserMetadata = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImportDataSuccessUserMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
            key: isSet(object.key) ? globalThis.String(object.key) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        if (message.key !== "") {
            obj.key = message.key;
        }
        return obj;
    },
    create(base) {
        return exports.ImportDataSuccessUserMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseImportDataSuccessUserMetadata();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.key = (_b = object.key) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExportDataRequest() {
    return {
        orgIds: [],
        excludedOrgIds: [],
        withPasswords: false,
        withOtp: false,
        responseOutput: false,
        localOutput: undefined,
        s3Output: undefined,
        gcsOutput: undefined,
        timeout: "",
    };
}
exports.ExportDataRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.orgIds) {
            writer.uint32(10).string(v);
        }
        for (const v of message.excludedOrgIds) {
            writer.uint32(18).string(v);
        }
        if (message.withPasswords !== false) {
            writer.uint32(24).bool(message.withPasswords);
        }
        if (message.withOtp !== false) {
            writer.uint32(32).bool(message.withOtp);
        }
        if (message.responseOutput !== false) {
            writer.uint32(40).bool(message.responseOutput);
        }
        if (message.localOutput !== undefined) {
            exports.ExportDataRequest_LocalOutput.encode(message.localOutput, writer.uint32(50).fork()).join();
        }
        if (message.s3Output !== undefined) {
            exports.ExportDataRequest_S3Output.encode(message.s3Output, writer.uint32(58).fork()).join();
        }
        if (message.gcsOutput !== undefined) {
            exports.ExportDataRequest_GCSOutput.encode(message.gcsOutput, writer.uint32(66).fork()).join();
        }
        if (message.timeout !== "") {
            writer.uint32(74).string(message.timeout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgIds.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.excludedOrgIds.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.withPasswords = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.withOtp = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.responseOutput = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.localOutput = exports.ExportDataRequest_LocalOutput.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.s3Output = exports.ExportDataRequest_S3Output.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.gcsOutput = exports.ExportDataRequest_GCSOutput.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.timeout = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            orgIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgIds) ? object.orgIds.map((e) => globalThis.String(e)) : [],
            excludedOrgIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.excludedOrgIds)
                ? object.excludedOrgIds.map((e) => globalThis.String(e))
                : [],
            withPasswords: isSet(object.withPasswords) ? globalThis.Boolean(object.withPasswords) : false,
            withOtp: isSet(object.withOtp) ? globalThis.Boolean(object.withOtp) : false,
            responseOutput: isSet(object.responseOutput) ? globalThis.Boolean(object.responseOutput) : false,
            localOutput: isSet(object.localOutput) ? exports.ExportDataRequest_LocalOutput.fromJSON(object.localOutput) : undefined,
            s3Output: isSet(object.s3Output) ? exports.ExportDataRequest_S3Output.fromJSON(object.s3Output) : undefined,
            gcsOutput: isSet(object.gcsOutput) ? exports.ExportDataRequest_GCSOutput.fromJSON(object.gcsOutput) : undefined,
            timeout: isSet(object.timeout) ? globalThis.String(object.timeout) : "",
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.orgIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.orgIds = message.orgIds;
        }
        if ((_b = message.excludedOrgIds) === null || _b === void 0 ? void 0 : _b.length) {
            obj.excludedOrgIds = message.excludedOrgIds;
        }
        if (message.withPasswords !== false) {
            obj.withPasswords = message.withPasswords;
        }
        if (message.withOtp !== false) {
            obj.withOtp = message.withOtp;
        }
        if (message.responseOutput !== false) {
            obj.responseOutput = message.responseOutput;
        }
        if (message.localOutput !== undefined) {
            obj.localOutput = exports.ExportDataRequest_LocalOutput.toJSON(message.localOutput);
        }
        if (message.s3Output !== undefined) {
            obj.s3Output = exports.ExportDataRequest_S3Output.toJSON(message.s3Output);
        }
        if (message.gcsOutput !== undefined) {
            obj.gcsOutput = exports.ExportDataRequest_GCSOutput.toJSON(message.gcsOutput);
        }
        if (message.timeout !== "") {
            obj.timeout = message.timeout;
        }
        return obj;
    },
    create(base) {
        return exports.ExportDataRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseExportDataRequest();
        message.orgIds = ((_a = object.orgIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.excludedOrgIds = ((_b = object.excludedOrgIds) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.withPasswords = (_c = object.withPasswords) !== null && _c !== void 0 ? _c : false;
        message.withOtp = (_d = object.withOtp) !== null && _d !== void 0 ? _d : false;
        message.responseOutput = (_e = object.responseOutput) !== null && _e !== void 0 ? _e : false;
        message.localOutput = (object.localOutput !== undefined && object.localOutput !== null)
            ? exports.ExportDataRequest_LocalOutput.fromPartial(object.localOutput)
            : undefined;
        message.s3Output = (object.s3Output !== undefined && object.s3Output !== null)
            ? exports.ExportDataRequest_S3Output.fromPartial(object.s3Output)
            : undefined;
        message.gcsOutput = (object.gcsOutput !== undefined && object.gcsOutput !== null)
            ? exports.ExportDataRequest_GCSOutput.fromPartial(object.gcsOutput)
            : undefined;
        message.timeout = (_f = object.timeout) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseExportDataRequest_LocalOutput() {
    return { path: "" };
}
exports.ExportDataRequest_LocalOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_LocalOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { path: isSet(object.path) ? globalThis.String(object.path) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.ExportDataRequest_LocalOutput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExportDataRequest_LocalOutput();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseExportDataRequest_S3Output() {
    return { path: "", endpoint: "", accessKeyId: "", secretAccessKey: "", ssl: false, bucket: "" };
}
exports.ExportDataRequest_S3Output = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.accessKeyId !== "") {
            writer.uint32(26).string(message.accessKeyId);
        }
        if (message.secretAccessKey !== "") {
            writer.uint32(34).string(message.secretAccessKey);
        }
        if (message.ssl !== false) {
            writer.uint32(40).bool(message.ssl);
        }
        if (message.bucket !== "") {
            writer.uint32(50).string(message.bucket);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_S3Output();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.endpoint = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.accessKeyId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.secretAccessKey = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.ssl = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
            accessKeyId: isSet(object.accessKeyId) ? globalThis.String(object.accessKeyId) : "",
            secretAccessKey: isSet(object.secretAccessKey) ? globalThis.String(object.secretAccessKey) : "",
            ssl: isSet(object.ssl) ? globalThis.Boolean(object.ssl) : false,
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.endpoint !== "") {
            obj.endpoint = message.endpoint;
        }
        if (message.accessKeyId !== "") {
            obj.accessKeyId = message.accessKeyId;
        }
        if (message.secretAccessKey !== "") {
            obj.secretAccessKey = message.secretAccessKey;
        }
        if (message.ssl !== false) {
            obj.ssl = message.ssl;
        }
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        return obj;
    },
    create(base) {
        return exports.ExportDataRequest_S3Output.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseExportDataRequest_S3Output();
        message.path = (_a = object.path) !== null && _a !== void 0 ? _a : "";
        message.endpoint = (_b = object.endpoint) !== null && _b !== void 0 ? _b : "";
        message.accessKeyId = (_c = object.accessKeyId) !== null && _c !== void 0 ? _c : "";
        message.secretAccessKey = (_d = object.secretAccessKey) !== null && _d !== void 0 ? _d : "";
        message.ssl = (_e = object.ssl) !== null && _e !== void 0 ? _e : false;
        message.bucket = (_f = object.bucket) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseExportDataRequest_GCSOutput() {
    return { bucket: "", serviceaccountJson: "", path: "" };
}
exports.ExportDataRequest_GCSOutput = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bucket !== "") {
            writer.uint32(10).string(message.bucket);
        }
        if (message.serviceaccountJson !== "") {
            writer.uint32(18).string(message.serviceaccountJson);
        }
        if (message.path !== "") {
            writer.uint32(26).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataRequest_GCSOutput();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.bucket = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.serviceaccountJson = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
            serviceaccountJson: isSet(object.serviceaccountJson) ? globalThis.String(object.serviceaccountJson) : "",
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.bucket !== "") {
            obj.bucket = message.bucket;
        }
        if (message.serviceaccountJson !== "") {
            obj.serviceaccountJson = message.serviceaccountJson;
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return exports.ExportDataRequest_GCSOutput.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportDataRequest_GCSOutput();
        message.bucket = (_a = object.bucket) !== null && _a !== void 0 ? _a : "";
        message.serviceaccountJson = (_b = object.serviceaccountJson) !== null && _b !== void 0 ? _b : "";
        message.path = (_c = object.path) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseExportDataResponse() {
    return { orgs: [] };
}
exports.ExportDataResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.orgs) {
            exports.DataOrg.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportDataResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.orgs.push(exports.DataOrg.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { orgs: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.orgs) ? object.orgs.map((e) => exports.DataOrg.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.orgs) === null || _a === void 0 ? void 0 : _a.length) {
            obj.orgs = message.orgs.map((e) => exports.DataOrg.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ExportDataResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExportDataResponse();
        message.orgs = ((_a = object.orgs) === null || _a === void 0 ? void 0 : _a.map((e) => exports.DataOrg.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListEventsRequest() {
    return {
        sequence: long_1.default.UZERO,
        limit: 0,
        asc: false,
        editorUserId: "",
        eventTypes: [],
        aggregateId: "",
        aggregateTypes: [],
        resourceOwner: "",
        creationDate: undefined,
        range: undefined,
        from: undefined,
    };
}
exports.ListEventsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (!message.sequence.equals(long_1.default.UZERO)) {
            writer.uint32(8).uint64(message.sequence.toString());
        }
        if (message.limit !== 0) {
            writer.uint32(16).uint32(message.limit);
        }
        if (message.asc !== false) {
            writer.uint32(24).bool(message.asc);
        }
        if (message.editorUserId !== "") {
            writer.uint32(34).string(message.editorUserId);
        }
        for (const v of message.eventTypes) {
            writer.uint32(42).string(v);
        }
        if (message.aggregateId !== "") {
            writer.uint32(50).string(message.aggregateId);
        }
        for (const v of message.aggregateTypes) {
            writer.uint32(58).string(v);
        }
        if (message.resourceOwner !== "") {
            writer.uint32(66).string(message.resourceOwner);
        }
        if (message.creationDate !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.creationDate), writer.uint32(74).fork()).join();
        }
        if (message.range !== undefined) {
            exports.ListEventsRequest_creationDateRange.encode(message.range, writer.uint32(82).fork()).join();
        }
        if (message.from !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.from), writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.sequence = long_1.default.fromString(reader.uint64().toString(), true);
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.limit = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.asc = reader.bool();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.editorUserId = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.eventTypes.push(reader.string());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.aggregateId = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.aggregateTypes.push(reader.string());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.resourceOwner = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.creationDate = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.range = exports.ListEventsRequest_creationDateRange.decode(reader, reader.uint32());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.from = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sequence: isSet(object.sequence) ? long_1.default.fromValue(object.sequence) : long_1.default.UZERO,
            limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
            asc: isSet(object.asc) ? globalThis.Boolean(object.asc) : false,
            editorUserId: isSet(object.editorUserId) ? globalThis.String(object.editorUserId) : "",
            eventTypes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.eventTypes)
                ? object.eventTypes.map((e) => globalThis.String(e))
                : [],
            aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
            aggregateTypes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.aggregateTypes)
                ? object.aggregateTypes.map((e) => globalThis.String(e))
                : [],
            resourceOwner: isSet(object.resourceOwner) ? globalThis.String(object.resourceOwner) : "",
            creationDate: isSet(object.creationDate) ? fromJsonTimestamp(object.creationDate) : undefined,
            range: isSet(object.range) ? exports.ListEventsRequest_creationDateRange.fromJSON(object.range) : undefined,
            from: isSet(object.from) ? fromJsonTimestamp(object.from) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (!message.sequence.equals(long_1.default.UZERO)) {
            obj.sequence = (message.sequence || long_1.default.UZERO).toString();
        }
        if (message.limit !== 0) {
            obj.limit = Math.round(message.limit);
        }
        if (message.asc !== false) {
            obj.asc = message.asc;
        }
        if (message.editorUserId !== "") {
            obj.editorUserId = message.editorUserId;
        }
        if ((_a = message.eventTypes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.eventTypes = message.eventTypes;
        }
        if (message.aggregateId !== "") {
            obj.aggregateId = message.aggregateId;
        }
        if ((_b = message.aggregateTypes) === null || _b === void 0 ? void 0 : _b.length) {
            obj.aggregateTypes = message.aggregateTypes;
        }
        if (message.resourceOwner !== "") {
            obj.resourceOwner = message.resourceOwner;
        }
        if (message.creationDate !== undefined) {
            obj.creationDate = message.creationDate.toISOString();
        }
        if (message.range !== undefined) {
            obj.range = exports.ListEventsRequest_creationDateRange.toJSON(message.range);
        }
        if (message.from !== undefined) {
            obj.from = message.from.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ListEventsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseListEventsRequest();
        message.sequence = (object.sequence !== undefined && object.sequence !== null)
            ? long_1.default.fromValue(object.sequence)
            : long_1.default.UZERO;
        message.limit = (_a = object.limit) !== null && _a !== void 0 ? _a : 0;
        message.asc = (_b = object.asc) !== null && _b !== void 0 ? _b : false;
        message.editorUserId = (_c = object.editorUserId) !== null && _c !== void 0 ? _c : "";
        message.eventTypes = ((_d = object.eventTypes) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.aggregateId = (_e = object.aggregateId) !== null && _e !== void 0 ? _e : "";
        message.aggregateTypes = ((_f = object.aggregateTypes) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.resourceOwner = (_g = object.resourceOwner) !== null && _g !== void 0 ? _g : "";
        message.creationDate = (_h = object.creationDate) !== null && _h !== void 0 ? _h : undefined;
        message.range = (object.range !== undefined && object.range !== null)
            ? exports.ListEventsRequest_creationDateRange.fromPartial(object.range)
            : undefined;
        message.from = (_j = object.from) !== null && _j !== void 0 ? _j : undefined;
        return message;
    },
};
function createBaseListEventsRequest_creationDateRange() {
    return { since: undefined, until: undefined };
}
exports.ListEventsRequest_creationDateRange = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.since !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.since), writer.uint32(10).fork()).join();
        }
        if (message.until !== undefined) {
            timestamp_js_1.Timestamp.encode(toTimestamp(message.until), writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsRequest_creationDateRange();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.since = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.until = fromTimestamp(timestamp_js_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            since: isSet(object.since) ? fromJsonTimestamp(object.since) : undefined,
            until: isSet(object.until) ? fromJsonTimestamp(object.until) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.since !== undefined) {
            obj.since = message.since.toISOString();
        }
        if (message.until !== undefined) {
            obj.until = message.until.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.ListEventsRequest_creationDateRange.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListEventsRequest_creationDateRange();
        message.since = (_a = object.since) !== null && _a !== void 0 ? _a : undefined;
        message.until = (_b = object.until) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseListEventsResponse() {
    return { events: [] };
}
exports.ListEventsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.events) {
            event_js_1.Event.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.events.push(event_js_1.Event.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { events: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => event_js_1.Event.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.events) === null || _a === void 0 ? void 0 : _a.length) {
            obj.events = message.events.map((e) => event_js_1.Event.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListEventsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListEventsResponse();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => event_js_1.Event.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListEventTypesRequest() {
    return {};
}
exports.ListEventTypesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventTypesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListEventTypesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListEventTypesRequest();
        return message;
    },
};
function createBaseListEventTypesResponse() {
    return { eventTypes: [] };
}
exports.ListEventTypesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.eventTypes) {
            event_js_1.EventType.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListEventTypesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.eventTypes.push(event_js_1.EventType.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            eventTypes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.eventTypes)
                ? object.eventTypes.map((e) => event_js_1.EventType.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.eventTypes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.eventTypes = message.eventTypes.map((e) => event_js_1.EventType.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListEventTypesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListEventTypesResponse();
        message.eventTypes = ((_a = object.eventTypes) === null || _a === void 0 ? void 0 : _a.map((e) => event_js_1.EventType.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListAggregateTypesRequest() {
    return {};
}
exports.ListAggregateTypesRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAggregateTypesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ListAggregateTypesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseListAggregateTypesRequest();
        return message;
    },
};
function createBaseListAggregateTypesResponse() {
    return { aggregateTypes: [] };
}
exports.ListAggregateTypesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.aggregateTypes) {
            event_js_1.AggregateType.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListAggregateTypesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.aggregateTypes.push(event_js_1.AggregateType.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregateTypes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.aggregateTypes)
                ? object.aggregateTypes.map((e) => event_js_1.AggregateType.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.aggregateTypes) === null || _a === void 0 ? void 0 : _a.length) {
            obj.aggregateTypes = message.aggregateTypes.map((e) => event_js_1.AggregateType.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListAggregateTypesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListAggregateTypesResponse();
        message.aggregateTypes = ((_a = object.aggregateTypes) === null || _a === void 0 ? void 0 : _a.map((e) => event_js_1.AggregateType.fromPartial(e))) || [];
        return message;
    },
};
function createBaseActivateFeatureLoginDefaultOrgRequest() {
    return {};
}
exports.ActivateFeatureLoginDefaultOrgRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateFeatureLoginDefaultOrgRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.ActivateFeatureLoginDefaultOrgRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseActivateFeatureLoginDefaultOrgRequest();
        return message;
    },
};
function createBaseActivateFeatureLoginDefaultOrgResponse() {
    return { details: undefined };
}
exports.ActivateFeatureLoginDefaultOrgResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseActivateFeatureLoginDefaultOrgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.ActivateFeatureLoginDefaultOrgResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseActivateFeatureLoginDefaultOrgResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseListMilestonesRequest() {
    return { query: undefined, sortingColumn: 0, queries: [] };
}
exports.ListMilestonesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== undefined) {
            object_js_1.ListQuery.encode(message.query, writer.uint32(10).fork()).join();
        }
        if (message.sortingColumn !== 0) {
            writer.uint32(16).int32(message.sortingColumn);
        }
        for (const v of message.queries) {
            milestone_js_1.MilestoneQuery.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMilestonesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = object_js_1.ListQuery.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sortingColumn = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.queries.push(milestone_js_1.MilestoneQuery.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? object_js_1.ListQuery.fromJSON(object.query) : undefined,
            sortingColumn: isSet(object.sortingColumn) ? (0, milestone_js_1.milestoneFieldNameFromJSON)(object.sortingColumn) : 0,
            queries: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.queries)
                ? object.queries.map((e) => milestone_js_1.MilestoneQuery.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.query !== undefined) {
            obj.query = object_js_1.ListQuery.toJSON(message.query);
        }
        if (message.sortingColumn !== 0) {
            obj.sortingColumn = (0, milestone_js_1.milestoneFieldNameToJSON)(message.sortingColumn);
        }
        if ((_a = message.queries) === null || _a === void 0 ? void 0 : _a.length) {
            obj.queries = message.queries.map((e) => milestone_js_1.MilestoneQuery.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListMilestonesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListMilestonesRequest();
        message.query = (object.query !== undefined && object.query !== null)
            ? object_js_1.ListQuery.fromPartial(object.query)
            : undefined;
        message.sortingColumn = (_a = object.sortingColumn) !== null && _a !== void 0 ? _a : 0;
        message.queries = ((_b = object.queries) === null || _b === void 0 ? void 0 : _b.map((e) => milestone_js_1.MilestoneQuery.fromPartial(e))) || [];
        return message;
    },
};
function createBaseListMilestonesResponse() {
    return { details: undefined, result: [] };
}
exports.ListMilestonesResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ListDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        for (const v of message.result) {
            milestone_js_1.Milestone.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListMilestonesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ListDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.result.push(milestone_js_1.Milestone.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ListDetails.fromJSON(object.details) : undefined,
            result: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.result) ? object.result.map((e) => milestone_js_1.Milestone.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ListDetails.toJSON(message.details);
        }
        if ((_a = message.result) === null || _a === void 0 ? void 0 : _a.length) {
            obj.result = message.result.map((e) => milestone_js_1.Milestone.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ListMilestonesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListMilestonesResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ListDetails.fromPartial(object.details)
            : undefined;
        message.result = ((_a = object.result) === null || _a === void 0 ? void 0 : _a.map((e) => milestone_js_1.Milestone.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSetRestrictionsRequest() {
    return { disallowPublicOrgRegistration: undefined, allowedLanguages: undefined };
}
exports.SetRestrictionsRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.disallowPublicOrgRegistration !== undefined) {
            writer.uint32(8).bool(message.disallowPublicOrgRegistration);
        }
        if (message.allowedLanguages !== undefined) {
            exports.SelectLanguages.encode(message.allowedLanguages, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRestrictionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.disallowPublicOrgRegistration = reader.bool();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.allowedLanguages = exports.SelectLanguages.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
                ? globalThis.Boolean(object.disallowPublicOrgRegistration)
                : undefined,
            allowedLanguages: isSet(object.allowedLanguages) ? exports.SelectLanguages.fromJSON(object.allowedLanguages) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.disallowPublicOrgRegistration !== undefined) {
            obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
        }
        if (message.allowedLanguages !== undefined) {
            obj.allowedLanguages = exports.SelectLanguages.toJSON(message.allowedLanguages);
        }
        return obj;
    },
    create(base) {
        return exports.SetRestrictionsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetRestrictionsRequest();
        message.disallowPublicOrgRegistration = (_a = object.disallowPublicOrgRegistration) !== null && _a !== void 0 ? _a : undefined;
        message.allowedLanguages = (object.allowedLanguages !== undefined && object.allowedLanguages !== null)
            ? exports.SelectLanguages.fromPartial(object.allowedLanguages)
            : undefined;
        return message;
    },
};
function createBaseSelectLanguages() {
    return { list: [] };
}
exports.SelectLanguages = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.list) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSelectLanguages();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.list.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { list: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.list) ? object.list.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.list) === null || _a === void 0 ? void 0 : _a.length) {
            obj.list = message.list;
        }
        return obj;
    },
    create(base) {
        return exports.SelectLanguages.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSelectLanguages();
        message.list = ((_a = object.list) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseSetRestrictionsResponse() {
    return { details: undefined };
}
exports.SetRestrictionsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetRestrictionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        return obj;
    },
    create(base) {
        return exports.SetRestrictionsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseSetRestrictionsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        return message;
    },
};
function createBaseGetRestrictionsRequest() {
    return {};
}
exports.GetRestrictionsRequest = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRestrictionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.GetRestrictionsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseGetRestrictionsRequest();
        return message;
    },
};
function createBaseGetRestrictionsResponse() {
    return { details: undefined, disallowPublicOrgRegistration: false, allowedLanguages: [] };
}
exports.GetRestrictionsResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.details !== undefined) {
            object_js_1.ObjectDetails.encode(message.details, writer.uint32(10).fork()).join();
        }
        if (message.disallowPublicOrgRegistration !== false) {
            writer.uint32(16).bool(message.disallowPublicOrgRegistration);
        }
        for (const v of message.allowedLanguages) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetRestrictionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.details = object_js_1.ObjectDetails.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.disallowPublicOrgRegistration = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.allowedLanguages.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            details: isSet(object.details) ? object_js_1.ObjectDetails.fromJSON(object.details) : undefined,
            disallowPublicOrgRegistration: isSet(object.disallowPublicOrgRegistration)
                ? globalThis.Boolean(object.disallowPublicOrgRegistration)
                : false,
            allowedLanguages: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.allowedLanguages)
                ? object.allowedLanguages.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.details !== undefined) {
            obj.details = object_js_1.ObjectDetails.toJSON(message.details);
        }
        if (message.disallowPublicOrgRegistration !== false) {
            obj.disallowPublicOrgRegistration = message.disallowPublicOrgRegistration;
        }
        if ((_a = message.allowedLanguages) === null || _a === void 0 ? void 0 : _a.length) {
            obj.allowedLanguages = message.allowedLanguages;
        }
        return obj;
    },
    create(base) {
        return exports.GetRestrictionsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetRestrictionsResponse();
        message.details = (object.details !== undefined && object.details !== null)
            ? object_js_1.ObjectDetails.fromPartial(object.details)
            : undefined;
        message.disallowPublicOrgRegistration = (_a = object.disallowPublicOrgRegistration) !== null && _a !== void 0 ? _a : false;
        message.allowedLanguages = ((_b = object.allowedLanguages) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
exports.AdminServiceDefinition = {
    name: "AdminService",
    fullName: "zitadel.admin.v1.AdminService",
    methods: {
        healthz: {
            name: "Healthz",
            requestType: exports.HealthzRequest,
            requestStream: false,
            responseType: exports.HealthzResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            210,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            7,
                            72,
                            101,
                            97,
                            108,
                            116,
                            104,
                            122,
                            26,
                            126,
                            84,
                            104,
                            101,
                            32,
                            104,
                            101,
                            97,
                            108,
                            116,
                            104,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            97,
                            108,
                            108,
                            111,
                            119,
                            115,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            116,
                            101,
                            114,
                            110,
                            97,
                            108,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            98,
                            101,
                            32,
                            105,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            65,
                            80,
                            73,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            105,
                            118,
                            101,
                            46,
                            32,
                            82,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            76,
                            69,
                            32,
                            105,
                            115,
                            32,
                            114,
                            117,
                            110,
                            110,
                            105,
                            110,
                            103,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            74,
                            36,
                            10,
                            7,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            18,
                            25,
                            10,
                            23,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            78,
                            79,
                            84,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            32,
                            121,
                            101,
                            116,
                        ]),
                    ],
                    578365826: [Buffer.from([10, 18, 8, 47, 104, 101, 97, 108, 116, 104, 122])],
                },
            },
        },
        getSupportedLanguages: {
            name: "GetSupportedLanguages",
            requestType: exports.GetSupportedLanguagesRequest,
            requestStream: false,
            responseType: exports.GetSupportedLanguagesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            124,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            19,
                            83,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            92,
                            84,
                            104,
                            101,
                            32,
                            115,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            97,
                            98,
                            98,
                            114,
                            101,
                            118,
                            105,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 108, 97, 110, 103, 117, 97, 103, 101, 115])],
                },
            },
        },
        getAllowedLanguages: {
            name: "GetAllowedLanguages",
            requestType: exports.GetAllowedLanguagesRequest,
            requestStream: false,
            responseType: exports.GetAllowedLanguagesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            1,
                            10,
                            12,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            17,
                            65,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            101,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            44,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            116,
                            104,
                            111,
                            115,
                            101,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                            32,
                            69,
                            108,
                            115,
                            101,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            115,
                            117,
                            112,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 101, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            97,
                            108,
                            108,
                            111,
                            119,
                            101,
                            100,
                        ]),
                    ],
                },
            },
        },
        setDefaultLanguage: {
            name: "SetDefaultLanguage",
            requestType: exports.SetDefaultLanguageRequest,
            requestStream: false,
            responseType: exports.SetDefaultLanguageResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            155,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            21,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            121,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            97,
                            108,
                            108,
                            98,
                            97,
                            99,
                            107,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            111,
                            109,
                            101,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            31,
                            26,
                            29,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultLanguage: {
            name: "GetDefaultLanguage",
            requestType: exports.GetDefaultLanguageRequest,
            requestStream: false,
            responseType: exports.GetDefaultLanguageResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            1,
                            10,
                            7,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            26,
                            125,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            97,
                            108,
                            108,
                            98,
                            97,
                            99,
                            107,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            111,
                            109,
                            101,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                        ]),
                    ],
                },
            },
        },
        getMyInstance: {
            name: "GetMyInstance",
            requestType: exports.GetMyInstanceRequest,
            requestStream: false,
            responseType: exports.GetMyInstanceResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            116,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            15,
                            71,
                            101,
                            116,
                            32,
                            77,
                            121,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            87,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            115,
                            117,
                            99,
                            104,
                            32,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            97,
                            109,
                            101,
                            44,
                            32,
                            118,
                            101,
                            114,
                            115,
                            105,
                            111,
                            110,
                            44,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([15, 18, 13, 47, 105, 110, 115, 116, 97, 110, 99, 101, 115, 47, 109, 101])],
                },
            },
        },
        listInstanceDomains: {
            name: "ListInstanceDomains",
            requestType: exports.ListInstanceDomainsRequest,
            requestStream: false,
            responseType: exports.ListInstanceDomainsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            160,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            26,
                            125,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            82,
                            76,
                            115,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            115,
                            32,
                            114,
                            117,
                            110,
                            110,
                            105,
                            110,
                            103,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 34, 16, 47, 100, 111, 109, 97, 105, 110, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        listInstanceTrustedDomains: {
            name: "ListInstanceTrustedDomains",
            requestType: exports.ListInstanceTrustedDomainsRequest,
            requestStream: false,
            responseType: exports.ListInstanceTrustedDomainsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            169,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            29,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            34,
                            24,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addInstanceTrustedDomain: {
            name: "AddInstanceTrustedDomain",
            requestType: exports.AddInstanceTrustedDomainRequest,
            requestStream: false,
            responseType: exports.AddInstanceTrustedDomainResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            170,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            30,
                            65,
                            100,
                            100,
                            32,
                            97,
                            110,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeInstanceTrustedDomain: {
            name: "RemoveInstanceTrustedDomain",
            requestType: exports.RemoveInstanceTrustedDomainRequest,
            requestStream: false,
            responseType: exports.RemoveInstanceTrustedDomainResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            173,
                            1,
                            10,
                            8,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            18,
                            33,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            110,
                            32,
                            73,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            84,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            26,
                            126,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            112,
                            117,
                            98,
                            108,
                            105,
                            99,
                            32,
                            104,
                            111,
                            115,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            116,
                            114,
                            117,
                            115,
                            116,
                            101,
                            100,
                            95,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            47,
                            123,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            125,
                        ]),
                    ],
                },
            },
        },
        listSecretGenerators: {
            name: "ListSecretGenerators",
            requestType: exports.ListSecretGeneratorsRequest,
            requestStream: false,
            responseType: exports.ListSecretGeneratorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            22,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            26,
                            176,
                            1,
                            76,
                            105,
                            115,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            69,
                            46,
                            103,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            111,
                            100,
                            101,
                            44,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            111,
                            100,
                            101,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        getSecretGenerator: {
            name: "GetSecretGenerator",
            requestType: exports.GetSecretGeneratorRequest,
            requestStream: false,
            responseType: exports.GetSecretGeneratorResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            175,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            26,
                            141,
                            1,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            82,
                            101,
                            115,
                            101,
                            116,
                            67,
                            111,
                            100,
                            101,
                            41,
                            46,
                            32,
                            65,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            36,
                            18,
                            34,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            95,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateSecretGenerator: {
            name: "UpdateSecretGenerator",
            requestType: exports.UpdateSecretGeneratorRequest,
            requestStream: false,
            responseType: exports.UpdateSecretGeneratorResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            195,
                            1,
                            10,
                            7,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            115,
                            18,
                            23,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            26,
                            158,
                            1,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            82,
                            101,
                            115,
                            101,
                            116,
                            67,
                            111,
                            100,
                            101,
                            41,
                            46,
                            32,
                            65,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            39,
                            58,
                            1,
                            42,
                            26,
                            34,
                            47,
                            115,
                            101,
                            99,
                            114,
                            101,
                            116,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            111,
                            114,
                            95,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getSMTPConfig: {
            name: "GetSMTPConfig",
            requestType: exports.GetSMTPConfigRequest,
            requestStream: false,
            responseType: exports.GetSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([7, 18, 5, 47, 115, 109, 116, 112])],
                },
            },
        },
        getSMTPConfigById: {
            name: "GetSMTPConfigById",
            requestType: exports.GetSMTPConfigByIdRequest,
            requestStream: false,
            responseType: exports.GetSMTPConfigByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        addSMTPConfig: {
            name: "AddSMTPConfig",
            requestType: exports.AddSMTPConfigRequest,
            requestStream: false,
            responseType: exports.AddSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([10, 58, 1, 42, 34, 5, 47, 115, 109, 116, 112])],
                },
            },
        },
        updateSMTPConfig: {
            name: "UpdateSMTPConfig",
            requestType: exports.UpdateSMTPConfigRequest,
            requestStream: false,
            responseType: exports.UpdateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 26, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        updateSMTPConfigPassword: {
            name: "UpdateSMTPConfigPassword",
            requestType: exports.UpdateSMTPConfigPasswordRequest,
            requestStream: false,
            responseType: exports.UpdateSMTPConfigPasswordResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            26,
                            19,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                        ]),
                    ],
                },
            },
        },
        activateSMTPConfig: {
            name: "ActivateSMTPConfig",
            requestType: exports.ActivateSMTPConfigRequest,
            requestStream: false,
            responseType: exports.ActivateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            68,
                            10,
                            12,
                            83,
                            77,
                            84,
                            80,
                            32,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            115,
                            18,
                            22,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            26,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            34,
                            20,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deactivateSMTPConfig: {
            name: "DeactivateSMTPConfig",
            requestType: exports.DeactivateSMTPConfigRequest,
            requestStream: false,
            responseType: exports.DeactivateSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeSMTPConfig: {
            name: "RemoveSMTPConfig",
            requestType: exports.RemoveSMTPConfigRequest,
            requestStream: false,
            responseType: exports.RemoveSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([12, 42, 10, 47, 115, 109, 116, 112, 47, 123, 105, 100, 125])],
                },
            },
        },
        testSMTPConfigById: {
            name: "TestSMTPConfigById",
            requestType: exports.TestSMTPConfigByIdRequest,
            requestStream: false,
            responseType: exports.TestSMTPConfigByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        testSMTPConfig: {
            name: "TestSMTPConfig",
            requestType: exports.TestSMTPConfigRequest,
            requestStream: false,
            responseType: exports.TestSMTPConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 116, 112, 47, 95, 116, 101, 115, 116])],
                },
            },
        },
        listSMTPConfigs: {
            name: "ListSMTPConfigs",
            requestType: exports.ListSMTPConfigsRequest,
            requestStream: false,
            responseType: exports.ListSMTPConfigsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [Buffer.from([16, 10, 12, 83, 77, 84, 80, 32, 67, 111, 110, 102, 105, 103, 115, 88, 1])],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 115, 109, 116, 112, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        listEmailProviders: {
            name: "ListEmailProviders",
            requestType: exports.ListEmailProvidersRequest,
            requestStream: false,
            responseType: exports.ListEmailProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            74,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            20,
                            76,
                            105,
                            115,
                            116,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            34,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 34, 14, 47, 101, 109, 97, 105, 108, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        getEmailProvider: {
            name: "GetEmailProvider",
            requestType: exports.GetEmailProviderRequest,
            requestStream: false,
            responseType: exports.GetEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            138,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            25,
                            71,
                            101,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            93,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([8, 18, 6, 47, 101, 109, 97, 105, 108])],
                },
            },
        },
        getEmailProviderById: {
            name: "GetEmailProviderById",
            requestType: exports.GetEmailProviderByIdRequest,
            requestStream: false,
            responseType: exports.GetEmailProviderByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            88,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            28,
                            71,
                            101,
                            116,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            105,
                            100,
                            26,
                            40,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([13, 18, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
                },
            },
        },
        addEmailProviderSMTP: {
            name: "AddEmailProviderSMTP",
            requestType: exports.AddEmailProviderSMTPRequest,
            requestStream: false,
            responseType: exports.AddEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            95,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            52,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            121,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 115, 109, 116, 112])],
                },
            },
        },
        updateEmailProviderSMTP: {
            name: "UpdateEmailProviderSMTP",
            requestType: exports.UpdateEmailProviderSMTPRequest,
            requestStream: false,
            responseType: exports.UpdateEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            160,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addEmailProviderHTTP: {
            name: "AddEmailProviderHTTP",
            requestType: exports.AddEmailProviderHTTPRequest,
            requestStream: false,
            responseType: exports.AddEmailProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            95,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            52,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            104,
                            105,
                            110,
                            103,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            32,
                            121,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 101, 109, 97, 105, 108, 47, 104, 116, 116, 112])],
                },
            },
        },
        updateEmailProviderHTTP: {
            name: "UpdateEmailProviderHTTP",
            requestType: exports.UpdateEmailProviderHTTPRequest,
            requestStream: false,
            responseType: exports.UpdateEmailProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            160,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            104,
                            116,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateEmailProviderSMTPPassword: {
            name: "UpdateEmailProviderSMTPPassword",
            requestType: exports.UpdateEmailProviderSMTPPasswordRequest,
            requestStream: false,
            responseType: exports.UpdateEmailProviderSMTPPasswordResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            20,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            26,
                            180,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            104,
                            111,
                            115,
                            116,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            97,
                            118,
                            101,
                            100,
                            46,
                            32,
                            83,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            119,
                            108,
                            121,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            84,
                            80,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            26,
                            25,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                        ]),
                    ],
                },
            },
        },
        activateEmailProvider: {
            name: "ActivateEmailProvider",
            requestType: exports.ActivateEmailProviderRequest,
            requestStream: false,
            responseType: exports.ActivateEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            70,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            27,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deactivateEmailProvider: {
            name: "DeactivateEmailProvider",
            requestType: exports.DeactivateEmailProviderRequest,
            requestStream: false,
            responseType: exports.DeactivateEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            194,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            25,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            148,
                            1,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeEmailProvider: {
            name: "RemoveEmailProvider",
            requestType: exports.RemoveEmailProviderRequest,
            requestStream: false,
            responseType: exports.RemoveEmailProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            137,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            96,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            98,
                            101,
                            32,
                            97,
                            119,
                            97,
                            114,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            103,
                            101,
                            116,
                            32,
                            97,
                            110,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([13, 42, 11, 47, 101, 109, 97, 105, 108, 47, 123, 105, 100, 125])],
                },
            },
        },
        testEmailProviderSMTPById: {
            name: "TestEmailProviderSMTPById",
            requestType: exports.TestEmailProviderSMTPByIdRequest,
            requestStream: false,
            responseType: exports.TestEmailProviderSMTPByIdResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            181,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            84,
                            101,
                            115,
                            116,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            136,
                            1,
                            84,
                            101,
                            115,
                            116,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            115,
                            117,
                            108,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        testEmailProviderSMTP: {
            name: "TestEmailProviderSMTP",
            requestType: exports.TestEmailProviderSMTPRequest,
            requestStream: false,
            responseType: exports.TestEmailProviderSMTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            1,
                            10,
                            14,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            84,
                            101,
                            115,
                            116,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            115,
                            84,
                            101,
                            115,
                            116,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            84,
                            80,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            105,
                            110,
                            102,
                            111,
                            114,
                            109,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            98,
                            111,
                            117,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            115,
                            117,
                            108,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            115,
                            109,
                            116,
                            112,
                            47,
                            95,
                            116,
                            101,
                            115,
                            116,
                        ]),
                    ],
                },
            },
        },
        listSMSProviders: {
            name: "ListSMSProviders",
            requestType: exports.ListSMSProvidersRequest,
            requestStream: false,
            responseType: exports.ListSMSProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            79,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            18,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            43,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 115, 109, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        getSMSProvider: {
            name: "GetSMSProvider",
            requestType: exports.GetSMSProviderRequest,
            requestStream: false,
            responseType: exports.GetSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            72,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            16,
                            71,
                            101,
                            116,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            38,
                            71,
                            101,
                            116,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([11, 18, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        addSMSProviderTwilio: {
            name: "AddSMSProviderTwilio",
            requestType: exports.AddSMSProviderTwilioRequest,
            requestStream: false,
            responseType: exports.AddSMSProviderTwilioResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            154,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            113,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 115, 109, 115, 47, 116, 119, 105, 108, 105, 111])],
                },
            },
        },
        updateSMSProviderTwilio: {
            name: "UpdateSMSProviderTwilio",
            requestType: exports.UpdateSMSProviderTwilioRequest,
            requestStream: false,
            responseType: exports.UpdateSMSProviderTwilioResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            174,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            26,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            129,
                            1,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                            32,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            115,
                            109,
                            115,
                            47,
                            116,
                            119,
                            105,
                            108,
                            105,
                            111,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        updateSMSProviderTwilioToken: {
            name: "UpdateSMSProviderTwilioToken",
            requestType: exports.UpdateSMSProviderTwilioTokenRequest,
            requestStream: false,
            responseType: exports.UpdateSMSProviderTwilioTokenResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            106,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            26,
                            56,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            84,
                            119,
                            105,
                            108,
                            105,
                            111,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            115,
                            109,
                            115,
                            47,
                            116,
                            119,
                            105,
                            108,
                            105,
                            111,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            116,
                            111,
                            107,
                            101,
                            110,
                        ]),
                    ],
                },
            },
        },
        addSMSProviderHTTP: {
            name: "AddSMSProviderHTTP",
            requestType: exports.AddSMSProviderHTTPRequest,
            requestStream: false,
            responseType: exports.AddSMSProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            150,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            65,
                            100,
                            100,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            111,
                            67,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 115, 109, 115, 47, 104, 116, 116, 112])],
                },
            },
        },
        updateSMSProviderHTTP: {
            name: "UpdateSMSProviderHTTP",
            requestType: exports.UpdateSMSProviderHTTPRequest,
            requestStream: false,
            responseType: exports.UpdateSMSProviderHTTPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            168,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            24,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            126,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            72,
                            84,
                            84,
                            80,
                            46,
                            32,
                            65,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 109, 115, 47, 104, 116, 116, 112, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        activateSMSProvider: {
            name: "ActivateSMSProvider",
            requestType: exports.ActivateSMSProviderRequest,
            requestStream: false,
            responseType: exports.ActivateSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            146,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            21,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            107,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            97,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            34,
                            19,
                            47,
                            115,
                            109,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deactivateSMSProvider: {
            name: "DeactivateSMSProvider",
            requestType: exports.DeactivateSMSProviderRequest,
            requestStream: false,
            responseType: exports.DeactivateSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            254,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            23,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            212,
                            1,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            102,
                            116,
                            101,
                            114,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            105,
                            116,
                            32,
                            119,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            115,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            103,
                            101,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            116,
                            32,
                            97,
                            108,
                            108,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            115,
                            109,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeSMSProvider: {
            name: "RemoveSMSProvider",
            requestType: exports.RemoveSMSProviderRequest,
            requestStream: false,
            responseType: exports.RemoveSMSProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            12,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            83,
                            77,
                            83,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            125,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            119,
                            97,
                            115,
                            32,
                            115,
                            116,
                            105,
                            108,
                            108,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            99,
                            101,
                            105,
                            118,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            110,
                            121,
                            109,
                            111,
                            114,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([11, 42, 9, 47, 115, 109, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        getOIDCSettings: {
            name: "GetOIDCSettings",
            requestType: exports.GetOIDCSettingsRequest,
            requestStream: false,
            responseType: exports.GetOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            102,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            71,
                            101,
                            116,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            71,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([16, 18, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99])],
                },
            },
        },
        addOIDCSettings: {
            name: "AddOIDCSettings",
            requestType: exports.AddOIDCSettingsRequest,
            requestStream: false,
            responseType: exports.AddOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            188,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            156,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            110,
                            101,
                            119,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            99,
                            108,
                            105,
                            101,
                            110,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 34, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
                    ],
                },
            },
        },
        updateOIDCSettings: {
            name: "UpdateOIDCSettings",
            requestType: exports.UpdateOIDCSettingsRequest,
            requestStream: false,
            responseType: exports.UpdateOIDCSettingsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            193,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            17,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            161,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            102,
                            101,
                            116,
                            105,
                            109,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            115,
                            32,
                            105,
                            110,
                            32,
                            79,
                            73,
                            68,
                            67,
                            46,
                            32,
                            84,
                            104,
                            101,
                            115,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            99,
                            108,
                            105,
                            101,
                            110,
                            116,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 115, 101, 116, 116, 105, 110, 103, 115, 47, 111, 105, 100, 99]),
                    ],
                },
            },
        },
        getFileSystemNotificationProvider: {
            name: "GetFileSystemNotificationProvider",
            requestType: exports.GetFileSystemNotificationProviderRequest,
            requestStream: false,
            responseType: exports.GetFileSystemNotificationProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            224,
                            1,
                            10,
                            22,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            70,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            26,
                            159,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            112,
                            117,
                            114,
                            112,
                            111,
                            115,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            29,
                            18,
                            27,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            47,
                            102,
                            105,
                            108,
                            101,
                        ]),
                    ],
                },
            },
        },
        getLogNotificationProvider: {
            name: "GetLogNotificationProvider",
            requestType: exports.GetLogNotificationProviderRequest,
            requestStream: false,
            responseType: exports.GetLogNotificationProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            204,
                            1,
                            10,
                            22,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            76,
                            111,
                            103,
                            26,
                            146,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            111,
                            103,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            112,
                            117,
                            114,
                            112,
                            111,
                            115,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            18,
                            26,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            47,
                            108,
                            111,
                            103,
                        ]),
                    ],
                },
            },
        },
        getSecurityPolicy: {
            name: "GetSecurityPolicy",
            requestType: exports.GetSecurityPolicyRequest,
            requestStream: false,
            responseType: exports.GetSecurityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            89,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            54,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            20,
                            18,
                            18,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        setSecurityPolicy: {
            name: "SetSecurityPolicy",
            requestType: exports.SetSecurityPolicyRequest,
            requestStream: false,
            responseType: exports.SetSecurityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            85,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            83,
                            101,
                            116,
                            32,
                            83,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            50,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        getOrgByID: {
            name: "GetOrgByID",
            requestType: exports.GetOrgByIDRequest,
            requestStream: false,
            responseType: exports.GetOrgByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            172,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            66,
                            121,
                            32,
                            73,
                            68,
                            26,
                            101,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            115,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            28,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            21,
                            10,
                            19,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            32,
                            111,
                            114,
                            103,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 111, 114, 103, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        isOrgUnique: {
            name: "IsOrgUnique",
            requestType: exports.IsOrgUniqueRequest,
            requestStream: false,
            responseType: exports.IsOrgUniqueResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            182,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            73,
                            115,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            85,
                            110,
                            105,
                            113,
                            117,
                            101,
                            26,
                            77,
                            67,
                            104,
                            101,
                            99,
                            107,
                            115,
                            32,
                            105,
                            102,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            101,
                            100,
                            32,
                            112,
                            97,
                            114,
                            97,
                            109,
                            101,
                            116,
                            101,
                            114,
                            115,
                            32,
                            97,
                            108,
                            114,
                            101,
                            97,
                            100,
                            121,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            111,
                            114,
                            32,
                            110,
                            111,
                            116,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            74,
                            36,
                            10,
                            7,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            18,
                            25,
                            10,
                            23,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            78,
                            79,
                            84,
                            32,
                            115,
                            116,
                            97,
                            114,
                            116,
                            101,
                            100,
                            32,
                            121,
                            101,
                            116,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 111, 114, 103, 115, 47, 95, 105, 115, 95, 117, 110, 105, 113, 117, 101]),
                    ],
                },
            },
        },
        setDefaultOrg: {
            name: "SetDefaultOrg",
            requestType: exports.SetDefaultOrgRequest,
            requestStream: false,
            responseType: exports.SetDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            222,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            24,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            168,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            109,
                            44,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            26,
                            22,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultOrg: {
            name: "GetDefaultOrg",
            requestType: exports.GetDefaultOrgRequest,
            requestStream: false,
            responseType: exports.GetDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            1,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            24,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            167,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            109,
                            44,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([15, 18, 13, 47, 111, 114, 103, 115, 47, 100, 101, 102, 97, 117, 108, 116])],
                },
            },
        },
        listOrgs: {
            name: "ListOrgs",
            requestType: exports.ListOrgsRequest,
            requestStream: false,
            responseType: exports.ListOrgsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            19,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            113,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            97,
                            112,
                            112,
                            108,
                            105,
                            101,
                            100,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            110,
                            32,
                            65,
                            78,
                            68,
                            32,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            49,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            42,
                            10,
                            40,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            74,
                            56,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            49,
                            10,
                            18,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 111, 114, 103, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        setUpOrg: {
            name: "SetUpOrg",
            requestType: exports.SetUpOrgRequest,
            requestStream: false,
            responseType: exports.SetUpOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            177,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            18,
                            83,
                            101,
                            116,
                            117,
                            112,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            142,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            118,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            32,
                            73,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            103,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            32,
                            79,
                            82,
                            71,
                            95,
                            79,
                            87,
                            78,
                            69,
                            82,
                            46,
                            74,
                            64,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            57,
                            10,
                            55,
                            111,
                            114,
                            103,
                            44,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            50,
                            10,
                            19,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            111,
                            114,
                            103,
                            32,
                            111,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 111, 114, 103, 115, 47, 95, 115, 101, 116, 117, 112])],
                },
            },
        },
        removeOrg: {
            name: "RemoveOrg",
            requestType: exports.RemoveOrgRequest,
            requestStream: false,
            responseType: exports.RemoveOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            145,
                            2,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            19,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            148,
                            1,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            108,
                            108,
                            32,
                            105,
                            116,
                            115,
                            32,
                            114,
                            101,
                            115,
                            111,
                            117,
                            114,
                            99,
                            101,
                            115,
                            32,
                            40,
                            85,
                            115,
                            101,
                            114,
                            115,
                            44,
                            32,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            115,
                            44,
                            32,
                            71,
                            114,
                            97,
                            110,
                            116,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            110,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            41,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            46,
                            74,
                            33,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            26,
                            10,
                            24,
                            111,
                            114,
                            103,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            108,
                            121,
                            74,
                            49,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            42,
                            10,
                            11,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            111,
                            114,
                            103,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 42, 14, 47, 111, 114, 103, 115, 47, 123, 111, 114, 103, 95, 105, 100, 125])],
                },
            },
        },
        getIDPByID: {
            name: "GetIDPByID",
            requestType: exports.GetIDPByIDRequest,
            requestStream: false,
            responseType: exports.GetIDPByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            237,
                            1,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            45,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            71,
                            101,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            32,
                            98,
                            121,
                            32,
                            73,
                            68,
                            26,
                            90,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            98,
                            121,
                            32,
                            105,
                            116,
                            115,
                            32,
                            73,
                            68,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            74,
                            18,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            11,
                            10,
                            9,
                            73,
                            68,
                            80,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 18, 10, 47, 105, 100, 112, 115, 47, 123, 105, 100, 125])],
                },
            },
        },
        listIDPs: {
            name: "ListIDPs",
            requestType: exports.ListIDPsRequest,
            requestStream: false,
            responseType: exports.ListIDPsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            43,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            74,
                            19,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            12,
                            10,
                            10,
                            105,
                            100,
                            112,
                            115,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            74,
                            51,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            44,
                            10,
                            13,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 105, 97, 109, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([18, 58, 1, 42, 34, 13, 47, 105, 100, 112, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        addOIDCIDP: {
            name: "AddOIDCIDP",
            requestType: exports.AddOIDCIDPRequest,
            requestStream: false,
            responseType: exports.AddOIDCIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            165,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            44,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            65,
                            100,
                            100,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            144,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            105,
                            97,
                            110,
                            116,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 111, 105, 100, 99])],
                },
            },
        },
        addJWTIDP: {
            name: "AddJWTIDP",
            requestType: exports.AddJWTIDPRequest,
            requestStream: false,
            responseType: exports.AddJWTIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            194,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            43,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            65,
                            100,
                            100,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            174,
                            2,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            101,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            74,
                            83,
                            79,
                            78,
                            32,
                            87,
                            101,
                            98,
                            32,
                            84,
                            111,
                            107,
                            101,
                            110,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            74,
                            87,
                            84,
                            32,
                            73,
                            68,
                            80,
                            41,
                            32,
                            103,
                            105,
                            118,
                            101,
                            115,
                            32,
                            121,
                            111,
                            117,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            32,
                            97,
                            110,
                            32,
                            40,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            41,
                            32,
                            74,
                            87,
                            84,
                            32,
                            97,
                            115,
                            32,
                            97,
                            32,
                            102,
                            101,
                            100,
                            101,
                            114,
                            97,
                            116,
                            101,
                            100,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            46,
                            32,
                            89,
                            111,
                            117,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            32,
                            97,
                            110,
                            32,
                            101,
                            110,
                            100,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            99,
                            97,
                            110,
                            32,
                            103,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            74,
                            87,
                            84,
                            32,
                            116,
                            111,
                            107,
                            101,
                            110,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([14, 58, 1, 42, 34, 9, 47, 105, 100, 112, 115, 47, 106, 119, 116])],
                },
            },
        },
        updateIDP: {
            name: "UpdateIDP",
            requestType: exports.UpdateIDPRequest,
            requestStream: false,
            responseType: exports.UpdateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            114,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            73,
                            68,
                            80,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            121,
                            111,
                            117,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            110,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            44,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([19, 58, 1, 42, 26, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125]),
                    ],
                },
            },
        },
        deactivateIDP: {
            name: "DeactivateIDP",
            requestType: exports.DeactivateIDPRequest,
            requestStream: false,
            responseType: exports.DeactivateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            157,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            68,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            250,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            105,
                            110,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            109,
                            105,
                            103,
                            104,
                            116,
                            32,
                            99,
                            97,
                            117,
                            115,
                            101,
                            32,
                            116,
                            114,
                            111,
                            117,
                            98,
                            108,
                            101,
                            115,
                            32,
                            105,
                            102,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            116,
                            104,
                            111,
                            100,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            105,
                            100,
                            112,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            74,
                            62,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            55,
                            10,
                            24,
                            85,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            34,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            95,
                            100,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        reactivateIDP: {
            name: "ReactivateIDP",
            requestType: exports.ReactivateIDPRequest,
            requestStream: false,
            responseType: exports.ReactivateIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            201,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            82,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            166,
                            1,
                            83,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            101,
                            32,
                            105,
                            110,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            97,
                            103,
                            97,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            74,
                            24,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            17,
                            10,
                            15,
                            105,
                            100,
                            112,
                            32,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            100,
                            74,
                            62,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            55,
                            10,
                            24,
                            117,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            34,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            95,
                            114,
                            101,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeIDP: {
            name: "RemoveIDP",
            requestType: exports.RemoveIDPRequest,
            requestStream: false,
            responseType: exports.RemoveIDPResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            131,
                            3,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            236,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            112,
                            101,
                            114,
                            109,
                            97,
                            110,
                            101,
                            110,
                            116,
                            108,
                            121,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            108,
                            105,
                            110,
                            107,
                            115,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            103,
                            105,
                            118,
                            101,
                            110,
                            32,
                            73,
                            68,
                            80,
                            32,
                            111,
                            110,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            100,
                            101,
                            108,
                            101,
                            116,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            119,
                            101,
                            108,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            121,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            108,
                            111,
                            103,
                            32,
                            105,
                            110,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            116,
                            104,
                            101,
                            105,
                            114,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            105,
                            116,
                            32,
                            109,
                            105,
                            103,
                            104,
                            116,
                            32,
                            99,
                            97,
                            117,
                            115,
                            101,
                            32,
                            112,
                            114,
                            111,
                            98,
                            108,
                            101,
                            109,
                            115,
                            46,
                            74,
                            20,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            13,
                            10,
                            11,
                            105,
                            100,
                            112,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            74,
                            58,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            51,
                            10,
                            20,
                            117,
                            110,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            68,
                            80,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 42, 14, 47, 105, 100, 112, 115, 47, 123, 105, 100, 112, 95, 105, 100, 125])],
                },
            },
        },
        updateIDPOIDCConfig: {
            name: "UpdateIDPOIDCConfig",
            requestType: exports.UpdateIDPOIDCConfigRequest,
            requestStream: false,
            responseType: exports.UpdateIDPOIDCConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            47,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            143,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            79,
                            73,
                            68,
                            67,
                            45,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            28,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            21,
                            10,
                            19,
                            79,
                            73,
                            68,
                            67,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            57,
                            18,
                            50,
                            10,
                            19,
                            112,
                            114,
                            101,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            26,
                            26,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            111,
                            105,
                            100,
                            99,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
        updateIDPJWTConfig: {
            name: "UpdateIDPJWTConfig",
            requestType: exports.UpdateIDPJWTConfigRequest,
            requestStream: false,
            responseType: exports.UpdateIDPJWTConfigResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            2,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            46,
                            68,
                            101,
                            112,
                            114,
                            101,
                            99,
                            97,
                            116,
                            101,
                            100,
                            58,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            40,
                            73,
                            68,
                            80,
                            41,
                            26,
                            142,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            74,
                            87,
                            84,
                            45,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            46,
                            32,
                            65,
                            108,
                            108,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            97,
                            32,
                            102,
                            105,
                            101,
                            108,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            27,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            20,
                            10,
                            18,
                            74,
                            87,
                            84,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            74,
                            57,
                            10,
                            3,
                            52,
                            48,
                            57,
                            18,
                            50,
                            10,
                            19,
                            112,
                            114,
                            101,
                            99,
                            111,
                            110,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            26,
                            25,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                            47,
                            106,
                            119,
                            116,
                            95,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                        ]),
                    ],
                },
            },
        },
        listProviders: {
            name: "ListProviders",
            requestType: exports.ListProvidersRequest,
            requestStream: false,
            responseType: exports.ListProvidersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            168,
                            1,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            23,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            40,
                            115,
                            111,
                            99,
                            105,
                            97,
                            108,
                            47,
                            101,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            101,
                            46,
                            103,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            44,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            34,
                            23,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        getProviderByID: {
            name: "GetProviderByID",
            requestType: exports.GetProviderByIDRequest,
            requestStream: false,
            responseType: exports.GetProviderByIDResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            49,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            27,
                            71,
                            101,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            66,
                            121,
                            32,
                            73,
                            68,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 111, 114, 103, 46, 105, 100, 112, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            22,
                            18,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGenericOAuthProvider: {
            name: "AddGenericOAuthProvider",
            requestType: exports.AddGenericOAuthProviderRequest,
            requestStream: false,
            responseType: exports.AddGenericOAuthProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            57,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            35,
                            65,
                            100,
                            100,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            65,
                            117,
                            116,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 111, 97, 117, 116, 104])],
                },
            },
        },
        updateGenericOAuthProvider: {
            name: "UpdateGenericOAuthProvider",
            requestType: exports.UpdateGenericOAuthProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGenericOAuthProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            60,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            38,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            65,
                            117,
                            116,
                            104,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            111,
                            97,
                            117,
                            116,
                            104,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGenericOIDCProvider: {
            name: "AddGenericOIDCProvider",
            requestType: exports.AddGenericOIDCProviderRequest,
            requestStream: false,
            responseType: exports.AddGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            56,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            34,
                            65,
                            100,
                            100,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            34,
                            18,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                        ]),
                    ],
                },
            },
        },
        updateGenericOIDCProvider: {
            name: "UpdateGenericOIDCProvider",
            requestType: exports.UpdateGenericOIDCProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            59,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            37,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            28,
                            58,
                            1,
                            42,
                            26,
                            23,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        migrateGenericOIDCProvider: {
            name: "MigrateGenericOIDCProvider",
            requestType: exports.MigrateGenericOIDCProviderRequest,
            requestStream: false,
            responseType: exports.MigrateGenericOIDCProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            60,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            38,
                            77,
                            105,
                            103,
                            114,
                            97,
                            116,
                            101,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            32,
                            79,
                            73,
                            68,
                            67,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            37,
                            58,
                            1,
                            42,
                            34,
                            32,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            111,
                            105,
                            100,
                            99,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            109,
                            105,
                            103,
                            114,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        addJWTProvider: {
            name: "AddJWTProvider",
            requestType: exports.AddJWTProviderRequest,
            requestStream: false,
            responseType: exports.AddJWTProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            47,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            106,
                            119,
                            116,
                        ]),
                    ],
                },
            },
        },
        updateJWTProvider: {
            name: "UpdateJWTProvider",
            requestType: exports.UpdateJWTProviderRequest,
            requestStream: false,
            responseType: exports.UpdateJWTProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            74,
                            87,
                            84,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            101,
                            110,
                            101,
                            114,
                            105,
                            99,
                            95,
                            106,
                            119,
                            116,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addAzureADProvider: {
            name: "AddAzureADProvider",
            requestType: exports.AddAzureADProviderRequest,
            requestStream: false,
            responseType: exports.AddAzureADProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            65,
                            100,
                            100,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 122, 117, 114, 101])],
                },
            },
        },
        updateAzureADProvider: {
            name: "UpdateAzureADProvider",
            requestType: exports.UpdateAzureADProviderRequest,
            requestStream: false,
            responseType: exports.UpdateAzureADProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            54,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            65,
                            122,
                            117,
                            114,
                            101,
                            65,
                            68,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            97,
                            122,
                            117,
                            114,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGitHubProvider: {
            name: "AddGitHubProvider",
            requestType: exports.AddGitHubProviderRequest,
            requestStream: false,
            responseType: exports.AddGitHubProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98])],
                },
            },
        },
        updateGitHubProvider: {
            name: "UpdateGitHubProvider",
            requestType: exports.UpdateGitHubProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGitHubProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            104,
                            117,
                            98,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGitHubEnterpriseServerProvider: {
            name: "AddGitHubEnterpriseServerProvider",
            requestType: exports.AddGitHubEnterpriseServerProviderRequest,
            requestStream: false,
            responseType: exports.AddGitHubEnterpriseServerProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            61,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            39,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            69,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 34, 15, 47, 105, 100, 112, 115, 47, 103, 105, 116, 104, 117, 98, 95, 101, 115]),
                    ],
                },
            },
        },
        updateGitHubEnterpriseServerProvider: {
            name: "UpdateGitHubEnterpriseServerProvider",
            requestType: exports.UpdateGitHubEnterpriseServerProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGitHubEnterpriseServerProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            64,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            42,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            72,
                            117,
                            98,
                            32,
                            69,
                            110,
                            116,
                            101,
                            114,
                            112,
                            114,
                            105,
                            115,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            26,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            104,
                            117,
                            98,
                            95,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGitLabProvider: {
            name: "AddGitLabProvider",
            requestType: exports.AddGitLabProviderRequest,
            requestStream: false,
            responseType: exports.AddGitLabProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 105, 116, 108, 97, 98])],
                },
            },
        },
        updateGitLabProvider: {
            name: "UpdateGitLabProvider",
            requestType: exports.UpdateGitLabProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGitLabProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            34,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGitLabSelfHostedProvider: {
            name: "AddGitLabSelfHostedProvider",
            requestType: exports.AddGitLabSelfHostedProviderRequest,
            requestStream: false,
            responseType: exports.AddGitLabSelfHostedProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            59,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            37,
                            65,
                            100,
                            100,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            83,
                            101,
                            108,
                            102,
                            104,
                            111,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            29,
                            58,
                            1,
                            42,
                            34,
                            24,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            95,
                            115,
                            101,
                            108,
                            102,
                            95,
                            104,
                            111,
                            115,
                            116,
                            101,
                            100,
                        ]),
                    ],
                },
            },
        },
        updateGitLabSelfHostedProvider: {
            name: "UpdateGitLabSelfHostedProvider",
            requestType: exports.UpdateGitLabSelfHostedProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGitLabSelfHostedProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            62,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            40,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            105,
                            116,
                            76,
                            97,
                            98,
                            32,
                            83,
                            101,
                            108,
                            102,
                            104,
                            111,
                            115,
                            116,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            34,
                            29,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            105,
                            116,
                            108,
                            97,
                            98,
                            95,
                            115,
                            101,
                            108,
                            102,
                            95,
                            104,
                            111,
                            115,
                            116,
                            101,
                            100,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addGoogleProvider: {
            name: "AddGoogleProvider",
            requestType: exports.AddGoogleProviderRequest,
            requestStream: false,
            responseType: exports.AddGoogleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            50,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([17, 58, 1, 42, 34, 12, 47, 105, 100, 112, 115, 47, 103, 111, 111, 103, 108, 101])],
                },
            },
        },
        updateGoogleProvider: {
            name: "UpdateGoogleProvider",
            requestType: exports.UpdateGoogleProviderRequest,
            requestStream: false,
            responseType: exports.UpdateGoogleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            53,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            71,
                            111,
                            111,
                            103,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            103,
                            111,
                            111,
                            103,
                            108,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addLDAPProvider: {
            name: "AddLDAPProvider",
            requestType: exports.AddLDAPProviderRequest,
            requestStream: false,
            responseType: exports.AddLDAPProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            48,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            26,
                            65,
                            100,
                            100,
                            32,
                            76,
                            68,
                            65,
                            80,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112])],
                },
            },
        },
        updateLDAPProvider: {
            name: "UpdateLDAPProvider",
            requestType: exports.UpdateLDAPProviderRequest,
            requestStream: false,
            responseType: exports.UpdateLDAPProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            68,
                            65,
                            80,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 111, 114, 103, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 108, 100, 97, 112, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        addAppleProvider: {
            name: "AddAppleProvider",
            requestType: exports.AddAppleProviderRequest,
            requestStream: false,
            responseType: exports.AddAppleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            49,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            27,
                            65,
                            100,
                            100,
                            32,
                            65,
                            112,
                            112,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([16, 58, 1, 42, 34, 11, 47, 105, 100, 112, 115, 47, 97, 112, 112, 108, 101])],
                },
            },
        },
        updateAppleProvider: {
            name: "UpdateAppleProvider",
            requestType: exports.UpdateAppleProviderRequest,
            requestStream: false,
            responseType: exports.UpdateAppleProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            52,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            30,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            65,
                            112,
                            112,
                            108,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            97,
                            112,
                            112,
                            108,
                            101,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        addSAMLProvider: {
            name: "AddSAMLProvider",
            requestType: exports.AddSAMLProviderRequest,
            requestStream: false,
            responseType: exports.AddSAMLProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            48,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            26,
                            65,
                            100,
                            100,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([15, 58, 1, 42, 34, 10, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108])],
                },
            },
        },
        updateSAMLProvider: {
            name: "UpdateSAMLProvider",
            requestType: exports.UpdateSAMLProviderRequest,
            requestStream: false,
            responseType: exports.UpdateSAMLProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            51,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            29,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 105, 100, 112, 115, 47, 115, 97, 109, 108, 47, 123, 105, 100, 125]),
                    ],
                },
            },
        },
        regenerateSAMLProviderCertificate: {
            name: "RegenerateSAMLProviderCertificate",
            requestType: exports.RegenerateSAMLProviderCertificateRequest,
            requestStream: false,
            responseType: exports.RegenerateSAMLProviderCertificateResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            67,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            45,
                            82,
                            101,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            32,
                            83,
                            65,
                            77,
                            76,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            67,
                            101,
                            114,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            101,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            42,
                            58,
                            1,
                            42,
                            34,
                            37,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            115,
                            97,
                            109,
                            108,
                            47,
                            123,
                            105,
                            100,
                            125,
                            47,
                            95,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            116,
                            101,
                            95,
                            99,
                            101,
                            114,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        deleteProvider: {
            name: "DeleteProvider",
            requestType: exports.DeleteProviderRequest,
            requestStream: false,
            responseType: exports.DeleteProviderResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            46,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            24,
                            68,
                            101,
                            108,
                            101,
                            116,
                            101,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 105, 97, 109, 46, 105, 100, 112, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            116,
                            101,
                            109,
                            112,
                            108,
                            97,
                            116,
                            101,
                            115,
                            47,
                            123,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        getOrgIAMPolicy: {
            name: "GetOrgIAMPolicy",
            requestType: exports.GetOrgIAMPolicyRequest,
            requestStream: false,
            responseType: exports.GetOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            82,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            31,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 111, 114, 103, 105, 97, 109]),
                    ],
                },
            },
        },
        updateOrgIAMPolicy: {
            name: "UpdateOrgIAMPolicy",
            requestType: exports.UpdateOrgIAMPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            88,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            34,
                            85,
                            115,
                            101,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        getCustomOrgIAMPolicy: {
            name: "GetCustomOrgIAMPolicy",
            requestType: exports.GetCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: exports.GetCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            98,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            47,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        addCustomOrgIAMPolicy: {
            name: "AddCustomOrgIAMPolicy",
            requestType: exports.AddCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: exports.AddCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            106,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            48,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        updateCustomOrgIAMPolicy: {
            name: "UpdateCustomOrgIAMPolicy",
            requestType: exports.UpdateCustomOrgIAMPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateCustomOrgIAMPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            109,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            79,
                            114,
                            103,
                            32,
                            73,
                            65,
                            77,
                            32,
                            80,
                            111,
                            108,
                            105,
                            99,
                            121,
                            26,
                            48,
                            85,
                            115,
                            101,
                            32,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            26,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        resetCustomOrgIAMPolicyToDefault: {
            name: "ResetCustomOrgIAMPolicyToDefault",
            requestType: exports.ResetCustomOrgIAMPolicyToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomOrgIAMPolicyToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            119,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            37,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            49,
                            85,
                            115,
                            101,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            101,
                            97,
                            100,
                            88,
                            1,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            32,
                            42,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            111,
                            114,
                            103,
                            105,
                            97,
                            109,
                        ]),
                    ],
                },
            },
        },
        getDomainPolicy: {
            name: "GetDomainPolicy",
            requestType: exports.GetDomainPolicyRequest,
            requestStream: false,
            responseType: exports.GetDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            129,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            19,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            174,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([18, 18, 16, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 100, 111, 109, 97, 105, 110]),
                    ],
                },
            },
        },
        updateDomainPolicy: {
            name: "UpdateDomainPolicy",
            requestType: exports.UpdateDomainPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            192,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            22,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            226,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            38,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            31,
                            10,
                            29,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            26,
                            16,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        getCustomDomainPolicy: {
            name: "GetCustomDomainPolicy",
            requestType: exports.GetCustomDomainPolicyRequest,
            requestStream: false,
            responseType: exports.GetCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            152,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            250,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            100,
                            111,
                            101,
                            115,
                            110,
                            39,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            73,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            66,
                            10,
                            64,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            32,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            105,
                            122,
                            101,
                            100,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        addCustomDomainPolicy: {
            name: "AddCustomDomainPolicy",
            requestType: exports.AddCustomDomainPolicyRequest,
            requestStream: false,
            responseType: exports.AddCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            222,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            41,
                            83,
                            101,
                            116,
                            32,
                            97,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            110,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            230,
                            1,
                            67,
                            114,
                            101,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        updateCustomDomainPolicy: {
            name: "UpdateCustomDomainPolicy",
            requestType: exports.UpdateCustomDomainPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateCustomDomainPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            39,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            230,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            30,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            23,
                            10,
                            21,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            26,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        resetCustomDomainPolicyToDefault: {
            name: "ResetCustomDomainPolicyToDefault",
            requestType: exports.ResetCustomDomainPolicyToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomDomainPolicyToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            15,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            13,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            37,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            79,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            26,
                            215,
                            1,
                            82,
                            101,
                            115,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            97,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            110,
                            100,
                            108,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            115,
                            44,
                            32,
                            105,
                            110,
                            32,
                            114,
                            101,
                            103,
                            97,
                            114,
                            100,
                            115,
                            32,
                            116,
                            111,
                            32,
                            117,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            115,
                            44,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            118,
                            97,
                            108,
                            105,
                            100,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            62,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            55,
                            10,
                            53,
                            114,
                            101,
                            115,
                            101,
                            116,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            32,
                            42,
                            30,
                            47,
                            111,
                            114,
                            103,
                            115,
                            47,
                            123,
                            111,
                            114,
                            103,
                            95,
                            105,
                            100,
                            125,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        getLabelPolicy: {
            name: "GetLabelPolicy",
            requestType: exports.GetLabelPolicyRequest,
            requestStream: false,
            responseType: exports.GetLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            196,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            108,
                            121,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            85,
                            73,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108])],
                },
            },
        },
        getPreviewLabelPolicy: {
            name: "GetPreviewLabelPolicy",
            requestType: exports.GetPreviewLabelPolicyRequest,
            requestStream: false,
            responseType: exports.GetPreviewLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            46,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            129,
                            4,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            104,
                            111,
                            119,
                            32,
                            121,
                            111,
                            117,
                            32,
                            104,
                            111,
                            119,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            108,
                            105,
                            107,
                            101,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            110,
                            111,
                            116,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            105,
                            116,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            117,
                            116,
                            117,
                            114,
                            101,
                            44,
                            32,
                            105,
                            116,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            104,
                            97,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            114,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            85,
                            73,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            18,
                            24,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            95,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                        ]),
                    ],
                },
            },
        },
        updateLabelPolicy: {
            name: "UpdateLabelPolicy",
            requestType: exports.UpdateLabelPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            33,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            243,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            115,
                            104,
                            111,
                            119,
                            32,
                            121,
                            111,
                            117,
                            32,
                            104,
                            111,
                            119,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            108,
                            105,
                            107,
                            101,
                            44,
                            32,
                            109,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            115,
                            111,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            121,
                            111,
                            117,
                            32,
                            97,
                            114,
                            101,
                            32,
                            104,
                            97,
                            112,
                            112,
                            121,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 26, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 97, 98, 101, 108]),
                    ],
                },
            },
        },
        activateLabelPolicy: {
            name: "ActivateLabelPolicy",
            requestType: exports.ActivateLabelPolicyRequest,
            requestStream: false,
            responseType: exports.ActivateLabelPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            219,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            35,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            76,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            159,
                            2,
                            65,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            105,
                            110,
                            103,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            68,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            108,
                            111,
                            114,
                            115,
                            44,
                            32,
                            102,
                            111,
                            110,
                            116,
                            115,
                            44,
                            32,
                            97,
                            110,
                            100,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            47,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            44,
                            32,
                            69,
                            45,
                            77,
                            97,
                            105,
                            108,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            67,
                            111,
                            110,
                            115,
                            111,
                            108,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            95,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyLogo: {
            name: "RemoveLabelPolicyLogo",
            requestType: exports.RemoveLabelPolicyLogoRequest,
            requestStream: false,
            responseType: exports.RemoveLabelPolicyLogoResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            111,
                            103,
                            111,
                            32,
                            76,
                            105,
                            103,
                            104,
                            116,
                            26,
                            178,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            103,
                            104,
                            116,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            108,
                            111,
                            103,
                            111,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyLogoDark: {
            name: "RemoveLabelPolicyLogoDark",
            requestType: exports.RemoveLabelPolicyLogoDarkRequest,
            requestStream: false,
            responseType: exports.RemoveLabelPolicyLogoDarkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            16,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            111,
                            103,
                            111,
                            32,
                            68,
                            97,
                            114,
                            107,
                            26,
                            177,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            111,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            114,
                            107,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            108,
                            111,
                            103,
                            111,
                            95,
                            100,
                            97,
                            114,
                            107,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyIcon: {
            name: "RemoveLabelPolicyIcon",
            requestType: exports.RemoveLabelPolicyIconRequest,
            requestStream: false,
            responseType: exports.RemoveLabelPolicyIconResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            99,
                            111,
                            110,
                            32,
                            76,
                            105,
                            103,
                            104,
                            116,
                            26,
                            178,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            99,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            103,
                            104,
                            116,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            105,
                            99,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyIconDark: {
            name: "RemoveLabelPolicyIconDark",
            requestType: exports.RemoveLabelPolicyIconDarkRequest,
            requestStream: false,
            responseType: exports.RemoveLabelPolicyIconDarkResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            16,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            99,
                            111,
                            110,
                            32,
                            68,
                            97,
                            114,
                            107,
                            26,
                            177,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            99,
                            111,
                            110,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            114,
                            107,
                            32,
                            116,
                            104,
                            101,
                            109,
                            101,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            27,
                            42,
                            25,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            105,
                            99,
                            111,
                            110,
                            95,
                            100,
                            97,
                            114,
                            107,
                        ]),
                    ],
                },
            },
        },
        removeLabelPolicyFont: {
            name: "RemoveLabelPolicyFont",
            requestType: exports.RemoveLabelPolicyFontRequest,
            requestStream: false,
            responseType: exports.RemoveLabelPolicyFontResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            195,
                            1,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            8,
                            66,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            18,
                            11,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            70,
                            111,
                            110,
                            116,
                            26,
                            159,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            111,
                            110,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            108,
                            97,
                            98,
                            101,
                            108,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            47,
                            98,
                            114,
                            97,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            111,
                            110,
                            108,
                            121,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            101,
                            118,
                            105,
                            101,
                            119,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            116,
                            105,
                            118,
                            97,
                            116,
                            101,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([14, 10, 12, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            22,
                            42,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            97,
                            98,
                            101,
                            108,
                            47,
                            102,
                            111,
                            110,
                            116,
                        ]),
                    ],
                },
            },
        },
        getLoginPolicy: {
            name: "GetLoginPolicy",
            requestType: exports.GetLoginPolicyRequest,
            requestStream: false,
            responseType: exports.GetLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            18,
                            71,
                            101,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            154,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            107,
                            105,
                            110,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            46,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            108,
                            121,
                            32,
                            115,
                            112,
                            101,
                            97,
                            107,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            98,
                            101,
                            104,
                            97,
                            118,
                            105,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            46,
                            74,
                            29,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            22,
                            10,
                            20,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([17, 18, 15, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 103, 105, 110]),
                    ],
                },
            },
        },
        updateLoginPolicy: {
            name: "UpdateLoginPolicy",
            requestType: exports.UpdateLoginPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            21,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            161,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            73,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            115,
                            32,
                            119,
                            104,
                            97,
                            116,
                            32,
                            107,
                            105,
                            110,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            105,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            104,
                            97,
                            118,
                            101,
                            46,
                            32,
                            71,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            108,
                            121,
                            32,
                            115,
                            112,
                            101,
                            97,
                            107,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            98,
                            101,
                            104,
                            97,
                            118,
                            105,
                            111,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            20,
                            58,
                            1,
                            42,
                            26,
                            15,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicyIDPs: {
            name: "ListLoginPolicyIDPs",
            requestType: exports.ListLoginPolicyIDPsRequest,
            requestStream: false,
            responseType: exports.ListLoginPolicyIDPsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            226,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            30,
                            76,
                            105,
                            115,
                            116,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            26,
                            220,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            97,
                            114,
                            101,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            97,
                            114,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            33,
                            58,
                            1,
                            42,
                            34,
                            28,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addIDPToLoginPolicy: {
            name: "AddIDPToLoginPolicy",
            requestType: exports.AddIDPToLoginPolicyRequest,
            requestStream: false,
            responseType: exports.AddIDPToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            28,
                            65,
                            100,
                            100,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            208,
                            1,
                            65,
                            100,
                            100,
                            47,
                            108,
                            105,
                            110,
                            107,
                            32,
                            97,
                            32,
                            112,
                            114,
                            101,
                            45,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            97,
                            103,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            57,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            50,
                            10,
                            48,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            25,
                            58,
                            1,
                            42,
                            34,
                            20,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeIDPFromLoginPolicy: {
            name: "RemoveIDPFromLoginPolicy",
            requestType: exports.RemoveIDPFromLoginPolicyRequest,
            requestStream: false,
            responseType: exports.RemoveIDPFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            215,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            18,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            18,
                            31,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            76,
                            105,
                            110,
                            107,
                            101,
                            100,
                            32,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            80,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            26,
                            198,
                            1,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            110,
                            32,
                            105,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            97,
                            103,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            61,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            54,
                            10,
                            52,
                            73,
                            100,
                            101,
                            110,
                            116,
                            105,
                            116,
                            121,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            42,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            105,
                            100,
                            112,
                            115,
                            47,
                            123,
                            105,
                            100,
                            112,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicySecondFactors: {
            name: "ListLoginPolicySecondFactors",
            requestType: exports.ListLoginPolicySecondFactorsRequest,
            requestStream: false,
            responseType: exports.ListLoginPolicySecondFactorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            25,
                            76,
                            105,
                            115,
                            116,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            158,
                            3,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            47,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            40,
                            10,
                            38,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            34,
                            38,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addSecondFactorToLoginPolicy: {
            name: "AddSecondFactorToLoginPolicy",
            requestType: exports.AddSecondFactorToLoginPolicyRequest,
            requestStream: false,
            responseType: exports.AddSecondFactorToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            23,
                            65,
                            100,
                            100,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            137,
                            4,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            105,
                            108,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            100,
                            32,
                            109,
                            111,
                            114,
                            101,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            116,
                            111,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            97,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            52,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            45,
                            10,
                            43,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            64,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            57,
                            10,
                            26,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            35,
                            58,
                            1,
                            42,
                            34,
                            30,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeSecondFactorFromLoginPolicy: {
            name: "RemoveSecondFactorFromLoginPolicy",
            requestType: exports.RemoveSecondFactorFromLoginPolicyRequest,
            requestStream: false,
            responseType: exports.RemoveSecondFactorFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            176,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            26,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            83,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            26,
                            227,
                            3,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            50,
                            70,
                            65,
                            41,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            85,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            101,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            46,
                            74,
                            56,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            49,
                            10,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            64,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            57,
                            10,
                            26,
                            73,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            39,
                            42,
                            37,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        listLoginPolicyMultiFactors: {
            name: "ListLoginPolicyMultiFactors",
            requestType: exports.ListLoginPolicyMultiFactorsRequest,
            requestStream: false,
            responseType: exports.ListLoginPolicyMultiFactorsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            4,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            24,
                            76,
                            105,
                            115,
                            116,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            236,
                            3,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            46,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            39,
                            10,
                            37,
                            109,
                            117,
                            108,
                            116,
                            105,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            34,
                            37,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addMultiFactorToLoginPolicy: {
            name: "AddMultiFactorToLoginPolicy",
            requestType: exports.AddMultiFactorToLoginPolicyRequest,
            requestStream: false,
            responseType: exports.AddMultiFactorToLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            152,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            22,
                            65,
                            100,
                            100,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            45,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            213,
                            3,
                            65,
                            100,
                            100,
                            32,
                            97,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            63,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            56,
                            10,
                            25,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            34,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                        ]),
                    ],
                },
            },
        },
        removeMultiFactorFromLoginPolicy: {
            name: "RemoveMultiFactorFromLoginPolicy",
            requestType: exports.RemoveMultiFactorFromLoginPolicyRequest,
            requestStream: false,
            responseType: exports.RemoveMultiFactorFromLoginPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            179,
                            5,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            14,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            22,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            116,
                            104,
                            111,
                            100,
                            115,
                            18,
                            25,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            77,
                            117,
                            108,
                            116,
                            105,
                            32,
                            70,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            26,
                            218,
                            3,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            97,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            40,
                            77,
                            70,
                            65,
                            41,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            119,
                            105,
                            116,
                            104,
                            111,
                            117,
                            116,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            100,
                            105,
                            116,
                            105,
                            111,
                            110,
                            97,
                            108,
                            32,
                            108,
                            97,
                            121,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            99,
                            117,
                            114,
                            105,
                            116,
                            121,
                            32,
                            102,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            114,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            46,
                            32,
                            65,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            65,
                            112,
                            112,
                            44,
                            32,
                            70,
                            105,
                            110,
                            103,
                            101,
                            114,
                            80,
                            114,
                            105,
                            110,
                            116,
                            44,
                            32,
                            87,
                            105,
                            110,
                            100,
                            111,
                            119,
                            115,
                            32,
                            72,
                            101,
                            108,
                            108,
                            111,
                            44,
                            32,
                            101,
                            116,
                            99,
                            41,
                            46,
                            32,
                            32,
                            80,
                            101,
                            114,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            101,
                            100,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            97,
                            115,
                            32,
                            105,
                            116,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            97,
                            117,
                            116,
                            104,
                            101,
                            110,
                            116,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            110,
                            101,
                            99,
                            101,
                            115,
                            115,
                            97,
                            114,
                            121,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            85,
                            73,
                            32,
                            119,
                            101,
                            32,
                            103,
                            101,
                            110,
                            101,
                            114,
                            97,
                            108,
                            105,
                            122,
                            101,
                            32,
                            105,
                            116,
                            32,
                            97,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            111,
                            114,
                            32,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            46,
                            74,
                            56,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            49,
                            10,
                            47,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            74,
                            77,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            70,
                            10,
                            39,
                            109,
                            117,
                            108,
                            116,
                            105,
                            45,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            32,
                            116,
                            121,
                            112,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            109,
                            117,
                            108,
                            116,
                            105,
                            95,
                            102,
                            97,
                            99,
                            116,
                            111,
                            114,
                            115,
                            47,
                            123,
                            116,
                            121,
                            112,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getPasswordComplexityPolicy: {
            name: "GetPasswordComplexityPolicy",
            requestType: exports.GetPasswordComplexityPolicyRequest,
            requestStream: false,
            responseType: exports.GetPasswordComplexityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            202,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            32,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            219,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            40,
                            99,
                            104,
                            97,
                            114,
                            97,
                            99,
                            116,
                            101,
                            114,
                            115,
                            44,
                            32,
                            108,
                            101,
                            110,
                            103,
                            116,
                            104,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                            74,
                            43,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            36,
                            10,
                            34,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            18,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        updatePasswordComplexityPolicy: {
            name: "UpdatePasswordComplexityPolicy",
            requestType: exports.UpdatePasswordComplexityPolicyRequest,
            requestStream: false,
            responseType: exports.UpdatePasswordComplexityPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            149,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            35,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            227,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            104,
                            111,
                            119,
                            32,
                            97,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            108,
                            111,
                            111,
                            107,
                            32,
                            40,
                            99,
                            104,
                            97,
                            114,
                            97,
                            99,
                            116,
                            101,
                            114,
                            115,
                            44,
                            32,
                            108,
                            101,
                            110,
                            103,
                            116,
                            104,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            41,
                            74,
                            51,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            44,
                            10,
                            42,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            26,
                            29,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                        ]),
                    ],
                },
            },
        },
        getPasswordAgePolicy: {
            name: "GetPasswordAgePolicy",
            requestType: exports.GetPasswordAgePolicyRequest,
            requestStream: false,
            responseType: exports.GetPasswordAgePolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            65,
                            103,
                            101,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            243,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            112,
                            105,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            44,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            102,
                            111,
                            114,
                            99,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            105,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            120,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            97,
                            103,
                            101,
                        ]),
                    ],
                },
            },
        },
        updatePasswordAgePolicy: {
            name: "UpdatePasswordAgePolicy",
            requestType: exports.UpdatePasswordAgePolicyRequest,
            requestStream: false,
            responseType: exports.UpdatePasswordAgePolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            166,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            65,
                            103,
                            101,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            130,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            111,
                            109,
                            112,
                            108,
                            101,
                            120,
                            105,
                            116,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            120,
                            112,
                            105,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            44,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            102,
                            111,
                            114,
                            99,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            105,
                            116,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            101,
                            120,
                            116,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            46,
                            74,
                            44,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            37,
                            10,
                            35,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            103,
                            101,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            97,
                            103,
                            101,
                        ]),
                    ],
                },
            },
        },
        getLockoutPolicy: {
            name: "GetLockoutPolicy",
            requestType: exports.GetLockoutPolicyRequest,
            requestStream: false,
            responseType: exports.GetLockoutPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            252,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            76,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            156,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            104,
                            111,
                            119,
                            32,
                            109,
                            97,
                            110,
                            121,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            116,
                            116,
                            101,
                            109,
                            112,
                            116,
                            115,
                            41,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            110,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                            74,
                            31,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            24,
                            10,
                            22,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 108, 111, 99, 107, 111, 117, 116]),
                    ],
                },
            },
        },
        updateLockoutPolicy: {
            name: "UpdateLockoutPolicy",
            requestType: exports.UpdateLockoutPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateLockoutPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            221,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            17,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            32,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            76,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            155,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            104,
                            111,
                            119,
                            32,
                            109,
                            97,
                            110,
                            121,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            97,
                            116,
                            116,
                            101,
                            109,
                            112,
                            116,
                            115,
                            41,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            117,
                            110,
                            108,
                            111,
                            99,
                            107,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            97,
                            110,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            119,
                            97,
                            114,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            58,
                            1,
                            42,
                            26,
                            26,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            47,
                            108,
                            111,
                            99,
                            107,
                            111,
                            117,
                            116,
                        ]),
                    ],
                },
            },
        },
        getPrivacyPolicy: {
            name: "GetPrivacyPolicy",
            requestType: exports.GetPrivacyPolicyRequest,
            requestStream: false,
            responseType: exports.GetPrivacyPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            214,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            16,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            20,
                            71,
                            101,
                            116,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            128,
                            2,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            114,
                            109,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                            44,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            65,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            105,
                            110,
                            103,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            112,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            74,
                            31,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            24,
                            10,
                            22,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([19, 18, 17, 47, 112, 111, 108, 105, 99, 105, 101, 115, 47, 112, 114, 105, 118, 97, 99, 121]),
                    ],
                },
            },
        },
        updatePrivacyPolicy: {
            name: "UpdatePrivacyPolicy",
            requestType: exports.UpdatePrivacyPolicyRequest,
            requestStream: false,
            responseType: exports.UpdatePrivacyPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            229,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            16,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            23,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            80,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            204,
                            2,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            114,
                            109,
                            115,
                            32,
                            97,
                            110,
                            100,
                            32,
                            115,
                            101,
                            114,
                            118,
                            105,
                            99,
                            101,
                            115,
                            44,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            44,
                            32,
                            101,
                            116,
                            99,
                            46,
                            32,
                            65,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            105,
                            110,
                            103,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            116,
                            111,
                            32,
                            97,
                            99,
                            99,
                            101,
                            112,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            46,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            110,
                            103,
                            125,
                            125,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            116,
                            32,
                            116,
                            111,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            105,
                            110,
                            107,
                            115,
                            32,
                            98,
                            97,
                            115,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            46,
                            74,
                            39,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            32,
                            10,
                            30,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            22,
                            58,
                            1,
                            42,
                            26,
                            17,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            112,
                            114,
                            105,
                            118,
                            97,
                            99,
                            121,
                        ]),
                    ],
                },
            },
        },
        addNotificationPolicy: {
            name: "AddNotificationPolicy",
            requestType: exports.AddNotificationPolicyRequest,
            requestStream: false,
            responseType: exports.AddNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            217,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            25,
                            65,
                            100,
                            100,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            244,
                            1,
                            65,
                            100,
                            100,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            34,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        getNotificationPolicy: {
            name: "GetNotificationPolicy",
            requestType: exports.GetNotificationPolicyRequest,
            requestStream: false,
            responseType: exports.GetNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            223,
                            2,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            247,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            36,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            29,
                            10,
                            27,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        updateNotificationPolicy: {
            name: "UpdateNotificationPolicy",
            requestType: exports.UpdateNotificationPolicyRequest,
            requestStream: false,
            responseType: exports.UpdateNotificationPolicyResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            159,
                            3,
                            10,
                            8,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            10,
                            21,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            18,
                            28,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            78,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            83,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            26,
                            247,
                            1,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            46,
                            32,
                            73,
                            116,
                            32,
                            97,
                            102,
                            102,
                            101,
                            99,
                            116,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            121,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            110,
                            32,
                            115,
                            112,
                            101,
                            99,
                            105,
                            102,
                            105,
                            99,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            40,
                            101,
                            46,
                            103,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            41,
                            46,
                            74,
                            44,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            37,
                            10,
                            35,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            111,
                            108,
                            105,
                            99,
                            121,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            54,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            47,
                            10,
                            16,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            97,
                            114,
                            103,
                            117,
                            109,
                            101,
                            110,
                            116,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            112,
                            111,
                            108,
                            105,
                            99,
                            105,
                            101,
                            115,
                            47,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                        ]),
                    ],
                },
            },
        },
        getDefaultInitMessageText: {
            name: "GetDefaultInitMessageText",
            requestType: exports.GetDefaultInitMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            234,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            29,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            185,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            18,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomInitMessageText: {
            name: "GetCustomInitMessageText",
            requestType: exports.GetCustomInitMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            235,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            28,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            187,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            31,
                            18,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultInitMessageText: {
            name: "SetDefaultInitMessageText",
            requestType: exports.SetDefaultInitMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultInitMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            250,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            194,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            114,
                            101,
                            97,
                            116,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            104,
                            97,
                            115,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            110,
                            111,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            114,
                            32,
                            97,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            34,
                            58,
                            1,
                            42,
                            26,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomInitMessageTextToDefault: {
            name: "ResetCustomInitMessageTextToDefault",
            requestType: exports.ResetCustomInitMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomInitMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            204,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            41,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            105,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            143,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            105,
                            116,
                            105,
                            97,
                            108,
                            105,
                            122,
                            101,
                            45,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            31,
                            42,
                            29,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            105,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordResetMessageText: {
            name: "GetDefaultPasswordResetMessageText",
            requestType: exports.GetDefaultPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            210,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            151,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            48,
                            18,
                            46,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            97,
                            102,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordResetMessageText: {
            name: "GetCustomPasswordResetMessageText",
            requestType: exports.GetCustomPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            153,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            18,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordResetMessageText: {
            name: "SetDefaultPasswordResetMessageText",
            requestType: exports.SetDefaultPasswordResetMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultPasswordResetMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            231,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            46,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            165,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            102,
                            111,
                            114,
                            103,
                            111,
                            116,
                            45,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            43,
                            58,
                            1,
                            42,
                            26,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordResetMessageTextToDefault: {
            name: "ResetCustomPasswordResetMessageTextToDefault",
            requestType: exports.ResetCustomPasswordResetMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomPasswordResetMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            147,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            114,
                            101,
                            115,
                            101,
                            116,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            40,
                            42,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            114,
                            101,
                            115,
                            101,
                            116,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyEmailMessageText: {
            name: "GetDefaultVerifyEmailMessageText",
            requestType: exports.GetDefaultVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            150,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyEmailMessageText: {
            name: "GetCustomVerifyEmailMessageText",
            requestType: exports.GetCustomVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            208,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            152,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyEmailMessageText: {
            name: "SetDefaultVerifyEmailMessageText",
            requestType: exports.SetDefaultVerifyEmailMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultVerifyEmailMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            163,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            97,
                            100,
                            100,
                            114,
                            101,
                            115,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyEmailMessageTextToDefault: {
            name: "ResetCustomVerifyEmailMessageTextToDefault",
            requestType: exports.ResetCustomVerifyEmailMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomVerifyEmailMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            209,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            140,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyPhoneMessageText: {
            name: "GetDefaultVerifyPhoneMessageText",
            requestType: exports.GetDefaultVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            244,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            37,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            187,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyPhoneMessageText: {
            name: "GetCustomVerifyPhoneMessageText",
            requestType: exports.GetCustomVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            245,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            189,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyPhoneMessageText: {
            name: "SetDefaultVerifyPhoneMessageText",
            requestType: exports.SetDefaultVerifyPhoneMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultVerifyPhoneMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            136,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            43,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            201,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            110,
                            111,
                            110,
                            45,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            110,
                            117,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyPhoneMessageTextToDefault: {
            name: "ResetCustomVerifyPhoneMessageTextToDefault",
            requestType: exports.ResetCustomVerifyPhoneMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomVerifyPhoneMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            203,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            80,
                            104,
                            111,
                            110,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            134,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            45,
                            112,
                            104,
                            111,
                            110,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            112,
                            104,
                            111,
                            110,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifySMSOTPMessageText: {
            name: "GetDefaultVerifySMSOTPMessageText",
            requestType: exports.GetDefaultVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            248,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            189,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            47,
                            18,
                            45,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifySMSOTPMessageText: {
            name: "GetCustomVerifySMSOTPMessageText",
            requestType: exports.GetCustomVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            249,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            191,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            39,
                            18,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifySMSOTPMessageText: {
            name: "SetDefaultVerifySMSOTPMessageText",
            requestType: exports.SetDefaultVerifySMSOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultVerifySMSOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            140,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            45,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            203,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            42,
                            58,
                            1,
                            42,
                            26,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifySMSOTPMessageTextToDefault: {
            name: "ResetCustomVerifySMSOTPMessageTextToDefault",
            requestType: exports.ResetCustomVerifySMSOTPMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomVerifySMSOTPMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            136,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            39,
                            42,
                            37,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            115,
                            109,
                            115,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultVerifyEmailOTPMessageText: {
            name: "GetDefaultVerifyEmailOTPMessageText",
            requestType: exports.GetDefaultVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            250,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            191,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            49,
                            18,
                            47,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomVerifyEmailOTPMessageText: {
            name: "GetCustomVerifyEmailOTPMessageText",
            requestType: exports.GetCustomVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            244,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            186,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            41,
                            18,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultVerifyEmailOTPMessageText: {
            name: "SetDefaultVerifyEmailOTPMessageText",
            requestType: exports.SetDefaultVerifyEmailOTPMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultVerifyEmailOTPMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            135,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            45,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            198,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            110,
                            101,
                            45,
                            116,
                            105,
                            109,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            118,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            110,
                            111,
                            116,
                            105,
                            102,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            112,
                            114,
                            111,
                            118,
                            105,
                            100,
                            101,
                            114,
                            32,
                            105,
                            115,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            67,
                            111,
                            100,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            44,
                            58,
                            1,
                            42,
                            26,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomVerifyEmailOTPMessageTextToDefault: {
            name: "ResetCustomVerifyEmailOTPMessageTextToDefault",
            requestType: exports.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            202,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            86,
                            101,
                            114,
                            105,
                            102,
                            121,
                            32,
                            83,
                            77,
                            83,
                            32,
                            79,
                            84,
                            80,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            131,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            69,
                            109,
                            97,
                            105,
                            108,
                            32,
                            79,
                            84,
                            80,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            42,
                            39,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            118,
                            101,
                            114,
                            105,
                            102,
                            121,
                            101,
                            109,
                            97,
                            105,
                            108,
                            111,
                            116,
                            112,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultDomainClaimedMessageText: {
            name: "GetDefaultDomainClaimedMessageText",
            requestType: exports.GetDefaultDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            129,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            198,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            48,
                            18,
                            46,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomDomainClaimedMessageText: {
            name: "GetCustomDomainClaimedMessageText",
            requestType: exports.GetCustomDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            130,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            38,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            200,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            40,
                            18,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultDomainClaimedMessageText: {
            name: "SetDefaultDomainClaimedMessageText",
            requestType: exports.SetDefaultDomainClaimedMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultDomainClaimedMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            164,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            233,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            115,
                            32,
                            97,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            115,
                            32,
                            105,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            84,
                            101,
                            109,
                            112,
                            85,
                            115,
                            101,
                            114,
                            110,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            43,
                            58,
                            1,
                            42,
                            26,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomDomainClaimedMessageTextToDefault: {
            name: "ResetCustomDomainClaimedMessageTextToDefault",
            requestType: exports.ResetCustomDomainClaimedMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomDomainClaimedMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            207,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            51,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            68,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            67,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            136,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            40,
                            42,
                            38,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordlessRegistrationMessageText: {
            name: "GetDefaultPasswordlessRegistrationMessageText",
            requestType: exports.GetDefaultPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            153,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            50,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            211,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            111,
                            109,
                            97,
                            105,
                            110,
                            32,
                            99,
                            108,
                            97,
                            105,
                            109,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            60,
                            18,
                            58,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordlessRegistrationMessageText: {
            name: "GetCustomPasswordlessRegistrationMessageText",
            requestType: exports.GetCustomPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            173,
                            3,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            49,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            232,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            52,
                            18,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordlessRegistrationMessageText: {
            name: "SetDefaultPasswordlessRegistrationMessageText",
            requestType: exports.SetDefaultPasswordlessRegistrationMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultPasswordlessRegistrationMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            178,
                            5,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            50,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            236,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            115,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            115,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            44,
                            32,
                            116,
                            111,
                            32,
                            98,
                            101,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            101,
                            118,
                            105,
                            99,
                            101,
                            46,
                            32,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            55,
                            58,
                            1,
                            42,
                            26,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordlessRegistrationMessageTextToDefault: {
            name: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
            requestType: exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            237,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            62,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            32,
                            82,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            155,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            47,
                            112,
                            97,
                            115,
                            115,
                            107,
                            101,
                            121,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
                    578365826: [
                        Buffer.from([
                            52,
                            42,
                            50,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            108,
                            101,
                            115,
                            115,
                            95,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultPasswordChangeMessageText: {
            name: "GetDefaultPasswordChangeMessageText",
            requestType: exports.GetDefaultPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            40,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            151,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            50,
                            18,
                            48,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomPasswordChangeMessageText: {
            name: "GetCustomPasswordChangeMessageText",
            requestType: exports.GetCustomPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            212,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            39,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            153,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            42,
                            18,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultPasswordChangeMessageText: {
            name: "SetDefaultPasswordChangeMessageText",
            requestType: exports.SetDefaultPasswordChangeMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultPasswordChangeMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            218,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            41,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            157,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            111,
                            102,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            104,
                            97,
                            115,
                            32,
                            98,
                            101,
                            101,
                            110,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            46,
                            32,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            45,
                            58,
                            1,
                            42,
                            26,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomPasswordChangeMessageTextToDefault: {
            name: "ResetCustomPasswordChangeMessageTextToDefault",
            requestType: exports.ResetCustomPasswordChangeMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomPasswordChangeMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            211,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            53,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            80,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            32,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            138,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            45,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            100,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            42,
                            42,
                            40,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            112,
                            97,
                            115,
                            115,
                            119,
                            111,
                            114,
                            100,
                            95,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultInviteUserMessageText: {
            name: "GetDefaultInviteUserMessageText",
            requestType: exports.GetDefaultInviteUserMessageTextRequest,
            requestStream: false,
            responseType: exports.GetDefaultInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            196,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            140,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            46,
                            18,
                            44,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomInviteUserMessageText: {
            name: "GetCustomInviteUserMessageText",
            requestType: exports.GetCustomInviteUserMessageTextRequest,
            requestStream: false,
            responseType: exports.GetCustomInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            197,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            35,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            142,
                            2,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            38,
                            18,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setDefaultInviteUserMessageText: {
            name: "SetDefaultInviteUserMessageText",
            requestType: exports.SetDefaultInviteUserMessageTextRequest,
            requestStream: false,
            responseType: exports.SetDefaultInviteUserMessageTextResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            216,
                            4,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            36,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            160,
                            4,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            105,
                            115,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            119,
                            104,
                            101,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            99,
                            111,
                            100,
                            101,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            101,
                            100,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            70,
                            111,
                            108,
                            108,
                            111,
                            119,
                            105,
                            110,
                            103,
                            32,
                            86,
                            97,
                            114,
                            105,
                            97,
                            98,
                            108,
                            101,
                            115,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            58,
                            32,
                            123,
                            123,
                            46,
                            85,
                            115,
                            101,
                            114,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            70,
                            105,
                            114,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            78,
                            105,
                            99,
                            107,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            68,
                            105,
                            115,
                            112,
                            108,
                            97,
                            121,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            69,
                            109,
                            97,
                            105,
                            108,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            97,
                            115,
                            116,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            86,
                            101,
                            114,
                            105,
                            102,
                            105,
                            101,
                            100,
                            80,
                            104,
                            111,
                            110,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            80,
                            114,
                            101,
                            102,
                            101,
                            114,
                            114,
                            101,
                            100,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            76,
                            111,
                            103,
                            105,
                            110,
                            78,
                            97,
                            109,
                            101,
                            115,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            104,
                            97,
                            110,
                            103,
                            101,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            67,
                            114,
                            101,
                            97,
                            116,
                            105,
                            111,
                            110,
                            68,
                            97,
                            116,
                            101,
                            125,
                            125,
                            32,
                            123,
                            123,
                            46,
                            65,
                            112,
                            112,
                            108,
                            105,
                            99,
                            97,
                            116,
                            105,
                            111,
                            110,
                            78,
                            97,
                            109,
                            101,
                            125,
                            125,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            41,
                            58,
                            1,
                            42,
                            26,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomInviteUserMessageTextToDefault: {
            name: "ResetCustomInviteUserMessageTextToDefault",
            requestType: exports.ResetCustomInviteUserMessageTextToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomInviteUserMessageTextToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            201,
                            2,
                            10,
                            13,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            48,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            73,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            85,
                            115,
                            101,
                            114,
                            32,
                            77,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            133,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            38,
                            42,
                            36,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            109,
                            101,
                            115,
                            115,
                            97,
                            103,
                            101,
                            47,
                            105,
                            110,
                            118,
                            105,
                            116,
                            101,
                            95,
                            117,
                            115,
                            101,
                            114,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getDefaultLoginTexts: {
            name: "GetDefaultLoginTexts",
            requestType: exports.GetDefaultLoginTextsRequest,
            requestStream: false,
            responseType: exports.GetDefaultLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            22,
                            71,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            221,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            97,
                            114,
                            101,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            97,
                            115,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            32,
                            18,
                            30,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        getCustomLoginTexts: {
            name: "GetCustomLoginTexts",
            requestType: exports.GetCustomLoginTextsRequest,
            requestStream: false,
            responseType: exports.GetCustomLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            21,
                            71,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            222,
                            1,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            18,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        setCustomLoginText: {
            name: "SetCustomLoginText",
            requestType: exports.SetCustomLoginTextsRequest,
            requestStream: false,
            responseType: exports.SetCustomLoginTextsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            134,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            22,
                            83,
                            101,
                            116,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            26,
                            222,
                            1,
                            83,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            115,
                            32,
                            115,
                            101,
                            116,
                            116,
                            105,
                            110,
                            103,
                            115,
                            47,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 112, 111, 108, 105, 99, 121, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            27,
                            58,
                            1,
                            42,
                            26,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        resetCustomLoginTextToDefault: {
            name: "ResetCustomLoginTextToDefault",
            requestType: exports.ResetCustomLoginTextsToDefaultRequest,
            requestStream: false,
            responseType: exports.ResetCustomLoginTextsToDefaultResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            203,
                            2,
                            10,
                            11,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            115,
                            18,
                            34,
                            82,
                            101,
                            115,
                            101,
                            116,
                            32,
                            67,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            76,
                            111,
                            103,
                            105,
                            110,
                            32,
                            84,
                            101,
                            120,
                            116,
                            32,
                            116,
                            111,
                            32,
                            68,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            26,
                            151,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            111,
                            103,
                            105,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            114,
                            101,
                            103,
                            105,
                            115,
                            116,
                            101,
                            114,
                            32,
                            85,
                            73,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            44,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            105,
                            115,
                            32,
                            111,
                            118,
                            101,
                            114,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            114,
                            105,
                            103,
                            103,
                            101,
                            114,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            116,
                            114,
                            97,
                            110,
                            115,
                            108,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            102,
                            105,
                            108,
                            101,
                            115,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            105,
                            116,
                            115,
                            101,
                            108,
                            102,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            115,
                            104,
                            111,
                            119,
                            110,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            108,
                            108,
                            32,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                            44,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            100,
                            111,
                            32,
                            110,
                            111,
                            116,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            97,
                            32,
                            99,
                            117,
                            115,
                            116,
                            111,
                            109,
                            32,
                            116,
                            101,
                            120,
                            116,
                            32,
                            99,
                            111,
                            110,
                            102,
                            105,
                            103,
                            117,
                            114,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([15, 10, 13, 112, 111, 108, 105, 99, 121, 46, 100, 101, 108, 101, 116, 101])],
                    578365826: [
                        Buffer.from([
                            24,
                            42,
                            22,
                            47,
                            116,
                            101,
                            120,
                            116,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            47,
                            123,
                            108,
                            97,
                            110,
                            103,
                            117,
                            97,
                            103,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        listIAMMemberRoles: {
            name: "ListIAMMemberRoles",
            requestType: exports.ListIAMMemberRolesRequest,
            requestStream: false,
            responseType: exports.ListIAMMemberRolesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            132,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            21,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            82,
                            111,
                            108,
                            101,
                            115,
                            26,
                            162,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            102,
                            111,
                            114,
                            32,
                            97,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            34,
                            22,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            114,
                            111,
                            108,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listIAMMembers: {
            name: "ListIAMMembers",
            requestType: exports.ListIAMMembersRequest,
            requestStream: false,
            responseType: exports.ListIAMMembersResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            172,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            16,
                            76,
                            105,
                            115,
                            116,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            26,
                            217,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            104,
                            105,
                            112,
                            115,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            44,
                            32,
                            109,
                            97,
                            116,
                            99,
                            104,
                            105,
                            110,
                            103,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            113,
                            117,
                            101,
                            114,
                            105,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            113,
                            117,
                            101,
                            114,
                            105,
                            101,
                            115,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            65,
                            78,
                            68,
                            32,
                            108,
                            105,
                            110,
                            107,
                            101,
                            100,
                            46,
                            74,
                            27,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            20,
                            10,
                            18,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            21,
                            58,
                            1,
                            42,
                            34,
                            16,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        addIAMMember: {
            name: "AddIAMMember",
            requestType: exports.AddIAMMemberRequest,
            requestStream: false,
            responseType: exports.AddIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            184,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            14,
                            65,
                            100,
                            100,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            155,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            97,
                            100,
                            100,
                            115,
                            32,
                            97,
                            32,
                            110,
                            101,
                            119,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            111,
                            110,
                            101,
                            32,
                            111,
                            114,
                            32,
                            109,
                            117,
                            108,
                            116,
                            105,
                            112,
                            108,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            46,
                            74,
                            32,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            25,
                            10,
                            23,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            97,
                            100,
                            100,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            74,
                            69,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            62,
                            10,
                            31,
                            117,
                            115,
                            101,
                            114,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            32,
                            111,
                            114,
                            32,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [Buffer.from([13, 58, 1, 42, 34, 8, 47, 109, 101, 109, 98, 101, 114, 115])],
                },
            },
        },
        updateIAMMember: {
            name: "UpdateIAMMember",
            requestType: exports.UpdateIAMMemberRequest,
            requestStream: false,
            responseType: exports.UpdateIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            133,
                            3,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            17,
                            85,
                            112,
                            100,
                            97,
                            116,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            237,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            102,
                            32,
                            97,
                            110,
                            32,
                            101,
                            120,
                            105,
                            115,
                            116,
                            105,
                            110,
                            103,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            119,
                            104,
                            111,
                            108,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            119,
                            105,
                            108,
                            108,
                            32,
                            98,
                            101,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            46,
                            32,
                            77,
                            97,
                            107,
                            101,
                            32,
                            115,
                            117,
                            114,
                            101,
                            32,
                            116,
                            111,
                            32,
                            105,
                            110,
                            99,
                            108,
                            117,
                            100,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            121,
                            111,
                            117,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            119,
                            97,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            40,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            41,
                            46,
                            74,
                            34,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            27,
                            10,
                            25,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            117,
                            112,
                            100,
                            97,
                            116,
                            101,
                            100,
                            74,
                            59,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            52,
                            10,
                            21,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            111,
                            114,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([18, 10, 16, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            23,
                            58,
                            1,
                            42,
                            26,
                            18,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            123,
                            117,
                            115,
                            101,
                            114,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        removeIAMMember: {
            name: "RemoveIAMMember",
            requestType: exports.RemoveIAMMemberRequest,
            requestStream: false,
            responseType: exports.RemoveIAMMemberResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            236,
                            2,
                            10,
                            7,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            10,
                            22,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            65,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            111,
                            114,
                            115,
                            18,
                            17,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            26,
                            221,
                            1,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            115,
                            32,
                            119,
                            105,
                            116,
                            104,
                            32,
                            112,
                            101,
                            114,
                            109,
                            105,
                            115,
                            115,
                            105,
                            111,
                            110,
                            32,
                            116,
                            111,
                            32,
                            97,
                            100,
                            109,
                            105,
                            110,
                            105,
                            115,
                            116,
                            114,
                            97,
                            116,
                            101,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            32,
                            111,
                            110,
                            32,
                            100,
                            105,
                            102,
                            102,
                            101,
                            114,
                            101,
                            110,
                            116,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            115,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            97,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            46,
                            32,
                            84,
                            104,
                            101,
                            32,
                            117,
                            115,
                            101,
                            114,
                            32,
                            99,
                            97,
                            110,
                            32,
                            115,
                            116,
                            105,
                            108,
                            108,
                            32,
                            104,
                            97,
                            118,
                            101,
                            32,
                            114,
                            111,
                            108,
                            101,
                            115,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            111,
                            116,
                            104,
                            101,
                            114,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            40,
                            111,
                            114,
                            103,
                            97,
                            110,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            44,
                            32,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            41,
                            74,
                            34,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            27,
                            10,
                            25,
                            77,
                            101,
                            109,
                            98,
                            101,
                            114,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            73,
                            65,
                            77,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            74,
                            50,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            43,
                            10,
                            12,
                            105,
                            110,
                            118,
                            97,
                            108,
                            105,
                            100,
                            32,
                            117,
                            115,
                            101,
                            114,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 109, 101, 109, 98, 101, 114, 46, 100, 101, 108, 101, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            20,
                            42,
                            18,
                            47,
                            109,
                            101,
                            109,
                            98,
                            101,
                            114,
                            115,
                            47,
                            123,
                            117,
                            115,
                            101,
                            114,
                            95,
                            105,
                            100,
                            125,
                        ]),
                    ],
                },
            },
        },
        listViews: {
            name: "ListViews",
            requestType: exports.ListViewsRequest,
            requestStream: false,
            responseType: exports.ListViewsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            137,
                            2,
                            10,
                            17,
                            86,
                            105,
                            101,
                            119,
                            115,
                            47,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            22,
                            76,
                            105,
                            115,
                            116,
                            32,
                            86,
                            105,
                            101,
                            119,
                            115,
                            47,
                            80,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            26,
                            182,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            108,
                            108,
                            32,
                            115,
                            116,
                            111,
                            114,
                            101,
                            100,
                            32,
                            114,
                            101,
                            97,
                            100,
                            32,
                            109,
                            111,
                            100,
                            101,
                            108,
                            115,
                            32,
                            111,
                            102,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            86,
                            105,
                            101,
                            119,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            102,
                            111,
                            114,
                            32,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            111,
                            112,
                            116,
                            105,
                            109,
                            105,
                            122,
                            97,
                            116,
                            105,
                            111,
                            110,
                            32,
                            97,
                            110,
                            100,
                            32,
                            111,
                            112,
                            116,
                            105,
                            109,
                            105,
                            122,
                            105,
                            110,
                            103,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            108,
                            97,
                            116,
                            101,
                            110,
                            99,
                            105,
                            101,
                            115,
                            46,
                            32,
                            84,
                            104,
                            101,
                            121,
                            32,
                            114,
                            101,
                            112,
                            114,
                            101,
                            115,
                            101,
                            110,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            108,
                            116,
                            97,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            104,
                            97,
                            112,
                            112,
                            101,
                            110,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            111,
                            98,
                            106,
                            101,
                            99,
                            116,
                            115,
                            74,
                            35,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            28,
                            10,
                            26,
                            86,
                            105,
                            101,
                            119,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            113,
                            117,
                            101,
                            114,
                            121,
                            32,
                            111,
                            112,
                            101,
                            114,
                            97,
                            116,
                            105,
                            111,
                            110,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([16, 34, 14, 47, 118, 105, 101, 119, 115, 47, 95, 115, 101, 97, 114, 99, 104])],
                },
            },
        },
        listFailedEvents: {
            name: "ListFailedEvents",
            requestType: exports.ListFailedEventsRequest,
            requestStream: false,
            responseType: exports.ListFailedEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            169,
                            2,
                            10,
                            13,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            18,
                            76,
                            105,
                            115,
                            116,
                            32,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            204,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            99,
                            111,
                            117,
                            108,
                            100,
                            32,
                            110,
                            111,
                            116,
                            32,
                            98,
                            101,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            101,
                            100,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            105,
                            101,
                            119,
                            115,
                            47,
                            112,
                            114,
                            111,
                            106,
                            101,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            32,
                            83,
                            111,
                            109,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            110,
                            101,
                            101,
                            100,
                            32,
                            115,
                            101,
                            118,
                            101,
                            114,
                            97,
                            108,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            115,
                            32,
                            116,
                            105,
                            108,
                            108,
                            32,
                            116,
                            104,
                            101,
                            121,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            101,
                            100,
                            46,
                            32,
                            70,
                            111,
                            114,
                            32,
                            101,
                            120,
                            97,
                            109,
                            112,
                            108,
                            101,
                            44,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            83,
                            77,
                            84,
                            80,
                            45,
                            65,
                            80,
                            73,
                            32,
                            119,
                            97,
                            115,
                            110,
                            39,
                            116,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            115,
                            101,
                            110,
                            100,
                            32,
                            97,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            116,
                            105,
                            109,
                            101,
                            46,
                            74,
                            53,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            46,
                            10,
                            44,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            115,
                            115,
                            101,
                            100,
                            32,
                            98,
                            121,
                            32,
                            116,
                            104,
                            101,
                            32,
                            118,
                            105,
                            101,
                            119,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            23,
                            34,
                            21,
                            47,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        removeFailedEvent: {
            name: "RemoveFailedEvent",
            requestType: exports.RemoveFailedEventRequest,
            requestStream: false,
            responseType: exports.RemoveFailedEventResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            198,
                            3,
                            10,
                            13,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            20,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            70,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            185,
                            2,
                            82,
                            101,
                            109,
                            111,
                            118,
                            101,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            115,
                            32,
                            118,
                            105,
                            101,
                            119,
                            44,
                            32,
                            98,
                            117,
                            116,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            115,
                            116,
                            114,
                            101,
                            97,
                            109,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            99,
                            97,
                            108,
                            108,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            102,
                            117,
                            108,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            121,
                            115,
                            116,
                            101,
                            109,
                            32,
                            119,
                            97,
                            115,
                            32,
                            97,
                            98,
                            108,
                            101,
                            32,
                            116,
                            111,
                            32,
                            112,
                            114,
                            111,
                            99,
                            101,
                            115,
                            115,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            97,
                            102,
                            116,
                            101,
                            114,
                            32,
                            115,
                            111,
                            109,
                            101,
                            32,
                            114,
                            101,
                            116,
                            114,
                            105,
                            101,
                            115,
                            46,
                            32,
                            101,
                            46,
                            103,
                            46,
                            32,
                            105,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            115,
                            101,
                            99,
                            111,
                            110,
                            100,
                            32,
                            116,
                            114,
                            121,
                            32,
                            111,
                            102,
                            32,
                            115,
                            101,
                            110,
                            100,
                            105,
                            110,
                            103,
                            32,
                            97,
                            110,
                            32,
                            101,
                            109,
                            97,
                            105,
                            108,
                            32,
                            119,
                            97,
                            115,
                            32,
                            115,
                            117,
                            99,
                            99,
                            101,
                            115,
                            115,
                            102,
                            117,
                            108,
                            46,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            105,
                            114,
                            115,
                            116,
                            32,
                            116,
                            114,
                            121,
                            32,
                            112,
                            114,
                            111,
                            100,
                            117,
                            99,
                            101,
                            100,
                            32,
                            97,
                            32,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            46,
                            32,
                            89,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            102,
                            105,
                            110,
                            100,
                            32,
                            111,
                            117,
                            116,
                            32,
                            105,
                            102,
                            32,
                            105,
                            116,
                            32,
                            119,
                            111,
                            114,
                            107,
                            101,
                            100,
                            32,
                            111,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            96,
                            102,
                            97,
                            105,
                            108,
                            117,
                            114,
                            101,
                            95,
                            99,
                            111,
                            117,
                            110,
                            116,
                            96,
                            32,
                            74,
                            37,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            30,
                            10,
                            28,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            100,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            74,
                            60,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            53,
                            10,
                            22,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            110,
                            111,
                            116,
                            32,
                            102,
                            111,
                            117,
                            110,
                            100,
                            18,
                            27,
                            10,
                            25,
                            26,
                            23,
                            35,
                            47,
                            100,
                            101,
                            102,
                            105,
                            110,
                            105,
                            116,
                            105,
                            111,
                            110,
                            115,
                            47,
                            114,
                            112,
                            99,
                            83,
                            116,
                            97,
                            116,
                            117,
                            115,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [
                        Buffer.from([
                            56,
                            42,
                            54,
                            47,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            123,
                            100,
                            97,
                            116,
                            97,
                            98,
                            97,
                            115,
                            101,
                            125,
                            47,
                            123,
                            118,
                            105,
                            101,
                            119,
                            95,
                            110,
                            97,
                            109,
                            101,
                            125,
                            47,
                            123,
                            102,
                            97,
                            105,
                            108,
                            101,
                            100,
                            95,
                            115,
                            101,
                            113,
                            117,
                            101,
                            110,
                            99,
                            101,
                            125,
                        ]),
                    ],
                },
            },
        },
        importData: {
            name: "ImportData",
            requestType: exports.ImportDataRequest,
            requestStream: false,
            responseType: exports.ImportDataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            199,
                            1,
                            10,
                            13,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            47,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            18,
                            11,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            32,
                            68,
                            97,
                            116,
                            97,
                            26,
                            168,
                            1,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            116,
                            111,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            32,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            51,
                            32,
                            115,
                            116,
                            111,
                            114,
                            97,
                            103,
                            101,
                            44,
                            32,
                            102,
                            114,
                            111,
                            109,
                            32,
                            119,
                            104,
                            105,
                            99,
                            104,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            108,
                            111,
                            97,
                            100,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([11, 10, 9, 105, 97, 109, 46, 119, 114, 105, 116, 101])],
                    578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 105, 109, 112, 111, 114, 116])],
                },
            },
        },
        exportData: {
            name: "ExportData",
            requestType: exports.ExportDataRequest,
            requestStream: false,
            responseType: exports.ExportDataResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            205,
                            1,
                            10,
                            13,
                            73,
                            109,
                            112,
                            111,
                            114,
                            116,
                            47,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            18,
                            11,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            32,
                            68,
                            97,
                            116,
                            97,
                            26,
                            174,
                            1,
                            69,
                            120,
                            112,
                            111,
                            114,
                            116,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            108,
                            101,
                            118,
                            101,
                            108,
                            32,
                            116,
                            111,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            73,
                            116,
                            32,
                            99,
                            97,
                            110,
                            32,
                            98,
                            101,
                            32,
                            101,
                            105,
                            116,
                            104,
                            101,
                            114,
                            32,
                            100,
                            105,
                            114,
                            101,
                            99,
                            116,
                            108,
                            121,
                            32,
                            101,
                            120,
                            112,
                            111,
                            114,
                            116,
                            101,
                            100,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            114,
                            101,
                            115,
                            112,
                            111,
                            110,
                            115,
                            101,
                            32,
                            111,
                            114,
                            32,
                            121,
                            111,
                            117,
                            32,
                            99,
                            97,
                            110,
                            32,
                            112,
                            111,
                            105,
                            110,
                            116,
                            32,
                            116,
                            111,
                            32,
                            97,
                            32,
                            102,
                            105,
                            108,
                            101,
                            32,
                            111,
                            110,
                            32,
                            97,
                            110,
                            32,
                            83,
                            51,
                            32,
                            115,
                            116,
                            111,
                            114,
                            97,
                            103,
                            101,
                            44,
                            32,
                            119,
                            104,
                            101,
                            114,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            97,
                            116,
                            97,
                            32,
                            115,
                            104,
                            111,
                            117,
                            108,
                            100,
                            32,
                            98,
                            101,
                            32,
                            119,
                            114,
                            105,
                            116,
                            116,
                            101,
                            110,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([10, 10, 8, 105, 97, 109, 46, 114, 101, 97, 100])],
                    578365826: [Buffer.from([12, 58, 1, 42, 34, 7, 47, 101, 120, 112, 111, 114, 116])],
                },
            },
        },
        listEventTypes: {
            name: "ListEventTypes",
            requestType: exports.ListEventTypesRequest,
            requestStream: false,
            responseType: exports.ListEventTypesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            144,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            11,
                            69,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            26,
                            58,
                            1,
                            42,
                            34,
                            21,
                            47,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            47,
                            116,
                            121,
                            112,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        listEvents: {
            name: "ListEvents",
            requestType: exports.ListEventsRequest,
            requestStream: false,
            responseType: exports.ListEventsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            146,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            13,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            26,
                            121,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([20, 58, 1, 42, 34, 15, 47, 101, 118, 101, 110, 116, 115, 47, 95, 115, 101, 97, 114, 99, 104]),
                    ],
                },
            },
        },
        listAggregateTypes: {
            name: "ListAggregateTypes",
            requestType: exports.ListAggregateTypesRequest,
            requestStream: false,
            responseType: exports.ListAggregateTypesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            162,
                            1,
                            10,
                            6,
                            69,
                            118,
                            101,
                            110,
                            116,
                            115,
                            18,
                            20,
                            76,
                            105,
                            115,
                            116,
                            32,
                            65,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            84,
                            121,
                            112,
                            101,
                            115,
                            26,
                            129,
                            1,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            116,
                            104,
                            101,
                            32,
                            112,
                            111,
                            115,
                            115,
                            105,
                            98,
                            108,
                            101,
                            32,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            90,
                            73,
                            84,
                            65,
                            68,
                            69,
                            76,
                            46,
                            32,
                            84,
                            104,
                            105,
                            115,
                            32,
                            105,
                            115,
                            32,
                            117,
                            115,
                            101,
                            100,
                            32,
                            116,
                            111,
                            32,
                            102,
                            105,
                            108,
                            116,
                            101,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            32,
                            116,
                            121,
                            112,
                            101,
                            115,
                            32,
                            105,
                            110,
                            32,
                            116,
                            104,
                            101,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            101,
                            118,
                            101,
                            110,
                            116,
                            115,
                            32,
                            114,
                            101,
                            113,
                            117,
                            101,
                            115,
                            116,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([13, 10, 11, 101, 118, 101, 110, 116, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            30,
                            58,
                            1,
                            42,
                            34,
                            25,
                            47,
                            97,
                            103,
                            103,
                            114,
                            101,
                            103,
                            97,
                            116,
                            101,
                            115,
                            47,
                            116,
                            121,
                            112,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        activateFeatureLoginDefaultOrg: {
            name: "ActivateFeatureLoginDefaultOrg",
            requestType: exports.ActivateFeatureLoginDefaultOrgRequest,
            requestStream: false,
            responseType: exports.ActivateFeatureLoginDefaultOrgResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    400002: [
                        Buffer.from([19, 10, 17, 105, 97, 109, 46, 102, 101, 97, 116, 117, 114, 101, 46, 119, 114, 105, 116, 101]),
                    ],
                    578365826: [
                        Buffer.from([
                            29,
                            26,
                            27,
                            47,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            47,
                            108,
                            111,
                            103,
                            105,
                            110,
                            95,
                            100,
                            101,
                            102,
                            97,
                            117,
                            108,
                            116,
                            95,
                            111,
                            114,
                            103,
                        ]),
                    ],
                },
            },
        },
        listMilestones: {
            name: "ListMilestones",
            requestType: exports.ListMilestonesRequest,
            requestStream: false,
            responseType: exports.ListMilestonesResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            85,
                            10,
                            10,
                            77,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            18,
                            17,
                            83,
                            101,
                            97,
                            114,
                            99,
                            104,
                            32,
                            77,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            26,
                            52,
                            82,
                            101,
                            116,
                            117,
                            114,
                            110,
                            115,
                            32,
                            97,
                            32,
                            108,
                            105,
                            115,
                            116,
                            32,
                            111,
                            102,
                            32,
                            114,
                            101,
                            97,
                            99,
                            104,
                            101,
                            100,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            32,
                            117,
                            115,
                            97,
                            103,
                            101,
                            32,
                            109,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            46,
                        ]),
                    ],
                    400002: [Buffer.from([17, 10, 15, 109, 105, 108, 101, 115, 116, 111, 110, 101, 115, 46, 114, 101, 97, 100])],
                    578365826: [
                        Buffer.from([
                            24,
                            58,
                            1,
                            42,
                            34,
                            19,
                            47,
                            109,
                            105,
                            108,
                            101,
                            115,
                            116,
                            111,
                            110,
                            101,
                            115,
                            47,
                            95,
                            115,
                            101,
                            97,
                            114,
                            99,
                            104,
                        ]),
                    ],
                },
            },
        },
        setRestrictions: {
            name: "SetRestrictions",
            requestType: exports.SetRestrictionsRequest,
            requestStream: false,
            responseType: exports.SetRestrictionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            220,
                            1,
                            10,
                            20,
                            70,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            31,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            115,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            26,
                            98,
                            85,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            100,
                            111,
                            110,
                            39,
                            116,
                            32,
                            99,
                            104,
                            97,
                            110,
                            103,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            32,
                            90,
                            101,
                            114,
                            111,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            114,
                            101,
                            109,
                            111,
                            118,
                            101,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            46,
                            74,
                            26,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            19,
                            10,
                            17,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            115,
                            101,
                            116,
                            46,
                            74,
                            35,
                            10,
                            3,
                            52,
                            48,
                            48,
                            18,
                            28,
                            10,
                            26,
                            78,
                            111,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            32,
                            105,
                            115,
                            32,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([
                            24,
                            10,
                            22,
                            105,
                            97,
                            109,
                            46,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            119,
                            114,
                            105,
                            116,
                            101,
                        ]),
                    ],
                    578365826: [
                        Buffer.from([18, 58, 1, 42, 26, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115]),
                    ],
                },
            },
        },
        getRestrictions: {
            name: "GetRestrictions",
            requestType: exports.GetRestrictionsRequest,
            requestStream: false,
            responseType: exports.GetRestrictionsResponse,
            responseStream: false,
            options: {
                _unknownFields: {
                    8338: [
                        Buffer.from([
                            149,
                            3,
                            10,
                            20,
                            70,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            82,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            18,
                            53,
                            71,
                            101,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            99,
                            117,
                            114,
                            114,
                            101,
                            110,
                            116,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            102,
                            111,
                            114,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            26,
                            194,
                            1,
                            85,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            118,
                            97,
                            108,
                            117,
                            101,
                            115,
                            32,
                            109,
                            101,
                            97,
                            110,
                            32,
                            116,
                            104,
                            97,
                            116,
                            32,
                            116,
                            104,
                            101,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            105,
                            115,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            46,
                            32,
                            73,
                            102,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            110,
                            101,
                            118,
                            101,
                            114,
                            32,
                            115,
                            101,
                            116,
                            44,
                            32,
                            116,
                            104,
                            101,
                            32,
                            105,
                            110,
                            115,
                            116,
                            97,
                            110,
                            99,
                            101,
                            115,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            110,
                            111,
                            116,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            101,
                            100,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            112,
                            114,
                            111,
                            112,
                            101,
                            114,
                            116,
                            105,
                            101,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            32,
                            97,
                            110,
                            100,
                            32,
                            116,
                            104,
                            101,
                            32,
                            100,
                            101,
                            116,
                            97,
                            105,
                            108,
                            115,
                            32,
                            111,
                            98,
                            106,
                            101,
                            99,
                            116,
                            32,
                            105,
                            115,
                            32,
                            101,
                            109,
                            112,
                            116,
                            121,
                            46,
                            74,
                            128,
                            1,
                            10,
                            3,
                            50,
                            48,
                            48,
                            18,
                            121,
                            10,
                            119,
                            84,
                            104,
                            101,
                            32,
                            115,
                            116,
                            97,
                            116,
                            117,
                            115,
                            32,
                            50,
                            48,
                            48,
                            32,
                            105,
                            115,
                            32,
                            97,
                            108,
                            115,
                            111,
                            32,
                            114,
                            101,
                            116,
                            117,
                            114,
                            110,
                            101,
                            100,
                            32,
                            105,
                            102,
                            32,
                            110,
                            111,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            119,
                            101,
                            114,
                            101,
                            32,
                            101,
                            118,
                            101,
                            114,
                            32,
                            115,
                            101,
                            116,
                            46,
                            32,
                            73,
                            110,
                            32,
                            116,
                            104,
                            105,
                            115,
                            32,
                            99,
                            97,
                            115,
                            101,
                            44,
                            32,
                            97,
                            108,
                            108,
                            32,
                            102,
                            101,
                            97,
                            116,
                            117,
                            114,
                            101,
                            32,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            32,
                            97,
                            114,
                            101,
                            32,
                            117,
                            110,
                            100,
                            101,
                            102,
                            105,
                            110,
                            101,
                            100,
                            46,
                        ]),
                    ],
                    400002: [
                        Buffer.from([
                            23,
                            10,
                            21,
                            105,
                            97,
                            109,
                            46,
                            114,
                            101,
                            115,
                            116,
                            114,
                            105,
                            99,
                            116,
                            105,
                            111,
                            110,
                            115,
                            46,
                            114,
                            101,
                            97,
                            100,
                        ]),
                    ],
                    578365826: [Buffer.from([15, 18, 13, 47, 114, 101, 115, 116, 114, 105, 99, 116, 105, 111, 110, 115])],
                },
            },
        },
    },
};
function bytesFromBase64(b64) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}
function base64FromBytes(arr) {
    return globalThis.Buffer.from(arr).toString("base64");
}
function toTimestamp(date) {
    const seconds = numberToLong(Math.trunc(date.getTime() / 1000));
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_js_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=admin.js.map