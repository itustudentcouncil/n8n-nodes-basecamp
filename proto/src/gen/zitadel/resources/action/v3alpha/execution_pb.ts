// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file zitadel/resources/action/v3alpha/execution.proto (package zitadel.resources.action.v3alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../google/api/annotations_pb";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_validate_validate } from "../../../../validate/validate_pb";
import { file_zitadel_protoc_gen_zitadel_v2_options } from "../../../protoc_gen_zitadel/v2/options_pb";
import type { Details } from "../../object/v3alpha/object_pb";
import { file_zitadel_resources_object_v3alpha_object } from "../../object/v3alpha/object_pb";
import { file_zitadel_object_v3alpha_object } from "../../../object/v3alpha/object_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file zitadel/resources/action/v3alpha/execution.proto.
 */
export const file_zitadel_resources_action_v3alpha_execution: GenFile = /*@__PURE__*/
  fileDesc("CjB6aXRhZGVsL3Jlc291cmNlcy9hY3Rpb24vdjNhbHBoYS9leGVjdXRpb24ucHJvdG8SIHppdGFkZWwucmVzb3VyY2VzLmFjdGlvbi52M2FscGhhIlMKCUV4ZWN1dGlvbhJGCgd0YXJnZXRzGAEgAygLMjUueml0YWRlbC5yZXNvdXJjZXMuYWN0aW9uLnYzYWxwaGEuRXhlY3V0aW9uVGFyZ2V0VHlwZSLKAQoMR2V0RXhlY3V0aW9uEjoKB2RldGFpbHMYASABKAsyKS56aXRhZGVsLnJlc291cmNlcy5vYmplY3QudjNhbHBoYS5EZXRhaWxzEj4KCWNvbmRpdGlvbhgCIAEoCzIrLnppdGFkZWwucmVzb3VyY2VzLmFjdGlvbi52M2FscGhhLkNvbmRpdGlvbhI+CglleGVjdXRpb24YAyABKAsyKy56aXRhZGVsLnJlc291cmNlcy5hY3Rpb24udjNhbHBoYS5FeGVjdXRpb24idAoTRXhlY3V0aW9uVGFyZ2V0VHlwZRIQCgZ0YXJnZXQYASABKAlIABI+CgdpbmNsdWRlGAIgASgLMisueml0YWRlbC5yZXNvdXJjZXMuYWN0aW9uLnYzYWxwaGEuQ29uZGl0aW9uSABCCwoEdHlwZRID+EIBIr4CCglDb25kaXRpb24SRQoHcmVxdWVzdBgBIAEoCzIyLnppdGFkZWwucmVzb3VyY2VzLmFjdGlvbi52M2FscGhhLlJlcXVlc3RFeGVjdXRpb25IABJHCghyZXNwb25zZRgCIAEoCzIzLnppdGFkZWwucmVzb3VyY2VzLmFjdGlvbi52M2FscGhhLlJlc3BvbnNlRXhlY3V0aW9uSAASRwoIZnVuY3Rpb24YAyABKAsyMy56aXRhZGVsLnJlc291cmNlcy5hY3Rpb24udjNhbHBoYS5GdW5jdGlvbkV4ZWN1dGlvbkgAEkEKBWV2ZW50GAQgASgLMjAueml0YWRlbC5yZXNvdXJjZXMuYWN0aW9uLnYzYWxwaGEuRXZlbnRFeGVjdXRpb25IAEIVCg5jb25kaXRpb25fdHlwZRID+EIBIuMBChBSZXF1ZXN0RXhlY3V0aW9uElgKBm1ldGhvZBgBIAEoCUJGkkE5SjEiL3ppdGFkZWwuc2Vzc2lvbi52Mi5TZXNzaW9uU2VydmljZS9MaXN0U2Vzc2lvbnMieOgHgAEB+kIHcgUQARjoB0gAEksKB3NlcnZpY2UYAiABKAlCOJJBK0ojInppdGFkZWwuc2Vzc2lvbi52Mi5TZXNzaW9uU2VydmljZSJ46AeAAQH6QgdyBRABGOgHSAASFgoDYWxsGAMgASgIQgf6QgRqAggBSABCEAoJY29uZGl0aW9uEgP4QgEi5AEKEVJlc3BvbnNlRXhlY3V0aW9uElgKBm1ldGhvZBgBIAEoCUJGkkE5SjEiL3ppdGFkZWwuc2Vzc2lvbi52Mi5TZXNzaW9uU2VydmljZS9MaXN0U2Vzc2lvbnMieOgHgAEB+kIHcgUQARjoB0gAEksKB3NlcnZpY2UYAiABKAlCOJJBK0ojInppdGFkZWwuc2Vzc2lvbi52Mi5TZXNzaW9uU2VydmljZSJ46AeAAQH6QgdyBRABGOgHSAASFgoDYWxsGAMgASgIQgf6QgRqAggBSABCEAoJY29uZGl0aW9uEgP4QgEiLQoRRnVuY3Rpb25FeGVjdXRpb24SGAoEbmFtZRgBIAEoCUIK+kIHcgUQARjoByKoAQoORXZlbnRFeGVjdXRpb24SOAoFZXZlbnQYASABKAlCJ5JBGkoSInVzZXIuaHVtYW4uYWRkZWQieOgHgAEB+kIHcgUQARjoB0gAEjIKBWdyb3VwGAIgASgJQiGSQRRKDCJ1c2VyLmh1bWFuInjoB4ABAfpCB3IFEAEY6AdIABIWCgNhbGwYAyABKAhCB/pCBGoCCAFIAEIQCgljb25kaXRpb24SA/hCAUJFWkNnaXRodWIuY29tL3ppdGFkZWwveml0YWRlbC9wa2cvZ3JwYy9yZXNvdXJjZXMvYWN0aW9uL3YzYWxwaGE7YWN0aW9uYgZwcm90bzM", [file_google_api_annotations, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_struct, file_protoc_gen_openapiv2_options_annotations, file_validate_validate, file_zitadel_protoc_gen_zitadel_v2_options, file_zitadel_resources_object_v3alpha_object, file_google_protobuf_timestamp, file_zitadel_object_v3alpha_object]);

/**
 * @generated from message zitadel.resources.action.v3alpha.Execution
 */
export type Execution = Message<"zitadel.resources.action.v3alpha.Execution"> & {
  /**
   * Ordered list of targets/includes called during the execution.
   *
   * @generated from field: repeated zitadel.resources.action.v3alpha.ExecutionTargetType targets = 1;
   */
  targets: ExecutionTargetType[];
};

/**
 * Describes the message zitadel.resources.action.v3alpha.Execution.
 * Use `create(ExecutionSchema)` to create a new message.
 */
export const ExecutionSchema: GenMessage<Execution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 0);

/**
 * @generated from message zitadel.resources.action.v3alpha.GetExecution
 */
export type GetExecution = Message<"zitadel.resources.action.v3alpha.GetExecution"> & {
  /**
   * @generated from field: zitadel.resources.object.v3alpha.Details details = 1;
   */
  details?: Details;

  /**
   * @generated from field: zitadel.resources.action.v3alpha.Condition condition = 2;
   */
  condition?: Condition;

  /**
   * @generated from field: zitadel.resources.action.v3alpha.Execution execution = 3;
   */
  execution?: Execution;
};

/**
 * Describes the message zitadel.resources.action.v3alpha.GetExecution.
 * Use `create(GetExecutionSchema)` to create a new message.
 */
export const GetExecutionSchema: GenMessage<GetExecution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 1);

/**
 * @generated from message zitadel.resources.action.v3alpha.ExecutionTargetType
 */
export type ExecutionTargetType = Message<"zitadel.resources.action.v3alpha.ExecutionTargetType"> & {
  /**
   * @generated from oneof zitadel.resources.action.v3alpha.ExecutionTargetType.type
   */
  type: {
    /**
     * Unique identifier of existing target to call.
     *
     * @generated from field: string target = 1;
     */
    value: string;
    case: "target";
  } | {
    /**
     * Unique identifier of existing execution to include targets of.
     *
     * @generated from field: zitadel.resources.action.v3alpha.Condition include = 2;
     */
    value: Condition;
    case: "include";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.action.v3alpha.ExecutionTargetType.
 * Use `create(ExecutionTargetTypeSchema)` to create a new message.
 */
export const ExecutionTargetTypeSchema: GenMessage<ExecutionTargetType> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 2);

/**
 * @generated from message zitadel.resources.action.v3alpha.Condition
 */
export type Condition = Message<"zitadel.resources.action.v3alpha.Condition"> & {
  /**
   * Condition-types under which conditions the execution should happen, only one possible.
   *
   * @generated from oneof zitadel.resources.action.v3alpha.Condition.condition_type
   */
  conditionType: {
    /**
     * Condition-type to execute if a request on the defined API point happens.
     *
     * @generated from field: zitadel.resources.action.v3alpha.RequestExecution request = 1;
     */
    value: RequestExecution;
    case: "request";
  } | {
    /**
     * Condition-type to execute on response if a request on the defined API point happens.
     *
     * @generated from field: zitadel.resources.action.v3alpha.ResponseExecution response = 2;
     */
    value: ResponseExecution;
    case: "response";
  } | {
    /**
     * Condition-type to execute if function is used, replaces actions v1.
     *
     * @generated from field: zitadel.resources.action.v3alpha.FunctionExecution function = 3;
     */
    value: FunctionExecution;
    case: "function";
  } | {
    /**
     * Condition-type to execute if an event is created in the system.
     *
     * @generated from field: zitadel.resources.action.v3alpha.EventExecution event = 4;
     */
    value: EventExecution;
    case: "event";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.action.v3alpha.Condition.
 * Use `create(ConditionSchema)` to create a new message.
 */
export const ConditionSchema: GenMessage<Condition> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 3);

/**
 * @generated from message zitadel.resources.action.v3alpha.RequestExecution
 */
export type RequestExecution = Message<"zitadel.resources.action.v3alpha.RequestExecution"> & {
  /**
   * Condition for the request execution. Only one is possible.
   *
   * @generated from oneof zitadel.resources.action.v3alpha.RequestExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available services and methods as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.action.v3alpha.RequestExecution.
 * Use `create(RequestExecutionSchema)` to create a new message.
 */
export const RequestExecutionSchema: GenMessage<RequestExecution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 4);

/**
 * @generated from message zitadel.resources.action.v3alpha.ResponseExecution
 */
export type ResponseExecution = Message<"zitadel.resources.action.v3alpha.ResponseExecution"> & {
  /**
   * Condition for the response execution. Only one is possible.
   *
   * @generated from oneof zitadel.resources.action.v3alpha.ResponseExecution.condition
   */
  condition: {
    /**
     * GRPC-method as condition.
     *
     * @generated from field: string method = 1;
     */
    value: string;
    case: "method";
  } | {
    /**
     * GRPC-service as condition.
     *
     * @generated from field: string service = 2;
     */
    value: string;
    case: "service";
  } | {
    /**
     * All calls to any available services and methods as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.action.v3alpha.ResponseExecution.
 * Use `create(ResponseExecutionSchema)` to create a new message.
 */
export const ResponseExecutionSchema: GenMessage<ResponseExecution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 5);

/**
 * Executed on the specified function
 *
 * @generated from message zitadel.resources.action.v3alpha.FunctionExecution
 */
export type FunctionExecution = Message<"zitadel.resources.action.v3alpha.FunctionExecution"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message zitadel.resources.action.v3alpha.FunctionExecution.
 * Use `create(FunctionExecutionSchema)` to create a new message.
 */
export const FunctionExecutionSchema: GenMessage<FunctionExecution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 6);

/**
 * @generated from message zitadel.resources.action.v3alpha.EventExecution
 */
export type EventExecution = Message<"zitadel.resources.action.v3alpha.EventExecution"> & {
  /**
   * Condition for the event execution. Only one is possible.
   *
   * @generated from oneof zitadel.resources.action.v3alpha.EventExecution.condition
   */
  condition: {
    /**
     * Event name as condition.
     *
     * @generated from field: string event = 1;
     */
    value: string;
    case: "event";
  } | {
    /**
     * Event group as condition, all events under this group.
     *
     * @generated from field: string group = 2;
     */
    value: string;
    case: "group";
  } | {
    /**
     * all events as condition.
     *
     * @generated from field: bool all = 3;
     */
    value: boolean;
    case: "all";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.action.v3alpha.EventExecution.
 * Use `create(EventExecutionSchema)` to create a new message.
 */
export const EventExecutionSchema: GenMessage<EventExecution> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_action_v3alpha_execution, 7);

