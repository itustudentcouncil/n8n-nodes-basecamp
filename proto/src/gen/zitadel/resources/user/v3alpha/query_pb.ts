// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file zitadel/resources/user/v3alpha/query.proto (package zitadel.resources.user.v3alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../google/api/field_behavior_pb";
import { file_protoc_gen_openapiv2_options_annotations } from "../../../../protoc-gen-openapiv2/options/annotations_pb";
import { file_validate_validate } from "../../../../validate/validate_pb";
import type { State } from "./user_pb";
import { file_zitadel_resources_user_v3alpha_user } from "./user_pb";
import type { TextFilterMethod } from "../../object/v3alpha/object_pb";
import { file_zitadel_resources_object_v3alpha_object } from "../../object/v3alpha/object_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file zitadel/resources/user/v3alpha/query.proto.
 */
export const file_zitadel_resources_user_v3alpha_query: GenFile = /*@__PURE__*/
  fileDesc("Cip6aXRhZGVsL3Jlc291cmNlcy91c2VyL3YzYWxwaGEvcXVlcnkucHJvdG8SHnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYSK0BgoMU2VhcmNoRmlsdGVyEj0KCW9yX2ZpbHRlchgBIAEoCzIoLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5PckZpbHRlckgAEj8KCmFuZF9maWx0ZXIYAiABKAsyKS56aXRhZGVsLnJlc291cmNlcy51c2VyLnYzYWxwaGEuQW5kRmlsdGVySAASPwoKbm90X2ZpbHRlchgDIAEoCzIpLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5Ob3RGaWx0ZXJIABJGCg51c2VyX2lkX2ZpbHRlchgEIAEoCzIsLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5Vc2VySURGaWx0ZXJIABJWChZvcmdhbml6YXRpb25faWRfZmlsdGVyGAUgASgLMjQueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLk9yZ2FuaXphdGlvbklERmlsdGVySAASSQoPdXNlcm5hbWVfZmlsdGVyGAYgASgLMi4ueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLlVzZXJuYW1lRmlsdGVySAASQwoMZW1haWxfZmlsdGVyGAcgASgLMisueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLkVtYWlsRmlsdGVySAASQwoMcGhvbmVfZmlsdGVyGAggASgLMisueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLlBob25lRmlsdGVySAASQwoMc3RhdGVfZmlsdGVyGAkgASgLMisueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLlN0YXRlRmlsdGVySAASSgoQc2NoZW1hX2lkX2ZpbHRlchgKIAEoCzIuLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5TY2hlbWFJREZpbHRlckgAEk4KEnNjaGVtYV90eXBlX2ZpbHRlchgLIAEoCzIwLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5TY2hlbWFUeXBlRmlsdGVySABCDQoGRmlsdGVyEgP4QgEi/wEKCE9yRmlsdGVyEvIBCgdxdWVyaWVzGAEgAygLMiwueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLlNlYXJjaEZpbHRlckKyAZJBrgFKqwFbeyJ1c2VySWRGaWx0ZXIiOiB7ImlkIjogIjE2Mzg0MDc3NjgzNTQzMjcwNSIsIm1ldGhvZCI6ICJURVhUX0ZJTFRFUl9NRVRIT0RfRVFVQUxTIn19LHsidXNlcklkRmlsdGVyIjogeyJpZCI6ICIxNjM4NDA3NzY4MzU5NDM0ODMiLCJtZXRob2QiOiAiVEVYVF9GSUxURVJfTUVUSE9EX0VRVUFMUyJ9fV0iggIKCUFuZEZpbHRlchL0AQoHcXVlcmllcxgBIAMoCzIsLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5TZWFyY2hGaWx0ZXJCtAGSQbABSq0BW3sib3JnYW5pemF0aW9uSWRGaWx0ZXIiOiB7ImlkIjogIjE2Mzg0MDc3NjgzNTQzMjcwNSIsIm1ldGhvZCI6ICJURVhUX0ZJTFRFUl9NRVRIT0RfRVFVQUxTIn19LHsidXNlcm5hbWVGaWx0ZXIiOiB7InVzZXJuYW1lIjogImdpZ2kiLCJtZXRob2QiOiAiVEVYVF9GSUxURVJfTUVUSE9EX0VRVUFMUyJ9fV0ifwoJTm90RmlsdGVyEnIKBXF1ZXJ5GAEgASgLMiwueml0YWRlbC5yZXNvdXJjZXMudXNlci52M2FscGhhLlNlYXJjaEZpbHRlckI1kkEySjB7InNjaGVtYUlERmlsdGVyIjogeyJpZCI6ICIxNjM4NDA3NzY4MzU0MzI3MDUifX0ilwEKDFVzZXJJREZpbHRlchI5CgJpZBgBIAEoCUItkkEcShQiMTYzODQwNzc2ODM1NDMyNzA1InjIAYABAeJBAQL6QgdyBRABGMgBEkwKBm1ldGhvZBgCIAEoDjIyLnppdGFkZWwucmVzb3VyY2VzLm9iamVjdC52M2FscGhhLlRleHRGaWx0ZXJNZXRob2RCCPpCBYIBAhABIp8BChRPcmdhbml6YXRpb25JREZpbHRlchI5CgJpZBgBIAEoCUItkkEcShQiMTYzODQwNzc2ODM1NDMyNzA1InjIAYABAeJBAQL6QgdyBRABGMgBEkwKBm1ldGhvZBgCIAEoDjIyLnppdGFkZWwucmVzb3VyY2VzLm9iamVjdC52M2FscGhhLlRleHRGaWx0ZXJNZXRob2RCCPpCBYIBAhABIrsBCg5Vc2VybmFtZUZpbHRlchI5Cgh1c2VybmFtZRgBIAEoCUInkkEWSg4iZ2lnaS1naXJhZmZlInjIAYABAeJBAQL6QgdyBRABGMgBEkwKBm1ldGhvZBgCIAEoDjIyLnppdGFkZWwucmVzb3VyY2VzLm9iamVjdC52M2FscGhhLlRleHRGaWx0ZXJNZXRob2RCCPpCBYIBAhABEiAKGGlzX29yZ2FuaXphdGlvbl9zcGVjaWZpYxgDIAEoCCKvAQoLRW1haWxGaWx0ZXISUgoHYWRkcmVzcxgBIAEoCUJBkkEyMhllbWFpbCBhZGRyZXNzIG9mIHRoZSB1c2VyShIiZ2lnaUB6aXRhZGVsLmNvbSJ4yAHiQQEC+kIFcgMYyAESTAoGbWV0aG9kGAIgASgOMjIueml0YWRlbC5yZXNvdXJjZXMub2JqZWN0LnYzYWxwaGEuVGV4dEZpbHRlck1ldGhvZEII+kIFggECEAEikgEKC1Bob25lRmlsdGVyEjUKBm51bWJlchgBIAEoCUIlkkEVSg4iKzQxNzkxMjM0NTY3IngUgAEB4kEBAvpCBnIEEAEYFBJMCgZtZXRob2QYAiABKA4yMi56aXRhZGVsLnJlc291cmNlcy5vYmplY3QudjNhbHBoYS5UZXh0RmlsdGVyTWV0aG9kQgj6QgWCAQIQASJgCgtTdGF0ZUZpbHRlchJRCgVzdGF0ZRgBIAEoDjIlLnppdGFkZWwucmVzb3VyY2VzLnVzZXIudjNhbHBoYS5TdGF0ZUIbkkEQSg4iU1RBVEVfQUNUSVZFIvpCBYIBAhABIksKDlNjaGVtYUlERmlsdGVyEjkKAmlkGAEgASgJQi2SQRxKFCIxNjM4NDA3NzY4MzU0MzI3MDUieMgBgAEB4kEBAvpCB3IFEAEYyAEilAEKEFNjaGVtYVR5cGVGaWx0ZXISMgoEdHlwZRgBIAEoCUIkkkETSgsiZW1wbG95ZWVzInjIAYABAeJBAQL6QgdyBRABGMgBEkwKBm1ldGhvZBgCIAEoDjIyLnppdGFkZWwucmVzb3VyY2VzLm9iamVjdC52M2FscGhhLlRleHRGaWx0ZXJNZXRob2RCCPpCBYIBAhABKuwBCglGaWVsZE5hbWUSGgoWRklFTERfTkFNRV9VTlNQRUNJRklFRBAAEhEKDUZJRUxEX05BTUVfSUQQARIcChhGSUVMRF9OQU1FX0NSRUFUSU9OX0RBVEUQAhIaChZGSUVMRF9OQU1FX0NIQU5HRV9EQVRFEAMSFAoQRklFTERfTkFNRV9FTUFJTBAEEhQKEEZJRUxEX05BTUVfUEhPTkUQBRIUChBGSUVMRF9OQU1FX1NUQVRFEAYSGAoURklFTERfTkFNRV9TQ0hFTUFfSUQQBxIaChZGSUVMRF9OQU1FX1NDSEVNQV9UWVBFEAhCQVo/Z2l0aHViLmNvbS96aXRhZGVsL3ppdGFkZWwvcGtnL2dycGMvcmVzb3VyY2VzL3VzZXIvdjNhbHBoYTt1c2VyYgZwcm90bzM", [file_google_api_field_behavior, file_protoc_gen_openapiv2_options_annotations, file_validate_validate, file_zitadel_resources_user_v3alpha_user, file_zitadel_resources_object_v3alpha_object]);

/**
 * @generated from message zitadel.resources.user.v3alpha.SearchFilter
 */
export type SearchFilter = Message<"zitadel.resources.user.v3alpha.SearchFilter"> & {
  /**
   * @generated from oneof zitadel.resources.user.v3alpha.SearchFilter.Filter
   */
  Filter: {
    /**
     * Union the results of each sub filter ('OR').
     *
     * @generated from field: zitadel.resources.user.v3alpha.OrFilter or_filter = 1;
     */
    value: OrFilter;
    case: "orFilter";
  } | {
    /**
     * Limit the result to match all sub queries ('AND').
     * Note that if you specify multiple queries, they will be implicitly used as andQueries.
     * Use the andFilter in combination with orFilter and notFilter.
     *
     * @generated from field: zitadel.resources.user.v3alpha.AndFilter and_filter = 2;
     */
    value: AndFilter;
    case: "andFilter";
  } | {
    /**
     * Exclude / Negate the result of the sub query ('NOT').
     *
     * @generated from field: zitadel.resources.user.v3alpha.NotFilter not_filter = 3;
     */
    value: NotFilter;
    case: "notFilter";
  } | {
    /**
     * Limit the result to a specific user ID.
     *
     * @generated from field: zitadel.resources.user.v3alpha.UserIDFilter user_id_filter = 4;
     */
    value: UserIDFilter;
    case: "userIdFilter";
  } | {
    /**
     * Limit the result to a specific organization.
     *
     * @generated from field: zitadel.resources.user.v3alpha.OrganizationIDFilter organization_id_filter = 5;
     */
    value: OrganizationIDFilter;
    case: "organizationIdFilter";
  } | {
    /**
     * Limit the result to a specific username.
     *
     * @generated from field: zitadel.resources.user.v3alpha.UsernameFilter username_filter = 6;
     */
    value: UsernameFilter;
    case: "usernameFilter";
  } | {
    /**
     * Limit the result to a specific contact email.
     *
     * @generated from field: zitadel.resources.user.v3alpha.EmailFilter email_filter = 7;
     */
    value: EmailFilter;
    case: "emailFilter";
  } | {
    /**
     * Limit the result to a specific contact phone.
     *
     * @generated from field: zitadel.resources.user.v3alpha.PhoneFilter phone_filter = 8;
     */
    value: PhoneFilter;
    case: "phoneFilter";
  } | {
    /**
     * Limit the result to a specific state of the user.
     *
     * @generated from field: zitadel.resources.user.v3alpha.StateFilter state_filter = 9;
     */
    value: StateFilter;
    case: "stateFilter";
  } | {
    /**
     * Limit the result to a specific schema ID.
     *
     * @generated from field: zitadel.resources.user.v3alpha.SchemaIDFilter schema_id_filter = 10;
     */
    value: SchemaIDFilter;
    case: "schemaIdFilter";
  } | {
    /**
     * Limit the result to a specific schema type.
     *
     * @generated from field: zitadel.resources.user.v3alpha.SchemaTypeFilter schema_type_filter = 11;
     */
    value: SchemaTypeFilter;
    case: "schemaTypeFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SearchFilter.
 * Use `create(SearchFilterSchema)` to create a new message.
 */
export const SearchFilterSchema: GenMessage<SearchFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 0);

/**
 * @generated from message zitadel.resources.user.v3alpha.OrFilter
 */
export type OrFilter = Message<"zitadel.resources.user.v3alpha.OrFilter"> & {
  /**
   * @generated from field: repeated zitadel.resources.user.v3alpha.SearchFilter queries = 1;
   */
  queries: SearchFilter[];
};

/**
 * Describes the message zitadel.resources.user.v3alpha.OrFilter.
 * Use `create(OrFilterSchema)` to create a new message.
 */
export const OrFilterSchema: GenMessage<OrFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 1);

/**
 * @generated from message zitadel.resources.user.v3alpha.AndFilter
 */
export type AndFilter = Message<"zitadel.resources.user.v3alpha.AndFilter"> & {
  /**
   * @generated from field: repeated zitadel.resources.user.v3alpha.SearchFilter queries = 1;
   */
  queries: SearchFilter[];
};

/**
 * Describes the message zitadel.resources.user.v3alpha.AndFilter.
 * Use `create(AndFilterSchema)` to create a new message.
 */
export const AndFilterSchema: GenMessage<AndFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 2);

/**
 * @generated from message zitadel.resources.user.v3alpha.NotFilter
 */
export type NotFilter = Message<"zitadel.resources.user.v3alpha.NotFilter"> & {
  /**
   * @generated from field: zitadel.resources.user.v3alpha.SearchFilter query = 1;
   */
  query?: SearchFilter;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.NotFilter.
 * Use `create(NotFilterSchema)` to create a new message.
 */
export const NotFilterSchema: GenMessage<NotFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 3);

/**
 * @generated from message zitadel.resources.user.v3alpha.UserIDFilter
 */
export type UserIDFilter = Message<"zitadel.resources.user.v3alpha.UserIDFilter"> & {
  /**
   * Defines the ID of the user to query for.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Defines which text comparison method used for the id query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.UserIDFilter.
 * Use `create(UserIDFilterSchema)` to create a new message.
 */
export const UserIDFilterSchema: GenMessage<UserIDFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 4);

/**
 * @generated from message zitadel.resources.user.v3alpha.OrganizationIDFilter
 */
export type OrganizationIDFilter = Message<"zitadel.resources.user.v3alpha.OrganizationIDFilter"> & {
  /**
   * Defines the ID of the organization to query for.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Defines which text comparison method used for the id query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.OrganizationIDFilter.
 * Use `create(OrganizationIDFilterSchema)` to create a new message.
 */
export const OrganizationIDFilterSchema: GenMessage<OrganizationIDFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 5);

/**
 * @generated from message zitadel.resources.user.v3alpha.UsernameFilter
 */
export type UsernameFilter = Message<"zitadel.resources.user.v3alpha.UsernameFilter"> & {
  /**
   * Defines the username to query for.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Defines which text comparison method used for the username query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;

  /**
   * Defines that the username must only be unique in the organisation.
   *
   * @generated from field: bool is_organization_specific = 3;
   */
  isOrganizationSpecific: boolean;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.UsernameFilter.
 * Use `create(UsernameFilterSchema)` to create a new message.
 */
export const UsernameFilterSchema: GenMessage<UsernameFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 6);

/**
 * @generated from message zitadel.resources.user.v3alpha.EmailFilter
 */
export type EmailFilter = Message<"zitadel.resources.user.v3alpha.EmailFilter"> & {
  /**
   * Defines the email of the user to query for.
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * Defines which text comparison method used for the email query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.EmailFilter.
 * Use `create(EmailFilterSchema)` to create a new message.
 */
export const EmailFilterSchema: GenMessage<EmailFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 7);

/**
 * @generated from message zitadel.resources.user.v3alpha.PhoneFilter
 */
export type PhoneFilter = Message<"zitadel.resources.user.v3alpha.PhoneFilter"> & {
  /**
   * Defines the phone of the user to query for.
   *
   * @generated from field: string number = 1;
   */
  number: string;

  /**
   * Defines which text comparison method used for the phone query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.PhoneFilter.
 * Use `create(PhoneFilterSchema)` to create a new message.
 */
export const PhoneFilterSchema: GenMessage<PhoneFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 8);

/**
 * @generated from message zitadel.resources.user.v3alpha.StateFilter
 */
export type StateFilter = Message<"zitadel.resources.user.v3alpha.StateFilter"> & {
  /**
   * Defines the state to query for.
   *
   * @generated from field: zitadel.resources.user.v3alpha.State state = 1;
   */
  state: State;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.StateFilter.
 * Use `create(StateFilterSchema)` to create a new message.
 */
export const StateFilterSchema: GenMessage<StateFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 9);

/**
 * @generated from message zitadel.resources.user.v3alpha.SchemaIDFilter
 */
export type SchemaIDFilter = Message<"zitadel.resources.user.v3alpha.SchemaIDFilter"> & {
  /**
   * Defines the ID of the schema to query for.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SchemaIDFilter.
 * Use `create(SchemaIDFilterSchema)` to create a new message.
 */
export const SchemaIDFilterSchema: GenMessage<SchemaIDFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 10);

/**
 * @generated from message zitadel.resources.user.v3alpha.SchemaTypeFilter
 */
export type SchemaTypeFilter = Message<"zitadel.resources.user.v3alpha.SchemaTypeFilter"> & {
  /**
   * Defines which type to query for.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Defines which text comparison method used for the type query.
   *
   * @generated from field: zitadel.resources.object.v3alpha.TextFilterMethod method = 2;
   */
  method: TextFilterMethod;
};

/**
 * Describes the message zitadel.resources.user.v3alpha.SchemaTypeFilter.
 * Use `create(SchemaTypeFilterSchema)` to create a new message.
 */
export const SchemaTypeFilterSchema: GenMessage<SchemaTypeFilter> = /*@__PURE__*/
  messageDesc(file_zitadel_resources_user_v3alpha_query, 11);

/**
 * @generated from enum zitadel.resources.user.v3alpha.FieldName
 */
export enum FieldName {
  /**
   * @generated from enum value: FIELD_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FIELD_NAME_ID = 1;
   */
  ID = 1,

  /**
   * @generated from enum value: FIELD_NAME_CREATION_DATE = 2;
   */
  CREATION_DATE = 2,

  /**
   * @generated from enum value: FIELD_NAME_CHANGE_DATE = 3;
   */
  CHANGE_DATE = 3,

  /**
   * @generated from enum value: FIELD_NAME_EMAIL = 4;
   */
  EMAIL = 4,

  /**
   * @generated from enum value: FIELD_NAME_PHONE = 5;
   */
  PHONE = 5,

  /**
   * @generated from enum value: FIELD_NAME_STATE = 6;
   */
  STATE = 6,

  /**
   * @generated from enum value: FIELD_NAME_SCHEMA_ID = 7;
   */
  SCHEMA_ID = 7,

  /**
   * @generated from enum value: FIELD_NAME_SCHEMA_TYPE = 8;
   */
  SCHEMA_TYPE = 8,
}

/**
 * Describes the enum zitadel.resources.user.v3alpha.FieldName.
 */
export const FieldNameSchema: GenEnum<FieldName> = /*@__PURE__*/
  enumDesc(file_zitadel_resources_user_v3alpha_query, 0);

