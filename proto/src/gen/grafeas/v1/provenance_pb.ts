// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/provenance.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/provenance.proto.
 */
export const file_grafeas_v1_provenance: GenFile = /*@__PURE__*/
  fileDesc("ChtncmFmZWFzL3YxL3Byb3ZlbmFuY2UucHJvdG8SCmdyYWZlYXMudjEikAQKD0J1aWxkUHJvdmVuYW5jZRIKCgJpZBgBIAEoCRISCgpwcm9qZWN0X2lkGAIgASgJEiUKCGNvbW1hbmRzGAMgAygLMhMuZ3JhZmVhcy52MS5Db21tYW5kEi0KD2J1aWx0X2FydGlmYWN0cxgEIAMoCzIULmdyYWZlYXMudjEuQXJ0aWZhY3QSLwoLY3JlYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnN0YXJ0X3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdjcmVhdG9yGAggASgJEhAKCGxvZ3NfdXJpGAkgASgJEi0KEXNvdXJjZV9wcm92ZW5hbmNlGAogASgLMhIuZ3JhZmVhcy52MS5Tb3VyY2USEgoKdHJpZ2dlcl9pZBgLIAEoCRJECg1idWlsZF9vcHRpb25zGAwgAygLMi0uZ3JhZmVhcy52MS5CdWlsZFByb3ZlbmFuY2UuQnVpbGRPcHRpb25zRW50cnkSFwoPYnVpbGRlcl92ZXJzaW9uGA0gASgJGjMKEUJ1aWxkT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEilQIKBlNvdXJjZRIjChthcnRpZmFjdF9zdG9yYWdlX3NvdXJjZV91cmkYASABKAkSNwoLZmlsZV9oYXNoZXMYAiADKAsyIi5ncmFmZWFzLnYxLlNvdXJjZS5GaWxlSGFzaGVzRW50cnkSKgoHY29udGV4dBgDIAEoCzIZLmdyYWZlYXMudjEuU291cmNlQ29udGV4dBI2ChNhZGRpdGlvbmFsX2NvbnRleHRzGAQgAygLMhkuZ3JhZmVhcy52MS5Tb3VyY2VDb250ZXh0GkkKD0ZpbGVIYXNoZXNFbnRyeRILCgNrZXkYASABKAkSJQoFdmFsdWUYAiABKAsyFi5ncmFmZWFzLnYxLkZpbGVIYXNoZXM6AjgBIjEKCkZpbGVIYXNoZXMSIwoJZmlsZV9oYXNoGAEgAygLMhAuZ3JhZmVhcy52MS5IYXNoIiMKBEhhc2gSDAoEdHlwZRgBIAEoCRINCgV2YWx1ZRgCIAEoDCJdCgdDb21tYW5kEgwKBG5hbWUYASABKAkSCwoDZW52GAIgAygJEgwKBGFyZ3MYAyADKAkSCwoDZGlyGAQgASgJEgoKAmlkGAUgASgJEhAKCHdhaXRfZm9yGAYgAygJIjcKCEFydGlmYWN0EhAKCGNoZWNrc3VtGAEgASgJEgoKAmlkGAIgASgJEg0KBW5hbWVzGAMgAygJIpoCCg1Tb3VyY2VDb250ZXh0EjgKCmNsb3VkX3JlcG8YASABKAsyIi5ncmFmZWFzLnYxLkNsb3VkUmVwb1NvdXJjZUNvbnRleHRIABIxCgZnZXJyaXQYAiABKAsyHy5ncmFmZWFzLnYxLkdlcnJpdFNvdXJjZUNvbnRleHRIABIrCgNnaXQYAyABKAsyHC5ncmFmZWFzLnYxLkdpdFNvdXJjZUNvbnRleHRIABI1CgZsYWJlbHMYBCADKAsyJS5ncmFmZWFzLnYxLlNvdXJjZUNvbnRleHQuTGFiZWxzRW50cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIJCgdjb250ZXh0IooBCgxBbGlhc0NvbnRleHQSKwoEa2luZBgBIAEoDjIdLmdyYWZlYXMudjEuQWxpYXNDb250ZXh0LktpbmQSDAoEbmFtZRgCIAEoCSI/CgRLaW5kEhQKEEtJTkRfVU5TUEVDSUZJRUQQABIJCgVGSVhFRBABEgsKB01PVkFCTEUQAhIJCgVPVEhFUhAEIpMBChZDbG91ZFJlcG9Tb3VyY2VDb250ZXh0EiMKB3JlcG9faWQYASABKAsyEi5ncmFmZWFzLnYxLlJlcG9JZBIVCgtyZXZpc2lvbl9pZBgCIAEoCUgAEjEKDWFsaWFzX2NvbnRleHQYAyABKAsyGC5ncmFmZWFzLnYxLkFsaWFzQ29udGV4dEgAQgoKCHJldmlzaW9uIpUBChNHZXJyaXRTb3VyY2VDb250ZXh0EhAKCGhvc3RfdXJpGAEgASgJEhYKDmdlcnJpdF9wcm9qZWN0GAIgASgJEhUKC3JldmlzaW9uX2lkGAMgASgJSAASMQoNYWxpYXNfY29udGV4dBgEIAEoCzIYLmdyYWZlYXMudjEuQWxpYXNDb250ZXh0SABCCgoIcmV2aXNpb24iNAoQR2l0U291cmNlQ29udGV4dBILCgN1cmwYASABKAkSEwoLcmV2aXNpb25faWQYAiABKAkiUwoGUmVwb0lkEjQKD3Byb2plY3RfcmVwb19pZBgBIAEoCzIZLmdyYWZlYXMudjEuUHJvamVjdFJlcG9JZEgAEg0KA3VpZBgCIAEoCUgAQgQKAmlkIjYKDVByb2plY3RSZXBvSWQSEgoKcHJvamVjdF9pZBgBIAEoCRIRCglyZXBvX25hbWUYAiABKAlCUQoNaW8uZ3JhZmVhcy52MVABWjhnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2dyYWZlYXMvdjE7Z3JhZmVhc6ICA0dSQWIGcHJvdG8z", [file_google_protobuf_timestamp]);

/**
 * Provenance of a build. Contains all information needed to verify the full
 * details about the build from source to completion.
 *
 * @generated from message grafeas.v1.BuildProvenance
 */
export type BuildProvenance = Message<"grafeas.v1.BuildProvenance"> & {
  /**
   * Required. Unique identifier of the build.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Commands requested by the build.
   *
   * @generated from field: repeated grafeas.v1.Command commands = 3;
   */
  commands: Command[];

  /**
   * Output of the build.
   *
   * @generated from field: repeated grafeas.v1.Artifact built_artifacts = 4;
   */
  builtArtifacts: Artifact[];

  /**
   * Time at which the build was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Time at which execution of the build was started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 6;
   */
  startTime?: Timestamp;

  /**
   * Time at which execution of the build was finished.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 7;
   */
  endTime?: Timestamp;

  /**
   * E-mail address of the user who initiated this build. Note that this was the
   * user's e-mail address at the time the build was initiated; this address may
   * not represent the same end-user for all time.
   *
   * @generated from field: string creator = 8;
   */
  creator: string;

  /**
   * URI where any logs for this provenance were written.
   *
   * @generated from field: string logs_uri = 9;
   */
  logsUri: string;

  /**
   * Details of the Source input to the build.
   *
   * @generated from field: grafeas.v1.Source source_provenance = 10;
   */
  sourceProvenance?: Source;

  /**
   * Trigger identifier if the build was triggered automatically; empty if not.
   *
   * @generated from field: string trigger_id = 11;
   */
  triggerId: string;

  /**
   * Special options applied to this build. This is a catch-all field where
   * build providers can enter any desired additional details.
   *
   * @generated from field: map<string, string> build_options = 12;
   */
  buildOptions: { [key: string]: string };

  /**
   * Version string of the builder at the time this build was executed.
   *
   * @generated from field: string builder_version = 13;
   */
  builderVersion: string;
};

/**
 * Describes the message grafeas.v1.BuildProvenance.
 * Use `create(BuildProvenanceSchema)` to create a new message.
 */
export const BuildProvenanceSchema: GenMessage<BuildProvenance> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 0);

/**
 * Source describes the location of the source used for the build.
 *
 * @generated from message grafeas.v1.Source
 */
export type Source = Message<"grafeas.v1.Source"> & {
  /**
   * If provided, the input binary artifacts for the build came from this
   * location.
   *
   * @generated from field: string artifact_storage_source_uri = 1;
   */
  artifactStorageSourceUri: string;

  /**
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   *
   * @generated from field: map<string, grafeas.v1.FileHashes> file_hashes = 2;
   */
  fileHashes: { [key: string]: FileHashes };

  /**
   * If provided, the source code used for the build came from this location.
   *
   * @generated from field: grafeas.v1.SourceContext context = 3;
   */
  context?: SourceContext;

  /**
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   *
   * @generated from field: repeated grafeas.v1.SourceContext additional_contexts = 4;
   */
  additionalContexts: SourceContext[];
};

/**
 * Describes the message grafeas.v1.Source.
 * Use `create(SourceSchema)` to create a new message.
 */
export const SourceSchema: GenMessage<Source> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 1);

/**
 * Container message for hashes of byte content of files, used in source
 * messages to verify integrity of source input to the build.
 *
 * @generated from message grafeas.v1.FileHashes
 */
export type FileHashes = Message<"grafeas.v1.FileHashes"> & {
  /**
   * Required. Collection of file hashes.
   *
   * @generated from field: repeated grafeas.v1.Hash file_hash = 1;
   */
  fileHash: Hash[];
};

/**
 * Describes the message grafeas.v1.FileHashes.
 * Use `create(FileHashesSchema)` to create a new message.
 */
export const FileHashesSchema: GenMessage<FileHashes> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 2);

/**
 * Container message for hash values.
 *
 * @generated from message grafeas.v1.Hash
 */
export type Hash = Message<"grafeas.v1.Hash"> & {
  /**
   * Required. The type of hash that was performed, e.g. "SHA-256".
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Required. The hash value.
   *
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;
};

/**
 * Describes the message grafeas.v1.Hash.
 * Use `create(HashSchema)` to create a new message.
 */
export const HashSchema: GenMessage<Hash> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 3);

/**
 * Command describes a step performed as part of the build pipeline.
 *
 * @generated from message grafeas.v1.Command
 */
export type Command = Message<"grafeas.v1.Command"> & {
  /**
   * Required. Name of the command, as presented on the command line, or if the
   * command is packaged as a Docker container, as presented to `docker pull`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Environment variables set before running this command.
   *
   * @generated from field: repeated string env = 2;
   */
  env: string[];

  /**
   * Command-line arguments used when executing this command.
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * Working directory (relative to project source root) used when running this
   * command.
   *
   * @generated from field: string dir = 4;
   */
  dir: string;

  /**
   * Optional unique identifier for this command, used in wait_for to reference
   * this command as a dependency.
   *
   * @generated from field: string id = 5;
   */
  id: string;

  /**
   * The ID(s) of the command(s) that this command depends on.
   *
   * @generated from field: repeated string wait_for = 6;
   */
  waitFor: string[];
};

/**
 * Describes the message grafeas.v1.Command.
 * Use `create(CommandSchema)` to create a new message.
 */
export const CommandSchema: GenMessage<Command> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 4);

/**
 * Artifact describes a build product.
 *
 * @generated from message grafeas.v1.Artifact
 */
export type Artifact = Message<"grafeas.v1.Artifact"> & {
  /**
   * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
   * container.
   *
   * @generated from field: string checksum = 1;
   */
  checksum: string;

  /**
   * Artifact ID, if any; for container images, this will be a URL by digest
   * like `gcr.io/projectID/imagename@sha256:123456`.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Related artifact names. This may be the path to a binary or jar file, or in
   * the case of a container build, the name used to push the container image to
   * Google Container Registry, as presented to `docker push`. Note that a
   * single Artifact ID can have multiple names, for example if two tags are
   * applied to one image.
   *
   * @generated from field: repeated string names = 3;
   */
  names: string[];
};

/**
 * Describes the message grafeas.v1.Artifact.
 * Use `create(ArtifactSchema)` to create a new message.
 */
export const ArtifactSchema: GenMessage<Artifact> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 5);

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together
 * with a path point to a unique revision of a single file or directory.
 *
 * @generated from message grafeas.v1.SourceContext
 */
export type SourceContext = Message<"grafeas.v1.SourceContext"> & {
  /**
   * A SourceContext can refer any one of the following types of repositories.
   *
   * @generated from oneof grafeas.v1.SourceContext.context
   */
  context: {
    /**
     * A SourceContext referring to a revision in a Google Cloud Source Repo.
     *
     * @generated from field: grafeas.v1.CloudRepoSourceContext cloud_repo = 1;
     */
    value: CloudRepoSourceContext;
    case: "cloudRepo";
  } | {
    /**
     * A SourceContext referring to a Gerrit project.
     *
     * @generated from field: grafeas.v1.GerritSourceContext gerrit = 2;
     */
    value: GerritSourceContext;
    case: "gerrit";
  } | {
    /**
     * A SourceContext referring to any third party Git repo (e.g., GitHub).
     *
     * @generated from field: grafeas.v1.GitSourceContext git = 3;
     */
    value: GitSourceContext;
    case: "git";
  } | { case: undefined; value?: undefined };

  /**
   * Labels with user defined metadata.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message grafeas.v1.SourceContext.
 * Use `create(SourceContextSchema)` to create a new message.
 */
export const SourceContextSchema: GenMessage<SourceContext> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 6);

/**
 * An alias to a repo revision.
 *
 * @generated from message grafeas.v1.AliasContext
 */
export type AliasContext = Message<"grafeas.v1.AliasContext"> & {
  /**
   * The alias kind.
   *
   * @generated from field: grafeas.v1.AliasContext.Kind kind = 1;
   */
  kind: AliasContext_Kind;

  /**
   * The alias name.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.AliasContext.
 * Use `create(AliasContextSchema)` to create a new message.
 */
export const AliasContextSchema: GenMessage<AliasContext> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 7);

/**
 * The type of an alias.
 *
 * @generated from enum grafeas.v1.AliasContext.Kind
 */
export enum AliasContext_Kind {
  /**
   * Unknown.
   *
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * Git tag.
   *
   * @generated from enum value: FIXED = 1;
   */
  FIXED = 1,

  /**
   * Git branch.
   *
   * @generated from enum value: MOVABLE = 2;
   */
  MOVABLE = 2,

  /**
   * Used to specify non-standard aliases. For example, if a Git repo has a
   * ref named "refs/foo/bar".
   *
   * @generated from enum value: OTHER = 4;
   */
  OTHER = 4,
}

/**
 * Describes the enum grafeas.v1.AliasContext.Kind.
 */
export const AliasContext_KindSchema: GenEnum<AliasContext_Kind> = /*@__PURE__*/
  enumDesc(file_grafeas_v1_provenance, 7, 0);

/**
 * A CloudRepoSourceContext denotes a particular revision in a Google Cloud
 * Source Repo.
 *
 * @generated from message grafeas.v1.CloudRepoSourceContext
 */
export type CloudRepoSourceContext = Message<"grafeas.v1.CloudRepoSourceContext"> & {
  /**
   * The ID of the repo.
   *
   * @generated from field: grafeas.v1.RepoId repo_id = 1;
   */
  repoId?: RepoId;

  /**
   * A revision in a Cloud Repo can be identified by either its revision ID or
   * its alias.
   *
   * @generated from oneof grafeas.v1.CloudRepoSourceContext.revision
   */
  revision: {
    /**
     * A revision ID.
     *
     * @generated from field: string revision_id = 2;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: grafeas.v1.AliasContext alias_context = 3;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1.CloudRepoSourceContext.
 * Use `create(CloudRepoSourceContextSchema)` to create a new message.
 */
export const CloudRepoSourceContextSchema: GenMessage<CloudRepoSourceContext> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 8);

/**
 * A SourceContext referring to a Gerrit project.
 *
 * @generated from message grafeas.v1.GerritSourceContext
 */
export type GerritSourceContext = Message<"grafeas.v1.GerritSourceContext"> & {
  /**
   * The URI of a running Gerrit instance.
   *
   * @generated from field: string host_uri = 1;
   */
  hostUri: string;

  /**
   * The full project name within the host. Projects may be nested, so
   * "project/subproject" is a valid project name. The "repo name" is the
   * hostURI/project.
   *
   * @generated from field: string gerrit_project = 2;
   */
  gerritProject: string;

  /**
   * A revision in a Gerrit project can be identified by either its revision ID
   * or its alias.
   *
   * @generated from oneof grafeas.v1.GerritSourceContext.revision
   */
  revision: {
    /**
     * A revision (commit) ID.
     *
     * @generated from field: string revision_id = 3;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: grafeas.v1.AliasContext alias_context = 4;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1.GerritSourceContext.
 * Use `create(GerritSourceContextSchema)` to create a new message.
 */
export const GerritSourceContextSchema: GenMessage<GerritSourceContext> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 9);

/**
 * A GitSourceContext denotes a particular revision in a third party Git
 * repository (e.g., GitHub).
 *
 * @generated from message grafeas.v1.GitSourceContext
 */
export type GitSourceContext = Message<"grafeas.v1.GitSourceContext"> & {
  /**
   * Git repository URL.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Git commit hash.
   *
   * @generated from field: string revision_id = 2;
   */
  revisionId: string;
};

/**
 * Describes the message grafeas.v1.GitSourceContext.
 * Use `create(GitSourceContextSchema)` to create a new message.
 */
export const GitSourceContextSchema: GenMessage<GitSourceContext> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 10);

/**
 * A unique identifier for a Cloud Repo.
 *
 * @generated from message grafeas.v1.RepoId
 */
export type RepoId = Message<"grafeas.v1.RepoId"> & {
  /**
   * A cloud repo can be identified by either its project ID and repository name
   * combination, or its globally unique identifier.
   *
   * @generated from oneof grafeas.v1.RepoId.id
   */
  id: {
    /**
     * A combination of a project ID and a repo name.
     *
     * @generated from field: grafeas.v1.ProjectRepoId project_repo_id = 1;
     */
    value: ProjectRepoId;
    case: "projectRepoId";
  } | {
    /**
     * A server-assigned, globally unique identifier.
     *
     * @generated from field: string uid = 2;
     */
    value: string;
    case: "uid";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1.RepoId.
 * Use `create(RepoIdSchema)` to create a new message.
 */
export const RepoIdSchema: GenMessage<RepoId> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 11);

/**
 * Selects a repo using a Google Cloud Platform project ID (e.g.,
 * winged-cargo-31) and a repo name within that project.
 *
 * @generated from message grafeas.v1.ProjectRepoId
 */
export type ProjectRepoId = Message<"grafeas.v1.ProjectRepoId"> & {
  /**
   * The ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The name of the repo. Leave empty for the default repo.
   *
   * @generated from field: string repo_name = 2;
   */
  repoName: string;
};

/**
 * Describes the message grafeas.v1.ProjectRepoId.
 * Use `create(ProjectRepoIdSchema)` to create a new message.
 */
export const ProjectRepoIdSchema: GenMessage<ProjectRepoId> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_provenance, 12);

