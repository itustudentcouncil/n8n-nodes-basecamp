// Copyright 2021 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/slsa_provenance.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/slsa_provenance.proto.
 */
export const file_grafeas_v1_slsa_provenance: GenFile = /*@__PURE__*/
  fileDesc("CiBncmFmZWFzL3YxL3Nsc2FfcHJvdmVuYW5jZS5wcm90bxIKZ3JhZmVhcy52MSL+BgoOU2xzYVByb3ZlbmFuY2USNwoHYnVpbGRlchgBIAEoCzImLmdyYWZlYXMudjEuU2xzYVByb3ZlbmFuY2UuU2xzYUJ1aWxkZXISNQoGcmVjaXBlGAIgASgLMiUuZ3JhZmVhcy52MS5TbHNhUHJvdmVuYW5jZS5TbHNhUmVjaXBlEjkKCG1ldGFkYXRhGAMgASgLMicuZ3JhZmVhcy52MS5TbHNhUHJvdmVuYW5jZS5TbHNhTWV0YWRhdGESNgoJbWF0ZXJpYWxzGAQgAygLMiMuZ3JhZmVhcy52MS5TbHNhUHJvdmVuYW5jZS5NYXRlcmlhbBqgAQoKU2xzYVJlY2lwZRIMCgR0eXBlGAEgASgJEhsKE2RlZmluZWRfaW5fbWF0ZXJpYWwYAiABKAMSEwoLZW50cnlfcG9pbnQYAyABKAkSJwoJYXJndW1lbnRzGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIpCgtlbnZpcm9ubWVudBgFIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkaTQoQU2xzYUNvbXBsZXRlbmVzcxIRCglhcmd1bWVudHMYASABKAgSEwoLZW52aXJvbm1lbnQYAiABKAgSEQoJbWF0ZXJpYWxzGAMgASgIGvEBCgxTbHNhTWV0YWRhdGESGwoTYnVpbGRfaW52b2NhdGlvbl9pZBgBIAEoCRI0ChBidWlsZF9zdGFydGVkX29uGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI1ChFidWlsZF9maW5pc2hlZF9vbhgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASQQoMY29tcGxldGVuZXNzGAQgASgLMisuZ3JhZmVhcy52MS5TbHNhUHJvdmVuYW5jZS5TbHNhQ29tcGxldGVuZXNzEhQKDHJlcHJvZHVjaWJsZRgFIAEoCBoZCgtTbHNhQnVpbGRlchIKCgJpZBgBIAEoCRqHAQoITWF0ZXJpYWwSCwoDdXJpGAEgASgJEj8KBmRpZ2VzdBgCIAMoCzIvLmdyYWZlYXMudjEuU2xzYVByb3ZlbmFuY2UuTWF0ZXJpYWwuRGlnZXN0RW50cnkaLQoLRGlnZXN0RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUJmCg1pby5ncmFmZWFzLnYxQhNTbHNhUHJvdmVuYW5jZVByb3RvUAFaOGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ3JhZmVhcy92MTtncmFmZWFzogIDR1JBYgZwcm90bzM", [file_google_protobuf_any, file_google_protobuf_timestamp]);

/**
 * @generated from message grafeas.v1.SlsaProvenance
 */
export type SlsaProvenance = Message<"grafeas.v1.SlsaProvenance"> & {
  /**
   * required
   *
   * @generated from field: grafeas.v1.SlsaProvenance.SlsaBuilder builder = 1;
   */
  builder?: SlsaProvenance_SlsaBuilder;

  /**
   * Identifies the configuration used for the build.
   * When combined with materials, this SHOULD fully describe the build,
   * such that re-running this recipe results in bit-for-bit identical output
   * (if the build is reproducible).
   *
   * required
   *
   * @generated from field: grafeas.v1.SlsaProvenance.SlsaRecipe recipe = 2;
   */
  recipe?: SlsaProvenance_SlsaRecipe;

  /**
   * @generated from field: grafeas.v1.SlsaProvenance.SlsaMetadata metadata = 3;
   */
  metadata?: SlsaProvenance_SlsaMetadata;

  /**
   * The collection of artifacts that influenced the build including sources,
   * dependencies, build tools, base images, and so on. This is considered to be
   * incomplete unless metadata.completeness.materials is true. Unset or null is
   * equivalent to empty.
   *
   * @generated from field: repeated grafeas.v1.SlsaProvenance.Material materials = 4;
   */
  materials: SlsaProvenance_Material[];
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.
 * Use `create(SlsaProvenanceSchema)` to create a new message.
 */
export const SlsaProvenanceSchema: GenMessage<SlsaProvenance> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0);

/**
 * Steps taken to build the artifact.
 * For a TaskRun, typically each container corresponds to one step in the
 * recipe.
 *
 * @generated from message grafeas.v1.SlsaProvenance.SlsaRecipe
 */
export type SlsaProvenance_SlsaRecipe = Message<"grafeas.v1.SlsaProvenance.SlsaRecipe"> & {
  /**
   * URI indicating what type of recipe was performed. It determines the
   * meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and
   * materials.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Index in materials containing the recipe steps that are not implied by
   * recipe.type. For example, if the recipe type were "make", then this would
   * point to the source containing the Makefile, not the make program itself.
   * Set to -1 if the recipe doesn't come from a material, as zero is default
   * unset value for int64.
   *
   * @generated from field: int64 defined_in_material = 2;
   */
  definedInMaterial: bigint;

  /**
   * String identifying the entry point into the build.
   * This is often a path to a configuration file and/or a target label within
   * that file. The syntax and meaning are defined by recipe.type. For
   * example, if the recipe type were "make", then this would reference the
   * directory in which to run make as well as which target to use.
   *
   * @generated from field: string entry_point = 3;
   */
  entryPoint: string;

  /**
   * Collection of all external inputs that influenced the build on top of
   * recipe.definedInMaterial and recipe.entryPoint. For example, if the
   * recipe type were "make", then this might be the flags passed to make
   * aside from the target, which is captured in recipe.entryPoint. Depending
   * on the recipe Type, the structure may be different.
   *
   * @generated from field: google.protobuf.Any arguments = 4;
   */
  arguments?: Any;

  /**
   * Any other builder-controlled inputs necessary for correctly evaluating
   * the recipe. Usually only needed for reproducing the build but not
   * evaluated as part of policy. Depending on the recipe Type, the structure
   * may be different.
   *
   * @generated from field: google.protobuf.Any environment = 5;
   */
  environment?: Any;
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.SlsaRecipe.
 * Use `create(SlsaProvenance_SlsaRecipeSchema)` to create a new message.
 */
export const SlsaProvenance_SlsaRecipeSchema: GenMessage<SlsaProvenance_SlsaRecipe> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0, 0);

/**
 * Indicates that the builder claims certain fields in this message to be
 * complete.
 *
 * @generated from message grafeas.v1.SlsaProvenance.SlsaCompleteness
 */
export type SlsaProvenance_SlsaCompleteness = Message<"grafeas.v1.SlsaProvenance.SlsaCompleteness"> & {
  /**
   * If true, the builder claims that recipe.arguments is complete, meaning
   * that all external inputs are properly captured in the recipe.
   *
   * @generated from field: bool arguments = 1;
   */
  arguments: boolean;

  /**
   * If true, the builder claims that recipe.environment is claimed to be
   * complete.
   *
   * @generated from field: bool environment = 2;
   */
  environment: boolean;

  /**
   * If true, the builder claims that materials are complete, usually through
   * some controls to prevent network access. Sometimes called "hermetic".
   *
   * @generated from field: bool materials = 3;
   */
  materials: boolean;
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.SlsaCompleteness.
 * Use `create(SlsaProvenance_SlsaCompletenessSchema)` to create a new message.
 */
export const SlsaProvenance_SlsaCompletenessSchema: GenMessage<SlsaProvenance_SlsaCompleteness> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0, 1);

/**
 * Other properties of the build.
 *
 * @generated from message grafeas.v1.SlsaProvenance.SlsaMetadata
 */
export type SlsaProvenance_SlsaMetadata = Message<"grafeas.v1.SlsaProvenance.SlsaMetadata"> & {
  /**
   * Identifies the particular build invocation, which can be useful for
   * finding associated logs or other ad-hoc analysis. The value SHOULD be
   * globally unique, per in-toto Provenance spec.
   *
   * @generated from field: string build_invocation_id = 1;
   */
  buildInvocationId: string;

  /**
   * The timestamp of when the build started.
   *
   * @generated from field: google.protobuf.Timestamp build_started_on = 2;
   */
  buildStartedOn?: Timestamp;

  /**
   * The timestamp of when the build completed.
   *
   * @generated from field: google.protobuf.Timestamp build_finished_on = 3;
   */
  buildFinishedOn?: Timestamp;

  /**
   * Indicates that the builder claims certain fields in this message to be
   * complete.
   *
   * @generated from field: grafeas.v1.SlsaProvenance.SlsaCompleteness completeness = 4;
   */
  completeness?: SlsaProvenance_SlsaCompleteness;

  /**
   * If true, the builder claims that running the recipe on materials will
   * produce bit-for-bit identical output.
   *
   * @generated from field: bool reproducible = 5;
   */
  reproducible: boolean;
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.SlsaMetadata.
 * Use `create(SlsaProvenance_SlsaMetadataSchema)` to create a new message.
 */
export const SlsaProvenance_SlsaMetadataSchema: GenMessage<SlsaProvenance_SlsaMetadata> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0, 2);

/**
 * @generated from message grafeas.v1.SlsaProvenance.SlsaBuilder
 */
export type SlsaProvenance_SlsaBuilder = Message<"grafeas.v1.SlsaProvenance.SlsaBuilder"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.SlsaBuilder.
 * Use `create(SlsaProvenance_SlsaBuilderSchema)` to create a new message.
 */
export const SlsaProvenance_SlsaBuilderSchema: GenMessage<SlsaProvenance_SlsaBuilder> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0, 3);

/**
 * @generated from message grafeas.v1.SlsaProvenance.Material
 */
export type SlsaProvenance_Material = Message<"grafeas.v1.SlsaProvenance.Material"> & {
  /**
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * @generated from field: map<string, string> digest = 2;
   */
  digest: { [key: string]: string };
};

/**
 * Describes the message grafeas.v1.SlsaProvenance.Material.
 * Use `create(SlsaProvenance_MaterialSchema)` to create a new message.
 */
export const SlsaProvenance_MaterialSchema: GenMessage<SlsaProvenance_Material> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_slsa_provenance, 0, 4);

