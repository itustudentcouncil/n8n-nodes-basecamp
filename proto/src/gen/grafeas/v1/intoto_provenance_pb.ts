// Copyright 2021 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/intoto_provenance.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/intoto_provenance.proto.
 */
export const file_grafeas_v1_intoto_provenance: GenFile = /*@__PURE__*/
  fileDesc("CiJncmFmZWFzL3YxL2ludG90b19wcm92ZW5hbmNlLnByb3RvEgpncmFmZWFzLnYxIpwBCgZSZWNpcGUSDAoEdHlwZRgBIAEoCRIbChNkZWZpbmVkX2luX21hdGVyaWFsGAIgASgDEhMKC2VudHJ5X3BvaW50GAMgASgJEicKCWFyZ3VtZW50cxgEIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSKQoLZW52aXJvbm1lbnQYBSADKAsyFC5nb29nbGUucHJvdG9idWYuQW55IkkKDENvbXBsZXRlbmVzcxIRCglhcmd1bWVudHMYASABKAgSEwoLZW52aXJvbm1lbnQYAiABKAgSEQoJbWF0ZXJpYWxzGAMgASgIItoBCghNZXRhZGF0YRIbChNidWlsZF9pbnZvY2F0aW9uX2lkGAEgASgJEjQKEGJ1aWxkX3N0YXJ0ZWRfb24YAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjUKEWJ1aWxkX2ZpbmlzaGVkX29uGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgxjb21wbGV0ZW5lc3MYBCABKAsyGC5ncmFmZWFzLnYxLkNvbXBsZXRlbmVzcxIUCgxyZXByb2R1Y2libGUYBSABKAgiGwoNQnVpbGRlckNvbmZpZxIKCgJpZBgBIAEoCSKkAQoQSW5Ub3RvUHJvdmVuYW5jZRIxCg5idWlsZGVyX2NvbmZpZxgBIAEoCzIZLmdyYWZlYXMudjEuQnVpbGRlckNvbmZpZxIiCgZyZWNpcGUYAiABKAsyEi5ncmFmZWFzLnYxLlJlY2lwZRImCghtZXRhZGF0YRgDIAEoCzIULmdyYWZlYXMudjEuTWV0YWRhdGESEQoJbWF0ZXJpYWxzGAQgAygJQmgKDWlvLmdyYWZlYXMudjFCFUluVG90b1Byb3ZlbmFuY2VQcm90b1ABWjhnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2dyYWZlYXMvdjE7Z3JhZmVhc6ICA0dSQWIGcHJvdG8z", [file_google_protobuf_any, file_google_protobuf_timestamp]);

/**
 * Steps taken to build the artifact.
 * For a TaskRun, typically each container corresponds to one step in the
 * recipe.
 *
 * @generated from message grafeas.v1.Recipe
 */
export type Recipe = Message<"grafeas.v1.Recipe"> & {
  /**
   * URI indicating what type of recipe was performed. It determines the meaning
   * of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Index in materials containing the recipe steps that are not implied by
   * recipe.type. For example, if the recipe type were "make", then this would
   * point to the source containing the Makefile, not the make program itself.
   * Set to -1 if the recipe doesn't come from a material, as zero is default
   * unset value for int64.
   *
   * @generated from field: int64 defined_in_material = 2;
   */
  definedInMaterial: bigint;

  /**
   * String identifying the entry point into the build.
   * This is often a path to a configuration file and/or a target label within
   * that file. The syntax and meaning are defined by recipe.type. For example,
   * if the recipe type were "make", then this would reference the directory in
   * which to run make as well as which target to use.
   *
   * @generated from field: string entry_point = 3;
   */
  entryPoint: string;

  /**
   * Collection of all external inputs that influenced the build on top of
   * recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe
   * type were "make", then this might be the flags passed to make aside from
   * the target, which is captured in recipe.entryPoint. Since the arguments
   * field can greatly vary in structure, depending on the builder and recipe
   * type, this is of form "Any".
   *
   * @generated from field: repeated google.protobuf.Any arguments = 4;
   */
  arguments: Any[];

  /**
   * Any other builder-controlled inputs necessary for correctly evaluating the
   * recipe. Usually only needed for reproducing the build but not evaluated as
   * part of policy. Since the environment field can greatly vary in structure,
   * depending on the builder and recipe type, this is of form "Any".
   *
   * @generated from field: repeated google.protobuf.Any environment = 5;
   */
  environment: Any[];
};

/**
 * Describes the message grafeas.v1.Recipe.
 * Use `create(RecipeSchema)` to create a new message.
 */
export const RecipeSchema: GenMessage<Recipe> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_intoto_provenance, 0);

/**
 * Indicates that the builder claims certain fields in this message to be
 * complete.
 *
 * @generated from message grafeas.v1.Completeness
 */
export type Completeness = Message<"grafeas.v1.Completeness"> & {
  /**
   * If true, the builder claims that recipe.arguments is complete, meaning that
   * all external inputs are properly captured in the recipe.
   *
   * @generated from field: bool arguments = 1;
   */
  arguments: boolean;

  /**
   * If true, the builder claims that recipe.environment is claimed to be
   * complete.
   *
   * @generated from field: bool environment = 2;
   */
  environment: boolean;

  /**
   * If true, the builder claims that materials are complete, usually through
   * some controls to prevent network access. Sometimes called "hermetic".
   *
   * @generated from field: bool materials = 3;
   */
  materials: boolean;
};

/**
 * Describes the message grafeas.v1.Completeness.
 * Use `create(CompletenessSchema)` to create a new message.
 */
export const CompletenessSchema: GenMessage<Completeness> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_intoto_provenance, 1);

/**
 * Other properties of the build.
 *
 * @generated from message grafeas.v1.Metadata
 */
export type Metadata = Message<"grafeas.v1.Metadata"> & {
  /**
   * Identifies the particular build invocation, which can be useful for finding
   * associated logs or other ad-hoc analysis. The value SHOULD be globally
   * unique, per in-toto Provenance spec.
   *
   * @generated from field: string build_invocation_id = 1;
   */
  buildInvocationId: string;

  /**
   * The timestamp of when the build started.
   *
   * @generated from field: google.protobuf.Timestamp build_started_on = 2;
   */
  buildStartedOn?: Timestamp;

  /**
   * The timestamp of when the build completed.
   *
   * @generated from field: google.protobuf.Timestamp build_finished_on = 3;
   */
  buildFinishedOn?: Timestamp;

  /**
   * Indicates that the builder claims certain fields in this message to be
   * complete.
   *
   * @generated from field: grafeas.v1.Completeness completeness = 4;
   */
  completeness?: Completeness;

  /**
   * If true, the builder claims that running the recipe on materials will
   * produce bit-for-bit identical output.
   *
   * @generated from field: bool reproducible = 5;
   */
  reproducible: boolean;
};

/**
 * Describes the message grafeas.v1.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export const MetadataSchema: GenMessage<Metadata> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_intoto_provenance, 2);

/**
 * @generated from message grafeas.v1.BuilderConfig
 */
export type BuilderConfig = Message<"grafeas.v1.BuilderConfig"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message grafeas.v1.BuilderConfig.
 * Use `create(BuilderConfigSchema)` to create a new message.
 */
export const BuilderConfigSchema: GenMessage<BuilderConfig> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_intoto_provenance, 3);

/**
 * @generated from message grafeas.v1.InTotoProvenance
 */
export type InTotoProvenance = Message<"grafeas.v1.InTotoProvenance"> & {
  /**
   * required
   *
   * @generated from field: grafeas.v1.BuilderConfig builder_config = 1;
   */
  builderConfig?: BuilderConfig;

  /**
   * Identifies the configuration used for the build.
   * When combined with materials, this SHOULD fully describe the build,
   * such that re-running this recipe results in bit-for-bit identical output
   * (if the build is reproducible).
   *
   * required
   *
   * @generated from field: grafeas.v1.Recipe recipe = 2;
   */
  recipe?: Recipe;

  /**
   * @generated from field: grafeas.v1.Metadata metadata = 3;
   */
  metadata?: Metadata;

  /**
   * The collection of artifacts that influenced the build including sources,
   * dependencies, build tools, base images, and so on. This is considered to be
   * incomplete unless metadata.completeness.materials is true. Unset or null is
   * equivalent to empty.
   *
   * @generated from field: repeated string materials = 4;
   */
  materials: string[];
};

/**
 * Describes the message grafeas.v1.InTotoProvenance.
 * Use `create(InTotoProvenanceSchema)` to create a new message.
 */
export const InTotoProvenanceSchema: GenMessage<InTotoProvenance> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_intoto_provenance, 4);

