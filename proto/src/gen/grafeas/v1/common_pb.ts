// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/common.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/common.proto.
 */
export const file_grafeas_v1_common: GenFile = /*@__PURE__*/
  fileDesc("ChdncmFmZWFzL3YxL2NvbW1vbi5wcm90bxIKZ3JhZmVhcy52MSIoCgpSZWxhdGVkVXJsEgsKA3VybBgBIAEoCRINCgVsYWJlbBgCIAEoCSI1CglTaWduYXR1cmUSEQoJc2lnbmF0dXJlGAEgASgMEhUKDXB1YmxpY19rZXlfaWQYAiABKAkiZAoIRW52ZWxvcGUSDwoHcGF5bG9hZBgBIAEoDBIUCgxwYXlsb2FkX3R5cGUYAiABKAkSMQoKc2lnbmF0dXJlcxgDIAMoCzIdLmdyYWZlYXMudjEuRW52ZWxvcGVTaWduYXR1cmUiLwoRRW52ZWxvcGVTaWduYXR1cmUSCwoDc2lnGAEgASgMEg0KBWtleWlkGAIgASgJIiEKDEZpbGVMb2NhdGlvbhIRCglmaWxlX3BhdGgYASABKAkiLwoHTGljZW5zZRISCgpleHByZXNzaW9uGAEgASgJEhAKCGNvbW1lbnRzGAIgASgJIiwKBkRpZ2VzdBIMCgRhbGdvGAEgASgJEhQKDGRpZ2VzdF9ieXRlcxgCIAEoDCrwAQoITm90ZUtpbmQSGQoVTk9URV9LSU5EX1VOU1BFQ0lGSUVEEAASEQoNVlVMTkVSQUJJTElUWRABEgkKBUJVSUxEEAISCQoFSU1BR0UQAxILCgdQQUNLQUdFEAQSDgoKREVQTE9ZTUVOVBAFEg0KCURJU0NPVkVSWRAGEg8KC0FUVEVTVEFUSU9OEAcSCwoHVVBHUkFERRAIEg4KCkNPTVBMSUFOQ0UQCRIUChBEU1NFX0FUVEVTVEFUSU9OEAoSHAoYVlVMTkVSQUJJTElUWV9BU1NFU1NNRU5UEAsSEgoOU0JPTV9SRUZFUkVOQ0UQDEJRCg1pby5ncmFmZWFzLnYxUAFaOGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ3JhZmVhcy92MTtncmFmZWFzogIDR1JBYgZwcm90bzM");

/**
 * Metadata for any related URL information.
 *
 * @generated from message grafeas.v1.RelatedUrl
 */
export type RelatedUrl = Message<"grafeas.v1.RelatedUrl"> & {
  /**
   * Specific URL associated with the resource.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Label to describe usage of the URL.
   *
   * @generated from field: string label = 2;
   */
  label: string;
};

/**
 * Describes the message grafeas.v1.RelatedUrl.
 * Use `create(RelatedUrlSchema)` to create a new message.
 */
export const RelatedUrlSchema: GenMessage<RelatedUrl> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 0);

/**
 * Verifiers (e.g. Kritis implementations) MUST verify signatures
 * with respect to the trust anchors defined in policy (e.g. a Kritis policy).
 * Typically this means that the verifier has been configured with a map from
 * `public_key_id` to public key material (and any required parameters, e.g.
 * signing algorithm).
 *
 * In particular, verification implementations MUST NOT treat the signature
 * `public_key_id` as anything more than a key lookup hint. The `public_key_id`
 * DOES NOT validate or authenticate a public key; it only provides a mechanism
 * for quickly selecting a public key ALREADY CONFIGURED on the verifier through
 * a trusted channel. Verification implementations MUST reject signatures in any
 * of the following circumstances:
 *   * The `public_key_id` is not recognized by the verifier.
 *   * The public key that `public_key_id` refers to does not verify the
 *     signature with respect to the payload.
 *
 * The `signature` contents SHOULD NOT be "attached" (where the payload is
 * included with the serialized `signature` bytes). Verifiers MUST ignore any
 * "attached" payload and only verify signatures with respect to explicitly
 * provided payload (e.g. a `payload` field on the proto message that holds
 * this Signature, or the canonical serialization of the proto message that
 * holds this signature).
 *
 * @generated from message grafeas.v1.Signature
 */
export type Signature = Message<"grafeas.v1.Signature"> & {
  /**
   * The content of the signature, an opaque bytestring.
   * The payload that this signature verifies MUST be unambiguously provided
   * with the Signature during verification. A wrapper message might provide
   * the payload explicitly. Alternatively, a message might have a canonical
   * serialization that can always be unambiguously computed to derive the
   * payload.
   *
   * @generated from field: bytes signature = 1;
   */
  signature: Uint8Array;

  /**
   * The identifier for the public key that verifies this signature.
   *   * The `public_key_id` is required.
   *   * The `public_key_id` SHOULD be an RFC3986 conformant URI.
   *   * When possible, the `public_key_id` SHOULD be an immutable reference,
   *     such as a cryptographic digest.
   *
   * Examples of valid `public_key_id`s:
   *
   * OpenPGP V4 public key fingerprint:
   *   * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA"
   * See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more
   * details on this scheme.
   *
   * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER
   * serialization):
   *   * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU"
   *   * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
   *
   * @generated from field: string public_key_id = 2;
   */
  publicKeyId: string;
};

/**
 * Describes the message grafeas.v1.Signature.
 * Use `create(SignatureSchema)` to create a new message.
 */
export const SignatureSchema: GenMessage<Signature> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 1);

/**
 * MUST match
 * https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An
 * authenticated message of arbitrary type.
 *
 * @generated from message grafeas.v1.Envelope
 */
export type Envelope = Message<"grafeas.v1.Envelope"> & {
  /**
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  /**
   * @generated from field: string payload_type = 2;
   */
  payloadType: string;

  /**
   * @generated from field: repeated grafeas.v1.EnvelopeSignature signatures = 3;
   */
  signatures: EnvelopeSignature[];
};

/**
 * Describes the message grafeas.v1.Envelope.
 * Use `create(EnvelopeSchema)` to create a new message.
 */
export const EnvelopeSchema: GenMessage<Envelope> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 2);

/**
 * @generated from message grafeas.v1.EnvelopeSignature
 */
export type EnvelopeSignature = Message<"grafeas.v1.EnvelopeSignature"> & {
  /**
   * @generated from field: bytes sig = 1;
   */
  sig: Uint8Array;

  /**
   * @generated from field: string keyid = 2;
   */
  keyid: string;
};

/**
 * Describes the message grafeas.v1.EnvelopeSignature.
 * Use `create(EnvelopeSignatureSchema)` to create a new message.
 */
export const EnvelopeSignatureSchema: GenMessage<EnvelopeSignature> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 3);

/**
 * Indicates the location at which a package was found.
 *
 * @generated from message grafeas.v1.FileLocation
 */
export type FileLocation = Message<"grafeas.v1.FileLocation"> & {
  /**
   * For jars that are contained inside .war files, this filepath
   * can indicate the path to war file combined with the path to jar file.
   *
   * @generated from field: string file_path = 1;
   */
  filePath: string;
};

/**
 * Describes the message grafeas.v1.FileLocation.
 * Use `create(FileLocationSchema)` to create a new message.
 */
export const FileLocationSchema: GenMessage<FileLocation> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 4);

/**
 * License information.
 *
 * @generated from message grafeas.v1.License
 */
export type License = Message<"grafeas.v1.License"> & {
  /**
   * Often a single license can be used to represent the licensing terms.
   * Sometimes it is necessary to include a choice of one or more licenses
   * or some combination of license identifiers.
   * Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT",
   * "GPL-2.0-or-later WITH Bison-exception-2.2".
   *
   * @generated from field: string expression = 1;
   */
  expression: string;

  /**
   * Comments
   *
   * @generated from field: string comments = 2;
   */
  comments: string;
};

/**
 * Describes the message grafeas.v1.License.
 * Use `create(LicenseSchema)` to create a new message.
 */
export const LicenseSchema: GenMessage<License> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 5);

/**
 * Digest information.
 *
 * @generated from message grafeas.v1.Digest
 */
export type Digest = Message<"grafeas.v1.Digest"> & {
  /**
   * `SHA1`, `SHA512` etc.
   *
   * @generated from field: string algo = 1;
   */
  algo: string;

  /**
   * Value of the digest.
   *
   * @generated from field: bytes digest_bytes = 2;
   */
  digestBytes: Uint8Array;
};

/**
 * Describes the message grafeas.v1.Digest.
 * Use `create(DigestSchema)` to create a new message.
 */
export const DigestSchema: GenMessage<Digest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_common, 6);

/**
 * Kind represents the kinds of notes supported.
 *
 * @generated from enum grafeas.v1.NoteKind
 */
export enum NoteKind {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: NOTE_KIND_UNSPECIFIED = 0;
   */
  NOTE_KIND_UNSPECIFIED = 0,

  /**
   * The note and occurrence represent a package vulnerability.
   *
   * @generated from enum value: VULNERABILITY = 1;
   */
  VULNERABILITY = 1,

  /**
   * The note and occurrence assert build provenance.
   *
   * @generated from enum value: BUILD = 2;
   */
  BUILD = 2,

  /**
   * This represents an image basis relationship.
   *
   * @generated from enum value: IMAGE = 3;
   */
  IMAGE = 3,

  /**
   * This represents a package installed via a package manager.
   *
   * @generated from enum value: PACKAGE = 4;
   */
  PACKAGE = 4,

  /**
   * The note and occurrence track deployment events.
   *
   * @generated from enum value: DEPLOYMENT = 5;
   */
  DEPLOYMENT = 5,

  /**
   * The note and occurrence track the initial discovery status of a resource.
   *
   * @generated from enum value: DISCOVERY = 6;
   */
  DISCOVERY = 6,

  /**
   * This represents a logical "role" that can attest to artifacts.
   *
   * @generated from enum value: ATTESTATION = 7;
   */
  ATTESTATION = 7,

  /**
   * This represents an available package upgrade.
   *
   * @generated from enum value: UPGRADE = 8;
   */
  UPGRADE = 8,

  /**
   * This represents a Compliance Note
   *
   * @generated from enum value: COMPLIANCE = 9;
   */
  COMPLIANCE = 9,

  /**
   * This represents a DSSE attestation Note
   *
   * @generated from enum value: DSSE_ATTESTATION = 10;
   */
  DSSE_ATTESTATION = 10,

  /**
   * This represents a Vulnerability Assessment.
   *
   * @generated from enum value: VULNERABILITY_ASSESSMENT = 11;
   */
  VULNERABILITY_ASSESSMENT = 11,

  /**
   * This represents an SBOM Reference.
   *
   * @generated from enum value: SBOM_REFERENCE = 12;
   */
  SBOM_REFERENCE = 12,
}

/**
 * Describes the enum grafeas.v1.NoteKind.
 */
export const NoteKindSchema: GenEnum<NoteKind> = /*@__PURE__*/
  enumDesc(file_grafeas_v1_common, 0);

