// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/image.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/image.proto.
 */
export const file_grafeas_v1_image: GenFile = /*@__PURE__*/
  fileDesc("ChZncmFmZWFzL3YxL2ltYWdlLnByb3RvEgpncmFmZWFzLnYxIi0KBUxheWVyEhEKCWRpcmVjdGl2ZRgBIAEoCRIRCglhcmd1bWVudHMYAiABKAkiQAoLRmluZ2VycHJpbnQSDwoHdjFfbmFtZRgBIAEoCRIPCgd2Ml9ibG9iGAIgAygJEg8KB3YyX25hbWUYAyABKAkiTwoJSW1hZ2VOb3RlEhQKDHJlc291cmNlX3VybBgBIAEoCRIsCgtmaW5nZXJwcmludBgCIAEoCzIXLmdyYWZlYXMudjEuRmluZ2VycHJpbnQikwEKD0ltYWdlT2NjdXJyZW5jZRIsCgtmaW5nZXJwcmludBgBIAEoCzIXLmdyYWZlYXMudjEuRmluZ2VycHJpbnQSEAoIZGlzdGFuY2UYAiABKAUSJQoKbGF5ZXJfaW5mbxgDIAMoCzIRLmdyYWZlYXMudjEuTGF5ZXISGQoRYmFzZV9yZXNvdXJjZV91cmwYBCABKAlCUQoNaW8uZ3JhZmVhcy52MVABWjhnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2dyYWZlYXMvdjE7Z3JhZmVhc6ICA0dSQWIGcHJvdG8z");

/**
 * Layer holds metadata specific to a layer of a Docker image.
 *
 * @generated from message grafeas.v1.Layer
 */
export type Layer = Message<"grafeas.v1.Layer"> & {
  /**
   * Required. The recovered Dockerfile directive used to construct this layer.
   * See https://docs.docker.com/engine/reference/builder/ for more information.
   *
   * @generated from field: string directive = 1;
   */
  directive: string;

  /**
   * The recovered arguments to the Dockerfile directive.
   *
   * @generated from field: string arguments = 2;
   */
  arguments: string;
};

/**
 * Describes the message grafeas.v1.Layer.
 * Use `create(LayerSchema)` to create a new message.
 */
export const LayerSchema: GenMessage<Layer> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_image, 0);

/**
 * A set of properties that uniquely identify a given Docker image.
 *
 * @generated from message grafeas.v1.Fingerprint
 */
export type Fingerprint = Message<"grafeas.v1.Fingerprint"> & {
  /**
   * Required. The layer ID of the final layer in the Docker image's v1
   * representation.
   *
   * @generated from field: string v1_name = 1;
   */
  v1Name: string;

  /**
   * Required. The ordered list of v2 blobs that represent a given image.
   *
   * @generated from field: repeated string v2_blob = 2;
   */
  v2Blob: string[];

  /**
   * Output only. The name of the image's v2 blobs computed via:
   *   [bottom] := v2_blob[bottom]
   *   [N] := sha256(v2_blob[N] + " " + v2_name[N+1])
   * Only the name of the final blob is kept.
   *
   * @generated from field: string v2_name = 3;
   */
  v2Name: string;
};

/**
 * Describes the message grafeas.v1.Fingerprint.
 * Use `create(FingerprintSchema)` to create a new message.
 */
export const FingerprintSchema: GenMessage<Fingerprint> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_image, 1);

/**
 * Basis describes the base image portion (Note) of the DockerImage
 * relationship. Linked occurrences are derived from this or an equivalent image
 * via:
 *   FROM <Basis.resource_url>
 * Or an equivalent reference, e.g., a tag of the resource_url.
 *
 * @generated from message grafeas.v1.ImageNote
 */
export type ImageNote = Message<"grafeas.v1.ImageNote"> & {
  /**
   * Required. Immutable. The resource_url for the resource representing the
   * basis of associated occurrence images.
   *
   * @generated from field: string resource_url = 1;
   */
  resourceUrl: string;

  /**
   * Required. Immutable. The fingerprint of the base image.
   *
   * @generated from field: grafeas.v1.Fingerprint fingerprint = 2;
   */
  fingerprint?: Fingerprint;
};

/**
 * Describes the message grafeas.v1.ImageNote.
 * Use `create(ImageNoteSchema)` to create a new message.
 */
export const ImageNoteSchema: GenMessage<ImageNote> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_image, 2);

/**
 * Details of the derived image portion of the DockerImage relationship. This
 * image would be produced from a Dockerfile with FROM <DockerImage.Basis in
 * attached Note>.
 *
 * @generated from message grafeas.v1.ImageOccurrence
 */
export type ImageOccurrence = Message<"grafeas.v1.ImageOccurrence"> & {
  /**
   * Required. The fingerprint of the derived image.
   *
   * @generated from field: grafeas.v1.Fingerprint fingerprint = 1;
   */
  fingerprint?: Fingerprint;

  /**
   * Output only. The number of layers by which this image differs from the
   * associated image basis.
   *
   * @generated from field: int32 distance = 2;
   */
  distance: number;

  /**
   * This contains layer-specific metadata, if populated it has length
   * "distance" and is ordered with [distance] being the layer immediately
   * following the base image and [1] being the final layer.
   *
   * @generated from field: repeated grafeas.v1.Layer layer_info = 3;
   */
  layerInfo: Layer[];

  /**
   * Output only. This contains the base image URL for the derived image
   * occurrence.
   *
   * @generated from field: string base_resource_url = 4;
   */
  baseResourceUrl: string;
};

/**
 * Describes the message grafeas.v1.ImageOccurrence.
 * Use `create(ImageOccurrenceSchema)` to create a new message.
 */
export const ImageOccurrenceSchema: GenMessage<ImageOccurrence> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_image, 3);

