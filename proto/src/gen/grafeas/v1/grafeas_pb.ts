// Copyright 2019 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file grafeas/v1/grafeas.proto (package grafeas.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../google/api/annotations_pb";
import { file_google_api_client } from "../../google/api/client_pb";
import { file_google_api_field_behavior } from "../../google/api/field_behavior_pb";
import { file_google_api_resource } from "../../google/api/resource_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { AttestationNote, AttestationOccurrence } from "./attestation_pb";
import { file_grafeas_v1_attestation } from "./attestation_pb";
import type { BuildNote, BuildOccurrence } from "./build_pb";
import { file_grafeas_v1_build } from "./build_pb";
import type { Envelope, NoteKind, RelatedUrl } from "./common_pb";
import { file_grafeas_v1_common } from "./common_pb";
import type { ComplianceNote, ComplianceOccurrence } from "./compliance_pb";
import { file_grafeas_v1_compliance } from "./compliance_pb";
import type { DeploymentNote, DeploymentOccurrence } from "./deployment_pb";
import { file_grafeas_v1_deployment } from "./deployment_pb";
import type { DiscoveryNote, DiscoveryOccurrence } from "./discovery_pb";
import { file_grafeas_v1_discovery } from "./discovery_pb";
import type { DSSEAttestationNote, DSSEAttestationOccurrence } from "./dsse_attestation_pb";
import { file_grafeas_v1_dsse_attestation } from "./dsse_attestation_pb";
import type { ImageNote, ImageOccurrence } from "./image_pb";
import { file_grafeas_v1_image } from "./image_pb";
import type { PackageNote, PackageOccurrence } from "./package_pb";
import { file_grafeas_v1_package } from "./package_pb";
import type { SBOMReferenceNote, SBOMReferenceOccurrence } from "./sbom_pb";
import { file_grafeas_v1_sbom } from "./sbom_pb";
import type { UpgradeNote, UpgradeOccurrence } from "./upgrade_pb";
import { file_grafeas_v1_upgrade } from "./upgrade_pb";
import type { VulnerabilityAssessmentNote } from "./vex_pb";
import { file_grafeas_v1_vex } from "./vex_pb";
import type { VulnerabilityNote, VulnerabilityOccurrence } from "./vulnerability_pb";
import { file_grafeas_v1_vulnerability } from "./vulnerability_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file grafeas/v1/grafeas.proto.
 */
export const file_grafeas_v1_grafeas: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_grafeas_v1_attestation, file_grafeas_v1_build, file_grafeas_v1_common, file_grafeas_v1_compliance, file_grafeas_v1_deployment, file_grafeas_v1_discovery, file_grafeas_v1_dsse_attestation, file_grafeas_v1_image, file_grafeas_v1_package, file_grafeas_v1_sbom, file_grafeas_v1_upgrade, file_grafeas_v1_vex, file_grafeas_v1_vulnerability]);

/**
 * An instance of an analysis type that has been found on a resource.
 *
 * @generated from message grafeas.v1.Occurrence
 */
export type Occurrence = Message<"grafeas.v1.Occurrence"> & {
  /**
   * Output only. The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Immutable. A URI that represents the resource for which the
   * occurrence applies. For example,
   * `https://gcr.io/project/image@sha256:123abc` for a Docker image.
   *
   * @generated from field: string resource_uri = 2;
   */
  resourceUri: string;

  /**
   * Required. Immutable. The analysis note associated with this occurrence, in
   * the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be
   * used as a filter in list requests.
   *
   * @generated from field: string note_name = 3;
   */
  noteName: string;

  /**
   * Output only. This explicitly denotes which of the occurrence details are
   * specified. This field can be used as a filter in list requests.
   *
   * @generated from field: grafeas.v1.NoteKind kind = 4;
   */
  kind: NoteKind;

  /**
   * A description of actions that can be taken to remedy the note.
   *
   * @generated from field: string remediation = 5;
   */
  remediation: string;

  /**
   * Output only. The time this occurrence was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time this occurrence was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 7;
   */
  updateTime?: Timestamp;

  /**
   * Required. Immutable. Describes the details of the note kind found on this
   * resource.
   *
   * @generated from oneof grafeas.v1.Occurrence.details
   */
  details: {
    /**
     * Describes a security vulnerability.
     *
     * @generated from field: grafeas.v1.VulnerabilityOccurrence vulnerability = 8;
     */
    value: VulnerabilityOccurrence;
    case: "vulnerability";
  } | {
    /**
     * Describes a verifiable build.
     *
     * @generated from field: grafeas.v1.BuildOccurrence build = 9;
     */
    value: BuildOccurrence;
    case: "build";
  } | {
    /**
     * Describes how this resource derives from the basis in the associated
     * note.
     *
     * @generated from field: grafeas.v1.ImageOccurrence image = 10;
     */
    value: ImageOccurrence;
    case: "image";
  } | {
    /**
     * Describes the installation of a package on the linked resource.
     *
     * @generated from field: grafeas.v1.PackageOccurrence package = 11;
     */
    value: PackageOccurrence;
    case: "package";
  } | {
    /**
     * Describes the deployment of an artifact on a runtime.
     *
     * @generated from field: grafeas.v1.DeploymentOccurrence deployment = 12;
     */
    value: DeploymentOccurrence;
    case: "deployment";
  } | {
    /**
     * Describes when a resource was discovered.
     *
     * @generated from field: grafeas.v1.DiscoveryOccurrence discovery = 13;
     */
    value: DiscoveryOccurrence;
    case: "discovery";
  } | {
    /**
     * Describes an attestation of an artifact.
     *
     * @generated from field: grafeas.v1.AttestationOccurrence attestation = 14;
     */
    value: AttestationOccurrence;
    case: "attestation";
  } | {
    /**
     * Describes an available package upgrade on the linked resource.
     *
     * @generated from field: grafeas.v1.UpgradeOccurrence upgrade = 15;
     */
    value: UpgradeOccurrence;
    case: "upgrade";
  } | {
    /**
     * Describes a compliance violation on a linked resource.
     *
     * @generated from field: grafeas.v1.ComplianceOccurrence compliance = 16;
     */
    value: ComplianceOccurrence;
    case: "compliance";
  } | {
    /**
     * Describes an attestation of an artifact using dsse.
     *
     * @generated from field: grafeas.v1.DSSEAttestationOccurrence dsse_attestation = 17;
     */
    value: DSSEAttestationOccurrence;
    case: "dsseAttestation";
  } | {
    /**
     * Describes a specific SBOM reference occurrences.
     *
     * @generated from field: grafeas.v1.SBOMReferenceOccurrence sbom_reference = 19;
     */
    value: SBOMReferenceOccurrence;
    case: "sbomReference";
  } | { case: undefined; value?: undefined };

  /**
   * https://github.com/secure-systems-lab/dsse
   *
   * @generated from field: grafeas.v1.Envelope envelope = 18;
   */
  envelope?: Envelope;
};

/**
 * Describes the message grafeas.v1.Occurrence.
 * Use `create(OccurrenceSchema)` to create a new message.
 */
export const OccurrenceSchema: GenMessage<Occurrence> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 0);

/**
 * A type of analysis that can be done for a resource.
 *
 * @generated from message grafeas.v1.Note
 */
export type Note = Message<"grafeas.v1.Note"> & {
  /**
   * Output only. The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A one sentence description of this note.
   *
   * @generated from field: string short_description = 2;
   */
  shortDescription: string;

  /**
   * A detailed description of this note.
   *
   * @generated from field: string long_description = 3;
   */
  longDescription: string;

  /**
   * Output only. The type of analysis. This field can be used as a filter in
   * list requests.
   *
   * @generated from field: grafeas.v1.NoteKind kind = 4;
   */
  kind: NoteKind;

  /**
   * URLs associated with this note.
   *
   * @generated from field: repeated grafeas.v1.RelatedUrl related_url = 5;
   */
  relatedUrl: RelatedUrl[];

  /**
   * Time of expiration for this note. Empty if note does not expire.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 6;
   */
  expirationTime?: Timestamp;

  /**
   * Output only. The time this note was created. This field can be used as a
   * filter in list requests.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time this note was last updated. This field can be used as
   * a filter in list requests.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * Other notes related to this note.
   *
   * @generated from field: repeated string related_note_names = 9;
   */
  relatedNoteNames: string[];

  /**
   * Required. Immutable. The type of analysis this note represents.
   *
   * @generated from oneof grafeas.v1.Note.type
   */
  type: {
    /**
     * A note describing a package vulnerability.
     *
     * @generated from field: grafeas.v1.VulnerabilityNote vulnerability = 10;
     */
    value: VulnerabilityNote;
    case: "vulnerability";
  } | {
    /**
     * A note describing build provenance for a verifiable build.
     *
     * @generated from field: grafeas.v1.BuildNote build = 11;
     */
    value: BuildNote;
    case: "build";
  } | {
    /**
     * A note describing a base image.
     *
     * @generated from field: grafeas.v1.ImageNote image = 12;
     */
    value: ImageNote;
    case: "image";
  } | {
    /**
     * A note describing a package hosted by various package managers.
     *
     * @generated from field: grafeas.v1.PackageNote package = 13;
     */
    value: PackageNote;
    case: "package";
  } | {
    /**
     * A note describing something that can be deployed.
     *
     * @generated from field: grafeas.v1.DeploymentNote deployment = 14;
     */
    value: DeploymentNote;
    case: "deployment";
  } | {
    /**
     * A note describing the initial analysis of a resource.
     *
     * @generated from field: grafeas.v1.DiscoveryNote discovery = 15;
     */
    value: DiscoveryNote;
    case: "discovery";
  } | {
    /**
     * A note describing an attestation role.
     *
     * @generated from field: grafeas.v1.AttestationNote attestation = 16;
     */
    value: AttestationNote;
    case: "attestation";
  } | {
    /**
     * A note describing available package upgrades.
     *
     * @generated from field: grafeas.v1.UpgradeNote upgrade = 17;
     */
    value: UpgradeNote;
    case: "upgrade";
  } | {
    /**
     * A note describing a compliance check.
     *
     * @generated from field: grafeas.v1.ComplianceNote compliance = 18;
     */
    value: ComplianceNote;
    case: "compliance";
  } | {
    /**
     * A note describing a dsse attestation note.
     *
     * @generated from field: grafeas.v1.DSSEAttestationNote dsse_attestation = 19;
     */
    value: DSSEAttestationNote;
    case: "dsseAttestation";
  } | {
    /**
     * A note describing a vulnerability assessment.
     *
     * @generated from field: grafeas.v1.VulnerabilityAssessmentNote vulnerability_assessment = 20;
     */
    value: VulnerabilityAssessmentNote;
    case: "vulnerabilityAssessment";
  } | {
    /**
     * A note describing an SBOM reference.
     *
     * @generated from field: grafeas.v1.SBOMReferenceNote sbom_reference = 21;
     */
    value: SBOMReferenceNote;
    case: "sbomReference";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1.Note.
 * Use `create(NoteSchema)` to create a new message.
 */
export const NoteSchema: GenMessage<Note> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 1);

/**
 * Request to get an occurrence.
 *
 * @generated from message grafeas.v1.GetOccurrenceRequest
 */
export type GetOccurrenceRequest = Message<"grafeas.v1.GetOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.GetOccurrenceRequest.
 * Use `create(GetOccurrenceRequestSchema)` to create a new message.
 */
export const GetOccurrenceRequestSchema: GenMessage<GetOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 2);

/**
 * Request to list occurrences.
 *
 * @generated from message grafeas.v1.ListOccurrencesRequest
 */
export type ListOccurrencesRequest = Message<"grafeas.v1.ListOccurrencesRequest"> & {
  /**
   * The name of the project to list occurrences for in the form of
   * `projects/[PROJECT_ID]`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of occurrences to return in the list. Must be positive. Max allowed
   * page size is 1000. If not specified, page size defaults to 20.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1.ListOccurrencesRequest.
 * Use `create(ListOccurrencesRequestSchema)` to create a new message.
 */
export const ListOccurrencesRequestSchema: GenMessage<ListOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 3);

/**
 * Response for listing occurrences.
 *
 * @generated from message grafeas.v1.ListOccurrencesResponse
 */
export type ListOccurrencesResponse = Message<"grafeas.v1.ListOccurrencesResponse"> & {
  /**
   * The occurrences requested.
   *
   * @generated from field: repeated grafeas.v1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];

  /**
   * The next pagination token in the list response. It should be used as
   * `page_token` for the following request. An empty value means no more
   * results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1.ListOccurrencesResponse.
 * Use `create(ListOccurrencesResponseSchema)` to create a new message.
 */
export const ListOccurrencesResponseSchema: GenMessage<ListOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 4);

/**
 * Request to delete an occurrence.
 *
 * @generated from message grafeas.v1.DeleteOccurrenceRequest
 */
export type DeleteOccurrenceRequest = Message<"grafeas.v1.DeleteOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.DeleteOccurrenceRequest.
 * Use `create(DeleteOccurrenceRequestSchema)` to create a new message.
 */
export const DeleteOccurrenceRequestSchema: GenMessage<DeleteOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 5);

/**
 * Request to create a new occurrence.
 *
 * @generated from message grafeas.v1.CreateOccurrenceRequest
 */
export type CreateOccurrenceRequest = Message<"grafeas.v1.CreateOccurrenceRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the occurrence is to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The occurrence to create.
   *
   * @generated from field: grafeas.v1.Occurrence occurrence = 2;
   */
  occurrence?: Occurrence;
};

/**
 * Describes the message grafeas.v1.CreateOccurrenceRequest.
 * Use `create(CreateOccurrenceRequestSchema)` to create a new message.
 */
export const CreateOccurrenceRequestSchema: GenMessage<CreateOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 6);

/**
 * Request to update an occurrence.
 *
 * @generated from message grafeas.v1.UpdateOccurrenceRequest
 */
export type UpdateOccurrenceRequest = Message<"grafeas.v1.UpdateOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The updated occurrence.
   *
   * @generated from field: grafeas.v1.Occurrence occurrence = 2;
   */
  occurrence?: Occurrence;

  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message grafeas.v1.UpdateOccurrenceRequest.
 * Use `create(UpdateOccurrenceRequestSchema)` to create a new message.
 */
export const UpdateOccurrenceRequestSchema: GenMessage<UpdateOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 7);

/**
 * Request to get a note.
 *
 * @generated from message grafeas.v1.GetNoteRequest
 */
export type GetNoteRequest = Message<"grafeas.v1.GetNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.GetNoteRequest.
 * Use `create(GetNoteRequestSchema)` to create a new message.
 */
export const GetNoteRequestSchema: GenMessage<GetNoteRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 8);

/**
 * Request to get the note to which the specified occurrence is attached.
 *
 * @generated from message grafeas.v1.GetOccurrenceNoteRequest
 */
export type GetOccurrenceNoteRequest = Message<"grafeas.v1.GetOccurrenceNoteRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.GetOccurrenceNoteRequest.
 * Use `create(GetOccurrenceNoteRequestSchema)` to create a new message.
 */
export const GetOccurrenceNoteRequestSchema: GenMessage<GetOccurrenceNoteRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 9);

/**
 * Request to list notes.
 *
 * @generated from message grafeas.v1.ListNotesRequest
 */
export type ListNotesRequest = Message<"grafeas.v1.ListNotesRequest"> & {
  /**
   * The name of the project to list notes for in the form of
   * `projects/[PROJECT_ID]`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of notes to return in the list. Must be positive. Max allowed page
   * size is 1000. If not specified, page size defaults to 20.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1.ListNotesRequest.
 * Use `create(ListNotesRequestSchema)` to create a new message.
 */
export const ListNotesRequestSchema: GenMessage<ListNotesRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 10);

/**
 * Response for listing notes.
 *
 * @generated from message grafeas.v1.ListNotesResponse
 */
export type ListNotesResponse = Message<"grafeas.v1.ListNotesResponse"> & {
  /**
   * The notes requested.
   *
   * @generated from field: repeated grafeas.v1.Note notes = 1;
   */
  notes: Note[];

  /**
   * The next pagination token in the list response. It should be used as
   * `page_token` for the following request. An empty value means no more
   * results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1.ListNotesResponse.
 * Use `create(ListNotesResponseSchema)` to create a new message.
 */
export const ListNotesResponseSchema: GenMessage<ListNotesResponse> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 11);

/**
 * Request to delete a note.
 *
 * @generated from message grafeas.v1.DeleteNoteRequest
 */
export type DeleteNoteRequest = Message<"grafeas.v1.DeleteNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1.DeleteNoteRequest.
 * Use `create(DeleteNoteRequestSchema)` to create a new message.
 */
export const DeleteNoteRequestSchema: GenMessage<DeleteNoteRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 12);

/**
 * Request to create a new note.
 *
 * @generated from message grafeas.v1.CreateNoteRequest
 */
export type CreateNoteRequest = Message<"grafeas.v1.CreateNoteRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the note is to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The ID to use for this note.
   *
   * @generated from field: string note_id = 2;
   */
  noteId: string;

  /**
   * The note to create.
   *
   * @generated from field: grafeas.v1.Note note = 3;
   */
  note?: Note;
};

/**
 * Describes the message grafeas.v1.CreateNoteRequest.
 * Use `create(CreateNoteRequestSchema)` to create a new message.
 */
export const CreateNoteRequestSchema: GenMessage<CreateNoteRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 13);

/**
 * Request to update a note.
 *
 * @generated from message grafeas.v1.UpdateNoteRequest
 */
export type UpdateNoteRequest = Message<"grafeas.v1.UpdateNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The updated note.
   *
   * @generated from field: grafeas.v1.Note note = 2;
   */
  note?: Note;

  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message grafeas.v1.UpdateNoteRequest.
 * Use `create(UpdateNoteRequestSchema)` to create a new message.
 */
export const UpdateNoteRequestSchema: GenMessage<UpdateNoteRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 14);

/**
 * Request to list occurrences for a note.
 *
 * @generated from message grafeas.v1.ListNoteOccurrencesRequest
 */
export type ListNoteOccurrencesRequest = Message<"grafeas.v1.ListNoteOccurrencesRequest"> & {
  /**
   * The name of the note to list occurrences for in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of occurrences to return in the list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1.ListNoteOccurrencesRequest.
 * Use `create(ListNoteOccurrencesRequestSchema)` to create a new message.
 */
export const ListNoteOccurrencesRequestSchema: GenMessage<ListNoteOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 15);

/**
 * Response for listing occurrences for a note.
 *
 * @generated from message grafeas.v1.ListNoteOccurrencesResponse
 */
export type ListNoteOccurrencesResponse = Message<"grafeas.v1.ListNoteOccurrencesResponse"> & {
  /**
   * The occurrences attached to the specified note.
   *
   * @generated from field: repeated grafeas.v1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1.ListNoteOccurrencesResponse.
 * Use `create(ListNoteOccurrencesResponseSchema)` to create a new message.
 */
export const ListNoteOccurrencesResponseSchema: GenMessage<ListNoteOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 16);

/**
 * Request to create notes in batch.
 *
 * @generated from message grafeas.v1.BatchCreateNotesRequest
 */
export type BatchCreateNotesRequest = Message<"grafeas.v1.BatchCreateNotesRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the notes are to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The notes to create. Max allowed length is 1000.
   *
   * @generated from field: map<string, grafeas.v1.Note> notes = 2;
   */
  notes: { [key: string]: Note };
};

/**
 * Describes the message grafeas.v1.BatchCreateNotesRequest.
 * Use `create(BatchCreateNotesRequestSchema)` to create a new message.
 */
export const BatchCreateNotesRequestSchema: GenMessage<BatchCreateNotesRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 17);

/**
 * Response for creating notes in batch.
 *
 * @generated from message grafeas.v1.BatchCreateNotesResponse
 */
export type BatchCreateNotesResponse = Message<"grafeas.v1.BatchCreateNotesResponse"> & {
  /**
   * The notes that were created.
   *
   * @generated from field: repeated grafeas.v1.Note notes = 1;
   */
  notes: Note[];
};

/**
 * Describes the message grafeas.v1.BatchCreateNotesResponse.
 * Use `create(BatchCreateNotesResponseSchema)` to create a new message.
 */
export const BatchCreateNotesResponseSchema: GenMessage<BatchCreateNotesResponse> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 18);

/**
 * Request to create occurrences in batch.
 *
 * @generated from message grafeas.v1.BatchCreateOccurrencesRequest
 */
export type BatchCreateOccurrencesRequest = Message<"grafeas.v1.BatchCreateOccurrencesRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the occurrences are to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The occurrences to create. Max allowed length is 1000.
   *
   * @generated from field: repeated grafeas.v1.Occurrence occurrences = 2;
   */
  occurrences: Occurrence[];
};

/**
 * Describes the message grafeas.v1.BatchCreateOccurrencesRequest.
 * Use `create(BatchCreateOccurrencesRequestSchema)` to create a new message.
 */
export const BatchCreateOccurrencesRequestSchema: GenMessage<BatchCreateOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 19);

/**
 * Response for creating occurrences in batch.
 *
 * @generated from message grafeas.v1.BatchCreateOccurrencesResponse
 */
export type BatchCreateOccurrencesResponse = Message<"grafeas.v1.BatchCreateOccurrencesResponse"> & {
  /**
   * The occurrences that were created.
   *
   * @generated from field: repeated grafeas.v1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];
};

/**
 * Describes the message grafeas.v1.BatchCreateOccurrencesResponse.
 * Use `create(BatchCreateOccurrencesResponseSchema)` to create a new message.
 */
export const BatchCreateOccurrencesResponseSchema: GenMessage<BatchCreateOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_grafeas_v1_grafeas, 20);

/**
 * [Grafeas](https://grafeas.io) API.
 *
 * Retrieves analysis results of Cloud components such as Docker container
 * images.
 *
 * Analysis results are stored as a series of occurrences. An `Occurrence`
 * contains information about a specific analysis instance on a resource. An
 * occurrence refers to a `Note`. A note contains details describing the
 * analysis and is generally stored in a separate project, called a `Provider`.
 * Multiple occurrences can refer to the same note.
 *
 * For example, an SSL vulnerability could affect multiple images. In this case,
 * there would be one note for the vulnerability and an occurrence for each
 * image with the vulnerability referring to that note.
 *
 * @generated from service grafeas.v1.Grafeas
 */
export const Grafeas: GenService<{
  /**
   * Gets the specified occurrence.
   *
   * @generated from rpc grafeas.v1.Grafeas.GetOccurrence
   */
  getOccurrence: {
    methodKind: "unary";
    input: typeof GetOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Lists occurrences for the specified project.
   *
   * @generated from rpc grafeas.v1.Grafeas.ListOccurrences
   */
  listOccurrences: {
    methodKind: "unary";
    input: typeof ListOccurrencesRequestSchema;
    output: typeof ListOccurrencesResponseSchema;
  },
  /**
   * Deletes the specified occurrence. For example, use this method to delete an
   * occurrence when the occurrence is no longer applicable for the given
   * resource.
   *
   * @generated from rpc grafeas.v1.Grafeas.DeleteOccurrence
   */
  deleteOccurrence: {
    methodKind: "unary";
    input: typeof DeleteOccurrenceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new occurrence.
   *
   * @generated from rpc grafeas.v1.Grafeas.CreateOccurrence
   */
  createOccurrence: {
    methodKind: "unary";
    input: typeof CreateOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Creates new occurrences in batch.
   *
   * @generated from rpc grafeas.v1.Grafeas.BatchCreateOccurrences
   */
  batchCreateOccurrences: {
    methodKind: "unary";
    input: typeof BatchCreateOccurrencesRequestSchema;
    output: typeof BatchCreateOccurrencesResponseSchema;
  },
  /**
   * Updates the specified occurrence.
   *
   * @generated from rpc grafeas.v1.Grafeas.UpdateOccurrence
   */
  updateOccurrence: {
    methodKind: "unary";
    input: typeof UpdateOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Gets the note attached to the specified occurrence. Consumer projects can
   * use this method to get a note that belongs to a provider project.
   *
   * @generated from rpc grafeas.v1.Grafeas.GetOccurrenceNote
   */
  getOccurrenceNote: {
    methodKind: "unary";
    input: typeof GetOccurrenceNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Gets the specified note.
   *
   * @generated from rpc grafeas.v1.Grafeas.GetNote
   */
  getNote: {
    methodKind: "unary";
    input: typeof GetNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Lists notes for the specified project.
   *
   * @generated from rpc grafeas.v1.Grafeas.ListNotes
   */
  listNotes: {
    methodKind: "unary";
    input: typeof ListNotesRequestSchema;
    output: typeof ListNotesResponseSchema;
  },
  /**
   * Deletes the specified note.
   *
   * @generated from rpc grafeas.v1.Grafeas.DeleteNote
   */
  deleteNote: {
    methodKind: "unary";
    input: typeof DeleteNoteRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new note.
   *
   * @generated from rpc grafeas.v1.Grafeas.CreateNote
   */
  createNote: {
    methodKind: "unary";
    input: typeof CreateNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Creates new notes in batch.
   *
   * @generated from rpc grafeas.v1.Grafeas.BatchCreateNotes
   */
  batchCreateNotes: {
    methodKind: "unary";
    input: typeof BatchCreateNotesRequestSchema;
    output: typeof BatchCreateNotesResponseSchema;
  },
  /**
   * Updates the specified note.
   *
   * @generated from rpc grafeas.v1.Grafeas.UpdateNote
   */
  updateNote: {
    methodKind: "unary";
    input: typeof UpdateNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Lists occurrences referencing the specified note. Provider projects can use
   * this method to get all occurrences across consumer projects referencing the
   * specified note.
   *
   * @generated from rpc grafeas.v1.Grafeas.ListNoteOccurrences
   */
  listNoteOccurrences: {
    methodKind: "unary";
    input: typeof ListNoteOccurrencesRequestSchema;
    output: typeof ListNoteOccurrencesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_grafeas_v1_grafeas, 0);

