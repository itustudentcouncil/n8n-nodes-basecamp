// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/iam/credentials/v1/common.proto (package google.iam.credentials.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/iam/credentials/v1/common.proto.
 */
export const file_google_iam_credentials_v1_common: GenFile = /*@__PURE__*/
  fileDesc("CiZnb29nbGUvaWFtL2NyZWRlbnRpYWxzL3YxL2NvbW1vbi5wcm90bxIZZ29vZ2xlLmlhbS5jcmVkZW50aWFscy52MSKpAQoaR2VuZXJhdGVBY2Nlc3NUb2tlblJlcXVlc3QSNwoEbmFtZRgBIAEoCUIp4EEC+kEjCiFpYW0uZ29vZ2xlYXBpcy5jb20vU2VydmljZUFjY291bnQSEQoJZGVsZWdhdGVzGAIgAygJEhIKBXNjb3BlGAQgAygJQgPgQQISKwoIbGlmZXRpbWUYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24iZAobR2VuZXJhdGVBY2Nlc3NUb2tlblJlc3BvbnNlEhQKDGFjY2Vzc190b2tlbhgBIAEoCRIvCgtleHBpcmVfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAicwoPU2lnbkJsb2JSZXF1ZXN0EjcKBG5hbWUYASABKAlCKeBBAvpBIwohaWFtLmdvb2dsZWFwaXMuY29tL1NlcnZpY2VBY2NvdW50EhEKCWRlbGVnYXRlcxgDIAMoCRIUCgdwYXlsb2FkGAUgASgMQgPgQQIiNwoQU2lnbkJsb2JSZXNwb25zZRIOCgZrZXlfaWQYASABKAkSEwoLc2lnbmVkX2Jsb2IYBCABKAwicgoOU2lnbkp3dFJlcXVlc3QSNwoEbmFtZRgBIAEoCUIp4EEC+kEjCiFpYW0uZ29vZ2xlYXBpcy5jb20vU2VydmljZUFjY291bnQSEQoJZGVsZWdhdGVzGAMgAygJEhQKB3BheWxvYWQYBSABKAlCA+BBAiI1Cg9TaWduSnd0UmVzcG9uc2USDgoGa2V5X2lkGAEgASgJEhIKCnNpZ25lZF9qd3QYAiABKAkikgEKFkdlbmVyYXRlSWRUb2tlblJlcXVlc3QSNwoEbmFtZRgBIAEoCUIp4EEC+kEjCiFpYW0uZ29vZ2xlYXBpcy5jb20vU2VydmljZUFjY291bnQSEQoJZGVsZWdhdGVzGAIgAygJEhUKCGF1ZGllbmNlGAMgASgJQgPgQQISFQoNaW5jbHVkZV9lbWFpbBgEIAEoCCIoChdHZW5lcmF0ZUlkVG9rZW5SZXNwb25zZRINCgV0b2tlbhgBIAEoCUKsAgojY29tLmdvb2dsZS5jbG91ZC5pYW0uY3JlZGVudGlhbHMudjFCGUlBTUNyZWRlbnRpYWxzQ29tbW9uUHJvdG9QAVpFY2xvdWQuZ29vZ2xlLmNvbS9nby9pYW0vY3JlZGVudGlhbHMvYXBpdjEvY3JlZGVudGlhbHNwYjtjcmVkZW50aWFsc3Bi+AEBqgIfR29vZ2xlLkNsb3VkLklhbS5DcmVkZW50aWFscy5WMcoCH0dvb2dsZVxDbG91ZFxJYW1cQ3JlZGVudGlhbHNcVjHqQVkKIWlhbS5nb29nbGVhcGlzLmNvbS9TZXJ2aWNlQWNjb3VudBI0cHJvamVjdHMve3Byb2plY3R9L3NlcnZpY2VBY2NvdW50cy97c2VydmljZV9hY2NvdW50fWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * @generated from message google.iam.credentials.v1.GenerateAccessTokenRequest
 */
export type GenerateAccessTokenRequest = Message<"google.iam.credentials.v1.GenerateAccessTokenRequest"> & {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: repeated string delegates = 2;
   */
  delegates: string[];

  /**
   * Required. Code to identify the scopes to be included in the OAuth 2.0 access token.
   * See https://developers.google.com/identity/protocols/googlescopes for more
   * information.
   * At least one value required.
   *
   * @generated from field: repeated string scope = 4;
   */
  scope: string[];

  /**
   * The desired lifetime duration of the access token in seconds.
   * Must be set to a value less than or equal to 3600 (1 hour). If a value is
   * not specified, the token's lifetime will be set to a default value of one
   * hour.
   *
   * @generated from field: google.protobuf.Duration lifetime = 7;
   */
  lifetime?: Duration;
};

/**
 * Describes the message google.iam.credentials.v1.GenerateAccessTokenRequest.
 * Use `create(GenerateAccessTokenRequestSchema)` to create a new message.
 */
export const GenerateAccessTokenRequestSchema: GenMessage<GenerateAccessTokenRequest> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 0);

/**
 * @generated from message google.iam.credentials.v1.GenerateAccessTokenResponse
 */
export type GenerateAccessTokenResponse = Message<"google.iam.credentials.v1.GenerateAccessTokenResponse"> & {
  /**
   * The OAuth 2.0 access token.
   *
   * @generated from field: string access_token = 1;
   */
  accessToken: string;

  /**
   * Token expiration time.
   * The expiration time is always set.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.iam.credentials.v1.GenerateAccessTokenResponse.
 * Use `create(GenerateAccessTokenResponseSchema)` to create a new message.
 */
export const GenerateAccessTokenResponseSchema: GenMessage<GenerateAccessTokenResponse> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 1);

/**
 * @generated from message google.iam.credentials.v1.SignBlobRequest
 */
export type SignBlobRequest = Message<"google.iam.credentials.v1.SignBlobRequest"> & {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: repeated string delegates = 3;
   */
  delegates: string[];

  /**
   * Required. The bytes to sign.
   *
   * @generated from field: bytes payload = 5;
   */
  payload: Uint8Array;
};

/**
 * Describes the message google.iam.credentials.v1.SignBlobRequest.
 * Use `create(SignBlobRequestSchema)` to create a new message.
 */
export const SignBlobRequestSchema: GenMessage<SignBlobRequest> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 2);

/**
 * @generated from message google.iam.credentials.v1.SignBlobResponse
 */
export type SignBlobResponse = Message<"google.iam.credentials.v1.SignBlobResponse"> & {
  /**
   * The ID of the key used to sign the blob.
   *
   * @generated from field: string key_id = 1;
   */
  keyId: string;

  /**
   * The signed blob.
   *
   * @generated from field: bytes signed_blob = 4;
   */
  signedBlob: Uint8Array;
};

/**
 * Describes the message google.iam.credentials.v1.SignBlobResponse.
 * Use `create(SignBlobResponseSchema)` to create a new message.
 */
export const SignBlobResponseSchema: GenMessage<SignBlobResponse> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 3);

/**
 * @generated from message google.iam.credentials.v1.SignJwtRequest
 */
export type SignJwtRequest = Message<"google.iam.credentials.v1.SignJwtRequest"> & {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: repeated string delegates = 3;
   */
  delegates: string[];

  /**
   * Required. The JWT payload to sign: a JSON object that contains a JWT Claims Set.
   *
   * @generated from field: string payload = 5;
   */
  payload: string;
};

/**
 * Describes the message google.iam.credentials.v1.SignJwtRequest.
 * Use `create(SignJwtRequestSchema)` to create a new message.
 */
export const SignJwtRequestSchema: GenMessage<SignJwtRequest> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 4);

/**
 * @generated from message google.iam.credentials.v1.SignJwtResponse
 */
export type SignJwtResponse = Message<"google.iam.credentials.v1.SignJwtResponse"> & {
  /**
   * The ID of the key used to sign the JWT.
   *
   * @generated from field: string key_id = 1;
   */
  keyId: string;

  /**
   * The signed JWT.
   *
   * @generated from field: string signed_jwt = 2;
   */
  signedJwt: string;
};

/**
 * Describes the message google.iam.credentials.v1.SignJwtResponse.
 * Use `create(SignJwtResponseSchema)` to create a new message.
 */
export const SignJwtResponseSchema: GenMessage<SignJwtResponse> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 5);

/**
 * @generated from message google.iam.credentials.v1.GenerateIdTokenRequest
 */
export type GenerateIdTokenRequest = Message<"google.iam.credentials.v1.GenerateIdTokenRequest"> & {
  /**
   * Required. The resource name of the service account for which the credentials
   * are requested, in the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The sequence of service accounts in a delegation chain. Each service
   * account must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on its next service account in the chain. The last service account in the
   * chain must be granted the `roles/iam.serviceAccountTokenCreator` role
   * on the service account that is specified in the `name` field of the
   * request.
   *
   * The delegates must have the following format:
   * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`. The `-` wildcard
   * character is required; replacing it with a project ID is invalid.
   *
   * @generated from field: repeated string delegates = 2;
   */
  delegates: string[];

  /**
   * Required. The audience for the token, such as the API or account that this token
   * grants access to.
   *
   * @generated from field: string audience = 3;
   */
  audience: string;

  /**
   * Include the service account email in the token. If set to `true`, the
   * token will contain `email` and `email_verified` claims.
   *
   * @generated from field: bool include_email = 4;
   */
  includeEmail: boolean;
};

/**
 * Describes the message google.iam.credentials.v1.GenerateIdTokenRequest.
 * Use `create(GenerateIdTokenRequestSchema)` to create a new message.
 */
export const GenerateIdTokenRequestSchema: GenMessage<GenerateIdTokenRequest> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 6);

/**
 * @generated from message google.iam.credentials.v1.GenerateIdTokenResponse
 */
export type GenerateIdTokenResponse = Message<"google.iam.credentials.v1.GenerateIdTokenResponse"> & {
  /**
   * The OpenId Connect ID token.
   *
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message google.iam.credentials.v1.GenerateIdTokenResponse.
 * Use `create(GenerateIdTokenResponseSchema)` to create a new message.
 */
export const GenerateIdTokenResponseSchema: GenMessage<GenerateIdTokenResponse> = /*@__PURE__*/
  messageDesc(file_google_iam_credentials_v1_common, 7);

