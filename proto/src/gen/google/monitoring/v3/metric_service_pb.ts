// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/metric_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import { file_google_api_client } from "../../api/client_pb";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { MetricDescriptor, MetricDescriptorSchema } from "../../api/metric_pb";
import { file_google_api_metric } from "../../api/metric_pb";
import type { MonitoredResourceDescriptor, MonitoredResourceDescriptorSchema } from "../../api/monitored_resource_pb";
import { file_google_api_monitored_resource } from "../../api/monitored_resource_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { Aggregation, TimeInterval } from "./common_pb";
import { file_google_monitoring_v3_common } from "./common_pb";
import type { QueryError, TimeSeries, TimeSeriesData, TimeSeriesDescriptor } from "./metric_pb";
import { file_google_monitoring_v3_metric } from "./metric_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../rpc/status_pb";
import { file_google_rpc_status } from "../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/v3/metric_service.proto.
 */
export const file_google_monitoring_v3_metric_service: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvbW9uaXRvcmluZy92My9tZXRyaWNfc2VydmljZS5wcm90bxIUZ29vZ2xlLm1vbml0b3JpbmcudjMirQEKJ0xpc3RNb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3JzUmVxdWVzdBJLCgRuYW1lGAUgASgJQj3gQQL6QTcSNW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vTW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSKKAQooTGlzdE1vbml0b3JlZFJlc291cmNlRGVzY3JpcHRvcnNSZXNwb25zZRJFChRyZXNvdXJjZV9kZXNjcmlwdG9ycxgBIAMoCzInLmdvb2dsZS5hcGkuTW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJ0CiVHZXRNb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3JSZXF1ZXN0EksKBG5hbWUYAyABKAlCPeBBAvpBNwo1bW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Nb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3IilwEKHExpc3RNZXRyaWNEZXNjcmlwdG9yc1JlcXVlc3QSQAoEbmFtZRgFIAEoCUIy4EEC+kEsEiptb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL01ldHJpY0Rlc2NyaXB0b3ISDgoGZmlsdGVyGAIgASgJEhEKCXBhZ2Vfc2l6ZRgDIAEoBRISCgpwYWdlX3Rva2VuGAQgASgJInIKHUxpc3RNZXRyaWNEZXNjcmlwdG9yc1Jlc3BvbnNlEjgKEm1ldHJpY19kZXNjcmlwdG9ycxgBIAMoCzIcLmdvb2dsZS5hcGkuTWV0cmljRGVzY3JpcHRvchIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiXgoaR2V0TWV0cmljRGVzY3JpcHRvclJlcXVlc3QSQAoEbmFtZRgDIAEoCUIy4EEC+kEsCiptb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL01ldHJpY0Rlc2NyaXB0b3IinwEKHUNyZWF0ZU1ldHJpY0Rlc2NyaXB0b3JSZXF1ZXN0EkAKBG5hbWUYAyABKAlCMuBBAvpBLBIqbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9NZXRyaWNEZXNjcmlwdG9yEjwKEW1ldHJpY19kZXNjcmlwdG9yGAIgASgLMhwuZ29vZ2xlLmFwaS5NZXRyaWNEZXNjcmlwdG9yQgPgQQIiYQodRGVsZXRlTWV0cmljRGVzY3JpcHRvclJlcXVlc3QSQAoEbmFtZRgDIAEoCUIy4EEC+kEsCiptb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL01ldHJpY0Rlc2NyaXB0b3IizgMKFUxpc3RUaW1lU2VyaWVzUmVxdWVzdBI6CgRuYW1lGAogASgJQizgQQL6QSYSJG1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vVGltZVNlcmllcxITCgZmaWx0ZXIYAiABKAlCA+BBAhI5CghpbnRlcnZhbBgEIAEoCzIiLmdvb2dsZS5tb25pdG9yaW5nLnYzLlRpbWVJbnRlcnZhbEID4EECEjYKC2FnZ3JlZ2F0aW9uGAUgASgLMiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWdncmVnYXRpb24SQAoVc2Vjb25kYXJ5X2FnZ3JlZ2F0aW9uGAsgASgLMiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWdncmVnYXRpb24SEAoIb3JkZXJfYnkYBiABKAkSTQoEdmlldxgHIAEoDjI6Lmdvb2dsZS5tb25pdG9yaW5nLnYzLkxpc3RUaW1lU2VyaWVzUmVxdWVzdC5UaW1lU2VyaWVzVmlld0ID4EECEhEKCXBhZ2Vfc2l6ZRgIIAEoBRISCgpwYWdlX3Rva2VuGAkgASgJIicKDlRpbWVTZXJpZXNWaWV3EggKBEZVTEwQABILCgdIRUFERVJTEAEipAEKFkxpc3RUaW1lU2VyaWVzUmVzcG9uc2USNQoLdGltZV9zZXJpZXMYASADKAsyIC5nb29nbGUubW9uaXRvcmluZy52My5UaW1lU2VyaWVzEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCRIsChBleGVjdXRpb25fZXJyb3JzGAMgAygLMhIuZ29vZ2xlLnJwYy5TdGF0dXMSDAoEdW5pdBgFIAEoCSKYAQoXQ3JlYXRlVGltZVNlcmllc1JlcXVlc3QSQQoEbmFtZRgDIAEoCUIz4EEC+kEtCitjbG91ZHJlc291cmNlbWFuYWdlci5nb29nbGVhcGlzLmNvbS9Qcm9qZWN0EjoKC3RpbWVfc2VyaWVzGAIgAygLMiAuZ29vZ2xlLm1vbml0b3JpbmcudjMuVGltZVNlcmllc0ID4EECInoKFUNyZWF0ZVRpbWVTZXJpZXNFcnJvchI5Cgt0aW1lX3NlcmllcxgBIAEoCzIgLmdvb2dsZS5tb25pdG9yaW5nLnYzLlRpbWVTZXJpZXNCAhgBEiYKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgIYASLYAQoXQ3JlYXRlVGltZVNlcmllc1N1bW1hcnkSGQoRdG90YWxfcG9pbnRfY291bnQYASABKAUSGwoTc3VjY2Vzc19wb2ludF9jb3VudBgCIAEoBRJDCgZlcnJvcnMYAyADKAsyMy5nb29nbGUubW9uaXRvcmluZy52My5DcmVhdGVUaW1lU2VyaWVzU3VtbWFyeS5FcnJvchpACgVFcnJvchIiCgZzdGF0dXMYASABKAsyEi5nb29nbGUucnBjLlN0YXR1cxITCgtwb2ludF9jb3VudBgCIAEoBSJmChZRdWVyeVRpbWVTZXJpZXNSZXF1ZXN0EhEKBG5hbWUYASABKAlCA+BBAhISCgVxdWVyeRgHIAEoCUID4EECEhEKCXBhZ2Vfc2l6ZRgJIAEoBRISCgpwYWdlX3Rva2VuGAogASgJIuoBChdRdWVyeVRpbWVTZXJpZXNSZXNwb25zZRJKChZ0aW1lX3Nlcmllc19kZXNjcmlwdG9yGAggASgLMiouZ29vZ2xlLm1vbml0b3JpbmcudjMuVGltZVNlcmllc0Rlc2NyaXB0b3ISPgoQdGltZV9zZXJpZXNfZGF0YRgJIAMoCzIkLmdvb2dsZS5tb25pdG9yaW5nLnYzLlRpbWVTZXJpZXNEYXRhEhcKD25leHRfcGFnZV90b2tlbhgKIAEoCRIqCg5wYXJ0aWFsX2Vycm9ycxgLIAMoCzISLmdvb2dsZS5ycGMuU3RhdHVzIlkKDlF1ZXJ5RXJyb3JMaXN0EjAKBmVycm9ycxgBIAMoCzIgLmdvb2dsZS5tb25pdG9yaW5nLnYzLlF1ZXJ5RXJyb3ISFQoNZXJyb3Jfc3VtbWFyeRgCIAEoCTK8DwoNTWV0cmljU2VydmljZRLkAQogTGlzdE1vbml0b3JlZFJlc291cmNlRGVzY3JpcHRvcnMSPS5nb29nbGUubW9uaXRvcmluZy52My5MaXN0TW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yc1JlcXVlc3QaPi5nb29nbGUubW9uaXRvcmluZy52My5MaXN0TW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yc1Jlc3BvbnNlIkHaQQRuYW1lgtPkkwI0EjIvdjMve25hbWU9cHJvamVjdHMvKn0vbW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9ycxLMAQoeR2V0TW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yEjsuZ29vZ2xlLm1vbml0b3JpbmcudjMuR2V0TW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yUmVxdWVzdBonLmdvb2dsZS5hcGkuTW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9yIkTaQQRuYW1lgtPkkwI3EjUvdjMve25hbWU9cHJvamVjdHMvKi9tb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3JzLyoqfRK4AQoVTGlzdE1ldHJpY0Rlc2NyaXB0b3JzEjIuZ29vZ2xlLm1vbml0b3JpbmcudjMuTGlzdE1ldHJpY0Rlc2NyaXB0b3JzUmVxdWVzdBozLmdvb2dsZS5tb25pdG9yaW5nLnYzLkxpc3RNZXRyaWNEZXNjcmlwdG9yc1Jlc3BvbnNlIjbaQQRuYW1lgtPkkwIpEicvdjMve25hbWU9cHJvamVjdHMvKn0vbWV0cmljRGVzY3JpcHRvcnMSoAEKE0dldE1ldHJpY0Rlc2NyaXB0b3ISMC5nb29nbGUubW9uaXRvcmluZy52My5HZXRNZXRyaWNEZXNjcmlwdG9yUmVxdWVzdBocLmdvb2dsZS5hcGkuTWV0cmljRGVzY3JpcHRvciI52kEEbmFtZYLT5JMCLBIqL3YzL3tuYW1lPXByb2plY3RzLyovbWV0cmljRGVzY3JpcHRvcnMvKip9EsgBChZDcmVhdGVNZXRyaWNEZXNjcmlwdG9yEjMuZ29vZ2xlLm1vbml0b3JpbmcudjMuQ3JlYXRlTWV0cmljRGVzY3JpcHRvclJlcXVlc3QaHC5nb29nbGUuYXBpLk1ldHJpY0Rlc2NyaXB0b3IiW9pBFm5hbWUsbWV0cmljX2Rlc2NyaXB0b3KC0+STAjw6EW1ldHJpY19kZXNjcmlwdG9yIicvdjMve25hbWU9cHJvamVjdHMvKn0vbWV0cmljRGVzY3JpcHRvcnMSoAEKFkRlbGV0ZU1ldHJpY0Rlc2NyaXB0b3ISMy5nb29nbGUubW9uaXRvcmluZy52My5EZWxldGVNZXRyaWNEZXNjcmlwdG9yUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI52kEEbmFtZYLT5JMCLCoqL3YzL3tuYW1lPXByb2plY3RzLyovbWV0cmljRGVzY3JpcHRvcnMvKip9Ev4BCg5MaXN0VGltZVNlcmllcxIrLmdvb2dsZS5tb25pdG9yaW5nLnYzLkxpc3RUaW1lU2VyaWVzUmVxdWVzdBosLmdvb2dsZS5tb25pdG9yaW5nLnYzLkxpc3RUaW1lU2VyaWVzUmVzcG9uc2UikAHaQRluYW1lLGZpbHRlcixpbnRlcnZhbCx2aWV3gtPkkwJuWicSJS92My97bmFtZT1vcmdhbml6YXRpb25zLyp9L3RpbWVTZXJpZXNaIRIfL3YzL3tuYW1lPWZvbGRlcnMvKn0vdGltZVNlcmllcxIgL3YzL3tuYW1lPXByb2plY3RzLyp9L3RpbWVTZXJpZXMSmQEKEENyZWF0ZVRpbWVTZXJpZXMSLS5nb29nbGUubW9uaXRvcmluZy52My5DcmVhdGVUaW1lU2VyaWVzUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI+2kEQbmFtZSx0aW1lX3Nlcmllc4LT5JMCJToBKiIgL3YzL3tuYW1lPXByb2plY3RzLyp9L3RpbWVTZXJpZXMSrgEKF0NyZWF0ZVNlcnZpY2VUaW1lU2VyaWVzEi0uZ29vZ2xlLm1vbml0b3JpbmcudjMuQ3JlYXRlVGltZVNlcmllc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiTNpBEG5hbWUsdGltZV9zZXJpZXOC0+STAjM6ASoiLi92My97bmFtZT1wcm9qZWN0cy8qfS90aW1lU2VyaWVzOmNyZWF0ZVNlcnZpY2Ua2gHKQRltb25pdG9yaW5nLmdvb2dsZWFwaXMuY29t0kG6AWh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9tb25pdG9yaW5nLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvbW9uaXRvcmluZy5yZWFkLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvbW9uaXRvcmluZy53cml0ZUKJCAoYY29tLmdvb2dsZS5tb25pdG9yaW5nLnYzQhJNZXRyaWNTZXJ2aWNlUHJvdG9QAVpBY2xvdWQuZ29vZ2xlLmNvbS9nby9tb25pdG9yaW5nL2FwaXYzL3YyL21vbml0b3JpbmdwYjttb25pdG9yaW5ncGKqAhpHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5WM8oCGkdvb2dsZVxDbG91ZFxNb25pdG9yaW5nXFYz6gIdR29vZ2xlOjpDbG91ZDo6TW9uaXRvcmluZzo6VjPqQfABCiptb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL01ldHJpY0Rlc2NyaXB0b3ISO3Byb2plY3RzL3twcm9qZWN0fS9tZXRyaWNEZXNjcmlwdG9ycy97bWV0cmljX2Rlc2NyaXB0b3I9Kip9EkVvcmdhbml6YXRpb25zL3tvcmdhbml6YXRpb259L21ldHJpY0Rlc2NyaXB0b3JzL3ttZXRyaWNfZGVzY3JpcHRvcj0qKn0SOWZvbGRlcnMve2ZvbGRlcn0vbWV0cmljRGVzY3JpcHRvcnMve21ldHJpY19kZXNjcmlwdG9yPSoqfRIBKiAB6kG3Ago1bW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Nb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3IST3Byb2plY3RzL3twcm9qZWN0fS9tb25pdG9yZWRSZXNvdXJjZURlc2NyaXB0b3JzL3ttb25pdG9yZWRfcmVzb3VyY2VfZGVzY3JpcHRvcn0SWW9yZ2FuaXphdGlvbnMve29yZ2FuaXphdGlvbn0vbW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9ycy97bW9uaXRvcmVkX3Jlc291cmNlX2Rlc2NyaXB0b3J9Ek1mb2xkZXJzL3tmb2xkZXJ9L21vbml0b3JlZFJlc291cmNlRGVzY3JpcHRvcnMve21vbml0b3JlZF9yZXNvdXJjZV9kZXNjcmlwdG9yfRIBKiAB6kFRCiNtb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL1dvcmtzcGFjZRIScHJvamVjdHMve3Byb2plY3R9EhZ3b3Jrc3BhY2VzL3t3b3Jrc3BhY2V96kG1AQokbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9UaW1lU2VyaWVzEitwcm9qZWN0cy97cHJvamVjdH0vdGltZVNlcmllcy97dGltZV9zZXJpZXN9EjVvcmdhbml6YXRpb25zL3tvcmdhbml6YXRpb259L3RpbWVTZXJpZXMve3RpbWVfc2VyaWVzfRIpZm9sZGVycy97Zm9sZGVyfS90aW1lU2VyaWVzL3t0aW1lX3Nlcmllc31iBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_metric, file_google_api_monitored_resource, file_google_api_resource, file_google_monitoring_v3_common, file_google_monitoring_v3_metric, file_google_protobuf_empty, file_google_rpc_status]);

/**
 * The `ListMonitoredResourceDescriptors` request.
 *
 * @generated from message google.monitoring.v3.ListMonitoredResourceDescriptorsRequest
 */
export type ListMonitoredResourceDescriptorsRequest = Message<"google.monitoring.v3.ListMonitoredResourceDescriptorsRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * An optional [filter](https://cloud.google.com/monitoring/api/v3/filters)
   * describing the descriptors to be returned.  The filter can reference the
   * descriptor's type and labels. For example, the following filter returns
   * only Google Compute Engine descriptors that have an `id` label:
   *
   *     resource.type = starts_with("gce_") AND resource.label:id
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * A positive number that is the maximum number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListMonitoredResourceDescriptorsRequest.
 * Use `create(ListMonitoredResourceDescriptorsRequestSchema)` to create a new message.
 */
export const ListMonitoredResourceDescriptorsRequestSchema: GenMessage<ListMonitoredResourceDescriptorsRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 0);

/**
 * The `ListMonitoredResourceDescriptors` response.
 *
 * @generated from message google.monitoring.v3.ListMonitoredResourceDescriptorsResponse
 */
export type ListMonitoredResourceDescriptorsResponse = Message<"google.monitoring.v3.ListMonitoredResourceDescriptorsResponse"> & {
  /**
   * The monitored resource descriptors that are available to this project
   * and that match `filter`, if present.
   *
   * @generated from field: repeated google.api.MonitoredResourceDescriptor resource_descriptors = 1;
   */
  resourceDescriptors: MonitoredResourceDescriptor[];

  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListMonitoredResourceDescriptorsResponse.
 * Use `create(ListMonitoredResourceDescriptorsResponseSchema)` to create a new message.
 */
export const ListMonitoredResourceDescriptorsResponseSchema: GenMessage<ListMonitoredResourceDescriptorsResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 1);

/**
 * The `GetMonitoredResourceDescriptor` request.
 *
 * @generated from message google.monitoring.v3.GetMonitoredResourceDescriptorRequest
 */
export type GetMonitoredResourceDescriptorRequest = Message<"google.monitoring.v3.GetMonitoredResourceDescriptorRequest"> & {
  /**
   * Required. The monitored resource descriptor to get.  The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/monitoredResourceDescriptors/[RESOURCE_TYPE]
   *
   * The `[RESOURCE_TYPE]` is a predefined type, such as
   * `cloudsql_database`.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.GetMonitoredResourceDescriptorRequest.
 * Use `create(GetMonitoredResourceDescriptorRequestSchema)` to create a new message.
 */
export const GetMonitoredResourceDescriptorRequestSchema: GenMessage<GetMonitoredResourceDescriptorRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 2);

/**
 * The `ListMetricDescriptors` request.
 *
 * @generated from message google.monitoring.v3.ListMetricDescriptorsRequest
 */
export type ListMetricDescriptorsRequest = Message<"google.monitoring.v3.ListMetricDescriptorsRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * If this field is empty, all custom and
   * system-defined metric descriptors are returned.
   * Otherwise, the [filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifies which metric descriptors are to be
   * returned. For example, the following filter matches all
   * [custom metrics](https://cloud.google.com/monitoring/custom-metrics):
   *
   *     metric.type = starts_with("custom.googleapis.com/")
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * A positive number that is the maximum number of results to return. The
   * default and maximum value is 10,000. If a page_size <= 0 or > 10,000 is
   * submitted, will instead return a maximum of 10,000 results.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListMetricDescriptorsRequest.
 * Use `create(ListMetricDescriptorsRequestSchema)` to create a new message.
 */
export const ListMetricDescriptorsRequestSchema: GenMessage<ListMetricDescriptorsRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 3);

/**
 * The `ListMetricDescriptors` response.
 *
 * @generated from message google.monitoring.v3.ListMetricDescriptorsResponse
 */
export type ListMetricDescriptorsResponse = Message<"google.monitoring.v3.ListMetricDescriptorsResponse"> & {
  /**
   * The metric descriptors that are available to the project
   * and that match the value of `filter`, if present.
   *
   * @generated from field: repeated google.api.MetricDescriptor metric_descriptors = 1;
   */
  metricDescriptors: MetricDescriptor[];

  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListMetricDescriptorsResponse.
 * Use `create(ListMetricDescriptorsResponseSchema)` to create a new message.
 */
export const ListMetricDescriptorsResponseSchema: GenMessage<ListMetricDescriptorsResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 4);

/**
 * The `GetMetricDescriptor` request.
 *
 * @generated from message google.monitoring.v3.GetMetricDescriptorRequest
 */
export type GetMetricDescriptorRequest = Message<"google.monitoring.v3.GetMetricDescriptorRequest"> & {
  /**
   * Required. The metric descriptor on which to execute the request. The format
   * is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
   *
   * An example value of `[METRIC_ID]` is
   * `"compute.googleapis.com/instance/disk/read_bytes_count"`.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.GetMetricDescriptorRequest.
 * Use `create(GetMetricDescriptorRequestSchema)` to create a new message.
 */
export const GetMetricDescriptorRequestSchema: GenMessage<GetMetricDescriptorRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 5);

/**
 * The `CreateMetricDescriptor` request.
 *
 * @generated from message google.monitoring.v3.CreateMetricDescriptorRequest
 */
export type CreateMetricDescriptorRequest = Message<"google.monitoring.v3.CreateMetricDescriptorRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   * 4
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Required. The new [custom
   * metric](https://cloud.google.com/monitoring/custom-metrics) descriptor.
   *
   * @generated from field: google.api.MetricDescriptor metric_descriptor = 2;
   */
  metricDescriptor?: MetricDescriptor;
};

/**
 * Describes the message google.monitoring.v3.CreateMetricDescriptorRequest.
 * Use `create(CreateMetricDescriptorRequestSchema)` to create a new message.
 */
export const CreateMetricDescriptorRequestSchema: GenMessage<CreateMetricDescriptorRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 6);

/**
 * The `DeleteMetricDescriptor` request.
 *
 * @generated from message google.monitoring.v3.DeleteMetricDescriptorRequest
 */
export type DeleteMetricDescriptorRequest = Message<"google.monitoring.v3.DeleteMetricDescriptorRequest"> & {
  /**
   * Required. The metric descriptor on which to execute the request. The format
   * is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/metricDescriptors/[METRIC_ID]
   *
   * An example of `[METRIC_ID]` is:
   * `"custom.googleapis.com/my_test_metric"`.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.DeleteMetricDescriptorRequest.
 * Use `create(DeleteMetricDescriptorRequestSchema)` to create a new message.
 */
export const DeleteMetricDescriptorRequestSchema: GenMessage<DeleteMetricDescriptorRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 7);

/**
 * The `ListTimeSeries` request.
 *
 * @generated from message google.monitoring.v3.ListTimeSeriesRequest
 */
export type ListTimeSeriesRequest = Message<"google.monitoring.v3.ListTimeSeriesRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name),
   * organization or folder on which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *     organizations/[ORGANIZATION_ID]
   *     folders/[FOLDER_ID]
   *
   * @generated from field: string name = 10;
   */
  name: string;

  /**
   * Required. A [monitoring
   * filter](https://cloud.google.com/monitoring/api/v3/filters) that specifies
   * which time series should be returned.  The filter must specify a single
   * metric type, and can additionally specify metric labels and other
   * information. For example:
   *
   *     metric.type = "compute.googleapis.com/instance/cpu/usage_time" AND
   *         metric.labels.instance_name = "my-instance-name"
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Required. The time interval for which results should be returned. Only time
   * series that contain data points in the specified interval are included in
   * the response.
   *
   * @generated from field: google.monitoring.v3.TimeInterval interval = 4;
   */
  interval?: TimeInterval;

  /**
   * Specifies the alignment of data points in individual time series as
   * well as how to combine the retrieved time series across specified labels.
   *
   * By default (if no `aggregation` is explicitly specified), the raw time
   * series data is returned.
   *
   * @generated from field: google.monitoring.v3.Aggregation aggregation = 5;
   */
  aggregation?: Aggregation;

  /**
   * Apply a second aggregation after `aggregation` is applied. May only be
   * specified if `aggregation` is specified.
   *
   * @generated from field: google.monitoring.v3.Aggregation secondary_aggregation = 11;
   */
  secondaryAggregation?: Aggregation;

  /**
   * Unsupported: must be left blank. The points in each time series are
   * currently returned in reverse time order (most recent to oldest).
   *
   * @generated from field: string order_by = 6;
   */
  orderBy: string;

  /**
   * Required. Specifies which information is returned about the time series.
   *
   * @generated from field: google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView view = 7;
   */
  view: ListTimeSeriesRequest_TimeSeriesView;

  /**
   * A positive number that is the maximum number of results to return. If
   * `page_size` is empty or more than 100,000 results, the effective
   * `page_size` is 100,000 results. If `view` is set to `FULL`, this is the
   * maximum number of `Points` returned. If `view` is set to `HEADERS`, this is
   * the maximum number of `TimeSeries` returned.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize: number;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 9;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListTimeSeriesRequest.
 * Use `create(ListTimeSeriesRequestSchema)` to create a new message.
 */
export const ListTimeSeriesRequestSchema: GenMessage<ListTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 8);

/**
 * Controls which fields are returned by `ListTimeSeries*`.
 *
 * @generated from enum google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView
 */
export enum ListTimeSeriesRequest_TimeSeriesView {
  /**
   * Returns the identity of the metric(s), the time series,
   * and the time series data.
   *
   * @generated from enum value: FULL = 0;
   */
  FULL = 0,

  /**
   * Returns the identity of the metric and the time series resource,
   * but not the time series data.
   *
   * @generated from enum value: HEADERS = 1;
   */
  HEADERS = 1,
}

/**
 * Describes the enum google.monitoring.v3.ListTimeSeriesRequest.TimeSeriesView.
 */
export const ListTimeSeriesRequest_TimeSeriesViewSchema: GenEnum<ListTimeSeriesRequest_TimeSeriesView> = /*@__PURE__*/
  enumDesc(file_google_monitoring_v3_metric_service, 8, 0);

/**
 * The `ListTimeSeries` response.
 *
 * @generated from message google.monitoring.v3.ListTimeSeriesResponse
 */
export type ListTimeSeriesResponse = Message<"google.monitoring.v3.ListTimeSeriesResponse"> & {
  /**
   * One or more time series that match the filter included in the request.
   *
   * @generated from field: repeated google.monitoring.v3.TimeSeries time_series = 1;
   */
  timeSeries: TimeSeries[];

  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results,
   * use that value as `page_token` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Query execution errors that may have caused the time series data returned
   * to be incomplete.
   *
   * @generated from field: repeated google.rpc.Status execution_errors = 3;
   */
  executionErrors: Status[];

  /**
   * The unit in which all `time_series` point values are reported. `unit`
   * follows the UCUM format for units as seen in
   * https://unitsofmeasure.org/ucum.html.
   * If different `time_series` have different units (for example, because they
   * come from different metric types, or a unit is absent), then `unit` will be
   * "{not_a_unit}".
   *
   * @generated from field: string unit = 5;
   */
  unit: string;
};

/**
 * Describes the message google.monitoring.v3.ListTimeSeriesResponse.
 * Use `create(ListTimeSeriesResponseSchema)` to create a new message.
 */
export const ListTimeSeriesResponseSchema: GenMessage<ListTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 9);

/**
 * The `CreateTimeSeries` request.
 *
 * @generated from message google.monitoring.v3.CreateTimeSeriesRequest
 */
export type CreateTimeSeriesRequest = Message<"google.monitoring.v3.CreateTimeSeriesRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Required. The new data to be added to a list of time series.
   * Adds at most one data point to each of several time series.  The new data
   * point must be more recent than any other point in its time series.  Each
   * `TimeSeries` value must fully specify a unique time series by supplying
   * all label values for the metric and the monitored resource.
   *
   * The maximum number of `TimeSeries` objects per `Create` request is 200.
   *
   * @generated from field: repeated google.monitoring.v3.TimeSeries time_series = 2;
   */
  timeSeries: TimeSeries[];
};

/**
 * Describes the message google.monitoring.v3.CreateTimeSeriesRequest.
 * Use `create(CreateTimeSeriesRequestSchema)` to create a new message.
 */
export const CreateTimeSeriesRequestSchema: GenMessage<CreateTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 10);

/**
 * DEPRECATED. Used to hold per-time-series error status.
 *
 * @generated from message google.monitoring.v3.CreateTimeSeriesError
 */
export type CreateTimeSeriesError = Message<"google.monitoring.v3.CreateTimeSeriesError"> & {
  /**
   * DEPRECATED. Time series ID that resulted in the `status` error.
   *
   * @generated from field: google.monitoring.v3.TimeSeries time_series = 1 [deprecated = true];
   * @deprecated
   */
  timeSeries?: TimeSeries;

  /**
   * DEPRECATED. The status of the requested write operation for `time_series`.
   *
   * @generated from field: google.rpc.Status status = 2 [deprecated = true];
   * @deprecated
   */
  status?: Status;
};

/**
 * Describes the message google.monitoring.v3.CreateTimeSeriesError.
 * Use `create(CreateTimeSeriesErrorSchema)` to create a new message.
 */
export const CreateTimeSeriesErrorSchema: GenMessage<CreateTimeSeriesError> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 11);

/**
 * Summary of the result of a failed request to write data to a time series.
 *
 * @generated from message google.monitoring.v3.CreateTimeSeriesSummary
 */
export type CreateTimeSeriesSummary = Message<"google.monitoring.v3.CreateTimeSeriesSummary"> & {
  /**
   * The number of points in the request.
   *
   * @generated from field: int32 total_point_count = 1;
   */
  totalPointCount: number;

  /**
   * The number of points that were successfully written.
   *
   * @generated from field: int32 success_point_count = 2;
   */
  successPointCount: number;

  /**
   * The number of points that failed to be written. Order is not guaranteed.
   *
   * @generated from field: repeated google.monitoring.v3.CreateTimeSeriesSummary.Error errors = 3;
   */
  errors: CreateTimeSeriesSummary_Error[];
};

/**
 * Describes the message google.monitoring.v3.CreateTimeSeriesSummary.
 * Use `create(CreateTimeSeriesSummarySchema)` to create a new message.
 */
export const CreateTimeSeriesSummarySchema: GenMessage<CreateTimeSeriesSummary> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 12);

/**
 * Detailed information about an error category.
 *
 * @generated from message google.monitoring.v3.CreateTimeSeriesSummary.Error
 */
export type CreateTimeSeriesSummary_Error = Message<"google.monitoring.v3.CreateTimeSeriesSummary.Error"> & {
  /**
   * The status of the requested write operation.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * The number of points that couldn't be written because of `status`.
   *
   * @generated from field: int32 point_count = 2;
   */
  pointCount: number;
};

/**
 * Describes the message google.monitoring.v3.CreateTimeSeriesSummary.Error.
 * Use `create(CreateTimeSeriesSummary_ErrorSchema)` to create a new message.
 */
export const CreateTimeSeriesSummary_ErrorSchema: GenMessage<CreateTimeSeriesSummary_Error> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 12, 0);

/**
 * The `QueryTimeSeries` request.
 *
 * @generated from message google.monitoring.v3.QueryTimeSeriesRequest
 */
export type QueryTimeSeriesRequest = Message<"google.monitoring.v3.QueryTimeSeriesRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The query in the [Monitoring Query
   * Language](https://cloud.google.com/monitoring/mql/reference) format.
   * The default time zone is in UTC.
   *
   * @generated from field: string query = 7;
   */
  query: string;

  /**
   * A positive number that is the maximum number of time_series_data to return.
   *
   * @generated from field: int32 page_size = 9;
   */
  pageSize: number;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return additional results from the previous method call.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.QueryTimeSeriesRequest.
 * Use `create(QueryTimeSeriesRequestSchema)` to create a new message.
 */
export const QueryTimeSeriesRequestSchema: GenMessage<QueryTimeSeriesRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 13);

/**
 * The `QueryTimeSeries` response.
 *
 * @generated from message google.monitoring.v3.QueryTimeSeriesResponse
 */
export type QueryTimeSeriesResponse = Message<"google.monitoring.v3.QueryTimeSeriesResponse"> & {
  /**
   * The descriptor for the time series data.
   *
   * @generated from field: google.monitoring.v3.TimeSeriesDescriptor time_series_descriptor = 8;
   */
  timeSeriesDescriptor?: TimeSeriesDescriptor;

  /**
   * The time series data.
   *
   * @generated from field: repeated google.monitoring.v3.TimeSeriesData time_series_data = 9;
   */
  timeSeriesData: TimeSeriesData[];

  /**
   * If there are more results than have been returned, then this field is set
   * to a non-empty value.  To see the additional results, use that value as
   * `page_token` in the next call to this method.
   *
   * @generated from field: string next_page_token = 10;
   */
  nextPageToken: string;

  /**
   * Query execution errors that may have caused the time series data returned
   * to be incomplete. The available data will be available in the
   * response.
   *
   * @generated from field: repeated google.rpc.Status partial_errors = 11;
   */
  partialErrors: Status[];
};

/**
 * Describes the message google.monitoring.v3.QueryTimeSeriesResponse.
 * Use `create(QueryTimeSeriesResponseSchema)` to create a new message.
 */
export const QueryTimeSeriesResponseSchema: GenMessage<QueryTimeSeriesResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 14);

/**
 * This is an error detail intended to be used with INVALID_ARGUMENT errors.
 *
 * @generated from message google.monitoring.v3.QueryErrorList
 */
export type QueryErrorList = Message<"google.monitoring.v3.QueryErrorList"> & {
  /**
   * Errors in parsing the time series query language text. The number of errors
   * in the response may be limited.
   *
   * @generated from field: repeated google.monitoring.v3.QueryError errors = 1;
   */
  errors: QueryError[];

  /**
   * A summary of all the errors.
   *
   * @generated from field: string error_summary = 2;
   */
  errorSummary: string;
};

/**
 * Describes the message google.monitoring.v3.QueryErrorList.
 * Use `create(QueryErrorListSchema)` to create a new message.
 */
export const QueryErrorListSchema: GenMessage<QueryErrorList> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_metric_service, 15);

/**
 * Manages metric descriptors, monitored resource descriptors, and
 * time series data.
 *
 * @generated from service google.monitoring.v3.MetricService
 */
export const MetricService: GenService<{
  /**
   * Lists monitored resource descriptors that match a filter.
   *
   * @generated from rpc google.monitoring.v3.MetricService.ListMonitoredResourceDescriptors
   */
  listMonitoredResourceDescriptors: {
    methodKind: "unary";
    input: typeof ListMonitoredResourceDescriptorsRequestSchema;
    output: typeof ListMonitoredResourceDescriptorsResponseSchema;
  },
  /**
   * Gets a single monitored resource descriptor.
   *
   * @generated from rpc google.monitoring.v3.MetricService.GetMonitoredResourceDescriptor
   */
  getMonitoredResourceDescriptor: {
    methodKind: "unary";
    input: typeof GetMonitoredResourceDescriptorRequestSchema;
    output: typeof MonitoredResourceDescriptorSchema;
  },
  /**
   * Lists metric descriptors that match a filter.
   *
   * @generated from rpc google.monitoring.v3.MetricService.ListMetricDescriptors
   */
  listMetricDescriptors: {
    methodKind: "unary";
    input: typeof ListMetricDescriptorsRequestSchema;
    output: typeof ListMetricDescriptorsResponseSchema;
  },
  /**
   * Gets a single metric descriptor.
   *
   * @generated from rpc google.monitoring.v3.MetricService.GetMetricDescriptor
   */
  getMetricDescriptor: {
    methodKind: "unary";
    input: typeof GetMetricDescriptorRequestSchema;
    output: typeof MetricDescriptorSchema;
  },
  /**
   * Creates a new metric descriptor.
   * The creation is executed asynchronously.
   * User-created metric descriptors define
   * [custom metrics](https://cloud.google.com/monitoring/custom-metrics).
   * The metric descriptor is updated if it already exists,
   * except that metric labels are never removed.
   *
   * @generated from rpc google.monitoring.v3.MetricService.CreateMetricDescriptor
   */
  createMetricDescriptor: {
    methodKind: "unary";
    input: typeof CreateMetricDescriptorRequestSchema;
    output: typeof MetricDescriptorSchema;
  },
  /**
   * Deletes a metric descriptor. Only user-created
   * [custom metrics](https://cloud.google.com/monitoring/custom-metrics) can be
   * deleted.
   *
   * @generated from rpc google.monitoring.v3.MetricService.DeleteMetricDescriptor
   */
  deleteMetricDescriptor: {
    methodKind: "unary";
    input: typeof DeleteMetricDescriptorRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists time series that match a filter.
   *
   * @generated from rpc google.monitoring.v3.MetricService.ListTimeSeries
   */
  listTimeSeries: {
    methodKind: "unary";
    input: typeof ListTimeSeriesRequestSchema;
    output: typeof ListTimeSeriesResponseSchema;
  },
  /**
   * Creates or adds data to one or more time series.
   * The response is empty if all time series in the request were written.
   * If any time series could not be written, a corresponding failure message is
   * included in the error response.
   * This method does not support
   * [resource locations constraint of an organization
   * policy](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations#setting_the_organization_policy).
   *
   * @generated from rpc google.monitoring.v3.MetricService.CreateTimeSeries
   */
  createTimeSeries: {
    methodKind: "unary";
    input: typeof CreateTimeSeriesRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates or adds data to one or more service time series. A service time
   * series is a time series for a metric from a Google Cloud service. The
   * response is empty if all time series in the request were written. If any
   * time series could not be written, a corresponding failure message is
   * included in the error response. This endpoint rejects writes to
   * user-defined metrics.
   * This method is only for use by Google Cloud services. Use
   * [projects.timeSeries.create][google.monitoring.v3.MetricService.CreateTimeSeries]
   * instead.
   *
   * @generated from rpc google.monitoring.v3.MetricService.CreateServiceTimeSeries
   */
  createServiceTimeSeries: {
    methodKind: "unary";
    input: typeof CreateTimeSeriesRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_monitoring_v3_metric_service, 0);

