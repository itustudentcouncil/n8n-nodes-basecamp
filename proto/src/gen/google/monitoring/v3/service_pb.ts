// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { CalendarPeriod } from "../../type/calendar_period_pb";
import { file_google_type_calendar_period } from "../../type/calendar_period_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/v3/service.proto.
 */
export const file_google_monitoring_v3_service: GenFile = /*@__PURE__*/
  fileDesc("CiJnb29nbGUvbW9uaXRvcmluZy92My9zZXJ2aWNlLnByb3RvEhRnb29nbGUubW9uaXRvcmluZy52MyKUEQoHU2VydmljZRIRCgRuYW1lGAEgASgJQgPgQQgSFAoMZGlzcGxheV9uYW1lGAIgASgJEjYKBmN1c3RvbRgGIAEoCzIkLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuQ3VzdG9tSAASPQoKYXBwX2VuZ2luZRgHIAEoCzInLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuQXBwRW5naW5lSAASRwoPY2xvdWRfZW5kcG9pbnRzGAggASgLMiwuZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5DbG91ZEVuZHBvaW50c0gAEkMKDWNsdXN0ZXJfaXN0aW8YCSABKAsyKi5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlLkNsdXN0ZXJJc3Rpb0gAEj0KCm1lc2hfaXN0aW8YCiABKAsyJy5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlLk1lc2hJc3Rpb0gAElYKF2lzdGlvX2Nhbm9uaWNhbF9zZXJ2aWNlGAsgASgLMjMuZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5Jc3Rpb0Nhbm9uaWNhbFNlcnZpY2VIABI7CgljbG91ZF9ydW4YDCABKAsyJi5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlLkNsb3VkUnVuSAASQwoNZ2tlX25hbWVzcGFjZRgPIAEoCzIqLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuR2tlTmFtZXNwYWNlSAASQQoMZ2tlX3dvcmtsb2FkGBAgASgLMikuZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5Ha2VXb3JrbG9hZEgAEj8KC2drZV9zZXJ2aWNlGBEgASgLMiguZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5Ha2VTZXJ2aWNlSAASQQoNYmFzaWNfc2VydmljZRgTIAEoCzIqLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuQmFzaWNTZXJ2aWNlEjoKCXRlbGVtZXRyeRgNIAEoCzInLmdvb2dsZS5tb25pdG9yaW5nLnYzLlNlcnZpY2UuVGVsZW1ldHJ5EkIKC3VzZXJfbGFiZWxzGA4gAygLMi0uZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5Vc2VyTGFiZWxzRW50cnkaCAoGQ3VzdG9tGh4KCUFwcEVuZ2luZRIRCgltb2R1bGVfaWQYASABKAkaIQoOQ2xvdWRFbmRwb2ludHMSDwoHc2VydmljZRgBIAEoCRpnCgxDbHVzdGVySXN0aW8SEAoIbG9jYXRpb24YASABKAkSFAoMY2x1c3Rlcl9uYW1lGAIgASgJEhkKEXNlcnZpY2VfbmFtZXNwYWNlGAMgASgJEhQKDHNlcnZpY2VfbmFtZRgEIAEoCRpOCglNZXNoSXN0aW8SEAoIbWVzaF91aWQYASABKAkSGQoRc2VydmljZV9uYW1lc3BhY2UYAyABKAkSFAoMc2VydmljZV9uYW1lGAQgASgJGmkKFUlzdGlvQ2Fub25pY2FsU2VydmljZRIQCghtZXNoX3VpZBgBIAEoCRIjChtjYW5vbmljYWxfc2VydmljZV9uYW1lc3BhY2UYAyABKAkSGQoRY2Fub25pY2FsX3NlcnZpY2UYBCABKAkaMgoIQ2xvdWRSdW4SFAoMc2VydmljZV9uYW1lGAEgASgJEhAKCGxvY2F0aW9uGAIgASgJGmcKDEdrZU5hbWVzcGFjZRIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQMSEAoIbG9jYXRpb24YAiABKAkSFAoMY2x1c3Rlcl9uYW1lGAMgASgJEhYKDm5hbWVzcGFjZV9uYW1lGAQgASgJGqwBCgtHa2VXb3JrbG9hZBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQMSEAoIbG9jYXRpb24YAiABKAkSFAoMY2x1c3Rlcl9uYW1lGAMgASgJEhYKDm5hbWVzcGFjZV9uYW1lGAQgASgJEiEKGXRvcF9sZXZlbF9jb250cm9sbGVyX3R5cGUYBSABKAkSIQoZdG9wX2xldmVsX2NvbnRyb2xsZXJfbmFtZRgGIAEoCRp7CgpHa2VTZXJ2aWNlEhcKCnByb2plY3RfaWQYASABKAlCA+BBAxIQCghsb2NhdGlvbhgCIAEoCRIUCgxjbHVzdGVyX25hbWUYAyABKAkSFgoObmFtZXNwYWNlX25hbWUYBCABKAkSFAoMc2VydmljZV9uYW1lGAUgASgJGrEBCgxCYXNpY1NlcnZpY2USFAoMc2VydmljZV90eXBlGAEgASgJElUKDnNlcnZpY2VfbGFiZWxzGAIgAygLMj0uZ29vZ2xlLm1vbml0b3JpbmcudjMuU2VydmljZS5CYXNpY1NlcnZpY2UuU2VydmljZUxhYmVsc0VudHJ5GjQKElNlcnZpY2VMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGiIKCVRlbGVtZXRyeRIVCg1yZXNvdXJjZV9uYW1lGAEgASgJGjEKD1VzZXJMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBOqcB6kGjAQohbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9TZXJ2aWNlEiVwcm9qZWN0cy97cHJvamVjdH0vc2VydmljZXMve3NlcnZpY2V9Ei9vcmdhbml6YXRpb25zL3tvcmdhbml6YXRpb259L3NlcnZpY2VzL3tzZXJ2aWNlfRIjZm9sZGVycy97Zm9sZGVyfS9zZXJ2aWNlcy97c2VydmljZX0SASpCDAoKaWRlbnRpZmllciKbBgoVU2VydmljZUxldmVsT2JqZWN0aXZlEhEKBG5hbWUYASABKAlCA+BBCBIUCgxkaXNwbGF5X25hbWUYCyABKAkSTAoXc2VydmljZV9sZXZlbF9pbmRpY2F0b3IYAyABKAsyKy5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlTGV2ZWxJbmRpY2F0b3ISDAoEZ29hbBgEIAEoARIzCg5yb2xsaW5nX3BlcmlvZBgFIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkgAEjYKD2NhbGVuZGFyX3BlcmlvZBgGIAEoDjIbLmdvb2dsZS50eXBlLkNhbGVuZGFyUGVyaW9kSAASUAoLdXNlcl9sYWJlbHMYDCADKAsyOy5nb29nbGUubW9uaXRvcmluZy52My5TZXJ2aWNlTGV2ZWxPYmplY3RpdmUuVXNlckxhYmVsc0VudHJ5GjEKD1VzZXJMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjQKBFZpZXcSFAoQVklFV19VTlNQRUNJRklFRBAAEggKBEZVTEwQAhIMCghFWFBMSUNJVBABOsoC6kHGAgovbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9TZXJ2aWNlTGV2ZWxPYmplY3RpdmUSVnByb2plY3RzL3twcm9qZWN0fS9zZXJ2aWNlcy97c2VydmljZX0vc2VydmljZUxldmVsT2JqZWN0aXZlcy97c2VydmljZV9sZXZlbF9vYmplY3RpdmV9EmBvcmdhbml6YXRpb25zL3tvcmdhbml6YXRpb259L3NlcnZpY2VzL3tzZXJ2aWNlfS9zZXJ2aWNlTGV2ZWxPYmplY3RpdmVzL3tzZXJ2aWNlX2xldmVsX29iamVjdGl2ZX0SVGZvbGRlcnMve2ZvbGRlcn0vc2VydmljZXMve3NlcnZpY2V9L3NlcnZpY2VMZXZlbE9iamVjdGl2ZXMve3NlcnZpY2VfbGV2ZWxfb2JqZWN0aXZlfRIBKiABQggKBnBlcmlvZCLUAQoVU2VydmljZUxldmVsSW5kaWNhdG9yEjMKCWJhc2ljX3NsaRgEIAEoCzIeLmdvb2dsZS5tb25pdG9yaW5nLnYzLkJhc2ljU2xpSAASPgoNcmVxdWVzdF9iYXNlZBgBIAEoCzIlLmdvb2dsZS5tb25pdG9yaW5nLnYzLlJlcXVlc3RCYXNlZFNsaUgAEj4KDXdpbmRvd3NfYmFzZWQYAiABKAsyJS5nb29nbGUubW9uaXRvcmluZy52My5XaW5kb3dzQmFzZWRTbGlIAEIGCgR0eXBlIrYCCghCYXNpY1NsaRIOCgZtZXRob2QYByADKAkSEAoIbG9jYXRpb24YCCADKAkSDwoHdmVyc2lvbhgJIAMoCRJLCgxhdmFpbGFiaWxpdHkYAiABKAsyMy5nb29nbGUubW9uaXRvcmluZy52My5CYXNpY1NsaS5BdmFpbGFiaWxpdHlDcml0ZXJpYUgAEkEKB2xhdGVuY3kYAyABKAsyLi5nb29nbGUubW9uaXRvcmluZy52My5CYXNpY1NsaS5MYXRlbmN5Q3JpdGVyaWFIABoWChRBdmFpbGFiaWxpdHlDcml0ZXJpYRo/Cg9MYXRlbmN5Q3JpdGVyaWESLAoJdGhyZXNob2xkGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQg4KDHNsaV9jcml0ZXJpYSIhCgVSYW5nZRILCgNtaW4YASABKAESCwoDbWF4GAIgASgBIqEBCg9SZXF1ZXN0QmFzZWRTbGkSQQoQZ29vZF90b3RhbF9yYXRpbxgBIAEoCzIlLmdvb2dsZS5tb25pdG9yaW5nLnYzLlRpbWVTZXJpZXNSYXRpb0gAEkEKEGRpc3RyaWJ1dGlvbl9jdXQYAyABKAsyJS5nb29nbGUubW9uaXRvcmluZy52My5EaXN0cmlidXRpb25DdXRIAEIICgZtZXRob2QiaAoPVGltZVNlcmllc1JhdGlvEhsKE2dvb2Rfc2VydmljZV9maWx0ZXIYBCABKAkSGgoSYmFkX3NlcnZpY2VfZmlsdGVyGAUgASgJEhwKFHRvdGFsX3NlcnZpY2VfZmlsdGVyGAYgASgJIloKD0Rpc3RyaWJ1dGlvbkN1dBIbChNkaXN0cmlidXRpb25fZmlsdGVyGAQgASgJEioKBXJhbmdlGAUgASgLMhsuZ29vZ2xlLm1vbml0b3JpbmcudjMuUmFuZ2UigwUKD1dpbmRvd3NCYXNlZFNsaRIgChZnb29kX2JhZF9tZXRyaWNfZmlsdGVyGAUgASgJSAASYAoaZ29vZF90b3RhbF9yYXRpb190aHJlc2hvbGQYAiABKAsyOi5nb29nbGUubW9uaXRvcmluZy52My5XaW5kb3dzQmFzZWRTbGkuUGVyZm9ybWFuY2VUaHJlc2hvbGRIABJRChRtZXRyaWNfbWVhbl9pbl9yYW5nZRgGIAEoCzIxLmdvb2dsZS5tb25pdG9yaW5nLnYzLldpbmRvd3NCYXNlZFNsaS5NZXRyaWNSYW5nZUgAElAKE21ldHJpY19zdW1faW5fcmFuZ2UYByABKAsyMS5nb29nbGUubW9uaXRvcmluZy52My5XaW5kb3dzQmFzZWRTbGkuTWV0cmljUmFuZ2VIABIwCg13aW5kb3dfcGVyaW9kGAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uGrABChRQZXJmb3JtYW5jZVRocmVzaG9sZBI8CgtwZXJmb3JtYW5jZRgBIAEoCzIlLmdvb2dsZS5tb25pdG9yaW5nLnYzLlJlcXVlc3RCYXNlZFNsaUgAEj8KFWJhc2ljX3NsaV9wZXJmb3JtYW5jZRgDIAEoCzIeLmdvb2dsZS5tb25pdG9yaW5nLnYzLkJhc2ljU2xpSAASEQoJdGhyZXNob2xkGAIgASgBQgYKBHR5cGUaTgoLTWV0cmljUmFuZ2USEwoLdGltZV9zZXJpZXMYASABKAkSKgoFcmFuZ2UYBCABKAsyGy5nb29nbGUubW9uaXRvcmluZy52My5SYW5nZUISChB3aW5kb3dfY3JpdGVyaW9uQtEBChhjb20uZ29vZ2xlLm1vbml0b3JpbmcudjNCFlNlcnZpY2VNb25pdG9yaW5nUHJvdG9QAVpBY2xvdWQuZ29vZ2xlLmNvbS9nby9tb25pdG9yaW5nL2FwaXYzL3YyL21vbml0b3JpbmdwYjttb25pdG9yaW5ncGKqAhpHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5WM8oCGkdvb2dsZVxDbG91ZFxNb25pdG9yaW5nXFYz6gIdR29vZ2xlOjpDbG91ZDo6TW9uaXRvcmluZzo6VjNiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_type_calendar_period]);

/**
 * A `Service` is a discrete, autonomous, and network-accessible unit, designed
 * to solve an individual concern
 * ([Wikipedia](https://en.wikipedia.org/wiki/Service-orientation)). In
 * Cloud Monitoring, a `Service` acts as the root resource under which
 * operational aspects of the service are accessible.
 *
 * @generated from message google.monitoring.v3.Service
 */
export type Service = Message<"google.monitoring.v3.Service"> & {
  /**
   * Identifier. Resource name for this Service. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Name used for UI elements listing this Service.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * REQUIRED. Service-identifying atoms specifying the underlying service.
   *
   * @generated from oneof google.monitoring.v3.Service.identifier
   */
  identifier: {
    /**
     * Custom service type.
     *
     * @generated from field: google.monitoring.v3.Service.Custom custom = 6;
     */
    value: Service_Custom;
    case: "custom";
  } | {
    /**
     * Type used for App Engine services.
     *
     * @generated from field: google.monitoring.v3.Service.AppEngine app_engine = 7;
     */
    value: Service_AppEngine;
    case: "appEngine";
  } | {
    /**
     * Type used for Cloud Endpoints services.
     *
     * @generated from field: google.monitoring.v3.Service.CloudEndpoints cloud_endpoints = 8;
     */
    value: Service_CloudEndpoints;
    case: "cloudEndpoints";
  } | {
    /**
     * Type used for Istio services that live in a Kubernetes cluster.
     *
     * @generated from field: google.monitoring.v3.Service.ClusterIstio cluster_istio = 9;
     */
    value: Service_ClusterIstio;
    case: "clusterIstio";
  } | {
    /**
     * Type used for Istio services scoped to an Istio mesh.
     *
     * @generated from field: google.monitoring.v3.Service.MeshIstio mesh_istio = 10;
     */
    value: Service_MeshIstio;
    case: "meshIstio";
  } | {
    /**
     * Type used for canonical services scoped to an Istio mesh.
     * Metrics for Istio are
     * [documented here](https://istio.io/latest/docs/reference/config/metrics/)
     *
     * @generated from field: google.monitoring.v3.Service.IstioCanonicalService istio_canonical_service = 11;
     */
    value: Service_IstioCanonicalService;
    case: "istioCanonicalService";
  } | {
    /**
     * Type used for Cloud Run services.
     *
     * @generated from field: google.monitoring.v3.Service.CloudRun cloud_run = 12;
     */
    value: Service_CloudRun;
    case: "cloudRun";
  } | {
    /**
     * Type used for GKE Namespaces.
     *
     * @generated from field: google.monitoring.v3.Service.GkeNamespace gke_namespace = 15;
     */
    value: Service_GkeNamespace;
    case: "gkeNamespace";
  } | {
    /**
     * Type used for GKE Workloads.
     *
     * @generated from field: google.monitoring.v3.Service.GkeWorkload gke_workload = 16;
     */
    value: Service_GkeWorkload;
    case: "gkeWorkload";
  } | {
    /**
     * Type used for GKE Services (the Kubernetes concept of a service).
     *
     * @generated from field: google.monitoring.v3.Service.GkeService gke_service = 17;
     */
    value: Service_GkeService;
    case: "gkeService";
  } | { case: undefined; value?: undefined };

  /**
   * Message that contains the service type and service labels of this service
   * if it is a basic service.
   * Documentation and examples
   * [here](https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
   *
   * @generated from field: google.monitoring.v3.Service.BasicService basic_service = 19;
   */
  basicService?: Service_BasicService;

  /**
   * Configuration for how to query telemetry on a Service.
   *
   * @generated from field: google.monitoring.v3.Service.Telemetry telemetry = 13;
   */
  telemetry?: Service_Telemetry;

  /**
   * Labels which have been used to annotate the service. Label keys must start
   * with a letter. Label keys and values may contain lowercase letters,
   * numbers, underscores, and dashes. Label keys and values have a maximum
   * length of 63 characters, and must be less than 128 bytes in size. Up to 64
   * label entries may be stored. For labels which do not have a semantic value,
   * the empty string may be supplied for the label value.
   *
   * @generated from field: map<string, string> user_labels = 14;
   */
  userLabels: { [key: string]: string };
};

/**
 * Describes the message google.monitoring.v3.Service.
 * Use `create(ServiceSchema)` to create a new message.
 */
export const ServiceSchema: GenMessage<Service> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0);

/**
 * Use a custom service to designate a service that you want to monitor
 * when none of the other service types (like App Engine, Cloud Run, or
 * a GKE type) matches your intended service.
 *
 * @generated from message google.monitoring.v3.Service.Custom
 */
export type Service_Custom = Message<"google.monitoring.v3.Service.Custom"> & {
};

/**
 * Describes the message google.monitoring.v3.Service.Custom.
 * Use `create(Service_CustomSchema)` to create a new message.
 */
export const Service_CustomSchema: GenMessage<Service_Custom> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 0);

/**
 * App Engine service. Learn more at https://cloud.google.com/appengine.
 *
 * @generated from message google.monitoring.v3.Service.AppEngine
 */
export type Service_AppEngine = Message<"google.monitoring.v3.Service.AppEngine"> & {
  /**
   * The ID of the App Engine module underlying this service. Corresponds to
   * the `module_id` resource label in the [`gae_app` monitored
   * resource](https://cloud.google.com/monitoring/api/resources#tag_gae_app).
   *
   * @generated from field: string module_id = 1;
   */
  moduleId: string;
};

/**
 * Describes the message google.monitoring.v3.Service.AppEngine.
 * Use `create(Service_AppEngineSchema)` to create a new message.
 */
export const Service_AppEngineSchema: GenMessage<Service_AppEngine> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 1);

/**
 * Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints.
 *
 * @generated from message google.monitoring.v3.Service.CloudEndpoints
 */
export type Service_CloudEndpoints = Message<"google.monitoring.v3.Service.CloudEndpoints"> & {
  /**
   * The name of the Cloud Endpoints service underlying this service.
   * Corresponds to the `service` resource label in the [`api` monitored
   * resource](https://cloud.google.com/monitoring/api/resources#tag_api).
   *
   * @generated from field: string service = 1;
   */
  service: string;
};

/**
 * Describes the message google.monitoring.v3.Service.CloudEndpoints.
 * Use `create(Service_CloudEndpointsSchema)` to create a new message.
 */
export const Service_CloudEndpointsSchema: GenMessage<Service_CloudEndpoints> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 2);

/**
 * Istio service scoped to a single Kubernetes cluster. Learn more at
 * https://istio.io. Clusters running OSS Istio will have their services
 * ingested as this type.
 *
 * @generated from message google.monitoring.v3.Service.ClusterIstio
 */
export type Service_ClusterIstio = Message<"google.monitoring.v3.Service.ClusterIstio"> & {
  /**
   * The location of the Kubernetes cluster in which this Istio service is
   * defined. Corresponds to the `location` resource label in `k8s_cluster`
   * resources.
   *
   * @generated from field: string location = 1;
   */
  location: string;

  /**
   * The name of the Kubernetes cluster in which this Istio service is
   * defined. Corresponds to the `cluster_name` resource label in
   * `k8s_cluster` resources.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;

  /**
   * The namespace of the Istio service underlying this service. Corresponds
   * to the `destination_service_namespace` metric label in Istio metrics.
   *
   * @generated from field: string service_namespace = 3;
   */
  serviceNamespace: string;

  /**
   * The name of the Istio service underlying this service. Corresponds to the
   * `destination_service_name` metric label in Istio metrics.
   *
   * @generated from field: string service_name = 4;
   */
  serviceName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.ClusterIstio.
 * Use `create(Service_ClusterIstioSchema)` to create a new message.
 */
export const Service_ClusterIstioSchema: GenMessage<Service_ClusterIstio> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 3);

/**
 * Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8
 * will have their services ingested as this type.
 *
 * @generated from message google.monitoring.v3.Service.MeshIstio
 */
export type Service_MeshIstio = Message<"google.monitoring.v3.Service.MeshIstio"> & {
  /**
   * Identifier for the mesh in which this Istio service is defined.
   * Corresponds to the `mesh_uid` metric label in Istio metrics.
   *
   * @generated from field: string mesh_uid = 1;
   */
  meshUid: string;

  /**
   * The namespace of the Istio service underlying this service. Corresponds
   * to the `destination_service_namespace` metric label in Istio metrics.
   *
   * @generated from field: string service_namespace = 3;
   */
  serviceNamespace: string;

  /**
   * The name of the Istio service underlying this service. Corresponds to the
   * `destination_service_name` metric label in Istio metrics.
   *
   * @generated from field: string service_name = 4;
   */
  serviceName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.MeshIstio.
 * Use `create(Service_MeshIstioSchema)` to create a new message.
 */
export const Service_MeshIstioSchema: GenMessage<Service_MeshIstio> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 4);

/**
 * Canonical service scoped to an Istio mesh. Anthos clusters running ASM >=
 * 1.6.8 will have their services ingested as this type.
 *
 * @generated from message google.monitoring.v3.Service.IstioCanonicalService
 */
export type Service_IstioCanonicalService = Message<"google.monitoring.v3.Service.IstioCanonicalService"> & {
  /**
   * Identifier for the Istio mesh in which this canonical service is defined.
   * Corresponds to the `mesh_uid` metric label in
   * [Istio metrics](https://cloud.google.com/monitoring/api/metrics_istio).
   *
   * @generated from field: string mesh_uid = 1;
   */
  meshUid: string;

  /**
   * The namespace of the canonical service underlying this service.
   * Corresponds to the `destination_canonical_service_namespace` metric
   * label in [Istio
   * metrics](https://cloud.google.com/monitoring/api/metrics_istio).
   *
   * @generated from field: string canonical_service_namespace = 3;
   */
  canonicalServiceNamespace: string;

  /**
   * The name of the canonical service underlying this service.
   * Corresponds to the `destination_canonical_service_name` metric label in
   * label in [Istio
   * metrics](https://cloud.google.com/monitoring/api/metrics_istio).
   *
   * @generated from field: string canonical_service = 4;
   */
  canonicalService: string;
};

/**
 * Describes the message google.monitoring.v3.Service.IstioCanonicalService.
 * Use `create(Service_IstioCanonicalServiceSchema)` to create a new message.
 */
export const Service_IstioCanonicalServiceSchema: GenMessage<Service_IstioCanonicalService> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 5);

/**
 * Cloud Run service. Learn more at https://cloud.google.com/run.
 *
 * @generated from message google.monitoring.v3.Service.CloudRun
 */
export type Service_CloudRun = Message<"google.monitoring.v3.Service.CloudRun"> & {
  /**
   * The name of the Cloud Run service. Corresponds to the `service_name`
   * resource label in the [`cloud_run_revision` monitored
   * resource](https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
   *
   * @generated from field: string service_name = 1;
   */
  serviceName: string;

  /**
   * The location the service is run. Corresponds to the `location`
   * resource label in the [`cloud_run_revision` monitored
   * resource](https://cloud.google.com/monitoring/api/resources#tag_cloud_run_revision).
   *
   * @generated from field: string location = 2;
   */
  location: string;
};

/**
 * Describes the message google.monitoring.v3.Service.CloudRun.
 * Use `create(Service_CloudRunSchema)` to create a new message.
 */
export const Service_CloudRunSchema: GenMessage<Service_CloudRun> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 6);

/**
 * GKE Namespace. The field names correspond to the resource metadata labels
 * on monitored resources that fall under a namespace (for example,
 * `k8s_container` or `k8s_pod`).
 *
 * @generated from message google.monitoring.v3.Service.GkeNamespace
 */
export type Service_GkeNamespace = Message<"google.monitoring.v3.Service.GkeNamespace"> & {
  /**
   * Output only. The project this resource lives in. For legacy services
   * migrated from the `Custom` type, this may be a distinct project from the
   * one parenting the service itself.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The location of the parent cluster. This may be a zone or region.
   *
   * @generated from field: string location = 2;
   */
  location: string;

  /**
   * The name of the parent cluster.
   *
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * The name of this namespace.
   *
   * @generated from field: string namespace_name = 4;
   */
  namespaceName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.GkeNamespace.
 * Use `create(Service_GkeNamespaceSchema)` to create a new message.
 */
export const Service_GkeNamespaceSchema: GenMessage<Service_GkeNamespace> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 7);

/**
 * A GKE Workload (Deployment, StatefulSet, etc). The field names correspond
 * to the metadata labels on monitored resources that fall under a workload
 * (for example, `k8s_container` or `k8s_pod`).
 *
 * @generated from message google.monitoring.v3.Service.GkeWorkload
 */
export type Service_GkeWorkload = Message<"google.monitoring.v3.Service.GkeWorkload"> & {
  /**
   * Output only. The project this resource lives in. For legacy services
   * migrated from the `Custom` type, this may be a distinct project from the
   * one parenting the service itself.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The location of the parent cluster. This may be a zone or region.
   *
   * @generated from field: string location = 2;
   */
  location: string;

  /**
   * The name of the parent cluster.
   *
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * The name of the parent namespace.
   *
   * @generated from field: string namespace_name = 4;
   */
  namespaceName: string;

  /**
   * The type of this workload (for example, "Deployment" or "DaemonSet")
   *
   * @generated from field: string top_level_controller_type = 5;
   */
  topLevelControllerType: string;

  /**
   * The name of this workload.
   *
   * @generated from field: string top_level_controller_name = 6;
   */
  topLevelControllerName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.GkeWorkload.
 * Use `create(Service_GkeWorkloadSchema)` to create a new message.
 */
export const Service_GkeWorkloadSchema: GenMessage<Service_GkeWorkload> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 8);

/**
 * GKE Service. The "service" here represents a
 * [Kubernetes service
 * object](https://kubernetes.io/docs/concepts/services-networking/service).
 * The field names correspond to the resource labels on [`k8s_service`
 * monitored
 * resources](https://cloud.google.com/monitoring/api/resources#tag_k8s_service).
 *
 * @generated from message google.monitoring.v3.Service.GkeService
 */
export type Service_GkeService = Message<"google.monitoring.v3.Service.GkeService"> & {
  /**
   * Output only. The project this resource lives in. For legacy services
   * migrated from the `Custom` type, this may be a distinct project from the
   * one parenting the service itself.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The location of the parent cluster. This may be a zone or region.
   *
   * @generated from field: string location = 2;
   */
  location: string;

  /**
   * The name of the parent cluster.
   *
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * The name of the parent namespace.
   *
   * @generated from field: string namespace_name = 4;
   */
  namespaceName: string;

  /**
   * The name of this service.
   *
   * @generated from field: string service_name = 5;
   */
  serviceName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.GkeService.
 * Use `create(Service_GkeServiceSchema)` to create a new message.
 */
export const Service_GkeServiceSchema: GenMessage<Service_GkeService> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 9);

/**
 * A well-known service type, defined by its service type and service labels.
 * Documentation and examples
 * [here](https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
 *
 * @generated from message google.monitoring.v3.Service.BasicService
 */
export type Service_BasicService = Message<"google.monitoring.v3.Service.BasicService"> & {
  /**
   * The type of service that this basic service defines, e.g.
   * APP_ENGINE service type.
   * Documentation and valid values
   * [here](https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
   *
   * @generated from field: string service_type = 1;
   */
  serviceType: string;

  /**
   * Labels that specify the resource that emits the monitoring data which
   * is used for SLO reporting of this `Service`.
   * Documentation and valid values for given service types
   * [here](https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli).
   *
   * @generated from field: map<string, string> service_labels = 2;
   */
  serviceLabels: { [key: string]: string };
};

/**
 * Describes the message google.monitoring.v3.Service.BasicService.
 * Use `create(Service_BasicServiceSchema)` to create a new message.
 */
export const Service_BasicServiceSchema: GenMessage<Service_BasicService> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 10);

/**
 * Configuration for how to query telemetry on a Service.
 *
 * @generated from message google.monitoring.v3.Service.Telemetry
 */
export type Service_Telemetry = Message<"google.monitoring.v3.Service.Telemetry"> & {
  /**
   * The full name of the resource that defines this service. Formatted as
   * described in https://cloud.google.com/apis/design/resource_names.
   *
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;
};

/**
 * Describes the message google.monitoring.v3.Service.Telemetry.
 * Use `create(Service_TelemetrySchema)` to create a new message.
 */
export const Service_TelemetrySchema: GenMessage<Service_Telemetry> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 0, 11);

/**
 * A Service-Level Objective (SLO) describes a level of desired good service. It
 * consists of a service-level indicator (SLI), a performance goal, and a period
 * over which the objective is to be evaluated against that goal. The SLO can
 * use SLIs defined in a number of different manners. Typical SLOs might include
 * "99% of requests in each rolling week have latency below 200 milliseconds" or
 * "99.5% of requests in each calendar month return successfully."
 *
 * @generated from message google.monitoring.v3.ServiceLevelObjective
 */
export type ServiceLevelObjective = Message<"google.monitoring.v3.ServiceLevelObjective"> & {
  /**
   * Identifier. Resource name for this `ServiceLevelObjective`. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Name used for UI elements listing this SLO.
   *
   * @generated from field: string display_name = 11;
   */
  displayName: string;

  /**
   * The definition of good service, used to measure and calculate the quality
   * of the `Service`'s performance with respect to a single aspect of service
   * quality.
   *
   * @generated from field: google.monitoring.v3.ServiceLevelIndicator service_level_indicator = 3;
   */
  serviceLevelIndicator?: ServiceLevelIndicator;

  /**
   * The fraction of service that must be good in order for this objective to be
   * met. `0 < goal <= 0.999`.
   *
   * @generated from field: double goal = 4;
   */
  goal: number;

  /**
   * The time period over which the objective will be evaluated.
   *
   * @generated from oneof google.monitoring.v3.ServiceLevelObjective.period
   */
  period: {
    /**
     * A rolling time period, semantically "in the past `<rolling_period>`".
     * Must be an integer multiple of 1 day no larger than 30 days.
     *
     * @generated from field: google.protobuf.Duration rolling_period = 5;
     */
    value: Duration;
    case: "rollingPeriod";
  } | {
    /**
     * A calendar period, semantically "since the start of the current
     * `<calendar_period>`". At this time, only `DAY`, `WEEK`, `FORTNIGHT`, and
     * `MONTH` are supported.
     *
     * @generated from field: google.type.CalendarPeriod calendar_period = 6;
     */
    value: CalendarPeriod;
    case: "calendarPeriod";
  } | { case: undefined; value?: undefined };

  /**
   * Labels which have been used to annotate the service-level objective. Label
   * keys must start with a letter. Label keys and values may contain lowercase
   * letters, numbers, underscores, and dashes. Label keys and values have a
   * maximum length of 63 characters, and must be less than 128 bytes in size.
   * Up to 64 label entries may be stored. For labels which do not have a
   * semantic value, the empty string may be supplied for the label value.
   *
   * @generated from field: map<string, string> user_labels = 12;
   */
  userLabels: { [key: string]: string };
};

/**
 * Describes the message google.monitoring.v3.ServiceLevelObjective.
 * Use `create(ServiceLevelObjectiveSchema)` to create a new message.
 */
export const ServiceLevelObjectiveSchema: GenMessage<ServiceLevelObjective> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 1);

/**
 * `ServiceLevelObjective.View` determines what form of
 * `ServiceLevelObjective` is returned from `GetServiceLevelObjective`,
 * `ListServiceLevelObjectives`, and `ListServiceLevelObjectiveVersions` RPCs.
 *
 * @generated from enum google.monitoring.v3.ServiceLevelObjective.View
 */
export enum ServiceLevelObjective_View {
  /**
   * Same as FULL.
   *
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * Return the embedded `ServiceLevelIndicator` in the form in which it was
   * defined. If it was defined using a `BasicSli`, return that `BasicSli`.
   *
   * @generated from enum value: FULL = 2;
   */
  FULL = 2,

  /**
   * For `ServiceLevelIndicator`s using `BasicSli` articulation, instead
   * return the `ServiceLevelIndicator` with its mode of computation fully
   * spelled out as a `RequestBasedSli`. For `ServiceLevelIndicator`s using
   * `RequestBasedSli` or `WindowsBasedSli`, return the
   * `ServiceLevelIndicator` as it was provided.
   *
   * @generated from enum value: EXPLICIT = 1;
   */
  EXPLICIT = 1,
}

/**
 * Describes the enum google.monitoring.v3.ServiceLevelObjective.View.
 */
export const ServiceLevelObjective_ViewSchema: GenEnum<ServiceLevelObjective_View> = /*@__PURE__*/
  enumDesc(file_google_monitoring_v3_service, 1, 0);

/**
 * A Service-Level Indicator (SLI) describes the "performance" of a service. For
 * some services, the SLI is well-defined. In such cases, the SLI can be
 * described easily by referencing the well-known SLI and providing the needed
 * parameters. Alternatively, a "custom" SLI can be defined with a query to the
 * underlying metric store. An SLI is defined to be `good_service /
 * total_service` over any queried time interval. The value of performance
 * always falls into the range `0 <= performance <= 1`. A custom SLI describes
 * how to compute this ratio, whether this is by dividing values from a pair of
 * time series, cutting a `Distribution` into good and bad counts, or counting
 * time windows in which the service complies with a criterion. For separation
 * of concerns, a single Service-Level Indicator measures performance for only
 * one aspect of service quality, such as fraction of successful queries or
 * fast-enough queries.
 *
 * @generated from message google.monitoring.v3.ServiceLevelIndicator
 */
export type ServiceLevelIndicator = Message<"google.monitoring.v3.ServiceLevelIndicator"> & {
  /**
   * Service level indicators can be grouped by whether the "unit" of service
   * being measured is based on counts of good requests or on counts of good
   * time windows
   *
   * @generated from oneof google.monitoring.v3.ServiceLevelIndicator.type
   */
  type: {
    /**
     * Basic SLI on a well-known service type.
     *
     * @generated from field: google.monitoring.v3.BasicSli basic_sli = 4;
     */
    value: BasicSli;
    case: "basicSli";
  } | {
    /**
     * Request-based SLIs
     *
     * @generated from field: google.monitoring.v3.RequestBasedSli request_based = 1;
     */
    value: RequestBasedSli;
    case: "requestBased";
  } | {
    /**
     * Windows-based SLIs
     *
     * @generated from field: google.monitoring.v3.WindowsBasedSli windows_based = 2;
     */
    value: WindowsBasedSli;
    case: "windowsBased";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.monitoring.v3.ServiceLevelIndicator.
 * Use `create(ServiceLevelIndicatorSchema)` to create a new message.
 */
export const ServiceLevelIndicatorSchema: GenMessage<ServiceLevelIndicator> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 2);

/**
 * An SLI measuring performance on a well-known service type. Performance will
 * be computed on the basis of pre-defined metrics. The type of the
 * `service_resource` determines the metrics to use and the
 * `service_resource.labels` and `metric_labels` are used to construct a
 * monitoring filter to filter that metric down to just the data relevant to
 * this service.
 *
 * @generated from message google.monitoring.v3.BasicSli
 */
export type BasicSli = Message<"google.monitoring.v3.BasicSli"> & {
  /**
   * OPTIONAL: The set of RPCs to which this SLI is relevant. Telemetry from
   * other methods will not be used to calculate performance for this SLI. If
   * omitted, this SLI applies to all the Service's methods. For service types
   * that don't support breaking down by method, setting this field will result
   * in an error.
   *
   * @generated from field: repeated string method = 7;
   */
  method: string[];

  /**
   * OPTIONAL: The set of locations to which this SLI is relevant. Telemetry
   * from other locations will not be used to calculate performance for this
   * SLI. If omitted, this SLI applies to all locations in which the Service has
   * activity. For service types that don't support breaking down by location,
   * setting this field will result in an error.
   *
   * @generated from field: repeated string location = 8;
   */
  location: string[];

  /**
   * OPTIONAL: The set of API versions to which this SLI is relevant. Telemetry
   * from other API versions will not be used to calculate performance for this
   * SLI. If omitted, this SLI applies to all API versions. For service types
   * that don't support breaking down by version, setting this field will result
   * in an error.
   *
   * @generated from field: repeated string version = 9;
   */
  version: string[];

  /**
   * This SLI can be evaluated on the basis of availability or latency.
   *
   * @generated from oneof google.monitoring.v3.BasicSli.sli_criteria
   */
  sliCriteria: {
    /**
     * Good service is defined to be the count of requests made to this service
     * that return successfully.
     *
     * @generated from field: google.monitoring.v3.BasicSli.AvailabilityCriteria availability = 2;
     */
    value: BasicSli_AvailabilityCriteria;
    case: "availability";
  } | {
    /**
     * Good service is defined to be the count of requests made to this service
     * that are fast enough with respect to `latency.threshold`.
     *
     * @generated from field: google.monitoring.v3.BasicSli.LatencyCriteria latency = 3;
     */
    value: BasicSli_LatencyCriteria;
    case: "latency";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.monitoring.v3.BasicSli.
 * Use `create(BasicSliSchema)` to create a new message.
 */
export const BasicSliSchema: GenMessage<BasicSli> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 3);

/**
 * Future parameters for the availability SLI.
 *
 * @generated from message google.monitoring.v3.BasicSli.AvailabilityCriteria
 */
export type BasicSli_AvailabilityCriteria = Message<"google.monitoring.v3.BasicSli.AvailabilityCriteria"> & {
};

/**
 * Describes the message google.monitoring.v3.BasicSli.AvailabilityCriteria.
 * Use `create(BasicSli_AvailabilityCriteriaSchema)` to create a new message.
 */
export const BasicSli_AvailabilityCriteriaSchema: GenMessage<BasicSli_AvailabilityCriteria> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 3, 0);

/**
 * Parameters for a latency threshold SLI.
 *
 * @generated from message google.monitoring.v3.BasicSli.LatencyCriteria
 */
export type BasicSli_LatencyCriteria = Message<"google.monitoring.v3.BasicSli.LatencyCriteria"> & {
  /**
   * Good service is defined to be the count of requests made to this service
   * that return in no more than `threshold`.
   *
   * @generated from field: google.protobuf.Duration threshold = 3;
   */
  threshold?: Duration;
};

/**
 * Describes the message google.monitoring.v3.BasicSli.LatencyCriteria.
 * Use `create(BasicSli_LatencyCriteriaSchema)` to create a new message.
 */
export const BasicSli_LatencyCriteriaSchema: GenMessage<BasicSli_LatencyCriteria> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 3, 1);

/**
 * Range of numerical values within `min` and `max`.
 *
 * @generated from message google.monitoring.v3.Range
 */
export type Range = Message<"google.monitoring.v3.Range"> & {
  /**
   * Range minimum.
   *
   * @generated from field: double min = 1;
   */
  min: number;

  /**
   * Range maximum.
   *
   * @generated from field: double max = 2;
   */
  max: number;
};

/**
 * Describes the message google.monitoring.v3.Range.
 * Use `create(RangeSchema)` to create a new message.
 */
export const RangeSchema: GenMessage<Range> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 4);

/**
 * Service Level Indicators for which atomic units of service are counted
 * directly.
 *
 * @generated from message google.monitoring.v3.RequestBasedSli
 */
export type RequestBasedSli = Message<"google.monitoring.v3.RequestBasedSli"> & {
  /**
   * The means to compute a ratio of `good_service` to `total_service`.
   *
   * @generated from oneof google.monitoring.v3.RequestBasedSli.method
   */
  method: {
    /**
     * `good_total_ratio` is used when the ratio of `good_service` to
     * `total_service` is computed from two `TimeSeries`.
     *
     * @generated from field: google.monitoring.v3.TimeSeriesRatio good_total_ratio = 1;
     */
    value: TimeSeriesRatio;
    case: "goodTotalRatio";
  } | {
    /**
     * `distribution_cut` is used when `good_service` is a count of values
     * aggregated in a `Distribution` that fall into a good range. The
     * `total_service` is the total count of all values aggregated in the
     * `Distribution`.
     *
     * @generated from field: google.monitoring.v3.DistributionCut distribution_cut = 3;
     */
    value: DistributionCut;
    case: "distributionCut";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.monitoring.v3.RequestBasedSli.
 * Use `create(RequestBasedSliSchema)` to create a new message.
 */
export const RequestBasedSliSchema: GenMessage<RequestBasedSli> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 5);

/**
 * A `TimeSeriesRatio` specifies two `TimeSeries` to use for computing the
 * `good_service / total_service` ratio. The specified `TimeSeries` must have
 * `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
 * DELTA` or `MetricKind = CUMULATIVE`. The `TimeSeriesRatio` must specify
 * exactly two of good, bad, and total, and the relationship `good_service +
 * bad_service = total_service` will be assumed.
 *
 * @generated from message google.monitoring.v3.TimeSeriesRatio
 */
export type TimeSeriesRatio = Message<"google.monitoring.v3.TimeSeriesRatio"> & {
  /**
   * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifying a `TimeSeries` quantifying good service provided. Must have
   * `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
   * DELTA` or `MetricKind = CUMULATIVE`.
   *
   * @generated from field: string good_service_filter = 4;
   */
  goodServiceFilter: string;

  /**
   * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifying a `TimeSeries` quantifying bad service, either demanded service
   * that was not provided or demanded service that was of inadequate quality.
   * Must have `ValueType = DOUBLE` or `ValueType = INT64` and must have
   * `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.
   *
   * @generated from field: string bad_service_filter = 5;
   */
  badServiceFilter: string;

  /**
   * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifying a `TimeSeries` quantifying total demanded service. Must have
   * `ValueType = DOUBLE` or `ValueType = INT64` and must have `MetricKind =
   * DELTA` or `MetricKind = CUMULATIVE`.
   *
   * @generated from field: string total_service_filter = 6;
   */
  totalServiceFilter: string;
};

/**
 * Describes the message google.monitoring.v3.TimeSeriesRatio.
 * Use `create(TimeSeriesRatioSchema)` to create a new message.
 */
export const TimeSeriesRatioSchema: GenMessage<TimeSeriesRatio> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 6);

/**
 * A `DistributionCut` defines a `TimeSeries` and thresholds used for measuring
 * good service and total service. The `TimeSeries` must have `ValueType =
 * DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`. The
 * computed `good_service` will be the estimated count of values in the
 * `Distribution` that fall within the specified `min` and `max`.
 *
 * @generated from message google.monitoring.v3.DistributionCut
 */
export type DistributionCut = Message<"google.monitoring.v3.DistributionCut"> & {
  /**
   * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifying a `TimeSeries` aggregating values. Must have `ValueType =
   * DISTRIBUTION` and `MetricKind = DELTA` or `MetricKind = CUMULATIVE`.
   *
   * @generated from field: string distribution_filter = 4;
   */
  distributionFilter: string;

  /**
   * Range of values considered "good." For a one-sided range, set one bound to
   * an infinite value.
   *
   * @generated from field: google.monitoring.v3.Range range = 5;
   */
  range?: Range;
};

/**
 * Describes the message google.monitoring.v3.DistributionCut.
 * Use `create(DistributionCutSchema)` to create a new message.
 */
export const DistributionCutSchema: GenMessage<DistributionCut> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 7);

/**
 * A `WindowsBasedSli` defines `good_service` as the count of time windows for
 * which the provided service was of good quality. Criteria for determining
 * if service was good are embedded in the `window_criterion`.
 *
 * @generated from message google.monitoring.v3.WindowsBasedSli
 */
export type WindowsBasedSli = Message<"google.monitoring.v3.WindowsBasedSli"> & {
  /**
   * The criterion to use for evaluating window goodness.
   *
   * @generated from oneof google.monitoring.v3.WindowsBasedSli.window_criterion
   */
  windowCriterion: {
    /**
     * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
     * specifying a `TimeSeries` with `ValueType = BOOL`. The window is good if
     * any `true` values appear in the window.
     *
     * @generated from field: string good_bad_metric_filter = 5;
     */
    value: string;
    case: "goodBadMetricFilter";
  } | {
    /**
     * A window is good if its `performance` is high enough.
     *
     * @generated from field: google.monitoring.v3.WindowsBasedSli.PerformanceThreshold good_total_ratio_threshold = 2;
     */
    value: WindowsBasedSli_PerformanceThreshold;
    case: "goodTotalRatioThreshold";
  } | {
    /**
     * A window is good if the metric's value is in a good range, averaged
     * across returned streams.
     *
     * @generated from field: google.monitoring.v3.WindowsBasedSli.MetricRange metric_mean_in_range = 6;
     */
    value: WindowsBasedSli_MetricRange;
    case: "metricMeanInRange";
  } | {
    /**
     * A window is good if the metric's value is in a good range, summed across
     * returned streams.
     *
     * @generated from field: google.monitoring.v3.WindowsBasedSli.MetricRange metric_sum_in_range = 7;
     */
    value: WindowsBasedSli_MetricRange;
    case: "metricSumInRange";
  } | { case: undefined; value?: undefined };

  /**
   * Duration over which window quality is evaluated. Must be an integer
   * fraction of a day and at least `60s`.
   *
   * @generated from field: google.protobuf.Duration window_period = 4;
   */
  windowPeriod?: Duration;
};

/**
 * Describes the message google.monitoring.v3.WindowsBasedSli.
 * Use `create(WindowsBasedSliSchema)` to create a new message.
 */
export const WindowsBasedSliSchema: GenMessage<WindowsBasedSli> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 8);

/**
 * A `PerformanceThreshold` is used when each window is good when that window
 * has a sufficiently high `performance`.
 *
 * @generated from message google.monitoring.v3.WindowsBasedSli.PerformanceThreshold
 */
export type WindowsBasedSli_PerformanceThreshold = Message<"google.monitoring.v3.WindowsBasedSli.PerformanceThreshold"> & {
  /**
   * The means, either a request-based SLI or a basic SLI, by which to compute
   * performance over a window.
   *
   * @generated from oneof google.monitoring.v3.WindowsBasedSli.PerformanceThreshold.type
   */
  type: {
    /**
     * `RequestBasedSli` to evaluate to judge window quality.
     *
     * @generated from field: google.monitoring.v3.RequestBasedSli performance = 1;
     */
    value: RequestBasedSli;
    case: "performance";
  } | {
    /**
     * `BasicSli` to evaluate to judge window quality.
     *
     * @generated from field: google.monitoring.v3.BasicSli basic_sli_performance = 3;
     */
    value: BasicSli;
    case: "basicSliPerformance";
  } | { case: undefined; value?: undefined };

  /**
   * If window `performance >= threshold`, the window is counted as good.
   *
   * @generated from field: double threshold = 2;
   */
  threshold: number;
};

/**
 * Describes the message google.monitoring.v3.WindowsBasedSli.PerformanceThreshold.
 * Use `create(WindowsBasedSli_PerformanceThresholdSchema)` to create a new message.
 */
export const WindowsBasedSli_PerformanceThresholdSchema: GenMessage<WindowsBasedSli_PerformanceThreshold> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 8, 0);

/**
 * A `MetricRange` is used when each window is good when the value x of a
 * single `TimeSeries` satisfies `range.min <= x <= range.max`. The provided
 * `TimeSeries` must have `ValueType = INT64` or `ValueType = DOUBLE` and
 * `MetricKind = GAUGE`.
 *
 * @generated from message google.monitoring.v3.WindowsBasedSli.MetricRange
 */
export type WindowsBasedSli_MetricRange = Message<"google.monitoring.v3.WindowsBasedSli.MetricRange"> & {
  /**
   * A [monitoring filter](https://cloud.google.com/monitoring/api/v3/filters)
   * specifying the `TimeSeries` to use for evaluating window quality.
   *
   * @generated from field: string time_series = 1;
   */
  timeSeries: string;

  /**
   * Range of values considered "good." For a one-sided range, set one bound
   * to an infinite value.
   *
   * @generated from field: google.monitoring.v3.Range range = 4;
   */
  range?: Range;
};

/**
 * Describes the message google.monitoring.v3.WindowsBasedSli.MetricRange.
 * Use `create(WindowsBasedSli_MetricRangeSchema)` to create a new message.
 */
export const WindowsBasedSli_MetricRangeSchema: GenMessage<WindowsBasedSli_MetricRange> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_service, 8, 1);

