// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/notification_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import { file_google_api_client } from "../../api/client_pb";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { NotificationChannel, NotificationChannelDescriptor, NotificationChannelDescriptorSchema, NotificationChannelSchema } from "./notification_pb";
import { file_google_monitoring_v3_notification } from "./notification_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/v3/notification_service.proto.
 */
export const file_google_monitoring_v3_notification_service: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvbW9uaXRvcmluZy92My9ub3RpZmljYXRpb25fc2VydmljZS5wcm90bxIUZ29vZ2xlLm1vbml0b3JpbmcudjMioQEKKUxpc3ROb3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvcnNSZXF1ZXN0Ek0KBG5hbWUYBCABKAlCP+BBAvpBORI3bW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvchIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCSKXAQoqTGlzdE5vdGlmaWNhdGlvbkNoYW5uZWxEZXNjcmlwdG9yc1Jlc3BvbnNlElAKE2NoYW5uZWxfZGVzY3JpcHRvcnMYASADKAsyMy5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvchIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkieAonR2V0Tm90aWZpY2F0aW9uQ2hhbm5lbERlc2NyaXB0b3JSZXF1ZXN0Ek0KBG5hbWUYAyABKAlCP+BBAvpBOQo3bW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvciK1AQogQ3JlYXRlTm90aWZpY2F0aW9uQ2hhbm5lbFJlcXVlc3QSQwoEbmFtZRgDIAEoCUI14EEC+kEvEi1tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL05vdGlmaWNhdGlvbkNoYW5uZWwSTAoUbm90aWZpY2F0aW9uX2NoYW5uZWwYAiABKAsyKS5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsQgPgQQIirwEKH0xpc3ROb3RpZmljYXRpb25DaGFubmVsc1JlcXVlc3QSQwoEbmFtZRgFIAEoCUI14EEC+kEvEi1tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL05vdGlmaWNhdGlvbkNoYW5uZWwSDgoGZmlsdGVyGAYgASgJEhAKCG9yZGVyX2J5GAcgASgJEhEKCXBhZ2Vfc2l6ZRgDIAEoBRISCgpwYWdlX3Rva2VuGAQgASgJIpkBCiBMaXN0Tm90aWZpY2F0aW9uQ2hhbm5lbHNSZXNwb25zZRJIChVub3RpZmljYXRpb25fY2hhbm5lbHMYAyADKAsyKS5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCRISCgp0b3RhbF9zaXplGAQgASgFImQKHUdldE5vdGlmaWNhdGlvbkNoYW5uZWxSZXF1ZXN0EkMKBG5hbWUYAyABKAlCNeBBAvpBLwotbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25DaGFubmVsIqEBCiBVcGRhdGVOb3RpZmljYXRpb25DaGFubmVsUmVxdWVzdBIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sSTAoUbm90aWZpY2F0aW9uX2NoYW5uZWwYAyABKAsyKS5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsQgPgQQIidgogRGVsZXRlTm90aWZpY2F0aW9uQ2hhbm5lbFJlcXVlc3QSQwoEbmFtZRgDIAEoCUI14EEC+kEvCi1tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL05vdGlmaWNhdGlvbkNoYW5uZWwSDQoFZm9yY2UYBSABKAgidQouU2VuZE5vdGlmaWNhdGlvbkNoYW5uZWxWZXJpZmljYXRpb25Db2RlUmVxdWVzdBJDCgRuYW1lGAEgASgJQjXgQQL6QS8KLW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vTm90aWZpY2F0aW9uQ2hhbm5lbCKlAQotR2V0Tm90aWZpY2F0aW9uQ2hhbm5lbFZlcmlmaWNhdGlvbkNvZGVSZXF1ZXN0EkMKBG5hbWUYASABKAlCNeBBAvpBLwotbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25DaGFubmVsEi8KC2V4cGlyZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJvCi5HZXROb3RpZmljYXRpb25DaGFubmVsVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlEgwKBGNvZGUYASABKAkSLwoLZXhwaXJlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wInoKIFZlcmlmeU5vdGlmaWNhdGlvbkNoYW5uZWxSZXF1ZXN0EkMKBG5hbWUYASABKAlCNeBBAvpBLwotbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25DaGFubmVsEhEKBGNvZGUYAiABKAlCA+BBAjLqEgoaTm90aWZpY2F0aW9uQ2hhbm5lbFNlcnZpY2US7AEKIkxpc3ROb3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvcnMSPy5nb29nbGUubW9uaXRvcmluZy52My5MaXN0Tm90aWZpY2F0aW9uQ2hhbm5lbERlc2NyaXB0b3JzUmVxdWVzdBpALmdvb2dsZS5tb25pdG9yaW5nLnYzLkxpc3ROb3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvcnNSZXNwb25zZSJD2kEEbmFtZYLT5JMCNhI0L3YzL3tuYW1lPXByb2plY3RzLyp9L25vdGlmaWNhdGlvbkNoYW5uZWxEZXNjcmlwdG9ycxLdAQogR2V0Tm90aWZpY2F0aW9uQ2hhbm5lbERlc2NyaXB0b3ISPS5nb29nbGUubW9uaXRvcmluZy52My5HZXROb3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvclJlcXVlc3QaMy5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsRGVzY3JpcHRvciJF2kEEbmFtZYLT5JMCOBI2L3YzL3tuYW1lPXByb2plY3RzLyovbm90aWZpY2F0aW9uQ2hhbm5lbERlc2NyaXB0b3JzLyp9EsQBChhMaXN0Tm90aWZpY2F0aW9uQ2hhbm5lbHMSNS5nb29nbGUubW9uaXRvcmluZy52My5MaXN0Tm90aWZpY2F0aW9uQ2hhbm5lbHNSZXF1ZXN0GjYuZ29vZ2xlLm1vbml0b3JpbmcudjMuTGlzdE5vdGlmaWNhdGlvbkNoYW5uZWxzUmVzcG9uc2UiOdpBBG5hbWWC0+STAiwSKi92My97bmFtZT1wcm9qZWN0cy8qfS9ub3RpZmljYXRpb25DaGFubmVscxK1AQoWR2V0Tm90aWZpY2F0aW9uQ2hhbm5lbBIzLmdvb2dsZS5tb25pdG9yaW5nLnYzLkdldE5vdGlmaWNhdGlvbkNoYW5uZWxSZXF1ZXN0GikuZ29vZ2xlLm1vbml0b3JpbmcudjMuTm90aWZpY2F0aW9uQ2hhbm5lbCI72kEEbmFtZYLT5JMCLhIsL3YzL3tuYW1lPXByb2plY3RzLyovbm90aWZpY2F0aW9uQ2hhbm5lbHMvKn0S5AEKGUNyZWF0ZU5vdGlmaWNhdGlvbkNoYW5uZWwSNi5nb29nbGUubW9uaXRvcmluZy52My5DcmVhdGVOb3RpZmljYXRpb25DaGFubmVsUmVxdWVzdBopLmdvb2dsZS5tb25pdG9yaW5nLnYzLk5vdGlmaWNhdGlvbkNoYW5uZWwiZNpBGW5hbWUsbm90aWZpY2F0aW9uX2NoYW5uZWyC0+STAkI6FG5vdGlmaWNhdGlvbl9jaGFubmVsIiovdjMve25hbWU9cHJvamVjdHMvKn0vbm90aWZpY2F0aW9uQ2hhbm5lbHMSgwIKGVVwZGF0ZU5vdGlmaWNhdGlvbkNoYW5uZWwSNi5nb29nbGUubW9uaXRvcmluZy52My5VcGRhdGVOb3RpZmljYXRpb25DaGFubmVsUmVxdWVzdBopLmdvb2dsZS5tb25pdG9yaW5nLnYzLk5vdGlmaWNhdGlvbkNoYW5uZWwiggHaQSB1cGRhdGVfbWFzayxub3RpZmljYXRpb25fY2hhbm5lbILT5JMCWToUbm90aWZpY2F0aW9uX2NoYW5uZWwyQS92My97bm90aWZpY2F0aW9uX2NoYW5uZWwubmFtZT1wcm9qZWN0cy8qL25vdGlmaWNhdGlvbkNoYW5uZWxzLyp9Eq4BChlEZWxldGVOb3RpZmljYXRpb25DaGFubmVsEjYuZ29vZ2xlLm1vbml0b3JpbmcudjMuRGVsZXRlTm90aWZpY2F0aW9uQ2hhbm5lbFJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiQdpBCm5hbWUsZm9yY2WC0+STAi4qLC92My97bmFtZT1wcm9qZWN0cy8qL25vdGlmaWNhdGlvbkNoYW5uZWxzLyp9EtwBCidTZW5kTm90aWZpY2F0aW9uQ2hhbm5lbFZlcmlmaWNhdGlvbkNvZGUSRC5nb29nbGUubW9uaXRvcmluZy52My5TZW5kTm90aWZpY2F0aW9uQ2hhbm5lbFZlcmlmaWNhdGlvbkNvZGVSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IlPaQQRuYW1lgtPkkwJGOgEqIkEvdjMve25hbWU9cHJvamVjdHMvKi9ub3RpZmljYXRpb25DaGFubmVscy8qfTpzZW5kVmVyaWZpY2F0aW9uQ29kZRKHAgomR2V0Tm90aWZpY2F0aW9uQ2hhbm5lbFZlcmlmaWNhdGlvbkNvZGUSQy5nb29nbGUubW9uaXRvcmluZy52My5HZXROb3RpZmljYXRpb25DaGFubmVsVmVyaWZpY2F0aW9uQ29kZVJlcXVlc3QaRC5nb29nbGUubW9uaXRvcmluZy52My5HZXROb3RpZmljYXRpb25DaGFubmVsVmVyaWZpY2F0aW9uQ29kZVJlc3BvbnNlIlLaQQRuYW1lgtPkkwJFOgEqIkAvdjMve25hbWU9cHJvamVjdHMvKi9ub3RpZmljYXRpb25DaGFubmVscy8qfTpnZXRWZXJpZmljYXRpb25Db2RlEsoBChlWZXJpZnlOb3RpZmljYXRpb25DaGFubmVsEjYuZ29vZ2xlLm1vbml0b3JpbmcudjMuVmVyaWZ5Tm90aWZpY2F0aW9uQ2hhbm5lbFJlcXVlc3QaKS5nb29nbGUubW9uaXRvcmluZy52My5Ob3RpZmljYXRpb25DaGFubmVsIkraQQluYW1lLGNvZGWC0+STAjg6ASoiMy92My97bmFtZT1wcm9qZWN0cy8qL25vdGlmaWNhdGlvbkNoYW5uZWxzLyp9OnZlcmlmeRqpAcpBGW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb23SQYkBaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL21vbml0b3JpbmcsaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9tb25pdG9yaW5nLnJlYWRC0wEKGGNvbS5nb29nbGUubW9uaXRvcmluZy52M0IYTm90aWZpY2F0aW9uU2VydmljZVByb3RvUAFaQWNsb3VkLmdvb2dsZS5jb20vZ28vbW9uaXRvcmluZy9hcGl2My92Mi9tb25pdG9yaW5ncGI7bW9uaXRvcmluZ3BiqgIaR29vZ2xlLkNsb3VkLk1vbml0b3JpbmcuVjPKAhpHb29nbGVcQ2xvdWRcTW9uaXRvcmluZ1xWM+oCHUdvb2dsZTo6Q2xvdWQ6Ok1vbml0b3Jpbmc6OlYzYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_monitoring_v3_notification, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * The `ListNotificationChannelDescriptors` request.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelDescriptorsRequest
 */
export type ListNotificationChannelDescriptorsRequest = Message<"google.monitoring.v3.ListNotificationChannelDescriptorsRequest"> & {
  /**
   * Required. The REST resource name of the parent from which to retrieve
   * the notification channel descriptors. The expected syntax is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this
   * [names](https://cloud.google.com/monitoring/api/v3#project_name) the parent
   * container in which to look for the descriptors; to retrieve a single
   * descriptor by name, use the
   * [GetNotificationChannelDescriptor][google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor]
   * operation, instead.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * The maximum number of results to return in a single response. If
   * not set to a positive number, a reasonable value will be chosen by the
   * service.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` must contain a value returned as the
   * `next_page_token` in a previous response to request the next set
   * of results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListNotificationChannelDescriptorsRequest.
 * Use `create(ListNotificationChannelDescriptorsRequestSchema)` to create a new message.
 */
export const ListNotificationChannelDescriptorsRequestSchema: GenMessage<ListNotificationChannelDescriptorsRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 0);

/**
 * The `ListNotificationChannelDescriptors` response.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelDescriptorsResponse
 */
export type ListNotificationChannelDescriptorsResponse = Message<"google.monitoring.v3.ListNotificationChannelDescriptorsResponse"> & {
  /**
   * The monitored resource descriptors supported for the specified
   * project, optionally filtered.
   *
   * @generated from field: repeated google.monitoring.v3.NotificationChannelDescriptor channel_descriptors = 1;
   */
  channelDescriptors: NotificationChannelDescriptor[];

  /**
   * If not empty, indicates that there may be more results that match
   * the request. Use the value in the `page_token` field in a
   * subsequent request to fetch the next set of results. If empty,
   * all results have been returned.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListNotificationChannelDescriptorsResponse.
 * Use `create(ListNotificationChannelDescriptorsResponseSchema)` to create a new message.
 */
export const ListNotificationChannelDescriptorsResponseSchema: GenMessage<ListNotificationChannelDescriptorsResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 1);

/**
 * The `GetNotificationChannelDescriptor` response.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelDescriptorRequest
 */
export type GetNotificationChannelDescriptorRequest = Message<"google.monitoring.v3.GetNotificationChannelDescriptorRequest"> & {
  /**
   * Required. The channel type for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[CHANNEL_TYPE]
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.GetNotificationChannelDescriptorRequest.
 * Use `create(GetNotificationChannelDescriptorRequestSchema)` to create a new message.
 */
export const GetNotificationChannelDescriptorRequestSchema: GenMessage<GetNotificationChannelDescriptorRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 2);

/**
 * The `CreateNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.CreateNotificationChannelRequest
 */
export type CreateNotificationChannelRequest = Message<"google.monitoring.v3.CreateNotificationChannelRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * This names the container into which the channel will be
   * written, this does not name the newly created channel. The resulting
   * channel's name will have a normalized version of this field as a prefix,
   * but will add `/notificationChannels/[CHANNEL_ID]` to identify the channel.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Required. The definition of the `NotificationChannel` to create.
   *
   * @generated from field: google.monitoring.v3.NotificationChannel notification_channel = 2;
   */
  notificationChannel?: NotificationChannel;
};

/**
 * Describes the message google.monitoring.v3.CreateNotificationChannelRequest.
 * Use `create(CreateNotificationChannelRequestSchema)` to create a new message.
 */
export const CreateNotificationChannelRequestSchema: GenMessage<CreateNotificationChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 3);

/**
 * The `ListNotificationChannels` request.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelsRequest
 */
export type ListNotificationChannelsRequest = Message<"google.monitoring.v3.ListNotificationChannelsRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) on which
   * to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * This names the container
   * in which to look for the notification channels; it does not name a
   * specific channel. To query a specific channel by REST resource name, use
   * the
   * [`GetNotificationChannel`][google.monitoring.v3.NotificationChannelService.GetNotificationChannel]
   * operation.
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * If provided, this field specifies the criteria that must be met by
   * notification channels to be included in the response.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string filter = 6;
   */
  filter: string;

  /**
   * A comma-separated list of fields by which to sort the result. Supports
   * the same set of fields as in `filter`. Entries can be prefixed with
   * a minus sign to sort in descending rather than ascending order.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string order_by = 7;
   */
  orderBy: string;

  /**
   * The maximum number of results to return in a single response. If
   * not set to a positive number, a reasonable value will be chosen by the
   * service.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` must contain a value returned as the
   * `next_page_token` in a previous response to request the next set
   * of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListNotificationChannelsRequest.
 * Use `create(ListNotificationChannelsRequestSchema)` to create a new message.
 */
export const ListNotificationChannelsRequestSchema: GenMessage<ListNotificationChannelsRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 4);

/**
 * The `ListNotificationChannels` response.
 *
 * @generated from message google.monitoring.v3.ListNotificationChannelsResponse
 */
export type ListNotificationChannelsResponse = Message<"google.monitoring.v3.ListNotificationChannelsResponse"> & {
  /**
   * The notification channels defined for the specified project.
   *
   * @generated from field: repeated google.monitoring.v3.NotificationChannel notification_channels = 3;
   */
  notificationChannels: NotificationChannel[];

  /**
   * If not empty, indicates that there may be more results that match
   * the request. Use the value in the `page_token` field in a
   * subsequent request to fetch the next set of results. If empty,
   * all results have been returned.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * The total number of notification channels in all pages. This number is only
   * an estimate, and may change in subsequent pages. https://aip.dev/158
   *
   * @generated from field: int32 total_size = 4;
   */
  totalSize: number;
};

/**
 * Describes the message google.monitoring.v3.ListNotificationChannelsResponse.
 * Use `create(ListNotificationChannelsResponseSchema)` to create a new message.
 */
export const ListNotificationChannelsResponseSchema: GenMessage<ListNotificationChannelsResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 5);

/**
 * The `GetNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelRequest
 */
export type GetNotificationChannelRequest = Message<"google.monitoring.v3.GetNotificationChannelRequest"> & {
  /**
   * Required. The channel for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.GetNotificationChannelRequest.
 * Use `create(GetNotificationChannelRequestSchema)` to create a new message.
 */
export const GetNotificationChannelRequestSchema: GenMessage<GetNotificationChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 6);

/**
 * The `UpdateNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.UpdateNotificationChannelRequest
 */
export type UpdateNotificationChannelRequest = Message<"google.monitoring.v3.UpdateNotificationChannelRequest"> & {
  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Required. A description of the changes to be applied to the specified
   * notification channel. The description must provide a definition for
   * fields to be updated; the names of these fields should also be
   * included in the `update_mask`.
   *
   * @generated from field: google.monitoring.v3.NotificationChannel notification_channel = 3;
   */
  notificationChannel?: NotificationChannel;
};

/**
 * Describes the message google.monitoring.v3.UpdateNotificationChannelRequest.
 * Use `create(UpdateNotificationChannelRequestSchema)` to create a new message.
 */
export const UpdateNotificationChannelRequestSchema: GenMessage<UpdateNotificationChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 7);

/**
 * The `DeleteNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.DeleteNotificationChannelRequest
 */
export type DeleteNotificationChannelRequest = Message<"google.monitoring.v3.DeleteNotificationChannelRequest"> & {
  /**
   * Required. The channel for which to execute the request. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID]
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * If true, the notification channel will be deleted regardless of its
   * use in alert policies (the policies will be updated to remove the
   * channel). If false, channels that are still referenced by an existing
   * alerting policy will fail to be deleted in a delete operation.
   *
   * @generated from field: bool force = 5;
   */
  force: boolean;
};

/**
 * Describes the message google.monitoring.v3.DeleteNotificationChannelRequest.
 * Use `create(DeleteNotificationChannelRequestSchema)` to create a new message.
 */
export const DeleteNotificationChannelRequestSchema: GenMessage<DeleteNotificationChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 8);

/**
 * The `SendNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.SendNotificationChannelVerificationCodeRequest
 */
export type SendNotificationChannelVerificationCodeRequest = Message<"google.monitoring.v3.SendNotificationChannelVerificationCodeRequest"> & {
  /**
   * Required. The notification channel to which to send a verification code.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.SendNotificationChannelVerificationCodeRequest.
 * Use `create(SendNotificationChannelVerificationCodeRequestSchema)` to create a new message.
 */
export const SendNotificationChannelVerificationCodeRequestSchema: GenMessage<SendNotificationChannelVerificationCodeRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 9);

/**
 * The `GetNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelVerificationCodeRequest
 */
export type GetNotificationChannelVerificationCodeRequest = Message<"google.monitoring.v3.GetNotificationChannelVerificationCodeRequest"> & {
  /**
   * Required. The notification channel for which a verification code is to be
   * generated and retrieved. This must name a channel that is already verified;
   * if the specified channel is not verified, the request will fail.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The desired expiration time. If specified, the API will guarantee that
   * the returned code will not be valid after the specified timestamp;
   * however, the API cannot guarantee that the returned code will be
   * valid for at least as long as the requested time (the API puts an upper
   * bound on the amount of time for which a code may be valid). If omitted,
   * a default expiration will be used, which may be less than the max
   * permissible expiration (so specifying an expiration may extend the
   * code's lifetime over omitting an expiration, even though the API does
   * impose an upper limit on the maximum expiration that is permitted).
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.monitoring.v3.GetNotificationChannelVerificationCodeRequest.
 * Use `create(GetNotificationChannelVerificationCodeRequestSchema)` to create a new message.
 */
export const GetNotificationChannelVerificationCodeRequestSchema: GenMessage<GetNotificationChannelVerificationCodeRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 10);

/**
 * The `GetNotificationChannelVerificationCode` request.
 *
 * @generated from message google.monitoring.v3.GetNotificationChannelVerificationCodeResponse
 */
export type GetNotificationChannelVerificationCodeResponse = Message<"google.monitoring.v3.GetNotificationChannelVerificationCodeResponse"> & {
  /**
   * The verification code, which may be used to verify other channels
   * that have an equivalent identity (i.e. other channels of the same
   * type with the same fingerprint such as other email channels with
   * the same email address or other sms channels with the same number).
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * The expiration time associated with the code that was returned. If
   * an expiration was provided in the request, this is the minimum of the
   * requested expiration in the request and the max permitted expiration.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 2;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.monitoring.v3.GetNotificationChannelVerificationCodeResponse.
 * Use `create(GetNotificationChannelVerificationCodeResponseSchema)` to create a new message.
 */
export const GetNotificationChannelVerificationCodeResponseSchema: GenMessage<GetNotificationChannelVerificationCodeResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 11);

/**
 * The `VerifyNotificationChannel` request.
 *
 * @generated from message google.monitoring.v3.VerifyNotificationChannelRequest
 */
export type VerifyNotificationChannelRequest = Message<"google.monitoring.v3.VerifyNotificationChannelRequest"> & {
  /**
   * Required. The notification channel to verify.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The verification code that was delivered to the channel as
   * a result of invoking the `SendNotificationChannelVerificationCode` API
   * method or that was retrieved from a verified channel via
   * `GetNotificationChannelVerificationCode`. For example, one might have
   * "G-123456" or "TKNZGhhd2EyN3I1MnRnMjRv" (in general, one is only
   * guaranteed that the code is valid UTF-8; one should not
   * make any assumptions regarding the structure or format of the code).
   *
   * @generated from field: string code = 2;
   */
  code: string;
};

/**
 * Describes the message google.monitoring.v3.VerifyNotificationChannelRequest.
 * Use `create(VerifyNotificationChannelRequestSchema)` to create a new message.
 */
export const VerifyNotificationChannelRequestSchema: GenMessage<VerifyNotificationChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_notification_service, 12);

/**
 * The Notification Channel API provides access to configuration that
 * controls how messages related to incidents are sent.
 *
 * @generated from service google.monitoring.v3.NotificationChannelService
 */
export const NotificationChannelService: GenService<{
  /**
   * Lists the descriptors for supported channel types. The use of descriptors
   * makes it possible for new channel types to be dynamically added.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.ListNotificationChannelDescriptors
   */
  listNotificationChannelDescriptors: {
    methodKind: "unary";
    input: typeof ListNotificationChannelDescriptorsRequestSchema;
    output: typeof ListNotificationChannelDescriptorsResponseSchema;
  },
  /**
   * Gets a single channel descriptor. The descriptor indicates which fields
   * are expected / permitted for a notification channel of the given type.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.GetNotificationChannelDescriptor
   */
  getNotificationChannelDescriptor: {
    methodKind: "unary";
    input: typeof GetNotificationChannelDescriptorRequestSchema;
    output: typeof NotificationChannelDescriptorSchema;
  },
  /**
   * Lists the notification channels that have been created for the project.
   * To list the types of notification channels that are supported, use
   * the `ListNotificationChannelDescriptors` method.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.ListNotificationChannels
   */
  listNotificationChannels: {
    methodKind: "unary";
    input: typeof ListNotificationChannelsRequestSchema;
    output: typeof ListNotificationChannelsResponseSchema;
  },
  /**
   * Gets a single notification channel. The channel includes the relevant
   * configuration details with which the channel was created. However, the
   * response may truncate or omit passwords, API keys, or other private key
   * matter and thus the response may not be 100% identical to the information
   * that was supplied in the call to the create method.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.GetNotificationChannel
   */
  getNotificationChannel: {
    methodKind: "unary";
    input: typeof GetNotificationChannelRequestSchema;
    output: typeof NotificationChannelSchema;
  },
  /**
   * Creates a new notification channel, representing a single notification
   * endpoint such as an email address, SMS number, or PagerDuty service.
   *
   * Design your application to single-thread API calls that modify the state of
   * notification channels in a single project. This includes calls to
   * CreateNotificationChannel, DeleteNotificationChannel and
   * UpdateNotificationChannel.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.CreateNotificationChannel
   */
  createNotificationChannel: {
    methodKind: "unary";
    input: typeof CreateNotificationChannelRequestSchema;
    output: typeof NotificationChannelSchema;
  },
  /**
   * Updates a notification channel. Fields not specified in the field mask
   * remain unchanged.
   *
   * Design your application to single-thread API calls that modify the state of
   * notification channels in a single project. This includes calls to
   * CreateNotificationChannel, DeleteNotificationChannel and
   * UpdateNotificationChannel.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.UpdateNotificationChannel
   */
  updateNotificationChannel: {
    methodKind: "unary";
    input: typeof UpdateNotificationChannelRequestSchema;
    output: typeof NotificationChannelSchema;
  },
  /**
   * Deletes a notification channel.
   *
   * Design your application to single-thread API calls that modify the state of
   * notification channels in a single project. This includes calls to
   * CreateNotificationChannel, DeleteNotificationChannel and
   * UpdateNotificationChannel.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.DeleteNotificationChannel
   */
  deleteNotificationChannel: {
    methodKind: "unary";
    input: typeof DeleteNotificationChannelRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Causes a verification code to be delivered to the channel. The code
   * can then be supplied in `VerifyNotificationChannel` to verify the channel.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.SendNotificationChannelVerificationCode
   */
  sendNotificationChannelVerificationCode: {
    methodKind: "unary";
    input: typeof SendNotificationChannelVerificationCodeRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Requests a verification code for an already verified channel that can then
   * be used in a call to VerifyNotificationChannel() on a different channel
   * with an equivalent identity in the same or in a different project. This
   * makes it possible to copy a channel between projects without requiring
   * manual reverification of the channel. If the channel is not in the
   * verified state, this method will fail (in other words, this may only be
   * used if the SendNotificationChannelVerificationCode and
   * VerifyNotificationChannel paths have already been used to put the given
   * channel into the verified state).
   *
   * There is no guarantee that the verification codes returned by this method
   * will be of a similar structure or form as the ones that are delivered
   * to the channel via SendNotificationChannelVerificationCode; while
   * VerifyNotificationChannel() will recognize both the codes delivered via
   * SendNotificationChannelVerificationCode() and returned from
   * GetNotificationChannelVerificationCode(), it is typically the case that
   * the verification codes delivered via
   * SendNotificationChannelVerificationCode() will be shorter and also
   * have a shorter expiration (e.g. codes such as "G-123456") whereas
   * GetVerificationCode() will typically return a much longer, websafe base
   * 64 encoded string that has a longer expiration time.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.GetNotificationChannelVerificationCode
   */
  getNotificationChannelVerificationCode: {
    methodKind: "unary";
    input: typeof GetNotificationChannelVerificationCodeRequestSchema;
    output: typeof GetNotificationChannelVerificationCodeResponseSchema;
  },
  /**
   * Verifies a `NotificationChannel` by proving receipt of the code
   * delivered to the channel as a result of calling
   * `SendNotificationChannelVerificationCode`.
   *
   * @generated from rpc google.monitoring.v3.NotificationChannelService.VerifyNotificationChannel
   */
  verifyNotificationChannel: {
    methodKind: "unary";
    input: typeof VerifyNotificationChannelRequestSchema;
    output: typeof NotificationChannelSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_monitoring_v3_notification_service, 0);

