// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/v3/alert_service.proto (package google.monitoring.v3, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import { file_google_api_client } from "../../api/client_pb";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { AlertPolicy, AlertPolicySchema } from "./alert_pb";
import { file_google_monitoring_v3_alert } from "./alert_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/v3/alert_service.proto.
 */
export const file_google_monitoring_v3_alert_service: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvbW9uaXRvcmluZy92My9hbGVydF9zZXJ2aWNlLnByb3RvEhRnb29nbGUubW9uaXRvcmluZy52MyKVAQoYQ3JlYXRlQWxlcnRQb2xpY3lSZXF1ZXN0EjsKBG5hbWUYAyABKAlCLeBBAvpBJxIlbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS9BbGVydFBvbGljeRI8CgxhbGVydF9wb2xpY3kYAiABKAsyIS5nb29nbGUubW9uaXRvcmluZy52My5BbGVydFBvbGljeUID4EECIlQKFUdldEFsZXJ0UG9saWN5UmVxdWVzdBI7CgRuYW1lGAMgASgJQi3gQQL6QScKJW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vQWxlcnRQb2xpY3kioAEKGExpc3RBbGVydFBvbGljaWVzUmVxdWVzdBI7CgRuYW1lGAQgASgJQi3gQQL6QScSJW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vQWxlcnRQb2xpY3kSDgoGZmlsdGVyGAUgASgJEhAKCG9yZGVyX2J5GAYgASgJEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJIoMBChlMaXN0QWxlcnRQb2xpY2llc1Jlc3BvbnNlEjkKDmFsZXJ0X3BvbGljaWVzGAMgAygLMiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWxlcnRQb2xpY3kSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJEhIKCnRvdGFsX3NpemUYBCABKAUiiQEKGFVwZGF0ZUFsZXJ0UG9saWN5UmVxdWVzdBIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sSPAoMYWxlcnRfcG9saWN5GAMgASgLMiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWxlcnRQb2xpY3lCA+BBAiJXChhEZWxldGVBbGVydFBvbGljeVJlcXVlc3QSOwoEbmFtZRgDIAEoCUIt4EEC+kEnCiVtb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL0FsZXJ0UG9saWN5Mp4IChJBbGVydFBvbGljeVNlcnZpY2USqAEKEUxpc3RBbGVydFBvbGljaWVzEi4uZ29vZ2xlLm1vbml0b3JpbmcudjMuTGlzdEFsZXJ0UG9saWNpZXNSZXF1ZXN0Gi8uZ29vZ2xlLm1vbml0b3JpbmcudjMuTGlzdEFsZXJ0UG9saWNpZXNSZXNwb25zZSIy2kEEbmFtZYLT5JMCJRIjL3YzL3tuYW1lPXByb2plY3RzLyp9L2FsZXJ0UG9saWNpZXMSlgEKDkdldEFsZXJ0UG9saWN5EisuZ29vZ2xlLm1vbml0b3JpbmcudjMuR2V0QWxlcnRQb2xpY3lSZXF1ZXN0GiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWxlcnRQb2xpY3kiNNpBBG5hbWWC0+STAicSJS92My97bmFtZT1wcm9qZWN0cy8qL2FsZXJ0UG9saWNpZXMvKn0StQEKEUNyZWF0ZUFsZXJ0UG9saWN5Ei4uZ29vZ2xlLm1vbml0b3JpbmcudjMuQ3JlYXRlQWxlcnRQb2xpY3lSZXF1ZXN0GiEuZ29vZ2xlLm1vbml0b3JpbmcudjMuQWxlcnRQb2xpY3kiTdpBEW5hbWUsYWxlcnRfcG9saWN5gtPkkwIzOgxhbGVydF9wb2xpY3kiIy92My97bmFtZT1wcm9qZWN0cy8qfS9hbGVydFBvbGljaWVzEpEBChFEZWxldGVBbGVydFBvbGljeRIuLmdvb2dsZS5tb25pdG9yaW5nLnYzLkRlbGV0ZUFsZXJ0UG9saWN5UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI02kEEbmFtZYLT5JMCJyolL3YzL3tuYW1lPXByb2plY3RzLyovYWxlcnRQb2xpY2llcy8qfRLLAQoRVXBkYXRlQWxlcnRQb2xpY3kSLi5nb29nbGUubW9uaXRvcmluZy52My5VcGRhdGVBbGVydFBvbGljeVJlcXVlc3QaIS5nb29nbGUubW9uaXRvcmluZy52My5BbGVydFBvbGljeSJj2kEYdXBkYXRlX21hc2ssYWxlcnRfcG9saWN5gtPkkwJCOgxhbGVydF9wb2xpY3kyMi92My97YWxlcnRfcG9saWN5Lm5hbWU9cHJvamVjdHMvKi9hbGVydFBvbGljaWVzLyp9GqkBykEZbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbdJBiQFodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvbW9uaXRvcmluZyxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL21vbml0b3JpbmcucmVhZELMAQoYY29tLmdvb2dsZS5tb25pdG9yaW5nLnYzQhFBbGVydFNlcnZpY2VQcm90b1ABWkFjbG91ZC5nb29nbGUuY29tL2dvL21vbml0b3JpbmcvYXBpdjMvdjIvbW9uaXRvcmluZ3BiO21vbml0b3JpbmdwYqoCGkdvb2dsZS5DbG91ZC5Nb25pdG9yaW5nLlYzygIaR29vZ2xlXENsb3VkXE1vbml0b3JpbmdcVjPqAh1Hb29nbGU6OkNsb3VkOjpNb25pdG9yaW5nOjpWM2IGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_monitoring_v3_alert, file_google_protobuf_empty, file_google_protobuf_field_mask]);

/**
 * The protocol for the `CreateAlertPolicy` request.
 *
 * @generated from message google.monitoring.v3.CreateAlertPolicyRequest
 */
export type CreateAlertPolicyRequest = Message<"google.monitoring.v3.CreateAlertPolicyRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) in which
   * to create the alerting policy. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this field names the parent container in which the alerting
   * policy will be written, not the name of the created policy. |name| must be
   * a host project of a Metrics Scope, otherwise INVALID_ARGUMENT error will
   * return. The alerting policy that is returned will have a name that contains
   * a normalized representation of this name as a prefix but adds a suffix of
   * the form `/alertPolicies/[ALERT_POLICY_ID]`, identifying the policy in the
   * container.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Required. The requested alerting policy. You should omit the `name` field
   * in this policy. The name will be returned in the new policy, including a
   * new `[ALERT_POLICY_ID]` value.
   *
   * @generated from field: google.monitoring.v3.AlertPolicy alert_policy = 2;
   */
  alertPolicy?: AlertPolicy;
};

/**
 * Describes the message google.monitoring.v3.CreateAlertPolicyRequest.
 * Use `create(CreateAlertPolicyRequestSchema)` to create a new message.
 */
export const CreateAlertPolicyRequestSchema: GenMessage<CreateAlertPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 0);

/**
 * The protocol for the `GetAlertPolicy` request.
 *
 * @generated from message google.monitoring.v3.GetAlertPolicyRequest
 */
export type GetAlertPolicyRequest = Message<"google.monitoring.v3.GetAlertPolicyRequest"> & {
  /**
   * Required. The alerting policy to retrieve. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.GetAlertPolicyRequest.
 * Use `create(GetAlertPolicyRequestSchema)` to create a new message.
 */
export const GetAlertPolicyRequestSchema: GenMessage<GetAlertPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 1);

/**
 * The protocol for the `ListAlertPolicies` request.
 *
 * @generated from message google.monitoring.v3.ListAlertPoliciesRequest
 */
export type ListAlertPoliciesRequest = Message<"google.monitoring.v3.ListAlertPoliciesRequest"> & {
  /**
   * Required. The
   * [project](https://cloud.google.com/monitoring/api/v3#project_name) whose
   * alert policies are to be listed. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]
   *
   * Note that this field names the parent container in which the alerting
   * policies to be listed are stored. To retrieve a single alerting policy
   * by name, use the
   * [GetAlertPolicy][google.monitoring.v3.AlertPolicyService.GetAlertPolicy]
   * operation, instead.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * If provided, this field specifies the criteria that must be met by
   * alert policies to be included in the response.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string filter = 5;
   */
  filter: string;

  /**
   * A comma-separated list of fields by which to sort the result. Supports
   * the same set of field references as the `filter` field. Entries can be
   * prefixed with a minus sign to sort by the field in descending order.
   *
   * For more details, see [sorting and
   * filtering](https://cloud.google.com/monitoring/api/v3/sorting-and-filtering).
   *
   * @generated from field: string order_by = 6;
   */
  orderBy: string;

  /**
   * The maximum number of results to return in a single response.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * If this field is not empty then it must contain the `nextPageToken` value
   * returned by a previous call to this method.  Using this field causes the
   * method to return more results from the previous method call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.monitoring.v3.ListAlertPoliciesRequest.
 * Use `create(ListAlertPoliciesRequestSchema)` to create a new message.
 */
export const ListAlertPoliciesRequestSchema: GenMessage<ListAlertPoliciesRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 2);

/**
 * The protocol for the `ListAlertPolicies` response.
 *
 * @generated from message google.monitoring.v3.ListAlertPoliciesResponse
 */
export type ListAlertPoliciesResponse = Message<"google.monitoring.v3.ListAlertPoliciesResponse"> & {
  /**
   * The returned alert policies.
   *
   * @generated from field: repeated google.monitoring.v3.AlertPolicy alert_policies = 3;
   */
  alertPolicies: AlertPolicy[];

  /**
   * If there might be more results than were returned, then this field is set
   * to a non-empty value. To see the additional results,
   * use that value as `page_token` in the next call to this method.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * The total number of alert policies in all pages. This number is only an
   * estimate, and may change in subsequent pages. https://aip.dev/158
   *
   * @generated from field: int32 total_size = 4;
   */
  totalSize: number;
};

/**
 * Describes the message google.monitoring.v3.ListAlertPoliciesResponse.
 * Use `create(ListAlertPoliciesResponseSchema)` to create a new message.
 */
export const ListAlertPoliciesResponseSchema: GenMessage<ListAlertPoliciesResponse> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 3);

/**
 * The protocol for the `UpdateAlertPolicy` request.
 *
 * @generated from message google.monitoring.v3.UpdateAlertPolicyRequest
 */
export type UpdateAlertPolicyRequest = Message<"google.monitoring.v3.UpdateAlertPolicyRequest"> & {
  /**
   * Optional. A list of alerting policy field names. If this field is not
   * empty, each listed field in the existing alerting policy is set to the
   * value of the corresponding field in the supplied policy (`alert_policy`),
   * or to the field's default value if the field is not in the supplied
   * alerting policy.  Fields not listed retain their previous value.
   *
   * Examples of valid field masks include `display_name`, `documentation`,
   * `documentation.content`, `documentation.mime_type`, `user_labels`,
   * `user_label.nameofkey`, `enabled`, `conditions`, `combiner`, etc.
   *
   * If this field is empty, then the supplied alerting policy replaces the
   * existing policy. It is the same as deleting the existing policy and
   * adding the supplied policy, except for the following:
   *
   * +   The new policy will have the same `[ALERT_POLICY_ID]` as the former
   *     policy. This gives you continuity with the former policy in your
   *     notifications and incidents.
   * +   Conditions in the new policy will keep their former `[CONDITION_ID]` if
   *     the supplied condition includes the `name` field with that
   *     `[CONDITION_ID]`. If the supplied condition omits the `name` field,
   *     then a new `[CONDITION_ID]` is created.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Required. The updated alerting policy or the updated values for the
   * fields listed in `update_mask`.
   * If `update_mask` is not empty, any fields in this policy that are
   * not in `update_mask` are ignored.
   *
   * @generated from field: google.monitoring.v3.AlertPolicy alert_policy = 3;
   */
  alertPolicy?: AlertPolicy;
};

/**
 * Describes the message google.monitoring.v3.UpdateAlertPolicyRequest.
 * Use `create(UpdateAlertPolicyRequestSchema)` to create a new message.
 */
export const UpdateAlertPolicyRequestSchema: GenMessage<UpdateAlertPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 4);

/**
 * The protocol for the `DeleteAlertPolicy` request.
 *
 * @generated from message google.monitoring.v3.DeleteAlertPolicyRequest
 */
export type DeleteAlertPolicyRequest = Message<"google.monitoring.v3.DeleteAlertPolicyRequest"> & {
  /**
   * Required. The alerting policy to delete. The format is:
   *
   *     projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID]
   *
   * For more information, see [AlertPolicy][google.monitoring.v3.AlertPolicy].
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.monitoring.v3.DeleteAlertPolicyRequest.
 * Use `create(DeleteAlertPolicyRequestSchema)` to create a new message.
 */
export const DeleteAlertPolicyRequestSchema: GenMessage<DeleteAlertPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_monitoring_v3_alert_service, 5);

/**
 * The AlertPolicyService API is used to manage (list, create, delete,
 * edit) alert policies in Cloud Monitoring. An alerting policy is
 * a description of the conditions under which some aspect of your
 * system is considered to be "unhealthy" and the ways to notify
 * people or services about this state. In addition to using this API, alert
 * policies can also be managed through
 * [Cloud Monitoring](https://cloud.google.com/monitoring/docs/),
 * which can be reached by clicking the "Monitoring" tab in
 * [Cloud console](https://console.cloud.google.com/).
 *
 * @generated from service google.monitoring.v3.AlertPolicyService
 */
export const AlertPolicyService: GenService<{
  /**
   * Lists the existing alerting policies for the workspace.
   *
   * @generated from rpc google.monitoring.v3.AlertPolicyService.ListAlertPolicies
   */
  listAlertPolicies: {
    methodKind: "unary";
    input: typeof ListAlertPoliciesRequestSchema;
    output: typeof ListAlertPoliciesResponseSchema;
  },
  /**
   * Gets a single alerting policy.
   *
   * @generated from rpc google.monitoring.v3.AlertPolicyService.GetAlertPolicy
   */
  getAlertPolicy: {
    methodKind: "unary";
    input: typeof GetAlertPolicyRequestSchema;
    output: typeof AlertPolicySchema;
  },
  /**
   * Creates a new alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   *
   * @generated from rpc google.monitoring.v3.AlertPolicyService.CreateAlertPolicy
   */
  createAlertPolicy: {
    methodKind: "unary";
    input: typeof CreateAlertPolicyRequestSchema;
    output: typeof AlertPolicySchema;
  },
  /**
   * Deletes an alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   *
   * @generated from rpc google.monitoring.v3.AlertPolicyService.DeleteAlertPolicy
   */
  deleteAlertPolicy: {
    methodKind: "unary";
    input: typeof DeleteAlertPolicyRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Updates an alerting policy. You can either replace the entire policy with
   * a new one or replace only certain fields in the current alerting policy by
   * specifying the fields to be updated via `updateMask`. Returns the
   * updated alerting policy.
   *
   * Design your application to single-thread API calls that modify the state of
   * alerting policies in a single project. This includes calls to
   * CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.
   *
   * @generated from rpc google.monitoring.v3.AlertPolicyService.UpdateAlertPolicy
   */
  updateAlertPolicy: {
    methodKind: "unary";
    input: typeof UpdateAlertPolicyRequestSchema;
    output: typeof AlertPolicySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_monitoring_v3_alert_service, 0);

