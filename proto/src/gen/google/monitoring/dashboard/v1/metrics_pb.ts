// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/dashboard/v1/metrics.proto (package google.monitoring.dashboard.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Aggregation, PickTimeSeriesFilter, StatisticalTimeSeriesFilter } from "./common_pb";
import { file_google_monitoring_dashboard_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/dashboard/v1/metrics.proto.
 */
export const file_google_monitoring_dashboard_v1_metrics: GenFile = /*@__PURE__*/
  fileDesc("Cixnb29nbGUvbW9uaXRvcmluZy9kYXNoYm9hcmQvdjEvbWV0cmljcy5wcm90bxIeZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxIsICCg9UaW1lU2VyaWVzUXVlcnkSTgoSdGltZV9zZXJpZXNfZmlsdGVyGAEgASgLMjAuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlRpbWVTZXJpZXNGaWx0ZXJIABJZChh0aW1lX3Nlcmllc19maWx0ZXJfcmF0aW8YAiABKAsyNS5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuVGltZVNlcmllc0ZpbHRlclJhdGlvSAASJAoadGltZV9zZXJpZXNfcXVlcnlfbGFuZ3VhZ2UYAyABKAlIABIaChBwcm9tZXRoZXVzX3F1ZXJ5GAYgASgJSAASFQoNdW5pdF9vdmVycmlkZRgFIAEoCRIhChRvdXRwdXRfZnVsbF9kdXJhdGlvbhgHIAEoCEID4EEBQggKBnNvdXJjZSKKAwoQVGltZVNlcmllc0ZpbHRlchITCgZmaWx0ZXIYASABKAlCA+BBAhJACgthZ2dyZWdhdGlvbhgCIAEoCzIrLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5BZ2dyZWdhdGlvbhJKChVzZWNvbmRhcnlfYWdncmVnYXRpb24YAyABKAsyKy5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuQWdncmVnYXRpb24SVwoXcGlja190aW1lX3Nlcmllc19maWx0ZXIYBCABKAsyNC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuUGlja1RpbWVTZXJpZXNGaWx0ZXJIABJpCh5zdGF0aXN0aWNhbF90aW1lX3Nlcmllc19maWx0ZXIYBSABKAsyOy5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuU3RhdGlzdGljYWxUaW1lU2VyaWVzRmlsdGVyQgIYAUgAQg8KDW91dHB1dF9maWx0ZXIixgQKFVRpbWVTZXJpZXNGaWx0ZXJSYXRpbxJSCgludW1lcmF0b3IYASABKAsyPy5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuVGltZVNlcmllc0ZpbHRlclJhdGlvLlJhdGlvUGFydBJUCgtkZW5vbWluYXRvchgCIAEoCzI/Lmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5UaW1lU2VyaWVzRmlsdGVyUmF0aW8uUmF0aW9QYXJ0EkoKFXNlY29uZGFyeV9hZ2dyZWdhdGlvbhgDIAEoCzIrLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5BZ2dyZWdhdGlvbhJXChdwaWNrX3RpbWVfc2VyaWVzX2ZpbHRlchgEIAEoCzI0Lmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5QaWNrVGltZVNlcmllc0ZpbHRlckgAEmkKHnN0YXRpc3RpY2FsX3RpbWVfc2VyaWVzX2ZpbHRlchgFIAEoCzI7Lmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5TdGF0aXN0aWNhbFRpbWVTZXJpZXNGaWx0ZXJCAhgBSAAaYgoJUmF0aW9QYXJ0EhMKBmZpbHRlchgBIAEoCUID4EECEkAKC2FnZ3JlZ2F0aW9uGAIgASgLMisuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLkFnZ3JlZ2F0aW9uQg8KDW91dHB1dF9maWx0ZXIiqgMKCVRocmVzaG9sZBINCgVsYWJlbBgBIAEoCRINCgV2YWx1ZRgCIAEoARI+CgVjb2xvchgDIAEoDjIvLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5UaHJlc2hvbGQuQ29sb3ISRgoJZGlyZWN0aW9uGAQgASgOMjMuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlRocmVzaG9sZC5EaXJlY3Rpb24SSQoLdGFyZ2V0X2F4aXMYBSABKA4yNC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuVGhyZXNob2xkLlRhcmdldEF4aXMiMwoFQ29sb3ISFQoRQ09MT1JfVU5TUEVDSUZJRUQQABIKCgZZRUxMT1cQBBIHCgNSRUQQBiI8CglEaXJlY3Rpb24SGQoVRElSRUNUSU9OX1VOU1BFQ0lGSUVEEAASCQoFQUJPVkUQARIJCgVCRUxPVxACIjkKClRhcmdldEF4aXMSGwoXVEFSR0VUX0FYSVNfVU5TUEVDSUZJRUQQABIGCgJZMRABEgYKAlkyEAIqUQoOU3BhcmtDaGFydFR5cGUSIAocU1BBUktfQ0hBUlRfVFlQRV9VTlNQRUNJRklFRBAAEg4KClNQQVJLX0xJTkUQARINCglTUEFSS19CQVIQAkL1AQoiY29tLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MUIMTWV0cmljc1Byb3RvUAFaRmNsb3VkLmdvb2dsZS5jb20vZ28vbW9uaXRvcmluZy9kYXNoYm9hcmQvYXBpdjEvZGFzaGJvYXJkcGI7ZGFzaGJvYXJkcGKqAiRHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5EYXNoYm9hcmQuVjHKAiRHb29nbGVcQ2xvdWRcTW9uaXRvcmluZ1xEYXNoYm9hcmRcVjHqAihHb29nbGU6OkNsb3VkOjpNb25pdG9yaW5nOjpEYXNoYm9hcmQ6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_monitoring_dashboard_v1_common]);

/**
 * TimeSeriesQuery collects the set of supported methods for querying time
 * series data from the Stackdriver metrics API.
 *
 * @generated from message google.monitoring.dashboard.v1.TimeSeriesQuery
 */
export type TimeSeriesQuery = Message<"google.monitoring.dashboard.v1.TimeSeriesQuery"> & {
  /**
   * Parameters needed to obtain data for the chart.
   *
   * @generated from oneof google.monitoring.dashboard.v1.TimeSeriesQuery.source
   */
  source: {
    /**
     * Filter parameters to fetch time series.
     *
     * @generated from field: google.monitoring.dashboard.v1.TimeSeriesFilter time_series_filter = 1;
     */
    value: TimeSeriesFilter;
    case: "timeSeriesFilter";
  } | {
    /**
     * Parameters to fetch a ratio between two time series filters.
     *
     * @generated from field: google.monitoring.dashboard.v1.TimeSeriesFilterRatio time_series_filter_ratio = 2;
     */
    value: TimeSeriesFilterRatio;
    case: "timeSeriesFilterRatio";
  } | {
    /**
     * A query used to fetch time series with MQL.
     *
     * @generated from field: string time_series_query_language = 3;
     */
    value: string;
    case: "timeSeriesQueryLanguage";
  } | {
    /**
     * A query used to fetch time series with PromQL.
     *
     * @generated from field: string prometheus_query = 6;
     */
    value: string;
    case: "prometheusQuery";
  } | { case: undefined; value?: undefined };

  /**
   * The unit of data contained in fetched time series. If non-empty, this
   * unit will override any unit that accompanies fetched data. The format is
   * the same as the
   * [`unit`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors)
   * field in `MetricDescriptor`.
   *
   * @generated from field: string unit_override = 5;
   */
  unitOverride: string;

  /**
   * Optional. If set, Cloud Monitoring will treat the full query duration as
   * the alignment period so that there will be only 1 output value.
   *
   * *Note: This could override the configured alignment period except for
   * the cases where a series of data points are expected, like
   *   - XyChart
   *   - Scorecard's spark chart
   *
   * @generated from field: bool output_full_duration = 7;
   */
  outputFullDuration: boolean;
};

/**
 * Describes the message google.monitoring.dashboard.v1.TimeSeriesQuery.
 * Use `create(TimeSeriesQuerySchema)` to create a new message.
 */
export const TimeSeriesQuerySchema: GenMessage<TimeSeriesQuery> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_metrics, 0);

/**
 * A filter that defines a subset of time series data that is displayed in a
 * widget. Time series data is fetched using the
 * [`ListTimeSeries`](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list)
 * method.
 *
 * @generated from message google.monitoring.dashboard.v1.TimeSeriesFilter
 */
export type TimeSeriesFilter = Message<"google.monitoring.dashboard.v1.TimeSeriesFilter"> & {
  /**
   * Required. The [monitoring
   * filter](https://cloud.google.com/monitoring/api/v3/filters) that identifies
   * the metric types, resources, and projects to query.
   *
   * @generated from field: string filter = 1;
   */
  filter: string;

  /**
   * By default, the raw time series data is returned.
   * Use this field to combine multiple time series for different views of the
   * data.
   *
   * @generated from field: google.monitoring.dashboard.v1.Aggregation aggregation = 2;
   */
  aggregation?: Aggregation;

  /**
   * Apply a second aggregation after `aggregation` is applied.
   *
   * @generated from field: google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
   */
  secondaryAggregation?: Aggregation;

  /**
   * Selects an optional time series filter.
   *
   * @generated from oneof google.monitoring.dashboard.v1.TimeSeriesFilter.output_filter
   */
  outputFilter: {
    /**
     * Ranking based time series filter.
     *
     * @generated from field: google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
     */
    value: PickTimeSeriesFilter;
    case: "pickTimeSeriesFilter";
  } | {
    /**
     * Statistics based time series filter.
     * Note: This field is deprecated and completely ignored by the API.
     *
     * @generated from field: google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
     * @deprecated
     */
    value: StatisticalTimeSeriesFilter;
    case: "statisticalTimeSeriesFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.monitoring.dashboard.v1.TimeSeriesFilter.
 * Use `create(TimeSeriesFilterSchema)` to create a new message.
 */
export const TimeSeriesFilterSchema: GenMessage<TimeSeriesFilter> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_metrics, 1);

/**
 * A pair of time series filters that define a ratio computation. The output
 * time series is the pair-wise division of each aligned element from the
 * numerator and denominator time series.
 *
 * @generated from message google.monitoring.dashboard.v1.TimeSeriesFilterRatio
 */
export type TimeSeriesFilterRatio = Message<"google.monitoring.dashboard.v1.TimeSeriesFilterRatio"> & {
  /**
   * The numerator of the ratio.
   *
   * @generated from field: google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart numerator = 1;
   */
  numerator?: TimeSeriesFilterRatio_RatioPart;

  /**
   * The denominator of the ratio.
   *
   * @generated from field: google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart denominator = 2;
   */
  denominator?: TimeSeriesFilterRatio_RatioPart;

  /**
   * Apply a second aggregation after the ratio is computed.
   *
   * @generated from field: google.monitoring.dashboard.v1.Aggregation secondary_aggregation = 3;
   */
  secondaryAggregation?: Aggregation;

  /**
   * Selects an optional filter that is applied to the time series after
   * computing the ratio.
   *
   * @generated from oneof google.monitoring.dashboard.v1.TimeSeriesFilterRatio.output_filter
   */
  outputFilter: {
    /**
     * Ranking based time series filter.
     *
     * @generated from field: google.monitoring.dashboard.v1.PickTimeSeriesFilter pick_time_series_filter = 4;
     */
    value: PickTimeSeriesFilter;
    case: "pickTimeSeriesFilter";
  } | {
    /**
     * Statistics based time series filter.
     * Note: This field is deprecated and completely ignored by the API.
     *
     * @generated from field: google.monitoring.dashboard.v1.StatisticalTimeSeriesFilter statistical_time_series_filter = 5 [deprecated = true];
     * @deprecated
     */
    value: StatisticalTimeSeriesFilter;
    case: "statisticalTimeSeriesFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.monitoring.dashboard.v1.TimeSeriesFilterRatio.
 * Use `create(TimeSeriesFilterRatioSchema)` to create a new message.
 */
export const TimeSeriesFilterRatioSchema: GenMessage<TimeSeriesFilterRatio> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_metrics, 2);

/**
 * Describes a query to build the numerator or denominator of a
 * TimeSeriesFilterRatio.
 *
 * @generated from message google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart
 */
export type TimeSeriesFilterRatio_RatioPart = Message<"google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart"> & {
  /**
   * Required. The [monitoring
   * filter](https://cloud.google.com/monitoring/api/v3/filters) that
   * identifies the metric types, resources, and projects to query.
   *
   * @generated from field: string filter = 1;
   */
  filter: string;

  /**
   * By default, the raw time series data is returned.
   * Use this field to combine multiple time series for different views of the
   * data.
   *
   * @generated from field: google.monitoring.dashboard.v1.Aggregation aggregation = 2;
   */
  aggregation?: Aggregation;
};

/**
 * Describes the message google.monitoring.dashboard.v1.TimeSeriesFilterRatio.RatioPart.
 * Use `create(TimeSeriesFilterRatio_RatioPartSchema)` to create a new message.
 */
export const TimeSeriesFilterRatio_RatioPartSchema: GenMessage<TimeSeriesFilterRatio_RatioPart> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_metrics, 2, 0);

/**
 * Defines a threshold for categorizing time series values.
 *
 * @generated from message google.monitoring.dashboard.v1.Threshold
 */
export type Threshold = Message<"google.monitoring.dashboard.v1.Threshold"> & {
  /**
   * A label for the threshold.
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * The value of the threshold. The value should be defined in the native scale
   * of the metric.
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * The state color for this threshold. Color is not allowed in a XyChart.
   *
   * @generated from field: google.monitoring.dashboard.v1.Threshold.Color color = 3;
   */
  color: Threshold_Color;

  /**
   * The direction for the current threshold. Direction is not allowed in a
   * XyChart.
   *
   * @generated from field: google.monitoring.dashboard.v1.Threshold.Direction direction = 4;
   */
  direction: Threshold_Direction;

  /**
   * The target axis to use for plotting the threshold. Target axis is not
   * allowed in a Scorecard.
   *
   * @generated from field: google.monitoring.dashboard.v1.Threshold.TargetAxis target_axis = 5;
   */
  targetAxis: Threshold_TargetAxis;
};

/**
 * Describes the message google.monitoring.dashboard.v1.Threshold.
 * Use `create(ThresholdSchema)` to create a new message.
 */
export const ThresholdSchema: GenMessage<Threshold> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_metrics, 3);

/**
 * The color suggests an interpretation to the viewer when actual values cross
 * the threshold. Comments on each color provide UX guidance on how users can
 * be expected to interpret a given state color.
 *
 * @generated from enum google.monitoring.dashboard.v1.Threshold.Color
 */
export enum Threshold_Color {
  /**
   * Color is unspecified. Not allowed in well-formed requests.
   *
   * @generated from enum value: COLOR_UNSPECIFIED = 0;
   */
  COLOR_UNSPECIFIED = 0,

  /**
   * Crossing the threshold is "concerning" behavior.
   *
   * @generated from enum value: YELLOW = 4;
   */
  YELLOW = 4,

  /**
   * Crossing the threshold is "emergency" behavior.
   *
   * @generated from enum value: RED = 6;
   */
  RED = 6,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.Threshold.Color.
 */
export const Threshold_ColorSchema: GenEnum<Threshold_Color> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_metrics, 3, 0);

/**
 * Whether the threshold is considered crossed by an actual value above or
 * below its threshold value.
 *
 * @generated from enum google.monitoring.dashboard.v1.Threshold.Direction
 */
export enum Threshold_Direction {
  /**
   * Not allowed in well-formed requests.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * The threshold will be considered crossed if the actual value is above
   * the threshold value.
   *
   * @generated from enum value: ABOVE = 1;
   */
  ABOVE = 1,

  /**
   * The threshold will be considered crossed if the actual value is below
   * the threshold value.
   *
   * @generated from enum value: BELOW = 2;
   */
  BELOW = 2,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.Threshold.Direction.
 */
export const Threshold_DirectionSchema: GenEnum<Threshold_Direction> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_metrics, 3, 1);

/**
 * An axis identifier.
 *
 * @generated from enum google.monitoring.dashboard.v1.Threshold.TargetAxis
 */
export enum Threshold_TargetAxis {
  /**
   * The target axis was not specified. Defaults to Y1.
   *
   * @generated from enum value: TARGET_AXIS_UNSPECIFIED = 0;
   */
  TARGET_AXIS_UNSPECIFIED = 0,

  /**
   * The y_axis (the right axis of chart).
   *
   * @generated from enum value: Y1 = 1;
   */
  Y1 = 1,

  /**
   * The y2_axis (the left axis of chart).
   *
   * @generated from enum value: Y2 = 2;
   */
  Y2 = 2,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.Threshold.TargetAxis.
 */
export const Threshold_TargetAxisSchema: GenEnum<Threshold_TargetAxis> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_metrics, 3, 2);

/**
 * Defines the possible types of spark chart supported by the `Scorecard`.
 *
 * @generated from enum google.monitoring.dashboard.v1.SparkChartType
 */
export enum SparkChartType {
  /**
   * Not allowed in well-formed requests.
   *
   * @generated from enum value: SPARK_CHART_TYPE_UNSPECIFIED = 0;
   */
  SPARK_CHART_TYPE_UNSPECIFIED = 0,

  /**
   * The sparkline will be rendered as a small line chart.
   *
   * @generated from enum value: SPARK_LINE = 1;
   */
  SPARK_LINE = 1,

  /**
   * The sparkbar will be rendered as a small bar chart.
   *
   * @generated from enum value: SPARK_BAR = 2;
   */
  SPARK_BAR = 2,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.SparkChartType.
 */
export const SparkChartTypeSchema: GenEnum<SparkChartType> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_metrics, 0);

