// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/dashboard/v1/xychart.proto (package google.monitoring.dashboard.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Threshold, TimeSeriesQuery } from "./metrics_pb";
import { file_google_monitoring_dashboard_v1_metrics } from "./metrics_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/dashboard/v1/xychart.proto.
 */
export const file_google_monitoring_dashboard_v1_xychart: GenFile = /*@__PURE__*/
  fileDesc("Cixnb29nbGUvbW9uaXRvcmluZy9kYXNoYm9hcmQvdjEveHljaGFydC5wcm90bxIeZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxIs0ICgdYeUNoYXJ0EkcKCWRhdGFfc2V0cxgBIAMoCzIvLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5YeUNoYXJ0LkRhdGFTZXRCA+BBAhI1ChJ0aW1lc2hpZnRfZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SPQoKdGhyZXNob2xkcxgFIAMoCzIpLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5UaHJlc2hvbGQSPAoGeF9heGlzGAYgASgLMiwuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlh5Q2hhcnQuQXhpcxI8CgZ5X2F4aXMYByABKAsyLC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuWHlDaGFydC5BeGlzEj0KB3kyX2F4aXMYCSABKAsyLC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuWHlDaGFydC5BeGlzEkMKDWNoYXJ0X29wdGlvbnMYCCABKAsyLC5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuQ2hhcnRPcHRpb25zGvADCgdEYXRhU2V0Ek8KEXRpbWVfc2VyaWVzX3F1ZXJ5GAEgASgLMi8uZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLlRpbWVTZXJpZXNRdWVyeUID4EECEksKCXBsb3RfdHlwZRgCIAEoDjI4Lmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5YeUNoYXJ0LkRhdGFTZXQuUGxvdFR5cGUSFwoPbGVnZW5kX3RlbXBsYXRlGAMgASgJEjwKFG1pbl9hbGlnbm1lbnRfcGVyaW9kGAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQESVAoLdGFyZ2V0X2F4aXMYBSABKA4yOi5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuWHlDaGFydC5EYXRhU2V0LlRhcmdldEF4aXNCA+BBASJfCghQbG90VHlwZRIZChVQTE9UX1RZUEVfVU5TUEVDSUZJRUQQABIICgRMSU5FEAESEAoMU1RBQ0tFRF9BUkVBEAISDwoLU1RBQ0tFRF9CQVIQAxILCgdIRUFUTUFQEAQiOQoKVGFyZ2V0QXhpcxIbChdUQVJHRVRfQVhJU19VTlNQRUNJRklFRBAAEgYKAlkxEAESBgoCWTIQAhqPAQoEQXhpcxINCgVsYWJlbBgBIAEoCRJBCgVzY2FsZRgCIAEoDjIyLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5YeUNoYXJ0LkF4aXMuU2NhbGUiNQoFU2NhbGUSFQoRU0NBTEVfVU5TUEVDSUZJRUQQABIKCgZMSU5FQVIQARIJCgVMT0cxMBACIo4BCgxDaGFydE9wdGlvbnMSPwoEbW9kZRgBIAEoDjIxLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5DaGFydE9wdGlvbnMuTW9kZSI9CgRNb2RlEhQKEE1PREVfVU5TUEVDSUZJRUQQABIJCgVDT0xPUhABEgkKBVhfUkFZEAISCQoFU1RBVFMQA0L1AQoiY29tLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MUIMWHlDaGFydFByb3RvUAFaRmNsb3VkLmdvb2dsZS5jb20vZ28vbW9uaXRvcmluZy9kYXNoYm9hcmQvYXBpdjEvZGFzaGJvYXJkcGI7ZGFzaGJvYXJkcGKqAiRHb29nbGUuQ2xvdWQuTW9uaXRvcmluZy5EYXNoYm9hcmQuVjHKAiRHb29nbGVcQ2xvdWRcTW9uaXRvcmluZ1xEYXNoYm9hcmRcVjHqAihHb29nbGU6OkNsb3VkOjpNb25pdG9yaW5nOjpEYXNoYm9hcmQ6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_monitoring_dashboard_v1_metrics, file_google_protobuf_duration]);

/**
 * A chart that displays data on a 2D (X and Y axes) plane.
 *
 * @generated from message google.monitoring.dashboard.v1.XyChart
 */
export type XyChart = Message<"google.monitoring.dashboard.v1.XyChart"> & {
  /**
   * Required. The data displayed in this chart.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.XyChart.DataSet data_sets = 1;
   */
  dataSets: XyChart_DataSet[];

  /**
   * The duration used to display a comparison chart. A comparison chart
   * simultaneously shows values from two similar-length time periods
   * (e.g., week-over-week metrics).
   * The duration must be positive, and it can only be applied to charts with
   * data sets of LINE plot type.
   *
   * @generated from field: google.protobuf.Duration timeshift_duration = 4;
   */
  timeshiftDuration?: Duration;

  /**
   * Threshold lines drawn horizontally across the chart.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.Threshold thresholds = 5;
   */
  thresholds: Threshold[];

  /**
   * The properties applied to the x-axis.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.Axis x_axis = 6;
   */
  xAxis?: XyChart_Axis;

  /**
   * The properties applied to the y-axis.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.Axis y_axis = 7;
   */
  yAxis?: XyChart_Axis;

  /**
   * The properties applied to the y2-axis.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.Axis y2_axis = 9;
   */
  y2Axis?: XyChart_Axis;

  /**
   * Display options for the chart.
   *
   * @generated from field: google.monitoring.dashboard.v1.ChartOptions chart_options = 8;
   */
  chartOptions?: ChartOptions;
};

/**
 * Describes the message google.monitoring.dashboard.v1.XyChart.
 * Use `create(XyChartSchema)` to create a new message.
 */
export const XyChartSchema: GenMessage<XyChart> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_xychart, 0);

/**
 * Groups a time series query definition with charting options.
 *
 * @generated from message google.monitoring.dashboard.v1.XyChart.DataSet
 */
export type XyChart_DataSet = Message<"google.monitoring.dashboard.v1.XyChart.DataSet"> & {
  /**
   * Required. Fields for querying time series data from the
   * Stackdriver metrics API.
   *
   * @generated from field: google.monitoring.dashboard.v1.TimeSeriesQuery time_series_query = 1;
   */
  timeSeriesQuery?: TimeSeriesQuery;

  /**
   * How this data should be plotted on the chart.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.DataSet.PlotType plot_type = 2;
   */
  plotType: XyChart_DataSet_PlotType;

  /**
   * A template string for naming `TimeSeries` in the resulting data set.
   * This should be a string with interpolations of the form `${label_name}`,
   * which will resolve to the label's value.
   *
   * @generated from field: string legend_template = 3;
   */
  legendTemplate: string;

  /**
   * Optional. The lower bound on data point frequency for this data set,
   * implemented by specifying the minimum alignment period to use in a time
   * series query For example, if the data is published once every 10 minutes,
   * the `min_alignment_period` should be at least 10 minutes. It would not
   * make sense to fetch and align data at one minute intervals.
   *
   * @generated from field: google.protobuf.Duration min_alignment_period = 4;
   */
  minAlignmentPeriod?: Duration;

  /**
   * Optional. The target axis to use for plotting the metric.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.DataSet.TargetAxis target_axis = 5;
   */
  targetAxis: XyChart_DataSet_TargetAxis;
};

/**
 * Describes the message google.monitoring.dashboard.v1.XyChart.DataSet.
 * Use `create(XyChart_DataSetSchema)` to create a new message.
 */
export const XyChart_DataSetSchema: GenMessage<XyChart_DataSet> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_xychart, 0, 0);

/**
 * The types of plotting strategies for data sets.
 *
 * @generated from enum google.monitoring.dashboard.v1.XyChart.DataSet.PlotType
 */
export enum XyChart_DataSet_PlotType {
  /**
   * Plot type is unspecified. The view will default to `LINE`.
   *
   * @generated from enum value: PLOT_TYPE_UNSPECIFIED = 0;
   */
  PLOT_TYPE_UNSPECIFIED = 0,

  /**
   * The data is plotted as a set of lines (one line per series).
   *
   * @generated from enum value: LINE = 1;
   */
  LINE = 1,

  /**
   * The data is plotted as a set of filled areas (one area per series),
   * with the areas stacked vertically (the base of each area is the top of
   * its predecessor, and the base of the first area is the x-axis). Since
   * the areas do not overlap, each is filled with a different opaque color.
   *
   * @generated from enum value: STACKED_AREA = 2;
   */
  STACKED_AREA = 2,

  /**
   * The data is plotted as a set of rectangular boxes (one box per series),
   * with the boxes stacked vertically (the base of each box is the top of
   * its predecessor, and the base of the first box is the x-axis). Since
   * the boxes do not overlap, each is filled with a different opaque color.
   *
   * @generated from enum value: STACKED_BAR = 3;
   */
  STACKED_BAR = 3,

  /**
   * The data is plotted as a heatmap. The series being plotted must have a
   * `DISTRIBUTION` value type. The value of each bucket in the distribution
   * is displayed as a color. This type is not currently available in the
   * Stackdriver Monitoring application.
   *
   * @generated from enum value: HEATMAP = 4;
   */
  HEATMAP = 4,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.XyChart.DataSet.PlotType.
 */
export const XyChart_DataSet_PlotTypeSchema: GenEnum<XyChart_DataSet_PlotType> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_xychart, 0, 0, 0);

/**
 * An axis identifier.
 *
 * @generated from enum google.monitoring.dashboard.v1.XyChart.DataSet.TargetAxis
 */
export enum XyChart_DataSet_TargetAxis {
  /**
   * The target axis was not specified. Defaults to Y1.
   *
   * @generated from enum value: TARGET_AXIS_UNSPECIFIED = 0;
   */
  TARGET_AXIS_UNSPECIFIED = 0,

  /**
   * The y_axis (the right axis of chart).
   *
   * @generated from enum value: Y1 = 1;
   */
  Y1 = 1,

  /**
   * The y2_axis (the left axis of chart).
   *
   * @generated from enum value: Y2 = 2;
   */
  Y2 = 2,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.XyChart.DataSet.TargetAxis.
 */
export const XyChart_DataSet_TargetAxisSchema: GenEnum<XyChart_DataSet_TargetAxis> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_xychart, 0, 0, 1);

/**
 * A chart axis.
 *
 * @generated from message google.monitoring.dashboard.v1.XyChart.Axis
 */
export type XyChart_Axis = Message<"google.monitoring.dashboard.v1.XyChart.Axis"> & {
  /**
   * The label of the axis.
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * The axis scale. By default, a linear scale is used.
   *
   * @generated from field: google.monitoring.dashboard.v1.XyChart.Axis.Scale scale = 2;
   */
  scale: XyChart_Axis_Scale;
};

/**
 * Describes the message google.monitoring.dashboard.v1.XyChart.Axis.
 * Use `create(XyChart_AxisSchema)` to create a new message.
 */
export const XyChart_AxisSchema: GenMessage<XyChart_Axis> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_xychart, 0, 1);

/**
 * Types of scales used in axes.
 *
 * @generated from enum google.monitoring.dashboard.v1.XyChart.Axis.Scale
 */
export enum XyChart_Axis_Scale {
  /**
   * Scale is unspecified. The view will default to `LINEAR`.
   *
   * @generated from enum value: SCALE_UNSPECIFIED = 0;
   */
  SCALE_UNSPECIFIED = 0,

  /**
   * Linear scale.
   *
   * @generated from enum value: LINEAR = 1;
   */
  LINEAR = 1,

  /**
   * Logarithmic scale (base 10).
   *
   * @generated from enum value: LOG10 = 2;
   */
  LOG10 = 2,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.XyChart.Axis.Scale.
 */
export const XyChart_Axis_ScaleSchema: GenEnum<XyChart_Axis_Scale> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_xychart, 0, 1, 0);

/**
 * Options to control visual rendering of a chart.
 *
 * @generated from message google.monitoring.dashboard.v1.ChartOptions
 */
export type ChartOptions = Message<"google.monitoring.dashboard.v1.ChartOptions"> & {
  /**
   * The chart mode.
   *
   * @generated from field: google.monitoring.dashboard.v1.ChartOptions.Mode mode = 1;
   */
  mode: ChartOptions_Mode;
};

/**
 * Describes the message google.monitoring.dashboard.v1.ChartOptions.
 * Use `create(ChartOptionsSchema)` to create a new message.
 */
export const ChartOptionsSchema: GenMessage<ChartOptions> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_xychart, 1);

/**
 * Chart mode options.
 *
 * @generated from enum google.monitoring.dashboard.v1.ChartOptions.Mode
 */
export enum ChartOptions_Mode {
  /**
   * Mode is unspecified. The view will default to `COLOR`.
   *
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  MODE_UNSPECIFIED = 0,

  /**
   * The chart distinguishes data series using different color. Line
   * colors may get reused when there are many lines in the chart.
   *
   * @generated from enum value: COLOR = 1;
   */
  COLOR = 1,

  /**
   * The chart uses the Stackdriver x-ray mode, in which each
   * data set is plotted using the same semi-transparent color.
   *
   * @generated from enum value: X_RAY = 2;
   */
  X_RAY = 2,

  /**
   * The chart displays statistics such as average, median, 95th percentile,
   * and more.
   *
   * @generated from enum value: STATS = 3;
   */
  STATS = 3,
}

/**
 * Describes the enum google.monitoring.dashboard.v1.ChartOptions.Mode.
 */
export const ChartOptions_ModeSchema: GenEnum<ChartOptions_Mode> = /*@__PURE__*/
  enumDesc(file_google_monitoring_dashboard_v1_xychart, 1, 0);

