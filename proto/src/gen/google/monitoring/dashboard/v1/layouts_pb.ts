// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/monitoring/dashboard/v1/layouts.proto (package google.monitoring.dashboard.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Widget } from "./widget_pb";
import { file_google_monitoring_dashboard_v1_widget } from "./widget_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/monitoring/dashboard/v1/layouts.proto.
 */
export const file_google_monitoring_dashboard_v1_layouts: GenFile = /*@__PURE__*/
  fileDesc("Cixnb29nbGUvbW9uaXRvcmluZy9kYXNoYm9hcmQvdjEvbGF5b3V0cy5wcm90bxIeZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxIlYKCkdyaWRMYXlvdXQSDwoHY29sdW1ucxgBIAEoAxI3Cgd3aWRnZXRzGAIgAygLMiYuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLldpZGdldCLeAQoMTW9zYWljTGF5b3V0Eg8KB2NvbHVtbnMYASABKAUSQAoFdGlsZXMYAyADKAsyMS5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuTW9zYWljTGF5b3V0LlRpbGUaewoEVGlsZRINCgV4X3BvcxgBIAEoBRINCgV5X3BvcxgCIAEoBRINCgV3aWR0aBgDIAEoBRIOCgZoZWlnaHQYBCABKAUSNgoGd2lkZ2V0GAUgASgLMiYuZ29vZ2xlLm1vbml0b3JpbmcuZGFzaGJvYXJkLnYxLldpZGdldCKYAQoJUm93TGF5b3V0EjsKBHJvd3MYASADKAsyLS5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuUm93TGF5b3V0LlJvdxpOCgNSb3cSDgoGd2VpZ2h0GAEgASgDEjcKB3dpZGdldHMYAiADKAsyJi5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjEuV2lkZ2V0IqcBCgxDb2x1bW5MYXlvdXQSRAoHY29sdW1ucxgBIAMoCzIzLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5Db2x1bW5MYXlvdXQuQ29sdW1uGlEKBkNvbHVtbhIOCgZ3ZWlnaHQYASABKAMSNwoHd2lkZ2V0cxgCIAMoCzImLmdvb2dsZS5tb25pdG9yaW5nLmRhc2hib2FyZC52MS5XaWRnZXRC9QEKImNvbS5nb29nbGUubW9uaXRvcmluZy5kYXNoYm9hcmQudjFCDExheW91dHNQcm90b1ABWkZjbG91ZC5nb29nbGUuY29tL2dvL21vbml0b3JpbmcvZGFzaGJvYXJkL2FwaXYxL2Rhc2hib2FyZHBiO2Rhc2hib2FyZHBiqgIkR29vZ2xlLkNsb3VkLk1vbml0b3JpbmcuRGFzaGJvYXJkLlYxygIkR29vZ2xlXENsb3VkXE1vbml0b3JpbmdcRGFzaGJvYXJkXFYx6gIoR29vZ2xlOjpDbG91ZDo6TW9uaXRvcmluZzo6RGFzaGJvYXJkOjpWMWIGcHJvdG8z", [file_google_monitoring_dashboard_v1_widget]);

/**
 * A basic layout divides the available space into vertical columns of equal
 * width and arranges a list of widgets using a row-first strategy.
 *
 * @generated from message google.monitoring.dashboard.v1.GridLayout
 */
export type GridLayout = Message<"google.monitoring.dashboard.v1.GridLayout"> & {
  /**
   * The number of columns into which the view's width is divided. If omitted
   * or set to zero, a system default will be used while rendering.
   *
   * @generated from field: int64 columns = 1;
   */
  columns: bigint;

  /**
   * The informational elements that are arranged into the columns row-first.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.Widget widgets = 2;
   */
  widgets: Widget[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.GridLayout.
 * Use `create(GridLayoutSchema)` to create a new message.
 */
export const GridLayoutSchema: GenMessage<GridLayout> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 0);

/**
 * A mosaic layout divides the available space into a grid of blocks, and
 * overlays the grid with tiles. Unlike `GridLayout`, tiles may span multiple
 * grid blocks and can be placed at arbitrary locations in the grid.
 *
 * @generated from message google.monitoring.dashboard.v1.MosaicLayout
 */
export type MosaicLayout = Message<"google.monitoring.dashboard.v1.MosaicLayout"> & {
  /**
   * The number of columns in the mosaic grid. The number of columns must be
   * between 1 and 12, inclusive.
   *
   * @generated from field: int32 columns = 1;
   */
  columns: number;

  /**
   * The tiles to display.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.MosaicLayout.Tile tiles = 3;
   */
  tiles: MosaicLayout_Tile[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.MosaicLayout.
 * Use `create(MosaicLayoutSchema)` to create a new message.
 */
export const MosaicLayoutSchema: GenMessage<MosaicLayout> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 1);

/**
 * A single tile in the mosaic. The placement and size of the tile are
 * configurable.
 *
 * @generated from message google.monitoring.dashboard.v1.MosaicLayout.Tile
 */
export type MosaicLayout_Tile = Message<"google.monitoring.dashboard.v1.MosaicLayout.Tile"> & {
  /**
   * The zero-indexed position of the tile in grid blocks relative to the
   * left edge of the grid. Tiles must be contained within the specified
   * number of columns. `x_pos` cannot be negative.
   *
   * @generated from field: int32 x_pos = 1;
   */
  xPos: number;

  /**
   * The zero-indexed position of the tile in grid blocks relative to the
   * top edge of the grid. `y_pos` cannot be negative.
   *
   * @generated from field: int32 y_pos = 2;
   */
  yPos: number;

  /**
   * The width of the tile, measured in grid blocks. Tiles must have a
   * minimum width of 1.
   *
   * @generated from field: int32 width = 3;
   */
  width: number;

  /**
   * The height of the tile, measured in grid blocks. Tiles must have a
   * minimum height of 1.
   *
   * @generated from field: int32 height = 4;
   */
  height: number;

  /**
   * The informational widget contained in the tile. For example an `XyChart`.
   *
   * @generated from field: google.monitoring.dashboard.v1.Widget widget = 5;
   */
  widget?: Widget;
};

/**
 * Describes the message google.monitoring.dashboard.v1.MosaicLayout.Tile.
 * Use `create(MosaicLayout_TileSchema)` to create a new message.
 */
export const MosaicLayout_TileSchema: GenMessage<MosaicLayout_Tile> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 1, 0);

/**
 * A simplified layout that divides the available space into rows
 * and arranges a set of widgets horizontally in each row.
 *
 * @generated from message google.monitoring.dashboard.v1.RowLayout
 */
export type RowLayout = Message<"google.monitoring.dashboard.v1.RowLayout"> & {
  /**
   * The rows of content to display.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.RowLayout.Row rows = 1;
   */
  rows: RowLayout_Row[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.RowLayout.
 * Use `create(RowLayoutSchema)` to create a new message.
 */
export const RowLayoutSchema: GenMessage<RowLayout> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 2);

/**
 * Defines the layout properties and content for a row.
 *
 * @generated from message google.monitoring.dashboard.v1.RowLayout.Row
 */
export type RowLayout_Row = Message<"google.monitoring.dashboard.v1.RowLayout.Row"> & {
  /**
   * The relative weight of this row. The row weight is used to adjust the
   * height of rows on the screen (relative to peers). Greater the weight,
   * greater the height of the row on the screen. If omitted, a value
   * of 1 is used while rendering.
   *
   * @generated from field: int64 weight = 1;
   */
  weight: bigint;

  /**
   * The display widgets arranged horizontally in this row.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.Widget widgets = 2;
   */
  widgets: Widget[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.RowLayout.Row.
 * Use `create(RowLayout_RowSchema)` to create a new message.
 */
export const RowLayout_RowSchema: GenMessage<RowLayout_Row> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 2, 0);

/**
 * A simplified layout that divides the available space into vertical columns
 * and arranges a set of widgets vertically in each column.
 *
 * @generated from message google.monitoring.dashboard.v1.ColumnLayout
 */
export type ColumnLayout = Message<"google.monitoring.dashboard.v1.ColumnLayout"> & {
  /**
   * The columns of content to display.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.ColumnLayout.Column columns = 1;
   */
  columns: ColumnLayout_Column[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.ColumnLayout.
 * Use `create(ColumnLayoutSchema)` to create a new message.
 */
export const ColumnLayoutSchema: GenMessage<ColumnLayout> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 3);

/**
 * Defines the layout properties and content for a column.
 *
 * @generated from message google.monitoring.dashboard.v1.ColumnLayout.Column
 */
export type ColumnLayout_Column = Message<"google.monitoring.dashboard.v1.ColumnLayout.Column"> & {
  /**
   * The relative weight of this column. The column weight is used to adjust
   * the width of columns on the screen (relative to peers).
   * Greater the weight, greater the width of the column on the screen.
   * If omitted, a value of 1 is used while rendering.
   *
   * @generated from field: int64 weight = 1;
   */
  weight: bigint;

  /**
   * The display widgets arranged vertically in this column.
   *
   * @generated from field: repeated google.monitoring.dashboard.v1.Widget widgets = 2;
   */
  widgets: Widget[];
};

/**
 * Describes the message google.monitoring.dashboard.v1.ColumnLayout.Column.
 * Use `create(ColumnLayout_ColumnSchema)` to create a new message.
 */
export const ColumnLayout_ColumnSchema: GenMessage<ColumnLayout_Column> = /*@__PURE__*/
  messageDesc(file_google_monitoring_dashboard_v1_layouts, 3, 0);

