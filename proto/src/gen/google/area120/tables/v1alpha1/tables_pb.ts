// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/area120/tables/v1alpha1/tables.proto (package google.area120.tables.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { EmptySchema, FieldMask, Value } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/area120/tables/v1alpha1/tables.proto.
 */
export const file_google_area120_tables_v1alpha1_tables: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvYXJlYTEyMC90YWJsZXMvdjFhbHBoYTEvdGFibGVzLnByb3RvEh5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEiSwoPR2V0VGFibGVSZXF1ZXN0EjgKBG5hbWUYASABKAlCKuBBAvpBJAoiYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9UYWJsZSI6ChFMaXN0VGFibGVzUmVxdWVzdBIRCglwYWdlX3NpemUYASABKAUSEgoKcGFnZV90b2tlbhgCIAEoCSJkChJMaXN0VGFibGVzUmVzcG9uc2USNQoGdGFibGVzGAEgAygLMiUuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlRhYmxlEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJTChNHZXRXb3Jrc3BhY2VSZXF1ZXN0EjwKBG5hbWUYASABKAlCLuBBAvpBKAomYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9Xb3Jrc3BhY2UiPgoVTGlzdFdvcmtzcGFjZXNSZXF1ZXN0EhEKCXBhZ2Vfc2l6ZRgBIAEoBRISCgpwYWdlX3Rva2VuGAIgASgJInAKFkxpc3RXb3Jrc3BhY2VzUmVzcG9uc2USPQoKd29ya3NwYWNlcxgBIAMoCzIpLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5Xb3Jrc3BhY2USFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIoABCg1HZXRSb3dSZXF1ZXN0EjYKBG5hbWUYASABKAlCKOBBAvpBIgogYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9Sb3cSNwoEdmlldxgCIAEoDjIkLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5WaWV3QgPgQQEimwEKD0xpc3RSb3dzUmVxdWVzdBITCgZwYXJlbnQYASABKAlCA+BBAhIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCRI3CgR2aWV3GAQgASgOMiQuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlZpZXdCA+BBARITCgZmaWx0ZXIYBSABKAlCA+BBASJeChBMaXN0Um93c1Jlc3BvbnNlEjEKBHJvd3MYASADKAsyIy5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuUm93EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKXAQoQQ3JlYXRlUm93UmVxdWVzdBITCgZwYXJlbnQYASABKAlCA+BBAhI1CgNyb3cYAiABKAsyIy5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuUm93QgPgQQISNwoEdmlldxgDIAEoDjIkLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5WaWV3QgPgQQEidgoWQmF0Y2hDcmVhdGVSb3dzUmVxdWVzdBITCgZwYXJlbnQYASABKAlCA+BBAhJHCghyZXF1ZXN0cxgCIAMoCzIwLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5DcmVhdGVSb3dSZXF1ZXN0QgPgQQIiTAoXQmF0Y2hDcmVhdGVSb3dzUmVzcG9uc2USMQoEcm93cxgBIAMoCzIjLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5Sb3ciswEKEFVwZGF0ZVJvd1JlcXVlc3QSNQoDcm93GAEgASgLMiMuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlJvd0ID4EECEi8KC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzaxI3CgR2aWV3GAMgASgOMiQuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlZpZXdCA+BBASJ2ChZCYXRjaFVwZGF0ZVJvd3NSZXF1ZXN0EhMKBnBhcmVudBgBIAEoCUID4EECEkcKCHJlcXVlc3RzGAIgAygLMjAuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlVwZGF0ZVJvd1JlcXVlc3RCA+BBAiJMChdCYXRjaFVwZGF0ZVJvd3NSZXNwb25zZRIxCgRyb3dzGAEgAygLMiMuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlJvdyJKChBEZWxldGVSb3dSZXF1ZXN0EjYKBG5hbWUYASABKAlCKOBBAvpBIgogYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9Sb3cijQEKFkJhdGNoRGVsZXRlUm93c1JlcXVlc3QSOgoGcGFyZW50GAEgASgJQirgQQL6QSQKImFyZWExMjB0YWJsZXMuZ29vZ2xlYXBpcy5jb20vVGFibGUSNwoFbmFtZXMYAiADKAlCKOBBAvpBIgogYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9Sb3ciqAEKBVRhYmxlEgwKBG5hbWUYASABKAkSFAoMZGlzcGxheV9uYW1lGAIgASgJEkIKB2NvbHVtbnMYAyADKAsyMS5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuQ29sdW1uRGVzY3JpcHRpb246N+pBNAoiYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbS9UYWJsZRIOdGFibGVzL3t0YWJsZX0ipgIKEUNvbHVtbkRlc2NyaXB0aW9uEgwKBG5hbWUYASABKAkSEQoJZGF0YV90eXBlGAIgASgJEgoKAmlkGAMgASgJEkAKBmxhYmVscxgEIAMoCzIrLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5MYWJlbGVkSXRlbUID4EEBElYKFHJlbGF0aW9uc2hpcF9kZXRhaWxzGAUgASgLMjMuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlJlbGF0aW9uc2hpcERldGFpbHNCA+BBARJKCg5sb29rdXBfZGV0YWlscxgGIAEoCzItLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5Mb29rdXBEZXRhaWxzQgPgQQEiJwoLTGFiZWxlZEl0ZW0SDAoEbmFtZRgBIAEoCRIKCgJpZBgCIAEoCSIrChNSZWxhdGlvbnNoaXBEZXRhaWxzEhQKDGxpbmtlZF90YWJsZRgBIAEoCSJMCg1Mb29rdXBEZXRhaWxzEhsKE3JlbGF0aW9uc2hpcF9jb2x1bW4YASABKAkSHgoWcmVsYXRpb25zaGlwX2NvbHVtbl9pZBgCIAEoCSLdAQoDUm93EgwKBG5hbWUYASABKAkSPwoGdmFsdWVzGAIgAygLMi8uZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlJvdy5WYWx1ZXNFbnRyeRpFCgtWYWx1ZXNFbnRyeRILCgNrZXkYASABKAkSJQoFdmFsdWUYAiABKAsyFi5nb29nbGUucHJvdG9idWYuVmFsdWU6AjgBOkDqQT0KIGFyZWExMjB0YWJsZXMuZ29vZ2xlYXBpcy5jb20vUm93Ehl0YWJsZXMve3RhYmxlfS9yb3dzL3tyb3d9IqsBCglXb3Jrc3BhY2USDAoEbmFtZRgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAkSNQoGdGFibGVzGAMgAygLMiUuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlRhYmxlOkPqQUAKJmFyZWExMjB0YWJsZXMuZ29vZ2xlYXBpcy5jb20vV29ya3NwYWNlEhZ3b3Jrc3BhY2VzL3t3b3Jrc3BhY2V9KjAKBFZpZXcSFAoQVklFV19VTlNQRUNJRklFRBAAEhIKDkNPTFVNTl9JRF9WSUVXEAEyvBEKDVRhYmxlc1NlcnZpY2USjAEKCEdldFRhYmxlEi8uZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkdldFRhYmxlUmVxdWVzdBolLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5UYWJsZSIo2kEEbmFtZYLT5JMCGxIZL3YxYWxwaGExL3tuYW1lPXRhYmxlcy8qfRKNAQoKTGlzdFRhYmxlcxIxLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5MaXN0VGFibGVzUmVxdWVzdBoyLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5MaXN0VGFibGVzUmVzcG9uc2UiGILT5JMCEhIQL3YxYWxwaGExL3RhYmxlcxKcAQoMR2V0V29ya3NwYWNlEjMuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkdldFdvcmtzcGFjZVJlcXVlc3QaKS5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuV29ya3NwYWNlIizaQQRuYW1lgtPkkwIfEh0vdjFhbHBoYTEve25hbWU9d29ya3NwYWNlcy8qfRKdAQoOTGlzdFdvcmtzcGFjZXMSNS5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuTGlzdFdvcmtzcGFjZXNSZXF1ZXN0GjYuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkxpc3RXb3Jrc3BhY2VzUmVzcG9uc2UiHILT5JMCFhIUL3YxYWxwaGExL3dvcmtzcGFjZXMSjQEKBkdldFJvdxItLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5HZXRSb3dSZXF1ZXN0GiMuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLlJvdyIv2kEEbmFtZYLT5JMCIhIgL3YxYWxwaGExL3tuYW1lPXRhYmxlcy8qL3Jvd3MvKn0SoAEKCExpc3RSb3dzEi8uZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkxpc3RSb3dzUmVxdWVzdBowLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5MaXN0Um93c1Jlc3BvbnNlIjHaQQZwYXJlbnSC0+STAiISIC92MWFscGhhMS97cGFyZW50PXRhYmxlcy8qfS9yb3dzEp4BCglDcmVhdGVSb3cSMC5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuQ3JlYXRlUm93UmVxdWVzdBojLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5Sb3ciOtpBCnBhcmVudCxyb3eC0+STAic6A3JvdyIgL3YxYWxwaGExL3twYXJlbnQ9dGFibGVzLyp9L3Jvd3MSuwEKD0JhdGNoQ3JlYXRlUm93cxI2Lmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5CYXRjaENyZWF0ZVJvd3NSZXF1ZXN0GjcuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkJhdGNoQ3JlYXRlUm93c1Jlc3BvbnNlIjeC0+STAjE6ASoiLC92MWFscGhhMS97cGFyZW50PXRhYmxlcy8qfS9yb3dzOmJhdGNoQ3JlYXRlEqcBCglVcGRhdGVSb3cSMC5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuVXBkYXRlUm93UmVxdWVzdBojLmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5Sb3ciQ9pBD3Jvdyx1cGRhdGVfbWFza4LT5JMCKzoDcm93MiQvdjFhbHBoYTEve3Jvdy5uYW1lPXRhYmxlcy8qL3Jvd3MvKn0SuwEKD0JhdGNoVXBkYXRlUm93cxI2Lmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5CYXRjaFVwZGF0ZVJvd3NSZXF1ZXN0GjcuZ29vZ2xlLmFyZWExMjAudGFibGVzLnYxYWxwaGExLkJhdGNoVXBkYXRlUm93c1Jlc3BvbnNlIjeC0+STAjE6ASoiLC92MWFscGhhMS97cGFyZW50PXRhYmxlcy8qfS9yb3dzOmJhdGNoVXBkYXRlEoYBCglEZWxldGVSb3cSMC5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTEuRGVsZXRlUm93UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIv2kEEbmFtZYLT5JMCIiogL3YxYWxwaGExL3tuYW1lPXRhYmxlcy8qL3Jvd3MvKn0SmgEKD0JhdGNoRGVsZXRlUm93cxI2Lmdvb2dsZS5hcmVhMTIwLnRhYmxlcy52MWFscGhhMS5CYXRjaERlbGV0ZVJvd3NSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IjeC0+STAjE6ASoiLC92MWFscGhhMS97cGFyZW50PXRhYmxlcy8qfS9yb3dzOmJhdGNoRGVsZXRlGqwCykEcYXJlYTEyMHRhYmxlcy5nb29nbGVhcGlzLmNvbdJBiQJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUuZmlsZSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLnJlYWRvbmx5LGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvc3ByZWFkc2hlZXRzLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvc3ByZWFkc2hlZXRzLnJlYWRvbmx5LGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdGFibGVzQnUKImNvbS5nb29nbGUuYXJlYTEyMC50YWJsZXMudjFhbHBoYTFCC1RhYmxlc1Byb3RvUAFaQGNsb3VkLmdvb2dsZS5jb20vZ28vYXJlYTEyMC90YWJsZXMvYXBpdjFhbHBoYTEvdGFibGVzcGI7dGFibGVzcGJiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct]);

/**
 * Request message for TablesService.GetTable.
 *
 * @generated from message google.area120.tables.v1alpha1.GetTableRequest
 */
export type GetTableRequest = Message<"google.area120.tables.v1alpha1.GetTableRequest"> & {
  /**
   * Required. The name of the table to retrieve.
   * Format: tables/{table}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.GetTableRequest.
 * Use `create(GetTableRequestSchema)` to create a new message.
 */
export const GetTableRequestSchema: GenMessage<GetTableRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 0);

/**
 * Request message for TablesService.ListTables.
 *
 * @generated from message google.area120.tables.v1alpha1.ListTablesRequest
 */
export type ListTablesRequest = Message<"google.area120.tables.v1alpha1.ListTablesRequest"> & {
  /**
   * The maximum number of tables to return. The service may return fewer than
   * this value.
   *
   * If unspecified, at most 20 tables are returned. The maximum value is 100;
   * values above 100 are coerced to 100.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListTables` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTables` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListTablesRequest.
 * Use `create(ListTablesRequestSchema)` to create a new message.
 */
export const ListTablesRequestSchema: GenMessage<ListTablesRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 1);

/**
 * Response message for TablesService.ListTables.
 *
 * @generated from message google.area120.tables.v1alpha1.ListTablesResponse
 */
export type ListTablesResponse = Message<"google.area120.tables.v1alpha1.ListTablesResponse"> & {
  /**
   * The list of tables.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Table tables = 1;
   */
  tables: Table[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListTablesResponse.
 * Use `create(ListTablesResponseSchema)` to create a new message.
 */
export const ListTablesResponseSchema: GenMessage<ListTablesResponse> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 2);

/**
 * Request message for TablesService.GetWorkspace.
 *
 * @generated from message google.area120.tables.v1alpha1.GetWorkspaceRequest
 */
export type GetWorkspaceRequest = Message<"google.area120.tables.v1alpha1.GetWorkspaceRequest"> & {
  /**
   * Required. The name of the workspace to retrieve.
   * Format: workspaces/{workspace}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.GetWorkspaceRequest.
 * Use `create(GetWorkspaceRequestSchema)` to create a new message.
 */
export const GetWorkspaceRequestSchema: GenMessage<GetWorkspaceRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 3);

/**
 * Request message for TablesService.ListWorkspaces.
 *
 * @generated from message google.area120.tables.v1alpha1.ListWorkspacesRequest
 */
export type ListWorkspacesRequest = Message<"google.area120.tables.v1alpha1.ListWorkspacesRequest"> & {
  /**
   * The maximum number of workspaces to return. The service may return fewer
   * than this value.
   *
   * If unspecified, at most 10 workspaces are returned. The maximum value is
   * 25; values above 25 are coerced to 25.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListWorkspaces` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListWorkspaces` must
   * match the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListWorkspacesRequest.
 * Use `create(ListWorkspacesRequestSchema)` to create a new message.
 */
export const ListWorkspacesRequestSchema: GenMessage<ListWorkspacesRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 4);

/**
 * Response message for TablesService.ListWorkspaces.
 *
 * @generated from message google.area120.tables.v1alpha1.ListWorkspacesResponse
 */
export type ListWorkspacesResponse = Message<"google.area120.tables.v1alpha1.ListWorkspacesResponse"> & {
  /**
   * The list of workspaces.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Workspace workspaces = 1;
   */
  workspaces: Workspace[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListWorkspacesResponse.
 * Use `create(ListWorkspacesResponseSchema)` to create a new message.
 */
export const ListWorkspacesResponseSchema: GenMessage<ListWorkspacesResponse> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 5);

/**
 * Request message for TablesService.GetRow.
 *
 * @generated from message google.area120.tables.v1alpha1.GetRowRequest
 */
export type GetRowRequest = Message<"google.area120.tables.v1alpha1.GetRowRequest"> & {
  /**
   * Required. The name of the row to retrieve.
   * Format: tables/{table}/rows/{row}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Column key to use for values in the row.
   * Defaults to user entered name.
   *
   * @generated from field: google.area120.tables.v1alpha1.View view = 2;
   */
  view: View;
};

/**
 * Describes the message google.area120.tables.v1alpha1.GetRowRequest.
 * Use `create(GetRowRequestSchema)` to create a new message.
 */
export const GetRowRequestSchema: GenMessage<GetRowRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 6);

/**
 * Request message for TablesService.ListRows.
 *
 * @generated from message google.area120.tables.v1alpha1.ListRowsRequest
 */
export type ListRowsRequest = Message<"google.area120.tables.v1alpha1.ListRowsRequest"> & {
  /**
   * Required. The parent table.
   * Format: tables/{table}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of rows to return. The service may return fewer than
   * this value.
   *
   * If unspecified, at most 50 rows are returned. The maximum value is 1,000;
   * values above 1,000 are coerced to 1,000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListRows` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRows` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Column key to use for values in the row.
   * Defaults to user entered name.
   *
   * @generated from field: google.area120.tables.v1alpha1.View view = 4;
   */
  view: View;

  /**
   * Optional. Raw text query to search for in rows of the table.
   * Special characters must be escaped. Logical operators and field specific
   * filtering not supported.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListRowsRequest.
 * Use `create(ListRowsRequestSchema)` to create a new message.
 */
export const ListRowsRequestSchema: GenMessage<ListRowsRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 7);

/**
 * Response message for TablesService.ListRows.
 *
 * @generated from message google.area120.tables.v1alpha1.ListRowsResponse
 */
export type ListRowsResponse = Message<"google.area120.tables.v1alpha1.ListRowsResponse"> & {
  /**
   * The rows from the specified table.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Row rows = 1;
   */
  rows: Row[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ListRowsResponse.
 * Use `create(ListRowsResponseSchema)` to create a new message.
 */
export const ListRowsResponseSchema: GenMessage<ListRowsResponse> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 8);

/**
 * Request message for TablesService.CreateRow.
 *
 * @generated from message google.area120.tables.v1alpha1.CreateRowRequest
 */
export type CreateRowRequest = Message<"google.area120.tables.v1alpha1.CreateRowRequest"> & {
  /**
   * Required. The parent table where this row will be created.
   * Format: tables/{table}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The row to create.
   *
   * @generated from field: google.area120.tables.v1alpha1.Row row = 2;
   */
  row?: Row;

  /**
   * Optional. Column key to use for values in the row.
   * Defaults to user entered name.
   *
   * @generated from field: google.area120.tables.v1alpha1.View view = 3;
   */
  view: View;
};

/**
 * Describes the message google.area120.tables.v1alpha1.CreateRowRequest.
 * Use `create(CreateRowRequestSchema)` to create a new message.
 */
export const CreateRowRequestSchema: GenMessage<CreateRowRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 9);

/**
 * Request message for TablesService.BatchCreateRows.
 *
 * @generated from message google.area120.tables.v1alpha1.BatchCreateRowsRequest
 */
export type BatchCreateRowsRequest = Message<"google.area120.tables.v1alpha1.BatchCreateRowsRequest"> & {
  /**
   * Required. The parent table where the rows will be created.
   * Format: tables/{table}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The request message specifying the rows to create.
   *
   * A maximum of 500 rows can be created in a single batch.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.CreateRowRequest requests = 2;
   */
  requests: CreateRowRequest[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.BatchCreateRowsRequest.
 * Use `create(BatchCreateRowsRequestSchema)` to create a new message.
 */
export const BatchCreateRowsRequestSchema: GenMessage<BatchCreateRowsRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 10);

/**
 * Response message for TablesService.BatchCreateRows.
 *
 * @generated from message google.area120.tables.v1alpha1.BatchCreateRowsResponse
 */
export type BatchCreateRowsResponse = Message<"google.area120.tables.v1alpha1.BatchCreateRowsResponse"> & {
  /**
   * The created rows.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Row rows = 1;
   */
  rows: Row[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.BatchCreateRowsResponse.
 * Use `create(BatchCreateRowsResponseSchema)` to create a new message.
 */
export const BatchCreateRowsResponseSchema: GenMessage<BatchCreateRowsResponse> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 11);

/**
 * Request message for TablesService.UpdateRow.
 *
 * @generated from message google.area120.tables.v1alpha1.UpdateRowRequest
 */
export type UpdateRowRequest = Message<"google.area120.tables.v1alpha1.UpdateRowRequest"> & {
  /**
   * Required. The row to update.
   *
   * @generated from field: google.area120.tables.v1alpha1.Row row = 1;
   */
  row?: Row;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. Column key to use for values in the row.
   * Defaults to user entered name.
   *
   * @generated from field: google.area120.tables.v1alpha1.View view = 3;
   */
  view: View;
};

/**
 * Describes the message google.area120.tables.v1alpha1.UpdateRowRequest.
 * Use `create(UpdateRowRequestSchema)` to create a new message.
 */
export const UpdateRowRequestSchema: GenMessage<UpdateRowRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 12);

/**
 * Request message for TablesService.BatchUpdateRows.
 *
 * @generated from message google.area120.tables.v1alpha1.BatchUpdateRowsRequest
 */
export type BatchUpdateRowsRequest = Message<"google.area120.tables.v1alpha1.BatchUpdateRowsRequest"> & {
  /**
   * Required. The parent table shared by all rows being updated.
   * Format: tables/{table}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The request messages specifying the rows to update.
   *
   * A maximum of 500 rows can be modified in a single batch.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.UpdateRowRequest requests = 2;
   */
  requests: UpdateRowRequest[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.BatchUpdateRowsRequest.
 * Use `create(BatchUpdateRowsRequestSchema)` to create a new message.
 */
export const BatchUpdateRowsRequestSchema: GenMessage<BatchUpdateRowsRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 13);

/**
 * Response message for TablesService.BatchUpdateRows.
 *
 * @generated from message google.area120.tables.v1alpha1.BatchUpdateRowsResponse
 */
export type BatchUpdateRowsResponse = Message<"google.area120.tables.v1alpha1.BatchUpdateRowsResponse"> & {
  /**
   * The updated rows.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Row rows = 1;
   */
  rows: Row[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.BatchUpdateRowsResponse.
 * Use `create(BatchUpdateRowsResponseSchema)` to create a new message.
 */
export const BatchUpdateRowsResponseSchema: GenMessage<BatchUpdateRowsResponse> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 14);

/**
 * Request message for TablesService.DeleteRow
 *
 * @generated from message google.area120.tables.v1alpha1.DeleteRowRequest
 */
export type DeleteRowRequest = Message<"google.area120.tables.v1alpha1.DeleteRowRequest"> & {
  /**
   * Required. The name of the row to delete.
   * Format: tables/{table}/rows/{row}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.DeleteRowRequest.
 * Use `create(DeleteRowRequestSchema)` to create a new message.
 */
export const DeleteRowRequestSchema: GenMessage<DeleteRowRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 15);

/**
 * Request message for TablesService.BatchDeleteRows
 *
 * @generated from message google.area120.tables.v1alpha1.BatchDeleteRowsRequest
 */
export type BatchDeleteRowsRequest = Message<"google.area120.tables.v1alpha1.BatchDeleteRowsRequest"> & {
  /**
   * Required. The parent table shared by all rows being deleted.
   * Format: tables/{table}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The names of the rows to delete. All rows must belong to the parent table
   * or else the entire batch will fail. A maximum of 500 rows can be deleted
   * in a batch.
   * Format: tables/{table}/rows/{row}
   *
   * @generated from field: repeated string names = 2;
   */
  names: string[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.BatchDeleteRowsRequest.
 * Use `create(BatchDeleteRowsRequestSchema)` to create a new message.
 */
export const BatchDeleteRowsRequestSchema: GenMessage<BatchDeleteRowsRequest> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 16);

/**
 * A single table.
 *
 * @generated from message google.area120.tables.v1alpha1.Table
 */
export type Table = Message<"google.area120.tables.v1alpha1.Table"> & {
  /**
   * The resource name of the table.
   * Table names have the form `tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The human readable title of the table.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * List of columns in this table.
   * Order of columns matches the display order.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.ColumnDescription columns = 3;
   */
  columns: ColumnDescription[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.Table.
 * Use `create(TableSchema)` to create a new message.
 */
export const TableSchema: GenMessage<Table> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 17);

/**
 * Details on a column in the table.
 *
 * @generated from message google.area120.tables.v1alpha1.ColumnDescription
 */
export type ColumnDescription = Message<"google.area120.tables.v1alpha1.ColumnDescription"> & {
  /**
   * column name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Data type of the column
   * Supported types are auto_id, boolean, boolean_list, creator,
   * create_timestamp, date, dropdown, location, integer,
   * integer_list, number, number_list, person, person_list, tags, check_list,
   * text, text_list, update_timestamp, updater, relationship,
   * file_attachment_list.
   * These types directly map to the column types supported on Tables website.
   *
   * @generated from field: string data_type = 2;
   */
  dataType: string;

  /**
   * Internal id for a column.
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * Optional. Range of labeled values for the column.
   * Some columns like tags and drop-downs limit the values to a set of
   * possible values. We return the range of values in such cases to help
   * clients implement better user data validation.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.LabeledItem labels = 4;
   */
  labels: LabeledItem[];

  /**
   * Optional. Additional details about a relationship column. Specified when data_type
   * is relationship.
   *
   * @generated from field: google.area120.tables.v1alpha1.RelationshipDetails relationship_details = 5;
   */
  relationshipDetails?: RelationshipDetails;

  /**
   * Optional. Indicates that this is a lookup column whose value is derived from the
   * relationship column specified in the details. Lookup columns can not be
   * updated directly. To change the value you must update the associated
   * relationship column.
   *
   * @generated from field: google.area120.tables.v1alpha1.LookupDetails lookup_details = 6;
   */
  lookupDetails?: LookupDetails;
};

/**
 * Describes the message google.area120.tables.v1alpha1.ColumnDescription.
 * Use `create(ColumnDescriptionSchema)` to create a new message.
 */
export const ColumnDescriptionSchema: GenMessage<ColumnDescription> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 18);

/**
 * A single item in a labeled column.
 *
 * @generated from message google.area120.tables.v1alpha1.LabeledItem
 */
export type LabeledItem = Message<"google.area120.tables.v1alpha1.LabeledItem"> & {
  /**
   * Display string as entered by user.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Internal id associated with the item.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.LabeledItem.
 * Use `create(LabeledItemSchema)` to create a new message.
 */
export const LabeledItemSchema: GenMessage<LabeledItem> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 19);

/**
 * Details about a relationship column.
 *
 * @generated from message google.area120.tables.v1alpha1.RelationshipDetails
 */
export type RelationshipDetails = Message<"google.area120.tables.v1alpha1.RelationshipDetails"> & {
  /**
   * The name of the table this relationship is linked to.
   *
   * @generated from field: string linked_table = 1;
   */
  linkedTable: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.RelationshipDetails.
 * Use `create(RelationshipDetailsSchema)` to create a new message.
 */
export const RelationshipDetailsSchema: GenMessage<RelationshipDetails> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 20);

/**
 * Details about a lookup column whose value comes from the associated
 * relationship.
 *
 * @generated from message google.area120.tables.v1alpha1.LookupDetails
 */
export type LookupDetails = Message<"google.area120.tables.v1alpha1.LookupDetails"> & {
  /**
   * The name of the relationship column associated with the lookup.
   *
   * @generated from field: string relationship_column = 1;
   */
  relationshipColumn: string;

  /**
   * The id of the relationship column.
   *
   * @generated from field: string relationship_column_id = 2;
   */
  relationshipColumnId: string;
};

/**
 * Describes the message google.area120.tables.v1alpha1.LookupDetails.
 * Use `create(LookupDetailsSchema)` to create a new message.
 */
export const LookupDetailsSchema: GenMessage<LookupDetails> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 21);

/**
 * A single row in a table.
 *
 * @generated from message google.area120.tables.v1alpha1.Row
 */
export type Row = Message<"google.area120.tables.v1alpha1.Row"> & {
  /**
   * The resource name of the row.
   * Row names have the form `tables/{table}/rows/{row}`.
   * The name is ignored when creating a row.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The values of the row. This is a map of column key to value.
   * Key is user entered name(default) or the internal column id based on
   * the view in the request.
   *
   * @generated from field: map<string, google.protobuf.Value> values = 2;
   */
  values: { [key: string]: Value };
};

/**
 * Describes the message google.area120.tables.v1alpha1.Row.
 * Use `create(RowSchema)` to create a new message.
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 22);

/**
 * A single workspace.
 *
 * @generated from message google.area120.tables.v1alpha1.Workspace
 */
export type Workspace = Message<"google.area120.tables.v1alpha1.Workspace"> & {
  /**
   * The resource name of the workspace.
   * Workspace names have the form `workspaces/{workspace}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The human readable title of the workspace.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * The list of tables in the workspace.
   *
   * @generated from field: repeated google.area120.tables.v1alpha1.Table tables = 3;
   */
  tables: Table[];
};

/**
 * Describes the message google.area120.tables.v1alpha1.Workspace.
 * Use `create(WorkspaceSchema)` to create a new message.
 */
export const WorkspaceSchema: GenMessage<Workspace> = /*@__PURE__*/
  messageDesc(file_google_area120_tables_v1alpha1_tables, 23);

/**
 * Column identifier used for the values in the row.
 *
 * @generated from enum google.area120.tables.v1alpha1.View
 */
export enum View {
  /**
   * Defaults to user entered text.
   *
   * @generated from enum value: VIEW_UNSPECIFIED = 0;
   */
  VIEW_UNSPECIFIED = 0,

  /**
   * Uses internally generated column id to identify values.
   *
   * @generated from enum value: COLUMN_ID_VIEW = 1;
   */
  COLUMN_ID_VIEW = 1,
}

/**
 * Describes the enum google.area120.tables.v1alpha1.View.
 */
export const ViewSchema: GenEnum<View> = /*@__PURE__*/
  enumDesc(file_google_area120_tables_v1alpha1_tables, 0);

/**
 * The Tables Service provides an API for reading and updating tables.
 * It defines the following resource model:
 *
 * - The API has a collection of [Table][google.area120.tables.v1alpha1.Table]
 *   resources, named `tables/*`
 *
 * - Each Table has a collection of [Row][google.area120.tables.v1alpha1.Row]
 *   resources, named `tables/*\/rows/*`
 *
 * - The API has a collection of
 *   [Workspace][google.area120.tables.v1alpha1.Workspace]
 *   resources, named `workspaces/*`.
 *
 * @generated from service google.area120.tables.v1alpha1.TablesService
 */
export const TablesService: GenService<{
  /**
   * Gets a table. Returns NOT_FOUND if the table does not exist.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.GetTable
   */
  getTable: {
    methodKind: "unary";
    input: typeof GetTableRequestSchema;
    output: typeof TableSchema;
  },
  /**
   * Lists tables for the user.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.ListTables
   */
  listTables: {
    methodKind: "unary";
    input: typeof ListTablesRequestSchema;
    output: typeof ListTablesResponseSchema;
  },
  /**
   * Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.GetWorkspace
   */
  getWorkspace: {
    methodKind: "unary";
    input: typeof GetWorkspaceRequestSchema;
    output: typeof WorkspaceSchema;
  },
  /**
   * Lists workspaces for the user.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.ListWorkspaces
   */
  listWorkspaces: {
    methodKind: "unary";
    input: typeof ListWorkspacesRequestSchema;
    output: typeof ListWorkspacesResponseSchema;
  },
  /**
   * Gets a row. Returns NOT_FOUND if the row does not exist in the table.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.GetRow
   */
  getRow: {
    methodKind: "unary";
    input: typeof GetRowRequestSchema;
    output: typeof RowSchema;
  },
  /**
   * Lists rows in a table. Returns NOT_FOUND if the table does not exist.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.ListRows
   */
  listRows: {
    methodKind: "unary";
    input: typeof ListRowsRequestSchema;
    output: typeof ListRowsResponseSchema;
  },
  /**
   * Creates a row.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.CreateRow
   */
  createRow: {
    methodKind: "unary";
    input: typeof CreateRowRequestSchema;
    output: typeof RowSchema;
  },
  /**
   * Creates multiple rows.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.BatchCreateRows
   */
  batchCreateRows: {
    methodKind: "unary";
    input: typeof BatchCreateRowsRequestSchema;
    output: typeof BatchCreateRowsResponseSchema;
  },
  /**
   * Updates a row.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.UpdateRow
   */
  updateRow: {
    methodKind: "unary";
    input: typeof UpdateRowRequestSchema;
    output: typeof RowSchema;
  },
  /**
   * Updates multiple rows.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.BatchUpdateRows
   */
  batchUpdateRows: {
    methodKind: "unary";
    input: typeof BatchUpdateRowsRequestSchema;
    output: typeof BatchUpdateRowsResponseSchema;
  },
  /**
   * Deletes a row.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.DeleteRow
   */
  deleteRow: {
    methodKind: "unary";
    input: typeof DeleteRowRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Deletes multiple rows.
   *
   * @generated from rpc google.area120.tables.v1alpha1.TablesService.BatchDeleteRows
   */
  batchDeleteRows: {
    methodKind: "unary";
    input: typeof BatchDeleteRowsRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_area120_tables_v1alpha1_tables, 0);

