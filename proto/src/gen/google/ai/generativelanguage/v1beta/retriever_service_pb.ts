// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/ai/generativelanguage/v1beta/retriever_service.proto (package google.ai.generativelanguage.v1beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Chunk, ChunkSchema, Corpus, CorpusSchema, Document, DocumentSchema, MetadataFilter } from "./retriever_pb";
import { file_google_ai_generativelanguage_v1beta_retriever } from "./retriever_pb";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/ai/generativelanguage/v1beta/retriever_service.proto.
 */
export const file_google_ai_generativelanguage_v1beta_retriever_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_ai_generativelanguage_v1beta_retriever, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_field_mask]);

/**
 * Request to create a `Corpus`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.CreateCorpusRequest
 */
export type CreateCorpusRequest = Message<"google.ai.generativelanguage.v1beta.CreateCorpusRequest"> & {
  /**
   * Required. The `Corpus` to create.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Corpus corpus = 1;
   */
  corpus?: Corpus;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.CreateCorpusRequest.
 * Use `create(CreateCorpusRequestSchema)` to create a new message.
 */
export const CreateCorpusRequestSchema: GenMessage<CreateCorpusRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 0);

/**
 * Request for getting information about a specific `Corpus`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.GetCorpusRequest
 */
export type GetCorpusRequest = Message<"google.ai.generativelanguage.v1beta.GetCorpusRequest"> & {
  /**
   * Required. The name of the `Corpus`.
   * Example: `corpora/my-corpus-123`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.GetCorpusRequest.
 * Use `create(GetCorpusRequestSchema)` to create a new message.
 */
export const GetCorpusRequestSchema: GenMessage<GetCorpusRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 1);

/**
 * Request to update a `Corpus`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.UpdateCorpusRequest
 */
export type UpdateCorpusRequest = Message<"google.ai.generativelanguage.v1beta.UpdateCorpusRequest"> & {
  /**
   * Required. The `Corpus` to update.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Corpus corpus = 1;
   */
  corpus?: Corpus;

  /**
   * Required. The list of fields to update.
   * Currently, this only supports updating `display_name`.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.UpdateCorpusRequest.
 * Use `create(UpdateCorpusRequestSchema)` to create a new message.
 */
export const UpdateCorpusRequestSchema: GenMessage<UpdateCorpusRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 2);

/**
 * Request to delete a `Corpus`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.DeleteCorpusRequest
 */
export type DeleteCorpusRequest = Message<"google.ai.generativelanguage.v1beta.DeleteCorpusRequest"> & {
  /**
   * Required. The resource name of the `Corpus`.
   * Example: `corpora/my-corpus-123`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. If set to true, any `Document`s and objects related to this
   * `Corpus` will also be deleted.
   *
   * If false (the default), a `FAILED_PRECONDITION` error will be returned if
   * `Corpus` contains any `Document`s.
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.DeleteCorpusRequest.
 * Use `create(DeleteCorpusRequestSchema)` to create a new message.
 */
export const DeleteCorpusRequestSchema: GenMessage<DeleteCorpusRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 3);

/**
 * Request for listing `Corpora`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListCorporaRequest
 */
export type ListCorporaRequest = Message<"google.ai.generativelanguage.v1beta.ListCorporaRequest"> & {
  /**
   * Optional. The maximum number of `Corpora` to return (per page).
   * The service may return fewer `Corpora`.
   *
   * If unspecified, at most 10 `Corpora` will be returned.
   * The maximum size limit is 20 `Corpora` per page.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListCorpora` call.
   *
   * Provide the `next_page_token` returned in the response as an argument to
   * the next request to retrieve the next page.
   *
   * When paginating, all other parameters provided to `ListCorpora`
   * must match the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListCorporaRequest.
 * Use `create(ListCorporaRequestSchema)` to create a new message.
 */
export const ListCorporaRequestSchema: GenMessage<ListCorporaRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 4);

/**
 * Response from `ListCorpora` containing a paginated list of `Corpora`.
 * The results are sorted by ascending `corpus.create_time`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListCorporaResponse
 */
export type ListCorporaResponse = Message<"google.ai.generativelanguage.v1beta.ListCorporaResponse"> & {
  /**
   * The returned corpora.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Corpus corpora = 1;
   */
  corpora: Corpus[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListCorporaResponse.
 * Use `create(ListCorporaResponseSchema)` to create a new message.
 */
export const ListCorporaResponseSchema: GenMessage<ListCorporaResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 5);

/**
 * Request for querying a `Corpus`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.QueryCorpusRequest
 */
export type QueryCorpusRequest = Message<"google.ai.generativelanguage.v1beta.QueryCorpusRequest"> & {
  /**
   * Required. The name of the `Corpus` to query.
   * Example: `corpora/my-corpus-123`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Query string to perform semantic search.
   *
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * Optional. Filter for `Chunk` and `Document` metadata. Each `MetadataFilter`
   * object should correspond to a unique key. Multiple `MetadataFilter` objects
   * are joined by logical "AND"s.
   *
   * Example query at document level:
   * (year >= 2020 OR year < 2010) AND (genre = drama OR genre = action)
   *
   * `MetadataFilter` object list:
   *  metadata_filters = [
   *  {key = "document.custom_metadata.year"
   *   conditions = [{int_value = 2020, operation = GREATER_EQUAL},
   *                 {int_value = 2010, operation = LESS}]},
   *  {key = "document.custom_metadata.year"
   *   conditions = [{int_value = 2020, operation = GREATER_EQUAL},
   *                 {int_value = 2010, operation = LESS}]},
   *  {key = "document.custom_metadata.genre"
   *   conditions = [{string_value = "drama", operation = EQUAL},
   *                 {string_value = "action", operation = EQUAL}]}]
   *
   * Example query at chunk level for a numeric range of values:
   * (year > 2015 AND year <= 2020)
   *
   * `MetadataFilter` object list:
   *  metadata_filters = [
   *  {key = "chunk.custom_metadata.year"
   *   conditions = [{int_value = 2015, operation = GREATER}]},
   *  {key = "chunk.custom_metadata.year"
   *   conditions = [{int_value = 2020, operation = LESS_EQUAL}]}]
   *
   * Note: "AND"s for the same key are only supported for numeric values. String
   * values only support "OR"s for the same key.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.MetadataFilter metadata_filters = 3;
   */
  metadataFilters: MetadataFilter[];

  /**
   * Optional. The maximum number of `Chunk`s to return.
   * The service may return fewer `Chunk`s.
   *
   * If unspecified, at most 10 `Chunk`s will be returned.
   * The maximum specified result count is 100.
   *
   * @generated from field: int32 results_count = 4;
   */
  resultsCount: number;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.QueryCorpusRequest.
 * Use `create(QueryCorpusRequestSchema)` to create a new message.
 */
export const QueryCorpusRequestSchema: GenMessage<QueryCorpusRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 6);

/**
 * Response from `QueryCorpus` containing a list of relevant chunks.
 *
 * @generated from message google.ai.generativelanguage.v1beta.QueryCorpusResponse
 */
export type QueryCorpusResponse = Message<"google.ai.generativelanguage.v1beta.QueryCorpusResponse"> & {
  /**
   * The relevant chunks.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.RelevantChunk relevant_chunks = 1;
   */
  relevantChunks: RelevantChunk[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.QueryCorpusResponse.
 * Use `create(QueryCorpusResponseSchema)` to create a new message.
 */
export const QueryCorpusResponseSchema: GenMessage<QueryCorpusResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 7);

/**
 * The information for a chunk relevant to a query.
 *
 * @generated from message google.ai.generativelanguage.v1beta.RelevantChunk
 */
export type RelevantChunk = Message<"google.ai.generativelanguage.v1beta.RelevantChunk"> & {
  /**
   * `Chunk` relevance to the query.
   *
   * @generated from field: float chunk_relevance_score = 1;
   */
  chunkRelevanceScore: number;

  /**
   * `Chunk` associated with the query.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Chunk chunk = 2;
   */
  chunk?: Chunk;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.RelevantChunk.
 * Use `create(RelevantChunkSchema)` to create a new message.
 */
export const RelevantChunkSchema: GenMessage<RelevantChunk> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 8);

/**
 * Request to create a `Document`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.CreateDocumentRequest
 */
export type CreateDocumentRequest = Message<"google.ai.generativelanguage.v1beta.CreateDocumentRequest"> & {
  /**
   * Required. The name of the `Corpus` where this `Document` will be created.
   * Example: `corpora/my-corpus-123`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The `Document` to create.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Document document = 2;
   */
  document?: Document;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.CreateDocumentRequest.
 * Use `create(CreateDocumentRequestSchema)` to create a new message.
 */
export const CreateDocumentRequestSchema: GenMessage<CreateDocumentRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 9);

/**
 * Request for getting information about a specific `Document`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.GetDocumentRequest
 */
export type GetDocumentRequest = Message<"google.ai.generativelanguage.v1beta.GetDocumentRequest"> & {
  /**
   * Required. The name of the `Document` to retrieve.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.GetDocumentRequest.
 * Use `create(GetDocumentRequestSchema)` to create a new message.
 */
export const GetDocumentRequestSchema: GenMessage<GetDocumentRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 10);

/**
 * Request to update a `Document`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.UpdateDocumentRequest
 */
export type UpdateDocumentRequest = Message<"google.ai.generativelanguage.v1beta.UpdateDocumentRequest"> & {
  /**
   * Required. The `Document` to update.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Document document = 1;
   */
  document?: Document;

  /**
   * Required. The list of fields to update.
   * Currently, this only supports updating `display_name` and
   * `custom_metadata`.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.UpdateDocumentRequest.
 * Use `create(UpdateDocumentRequestSchema)` to create a new message.
 */
export const UpdateDocumentRequestSchema: GenMessage<UpdateDocumentRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 11);

/**
 * Request to delete a `Document`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.DeleteDocumentRequest
 */
export type DeleteDocumentRequest = Message<"google.ai.generativelanguage.v1beta.DeleteDocumentRequest"> & {
  /**
   * Required. The resource name of the `Document` to delete.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. If set to true, any `Chunk`s and objects related to this
   * `Document` will also be deleted.
   *
   * If false (the default), a `FAILED_PRECONDITION` error will be returned if
   * `Document` contains any `Chunk`s.
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.DeleteDocumentRequest.
 * Use `create(DeleteDocumentRequestSchema)` to create a new message.
 */
export const DeleteDocumentRequestSchema: GenMessage<DeleteDocumentRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 12);

/**
 * Request for listing `Document`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListDocumentsRequest
 */
export type ListDocumentsRequest = Message<"google.ai.generativelanguage.v1beta.ListDocumentsRequest"> & {
  /**
   * Required. The name of the `Corpus` containing `Document`s.
   * Example: `corpora/my-corpus-123`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of `Document`s to return (per page).
   * The service may return fewer `Document`s.
   *
   * If unspecified, at most 10 `Document`s will be returned.
   * The maximum size limit is 20 `Document`s per page.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListDocuments` call.
   *
   * Provide the `next_page_token` returned in the response as an argument to
   * the next request to retrieve the next page.
   *
   * When paginating, all other parameters provided to `ListDocuments`
   * must match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListDocumentsRequest.
 * Use `create(ListDocumentsRequestSchema)` to create a new message.
 */
export const ListDocumentsRequestSchema: GenMessage<ListDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 13);

/**
 * Response from `ListDocuments` containing a paginated list of `Document`s.
 * The `Document`s are sorted by ascending `document.create_time`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListDocumentsResponse
 */
export type ListDocumentsResponse = Message<"google.ai.generativelanguage.v1beta.ListDocumentsResponse"> & {
  /**
   * The returned `Document`s.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Document documents = 1;
   */
  documents: Document[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListDocumentsResponse.
 * Use `create(ListDocumentsResponseSchema)` to create a new message.
 */
export const ListDocumentsResponseSchema: GenMessage<ListDocumentsResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 14);

/**
 * Request for querying a `Document`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.QueryDocumentRequest
 */
export type QueryDocumentRequest = Message<"google.ai.generativelanguage.v1beta.QueryDocumentRequest"> & {
  /**
   * Required. The name of the `Document` to query.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Query string to perform semantic search.
   *
   * @generated from field: string query = 2;
   */
  query: string;

  /**
   * Optional. The maximum number of `Chunk`s to return.
   * The service may return fewer `Chunk`s.
   *
   * If unspecified, at most 10 `Chunk`s will be returned.
   * The maximum specified result count is 100.
   *
   * @generated from field: int32 results_count = 3;
   */
  resultsCount: number;

  /**
   * Optional. Filter for `Chunk` metadata. Each `MetadataFilter` object should
   * correspond to a unique key. Multiple `MetadataFilter` objects are joined by
   * logical "AND"s.
   *
   * Note: `Document`-level filtering is not supported for this request because
   * a `Document` name is already specified.
   *
   * Example query:
   * (year >= 2020 OR year < 2010) AND (genre = drama OR genre = action)
   *
   * `MetadataFilter` object list:
   *  metadata_filters = [
   *  {key = "chunk.custom_metadata.year"
   *   conditions = [{int_value = 2020, operation = GREATER_EQUAL},
   *                 {int_value = 2010, operation = LESS}},
   *  {key = "chunk.custom_metadata.genre"
   *   conditions = [{string_value = "drama", operation = EQUAL},
   *                 {string_value = "action", operation = EQUAL}}]
   *
   * Example query for a numeric range of values:
   * (year > 2015 AND year <= 2020)
   *
   * `MetadataFilter` object list:
   *  metadata_filters = [
   *  {key = "chunk.custom_metadata.year"
   *   conditions = [{int_value = 2015, operation = GREATER}]},
   *  {key = "chunk.custom_metadata.year"
   *   conditions = [{int_value = 2020, operation = LESS_EQUAL}]}]
   *
   * Note: "AND"s for the same key are only supported for numeric values. String
   * values only support "OR"s for the same key.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.MetadataFilter metadata_filters = 4;
   */
  metadataFilters: MetadataFilter[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.QueryDocumentRequest.
 * Use `create(QueryDocumentRequestSchema)` to create a new message.
 */
export const QueryDocumentRequestSchema: GenMessage<QueryDocumentRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 15);

/**
 * Response from `QueryDocument` containing a list of relevant chunks.
 *
 * @generated from message google.ai.generativelanguage.v1beta.QueryDocumentResponse
 */
export type QueryDocumentResponse = Message<"google.ai.generativelanguage.v1beta.QueryDocumentResponse"> & {
  /**
   * The returned relevant chunks.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.RelevantChunk relevant_chunks = 1;
   */
  relevantChunks: RelevantChunk[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.QueryDocumentResponse.
 * Use `create(QueryDocumentResponseSchema)` to create a new message.
 */
export const QueryDocumentResponseSchema: GenMessage<QueryDocumentResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 16);

/**
 * Request to create a `Chunk`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.CreateChunkRequest
 */
export type CreateChunkRequest = Message<"google.ai.generativelanguage.v1beta.CreateChunkRequest"> & {
  /**
   * Required. The name of the `Document` where this `Chunk` will be created.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The `Chunk` to create.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Chunk chunk = 2;
   */
  chunk?: Chunk;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.CreateChunkRequest.
 * Use `create(CreateChunkRequestSchema)` to create a new message.
 */
export const CreateChunkRequestSchema: GenMessage<CreateChunkRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 17);

/**
 * Request to batch create `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.BatchCreateChunksRequest
 */
export type BatchCreateChunksRequest = Message<"google.ai.generativelanguage.v1beta.BatchCreateChunksRequest"> & {
  /**
   * Optional. The name of the `Document` where this batch of `Chunk`s will be
   * created. The parent field in every `CreateChunkRequest` must match this
   * value. Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The request messages specifying the `Chunk`s to create.
   * A maximum of 100 `Chunk`s can be created in a batch.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.CreateChunkRequest requests = 2;
   */
  requests: CreateChunkRequest[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.BatchCreateChunksRequest.
 * Use `create(BatchCreateChunksRequestSchema)` to create a new message.
 */
export const BatchCreateChunksRequestSchema: GenMessage<BatchCreateChunksRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 18);

/**
 * Response from `BatchCreateChunks` containing a list of created `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.BatchCreateChunksResponse
 */
export type BatchCreateChunksResponse = Message<"google.ai.generativelanguage.v1beta.BatchCreateChunksResponse"> & {
  /**
   * `Chunk`s created.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Chunk chunks = 1;
   */
  chunks: Chunk[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.BatchCreateChunksResponse.
 * Use `create(BatchCreateChunksResponseSchema)` to create a new message.
 */
export const BatchCreateChunksResponseSchema: GenMessage<BatchCreateChunksResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 19);

/**
 * Request for getting information about a specific `Chunk`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.GetChunkRequest
 */
export type GetChunkRequest = Message<"google.ai.generativelanguage.v1beta.GetChunkRequest"> & {
  /**
   * Required. The name of the `Chunk` to retrieve.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc/chunks/some-chunk`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.GetChunkRequest.
 * Use `create(GetChunkRequestSchema)` to create a new message.
 */
export const GetChunkRequestSchema: GenMessage<GetChunkRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 20);

/**
 * Request to update a `Chunk`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.UpdateChunkRequest
 */
export type UpdateChunkRequest = Message<"google.ai.generativelanguage.v1beta.UpdateChunkRequest"> & {
  /**
   * Required. The `Chunk` to update.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Chunk chunk = 1;
   */
  chunk?: Chunk;

  /**
   * Required. The list of fields to update.
   * Currently, this only supports updating `custom_metadata` and `data`.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.UpdateChunkRequest.
 * Use `create(UpdateChunkRequestSchema)` to create a new message.
 */
export const UpdateChunkRequestSchema: GenMessage<UpdateChunkRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 21);

/**
 * Request to batch update `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest
 */
export type BatchUpdateChunksRequest = Message<"google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest"> & {
  /**
   * Optional. The name of the `Document` containing the `Chunk`s to update.
   * The parent field in every `UpdateChunkRequest` must match this value.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The request messages specifying the `Chunk`s to update.
   * A maximum of 100 `Chunk`s can be updated in a batch.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.UpdateChunkRequest requests = 2;
   */
  requests: UpdateChunkRequest[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.BatchUpdateChunksRequest.
 * Use `create(BatchUpdateChunksRequestSchema)` to create a new message.
 */
export const BatchUpdateChunksRequestSchema: GenMessage<BatchUpdateChunksRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 22);

/**
 * Response from `BatchUpdateChunks` containing a list of updated `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.BatchUpdateChunksResponse
 */
export type BatchUpdateChunksResponse = Message<"google.ai.generativelanguage.v1beta.BatchUpdateChunksResponse"> & {
  /**
   * `Chunk`s updated.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Chunk chunks = 1;
   */
  chunks: Chunk[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.BatchUpdateChunksResponse.
 * Use `create(BatchUpdateChunksResponseSchema)` to create a new message.
 */
export const BatchUpdateChunksResponseSchema: GenMessage<BatchUpdateChunksResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 23);

/**
 * Request to delete a `Chunk`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.DeleteChunkRequest
 */
export type DeleteChunkRequest = Message<"google.ai.generativelanguage.v1beta.DeleteChunkRequest"> & {
  /**
   * Required. The resource name of the `Chunk` to delete.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc/chunks/some-chunk`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.DeleteChunkRequest.
 * Use `create(DeleteChunkRequestSchema)` to create a new message.
 */
export const DeleteChunkRequestSchema: GenMessage<DeleteChunkRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 24);

/**
 * Request to batch delete `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest
 */
export type BatchDeleteChunksRequest = Message<"google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest"> & {
  /**
   * Optional. The name of the `Document` containing the `Chunk`s to delete.
   * The parent field in every `DeleteChunkRequest` must match this value.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The request messages specifying the `Chunk`s to delete.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.DeleteChunkRequest requests = 2;
   */
  requests: DeleteChunkRequest[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.BatchDeleteChunksRequest.
 * Use `create(BatchDeleteChunksRequestSchema)` to create a new message.
 */
export const BatchDeleteChunksRequestSchema: GenMessage<BatchDeleteChunksRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 25);

/**
 * Request for listing `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListChunksRequest
 */
export type ListChunksRequest = Message<"google.ai.generativelanguage.v1beta.ListChunksRequest"> & {
  /**
   * Required. The name of the `Document` containing `Chunk`s.
   * Example: `corpora/my-corpus-123/documents/the-doc-abc`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of `Chunk`s to return (per page).
   * The service may return fewer `Chunk`s.
   *
   * If unspecified, at most 10 `Chunk`s will be returned.
   * The maximum size limit is 100 `Chunk`s per page.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListChunks` call.
   *
   * Provide the `next_page_token` returned in the response as an argument to
   * the next request to retrieve the next page.
   *
   * When paginating, all other parameters provided to `ListChunks`
   * must match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListChunksRequest.
 * Use `create(ListChunksRequestSchema)` to create a new message.
 */
export const ListChunksRequestSchema: GenMessage<ListChunksRequest> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 26);

/**
 * Response from `ListChunks` containing a paginated list of `Chunk`s.
 * The `Chunk`s are sorted by ascending `chunk.create_time`.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ListChunksResponse
 */
export type ListChunksResponse = Message<"google.ai.generativelanguage.v1beta.ListChunksResponse"> & {
  /**
   * The returned `Chunk`s.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Chunk chunks = 1;
   */
  chunks: Chunk[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ListChunksResponse.
 * Use `create(ListChunksResponseSchema)` to create a new message.
 */
export const ListChunksResponseSchema: GenMessage<ListChunksResponse> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 27);

/**
 * An API for semantic search over a corpus of user uploaded content.
 *
 * @generated from service google.ai.generativelanguage.v1beta.RetrieverService
 */
export const RetrieverService: GenService<{
  /**
   * Creates an empty `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.CreateCorpus
   */
  createCorpus: {
    methodKind: "unary";
    input: typeof CreateCorpusRequestSchema;
    output: typeof CorpusSchema;
  },
  /**
   * Gets information about a specific `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.GetCorpus
   */
  getCorpus: {
    methodKind: "unary";
    input: typeof GetCorpusRequestSchema;
    output: typeof CorpusSchema;
  },
  /**
   * Updates a `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.UpdateCorpus
   */
  updateCorpus: {
    methodKind: "unary";
    input: typeof UpdateCorpusRequestSchema;
    output: typeof CorpusSchema;
  },
  /**
   * Deletes a `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.DeleteCorpus
   */
  deleteCorpus: {
    methodKind: "unary";
    input: typeof DeleteCorpusRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists all `Corpora` owned by the user.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.ListCorpora
   */
  listCorpora: {
    methodKind: "unary";
    input: typeof ListCorporaRequestSchema;
    output: typeof ListCorporaResponseSchema;
  },
  /**
   * Performs semantic search over a `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.QueryCorpus
   */
  queryCorpus: {
    methodKind: "unary";
    input: typeof QueryCorpusRequestSchema;
    output: typeof QueryCorpusResponseSchema;
  },
  /**
   * Creates an empty `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.CreateDocument
   */
  createDocument: {
    methodKind: "unary";
    input: typeof CreateDocumentRequestSchema;
    output: typeof DocumentSchema;
  },
  /**
   * Gets information about a specific `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.GetDocument
   */
  getDocument: {
    methodKind: "unary";
    input: typeof GetDocumentRequestSchema;
    output: typeof DocumentSchema;
  },
  /**
   * Updates a `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.UpdateDocument
   */
  updateDocument: {
    methodKind: "unary";
    input: typeof UpdateDocumentRequestSchema;
    output: typeof DocumentSchema;
  },
  /**
   * Deletes a `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.DeleteDocument
   */
  deleteDocument: {
    methodKind: "unary";
    input: typeof DeleteDocumentRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists all `Document`s in a `Corpus`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.ListDocuments
   */
  listDocuments: {
    methodKind: "unary";
    input: typeof ListDocumentsRequestSchema;
    output: typeof ListDocumentsResponseSchema;
  },
  /**
   * Performs semantic search over a `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.QueryDocument
   */
  queryDocument: {
    methodKind: "unary";
    input: typeof QueryDocumentRequestSchema;
    output: typeof QueryDocumentResponseSchema;
  },
  /**
   * Creates a `Chunk`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.CreateChunk
   */
  createChunk: {
    methodKind: "unary";
    input: typeof CreateChunkRequestSchema;
    output: typeof ChunkSchema;
  },
  /**
   * Batch create `Chunk`s.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.BatchCreateChunks
   */
  batchCreateChunks: {
    methodKind: "unary";
    input: typeof BatchCreateChunksRequestSchema;
    output: typeof BatchCreateChunksResponseSchema;
  },
  /**
   * Gets information about a specific `Chunk`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.GetChunk
   */
  getChunk: {
    methodKind: "unary";
    input: typeof GetChunkRequestSchema;
    output: typeof ChunkSchema;
  },
  /**
   * Updates a `Chunk`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.UpdateChunk
   */
  updateChunk: {
    methodKind: "unary";
    input: typeof UpdateChunkRequestSchema;
    output: typeof ChunkSchema;
  },
  /**
   * Batch update `Chunk`s.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.BatchUpdateChunks
   */
  batchUpdateChunks: {
    methodKind: "unary";
    input: typeof BatchUpdateChunksRequestSchema;
    output: typeof BatchUpdateChunksResponseSchema;
  },
  /**
   * Deletes a `Chunk`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.DeleteChunk
   */
  deleteChunk: {
    methodKind: "unary";
    input: typeof DeleteChunkRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Batch delete `Chunk`s.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.BatchDeleteChunks
   */
  batchDeleteChunks: {
    methodKind: "unary";
    input: typeof BatchDeleteChunksRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists all `Chunk`s in a `Document`.
   *
   * @generated from rpc google.ai.generativelanguage.v1beta.RetrieverService.ListChunks
   */
  listChunks: {
    methodKind: "unary";
    input: typeof ListChunksRequestSchema;
    output: typeof ListChunksResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_ai_generativelanguage_v1beta_retriever_service, 0);

