// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/ai/generativelanguage/v1beta/retriever.proto (package google.ai.generativelanguage.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/ai/generativelanguage/v1beta/retriever.proto.
 */
export const file_google_ai_generativelanguage_v1beta_retriever: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvYWkvZ2VuZXJhdGl2ZWxhbmd1YWdlL3YxYmV0YS9yZXRyaWV2ZXIucHJvdG8SI2dvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhIvcBCgZDb3JwdXMSFAoEbmFtZRgBIAEoCUIG4EEI4EEFEhkKDGRpc3BsYXlfbmFtZRgCIAEoCUID4EEBEjQKC2NyZWF0ZV90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC3VwZGF0ZV90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDOlDqQU0KKGdlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS9Db3JwdXMSEGNvcnBvcmEve2NvcnB1c30qB2NvcnBvcmEyBmNvcnB1cyLnAgoIRG9jdW1lbnQSFAoEbmFtZRgBIAEoCUIG4EEI4EEFEhkKDGRpc3BsYXlfbmFtZRgCIAEoCUID4EEBElEKD2N1c3RvbV9tZXRhZGF0YRgDIAMoCzIzLmdvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhLkN1c3RvbU1ldGFkYXRhQgPgQQESNAoLdXBkYXRlX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLY3JlYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQM6a+pBaAoqZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL0RvY3VtZW50EiVjb3Jwb3JhL3tjb3JwdXN9L2RvY3VtZW50cy97ZG9jdW1lbnR9Kglkb2N1bWVudHMyCGRvY3VtZW50IhwKClN0cmluZ0xpc3QSDgoGdmFsdWVzGAEgAygJIqoBCg5DdXN0b21NZXRhZGF0YRIWCgxzdHJpbmdfdmFsdWUYAiABKAlIABJMChFzdHJpbmdfbGlzdF92YWx1ZRgGIAEoCzIvLmdvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhLlN0cmluZ0xpc3RIABIXCg1udW1lcmljX3ZhbHVlGAcgASgCSAASEAoDa2V5GAEgASgJQgPgQQJCBwoFdmFsdWUiawoOTWV0YWRhdGFGaWx0ZXISEAoDa2V5GAEgASgJQgPgQQISRwoKY29uZGl0aW9ucxgCIAMoCzIuLmdvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhLkNvbmRpdGlvbkID4EECIq0CCglDb25kaXRpb24SFgoMc3RyaW5nX3ZhbHVlGAEgASgJSAASFwoNbnVtZXJpY192YWx1ZRgGIAEoAkgAEk8KCW9wZXJhdGlvbhgFIAEoDjI3Lmdvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhLkNvbmRpdGlvbi5PcGVyYXRvckID4EECIpQBCghPcGVyYXRvchIYChRPUEVSQVRPUl9VTlNQRUNJRklFRBAAEggKBExFU1MQARIOCgpMRVNTX0VRVUFMEAISCQoFRVFVQUwQAxIRCg1HUkVBVEVSX0VRVUFMEAQSCwoHR1JFQVRFUhAFEg0KCU5PVF9FUVVBTBAGEgwKCElOQ0xVREVTEAcSDAoIRVhDTFVERVMQCEIHCgV2YWx1ZSK6BAoFQ2h1bmsSFAoEbmFtZRgBIAEoCUIG4EEI4EEFEkEKBGRhdGEYAiABKAsyLi5nb29nbGUuYWkuZ2VuZXJhdGl2ZWxhbmd1YWdlLnYxYmV0YS5DaHVua0RhdGFCA+BBAhJRCg9jdXN0b21fbWV0YWRhdGEYAyADKAsyMy5nb29nbGUuYWkuZ2VuZXJhdGl2ZWxhbmd1YWdlLnYxYmV0YS5DdXN0b21NZXRhZGF0YUID4EEBEjQKC2NyZWF0ZV90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC3VwZGF0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEkQKBXN0YXRlGAYgASgOMjAuZ29vZ2xlLmFpLmdlbmVyYXRpdmVsYW5ndWFnZS52MWJldGEuQ2h1bmsuU3RhdGVCA+BBAyJgCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEhwKGFNUQVRFX1BFTkRJTkdfUFJPQ0VTU0lORxABEhAKDFNUQVRFX0FDVElWRRACEhAKDFNUQVRFX0ZBSUxFRBAKOnHqQW4KJ2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS9DaHVuaxI0Y29ycG9yYS97Y29ycHVzfS9kb2N1bWVudHMve2RvY3VtZW50fS9jaHVua3Mve2NodW5rfSoGY2h1bmtzMgVjaHVuayIrCglDaHVua0RhdGESFgoMc3RyaW5nX3ZhbHVlGAEgASgJSABCBgoEZGF0YUKaAQonY29tLmdvb2dsZS5haS5nZW5lcmF0aXZlbGFuZ3VhZ2UudjFiZXRhQg5SZXRyaWV2ZXJQcm90b1ABWl1jbG91ZC5nb29nbGUuY29tL2dvL2FpL2dlbmVyYXRpdmVsYW5ndWFnZS9hcGl2MWJldGEvZ2VuZXJhdGl2ZWxhbmd1YWdlcGI7Z2VuZXJhdGl2ZWxhbmd1YWdlcGJiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp]);

/**
 * A `Corpus` is a collection of `Document`s.
 * A project can create up to 5 corpora.
 *
 * @generated from message google.ai.generativelanguage.v1beta.Corpus
 */
export type Corpus = Message<"google.ai.generativelanguage.v1beta.Corpus"> & {
  /**
   * Immutable. Identifier. The `Corpus` resource name. The ID (name excluding
   * the "corpora/" prefix) can contain up to 40 characters that are lowercase
   * alphanumeric or dashes
   * (-). The ID cannot start or end with a dash. If the name is empty on
   * create, a unique name will be derived from `display_name` along with a 12
   * character random suffix.
   * Example: `corpora/my-awesome-corpora-123a456b789c`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The human-readable display name for the `Corpus`. The display
   * name must be no more than 512 characters in length, including spaces.
   * Example: "Docs on Semantic Retriever"
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Output only. The Timestamp of when the `Corpus` was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The Timestamp of when the `Corpus` was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.Corpus.
 * Use `create(CorpusSchema)` to create a new message.
 */
export const CorpusSchema: GenMessage<Corpus> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 0);

/**
 * A `Document` is a collection of `Chunk`s.
 * A `Corpus` can have a maximum of 10,000 `Document`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.Document
 */
export type Document = Message<"google.ai.generativelanguage.v1beta.Document"> & {
  /**
   * Immutable. Identifier. The `Document` resource name. The ID (name excluding
   * the "corpora/*\/documents/" prefix) can contain up to 40 characters that are
   * lowercase alphanumeric or dashes (-). The ID cannot start or end with a
   * dash. If the name is empty on create, a unique name will be derived from
   * `display_name` along with a 12 character random suffix.
   * Example: `corpora/{corpus_id}/documents/my-awesome-doc-123a456b789c`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The human-readable display name for the `Document`. The display
   * name must be no more than 512 characters in length, including spaces.
   * Example: "Semantic Retriever Documentation"
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Optional. User provided custom metadata stored as key-value pairs used for
   * querying. A `Document` can have a maximum of 20 `CustomMetadata`.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.CustomMetadata custom_metadata = 3;
   */
  customMetadata: CustomMetadata[];

  /**
   * Output only. The Timestamp of when the `Document` was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The Timestamp of when the `Document` was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.Document.
 * Use `create(DocumentSchema)` to create a new message.
 */
export const DocumentSchema: GenMessage<Document> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 1);

/**
 * User provided string values assigned to a single metadata key.
 *
 * @generated from message google.ai.generativelanguage.v1beta.StringList
 */
export type StringList = Message<"google.ai.generativelanguage.v1beta.StringList"> & {
  /**
   * The string values of the metadata to store.
   *
   * @generated from field: repeated string values = 1;
   */
  values: string[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.StringList.
 * Use `create(StringListSchema)` to create a new message.
 */
export const StringListSchema: GenMessage<StringList> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 2);

/**
 * User provided metadata stored as key-value pairs.
 *
 * @generated from message google.ai.generativelanguage.v1beta.CustomMetadata
 */
export type CustomMetadata = Message<"google.ai.generativelanguage.v1beta.CustomMetadata"> & {
  /**
   * @generated from oneof google.ai.generativelanguage.v1beta.CustomMetadata.value
   */
  value: {
    /**
     * The string value of the metadata to store.
     *
     * @generated from field: string string_value = 2;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * The StringList value of the metadata to store.
     *
     * @generated from field: google.ai.generativelanguage.v1beta.StringList string_list_value = 6;
     */
    value: StringList;
    case: "stringListValue";
  } | {
    /**
     * The numeric value of the metadata to store.
     *
     * @generated from field: float numeric_value = 7;
     */
    value: number;
    case: "numericValue";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The key of the metadata to store.
   *
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.CustomMetadata.
 * Use `create(CustomMetadataSchema)` to create a new message.
 */
export const CustomMetadataSchema: GenMessage<CustomMetadata> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 3);

/**
 * User provided filter to limit retrieval based on `Chunk` or `Document` level
 * metadata values.
 * Example (genre = drama OR genre = action):
 *   key = "document.custom_metadata.genre"
 *   conditions = [{string_value = "drama", operation = EQUAL},
 *                 {string_value = "action", operation = EQUAL}]
 *
 * @generated from message google.ai.generativelanguage.v1beta.MetadataFilter
 */
export type MetadataFilter = Message<"google.ai.generativelanguage.v1beta.MetadataFilter"> & {
  /**
   * Required. The key of the metadata to filter on.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Required. The `Condition`s for the given key that will trigger this filter.
   * Multiple `Condition`s are joined by logical ORs.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.Condition conditions = 2;
   */
  conditions: Condition[];
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.MetadataFilter.
 * Use `create(MetadataFilterSchema)` to create a new message.
 */
export const MetadataFilterSchema: GenMessage<MetadataFilter> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 4);

/**
 * Filter condition applicable to a single key.
 *
 * @generated from message google.ai.generativelanguage.v1beta.Condition
 */
export type Condition = Message<"google.ai.generativelanguage.v1beta.Condition"> & {
  /**
   * The value type must be consistent with the value type defined in the field
   * for the corresponding key. If the value types are not consistent, the
   * result will be an empty set. When the `CustomMetadata` has a `StringList`
   * value type, the filtering condition should use `string_value` paired with
   * an INCLUDES/EXCLUDES operation, otherwise the result will also be an empty
   * set.
   *
   * @generated from oneof google.ai.generativelanguage.v1beta.Condition.value
   */
  value: {
    /**
     * The string value to filter the metadata on.
     *
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * The numeric value to filter the metadata on.
     *
     * @generated from field: float numeric_value = 6;
     */
    value: number;
    case: "numericValue";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Operator applied to the given key-value pair to trigger the
   * condition.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Condition.Operator operation = 5;
   */
  operation: Condition_Operator;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.Condition.
 * Use `create(ConditionSchema)` to create a new message.
 */
export const ConditionSchema: GenMessage<Condition> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 5);

/**
 * Defines the valid operators that can be applied to a key-value pair.
 *
 * @generated from enum google.ai.generativelanguage.v1beta.Condition.Operator
 */
export enum Condition_Operator {
  /**
   * The default value. This value is unused.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * Supported by numeric.
   *
   * @generated from enum value: LESS = 1;
   */
  LESS = 1,

  /**
   * Supported by numeric.
   *
   * @generated from enum value: LESS_EQUAL = 2;
   */
  LESS_EQUAL = 2,

  /**
   * Supported by numeric & string.
   *
   * @generated from enum value: EQUAL = 3;
   */
  EQUAL = 3,

  /**
   * Supported by numeric.
   *
   * @generated from enum value: GREATER_EQUAL = 4;
   */
  GREATER_EQUAL = 4,

  /**
   * Supported by numeric.
   *
   * @generated from enum value: GREATER = 5;
   */
  GREATER = 5,

  /**
   * Supported by numeric & string.
   *
   * @generated from enum value: NOT_EQUAL = 6;
   */
  NOT_EQUAL = 6,

  /**
   * Supported by string only when `CustomMetadata` value type for the given
   * key has a `string_list_value`.
   *
   * @generated from enum value: INCLUDES = 7;
   */
  INCLUDES = 7,

  /**
   * Supported by string only when `CustomMetadata` value type for the given
   * key has a `string_list_value`.
   *
   * @generated from enum value: EXCLUDES = 8;
   */
  EXCLUDES = 8,
}

/**
 * Describes the enum google.ai.generativelanguage.v1beta.Condition.Operator.
 */
export const Condition_OperatorSchema: GenEnum<Condition_Operator> = /*@__PURE__*/
  enumDesc(file_google_ai_generativelanguage_v1beta_retriever, 5, 0);

/**
 * A `Chunk` is a subpart of a `Document` that is treated as an independent unit
 * for the purposes of vector representation and storage.
 * A `Corpus` can have a maximum of 1 million `Chunk`s.
 *
 * @generated from message google.ai.generativelanguage.v1beta.Chunk
 */
export type Chunk = Message<"google.ai.generativelanguage.v1beta.Chunk"> & {
  /**
   * Immutable. Identifier. The `Chunk` resource name. The ID (name excluding
   * the "corpora/*\/documents/*\/chunks/" prefix) can contain up to 40 characters
   * that are lowercase alphanumeric or dashes (-). The ID cannot start or end
   * with a dash. If the name is empty on create, a random 12-character unique
   * ID will be generated.
   * Example: `corpora/{corpus_id}/documents/{document_id}/chunks/123a456b789c`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The content for the `Chunk`, such as the text string.
   * The maximum number of tokens per chunk is 2043.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.ChunkData data = 2;
   */
  data?: ChunkData;

  /**
   * Optional. User provided custom metadata stored as key-value pairs.
   * The maximum number of `CustomMetadata` per chunk is 20.
   *
   * @generated from field: repeated google.ai.generativelanguage.v1beta.CustomMetadata custom_metadata = 3;
   */
  customMetadata: CustomMetadata[];

  /**
   * Output only. The Timestamp of when the `Chunk` was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Output only. The Timestamp of when the `Chunk` was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Current state of the `Chunk`.
   *
   * @generated from field: google.ai.generativelanguage.v1beta.Chunk.State state = 6;
   */
  state: Chunk_State;
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.Chunk.
 * Use `create(ChunkSchema)` to create a new message.
 */
export const ChunkSchema: GenMessage<Chunk> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 6);

/**
 * States for the lifecycle of a `Chunk`.
 *
 * @generated from enum google.ai.generativelanguage.v1beta.Chunk.State
 */
export enum Chunk_State {
  /**
   * The default value. This value is used if the state is omitted.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * `Chunk` is being processed (embedding and vector storage).
   *
   * @generated from enum value: STATE_PENDING_PROCESSING = 1;
   */
  PENDING_PROCESSING = 1,

  /**
   * `Chunk` is processed and available for querying.
   *
   * @generated from enum value: STATE_ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * `Chunk` failed processing.
   *
   * @generated from enum value: STATE_FAILED = 10;
   */
  FAILED = 10,
}

/**
 * Describes the enum google.ai.generativelanguage.v1beta.Chunk.State.
 */
export const Chunk_StateSchema: GenEnum<Chunk_State> = /*@__PURE__*/
  enumDesc(file_google_ai_generativelanguage_v1beta_retriever, 6, 0);

/**
 * Extracted data that represents the `Chunk` content.
 *
 * @generated from message google.ai.generativelanguage.v1beta.ChunkData
 */
export type ChunkData = Message<"google.ai.generativelanguage.v1beta.ChunkData"> & {
  /**
   * @generated from oneof google.ai.generativelanguage.v1beta.ChunkData.data
   */
  data: {
    /**
     * The `Chunk` content as a string.
     * The maximum number of tokens per chunk is 2043.
     *
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.ai.generativelanguage.v1beta.ChunkData.
 * Use `create(ChunkDataSchema)` to create a new message.
 */
export const ChunkDataSchema: GenMessage<ChunkData> = /*@__PURE__*/
  messageDesc(file_google_ai_generativelanguage_v1beta_retriever, 7);

