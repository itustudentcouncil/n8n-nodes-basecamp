// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1beta2/firestore_admin.proto (package google.firestore.admin.v1beta2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { Field, FieldSchema } from "./field_pb";
import { file_google_firestore_admin_v1beta2_field } from "./field_pb";
import type { Index, IndexSchema } from "./index_pb";
import { file_google_firestore_admin_v1beta2_index } from "./index_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import { file_google_api_client } from "../../../api/client_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1beta2/firestore_admin.proto.
 */
export const file_google_firestore_admin_v1beta2_firestore_admin: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxYmV0YTIvZmlyZXN0b3JlX2FkbWluLnByb3RvEh5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIiWgoSQ3JlYXRlSW5kZXhSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRI0CgVpbmRleBgCIAEoCzIlLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5JbmRleCJbChJMaXN0SW5kZXhlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSJmChNMaXN0SW5kZXhlc1Jlc3BvbnNlEjYKB2luZGV4ZXMYASADKAsyJS5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuSW5kZXgSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIh8KD0dldEluZGV4UmVxdWVzdBIMCgRuYW1lGAEgASgJIiIKEkRlbGV0ZUluZGV4UmVxdWVzdBIMCgRuYW1lGAEgASgJInsKElVwZGF0ZUZpZWxkUmVxdWVzdBI0CgVmaWVsZBgBIAEoCzIlLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5GaWVsZBIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siHwoPR2V0RmllbGRSZXF1ZXN0EgwKBG5hbWUYASABKAkiWgoRTGlzdEZpZWxkc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSJkChJMaXN0RmllbGRzUmVzcG9uc2USNQoGZmllbGRzGAEgAygLMiUuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyLkZpZWxkEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJZChZFeHBvcnREb2N1bWVudHNSZXF1ZXN0EgwKBG5hbWUYASABKAkSFgoOY29sbGVjdGlvbl9pZHMYAiADKAkSGQoRb3V0cHV0X3VyaV9wcmVmaXgYAyABKAkiWAoWSW1wb3J0RG9jdW1lbnRzUmVxdWVzdBIMCgRuYW1lGAEgASgJEhYKDmNvbGxlY3Rpb25faWRzGAIgAygJEhgKEGlucHV0X3VyaV9wcmVmaXgYAyABKAky6w0KDkZpcmVzdG9yZUFkbWluErQBCgtDcmVhdGVJbmRleBIyLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5DcmVhdGVJbmRleFJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIlKC0+STAkw6BWluZGV4IkMvdjFiZXRhMi97cGFyZW50PXByb2plY3RzLyovZGF0YWJhc2VzLyovY29sbGVjdGlvbkdyb3Vwcy8qfS9pbmRleGVzEsMBCgtMaXN0SW5kZXhlcxIyLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5MaXN0SW5kZXhlc1JlcXVlc3QaMy5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuTGlzdEluZGV4ZXNSZXNwb25zZSJLgtPkkwJFEkMvdjFiZXRhMi97cGFyZW50PXByb2plY3RzLyovZGF0YWJhc2VzLyovY29sbGVjdGlvbkdyb3Vwcy8qfS9pbmRleGVzEq8BCghHZXRJbmRleBIvLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5HZXRJbmRleFJlcXVlc3QaJS5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuSW5kZXgiS4LT5JMCRRJDL3YxYmV0YTIve25hbWU9cHJvamVjdHMvKi9kYXRhYmFzZXMvKi9jb2xsZWN0aW9uR3JvdXBzLyovaW5kZXhlcy8qfRKmAQoLRGVsZXRlSW5kZXgSMi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuRGVsZXRlSW5kZXhSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IkuC0+STAkUqQy92MWJldGEyL3tuYW1lPXByb2plY3RzLyovZGF0YWJhc2VzLyovY29sbGVjdGlvbkdyb3Vwcy8qL2luZGV4ZXMvKn0SrgEKCEdldEZpZWxkEi8uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyLkdldEZpZWxkUmVxdWVzdBolLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5GaWVsZCJKgtPkkwJEEkIvdjFiZXRhMi97bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2NvbGxlY3Rpb25Hcm91cHMvKi9maWVsZHMvKn0SuQEKC1VwZGF0ZUZpZWxkEjIuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyLlVwZGF0ZUZpZWxkUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iV4LT5JMCUToFZmllbGQySC92MWJldGEyL3tmaWVsZC5uYW1lPXByb2plY3RzLyovZGF0YWJhc2VzLyovY29sbGVjdGlvbkdyb3Vwcy8qL2ZpZWxkcy8qfRK/AQoKTGlzdEZpZWxkcxIxLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5MaXN0RmllbGRzUmVxdWVzdBoyLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5MaXN0RmllbGRzUmVzcG9uc2UiSoLT5JMCRBJCL3YxYmV0YTIve3BhcmVudD1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2NvbGxlY3Rpb25Hcm91cHMvKn0vZmllbGRzEqsBCg9FeHBvcnREb2N1bWVudHMSNi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuRXhwb3J0RG9jdW1lbnRzUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iQYLT5JMCOzoBKiI2L3YxYmV0YTIve25hbWU9cHJvamVjdHMvKi9kYXRhYmFzZXMvKn06ZXhwb3J0RG9jdW1lbnRzEqsBCg9JbXBvcnREb2N1bWVudHMSNi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuSW1wb3J0RG9jdW1lbnRzUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iQYLT5JMCOzoBKiI2L3YxYmV0YTIve25hbWU9cHJvamVjdHMvKi9kYXRhYmFzZXMvKn06aW1wb3J0RG9jdW1lbnRzGnbKQRhmaXJlc3RvcmUuZ29vZ2xlYXBpcy5jb23SQVhodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZGF0YXN0b3JlQqkBCiJjb20uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyQhNGaXJlc3RvcmVBZG1pblByb3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vZmlyZXN0b3JlL2FkbWluL2FwaXYxYmV0YTIvYWRtaW5wYjthZG1pbnBiogIER0NGU6oCJEdvb2dsZS5DbG91ZC5GaXJlc3RvcmUuQWRtaW4uVjFCZXRhMmIGcHJvdG8z", [file_google_api_annotations, file_google_firestore_admin_v1beta2_field, file_google_firestore_admin_v1beta2_index, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_api_client]);

/**
 * The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1beta2.FirestoreAdmin.CreateIndex].
 *
 * @generated from message google.firestore.admin.v1beta2.CreateIndexRequest
 */
export type CreateIndexRequest = Message<"google.firestore.admin.v1beta2.CreateIndexRequest"> & {
  /**
   * A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The composite index to create.
   *
   * @generated from field: google.firestore.admin.v1beta2.Index index = 2;
   */
  index?: Index;
};

/**
 * Describes the message google.firestore.admin.v1beta2.CreateIndexRequest.
 * Use `create(CreateIndexRequestSchema)` to create a new message.
 */
export const CreateIndexRequestSchema: GenMessage<CreateIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 0);

/**
 * The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta2.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta2.ListIndexesRequest
 */
export type ListIndexesRequest = Message<"google.firestore.admin.v1beta2.ListIndexesRequest"> & {
  /**
   * A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter to apply to list results.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * The number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * A page token, returned from a previous call to
   * [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta2.FirestoreAdmin.ListIndexes], that may be used to get the next
   * page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ListIndexesRequest.
 * Use `create(ListIndexesRequestSchema)` to create a new message.
 */
export const ListIndexesRequestSchema: GenMessage<ListIndexesRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 1);

/**
 * The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta2.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta2.ListIndexesResponse
 */
export type ListIndexesResponse = Message<"google.firestore.admin.v1beta2.ListIndexesResponse"> & {
  /**
   * The requested indexes.
   *
   * @generated from field: repeated google.firestore.admin.v1beta2.Index indexes = 1;
   */
  indexes: Index[];

  /**
   * A page token that may be used to request another page of results. If blank,
   * this is the last page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ListIndexesResponse.
 * Use `create(ListIndexesResponseSchema)` to create a new message.
 */
export const ListIndexesResponseSchema: GenMessage<ListIndexesResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 2);

/**
 * The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1beta2.FirestoreAdmin.GetIndex].
 *
 * @generated from message google.firestore.admin.v1beta2.GetIndexRequest
 */
export type GetIndexRequest = Message<"google.firestore.admin.v1beta2.GetIndexRequest"> & {
  /**
   * A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.GetIndexRequest.
 * Use `create(GetIndexRequestSchema)` to create a new message.
 */
export const GetIndexRequestSchema: GenMessage<GetIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 3);

/**
 * The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1beta2.FirestoreAdmin.DeleteIndex].
 *
 * @generated from message google.firestore.admin.v1beta2.DeleteIndexRequest
 */
export type DeleteIndexRequest = Message<"google.firestore.admin.v1beta2.DeleteIndexRequest"> & {
  /**
   * A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.DeleteIndexRequest.
 * Use `create(DeleteIndexRequestSchema)` to create a new message.
 */
export const DeleteIndexRequestSchema: GenMessage<DeleteIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 4);

/**
 * The request for [FirestoreAdmin.UpdateField][google.firestore.admin.v1beta2.FirestoreAdmin.UpdateField].
 *
 * @generated from message google.firestore.admin.v1beta2.UpdateFieldRequest
 */
export type UpdateFieldRequest = Message<"google.firestore.admin.v1beta2.UpdateFieldRequest"> & {
  /**
   * The field to be updated.
   *
   * @generated from field: google.firestore.admin.v1beta2.Field field = 1;
   */
  field?: Field;

  /**
   * A mask, relative to the field. If specified, only configuration specified
   * by this field_mask will be updated in the field.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.firestore.admin.v1beta2.UpdateFieldRequest.
 * Use `create(UpdateFieldRequestSchema)` to create a new message.
 */
export const UpdateFieldRequestSchema: GenMessage<UpdateFieldRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 5);

/**
 * The request for [FirestoreAdmin.GetField][google.firestore.admin.v1beta2.FirestoreAdmin.GetField].
 *
 * @generated from message google.firestore.admin.v1beta2.GetFieldRequest
 */
export type GetFieldRequest = Message<"google.firestore.admin.v1beta2.GetFieldRequest"> & {
  /**
   * A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.GetFieldRequest.
 * Use `create(GetFieldRequestSchema)` to create a new message.
 */
export const GetFieldRequestSchema: GenMessage<GetFieldRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 6);

/**
 * The request for [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields].
 *
 * @generated from message google.firestore.admin.v1beta2.ListFieldsRequest
 */
export type ListFieldsRequest = Message<"google.firestore.admin.v1beta2.ListFieldsRequest"> & {
  /**
   * A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter to apply to list results. Currently,
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] only supports listing fields
   * that have been explicitly overridden. To issue this query, call
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] with the filter set to
   * `indexConfig.usesAncestorConfig:false`.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * The number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * A page token, returned from a previous call to
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields], that may be used to get the next
   * page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ListFieldsRequest.
 * Use `create(ListFieldsRequestSchema)` to create a new message.
 */
export const ListFieldsRequestSchema: GenMessage<ListFieldsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 7);

/**
 * The response for [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields].
 *
 * @generated from message google.firestore.admin.v1beta2.ListFieldsResponse
 */
export type ListFieldsResponse = Message<"google.firestore.admin.v1beta2.ListFieldsResponse"> & {
  /**
   * The requested fields.
   *
   * @generated from field: repeated google.firestore.admin.v1beta2.Field fields = 1;
   */
  fields: Field[];

  /**
   * A page token that may be used to request another page of results. If blank,
   * this is the last page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ListFieldsResponse.
 * Use `create(ListFieldsResponseSchema)` to create a new message.
 */
export const ListFieldsResponseSchema: GenMessage<ListFieldsResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 8);

/**
 * The request for [FirestoreAdmin.ExportDocuments][google.firestore.admin.v1beta2.FirestoreAdmin.ExportDocuments].
 *
 * @generated from message google.firestore.admin.v1beta2.ExportDocumentsRequest
 */
export type ExportDocumentsRequest = Message<"google.firestore.admin.v1beta2.ExportDocumentsRequest"> & {
  /**
   * Database to export. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection ids to export. Unspecified means all collections.
   *
   * @generated from field: repeated string collection_ids = 2;
   */
  collectionIds: string[];

  /**
   * The output URI. Currently only supports Google Cloud Storage URIs of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
   * of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
   * Google Cloud Storage namespace path. When
   * choosing a name, be sure to consider Google Cloud Storage naming
   * guidelines: https://cloud.google.com/storage/docs/naming.
   * If the URI is a bucket (without a namespace path), a prefix will be
   * generated based on the start time.
   *
   * @generated from field: string output_uri_prefix = 3;
   */
  outputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ExportDocumentsRequest.
 * Use `create(ExportDocumentsRequestSchema)` to create a new message.
 */
export const ExportDocumentsRequestSchema: GenMessage<ExportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 9);

/**
 * The request for [FirestoreAdmin.ImportDocuments][google.firestore.admin.v1beta2.FirestoreAdmin.ImportDocuments].
 *
 * @generated from message google.firestore.admin.v1beta2.ImportDocumentsRequest
 */
export type ImportDocumentsRequest = Message<"google.firestore.admin.v1beta2.ImportDocumentsRequest"> & {
  /**
   * Database to import into. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection ids to import. Unspecified means all collections included
   * in the import.
   *
   * @generated from field: repeated string collection_ids = 2;
   */
  collectionIds: string[];

  /**
   * Location of the exported files.
   * This must match the output_uri_prefix of an ExportDocumentsResponse from
   * an export that has completed successfully.
   * See:
   * [google.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix][google.firestore.admin.v1beta2.ExportDocumentsResponse.output_uri_prefix].
   *
   * @generated from field: string input_uri_prefix = 3;
   */
  inputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta2.ImportDocumentsRequest.
 * Use `create(ImportDocumentsRequestSchema)` to create a new message.
 */
export const ImportDocumentsRequestSchema: GenMessage<ImportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_firestore_admin, 10);

/**
 * Operations are created by service `FirestoreAdmin`, but are accessed via
 * service `google.longrunning.Operations`.
 *
 * @generated from service google.firestore.admin.v1beta2.FirestoreAdmin
 */
export const FirestoreAdmin: GenService<{
  /**
   * Creates a composite index. This returns a [google.longrunning.Operation][google.longrunning.Operation]
   * which may be used to track the status of the creation. The metadata for
   * the operation will be the type [IndexOperationMetadata][google.firestore.admin.v1beta2.IndexOperationMetadata].
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.CreateIndex
   */
  createIndex: {
    methodKind: "unary";
    input: typeof CreateIndexRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists composite indexes.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.ListIndexes
   */
  listIndexes: {
    methodKind: "unary";
    input: typeof ListIndexesRequestSchema;
    output: typeof ListIndexesResponseSchema;
  },
  /**
   * Gets a composite index.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.GetIndex
   */
  getIndex: {
    methodKind: "unary";
    input: typeof GetIndexRequestSchema;
    output: typeof IndexSchema;
  },
  /**
   * Deletes a composite index.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.DeleteIndex
   */
  deleteIndex: {
    methodKind: "unary";
    input: typeof DeleteIndexRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets the metadata and configuration for a Field.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.GetField
   */
  getField: {
    methodKind: "unary";
    input: typeof GetFieldRequestSchema;
    output: typeof FieldSchema;
  },
  /**
   * Updates a field configuration. Currently, field updates apply only to
   * single field index configuration. However, calls to
   * [FirestoreAdmin.UpdateField][google.firestore.admin.v1beta2.FirestoreAdmin.UpdateField] should provide a field mask to avoid
   * changing any configuration that the caller isn't aware of. The field mask
   * should be specified as: `{ paths: "index_config" }`.
   *
   * This call returns a [google.longrunning.Operation][google.longrunning.Operation] which may be used to
   * track the status of the field update. The metadata for
   * the operation will be the type [FieldOperationMetadata][google.firestore.admin.v1beta2.FieldOperationMetadata].
   *
   * To configure the default field settings for the database, use
   * the special `Field` with resource name:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.UpdateField
   */
  updateField: {
    methodKind: "unary";
    input: typeof UpdateFieldRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists the field configuration and metadata for this database.
   *
   * Currently, [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] only supports listing fields
   * that have been explicitly overridden. To issue this query, call
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1beta2.FirestoreAdmin.ListFields] with the filter set to
   * `indexConfig.usesAncestorConfig:false`.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.ListFields
   */
  listFields: {
    methodKind: "unary";
    input: typeof ListFieldsRequestSchema;
    output: typeof ListFieldsResponseSchema;
  },
  /**
   * Exports a copy of all or a subset of documents from Google Cloud Firestore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * documents may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.ExportDocuments
   */
  exportDocuments: {
    methodKind: "unary";
    input: typeof ExportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports documents into Google Cloud Firestore. Existing documents with the
   * same name are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportDocuments operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Firestore.
   *
   * @generated from rpc google.firestore.admin.v1beta2.FirestoreAdmin.ImportDocuments
   */
  importDocuments: {
    methodKind: "unary";
    input: typeof ImportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_firestore_admin_v1beta2_firestore_admin, 0);

