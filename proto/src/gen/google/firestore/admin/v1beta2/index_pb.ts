// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1beta2/index.proto (package google.firestore.admin.v1beta2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1beta2/index.proto.
 */
export const file_google_firestore_admin_v1beta2_index: GenFile = /*@__PURE__*/
  fileDesc("Cipnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxYmV0YTIvaW5kZXgucHJvdG8SHmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMiLABQoFSW5kZXgSDAoEbmFtZRgBIAEoCRJFCgtxdWVyeV9zY29wZRgCIAEoDjIwLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5JbmRleC5RdWVyeVNjb3BlEkAKBmZpZWxkcxgDIAMoCzIwLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5JbmRleC5JbmRleEZpZWxkEjoKBXN0YXRlGAQgASgOMisuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyLkluZGV4LlN0YXRlGscCCgpJbmRleEZpZWxkEhIKCmZpZWxkX3BhdGgYASABKAkSRwoFb3JkZXIYAiABKA4yNi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTIuSW5kZXguSW5kZXhGaWVsZC5PcmRlckgAElQKDGFycmF5X2NvbmZpZxgDIAEoDjI8Lmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMi5JbmRleC5JbmRleEZpZWxkLkFycmF5Q29uZmlnSAAiPQoFT3JkZXISFQoRT1JERVJfVU5TUEVDSUZJRUQQABINCglBU0NFTkRJTkcQARIOCgpERVNDRU5ESU5HEAIiOQoLQXJyYXlDb25maWcSHAoYQVJSQVlfQ09ORklHX1VOU1BFQ0lGSUVEEAASDAoIQ09OVEFJTlMQAUIMCgp2YWx1ZV9tb2RlIk8KClF1ZXJ5U2NvcGUSGwoXUVVFUllfU0NPUEVfVU5TUEVDSUZJRUQQABIOCgpDT0xMRUNUSU9OEAESFAoQQ09MTEVDVElPTl9HUk9VUBACIkkKBVN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASDAoIQ1JFQVRJTkcQARIJCgVSRUFEWRACEhAKDE5FRURTX1JFUEFJUhADQqABCiJjb20uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGEyQgpJbmRleFByb3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vZmlyZXN0b3JlL2FkbWluL2FwaXYxYmV0YTIvYWRtaW5wYjthZG1pbnBiogIER0NGU6oCJEdvb2dsZS5DbG91ZC5GaXJlc3RvcmUuQWRtaW4uVjFCZXRhMmIGcHJvdG8z", [file_google_api_annotations]);

/**
 * Cloud Firestore indexes enable simple and complex queries against
 * documents in a database.
 *
 * @generated from message google.firestore.admin.v1beta2.Index
 */
export type Index = Message<"google.firestore.admin.v1beta2.Index"> & {
  /**
   * Output only. A server defined name for this index.
   * The form of this name for composite indexes will be:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{composite_index_id}`
   * For single field indexes, this field will be empty.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Indexes with a collection query scope specified allow queries
   * against a collection that is the child of a specific document, specified at
   * query time, and that has the same collection id.
   *
   * Indexes with a collection group query scope specified allow queries against
   * all collections descended from a specific document, specified at query
   * time, and that have the same collection id as this index.
   *
   * @generated from field: google.firestore.admin.v1beta2.Index.QueryScope query_scope = 2;
   */
  queryScope: Index_QueryScope;

  /**
   * The fields supported by this index.
   *
   * For composite indexes, this is always 2 or more fields.
   * The last field entry is always for the field path `__name__`. If, on
   * creation, `__name__` was not specified as the last field, it will be added
   * automatically with the same direction as that of the last field defined. If
   * the final field in a composite index is not directional, the `__name__`
   * will be ordered ASCENDING (unless explicitly specified).
   *
   * For single field indexes, this will always be exactly one entry with a
   * field path equal to the field path of the associated field.
   *
   * @generated from field: repeated google.firestore.admin.v1beta2.Index.IndexField fields = 3;
   */
  fields: Index_IndexField[];

  /**
   * Output only. The serving state of the index.
   *
   * @generated from field: google.firestore.admin.v1beta2.Index.State state = 4;
   */
  state: Index_State;
};

/**
 * Describes the message google.firestore.admin.v1beta2.Index.
 * Use `create(IndexSchema)` to create a new message.
 */
export const IndexSchema: GenMessage<Index> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_index, 0);

/**
 * A field in an index.
 * The field_path describes which field is indexed, the value_mode describes
 * how the field value is indexed.
 *
 * @generated from message google.firestore.admin.v1beta2.Index.IndexField
 */
export type Index_IndexField = Message<"google.firestore.admin.v1beta2.Index.IndexField"> & {
  /**
   * Can be __name__.
   * For single field indexes, this must match the name of the field or may
   * be omitted.
   *
   * @generated from field: string field_path = 1;
   */
  fieldPath: string;

  /**
   * How the field value is indexed.
   *
   * @generated from oneof google.firestore.admin.v1beta2.Index.IndexField.value_mode
   */
  valueMode: {
    /**
     * Indicates that this field supports ordering by the specified order or
     * comparing using =, <, <=, >, >=.
     *
     * @generated from field: google.firestore.admin.v1beta2.Index.IndexField.Order order = 2;
     */
    value: Index_IndexField_Order;
    case: "order";
  } | {
    /**
     * Indicates that this field supports operations on `array_value`s.
     *
     * @generated from field: google.firestore.admin.v1beta2.Index.IndexField.ArrayConfig array_config = 3;
     */
    value: Index_IndexField_ArrayConfig;
    case: "arrayConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.admin.v1beta2.Index.IndexField.
 * Use `create(Index_IndexFieldSchema)` to create a new message.
 */
export const Index_IndexFieldSchema: GenMessage<Index_IndexField> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta2_index, 0, 0);

/**
 * The supported orderings.
 *
 * @generated from enum google.firestore.admin.v1beta2.Index.IndexField.Order
 */
export enum Index_IndexField_Order {
  /**
   * The ordering is unspecified. Not a valid option.
   *
   * @generated from enum value: ORDER_UNSPECIFIED = 0;
   */
  ORDER_UNSPECIFIED = 0,

  /**
   * The field is ordered by ascending field value.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * The field is ordered by descending field value.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum google.firestore.admin.v1beta2.Index.IndexField.Order.
 */
export const Index_IndexField_OrderSchema: GenEnum<Index_IndexField_Order> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta2_index, 0, 0, 0);

/**
 * The supported array value configurations.
 *
 * @generated from enum google.firestore.admin.v1beta2.Index.IndexField.ArrayConfig
 */
export enum Index_IndexField_ArrayConfig {
  /**
   * The index does not support additional array queries.
   *
   * @generated from enum value: ARRAY_CONFIG_UNSPECIFIED = 0;
   */
  ARRAY_CONFIG_UNSPECIFIED = 0,

  /**
   * The index supports array containment queries.
   *
   * @generated from enum value: CONTAINS = 1;
   */
  CONTAINS = 1,
}

/**
 * Describes the enum google.firestore.admin.v1beta2.Index.IndexField.ArrayConfig.
 */
export const Index_IndexField_ArrayConfigSchema: GenEnum<Index_IndexField_ArrayConfig> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta2_index, 0, 0, 1);

/**
 * Query Scope defines the scope at which a query is run. This is specified on
 * a StructuredQuery's `from` field.
 *
 * @generated from enum google.firestore.admin.v1beta2.Index.QueryScope
 */
export enum Index_QueryScope {
  /**
   * The query scope is unspecified. Not a valid option.
   *
   * @generated from enum value: QUERY_SCOPE_UNSPECIFIED = 0;
   */
  QUERY_SCOPE_UNSPECIFIED = 0,

  /**
   * Indexes with a collection query scope specified allow queries
   * against a collection that is the child of a specific document, specified
   * at query time, and that has the collection id specified by the index.
   *
   * @generated from enum value: COLLECTION = 1;
   */
  COLLECTION = 1,

  /**
   * Indexes with a collection group query scope specified allow queries
   * against all collections that has the collection id specified by the
   * index.
   *
   * @generated from enum value: COLLECTION_GROUP = 2;
   */
  COLLECTION_GROUP = 2,
}

/**
 * Describes the enum google.firestore.admin.v1beta2.Index.QueryScope.
 */
export const Index_QueryScopeSchema: GenEnum<Index_QueryScope> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta2_index, 0, 0);

/**
 * The state of an index. During index creation, an index will be in the
 * `CREATING` state. If the index is created successfully, it will transition
 * to the `READY` state. If the index creation encounters a problem, the index
 * will transition to the `NEEDS_REPAIR` state.
 *
 * @generated from enum google.firestore.admin.v1beta2.Index.State
 */
export enum Index_State {
  /**
   * The state is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The index is being created.
   * There is an active long-running operation for the index.
   * The index is updated when writing a document.
   * Some index data may exist.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The index is ready to be used.
   * The index is updated when writing a document.
   * The index is fully populated from all stored documents it applies to.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * The index was being created, but something went wrong.
   * There is no active long-running operation for the index,
   * and the most recently finished long-running operation failed.
   * The index is not updated when writing a document.
   * Some index data may exist.
   * Use the google.longrunning.Operations API to determine why the operation
   * that last attempted to create this index failed, then re-create the
   * index.
   *
   * @generated from enum value: NEEDS_REPAIR = 3;
   */
  NEEDS_REPAIR = 3,
}

/**
 * Describes the enum google.firestore.admin.v1beta2.Index.State.
 */
export const Index_StateSchema: GenEnum<Index_State> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta2_index, 0, 1);

