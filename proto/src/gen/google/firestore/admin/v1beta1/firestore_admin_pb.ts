// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1beta1/firestore_admin.proto (package google.firestore.admin.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { Index, IndexSchema } from "./index_pb";
import { file_google_firestore_admin_v1beta1_index } from "./index_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_api_client } from "../../../api/client_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1beta1/firestore_admin.proto.
 */
export const file_google_firestore_admin_v1beta1_firestore_admin: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxYmV0YTEvZmlyZXN0b3JlX2FkbWluLnByb3RvEh5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEigAMKFkluZGV4T3BlcmF0aW9uTWV0YWRhdGESLgoKc3RhcnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg0KBWluZGV4GAMgASgJElwKDm9wZXJhdGlvbl90eXBlGAQgASgOMkQuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGExLkluZGV4T3BlcmF0aW9uTWV0YWRhdGEuT3BlcmF0aW9uVHlwZRIRCgljYW5jZWxsZWQYBSABKAgSQwoRZG9jdW1lbnRfcHJvZ3Jlc3MYBiABKAsyKC5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuUHJvZ3Jlc3MiQwoNT3BlcmF0aW9uVHlwZRIeChpPUEVSQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEhIKDkNSRUFUSU5HX0lOREVYEAEiOgoIUHJvZ3Jlc3MSFgoOd29ya19jb21wbGV0ZWQYASABKAMSFgoOd29ya19lc3RpbWF0ZWQYAiABKAMiWgoSQ3JlYXRlSW5kZXhSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRI0CgVpbmRleBgCIAEoCzIlLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5JbmRleCIfCg9HZXRJbmRleFJlcXVlc3QSDAoEbmFtZRgBIAEoCSJbChJMaXN0SW5kZXhlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEg4KBmZpbHRlchgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSIiChJEZWxldGVJbmRleFJlcXVlc3QSDAoEbmFtZRgBIAEoCSJmChNMaXN0SW5kZXhlc1Jlc3BvbnNlEjYKB2luZGV4ZXMYASADKAsyJS5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuSW5kZXgSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIlkKFkV4cG9ydERvY3VtZW50c1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIWCg5jb2xsZWN0aW9uX2lkcxgDIAMoCRIZChFvdXRwdXRfdXJpX3ByZWZpeBgEIAEoCSJYChZJbXBvcnREb2N1bWVudHNSZXF1ZXN0EgwKBG5hbWUYASABKAkSFgoOY29sbGVjdGlvbl9pZHMYAyADKAkSGAoQaW5wdXRfdXJpX3ByZWZpeBgEIAEoCSI0ChdFeHBvcnREb2N1bWVudHNSZXNwb25zZRIZChFvdXRwdXRfdXJpX3ByZWZpeBgBIAEoCSL7AgoXRXhwb3J0RG9jdW1lbnRzTWV0YWRhdGESLgoKc3RhcnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkcKD29wZXJhdGlvbl9zdGF0ZRgDIAEoDjIuLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5PcGVyYXRpb25TdGF0ZRJEChJwcm9ncmVzc19kb2N1bWVudHMYBCABKAsyKC5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuUHJvZ3Jlc3MSQAoOcHJvZ3Jlc3NfYnl0ZXMYBSABKAsyKC5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuUHJvZ3Jlc3MSFgoOY29sbGVjdGlvbl9pZHMYBiADKAkSGQoRb3V0cHV0X3VyaV9wcmVmaXgYByABKAki+gIKF0ltcG9ydERvY3VtZW50c01ldGFkYXRhEi4KCnN0YXJ0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJHCg9vcGVyYXRpb25fc3RhdGUYAyABKA4yLi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuT3BlcmF0aW9uU3RhdGUSRAoScHJvZ3Jlc3NfZG9jdW1lbnRzGAQgASgLMiguZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGExLlByb2dyZXNzEkAKDnByb2dyZXNzX2J5dGVzGAUgASgLMiguZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGExLlByb2dyZXNzEhYKDmNvbGxlY3Rpb25faWRzGAYgAygJEhgKEGlucHV0X3VyaV9wcmVmaXgYByABKAkqlAEKDk9wZXJhdGlvblN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASEAoMSU5JVElBTElaSU5HEAESDgoKUFJPQ0VTU0lORxACEg4KCkNBTkNFTExJTkcQAxIOCgpGSU5BTElaSU5HEAQSDgoKU1VDQ0VTU0ZVTBAFEgoKBkZBSUxFRBAGEg0KCUNBTkNFTExFRBAHMvAICg5GaXJlc3RvcmVBZG1pbhKhAQoLQ3JlYXRlSW5kZXgSMi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuQ3JlYXRlSW5kZXhSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiI/gtPkkwI5OgVpbmRleCIwL3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qfS9pbmRleGVzErABCgtMaXN0SW5kZXhlcxIyLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5MaXN0SW5kZXhlc1JlcXVlc3QaMy5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTEuTGlzdEluZGV4ZXNSZXNwb25zZSI4gtPkkwIyEjAvdjFiZXRhMS97cGFyZW50PXByb2plY3RzLyovZGF0YWJhc2VzLyp9L2luZGV4ZXMSnAEKCEdldEluZGV4Ei8uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGExLkdldEluZGV4UmVxdWVzdBolLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5JbmRleCI4gtPkkwIyEjAvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2luZGV4ZXMvKn0SkwEKC0RlbGV0ZUluZGV4EjIuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MWJldGExLkRlbGV0ZUluZGV4UmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI4gtPkkwIyKjAvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qL2luZGV4ZXMvKn0SqwEKD0V4cG9ydERvY3VtZW50cxI2Lmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5FeHBvcnREb2N1bWVudHNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJBgtPkkwI7OgEqIjYvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qfTpleHBvcnREb2N1bWVudHMSqwEKD0ltcG9ydERvY3VtZW50cxI2Lmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFiZXRhMS5JbXBvcnREb2N1bWVudHNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJBgtPkkwI7OgEqIjYvdjFiZXRhMS97bmFtZT1wcm9qZWN0cy8qL2RhdGFiYXNlcy8qfTppbXBvcnREb2N1bWVudHMadspBGGZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbdJBWGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kYXRhc3RvcmVCqQEKImNvbS5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxYmV0YTFCE0ZpcmVzdG9yZUFkbWluUHJvdG9QAVo+Y2xvdWQuZ29vZ2xlLmNvbS9nby9maXJlc3RvcmUvYWRtaW4vYXBpdjFiZXRhMS9hZG1pbnBiO2FkbWlucGKiAgRHQ0ZTqgIkR29vZ2xlLkNsb3VkLkZpcmVzdG9yZS5BZG1pbi5WMUJldGExYgZwcm90bzM", [file_google_api_annotations, file_google_firestore_admin_v1beta1_index, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_timestamp, file_google_api_client]);

/**
 * Metadata for index operations. This metadata populates
 * the metadata field of [google.longrunning.Operation][google.longrunning.Operation].
 *
 * @generated from message google.firestore.admin.v1beta1.IndexOperationMetadata
 */
export type IndexOperationMetadata = Message<"google.firestore.admin.v1beta1.IndexOperationMetadata"> & {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise. Unset if
   * the operation is still active.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The index resource that this operation is acting on. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string index = 3;
   */
  index: string;

  /**
   * The type of index operation.
   *
   * @generated from field: google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType operation_type = 4;
   */
  operationType: IndexOperationMetadata_OperationType;

  /**
   * True if the [google.longrunning.Operation] was cancelled. If the
   * cancellation is in progress, cancelled will be true but
   * [google.longrunning.Operation.done][google.longrunning.Operation.done] will be false.
   *
   * @generated from field: bool cancelled = 5;
   */
  cancelled: boolean;

  /**
   * Progress of the existing operation, measured in number of documents.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress document_progress = 6;
   */
  documentProgress?: Progress;
};

/**
 * Describes the message google.firestore.admin.v1beta1.IndexOperationMetadata.
 * Use `create(IndexOperationMetadataSchema)` to create a new message.
 */
export const IndexOperationMetadataSchema: GenMessage<IndexOperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 0);

/**
 * The type of index operation.
 *
 * @generated from enum google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType
 */
export enum IndexOperationMetadata_OperationType {
  /**
   * Unspecified. Never set by server.
   *
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  OPERATION_TYPE_UNSPECIFIED = 0,

  /**
   * The operation is creating the index. Initiated by a `CreateIndex` call.
   *
   * @generated from enum value: CREATING_INDEX = 1;
   */
  CREATING_INDEX = 1,
}

/**
 * Describes the enum google.firestore.admin.v1beta1.IndexOperationMetadata.OperationType.
 */
export const IndexOperationMetadata_OperationTypeSchema: GenEnum<IndexOperationMetadata_OperationType> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta1_firestore_admin, 0, 0);

/**
 * Measures the progress of a particular metric.
 *
 * @generated from message google.firestore.admin.v1beta1.Progress
 */
export type Progress = Message<"google.firestore.admin.v1beta1.Progress"> & {
  /**
   * An estimate of how much work has been completed. Note that this may be
   * greater than `work_estimated`.
   *
   * @generated from field: int64 work_completed = 1;
   */
  workCompleted: bigint;

  /**
   * An estimate of how much work needs to be performed. Zero if the
   * work estimate is unavailable. May change as work progresses.
   *
   * @generated from field: int64 work_estimated = 2;
   */
  workEstimated: bigint;
};

/**
 * Describes the message google.firestore.admin.v1beta1.Progress.
 * Use `create(ProgressSchema)` to create a new message.
 */
export const ProgressSchema: GenMessage<Progress> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 1);

/**
 * The request for [FirestoreAdmin.CreateIndex][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.CreateIndexRequest
 */
export type CreateIndexRequest = Message<"google.firestore.admin.v1beta1.CreateIndexRequest"> & {
  /**
   * The name of the database this index will apply to. For example:
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The index to create. The name and state fields are output only and will be
   * ignored. Certain single field indexes cannot be created or deleted.
   *
   * @generated from field: google.firestore.admin.v1beta1.Index index = 2;
   */
  index?: Index;
};

/**
 * Describes the message google.firestore.admin.v1beta1.CreateIndexRequest.
 * Use `create(CreateIndexRequestSchema)` to create a new message.
 */
export const CreateIndexRequestSchema: GenMessage<CreateIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 2);

/**
 * The request for [FirestoreAdmin.GetIndex][google.firestore.admin.v1beta1.FirestoreAdmin.GetIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.GetIndexRequest
 */
export type GetIndexRequest = Message<"google.firestore.admin.v1beta1.GetIndexRequest"> & {
  /**
   * The name of the index. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.GetIndexRequest.
 * Use `create(GetIndexRequestSchema)` to create a new message.
 */
export const GetIndexRequestSchema: GenMessage<GetIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 3);

/**
 * The request for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta1.ListIndexesRequest
 */
export type ListIndexesRequest = Message<"google.firestore.admin.v1beta1.ListIndexesRequest"> & {
  /**
   * The database name. For example:
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * The standard List page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * The standard List page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ListIndexesRequest.
 * Use `create(ListIndexesRequestSchema)` to create a new message.
 */
export const ListIndexesRequestSchema: GenMessage<ListIndexesRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 4);

/**
 * The request for [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex].
 *
 * @generated from message google.firestore.admin.v1beta1.DeleteIndexRequest
 */
export type DeleteIndexRequest = Message<"google.firestore.admin.v1beta1.DeleteIndexRequest"> & {
  /**
   * The index name. For example:
   * `projects/{project_id}/databases/{database_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.DeleteIndexRequest.
 * Use `create(DeleteIndexRequestSchema)` to create a new message.
 */
export const DeleteIndexRequestSchema: GenMessage<DeleteIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 5);

/**
 * The response for [FirestoreAdmin.ListIndexes][google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1beta1.ListIndexesResponse
 */
export type ListIndexesResponse = Message<"google.firestore.admin.v1beta1.ListIndexesResponse"> & {
  /**
   * The indexes.
   *
   * @generated from field: repeated google.firestore.admin.v1beta1.Index indexes = 1;
   */
  indexes: Index[];

  /**
   * The standard List next-page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ListIndexesResponse.
 * Use `create(ListIndexesResponseSchema)` to create a new message.
 */
export const ListIndexesResponseSchema: GenMessage<ListIndexesResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 6);

/**
 * The request for [FirestoreAdmin.ExportDocuments][google.firestore.admin.v1beta1.FirestoreAdmin.ExportDocuments].
 *
 * @generated from message google.firestore.admin.v1beta1.ExportDocumentsRequest
 */
export type ExportDocumentsRequest = Message<"google.firestore.admin.v1beta1.ExportDocumentsRequest"> & {
  /**
   * Database to export. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection ids to export. Unspecified means all collections.
   *
   * @generated from field: repeated string collection_ids = 3;
   */
  collectionIds: string[];

  /**
   * The output URI. Currently only supports Google Cloud Storage URIs of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
   * of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
   * Google Cloud Storage namespace path. When
   * choosing a name, be sure to consider Google Cloud Storage naming
   * guidelines: https://cloud.google.com/storage/docs/naming.
   * If the URI is a bucket (without a namespace path), a prefix will be
   * generated based on the start time.
   *
   * @generated from field: string output_uri_prefix = 4;
   */
  outputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ExportDocumentsRequest.
 * Use `create(ExportDocumentsRequestSchema)` to create a new message.
 */
export const ExportDocumentsRequestSchema: GenMessage<ExportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 7);

/**
 * The request for [FirestoreAdmin.ImportDocuments][google.firestore.admin.v1beta1.FirestoreAdmin.ImportDocuments].
 *
 * @generated from message google.firestore.admin.v1beta1.ImportDocumentsRequest
 */
export type ImportDocumentsRequest = Message<"google.firestore.admin.v1beta1.ImportDocumentsRequest"> & {
  /**
   * Database to import into. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection ids to import. Unspecified means all collections included
   * in the import.
   *
   * @generated from field: repeated string collection_ids = 3;
   */
  collectionIds: string[];

  /**
   * Location of the exported files.
   * This must match the output_uri_prefix of an ExportDocumentsResponse from
   * an export that has completed successfully.
   * See:
   * [google.firestore.admin.v1beta1.ExportDocumentsResponse.output_uri_prefix][google.firestore.admin.v1beta1.ExportDocumentsResponse.output_uri_prefix].
   *
   * @generated from field: string input_uri_prefix = 4;
   */
  inputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ImportDocumentsRequest.
 * Use `create(ImportDocumentsRequestSchema)` to create a new message.
 */
export const ImportDocumentsRequestSchema: GenMessage<ImportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 8);

/**
 * Returned in the [google.longrunning.Operation][google.longrunning.Operation] response field.
 *
 * @generated from message google.firestore.admin.v1beta1.ExportDocumentsResponse
 */
export type ExportDocumentsResponse = Message<"google.firestore.admin.v1beta1.ExportDocumentsResponse"> & {
  /**
   * Location of the output files. This can be used to begin an import
   * into Cloud Firestore (this project or another project) after the operation
   * completes successfully.
   *
   * @generated from field: string output_uri_prefix = 1;
   */
  outputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ExportDocumentsResponse.
 * Use `create(ExportDocumentsResponseSchema)` to create a new message.
 */
export const ExportDocumentsResponseSchema: GenMessage<ExportDocumentsResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 9);

/**
 * Metadata for ExportDocuments operations.
 *
 * @generated from message google.firestore.admin.v1beta1.ExportDocumentsMetadata
 */
export type ExportDocumentsMetadata = Message<"google.firestore.admin.v1beta1.ExportDocumentsMetadata"> & {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise. Unset if
   * the operation is still active.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The state of the export operation.
   *
   * @generated from field: google.firestore.admin.v1beta1.OperationState operation_state = 3;
   */
  operationState: OperationState;

  /**
   * An estimate of the number of documents processed.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress progress_documents = 4;
   */
  progressDocuments?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress progress_bytes = 5;
   */
  progressBytes?: Progress;

  /**
   * Which collection ids are being exported.
   *
   * @generated from field: repeated string collection_ids = 6;
   */
  collectionIds: string[];

  /**
   * Where the entities are being exported to.
   *
   * @generated from field: string output_uri_prefix = 7;
   */
  outputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ExportDocumentsMetadata.
 * Use `create(ExportDocumentsMetadataSchema)` to create a new message.
 */
export const ExportDocumentsMetadataSchema: GenMessage<ExportDocumentsMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 10);

/**
 * Metadata for ImportDocuments operations.
 *
 * @generated from message google.firestore.admin.v1beta1.ImportDocumentsMetadata
 */
export type ImportDocumentsMetadata = Message<"google.firestore.admin.v1beta1.ImportDocumentsMetadata"> & {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise. Unset if
   * the operation is still active.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The state of the import operation.
   *
   * @generated from field: google.firestore.admin.v1beta1.OperationState operation_state = 3;
   */
  operationState: OperationState;

  /**
   * An estimate of the number of documents processed.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress progress_documents = 4;
   */
  progressDocuments?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.firestore.admin.v1beta1.Progress progress_bytes = 5;
   */
  progressBytes?: Progress;

  /**
   * Which collection ids are being imported.
   *
   * @generated from field: repeated string collection_ids = 6;
   */
  collectionIds: string[];

  /**
   * The location of the documents being imported.
   *
   * @generated from field: string input_uri_prefix = 7;
   */
  inputUriPrefix: string;
};

/**
 * Describes the message google.firestore.admin.v1beta1.ImportDocumentsMetadata.
 * Use `create(ImportDocumentsMetadataSchema)` to create a new message.
 */
export const ImportDocumentsMetadataSchema: GenMessage<ImportDocumentsMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1beta1_firestore_admin, 11);

/**
 * The various possible states for an ongoing Operation.
 *
 * @generated from enum google.firestore.admin.v1beta1.OperationState
 */
export enum OperationState {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Request is being prepared for processing.
   *
   * @generated from enum value: INITIALIZING = 1;
   */
  INITIALIZING = 1,

  /**
   * Request is actively being processed.
   *
   * @generated from enum value: PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Request is in the process of being cancelled after user called
   * google.longrunning.Operations.CancelOperation on the operation.
   *
   * @generated from enum value: CANCELLING = 3;
   */
  CANCELLING = 3,

  /**
   * Request has been processed and is in its finalization stage.
   *
   * @generated from enum value: FINALIZING = 4;
   */
  FINALIZING = 4,

  /**
   * Request has completed successfully.
   *
   * @generated from enum value: SUCCESSFUL = 5;
   */
  SUCCESSFUL = 5,

  /**
   * Request has finished being processed, but encountered an error.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * Request has finished being cancelled after user called
   * google.longrunning.Operations.CancelOperation.
   *
   * @generated from enum value: CANCELLED = 7;
   */
  CANCELLED = 7,
}

/**
 * Describes the enum google.firestore.admin.v1beta1.OperationState.
 */
export const OperationStateSchema: GenEnum<OperationState> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1beta1_firestore_admin, 0);

/**
 * The Cloud Firestore Admin API.
 *
 * This API provides several administrative services for Cloud Firestore.
 *
 * # Concepts
 *
 * Project, Database, Namespace, Collection, and Document are used as defined in
 * the Google Cloud Firestore API.
 *
 * Operation: An Operation represents work being performed in the background.
 *
 *
 * # Services
 *
 * ## Index
 *
 * The index service manages Cloud Firestore indexes.
 *
 * Index creation is performed asynchronously.
 * An Operation resource is created for each such asynchronous operation.
 * The state of the operation (including any errors encountered)
 * may be queried via the Operation resource.
 *
 * ## Metadata
 *
 * Provides metadata and statistical information about data in Cloud Firestore.
 * The data provided as part of this API may be stale.
 *
 * ## Operation
 *
 * The Operations collection provides a record of actions performed for the
 * specified Project (including any Operations in progress). Operations are not
 * created directly but through calls on other collections or resources.
 *
 * An Operation that is not yet done may be cancelled. The request to cancel is
 * asynchronous and the Operation may continue to run for some time after the
 * request to cancel is made.
 *
 * An Operation that is done may be deleted so that it is no longer listed as
 * part of the Operation collection.
 *
 * Operations are created by service `FirestoreAdmin`, but are accessed via
 * service `google.longrunning.Operations`.
 *
 * @generated from service google.firestore.admin.v1beta1.FirestoreAdmin
 */
export const FirestoreAdmin: GenService<{
  /**
   * Creates the specified index.
   * A newly created index's initial state is `CREATING`. On completion of the
   * returned [google.longrunning.Operation][google.longrunning.Operation], the state will be `READY`.
   * If the index already exists, the call will return an `ALREADY_EXISTS`
   * status.
   *
   * During creation, the process could result in an error, in which case the
   * index will move to the `ERROR` state. The process can be recovered by
   * fixing the data that caused the error, removing the index with
   * [delete][google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex], then re-creating the index with
   * [create][google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex].
   *
   * Indexes with a single field cannot be created.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.CreateIndex
   */
  createIndex: {
    methodKind: "unary";
    input: typeof CreateIndexRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists the indexes that match the specified filters.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.ListIndexes
   */
  listIndexes: {
    methodKind: "unary";
    input: typeof ListIndexesRequestSchema;
    output: typeof ListIndexesResponseSchema;
  },
  /**
   * Gets an index.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.GetIndex
   */
  getIndex: {
    methodKind: "unary";
    input: typeof GetIndexRequestSchema;
    output: typeof IndexSchema;
  },
  /**
   * Deletes an index.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.DeleteIndex
   */
  deleteIndex: {
    methodKind: "unary";
    input: typeof DeleteIndexRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Exports a copy of all or a subset of documents from Google Cloud Firestore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * documents may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.ExportDocuments
   */
  exportDocuments: {
    methodKind: "unary";
    input: typeof ExportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports documents into Google Cloud Firestore. Existing documents with the
   * same name are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportDocuments operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Firestore.
   *
   * @generated from rpc google.firestore.admin.v1beta1.FirestoreAdmin.ImportDocuments
   */
  importDocuments: {
    methodKind: "unary";
    input: typeof ImportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_firestore_admin_v1beta1_firestore_admin, 0);

