// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1/firestore_admin.proto (package google.firestore.admin.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Backup, BackupSchema } from "./backup_pb";
import { file_google_firestore_admin_v1_backup } from "./backup_pb";
import type { Database, Database_EncryptionConfig, DatabaseSchema } from "./database_pb";
import { file_google_firestore_admin_v1_database } from "./database_pb";
import type { Field, FieldSchema } from "./field_pb";
import { file_google_firestore_admin_v1_field } from "./field_pb";
import type { Index, IndexSchema } from "./index_pb";
import { file_google_firestore_admin_v1_index } from "./index_pb";
import { file_google_firestore_admin_v1_operation } from "./operation_pb";
import type { BackupSchedule, BackupScheduleSchema } from "./schedule_pb";
import { file_google_firestore_admin_v1_schedule } from "./schedule_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1/firestore_admin.proto.
 */
export const file_google_firestore_admin_v1_firestore_admin: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_firestore_admin_v1_backup, file_google_firestore_admin_v1_database, file_google_firestore_admin_v1_field, file_google_firestore_admin_v1_index, file_google_firestore_admin_v1_operation, file_google_firestore_admin_v1_schedule, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A request to list the Firestore Databases in all locations for a project.
 *
 * @generated from message google.firestore.admin.v1.ListDatabasesRequest
 */
export type ListDatabasesRequest = Message<"google.firestore.admin.v1.ListDatabasesRequest"> & {
  /**
   * Required. A parent name of the form
   * `projects/{project_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * If true, also returns deleted resources.
   *
   * @generated from field: bool show_deleted = 4;
   */
  showDeleted: boolean;
};

/**
 * Describes the message google.firestore.admin.v1.ListDatabasesRequest.
 * Use `create(ListDatabasesRequestSchema)` to create a new message.
 */
export const ListDatabasesRequestSchema: GenMessage<ListDatabasesRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 0);

/**
 * The request for
 * [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase].
 *
 * @generated from message google.firestore.admin.v1.CreateDatabaseRequest
 */
export type CreateDatabaseRequest = Message<"google.firestore.admin.v1.CreateDatabaseRequest"> & {
  /**
   * Required. A parent name of the form
   * `projects/{project_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The Database to create.
   *
   * @generated from field: google.firestore.admin.v1.Database database = 2;
   */
  database?: Database;

  /**
   * Required. The ID to use for the database, which will become the final
   * component of the database's resource name.
   *
   * This value should be 4-63 characters. Valid characters are /[a-z][0-9]-/
   * with first character a letter and the last a letter or a number. Must not
   * be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
   *
   * "(default)" database ID is also valid.
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;
};

/**
 * Describes the message google.firestore.admin.v1.CreateDatabaseRequest.
 * Use `create(CreateDatabaseRequestSchema)` to create a new message.
 */
export const CreateDatabaseRequestSchema: GenMessage<CreateDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 1);

/**
 * Metadata related to the create database operation.
 *
 * @generated from message google.firestore.admin.v1.CreateDatabaseMetadata
 */
export type CreateDatabaseMetadata = Message<"google.firestore.admin.v1.CreateDatabaseMetadata"> & {
};

/**
 * Describes the message google.firestore.admin.v1.CreateDatabaseMetadata.
 * Use `create(CreateDatabaseMetadataSchema)` to create a new message.
 */
export const CreateDatabaseMetadataSchema: GenMessage<CreateDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 2);

/**
 * The list of databases for a project.
 *
 * @generated from message google.firestore.admin.v1.ListDatabasesResponse
 */
export type ListDatabasesResponse = Message<"google.firestore.admin.v1.ListDatabasesResponse"> & {
  /**
   * The databases in the project.
   *
   * @generated from field: repeated google.firestore.admin.v1.Database databases = 1;
   */
  databases: Database[];

  /**
   * In the event that data about individual databases cannot be listed they
   * will be recorded here.
   *
   * An example entry might be: projects/some_project/locations/some_location
   * This can happen if the Cloud Region that the Database resides in is
   * currently unavailable.  In this case we can't fetch all the details about
   * the database. You may be able to get a more detailed error message
   * (or possibly fetch the resource) by sending a 'Get' request for the
   * resource or a 'List' request for the specific location.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.firestore.admin.v1.ListDatabasesResponse.
 * Use `create(ListDatabasesResponseSchema)` to create a new message.
 */
export const ListDatabasesResponseSchema: GenMessage<ListDatabasesResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 3);

/**
 * The request for
 * [FirestoreAdmin.GetDatabase][google.firestore.admin.v1.FirestoreAdmin.GetDatabase].
 *
 * @generated from message google.firestore.admin.v1.GetDatabaseRequest
 */
export type GetDatabaseRequest = Message<"google.firestore.admin.v1.GetDatabaseRequest"> & {
  /**
   * Required. A name of the form
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.GetDatabaseRequest.
 * Use `create(GetDatabaseRequestSchema)` to create a new message.
 */
export const GetDatabaseRequestSchema: GenMessage<GetDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 4);

/**
 * The request for
 * [FirestoreAdmin.UpdateDatabase][google.firestore.admin.v1.FirestoreAdmin.UpdateDatabase].
 *
 * @generated from message google.firestore.admin.v1.UpdateDatabaseRequest
 */
export type UpdateDatabaseRequest = Message<"google.firestore.admin.v1.UpdateDatabaseRequest"> & {
  /**
   * Required. The database to update.
   *
   * @generated from field: google.firestore.admin.v1.Database database = 1;
   */
  database?: Database;

  /**
   * The list of fields to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.firestore.admin.v1.UpdateDatabaseRequest.
 * Use `create(UpdateDatabaseRequestSchema)` to create a new message.
 */
export const UpdateDatabaseRequestSchema: GenMessage<UpdateDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 5);

/**
 * Metadata related to the update database operation.
 *
 * @generated from message google.firestore.admin.v1.UpdateDatabaseMetadata
 */
export type UpdateDatabaseMetadata = Message<"google.firestore.admin.v1.UpdateDatabaseMetadata"> & {
};

/**
 * Describes the message google.firestore.admin.v1.UpdateDatabaseMetadata.
 * Use `create(UpdateDatabaseMetadataSchema)` to create a new message.
 */
export const UpdateDatabaseMetadataSchema: GenMessage<UpdateDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 6);

/**
 * The request for
 * [FirestoreAdmin.DeleteDatabase][google.firestore.admin.v1.FirestoreAdmin.DeleteDatabase].
 *
 * @generated from message google.firestore.admin.v1.DeleteDatabaseRequest
 */
export type DeleteDatabaseRequest = Message<"google.firestore.admin.v1.DeleteDatabaseRequest"> & {
  /**
   * Required. A name of the form
   * `projects/{project_id}/databases/{database_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The current etag of the Database.
   * If an etag is provided and does not match the current etag of the database,
   * deletion will be blocked and a FAILED_PRECONDITION error will be returned.
   *
   * @generated from field: string etag = 3;
   */
  etag: string;
};

/**
 * Describes the message google.firestore.admin.v1.DeleteDatabaseRequest.
 * Use `create(DeleteDatabaseRequestSchema)` to create a new message.
 */
export const DeleteDatabaseRequestSchema: GenMessage<DeleteDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 7);

/**
 * Metadata related to the delete database operation.
 *
 * @generated from message google.firestore.admin.v1.DeleteDatabaseMetadata
 */
export type DeleteDatabaseMetadata = Message<"google.firestore.admin.v1.DeleteDatabaseMetadata"> & {
};

/**
 * Describes the message google.firestore.admin.v1.DeleteDatabaseMetadata.
 * Use `create(DeleteDatabaseMetadataSchema)` to create a new message.
 */
export const DeleteDatabaseMetadataSchema: GenMessage<DeleteDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 8);

/**
 * The request for
 * [FirestoreAdmin.CreateBackupSchedule][google.firestore.admin.v1.FirestoreAdmin.CreateBackupSchedule].
 *
 * @generated from message google.firestore.admin.v1.CreateBackupScheduleRequest
 */
export type CreateBackupScheduleRequest = Message<"google.firestore.admin.v1.CreateBackupScheduleRequest"> & {
  /**
   * Required. The parent database.
   *
   *  Format `projects/{project}/databases/{database}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The backup schedule to create.
   *
   * @generated from field: google.firestore.admin.v1.BackupSchedule backup_schedule = 2;
   */
  backupSchedule?: BackupSchedule;
};

/**
 * Describes the message google.firestore.admin.v1.CreateBackupScheduleRequest.
 * Use `create(CreateBackupScheduleRequestSchema)` to create a new message.
 */
export const CreateBackupScheduleRequestSchema: GenMessage<CreateBackupScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 9);

/**
 * The request for
 * [FirestoreAdmin.GetBackupSchedule][google.firestore.admin.v1.FirestoreAdmin.GetBackupSchedule].
 *
 * @generated from message google.firestore.admin.v1.GetBackupScheduleRequest
 */
export type GetBackupScheduleRequest = Message<"google.firestore.admin.v1.GetBackupScheduleRequest"> & {
  /**
   * Required. The name of the backup schedule.
   *
   * Format
   * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.GetBackupScheduleRequest.
 * Use `create(GetBackupScheduleRequestSchema)` to create a new message.
 */
export const GetBackupScheduleRequestSchema: GenMessage<GetBackupScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 10);

/**
 * The request for
 * [FirestoreAdmin.UpdateBackupSchedule][google.firestore.admin.v1.FirestoreAdmin.UpdateBackupSchedule].
 *
 * @generated from message google.firestore.admin.v1.UpdateBackupScheduleRequest
 */
export type UpdateBackupScheduleRequest = Message<"google.firestore.admin.v1.UpdateBackupScheduleRequest"> & {
  /**
   * Required. The backup schedule to update.
   *
   * @generated from field: google.firestore.admin.v1.BackupSchedule backup_schedule = 1;
   */
  backupSchedule?: BackupSchedule;

  /**
   * The list of fields to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.firestore.admin.v1.UpdateBackupScheduleRequest.
 * Use `create(UpdateBackupScheduleRequestSchema)` to create a new message.
 */
export const UpdateBackupScheduleRequestSchema: GenMessage<UpdateBackupScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 11);

/**
 * The request for
 * [FirestoreAdmin.ListBackupSchedules][google.firestore.admin.v1.FirestoreAdmin.ListBackupSchedules].
 *
 * @generated from message google.firestore.admin.v1.ListBackupSchedulesRequest
 */
export type ListBackupSchedulesRequest = Message<"google.firestore.admin.v1.ListBackupSchedulesRequest"> & {
  /**
   * Required. The parent database.
   *
   * Format is `projects/{project}/databases/{database}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListBackupSchedulesRequest.
 * Use `create(ListBackupSchedulesRequestSchema)` to create a new message.
 */
export const ListBackupSchedulesRequestSchema: GenMessage<ListBackupSchedulesRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 12);

/**
 * The response for
 * [FirestoreAdmin.ListBackupSchedules][google.firestore.admin.v1.FirestoreAdmin.ListBackupSchedules].
 *
 * @generated from message google.firestore.admin.v1.ListBackupSchedulesResponse
 */
export type ListBackupSchedulesResponse = Message<"google.firestore.admin.v1.ListBackupSchedulesResponse"> & {
  /**
   * List of all backup schedules.
   *
   * @generated from field: repeated google.firestore.admin.v1.BackupSchedule backup_schedules = 1;
   */
  backupSchedules: BackupSchedule[];
};

/**
 * Describes the message google.firestore.admin.v1.ListBackupSchedulesResponse.
 * Use `create(ListBackupSchedulesResponseSchema)` to create a new message.
 */
export const ListBackupSchedulesResponseSchema: GenMessage<ListBackupSchedulesResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 13);

/**
 * The request for [FirestoreAdmin.DeleteBackupSchedules][].
 *
 * @generated from message google.firestore.admin.v1.DeleteBackupScheduleRequest
 */
export type DeleteBackupScheduleRequest = Message<"google.firestore.admin.v1.DeleteBackupScheduleRequest"> & {
  /**
   * Required. The name of the backup schedule.
   *
   * Format
   * `projects/{project}/databases/{database}/backupSchedules/{backup_schedule}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.DeleteBackupScheduleRequest.
 * Use `create(DeleteBackupScheduleRequestSchema)` to create a new message.
 */
export const DeleteBackupScheduleRequestSchema: GenMessage<DeleteBackupScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 14);

/**
 * The request for
 * [FirestoreAdmin.CreateIndex][google.firestore.admin.v1.FirestoreAdmin.CreateIndex].
 *
 * @generated from message google.firestore.admin.v1.CreateIndexRequest
 */
export type CreateIndexRequest = Message<"google.firestore.admin.v1.CreateIndexRequest"> & {
  /**
   * Required. A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The composite index to create.
   *
   * @generated from field: google.firestore.admin.v1.Index index = 2;
   */
  index?: Index;
};

/**
 * Describes the message google.firestore.admin.v1.CreateIndexRequest.
 * Use `create(CreateIndexRequestSchema)` to create a new message.
 */
export const CreateIndexRequestSchema: GenMessage<CreateIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 15);

/**
 * The request for
 * [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1.ListIndexesRequest
 */
export type ListIndexesRequest = Message<"google.firestore.admin.v1.ListIndexesRequest"> & {
  /**
   * Required. A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter to apply to list results.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * The number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * A page token, returned from a previous call to
   * [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes],
   * that may be used to get the next page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListIndexesRequest.
 * Use `create(ListIndexesRequestSchema)` to create a new message.
 */
export const ListIndexesRequestSchema: GenMessage<ListIndexesRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 16);

/**
 * The response for
 * [FirestoreAdmin.ListIndexes][google.firestore.admin.v1.FirestoreAdmin.ListIndexes].
 *
 * @generated from message google.firestore.admin.v1.ListIndexesResponse
 */
export type ListIndexesResponse = Message<"google.firestore.admin.v1.ListIndexesResponse"> & {
  /**
   * The requested indexes.
   *
   * @generated from field: repeated google.firestore.admin.v1.Index indexes = 1;
   */
  indexes: Index[];

  /**
   * A page token that may be used to request another page of results. If blank,
   * this is the last page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListIndexesResponse.
 * Use `create(ListIndexesResponseSchema)` to create a new message.
 */
export const ListIndexesResponseSchema: GenMessage<ListIndexesResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 17);

/**
 * The request for
 * [FirestoreAdmin.GetIndex][google.firestore.admin.v1.FirestoreAdmin.GetIndex].
 *
 * @generated from message google.firestore.admin.v1.GetIndexRequest
 */
export type GetIndexRequest = Message<"google.firestore.admin.v1.GetIndexRequest"> & {
  /**
   * Required. A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.GetIndexRequest.
 * Use `create(GetIndexRequestSchema)` to create a new message.
 */
export const GetIndexRequestSchema: GenMessage<GetIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 18);

/**
 * The request for
 * [FirestoreAdmin.DeleteIndex][google.firestore.admin.v1.FirestoreAdmin.DeleteIndex].
 *
 * @generated from message google.firestore.admin.v1.DeleteIndexRequest
 */
export type DeleteIndexRequest = Message<"google.firestore.admin.v1.DeleteIndexRequest"> & {
  /**
   * Required. A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.DeleteIndexRequest.
 * Use `create(DeleteIndexRequestSchema)` to create a new message.
 */
export const DeleteIndexRequestSchema: GenMessage<DeleteIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 19);

/**
 * The request for
 * [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField].
 *
 * @generated from message google.firestore.admin.v1.UpdateFieldRequest
 */
export type UpdateFieldRequest = Message<"google.firestore.admin.v1.UpdateFieldRequest"> & {
  /**
   * Required. The field to be updated.
   *
   * @generated from field: google.firestore.admin.v1.Field field = 1;
   */
  field?: Field;

  /**
   * A mask, relative to the field. If specified, only configuration specified
   * by this field_mask will be updated in the field.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.firestore.admin.v1.UpdateFieldRequest.
 * Use `create(UpdateFieldRequestSchema)` to create a new message.
 */
export const UpdateFieldRequestSchema: GenMessage<UpdateFieldRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 20);

/**
 * The request for
 * [FirestoreAdmin.GetField][google.firestore.admin.v1.FirestoreAdmin.GetField].
 *
 * @generated from message google.firestore.admin.v1.GetFieldRequest
 */
export type GetFieldRequest = Message<"google.firestore.admin.v1.GetFieldRequest"> & {
  /**
   * Required. A name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.GetFieldRequest.
 * Use `create(GetFieldRequestSchema)` to create a new message.
 */
export const GetFieldRequestSchema: GenMessage<GetFieldRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 21);

/**
 * The request for
 * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields].
 *
 * @generated from message google.firestore.admin.v1.ListFieldsRequest
 */
export type ListFieldsRequest = Message<"google.firestore.admin.v1.ListFieldsRequest"> & {
  /**
   * Required. A parent name of the form
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter to apply to list results. Currently,
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
   * only supports listing fields that have been explicitly overridden. To issue
   * this query, call
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
   * with a filter that includes `indexConfig.usesAncestorConfig:false` or
   * `ttlConfig:*`.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * The number of results to return.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * A page token, returned from a previous call to
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields],
   * that may be used to get the next page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListFieldsRequest.
 * Use `create(ListFieldsRequestSchema)` to create a new message.
 */
export const ListFieldsRequestSchema: GenMessage<ListFieldsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 22);

/**
 * The response for
 * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields].
 *
 * @generated from message google.firestore.admin.v1.ListFieldsResponse
 */
export type ListFieldsResponse = Message<"google.firestore.admin.v1.ListFieldsResponse"> & {
  /**
   * The requested fields.
   *
   * @generated from field: repeated google.firestore.admin.v1.Field fields = 1;
   */
  fields: Field[];

  /**
   * A page token that may be used to request another page of results. If blank,
   * this is the last page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListFieldsResponse.
 * Use `create(ListFieldsResponseSchema)` to create a new message.
 */
export const ListFieldsResponseSchema: GenMessage<ListFieldsResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 23);

/**
 * The request for
 * [FirestoreAdmin.ExportDocuments][google.firestore.admin.v1.FirestoreAdmin.ExportDocuments].
 *
 * @generated from message google.firestore.admin.v1.ExportDocumentsRequest
 */
export type ExportDocumentsRequest = Message<"google.firestore.admin.v1.ExportDocumentsRequest"> & {
  /**
   * Required. Database to export. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection IDs to export. Unspecified means all collections. Each
   * collection ID in this list must be unique.
   *
   * @generated from field: repeated string collection_ids = 2;
   */
  collectionIds: string[];

  /**
   * The output URI. Currently only supports Google Cloud Storage URIs of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name
   * of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional
   * Google Cloud Storage namespace path. When
   * choosing a name, be sure to consider Google Cloud Storage naming
   * guidelines: https://cloud.google.com/storage/docs/naming.
   * If the URI is a bucket (without a namespace path), a prefix will be
   * generated based on the start time.
   *
   * @generated from field: string output_uri_prefix = 3;
   */
  outputUriPrefix: string;

  /**
   * An empty list represents all namespaces. This is the preferred
   * usage for databases that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the database has data in non-default namespaces, but doesn't want
   * to include them. Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 4;
   */
  namespaceIds: string[];

  /**
   * The timestamp that corresponds to the version of the database to be
   * exported. The timestamp must be in the past, rounded to the minute and not
   * older than
   * [earliestVersionTime][google.firestore.admin.v1.Database.earliest_version_time].
   * If specified, then the exported documents will represent a consistent view
   * of the database at the provided time. Otherwise, there are no guarantees
   * about the consistency of the exported documents.
   *
   * @generated from field: google.protobuf.Timestamp snapshot_time = 5;
   */
  snapshotTime?: Timestamp;
};

/**
 * Describes the message google.firestore.admin.v1.ExportDocumentsRequest.
 * Use `create(ExportDocumentsRequestSchema)` to create a new message.
 */
export const ExportDocumentsRequestSchema: GenMessage<ExportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 24);

/**
 * The request for
 * [FirestoreAdmin.ImportDocuments][google.firestore.admin.v1.FirestoreAdmin.ImportDocuments].
 *
 * @generated from message google.firestore.admin.v1.ImportDocumentsRequest
 */
export type ImportDocumentsRequest = Message<"google.firestore.admin.v1.ImportDocumentsRequest"> & {
  /**
   * Required. Database to import into. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Which collection IDs to import. Unspecified means all collections included
   * in the import. Each collection ID in this list must be unique.
   *
   * @generated from field: repeated string collection_ids = 2;
   */
  collectionIds: string[];

  /**
   * Location of the exported files.
   * This must match the output_uri_prefix of an ExportDocumentsResponse from
   * an export that has completed successfully.
   * See:
   * [google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix][google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix].
   *
   * @generated from field: string input_uri_prefix = 3;
   */
  inputUriPrefix: string;

  /**
   * An empty list represents all namespaces. This is the preferred
   * usage for databases that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the database has data in non-default namespaces, but doesn't want
   * to include them. Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 4;
   */
  namespaceIds: string[];
};

/**
 * Describes the message google.firestore.admin.v1.ImportDocumentsRequest.
 * Use `create(ImportDocumentsRequestSchema)` to create a new message.
 */
export const ImportDocumentsRequestSchema: GenMessage<ImportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 25);

/**
 * The request for
 * [FirestoreAdmin.BulkDeleteDocuments][google.firestore.admin.v1.FirestoreAdmin.BulkDeleteDocuments].
 *
 * When both collection_ids and namespace_ids are set, only documents satisfying
 * both conditions will be deleted.
 *
 * Requests with namespace_ids and collection_ids both empty will be rejected.
 * Please use
 * [FirestoreAdmin.DeleteDatabase][google.firestore.admin.v1.FirestoreAdmin.DeleteDatabase]
 * instead.
 *
 * @generated from message google.firestore.admin.v1.BulkDeleteDocumentsRequest
 */
export type BulkDeleteDocumentsRequest = Message<"google.firestore.admin.v1.BulkDeleteDocumentsRequest"> & {
  /**
   * Required. Database to operate. Should be of the form:
   * `projects/{project_id}/databases/{database_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. IDs of the collection groups to delete. Unspecified means all
   * collection groups.
   *
   * Each collection group in this list must be unique.
   *
   * @generated from field: repeated string collection_ids = 2;
   */
  collectionIds: string[];

  /**
   * Optional. Namespaces to delete.
   *
   * An empty list means all namespaces. This is the recommended
   * usage for databases that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the database has data in non-default namespaces, but doesn't want
   * to delete from them.
   *
   * Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 3;
   */
  namespaceIds: string[];
};

/**
 * Describes the message google.firestore.admin.v1.BulkDeleteDocumentsRequest.
 * Use `create(BulkDeleteDocumentsRequestSchema)` to create a new message.
 */
export const BulkDeleteDocumentsRequestSchema: GenMessage<BulkDeleteDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 26);

/**
 * The response for
 * [FirestoreAdmin.BulkDeleteDocuments][google.firestore.admin.v1.FirestoreAdmin.BulkDeleteDocuments].
 *
 * @generated from message google.firestore.admin.v1.BulkDeleteDocumentsResponse
 */
export type BulkDeleteDocumentsResponse = Message<"google.firestore.admin.v1.BulkDeleteDocumentsResponse"> & {
};

/**
 * Describes the message google.firestore.admin.v1.BulkDeleteDocumentsResponse.
 * Use `create(BulkDeleteDocumentsResponseSchema)` to create a new message.
 */
export const BulkDeleteDocumentsResponseSchema: GenMessage<BulkDeleteDocumentsResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 27);

/**
 * The request for
 * [FirestoreAdmin.GetBackup][google.firestore.admin.v1.FirestoreAdmin.GetBackup].
 *
 * @generated from message google.firestore.admin.v1.GetBackupRequest
 */
export type GetBackupRequest = Message<"google.firestore.admin.v1.GetBackupRequest"> & {
  /**
   * Required. Name of the backup to fetch.
   *
   * Format is `projects/{project}/locations/{location}/backups/{backup}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.GetBackupRequest.
 * Use `create(GetBackupRequestSchema)` to create a new message.
 */
export const GetBackupRequestSchema: GenMessage<GetBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 28);

/**
 * The request for
 * [FirestoreAdmin.ListBackups][google.firestore.admin.v1.FirestoreAdmin.ListBackups].
 *
 * @generated from message google.firestore.admin.v1.ListBackupsRequest
 */
export type ListBackupsRequest = Message<"google.firestore.admin.v1.ListBackupsRequest"> & {
  /**
   * Required. The location to list backups from.
   *
   * Format is `projects/{project}/locations/{location}`.
   * Use `{location} = '-'` to list backups from all locations for the given
   * project. This allows listing backups from a single location or from all
   * locations.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message google.firestore.admin.v1.ListBackupsRequest.
 * Use `create(ListBackupsRequestSchema)` to create a new message.
 */
export const ListBackupsRequestSchema: GenMessage<ListBackupsRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 29);

/**
 * The response for
 * [FirestoreAdmin.ListBackups][google.firestore.admin.v1.FirestoreAdmin.ListBackups].
 *
 * @generated from message google.firestore.admin.v1.ListBackupsResponse
 */
export type ListBackupsResponse = Message<"google.firestore.admin.v1.ListBackupsResponse"> & {
  /**
   * List of all backups for the project.
   *
   * @generated from field: repeated google.firestore.admin.v1.Backup backups = 1;
   */
  backups: Backup[];

  /**
   * List of locations that existing backups were not able to be fetched from.
   *
   * Instead of failing the entire requests when a single location is
   * unreachable, this response returns a partial result set and list of
   * locations unable to be reached here. The request can be retried against a
   * single location to get a concrete error.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.firestore.admin.v1.ListBackupsResponse.
 * Use `create(ListBackupsResponseSchema)` to create a new message.
 */
export const ListBackupsResponseSchema: GenMessage<ListBackupsResponse> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 30);

/**
 * The request for
 * [FirestoreAdmin.DeleteBackup][google.firestore.admin.v1.FirestoreAdmin.DeleteBackup].
 *
 * @generated from message google.firestore.admin.v1.DeleteBackupRequest
 */
export type DeleteBackupRequest = Message<"google.firestore.admin.v1.DeleteBackupRequest"> & {
  /**
   * Required. Name of the backup to delete.
   *
   * format is `projects/{project}/locations/{location}/backups/{backup}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.firestore.admin.v1.DeleteBackupRequest.
 * Use `create(DeleteBackupRequestSchema)` to create a new message.
 */
export const DeleteBackupRequestSchema: GenMessage<DeleteBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 31);

/**
 * The request message for
 * [FirestoreAdmin.RestoreDatabase][google.firestore.admin.v1.FirestoreAdmin.RestoreDatabase].
 *
 * @generated from message google.firestore.admin.v1.RestoreDatabaseRequest
 */
export type RestoreDatabaseRequest = Message<"google.firestore.admin.v1.RestoreDatabaseRequest"> & {
  /**
   * Required. The project to restore the database in. Format is
   * `projects/{project_id}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The ID to use for the database, which will become the final
   * component of the database's resource name. This database ID must not be
   * associated with an existing database.
   *
   * This value should be 4-63 characters. Valid characters are /[a-z][0-9]-/
   * with first character a letter and the last a letter or a number. Must not
   * be UUID-like /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/.
   *
   * "(default)" database ID is also valid.
   *
   * @generated from field: string database_id = 2;
   */
  databaseId: string;

  /**
   * Required. Backup to restore from. Must be from the same project as the
   * parent.
   *
   * The restored database will be created in the same location as the source
   * backup.
   *
   * Format is: `projects/{project_id}/locations/{location}/backups/{backup}`
   *
   * @generated from field: string backup = 3;
   */
  backup: string;

  /**
   * Optional. Encryption configuration for the restored database.
   *
   * If this field is not specified, the restored database will use
   * the same encryption configuration as the backup, namely
   * [use_source_encryption][google.firestore.admin.v1.Database.EncryptionConfig.use_source_encryption].
   *
   * @generated from field: google.firestore.admin.v1.Database.EncryptionConfig encryption_config = 9;
   */
  encryptionConfig?: Database_EncryptionConfig;
};

/**
 * Describes the message google.firestore.admin.v1.RestoreDatabaseRequest.
 * Use `create(RestoreDatabaseRequestSchema)` to create a new message.
 */
export const RestoreDatabaseRequestSchema: GenMessage<RestoreDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_firestore_admin, 32);

/**
 * The Cloud Firestore Admin API.
 *
 * This API provides several administrative services for Cloud Firestore.
 *
 * Project, Database, Namespace, Collection, Collection Group, and Document are
 * used as defined in the Google Cloud Firestore API.
 *
 * Operation: An Operation represents work being performed in the background.
 *
 * The index service manages Cloud Firestore indexes.
 *
 * Index creation is performed asynchronously.
 * An Operation resource is created for each such asynchronous operation.
 * The state of the operation (including any errors encountered)
 * may be queried via the Operation resource.
 *
 * The Operations collection provides a record of actions performed for the
 * specified Project (including any Operations in progress). Operations are not
 * created directly but through calls on other collections or resources.
 *
 * An Operation that is done may be deleted so that it is no longer listed as
 * part of the Operation collection. Operations are garbage collected after
 * 30 days. By default, ListOperations will only return in progress and failed
 * operations. To list completed operation, issue a ListOperations request with
 * the filter `done: true`.
 *
 * Operations are created by service `FirestoreAdmin`, but are accessed via
 * service `google.longrunning.Operations`.
 *
 * @generated from service google.firestore.admin.v1.FirestoreAdmin
 */
export const FirestoreAdmin: GenService<{
  /**
   * Creates a composite index. This returns a
   * [google.longrunning.Operation][google.longrunning.Operation] which may be
   * used to track the status of the creation. The metadata for the operation
   * will be the type
   * [IndexOperationMetadata][google.firestore.admin.v1.IndexOperationMetadata].
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.CreateIndex
   */
  createIndex: {
    methodKind: "unary";
    input: typeof CreateIndexRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists composite indexes.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ListIndexes
   */
  listIndexes: {
    methodKind: "unary";
    input: typeof ListIndexesRequestSchema;
    output: typeof ListIndexesResponseSchema;
  },
  /**
   * Gets a composite index.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.GetIndex
   */
  getIndex: {
    methodKind: "unary";
    input: typeof GetIndexRequestSchema;
    output: typeof IndexSchema;
  },
  /**
   * Deletes a composite index.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.DeleteIndex
   */
  deleteIndex: {
    methodKind: "unary";
    input: typeof DeleteIndexRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets the metadata and configuration for a Field.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.GetField
   */
  getField: {
    methodKind: "unary";
    input: typeof GetFieldRequestSchema;
    output: typeof FieldSchema;
  },
  /**
   * Updates a field configuration. Currently, field updates apply only to
   * single field index configuration. However, calls to
   * [FirestoreAdmin.UpdateField][google.firestore.admin.v1.FirestoreAdmin.UpdateField]
   * should provide a field mask to avoid changing any configuration that the
   * caller isn't aware of. The field mask should be specified as: `{ paths:
   * "index_config" }`.
   *
   * This call returns a
   * [google.longrunning.Operation][google.longrunning.Operation] which may be
   * used to track the status of the field update. The metadata for the
   * operation will be the type
   * [FieldOperationMetadata][google.firestore.admin.v1.FieldOperationMetadata].
   *
   * To configure the default field settings for the database, use
   * the special `Field` with resource name:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.UpdateField
   */
  updateField: {
    methodKind: "unary";
    input: typeof UpdateFieldRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists the field configuration and metadata for this database.
   *
   * Currently,
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
   * only supports listing fields that have been explicitly overridden. To issue
   * this query, call
   * [FirestoreAdmin.ListFields][google.firestore.admin.v1.FirestoreAdmin.ListFields]
   * with the filter set to `indexConfig.usesAncestorConfig:false` or
   * `ttlConfig:*`.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ListFields
   */
  listFields: {
    methodKind: "unary";
    input: typeof ListFieldsRequestSchema;
    output: typeof ListFieldsResponseSchema;
  },
  /**
   * Exports a copy of all or a subset of documents from Google Cloud Firestore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * documents may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * For more details on export behavior and output format, refer to:
   * https://cloud.google.com/firestore/docs/manage-data/export-import
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ExportDocuments
   */
  exportDocuments: {
    methodKind: "unary";
    input: typeof ExportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports documents into Google Cloud Firestore. Existing documents with the
   * same name are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportDocuments operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Firestore.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ImportDocuments
   */
  importDocuments: {
    methodKind: "unary";
    input: typeof ImportDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Bulk deletes a subset of documents from Google Cloud Firestore.
   * Documents created or updated after the underlying system starts to process
   * the request will not be deleted. The bulk delete occurs in the background
   * and its progress can be monitored and managed via the Operation resource
   * that is created.
   *
   * For more details on bulk delete behavior, refer to:
   * https://cloud.google.com/firestore/docs/manage-data/bulk-delete
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.BulkDeleteDocuments
   */
  bulkDeleteDocuments: {
    methodKind: "unary";
    input: typeof BulkDeleteDocumentsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Create a database.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.CreateDatabase
   */
  createDatabase: {
    methodKind: "unary";
    input: typeof CreateDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets information about a database.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.GetDatabase
   */
  getDatabase: {
    methodKind: "unary";
    input: typeof GetDatabaseRequestSchema;
    output: typeof DatabaseSchema;
  },
  /**
   * List all the databases in the project.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ListDatabases
   */
  listDatabases: {
    methodKind: "unary";
    input: typeof ListDatabasesRequestSchema;
    output: typeof ListDatabasesResponseSchema;
  },
  /**
   * Updates a database.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.UpdateDatabase
   */
  updateDatabase: {
    methodKind: "unary";
    input: typeof UpdateDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a database.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.DeleteDatabase
   */
  deleteDatabase: {
    methodKind: "unary";
    input: typeof DeleteDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets information about a backup.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.GetBackup
   */
  getBackup: {
    methodKind: "unary";
    input: typeof GetBackupRequestSchema;
    output: typeof BackupSchema;
  },
  /**
   * Lists all the backups.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ListBackups
   */
  listBackups: {
    methodKind: "unary";
    input: typeof ListBackupsRequestSchema;
    output: typeof ListBackupsResponseSchema;
  },
  /**
   * Deletes a backup.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.DeleteBackup
   */
  deleteBackup: {
    methodKind: "unary";
    input: typeof DeleteBackupRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new database by restoring from an existing backup.
   *
   * The new database must be in the same cloud region or multi-region location
   * as the existing backup. This behaves similar to
   * [FirestoreAdmin.CreateDatabase][google.firestore.admin.v1.FirestoreAdmin.CreateDatabase]
   * except instead of creating a new empty database, a new database is created
   * with the database type, index configuration, and documents from an existing
   * backup.
   *
   * The [long-running operation][google.longrunning.Operation] can be used to
   * track the progress of the restore, with the Operation's
   * [metadata][google.longrunning.Operation.metadata] field type being the
   * [RestoreDatabaseMetadata][google.firestore.admin.v1.RestoreDatabaseMetadata].
   * The [response][google.longrunning.Operation.response] type is the
   * [Database][google.firestore.admin.v1.Database] if the restore was
   * successful. The new database is not readable or writeable until the LRO has
   * completed.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.RestoreDatabase
   */
  restoreDatabase: {
    methodKind: "unary";
    input: typeof RestoreDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a backup schedule on a database.
   * At most two backup schedules can be configured on a database, one daily
   * backup schedule and one weekly backup schedule.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.CreateBackupSchedule
   */
  createBackupSchedule: {
    methodKind: "unary";
    input: typeof CreateBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * Gets information about a backup schedule.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.GetBackupSchedule
   */
  getBackupSchedule: {
    methodKind: "unary";
    input: typeof GetBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * List backup schedules.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.ListBackupSchedules
   */
  listBackupSchedules: {
    methodKind: "unary";
    input: typeof ListBackupSchedulesRequestSchema;
    output: typeof ListBackupSchedulesResponseSchema;
  },
  /**
   * Updates a backup schedule.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.UpdateBackupSchedule
   */
  updateBackupSchedule: {
    methodKind: "unary";
    input: typeof UpdateBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * Deletes a backup schedule.
   *
   * @generated from rpc google.firestore.admin.v1.FirestoreAdmin.DeleteBackupSchedule
   */
  deleteBackupSchedule: {
    methodKind: "unary";
    input: typeof DeleteBackupScheduleRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_firestore_admin_v1_firestore_admin, 0);

