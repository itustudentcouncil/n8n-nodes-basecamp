// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1/field.proto (package google.firestore.admin.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Index } from "./index_pb";
import { file_google_firestore_admin_v1_index } from "./index_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1/field.proto.
 */
export const file_google_firestore_admin_v1_field: GenFile = /*@__PURE__*/
  fileDesc("CiVnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxL2ZpZWxkLnByb3RvEhlnb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxIsUECgVGaWVsZBIRCgRuYW1lGAEgASgJQgPgQQISQgoMaW5kZXhfY29uZmlnGAIgASgLMiwuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5GaWVsZC5JbmRleENvbmZpZxI+Cgp0dGxfY29uZmlnGAMgASgLMiouZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5GaWVsZC5UdGxDb25maWcaiQEKC0luZGV4Q29uZmlnEjEKB2luZGV4ZXMYASADKAsyIC5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxLkluZGV4EhwKFHVzZXNfYW5jZXN0b3JfY29uZmlnGAIgASgIEhYKDmFuY2VzdG9yX2ZpZWxkGAMgASgJEhEKCXJldmVydGluZxgEIAEoCBqdAQoJVHRsQ29uZmlnEkQKBXN0YXRlGAEgASgOMjAuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5GaWVsZC5UdGxDb25maWcuU3RhdGVCA+BBAyJKCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgwKCENSRUFUSU5HEAESCgoGQUNUSVZFEAISEAoMTkVFRFNfUkVQQUlSEAM6eepBdgoeZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tL0ZpZWxkElRwcm9qZWN0cy97cHJvamVjdH0vZGF0YWJhc2VzL3tkYXRhYmFzZX0vY29sbGVjdGlvbkdyb3Vwcy97Y29sbGVjdGlvbn0vZmllbGRzL3tmaWVsZH1C2QEKHWNvbS5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxQgpGaWVsZFByb3RvUAFaOWNsb3VkLmdvb2dsZS5jb20vZ28vZmlyZXN0b3JlL2FwaXYxL2FkbWluL2FkbWlucGI7YWRtaW5wYqICBEdDRlOqAh9Hb29nbGUuQ2xvdWQuRmlyZXN0b3JlLkFkbWluLlYxygIfR29vZ2xlXENsb3VkXEZpcmVzdG9yZVxBZG1pblxWMeoCI0dvb2dsZTo6Q2xvdWQ6OkZpcmVzdG9yZTo6QWRtaW46OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_firestore_admin_v1_index]);

/**
 * Represents a single field in the database.
 *
 * Fields are grouped by their "Collection Group", which represent all
 * collections in the database with the same ID.
 *
 * @generated from message google.firestore.admin.v1.Field
 */
export type Field = Message<"google.firestore.admin.v1.Field"> & {
  /**
   * Required. A field name of the form:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
   *
   * A field path can be a simple field name, e.g. `address` or a path to fields
   * within `map_value` , e.g. `address.city`,
   * or a special field path. The only valid special field is `*`, which
   * represents any field.
   *
   * Field paths can be quoted using `` ` `` (backtick). The only character that
   * must be escaped within a quoted field path is the backtick character
   * itself, escaped using a backslash. Special characters in field paths that
   * must be quoted include: `*`, `.`,
   * `` ` `` (backtick), `[`, `]`, as well as any ascii symbolic characters.
   *
   * Examples:
   * `` `address.city` `` represents a field named `address.city`, not the map
   * key `city` in the field `address`. `` `*` `` represents a field named `*`,
   * not any field.
   *
   * A special `Field` contains the default indexing settings for all fields.
   * This field's resource name is:
   * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`
   * Indexes defined on this `Field` will be applied to all fields which do not
   * have their own `Field` index configuration.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The index configuration for this field. If unset, field indexing will
   * revert to the configuration defined by the `ancestor_field`. To
   * explicitly remove all indexes for this field, specify an index config
   * with an empty list of indexes.
   *
   * @generated from field: google.firestore.admin.v1.Field.IndexConfig index_config = 2;
   */
  indexConfig?: Field_IndexConfig;

  /**
   * The TTL configuration for this `Field`.
   * Setting or unsetting this will enable or disable the TTL for
   * documents that have this `Field`.
   *
   * @generated from field: google.firestore.admin.v1.Field.TtlConfig ttl_config = 3;
   */
  ttlConfig?: Field_TtlConfig;
};

/**
 * Describes the message google.firestore.admin.v1.Field.
 * Use `create(FieldSchema)` to create a new message.
 */
export const FieldSchema: GenMessage<Field> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_field, 0);

/**
 * The index configuration for this field.
 *
 * @generated from message google.firestore.admin.v1.Field.IndexConfig
 */
export type Field_IndexConfig = Message<"google.firestore.admin.v1.Field.IndexConfig"> & {
  /**
   * The indexes supported for this field.
   *
   * @generated from field: repeated google.firestore.admin.v1.Index indexes = 1;
   */
  indexes: Index[];

  /**
   * Output only. When true, the `Field`'s index configuration is set from the
   * configuration specified by the `ancestor_field`.
   * When false, the `Field`'s index configuration is defined explicitly.
   *
   * @generated from field: bool uses_ancestor_config = 2;
   */
  usesAncestorConfig: boolean;

  /**
   * Output only. Specifies the resource name of the `Field` from which this
   * field's index configuration is set (when `uses_ancestor_config` is true),
   * or from which it *would* be set if this field had no index configuration
   * (when `uses_ancestor_config` is false).
   *
   * @generated from field: string ancestor_field = 3;
   */
  ancestorField: string;

  /**
   * Output only
   * When true, the `Field`'s index configuration is in the process of being
   * reverted. Once complete, the index config will transition to the same
   * state as the field specified by `ancestor_field`, at which point
   * `uses_ancestor_config` will be `true` and `reverting` will be `false`.
   *
   * @generated from field: bool reverting = 4;
   */
  reverting: boolean;
};

/**
 * Describes the message google.firestore.admin.v1.Field.IndexConfig.
 * Use `create(Field_IndexConfigSchema)` to create a new message.
 */
export const Field_IndexConfigSchema: GenMessage<Field_IndexConfig> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_field, 0, 0);

/**
 * The TTL (time-to-live) configuration for documents that have this `Field`
 * set.
 *
 * Storing a timestamp value into a TTL-enabled field will be treated as
 * the document's absolute expiration time. Timestamp values in the past
 * indicate that the document is eligible for immediate expiration. Using any
 * other data type or leaving the field absent will disable expiration for the
 * individual document.
 *
 * @generated from message google.firestore.admin.v1.Field.TtlConfig
 */
export type Field_TtlConfig = Message<"google.firestore.admin.v1.Field.TtlConfig"> & {
  /**
   * Output only. The state of the TTL configuration.
   *
   * @generated from field: google.firestore.admin.v1.Field.TtlConfig.State state = 1;
   */
  state: Field_TtlConfig_State;
};

/**
 * Describes the message google.firestore.admin.v1.Field.TtlConfig.
 * Use `create(Field_TtlConfigSchema)` to create a new message.
 */
export const Field_TtlConfigSchema: GenMessage<Field_TtlConfig> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_field, 0, 1);

/**
 * The state of applying the TTL configuration to all documents.
 *
 * @generated from enum google.firestore.admin.v1.Field.TtlConfig.State
 */
export enum Field_TtlConfig_State {
  /**
   * The state is unspecified or unknown.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The TTL is being applied. There is an active long-running operation to
   * track the change. Newly written documents will have TTLs applied as
   * requested. Requested TTLs on existing documents are still being
   * processed. When TTLs on all existing documents have been processed, the
   * state will move to 'ACTIVE'.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The TTL is active for all documents.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The TTL configuration could not be enabled for all existing documents.
   * Newly written documents will continue to have their TTL applied.
   * The LRO returned when last attempting to enable TTL for this `Field`
   * has failed, and may have more details.
   *
   * @generated from enum value: NEEDS_REPAIR = 3;
   */
  NEEDS_REPAIR = 3,
}

/**
 * Describes the enum google.firestore.admin.v1.Field.TtlConfig.State.
 */
export const Field_TtlConfig_StateSchema: GenEnum<Field_TtlConfig_State> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_field, 0, 1, 0);

