// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/admin/v1/database.proto (package google.firestore.admin.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/admin/v1/database.proto.
 */
export const file_google_firestore_admin_v1_database: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvZmlyZXN0b3JlL2FkbWluL3YxL2RhdGFiYXNlLnByb3RvEhlnb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxItwTCghEYXRhYmFzZRIMCgRuYW1lGAEgASgJEhAKA3VpZBgDIAEoCUID4EEDEjQKC2NyZWF0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC3VwZGF0ZV90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC2RlbGV0ZV90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEhMKC2xvY2F0aW9uX2lkGAkgASgJEj4KBHR5cGUYCiABKA4yMC5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxLkRhdGFiYXNlLkRhdGFiYXNlVHlwZRJNChBjb25jdXJyZW5jeV9tb2RlGA8gASgOMjMuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5Db25jdXJyZW5jeU1vZGUSQAoYdmVyc2lvbl9yZXRlbnRpb25fcGVyaW9kGBEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQMSPgoVZWFybGllc3RfdmVyc2lvbl90aW1lGBIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEmwKIXBvaW50X2luX3RpbWVfcmVjb3ZlcnlfZW5hYmxlbWVudBgVIAEoDjJBLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjEuRGF0YWJhc2UuUG9pbnRJblRpbWVSZWNvdmVyeUVuYWJsZW1lbnQSYQobYXBwX2VuZ2luZV9pbnRlZ3JhdGlvbl9tb2RlGBMgASgOMjwuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5BcHBFbmdpbmVJbnRlZ3JhdGlvbk1vZGUSFwoKa2V5X3ByZWZpeBgUIAEoCUID4EEDEloKF2RlbGV0ZV9wcm90ZWN0aW9uX3N0YXRlGBYgASgOMjkuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5EZWxldGVQcm90ZWN0aW9uU3RhdGUSSAoLY21la19jb25maWcYFyABKAsyLi5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxLkRhdGFiYXNlLkNtZWtDb25maWdCA+BBARIYCgtwcmV2aW91c19pZBgZIAEoCUID4EEDEkgKC3NvdXJjZV9pbmZvGBogASgLMi4uZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5Tb3VyY2VJbmZvQgPgQQMSDAoEZXRhZxhjIAEoCRpICgpDbWVrQ29uZmlnEhkKDGttc19rZXlfbmFtZRgBIAEoCUID4EECEh8KEmFjdGl2ZV9rZXlfdmVyc2lvbhgCIAMoCUID4EEDGucBCgpTb3VyY2VJbmZvEk0KBmJhY2t1cBgBIAEoCzI7Lmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjEuRGF0YWJhc2UuU291cmNlSW5mby5CYWNrdXBTb3VyY2VIABI6CglvcGVyYXRpb24YAyABKAlCJ/pBJAoiZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tL09wZXJhdGlvbhpECgxCYWNrdXBTb3VyY2USNAoGYmFja3VwGAEgASgJQiT6QSEKH2ZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9CYWNrdXBCCAoGc291cmNlGogEChBFbmNyeXB0aW9uQ29uZmlnEngKGWdvb2dsZV9kZWZhdWx0X2VuY3J5cHRpb24YASABKAsyUy5nb29nbGUuZmlyZXN0b3JlLmFkbWluLnYxLkRhdGFiYXNlLkVuY3J5cHRpb25Db25maWcuR29vZ2xlRGVmYXVsdEVuY3J5cHRpb25PcHRpb25zSAASbQoVdXNlX3NvdXJjZV9lbmNyeXB0aW9uGAIgASgLMkwuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5FbmNyeXB0aW9uQ29uZmlnLlNvdXJjZUVuY3J5cHRpb25PcHRpb25zSAASfAobY3VzdG9tZXJfbWFuYWdlZF9lbmNyeXB0aW9uGAMgASgLMlUuZ29vZ2xlLmZpcmVzdG9yZS5hZG1pbi52MS5EYXRhYmFzZS5FbmNyeXB0aW9uQ29uZmlnLkN1c3RvbWVyTWFuYWdlZEVuY3J5cHRpb25PcHRpb25zSAAaIAoeR29vZ2xlRGVmYXVsdEVuY3J5cHRpb25PcHRpb25zGhkKF1NvdXJjZUVuY3J5cHRpb25PcHRpb25zGj0KIEN1c3RvbWVyTWFuYWdlZEVuY3J5cHRpb25PcHRpb25zEhkKDGttc19rZXlfbmFtZRgBIAEoCUID4EECQhEKD2VuY3J5cHRpb25fdHlwZSJXCgxEYXRhYmFzZVR5cGUSHQoZREFUQUJBU0VfVFlQRV9VTlNQRUNJRklFRBAAEhQKEEZJUkVTVE9SRV9OQVRJVkUQARISCg5EQVRBU1RPUkVfTU9ERRACIncKD0NvbmN1cnJlbmN5TW9kZRIgChxDT05DVVJSRU5DWV9NT0RFX1VOU1BFQ0lGSUVEEAASDgoKT1BUSU1JU1RJQxABEg8KC1BFU1NJTUlTVElDEAISIQodT1BUSU1JU1RJQ19XSVRIX0VOVElUWV9HUk9VUFMQAyKbAQodUG9pbnRJblRpbWVSZWNvdmVyeUVuYWJsZW1lbnQSMQotUE9JTlRfSU5fVElNRV9SRUNPVkVSWV9FTkFCTEVNRU5UX1VOU1BFQ0lGSUVEEAASIgoeUE9JTlRfSU5fVElNRV9SRUNPVkVSWV9FTkFCTEVEEAESIwofUE9JTlRfSU5fVElNRV9SRUNPVkVSWV9ESVNBQkxFRBACImIKGEFwcEVuZ2luZUludGVncmF0aW9uTW9kZRIrCidBUFBfRU5HSU5FX0lOVEVHUkFUSU9OX01PREVfVU5TUEVDSUZJRUQQABILCgdFTkFCTEVEEAESDAoIRElTQUJMRUQQAiJ/ChVEZWxldGVQcm90ZWN0aW9uU3RhdGUSJwojREVMRVRFX1BST1RFQ1RJT05fU1RBVEVfVU5TUEVDSUZJRUQQABIeChpERUxFVEVfUFJPVEVDVElPTl9ESVNBQkxFRBABEh0KGURFTEVURV9QUk9URUNUSU9OX0VOQUJMRUQQAjpS6kFPCiFmaXJlc3RvcmUuZ29vZ2xlYXBpcy5jb20vRGF0YWJhc2USJ3Byb2plY3RzL3twcm9qZWN0fS9kYXRhYmFzZXMve2RhdGFiYXNlfVIBAULDAgodY29tLmdvb2dsZS5maXJlc3RvcmUuYWRtaW4udjFCDURhdGFiYXNlUHJvdG9QAVo5Y2xvdWQuZ29vZ2xlLmNvbS9nby9maXJlc3RvcmUvYXBpdjEvYWRtaW4vYWRtaW5wYjthZG1pbnBiogIER0NGU6oCH0dvb2dsZS5DbG91ZC5GaXJlc3RvcmUuQWRtaW4uVjHKAh9Hb29nbGVcQ2xvdWRcRmlyZXN0b3JlXEFkbWluXFYx6gIjR29vZ2xlOjpDbG91ZDo6RmlyZXN0b3JlOjpBZG1pbjo6VjHqQWQKImZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9PcGVyYXRpb24SPnByb2plY3RzL3twcm9qZWN0fS9kYXRhYmFzZXMve2RhdGFiYXNlfS9vcGVyYXRpb25zL3tvcGVyYXRpb259YgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * A Cloud Firestore Database.
 *
 * @generated from message google.firestore.admin.v1.Database
 */
export type Database = Message<"google.firestore.admin.v1.Database"> & {
  /**
   * The resource name of the Database.
   * Format: `projects/{project}/databases/{database}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The system-generated UUID4 for this Database.
   *
   * @generated from field: string uid = 3;
   */
  uid: string;

  /**
   * Output only. The timestamp at which this database was created. Databases
   * created before 2016 do not populate create_time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. The timestamp at which this database was most recently
   * updated. Note this only includes updates to the database resource and not
   * data contained by the database.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The timestamp at which this database was deleted. Only set if
   * the database has been deleted.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 7;
   */
  deleteTime?: Timestamp;

  /**
   * The location of the database. Available locations are listed at
   * https://cloud.google.com/firestore/docs/locations.
   *
   * @generated from field: string location_id = 9;
   */
  locationId: string;

  /**
   * The type of the database.
   * See https://cloud.google.com/datastore/docs/firestore-or-datastore for
   * information about how to choose.
   *
   * @generated from field: google.firestore.admin.v1.Database.DatabaseType type = 10;
   */
  type: Database_DatabaseType;

  /**
   * The concurrency control mode to use for this database.
   *
   * @generated from field: google.firestore.admin.v1.Database.ConcurrencyMode concurrency_mode = 15;
   */
  concurrencyMode: Database_ConcurrencyMode;

  /**
   * Output only. The period during which past versions of data are retained in
   * the database.
   *
   * Any [read][google.firestore.v1.GetDocumentRequest.read_time]
   * or [query][google.firestore.v1.ListDocumentsRequest.read_time] can specify
   * a `read_time` within this window, and will read the state of the database
   * at that time.
   *
   * If the PITR feature is enabled, the retention period is 7 days. Otherwise,
   * the retention period is 1 hour.
   *
   * @generated from field: google.protobuf.Duration version_retention_period = 17;
   */
  versionRetentionPeriod?: Duration;

  /**
   * Output only. The earliest timestamp at which older versions of the data can
   * be read from the database. See [version_retention_period] above; this field
   * is populated with `now - version_retention_period`.
   *
   * This value is continuously updated, and becomes stale the moment it is
   * queried. If you are using this value to recover data, make sure to account
   * for the time from the moment when the value is queried to the moment when
   * you initiate the recovery.
   *
   * @generated from field: google.protobuf.Timestamp earliest_version_time = 18;
   */
  earliestVersionTime?: Timestamp;

  /**
   * Whether to enable the PITR feature on this database.
   *
   * @generated from field: google.firestore.admin.v1.Database.PointInTimeRecoveryEnablement point_in_time_recovery_enablement = 21;
   */
  pointInTimeRecoveryEnablement: Database_PointInTimeRecoveryEnablement;

  /**
   * The App Engine integration mode to use for this database.
   *
   * @generated from field: google.firestore.admin.v1.Database.AppEngineIntegrationMode app_engine_integration_mode = 19;
   */
  appEngineIntegrationMode: Database_AppEngineIntegrationMode;

  /**
   * Output only. The key_prefix for this database. This key_prefix is used, in
   * combination with the project ID ("<key prefix>~<project id>") to construct
   * the application ID that is returned from the Cloud Datastore APIs in Google
   * App Engine first generation runtimes.
   *
   * This value may be empty in which case the appid to use for URL-encoded keys
   * is the project_id (eg: foo instead of v~foo).
   *
   * @generated from field: string key_prefix = 20;
   */
  keyPrefix: string;

  /**
   * State of delete protection for the database.
   *
   * @generated from field: google.firestore.admin.v1.Database.DeleteProtectionState delete_protection_state = 22;
   */
  deleteProtectionState: Database_DeleteProtectionState;

  /**
   * Optional. Presence indicates CMEK is enabled for this database.
   *
   * @generated from field: google.firestore.admin.v1.Database.CmekConfig cmek_config = 23;
   */
  cmekConfig?: Database_CmekConfig;

  /**
   * Output only. The database resource's prior database ID. This field is only
   * populated for deleted databases.
   *
   * @generated from field: string previous_id = 25;
   */
  previousId: string;

  /**
   * Output only. Information about the provenance of this database.
   *
   * @generated from field: google.firestore.admin.v1.Database.SourceInfo source_info = 26;
   */
  sourceInfo?: Database_SourceInfo;

  /**
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 99;
   */
  etag: string;
};

/**
 * Describes the message google.firestore.admin.v1.Database.
 * Use `create(DatabaseSchema)` to create a new message.
 */
export const DatabaseSchema: GenMessage<Database> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0);

/**
 * The CMEK (Customer Managed Encryption Key) configuration for a Firestore
 * database. If not present, the database is secured by the default Google
 * encryption key.
 *
 * @generated from message google.firestore.admin.v1.Database.CmekConfig
 */
export type Database_CmekConfig = Message<"google.firestore.admin.v1.Database.CmekConfig"> & {
  /**
   * Required. Only keys in the same location as this database are allowed to
   * be used for encryption.
   *
   * For Firestore's nam5 multi-region, this corresponds to Cloud KMS
   * multi-region us. For Firestore's eur3 multi-region, this corresponds to
   * Cloud KMS multi-region europe. See
   * https://cloud.google.com/kms/docs/locations.
   *
   * The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName: string;

  /**
   * Output only. Currently in-use [KMS key
   * versions](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions).
   * During [key rotation](https://cloud.google.com/kms/docs/key-rotation),
   * there can be multiple in-use key versions.
   *
   * The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{key_version}`.
   *
   * @generated from field: repeated string active_key_version = 2;
   */
  activeKeyVersion: string[];
};

/**
 * Describes the message google.firestore.admin.v1.Database.CmekConfig.
 * Use `create(Database_CmekConfigSchema)` to create a new message.
 */
export const Database_CmekConfigSchema: GenMessage<Database_CmekConfig> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 0);

/**
 * Information about the provenance of this database.
 *
 * @generated from message google.firestore.admin.v1.Database.SourceInfo
 */
export type Database_SourceInfo = Message<"google.firestore.admin.v1.Database.SourceInfo"> & {
  /**
   * The source from which this database is derived.
   *
   * @generated from oneof google.firestore.admin.v1.Database.SourceInfo.source
   */
  source: {
    /**
     * If set, this database was restored from the specified backup (or a
     * snapshot thereof).
     *
     * @generated from field: google.firestore.admin.v1.Database.SourceInfo.BackupSource backup = 1;
     */
    value: Database_SourceInfo_BackupSource;
    case: "backup";
  } | { case: undefined; value?: undefined };

  /**
   * The associated long-running operation. This field may not be set after
   * the operation has completed. Format:
   * `projects/{project}/databases/{database}/operations/{operation}`.
   *
   * @generated from field: string operation = 3;
   */
  operation: string;
};

/**
 * Describes the message google.firestore.admin.v1.Database.SourceInfo.
 * Use `create(Database_SourceInfoSchema)` to create a new message.
 */
export const Database_SourceInfoSchema: GenMessage<Database_SourceInfo> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 1);

/**
 * Information about a backup that was used to restore a database.
 *
 * @generated from message google.firestore.admin.v1.Database.SourceInfo.BackupSource
 */
export type Database_SourceInfo_BackupSource = Message<"google.firestore.admin.v1.Database.SourceInfo.BackupSource"> & {
  /**
   * The resource name of the backup that was used to restore this
   * database. Format:
   * `projects/{project}/locations/{location}/backups/{backup}`.
   *
   * @generated from field: string backup = 1;
   */
  backup: string;
};

/**
 * Describes the message google.firestore.admin.v1.Database.SourceInfo.BackupSource.
 * Use `create(Database_SourceInfo_BackupSourceSchema)` to create a new message.
 */
export const Database_SourceInfo_BackupSourceSchema: GenMessage<Database_SourceInfo_BackupSource> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 1, 0);

/**
 * Encryption configuration for a new database being created from another
 * source.
 *
 * The source could be a [Backup][google.firestore.admin.v1.Backup] .
 *
 * @generated from message google.firestore.admin.v1.Database.EncryptionConfig
 */
export type Database_EncryptionConfig = Message<"google.firestore.admin.v1.Database.EncryptionConfig"> & {
  /**
   * The method for encrypting the database.
   *
   * @generated from oneof google.firestore.admin.v1.Database.EncryptionConfig.encryption_type
   */
  encryptionType: {
    /**
     * Use Google default encryption.
     *
     * @generated from field: google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions google_default_encryption = 1;
     */
    value: Database_EncryptionConfig_GoogleDefaultEncryptionOptions;
    case: "googleDefaultEncryption";
  } | {
    /**
     * The database will use the same encryption configuration as the source.
     *
     * @generated from field: google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions use_source_encryption = 2;
     */
    value: Database_EncryptionConfig_SourceEncryptionOptions;
    case: "useSourceEncryption";
  } | {
    /**
     * Use Customer Managed Encryption Keys (CMEK) for encryption.
     *
     * @generated from field: google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions customer_managed_encryption = 3;
     */
    value: Database_EncryptionConfig_CustomerManagedEncryptionOptions;
    case: "customerManagedEncryption";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.admin.v1.Database.EncryptionConfig.
 * Use `create(Database_EncryptionConfigSchema)` to create a new message.
 */
export const Database_EncryptionConfigSchema: GenMessage<Database_EncryptionConfig> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 2);

/**
 * The configuration options for using Google default encryption.
 *
 * @generated from message google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions
 */
export type Database_EncryptionConfig_GoogleDefaultEncryptionOptions = Message<"google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions"> & {
};

/**
 * Describes the message google.firestore.admin.v1.Database.EncryptionConfig.GoogleDefaultEncryptionOptions.
 * Use `create(Database_EncryptionConfig_GoogleDefaultEncryptionOptionsSchema)` to create a new message.
 */
export const Database_EncryptionConfig_GoogleDefaultEncryptionOptionsSchema: GenMessage<Database_EncryptionConfig_GoogleDefaultEncryptionOptions> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 2, 0);

/**
 * The configuration options for using the same encryption method as the
 * source.
 *
 * @generated from message google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions
 */
export type Database_EncryptionConfig_SourceEncryptionOptions = Message<"google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions"> & {
};

/**
 * Describes the message google.firestore.admin.v1.Database.EncryptionConfig.SourceEncryptionOptions.
 * Use `create(Database_EncryptionConfig_SourceEncryptionOptionsSchema)` to create a new message.
 */
export const Database_EncryptionConfig_SourceEncryptionOptionsSchema: GenMessage<Database_EncryptionConfig_SourceEncryptionOptions> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 2, 1);

/**
 * The configuration options for using CMEK (Customer Managed Encryption
 * Key) encryption.
 *
 * @generated from message google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions
 */
export type Database_EncryptionConfig_CustomerManagedEncryptionOptions = Message<"google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions"> & {
  /**
   * Required. Only keys in the same location as the database are allowed to
   * be used for encryption.
   *
   * For Firestore's nam5 multi-region, this corresponds to Cloud KMS
   * multi-region us. For Firestore's eur3 multi-region, this corresponds to
   * Cloud KMS multi-region europe. See
   * https://cloud.google.com/kms/docs/locations.
   *
   * The expected format is
   * `projects/{project_id}/locations/{kms_location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName: string;
};

/**
 * Describes the message google.firestore.admin.v1.Database.EncryptionConfig.CustomerManagedEncryptionOptions.
 * Use `create(Database_EncryptionConfig_CustomerManagedEncryptionOptionsSchema)` to create a new message.
 */
export const Database_EncryptionConfig_CustomerManagedEncryptionOptionsSchema: GenMessage<Database_EncryptionConfig_CustomerManagedEncryptionOptions> = /*@__PURE__*/
  messageDesc(file_google_firestore_admin_v1_database, 0, 2, 2);

/**
 * The type of the database.
 * See https://cloud.google.com/datastore/docs/firestore-or-datastore for
 * information about how to choose.
 *
 * Mode changes are only allowed if the database is empty.
 *
 * @generated from enum google.firestore.admin.v1.Database.DatabaseType
 */
export enum Database_DatabaseType {
  /**
   * Not used.
   *
   * @generated from enum value: DATABASE_TYPE_UNSPECIFIED = 0;
   */
  DATABASE_TYPE_UNSPECIFIED = 0,

  /**
   * Firestore Native Mode
   *
   * @generated from enum value: FIRESTORE_NATIVE = 1;
   */
  FIRESTORE_NATIVE = 1,

  /**
   * Firestore in Datastore Mode.
   *
   * @generated from enum value: DATASTORE_MODE = 2;
   */
  DATASTORE_MODE = 2,
}

/**
 * Describes the enum google.firestore.admin.v1.Database.DatabaseType.
 */
export const Database_DatabaseTypeSchema: GenEnum<Database_DatabaseType> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_database, 0, 0);

/**
 * The type of concurrency control mode for transactions.
 *
 * @generated from enum google.firestore.admin.v1.Database.ConcurrencyMode
 */
export enum Database_ConcurrencyMode {
  /**
   * Not used.
   *
   * @generated from enum value: CONCURRENCY_MODE_UNSPECIFIED = 0;
   */
  CONCURRENCY_MODE_UNSPECIFIED = 0,

  /**
   * Use optimistic concurrency control by default. This mode is available
   * for Cloud Firestore databases.
   *
   * @generated from enum value: OPTIMISTIC = 1;
   */
  OPTIMISTIC = 1,

  /**
   * Use pessimistic concurrency control by default. This mode is available
   * for Cloud Firestore databases.
   *
   * This is the default setting for Cloud Firestore.
   *
   * @generated from enum value: PESSIMISTIC = 2;
   */
  PESSIMISTIC = 2,

  /**
   * Use optimistic concurrency control with entity groups by default.
   *
   * This is the only available mode for Cloud Datastore.
   *
   * This mode is also available for Cloud Firestore with Datastore Mode but
   * is not recommended.
   *
   * @generated from enum value: OPTIMISTIC_WITH_ENTITY_GROUPS = 3;
   */
  OPTIMISTIC_WITH_ENTITY_GROUPS = 3,
}

/**
 * Describes the enum google.firestore.admin.v1.Database.ConcurrencyMode.
 */
export const Database_ConcurrencyModeSchema: GenEnum<Database_ConcurrencyMode> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_database, 0, 1);

/**
 * Point In Time Recovery feature enablement.
 *
 * @generated from enum google.firestore.admin.v1.Database.PointInTimeRecoveryEnablement
 */
export enum Database_PointInTimeRecoveryEnablement {
  /**
   * Not used.
   *
   * @generated from enum value: POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED = 0;
   */
  POINT_IN_TIME_RECOVERY_ENABLEMENT_UNSPECIFIED = 0,

  /**
   * Reads are supported on selected versions of the data from within the past
   * 7 days:
   *
   * * Reads against any timestamp within the past hour
   * * Reads against 1-minute snapshots beyond 1 hour and within 7 days
   *
   * `version_retention_period` and `earliest_version_time` can be
   * used to determine the supported versions.
   *
   * @generated from enum value: POINT_IN_TIME_RECOVERY_ENABLED = 1;
   */
  POINT_IN_TIME_RECOVERY_ENABLED = 1,

  /**
   * Reads are supported on any version of the data from within the past 1
   * hour.
   *
   * @generated from enum value: POINT_IN_TIME_RECOVERY_DISABLED = 2;
   */
  POINT_IN_TIME_RECOVERY_DISABLED = 2,
}

/**
 * Describes the enum google.firestore.admin.v1.Database.PointInTimeRecoveryEnablement.
 */
export const Database_PointInTimeRecoveryEnablementSchema: GenEnum<Database_PointInTimeRecoveryEnablement> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_database, 0, 2);

/**
 * The type of App Engine integration mode.
 *
 * @generated from enum google.firestore.admin.v1.Database.AppEngineIntegrationMode
 */
export enum Database_AppEngineIntegrationMode {
  /**
   * Not used.
   *
   * @generated from enum value: APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED = 0;
   */
  APP_ENGINE_INTEGRATION_MODE_UNSPECIFIED = 0,

  /**
   * If an App Engine application exists in the same region as this database,
   * App Engine configuration will impact this database. This includes
   * disabling of the application & database, as well as disabling writes to
   * the database.
   *
   * @generated from enum value: ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * App Engine has no effect on the ability of this database to serve
   * requests.
   *
   * This is the default setting for databases created with the Firestore API.
   *
   * @generated from enum value: DISABLED = 2;
   */
  DISABLED = 2,
}

/**
 * Describes the enum google.firestore.admin.v1.Database.AppEngineIntegrationMode.
 */
export const Database_AppEngineIntegrationModeSchema: GenEnum<Database_AppEngineIntegrationMode> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_database, 0, 3);

/**
 * The delete protection state of the database.
 *
 * @generated from enum google.firestore.admin.v1.Database.DeleteProtectionState
 */
export enum Database_DeleteProtectionState {
  /**
   * The default value. Delete protection type is not specified
   *
   * @generated from enum value: DELETE_PROTECTION_STATE_UNSPECIFIED = 0;
   */
  DELETE_PROTECTION_STATE_UNSPECIFIED = 0,

  /**
   * Delete protection is disabled
   *
   * @generated from enum value: DELETE_PROTECTION_DISABLED = 1;
   */
  DELETE_PROTECTION_DISABLED = 1,

  /**
   * Delete protection is enabled
   *
   * @generated from enum value: DELETE_PROTECTION_ENABLED = 2;
   */
  DELETE_PROTECTION_ENABLED = 2,
}

/**
 * Describes the enum google.firestore.admin.v1.Database.DeleteProtectionState.
 */
export const Database_DeleteProtectionStateSchema: GenEnum<Database_DeleteProtectionState> = /*@__PURE__*/
  enumDesc(file_google_firestore_admin_v1_database, 0, 4);

