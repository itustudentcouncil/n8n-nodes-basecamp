// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/v1/bloom_filter.proto (package google.firestore.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/v1/bloom_filter.proto.
 */
export const file_google_firestore_v1_bloom_filter: GenFile = /*@__PURE__*/
  fileDesc("CiZnb29nbGUvZmlyZXN0b3JlL3YxL2Jsb29tX2ZpbHRlci5wcm90bxITZ29vZ2xlLmZpcmVzdG9yZS52MSIuCgtCaXRTZXF1ZW5jZRIOCgZiaXRtYXAYASABKAwSDwoHcGFkZGluZxgCIAEoBSJRCgtCbG9vbUZpbHRlchIuCgRiaXRzGAEgASgLMiAuZ29vZ2xlLmZpcmVzdG9yZS52MS5CaXRTZXF1ZW5jZRISCgpoYXNoX2NvdW50GAIgASgFQsgBChdjb20uZ29vZ2xlLmZpcmVzdG9yZS52MUIQQmxvb21GaWx0ZXJQcm90b1ABWjtjbG91ZC5nb29nbGUuY29tL2dvL2ZpcmVzdG9yZS9hcGl2MS9maXJlc3RvcmVwYjtmaXJlc3RvcmVwYqICBEdDRlOqAhlHb29nbGUuQ2xvdWQuRmlyZXN0b3JlLlYxygIZR29vZ2xlXENsb3VkXEZpcmVzdG9yZVxWMeoCHEdvb2dsZTo6Q2xvdWQ6OkZpcmVzdG9yZTo6VjFiBnByb3RvMw");

/**
 * A sequence of bits, encoded in a byte array.
 *
 * Each byte in the `bitmap` byte array stores 8 bits of the sequence. The only
 * exception is the last byte, which may store 8 _or fewer_ bits. The `padding`
 * defines the number of bits of the last byte to be ignored as "padding". The
 * values of these "padding" bits are unspecified and must be ignored.
 *
 * To retrieve the first bit, bit 0, calculate: `(bitmap[0] & 0x01) != 0`.
 * To retrieve the second bit, bit 1, calculate: `(bitmap[0] & 0x02) != 0`.
 * To retrieve the third bit, bit 2, calculate: `(bitmap[0] & 0x04) != 0`.
 * To retrieve the fourth bit, bit 3, calculate: `(bitmap[0] & 0x08) != 0`.
 * To retrieve bit n, calculate: `(bitmap[n / 8] & (0x01 << (n % 8))) != 0`.
 *
 * The "size" of a `BitSequence` (the number of bits it contains) is calculated
 * by this formula: `(bitmap.length * 8) - padding`.
 *
 * @generated from message google.firestore.v1.BitSequence
 */
export type BitSequence = Message<"google.firestore.v1.BitSequence"> & {
  /**
   * The bytes that encode the bit sequence.
   * May have a length of zero.
   *
   * @generated from field: bytes bitmap = 1;
   */
  bitmap: Uint8Array;

  /**
   * The number of bits of the last byte in `bitmap` to ignore as "padding".
   * If the length of `bitmap` is zero, then this value must be `0`.
   * Otherwise, this value must be between 0 and 7, inclusive.
   *
   * @generated from field: int32 padding = 2;
   */
  padding: number;
};

/**
 * Describes the message google.firestore.v1.BitSequence.
 * Use `create(BitSequenceSchema)` to create a new message.
 */
export const BitSequenceSchema: GenMessage<BitSequence> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_bloom_filter, 0);

/**
 * A bloom filter (https://en.wikipedia.org/wiki/Bloom_filter).
 *
 * The bloom filter hashes the entries with MD5 and treats the resulting 128-bit
 * hash as 2 distinct 64-bit hash values, interpreted as unsigned integers
 * using 2's complement encoding.
 *
 * These two hash values, named `h1` and `h2`, are then used to compute the
 * `hash_count` hash values using the formula, starting at `i=0`:
 *
 *     h(i) = h1 + (i * h2)
 *
 * These resulting values are then taken modulo the number of bits in the bloom
 * filter to get the bits of the bloom filter to test for the given entry.
 *
 * @generated from message google.firestore.v1.BloomFilter
 */
export type BloomFilter = Message<"google.firestore.v1.BloomFilter"> & {
  /**
   * The bloom filter data.
   *
   * @generated from field: google.firestore.v1.BitSequence bits = 1;
   */
  bits?: BitSequence;

  /**
   * The number of hashes used by the algorithm.
   *
   * @generated from field: int32 hash_count = 2;
   */
  hashCount: number;
};

/**
 * Describes the message google.firestore.v1.BloomFilter.
 * Use `create(BloomFilterSchema)` to create a new message.
 */
export const BloomFilterSchema: GenMessage<BloomFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_bloom_filter, 1);

