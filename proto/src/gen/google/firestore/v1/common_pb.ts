// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/v1/common.proto (package google.firestore.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/v1/common.proto.
 */
export const file_google_firestore_v1_common: GenFile = /*@__PURE__*/
  fileDesc("CiBnb29nbGUvZmlyZXN0b3JlL3YxL2NvbW1vbi5wcm90bxITZ29vZ2xlLmZpcmVzdG9yZS52MSIjCgxEb2N1bWVudE1hc2sSEwoLZmllbGRfcGF0aHMYASADKAkiZQoMUHJlY29uZGl0aW9uEhAKBmV4aXN0cxgBIAEoCEgAEjEKC3VwZGF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAQhAKDmNvbmRpdGlvbl90eXBlIqkCChJUcmFuc2FjdGlvbk9wdGlvbnMSRQoJcmVhZF9vbmx5GAIgASgLMjAuZ29vZ2xlLmZpcmVzdG9yZS52MS5UcmFuc2FjdGlvbk9wdGlvbnMuUmVhZE9ubHlIABJHCgpyZWFkX3dyaXRlGAMgASgLMjEuZ29vZ2xlLmZpcmVzdG9yZS52MS5UcmFuc2FjdGlvbk9wdGlvbnMuUmVhZFdyaXRlSAAaJgoJUmVhZFdyaXRlEhkKEXJldHJ5X3RyYW5zYWN0aW9uGAEgASgMGlMKCFJlYWRPbmx5Ei8KCXJlYWRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAEIWChRjb25zaXN0ZW5jeV9zZWxlY3RvckIGCgRtb2RlQsMBChdjb20uZ29vZ2xlLmZpcmVzdG9yZS52MUILQ29tbW9uUHJvdG9QAVo7Y2xvdWQuZ29vZ2xlLmNvbS9nby9maXJlc3RvcmUvYXBpdjEvZmlyZXN0b3JlcGI7ZmlyZXN0b3JlcGKiAgRHQ0ZTqgIZR29vZ2xlLkNsb3VkLkZpcmVzdG9yZS5WMcoCGUdvb2dsZVxDbG91ZFxGaXJlc3RvcmVcVjHqAhxHb29nbGU6OkNsb3VkOjpGaXJlc3RvcmU6OlYxYgZwcm90bzM", [file_google_protobuf_timestamp]);

/**
 * A set of field paths on a document.
 * Used to restrict a get or update operation on a document to a subset of its
 * fields.
 * This is different from standard field masks, as this is always scoped to a
 * [Document][google.firestore.v1.Document], and takes in account the dynamic
 * nature of [Value][google.firestore.v1.Value].
 *
 * @generated from message google.firestore.v1.DocumentMask
 */
export type DocumentMask = Message<"google.firestore.v1.DocumentMask"> & {
  /**
   * The list of field paths in the mask. See
   * [Document.fields][google.firestore.v1.Document.fields] for a field path
   * syntax reference.
   *
   * @generated from field: repeated string field_paths = 1;
   */
  fieldPaths: string[];
};

/**
 * Describes the message google.firestore.v1.DocumentMask.
 * Use `create(DocumentMaskSchema)` to create a new message.
 */
export const DocumentMaskSchema: GenMessage<DocumentMask> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_common, 0);

/**
 * A precondition on a document, used for conditional operations.
 *
 * @generated from message google.firestore.v1.Precondition
 */
export type Precondition = Message<"google.firestore.v1.Precondition"> & {
  /**
   * The type of precondition.
   *
   * @generated from oneof google.firestore.v1.Precondition.condition_type
   */
  conditionType: {
    /**
     * When set to `true`, the target document must exist.
     * When set to `false`, the target document must not exist.
     *
     * @generated from field: bool exists = 1;
     */
    value: boolean;
    case: "exists";
  } | {
    /**
     * When set, the target document must exist and have been last updated at
     * that time. Timestamp must be microsecond aligned.
     *
     * @generated from field: google.protobuf.Timestamp update_time = 2;
     */
    value: Timestamp;
    case: "updateTime";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1.Precondition.
 * Use `create(PreconditionSchema)` to create a new message.
 */
export const PreconditionSchema: GenMessage<Precondition> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_common, 1);

/**
 * Options for creating a new transaction.
 *
 * @generated from message google.firestore.v1.TransactionOptions
 */
export type TransactionOptions = Message<"google.firestore.v1.TransactionOptions"> & {
  /**
   * The mode of the transaction.
   *
   * @generated from oneof google.firestore.v1.TransactionOptions.mode
   */
  mode: {
    /**
     * The transaction can only be used for read operations.
     *
     * @generated from field: google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
     */
    value: TransactionOptions_ReadOnly;
    case: "readOnly";
  } | {
    /**
     * The transaction can be used for both read and write operations.
     *
     * @generated from field: google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
     */
    value: TransactionOptions_ReadWrite;
    case: "readWrite";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1.TransactionOptions.
 * Use `create(TransactionOptionsSchema)` to create a new message.
 */
export const TransactionOptionsSchema: GenMessage<TransactionOptions> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_common, 2);

/**
 * Options for a transaction that can be used to read and write documents.
 *
 * Firestore does not allow 3rd party auth requests to create read-write.
 * transactions.
 *
 * @generated from message google.firestore.v1.TransactionOptions.ReadWrite
 */
export type TransactionOptions_ReadWrite = Message<"google.firestore.v1.TransactionOptions.ReadWrite"> & {
  /**
   * An optional transaction to retry.
   *
   * @generated from field: bytes retry_transaction = 1;
   */
  retryTransaction: Uint8Array;
};

/**
 * Describes the message google.firestore.v1.TransactionOptions.ReadWrite.
 * Use `create(TransactionOptions_ReadWriteSchema)` to create a new message.
 */
export const TransactionOptions_ReadWriteSchema: GenMessage<TransactionOptions_ReadWrite> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_common, 2, 0);

/**
 * Options for a transaction that can only be used to read documents.
 *
 * @generated from message google.firestore.v1.TransactionOptions.ReadOnly
 */
export type TransactionOptions_ReadOnly = Message<"google.firestore.v1.TransactionOptions.ReadOnly"> & {
  /**
   * The consistency mode for this transaction. If not set, defaults to strong
   * consistency.
   *
   * @generated from oneof google.firestore.v1.TransactionOptions.ReadOnly.consistency_selector
   */
  consistencySelector: {
    /**
     * Reads documents at the given time.
     *
     * This must be a microsecond precision timestamp within the past one
     * hour, or if Point-in-Time Recovery is enabled, can additionally be a
     * whole minute timestamp within the past 7 days.
     *
     * @generated from field: google.protobuf.Timestamp read_time = 2;
     */
    value: Timestamp;
    case: "readTime";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1.TransactionOptions.ReadOnly.
 * Use `create(TransactionOptions_ReadOnlySchema)` to create a new message.
 */
export const TransactionOptions_ReadOnlySchema: GenMessage<TransactionOptions_ReadOnly> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_common, 2, 1);

