// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/v1/query.proto (package google.firestore.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { Value } from "./document_pb";
import { file_google_firestore_v1_document } from "./document_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/v1/query.proto.
 */
export const file_google_firestore_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Ch9nb29nbGUvZmlyZXN0b3JlL3YxL3F1ZXJ5LnByb3RvEhNnb29nbGUuZmlyZXN0b3JlLnYxIvgTCg9TdHJ1Y3R1cmVkUXVlcnkSPwoGc2VsZWN0GAEgASgLMi8uZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuUHJvamVjdGlvbhJFCgRmcm9tGAIgAygLMjcuZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuQ29sbGVjdGlvblNlbGVjdG9yEjoKBXdoZXJlGAMgASgLMisuZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuRmlsdGVyEjwKCG9yZGVyX2J5GAQgAygLMiouZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuT3JkZXISLQoIc3RhcnRfYXQYByABKAsyGy5nb29nbGUuZmlyZXN0b3JlLnYxLkN1cnNvchIrCgZlbmRfYXQYCCABKAsyGy5nb29nbGUuZmlyZXN0b3JlLnYxLkN1cnNvchIOCgZvZmZzZXQYBiABKAUSKgoFbGltaXQYBSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRJLCgxmaW5kX25lYXJlc3QYCSABKAsyMC5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5GaW5kTmVhcmVzdEID4EEBGkQKEkNvbGxlY3Rpb25TZWxlY3RvchIVCg1jb2xsZWN0aW9uX2lkGAIgASgJEhcKD2FsbF9kZXNjZW5kYW50cxgDIAEoCBr9AQoGRmlsdGVyElAKEGNvbXBvc2l0ZV9maWx0ZXIYASABKAsyNC5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5Db21wb3NpdGVGaWx0ZXJIABJICgxmaWVsZF9maWx0ZXIYAiABKAsyMC5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5GaWVsZEZpbHRlckgAEkgKDHVuYXJ5X2ZpbHRlchgDIAEoCzIwLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LlVuYXJ5RmlsdGVySABCDQoLZmlsdGVyX3R5cGUa0QEKD0NvbXBvc2l0ZUZpbHRlchJJCgJvcBgBIAEoDjI9Lmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkNvbXBvc2l0ZUZpbHRlci5PcGVyYXRvchI8CgdmaWx0ZXJzGAIgAygLMisuZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuRmlsdGVyIjUKCE9wZXJhdG9yEhgKFE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASBwoDQU5EEAESBgoCT1IQAhqYAwoLRmllbGRGaWx0ZXISQgoFZmllbGQYASABKAsyMy5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5GaWVsZFJlZmVyZW5jZRJFCgJvcBgCIAEoDjI5Lmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkRmlsdGVyLk9wZXJhdG9yEikKBXZhbHVlGAMgASgLMhouZ29vZ2xlLmZpcmVzdG9yZS52MS5WYWx1ZSLSAQoIT3BlcmF0b3ISGAoUT1BFUkFUT1JfVU5TUEVDSUZJRUQQABINCglMRVNTX1RIQU4QARIWChJMRVNTX1RIQU5fT1JfRVFVQUwQAhIQCgxHUkVBVEVSX1RIQU4QAxIZChVHUkVBVEVSX1RIQU5fT1JfRVFVQUwQBBIJCgVFUVVBTBAFEg0KCU5PVF9FUVVBTBAGEhIKDkFSUkFZX0NPTlRBSU5TEAcSBgoCSU4QCBIWChJBUlJBWV9DT05UQUlOU19BTlkQCRIKCgZOT1RfSU4QChqKAgoLVW5hcnlGaWx0ZXISRQoCb3AYASABKA4yOS5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5VbmFyeUZpbHRlci5PcGVyYXRvchJECgVmaWVsZBgCIAEoCzIzLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlSAAiXgoIT3BlcmF0b3ISGAoUT1BFUkFUT1JfVU5TUEVDSUZJRUQQABIKCgZJU19OQU4QAhILCgdJU19OVUxMEAMSDgoKSVNfTk9UX05BThAEEg8KC0lTX05PVF9OVUxMEAVCDgoMb3BlcmFuZF90eXBlGo4BCgVPcmRlchJCCgVmaWVsZBgBIAEoCzIzLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlEkEKCWRpcmVjdGlvbhgCIAEoDjIuLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkRpcmVjdGlvbhokCg5GaWVsZFJlZmVyZW5jZRISCgpmaWVsZF9wYXRoGAIgASgJGlEKClByb2plY3Rpb24SQwoGZmllbGRzGAIgAygLMjMuZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkUXVlcnkuRmllbGRSZWZlcmVuY2Ua6gMKC0ZpbmROZWFyZXN0Ek4KDHZlY3Rvcl9maWVsZBgBIAEoCzIzLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlQgPgQQISNQoMcXVlcnlfdmVjdG9yGAIgASgLMhouZ29vZ2xlLmZpcmVzdG9yZS52MS5WYWx1ZUID4EECEl8KEGRpc3RhbmNlX21lYXN1cmUYAyABKA4yQC5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeS5GaW5kTmVhcmVzdC5EaXN0YW5jZU1lYXN1cmVCA+BBAhIvCgVsaW1pdBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlQgPgQQISIgoVZGlzdGFuY2VfcmVzdWx0X2ZpZWxkGAUgASgJQgPgQQESPQoSZGlzdGFuY2VfdGhyZXNob2xkGAYgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlQgPgQQEiXwoPRGlzdGFuY2VNZWFzdXJlEiAKHERJU1RBTkNFX01FQVNVUkVfVU5TUEVDSUZJRUQQABINCglFVUNMSURFQU4QARIKCgZDT1NJTkUQAhIPCgtET1RfUFJPRFVDVBADIkUKCURpcmVjdGlvbhIZChVESVJFQ1RJT05fVU5TUEVDSUZJRUQQABINCglBU0NFTkRJTkcQARIOCgpERVNDRU5ESU5HEAIiuAUKGlN0cnVjdHVyZWRBZ2dyZWdhdGlvblF1ZXJ5EkAKEHN0cnVjdHVyZWRfcXVlcnkYASABKAsyJC5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRRdWVyeUgAElYKDGFnZ3JlZ2F0aW9ucxgDIAMoCzI7Lmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZEFnZ3JlZ2F0aW9uUXVlcnkuQWdncmVnYXRpb25CA+BBARrxAwoLQWdncmVnYXRpb24SUgoFY291bnQYASABKAsyQS5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRBZ2dyZWdhdGlvblF1ZXJ5LkFnZ3JlZ2F0aW9uLkNvdW50SAASTgoDc3VtGAIgASgLMj8uZ29vZ2xlLmZpcmVzdG9yZS52MS5TdHJ1Y3R1cmVkQWdncmVnYXRpb25RdWVyeS5BZ2dyZWdhdGlvbi5TdW1IABJOCgNhdmcYAyABKAsyPy5nb29nbGUuZmlyZXN0b3JlLnYxLlN0cnVjdHVyZWRBZ2dyZWdhdGlvblF1ZXJ5LkFnZ3JlZ2F0aW9uLkF2Z0gAEhIKBWFsaWFzGAcgASgJQgPgQQEaOAoFQ291bnQSLwoFdXBfdG8YASABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUID4EEBGkkKA1N1bRJCCgVmaWVsZBgBIAEoCzIzLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlGkkKA0F2ZxJCCgVmaWVsZBgBIAEoCzIzLmdvb2dsZS5maXJlc3RvcmUudjEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlQgoKCG9wZXJhdG9yQgwKCnF1ZXJ5X3R5cGUiRAoGQ3Vyc29yEioKBnZhbHVlcxgBIAMoCzIaLmdvb2dsZS5maXJlc3RvcmUudjEuVmFsdWUSDgoGYmVmb3JlGAIgASgIQsIBChdjb20uZ29vZ2xlLmZpcmVzdG9yZS52MUIKUXVlcnlQcm90b1ABWjtjbG91ZC5nb29nbGUuY29tL2dvL2ZpcmVzdG9yZS9hcGl2MS9maXJlc3RvcmVwYjtmaXJlc3RvcmVwYqICBEdDRlOqAhlHb29nbGUuQ2xvdWQuRmlyZXN0b3JlLlYxygIZR29vZ2xlXENsb3VkXEZpcmVzdG9yZVxWMeoCHEdvb2dsZTo6Q2xvdWQ6OkZpcmVzdG9yZTo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_firestore_v1_document, file_google_protobuf_wrappers]);

/**
 * A Firestore query.
 *
 * The query stages are executed in the following order:
 * 1. from
 * 2. where
 * 3. select
 * 4. order_by + start_at + end_at
 * 5. offset
 * 6. limit
 *
 * @generated from message google.firestore.v1.StructuredQuery
 */
export type StructuredQuery = Message<"google.firestore.v1.StructuredQuery"> & {
  /**
   * Optional sub-set of the fields to return.
   *
   * This acts as a [DocumentMask][google.firestore.v1.DocumentMask] over the
   * documents returned from a query. When not set, assumes that the caller
   * wants all fields returned.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.Projection select = 1;
   */
  select?: StructuredQuery_Projection;

  /**
   * The collections to query.
   *
   * @generated from field: repeated google.firestore.v1.StructuredQuery.CollectionSelector from = 2;
   */
  from: StructuredQuery_CollectionSelector[];

  /**
   * The filter to apply.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.Filter where = 3;
   */
  where?: StructuredQuery_Filter;

  /**
   * The order to apply to the query results.
   *
   * Firestore allows callers to provide a full ordering, a partial ordering, or
   * no ordering at all. In all cases, Firestore guarantees a stable ordering
   * through the following rules:
   *
   *  * The `order_by` is required to reference all fields used with an
   *    inequality filter.
   *  * All fields that are required to be in the `order_by` but are not already
   *    present are appended in lexicographical ordering of the field name.
   *  * If an order on `__name__` is not specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order
   * specified, or 'ASCENDING' if no order was specified. For example:
   *
   *  * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC`
   *  * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC`
   *  * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC`
   *  * `WHERE __name__ > ... AND a > 1` becomes
   *     `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
   *
   * @generated from field: repeated google.firestore.v1.StructuredQuery.Order order_by = 4;
   */
  orderBy: StructuredQuery_Order[];

  /**
   * A potential prefix of a position in the result set to start the query at.
   *
   * The ordering of the result set is based on the `ORDER BY` clause of the
   * original query.
   *
   * ```
   * SELECT * FROM k WHERE a = 1 AND b > 2 ORDER BY b ASC, __name__ ASC;
   * ```
   *
   * This query's results are ordered by `(b ASC, __name__ ASC)`.
   *
   * Cursors can reference either the full ordering or a prefix of the location,
   * though it cannot reference more fields than what are in the provided
   * `ORDER BY`.
   *
   * Continuing off the example above, attaching the following start cursors
   * will have varying impact:
   *
   * - `START BEFORE (2, /k/123)`: start the query right before `a = 1 AND
   *    b > 2 AND __name__ > /k/123`.
   * - `START AFTER (10)`: start the query right after `a = 1 AND b > 10`.
   *
   * Unlike `OFFSET` which requires scanning over the first N results to skip,
   * a start cursor allows the query to begin at a logical position. This
   * position is not required to match an actual result, it will scan forward
   * from this position to find the next document.
   *
   * Requires:
   *
   * * The number of values cannot be greater than the number of fields
   *   specified in the `ORDER BY` clause.
   *
   * @generated from field: google.firestore.v1.Cursor start_at = 7;
   */
  startAt?: Cursor;

  /**
   * A potential prefix of a position in the result set to end the query at.
   *
   * This is similar to `START_AT` but with it controlling the end position
   * rather than the start position.
   *
   * Requires:
   *
   * * The number of values cannot be greater than the number of fields
   *   specified in the `ORDER BY` clause.
   *
   * @generated from field: google.firestore.v1.Cursor end_at = 8;
   */
  endAt?: Cursor;

  /**
   * The number of documents to skip before returning the first result.
   *
   * This applies after the constraints specified by the `WHERE`, `START AT`, &
   * `END AT` but before the `LIMIT` clause.
   *
   * Requires:
   *
   * * The value must be greater than or equal to zero if specified.
   *
   * @generated from field: int32 offset = 6;
   */
  offset: number;

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints.
   *
   * Requires:
   *
   * * The value must be greater than or equal to zero if specified.
   *
   * @generated from field: google.protobuf.Int32Value limit = 5;
   */
  limit?: number;

  /**
   * Optional. A potential nearest neighbors search.
   *
   * Applies after all other filters and ordering.
   *
   * Finds the closest vector embeddings to the given query vector.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FindNearest find_nearest = 9;
   */
  findNearest?: StructuredQuery_FindNearest;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.
 * Use `create(StructuredQuerySchema)` to create a new message.
 */
export const StructuredQuerySchema: GenMessage<StructuredQuery> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0);

/**
 * A selection of a collection, such as `messages as m1`.
 *
 * @generated from message google.firestore.v1.StructuredQuery.CollectionSelector
 */
export type StructuredQuery_CollectionSelector = Message<"google.firestore.v1.StructuredQuery.CollectionSelector"> & {
  /**
   * The collection ID.
   * When set, selects only collections with this ID.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId: string;

  /**
   * When false, selects only collections that are immediate children of
   * the `parent` specified in the containing `RunQueryRequest`.
   * When true, selects all descendant collections.
   *
   * @generated from field: bool all_descendants = 3;
   */
  allDescendants: boolean;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.CollectionSelector.
 * Use `create(StructuredQuery_CollectionSelectorSchema)` to create a new message.
 */
export const StructuredQuery_CollectionSelectorSchema: GenMessage<StructuredQuery_CollectionSelector> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 0);

/**
 * A filter.
 *
 * @generated from message google.firestore.v1.StructuredQuery.Filter
 */
export type StructuredQuery_Filter = Message<"google.firestore.v1.StructuredQuery.Filter"> & {
  /**
   * The type of filter.
   *
   * @generated from oneof google.firestore.v1.StructuredQuery.Filter.filter_type
   */
  filterType: {
    /**
     * A composite filter.
     *
     * @generated from field: google.firestore.v1.StructuredQuery.CompositeFilter composite_filter = 1;
     */
    value: StructuredQuery_CompositeFilter;
    case: "compositeFilter";
  } | {
    /**
     * A filter on a document field.
     *
     * @generated from field: google.firestore.v1.StructuredQuery.FieldFilter field_filter = 2;
     */
    value: StructuredQuery_FieldFilter;
    case: "fieldFilter";
  } | {
    /**
     * A filter that takes exactly one argument.
     *
     * @generated from field: google.firestore.v1.StructuredQuery.UnaryFilter unary_filter = 3;
     */
    value: StructuredQuery_UnaryFilter;
    case: "unaryFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.Filter.
 * Use `create(StructuredQuery_FilterSchema)` to create a new message.
 */
export const StructuredQuery_FilterSchema: GenMessage<StructuredQuery_Filter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 1);

/**
 * A filter that merges multiple other filters using the given operator.
 *
 * @generated from message google.firestore.v1.StructuredQuery.CompositeFilter
 */
export type StructuredQuery_CompositeFilter = Message<"google.firestore.v1.StructuredQuery.CompositeFilter"> & {
  /**
   * The operator for combining multiple filters.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.CompositeFilter.Operator op = 1;
   */
  op: StructuredQuery_CompositeFilter_Operator;

  /**
   * The list of filters to combine.
   *
   * Requires:
   *
   * * At least one filter is present.
   *
   * @generated from field: repeated google.firestore.v1.StructuredQuery.Filter filters = 2;
   */
  filters: StructuredQuery_Filter[];
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.CompositeFilter.
 * Use `create(StructuredQuery_CompositeFilterSchema)` to create a new message.
 */
export const StructuredQuery_CompositeFilterSchema: GenMessage<StructuredQuery_CompositeFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 2);

/**
 * A composite filter operator.
 *
 * @generated from enum google.firestore.v1.StructuredQuery.CompositeFilter.Operator
 */
export enum StructuredQuery_CompositeFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * Documents are required to satisfy all of the combined filters.
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,

  /**
   * Documents are required to satisfy at least one of the combined filters.
   *
   * @generated from enum value: OR = 2;
   */
  OR = 2,
}

/**
 * Describes the enum google.firestore.v1.StructuredQuery.CompositeFilter.Operator.
 */
export const StructuredQuery_CompositeFilter_OperatorSchema: GenEnum<StructuredQuery_CompositeFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1_query, 0, 2, 0);

/**
 * A filter on a specific field.
 *
 * @generated from message google.firestore.v1.StructuredQuery.FieldFilter
 */
export type StructuredQuery_FieldFilter = Message<"google.firestore.v1.StructuredQuery.FieldFilter"> & {
  /**
   * The field to filter by.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The operator to filter by.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldFilter.Operator op = 2;
   */
  op: StructuredQuery_FieldFilter_Operator;

  /**
   * The value to compare to.
   *
   * @generated from field: google.firestore.v1.Value value = 3;
   */
  value?: Value;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.FieldFilter.
 * Use `create(StructuredQuery_FieldFilterSchema)` to create a new message.
 */
export const StructuredQuery_FieldFilterSchema: GenMessage<StructuredQuery_FieldFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 3);

/**
 * A field filter operator.
 *
 * @generated from enum google.firestore.v1.StructuredQuery.FieldFilter.Operator
 */
export enum StructuredQuery_FieldFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The given `field` is less than the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN = 1;
   */
  LESS_THAN = 1,

  /**
   * The given `field` is less than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 2;
   */
  LESS_THAN_OR_EQUAL = 2,

  /**
   * The given `field` is greater than the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * The given `field` is greater than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * The given `field` is equal to the given `value`.
   *
   * @generated from enum value: EQUAL = 5;
   */
  EQUAL = 5,

  /**
   * The given `field` is not equal to the given `value`.
   *
   * Requires:
   *
   * * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_EQUAL = 6;
   */
  NOT_EQUAL = 6,

  /**
   * The given `field` is an array that contains the given `value`.
   *
   * @generated from enum value: ARRAY_CONTAINS = 7;
   */
  ARRAY_CONTAINS = 7,

  /**
   * The given `field` is equal to at least one value in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue`, subject to disjunction
   *   limits.
   * * No `NOT_IN` filters in the same query.
   *
   * @generated from enum value: IN = 8;
   */
  IN = 8,

  /**
   * The given `field` is an array that contains any of the values in the
   * given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue`, subject to disjunction
   *   limits.
   * * No other `ARRAY_CONTAINS_ANY` filters within the same disjunction.
   * * No `NOT_IN` filters in the same query.
   *
   * @generated from enum value: ARRAY_CONTAINS_ANY = 9;
   */
  ARRAY_CONTAINS_ANY = 9,

  /**
   * The value of the `field` is not in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue` with at most 10 values.
   * * No other `OR`, `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`,
   *   `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_IN = 10;
   */
  NOT_IN = 10,
}

/**
 * Describes the enum google.firestore.v1.StructuredQuery.FieldFilter.Operator.
 */
export const StructuredQuery_FieldFilter_OperatorSchema: GenEnum<StructuredQuery_FieldFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1_query, 0, 3, 0);

/**
 * A filter with a single operand.
 *
 * @generated from message google.firestore.v1.StructuredQuery.UnaryFilter
 */
export type StructuredQuery_UnaryFilter = Message<"google.firestore.v1.StructuredQuery.UnaryFilter"> & {
  /**
   * The unary operator to apply.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.UnaryFilter.Operator op = 1;
   */
  op: StructuredQuery_UnaryFilter_Operator;

  /**
   * The argument to the filter.
   *
   * @generated from oneof google.firestore.v1.StructuredQuery.UnaryFilter.operand_type
   */
  operandType: {
    /**
     * The field to which to apply the operator.
     *
     * @generated from field: google.firestore.v1.StructuredQuery.FieldReference field = 2;
     */
    value: StructuredQuery_FieldReference;
    case: "field";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.UnaryFilter.
 * Use `create(StructuredQuery_UnaryFilterSchema)` to create a new message.
 */
export const StructuredQuery_UnaryFilterSchema: GenMessage<StructuredQuery_UnaryFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 4);

/**
 * A unary operator.
 *
 * @generated from enum google.firestore.v1.StructuredQuery.UnaryFilter.Operator
 */
export enum StructuredQuery_UnaryFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The given `field` is equal to `NaN`.
   *
   * @generated from enum value: IS_NAN = 2;
   */
  IS_NAN = 2,

  /**
   * The given `field` is equal to `NULL`.
   *
   * @generated from enum value: IS_NULL = 3;
   */
  IS_NULL = 3,

  /**
   * The given `field` is not equal to `NaN`.
   *
   * Requires:
   *
   * * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: IS_NOT_NAN = 4;
   */
  IS_NOT_NAN = 4,

  /**
   * The given `field` is not equal to `NULL`.
   *
   * Requires:
   *
   * * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: IS_NOT_NULL = 5;
   */
  IS_NOT_NULL = 5,
}

/**
 * Describes the enum google.firestore.v1.StructuredQuery.UnaryFilter.Operator.
 */
export const StructuredQuery_UnaryFilter_OperatorSchema: GenEnum<StructuredQuery_UnaryFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1_query, 0, 4, 0);

/**
 * An order on a field.
 *
 * @generated from message google.firestore.v1.StructuredQuery.Order
 */
export type StructuredQuery_Order = Message<"google.firestore.v1.StructuredQuery.Order"> & {
  /**
   * The field to order by.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The direction to order by. Defaults to `ASCENDING`.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.Direction direction = 2;
   */
  direction: StructuredQuery_Direction;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.Order.
 * Use `create(StructuredQuery_OrderSchema)` to create a new message.
 */
export const StructuredQuery_OrderSchema: GenMessage<StructuredQuery_Order> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 5);

/**
 * A reference to a field in a document, ex: `stats.operations`.
 *
 * @generated from message google.firestore.v1.StructuredQuery.FieldReference
 */
export type StructuredQuery_FieldReference = Message<"google.firestore.v1.StructuredQuery.FieldReference"> & {
  /**
   * A reference to a field in a document.
   *
   * Requires:
   *
   * * MUST be a dot-delimited (`.`) string of segments, where each segment
   * conforms to [document field name][google.firestore.v1.Document.fields]
   * limitations.
   *
   * @generated from field: string field_path = 2;
   */
  fieldPath: string;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.FieldReference.
 * Use `create(StructuredQuery_FieldReferenceSchema)` to create a new message.
 */
export const StructuredQuery_FieldReferenceSchema: GenMessage<StructuredQuery_FieldReference> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 6);

/**
 * The projection of document's fields to return.
 *
 * @generated from message google.firestore.v1.StructuredQuery.Projection
 */
export type StructuredQuery_Projection = Message<"google.firestore.v1.StructuredQuery.Projection"> & {
  /**
   * The fields to return.
   *
   * If empty, all fields are returned. To only return the name
   * of the document, use `['__name__']`.
   *
   * @generated from field: repeated google.firestore.v1.StructuredQuery.FieldReference fields = 2;
   */
  fields: StructuredQuery_FieldReference[];
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.Projection.
 * Use `create(StructuredQuery_ProjectionSchema)` to create a new message.
 */
export const StructuredQuery_ProjectionSchema: GenMessage<StructuredQuery_Projection> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 7);

/**
 * Nearest Neighbors search config. The ordering provided by FindNearest
 * supersedes the order_by stage. If multiple documents have the same vector
 * distance, the returned document order is not guaranteed to be stable
 * between queries.
 *
 * @generated from message google.firestore.v1.StructuredQuery.FindNearest
 */
export type StructuredQuery_FindNearest = Message<"google.firestore.v1.StructuredQuery.FindNearest"> & {
  /**
   * Required. An indexed vector field to search upon. Only documents which
   * contain vectors whose dimensionality match the query_vector can be
   * returned.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldReference vector_field = 1;
   */
  vectorField?: StructuredQuery_FieldReference;

  /**
   * Required. The query vector that we are searching on. Must be a vector of
   * no more than 2048 dimensions.
   *
   * @generated from field: google.firestore.v1.Value query_vector = 2;
   */
  queryVector?: Value;

  /**
   * Required. The distance measure to use, required.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FindNearest.DistanceMeasure distance_measure = 3;
   */
  distanceMeasure: StructuredQuery_FindNearest_DistanceMeasure;

  /**
   * Required. The number of nearest neighbors to return. Must be a positive
   * integer of no more than 1000.
   *
   * @generated from field: google.protobuf.Int32Value limit = 4;
   */
  limit?: number;

  /**
   * Optional. Optional name of the field to output the result of the vector
   * distance calculation. Must conform to [document field
   * name][google.firestore.v1.Document.fields] limitations.
   *
   * @generated from field: string distance_result_field = 5;
   */
  distanceResultField: string;

  /**
   * Optional. Option to specify a threshold for which no less similar
   * documents will be returned. The behavior of the specified
   * `distance_measure` will affect the meaning of the distance threshold.
   * Since DOT_PRODUCT distances increase when the vectors are more similar,
   * the comparison is inverted.
   *
   * For EUCLIDEAN, COSINE: WHERE distance <= distance_threshold
   * For DOT_PRODUCT:       WHERE distance >= distance_threshold
   *
   * @generated from field: google.protobuf.DoubleValue distance_threshold = 6;
   */
  distanceThreshold?: number;
};

/**
 * Describes the message google.firestore.v1.StructuredQuery.FindNearest.
 * Use `create(StructuredQuery_FindNearestSchema)` to create a new message.
 */
export const StructuredQuery_FindNearestSchema: GenMessage<StructuredQuery_FindNearest> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 0, 8);

/**
 * The distance measure to use when comparing vectors.
 *
 * @generated from enum google.firestore.v1.StructuredQuery.FindNearest.DistanceMeasure
 */
export enum StructuredQuery_FindNearest_DistanceMeasure {
  /**
   * Should not be set.
   *
   * @generated from enum value: DISTANCE_MEASURE_UNSPECIFIED = 0;
   */
  DISTANCE_MEASURE_UNSPECIFIED = 0,

  /**
   * Measures the EUCLIDEAN distance between the vectors. See
   * [Euclidean](https://en.wikipedia.org/wiki/Euclidean_distance) to learn
   * more. The resulting distance decreases the more similar two vectors
   * are.
   *
   * @generated from enum value: EUCLIDEAN = 1;
   */
  EUCLIDEAN = 1,

  /**
   * COSINE distance compares vectors based on the angle between them, which
   * allows you to measure similarity that isn't based on the vectors
   * magnitude. We recommend using DOT_PRODUCT with unit normalized vectors
   * instead of COSINE distance, which is mathematically equivalent with
   * better performance. See [Cosine
   * Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) to learn
   * more about COSINE similarity and COSINE distance. The resulting
   * COSINE distance decreases the more similar two vectors are.
   *
   * @generated from enum value: COSINE = 2;
   */
  COSINE = 2,

  /**
   * Similar to cosine but is affected by the magnitude of the vectors. See
   * [Dot Product](https://en.wikipedia.org/wiki/Dot_product) to learn more.
   * The resulting distance increases the more similar two vectors are.
   *
   * @generated from enum value: DOT_PRODUCT = 3;
   */
  DOT_PRODUCT = 3,
}

/**
 * Describes the enum google.firestore.v1.StructuredQuery.FindNearest.DistanceMeasure.
 */
export const StructuredQuery_FindNearest_DistanceMeasureSchema: GenEnum<StructuredQuery_FindNearest_DistanceMeasure> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1_query, 0, 8, 0);

/**
 * A sort direction.
 *
 * @generated from enum google.firestore.v1.StructuredQuery.Direction
 */
export enum StructuredQuery_Direction {
  /**
   * Unspecified.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum google.firestore.v1.StructuredQuery.Direction.
 */
export const StructuredQuery_DirectionSchema: GenEnum<StructuredQuery_Direction> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1_query, 0, 0);

/**
 * Firestore query for running an aggregation over a
 * [StructuredQuery][google.firestore.v1.StructuredQuery].
 *
 * @generated from message google.firestore.v1.StructuredAggregationQuery
 */
export type StructuredAggregationQuery = Message<"google.firestore.v1.StructuredAggregationQuery"> & {
  /**
   * The base query to aggregate over.
   *
   * @generated from oneof google.firestore.v1.StructuredAggregationQuery.query_type
   */
  queryType: {
    /**
     * Nested structured query.
     *
     * @generated from field: google.firestore.v1.StructuredQuery structured_query = 1;
     */
    value: StructuredQuery;
    case: "structuredQuery";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Series of aggregations to apply over the results of the
   * `structured_query`.
   *
   * Requires:
   *
   * * A minimum of one and maximum of five aggregations per query.
   *
   * @generated from field: repeated google.firestore.v1.StructuredAggregationQuery.Aggregation aggregations = 3;
   */
  aggregations: StructuredAggregationQuery_Aggregation[];
};

/**
 * Describes the message google.firestore.v1.StructuredAggregationQuery.
 * Use `create(StructuredAggregationQuerySchema)` to create a new message.
 */
export const StructuredAggregationQuerySchema: GenMessage<StructuredAggregationQuery> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 1);

/**
 * Defines an aggregation that produces a single result.
 *
 * @generated from message google.firestore.v1.StructuredAggregationQuery.Aggregation
 */
export type StructuredAggregationQuery_Aggregation = Message<"google.firestore.v1.StructuredAggregationQuery.Aggregation"> & {
  /**
   * The type of aggregation to perform, required.
   *
   * @generated from oneof google.firestore.v1.StructuredAggregationQuery.Aggregation.operator
   */
  operator: {
    /**
     * Count aggregator.
     *
     * @generated from field: google.firestore.v1.StructuredAggregationQuery.Aggregation.Count count = 1;
     */
    value: StructuredAggregationQuery_Aggregation_Count;
    case: "count";
  } | {
    /**
     * Sum aggregator.
     *
     * @generated from field: google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum sum = 2;
     */
    value: StructuredAggregationQuery_Aggregation_Sum;
    case: "sum";
  } | {
    /**
     * Average aggregator.
     *
     * @generated from field: google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg avg = 3;
     */
    value: StructuredAggregationQuery_Aggregation_Avg;
    case: "avg";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Optional name of the field to store the result of the
   * aggregation into.
   *
   * If not provided, Firestore will pick a default name following the format
   * `field_<incremental_id++>`. For example:
   *
   * ```
   * AGGREGATE
   *   COUNT_UP_TO(1) AS count_up_to_1,
   *   COUNT_UP_TO(2),
   *   COUNT_UP_TO(3) AS count_up_to_3,
   *   COUNT(*)
   * OVER (
   *   ...
   * );
   * ```
   *
   * becomes:
   *
   * ```
   * AGGREGATE
   *   COUNT_UP_TO(1) AS count_up_to_1,
   *   COUNT_UP_TO(2) AS field_1,
   *   COUNT_UP_TO(3) AS count_up_to_3,
   *   COUNT(*) AS field_2
   * OVER (
   *   ...
   * );
   * ```
   *
   * Requires:
   *
   * * Must be unique across all aggregation aliases.
   * * Conform to [document field name][google.firestore.v1.Document.fields]
   * limitations.
   *
   * @generated from field: string alias = 7;
   */
  alias: string;
};

/**
 * Describes the message google.firestore.v1.StructuredAggregationQuery.Aggregation.
 * Use `create(StructuredAggregationQuery_AggregationSchema)` to create a new message.
 */
export const StructuredAggregationQuery_AggregationSchema: GenMessage<StructuredAggregationQuery_Aggregation> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 1, 0);

/**
 * Count of documents that match the query.
 *
 * The `COUNT(*)` aggregation function operates on the entire document
 * so it does not require a field reference.
 *
 * @generated from message google.firestore.v1.StructuredAggregationQuery.Aggregation.Count
 */
export type StructuredAggregationQuery_Aggregation_Count = Message<"google.firestore.v1.StructuredAggregationQuery.Aggregation.Count"> & {
  /**
   * Optional. Optional constraint on the maximum number of documents to
   * count.
   *
   * This provides a way to set an upper bound on the number of documents
   * to scan, limiting latency, and cost.
   *
   * Unspecified is interpreted as no bound.
   *
   * High-Level Example:
   *
   * ```
   * AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k );
   * ```
   *
   * Requires:
   *
   * * Must be greater than zero when present.
   *
   * @generated from field: google.protobuf.Int64Value up_to = 1;
   */
  upTo?: bigint;
};

/**
 * Describes the message google.firestore.v1.StructuredAggregationQuery.Aggregation.Count.
 * Use `create(StructuredAggregationQuery_Aggregation_CountSchema)` to create a new message.
 */
export const StructuredAggregationQuery_Aggregation_CountSchema: GenMessage<StructuredAggregationQuery_Aggregation_Count> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 1, 0, 0);

/**
 * Sum of the values of the requested field.
 *
 * * Only numeric values will be aggregated. All non-numeric values
 * including `NULL` are skipped.
 *
 * * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
 * follows IEEE-754 standards.
 *
 * * If the aggregated value set is empty, returns 0.
 *
 * * Returns a 64-bit integer if all aggregated numbers are integers and the
 * sum result does not overflow. Otherwise, the result is returned as a
 * double. Note that even if all the aggregated values are integers, the
 * result is returned as a double if it cannot fit within a 64-bit signed
 * integer. When this occurs, the returned value will lose precision.
 *
 * * When underflow occurs, floating-point aggregation is non-deterministic.
 * This means that running the same query repeatedly without any changes to
 * the underlying values could produce slightly different results each
 * time. In those cases, values should be stored as integers over
 * floating-point numbers.
 *
 * @generated from message google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum
 */
export type StructuredAggregationQuery_Aggregation_Sum = Message<"google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum"> & {
  /**
   * The field to aggregate on.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;
};

/**
 * Describes the message google.firestore.v1.StructuredAggregationQuery.Aggregation.Sum.
 * Use `create(StructuredAggregationQuery_Aggregation_SumSchema)` to create a new message.
 */
export const StructuredAggregationQuery_Aggregation_SumSchema: GenMessage<StructuredAggregationQuery_Aggregation_Sum> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 1, 0, 1);

/**
 * Average of the values of the requested field.
 *
 * * Only numeric values will be aggregated. All non-numeric values
 * including `NULL` are skipped.
 *
 * * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
 * follows IEEE-754 standards.
 *
 * * If the aggregated value set is empty, returns `NULL`.
 *
 * * Always returns the result as a double.
 *
 * @generated from message google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg
 */
export type StructuredAggregationQuery_Aggregation_Avg = Message<"google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg"> & {
  /**
   * The field to aggregate on.
   *
   * @generated from field: google.firestore.v1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;
};

/**
 * Describes the message google.firestore.v1.StructuredAggregationQuery.Aggregation.Avg.
 * Use `create(StructuredAggregationQuery_Aggregation_AvgSchema)` to create a new message.
 */
export const StructuredAggregationQuery_Aggregation_AvgSchema: GenMessage<StructuredAggregationQuery_Aggregation_Avg> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 1, 0, 2);

/**
 * A position in a query result set.
 *
 * @generated from message google.firestore.v1.Cursor
 */
export type Cursor = Message<"google.firestore.v1.Cursor"> & {
  /**
   * The values that represent a position, in the order they appear in
   * the order by clause of a query.
   *
   * Can contain fewer values than specified in the order by clause.
   *
   * @generated from field: repeated google.firestore.v1.Value values = 1;
   */
  values: Value[];

  /**
   * If the position is just before or just after the given values, relative
   * to the sort order defined by the query.
   *
   * @generated from field: bool before = 2;
   */
  before: boolean;
};

/**
 * Describes the message google.firestore.v1.Cursor.
 * Use `create(CursorSchema)` to create a new message.
 */
export const CursorSchema: GenMessage<Cursor> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1_query, 2);

