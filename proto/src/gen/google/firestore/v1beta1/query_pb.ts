// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firestore/v1beta1/query.proto (package google.firestore.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Value } from "./document_pb";
import { file_google_firestore_v1beta1_document } from "./document_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/firestore/v1beta1/query.proto.
 */
export const file_google_firestore_v1beta1_query: GenFile = /*@__PURE__*/
  fileDesc("CiRnb29nbGUvZmlyZXN0b3JlL3YxYmV0YTEvcXVlcnkucHJvdG8SGGdvb2dsZS5maXJlc3RvcmUudjFiZXRhMSKVEAoPU3RydWN0dXJlZFF1ZXJ5EkQKBnNlbGVjdBgBIAEoCzI0Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuUHJvamVjdGlvbhJKCgRmcm9tGAIgAygLMjwuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5Db2xsZWN0aW9uU2VsZWN0b3ISPwoFd2hlcmUYAyABKAsyMC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuU3RydWN0dXJlZFF1ZXJ5LkZpbHRlchJBCghvcmRlcl9ieRgEIAMoCzIvLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuT3JkZXISMgoIc3RhcnRfYXQYByABKAsyIC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuQ3Vyc29yEjAKBmVuZF9hdBgIIAEoCzIgLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5DdXJzb3ISDgoGb2Zmc2V0GAYgASgFEioKBWxpbWl0GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUaRAoSQ29sbGVjdGlvblNlbGVjdG9yEhUKDWNvbGxlY3Rpb25faWQYAiABKAkSFwoPYWxsX2Rlc2NlbmRhbnRzGAMgASgIGowCCgZGaWx0ZXISVQoQY29tcG9zaXRlX2ZpbHRlchgBIAEoCzI5Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuQ29tcG9zaXRlRmlsdGVySAASTQoMZmllbGRfZmlsdGVyGAIgASgLMjUuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5GaWVsZEZpbHRlckgAEk0KDHVuYXJ5X2ZpbHRlchgDIAEoCzI1Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuVW5hcnlGaWx0ZXJIAEINCgtmaWx0ZXJfdHlwZRrTAQoPQ29tcG9zaXRlRmlsdGVyEk4KAm9wGAEgASgOMkIuZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5Db21wb3NpdGVGaWx0ZXIuT3BlcmF0b3ISQQoHZmlsdGVycxgCIAMoCzIwLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmlsdGVyIi0KCE9wZXJhdG9yEhgKFE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASBwoDQU5EEAEapwMKC0ZpZWxkRmlsdGVyEkcKBWZpZWxkGAEgASgLMjguZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5GaWVsZFJlZmVyZW5jZRJKCgJvcBgCIAEoDjI+Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmllbGRGaWx0ZXIuT3BlcmF0b3ISLgoFdmFsdWUYAyABKAsyHy5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuVmFsdWUi0gEKCE9wZXJhdG9yEhgKFE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASDQoJTEVTU19USEFOEAESFgoSTEVTU19USEFOX09SX0VRVUFMEAISEAoMR1JFQVRFUl9USEFOEAMSGQoVR1JFQVRFUl9USEFOX09SX0VRVUFMEAQSCQoFRVFVQUwQBRINCglOT1RfRVFVQUwQBhISCg5BUlJBWV9DT05UQUlOUxAHEgYKAklOEAgSFgoSQVJSQVlfQ09OVEFJTlNfQU5ZEAkSCgoGTk9UX0lOEAoalAIKC1VuYXJ5RmlsdGVyEkoKAm9wGAEgASgOMj4uZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5VbmFyeUZpbHRlci5PcGVyYXRvchJJCgVmaWVsZBgCIAEoCzI4Lmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRmllbGRSZWZlcmVuY2VIACJeCghPcGVyYXRvchIYChRPUEVSQVRPUl9VTlNQRUNJRklFRBAAEgoKBklTX05BThACEgsKB0lTX05VTEwQAxIOCgpJU19OT1RfTkFOEAQSDwoLSVNfTk9UX05VTEwQBUIOCgxvcGVyYW5kX3R5cGUaJAoORmllbGRSZWZlcmVuY2USEgoKZmllbGRfcGF0aBgCIAEoCRqYAQoFT3JkZXISRwoFZmllbGQYASABKAsyOC5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuU3RydWN0dXJlZFF1ZXJ5LkZpZWxkUmVmZXJlbmNlEkYKCWRpcmVjdGlvbhgCIAEoDjIzLmdvb2dsZS5maXJlc3RvcmUudjFiZXRhMS5TdHJ1Y3R1cmVkUXVlcnkuRGlyZWN0aW9uGlYKClByb2plY3Rpb24SSAoGZmllbGRzGAIgAygLMjguZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExLlN0cnVjdHVyZWRRdWVyeS5GaWVsZFJlZmVyZW5jZSJFCglEaXJlY3Rpb24SGQoVRElSRUNUSU9OX1VOU1BFQ0lGSUVEEAASDQoJQVNDRU5ESU5HEAESDgoKREVTQ0VORElORxACIkkKBkN1cnNvchIvCgZ2YWx1ZXMYASADKAsyHy5nb29nbGUuZmlyZXN0b3JlLnYxYmV0YTEuVmFsdWUSDgoGYmVmb3JlGAIgASgIQtsBChxjb20uZ29vZ2xlLmZpcmVzdG9yZS52MWJldGExQgpRdWVyeVByb3RvUAFaQGNsb3VkLmdvb2dsZS5jb20vZ28vZmlyZXN0b3JlL2FwaXYxYmV0YTEvZmlyZXN0b3JlcGI7ZmlyZXN0b3JlcGKiAgRHQ0ZTqgIeR29vZ2xlLkNsb3VkLkZpcmVzdG9yZS5WMUJldGExygIeR29vZ2xlXENsb3VkXEZpcmVzdG9yZVxWMWJldGEx6gIhR29vZ2xlOjpDbG91ZDo6RmlyZXN0b3JlOjpWMWJldGExYgZwcm90bzM", [file_google_firestore_v1beta1_document, file_google_protobuf_wrappers]);

/**
 * A Firestore query.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery
 */
export type StructuredQuery = Message<"google.firestore.v1beta1.StructuredQuery"> & {
  /**
   * The projection to return.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Projection select = 1;
   */
  select?: StructuredQuery_Projection;

  /**
   * The collections to query.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.CollectionSelector from = 2;
   */
  from: StructuredQuery_CollectionSelector[];

  /**
   * The filter to apply.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Filter where = 3;
   */
  where?: StructuredQuery_Filter;

  /**
   * The order to apply to the query results.
   *
   * Firestore guarantees a stable ordering through the following rules:
   *
   *  * Any field required to appear in `order_by`, that is not already
   *    specified in `order_by`, is appended to the order in field name order
   *    by default.
   *  * If an order on `__name__` is not specified, it is appended by default.
   *
   * Fields are appended with the same sort direction as the last order
   * specified, or 'ASCENDING' if no order was specified. For example:
   *
   *  * `SELECT * FROM Foo ORDER BY A` becomes
   *    `SELECT * FROM Foo ORDER BY A, __name__`
   *  * `SELECT * FROM Foo ORDER BY A DESC` becomes
   *    `SELECT * FROM Foo ORDER BY A DESC, __name__ DESC`
   *  * `SELECT * FROM Foo WHERE A > 1` becomes
   *    `SELECT * FROM Foo WHERE A > 1 ORDER BY A, __name__`
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.Order order_by = 4;
   */
  orderBy: StructuredQuery_Order[];

  /**
   * A starting point for the query results.
   *
   * @generated from field: google.firestore.v1beta1.Cursor start_at = 7;
   */
  startAt?: Cursor;

  /**
   * A end point for the query results.
   *
   * @generated from field: google.firestore.v1beta1.Cursor end_at = 8;
   */
  endAt?: Cursor;

  /**
   * The number of results to skip.
   *
   * Applies before limit, but after all other constraints. Must be >= 0 if
   * specified.
   *
   * @generated from field: int32 offset = 6;
   */
  offset: number;

  /**
   * The maximum number of results to return.
   *
   * Applies after all other constraints.
   * Must be >= 0 if specified.
   *
   * @generated from field: google.protobuf.Int32Value limit = 5;
   */
  limit?: number;
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.
 * Use `create(StructuredQuerySchema)` to create a new message.
 */
export const StructuredQuerySchema: GenMessage<StructuredQuery> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0);

/**
 * A selection of a collection, such as `messages as m1`.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.CollectionSelector
 */
export type StructuredQuery_CollectionSelector = Message<"google.firestore.v1beta1.StructuredQuery.CollectionSelector"> & {
  /**
   * The collection ID.
   * When set, selects only collections with this ID.
   *
   * @generated from field: string collection_id = 2;
   */
  collectionId: string;

  /**
   * When false, selects only collections that are immediate children of
   * the `parent` specified in the containing `RunQueryRequest`.
   * When true, selects all descendant collections.
   *
   * @generated from field: bool all_descendants = 3;
   */
  allDescendants: boolean;
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.CollectionSelector.
 * Use `create(StructuredQuery_CollectionSelectorSchema)` to create a new message.
 */
export const StructuredQuery_CollectionSelectorSchema: GenMessage<StructuredQuery_CollectionSelector> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 0);

/**
 * A filter.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Filter
 */
export type StructuredQuery_Filter = Message<"google.firestore.v1beta1.StructuredQuery.Filter"> & {
  /**
   * The type of filter.
   *
   * @generated from oneof google.firestore.v1beta1.StructuredQuery.Filter.filter_type
   */
  filterType: {
    /**
     * A composite filter.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.CompositeFilter composite_filter = 1;
     */
    value: StructuredQuery_CompositeFilter;
    case: "compositeFilter";
  } | {
    /**
     * A filter on a document field.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldFilter field_filter = 2;
     */
    value: StructuredQuery_FieldFilter;
    case: "fieldFilter";
  } | {
    /**
     * A filter that takes exactly one argument.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.UnaryFilter unary_filter = 3;
     */
    value: StructuredQuery_UnaryFilter;
    case: "unaryFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.Filter.
 * Use `create(StructuredQuery_FilterSchema)` to create a new message.
 */
export const StructuredQuery_FilterSchema: GenMessage<StructuredQuery_Filter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 1);

/**
 * A filter that merges multiple other filters using the given operator.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.CompositeFilter
 */
export type StructuredQuery_CompositeFilter = Message<"google.firestore.v1beta1.StructuredQuery.CompositeFilter"> & {
  /**
   * The operator for combining multiple filters.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator op = 1;
   */
  op: StructuredQuery_CompositeFilter_Operator;

  /**
   * The list of filters to combine.
   * Must contain at least one filter.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.Filter filters = 2;
   */
  filters: StructuredQuery_Filter[];
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.CompositeFilter.
 * Use `create(StructuredQuery_CompositeFilterSchema)` to create a new message.
 */
export const StructuredQuery_CompositeFilterSchema: GenMessage<StructuredQuery_CompositeFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 2);

/**
 * A composite filter operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator
 */
export enum StructuredQuery_CompositeFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The results are required to satisfy each of the combined filters.
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,
}

/**
 * Describes the enum google.firestore.v1beta1.StructuredQuery.CompositeFilter.Operator.
 */
export const StructuredQuery_CompositeFilter_OperatorSchema: GenEnum<StructuredQuery_CompositeFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1beta1_query, 0, 2, 0);

/**
 * A filter on a specific field.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.FieldFilter
 */
export type StructuredQuery_FieldFilter = Message<"google.firestore.v1beta1.StructuredQuery.FieldFilter"> & {
  /**
   * The field to filter by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The operator to filter by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator op = 2;
   */
  op: StructuredQuery_FieldFilter_Operator;

  /**
   * The value to compare to.
   *
   * @generated from field: google.firestore.v1beta1.Value value = 3;
   */
  value?: Value;
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.FieldFilter.
 * Use `create(StructuredQuery_FieldFilterSchema)` to create a new message.
 */
export const StructuredQuery_FieldFilterSchema: GenMessage<StructuredQuery_FieldFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 3);

/**
 * A field filter operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator
 */
export enum StructuredQuery_FieldFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The given `field` is less than the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN = 1;
   */
  LESS_THAN = 1,

  /**
   * The given `field` is less than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 2;
   */
  LESS_THAN_OR_EQUAL = 2,

  /**
   * The given `field` is greater than the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * The given `field` is greater than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `field` come first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * The given `field` is equal to the given `value`.
   *
   * @generated from enum value: EQUAL = 5;
   */
  EQUAL = 5,

  /**
   * The given `field` is not equal to the given `value`.
   *
   * Requires:
   *
   * * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_EQUAL = 6;
   */
  NOT_EQUAL = 6,

  /**
   * The given `field` is an array that contains the given `value`.
   *
   * @generated from enum value: ARRAY_CONTAINS = 7;
   */
  ARRAY_CONTAINS = 7,

  /**
   * The given `field` is equal to at least one value in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue` with at most 10 values.
   * * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
   *
   * @generated from enum value: IN = 8;
   */
  IN = 8,

  /**
   * The given `field` is an array that contains any of the values in the
   * given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue` with at most 10 values.
   * * No other `IN` or `ARRAY_CONTAINS_ANY` or `NOT_IN`.
   *
   * @generated from enum value: ARRAY_CONTAINS_ANY = 9;
   */
  ARRAY_CONTAINS_ANY = 9,

  /**
   * The value of the `field` is not in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue` with at most 10 values.
   * * No other `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`, `NOT_EQUAL`,
   *   `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_IN = 10;
   */
  NOT_IN = 10,
}

/**
 * Describes the enum google.firestore.v1beta1.StructuredQuery.FieldFilter.Operator.
 */
export const StructuredQuery_FieldFilter_OperatorSchema: GenEnum<StructuredQuery_FieldFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1beta1_query, 0, 3, 0);

/**
 * A filter with a single operand.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.UnaryFilter
 */
export type StructuredQuery_UnaryFilter = Message<"google.firestore.v1beta1.StructuredQuery.UnaryFilter"> & {
  /**
   * The unary operator to apply.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator op = 1;
   */
  op: StructuredQuery_UnaryFilter_Operator;

  /**
   * The argument to the filter.
   *
   * @generated from oneof google.firestore.v1beta1.StructuredQuery.UnaryFilter.operand_type
   */
  operandType: {
    /**
     * The field to which to apply the operator.
     *
     * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 2;
     */
    value: StructuredQuery_FieldReference;
    case: "field";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.UnaryFilter.
 * Use `create(StructuredQuery_UnaryFilterSchema)` to create a new message.
 */
export const StructuredQuery_UnaryFilterSchema: GenMessage<StructuredQuery_UnaryFilter> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 4);

/**
 * A unary operator.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator
 */
export enum StructuredQuery_UnaryFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The given `field` is equal to `NaN`.
   *
   * @generated from enum value: IS_NAN = 2;
   */
  IS_NAN = 2,

  /**
   * The given `field` is equal to `NULL`.
   *
   * @generated from enum value: IS_NULL = 3;
   */
  IS_NULL = 3,

  /**
   * The given `field` is not equal to `NaN`.
   *
   * Requires:
   *
   * * No other `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: IS_NOT_NAN = 4;
   */
  IS_NOT_NAN = 4,

  /**
   * The given `field` is not equal to `NULL`.
   *
   * Requires:
   *
   * * A single `NOT_EQUAL`, `NOT_IN`, `IS_NOT_NULL`, or `IS_NOT_NAN`.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: IS_NOT_NULL = 5;
   */
  IS_NOT_NULL = 5,
}

/**
 * Describes the enum google.firestore.v1beta1.StructuredQuery.UnaryFilter.Operator.
 */
export const StructuredQuery_UnaryFilter_OperatorSchema: GenEnum<StructuredQuery_UnaryFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1beta1_query, 0, 4, 0);

/**
 * A reference to a field, such as `max(messages.time) as max_time`.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.FieldReference
 */
export type StructuredQuery_FieldReference = Message<"google.firestore.v1beta1.StructuredQuery.FieldReference"> & {
  /**
   * @generated from field: string field_path = 2;
   */
  fieldPath: string;
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.FieldReference.
 * Use `create(StructuredQuery_FieldReferenceSchema)` to create a new message.
 */
export const StructuredQuery_FieldReferenceSchema: GenMessage<StructuredQuery_FieldReference> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 5);

/**
 * An order on a field.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Order
 */
export type StructuredQuery_Order = Message<"google.firestore.v1beta1.StructuredQuery.Order"> & {
  /**
   * The field to order by.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.FieldReference field = 1;
   */
  field?: StructuredQuery_FieldReference;

  /**
   * The direction to order by. Defaults to `ASCENDING`.
   *
   * @generated from field: google.firestore.v1beta1.StructuredQuery.Direction direction = 2;
   */
  direction: StructuredQuery_Direction;
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.Order.
 * Use `create(StructuredQuery_OrderSchema)` to create a new message.
 */
export const StructuredQuery_OrderSchema: GenMessage<StructuredQuery_Order> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 6);

/**
 * The projection of document's fields to return.
 *
 * @generated from message google.firestore.v1beta1.StructuredQuery.Projection
 */
export type StructuredQuery_Projection = Message<"google.firestore.v1beta1.StructuredQuery.Projection"> & {
  /**
   * The fields to return.
   *
   * If empty, all fields are returned. To only return the name
   * of the document, use `['__name__']`.
   *
   * @generated from field: repeated google.firestore.v1beta1.StructuredQuery.FieldReference fields = 2;
   */
  fields: StructuredQuery_FieldReference[];
};

/**
 * Describes the message google.firestore.v1beta1.StructuredQuery.Projection.
 * Use `create(StructuredQuery_ProjectionSchema)` to create a new message.
 */
export const StructuredQuery_ProjectionSchema: GenMessage<StructuredQuery_Projection> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 0, 7);

/**
 * A sort direction.
 *
 * @generated from enum google.firestore.v1beta1.StructuredQuery.Direction
 */
export enum StructuredQuery_Direction {
  /**
   * Unspecified.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum google.firestore.v1beta1.StructuredQuery.Direction.
 */
export const StructuredQuery_DirectionSchema: GenEnum<StructuredQuery_Direction> = /*@__PURE__*/
  enumDesc(file_google_firestore_v1beta1_query, 0, 0);

/**
 * A position in a query result set.
 *
 * @generated from message google.firestore.v1beta1.Cursor
 */
export type Cursor = Message<"google.firestore.v1beta1.Cursor"> & {
  /**
   * The values that represent a position, in the order they appear in
   * the order by clause of a query.
   *
   * Can contain fewer values than specified in the order by clause.
   *
   * @generated from field: repeated google.firestore.v1beta1.Value values = 1;
   */
  values: Value[];

  /**
   * If the position is just before or just after the given values, relative
   * to the sort order defined by the query.
   *
   * @generated from field: bool before = 2;
   */
  before: boolean;
};

/**
 * Describes the message google.firestore.v1beta1.Cursor.
 * Use `create(CursorSchema)` to create a new message.
 */
export const CursorSchema: GenMessage<Cursor> = /*@__PURE__*/
  messageDesc(file_google_firestore_v1beta1_query, 1);

