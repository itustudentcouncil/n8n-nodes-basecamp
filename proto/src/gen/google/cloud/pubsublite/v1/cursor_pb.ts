// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/pubsublite/v1/cursor.proto (package google.cloud.pubsublite.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Cursor } from "./common_pb";
import { file_google_cloud_pubsublite_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/pubsublite/v1/cursor.proto.
 */
export const file_google_cloud_pubsublite_v1_cursor: GenFile = /*@__PURE__*/
  fileDesc("Cidnb29nbGUvY2xvdWQvcHVic3VibGl0ZS92MS9jdXJzb3IucHJvdG8SGmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxIkUKGkluaXRpYWxDb21taXRDdXJzb3JSZXF1ZXN0EhQKDHN1YnNjcmlwdGlvbhgBIAEoCRIRCglwYXJ0aXRpb24YAiABKAMiHQobSW5pdGlhbENvbW1pdEN1cnNvclJlc3BvbnNlIlIKHFNlcXVlbmNlZENvbW1pdEN1cnNvclJlcXVlc3QSMgoGY3Vyc29yGAEgASgLMiIuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ3Vyc29yIj0KHVNlcXVlbmNlZENvbW1pdEN1cnNvclJlc3BvbnNlEhwKFGFja25vd2xlZGdlZF9jb21taXRzGAEgASgDIsABChxTdHJlYW1pbmdDb21taXRDdXJzb3JSZXF1ZXN0EkkKB2luaXRpYWwYASABKAsyNi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5Jbml0aWFsQ29tbWl0Q3Vyc29yUmVxdWVzdEgAEkoKBmNvbW1pdBgCIAEoCzI4Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlNlcXVlbmNlZENvbW1pdEN1cnNvclJlcXVlc3RIAEIJCgdyZXF1ZXN0IsMBCh1TdHJlYW1pbmdDb21taXRDdXJzb3JSZXNwb25zZRJKCgdpbml0aWFsGAEgASgLMjcuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuSW5pdGlhbENvbW1pdEN1cnNvclJlc3BvbnNlSAASSwoGY29tbWl0GAIgASgLMjkuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuU2VxdWVuY2VkQ29tbWl0Q3Vyc29yUmVzcG9uc2VIAEIJCgdyZXF1ZXN0InIKE0NvbW1pdEN1cnNvclJlcXVlc3QSFAoMc3Vic2NyaXB0aW9uGAEgASgJEhEKCXBhcnRpdGlvbhgCIAEoAxIyCgZjdXJzb3IYAyABKAsyIi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5DdXJzb3IiFgoUQ29tbWl0Q3Vyc29yUmVzcG9uc2UihAEKG0xpc3RQYXJ0aXRpb25DdXJzb3JzUmVxdWVzdBI+CgZwYXJlbnQYASABKAlCLuBBAvpBKAomcHVic3VibGl0ZS5nb29nbGVhcGlzLmNvbS9TdWJzY3JpcHRpb24SEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiWAoPUGFydGl0aW9uQ3Vyc29yEhEKCXBhcnRpdGlvbhgBIAEoAxIyCgZjdXJzb3IYAiABKAsyIi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5DdXJzb3IifwocTGlzdFBhcnRpdGlvbkN1cnNvcnNSZXNwb25zZRJGChFwYXJ0aXRpb25fY3Vyc29ycxgBIAMoCzIrLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlBhcnRpdGlvbkN1cnNvchIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkyogUKDUN1cnNvclNlcnZpY2USkgEKFVN0cmVhbWluZ0NvbW1pdEN1cnNvchI4Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlN0cmVhbWluZ0NvbW1pdEN1cnNvclJlcXVlc3QaOS5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5TdHJlYW1pbmdDb21taXRDdXJzb3JSZXNwb25zZSIAKAEwARLLAQoMQ29tbWl0Q3Vyc29yEi8uZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ29tbWl0Q3Vyc29yUmVxdWVzdBowLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbW1pdEN1cnNvclJlc3BvbnNlIliC0+STAlI6ASoiTS92MS9jdXJzb3Ive3N1YnNjcmlwdGlvbj1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N1YnNjcmlwdGlvbnMvKn06Y29tbWl0Q3Vyc29yEt4BChRMaXN0UGFydGl0aW9uQ3Vyc29ycxI3Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkxpc3RQYXJ0aXRpb25DdXJzb3JzUmVxdWVzdBo4Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkxpc3RQYXJ0aXRpb25DdXJzb3JzUmVzcG9uc2UiU9pBBnBhcmVudILT5JMCRBJCL3YxL2N1cnNvci97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyovc3Vic2NyaXB0aW9ucy8qfS9jdXJzb3JzGk3KQRlwdWJzdWJsaXRlLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybULPAQohY29tLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnByb3RvQgtDdXJzb3JQcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL3B1YnN1YmxpdGUvYXBpdjEvcHVic3VibGl0ZXBiO3B1YnN1YmxpdGVwYvgBAaoCGkdvb2dsZS5DbG91ZC5QdWJTdWJMaXRlLlYxygIaR29vZ2xlXENsb3VkXFB1YlN1YkxpdGVcVjHqAh1Hb29nbGU6OkNsb3VkOjpQdWJTdWJMaXRlOjpWMWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_pubsublite_v1_common]);

/**
 * The first streaming request that must be sent on a newly-opened stream. The
 * client must wait for the response before sending subsequent requests on the
 * stream.
 *
 * @generated from message google.cloud.pubsublite.v1.InitialCommitCursorRequest
 */
export type InitialCommitCursorRequest = Message<"google.cloud.pubsublite.v1.InitialCommitCursorRequest"> & {
  /**
   * The subscription for which to manage committed cursors.
   *
   * @generated from field: string subscription = 1;
   */
  subscription: string;

  /**
   * The partition for which to manage committed cursors. Partitions are zero
   * indexed, so `partition` must be in the range [0, topic.num_partitions).
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;
};

/**
 * Describes the message google.cloud.pubsublite.v1.InitialCommitCursorRequest.
 * Use `create(InitialCommitCursorRequestSchema)` to create a new message.
 */
export const InitialCommitCursorRequestSchema: GenMessage<InitialCommitCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 0);

/**
 * Response to an InitialCommitCursorRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.InitialCommitCursorResponse
 */
export type InitialCommitCursorResponse = Message<"google.cloud.pubsublite.v1.InitialCommitCursorResponse"> & {
};

/**
 * Describes the message google.cloud.pubsublite.v1.InitialCommitCursorResponse.
 * Use `create(InitialCommitCursorResponseSchema)` to create a new message.
 */
export const InitialCommitCursorResponseSchema: GenMessage<InitialCommitCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 1);

/**
 * Streaming request to update the committed cursor. Subsequent
 * SequencedCommitCursorRequests override outstanding ones.
 *
 * @generated from message google.cloud.pubsublite.v1.SequencedCommitCursorRequest
 */
export type SequencedCommitCursorRequest = Message<"google.cloud.pubsublite.v1.SequencedCommitCursorRequest"> & {
  /**
   * The new value for the committed cursor.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.SequencedCommitCursorRequest.
 * Use `create(SequencedCommitCursorRequestSchema)` to create a new message.
 */
export const SequencedCommitCursorRequestSchema: GenMessage<SequencedCommitCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 2);

/**
 * Response to a SequencedCommitCursorRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.SequencedCommitCursorResponse
 */
export type SequencedCommitCursorResponse = Message<"google.cloud.pubsublite.v1.SequencedCommitCursorResponse"> & {
  /**
   * The number of outstanding SequencedCommitCursorRequests acknowledged by
   * this response. Note that SequencedCommitCursorRequests are acknowledged in
   * the order that they are received.
   *
   * @generated from field: int64 acknowledged_commits = 1;
   */
  acknowledgedCommits: bigint;
};

/**
 * Describes the message google.cloud.pubsublite.v1.SequencedCommitCursorResponse.
 * Use `create(SequencedCommitCursorResponseSchema)` to create a new message.
 */
export const SequencedCommitCursorResponseSchema: GenMessage<SequencedCommitCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 3);

/**
 * A request sent from the client to the server on a stream.
 *
 * @generated from message google.cloud.pubsublite.v1.StreamingCommitCursorRequest
 */
export type StreamingCommitCursorRequest = Message<"google.cloud.pubsublite.v1.StreamingCommitCursorRequest"> & {
  /**
   * The type of request this is.
   *
   * @generated from oneof google.cloud.pubsublite.v1.StreamingCommitCursorRequest.request
   */
  request: {
    /**
     * Initial request on the stream.
     *
     * @generated from field: google.cloud.pubsublite.v1.InitialCommitCursorRequest initial = 1;
     */
    value: InitialCommitCursorRequest;
    case: "initial";
  } | {
    /**
     * Request to commit a new cursor value.
     *
     * @generated from field: google.cloud.pubsublite.v1.SequencedCommitCursorRequest commit = 2;
     */
    value: SequencedCommitCursorRequest;
    case: "commit";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.StreamingCommitCursorRequest.
 * Use `create(StreamingCommitCursorRequestSchema)` to create a new message.
 */
export const StreamingCommitCursorRequestSchema: GenMessage<StreamingCommitCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 4);

/**
 * Response to a StreamingCommitCursorRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.StreamingCommitCursorResponse
 */
export type StreamingCommitCursorResponse = Message<"google.cloud.pubsublite.v1.StreamingCommitCursorResponse"> & {
  /**
   * The type of request this is.
   *
   * @generated from oneof google.cloud.pubsublite.v1.StreamingCommitCursorResponse.request
   */
  request: {
    /**
     * Initial response on the stream.
     *
     * @generated from field: google.cloud.pubsublite.v1.InitialCommitCursorResponse initial = 1;
     */
    value: InitialCommitCursorResponse;
    case: "initial";
  } | {
    /**
     * Response to committing a new cursor value.
     *
     * @generated from field: google.cloud.pubsublite.v1.SequencedCommitCursorResponse commit = 2;
     */
    value: SequencedCommitCursorResponse;
    case: "commit";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.StreamingCommitCursorResponse.
 * Use `create(StreamingCommitCursorResponseSchema)` to create a new message.
 */
export const StreamingCommitCursorResponseSchema: GenMessage<StreamingCommitCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 5);

/**
 * Request for CommitCursor.
 *
 * @generated from message google.cloud.pubsublite.v1.CommitCursorRequest
 */
export type CommitCursorRequest = Message<"google.cloud.pubsublite.v1.CommitCursorRequest"> & {
  /**
   * The subscription for which to update the cursor.
   *
   * @generated from field: string subscription = 1;
   */
  subscription: string;

  /**
   * The partition for which to update the cursor. Partitions are zero indexed,
   * so `partition` must be in the range [0, topic.num_partitions).
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * The new value for the committed cursor.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 3;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.CommitCursorRequest.
 * Use `create(CommitCursorRequestSchema)` to create a new message.
 */
export const CommitCursorRequestSchema: GenMessage<CommitCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 6);

/**
 * Response for CommitCursor.
 *
 * @generated from message google.cloud.pubsublite.v1.CommitCursorResponse
 */
export type CommitCursorResponse = Message<"google.cloud.pubsublite.v1.CommitCursorResponse"> & {
};

/**
 * Describes the message google.cloud.pubsublite.v1.CommitCursorResponse.
 * Use `create(CommitCursorResponseSchema)` to create a new message.
 */
export const CommitCursorResponseSchema: GenMessage<CommitCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 7);

/**
 * Request for ListPartitionCursors.
 *
 * @generated from message google.cloud.pubsublite.v1.ListPartitionCursorsRequest
 */
export type ListPartitionCursorsRequest = Message<"google.cloud.pubsublite.v1.ListPartitionCursorsRequest"> & {
  /**
   * Required. The subscription for which to retrieve cursors.
   * Structured like
   * `projects/{project_number}/locations/{location}/subscriptions/{subscription_id}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of cursors to return. The service may return fewer than
   * this value.
   * If unset or zero, all cursors for the parent will be returned.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListPartitionCursors` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListPartitionCursors`
   * must match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ListPartitionCursorsRequest.
 * Use `create(ListPartitionCursorsRequestSchema)` to create a new message.
 */
export const ListPartitionCursorsRequestSchema: GenMessage<ListPartitionCursorsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 8);

/**
 * A pair of a Cursor and the partition it is for.
 *
 * @generated from message google.cloud.pubsublite.v1.PartitionCursor
 */
export type PartitionCursor = Message<"google.cloud.pubsublite.v1.PartitionCursor"> & {
  /**
   * The partition this is for.
   *
   * @generated from field: int64 partition = 1;
   */
  partition: bigint;

  /**
   * The value of the cursor.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 2;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.PartitionCursor.
 * Use `create(PartitionCursorSchema)` to create a new message.
 */
export const PartitionCursorSchema: GenMessage<PartitionCursor> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 9);

/**
 * Response for ListPartitionCursors
 *
 * @generated from message google.cloud.pubsublite.v1.ListPartitionCursorsResponse
 */
export type ListPartitionCursorsResponse = Message<"google.cloud.pubsublite.v1.ListPartitionCursorsResponse"> & {
  /**
   * The partition cursors from this request.
   *
   * @generated from field: repeated google.cloud.pubsublite.v1.PartitionCursor partition_cursors = 1;
   */
  partitionCursors: PartitionCursor[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ListPartitionCursorsResponse.
 * Use `create(ListPartitionCursorsResponseSchema)` to create a new message.
 */
export const ListPartitionCursorsResponseSchema: GenMessage<ListPartitionCursorsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_cursor, 10);

/**
 * The service that a subscriber client application uses to manage committed
 * cursors while receiving messsages. A cursor represents a subscriber's
 * progress within a topic partition for a given subscription.
 *
 * @generated from service google.cloud.pubsublite.v1.CursorService
 */
export const CursorService: GenService<{
  /**
   * Establishes a stream with the server for managing committed cursors.
   *
   * @generated from rpc google.cloud.pubsublite.v1.CursorService.StreamingCommitCursor
   */
  streamingCommitCursor: {
    methodKind: "bidi_streaming";
    input: typeof StreamingCommitCursorRequestSchema;
    output: typeof StreamingCommitCursorResponseSchema;
  },
  /**
   * Updates the committed cursor.
   *
   * @generated from rpc google.cloud.pubsublite.v1.CursorService.CommitCursor
   */
  commitCursor: {
    methodKind: "unary";
    input: typeof CommitCursorRequestSchema;
    output: typeof CommitCursorResponseSchema;
  },
  /**
   * Returns all committed cursor information for a subscription.
   *
   * @generated from rpc google.cloud.pubsublite.v1.CursorService.ListPartitionCursors
   */
  listPartitionCursors: {
    methodKind: "unary";
    input: typeof ListPartitionCursorsRequestSchema;
    output: typeof ListPartitionCursorsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_pubsublite_v1_cursor, 0);

