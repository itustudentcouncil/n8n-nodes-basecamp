// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/pubsublite/v1/topic_stats.proto (package google.cloud.pubsublite.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Cursor, TimeTarget } from "./common_pb";
import { file_google_cloud_pubsublite_v1_common } from "./common_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/pubsublite/v1/topic_stats.proto.
 */
export const file_google_cloud_pubsublite_v1_topic_stats: GenFile = /*@__PURE__*/
  fileDesc("Cixnb29nbGUvY2xvdWQvcHVic3VibGl0ZS92MS90b3BpY19zdGF0cy5wcm90bxIaZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEi3gEKGkNvbXB1dGVNZXNzYWdlU3RhdHNSZXF1ZXN0EjYKBXRvcGljGAEgASgJQifgQQL6QSEKH3B1YnN1YmxpdGUuZ29vZ2xlYXBpcy5jb20vVG9waWMSFgoJcGFydGl0aW9uGAIgASgDQgPgQQISOAoMc3RhcnRfY3Vyc29yGAMgASgLMiIuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ3Vyc29yEjYKCmVuZF9jdXJzb3IYBCABKAsyIi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5DdXJzb3IivQEKG0NvbXB1dGVNZXNzYWdlU3RhdHNSZXNwb25zZRIVCg1tZXNzYWdlX2NvdW50GAEgASgDEhUKDW1lc3NhZ2VfYnl0ZXMYAiABKAMSOAoUbWluaW11bV9wdWJsaXNoX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKEm1pbmltdW1fZXZlbnRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiagoYQ29tcHV0ZUhlYWRDdXJzb3JSZXF1ZXN0EjYKBXRvcGljGAEgASgJQifgQQL6QSEKH3B1YnN1YmxpdGUuZ29vZ2xlYXBpcy5jb20vVG9waWMSFgoJcGFydGl0aW9uGAIgASgDQgPgQQIiVAoZQ29tcHV0ZUhlYWRDdXJzb3JSZXNwb25zZRI3CgtoZWFkX2N1cnNvchgBIAEoCzIiLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkN1cnNvciKnAQoYQ29tcHV0ZVRpbWVDdXJzb3JSZXF1ZXN0EjYKBXRvcGljGAEgASgJQifgQQL6QSEKH3B1YnN1YmxpdGUuZ29vZ2xlYXBpcy5jb20vVG9waWMSFgoJcGFydGl0aW9uGAIgASgDQgPgQQISOwoGdGFyZ2V0GAMgASgLMiYuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuVGltZVRhcmdldEID4EECIk8KGUNvbXB1dGVUaW1lQ3Vyc29yUmVzcG9uc2USMgoGY3Vyc29yGAEgASgLMiIuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ3Vyc29yMvIFChFUb3BpY1N0YXRzU2VydmljZRLdAQoTQ29tcHV0ZU1lc3NhZ2VTdGF0cxI2Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbXB1dGVNZXNzYWdlU3RhdHNSZXF1ZXN0GjcuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ29tcHV0ZU1lc3NhZ2VTdGF0c1Jlc3BvbnNlIlWC0+STAk86ASoiSi92MS90b3BpY1N0YXRzL3t0b3BpYz1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3RvcGljcy8qfTpjb21wdXRlTWVzc2FnZVN0YXRzEtUBChFDb21wdXRlSGVhZEN1cnNvchI0Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbXB1dGVIZWFkQ3Vyc29yUmVxdWVzdBo1Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbXB1dGVIZWFkQ3Vyc29yUmVzcG9uc2UiU4LT5JMCTToBKiJIL3YxL3RvcGljU3RhdHMve3RvcGljPXByb2plY3RzLyovbG9jYXRpb25zLyovdG9waWNzLyp9OmNvbXB1dGVIZWFkQ3Vyc29yEtUBChFDb21wdXRlVGltZUN1cnNvchI0Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbXB1dGVUaW1lQ3Vyc29yUmVxdWVzdBo1Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkNvbXB1dGVUaW1lQ3Vyc29yUmVzcG9uc2UiU4LT5JMCTToBKiJIL3YxL3RvcGljU3RhdHMve3RvcGljPXByb2plY3RzLyovbG9jYXRpb25zLyovdG9waWNzLyp9OmNvbXB1dGVUaW1lQ3Vyc29yGk3KQRlwdWJzdWJsaXRlLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybULQAQohY29tLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnByb3RvQg9Ub3BpY1N0YXRzUHJvdG9QAVo+Y2xvdWQuZ29vZ2xlLmNvbS9nby9wdWJzdWJsaXRlL2FwaXYxL3B1YnN1YmxpdGVwYjtwdWJzdWJsaXRlcGKqAhpHb29nbGUuQ2xvdWQuUHViU3ViTGl0ZS5WMcoCGkdvb2dsZVxDbG91ZFxQdWJTdWJMaXRlXFYx6gIdR29vZ2xlOjpDbG91ZDo6UHViU3ViTGl0ZTo6VjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_pubsublite_v1_common, file_google_protobuf_timestamp]);

/**
 * Compute statistics about a range of messages in a given topic and partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeMessageStatsRequest
 */
export type ComputeMessageStatsRequest = Message<"google.cloud.pubsublite.v1.ComputeMessageStatsRequest"> & {
  /**
   * Required. The topic for which we should compute message stats.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * Required. The partition for which we should compute message stats.
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * The inclusive start of the range.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor start_cursor = 3;
   */
  startCursor?: Cursor;

  /**
   * The exclusive end of the range. The range is empty if end_cursor <=
   * start_cursor. Specifying a start_cursor before the first message and an
   * end_cursor after the last message will retrieve all messages.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor end_cursor = 4;
   */
  endCursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeMessageStatsRequest.
 * Use `create(ComputeMessageStatsRequestSchema)` to create a new message.
 */
export const ComputeMessageStatsRequestSchema: GenMessage<ComputeMessageStatsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 0);

/**
 * Response containing stats for messages in the requested topic and partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeMessageStatsResponse
 */
export type ComputeMessageStatsResponse = Message<"google.cloud.pubsublite.v1.ComputeMessageStatsResponse"> & {
  /**
   * The count of messages.
   *
   * @generated from field: int64 message_count = 1;
   */
  messageCount: bigint;

  /**
   * The number of quota bytes accounted to these messages.
   *
   * @generated from field: int64 message_bytes = 2;
   */
  messageBytes: bigint;

  /**
   * The minimum publish timestamp across these messages. Note that publish
   * timestamps within a partition are not guaranteed to be non-decreasing. The
   * timestamp will be unset if there are no messages.
   *
   * @generated from field: google.protobuf.Timestamp minimum_publish_time = 3;
   */
  minimumPublishTime?: Timestamp;

  /**
   * The minimum event timestamp across these messages. For the purposes of this
   * computation, if a message does not have an event time, we use the publish
   * time. The timestamp will be unset if there are no messages.
   *
   * @generated from field: google.protobuf.Timestamp minimum_event_time = 4;
   */
  minimumEventTime?: Timestamp;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeMessageStatsResponse.
 * Use `create(ComputeMessageStatsResponseSchema)` to create a new message.
 */
export const ComputeMessageStatsResponseSchema: GenMessage<ComputeMessageStatsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 1);

/**
 * Compute the current head cursor for a partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeHeadCursorRequest
 */
export type ComputeHeadCursorRequest = Message<"google.cloud.pubsublite.v1.ComputeHeadCursorRequest"> & {
  /**
   * Required. The topic for which we should compute the head cursor.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * Required. The partition for which we should compute the head cursor.
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeHeadCursorRequest.
 * Use `create(ComputeHeadCursorRequestSchema)` to create a new message.
 */
export const ComputeHeadCursorRequestSchema: GenMessage<ComputeHeadCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 2);

/**
 * Response containing the head cursor for the requested topic and partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeHeadCursorResponse
 */
export type ComputeHeadCursorResponse = Message<"google.cloud.pubsublite.v1.ComputeHeadCursorResponse"> & {
  /**
   * The head cursor.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor head_cursor = 1;
   */
  headCursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeHeadCursorResponse.
 * Use `create(ComputeHeadCursorResponseSchema)` to create a new message.
 */
export const ComputeHeadCursorResponseSchema: GenMessage<ComputeHeadCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 3);

/**
 * Compute the corresponding cursor for a publish or event time in a topic
 * partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeTimeCursorRequest
 */
export type ComputeTimeCursorRequest = Message<"google.cloud.pubsublite.v1.ComputeTimeCursorRequest"> & {
  /**
   * Required. The topic for which we should compute the cursor.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * Required. The partition for which we should compute the cursor.
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * Required. The target publish or event time. Specifying a future time will
   * return an unset cursor.
   *
   * @generated from field: google.cloud.pubsublite.v1.TimeTarget target = 3;
   */
  target?: TimeTarget;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeTimeCursorRequest.
 * Use `create(ComputeTimeCursorRequestSchema)` to create a new message.
 */
export const ComputeTimeCursorRequestSchema: GenMessage<ComputeTimeCursorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 4);

/**
 * Response containing the cursor corresponding to a publish or event time in a
 * topic partition.
 *
 * @generated from message google.cloud.pubsublite.v1.ComputeTimeCursorResponse
 */
export type ComputeTimeCursorResponse = Message<"google.cloud.pubsublite.v1.ComputeTimeCursorResponse"> & {
  /**
   * If present, the cursor references the first message with time greater than
   * or equal to the specified target time. If such a message cannot be found,
   * the cursor will be unset (i.e. `cursor` is not present).
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.ComputeTimeCursorResponse.
 * Use `create(ComputeTimeCursorResponseSchema)` to create a new message.
 */
export const ComputeTimeCursorResponseSchema: GenMessage<ComputeTimeCursorResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_topic_stats, 5);

/**
 * This service allows users to get stats about messages in their topic.
 *
 * @generated from service google.cloud.pubsublite.v1.TopicStatsService
 */
export const TopicStatsService: GenService<{
  /**
   * Compute statistics about a range of messages in a given topic and
   * partition.
   *
   * @generated from rpc google.cloud.pubsublite.v1.TopicStatsService.ComputeMessageStats
   */
  computeMessageStats: {
    methodKind: "unary";
    input: typeof ComputeMessageStatsRequestSchema;
    output: typeof ComputeMessageStatsResponseSchema;
  },
  /**
   * Compute the head cursor for the partition.
   * The head cursor's offset is guaranteed to be less than or equal to all
   * messages which have not yet been acknowledged as published, and
   * greater than the offset of any message whose publish has already
   * been acknowledged. It is zero if there have never been messages in the
   * partition.
   *
   * @generated from rpc google.cloud.pubsublite.v1.TopicStatsService.ComputeHeadCursor
   */
  computeHeadCursor: {
    methodKind: "unary";
    input: typeof ComputeHeadCursorRequestSchema;
    output: typeof ComputeHeadCursorResponseSchema;
  },
  /**
   * Compute the corresponding cursor for a publish or event time in a topic
   * partition.
   *
   * @generated from rpc google.cloud.pubsublite.v1.TopicStatsService.ComputeTimeCursor
   */
  computeTimeCursor: {
    methodKind: "unary";
    input: typeof ComputeTimeCursorRequestSchema;
    output: typeof ComputeTimeCursorResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_pubsublite_v1_topic_stats, 0);

