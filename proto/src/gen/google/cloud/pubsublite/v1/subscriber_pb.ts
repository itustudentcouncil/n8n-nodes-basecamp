// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/pubsublite/v1/subscriber.proto (package google.cloud.pubsublite.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Cursor, SequencedMessage } from "./common_pb";
import { file_google_cloud_pubsublite_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/pubsublite/v1/subscriber.proto.
 */
export const file_google_cloud_pubsublite_v1_subscriber: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvY2xvdWQvcHVic3VibGl0ZS92MS9zdWJzY3JpYmVyLnByb3RvEhpnb29nbGUuY2xvdWQucHVic3VibGl0ZS52MSKKAQoXSW5pdGlhbFN1YnNjcmliZVJlcXVlc3QSFAoMc3Vic2NyaXB0aW9uGAEgASgJEhEKCXBhcnRpdGlvbhgCIAEoAxJGChBpbml0aWFsX2xvY2F0aW9uGAQgASgLMicuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuU2Vla1JlcXVlc3RCA+BBASJOChhJbml0aWFsU3Vic2NyaWJlUmVzcG9uc2USMgoGY3Vyc29yGAEgASgLMiIuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuQ3Vyc29yIucBCgtTZWVrUmVxdWVzdBJLCgxuYW1lZF90YXJnZXQYASABKA4yMy5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5TZWVrUmVxdWVzdC5OYW1lZFRhcmdldEgAEjQKBmN1cnNvchgCIAEoCzIiLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkN1cnNvckgAIksKC05hbWVkVGFyZ2V0EhwKGE5BTUVEX1RBUkdFVF9VTlNQRUNJRklFRBAAEggKBEhFQUQQARIUChBDT01NSVRURURfQ1VSU09SEAJCCAoGdGFyZ2V0IkIKDFNlZWtSZXNwb25zZRIyCgZjdXJzb3IYASABKAsyIi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5DdXJzb3IiRQoSRmxvd0NvbnRyb2xSZXF1ZXN0EhgKEGFsbG93ZWRfbWVzc2FnZXMYASABKAMSFQoNYWxsb3dlZF9ieXRlcxgCIAEoAyLmAQoQU3Vic2NyaWJlUmVxdWVzdBJGCgdpbml0aWFsGAEgASgLMjMuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuSW5pdGlhbFN1YnNjcmliZVJlcXVlc3RIABI3CgRzZWVrGAIgASgLMicuZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuU2Vla1JlcXVlc3RIABJGCgxmbG93X2NvbnRyb2wYAyABKAsyLi5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5GbG93Q29udHJvbFJlcXVlc3RIAEIJCgdyZXF1ZXN0IlEKD01lc3NhZ2VSZXNwb25zZRI+CghtZXNzYWdlcxgBIAMoCzIsLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlNlcXVlbmNlZE1lc3NhZ2Ui4wEKEVN1YnNjcmliZVJlc3BvbnNlEkcKB2luaXRpYWwYASABKAsyNC5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5Jbml0aWFsU3Vic2NyaWJlUmVzcG9uc2VIABI4CgRzZWVrGAIgASgLMiguZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuU2Vla1Jlc3BvbnNlSAASPwoIbWVzc2FnZXMYAyABKAsyKy5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5NZXNzYWdlUmVzcG9uc2VIAEIKCghyZXNwb25zZSJMCiFJbml0aWFsUGFydGl0aW9uQXNzaWdubWVudFJlcXVlc3QSFAoMc3Vic2NyaXB0aW9uGAEgASgJEhEKCWNsaWVudF9pZBgCIAEoDCIpChNQYXJ0aXRpb25Bc3NpZ25tZW50EhIKCnBhcnRpdGlvbnMYASADKAMiGAoWUGFydGl0aW9uQXNzaWdubWVudEFjayK8AQoaUGFydGl0aW9uQXNzaWdubWVudFJlcXVlc3QSUAoHaW5pdGlhbBgBIAEoCzI9Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLkluaXRpYWxQYXJ0aXRpb25Bc3NpZ25tZW50UmVxdWVzdEgAEkEKA2FjaxgCIAEoCzIyLmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlBhcnRpdGlvbkFzc2lnbm1lbnRBY2tIAEIJCgdyZXF1ZXN0MtIBChFTdWJzY3JpYmVyU2VydmljZRJuCglTdWJzY3JpYmUSLC5nb29nbGUuY2xvdWQucHVic3VibGl0ZS52MS5TdWJzY3JpYmVSZXF1ZXN0Gi0uZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuU3Vic2NyaWJlUmVzcG9uc2UiACgBMAEaTcpBGXB1YnN1YmxpdGUuZ29vZ2xlYXBpcy5jb23SQS5odHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtMu8BChpQYXJ0aXRpb25Bc3NpZ25tZW50U2VydmljZRKBAQoQQXNzaWduUGFydGl0aW9ucxI2Lmdvb2dsZS5jbG91ZC5wdWJzdWJsaXRlLnYxLlBhcnRpdGlvbkFzc2lnbm1lbnRSZXF1ZXN0Gi8uZ29vZ2xlLmNsb3VkLnB1YnN1YmxpdGUudjEuUGFydGl0aW9uQXNzaWdubWVudCIAKAEwARpNykEZcHVic3VibGl0ZS5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1C0wEKIWNvbS5nb29nbGUuY2xvdWQucHVic3VibGl0ZS5wcm90b0IPU3Vic2NyaWJlclByb3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vcHVic3VibGl0ZS9hcGl2MS9wdWJzdWJsaXRlcGI7cHVic3VibGl0ZXBi+AEBqgIaR29vZ2xlLkNsb3VkLlB1YlN1YkxpdGUuVjHKAhpHb29nbGVcQ2xvdWRcUHViU3ViTGl0ZVxWMeoCHUdvb2dsZTo6Q2xvdWQ6OlB1YlN1YkxpdGU6OlYxYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_cloud_pubsublite_v1_common]);

/**
 * The first request that must be sent on a newly-opened stream. The client must
 * wait for the response before sending subsequent requests on the stream.
 *
 * @generated from message google.cloud.pubsublite.v1.InitialSubscribeRequest
 */
export type InitialSubscribeRequest = Message<"google.cloud.pubsublite.v1.InitialSubscribeRequest"> & {
  /**
   * The subscription from which to receive messages.
   *
   * @generated from field: string subscription = 1;
   */
  subscription: string;

  /**
   * The partition from which to receive messages. Partitions are zero indexed,
   * so `partition` must be in the range [0, topic.num_partitions).
   *
   * @generated from field: int64 partition = 2;
   */
  partition: bigint;

  /**
   * Optional. Initial target location within the message backlog. If not set,
   * messages will be delivered from the commit cursor for the given
   * subscription and partition.
   *
   * @generated from field: google.cloud.pubsublite.v1.SeekRequest initial_location = 4;
   */
  initialLocation?: SeekRequest;
};

/**
 * Describes the message google.cloud.pubsublite.v1.InitialSubscribeRequest.
 * Use `create(InitialSubscribeRequestSchema)` to create a new message.
 */
export const InitialSubscribeRequestSchema: GenMessage<InitialSubscribeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 0);

/**
 * Response to an InitialSubscribeRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.InitialSubscribeResponse
 */
export type InitialSubscribeResponse = Message<"google.cloud.pubsublite.v1.InitialSubscribeResponse"> & {
  /**
   * The cursor from which the subscriber will start receiving messages once
   * flow control tokens become available.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.InitialSubscribeResponse.
 * Use `create(InitialSubscribeResponseSchema)` to create a new message.
 */
export const InitialSubscribeResponseSchema: GenMessage<InitialSubscribeResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 1);

/**
 * Request to update the stream's delivery cursor based on the given target.
 * Resets the server available tokens to 0. SeekRequests past head result in
 * stream breakage.
 *
 * SeekRequests may not be sent while another SeekRequest is outstanding (i.e.,
 * has not received a SeekResponse) on the same stream.
 *
 * @generated from message google.cloud.pubsublite.v1.SeekRequest
 */
export type SeekRequest = Message<"google.cloud.pubsublite.v1.SeekRequest"> & {
  /**
   * The target to seek to. Must be set.
   *
   * @generated from oneof google.cloud.pubsublite.v1.SeekRequest.target
   */
  target: {
    /**
     * A named target.
     *
     * @generated from field: google.cloud.pubsublite.v1.SeekRequest.NamedTarget named_target = 1;
     */
    value: SeekRequest_NamedTarget;
    case: "namedTarget";
  } | {
    /**
     * A target corresponding to the cursor, pointing to anywhere in the
     * topic partition.
     *
     * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 2;
     */
    value: Cursor;
    case: "cursor";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.SeekRequest.
 * Use `create(SeekRequestSchema)` to create a new message.
 */
export const SeekRequestSchema: GenMessage<SeekRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 2);

/**
 * A special target in the partition that takes no other parameters.
 *
 * @generated from enum google.cloud.pubsublite.v1.SeekRequest.NamedTarget
 */
export enum SeekRequest_NamedTarget {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: NAMED_TARGET_UNSPECIFIED = 0;
   */
  NAMED_TARGET_UNSPECIFIED = 0,

  /**
   * A target corresponding to the most recently published message in the
   * partition.
   *
   * @generated from enum value: HEAD = 1;
   */
  HEAD = 1,

  /**
   * A target corresponding to the committed cursor for the given subscription
   * and topic partition.
   *
   * @generated from enum value: COMMITTED_CURSOR = 2;
   */
  COMMITTED_CURSOR = 2,
}

/**
 * Describes the enum google.cloud.pubsublite.v1.SeekRequest.NamedTarget.
 */
export const SeekRequest_NamedTargetSchema: GenEnum<SeekRequest_NamedTarget> = /*@__PURE__*/
  enumDesc(file_google_cloud_pubsublite_v1_subscriber, 2, 0);

/**
 * Response to a SeekRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.SeekResponse
 */
export type SeekResponse = Message<"google.cloud.pubsublite.v1.SeekResponse"> & {
  /**
   * The new delivery cursor for the current stream.
   *
   * @generated from field: google.cloud.pubsublite.v1.Cursor cursor = 1;
   */
  cursor?: Cursor;
};

/**
 * Describes the message google.cloud.pubsublite.v1.SeekResponse.
 * Use `create(SeekResponseSchema)` to create a new message.
 */
export const SeekResponseSchema: GenMessage<SeekResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 3);

/**
 * Request to grant tokens to the server, requesting delivery of messages when
 * they become available.
 *
 * @generated from message google.cloud.pubsublite.v1.FlowControlRequest
 */
export type FlowControlRequest = Message<"google.cloud.pubsublite.v1.FlowControlRequest"> & {
  /**
   * The number of message tokens to grant. Must be greater than or equal to 0.
   *
   * @generated from field: int64 allowed_messages = 1;
   */
  allowedMessages: bigint;

  /**
   * The number of byte tokens to grant. Must be greater than or equal to 0.
   *
   * @generated from field: int64 allowed_bytes = 2;
   */
  allowedBytes: bigint;
};

/**
 * Describes the message google.cloud.pubsublite.v1.FlowControlRequest.
 * Use `create(FlowControlRequestSchema)` to create a new message.
 */
export const FlowControlRequestSchema: GenMessage<FlowControlRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 4);

/**
 * A request sent from the client to the server on a stream.
 *
 * @generated from message google.cloud.pubsublite.v1.SubscribeRequest
 */
export type SubscribeRequest = Message<"google.cloud.pubsublite.v1.SubscribeRequest"> & {
  /**
   * The type of request this is.
   *
   * @generated from oneof google.cloud.pubsublite.v1.SubscribeRequest.request
   */
  request: {
    /**
     * Initial request on the stream.
     *
     * @generated from field: google.cloud.pubsublite.v1.InitialSubscribeRequest initial = 1;
     */
    value: InitialSubscribeRequest;
    case: "initial";
  } | {
    /**
     * Request to update the stream's delivery cursor.
     *
     * @generated from field: google.cloud.pubsublite.v1.SeekRequest seek = 2;
     */
    value: SeekRequest;
    case: "seek";
  } | {
    /**
     * Request to grant tokens to the server,
     *
     * @generated from field: google.cloud.pubsublite.v1.FlowControlRequest flow_control = 3;
     */
    value: FlowControlRequest;
    case: "flowControl";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.SubscribeRequest.
 * Use `create(SubscribeRequestSchema)` to create a new message.
 */
export const SubscribeRequestSchema: GenMessage<SubscribeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 5);

/**
 * Response containing a list of messages. Upon delivering a MessageResponse to
 * the client, the server:
 * *  Updates the stream's delivery cursor to one greater than the cursor of the
 *    last message in the list.
 * *  Subtracts the total number of bytes and messages from the tokens available
 *    to the server.
 *
 * @generated from message google.cloud.pubsublite.v1.MessageResponse
 */
export type MessageResponse = Message<"google.cloud.pubsublite.v1.MessageResponse"> & {
  /**
   * Messages from the topic partition.
   *
   * @generated from field: repeated google.cloud.pubsublite.v1.SequencedMessage messages = 1;
   */
  messages: SequencedMessage[];
};

/**
 * Describes the message google.cloud.pubsublite.v1.MessageResponse.
 * Use `create(MessageResponseSchema)` to create a new message.
 */
export const MessageResponseSchema: GenMessage<MessageResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 6);

/**
 * Response to SubscribeRequest.
 *
 * @generated from message google.cloud.pubsublite.v1.SubscribeResponse
 */
export type SubscribeResponse = Message<"google.cloud.pubsublite.v1.SubscribeResponse"> & {
  /**
   * The type of response this is.
   *
   * @generated from oneof google.cloud.pubsublite.v1.SubscribeResponse.response
   */
  response: {
    /**
     * Initial response on the stream.
     *
     * @generated from field: google.cloud.pubsublite.v1.InitialSubscribeResponse initial = 1;
     */
    value: InitialSubscribeResponse;
    case: "initial";
  } | {
    /**
     * Response to a Seek operation.
     *
     * @generated from field: google.cloud.pubsublite.v1.SeekResponse seek = 2;
     */
    value: SeekResponse;
    case: "seek";
  } | {
    /**
     * Response containing messages from the topic partition.
     *
     * @generated from field: google.cloud.pubsublite.v1.MessageResponse messages = 3;
     */
    value: MessageResponse;
    case: "messages";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.SubscribeResponse.
 * Use `create(SubscribeResponseSchema)` to create a new message.
 */
export const SubscribeResponseSchema: GenMessage<SubscribeResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 7);

/**
 * The first request that must be sent on a newly-opened stream. The client must
 * wait for the response before sending subsequent requests on the stream.
 *
 * @generated from message google.cloud.pubsublite.v1.InitialPartitionAssignmentRequest
 */
export type InitialPartitionAssignmentRequest = Message<"google.cloud.pubsublite.v1.InitialPartitionAssignmentRequest"> & {
  /**
   * The subscription name. Structured like:
   * projects/<project number>/locations/<zone name>/subscriptions/<subscription
   * id>
   *
   * @generated from field: string subscription = 1;
   */
  subscription: string;

  /**
   * An opaque, unique client identifier. This field must be exactly 16 bytes
   * long and is interpreted as an unsigned 128 bit integer. Other size values
   * will be rejected and the stream will be failed with a non-retryable error.
   *
   * This field is large enough to fit a uuid from standard uuid algorithms like
   * uuid1 or uuid4, which should be used to generate this number. The same
   * identifier should be reused following disconnections with retryable stream
   * errors.
   *
   * @generated from field: bytes client_id = 2;
   */
  clientId: Uint8Array;
};

/**
 * Describes the message google.cloud.pubsublite.v1.InitialPartitionAssignmentRequest.
 * Use `create(InitialPartitionAssignmentRequestSchema)` to create a new message.
 */
export const InitialPartitionAssignmentRequestSchema: GenMessage<InitialPartitionAssignmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 8);

/**
 * PartitionAssignments should not race with acknowledgements. There
 * should be exactly one unacknowledged PartitionAssignment at a time. If not,
 * the client must break the stream.
 *
 * @generated from message google.cloud.pubsublite.v1.PartitionAssignment
 */
export type PartitionAssignment = Message<"google.cloud.pubsublite.v1.PartitionAssignment"> & {
  /**
   * The list of partition numbers this subscriber is assigned to.
   *
   * @generated from field: repeated int64 partitions = 1;
   */
  partitions: bigint[];
};

/**
 * Describes the message google.cloud.pubsublite.v1.PartitionAssignment.
 * Use `create(PartitionAssignmentSchema)` to create a new message.
 */
export const PartitionAssignmentSchema: GenMessage<PartitionAssignment> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 9);

/**
 * Acknowledge receipt and handling of the previous assignment.
 * If not sent within a short period after receiving the assignment,
 * partitions may remain unassigned for a period of time until the
 * client is known to be inactive, after which time the server will break the
 * stream.
 *
 * @generated from message google.cloud.pubsublite.v1.PartitionAssignmentAck
 */
export type PartitionAssignmentAck = Message<"google.cloud.pubsublite.v1.PartitionAssignmentAck"> & {
};

/**
 * Describes the message google.cloud.pubsublite.v1.PartitionAssignmentAck.
 * Use `create(PartitionAssignmentAckSchema)` to create a new message.
 */
export const PartitionAssignmentAckSchema: GenMessage<PartitionAssignmentAck> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 10);

/**
 * A request on the PartitionAssignment stream.
 *
 * @generated from message google.cloud.pubsublite.v1.PartitionAssignmentRequest
 */
export type PartitionAssignmentRequest = Message<"google.cloud.pubsublite.v1.PartitionAssignmentRequest"> & {
  /**
   * The type of request this is.
   *
   * @generated from oneof google.cloud.pubsublite.v1.PartitionAssignmentRequest.request
   */
  request: {
    /**
     * Initial request on the stream.
     *
     * @generated from field: google.cloud.pubsublite.v1.InitialPartitionAssignmentRequest initial = 1;
     */
    value: InitialPartitionAssignmentRequest;
    case: "initial";
  } | {
    /**
     * Acknowledgement of a partition assignment.
     *
     * @generated from field: google.cloud.pubsublite.v1.PartitionAssignmentAck ack = 2;
     */
    value: PartitionAssignmentAck;
    case: "ack";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.pubsublite.v1.PartitionAssignmentRequest.
 * Use `create(PartitionAssignmentRequestSchema)` to create a new message.
 */
export const PartitionAssignmentRequestSchema: GenMessage<PartitionAssignmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_pubsublite_v1_subscriber, 11);

/**
 * The service that a subscriber client application uses to receive messages
 * from subscriptions.
 *
 * @generated from service google.cloud.pubsublite.v1.SubscriberService
 */
export const SubscriberService: GenService<{
  /**
   * Establishes a stream with the server for receiving messages.
   *
   * @generated from rpc google.cloud.pubsublite.v1.SubscriberService.Subscribe
   */
  subscribe: {
    methodKind: "bidi_streaming";
    input: typeof SubscribeRequestSchema;
    output: typeof SubscribeResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_pubsublite_v1_subscriber, 0);

/**
 * The service that a subscriber client application uses to determine which
 * partitions it should connect to.
 *
 * @generated from service google.cloud.pubsublite.v1.PartitionAssignmentService
 */
export const PartitionAssignmentService: GenService<{
  /**
   * Assign partitions for this client to handle for the specified subscription.
   *
   * The client must send an InitialPartitionAssignmentRequest first.
   * The server will then send at most one unacknowledged PartitionAssignment
   * outstanding on the stream at a time.
   * The client should send a PartitionAssignmentAck after updating the
   * partitions it is connected to to reflect the new assignment.
   *
   * @generated from rpc google.cloud.pubsublite.v1.PartitionAssignmentService.AssignPartitions
   */
  assignPartitions: {
    methodKind: "bidi_streaming";
    input: typeof PartitionAssignmentRequestSchema;
    output: typeof PartitionAssignmentSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_pubsublite_v1_subscriber, 1);

