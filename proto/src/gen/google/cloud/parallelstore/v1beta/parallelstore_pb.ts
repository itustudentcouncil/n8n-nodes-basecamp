// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/parallelstore/v1beta/parallelstore.proto (package google.cloud.parallelstore.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../api/field_info_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/parallelstore/v1beta/parallelstore.proto.
 */
export const file_google_cloud_parallelstore_v1beta_parallelstore: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A Parallelstore instance.
 *
 * @generated from message google.cloud.parallelstore.v1beta.Instance
 */
export type Instance = Message<"google.cloud.parallelstore.v1beta.Instance"> & {
  /**
   * Identifier. The resource name of the instance, in the format
   * `projects/{project}/locations/{location}/instances/{instance_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The description of the instance. 2048 characters or less.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Output only. The instance state.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.Instance.State state = 3;
   */
  state: Instance_State;

  /**
   * Output only. The time when the instance was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time when the instance was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * Optional. Cloud Labels are a flexible and lightweight mechanism for
   * organizing cloud resources into groups that reflect a customer's
   * organizational needs and deployment strategies. See
   * https://cloud.google.com/resource-manager/docs/labels-overview for details.
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };

  /**
   * Required. Immutable. The instance's storage capacity in Gibibytes (GiB).
   * Allowed values are between 12000 and 100000, in multiples of 4000; e.g.,
   * 12000, 16000, 20000, ...
   *
   * @generated from field: int64 capacity_gib = 8;
   */
  capacityGib: bigint;

  /**
   * Output only. The version of DAOS software running in the instance.
   *
   * @generated from field: string daos_version = 9;
   */
  daosVersion: string;

  /**
   * Output only. A list of IPv4 addresses used for client side configuration.
   *
   * @generated from field: repeated string access_points = 10;
   */
  accessPoints: string[];

  /**
   * Optional. Immutable. The name of the Compute Engine
   * [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
   * instance is connected.
   *
   * @generated from field: string network = 11;
   */
  network: string;

  /**
   * Optional. Immutable. The ID of the IP address range being used by the
   * instance's VPC network. See [Configure a VPC
   * network](https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc).
   * If no ID is provided, all ranges are considered.
   *
   * @generated from field: string reserved_ip_range = 12;
   */
  reservedIpRange: string;

  /**
   * Output only. Immutable. The ID of the IP address range being used by the
   * instance's VPC network. This field is populated by the service and contains
   * the value currently used by the service.
   *
   * @generated from field: string effective_reserved_ip_range = 14;
   */
  effectiveReservedIpRange: string;

  /**
   * Optional. Stripe level for files. Allowed values are:
   *
   * * `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size
   *   files.
   * * `FILE_STRIPE_LEVEL_BALANCED`: balances performance for workloads
   *   involving a mix of small and large files.
   * * `FILE_STRIPE_LEVEL_MAX`: higher throughput performance for larger files.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.FileStripeLevel file_stripe_level = 15;
   */
  fileStripeLevel: FileStripeLevel;

  /**
   * Optional. Stripe level for directories. Allowed values are:
   *
   * * `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories contain a
   *   small number of files.
   * * `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance for workloads
   *   involving a mix of small and large directories.
   * * `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a large
   *   number of files.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.DirectoryStripeLevel directory_stripe_level = 16;
   */
  directoryStripeLevel: DirectoryStripeLevel;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.Instance.
 * Use `create(InstanceSchema)` to create a new message.
 */
export const InstanceSchema: GenMessage<Instance> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 0);

/**
 * The possible states of a Parallelstore instance.
 *
 * @generated from enum google.cloud.parallelstore.v1beta.Instance.State
 */
export enum Instance_State {
  /**
   * Not set.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The instance is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The instance is available for use.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The instance is being deleted.
   *
   * @generated from enum value: DELETING = 3;
   */
  DELETING = 3,

  /**
   * The instance is not usable.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * The instance is being upgraded.
   *
   * @generated from enum value: UPGRADING = 5;
   */
  UPGRADING = 5,
}

/**
 * Describes the enum google.cloud.parallelstore.v1beta.Instance.State.
 */
export const Instance_StateSchema: GenEnum<Instance_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 0, 0);

/**
 * List instances request.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ListInstancesRequest
 */
export type ListInstancesRequest = Message<"google.cloud.parallelstore.v1beta.ListInstancesRequest"> & {
  /**
   * Required. The project and location for which to retrieve instance
   * information, in the format `projects/{project_id}/locations/{location}`.
   *
   * To retrieve instance information for all locations, use "-" as the value of
   * `{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, the server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Filtering results.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Hint for how to order the results.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export const ListInstancesRequestSchema: GenMessage<ListInstancesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 1);

/**
 * Response from
 * [ListInstances][google.cloud.parallelstore.v1beta.Parallelstore.ListInstances].
 *
 * @generated from message google.cloud.parallelstore.v1beta.ListInstancesResponse
 */
export type ListInstancesResponse = Message<"google.cloud.parallelstore.v1beta.ListInstancesResponse"> & {
  /**
   * The list of Parallelstore instances.
   *
   * @generated from field: repeated google.cloud.parallelstore.v1beta.Instance instances = 1;
   */
  instances: Instance[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export const ListInstancesResponseSchema: GenMessage<ListInstancesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 2);

/**
 * Get an instance's details.
 *
 * @generated from message google.cloud.parallelstore.v1beta.GetInstanceRequest
 */
export type GetInstanceRequest = Message<"google.cloud.parallelstore.v1beta.GetInstanceRequest"> & {
  /**
   * Required. The instance resource name, in the format
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.GetInstanceRequest.
 * Use `create(GetInstanceRequestSchema)` to create a new message.
 */
export const GetInstanceRequestSchema: GenMessage<GetInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 3);

/**
 * Create a new Parallelstore instance.
 *
 * @generated from message google.cloud.parallelstore.v1beta.CreateInstanceRequest
 */
export type CreateInstanceRequest = Message<"google.cloud.parallelstore.v1beta.CreateInstanceRequest"> & {
  /**
   * Required. The instance's project and location, in the format
   * `projects/{project}/locations/{location}`.
   * Locations map to Google Cloud zones; for example, `us-west1-b`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The name of the Parallelstore instance.
   *
   * * Must contain only lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   * * Must be between 1-63 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the customer project / location
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. The instance to create.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.Instance instance = 3;
   */
  instance?: Instance;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.CreateInstanceRequest.
 * Use `create(CreateInstanceRequestSchema)` to create a new message.
 */
export const CreateInstanceRequestSchema: GenMessage<CreateInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 4);

/**
 * Update an instance.
 *
 * @generated from message google.cloud.parallelstore.v1beta.UpdateInstanceRequest
 */
export type UpdateInstanceRequest = Message<"google.cloud.parallelstore.v1beta.UpdateInstanceRequest"> & {
  /**
   * Required. Mask of fields to update. Field mask is used to specify the
   * fields to be overwritten in the Instance resource by the update. At least
   * one path must be supplied in this field. The fields specified in the
   * update_mask are relative to the resource, not the full request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. The instance to update.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.Instance instance = 2;
   */
  instance?: Instance;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.UpdateInstanceRequest.
 * Use `create(UpdateInstanceRequestSchema)` to create a new message.
 */
export const UpdateInstanceRequestSchema: GenMessage<UpdateInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 5);

/**
 * Delete an instance.
 *
 * @generated from message google.cloud.parallelstore.v1beta.DeleteInstanceRequest
 */
export type DeleteInstanceRequest = Message<"google.cloud.parallelstore.v1beta.DeleteInstanceRequest"> & {
  /**
   * Required. Name of the resource
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.DeleteInstanceRequest.
 * Use `create(DeleteInstanceRequestSchema)` to create a new message.
 */
export const DeleteInstanceRequestSchema: GenMessage<DeleteInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 6);

/**
 * Long-running operation metadata.
 *
 * @generated from message google.cloud.parallelstore.v1beta.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.parallelstore.v1beta.OperationMetadata"> & {
  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 7);

/**
 * Cloud Storage as the source of a data transfer.
 *
 * @generated from message google.cloud.parallelstore.v1beta.SourceGcsBucket
 */
export type SourceGcsBucket = Message<"google.cloud.parallelstore.v1beta.SourceGcsBucket"> & {
  /**
   * Required. URI to a Cloud Storage bucket in the format:
   * `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
   * optional.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.SourceGcsBucket.
 * Use `create(SourceGcsBucketSchema)` to create a new message.
 */
export const SourceGcsBucketSchema: GenMessage<SourceGcsBucket> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 8);

/**
 * Cloud Storage as the destination of a data transfer.
 *
 * @generated from message google.cloud.parallelstore.v1beta.DestinationGcsBucket
 */
export type DestinationGcsBucket = Message<"google.cloud.parallelstore.v1beta.DestinationGcsBucket"> & {
  /**
   * Required. URI to a Cloud Storage bucket in the format:
   * `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
   * optional.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.DestinationGcsBucket.
 * Use `create(DestinationGcsBucketSchema)` to create a new message.
 */
export const DestinationGcsBucketSchema: GenMessage<DestinationGcsBucket> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 9);

/**
 * Parallelstore as the source of a data transfer.
 *
 * @generated from message google.cloud.parallelstore.v1beta.SourceParallelstore
 */
export type SourceParallelstore = Message<"google.cloud.parallelstore.v1beta.SourceParallelstore"> & {
  /**
   * Optional. Root directory path to the Paralellstore filesystem, starting
   * with `/`. Defaults to `/` if unset.
   *
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.SourceParallelstore.
 * Use `create(SourceParallelstoreSchema)` to create a new message.
 */
export const SourceParallelstoreSchema: GenMessage<SourceParallelstore> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 10);

/**
 * Parallelstore as the destination of a data transfer.
 *
 * @generated from message google.cloud.parallelstore.v1beta.DestinationParallelstore
 */
export type DestinationParallelstore = Message<"google.cloud.parallelstore.v1beta.DestinationParallelstore"> & {
  /**
   * Optional. Root directory path to the Paralellstore filesystem, starting
   * with `/`. Defaults to `/` if unset.
   *
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.DestinationParallelstore.
 * Use `create(DestinationParallelstoreSchema)` to create a new message.
 */
export const DestinationParallelstoreSchema: GenMessage<DestinationParallelstore> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 11);

/**
 * Import data from Cloud Storage into a Parallelstore instance.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ImportDataRequest
 */
export type ImportDataRequest = Message<"google.cloud.parallelstore.v1beta.ImportDataRequest"> & {
  /**
   * The source of the data being imported into the Parallelstore instance.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.ImportDataRequest.source
   */
  source: {
    /**
     * The Cloud Storage source bucket and, optionally, path inside the bucket.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.SourceGcsBucket source_gcs_bucket = 2;
     */
    value: SourceGcsBucket;
    case: "sourceGcsBucket";
  } | { case: undefined; value?: undefined };

  /**
   * The Parallelstore instance into which to import data.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.ImportDataRequest.destination
   */
  destination: {
    /**
     * Parallelstore destination.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.DestinationParallelstore destination_parallelstore = 3;
     */
    value: DestinationParallelstore;
    case: "destinationParallelstore";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Name of the resource.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. User-specified service account credentials to be used when
   * performing the transfer.
   *
   * Use one of the following formats:
   *
   * * {EMAIL_ADDRESS_OR_UNIQUE_ID}
   * * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
   * * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}
   *
   * If unspecified, the Parallelstore service agent is used:
   * `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
   *
   * @generated from field: string service_account = 5;
   */
  serviceAccount: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ImportDataRequest.
 * Use `create(ImportDataRequestSchema)` to create a new message.
 */
export const ImportDataRequestSchema: GenMessage<ImportDataRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 12);

/**
 * Export data from Parallelstore to Cloud Storage.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ExportDataRequest
 */
export type ExportDataRequest = Message<"google.cloud.parallelstore.v1beta.ExportDataRequest"> & {
  /**
   * The Parallelstore instance to export from.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.ExportDataRequest.source
   */
  source: {
    /**
     * Parallelstore source.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.SourceParallelstore source_parallelstore = 2;
     */
    value: SourceParallelstore;
    case: "sourceParallelstore";
  } | { case: undefined; value?: undefined };

  /**
   * The Cloud Storage bucket to export to.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.ExportDataRequest.destination
   */
  destination: {
    /**
     * Cloud Storage destination.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.DestinationGcsBucket destination_gcs_bucket = 3;
     */
    value: DestinationGcsBucket;
    case: "destinationGcsBucket";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Name of the resource.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. User-specified Service Account (SA) credentials to be used when
   * performing the transfer.
   * Use one of the following formats:
   *
   * * {EMAIL_ADDRESS_OR_UNIQUE_ID}
   * * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
   * * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}
   *
   * If unspecified, the Parallelstore service agent is used:
   * `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
   *
   * @generated from field: string service_account = 5;
   */
  serviceAccount: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ExportDataRequest.
 * Use `create(ExportDataRequestSchema)` to create a new message.
 */
export const ExportDataRequestSchema: GenMessage<ExportDataRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 13);

/**
 * The response to a request to import data to Parallelstore.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ImportDataResponse
 */
export type ImportDataResponse = Message<"google.cloud.parallelstore.v1beta.ImportDataResponse"> & {
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ImportDataResponse.
 * Use `create(ImportDataResponseSchema)` to create a new message.
 */
export const ImportDataResponseSchema: GenMessage<ImportDataResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 14);

/**
 * Metadata related to the data import operation.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ImportDataMetadata
 */
export type ImportDataMetadata = Message<"google.cloud.parallelstore.v1beta.ImportDataMetadata"> & {
  /**
   * Data transfer operation metadata.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.TransferOperationMetadata operation_metadata = 1;
   */
  operationMetadata?: TransferOperationMetadata;

  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 4;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 5;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 6;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 7;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 8;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ImportDataMetadata.
 * Use `create(ImportDataMetadataSchema)` to create a new message.
 */
export const ImportDataMetadataSchema: GenMessage<ImportDataMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 15);

/**
 * The response to a request to export data from Parallelstore.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ExportDataResponse
 */
export type ExportDataResponse = Message<"google.cloud.parallelstore.v1beta.ExportDataResponse"> & {
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ExportDataResponse.
 * Use `create(ExportDataResponseSchema)` to create a new message.
 */
export const ExportDataResponseSchema: GenMessage<ExportDataResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 16);

/**
 * Metadata related to the data export operation.
 *
 * @generated from message google.cloud.parallelstore.v1beta.ExportDataMetadata
 */
export type ExportDataMetadata = Message<"google.cloud.parallelstore.v1beta.ExportDataMetadata"> & {
  /**
   * Data transfer operation metadata.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.TransferOperationMetadata operation_metadata = 1;
   */
  operationMetadata?: TransferOperationMetadata;

  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 4;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 5;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 6;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 7;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 8;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.ExportDataMetadata.
 * Use `create(ExportDataMetadataSchema)` to create a new message.
 */
export const ExportDataMetadataSchema: GenMessage<ExportDataMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 17);

/**
 * Long-running operation metadata related to a data transfer.
 *
 * @generated from message google.cloud.parallelstore.v1beta.TransferOperationMetadata
 */
export type TransferOperationMetadata = Message<"google.cloud.parallelstore.v1beta.TransferOperationMetadata"> & {
  /**
   * The source of transfer operation.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.TransferOperationMetadata.source
   */
  source: {
    /**
     * Output only. Parallelstore source.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.SourceParallelstore source_parallelstore = 7;
     */
    value: SourceParallelstore;
    case: "sourceParallelstore";
  } | {
    /**
     * Output only. Cloud Storage source.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.SourceGcsBucket source_gcs_bucket = 8;
     */
    value: SourceGcsBucket;
    case: "sourceGcsBucket";
  } | { case: undefined; value?: undefined };

  /**
   * The destination of transfer operation.
   *
   * @generated from oneof google.cloud.parallelstore.v1beta.TransferOperationMetadata.destination
   */
  destination: {
    /**
     * Output only. Cloud Storage destination.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.DestinationGcsBucket destination_gcs_bucket = 9;
     */
    value: DestinationGcsBucket;
    case: "destinationGcsBucket";
  } | {
    /**
     * Output only. Parallelstore destination.
     *
     * @generated from field: google.cloud.parallelstore.v1beta.DestinationParallelstore destination_parallelstore = 10;
     */
    value: DestinationParallelstore;
    case: "destinationParallelstore";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. The progress of the transfer operation.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.TransferCounters counters = 3;
   */
  counters?: TransferCounters;

  /**
   * Output only. The type of transfer occurring.
   *
   * @generated from field: google.cloud.parallelstore.v1beta.TransferType transfer_type = 6;
   */
  transferType: TransferType;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.TransferOperationMetadata.
 * Use `create(TransferOperationMetadataSchema)` to create a new message.
 */
export const TransferOperationMetadataSchema: GenMessage<TransferOperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 18);

/**
 * A collection of counters that report the progress of a transfer operation.
 *
 * @generated from message google.cloud.parallelstore.v1beta.TransferCounters
 */
export type TransferCounters = Message<"google.cloud.parallelstore.v1beta.TransferCounters"> & {
  /**
   * Objects found in the data source that are scheduled to be transferred,
   * excluding any that are filtered based on object conditions or skipped due
   * to sync.
   *
   * @generated from field: int64 objects_found = 1;
   */
  objectsFound: bigint;

  /**
   * Bytes found in the data source that are scheduled to be transferred,
   * excluding any that are filtered based on object conditions or skipped due
   * to sync.
   *
   * @generated from field: int64 bytes_found = 2;
   */
  bytesFound: bigint;

  /**
   * Objects in the data source that are not transferred because they already
   * exist in the data destination.
   *
   * @generated from field: int64 objects_skipped = 3;
   */
  objectsSkipped: bigint;

  /**
   * Bytes in the data source that are not transferred because they already
   * exist in the data destination.
   *
   * @generated from field: int64 bytes_skipped = 4;
   */
  bytesSkipped: bigint;

  /**
   * Objects that are copied to the data destination.
   *
   * @generated from field: int64 objects_copied = 5;
   */
  objectsCopied: bigint;

  /**
   * Bytes that are copied to the data destination.
   *
   * @generated from field: int64 bytes_copied = 6;
   */
  bytesCopied: bigint;
};

/**
 * Describes the message google.cloud.parallelstore.v1beta.TransferCounters.
 * Use `create(TransferCountersSchema)` to create a new message.
 */
export const TransferCountersSchema: GenMessage<TransferCounters> = /*@__PURE__*/
  messageDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 19);

/**
 * Type of transfer that occurred.
 *
 * @generated from enum google.cloud.parallelstore.v1beta.TransferType
 */
export enum TransferType {
  /**
   * Zero is an illegal value.
   *
   * @generated from enum value: TRANSFER_TYPE_UNSPECIFIED = 0;
   */
  TRANSFER_TYPE_UNSPECIFIED = 0,

  /**
   * Imports to Parallelstore.
   *
   * @generated from enum value: IMPORT = 1;
   */
  IMPORT = 1,

  /**
   * Exports from Parallelstore.
   *
   * @generated from enum value: EXPORT = 2;
   */
  EXPORT = 2,
}

/**
 * Describes the enum google.cloud.parallelstore.v1beta.TransferType.
 */
export const TransferTypeSchema: GenEnum<TransferType> = /*@__PURE__*/
  enumDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 0);

/**
 * Represents the striping options for files.
 *
 * @generated from enum google.cloud.parallelstore.v1beta.FileStripeLevel
 */
export enum FileStripeLevel {
  /**
   * If not set, FileStripeLevel will default to FILE_STRIPE_LEVEL_BALANCED
   *
   * @generated from enum value: FILE_STRIPE_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Minimum file striping
   *
   * @generated from enum value: FILE_STRIPE_LEVEL_MIN = 1;
   */
  MIN = 1,

  /**
   * Medium file striping
   *
   * @generated from enum value: FILE_STRIPE_LEVEL_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * Maximum file striping
   *
   * @generated from enum value: FILE_STRIPE_LEVEL_MAX = 3;
   */
  MAX = 3,
}

/**
 * Describes the enum google.cloud.parallelstore.v1beta.FileStripeLevel.
 */
export const FileStripeLevelSchema: GenEnum<FileStripeLevel> = /*@__PURE__*/
  enumDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 1);

/**
 * Represents the striping options for directories.
 *
 * @generated from enum google.cloud.parallelstore.v1beta.DirectoryStripeLevel
 */
export enum DirectoryStripeLevel {
  /**
   * If not set, DirectoryStripeLevel will default to DIRECTORY_STRIPE_LEVEL_MAX
   *
   * @generated from enum value: DIRECTORY_STRIPE_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Minimum directory striping
   *
   * @generated from enum value: DIRECTORY_STRIPE_LEVEL_MIN = 1;
   */
  MIN = 1,

  /**
   * Medium directory striping
   *
   * @generated from enum value: DIRECTORY_STRIPE_LEVEL_BALANCED = 2;
   */
  BALANCED = 2,

  /**
   * Maximum directory striping
   *
   * @generated from enum value: DIRECTORY_STRIPE_LEVEL_MAX = 3;
   */
  MAX = 3,
}

/**
 * Describes the enum google.cloud.parallelstore.v1beta.DirectoryStripeLevel.
 */
export const DirectoryStripeLevelSchema: GenEnum<DirectoryStripeLevel> = /*@__PURE__*/
  enumDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 2);

/**
 * Service describing handlers for resources
 * Configures and manages parallelstore resources.
 *
 * Parallelstore service.
 *
 * The `parallelstore.googleapis.com` service implements the parallelstore API
 * and defines the following resource model for managing instances:
 * * The service works with a collection of cloud projects, named: `/projects/*`
 * * Each project has a collection of available locations, named: `/locations/*`
 * * Each location has a collection of instances named `/instances/*`.
 * * Parallelstore instances are resources of the form:
 *   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *
 * Note that location_id must be a Google Cloud `zone`; for example:
 * * `projects/12345/locations/us-central1-c/instances/my-parallelstore-share`
 *
 * @generated from service google.cloud.parallelstore.v1beta.Parallelstore
 */
export const Parallelstore: GenService<{
  /**
   * Lists all instances in a given project and location.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.ListInstances
   */
  listInstances: {
    methodKind: "unary";
    input: typeof ListInstancesRequestSchema;
    output: typeof ListInstancesResponseSchema;
  },
  /**
   * Gets details of a single instance.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.GetInstance
   */
  getInstance: {
    methodKind: "unary";
    input: typeof GetInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * Creates a Parallelstore instance in a given project and location.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.CreateInstance
   */
  createInstance: {
    methodKind: "unary";
    input: typeof CreateInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the parameters of a single instance.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.UpdateInstance
   */
  updateInstance: {
    methodKind: "unary";
    input: typeof UpdateInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single instance.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.DeleteInstance
   */
  deleteInstance: {
    methodKind: "unary";
    input: typeof DeleteInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Copies data from Cloud Storage to Parallelstore.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.ImportData
   */
  importData: {
    methodKind: "unary";
    input: typeof ImportDataRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Copies data from Parallelstore to Cloud Storage.
   *
   * @generated from rpc google.cloud.parallelstore.v1beta.Parallelstore.ExportData
   */
  exportData: {
    methodKind: "unary";
    input: typeof ExportDataRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_parallelstore_v1beta_parallelstore, 0);

