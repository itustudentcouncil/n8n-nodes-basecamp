// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/retail/v2/import_config.proto (package google.cloud.retail.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Product } from "./product_pb";
import { file_google_cloud_retail_v2_product } from "./product_pb";
import type { UserEvent } from "./user_event_pb";
import { file_google_cloud_retail_v2_user_event } from "./user_event_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/retail/v2/import_config.proto.
 */
export const file_google_cloud_retail_v2_import_config: GenFile = /*@__PURE__*/
  fileDesc("Cipnb29nbGUvY2xvdWQvcmV0YWlsL3YyL2ltcG9ydF9jb25maWcucHJvdG8SFmdvb2dsZS5jbG91ZC5yZXRhaWwudjIiOQoJR2NzU291cmNlEhcKCmlucHV0X3VyaXMYASADKAlCA+BBAhITCgtkYXRhX3NjaGVtYRgCIAEoCSK8AQoOQmlnUXVlcnlTb3VyY2USKwoOcGFydGl0aW9uX2RhdGUYBiABKAsyES5nb29nbGUudHlwZS5EYXRlSAASEgoKcHJvamVjdF9pZBgFIAEoCRIXCgpkYXRhc2V0X2lkGAEgASgJQgPgQQISFQoIdGFibGVfaWQYAiABKAlCA+BBAhIXCg9nY3Nfc3RhZ2luZ19kaXIYAyABKAkSEwoLZGF0YV9zY2hlbWEYBCABKAlCCwoJcGFydGl0aW9uIk0KE1Byb2R1Y3RJbmxpbmVTb3VyY2USNgoIcHJvZHVjdHMYASADKAsyHy5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlByb2R1Y3RCA+BBAiJUChVVc2VyRXZlbnRJbmxpbmVTb3VyY2USOwoLdXNlcl9ldmVudHMYASADKAsyIS5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlVzZXJFdmVudEID4EECIjkKEkltcG9ydEVycm9yc0NvbmZpZxIUCgpnY3NfcHJlZml4GAEgASgJSABCDQoLZGVzdGluYXRpb24i+AMKFUltcG9ydFByb2R1Y3RzUmVxdWVzdBI0CgZwYXJlbnQYASABKAlCJOBBAvpBHgoccmV0YWlsLmdvb2dsZWFwaXMuY29tL0JyYW5jaBIWCgpyZXF1ZXN0X2lkGAYgASgJQgIYARJFCgxpbnB1dF9jb25maWcYAiABKAsyKi5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlByb2R1Y3RJbnB1dENvbmZpZ0ID4EECEkEKDWVycm9yc19jb25maWcYAyABKAsyKi5nb29nbGUuY2xvdWQucmV0YWlsLnYyLkltcG9ydEVycm9yc0NvbmZpZxIvCgt1cGRhdGVfbWFzaxgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sSXQoTcmVjb25jaWxpYXRpb25fbW9kZRgFIAEoDjJALmdvb2dsZS5jbG91ZC5yZXRhaWwudjIuSW1wb3J0UHJvZHVjdHNSZXF1ZXN0LlJlY29uY2lsaWF0aW9uTW9kZRIhChlub3RpZmljYXRpb25fcHVic3ViX3RvcGljGAcgASgJIlQKElJlY29uY2lsaWF0aW9uTW9kZRIjCh9SRUNPTkNJTElBVElPTl9NT0RFX1VOU1BFQ0lGSUVEEAASDwoLSU5DUkVNRU5UQUwQARIICgRGVUxMEAIi3AEKF0ltcG9ydFVzZXJFdmVudHNSZXF1ZXN0EjUKBnBhcmVudBgBIAEoCUIl4EEC+kEfCh1yZXRhaWwuZ29vZ2xlYXBpcy5jb20vQ2F0YWxvZxJHCgxpbnB1dF9jb25maWcYAiABKAsyLC5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlVzZXJFdmVudElucHV0Q29uZmlnQgPgQQISQQoNZXJyb3JzX2NvbmZpZxgDIAEoCzIqLmdvb2dsZS5jbG91ZC5yZXRhaWwudjIuSW1wb3J0RXJyb3JzQ29uZmlnIsUBChtJbXBvcnRDb21wbGV0aW9uRGF0YVJlcXVlc3QSNQoGcGFyZW50GAEgASgJQiXgQQL6QR8KHXJldGFpbC5nb29nbGVhcGlzLmNvbS9DYXRhbG9nEkwKDGlucHV0X2NvbmZpZxgCIAEoCzIxLmdvb2dsZS5jbG91ZC5yZXRhaWwudjIuQ29tcGxldGlvbkRhdGFJbnB1dENvbmZpZ0ID4EECEiEKGW5vdGlmaWNhdGlvbl9wdWJzdWJfdG9waWMYAyABKAki6QEKElByb2R1Y3RJbnB1dENvbmZpZxJMChVwcm9kdWN0X2lubGluZV9zb3VyY2UYASABKAsyKy5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlByb2R1Y3RJbmxpbmVTb3VyY2VIABI3CgpnY3Nfc291cmNlGAIgASgLMiEuZ29vZ2xlLmNsb3VkLnJldGFpbC52Mi5HY3NTb3VyY2VIABJCChBiaWdfcXVlcnlfc291cmNlGAMgASgLMiYuZ29vZ2xlLmNsb3VkLnJldGFpbC52Mi5CaWdRdWVyeVNvdXJjZUgAQggKBnNvdXJjZSL/AQoUVXNlckV2ZW50SW5wdXRDb25maWcSVgoYdXNlcl9ldmVudF9pbmxpbmVfc291cmNlGAEgASgLMi0uZ29vZ2xlLmNsb3VkLnJldGFpbC52Mi5Vc2VyRXZlbnRJbmxpbmVTb3VyY2VCA+BBAkgAEjwKCmdjc19zb3VyY2UYAiABKAsyIS5nb29nbGUuY2xvdWQucmV0YWlsLnYyLkdjc1NvdXJjZUID4EECSAASRwoQYmlnX3F1ZXJ5X3NvdXJjZRgDIAEoCzImLmdvb2dsZS5jbG91ZC5yZXRhaWwudjIuQmlnUXVlcnlTb3VyY2VCA+BBAkgAQggKBnNvdXJjZSJuChlDb21wbGV0aW9uRGF0YUlucHV0Q29uZmlnEkcKEGJpZ19xdWVyeV9zb3VyY2UYASABKAsyJi5nb29nbGUuY2xvdWQucmV0YWlsLnYyLkJpZ1F1ZXJ5U291cmNlQgPgQQJIAEIICgZzb3VyY2Ui2wEKDkltcG9ydE1ldGFkYXRhEi8KC2NyZWF0ZV90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgt1cGRhdGVfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFQoNc3VjY2Vzc19jb3VudBgDIAEoAxIVCg1mYWlsdXJlX2NvdW50GAQgASgDEhYKCnJlcXVlc3RfaWQYBSABKAlCAhgBEiEKGW5vdGlmaWNhdGlvbl9wdWJzdWJfdG9waWMYBiABKAkihgEKFkltcG9ydFByb2R1Y3RzUmVzcG9uc2USKQoNZXJyb3Jfc2FtcGxlcxgBIAMoCzISLmdvb2dsZS5ycGMuU3RhdHVzEkEKDWVycm9yc19jb25maWcYAiABKAsyKi5nb29nbGUuY2xvdWQucmV0YWlsLnYyLkltcG9ydEVycm9yc0NvbmZpZyLQAQoYSW1wb3J0VXNlckV2ZW50c1Jlc3BvbnNlEikKDWVycm9yX3NhbXBsZXMYASADKAsyEi5nb29nbGUucnBjLlN0YXR1cxJBCg1lcnJvcnNfY29uZmlnGAIgASgLMiouZ29vZ2xlLmNsb3VkLnJldGFpbC52Mi5JbXBvcnRFcnJvcnNDb25maWcSRgoOaW1wb3J0X3N1bW1hcnkYAyABKAsyLi5nb29nbGUuY2xvdWQucmV0YWlsLnYyLlVzZXJFdmVudEltcG9ydFN1bW1hcnkiVAoWVXNlckV2ZW50SW1wb3J0U3VtbWFyeRIbChNqb2luZWRfZXZlbnRzX2NvdW50GAEgASgDEh0KFXVuam9pbmVkX2V2ZW50c19jb3VudBgCIAEoAyJJChxJbXBvcnRDb21wbGV0aW9uRGF0YVJlc3BvbnNlEikKDWVycm9yX3NhbXBsZXMYASADKAsyEi5nb29nbGUucnBjLlN0YXR1c0K8AQoaY29tLmdvb2dsZS5jbG91ZC5yZXRhaWwudjJCEUltcG9ydENvbmZpZ1Byb3RvUAFaMmNsb3VkLmdvb2dsZS5jb20vZ28vcmV0YWlsL2FwaXYyL3JldGFpbHBiO3JldGFpbHBiogIGUkVUQUlMqgIWR29vZ2xlLkNsb3VkLlJldGFpbC5WMsoCFkdvb2dsZVxDbG91ZFxSZXRhaWxcVjLqAhlHb29nbGU6OkNsb3VkOjpSZXRhaWw6OlYyYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_retail_v2_product, file_google_cloud_retail_v2_user_event, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_rpc_status, file_google_type_date]);

/**
 * Google Cloud Storage location for input content.
 *
 * @generated from message google.cloud.retail.v2.GcsSource
 */
export type GcsSource = Message<"google.cloud.retail.v2.GcsSource"> & {
  /**
   * Required. Google Cloud Storage URIs to input files. URI can be up to
   * 2000 characters long. URIs can match the full object path (for example,
   * `gs://bucket/directory/object.json`) or a pattern matching one or more
   * files, such as `gs://bucket/directory/*.json`. A request can
   * contain at most 100 files, and each file can be up to 2 GB. See
   * [Importing product
   * information](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog)
   * for the expected file format and setup instructions.
   *
   * @generated from field: repeated string input_uris = 1;
   */
  inputUris: string[];

  /**
   * The schema to use when parsing the data from the source.
   *
   * Supported values for product imports:
   *
   * * `product` (default): One JSON [Product][google.cloud.retail.v2.Product]
   * per line. Each product must
   *   have a valid [Product.id][google.cloud.retail.v2.Product.id].
   * * `product_merchant_center`: See [Importing catalog data from Merchant
   *   Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc).
   *
   * Supported values for user events imports:
   *
   * * `user_event` (default): One JSON
   * [UserEvent][google.cloud.retail.v2.UserEvent] per line.
   * * `user_event_ga360`: Using
   *   https://support.google.com/analytics/answer/3437719.
   *
   * Supported values for control imports:
   *
   * * `control` (default): One JSON [Control][google.cloud.retail.v2.Control]
   * per line.
   *
   * Supported values for catalog attribute imports:
   *
   * * `catalog_attribute` (default): One CSV
   * [CatalogAttribute][google.cloud.retail.v2.CatalogAttribute] per line.
   *
   * @generated from field: string data_schema = 2;
   */
  dataSchema: string;
};

/**
 * Describes the message google.cloud.retail.v2.GcsSource.
 * Use `create(GcsSourceSchema)` to create a new message.
 */
export const GcsSourceSchema: GenMessage<GcsSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 0);

/**
 * BigQuery source import data from.
 *
 * @generated from message google.cloud.retail.v2.BigQuerySource
 */
export type BigQuerySource = Message<"google.cloud.retail.v2.BigQuerySource"> & {
  /**
   * BigQuery table partition info. Leave this empty if the BigQuery table
   * is not partitioned.
   *
   * @generated from oneof google.cloud.retail.v2.BigQuerySource.partition
   */
  partition: {
    /**
     * BigQuery time partitioned table's _PARTITIONDATE in YYYY-MM-DD format.
     *
     * Only supported in
     * [ImportProductsRequest][google.cloud.retail.v2.ImportProductsRequest].
     *
     * @generated from field: google.type.Date partition_date = 6;
     */
    value: Date;
    case: "partitionDate";
  } | { case: undefined; value?: undefined };

  /**
   * The project ID (can be project # or ID) that the BigQuery source is in with
   * a length limit of 128 characters. If not specified, inherits the project
   * ID from the parent request.
   *
   * @generated from field: string project_id = 5;
   */
  projectId: string;

  /**
   * Required. The BigQuery data set to copy the data from with a length limit
   * of 1,024 characters.
   *
   * @generated from field: string dataset_id = 1;
   */
  datasetId: string;

  /**
   * Required. The BigQuery table to copy the data from with a length limit of
   * 1,024 characters.
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * BigQuery export to a specific Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 3;
   */
  gcsStagingDir: string;

  /**
   * The schema to use when parsing the data from the source.
   *
   * Supported values for product imports:
   *
   * * `product` (default): One JSON [Product][google.cloud.retail.v2.Product]
   * per line. Each product must
   *   have a valid [Product.id][google.cloud.retail.v2.Product.id].
   * * `product_merchant_center`: See [Importing catalog data from Merchant
   *   Center](https://cloud.google.com/retail/recommendations-ai/docs/upload-catalog#mc).
   *
   * Supported values for user events imports:
   *
   * * `user_event` (default): One JSON
   * [UserEvent][google.cloud.retail.v2.UserEvent] per line.
   * * `user_event_ga360`:
   *   The schema is available here:
   *   https://support.google.com/analytics/answer/3437719.
   * * `user_event_ga4`:
   *   The schema is available here:
   *   https://support.google.com/analytics/answer/7029846.
   *
   * Supported values for autocomplete imports:
   *
   * * `suggestions` (default): One JSON completion suggestion per line.
   * * `denylist`:  One JSON deny suggestion per line.
   * * `allowlist`:  One JSON allow suggestion per line.
   *
   * @generated from field: string data_schema = 4;
   */
  dataSchema: string;
};

/**
 * Describes the message google.cloud.retail.v2.BigQuerySource.
 * Use `create(BigQuerySourceSchema)` to create a new message.
 */
export const BigQuerySourceSchema: GenMessage<BigQuerySource> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 1);

/**
 * The inline source for the input config for ImportProducts method.
 *
 * @generated from message google.cloud.retail.v2.ProductInlineSource
 */
export type ProductInlineSource = Message<"google.cloud.retail.v2.ProductInlineSource"> & {
  /**
   * Required. A list of products to update/create. Each product must have a
   * valid [Product.id][google.cloud.retail.v2.Product.id]. Recommended max of
   * 100 items.
   *
   * @generated from field: repeated google.cloud.retail.v2.Product products = 1;
   */
  products: Product[];
};

/**
 * Describes the message google.cloud.retail.v2.ProductInlineSource.
 * Use `create(ProductInlineSourceSchema)` to create a new message.
 */
export const ProductInlineSourceSchema: GenMessage<ProductInlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 2);

/**
 * The inline source for the input config for ImportUserEvents method.
 *
 * @generated from message google.cloud.retail.v2.UserEventInlineSource
 */
export type UserEventInlineSource = Message<"google.cloud.retail.v2.UserEventInlineSource"> & {
  /**
   * Required. A list of user events to import. Recommended max of 10k items.
   *
   * @generated from field: repeated google.cloud.retail.v2.UserEvent user_events = 1;
   */
  userEvents: UserEvent[];
};

/**
 * Describes the message google.cloud.retail.v2.UserEventInlineSource.
 * Use `create(UserEventInlineSourceSchema)` to create a new message.
 */
export const UserEventInlineSourceSchema: GenMessage<UserEventInlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 3);

/**
 * Configuration of destination for Import related errors.
 *
 * @generated from message google.cloud.retail.v2.ImportErrorsConfig
 */
export type ImportErrorsConfig = Message<"google.cloud.retail.v2.ImportErrorsConfig"> & {
  /**
   * Required. Errors destination.
   *
   * @generated from oneof google.cloud.retail.v2.ImportErrorsConfig.destination
   */
  destination: {
    /**
     * Google Cloud Storage prefix for import errors. This must be an empty,
     * existing Cloud Storage directory. Import errors are written to
     * sharded files in this directory, one per line, as a JSON-encoded
     * `google.rpc.Status` message.
     *
     * @generated from field: string gcs_prefix = 1;
     */
    value: string;
    case: "gcsPrefix";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.retail.v2.ImportErrorsConfig.
 * Use `create(ImportErrorsConfigSchema)` to create a new message.
 */
export const ImportErrorsConfigSchema: GenMessage<ImportErrorsConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 4);

/**
 * Request message for Import methods.
 *
 * @generated from message google.cloud.retail.v2.ImportProductsRequest
 */
export type ImportProductsRequest = Message<"google.cloud.retail.v2.ImportProductsRequest"> & {
  /**
   * Required.
   * `projects/1234/locations/global/catalogs/default_catalog/branches/default_branch`
   *
   * If no updateMask is specified, requires products.create permission.
   * If updateMask is specified, requires products.update permission.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string request_id = 6 [deprecated = true];
   * @deprecated
   */
  requestId: string;

  /**
   * Required. The desired input location of the data.
   *
   * @generated from field: google.cloud.retail.v2.ProductInputConfig input_config = 2;
   */
  inputConfig?: ProductInputConfig;

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.retail.v2.ImportErrorsConfig errors_config = 3;
   */
  errorsConfig?: ImportErrorsConfig;

  /**
   * Indicates which fields in the provided imported `products` to update. If
   * not set, all fields are updated. If provided, only the existing product
   * fields are updated. Missing products will not be created.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * The mode of reconciliation between existing products and the products to be
   * imported. Defaults to
   * [ReconciliationMode.INCREMENTAL][google.cloud.retail.v2.ImportProductsRequest.ReconciliationMode.INCREMENTAL].
   *
   * @generated from field: google.cloud.retail.v2.ImportProductsRequest.ReconciliationMode reconciliation_mode = 5;
   */
  reconciliationMode: ImportProductsRequest_ReconciliationMode;

  /**
   * Full Pub/Sub topic name for receiving notification. If this field is set,
   * when the import is finished, a notification is sent to
   * specified Pub/Sub topic. The message data is JSON string of a
   * [Operation][google.longrunning.Operation].
   *
   * Format of the Pub/Sub topic is `projects/{project}/topics/{topic}`. It has
   * to be within the same project as
   * [ImportProductsRequest.parent][google.cloud.retail.v2.ImportProductsRequest.parent].
   * Make sure that both
   * `cloud-retail-customer-data-access@system.gserviceaccount.com` and
   * `service-<project number>@gcp-sa-retail.iam.gserviceaccount.com`
   * have the `pubsub.topics.publish` IAM permission on the topic.
   *
   * Only supported when
   * [ImportProductsRequest.reconciliation_mode][google.cloud.retail.v2.ImportProductsRequest.reconciliation_mode]
   * is set to `FULL`.
   *
   * @generated from field: string notification_pubsub_topic = 7;
   */
  notificationPubsubTopic: string;
};

/**
 * Describes the message google.cloud.retail.v2.ImportProductsRequest.
 * Use `create(ImportProductsRequestSchema)` to create a new message.
 */
export const ImportProductsRequestSchema: GenMessage<ImportProductsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 5);

/**
 * Indicates how imported products are reconciled with the existing products
 * created or imported before.
 *
 * @generated from enum google.cloud.retail.v2.ImportProductsRequest.ReconciliationMode
 */
export enum ImportProductsRequest_ReconciliationMode {
  /**
   * Defaults to INCREMENTAL.
   *
   * @generated from enum value: RECONCILIATION_MODE_UNSPECIFIED = 0;
   */
  RECONCILIATION_MODE_UNSPECIFIED = 0,

  /**
   * Inserts new products or updates existing products.
   *
   * @generated from enum value: INCREMENTAL = 1;
   */
  INCREMENTAL = 1,

  /**
   * Calculates diff and replaces the entire product dataset. Existing
   * products may be deleted if they are not present in the source location.
   *
   * @generated from enum value: FULL = 2;
   */
  FULL = 2,
}

/**
 * Describes the enum google.cloud.retail.v2.ImportProductsRequest.ReconciliationMode.
 */
export const ImportProductsRequest_ReconciliationModeSchema: GenEnum<ImportProductsRequest_ReconciliationMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_retail_v2_import_config, 5, 0);

/**
 * Request message for the ImportUserEvents request.
 *
 * @generated from message google.cloud.retail.v2.ImportUserEventsRequest
 */
export type ImportUserEventsRequest = Message<"google.cloud.retail.v2.ImportUserEventsRequest"> & {
  /**
   * Required. `projects/1234/locations/global/catalogs/default_catalog`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The desired input location of the data.
   *
   * @generated from field: google.cloud.retail.v2.UserEventInputConfig input_config = 2;
   */
  inputConfig?: UserEventInputConfig;

  /**
   * The desired location of errors incurred during the Import. Cannot be set
   * for inline user event imports.
   *
   * @generated from field: google.cloud.retail.v2.ImportErrorsConfig errors_config = 3;
   */
  errorsConfig?: ImportErrorsConfig;
};

/**
 * Describes the message google.cloud.retail.v2.ImportUserEventsRequest.
 * Use `create(ImportUserEventsRequestSchema)` to create a new message.
 */
export const ImportUserEventsRequestSchema: GenMessage<ImportUserEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 6);

/**
 * Request message for ImportCompletionData methods.
 *
 * @generated from message google.cloud.retail.v2.ImportCompletionDataRequest
 */
export type ImportCompletionDataRequest = Message<"google.cloud.retail.v2.ImportCompletionDataRequest"> & {
  /**
   * Required. The catalog which the suggestions dataset belongs to.
   *
   * Format: `projects/1234/locations/global/catalogs/default_catalog`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The desired input location of the data.
   *
   * @generated from field: google.cloud.retail.v2.CompletionDataInputConfig input_config = 2;
   */
  inputConfig?: CompletionDataInputConfig;

  /**
   * Pub/Sub topic for receiving notification. If this field is set,
   * when the import is finished, a notification is sent to
   * specified Pub/Sub topic. The message data is JSON string of a
   * [Operation][google.longrunning.Operation].
   * Format of the Pub/Sub topic is `projects/{project}/topics/{topic}`.
   *
   * @generated from field: string notification_pubsub_topic = 3;
   */
  notificationPubsubTopic: string;
};

/**
 * Describes the message google.cloud.retail.v2.ImportCompletionDataRequest.
 * Use `create(ImportCompletionDataRequestSchema)` to create a new message.
 */
export const ImportCompletionDataRequestSchema: GenMessage<ImportCompletionDataRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 7);

/**
 * The input config source for products.
 *
 * @generated from message google.cloud.retail.v2.ProductInputConfig
 */
export type ProductInputConfig = Message<"google.cloud.retail.v2.ProductInputConfig"> & {
  /**
   * Required. The source of the input.
   *
   * @generated from oneof google.cloud.retail.v2.ProductInputConfig.source
   */
  source: {
    /**
     * The Inline source for the input content for products.
     *
     * @generated from field: google.cloud.retail.v2.ProductInlineSource product_inline_source = 1;
     */
    value: ProductInlineSource;
    case: "productInlineSource";
  } | {
    /**
     * Google Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.retail.v2.GcsSource gcs_source = 2;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * BigQuery input source.
     *
     * @generated from field: google.cloud.retail.v2.BigQuerySource big_query_source = 3;
     */
    value: BigQuerySource;
    case: "bigQuerySource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.retail.v2.ProductInputConfig.
 * Use `create(ProductInputConfigSchema)` to create a new message.
 */
export const ProductInputConfigSchema: GenMessage<ProductInputConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 8);

/**
 * The input config source for user events.
 *
 * @generated from message google.cloud.retail.v2.UserEventInputConfig
 */
export type UserEventInputConfig = Message<"google.cloud.retail.v2.UserEventInputConfig"> & {
  /**
   * The source of the input.
   *
   * @generated from oneof google.cloud.retail.v2.UserEventInputConfig.source
   */
  source: {
    /**
     * Required. The Inline source for the input content for UserEvents.
     *
     * @generated from field: google.cloud.retail.v2.UserEventInlineSource user_event_inline_source = 1;
     */
    value: UserEventInlineSource;
    case: "userEventInlineSource";
  } | {
    /**
     * Required. Google Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.retail.v2.GcsSource gcs_source = 2;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * Required. BigQuery input source.
     *
     * @generated from field: google.cloud.retail.v2.BigQuerySource big_query_source = 3;
     */
    value: BigQuerySource;
    case: "bigQuerySource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.retail.v2.UserEventInputConfig.
 * Use `create(UserEventInputConfigSchema)` to create a new message.
 */
export const UserEventInputConfigSchema: GenMessage<UserEventInputConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 9);

/**
 * The input config source for completion data.
 *
 * @generated from message google.cloud.retail.v2.CompletionDataInputConfig
 */
export type CompletionDataInputConfig = Message<"google.cloud.retail.v2.CompletionDataInputConfig"> & {
  /**
   * The source of the input.
   *
   * Supported
   * [BigQuerySource.data_schema][google.cloud.retail.v2.BigQuerySource.data_schema]
   * values for suggestions imports:
   *
   * * `suggestions` (default): One JSON completion suggestion per line.
   * * `denylist`:  One JSON deny suggestion per line.
   * * `allowlist`:  One JSON allow suggestion per line.
   *
   * @generated from oneof google.cloud.retail.v2.CompletionDataInputConfig.source
   */
  source: {
    /**
     * Required. BigQuery input source.
     *
     * Add the IAM permission "BigQuery Data Viewer" for
     * cloud-retail-customer-data-access@system.gserviceaccount.com before
     * using this feature otherwise an error is thrown.
     *
     * @generated from field: google.cloud.retail.v2.BigQuerySource big_query_source = 1;
     */
    value: BigQuerySource;
    case: "bigQuerySource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.retail.v2.CompletionDataInputConfig.
 * Use `create(CompletionDataInputConfigSchema)` to create a new message.
 */
export const CompletionDataInputConfigSchema: GenMessage<CompletionDataInputConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 10);

/**
 * Metadata related to the progress of the Import operation. This is
 * returned by the google.longrunning.Operation.metadata field.
 *
 * @generated from message google.cloud.retail.v2.ImportMetadata
 */
export type ImportMetadata = Message<"google.cloud.retail.v2.ImportMetadata"> & {
  /**
   * Operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Count of entries that were processed successfully.
   *
   * @generated from field: int64 success_count = 3;
   */
  successCount: bigint;

  /**
   * Count of entries that encountered errors while processing.
   *
   * @generated from field: int64 failure_count = 4;
   */
  failureCount: bigint;

  /**
   * Deprecated. This field is never set.
   *
   * @generated from field: string request_id = 5 [deprecated = true];
   * @deprecated
   */
  requestId: string;

  /**
   * Pub/Sub topic for receiving notification. If this field is set,
   * when the import is finished, a notification is sent to
   * specified Pub/Sub topic. The message data is JSON string of a
   * [Operation][google.longrunning.Operation].
   * Format of the Pub/Sub topic is `projects/{project}/topics/{topic}`.
   *
   * @generated from field: string notification_pubsub_topic = 6;
   */
  notificationPubsubTopic: string;
};

/**
 * Describes the message google.cloud.retail.v2.ImportMetadata.
 * Use `create(ImportMetadataSchema)` to create a new message.
 */
export const ImportMetadataSchema: GenMessage<ImportMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 11);

/**
 * Response of the
 * [ImportProductsRequest][google.cloud.retail.v2.ImportProductsRequest]. If the
 * long running operation is done, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 *
 * @generated from message google.cloud.retail.v2.ImportProductsResponse
 */
export type ImportProductsResponse = Message<"google.cloud.retail.v2.ImportProductsResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * Echoes the destination for the complete errors in the request if set.
   *
   * @generated from field: google.cloud.retail.v2.ImportErrorsConfig errors_config = 2;
   */
  errorsConfig?: ImportErrorsConfig;
};

/**
 * Describes the message google.cloud.retail.v2.ImportProductsResponse.
 * Use `create(ImportProductsResponseSchema)` to create a new message.
 */
export const ImportProductsResponseSchema: GenMessage<ImportProductsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 12);

/**
 * Response of the ImportUserEventsRequest. If the long running
 * operation was successful, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 *
 * @generated from message google.cloud.retail.v2.ImportUserEventsResponse
 */
export type ImportUserEventsResponse = Message<"google.cloud.retail.v2.ImportUserEventsResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * Echoes the destination for the complete errors if this field was set in
   * the request.
   *
   * @generated from field: google.cloud.retail.v2.ImportErrorsConfig errors_config = 2;
   */
  errorsConfig?: ImportErrorsConfig;

  /**
   * Aggregated statistics of user event import status.
   *
   * @generated from field: google.cloud.retail.v2.UserEventImportSummary import_summary = 3;
   */
  importSummary?: UserEventImportSummary;
};

/**
 * Describes the message google.cloud.retail.v2.ImportUserEventsResponse.
 * Use `create(ImportUserEventsResponseSchema)` to create a new message.
 */
export const ImportUserEventsResponseSchema: GenMessage<ImportUserEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 13);

/**
 * A summary of import result. The UserEventImportSummary summarizes
 * the import status for user events.
 *
 * @generated from message google.cloud.retail.v2.UserEventImportSummary
 */
export type UserEventImportSummary = Message<"google.cloud.retail.v2.UserEventImportSummary"> & {
  /**
   * Count of user events imported with complete existing catalog information.
   *
   * @generated from field: int64 joined_events_count = 1;
   */
  joinedEventsCount: bigint;

  /**
   * Count of user events imported, but with catalog information not found
   * in the imported catalog.
   *
   * @generated from field: int64 unjoined_events_count = 2;
   */
  unjoinedEventsCount: bigint;
};

/**
 * Describes the message google.cloud.retail.v2.UserEventImportSummary.
 * Use `create(UserEventImportSummarySchema)` to create a new message.
 */
export const UserEventImportSummarySchema: GenMessage<UserEventImportSummary> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 14);

/**
 * Response of the
 * [ImportCompletionDataRequest][google.cloud.retail.v2.ImportCompletionDataRequest].
 * If the long running operation is done, this message is returned by the
 * google.longrunning.Operations.response field if the operation is successful.
 *
 * @generated from message google.cloud.retail.v2.ImportCompletionDataResponse
 */
export type ImportCompletionDataResponse = Message<"google.cloud.retail.v2.ImportCompletionDataResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];
};

/**
 * Describes the message google.cloud.retail.v2.ImportCompletionDataResponse.
 * Use `create(ImportCompletionDataResponseSchema)` to create a new message.
 */
export const ImportCompletionDataResponseSchema: GenMessage<ImportCompletionDataResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_retail_v2_import_config, 15);

