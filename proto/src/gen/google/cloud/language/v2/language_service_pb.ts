// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/language/v2/language_service.proto (package google.cloud.language.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/language/v2/language_service.proto.
 */
export const file_google_cloud_language_v2_language_service: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvY2xvdWQvbGFuZ3VhZ2UvdjIvbGFuZ3VhZ2Vfc2VydmljZS5wcm90bxIYZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyIs0BCghEb2N1bWVudBI1CgR0eXBlGAEgASgOMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkRvY3VtZW50LlR5cGUSEQoHY29udGVudBgCIAEoCUgAEhkKD2djc19jb250ZW50X3VyaRgDIAEoCUgAEhoKDWxhbmd1YWdlX2NvZGUYBCABKAlCA+BBASI2CgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIOCgpQTEFJTl9URVhUEAESCAoESFRNTBACQggKBnNvdXJjZSJ0CghTZW50ZW5jZRIwCgR0ZXh0GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLlRleHRTcGFuEjYKCXNlbnRpbWVudBgCIAEoCzIjLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5TZW50aW1lbnQi7QMKBkVudGl0eRIMCgRuYW1lGAEgASgJEjMKBHR5cGUYAiABKA4yJS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuRW50aXR5LlR5cGUSQAoIbWV0YWRhdGEYAyADKAsyLi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuRW50aXR5Lk1ldGFkYXRhRW50cnkSOQoIbWVudGlvbnMYBSADKAsyJy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuRW50aXR5TWVudGlvbhI2CglzZW50aW1lbnQYBiABKAsyIy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuU2VudGltZW50Gi8KDU1ldGFkYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASK5AQoEVHlwZRILCgdVTktOT1dOEAASCgoGUEVSU09OEAESDAoITE9DQVRJT04QAhIQCgxPUkdBTklaQVRJT04QAxIJCgVFVkVOVBAEEg8KC1dPUktfT0ZfQVJUEAUSEQoNQ09OU1VNRVJfR09PRBAGEgkKBU9USEVSEAcSEAoMUEhPTkVfTlVNQkVSEAkSCwoHQUREUkVTUxAKEggKBERBVEUQCxIKCgZOVU1CRVIQDBIJCgVQUklDRRANIi0KCVNlbnRpbWVudBIRCgltYWduaXR1ZGUYASABKAISDQoFc2NvcmUYAiABKAIi/AEKDUVudGl0eU1lbnRpb24SMAoEdGV4dBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5UZXh0U3BhbhI6CgR0eXBlGAIgASgOMiwuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkVudGl0eU1lbnRpb24uVHlwZRI2CglzZW50aW1lbnQYAyABKAsyIy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuU2VudGltZW50EhMKC3Byb2JhYmlsaXR5GAQgASgCIjAKBFR5cGUSEAoMVFlQRV9VTktOT1dOEAASCgoGUFJPUEVSEAESCgoGQ09NTU9OEAIiMQoIVGV4dFNwYW4SDwoHY29udGVudBgBIAEoCRIUCgxiZWdpbl9vZmZzZXQYAiABKAUiUQoWQ2xhc3NpZmljYXRpb25DYXRlZ29yeRIMCgRuYW1lGAEgASgJEhIKCmNvbmZpZGVuY2UYAiABKAISFQoIc2V2ZXJpdHkYAyABKAJCA+BBASKTAQoXQW5hbHl6ZVNlbnRpbWVudFJlcXVlc3QSOQoIZG9jdW1lbnQYASABKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuRG9jdW1lbnRCA+BBAhI9Cg1lbmNvZGluZ190eXBlGAIgASgOMiYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkVuY29kaW5nVHlwZSLFAQoYQW5hbHl6ZVNlbnRpbWVudFJlc3BvbnNlEj8KEmRvY3VtZW50X3NlbnRpbWVudBgBIAEoCzIjLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5TZW50aW1lbnQSFQoNbGFuZ3VhZ2VfY29kZRgCIAEoCRI1CglzZW50ZW5jZXMYAyADKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuU2VudGVuY2USGgoSbGFuZ3VhZ2Vfc3VwcG9ydGVkGAQgASgIIpIBChZBbmFseXplRW50aXRpZXNSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkRvY3VtZW50QgPgQQISPQoNZW5jb2RpbmdfdHlwZRgCIAEoDjImLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5FbmNvZGluZ1R5cGUigAEKF0FuYWx5emVFbnRpdGllc1Jlc3BvbnNlEjIKCGVudGl0aWVzGAEgAygLMiAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkVudGl0eRIVCg1sYW5ndWFnZV9jb2RlGAIgASgJEhoKEmxhbmd1YWdlX3N1cHBvcnRlZBgDIAEoCCJQChNDbGFzc2lmeVRleHRSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkRvY3VtZW50QgPgQQIijwEKFENsYXNzaWZ5VGV4dFJlc3BvbnNlEkQKCmNhdGVnb3JpZXMYASADKAsyMC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuQ2xhc3NpZmljYXRpb25DYXRlZ29yeRIVCg1sYW5ndWFnZV9jb2RlGAIgASgJEhoKEmxhbmd1YWdlX3N1cHBvcnRlZBgDIAEoCCKBAgoTTW9kZXJhdGVUZXh0UmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5Eb2N1bWVudEID4EECElYKDW1vZGVsX3ZlcnNpb24YAiABKA4yOi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuTW9kZXJhdGVUZXh0UmVxdWVzdC5Nb2RlbFZlcnNpb25CA+BBASJXCgxNb2RlbFZlcnNpb24SHQoZTU9ERUxfVkVSU0lPTl9VTlNQRUNJRklFRBAAEhMKD01PREVMX1ZFUlNJT05fMRABEhMKD01PREVMX1ZFUlNJT05fMhACIpoBChRNb2RlcmF0ZVRleHRSZXNwb25zZRJPChVtb2RlcmF0aW9uX2NhdGVnb3JpZXMYASADKAsyMC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuQ2xhc3NpZmljYXRpb25DYXRlZ29yeRIVCg1sYW5ndWFnZV9jb2RlGAIgASgJEhoKEmxhbmd1YWdlX3N1cHBvcnRlZBgDIAEoCCLrAgoTQW5ub3RhdGVUZXh0UmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5Eb2N1bWVudEID4EECEk0KCGZlYXR1cmVzGAIgASgLMjYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkFubm90YXRlVGV4dFJlcXVlc3QuRmVhdHVyZXNCA+BBAhI9Cg1lbmNvZGluZ190eXBlGAMgASgOMiYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkVuY29kaW5nVHlwZRqKAQoIRmVhdHVyZXMSHQoQZXh0cmFjdF9lbnRpdGllcxgBIAEoCEID4EEBEicKGmV4dHJhY3RfZG9jdW1lbnRfc2VudGltZW50GAIgASgIQgPgQQESGgoNY2xhc3NpZnlfdGV4dBgEIAEoCEID4EEBEhoKDW1vZGVyYXRlX3RleHQYBSABKAhCA+BBASKMAwoUQW5ub3RhdGVUZXh0UmVzcG9uc2USNQoJc2VudGVuY2VzGAEgAygLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLlNlbnRlbmNlEjIKCGVudGl0aWVzGAIgAygLMiAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkVudGl0eRI/ChJkb2N1bWVudF9zZW50aW1lbnQYAyABKAsyIy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuU2VudGltZW50EhUKDWxhbmd1YWdlX2NvZGUYBCABKAkSRAoKY2F0ZWdvcmllcxgFIAMoCzIwLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5DbGFzc2lmaWNhdGlvbkNhdGVnb3J5Ek8KFW1vZGVyYXRpb25fY2F0ZWdvcmllcxgGIAMoCzIwLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5DbGFzc2lmaWNhdGlvbkNhdGVnb3J5EhoKEmxhbmd1YWdlX3N1cHBvcnRlZBgHIAEoCCo4CgxFbmNvZGluZ1R5cGUSCAoETk9ORRAAEggKBFVURjgQARIJCgVVVEYxNhACEgkKBVVURjMyEAMysAgKD0xhbmd1YWdlU2VydmljZRLIAQoQQW5hbHl6ZVNlbnRpbWVudBIxLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5BbmFseXplU2VudGltZW50UmVxdWVzdBoyLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5BbmFseXplU2VudGltZW50UmVzcG9uc2UiTdpBFmRvY3VtZW50LGVuY29kaW5nX3R5cGXaQQhkb2N1bWVudILT5JMCIzoBKiIeL3YyL2RvY3VtZW50czphbmFseXplU2VudGltZW50EsQBCg9BbmFseXplRW50aXRpZXMSMC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuQW5hbHl6ZUVudGl0aWVzUmVxdWVzdBoxLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52Mi5BbmFseXplRW50aXRpZXNSZXNwb25zZSJM2kEWZG9jdW1lbnQsZW5jb2RpbmdfdHlwZdpBCGRvY3VtZW50gtPkkwIiOgEqIh0vdjIvZG9jdW1lbnRzOmFuYWx5emVFbnRpdGllcxKfAQoMQ2xhc3NpZnlUZXh0Ei0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkNsYXNzaWZ5VGV4dFJlcXVlc3QaLi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuQ2xhc3NpZnlUZXh0UmVzcG9uc2UiMNpBCGRvY3VtZW50gtPkkwIfOgEqIhovdjIvZG9jdW1lbnRzOmNsYXNzaWZ5VGV4dBKfAQoMTW9kZXJhdGVUZXh0Ei0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLk1vZGVyYXRlVGV4dFJlcXVlc3QaLi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuTW9kZXJhdGVUZXh0UmVzcG9uc2UiMNpBCGRvY3VtZW50gtPkkwIfOgEqIhovdjIvZG9jdW1lbnRzOm1vZGVyYXRlVGV4dBLKAQoMQW5ub3RhdGVUZXh0Ei0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYyLkFubm90YXRlVGV4dFJlcXVlc3QaLi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjIuQW5ub3RhdGVUZXh0UmVzcG9uc2UiW9pBH2RvY3VtZW50LGZlYXR1cmVzLGVuY29kaW5nX3R5cGXaQRFkb2N1bWVudCxmZWF0dXJlc4LT5JMCHzoBKiIaL3YyL2RvY3VtZW50czphbm5vdGF0ZVRleHQaespBF2xhbmd1YWdlLmdvb2dsZWFwaXMuY29t0kFdaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1sYW5ndWFnZSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQnAKHGNvbS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjJCFExhbmd1YWdlU2VydmljZVByb3RvUAFaOGNsb3VkLmdvb2dsZS5jb20vZ28vbGFuZ3VhZ2UvYXBpdjIvbGFuZ3VhZ2VwYjtsYW5ndWFnZXBiYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior]);

/**
 * Represents the input to API methods.
 *
 * @generated from message google.cloud.language.v2.Document
 */
export type Document = Message<"google.cloud.language.v2.Document"> & {
  /**
   * Required. If the type is not set or is `TYPE_UNSPECIFIED`,
   * returns an `INVALID_ARGUMENT` error.
   *
   * @generated from field: google.cloud.language.v2.Document.Type type = 1;
   */
  type: Document_Type;

  /**
   * The source of the document: a string containing the content or a
   * Google Cloud Storage URI.
   *
   * @generated from oneof google.cloud.language.v2.Document.source
   */
  source: {
    /**
     * The content of the input in string format.
     * Cloud audit logging exempt since it is based on user data.
     *
     * @generated from field: string content = 2;
     */
    value: string;
    case: "content";
  } | {
    /**
     * The Google Cloud Storage URI where the file content is located.
     * This URI must be of the form: gs://bucket_name/object_name. For more
     * details, see https://cloud.google.com/storage/docs/reference-uris.
     * NOTE: Cloud Storage object versioning is not supported.
     *
     * @generated from field: string gcs_content_uri = 3;
     */
    value: string;
    case: "gcsContentUri";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. The language of the document (if not specified, the language is
   * automatically detected). Both ISO and BCP-47 language codes are
   * accepted.<br>
   * [Language
   * Support](https://cloud.google.com/natural-language/docs/languages) lists
   * currently supported languages for each API method. If the language (either
   * specified by the caller or automatically detected) is not supported by the
   * called API method, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.language.v2.Document.
 * Use `create(DocumentSchema)` to create a new message.
 */
export const DocumentSchema: GenMessage<Document> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 0);

/**
 * The document types enum.
 *
 * @generated from enum google.cloud.language.v2.Document.Type
 */
export enum Document_Type {
  /**
   * The content type is not specified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Plain text
   *
   * @generated from enum value: PLAIN_TEXT = 1;
   */
  PLAIN_TEXT = 1,

  /**
   * HTML
   *
   * @generated from enum value: HTML = 2;
   */
  HTML = 2,
}

/**
 * Describes the enum google.cloud.language.v2.Document.Type.
 */
export const Document_TypeSchema: GenEnum<Document_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v2_language_service, 0, 0);

/**
 * Represents a sentence in the input document.
 *
 * @generated from message google.cloud.language.v2.Sentence
 */
export type Sentence = Message<"google.cloud.language.v2.Sentence"> & {
  /**
   * The sentence text.
   *
   * @generated from field: google.cloud.language.v2.TextSpan text = 1;
   */
  text?: TextSpan;

  /**
   * For calls to [AnalyzeSentiment][] or if
   * [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_document_sentiment]
   * is set to true, this field will contain the sentiment for the sentence.
   *
   * @generated from field: google.cloud.language.v2.Sentiment sentiment = 2;
   */
  sentiment?: Sentiment;
};

/**
 * Describes the message google.cloud.language.v2.Sentence.
 * Use `create(SentenceSchema)` to create a new message.
 */
export const SentenceSchema: GenMessage<Sentence> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 1);

/**
 * Represents a phrase in the text that is a known entity, such as
 * a person, an organization, or location. The API associates information, such
 * as probability and mentions, with entities.
 *
 * @generated from message google.cloud.language.v2.Entity
 */
export type Entity = Message<"google.cloud.language.v2.Entity"> & {
  /**
   * The representative name for the entity.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The entity type.
   *
   * @generated from field: google.cloud.language.v2.Entity.Type type = 2;
   */
  type: Entity_Type;

  /**
   * Metadata associated with the entity.
   *
   * For the metadata
   * associated with other entity types, see the Type table below.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The mentions of this entity in the input document. The API currently
   * supports proper noun mentions.
   *
   * @generated from field: repeated google.cloud.language.v2.EntityMention mentions = 5;
   */
  mentions: EntityMention[];

  /**
   * For calls to [AnalyzeEntitySentiment][] or if
   * [AnnotateTextRequest.Features.extract_entity_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_entity_sentiment]
   * is set to true, this field will contain the aggregate sentiment expressed
   * for this entity in the provided document.
   *
   * @generated from field: google.cloud.language.v2.Sentiment sentiment = 6;
   */
  sentiment?: Sentiment;
};

/**
 * Describes the message google.cloud.language.v2.Entity.
 * Use `create(EntitySchema)` to create a new message.
 */
export const EntitySchema: GenMessage<Entity> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 2);

/**
 * The type of the entity. The table
 * below lists the associated fields for entities that have different
 * metadata.
 *
 * @generated from enum google.cloud.language.v2.Entity.Type
 */
export enum Entity_Type {
  /**
   * Unknown
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Person
   *
   * @generated from enum value: PERSON = 1;
   */
  PERSON = 1,

  /**
   * Location
   *
   * @generated from enum value: LOCATION = 2;
   */
  LOCATION = 2,

  /**
   * Organization
   *
   * @generated from enum value: ORGANIZATION = 3;
   */
  ORGANIZATION = 3,

  /**
   * Event
   *
   * @generated from enum value: EVENT = 4;
   */
  EVENT = 4,

  /**
   * Artwork
   *
   * @generated from enum value: WORK_OF_ART = 5;
   */
  WORK_OF_ART = 5,

  /**
   * Consumer product
   *
   * @generated from enum value: CONSUMER_GOOD = 6;
   */
  CONSUMER_GOOD = 6,

  /**
   * Other types of entities
   *
   * @generated from enum value: OTHER = 7;
   */
  OTHER = 7,

  /**
   * Phone number
   *
   * The metadata lists the phone number, formatted according to local
   * convention, plus whichever additional elements appear in the text:
   *
   * * `number` - the actual number, broken down into sections as per local
   * convention
   * * `national_prefix` - country code, if detected
   * * `area_code` - region or area code, if detected
   * * `extension` - phone extension (to be dialed after connection), if
   * detected
   *
   * @generated from enum value: PHONE_NUMBER = 9;
   */
  PHONE_NUMBER = 9,

  /**
   * Address
   *
   * The metadata identifies the street number and locality plus whichever
   * additional elements appear in the text:
   *
   * * `street_number` - street number
   * * `locality` - city or town
   * * `street_name` - street/route name, if detected
   * * `postal_code` - postal code, if detected
   * * `country` - country, if detected
   * * `broad_region` - administrative area, such as the state, if detected
   * * `narrow_region` - smaller administrative area, such as county, if
   * detected
   * * `sublocality` - used in Asian addresses to demark a district within a
   * city, if detected
   *
   * @generated from enum value: ADDRESS = 10;
   */
  ADDRESS = 10,

  /**
   * Date
   *
   * The metadata identifies the components of the date:
   *
   * * `year` - four digit year, if detected
   * * `month` - two digit month number, if detected
   * * `day` - two digit day number, if detected
   *
   * @generated from enum value: DATE = 11;
   */
  DATE = 11,

  /**
   * Number
   *
   * The metadata is the number itself.
   *
   * @generated from enum value: NUMBER = 12;
   */
  NUMBER = 12,

  /**
   * Price
   *
   * The metadata identifies the `value` and `currency`.
   *
   * @generated from enum value: PRICE = 13;
   */
  PRICE = 13,
}

/**
 * Describes the enum google.cloud.language.v2.Entity.Type.
 */
export const Entity_TypeSchema: GenEnum<Entity_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v2_language_service, 2, 0);

/**
 * Represents the feeling associated with the entire text or entities in
 * the text.
 *
 * @generated from message google.cloud.language.v2.Sentiment
 */
export type Sentiment = Message<"google.cloud.language.v2.Sentiment"> & {
  /**
   * A non-negative number in the [0, +inf) range, which represents
   * the absolute magnitude of sentiment regardless of score (positive or
   * negative).
   *
   * @generated from field: float magnitude = 1;
   */
  magnitude: number;

  /**
   * Sentiment score between -1.0 (negative sentiment) and 1.0
   * (positive sentiment).
   *
   * @generated from field: float score = 2;
   */
  score: number;
};

/**
 * Describes the message google.cloud.language.v2.Sentiment.
 * Use `create(SentimentSchema)` to create a new message.
 */
export const SentimentSchema: GenMessage<Sentiment> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 3);

/**
 * Represents a mention for an entity in the text. Currently, proper noun
 * mentions are supported.
 *
 * @generated from message google.cloud.language.v2.EntityMention
 */
export type EntityMention = Message<"google.cloud.language.v2.EntityMention"> & {
  /**
   * The mention text.
   *
   * @generated from field: google.cloud.language.v2.TextSpan text = 1;
   */
  text?: TextSpan;

  /**
   * The type of the entity mention.
   *
   * @generated from field: google.cloud.language.v2.EntityMention.Type type = 2;
   */
  type: EntityMention_Type;

  /**
   * For calls to [AnalyzeEntitySentiment][] or if
   * [AnnotateTextRequest.Features.extract_entity_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_entity_sentiment]
   * is set to true, this field will contain the sentiment expressed for this
   * mention of the entity in the provided document.
   *
   * @generated from field: google.cloud.language.v2.Sentiment sentiment = 3;
   */
  sentiment?: Sentiment;

  /**
   * Probability score associated with the entity.
   *
   * The score shows the probability of the entity mention being the entity
   * type. The score is in (0, 1] range.
   *
   * @generated from field: float probability = 4;
   */
  probability: number;
};

/**
 * Describes the message google.cloud.language.v2.EntityMention.
 * Use `create(EntityMentionSchema)` to create a new message.
 */
export const EntityMentionSchema: GenMessage<EntityMention> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 4);

/**
 * The supported types of mentions.
 *
 * @generated from enum google.cloud.language.v2.EntityMention.Type
 */
export enum EntityMention_Type {
  /**
   * Unknown
   *
   * @generated from enum value: TYPE_UNKNOWN = 0;
   */
  TYPE_UNKNOWN = 0,

  /**
   * Proper name
   *
   * @generated from enum value: PROPER = 1;
   */
  PROPER = 1,

  /**
   * Common noun (or noun compound)
   *
   * @generated from enum value: COMMON = 2;
   */
  COMMON = 2,
}

/**
 * Describes the enum google.cloud.language.v2.EntityMention.Type.
 */
export const EntityMention_TypeSchema: GenEnum<EntityMention_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v2_language_service, 4, 0);

/**
 * Represents a text span in the input document.
 *
 * @generated from message google.cloud.language.v2.TextSpan
 */
export type TextSpan = Message<"google.cloud.language.v2.TextSpan"> & {
  /**
   * The content of the text span, which is a substring of the document.
   *
   * @generated from field: string content = 1;
   */
  content: string;

  /**
   * The API calculates the beginning offset of the content in the original
   * document according to the
   * [EncodingType][google.cloud.language.v2.EncodingType] specified in the API
   * request.
   *
   * @generated from field: int32 begin_offset = 2;
   */
  beginOffset: number;
};

/**
 * Describes the message google.cloud.language.v2.TextSpan.
 * Use `create(TextSpanSchema)` to create a new message.
 */
export const TextSpanSchema: GenMessage<TextSpan> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 5);

/**
 * Represents a category returned from the text classifier.
 *
 * @generated from message google.cloud.language.v2.ClassificationCategory
 */
export type ClassificationCategory = Message<"google.cloud.language.v2.ClassificationCategory"> & {
  /**
   * The name of the category representing the document.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The classifier's confidence of the category. Number represents how certain
   * the classifier is that this category represents the given text.
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;

  /**
   * Optional. The classifier's severity of the category. This is only present
   * when the ModerateTextRequest.ModelVersion is set to MODEL_VERSION_2, and
   * the corresponding category has a severity score.
   *
   * @generated from field: float severity = 3;
   */
  severity: number;
};

/**
 * Describes the message google.cloud.language.v2.ClassificationCategory.
 * Use `create(ClassificationCategorySchema)` to create a new message.
 */
export const ClassificationCategorySchema: GenMessage<ClassificationCategory> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 6);

/**
 * The sentiment analysis request message.
 *
 * @generated from message google.cloud.language.v2.AnalyzeSentimentRequest
 */
export type AnalyzeSentimentRequest = Message<"google.cloud.language.v2.AnalyzeSentimentRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v2.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate sentence offsets.
   *
   * @generated from field: google.cloud.language.v2.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v2.AnalyzeSentimentRequest.
 * Use `create(AnalyzeSentimentRequestSchema)` to create a new message.
 */
export const AnalyzeSentimentRequestSchema: GenMessage<AnalyzeSentimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 7);

/**
 * The sentiment analysis response message.
 *
 * @generated from message google.cloud.language.v2.AnalyzeSentimentResponse
 */
export type AnalyzeSentimentResponse = Message<"google.cloud.language.v2.AnalyzeSentimentResponse"> & {
  /**
   * The overall sentiment of the input document.
   *
   * @generated from field: google.cloud.language.v2.Sentiment document_sentiment = 1;
   */
  documentSentiment?: Sentiment;

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][] field for more details.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * The sentiment for all the sentences in the document.
   *
   * @generated from field: repeated google.cloud.language.v2.Sentence sentences = 3;
   */
  sentences: Sentence[];

  /**
   * Whether the language is officially supported. The API may still return a
   * response when the language is not supported, but it is on a best effort
   * basis.
   *
   * @generated from field: bool language_supported = 4;
   */
  languageSupported: boolean;
};

/**
 * Describes the message google.cloud.language.v2.AnalyzeSentimentResponse.
 * Use `create(AnalyzeSentimentResponseSchema)` to create a new message.
 */
export const AnalyzeSentimentResponseSchema: GenMessage<AnalyzeSentimentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 8);

/**
 * The entity analysis request message.
 *
 * @generated from message google.cloud.language.v2.AnalyzeEntitiesRequest
 */
export type AnalyzeEntitiesRequest = Message<"google.cloud.language.v2.AnalyzeEntitiesRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v2.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v2.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v2.AnalyzeEntitiesRequest.
 * Use `create(AnalyzeEntitiesRequestSchema)` to create a new message.
 */
export const AnalyzeEntitiesRequestSchema: GenMessage<AnalyzeEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 9);

/**
 * The entity analysis response message.
 *
 * @generated from message google.cloud.language.v2.AnalyzeEntitiesResponse
 */
export type AnalyzeEntitiesResponse = Message<"google.cloud.language.v2.AnalyzeEntitiesResponse"> & {
  /**
   * The recognized entities in the input document.
   *
   * @generated from field: repeated google.cloud.language.v2.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][] field for more details.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * Whether the language is officially supported. The API may still return a
   * response when the language is not supported, but it is on a best effort
   * basis.
   *
   * @generated from field: bool language_supported = 3;
   */
  languageSupported: boolean;
};

/**
 * Describes the message google.cloud.language.v2.AnalyzeEntitiesResponse.
 * Use `create(AnalyzeEntitiesResponseSchema)` to create a new message.
 */
export const AnalyzeEntitiesResponseSchema: GenMessage<AnalyzeEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 10);

/**
 * The document classification request message.
 *
 * @generated from message google.cloud.language.v2.ClassifyTextRequest
 */
export type ClassifyTextRequest = Message<"google.cloud.language.v2.ClassifyTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v2.Document document = 1;
   */
  document?: Document;
};

/**
 * Describes the message google.cloud.language.v2.ClassifyTextRequest.
 * Use `create(ClassifyTextRequestSchema)` to create a new message.
 */
export const ClassifyTextRequestSchema: GenMessage<ClassifyTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 11);

/**
 * The document classification response message.
 *
 * @generated from message google.cloud.language.v2.ClassifyTextResponse
 */
export type ClassifyTextResponse = Message<"google.cloud.language.v2.ClassifyTextResponse"> & {
  /**
   * Categories representing the input document.
   *
   * @generated from field: repeated google.cloud.language.v2.ClassificationCategory categories = 1;
   */
  categories: ClassificationCategory[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][] field for more details.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * Whether the language is officially supported. The API may still return a
   * response when the language is not supported, but it is on a best effort
   * basis.
   *
   * @generated from field: bool language_supported = 3;
   */
  languageSupported: boolean;
};

/**
 * Describes the message google.cloud.language.v2.ClassifyTextResponse.
 * Use `create(ClassifyTextResponseSchema)` to create a new message.
 */
export const ClassifyTextResponseSchema: GenMessage<ClassifyTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 12);

/**
 * The document moderation request message.
 *
 * @generated from message google.cloud.language.v2.ModerateTextRequest
 */
export type ModerateTextRequest = Message<"google.cloud.language.v2.ModerateTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v2.Document document = 1;
   */
  document?: Document;

  /**
   * Optional. The model version to use for ModerateText.
   *
   * @generated from field: google.cloud.language.v2.ModerateTextRequest.ModelVersion model_version = 2;
   */
  modelVersion: ModerateTextRequest_ModelVersion;
};

/**
 * Describes the message google.cloud.language.v2.ModerateTextRequest.
 * Use `create(ModerateTextRequestSchema)` to create a new message.
 */
export const ModerateTextRequestSchema: GenMessage<ModerateTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 13);

/**
 * The model version to use for ModerateText.
 *
 * @generated from enum google.cloud.language.v2.ModerateTextRequest.ModelVersion
 */
export enum ModerateTextRequest_ModelVersion {
  /**
   * The default model version.
   *
   * @generated from enum value: MODEL_VERSION_UNSPECIFIED = 0;
   */
  MODEL_VERSION_UNSPECIFIED = 0,

  /**
   * Use the v1 model, this model is used by default when not provided.
   * The v1 model only returns probability (confidence) score for each
   * category.
   *
   * @generated from enum value: MODEL_VERSION_1 = 1;
   */
  MODEL_VERSION_1 = 1,

  /**
   * Use the v2 model.
   * The v2 model only returns probability (confidence) score for each
   * category, and returns severity score for a subset of the categories.
   *
   * @generated from enum value: MODEL_VERSION_2 = 2;
   */
  MODEL_VERSION_2 = 2,
}

/**
 * Describes the enum google.cloud.language.v2.ModerateTextRequest.ModelVersion.
 */
export const ModerateTextRequest_ModelVersionSchema: GenEnum<ModerateTextRequest_ModelVersion> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v2_language_service, 13, 0);

/**
 * The document moderation response message.
 *
 * @generated from message google.cloud.language.v2.ModerateTextResponse
 */
export type ModerateTextResponse = Message<"google.cloud.language.v2.ModerateTextResponse"> & {
  /**
   * Harmful and sensitive categories representing the input document.
   *
   * @generated from field: repeated google.cloud.language.v2.ClassificationCategory moderation_categories = 1;
   */
  moderationCategories: ClassificationCategory[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][] field for more details.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * Whether the language is officially supported. The API may still return a
   * response when the language is not supported, but it is on a best effort
   * basis.
   *
   * @generated from field: bool language_supported = 3;
   */
  languageSupported: boolean;
};

/**
 * Describes the message google.cloud.language.v2.ModerateTextResponse.
 * Use `create(ModerateTextResponseSchema)` to create a new message.
 */
export const ModerateTextResponseSchema: GenMessage<ModerateTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 14);

/**
 * The request message for the text annotation API, which can perform multiple
 * analysis types in one call.
 *
 * @generated from message google.cloud.language.v2.AnnotateTextRequest
 */
export type AnnotateTextRequest = Message<"google.cloud.language.v2.AnnotateTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v2.Document document = 1;
   */
  document?: Document;

  /**
   * Required. The enabled features.
   *
   * @generated from field: google.cloud.language.v2.AnnotateTextRequest.Features features = 2;
   */
  features?: AnnotateTextRequest_Features;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v2.EncodingType encoding_type = 3;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v2.AnnotateTextRequest.
 * Use `create(AnnotateTextRequestSchema)` to create a new message.
 */
export const AnnotateTextRequestSchema: GenMessage<AnnotateTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 15);

/**
 * All available features.
 * Setting each one to true will enable that specific analysis for the input.
 *
 * @generated from message google.cloud.language.v2.AnnotateTextRequest.Features
 */
export type AnnotateTextRequest_Features = Message<"google.cloud.language.v2.AnnotateTextRequest.Features"> & {
  /**
   * Optional. Extract entities.
   *
   * @generated from field: bool extract_entities = 1;
   */
  extractEntities: boolean;

  /**
   * Optional. Extract document-level sentiment.
   *
   * @generated from field: bool extract_document_sentiment = 2;
   */
  extractDocumentSentiment: boolean;

  /**
   * Optional. Classify the full document into categories.
   *
   * @generated from field: bool classify_text = 4;
   */
  classifyText: boolean;

  /**
   * Optional. Moderate the document for harmful and sensitive categories.
   *
   * @generated from field: bool moderate_text = 5;
   */
  moderateText: boolean;
};

/**
 * Describes the message google.cloud.language.v2.AnnotateTextRequest.Features.
 * Use `create(AnnotateTextRequest_FeaturesSchema)` to create a new message.
 */
export const AnnotateTextRequest_FeaturesSchema: GenMessage<AnnotateTextRequest_Features> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 15, 0);

/**
 * The text annotations response message.
 *
 * @generated from message google.cloud.language.v2.AnnotateTextResponse
 */
export type AnnotateTextResponse = Message<"google.cloud.language.v2.AnnotateTextResponse"> & {
  /**
   * Sentences in the input document. Populated if the user enables
   * [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_document_sentiment].
   *
   * @generated from field: repeated google.cloud.language.v2.Sentence sentences = 1;
   */
  sentences: Sentence[];

  /**
   * Entities, along with their semantic information, in the input document.
   * Populated if the user enables
   * [AnnotateTextRequest.Features.extract_entities][google.cloud.language.v2.AnnotateTextRequest.Features.extract_entities]
   * or
   * [AnnotateTextRequest.Features.extract_entity_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_entity_sentiment].
   *
   * @generated from field: repeated google.cloud.language.v2.Entity entities = 2;
   */
  entities: Entity[];

  /**
   * The overall sentiment for the document. Populated if the user enables
   * [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v2.AnnotateTextRequest.Features.extract_document_sentiment].
   *
   * @generated from field: google.cloud.language.v2.Sentiment document_sentiment = 3;
   */
  documentSentiment?: Sentiment;

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][] field for more details.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;

  /**
   * Categories identified in the input document.
   *
   * @generated from field: repeated google.cloud.language.v2.ClassificationCategory categories = 5;
   */
  categories: ClassificationCategory[];

  /**
   * Harmful and sensitive categories identified in the input document.
   *
   * @generated from field: repeated google.cloud.language.v2.ClassificationCategory moderation_categories = 6;
   */
  moderationCategories: ClassificationCategory[];

  /**
   * Whether the language is officially supported by all requested features.
   * The API may still return a response when the language is not supported, but
   * it is on a best effort basis.
   *
   * @generated from field: bool language_supported = 7;
   */
  languageSupported: boolean;
};

/**
 * Describes the message google.cloud.language.v2.AnnotateTextResponse.
 * Use `create(AnnotateTextResponseSchema)` to create a new message.
 */
export const AnnotateTextResponseSchema: GenMessage<AnnotateTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v2_language_service, 16);

/**
 * Represents the text encoding that the caller uses to process the output.
 * Providing an `EncodingType` is recommended because the API provides the
 * beginning offsets for various outputs, such as tokens and mentions, and
 * languages that natively use different text encodings may access offsets
 * differently.
 *
 * @generated from enum google.cloud.language.v2.EncodingType
 */
export enum EncodingType {
  /**
   * If `EncodingType` is not specified, encoding-dependent information (such as
   * `begin_offset`) will be set at `-1`.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-8 encoding of the input. C++ and Go are examples of languages
   * that use this encoding natively.
   *
   * @generated from enum value: UTF8 = 1;
   */
  UTF8 = 1,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-16 encoding of the input. Java and JavaScript are examples of
   * languages that use this encoding natively.
   *
   * @generated from enum value: UTF16 = 2;
   */
  UTF16 = 2,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-32 encoding of the input. Python is an example of a language
   * that uses this encoding natively.
   *
   * @generated from enum value: UTF32 = 3;
   */
  UTF32 = 3,
}

/**
 * Describes the enum google.cloud.language.v2.EncodingType.
 */
export const EncodingTypeSchema: GenEnum<EncodingType> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v2_language_service, 0);

/**
 * Provides text analysis operations such as sentiment analysis and entity
 * recognition.
 *
 * @generated from service google.cloud.language.v2.LanguageService
 */
export const LanguageService: GenService<{
  /**
   * Analyzes the sentiment of the provided text.
   *
   * @generated from rpc google.cloud.language.v2.LanguageService.AnalyzeSentiment
   */
  analyzeSentiment: {
    methodKind: "unary";
    input: typeof AnalyzeSentimentRequestSchema;
    output: typeof AnalyzeSentimentResponseSchema;
  },
  /**
   * Finds named entities (currently proper names and common nouns) in the text
   * along with entity types, probability, mentions for each entity, and
   * other properties.
   *
   * @generated from rpc google.cloud.language.v2.LanguageService.AnalyzeEntities
   */
  analyzeEntities: {
    methodKind: "unary";
    input: typeof AnalyzeEntitiesRequestSchema;
    output: typeof AnalyzeEntitiesResponseSchema;
  },
  /**
   * Classifies a document into categories.
   *
   * @generated from rpc google.cloud.language.v2.LanguageService.ClassifyText
   */
  classifyText: {
    methodKind: "unary";
    input: typeof ClassifyTextRequestSchema;
    output: typeof ClassifyTextResponseSchema;
  },
  /**
   * Moderates a document for harmful and sensitive categories.
   *
   * @generated from rpc google.cloud.language.v2.LanguageService.ModerateText
   */
  moderateText: {
    methodKind: "unary";
    input: typeof ModerateTextRequestSchema;
    output: typeof ModerateTextResponseSchema;
  },
  /**
   * A convenience method that provides all features in one call.
   *
   * @generated from rpc google.cloud.language.v2.LanguageService.AnnotateText
   */
  annotateText: {
    methodKind: "unary";
    input: typeof AnnotateTextRequestSchema;
    output: typeof AnnotateTextResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_language_v2_language_service, 0);

