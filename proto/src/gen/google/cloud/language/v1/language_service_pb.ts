// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/language/v1/language_service.proto (package google.cloud.language.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/language/v1/language_service.proto.
 */
export const file_google_cloud_language_v1_language_service: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvY2xvdWQvbGFuZ3VhZ2UvdjEvbGFuZ3VhZ2Vfc2VydmljZS5wcm90bxIYZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxIsMBCghEb2N1bWVudBI1CgR0eXBlGAEgASgOMicuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkRvY3VtZW50LlR5cGUSEQoHY29udGVudBgCIAEoCUgAEhkKD2djc19jb250ZW50X3VyaRgDIAEoCUgAEhAKCGxhbmd1YWdlGAQgASgJIjYKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEg4KClBMQUlOX1RFWFQQARIICgRIVE1MEAJCCAoGc291cmNlInQKCFNlbnRlbmNlEjAKBHRleHQYASABKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuVGV4dFNwYW4SNgoJc2VudGltZW50GAIgASgLMiMuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlNlbnRpbWVudCL/AwoGRW50aXR5EgwKBG5hbWUYASABKAkSMwoEdHlwZRgCIAEoDjIlLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHkuVHlwZRJACghtZXRhZGF0YRgDIAMoCzIuLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHkuTWV0YWRhdGFFbnRyeRIQCghzYWxpZW5jZRgEIAEoAhI5CghtZW50aW9ucxgFIAMoCzInLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHlNZW50aW9uEjYKCXNlbnRpbWVudBgGIAEoCzIjLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5TZW50aW1lbnQaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIrkBCgRUeXBlEgsKB1VOS05PV04QABIKCgZQRVJTT04QARIMCghMT0NBVElPThACEhAKDE9SR0FOSVpBVElPThADEgkKBUVWRU5UEAQSDwoLV09SS19PRl9BUlQQBRIRCg1DT05TVU1FUl9HT09EEAYSCQoFT1RIRVIQBxIQCgxQSE9ORV9OVU1CRVIQCRILCgdBRERSRVNTEAoSCAoEREFURRALEgoKBk5VTUJFUhAMEgkKBVBSSUNFEA0iywEKBVRva2VuEjAKBHRleHQYASABKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuVGV4dFNwYW4SPgoOcGFydF9vZl9zcGVlY2gYAiABKAsyJi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuUGFydE9mU3BlZWNoEkEKD2RlcGVuZGVuY3lfZWRnZRgDIAEoCzIoLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5EZXBlbmRlbmN5RWRnZRINCgVsZW1tYRgEIAEoCSItCglTZW50aW1lbnQSEQoJbWFnbml0dWRlGAIgASgCEg0KBXNjb3JlGAMgASgCIqMQCgxQYXJ0T2ZTcGVlY2gSNwoDdGFnGAEgASgOMiouZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5UYWcSPQoGYXNwZWN0GAIgASgOMi0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5Bc3BlY3QSOQoEY2FzZRgDIAEoDjIrLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5QYXJ0T2ZTcGVlY2guQ2FzZRI5CgRmb3JtGAQgASgOMisuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5Gb3JtEj0KBmdlbmRlchgFIAEoDjItLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5QYXJ0T2ZTcGVlY2guR2VuZGVyEjkKBG1vb2QYBiABKA4yKy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuUGFydE9mU3BlZWNoLk1vb2QSPQoGbnVtYmVyGAcgASgOMi0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5OdW1iZXISPQoGcGVyc29uGAggASgOMi0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5QZXJzb24SPQoGcHJvcGVyGAkgASgOMi0uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5Qcm9wZXISRwoLcmVjaXByb2NpdHkYCiABKA4yMi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuUGFydE9mU3BlZWNoLlJlY2lwcm9jaXR5EjsKBXRlbnNlGAsgASgOMiwuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlBhcnRPZlNwZWVjaC5UZW5zZRI7CgV2b2ljZRgMIAEoDjIsLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5QYXJ0T2ZTcGVlY2guVm9pY2UijQEKA1RhZxILCgdVTktOT1dOEAASBwoDQURKEAESBwoDQURQEAISBwoDQURWEAMSCAoEQ09OShAEEgcKA0RFVBAFEggKBE5PVU4QBhIHCgNOVU0QBxIICgRQUk9OEAgSBwoDUFJUEAkSCQoFUFVOQ1QQChIICgRWRVJCEAsSBQoBWBAMEgkKBUFGRklYEA0iTwoGQXNwZWN0EhIKDkFTUEVDVF9VTktOT1dOEAASDgoKUEVSRkVDVElWRRABEhAKDElNUEVSRkVDVElWRRACEg8KC1BST0dSRVNTSVZFEAMi+AEKBENhc2USEAoMQ0FTRV9VTktOT1dOEAASDgoKQUNDVVNBVElWRRABEg0KCUFEVkVSQklBTBACEhEKDUNPTVBMRU1FTlRJVkUQAxIKCgZEQVRJVkUQBBIMCghHRU5JVElWRRAFEhAKDElOU1RSVU1FTlRBTBAGEgwKCExPQ0FUSVZFEAcSDgoKTk9NSU5BVElWRRAIEgsKB09CTElRVUUQCRINCglQQVJUSVRJVkUQChIRCg1QUkVQT1NJVElPTkFMEAsSEgoOUkVGTEVYSVZFX0NBU0UQDBIRCg1SRUxBVElWRV9DQVNFEA0SDAoIVk9DQVRJVkUQDiKvAQoERm9ybRIQCgxGT1JNX1VOS05PV04QABIMCghBRE5PTUlBTBABEg0KCUFVWElMSUFSWRACEhIKDkNPTVBMRU1FTlRJWkVSEAMSEAoMRklOQUxfRU5ESU5HEAQSCgoGR0VSVU5EEAUSCgoGUkVBTElTEAYSDAoISVJSRUFMSVMQBxIJCgVTSE9SVBAIEggKBExPTkcQCRIJCgVPUkRFUhAKEgwKCFNQRUNJRklDEAsiRQoGR2VuZGVyEhIKDkdFTkRFUl9VTktOT1dOEAASDAoIRkVNSU5JTkUQARINCglNQVNDVUxJTkUQAhIKCgZORVVURVIQAyJ/CgRNb29kEhAKDE1PT0RfVU5LTk9XThAAEhQKEENPTkRJVElPTkFMX01PT0QQARIOCgpJTVBFUkFUSVZFEAISDgoKSU5ESUNBVElWRRADEhEKDUlOVEVSUk9HQVRJVkUQBBILCgdKVVNTSVZFEAUSDwoLU1VCSlVOQ1RJVkUQBiJACgZOdW1iZXISEgoOTlVNQkVSX1VOS05PV04QABIMCghTSU5HVUxBUhABEgoKBlBMVVJBTBACEggKBERVQUwQAyJUCgZQZXJzb24SEgoOUEVSU09OX1VOS05PV04QABIJCgVGSVJTVBABEgoKBlNFQ09ORBACEgkKBVRISVJEEAMSFAoQUkVGTEVYSVZFX1BFUlNPThAEIjgKBlByb3BlchISCg5QUk9QRVJfVU5LTk9XThAAEgoKBlBST1BFUhABEg4KCk5PVF9QUk9QRVIQAiJKCgtSZWNpcHJvY2l0eRIXChNSRUNJUFJPQ0lUWV9VTktOT1dOEAASDgoKUkVDSVBST0NBTBABEhIKDk5PTl9SRUNJUFJPQ0FMEAIicwoFVGVuc2USEQoNVEVOU0VfVU5LTk9XThAAEhUKEUNPTkRJVElPTkFMX1RFTlNFEAESCgoGRlVUVVJFEAISCAoEUEFTVBADEgsKB1BSRVNFTlQQBBINCglJTVBFUkZFQ1QQBRIOCgpQTFVQRVJGRUNUEAYiQgoFVm9pY2USEQoNVk9JQ0VfVU5LTk9XThAAEgoKBkFDVElWRRABEg0KCUNBVVNBVElWRRACEgsKB1BBU1NJVkUQAyKVCAoORGVwZW5kZW5jeUVkZ2USGAoQaGVhZF90b2tlbl9pbmRleBgBIAEoBRI9CgVsYWJlbBgCIAEoDjIuLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5EZXBlbmRlbmN5RWRnZS5MYWJlbCKpBwoFTGFiZWwSCwoHVU5LTk9XThAAEgoKBkFCQlJFVhABEgkKBUFDT01QEAISCQoFQURWQ0wQAxIKCgZBRFZNT0QQBBIICgRBTU9EEAUSCQoFQVBQT1MQBhIICgRBVFRSEAcSBwoDQVVYEAgSCwoHQVVYUEFTUxAJEgYKAkNDEAoSCQoFQ0NPTVAQCxIICgRDT05KEAwSCQoFQ1NVQkoQDRINCglDU1VCSlBBU1MQDhIHCgNERVAQDxIHCgNERVQQEBINCglESVNDT1VSU0UQERIICgRET0JKEBISCAoERVhQTBATEgwKCEdPRVNXSVRIEBQSCAoESU9CShAVEggKBE1BUksQFhIHCgNNV0UQFxIHCgNNV1YQGBIHCgNORUcQGRIGCgJOThAaEgwKCE5QQURWTU9EEBsSCQoFTlNVQkoQHBINCglOU1VCSlBBU1MQHRIHCgNOVU0QHhIKCgZOVU1CRVIQHxIFCgFQECASDQoJUEFSQVRBWElTECESCwoHUEFSVE1PRBAiEgkKBVBDT01QECMSCAoEUE9CShAkEggKBFBPU1MQJRILCgdQT1NUTkVHECYSCwoHUFJFQ09NUBAnEgsKB1BSRUNPTkoQKBIKCgZQUkVERVQQKRIICgRQUkVGECoSCAoEUFJFUBArEgkKBVBST05MECwSBwoDUFJUEC0SBgoCUFMQLhIMCghRVUFOVE1PRBAvEgkKBVJDTU9EEDASDAoIUkNNT0RSRUwQMRIJCgVSRFJPUBAyEgcKA1JFRhAzEgsKB1JFTU5BTlQQNBIOCgpSRVBBUkFORFVNEDUSCAoEUk9PVBA2EggKBFNOVU0QNxIICgRTVUZGEDgSCAoEVE1PRBA5EgkKBVRPUElDEDoSCAoEVk1PRBA7EgwKCFZPQ0FUSVZFEDwSCQoFWENPTVAQPRIKCgZTVUZGSVgQPhIJCgVUSVRMRRA/EgwKCEFEVlBITU9EEEASCwoHQVVYQ0FVUxBBEgkKBUFVWFZWEEISCQoFRFRNT0QQQxILCgdGT1JFSUdOEEQSBgoCS1cQRRIICgRMSVNUEEYSCAoETk9NQxBHEgwKCE5PTUNTVUJKEEgSEAoMTk9NQ1NVQkpQQVNTEEkSCAoETlVNQxBKEgcKA0NPUBBLEg4KCkRJU0xPQ0FURUQQTBIHCgNBU1AQTRIICgRHTU9EEE4SCAoER09CShBPEgoKBklORk1PRBBQEgcKA01FUxBREgkKBU5DT01QEFIi5wEKDUVudGl0eU1lbnRpb24SMAoEdGV4dBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5UZXh0U3BhbhI6CgR0eXBlGAIgASgOMiwuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkVudGl0eU1lbnRpb24uVHlwZRI2CglzZW50aW1lbnQYAyABKAsyIy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuU2VudGltZW50IjAKBFR5cGUSEAoMVFlQRV9VTktOT1dOEAASCgoGUFJPUEVSEAESCgoGQ09NTU9OEAIiMQoIVGV4dFNwYW4SDwoHY29udGVudBgBIAEoCRIUCgxiZWdpbl9vZmZzZXQYAiABKAUiOgoWQ2xhc3NpZmljYXRpb25DYXRlZ29yeRIMCgRuYW1lGAEgASgJEhIKCmNvbmZpZGVuY2UYAiABKAIiuAMKGkNsYXNzaWZpY2F0aW9uTW9kZWxPcHRpb25zElAKCHYxX21vZGVsGAEgASgLMjwuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkNsYXNzaWZpY2F0aW9uTW9kZWxPcHRpb25zLlYxTW9kZWxIABJQCgh2Ml9tb2RlbBgCIAEoCzI8Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmaWNhdGlvbk1vZGVsT3B0aW9ucy5WMk1vZGVsSAAaCQoHVjFNb2RlbBrcAQoHVjJNb2RlbBJ5Chpjb250ZW50X2NhdGVnb3JpZXNfdmVyc2lvbhgBIAEoDjJVLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmaWNhdGlvbk1vZGVsT3B0aW9ucy5WMk1vZGVsLkNvbnRlbnRDYXRlZ29yaWVzVmVyc2lvbiJWChhDb250ZW50Q2F0ZWdvcmllc1ZlcnNpb24SKgomQ09OVEVOVF9DQVRFR09SSUVTX1ZFUlNJT05fVU5TUEVDSUZJRUQQABIGCgJWMRABEgYKAlYyEAJCDAoKbW9kZWxfdHlwZSKTAQoXQW5hbHl6ZVNlbnRpbWVudFJlcXVlc3QSOQoIZG9jdW1lbnQYASABKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuRG9jdW1lbnRCA+BBAhI9Cg1lbmNvZGluZ190eXBlGAIgASgOMiYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkVuY29kaW5nVHlwZSKkAQoYQW5hbHl6ZVNlbnRpbWVudFJlc3BvbnNlEj8KEmRvY3VtZW50X3NlbnRpbWVudBgBIAEoCzIjLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5TZW50aW1lbnQSEAoIbGFuZ3VhZ2UYAiABKAkSNQoJc2VudGVuY2VzGAMgAygLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlNlbnRlbmNlIpkBCh1BbmFseXplRW50aXR5U2VudGltZW50UmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5Eb2N1bWVudEID4EECEj0KDWVuY29kaW5nX3R5cGUYAiABKA4yJi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuRW5jb2RpbmdUeXBlImYKHkFuYWx5emVFbnRpdHlTZW50aW1lbnRSZXNwb25zZRIyCghlbnRpdGllcxgBIAMoCzIgLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHkSEAoIbGFuZ3VhZ2UYAiABKAkikgEKFkFuYWx5emVFbnRpdGllc1JlcXVlc3QSOQoIZG9jdW1lbnQYASABKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuRG9jdW1lbnRCA+BBAhI9Cg1lbmNvZGluZ190eXBlGAIgASgOMiYuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkVuY29kaW5nVHlwZSJfChdBbmFseXplRW50aXRpZXNSZXNwb25zZRIyCghlbnRpdGllcxgBIAMoCzIgLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHkSEAoIbGFuZ3VhZ2UYAiABKAkikAEKFEFuYWx5emVTeW50YXhSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkRvY3VtZW50QgPgQQISPQoNZW5jb2RpbmdfdHlwZRgCIAEoDjImLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbmNvZGluZ1R5cGUikQEKFUFuYWx5emVTeW50YXhSZXNwb25zZRI1CglzZW50ZW5jZXMYASADKAsyIi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuU2VudGVuY2USLwoGdG9rZW5zGAIgAygLMh8uZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlRva2VuEhAKCGxhbmd1YWdlGAMgASgJIqwBChNDbGFzc2lmeVRleHRSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkRvY3VtZW50QgPgQQISWgocY2xhc3NpZmljYXRpb25fbW9kZWxfb3B0aW9ucxgDIAEoCzI0Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmaWNhdGlvbk1vZGVsT3B0aW9ucyJcChRDbGFzc2lmeVRleHRSZXNwb25zZRJECgpjYXRlZ29yaWVzGAEgAygLMjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnkiUAoTTW9kZXJhdGVUZXh0UmVxdWVzdBI5Cghkb2N1bWVudBgBIAEoCzIiLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5Eb2N1bWVudEID4EECImcKFE1vZGVyYXRlVGV4dFJlc3BvbnNlEk8KFW1vZGVyYXRpb25fY2F0ZWdvcmllcxgBIAMoCzIwLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmaWNhdGlvbkNhdGVnb3J5Iu0DChNBbm5vdGF0ZVRleHRSZXF1ZXN0EjkKCGRvY3VtZW50GAEgASgLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkRvY3VtZW50QgPgQQISTQoIZmVhdHVyZXMYAiABKAsyNi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5ub3RhdGVUZXh0UmVxdWVzdC5GZWF0dXJlc0ID4EECEj0KDWVuY29kaW5nX3R5cGUYAyABKA4yJi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuRW5jb2RpbmdUeXBlGowCCghGZWF0dXJlcxIWCg5leHRyYWN0X3N5bnRheBgBIAEoCBIYChBleHRyYWN0X2VudGl0aWVzGAIgASgIEiIKGmV4dHJhY3RfZG9jdW1lbnRfc2VudGltZW50GAMgASgIEiAKGGV4dHJhY3RfZW50aXR5X3NlbnRpbWVudBgEIAEoCBIVCg1jbGFzc2lmeV90ZXh0GAYgASgIEhUKDW1vZGVyYXRlX3RleHQYCyABKAgSWgocY2xhc3NpZmljYXRpb25fbW9kZWxfb3B0aW9ucxgKIAEoCzI0Lmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmaWNhdGlvbk1vZGVsT3B0aW9ucyKcAwoUQW5ub3RhdGVUZXh0UmVzcG9uc2USNQoJc2VudGVuY2VzGAEgAygLMiIuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlNlbnRlbmNlEi8KBnRva2VucxgCIAMoCzIfLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5Ub2tlbhIyCghlbnRpdGllcxgDIAMoCzIgLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5FbnRpdHkSPwoSZG9jdW1lbnRfc2VudGltZW50GAQgASgLMiMuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLlNlbnRpbWVudBIQCghsYW5ndWFnZRgFIAEoCRJECgpjYXRlZ29yaWVzGAYgAygLMjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnkSTwoVbW9kZXJhdGlvbl9jYXRlZ29yaWVzGAcgAygLMjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkNsYXNzaWZpY2F0aW9uQ2F0ZWdvcnkqOAoMRW5jb2RpbmdUeXBlEggKBE5PTkUQABIICgRVVEY4EAESCQoFVVRGMTYQAhIJCgVVVEYzMhADMtILCg9MYW5ndWFnZVNlcnZpY2USyAEKEEFuYWx5emVTZW50aW1lbnQSMS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5hbHl6ZVNlbnRpbWVudFJlcXVlc3QaMi5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5hbHl6ZVNlbnRpbWVudFJlc3BvbnNlIk3aQRZkb2N1bWVudCxlbmNvZGluZ190eXBl2kEIZG9jdW1lbnSC0+STAiM6ASoiHi92MS9kb2N1bWVudHM6YW5hbHl6ZVNlbnRpbWVudBLEAQoPQW5hbHl6ZUVudGl0aWVzEjAuZ29vZ2xlLmNsb3VkLmxhbmd1YWdlLnYxLkFuYWx5emVFbnRpdGllc1JlcXVlc3QaMS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5hbHl6ZUVudGl0aWVzUmVzcG9uc2UiTNpBFmRvY3VtZW50LGVuY29kaW5nX3R5cGXaQQhkb2N1bWVudILT5JMCIjoBKiIdL3YxL2RvY3VtZW50czphbmFseXplRW50aXRpZXMS4AEKFkFuYWx5emVFbnRpdHlTZW50aW1lbnQSNy5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5hbHl6ZUVudGl0eVNlbnRpbWVudFJlcXVlc3QaOC5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5hbHl6ZUVudGl0eVNlbnRpbWVudFJlc3BvbnNlIlPaQRZkb2N1bWVudCxlbmNvZGluZ190eXBl2kEIZG9jdW1lbnSC0+STAik6ASoiJC92MS9kb2N1bWVudHM6YW5hbHl6ZUVudGl0eVNlbnRpbWVudBK8AQoNQW5hbHl6ZVN5bnRheBIuLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5BbmFseXplU3ludGF4UmVxdWVzdBovLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5BbmFseXplU3ludGF4UmVzcG9uc2UiStpBFmRvY3VtZW50LGVuY29kaW5nX3R5cGXaQQhkb2N1bWVudILT5JMCIDoBKiIbL3YxL2RvY3VtZW50czphbmFseXplU3ludGF4Ep8BCgxDbGFzc2lmeVRleHQSLS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQ2xhc3NpZnlUZXh0UmVxdWVzdBouLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5DbGFzc2lmeVRleHRSZXNwb25zZSIw2kEIZG9jdW1lbnSC0+STAh86ASoiGi92MS9kb2N1bWVudHM6Y2xhc3NpZnlUZXh0Ep8BCgxNb2RlcmF0ZVRleHQSLS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuTW9kZXJhdGVUZXh0UmVxdWVzdBouLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5Nb2RlcmF0ZVRleHRSZXNwb25zZSIw2kEIZG9jdW1lbnSC0+STAh86ASoiGi92MS9kb2N1bWVudHM6bW9kZXJhdGVUZXh0EsoBCgxBbm5vdGF0ZVRleHQSLS5nb29nbGUuY2xvdWQubGFuZ3VhZ2UudjEuQW5ub3RhdGVUZXh0UmVxdWVzdBouLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MS5Bbm5vdGF0ZVRleHRSZXNwb25zZSJb2kEfZG9jdW1lbnQsZmVhdHVyZXMsZW5jb2RpbmdfdHlwZdpBEWRvY3VtZW50LGZlYXR1cmVzgtPkkwIfOgEqIhovdjEvZG9jdW1lbnRzOmFubm90YXRlVGV4dBp6ykEXbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb23SQV1odHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLWxhbmd1YWdlLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1CcAocY29tLmdvb2dsZS5jbG91ZC5sYW5ndWFnZS52MUIUTGFuZ3VhZ2VTZXJ2aWNlUHJvdG9QAVo4Y2xvdWQuZ29vZ2xlLmNvbS9nby9sYW5ndWFnZS9hcGl2MS9sYW5ndWFnZXBiO2xhbmd1YWdlcGJiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior]);

/**
 * Represents the input to API methods.
 *
 * @generated from message google.cloud.language.v1.Document
 */
export type Document = Message<"google.cloud.language.v1.Document"> & {
  /**
   * Required. If the type is not set or is `TYPE_UNSPECIFIED`,
   * returns an `INVALID_ARGUMENT` error.
   *
   * @generated from field: google.cloud.language.v1.Document.Type type = 1;
   */
  type: Document_Type;

  /**
   * The source of the document: a string containing the content or a
   * Google Cloud Storage URI.
   *
   * @generated from oneof google.cloud.language.v1.Document.source
   */
  source: {
    /**
     * The content of the input in string format.
     * Cloud audit logging exempt since it is based on user data.
     *
     * @generated from field: string content = 2;
     */
    value: string;
    case: "content";
  } | {
    /**
     * The Google Cloud Storage URI where the file content is located.
     * This URI must be of the form: gs://bucket_name/object_name. For more
     * details, see https://cloud.google.com/storage/docs/reference-uris.
     * NOTE: Cloud Storage object versioning is not supported.
     *
     * @generated from field: string gcs_content_uri = 3;
     */
    value: string;
    case: "gcsContentUri";
  } | { case: undefined; value?: undefined };

  /**
   * The language of the document (if not specified, the language is
   * automatically detected). Both ISO and BCP-47 language codes are
   * accepted.<br>
   * [Language
   * Support](https://cloud.google.com/natural-language/docs/languages) lists
   * currently supported languages for each API method. If the language (either
   * specified by the caller or automatically detected) is not supported by the
   * called API method, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string language = 4;
   */
  language: string;
};

/**
 * Describes the message google.cloud.language.v1.Document.
 * Use `create(DocumentSchema)` to create a new message.
 */
export const DocumentSchema: GenMessage<Document> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 0);

/**
 * The document types enum.
 *
 * @generated from enum google.cloud.language.v1.Document.Type
 */
export enum Document_Type {
  /**
   * The content type is not specified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Plain text
   *
   * @generated from enum value: PLAIN_TEXT = 1;
   */
  PLAIN_TEXT = 1,

  /**
   * HTML
   *
   * @generated from enum value: HTML = 2;
   */
  HTML = 2,
}

/**
 * Describes the enum google.cloud.language.v1.Document.Type.
 */
export const Document_TypeSchema: GenEnum<Document_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 0, 0);

/**
 * Represents a sentence in the input document.
 *
 * @generated from message google.cloud.language.v1.Sentence
 */
export type Sentence = Message<"google.cloud.language.v1.Sentence"> & {
  /**
   * The sentence text.
   *
   * @generated from field: google.cloud.language.v1.TextSpan text = 1;
   */
  text?: TextSpan;

  /**
   * For calls to [AnalyzeSentiment][] or if
   * [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment]
   * is set to true, this field will contain the sentiment for the sentence.
   *
   * @generated from field: google.cloud.language.v1.Sentiment sentiment = 2;
   */
  sentiment?: Sentiment;
};

/**
 * Describes the message google.cloud.language.v1.Sentence.
 * Use `create(SentenceSchema)` to create a new message.
 */
export const SentenceSchema: GenMessage<Sentence> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 1);

/**
 * Represents a phrase in the text that is a known entity, such as
 * a person, an organization, or location. The API associates information, such
 * as salience and mentions, with entities.
 *
 * @generated from message google.cloud.language.v1.Entity
 */
export type Entity = Message<"google.cloud.language.v1.Entity"> & {
  /**
   * The representative name for the entity.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The entity type.
   *
   * @generated from field: google.cloud.language.v1.Entity.Type type = 2;
   */
  type: Entity_Type;

  /**
   * Metadata associated with the entity.
   *
   * For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`)
   * and Knowledge Graph MID (`mid`), if they are available. For the metadata
   * associated with other entity types, see the Type table below.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The salience score associated with the entity in the [0, 1.0] range.
   *
   * The salience score for an entity provides information about the
   * importance or centrality of that entity to the entire document text.
   * Scores closer to 0 are less salient, while scores closer to 1.0 are highly
   * salient.
   *
   * @generated from field: float salience = 4;
   */
  salience: number;

  /**
   * The mentions of this entity in the input document. The API currently
   * supports proper noun mentions.
   *
   * @generated from field: repeated google.cloud.language.v1.EntityMention mentions = 5;
   */
  mentions: EntityMention[];

  /**
   * For calls to [AnalyzeEntitySentiment][] or if
   * [AnnotateTextRequest.Features.extract_entity_sentiment][google.cloud.language.v1.AnnotateTextRequest.Features.extract_entity_sentiment]
   * is set to true, this field will contain the aggregate sentiment expressed
   * for this entity in the provided document.
   *
   * @generated from field: google.cloud.language.v1.Sentiment sentiment = 6;
   */
  sentiment?: Sentiment;
};

/**
 * Describes the message google.cloud.language.v1.Entity.
 * Use `create(EntitySchema)` to create a new message.
 */
export const EntitySchema: GenMessage<Entity> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 2);

/**
 * The type of the entity. For most entity types, the associated metadata is a
 * Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`). The table
 * below lists the associated fields for entities that have different
 * metadata.
 *
 * @generated from enum google.cloud.language.v1.Entity.Type
 */
export enum Entity_Type {
  /**
   * Unknown
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Person
   *
   * @generated from enum value: PERSON = 1;
   */
  PERSON = 1,

  /**
   * Location
   *
   * @generated from enum value: LOCATION = 2;
   */
  LOCATION = 2,

  /**
   * Organization
   *
   * @generated from enum value: ORGANIZATION = 3;
   */
  ORGANIZATION = 3,

  /**
   * Event
   *
   * @generated from enum value: EVENT = 4;
   */
  EVENT = 4,

  /**
   * Artwork
   *
   * @generated from enum value: WORK_OF_ART = 5;
   */
  WORK_OF_ART = 5,

  /**
   * Consumer product
   *
   * @generated from enum value: CONSUMER_GOOD = 6;
   */
  CONSUMER_GOOD = 6,

  /**
   * Other types of entities
   *
   * @generated from enum value: OTHER = 7;
   */
  OTHER = 7,

  /**
   * Phone number
   *
   * The metadata lists the phone number, formatted according to local
   * convention, plus whichever additional elements appear in the text:
   *
   * * `number` - the actual number, broken down into sections as per local
   * convention
   * * `national_prefix` - country code, if detected
   * * `area_code` - region or area code, if detected
   * * `extension` - phone extension (to be dialed after connection), if
   * detected
   *
   * @generated from enum value: PHONE_NUMBER = 9;
   */
  PHONE_NUMBER = 9,

  /**
   * Address
   *
   * The metadata identifies the street number and locality plus whichever
   * additional elements appear in the text:
   *
   * * `street_number` - street number
   * * `locality` - city or town
   * * `street_name` - street/route name, if detected
   * * `postal_code` - postal code, if detected
   * * `country` - country, if detected<
   * * `broad_region` - administrative area, such as the state, if detected
   * * `narrow_region` - smaller administrative area, such as county, if
   * detected
   * * `sublocality` - used in Asian addresses to demark a district within a
   * city, if detected
   *
   * @generated from enum value: ADDRESS = 10;
   */
  ADDRESS = 10,

  /**
   * Date
   *
   * The metadata identifies the components of the date:
   *
   * * `year` - four digit year, if detected
   * * `month` - two digit month number, if detected
   * * `day` - two digit day number, if detected
   *
   * @generated from enum value: DATE = 11;
   */
  DATE = 11,

  /**
   * Number
   *
   * The metadata is the number itself.
   *
   * @generated from enum value: NUMBER = 12;
   */
  NUMBER = 12,

  /**
   * Price
   *
   * The metadata identifies the `value` and `currency`.
   *
   * @generated from enum value: PRICE = 13;
   */
  PRICE = 13,
}

/**
 * Describes the enum google.cloud.language.v1.Entity.Type.
 */
export const Entity_TypeSchema: GenEnum<Entity_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 2, 0);

/**
 * Represents the smallest syntactic building block of the text.
 *
 * @generated from message google.cloud.language.v1.Token
 */
export type Token = Message<"google.cloud.language.v1.Token"> & {
  /**
   * The token text.
   *
   * @generated from field: google.cloud.language.v1.TextSpan text = 1;
   */
  text?: TextSpan;

  /**
   * Parts of speech tag for this token.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech part_of_speech = 2;
   */
  partOfSpeech?: PartOfSpeech;

  /**
   * Dependency tree parse for this token.
   *
   * @generated from field: google.cloud.language.v1.DependencyEdge dependency_edge = 3;
   */
  dependencyEdge?: DependencyEdge;

  /**
   * [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
   *
   * @generated from field: string lemma = 4;
   */
  lemma: string;
};

/**
 * Describes the message google.cloud.language.v1.Token.
 * Use `create(TokenSchema)` to create a new message.
 */
export const TokenSchema: GenMessage<Token> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 3);

/**
 * Represents the feeling associated with the entire text or entities in
 * the text.
 *
 * @generated from message google.cloud.language.v1.Sentiment
 */
export type Sentiment = Message<"google.cloud.language.v1.Sentiment"> & {
  /**
   * A non-negative number in the [0, +inf) range, which represents
   * the absolute magnitude of sentiment regardless of score (positive or
   * negative).
   *
   * @generated from field: float magnitude = 2;
   */
  magnitude: number;

  /**
   * Sentiment score between -1.0 (negative sentiment) and 1.0
   * (positive sentiment).
   *
   * @generated from field: float score = 3;
   */
  score: number;
};

/**
 * Describes the message google.cloud.language.v1.Sentiment.
 * Use `create(SentimentSchema)` to create a new message.
 */
export const SentimentSchema: GenMessage<Sentiment> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 4);

/**
 * Represents part of speech information for a token. Parts of speech
 * are as defined in
 * http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
 *
 * @generated from message google.cloud.language.v1.PartOfSpeech
 */
export type PartOfSpeech = Message<"google.cloud.language.v1.PartOfSpeech"> & {
  /**
   * The part of speech tag.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Tag tag = 1;
   */
  tag: PartOfSpeech_Tag;

  /**
   * The grammatical aspect.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Aspect aspect = 2;
   */
  aspect: PartOfSpeech_Aspect;

  /**
   * The grammatical case.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Case case = 3;
   */
  case: PartOfSpeech_Case;

  /**
   * The grammatical form.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Form form = 4;
   */
  form: PartOfSpeech_Form;

  /**
   * The grammatical gender.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Gender gender = 5;
   */
  gender: PartOfSpeech_Gender;

  /**
   * The grammatical mood.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Mood mood = 6;
   */
  mood: PartOfSpeech_Mood;

  /**
   * The grammatical number.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Number number = 7;
   */
  number: PartOfSpeech_Number;

  /**
   * The grammatical person.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Person person = 8;
   */
  person: PartOfSpeech_Person;

  /**
   * The grammatical properness.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Proper proper = 9;
   */
  proper: PartOfSpeech_Proper;

  /**
   * The grammatical reciprocity.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Reciprocity reciprocity = 10;
   */
  reciprocity: PartOfSpeech_Reciprocity;

  /**
   * The grammatical tense.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Tense tense = 11;
   */
  tense: PartOfSpeech_Tense;

  /**
   * The grammatical voice.
   *
   * @generated from field: google.cloud.language.v1.PartOfSpeech.Voice voice = 12;
   */
  voice: PartOfSpeech_Voice;
};

/**
 * Describes the message google.cloud.language.v1.PartOfSpeech.
 * Use `create(PartOfSpeechSchema)` to create a new message.
 */
export const PartOfSpeechSchema: GenMessage<PartOfSpeech> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 5);

/**
 * The part of speech tags enum.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Tag
 */
export enum PartOfSpeech_Tag {
  /**
   * Unknown
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Adjective
   *
   * @generated from enum value: ADJ = 1;
   */
  ADJ = 1,

  /**
   * Adposition (preposition and postposition)
   *
   * @generated from enum value: ADP = 2;
   */
  ADP = 2,

  /**
   * Adverb
   *
   * @generated from enum value: ADV = 3;
   */
  ADV = 3,

  /**
   * Conjunction
   *
   * @generated from enum value: CONJ = 4;
   */
  CONJ = 4,

  /**
   * Determiner
   *
   * @generated from enum value: DET = 5;
   */
  DET = 5,

  /**
   * Noun (common and proper)
   *
   * @generated from enum value: NOUN = 6;
   */
  NOUN = 6,

  /**
   * Cardinal number
   *
   * @generated from enum value: NUM = 7;
   */
  NUM = 7,

  /**
   * Pronoun
   *
   * @generated from enum value: PRON = 8;
   */
  PRON = 8,

  /**
   * Particle or other function word
   *
   * @generated from enum value: PRT = 9;
   */
  PRT = 9,

  /**
   * Punctuation
   *
   * @generated from enum value: PUNCT = 10;
   */
  PUNCT = 10,

  /**
   * Verb (all tenses and modes)
   *
   * @generated from enum value: VERB = 11;
   */
  VERB = 11,

  /**
   * Other: foreign words, typos, abbreviations
   *
   * @generated from enum value: X = 12;
   */
  X = 12,

  /**
   * Affix
   *
   * @generated from enum value: AFFIX = 13;
   */
  AFFIX = 13,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Tag.
 */
export const PartOfSpeech_TagSchema: GenEnum<PartOfSpeech_Tag> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 0);

/**
 * The characteristic of a verb that expresses time flow during an event.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Aspect
 */
export enum PartOfSpeech_Aspect {
  /**
   * Aspect is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: ASPECT_UNKNOWN = 0;
   */
  ASPECT_UNKNOWN = 0,

  /**
   * Perfective
   *
   * @generated from enum value: PERFECTIVE = 1;
   */
  PERFECTIVE = 1,

  /**
   * Imperfective
   *
   * @generated from enum value: IMPERFECTIVE = 2;
   */
  IMPERFECTIVE = 2,

  /**
   * Progressive
   *
   * @generated from enum value: PROGRESSIVE = 3;
   */
  PROGRESSIVE = 3,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Aspect.
 */
export const PartOfSpeech_AspectSchema: GenEnum<PartOfSpeech_Aspect> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 1);

/**
 * The grammatical function performed by a noun or pronoun in a phrase,
 * clause, or sentence. In some languages, other parts of speech, such as
 * adjective and determiner, take case inflection in agreement with the noun.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Case
 */
export enum PartOfSpeech_Case {
  /**
   * Case is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: CASE_UNKNOWN = 0;
   */
  CASE_UNKNOWN = 0,

  /**
   * Accusative
   *
   * @generated from enum value: ACCUSATIVE = 1;
   */
  ACCUSATIVE = 1,

  /**
   * Adverbial
   *
   * @generated from enum value: ADVERBIAL = 2;
   */
  ADVERBIAL = 2,

  /**
   * Complementive
   *
   * @generated from enum value: COMPLEMENTIVE = 3;
   */
  COMPLEMENTIVE = 3,

  /**
   * Dative
   *
   * @generated from enum value: DATIVE = 4;
   */
  DATIVE = 4,

  /**
   * Genitive
   *
   * @generated from enum value: GENITIVE = 5;
   */
  GENITIVE = 5,

  /**
   * Instrumental
   *
   * @generated from enum value: INSTRUMENTAL = 6;
   */
  INSTRUMENTAL = 6,

  /**
   * Locative
   *
   * @generated from enum value: LOCATIVE = 7;
   */
  LOCATIVE = 7,

  /**
   * Nominative
   *
   * @generated from enum value: NOMINATIVE = 8;
   */
  NOMINATIVE = 8,

  /**
   * Oblique
   *
   * @generated from enum value: OBLIQUE = 9;
   */
  OBLIQUE = 9,

  /**
   * Partitive
   *
   * @generated from enum value: PARTITIVE = 10;
   */
  PARTITIVE = 10,

  /**
   * Prepositional
   *
   * @generated from enum value: PREPOSITIONAL = 11;
   */
  PREPOSITIONAL = 11,

  /**
   * Reflexive
   *
   * @generated from enum value: REFLEXIVE_CASE = 12;
   */
  REFLEXIVE_CASE = 12,

  /**
   * Relative
   *
   * @generated from enum value: RELATIVE_CASE = 13;
   */
  RELATIVE_CASE = 13,

  /**
   * Vocative
   *
   * @generated from enum value: VOCATIVE = 14;
   */
  VOCATIVE = 14,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Case.
 */
export const PartOfSpeech_CaseSchema: GenEnum<PartOfSpeech_Case> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 2);

/**
 * Depending on the language, Form can be categorizing different forms of
 * verbs, adjectives, adverbs, etc. For example, categorizing inflected
 * endings of verbs and adjectives or distinguishing between short and long
 * forms of adjectives and participles
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Form
 */
export enum PartOfSpeech_Form {
  /**
   * Form is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: FORM_UNKNOWN = 0;
   */
  FORM_UNKNOWN = 0,

  /**
   * Adnomial
   *
   * @generated from enum value: ADNOMIAL = 1;
   */
  ADNOMIAL = 1,

  /**
   * Auxiliary
   *
   * @generated from enum value: AUXILIARY = 2;
   */
  AUXILIARY = 2,

  /**
   * Complementizer
   *
   * @generated from enum value: COMPLEMENTIZER = 3;
   */
  COMPLEMENTIZER = 3,

  /**
   * Final ending
   *
   * @generated from enum value: FINAL_ENDING = 4;
   */
  FINAL_ENDING = 4,

  /**
   * Gerund
   *
   * @generated from enum value: GERUND = 5;
   */
  GERUND = 5,

  /**
   * Realis
   *
   * @generated from enum value: REALIS = 6;
   */
  REALIS = 6,

  /**
   * Irrealis
   *
   * @generated from enum value: IRREALIS = 7;
   */
  IRREALIS = 7,

  /**
   * Short form
   *
   * @generated from enum value: SHORT = 8;
   */
  SHORT = 8,

  /**
   * Long form
   *
   * @generated from enum value: LONG = 9;
   */
  LONG = 9,

  /**
   * Order form
   *
   * @generated from enum value: ORDER = 10;
   */
  ORDER = 10,

  /**
   * Specific form
   *
   * @generated from enum value: SPECIFIC = 11;
   */
  SPECIFIC = 11,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Form.
 */
export const PartOfSpeech_FormSchema: GenEnum<PartOfSpeech_Form> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 3);

/**
 * Gender classes of nouns reflected in the behaviour of associated words.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Gender
 */
export enum PartOfSpeech_Gender {
  /**
   * Gender is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: GENDER_UNKNOWN = 0;
   */
  GENDER_UNKNOWN = 0,

  /**
   * Feminine
   *
   * @generated from enum value: FEMININE = 1;
   */
  FEMININE = 1,

  /**
   * Masculine
   *
   * @generated from enum value: MASCULINE = 2;
   */
  MASCULINE = 2,

  /**
   * Neuter
   *
   * @generated from enum value: NEUTER = 3;
   */
  NEUTER = 3,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Gender.
 */
export const PartOfSpeech_GenderSchema: GenEnum<PartOfSpeech_Gender> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 4);

/**
 * The grammatical feature of verbs, used for showing modality and attitude.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Mood
 */
export enum PartOfSpeech_Mood {
  /**
   * Mood is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: MOOD_UNKNOWN = 0;
   */
  MOOD_UNKNOWN = 0,

  /**
   * Conditional
   *
   * @generated from enum value: CONDITIONAL_MOOD = 1;
   */
  CONDITIONAL_MOOD = 1,

  /**
   * Imperative
   *
   * @generated from enum value: IMPERATIVE = 2;
   */
  IMPERATIVE = 2,

  /**
   * Indicative
   *
   * @generated from enum value: INDICATIVE = 3;
   */
  INDICATIVE = 3,

  /**
   * Interrogative
   *
   * @generated from enum value: INTERROGATIVE = 4;
   */
  INTERROGATIVE = 4,

  /**
   * Jussive
   *
   * @generated from enum value: JUSSIVE = 5;
   */
  JUSSIVE = 5,

  /**
   * Subjunctive
   *
   * @generated from enum value: SUBJUNCTIVE = 6;
   */
  SUBJUNCTIVE = 6,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Mood.
 */
export const PartOfSpeech_MoodSchema: GenEnum<PartOfSpeech_Mood> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 5);

/**
 * Count distinctions.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Number
 */
export enum PartOfSpeech_Number {
  /**
   * Number is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: NUMBER_UNKNOWN = 0;
   */
  NUMBER_UNKNOWN = 0,

  /**
   * Singular
   *
   * @generated from enum value: SINGULAR = 1;
   */
  SINGULAR = 1,

  /**
   * Plural
   *
   * @generated from enum value: PLURAL = 2;
   */
  PLURAL = 2,

  /**
   * Dual
   *
   * @generated from enum value: DUAL = 3;
   */
  DUAL = 3,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Number.
 */
export const PartOfSpeech_NumberSchema: GenEnum<PartOfSpeech_Number> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 6);

/**
 * The distinction between the speaker, second person, third person, etc.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Person
 */
export enum PartOfSpeech_Person {
  /**
   * Person is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: PERSON_UNKNOWN = 0;
   */
  PERSON_UNKNOWN = 0,

  /**
   * First
   *
   * @generated from enum value: FIRST = 1;
   */
  FIRST = 1,

  /**
   * Second
   *
   * @generated from enum value: SECOND = 2;
   */
  SECOND = 2,

  /**
   * Third
   *
   * @generated from enum value: THIRD = 3;
   */
  THIRD = 3,

  /**
   * Reflexive
   *
   * @generated from enum value: REFLEXIVE_PERSON = 4;
   */
  REFLEXIVE_PERSON = 4,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Person.
 */
export const PartOfSpeech_PersonSchema: GenEnum<PartOfSpeech_Person> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 7);

/**
 * This category shows if the token is part of a proper name.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Proper
 */
export enum PartOfSpeech_Proper {
  /**
   * Proper is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: PROPER_UNKNOWN = 0;
   */
  PROPER_UNKNOWN = 0,

  /**
   * Proper
   *
   * @generated from enum value: PROPER = 1;
   */
  PROPER = 1,

  /**
   * Not proper
   *
   * @generated from enum value: NOT_PROPER = 2;
   */
  NOT_PROPER = 2,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Proper.
 */
export const PartOfSpeech_ProperSchema: GenEnum<PartOfSpeech_Proper> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 8);

/**
 * Reciprocal features of a pronoun.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Reciprocity
 */
export enum PartOfSpeech_Reciprocity {
  /**
   * Reciprocity is not applicable in the analyzed language or is not
   * predicted.
   *
   * @generated from enum value: RECIPROCITY_UNKNOWN = 0;
   */
  RECIPROCITY_UNKNOWN = 0,

  /**
   * Reciprocal
   *
   * @generated from enum value: RECIPROCAL = 1;
   */
  RECIPROCAL = 1,

  /**
   * Non-reciprocal
   *
   * @generated from enum value: NON_RECIPROCAL = 2;
   */
  NON_RECIPROCAL = 2,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Reciprocity.
 */
export const PartOfSpeech_ReciprocitySchema: GenEnum<PartOfSpeech_Reciprocity> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 9);

/**
 * Time reference.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Tense
 */
export enum PartOfSpeech_Tense {
  /**
   * Tense is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: TENSE_UNKNOWN = 0;
   */
  TENSE_UNKNOWN = 0,

  /**
   * Conditional
   *
   * @generated from enum value: CONDITIONAL_TENSE = 1;
   */
  CONDITIONAL_TENSE = 1,

  /**
   * Future
   *
   * @generated from enum value: FUTURE = 2;
   */
  FUTURE = 2,

  /**
   * Past
   *
   * @generated from enum value: PAST = 3;
   */
  PAST = 3,

  /**
   * Present
   *
   * @generated from enum value: PRESENT = 4;
   */
  PRESENT = 4,

  /**
   * Imperfect
   *
   * @generated from enum value: IMPERFECT = 5;
   */
  IMPERFECT = 5,

  /**
   * Pluperfect
   *
   * @generated from enum value: PLUPERFECT = 6;
   */
  PLUPERFECT = 6,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Tense.
 */
export const PartOfSpeech_TenseSchema: GenEnum<PartOfSpeech_Tense> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 10);

/**
 * The relationship between the action that a verb expresses and the
 * participants identified by its arguments.
 *
 * @generated from enum google.cloud.language.v1.PartOfSpeech.Voice
 */
export enum PartOfSpeech_Voice {
  /**
   * Voice is not applicable in the analyzed language or is not predicted.
   *
   * @generated from enum value: VOICE_UNKNOWN = 0;
   */
  VOICE_UNKNOWN = 0,

  /**
   * Active
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Causative
   *
   * @generated from enum value: CAUSATIVE = 2;
   */
  CAUSATIVE = 2,

  /**
   * Passive
   *
   * @generated from enum value: PASSIVE = 3;
   */
  PASSIVE = 3,
}

/**
 * Describes the enum google.cloud.language.v1.PartOfSpeech.Voice.
 */
export const PartOfSpeech_VoiceSchema: GenEnum<PartOfSpeech_Voice> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 5, 11);

/**
 * Represents dependency parse tree information for a token. (For more
 * information on dependency labels, see
 * http://www.aclweb.org/anthology/P13-2017
 *
 * @generated from message google.cloud.language.v1.DependencyEdge
 */
export type DependencyEdge = Message<"google.cloud.language.v1.DependencyEdge"> & {
  /**
   * Represents the head of this token in the dependency tree.
   * This is the index of the token which has an arc going to this token.
   * The index is the position of the token in the array of tokens returned
   * by the API method. If this token is a root token, then the
   * `head_token_index` is its own index.
   *
   * @generated from field: int32 head_token_index = 1;
   */
  headTokenIndex: number;

  /**
   * The parse label for the token.
   *
   * @generated from field: google.cloud.language.v1.DependencyEdge.Label label = 2;
   */
  label: DependencyEdge_Label;
};

/**
 * Describes the message google.cloud.language.v1.DependencyEdge.
 * Use `create(DependencyEdgeSchema)` to create a new message.
 */
export const DependencyEdgeSchema: GenMessage<DependencyEdge> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 6);

/**
 * The parse label enum for the token.
 *
 * @generated from enum google.cloud.language.v1.DependencyEdge.Label
 */
export enum DependencyEdge_Label {
  /**
   * Unknown
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Abbreviation modifier
   *
   * @generated from enum value: ABBREV = 1;
   */
  ABBREV = 1,

  /**
   * Adjectival complement
   *
   * @generated from enum value: ACOMP = 2;
   */
  ACOMP = 2,

  /**
   * Adverbial clause modifier
   *
   * @generated from enum value: ADVCL = 3;
   */
  ADVCL = 3,

  /**
   * Adverbial modifier
   *
   * @generated from enum value: ADVMOD = 4;
   */
  ADVMOD = 4,

  /**
   * Adjectival modifier of an NP
   *
   * @generated from enum value: AMOD = 5;
   */
  AMOD = 5,

  /**
   * Appositional modifier of an NP
   *
   * @generated from enum value: APPOS = 6;
   */
  APPOS = 6,

  /**
   * Attribute dependent of a copular verb
   *
   * @generated from enum value: ATTR = 7;
   */
  ATTR = 7,

  /**
   * Auxiliary (non-main) verb
   *
   * @generated from enum value: AUX = 8;
   */
  AUX = 8,

  /**
   * Passive auxiliary
   *
   * @generated from enum value: AUXPASS = 9;
   */
  AUXPASS = 9,

  /**
   * Coordinating conjunction
   *
   * @generated from enum value: CC = 10;
   */
  CC = 10,

  /**
   * Clausal complement of a verb or adjective
   *
   * @generated from enum value: CCOMP = 11;
   */
  CCOMP = 11,

  /**
   * Conjunct
   *
   * @generated from enum value: CONJ = 12;
   */
  CONJ = 12,

  /**
   * Clausal subject
   *
   * @generated from enum value: CSUBJ = 13;
   */
  CSUBJ = 13,

  /**
   * Clausal passive subject
   *
   * @generated from enum value: CSUBJPASS = 14;
   */
  CSUBJPASS = 14,

  /**
   * Dependency (unable to determine)
   *
   * @generated from enum value: DEP = 15;
   */
  DEP = 15,

  /**
   * Determiner
   *
   * @generated from enum value: DET = 16;
   */
  DET = 16,

  /**
   * Discourse
   *
   * @generated from enum value: DISCOURSE = 17;
   */
  DISCOURSE = 17,

  /**
   * Direct object
   *
   * @generated from enum value: DOBJ = 18;
   */
  DOBJ = 18,

  /**
   * Expletive
   *
   * @generated from enum value: EXPL = 19;
   */
  EXPL = 19,

  /**
   * Goes with (part of a word in a text not well edited)
   *
   * @generated from enum value: GOESWITH = 20;
   */
  GOESWITH = 20,

  /**
   * Indirect object
   *
   * @generated from enum value: IOBJ = 21;
   */
  IOBJ = 21,

  /**
   * Marker (word introducing a subordinate clause)
   *
   * @generated from enum value: MARK = 22;
   */
  MARK = 22,

  /**
   * Multi-word expression
   *
   * @generated from enum value: MWE = 23;
   */
  MWE = 23,

  /**
   * Multi-word verbal expression
   *
   * @generated from enum value: MWV = 24;
   */
  MWV = 24,

  /**
   * Negation modifier
   *
   * @generated from enum value: NEG = 25;
   */
  NEG = 25,

  /**
   * Noun compound modifier
   *
   * @generated from enum value: NN = 26;
   */
  NN = 26,

  /**
   * Noun phrase used as an adverbial modifier
   *
   * @generated from enum value: NPADVMOD = 27;
   */
  NPADVMOD = 27,

  /**
   * Nominal subject
   *
   * @generated from enum value: NSUBJ = 28;
   */
  NSUBJ = 28,

  /**
   * Passive nominal subject
   *
   * @generated from enum value: NSUBJPASS = 29;
   */
  NSUBJPASS = 29,

  /**
   * Numeric modifier of a noun
   *
   * @generated from enum value: NUM = 30;
   */
  NUM = 30,

  /**
   * Element of compound number
   *
   * @generated from enum value: NUMBER = 31;
   */
  NUMBER = 31,

  /**
   * Punctuation mark
   *
   * @generated from enum value: P = 32;
   */
  P = 32,

  /**
   * Parataxis relation
   *
   * @generated from enum value: PARATAXIS = 33;
   */
  PARATAXIS = 33,

  /**
   * Participial modifier
   *
   * @generated from enum value: PARTMOD = 34;
   */
  PARTMOD = 34,

  /**
   * The complement of a preposition is a clause
   *
   * @generated from enum value: PCOMP = 35;
   */
  PCOMP = 35,

  /**
   * Object of a preposition
   *
   * @generated from enum value: POBJ = 36;
   */
  POBJ = 36,

  /**
   * Possession modifier
   *
   * @generated from enum value: POSS = 37;
   */
  POSS = 37,

  /**
   * Postverbal negative particle
   *
   * @generated from enum value: POSTNEG = 38;
   */
  POSTNEG = 38,

  /**
   * Predicate complement
   *
   * @generated from enum value: PRECOMP = 39;
   */
  PRECOMP = 39,

  /**
   * Preconjunt
   *
   * @generated from enum value: PRECONJ = 40;
   */
  PRECONJ = 40,

  /**
   * Predeterminer
   *
   * @generated from enum value: PREDET = 41;
   */
  PREDET = 41,

  /**
   * Prefix
   *
   * @generated from enum value: PREF = 42;
   */
  PREF = 42,

  /**
   * Prepositional modifier
   *
   * @generated from enum value: PREP = 43;
   */
  PREP = 43,

  /**
   * The relationship between a verb and verbal morpheme
   *
   * @generated from enum value: PRONL = 44;
   */
  PRONL = 44,

  /**
   * Particle
   *
   * @generated from enum value: PRT = 45;
   */
  PRT = 45,

  /**
   * Associative or possessive marker
   *
   * @generated from enum value: PS = 46;
   */
  PS = 46,

  /**
   * Quantifier phrase modifier
   *
   * @generated from enum value: QUANTMOD = 47;
   */
  QUANTMOD = 47,

  /**
   * Relative clause modifier
   *
   * @generated from enum value: RCMOD = 48;
   */
  RCMOD = 48,

  /**
   * Complementizer in relative clause
   *
   * @generated from enum value: RCMODREL = 49;
   */
  RCMODREL = 49,

  /**
   * Ellipsis without a preceding predicate
   *
   * @generated from enum value: RDROP = 50;
   */
  RDROP = 50,

  /**
   * Referent
   *
   * @generated from enum value: REF = 51;
   */
  REF = 51,

  /**
   * Remnant
   *
   * @generated from enum value: REMNANT = 52;
   */
  REMNANT = 52,

  /**
   * Reparandum
   *
   * @generated from enum value: REPARANDUM = 53;
   */
  REPARANDUM = 53,

  /**
   * Root
   *
   * @generated from enum value: ROOT = 54;
   */
  ROOT = 54,

  /**
   * Suffix specifying a unit of number
   *
   * @generated from enum value: SNUM = 55;
   */
  SNUM = 55,

  /**
   * Suffix
   *
   * @generated from enum value: SUFF = 56;
   */
  SUFF = 56,

  /**
   * Temporal modifier
   *
   * @generated from enum value: TMOD = 57;
   */
  TMOD = 57,

  /**
   * Topic marker
   *
   * @generated from enum value: TOPIC = 58;
   */
  TOPIC = 58,

  /**
   * Clause headed by an infinite form of the verb that modifies a noun
   *
   * @generated from enum value: VMOD = 59;
   */
  VMOD = 59,

  /**
   * Vocative
   *
   * @generated from enum value: VOCATIVE = 60;
   */
  VOCATIVE = 60,

  /**
   * Open clausal complement
   *
   * @generated from enum value: XCOMP = 61;
   */
  XCOMP = 61,

  /**
   * Name suffix
   *
   * @generated from enum value: SUFFIX = 62;
   */
  SUFFIX = 62,

  /**
   * Name title
   *
   * @generated from enum value: TITLE = 63;
   */
  TITLE = 63,

  /**
   * Adverbial phrase modifier
   *
   * @generated from enum value: ADVPHMOD = 64;
   */
  ADVPHMOD = 64,

  /**
   * Causative auxiliary
   *
   * @generated from enum value: AUXCAUS = 65;
   */
  AUXCAUS = 65,

  /**
   * Helper auxiliary
   *
   * @generated from enum value: AUXVV = 66;
   */
  AUXVV = 66,

  /**
   * Rentaishi (Prenominal modifier)
   *
   * @generated from enum value: DTMOD = 67;
   */
  DTMOD = 67,

  /**
   * Foreign words
   *
   * @generated from enum value: FOREIGN = 68;
   */
  FOREIGN = 68,

  /**
   * Keyword
   *
   * @generated from enum value: KW = 69;
   */
  KW = 69,

  /**
   * List for chains of comparable items
   *
   * @generated from enum value: LIST = 70;
   */
  LIST = 70,

  /**
   * Nominalized clause
   *
   * @generated from enum value: NOMC = 71;
   */
  NOMC = 71,

  /**
   * Nominalized clausal subject
   *
   * @generated from enum value: NOMCSUBJ = 72;
   */
  NOMCSUBJ = 72,

  /**
   * Nominalized clausal passive
   *
   * @generated from enum value: NOMCSUBJPASS = 73;
   */
  NOMCSUBJPASS = 73,

  /**
   * Compound of numeric modifier
   *
   * @generated from enum value: NUMC = 74;
   */
  NUMC = 74,

  /**
   * Copula
   *
   * @generated from enum value: COP = 75;
   */
  COP = 75,

  /**
   * Dislocated relation (for fronted/topicalized elements)
   *
   * @generated from enum value: DISLOCATED = 76;
   */
  DISLOCATED = 76,

  /**
   * Aspect marker
   *
   * @generated from enum value: ASP = 77;
   */
  ASP = 77,

  /**
   * Genitive modifier
   *
   * @generated from enum value: GMOD = 78;
   */
  GMOD = 78,

  /**
   * Genitive object
   *
   * @generated from enum value: GOBJ = 79;
   */
  GOBJ = 79,

  /**
   * Infinitival modifier
   *
   * @generated from enum value: INFMOD = 80;
   */
  INFMOD = 80,

  /**
   * Measure
   *
   * @generated from enum value: MES = 81;
   */
  MES = 81,

  /**
   * Nominal complement of a noun
   *
   * @generated from enum value: NCOMP = 82;
   */
  NCOMP = 82,
}

/**
 * Describes the enum google.cloud.language.v1.DependencyEdge.Label.
 */
export const DependencyEdge_LabelSchema: GenEnum<DependencyEdge_Label> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 6, 0);

/**
 * Represents a mention for an entity in the text. Currently, proper noun
 * mentions are supported.
 *
 * @generated from message google.cloud.language.v1.EntityMention
 */
export type EntityMention = Message<"google.cloud.language.v1.EntityMention"> & {
  /**
   * The mention text.
   *
   * @generated from field: google.cloud.language.v1.TextSpan text = 1;
   */
  text?: TextSpan;

  /**
   * The type of the entity mention.
   *
   * @generated from field: google.cloud.language.v1.EntityMention.Type type = 2;
   */
  type: EntityMention_Type;

  /**
   * For calls to [AnalyzeEntitySentiment][] or if
   * [AnnotateTextRequest.Features.extract_entity_sentiment][google.cloud.language.v1.AnnotateTextRequest.Features.extract_entity_sentiment]
   * is set to true, this field will contain the sentiment expressed for this
   * mention of the entity in the provided document.
   *
   * @generated from field: google.cloud.language.v1.Sentiment sentiment = 3;
   */
  sentiment?: Sentiment;
};

/**
 * Describes the message google.cloud.language.v1.EntityMention.
 * Use `create(EntityMentionSchema)` to create a new message.
 */
export const EntityMentionSchema: GenMessage<EntityMention> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 7);

/**
 * The supported types of mentions.
 *
 * @generated from enum google.cloud.language.v1.EntityMention.Type
 */
export enum EntityMention_Type {
  /**
   * Unknown
   *
   * @generated from enum value: TYPE_UNKNOWN = 0;
   */
  TYPE_UNKNOWN = 0,

  /**
   * Proper name
   *
   * @generated from enum value: PROPER = 1;
   */
  PROPER = 1,

  /**
   * Common noun (or noun compound)
   *
   * @generated from enum value: COMMON = 2;
   */
  COMMON = 2,
}

/**
 * Describes the enum google.cloud.language.v1.EntityMention.Type.
 */
export const EntityMention_TypeSchema: GenEnum<EntityMention_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 7, 0);

/**
 * Represents an output piece of text.
 *
 * @generated from message google.cloud.language.v1.TextSpan
 */
export type TextSpan = Message<"google.cloud.language.v1.TextSpan"> & {
  /**
   * The content of the output text.
   *
   * @generated from field: string content = 1;
   */
  content: string;

  /**
   * The API calculates the beginning offset of the content in the original
   * document according to the
   * [EncodingType][google.cloud.language.v1.EncodingType] specified in the API
   * request.
   *
   * @generated from field: int32 begin_offset = 2;
   */
  beginOffset: number;
};

/**
 * Describes the message google.cloud.language.v1.TextSpan.
 * Use `create(TextSpanSchema)` to create a new message.
 */
export const TextSpanSchema: GenMessage<TextSpan> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 8);

/**
 * Represents a category returned from the text classifier.
 *
 * @generated from message google.cloud.language.v1.ClassificationCategory
 */
export type ClassificationCategory = Message<"google.cloud.language.v1.ClassificationCategory"> & {
  /**
   * The name of the category representing the document.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The classifier's confidence of the category. Number represents how certain
   * the classifier is that this category represents the given text.
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;
};

/**
 * Describes the message google.cloud.language.v1.ClassificationCategory.
 * Use `create(ClassificationCategorySchema)` to create a new message.
 */
export const ClassificationCategorySchema: GenMessage<ClassificationCategory> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 9);

/**
 * Model options available for classification requests.
 *
 * @generated from message google.cloud.language.v1.ClassificationModelOptions
 */
export type ClassificationModelOptions = Message<"google.cloud.language.v1.ClassificationModelOptions"> & {
  /**
   * If this field is not set, then the `v1_model` will be used by default.
   *
   * @generated from oneof google.cloud.language.v1.ClassificationModelOptions.model_type
   */
  modelType: {
    /**
     * Setting this field will use the V1 model and V1 content categories
     * version. The V1 model is a legacy model; support for this will be
     * discontinued in the future.
     *
     * @generated from field: google.cloud.language.v1.ClassificationModelOptions.V1Model v1_model = 1;
     */
    value: ClassificationModelOptions_V1Model;
    case: "v1Model";
  } | {
    /**
     * Setting this field will use the V2 model with the appropriate content
     * categories version. The V2 model is a better performing model.
     *
     * @generated from field: google.cloud.language.v1.ClassificationModelOptions.V2Model v2_model = 2;
     */
    value: ClassificationModelOptions_V2Model;
    case: "v2Model";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.language.v1.ClassificationModelOptions.
 * Use `create(ClassificationModelOptionsSchema)` to create a new message.
 */
export const ClassificationModelOptionsSchema: GenMessage<ClassificationModelOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 10);

/**
 * Options for the V1 model.
 *
 * @generated from message google.cloud.language.v1.ClassificationModelOptions.V1Model
 */
export type ClassificationModelOptions_V1Model = Message<"google.cloud.language.v1.ClassificationModelOptions.V1Model"> & {
};

/**
 * Describes the message google.cloud.language.v1.ClassificationModelOptions.V1Model.
 * Use `create(ClassificationModelOptions_V1ModelSchema)` to create a new message.
 */
export const ClassificationModelOptions_V1ModelSchema: GenMessage<ClassificationModelOptions_V1Model> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 10, 0);

/**
 * Options for the V2 model.
 *
 * @generated from message google.cloud.language.v1.ClassificationModelOptions.V2Model
 */
export type ClassificationModelOptions_V2Model = Message<"google.cloud.language.v1.ClassificationModelOptions.V2Model"> & {
  /**
   * The content categories used for classification.
   *
   * @generated from field: google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion content_categories_version = 1;
   */
  contentCategoriesVersion: ClassificationModelOptions_V2Model_ContentCategoriesVersion;
};

/**
 * Describes the message google.cloud.language.v1.ClassificationModelOptions.V2Model.
 * Use `create(ClassificationModelOptions_V2ModelSchema)` to create a new message.
 */
export const ClassificationModelOptions_V2ModelSchema: GenMessage<ClassificationModelOptions_V2Model> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 10, 1);

/**
 * The content categories used for classification.
 *
 * @generated from enum google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion
 */
export enum ClassificationModelOptions_V2Model_ContentCategoriesVersion {
  /**
   * If `ContentCategoriesVersion` is not specified, this option will
   * default to `V1`.
   *
   * @generated from enum value: CONTENT_CATEGORIES_VERSION_UNSPECIFIED = 0;
   */
  CONTENT_CATEGORIES_VERSION_UNSPECIFIED = 0,

  /**
   * Legacy content categories of our initial launch in 2017.
   *
   * @generated from enum value: V1 = 1;
   */
  V1 = 1,

  /**
   * Updated content categories in 2022.
   *
   * @generated from enum value: V2 = 2;
   */
  V2 = 2,
}

/**
 * Describes the enum google.cloud.language.v1.ClassificationModelOptions.V2Model.ContentCategoriesVersion.
 */
export const ClassificationModelOptions_V2Model_ContentCategoriesVersionSchema: GenEnum<ClassificationModelOptions_V2Model_ContentCategoriesVersion> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 10, 1, 0);

/**
 * The sentiment analysis request message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeSentimentRequest
 */
export type AnalyzeSentimentRequest = Message<"google.cloud.language.v1.AnalyzeSentimentRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate sentence offsets.
   *
   * @generated from field: google.cloud.language.v1.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeSentimentRequest.
 * Use `create(AnalyzeSentimentRequestSchema)` to create a new message.
 */
export const AnalyzeSentimentRequestSchema: GenMessage<AnalyzeSentimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 11);

/**
 * The sentiment analysis response message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeSentimentResponse
 */
export type AnalyzeSentimentResponse = Message<"google.cloud.language.v1.AnalyzeSentimentResponse"> & {
  /**
   * The overall sentiment of the input document.
   *
   * @generated from field: google.cloud.language.v1.Sentiment document_sentiment = 1;
   */
  documentSentiment?: Sentiment;

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][google.cloud.language.v1.Document.language] field
   * for more details.
   *
   * @generated from field: string language = 2;
   */
  language: string;

  /**
   * The sentiment for all the sentences in the document.
   *
   * @generated from field: repeated google.cloud.language.v1.Sentence sentences = 3;
   */
  sentences: Sentence[];
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeSentimentResponse.
 * Use `create(AnalyzeSentimentResponseSchema)` to create a new message.
 */
export const AnalyzeSentimentResponseSchema: GenMessage<AnalyzeSentimentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 12);

/**
 * The entity-level sentiment analysis request message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeEntitySentimentRequest
 */
export type AnalyzeEntitySentimentRequest = Message<"google.cloud.language.v1.AnalyzeEntitySentimentRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v1.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeEntitySentimentRequest.
 * Use `create(AnalyzeEntitySentimentRequestSchema)` to create a new message.
 */
export const AnalyzeEntitySentimentRequestSchema: GenMessage<AnalyzeEntitySentimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 13);

/**
 * The entity-level sentiment analysis response message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeEntitySentimentResponse
 */
export type AnalyzeEntitySentimentResponse = Message<"google.cloud.language.v1.AnalyzeEntitySentimentResponse"> & {
  /**
   * The recognized entities in the input document with associated sentiments.
   *
   * @generated from field: repeated google.cloud.language.v1.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][google.cloud.language.v1.Document.language] field
   * for more details.
   *
   * @generated from field: string language = 2;
   */
  language: string;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeEntitySentimentResponse.
 * Use `create(AnalyzeEntitySentimentResponseSchema)` to create a new message.
 */
export const AnalyzeEntitySentimentResponseSchema: GenMessage<AnalyzeEntitySentimentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 14);

/**
 * The entity analysis request message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeEntitiesRequest
 */
export type AnalyzeEntitiesRequest = Message<"google.cloud.language.v1.AnalyzeEntitiesRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v1.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeEntitiesRequest.
 * Use `create(AnalyzeEntitiesRequestSchema)` to create a new message.
 */
export const AnalyzeEntitiesRequestSchema: GenMessage<AnalyzeEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 15);

/**
 * The entity analysis response message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeEntitiesResponse
 */
export type AnalyzeEntitiesResponse = Message<"google.cloud.language.v1.AnalyzeEntitiesResponse"> & {
  /**
   * The recognized entities in the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.Entity entities = 1;
   */
  entities: Entity[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][google.cloud.language.v1.Document.language] field
   * for more details.
   *
   * @generated from field: string language = 2;
   */
  language: string;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeEntitiesResponse.
 * Use `create(AnalyzeEntitiesResponseSchema)` to create a new message.
 */
export const AnalyzeEntitiesResponseSchema: GenMessage<AnalyzeEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 16);

/**
 * The syntax analysis request message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeSyntaxRequest
 */
export type AnalyzeSyntaxRequest = Message<"google.cloud.language.v1.AnalyzeSyntaxRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v1.EncodingType encoding_type = 2;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeSyntaxRequest.
 * Use `create(AnalyzeSyntaxRequestSchema)` to create a new message.
 */
export const AnalyzeSyntaxRequestSchema: GenMessage<AnalyzeSyntaxRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 17);

/**
 * The syntax analysis response message.
 *
 * @generated from message google.cloud.language.v1.AnalyzeSyntaxResponse
 */
export type AnalyzeSyntaxResponse = Message<"google.cloud.language.v1.AnalyzeSyntaxResponse"> & {
  /**
   * Sentences in the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.Sentence sentences = 1;
   */
  sentences: Sentence[];

  /**
   * Tokens, along with their syntactic information, in the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.Token tokens = 2;
   */
  tokens: Token[];

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][google.cloud.language.v1.Document.language] field
   * for more details.
   *
   * @generated from field: string language = 3;
   */
  language: string;
};

/**
 * Describes the message google.cloud.language.v1.AnalyzeSyntaxResponse.
 * Use `create(AnalyzeSyntaxResponseSchema)` to create a new message.
 */
export const AnalyzeSyntaxResponseSchema: GenMessage<AnalyzeSyntaxResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 18);

/**
 * The document classification request message.
 *
 * @generated from message google.cloud.language.v1.ClassifyTextRequest
 */
export type ClassifyTextRequest = Message<"google.cloud.language.v1.ClassifyTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * Model options to use for classification. Defaults to v1 options if not
   * specified.
   *
   * @generated from field: google.cloud.language.v1.ClassificationModelOptions classification_model_options = 3;
   */
  classificationModelOptions?: ClassificationModelOptions;
};

/**
 * Describes the message google.cloud.language.v1.ClassifyTextRequest.
 * Use `create(ClassifyTextRequestSchema)` to create a new message.
 */
export const ClassifyTextRequestSchema: GenMessage<ClassifyTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 19);

/**
 * The document classification response message.
 *
 * @generated from message google.cloud.language.v1.ClassifyTextResponse
 */
export type ClassifyTextResponse = Message<"google.cloud.language.v1.ClassifyTextResponse"> & {
  /**
   * Categories representing the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.ClassificationCategory categories = 1;
   */
  categories: ClassificationCategory[];
};

/**
 * Describes the message google.cloud.language.v1.ClassifyTextResponse.
 * Use `create(ClassifyTextResponseSchema)` to create a new message.
 */
export const ClassifyTextResponseSchema: GenMessage<ClassifyTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 20);

/**
 * The document moderation request message.
 *
 * @generated from message google.cloud.language.v1.ModerateTextRequest
 */
export type ModerateTextRequest = Message<"google.cloud.language.v1.ModerateTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;
};

/**
 * Describes the message google.cloud.language.v1.ModerateTextRequest.
 * Use `create(ModerateTextRequestSchema)` to create a new message.
 */
export const ModerateTextRequestSchema: GenMessage<ModerateTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 21);

/**
 * The document moderation response message.
 *
 * @generated from message google.cloud.language.v1.ModerateTextResponse
 */
export type ModerateTextResponse = Message<"google.cloud.language.v1.ModerateTextResponse"> & {
  /**
   * Harmful and sensitive categories representing the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.ClassificationCategory moderation_categories = 1;
   */
  moderationCategories: ClassificationCategory[];
};

/**
 * Describes the message google.cloud.language.v1.ModerateTextResponse.
 * Use `create(ModerateTextResponseSchema)` to create a new message.
 */
export const ModerateTextResponseSchema: GenMessage<ModerateTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 22);

/**
 * The request message for the text annotation API, which can perform multiple
 * analysis types (sentiment, entities, and syntax) in one call.
 *
 * @generated from message google.cloud.language.v1.AnnotateTextRequest
 */
export type AnnotateTextRequest = Message<"google.cloud.language.v1.AnnotateTextRequest"> & {
  /**
   * Required. Input document.
   *
   * @generated from field: google.cloud.language.v1.Document document = 1;
   */
  document?: Document;

  /**
   * Required. The enabled features.
   *
   * @generated from field: google.cloud.language.v1.AnnotateTextRequest.Features features = 2;
   */
  features?: AnnotateTextRequest_Features;

  /**
   * The encoding type used by the API to calculate offsets.
   *
   * @generated from field: google.cloud.language.v1.EncodingType encoding_type = 3;
   */
  encodingType: EncodingType;
};

/**
 * Describes the message google.cloud.language.v1.AnnotateTextRequest.
 * Use `create(AnnotateTextRequestSchema)` to create a new message.
 */
export const AnnotateTextRequestSchema: GenMessage<AnnotateTextRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 23);

/**
 * All available features for sentiment, syntax, and semantic analysis.
 * Setting each one to true will enable that specific analysis for the input.
 *
 * @generated from message google.cloud.language.v1.AnnotateTextRequest.Features
 */
export type AnnotateTextRequest_Features = Message<"google.cloud.language.v1.AnnotateTextRequest.Features"> & {
  /**
   * Extract syntax information.
   *
   * @generated from field: bool extract_syntax = 1;
   */
  extractSyntax: boolean;

  /**
   * Extract entities.
   *
   * @generated from field: bool extract_entities = 2;
   */
  extractEntities: boolean;

  /**
   * Extract document-level sentiment.
   *
   * @generated from field: bool extract_document_sentiment = 3;
   */
  extractDocumentSentiment: boolean;

  /**
   * Extract entities and their associated sentiment.
   *
   * @generated from field: bool extract_entity_sentiment = 4;
   */
  extractEntitySentiment: boolean;

  /**
   * Classify the full document into categories.
   *
   * @generated from field: bool classify_text = 6;
   */
  classifyText: boolean;

  /**
   * Moderate the document for harmful and sensitive categories.
   *
   * @generated from field: bool moderate_text = 11;
   */
  moderateText: boolean;

  /**
   * The model options to use for classification. Defaults to v1 options
   * if not specified. Only used if `classify_text` is set to true.
   *
   * @generated from field: google.cloud.language.v1.ClassificationModelOptions classification_model_options = 10;
   */
  classificationModelOptions?: ClassificationModelOptions;
};

/**
 * Describes the message google.cloud.language.v1.AnnotateTextRequest.Features.
 * Use `create(AnnotateTextRequest_FeaturesSchema)` to create a new message.
 */
export const AnnotateTextRequest_FeaturesSchema: GenMessage<AnnotateTextRequest_Features> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 23, 0);

/**
 * The text annotations response message.
 *
 * @generated from message google.cloud.language.v1.AnnotateTextResponse
 */
export type AnnotateTextResponse = Message<"google.cloud.language.v1.AnnotateTextResponse"> & {
  /**
   * Sentences in the input document. Populated if the user enables
   * [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax].
   *
   * @generated from field: repeated google.cloud.language.v1.Sentence sentences = 1;
   */
  sentences: Sentence[];

  /**
   * Tokens, along with their syntactic information, in the input document.
   * Populated if the user enables
   * [AnnotateTextRequest.Features.extract_syntax][google.cloud.language.v1.AnnotateTextRequest.Features.extract_syntax].
   *
   * @generated from field: repeated google.cloud.language.v1.Token tokens = 2;
   */
  tokens: Token[];

  /**
   * Entities, along with their semantic information, in the input document.
   * Populated if the user enables
   * [AnnotateTextRequest.Features.extract_entities][google.cloud.language.v1.AnnotateTextRequest.Features.extract_entities].
   *
   * @generated from field: repeated google.cloud.language.v1.Entity entities = 3;
   */
  entities: Entity[];

  /**
   * The overall sentiment for the document. Populated if the user enables
   * [AnnotateTextRequest.Features.extract_document_sentiment][google.cloud.language.v1.AnnotateTextRequest.Features.extract_document_sentiment].
   *
   * @generated from field: google.cloud.language.v1.Sentiment document_sentiment = 4;
   */
  documentSentiment?: Sentiment;

  /**
   * The language of the text, which will be the same as the language specified
   * in the request or, if not specified, the automatically-detected language.
   * See [Document.language][google.cloud.language.v1.Document.language] field
   * for more details.
   *
   * @generated from field: string language = 5;
   */
  language: string;

  /**
   * Categories identified in the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.ClassificationCategory categories = 6;
   */
  categories: ClassificationCategory[];

  /**
   * Harmful and sensitive categories identified in the input document.
   *
   * @generated from field: repeated google.cloud.language.v1.ClassificationCategory moderation_categories = 7;
   */
  moderationCategories: ClassificationCategory[];
};

/**
 * Describes the message google.cloud.language.v1.AnnotateTextResponse.
 * Use `create(AnnotateTextResponseSchema)` to create a new message.
 */
export const AnnotateTextResponseSchema: GenMessage<AnnotateTextResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_language_v1_language_service, 24);

/**
 * Represents the text encoding that the caller uses to process the output.
 * Providing an `EncodingType` is recommended because the API provides the
 * beginning offsets for various outputs, such as tokens and mentions, and
 * languages that natively use different text encodings may access offsets
 * differently.
 *
 * @generated from enum google.cloud.language.v1.EncodingType
 */
export enum EncodingType {
  /**
   * If `EncodingType` is not specified, encoding-dependent information (such as
   * `begin_offset`) will be set at `-1`.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-8 encoding of the input. C++ and Go are examples of languages
   * that use this encoding natively.
   *
   * @generated from enum value: UTF8 = 1;
   */
  UTF8 = 1,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-16 encoding of the input. Java and JavaScript are examples of
   * languages that use this encoding natively.
   *
   * @generated from enum value: UTF16 = 2;
   */
  UTF16 = 2,

  /**
   * Encoding-dependent information (such as `begin_offset`) is calculated based
   * on the UTF-32 encoding of the input. Python is an example of a language
   * that uses this encoding natively.
   *
   * @generated from enum value: UTF32 = 3;
   */
  UTF32 = 3,
}

/**
 * Describes the enum google.cloud.language.v1.EncodingType.
 */
export const EncodingTypeSchema: GenEnum<EncodingType> = /*@__PURE__*/
  enumDesc(file_google_cloud_language_v1_language_service, 0);

/**
 * Provides text analysis operations such as sentiment analysis and entity
 * recognition.
 *
 * @generated from service google.cloud.language.v1.LanguageService
 */
export const LanguageService: GenService<{
  /**
   * Analyzes the sentiment of the provided text.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.AnalyzeSentiment
   */
  analyzeSentiment: {
    methodKind: "unary";
    input: typeof AnalyzeSentimentRequestSchema;
    output: typeof AnalyzeSentimentResponseSchema;
  },
  /**
   * Finds named entities (currently proper names and common nouns) in the text
   * along with entity types, salience, mentions for each entity, and
   * other properties.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.AnalyzeEntities
   */
  analyzeEntities: {
    methodKind: "unary";
    input: typeof AnalyzeEntitiesRequestSchema;
    output: typeof AnalyzeEntitiesResponseSchema;
  },
  /**
   * Finds entities, similar to
   * [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities]
   * in the text and analyzes sentiment associated with each entity and its
   * mentions.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.AnalyzeEntitySentiment
   */
  analyzeEntitySentiment: {
    methodKind: "unary";
    input: typeof AnalyzeEntitySentimentRequestSchema;
    output: typeof AnalyzeEntitySentimentResponseSchema;
  },
  /**
   * Analyzes the syntax of the text and provides sentence boundaries and
   * tokenization along with part of speech tags, dependency trees, and other
   * properties.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.AnalyzeSyntax
   */
  analyzeSyntax: {
    methodKind: "unary";
    input: typeof AnalyzeSyntaxRequestSchema;
    output: typeof AnalyzeSyntaxResponseSchema;
  },
  /**
   * Classifies a document into categories.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.ClassifyText
   */
  classifyText: {
    methodKind: "unary";
    input: typeof ClassifyTextRequestSchema;
    output: typeof ClassifyTextResponseSchema;
  },
  /**
   * Moderates a document for harmful and sensitive categories.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.ModerateText
   */
  moderateText: {
    methodKind: "unary";
    input: typeof ModerateTextRequestSchema;
    output: typeof ModerateTextResponseSchema;
  },
  /**
   * A convenience method that provides all the features that analyzeSentiment,
   * analyzeEntities, and analyzeSyntax provide in one call.
   *
   * @generated from rpc google.cloud.language.v1.LanguageService.AnnotateText
   */
  annotateText: {
    methodKind: "unary";
    input: typeof AnnotateTextRequestSchema;
    output: typeof AnnotateTextResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_language_v1_language_service, 0);

