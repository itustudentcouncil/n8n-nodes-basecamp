// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/resourcemanager/v3/folders.proto (package google.cloud.resourcemanager.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { GetIamPolicyRequestSchema, SetIamPolicyRequestSchema, TestIamPermissionsRequestSchema, TestIamPermissionsResponseSchema } from "../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../iam/v1/iam_policy_pb";
import type { PolicySchema } from "../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../iam/v1/policy_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/resourcemanager/v3/folders.proto.
 */
export const file_google_cloud_resourcemanager_v3_folders: GenFile = /*@__PURE__*/
  fileDesc("Ci1nb29nbGUvY2xvdWQvcmVzb3VyY2VtYW5hZ2VyL3YzL2ZvbGRlcnMucHJvdG8SH2dvb2dsZS5jbG91ZC5yZXNvdXJjZW1hbmFnZXIudjMixgMKBkZvbGRlchIRCgRuYW1lGAEgASgJQgPgQQMSEwoGcGFyZW50GAIgASgJQgPgQQISFAoMZGlzcGxheV9uYW1lGAMgASgJEkEKBXN0YXRlGAQgASgOMi0uZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5Gb2xkZXIuU3RhdGVCA+BBAxI0CgtjcmVhdGVfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0CgtkZWxldGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIRCgRldGFnGAggASgJQgPgQQMiQAoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIKCgZBQ1RJVkUQARIUChBERUxFVEVfUkVRVUVTVEVEEAI6ROpBQQoqY2xvdWRyZXNvdXJjZW1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vRm9sZGVyEhBmb2xkZXJzL3tmb2xkZXJ9UgEBIlQKEEdldEZvbGRlclJlcXVlc3QSQAoEbmFtZRgBIAEoCUIy4EEC+kEsCipjbG91ZHJlc291cmNlbWFuYWdlci5nb29nbGVhcGlzLmNvbS9Gb2xkZXIiewoSTGlzdEZvbGRlcnNSZXF1ZXN0EhkKBnBhcmVudBgBIAEoCUIJ4EEC+kEDEgEqEhYKCXBhZ2Vfc2l6ZRgCIAEoBUID4EEBEhcKCnBhZ2VfdG9rZW4YAyABKAlCA+BBARIZCgxzaG93X2RlbGV0ZWQYBCABKAhCA+BBASJoChNMaXN0Rm9sZGVyc1Jlc3BvbnNlEjgKB2ZvbGRlcnMYASADKAsyJy5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLkZvbGRlchIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiWwoUU2VhcmNoRm9sZGVyc1JlcXVlc3QSFgoJcGFnZV9zaXplGAEgASgFQgPgQQESFwoKcGFnZV90b2tlbhgCIAEoCUID4EEBEhIKBXF1ZXJ5GAMgASgJQgPgQQEiagoVU2VhcmNoRm9sZGVyc1Jlc3BvbnNlEjgKB2ZvbGRlcnMYASADKAsyJy5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLkZvbGRlchIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiUwoTQ3JlYXRlRm9sZGVyUmVxdWVzdBI8CgZmb2xkZXIYAiABKAsyJy5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLkZvbGRlckID4EECIjwKFENyZWF0ZUZvbGRlck1ldGFkYXRhEhQKDGRpc3BsYXlfbmFtZRgBIAEoCRIOCgZwYXJlbnQYAiABKAkiiQEKE1VwZGF0ZUZvbGRlclJlcXVlc3QSPAoGZm9sZGVyGAEgASgLMicuZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5Gb2xkZXJCA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAiIWChRVcGRhdGVGb2xkZXJNZXRhZGF0YSJ8ChFNb3ZlRm9sZGVyUmVxdWVzdBJACgRuYW1lGAEgASgJQjLgQQL6QSwKKmNsb3VkcmVzb3VyY2VtYW5hZ2VyLmdvb2dsZWFwaXMuY29tL0ZvbGRlchIlChJkZXN0aW5hdGlvbl9wYXJlbnQYAiABKAlCCeBBAvpBAxIBKiJdChJNb3ZlRm9sZGVyTWV0YWRhdGESFAoMZGlzcGxheV9uYW1lGAEgASgJEhUKDXNvdXJjZV9wYXJlbnQYAiABKAkSGgoSZGVzdGluYXRpb25fcGFyZW50GAMgASgJIlcKE0RlbGV0ZUZvbGRlclJlcXVlc3QSQAoEbmFtZRgBIAEoCUIy4EEC+kEsCipjbG91ZHJlc291cmNlbWFuYWdlci5nb29nbGVhcGlzLmNvbS9Gb2xkZXIiFgoURGVsZXRlRm9sZGVyTWV0YWRhdGEiWQoVVW5kZWxldGVGb2xkZXJSZXF1ZXN0EkAKBG5hbWUYASABKAlCMuBBAvpBLAoqY2xvdWRyZXNvdXJjZW1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vRm9sZGVyIhgKFlVuZGVsZXRlRm9sZGVyTWV0YWRhdGEy3g8KB0ZvbGRlcnMSjAEKCUdldEZvbGRlchIxLmdvb2dsZS5jbG91ZC5yZXNvdXJjZW1hbmFnZXIudjMuR2V0Rm9sZGVyUmVxdWVzdBonLmdvb2dsZS5jbG91ZC5yZXNvdXJjZW1hbmFnZXIudjMuRm9sZGVyIiPaQQRuYW1lgtPkkwIWEhQvdjMve25hbWU9Zm9sZGVycy8qfRKWAQoLTGlzdEZvbGRlcnMSMy5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLkxpc3RGb2xkZXJzUmVxdWVzdBo0Lmdvb2dsZS5jbG91ZC5yZXNvdXJjZW1hbmFnZXIudjMuTGlzdEZvbGRlcnNSZXNwb25zZSIc2kEGcGFyZW50gtPkkwINEgsvdjMvZm9sZGVycxKiAQoNU2VhcmNoRm9sZGVycxI1Lmdvb2dsZS5jbG91ZC5yZXNvdXJjZW1hbmFnZXIudjMuU2VhcmNoRm9sZGVyc1JlcXVlc3QaNi5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLlNlYXJjaEZvbGRlcnNSZXNwb25zZSIi2kEFcXVlcnmC0+STAhQSEi92My9mb2xkZXJzOnNlYXJjaBKqAQoMQ3JlYXRlRm9sZGVyEjQuZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5DcmVhdGVGb2xkZXJSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJFykEeCgZGb2xkZXISFENyZWF0ZUZvbGRlck1ldGFkYXRh2kEGZm9sZGVygtPkkwIVOgZmb2xkZXIiCy92My9mb2xkZXJzEsYBCgxVcGRhdGVGb2xkZXISNC5nb29nbGUuY2xvdWQucmVzb3VyY2VtYW5hZ2VyLnYzLlVwZGF0ZUZvbGRlclJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uImHKQR4KBkZvbGRlchIUVXBkYXRlRm9sZGVyTWV0YWRhdGHaQRJmb2xkZXIsdXBkYXRlX21hc2uC0+STAiU6BmZvbGRlcjIbL3YzL3tmb2xkZXIubmFtZT1mb2xkZXJzLyp9Er4BCgpNb3ZlRm9sZGVyEjIuZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5Nb3ZlRm9sZGVyUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iXcpBHAoGRm9sZGVyEhJNb3ZlRm9sZGVyTWV0YWRhdGHaQRduYW1lLGRlc3RpbmF0aW9uX3BhcmVudILT5JMCHjoBKiIZL3YzL3tuYW1lPWZvbGRlcnMvKn06bW92ZRKpAQoMRGVsZXRlRm9sZGVyEjQuZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5EZWxldGVGb2xkZXJSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJEykEeCgZGb2xkZXISFERlbGV0ZUZvbGRlck1ldGFkYXRh2kEEbmFtZYLT5JMCFioUL3YzL3tuYW1lPWZvbGRlcnMvKn0SuwEKDlVuZGVsZXRlRm9sZGVyEjYuZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52My5VbmRlbGV0ZUZvbGRlclJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIlLKQSAKBkZvbGRlchIWVW5kZWxldGVGb2xkZXJNZXRhZGF0YdpBBG5hbWWC0+STAiI6ASoiHS92My97bmFtZT1mb2xkZXJzLyp9OnVuZGVsZXRlEoYBCgxHZXRJYW1Qb2xpY3kSIi5nb29nbGUuaWFtLnYxLkdldElhbVBvbGljeVJlcXVlc3QaFS5nb29nbGUuaWFtLnYxLlBvbGljeSI72kEIcmVzb3VyY2WC0+STAio6ASoiJS92My97cmVzb3VyY2U9Zm9sZGVycy8qfTpnZXRJYW1Qb2xpY3kSjQEKDFNldElhbVBvbGljeRIiLmdvb2dsZS5pYW0udjEuU2V0SWFtUG9saWN5UmVxdWVzdBoVLmdvb2dsZS5pYW0udjEuUG9saWN5IkLaQQ9yZXNvdXJjZSxwb2xpY3mC0+STAio6ASoiJS92My97cmVzb3VyY2U9Zm9sZGVycy8qfTpzZXRJYW1Qb2xpY3kSuAEKElRlc3RJYW1QZXJtaXNzaW9ucxIoLmdvb2dsZS5pYW0udjEuVGVzdElhbVBlcm1pc3Npb25zUmVxdWVzdBopLmdvb2dsZS5pYW0udjEuVGVzdElhbVBlcm1pc3Npb25zUmVzcG9uc2UiTdpBFHJlc291cmNlLHBlcm1pc3Npb25zgtPkkwIwOgEqIisvdjMve3Jlc291cmNlPWZvbGRlcnMvKn06dGVzdElhbVBlcm1pc3Npb25zGpABykEjY2xvdWRyZXNvdXJjZW1hbmFnZXIuZ29vZ2xlYXBpcy5jb23SQWdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0ucmVhZC1vbmx5Qu0BCiNjb20uZ29vZ2xlLmNsb3VkLnJlc291cmNlbWFuYWdlci52M0IMRm9sZGVyc1Byb3RvUAFaTWNsb3VkLmdvb2dsZS5jb20vZ28vcmVzb3VyY2VtYW5hZ2VyL2FwaXYzL3Jlc291cmNlbWFuYWdlcnBiO3Jlc291cmNlbWFuYWdlcnBiqgIfR29vZ2xlLkNsb3VkLlJlc291cmNlTWFuYWdlci5WM8oCH0dvb2dsZVxDbG91ZFxSZXNvdXJjZU1hbmFnZXJcVjPqAiJHb29nbGU6OkNsb3VkOjpSZXNvdXJjZU1hbmFnZXI6OlYzYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_longrunning_operations, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A folder in an organization's resource hierarchy, used to
 * organize that organization's resources.
 *
 * @generated from message google.cloud.resourcemanager.v3.Folder
 */
export type Folder = Message<"google.cloud.resourcemanager.v3.Folder"> & {
  /**
   * Output only. The resource name of the folder.
   * Its format is `folders/{folder_id}`, for example: "folders/1234".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The folder's parent's resource name.
   * Updates to the folder's parent must be performed using
   * [MoveFolder][google.cloud.resourcemanager.v3.Folders.MoveFolder].
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The folder's display name.
   * A folder's display name must be unique amongst its siblings. For example,
   * no two folders with the same parent can share the same display name.
   * The display name must start and end with a letter or digit, may contain
   * letters, digits, spaces, hyphens and underscores and can be no longer
   * than 30 characters. This is captured by the regular expression:
   * `[\p{L}\p{N}]([\p{L}\p{N}_- ]{0,28}[\p{L}\p{N}])?`.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Output only. The lifecycle state of the folder.
   * Updates to the state must be performed using
   * [DeleteFolder][google.cloud.resourcemanager.v3.Folders.DeleteFolder] and
   * [UndeleteFolder][google.cloud.resourcemanager.v3.Folders.UndeleteFolder].
   *
   * @generated from field: google.cloud.resourcemanager.v3.Folder.State state = 4;
   */
  state: Folder_State;

  /**
   * Output only. Timestamp when the folder was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. Timestamp when the folder was last modified.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Timestamp when the folder was requested to be deleted.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 7;
   */
  deleteTime?: Timestamp;

  /**
   * Output only. A checksum computed by the server based on the current value
   * of the folder resource. This may be sent on update and delete requests to
   * ensure the client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 8;
   */
  etag: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.Folder.
 * Use `create(FolderSchema)` to create a new message.
 */
export const FolderSchema: GenMessage<Folder> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 0);

/**
 * Folder lifecycle states.
 *
 * @generated from enum google.cloud.resourcemanager.v3.Folder.State
 */
export enum Folder_State {
  /**
   * Unspecified state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The normal and active state.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The folder has been marked for deletion by the user.
   *
   * @generated from enum value: DELETE_REQUESTED = 2;
   */
  DELETE_REQUESTED = 2,
}

/**
 * Describes the enum google.cloud.resourcemanager.v3.Folder.State.
 */
export const Folder_StateSchema: GenEnum<Folder_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_resourcemanager_v3_folders, 0, 0);

/**
 * The GetFolder request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.GetFolderRequest
 */
export type GetFolderRequest = Message<"google.cloud.resourcemanager.v3.GetFolderRequest"> & {
  /**
   * Required. The resource name of the folder to retrieve.
   * Must be of the form `folders/{folder_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.GetFolderRequest.
 * Use `create(GetFolderRequestSchema)` to create a new message.
 */
export const GetFolderRequestSchema: GenMessage<GetFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 1);

/**
 * The ListFolders request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.ListFoldersRequest
 */
export type ListFoldersRequest = Message<"google.cloud.resourcemanager.v3.ListFoldersRequest"> & {
  /**
   * Required. The name of the parent resource whose folders are being listed.
   * Only children of this parent resource are listed; descendants are not
   * listed.
   *
   * If the parent is a folder, use the value `folders/{folder_id}`. If the
   * parent is an organization, use the value `organizations/{org_id}`.
   *
   * Access to this method is controlled by checking the
   * `resourcemanager.folders.list` permission on the `parent`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of folders to return in the response. The
   * server can return fewer folders than requested. If unspecified, server
   * picks an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A pagination token returned from a previous call to `ListFolders`
   * that indicates where this listing should continue from.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Controls whether folders in the
   * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
   * state should be returned. Defaults to false.
   *
   * @generated from field: bool show_deleted = 4;
   */
  showDeleted: boolean;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.ListFoldersRequest.
 * Use `create(ListFoldersRequestSchema)` to create a new message.
 */
export const ListFoldersRequestSchema: GenMessage<ListFoldersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 2);

/**
 * The ListFolders response message.
 *
 * @generated from message google.cloud.resourcemanager.v3.ListFoldersResponse
 */
export type ListFoldersResponse = Message<"google.cloud.resourcemanager.v3.ListFoldersResponse"> & {
  /**
   * A possibly paginated list of folders that are direct descendants of
   * the specified parent resource.
   *
   * @generated from field: repeated google.cloud.resourcemanager.v3.Folder folders = 1;
   */
  folders: Folder[];

  /**
   * A pagination token returned from a previous call to `ListFolders`
   * that indicates from where listing should continue.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.ListFoldersResponse.
 * Use `create(ListFoldersResponseSchema)` to create a new message.
 */
export const ListFoldersResponseSchema: GenMessage<ListFoldersResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 3);

/**
 * The request message for searching folders.
 *
 * @generated from message google.cloud.resourcemanager.v3.SearchFoldersRequest
 */
export type SearchFoldersRequest = Message<"google.cloud.resourcemanager.v3.SearchFoldersRequest"> & {
  /**
   * Optional. The maximum number of folders to return in the response. The
   * server can return fewer folders than requested. If unspecified, server
   * picks an appropriate default.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Optional. A pagination token returned from a previous call to
   * `SearchFolders` that indicates from where search should continue.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. Search criteria used to select the folders to return.
   * If no search criteria is specified then all accessible folders will be
   * returned.
   *
   * Query expressions can be used to restrict results based upon displayName,
   * state and parent, where the operators `=` (`:`) `NOT`, `AND` and `OR`
   * can be used along with the suffix wildcard symbol `*`.
   *
   * The `displayName` field in a query expression should use escaped quotes
   * for values that include whitespace to prevent unexpected behavior.
   *
   * ```
   * | Field                   | Description                            |
   * |-------------------------|----------------------------------------|
   * | displayName             | Filters by displayName.                |
   * | parent                  | Filters by parent (for example: folders/123). |
   * | state, lifecycleState   | Filters by state.                      |
   * ```
   *
   * Some example queries are:
   *
   * * Query `displayName=Test*` returns Folder resources whose display name
   * starts with "Test".
   * * Query `state=ACTIVE` returns Folder resources with
   * `state` set to `ACTIVE`.
   * * Query `parent=folders/123` returns Folder resources that have
   * `folders/123` as a parent resource.
   * * Query `parent=folders/123 AND state=ACTIVE` returns active
   * Folder resources that have `folders/123` as a parent resource.
   * * Query `displayName=\\"Test String\\"` returns Folder resources with
   * display names that include both "Test" and "String".
   *
   * @generated from field: string query = 3;
   */
  query: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.SearchFoldersRequest.
 * Use `create(SearchFoldersRequestSchema)` to create a new message.
 */
export const SearchFoldersRequestSchema: GenMessage<SearchFoldersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 4);

/**
 * The response message for searching folders.
 *
 * @generated from message google.cloud.resourcemanager.v3.SearchFoldersResponse
 */
export type SearchFoldersResponse = Message<"google.cloud.resourcemanager.v3.SearchFoldersResponse"> & {
  /**
   * A possibly paginated folder search results.
   * the specified parent resource.
   *
   * @generated from field: repeated google.cloud.resourcemanager.v3.Folder folders = 1;
   */
  folders: Folder[];

  /**
   * A pagination token returned from a previous call to `SearchFolders`
   * that indicates from where searching should continue.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.SearchFoldersResponse.
 * Use `create(SearchFoldersResponseSchema)` to create a new message.
 */
export const SearchFoldersResponseSchema: GenMessage<SearchFoldersResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 5);

/**
 * The CreateFolder request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.CreateFolderRequest
 */
export type CreateFolderRequest = Message<"google.cloud.resourcemanager.v3.CreateFolderRequest"> & {
  /**
   * Required. The folder being created, only the display name and parent will
   * be consulted. All other fields will be ignored.
   *
   * @generated from field: google.cloud.resourcemanager.v3.Folder folder = 2;
   */
  folder?: Folder;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.CreateFolderRequest.
 * Use `create(CreateFolderRequestSchema)` to create a new message.
 */
export const CreateFolderRequestSchema: GenMessage<CreateFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 6);

/**
 * Metadata pertaining to the Folder creation process.
 *
 * @generated from message google.cloud.resourcemanager.v3.CreateFolderMetadata
 */
export type CreateFolderMetadata = Message<"google.cloud.resourcemanager.v3.CreateFolderMetadata"> & {
  /**
   * The display name of the folder.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * The resource name of the folder or organization we are creating the folder
   * under.
   *
   * @generated from field: string parent = 2;
   */
  parent: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.CreateFolderMetadata.
 * Use `create(CreateFolderMetadataSchema)` to create a new message.
 */
export const CreateFolderMetadataSchema: GenMessage<CreateFolderMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 7);

/**
 * The request sent to the
 * [UpdateFolder][google.cloud.resourcemanager.v3.Folder.UpdateFolder]
 * method.
 *
 * Only the `display_name` field can be changed. All other fields will be
 * ignored. Use the
 * [MoveFolder][google.cloud.resourcemanager.v3.Folders.MoveFolder] method to
 * change the `parent` field.
 *
 * @generated from message google.cloud.resourcemanager.v3.UpdateFolderRequest
 */
export type UpdateFolderRequest = Message<"google.cloud.resourcemanager.v3.UpdateFolderRequest"> & {
  /**
   * Required. The new definition of the Folder. It must include the `name`
   * field, which cannot be changed.
   *
   * @generated from field: google.cloud.resourcemanager.v3.Folder folder = 1;
   */
  folder?: Folder;

  /**
   * Required. Fields to be updated.
   * Only the `display_name` can be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.UpdateFolderRequest.
 * Use `create(UpdateFolderRequestSchema)` to create a new message.
 */
export const UpdateFolderRequestSchema: GenMessage<UpdateFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 8);

/**
 * A status object which is used as the `metadata` field for the Operation
 * returned by UpdateFolder.
 *
 * @generated from message google.cloud.resourcemanager.v3.UpdateFolderMetadata
 */
export type UpdateFolderMetadata = Message<"google.cloud.resourcemanager.v3.UpdateFolderMetadata"> & {
};

/**
 * Describes the message google.cloud.resourcemanager.v3.UpdateFolderMetadata.
 * Use `create(UpdateFolderMetadataSchema)` to create a new message.
 */
export const UpdateFolderMetadataSchema: GenMessage<UpdateFolderMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 9);

/**
 * The MoveFolder request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.MoveFolderRequest
 */
export type MoveFolderRequest = Message<"google.cloud.resourcemanager.v3.MoveFolderRequest"> & {
  /**
   * Required. The resource name of the Folder to move.
   * Must be of the form folders/{folder_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The resource name of the folder or organization which should be
   * the folder's new parent. Must be of the form `folders/{folder_id}` or
   * `organizations/{org_id}`.
   *
   * @generated from field: string destination_parent = 2;
   */
  destinationParent: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.MoveFolderRequest.
 * Use `create(MoveFolderRequestSchema)` to create a new message.
 */
export const MoveFolderRequestSchema: GenMessage<MoveFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 10);

/**
 * Metadata pertaining to the folder move process.
 *
 * @generated from message google.cloud.resourcemanager.v3.MoveFolderMetadata
 */
export type MoveFolderMetadata = Message<"google.cloud.resourcemanager.v3.MoveFolderMetadata"> & {
  /**
   * The display name of the folder.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * The resource name of the folder's parent.
   *
   * @generated from field: string source_parent = 2;
   */
  sourceParent: string;

  /**
   * The resource name of the folder or organization to move the folder to.
   *
   * @generated from field: string destination_parent = 3;
   */
  destinationParent: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.MoveFolderMetadata.
 * Use `create(MoveFolderMetadataSchema)` to create a new message.
 */
export const MoveFolderMetadataSchema: GenMessage<MoveFolderMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 11);

/**
 * The DeleteFolder request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.DeleteFolderRequest
 */
export type DeleteFolderRequest = Message<"google.cloud.resourcemanager.v3.DeleteFolderRequest"> & {
  /**
   * Required. The resource name of the folder to be deleted.
   * Must be of the form `folders/{folder_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.DeleteFolderRequest.
 * Use `create(DeleteFolderRequestSchema)` to create a new message.
 */
export const DeleteFolderRequestSchema: GenMessage<DeleteFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 12);

/**
 * A status object which is used as the `metadata` field for the `Operation`
 * returned by `DeleteFolder`.
 *
 * @generated from message google.cloud.resourcemanager.v3.DeleteFolderMetadata
 */
export type DeleteFolderMetadata = Message<"google.cloud.resourcemanager.v3.DeleteFolderMetadata"> & {
};

/**
 * Describes the message google.cloud.resourcemanager.v3.DeleteFolderMetadata.
 * Use `create(DeleteFolderMetadataSchema)` to create a new message.
 */
export const DeleteFolderMetadataSchema: GenMessage<DeleteFolderMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 13);

/**
 * The UndeleteFolder request message.
 *
 * @generated from message google.cloud.resourcemanager.v3.UndeleteFolderRequest
 */
export type UndeleteFolderRequest = Message<"google.cloud.resourcemanager.v3.UndeleteFolderRequest"> & {
  /**
   * Required. The resource name of the folder to undelete.
   * Must be of the form `folders/{folder_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.resourcemanager.v3.UndeleteFolderRequest.
 * Use `create(UndeleteFolderRequestSchema)` to create a new message.
 */
export const UndeleteFolderRequestSchema: GenMessage<UndeleteFolderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 14);

/**
 * A status object which is used as the `metadata` field for the `Operation`
 * returned by `UndeleteFolder`.
 *
 * @generated from message google.cloud.resourcemanager.v3.UndeleteFolderMetadata
 */
export type UndeleteFolderMetadata = Message<"google.cloud.resourcemanager.v3.UndeleteFolderMetadata"> & {
};

/**
 * Describes the message google.cloud.resourcemanager.v3.UndeleteFolderMetadata.
 * Use `create(UndeleteFolderMetadataSchema)` to create a new message.
 */
export const UndeleteFolderMetadataSchema: GenMessage<UndeleteFolderMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_resourcemanager_v3_folders, 15);

/**
 * Manages Cloud Platform folder resources.
 * Folders can be used to organize the resources under an
 * organization and to control the policies applied to groups of resources.
 *
 * @generated from service google.cloud.resourcemanager.v3.Folders
 */
export const Folders: GenService<{
  /**
   * Retrieves a folder identified by the supplied resource name.
   * Valid folder resource names have the format `folders/{folder_id}`
   * (for example, `folders/1234`).
   * The caller must have `resourcemanager.folders.get` permission on the
   * identified folder.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.GetFolder
   */
  getFolder: {
    methodKind: "unary";
    input: typeof GetFolderRequestSchema;
    output: typeof FolderSchema;
  },
  /**
   * Lists the folders that are direct descendants of supplied parent resource.
   * `list()` provides a strongly consistent view of the folders underneath
   * the specified parent resource.
   * `list()` returns folders sorted based upon the (ascending) lexical ordering
   * of their display_name.
   * The caller must have `resourcemanager.folders.list` permission on the
   * identified parent.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.ListFolders
   */
  listFolders: {
    methodKind: "unary";
    input: typeof ListFoldersRequestSchema;
    output: typeof ListFoldersResponseSchema;
  },
  /**
   * Search for folders that match specific filter criteria.
   * `search()` provides an eventually consistent view of the folders a user has
   * access to which meet the specified filter criteria.
   *
   * This will only return folders on which the caller has the
   * permission `resourcemanager.folders.get`.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.SearchFolders
   */
  searchFolders: {
    methodKind: "unary";
    input: typeof SearchFoldersRequestSchema;
    output: typeof SearchFoldersResponseSchema;
  },
  /**
   * Creates a folder in the resource hierarchy.
   * Returns an `Operation` which can be used to track the progress of the
   * folder creation workflow.
   * Upon success, the `Operation.response` field will be populated with the
   * created Folder.
   *
   * In order to succeed, the addition of this new folder must not violate
   * the folder naming, height, or fanout constraints.
   *
   * + The folder's `display_name` must be distinct from all other folders that
   * share its parent.
   * + The addition of the folder must not cause the active folder hierarchy
   * to exceed a height of 10. Note, the full active + deleted folder hierarchy
   * is allowed to reach a height of 20; this provides additional headroom when
   * moving folders that contain deleted folders.
   * + The addition of the folder must not cause the total number of folders
   * under its parent to exceed 300.
   *
   * If the operation fails due to a folder constraint violation, some errors
   * may be returned by the `CreateFolder` request, with status code
   * `FAILED_PRECONDITION` and an error description. Other folder constraint
   * violations will be communicated in the `Operation`, with the specific
   * `PreconditionFailure` returned in the details list in the `Operation.error`
   * field.
   *
   * The caller must have `resourcemanager.folders.create` permission on the
   * identified parent.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.CreateFolder
   */
  createFolder: {
    methodKind: "unary";
    input: typeof CreateFolderRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a folder, changing its `display_name`.
   * Changes to the folder `display_name` will be rejected if they violate
   * either the `display_name` formatting rules or the naming constraints
   * described in the
   * [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
   * documentation.
   *
   * The folder's `display_name` must start and end with a letter or digit,
   * may contain letters, digits, spaces, hyphens and underscores and can be
   * between 3 and 30 characters. This is captured by the regular expression:
   * `[\p{L}\p{N}][\p{L}\p{N}_- ]{1,28}[\p{L}\p{N}]`.
   * The caller must have `resourcemanager.folders.update` permission on the
   * identified folder.
   *
   * If the update fails due to the unique name constraint then a
   * `PreconditionFailure` explaining this violation will be returned
   * in the Status.details field.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.UpdateFolder
   */
  updateFolder: {
    methodKind: "unary";
    input: typeof UpdateFolderRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Moves a folder under a new resource parent.
   * Returns an `Operation` which can be used to track the progress of the
   * folder move workflow.
   * Upon success, the `Operation.response` field will be populated with the
   * moved folder.
   * Upon failure, a `FolderOperationError` categorizing the failure cause will
   * be returned - if the failure occurs synchronously then the
   * `FolderOperationError` will be returned in the `Status.details` field.
   * If it occurs asynchronously, then the FolderOperation will be returned
   * in the `Operation.error` field.
   * In addition, the `Operation.metadata` field will be populated with a
   * `FolderOperation` message as an aid to stateless clients.
   * Folder moves will be rejected if they violate either the naming, height,
   * or fanout constraints described in the
   * [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
   * documentation. The caller must have `resourcemanager.folders.move`
   * permission on the folder's current and proposed new parent.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.MoveFolder
   */
  moveFolder: {
    methodKind: "unary";
    input: typeof MoveFolderRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Requests deletion of a folder. The folder is moved into the
   * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
   * state immediately, and is deleted approximately 30 days later. This method
   * may only be called on an empty folder, where a folder is empty if it
   * doesn't contain any folders or projects in the
   * [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. If
   * called on a folder in
   * [DELETE_REQUESTED][google.cloud.resourcemanager.v3.Folder.State.DELETE_REQUESTED]
   * state the operation will result in a no-op success.
   * The caller must have `resourcemanager.folders.delete` permission on the
   * identified folder.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.DeleteFolder
   */
  deleteFolder: {
    methodKind: "unary";
    input: typeof DeleteFolderRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Cancels the deletion request for a folder. This method may be called on a
   * folder in any state. If the folder is in the
   * [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state the
   * result will be a no-op success. In order to succeed, the folder's parent
   * must be in the
   * [ACTIVE][google.cloud.resourcemanager.v3.Folder.State.ACTIVE] state. In
   * addition, reintroducing the folder into the tree must not violate folder
   * naming, height, and fanout constraints described in the
   * [CreateFolder][google.cloud.resourcemanager.v3.Folders.CreateFolder]
   * documentation. The caller must have `resourcemanager.folders.undelete`
   * permission on the identified folder.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.UndeleteFolder
   */
  undeleteFolder: {
    methodKind: "unary";
    input: typeof UndeleteFolderRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the access control policy for a folder. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the folder's resource name, for example: "folders/1234".
   * The caller must have `resourcemanager.folders.getIamPolicy` permission
   * on the identified folder.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.GetIamPolicy
   */
  getIamPolicy: {
    methodKind: "unary";
    input: typeof GetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Sets the access control policy on a folder, replacing any existing policy.
   * The `resource` field should be the folder's resource name, for example:
   * "folders/1234".
   * The caller must have `resourcemanager.folders.setIamPolicy` permission
   * on the identified folder.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.SetIamPolicy
   */
  setIamPolicy: {
    methodKind: "unary";
    input: typeof SetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Returns permissions that a caller has on the specified folder.
   * The `resource` field should be the folder's resource name,
   * for example: "folders/1234".
   *
   * There are no permissions required for making this API call.
   *
   * @generated from rpc google.cloud.resourcemanager.v3.Folders.TestIamPermissions
   */
  testIamPermissions: {
    methodKind: "unary";
    input: typeof TestIamPermissionsRequestSchema;
    output: typeof TestIamPermissionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_resourcemanager_v3_folders, 0);

