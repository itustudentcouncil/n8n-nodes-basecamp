// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/channel/v1/reports_service.proto (package google.cloud.channel.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import { file_google_cloud_channel_v1_operations } from "./operations_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { DateTime } from "../../../type/datetime_pb";
import { file_google_type_datetime } from "../../../type/datetime_pb";
import type { Decimal } from "../../../type/decimal_pb";
import { file_google_type_decimal } from "../../../type/decimal_pb";
import type { Money } from "../../../type/money_pb";
import { file_google_type_money } from "../../../type/money_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/channel/v1/reports_service.proto.
 */
export const file_google_cloud_channel_v1_reports_service: GenFile = /*@__PURE__*/
  fileDesc("Ci1nb29nbGUvY2xvdWQvY2hhbm5lbC92MS9yZXBvcnRzX3NlcnZpY2UucHJvdG8SF2dvb2dsZS5jbG91ZC5jaGFubmVsLnYxIsEBChNSdW5SZXBvcnRKb2JSZXF1ZXN0EjgKBG5hbWUYASABKAlCKuBBAvpBJAoiY2xvdWRjaGFubmVsLmdvb2dsZWFwaXMuY29tL1JlcG9ydBI7CgpkYXRlX3JhbmdlGAIgASgLMiIuZ29vZ2xlLmNsb3VkLmNoYW5uZWwudjEuRGF0ZVJhbmdlQgPgQQESEwoGZmlsdGVyGAMgASgJQgPgQQESGgoNbGFuZ3VhZ2VfY29kZRgEIAEoCUID4EEBOgIYASKbAQoUUnVuUmVwb3J0Sm9iUmVzcG9uc2USNgoKcmVwb3J0X2pvYhgBIAEoCzIiLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLlJlcG9ydEpvYhJHCg9yZXBvcnRfbWV0YWRhdGEYAiABKAsyLi5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5SZXBvcnRSZXN1bHRzTWV0YWRhdGE6AhgBIrABChlGZXRjaFJlcG9ydFJlc3VsdHNSZXF1ZXN0EkEKCnJlcG9ydF9qb2IYASABKAlCLeBBAvpBJwolY2xvdWRjaGFubmVsLmdvb2dsZWFwaXMuY29tL1JlcG9ydEpvYhIWCglwYWdlX3NpemUYAiABKAVCA+BBARIXCgpwYWdlX3Rva2VuGAMgASgJQgPgQQESGwoOcGFydGl0aW9uX2tleXMYBCADKAlCA+BBAToCGAEirgEKGkZldGNoUmVwb3J0UmVzdWx0c1Jlc3BvbnNlEkcKD3JlcG9ydF9tZXRhZGF0YRgBIAEoCzIuLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLlJlcG9ydFJlc3VsdHNNZXRhZGF0YRIqCgRyb3dzGAIgAygLMhwuZ29vZ2xlLmNsb3VkLmNoYW5uZWwudjEuUm93EhcKD25leHRfcGFnZV90b2tlbhgDIAEoCToCGAEiegoSTGlzdFJlcG9ydHNSZXF1ZXN0EhMKBnBhcmVudBgBIAEoCUID4EECEhYKCXBhZ2Vfc2l6ZRgCIAEoBUID4EEBEhcKCnBhZ2VfdG9rZW4YAyABKAlCA+BBARIaCg1sYW5ndWFnZV9jb2RlGAQgASgJQgPgQQE6AhgBImQKE0xpc3RSZXBvcnRzUmVzcG9uc2USMAoHcmVwb3J0cxgBIAMoCzIfLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLlJlcG9ydBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAk6AhgBIrYBCglSZXBvcnRKb2ISEQoEbmFtZRgBIAEoCUID4EECEjwKDXJlcG9ydF9zdGF0dXMYAiABKAsyJS5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5SZXBvcnRTdGF0dXM6WBgB6kFTCiVjbG91ZGNoYW5uZWwuZ29vZ2xlYXBpcy5jb20vUmVwb3J0Sm9iEiphY2NvdW50cy97YWNjb3VudH0vcmVwb3J0Sm9icy97cmVwb3J0X2pvYn0i2QEKFVJlcG9ydFJlc3VsdHNNZXRhZGF0YRIvCgZyZXBvcnQYASABKAsyHy5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5SZXBvcnQSEQoJcm93X2NvdW50GAIgASgDEjYKCmRhdGVfcmFuZ2UYAyABKAsyIi5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5EYXRlUmFuZ2USQAoUcHJlY2VkaW5nX2RhdGVfcmFuZ2UYBCABKAsyIi5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5EYXRlUmFuZ2U6AhgBIt8BCgZDb2x1bW4SEQoJY29sdW1uX2lkGAEgASgJEhQKDGRpc3BsYXlfbmFtZRgCIAEoCRI7CglkYXRhX3R5cGUYAyABKA4yKC5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5Db2x1bW4uRGF0YVR5cGUiawoIRGF0YVR5cGUSGQoVREFUQV9UWVBFX1VOU1BFQ0lGSUVEEAASCgoGU1RSSU5HEAESBwoDSU5UEAISCwoHREVDSU1BTBADEgkKBU1PTkVZEAQSCAoEREFURRAFEg0KCURBVEVfVElNRRAGOgIYASLVAQoJRGF0ZVJhbmdlEjQKFXVzYWdlX3N0YXJ0X2RhdGVfdGltZRgBIAEoCzIVLmdvb2dsZS50eXBlLkRhdGVUaW1lEjIKE3VzYWdlX2VuZF9kYXRlX3RpbWUYAiABKAsyFS5nb29nbGUudHlwZS5EYXRlVGltZRItChJpbnZvaWNlX3N0YXJ0X2RhdGUYAyABKAsyES5nb29nbGUudHlwZS5EYXRlEisKEGludm9pY2VfZW5kX2RhdGUYBCABKAsyES5nb29nbGUudHlwZS5EYXRlOgIYASJWCgNSb3cSNAoGdmFsdWVzGAEgAygLMiQuZ29vZ2xlLmNsb3VkLmNoYW5uZWwudjEuUmVwb3J0VmFsdWUSFQoNcGFydGl0aW9uX2tleRgCIAEoCToCGAEi/AEKC1JlcG9ydFZhbHVlEhYKDHN0cmluZ192YWx1ZRgBIAEoCUgAEhMKCWludF92YWx1ZRgCIAEoA0gAEi0KDWRlY2ltYWxfdmFsdWUYAyABKAsyFC5nb29nbGUudHlwZS5EZWNpbWFsSAASKQoLbW9uZXlfdmFsdWUYBCABKAsyEi5nb29nbGUudHlwZS5Nb25leUgAEicKCmRhdGVfdmFsdWUYBSABKAsyES5nb29nbGUudHlwZS5EYXRlSAASMAoPZGF0ZV90aW1lX3ZhbHVlGAYgASgLMhUuZ29vZ2xlLnR5cGUuRGF0ZVRpbWVIADoCGAFCBwoFdmFsdWUigQIKDFJlcG9ydFN0YXR1cxI6CgVzdGF0ZRgBIAEoDjIrLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLlJlcG9ydFN0YXR1cy5TdGF0ZRIuCgpzdGFydF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiUwoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABILCgdTVEFSVEVEEAESCwoHV1JJVElORxACEg0KCUFWQUlMQUJMRRADEgoKBkZBSUxFRBAEOgIYASLIAQoGUmVwb3J0EhEKBG5hbWUYASABKAlCA+BBAhIUCgxkaXNwbGF5X25hbWUYAiABKAkSMAoHY29sdW1ucxgDIAMoCzIfLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLkNvbHVtbhITCgtkZXNjcmlwdGlvbhgEIAEoCTpOGAHqQUkKImNsb3VkY2hhbm5lbC5nb29nbGVhcGlzLmNvbS9SZXBvcnQSI2FjY291bnRzL3thY2NvdW50fS9yZXBvcnRzL3tyZXBvcnR9MrIFChpDbG91ZENoYW5uZWxSZXBvcnRzU2VydmljZRK6AQoMUnVuUmVwb3J0Sm9iEiwuZ29vZ2xlLmNsb3VkLmNoYW5uZWwudjEuUnVuUmVwb3J0Sm9iUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iXYgCAcpBKQoUUnVuUmVwb3J0Sm9iUmVzcG9uc2USEU9wZXJhdGlvbk1ldGFkYXRhgtPkkwIoOgEqIiMvdjEve25hbWU9YWNjb3VudHMvKi9yZXBvcnRzLyp9OnJ1bhLVAQoSRmV0Y2hSZXBvcnRSZXN1bHRzEjIuZ29vZ2xlLmNsb3VkLmNoYW5uZWwudjEuRmV0Y2hSZXBvcnRSZXN1bHRzUmVxdWVzdBozLmdvb2dsZS5jbG91ZC5jaGFubmVsLnYxLkZldGNoUmVwb3J0UmVzdWx0c1Jlc3BvbnNlIlaIAgHaQQpyZXBvcnRfam9igtPkkwJAOgEqIjsvdjEve3JlcG9ydF9qb2I9YWNjb3VudHMvKi9yZXBvcnRKb2JzLyp9OmZldGNoUmVwb3J0UmVzdWx0cxKdAQoLTGlzdFJlcG9ydHMSKy5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5MaXN0UmVwb3J0c1JlcXVlc3QaLC5nb29nbGUuY2xvdWQuY2hhbm5lbC52MS5MaXN0UmVwb3J0c1Jlc3BvbnNlIjOIAgHaQQZwYXJlbnSC0+STAiESHy92MS97cGFyZW50PWFjY291bnRzLyp9L3JlcG9ydHMaX4gCAcpBG2Nsb3VkY2hhbm5lbC5nb29nbGVhcGlzLmNvbdJBO2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvYXBwcy5yZXBvcnRzLnVzYWdlLnJlYWRvbmx5QmsKG2NvbS5nb29nbGUuY2xvdWQuY2hhbm5lbC52MUITUmVwb3J0c1NlcnZpY2VQcm90b1ABWjVjbG91ZC5nb29nbGUuY29tL2dvL2NoYW5uZWwvYXBpdjEvY2hhbm5lbHBiO2NoYW5uZWxwYmIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_channel_v1_operations, file_google_longrunning_operations, file_google_protobuf_timestamp, file_google_type_date, file_google_type_datetime, file_google_type_decimal, file_google_type_money]);

/**
 * Request message for
 * [CloudChannelReportsService.RunReportJob][google.cloud.channel.v1.CloudChannelReportsService.RunReportJob].
 *
 * @generated from message google.cloud.channel.v1.RunReportJobRequest
 * @deprecated
 */
export type RunReportJobRequest = Message<"google.cloud.channel.v1.RunReportJobRequest"> & {
  /**
   * Required. The report's resource name. Specifies the account and report used
   * to generate report data. The report_id identifier is a UID (for example,
   * `613bf59q`).
   * Name uses the format:
   * accounts/{account_id}/reports/{report_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The range of usage or invoice dates to include in the result.
   *
   * @generated from field: google.cloud.channel.v1.DateRange date_range = 2;
   */
  dateRange?: DateRange;

  /**
   * Optional. A structured string that defines conditions on dimension columns
   * to restrict the report output.
   *
   * Filters support logical operators (AND, OR, NOT) and conditional operators
   * (=, !=, <, >, <=, and >=) using `column_id` as keys.
   *
   * For example:
   * `(customer:"accounts/C123abc/customers/S456def" OR
   * customer:"accounts/C123abc/customers/S789ghi") AND
   * invoice_start_date.year >= 2022`
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Optional. The BCP-47 language code, such as "en-US".  If specified, the
   * response is localized to the corresponding language code if the
   * original data sources support it.
   * Default is "en-US".
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.channel.v1.RunReportJobRequest.
 * Use `create(RunReportJobRequestSchema)` to create a new message.
 * @deprecated
 */
export const RunReportJobRequestSchema: GenMessage<RunReportJobRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 0);

/**
 * Response message for
 * [CloudChannelReportsService.RunReportJob][google.cloud.channel.v1.CloudChannelReportsService.RunReportJob].
 *
 * @generated from message google.cloud.channel.v1.RunReportJobResponse
 * @deprecated
 */
export type RunReportJobResponse = Message<"google.cloud.channel.v1.RunReportJobResponse"> & {
  /**
   * Pass `report_job.name` to
   * [FetchReportResultsRequest.report_job][google.cloud.channel.v1.FetchReportResultsRequest.report_job]
   * to retrieve the report's results.
   *
   * @generated from field: google.cloud.channel.v1.ReportJob report_job = 1;
   */
  reportJob?: ReportJob;

  /**
   * The metadata for the report's results (display name, columns, row count,
   * and date range). If you view this before the operation finishes,
   * you may see incomplete data.
   *
   * @generated from field: google.cloud.channel.v1.ReportResultsMetadata report_metadata = 2;
   */
  reportMetadata?: ReportResultsMetadata;
};

/**
 * Describes the message google.cloud.channel.v1.RunReportJobResponse.
 * Use `create(RunReportJobResponseSchema)` to create a new message.
 * @deprecated
 */
export const RunReportJobResponseSchema: GenMessage<RunReportJobResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 1);

/**
 * Request message for
 * [CloudChannelReportsService.FetchReportResults][google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults].
 *
 * @generated from message google.cloud.channel.v1.FetchReportResultsRequest
 * @deprecated
 */
export type FetchReportResultsRequest = Message<"google.cloud.channel.v1.FetchReportResultsRequest"> & {
  /**
   * Required. The report job created by
   * [CloudChannelReportsService.RunReportJob][google.cloud.channel.v1.CloudChannelReportsService.RunReportJob].
   * Report_job uses the format:
   * accounts/{account_id}/reportJobs/{report_job_id}
   *
   * @generated from field: string report_job = 1;
   */
  reportJob: string;

  /**
   * Optional. Requested page size of the report. The server may return fewer
   * results than requested. If you don't specify a page size, the server uses a
   * sensible default (may change over time).
   *
   * The maximum value is 30,000; the server will change larger values to
   * 30,000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token that specifies a page of results beyond the first page.
   * Obtained through
   * [FetchReportResultsResponse.next_page_token][google.cloud.channel.v1.FetchReportResultsResponse.next_page_token]
   * of the previous
   * [CloudChannelReportsService.FetchReportResults][google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults]
   * call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. List of keys specifying which report partitions to return.
   * If empty, returns all partitions.
   *
   * @generated from field: repeated string partition_keys = 4;
   */
  partitionKeys: string[];
};

/**
 * Describes the message google.cloud.channel.v1.FetchReportResultsRequest.
 * Use `create(FetchReportResultsRequestSchema)` to create a new message.
 * @deprecated
 */
export const FetchReportResultsRequestSchema: GenMessage<FetchReportResultsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 2);

/**
 * Response message for
 * [CloudChannelReportsService.FetchReportResults][google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults].
 * Contains a tabular representation of the report results.
 *
 * @generated from message google.cloud.channel.v1.FetchReportResultsResponse
 * @deprecated
 */
export type FetchReportResultsResponse = Message<"google.cloud.channel.v1.FetchReportResultsResponse"> & {
  /**
   * The metadata for the report results (display name, columns, row count, and
   * date ranges).
   *
   * @generated from field: google.cloud.channel.v1.ReportResultsMetadata report_metadata = 1;
   */
  reportMetadata?: ReportResultsMetadata;

  /**
   * The report's lists of values. Each row follows the settings and ordering
   * of the columns from `report_metadata`.
   *
   * @generated from field: repeated google.cloud.channel.v1.Row rows = 2;
   */
  rows: Row[];

  /**
   * Pass this token to
   * [FetchReportResultsRequest.page_token][google.cloud.channel.v1.FetchReportResultsRequest.page_token]
   * to retrieve the next page of results.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.channel.v1.FetchReportResultsResponse.
 * Use `create(FetchReportResultsResponseSchema)` to create a new message.
 * @deprecated
 */
export const FetchReportResultsResponseSchema: GenMessage<FetchReportResultsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 3);

/**
 * Request message for
 * [CloudChannelReportsService.ListReports][google.cloud.channel.v1.CloudChannelReportsService.ListReports].
 *
 * @generated from message google.cloud.channel.v1.ListReportsRequest
 * @deprecated
 */
export type ListReportsRequest = Message<"google.cloud.channel.v1.ListReportsRequest"> & {
  /**
   * Required. The resource name of the partner account to list available
   * reports for. Parent uses the format: accounts/{account_id}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Requested page size of the report. The server might return fewer
   * results than requested. If unspecified, returns 20 reports. The maximum
   * value is 100.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token that specifies a page of results beyond the first page.
   * Obtained through
   * [ListReportsResponse.next_page_token][google.cloud.channel.v1.ListReportsResponse.next_page_token]
   * of the previous
   * [CloudChannelReportsService.ListReports][google.cloud.channel.v1.CloudChannelReportsService.ListReports]
   * call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The BCP-47 language code, such as "en-US".  If specified, the
   * response is localized to the corresponding language code if the
   * original data sources support it.
   * Default is "en-US".
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.channel.v1.ListReportsRequest.
 * Use `create(ListReportsRequestSchema)` to create a new message.
 * @deprecated
 */
export const ListReportsRequestSchema: GenMessage<ListReportsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 4);

/**
 * Response message for
 * [CloudChannelReportsService.ListReports][google.cloud.channel.v1.CloudChannelReportsService.ListReports].
 *
 * @generated from message google.cloud.channel.v1.ListReportsResponse
 * @deprecated
 */
export type ListReportsResponse = Message<"google.cloud.channel.v1.ListReportsResponse"> & {
  /**
   * The reports available to the partner.
   *
   * @generated from field: repeated google.cloud.channel.v1.Report reports = 1;
   */
  reports: Report[];

  /**
   * Pass this token to
   * [FetchReportResultsRequest.page_token][google.cloud.channel.v1.FetchReportResultsRequest.page_token]
   * to retrieve the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.channel.v1.ListReportsResponse.
 * Use `create(ListReportsResponseSchema)` to create a new message.
 * @deprecated
 */
export const ListReportsResponseSchema: GenMessage<ListReportsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 5);

/**
 * The result of a [RunReportJob][] operation. Contains the name to use in
 * [FetchReportResultsRequest.report_job][google.cloud.channel.v1.FetchReportResultsRequest.report_job]
 * and the status of the operation.
 *
 * @generated from message google.cloud.channel.v1.ReportJob
 * @deprecated
 */
export type ReportJob = Message<"google.cloud.channel.v1.ReportJob"> & {
  /**
   * Required. The resource name of a report job.
   * Name uses the format:
   * `accounts/{account_id}/reportJobs/{report_job_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The current status of report generation.
   *
   * @generated from field: google.cloud.channel.v1.ReportStatus report_status = 2;
   */
  reportStatus?: ReportStatus;
};

/**
 * Describes the message google.cloud.channel.v1.ReportJob.
 * Use `create(ReportJobSchema)` to create a new message.
 * @deprecated
 */
export const ReportJobSchema: GenMessage<ReportJob> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 6);

/**
 * The features describing the data. Returned by
 * [CloudChannelReportsService.RunReportJob][google.cloud.channel.v1.CloudChannelReportsService.RunReportJob]
 * and
 * [CloudChannelReportsService.FetchReportResults][google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults].
 *
 * @generated from message google.cloud.channel.v1.ReportResultsMetadata
 * @deprecated
 */
export type ReportResultsMetadata = Message<"google.cloud.channel.v1.ReportResultsMetadata"> & {
  /**
   * Details of the completed report.
   *
   * @generated from field: google.cloud.channel.v1.Report report = 1;
   */
  report?: Report;

  /**
   * The total number of rows of data in the final report.
   *
   * @generated from field: int64 row_count = 2;
   */
  rowCount: bigint;

  /**
   * The date range of reported usage.
   *
   * @generated from field: google.cloud.channel.v1.DateRange date_range = 3;
   */
  dateRange?: DateRange;

  /**
   * The usage dates immediately preceding `date_range` with the same duration.
   * Use this to calculate trending usage and costs. This is only populated if
   * you request trending data.
   *
   * For example, if `date_range` is July 1-15, `preceding_date_range` will be
   * June 16-30.
   *
   * @generated from field: google.cloud.channel.v1.DateRange preceding_date_range = 4;
   */
  precedingDateRange?: DateRange;
};

/**
 * Describes the message google.cloud.channel.v1.ReportResultsMetadata.
 * Use `create(ReportResultsMetadataSchema)` to create a new message.
 * @deprecated
 */
export const ReportResultsMetadataSchema: GenMessage<ReportResultsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 7);

/**
 * The definition of a report column. Specifies the data properties
 * in the corresponding position of the report rows.
 *
 * @generated from message google.cloud.channel.v1.Column
 * @deprecated
 */
export type Column = Message<"google.cloud.channel.v1.Column"> & {
  /**
   * The unique name of the column (for example, customer_domain,
   * channel_partner, customer_cost). You can use column IDs in
   * [RunReportJobRequest.filter][google.cloud.channel.v1.RunReportJobRequest.filter].
   * To see all reports and their columns, call
   * [CloudChannelReportsService.ListReports][google.cloud.channel.v1.CloudChannelReportsService.ListReports].
   *
   * @generated from field: string column_id = 1;
   */
  columnId: string;

  /**
   * The column's display name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * The type of the values for this column.
   *
   * @generated from field: google.cloud.channel.v1.Column.DataType data_type = 3;
   */
  dataType: Column_DataType;
};

/**
 * Describes the message google.cloud.channel.v1.Column.
 * Use `create(ColumnSchema)` to create a new message.
 * @deprecated
 */
export const ColumnSchema: GenMessage<Column> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 8);

/**
 * Available data types for columns. Corresponds to the fields in the
 * ReportValue `oneof` field.
 *
 * @generated from enum google.cloud.channel.v1.Column.DataType
 * @deprecated
 */
export enum Column_DataType {
  /**
   * Not used.
   *
   * @generated from enum value: DATA_TYPE_UNSPECIFIED = 0;
   */
  DATA_TYPE_UNSPECIFIED = 0,

  /**
   * ReportValues for this column will use string_value.
   *
   * @generated from enum value: STRING = 1;
   */
  STRING = 1,

  /**
   * ReportValues for this column will use int_value.
   *
   * @generated from enum value: INT = 2;
   */
  INT = 2,

  /**
   * ReportValues for this column will use decimal_value.
   *
   * @generated from enum value: DECIMAL = 3;
   */
  DECIMAL = 3,

  /**
   * ReportValues for this column will use money_value.
   *
   * @generated from enum value: MONEY = 4;
   */
  MONEY = 4,

  /**
   * ReportValues for this column will use date_value.
   *
   * @generated from enum value: DATE = 5;
   */
  DATE = 5,

  /**
   * ReportValues for this column will use date_time_value.
   *
   * @generated from enum value: DATE_TIME = 6;
   */
  DATE_TIME = 6,
}

/**
 * Describes the enum google.cloud.channel.v1.Column.DataType.
 * @deprecated
 */
export const Column_DataTypeSchema: GenEnum<Column_DataType> = /*@__PURE__*/
  enumDesc(file_google_cloud_channel_v1_reports_service, 8, 0);

/**
 * A representation of usage or invoice date ranges.
 *
 * @generated from message google.cloud.channel.v1.DateRange
 * @deprecated
 */
export type DateRange = Message<"google.cloud.channel.v1.DateRange"> & {
  /**
   * The earliest usage date time (inclusive).
   *
   * If you use time groupings (daily, weekly, etc), each group uses
   * midnight to midnight (Pacific time). The usage start date is
   * rounded down to include all usage from the specified date. We recommend
   * that clients pass `usage_start_date_time` in Pacific time.
   *
   * @generated from field: google.type.DateTime usage_start_date_time = 1;
   */
  usageStartDateTime?: DateTime;

  /**
   * The latest usage date time (exclusive).
   *
   * If you use time groupings (daily, weekly, etc), each group uses
   * midnight to midnight (Pacific time). The usage end date is
   * rounded down to include all usage from the specified date. We recommend
   * that clients pass `usage_start_date_time` in Pacific time.
   *
   * @generated from field: google.type.DateTime usage_end_date_time = 2;
   */
  usageEndDateTime?: DateTime;

  /**
   * The earliest invoice date (inclusive).
   *
   * If this value is not the first day of a month, this will move it back to
   * the first day of the given month.
   *
   * @generated from field: google.type.Date invoice_start_date = 3;
   */
  invoiceStartDate?: Date;

  /**
   * The latest invoice date (inclusive).
   *
   * If this value is not the last day of a month, this will move it forward to
   * the last day of the given month.
   *
   * @generated from field: google.type.Date invoice_end_date = 4;
   */
  invoiceEndDate?: Date;
};

/**
 * Describes the message google.cloud.channel.v1.DateRange.
 * Use `create(DateRangeSchema)` to create a new message.
 * @deprecated
 */
export const DateRangeSchema: GenMessage<DateRange> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 9);

/**
 * A row of report values.
 *
 * @generated from message google.cloud.channel.v1.Row
 * @deprecated
 */
export type Row = Message<"google.cloud.channel.v1.Row"> & {
  /**
   * The list of values in the row.
   *
   * @generated from field: repeated google.cloud.channel.v1.ReportValue values = 1;
   */
  values: ReportValue[];

  /**
   * The key for the partition this row belongs to. This field is empty
   * if the report is not partitioned.
   *
   * @generated from field: string partition_key = 2;
   */
  partitionKey: string;
};

/**
 * Describes the message google.cloud.channel.v1.Row.
 * Use `create(RowSchema)` to create a new message.
 * @deprecated
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 10);

/**
 * A single report value.
 *
 * @generated from message google.cloud.channel.v1.ReportValue
 * @deprecated
 */
export type ReportValue = Message<"google.cloud.channel.v1.ReportValue"> & {
  /**
   * A single report value.
   *
   * @generated from oneof google.cloud.channel.v1.ReportValue.value
   * @deprecated
   */
  value: {
    /**
     * A value of type `string`.
     *
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * A value of type `int`.
     *
     * @generated from field: int64 int_value = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * A value of type `google.type.Decimal`, representing non-integer numeric
     * values.
     *
     * @generated from field: google.type.Decimal decimal_value = 3;
     */
    value: Decimal;
    case: "decimalValue";
  } | {
    /**
     * A value of type `google.type.Money` (currency code, whole units, decimal
     * units).
     *
     * @generated from field: google.type.Money money_value = 4;
     */
    value: Money;
    case: "moneyValue";
  } | {
    /**
     * A value of type `google.type.Date` (year, month, day).
     *
     * @generated from field: google.type.Date date_value = 5;
     */
    value: Date;
    case: "dateValue";
  } | {
    /**
     * A value of type `google.type.DateTime` (year, month, day, hour, minute,
     * second, and UTC offset or timezone.)
     *
     * @generated from field: google.type.DateTime date_time_value = 6;
     */
    value: DateTime;
    case: "dateTimeValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.channel.v1.ReportValue.
 * Use `create(ReportValueSchema)` to create a new message.
 * @deprecated
 */
export const ReportValueSchema: GenMessage<ReportValue> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 11);

/**
 * Status of a report generation process.
 *
 * @generated from message google.cloud.channel.v1.ReportStatus
 * @deprecated
 */
export type ReportStatus = Message<"google.cloud.channel.v1.ReportStatus"> & {
  /**
   * The current state of the report generation process.
   *
   * @generated from field: google.cloud.channel.v1.ReportStatus.State state = 1;
   */
  state: ReportStatus_State;

  /**
   * The report generation's start time.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * The report generation's completion time.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.cloud.channel.v1.ReportStatus.
 * Use `create(ReportStatusSchema)` to create a new message.
 * @deprecated
 */
export const ReportStatusSchema: GenMessage<ReportStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 12);

/**
 * Available states of report generation.
 *
 * @generated from enum google.cloud.channel.v1.ReportStatus.State
 * @deprecated
 */
export enum ReportStatus_State {
  /**
   * Not used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Report processing started.
   *
   * @generated from enum value: STARTED = 1;
   */
  STARTED = 1,

  /**
   * Data generated from the report is being staged.
   *
   * @generated from enum value: WRITING = 2;
   */
  WRITING = 2,

  /**
   * Report data is available for access.
   *
   * @generated from enum value: AVAILABLE = 3;
   */
  AVAILABLE = 3,

  /**
   * Report failed.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,
}

/**
 * Describes the enum google.cloud.channel.v1.ReportStatus.State.
 * @deprecated
 */
export const ReportStatus_StateSchema: GenEnum<ReportStatus_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_channel_v1_reports_service, 12, 0);

/**
 * The ID and description of a report that was used to generate report data.
 * For example, "Google Cloud Daily Spend", "Google Workspace License Activity",
 * etc.
 *
 * @generated from message google.cloud.channel.v1.Report
 * @deprecated
 */
export type Report = Message<"google.cloud.channel.v1.Report"> & {
  /**
   * Required. The report's resource name. Specifies the account and report used
   * to generate report data. The report_id identifier is a UID (for example,
   * `613bf59q`).
   *
   * Name uses the format:
   * accounts/{account_id}/reports/{report_id}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A human-readable name for this report.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * The list of columns included in the report. This defines the schema of
   * the report results.
   *
   * @generated from field: repeated google.cloud.channel.v1.Column columns = 3;
   */
  columns: Column[];

  /**
   * A description of other aspects of the report, such as the products
   * it supports.
   *
   * @generated from field: string description = 4;
   */
  description: string;
};

/**
 * Describes the message google.cloud.channel.v1.Report.
 * Use `create(ReportSchema)` to create a new message.
 * @deprecated
 */
export const ReportSchema: GenMessage<Report> = /*@__PURE__*/
  messageDesc(file_google_cloud_channel_v1_reports_service, 13);

/**
 * CloudChannelReportsService lets Google Cloud resellers and
 * distributors retrieve and combine a variety of data in Cloud Channel for
 * multiple products (Google Cloud, Google Voice, and Google Workspace.)
 *
 * Deprecated: This service is being deprecated. Please use [Export Channel
 * Services data to
 * BigQuery](https://cloud.google.com/channel/docs/rebilling/export-data-to-bigquery)
 * instead.
 *
 * @generated from service google.cloud.channel.v1.CloudChannelReportsService
 * @deprecated
 */
export const CloudChannelReportsService: GenService<{
  /**
   * Begins generation of data for a given report. The report
   * identifier is a UID (for example, `613bf59q`).
   *
   * Possible error codes:
   *
   * * PERMISSION_DENIED: The user doesn't have access to this report.
   * * INVALID_ARGUMENT: Required request parameters are missing
   *   or invalid.
   * * NOT_FOUND: The report identifier was not found.
   * * INTERNAL: Any non-user error related to a technical issue
   *   in the backend. Contact Cloud Channel support.
   * * UNKNOWN: Any non-user error related to a technical issue
   *   in the backend. Contact Cloud Channel support.
   *
   * Return value:
   * The ID of a long-running operation.
   *
   * To get the results of the operation, call the GetOperation method of
   * CloudChannelOperationsService. The Operation metadata contains an
   * instance of [OperationMetadata][google.cloud.channel.v1.OperationMetadata].
   *
   * To get the results of report generation, call
   * [CloudChannelReportsService.FetchReportResults][google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults]
   * with the
   * [RunReportJobResponse.report_job][google.cloud.channel.v1.RunReportJobResponse.report_job].
   *
   * Deprecated: Please use [Export Channel Services data to
   * BigQuery](https://cloud.google.com/channel/docs/rebilling/export-data-to-bigquery)
   * instead.
   *
   * @generated from rpc google.cloud.channel.v1.CloudChannelReportsService.RunReportJob
   * @deprecated
   */
  runReportJob: {
    methodKind: "unary";
    input: typeof RunReportJobRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Retrieves data generated by
   * [CloudChannelReportsService.RunReportJob][google.cloud.channel.v1.CloudChannelReportsService.RunReportJob].
   *
   * Deprecated: Please use [Export Channel Services data to
   * BigQuery](https://cloud.google.com/channel/docs/rebilling/export-data-to-bigquery)
   * instead.
   *
   * @generated from rpc google.cloud.channel.v1.CloudChannelReportsService.FetchReportResults
   * @deprecated
   */
  fetchReportResults: {
    methodKind: "unary";
    input: typeof FetchReportResultsRequestSchema;
    output: typeof FetchReportResultsResponseSchema;
  },
  /**
   * Lists the reports that RunReportJob can run. These reports include an ID,
   * a description, and the list of columns that will be in the result.
   *
   * Deprecated: Please use [Export Channel Services data to
   * BigQuery](https://cloud.google.com/channel/docs/rebilling/export-data-to-bigquery)
   * instead.
   *
   * @generated from rpc google.cloud.channel.v1.CloudChannelReportsService.ListReports
   * @deprecated
   */
  listReports: {
    methodKind: "unary";
    input: typeof ListReportsRequestSchema;
    output: typeof ListReportsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_channel_v1_reports_service, 0);

