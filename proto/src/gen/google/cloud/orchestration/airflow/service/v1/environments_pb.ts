// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/orchestration/airflow/service/v1/environments.proto (package google.cloud.orchestration.airflow.service.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../../api/resource_pb";
import { file_google_cloud_orchestration_airflow_service_v1_operations } from "./operations_pb";
import type { OperationSchema } from "../../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/orchestration/airflow/service/v1/environments.proto.
 */
export const file_google_cloud_orchestration_airflow_service_v1_environments: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_orchestration_airflow_service_v1_operations, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Create a new environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CreateEnvironmentRequest
 */
export type CreateEnvironmentRequest = Message<"google.cloud.orchestration.airflow.service.v1.CreateEnvironmentRequest"> & {
  /**
   * The parent must be of the form
   * "projects/{projectId}/locations/{locationId}".
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The environment to create.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.Environment environment = 2;
   */
  environment?: Environment;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CreateEnvironmentRequest.
 * Use `create(CreateEnvironmentRequestSchema)` to create a new message.
 */
export const CreateEnvironmentRequestSchema: GenMessage<CreateEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 0);

/**
 * Get an environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.GetEnvironmentRequest
 */
export type GetEnvironmentRequest = Message<"google.cloud.orchestration.airflow.service.v1.GetEnvironmentRequest"> & {
  /**
   * The resource name of the environment to get, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.GetEnvironmentRequest.
 * Use `create(GetEnvironmentRequestSchema)` to create a new message.
 */
export const GetEnvironmentRequestSchema: GenMessage<GetEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 1);

/**
 * List environments in a project and location.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListEnvironmentsRequest
 */
export type ListEnvironmentsRequest = Message<"google.cloud.orchestration.airflow.service.v1.ListEnvironmentsRequest"> & {
  /**
   * List environments in the given project and location, in the form:
   * "projects/{projectId}/locations/{locationId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of environments to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListEnvironmentsRequest.
 * Use `create(ListEnvironmentsRequestSchema)` to create a new message.
 */
export const ListEnvironmentsRequestSchema: GenMessage<ListEnvironmentsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 2);

/**
 * The environments in a project and location.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListEnvironmentsResponse
 */
export type ListEnvironmentsResponse = Message<"google.cloud.orchestration.airflow.service.v1.ListEnvironmentsResponse"> & {
  /**
   * The list of environments returned by a ListEnvironmentsRequest.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.Environment environments = 1;
   */
  environments: Environment[];

  /**
   * The page token used to query for the next page if one exists.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListEnvironmentsResponse.
 * Use `create(ListEnvironmentsResponseSchema)` to create a new message.
 */
export const ListEnvironmentsResponseSchema: GenMessage<ListEnvironmentsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 3);

/**
 * Delete an environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DeleteEnvironmentRequest
 */
export type DeleteEnvironmentRequest = Message<"google.cloud.orchestration.airflow.service.v1.DeleteEnvironmentRequest"> & {
  /**
   * The environment to delete, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DeleteEnvironmentRequest.
 * Use `create(DeleteEnvironmentRequestSchema)` to create a new message.
 */
export const DeleteEnvironmentRequestSchema: GenMessage<DeleteEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 4);

/**
 * Update an environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.UpdateEnvironmentRequest
 */
export type UpdateEnvironmentRequest = Message<"google.cloud.orchestration.airflow.service.v1.UpdateEnvironmentRequest"> & {
  /**
   * The relative resource name of the environment to update, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * A patch environment. Fields specified by the `updateMask` will be copied
   * from the patch environment into the environment under update.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.Environment environment = 1;
   */
  environment?: Environment;

  /**
   * Required. A comma-separated list of paths, relative to `Environment`, of
   * fields to update.
   * For example, to set the version of scikit-learn to install in the
   * environment to 0.19.0 and to remove an existing installation of
   * numpy, the `updateMask` parameter would include the following two
   * `paths` values: "config.softwareConfig.pypiPackages.scikit-learn" and
   * "config.softwareConfig.pypiPackages.numpy". The included patch
   * environment would specify the scikit-learn version as follows:
   *
   *     {
   *       "config":{
   *         "softwareConfig":{
   *           "pypiPackages":{
   *             "scikit-learn":"==0.19.0"
   *           }
   *         }
   *       }
   *     }
   *
   * Note that in the above example, any existing PyPI packages
   * other than scikit-learn and numpy will be unaffected.
   *
   * Only one update type may be included in a single request's `updateMask`.
   * For example, one cannot update both the PyPI packages and
   * labels in the same request. However, it is possible to update multiple
   * members of a map field simultaneously in the same request. For example,
   * to set the labels "label1" and "label2" while clearing "label3" (assuming
   * it already exists), one can
   * provide the paths "labels.label1", "labels.label2", and "labels.label3"
   * and populate the patch environment as follows:
   *
   *     {
   *       "labels":{
   *         "label1":"new-label1-value"
   *         "label2":"new-label2-value"
   *       }
   *     }
   *
   * Note that in the above example, any existing labels that are not
   * included in the `updateMask` will be unaffected.
   *
   * It is also possible to replace an entire map field by providing the
   * map field's path in the `updateMask`. The new value of the field will
   * be that which is provided in the patch environment. For example, to
   * delete all pre-existing user-specified PyPI packages and
   * install botocore at version 1.7.14, the `updateMask` would contain
   * the path "config.softwareConfig.pypiPackages", and
   * the patch environment would be the following:
   *
   *     {
   *       "config":{
   *         "softwareConfig":{
   *           "pypiPackages":{
   *             "botocore":"==1.7.14"
   *           }
   *         }
   *       }
   *     }
   *
   * **Note:** Only the following fields can be updated:
   *
   * * `config.softwareConfig.pypiPackages`
   *     * Replace all custom custom PyPI packages. If a replacement
   *       package map is not included in `environment`, all custom
   *       PyPI packages are cleared. It is an error to provide both
   *       this mask and a mask specifying an individual package.
   * * `config.softwareConfig.pypiPackages.`packagename
   *     * Update the custom PyPI package *packagename*,
   *       preserving other packages. To delete the package, include it in
   *       `updateMask`, and omit the mapping for it in
   *       `environment.config.softwareConfig.pypiPackages`. It is an error
   *       to provide both a mask of this form and the
   *       `config.softwareConfig.pypiPackages` mask.
   * * `labels`
   *     * Replace all environment labels. If a replacement labels map is not
   *       included in `environment`, all labels are cleared. It is an error to
   *       provide both this mask and a mask specifying one or more individual
   *       labels.
   * * `labels.`labelName
   *     * Set the label named *labelName*, while preserving other
   *       labels. To delete the label, include it in `updateMask` and omit its
   *       mapping in `environment.labels`. It is an error to provide both a
   *       mask of this form and the `labels` mask.
   * * `config.nodeCount`
   *     * Horizontally scale the number of nodes in the environment. An integer
   *       greater than or equal to 3 must be provided in the `config.nodeCount`
   *       field. Supported for Cloud Composer environments in versions
   *       composer-1.*.*-airflow-*.*.*.
   * * `config.webServerNetworkAccessControl`
   *     * Replace the environment's current `WebServerNetworkAccessControl`.
   * * `config.softwareConfig.airflowConfigOverrides`
   *     * Replace all Apache Airflow config overrides. If a replacement config
   *       overrides map is not included in `environment`, all config overrides
   *       are cleared.
   *       It is an error to provide both this mask and a mask specifying one or
   *       more individual config overrides.
   * * `config.softwareConfig.airflowConfigOverrides.`section-name
   *     * Override the Apache Airflow config property *name* in the
   *       section named *section*, preserving other properties. To
   *       delete the property override, include it in `updateMask` and omit its
   *       mapping in
   *       `environment.config.softwareConfig.airflowConfigOverrides`.
   *       It is an error to provide both a mask of this form and the
   *       `config.softwareConfig.airflowConfigOverrides` mask.
   * * `config.softwareConfig.envVariables`
   *     * Replace all environment variables. If a replacement environment
   *       variable map is not included in `environment`, all custom environment
   *       variables are cleared.
   * * `config.softwareConfig.schedulerCount`
   *     * Horizontally scale the number of schedulers in Airflow. A positive
   *       integer not greater than the number of nodes must be provided in the
   *       `config.softwareConfig.schedulerCount` field. Supported for Cloud
   *       Composer environments in versions composer-1.*.*-airflow-2.*.*.
   * * `config.databaseConfig.machineType`
   *     * Cloud SQL machine type used by Airflow database.
   *       It has to be one of: db-n1-standard-2, db-n1-standard-4,
   *       db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer
   *       environments in versions composer-1.*.*-airflow-*.*.*.
   * * `config.webServerConfig.machineType`
   *     * Machine type on which Airflow web server is running.
   *       It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4
   *       or composer-n1-webserver-8. Supported for Cloud Composer environments
   *       in versions composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.UpdateEnvironmentRequest.
 * Use `create(UpdateEnvironmentRequestSchema)` to create a new message.
 */
export const UpdateEnvironmentRequestSchema: GenMessage<UpdateEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 5);

/**
 * Execute Airflow Command request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandRequest
 */
export type ExecuteAirflowCommandRequest = Message<"google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandRequest"> & {
  /**
   * The resource name of the environment in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * Airflow command.
   *
   * @generated from field: string command = 2;
   */
  command: string;

  /**
   * Airflow subcommand.
   *
   * @generated from field: string subcommand = 3;
   */
  subcommand: string;

  /**
   * Parameters for the Airflow command/subcommand as an array of arguments.
   * It may contain positional arguments like `["my-dag-id"]`, key-value
   * parameters like `["--foo=bar"]` or `["--foo","bar"]`,
   * or other flags like `["-f"]`.
   *
   * @generated from field: repeated string parameters = 4;
   */
  parameters: string[];
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandRequest.
 * Use `create(ExecuteAirflowCommandRequestSchema)` to create a new message.
 */
export const ExecuteAirflowCommandRequestSchema: GenMessage<ExecuteAirflowCommandRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 6);

/**
 * Response to ExecuteAirflowCommandRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandResponse
 */
export type ExecuteAirflowCommandResponse = Message<"google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandResponse"> & {
  /**
   * The unique ID of the command execution for polling.
   *
   * @generated from field: string execution_id = 1;
   */
  executionId: string;

  /**
   * The name of the pod where the command is executed.
   *
   * @generated from field: string pod = 2;
   */
  pod: string;

  /**
   * The namespace of the pod where the command is executed.
   *
   * @generated from field: string pod_namespace = 3;
   */
  podNamespace: string;

  /**
   * Error message. Empty if there was no error.
   *
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ExecuteAirflowCommandResponse.
 * Use `create(ExecuteAirflowCommandResponseSchema)` to create a new message.
 */
export const ExecuteAirflowCommandResponseSchema: GenMessage<ExecuteAirflowCommandResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 7);

/**
 * Stop Airflow Command request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.StopAirflowCommandRequest
 */
export type StopAirflowCommandRequest = Message<"google.cloud.orchestration.airflow.service.v1.StopAirflowCommandRequest"> & {
  /**
   * The resource name of the environment in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}".
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * The unique ID of the command execution.
   *
   * @generated from field: string execution_id = 2;
   */
  executionId: string;

  /**
   * The name of the pod where the command is executed.
   *
   * @generated from field: string pod = 3;
   */
  pod: string;

  /**
   * The namespace of the pod where the command is executed.
   *
   * @generated from field: string pod_namespace = 4;
   */
  podNamespace: string;

  /**
   * If true, the execution is terminated forcefully (SIGKILL). If false, the
   * execution is stopped gracefully, giving it time for cleanup.
   *
   * @generated from field: bool force = 5;
   */
  force: boolean;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.StopAirflowCommandRequest.
 * Use `create(StopAirflowCommandRequestSchema)` to create a new message.
 */
export const StopAirflowCommandRequestSchema: GenMessage<StopAirflowCommandRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 8);

/**
 * Response to StopAirflowCommandRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.StopAirflowCommandResponse
 */
export type StopAirflowCommandResponse = Message<"google.cloud.orchestration.airflow.service.v1.StopAirflowCommandResponse"> & {
  /**
   * Whether the execution is still running.
   *
   * @generated from field: bool is_done = 1;
   */
  isDone: boolean;

  /**
   * Output message from stopping execution request.
   *
   * @generated from field: repeated string output = 2;
   */
  output: string[];
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.StopAirflowCommandResponse.
 * Use `create(StopAirflowCommandResponseSchema)` to create a new message.
 */
export const StopAirflowCommandResponseSchema: GenMessage<StopAirflowCommandResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 9);

/**
 * Poll Airflow Command request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandRequest
 */
export type PollAirflowCommandRequest = Message<"google.cloud.orchestration.airflow.service.v1.PollAirflowCommandRequest"> & {
  /**
   * The resource name of the environment in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * The unique ID of the command execution.
   *
   * @generated from field: string execution_id = 2;
   */
  executionId: string;

  /**
   * The name of the pod where the command is executed.
   *
   * @generated from field: string pod = 3;
   */
  pod: string;

  /**
   * The namespace of the pod where the command is executed.
   *
   * @generated from field: string pod_namespace = 4;
   */
  podNamespace: string;

  /**
   * Line number from which new logs should be fetched.
   *
   * @generated from field: int32 next_line_number = 5;
   */
  nextLineNumber: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandRequest.
 * Use `create(PollAirflowCommandRequestSchema)` to create a new message.
 */
export const PollAirflowCommandRequestSchema: GenMessage<PollAirflowCommandRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 10);

/**
 * Response to PollAirflowCommandRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse
 */
export type PollAirflowCommandResponse = Message<"google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse"> & {
  /**
   * Output from the command execution. It may not contain the full output
   * and the caller may need to poll for more lines.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.Line output = 1;
   */
  output: PollAirflowCommandResponse_Line[];

  /**
   * Whether the command execution has finished and there is no more output.
   *
   * @generated from field: bool output_end = 2;
   */
  outputEnd: boolean;

  /**
   * The result exit status of the command.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.ExitInfo exit_info = 3;
   */
  exitInfo?: PollAirflowCommandResponse_ExitInfo;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.
 * Use `create(PollAirflowCommandResponseSchema)` to create a new message.
 */
export const PollAirflowCommandResponseSchema: GenMessage<PollAirflowCommandResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 11);

/**
 * Contains information about a single line from logs.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.Line
 */
export type PollAirflowCommandResponse_Line = Message<"google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.Line"> & {
  /**
   * Number of the line.
   *
   * @generated from field: int32 line_number = 1;
   */
  lineNumber: number;

  /**
   * Text content of the log line.
   *
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.Line.
 * Use `create(PollAirflowCommandResponse_LineSchema)` to create a new message.
 */
export const PollAirflowCommandResponse_LineSchema: GenMessage<PollAirflowCommandResponse_Line> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 11, 0);

/**
 * Information about how a command ended.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.ExitInfo
 */
export type PollAirflowCommandResponse_ExitInfo = Message<"google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.ExitInfo"> & {
  /**
   * The exit code from the command execution.
   *
   * @generated from field: int32 exit_code = 1;
   */
  exitCode: number;

  /**
   * Error message. Empty if there was no error.
   *
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PollAirflowCommandResponse.ExitInfo.
 * Use `create(PollAirflowCommandResponse_ExitInfoSchema)` to create a new message.
 */
export const PollAirflowCommandResponse_ExitInfoSchema: GenMessage<PollAirflowCommandResponse_ExitInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 11, 1);

/**
 * Create user workloads Secret request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsSecretRequest
 */
export type CreateUserWorkloadsSecretRequest = Message<"google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsSecretRequest"> & {
  /**
   * Required. The environment name to create a Secret for, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User workloads Secret to create.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret user_workloads_secret = 2;
   */
  userWorkloadsSecret?: UserWorkloadsSecret;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsSecretRequest.
 * Use `create(CreateUserWorkloadsSecretRequestSchema)` to create a new message.
 */
export const CreateUserWorkloadsSecretRequestSchema: GenMessage<CreateUserWorkloadsSecretRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 12);

/**
 * Get user workloads Secret request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsSecretRequest
 */
export type GetUserWorkloadsSecretRequest = Message<"google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsSecretRequest"> & {
  /**
   * Required. The resource name of the Secret to get, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsSecretRequest.
 * Use `create(GetUserWorkloadsSecretRequestSchema)` to create a new message.
 */
export const GetUserWorkloadsSecretRequestSchema: GenMessage<GetUserWorkloadsSecretRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 13);

/**
 * List user workloads Secrets request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsRequest
 */
export type ListUserWorkloadsSecretsRequest = Message<"google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsRequest"> & {
  /**
   * Required. List Secrets in the given environment, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of Secrets to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsRequest.
 * Use `create(ListUserWorkloadsSecretsRequestSchema)` to create a new message.
 */
export const ListUserWorkloadsSecretsRequestSchema: GenMessage<ListUserWorkloadsSecretsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 14);

/**
 * Update user workloads Secret request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsSecretRequest
 */
export type UpdateUserWorkloadsSecretRequest = Message<"google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsSecretRequest"> & {
  /**
   * Optional. User workloads Secret to override.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret user_workloads_secret = 1;
   */
  userWorkloadsSecret?: UserWorkloadsSecret;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsSecretRequest.
 * Use `create(UpdateUserWorkloadsSecretRequestSchema)` to create a new message.
 */
export const UpdateUserWorkloadsSecretRequestSchema: GenMessage<UpdateUserWorkloadsSecretRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 15);

/**
 * Delete user workloads Secret request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsSecretRequest
 */
export type DeleteUserWorkloadsSecretRequest = Message<"google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsSecretRequest"> & {
  /**
   * Required. The Secret to delete, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsSecretRequest.
 * Use `create(DeleteUserWorkloadsSecretRequestSchema)` to create a new message.
 */
export const DeleteUserWorkloadsSecretRequestSchema: GenMessage<DeleteUserWorkloadsSecretRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 16);

/**
 * Create user workloads ConfigMap request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsConfigMapRequest
 */
export type CreateUserWorkloadsConfigMapRequest = Message<"google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsConfigMapRequest"> & {
  /**
   * Required. The environment name to create a ConfigMap for, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User workloads ConfigMap to create.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap user_workloads_config_map = 2;
   */
  userWorkloadsConfigMap?: UserWorkloadsConfigMap;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CreateUserWorkloadsConfigMapRequest.
 * Use `create(CreateUserWorkloadsConfigMapRequestSchema)` to create a new message.
 */
export const CreateUserWorkloadsConfigMapRequestSchema: GenMessage<CreateUserWorkloadsConfigMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 17);

/**
 * Get user workloads ConfigMap request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsConfigMapRequest
 */
export type GetUserWorkloadsConfigMapRequest = Message<"google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsConfigMapRequest"> & {
  /**
   * Required. The resource name of the ConfigMap to get, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.GetUserWorkloadsConfigMapRequest.
 * Use `create(GetUserWorkloadsConfigMapRequestSchema)` to create a new message.
 */
export const GetUserWorkloadsConfigMapRequestSchema: GenMessage<GetUserWorkloadsConfigMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 18);

/**
 * List user workloads ConfigMaps request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsRequest
 */
export type ListUserWorkloadsConfigMapsRequest = Message<"google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsRequest"> & {
  /**
   * Required. List ConfigMaps in the given environment, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of ConfigMaps to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsRequest.
 * Use `create(ListUserWorkloadsConfigMapsRequestSchema)` to create a new message.
 */
export const ListUserWorkloadsConfigMapsRequestSchema: GenMessage<ListUserWorkloadsConfigMapsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 19);

/**
 * Update user workloads ConfigMap request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsConfigMapRequest
 */
export type UpdateUserWorkloadsConfigMapRequest = Message<"google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsConfigMapRequest"> & {
  /**
   * Optional. User workloads ConfigMap to override.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap user_workloads_config_map = 1;
   */
  userWorkloadsConfigMap?: UserWorkloadsConfigMap;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.UpdateUserWorkloadsConfigMapRequest.
 * Use `create(UpdateUserWorkloadsConfigMapRequestSchema)` to create a new message.
 */
export const UpdateUserWorkloadsConfigMapRequestSchema: GenMessage<UpdateUserWorkloadsConfigMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 20);

/**
 * Delete user workloads ConfigMap request.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsConfigMapRequest
 */
export type DeleteUserWorkloadsConfigMapRequest = Message<"google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsConfigMapRequest"> & {
  /**
   * Required. The ConfigMap to delete, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DeleteUserWorkloadsConfigMapRequest.
 * Use `create(DeleteUserWorkloadsConfigMapRequestSchema)` to create a new message.
 */
export const DeleteUserWorkloadsConfigMapRequestSchema: GenMessage<DeleteUserWorkloadsConfigMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 21);

/**
 * User workloads Secret used by Airflow tasks that run with Kubernetes executor
 * or KubernetesPodOperator.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret
 */
export type UserWorkloadsSecret = Message<"google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret"> & {
  /**
   * Identifier. The resource name of the Secret, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsSecrets/{userWorkloadsSecretId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The "data" field of Kubernetes Secret, organized in key-value
   * pairs, which can contain sensitive values such as a password, a token, or a
   * key. The values for all keys have to be base64-encoded strings. For details
   * see: https://kubernetes.io/docs/concepts/configuration/secret/
   *
   * @generated from field: map<string, string> data = 2;
   */
  data: { [key: string]: string };
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret.
 * Use `create(UserWorkloadsSecretSchema)` to create a new message.
 */
export const UserWorkloadsSecretSchema: GenMessage<UserWorkloadsSecret> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 22);

/**
 * The user workloads Secrets for a given environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsResponse
 */
export type ListUserWorkloadsSecretsResponse = Message<"google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsResponse"> & {
  /**
   * The list of Secrets returned by a ListUserWorkloadsSecretsRequest.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.UserWorkloadsSecret user_workloads_secrets = 1;
   */
  userWorkloadsSecrets: UserWorkloadsSecret[];

  /**
   * The page token used to query for the next page if one exists.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsSecretsResponse.
 * Use `create(ListUserWorkloadsSecretsResponseSchema)` to create a new message.
 */
export const ListUserWorkloadsSecretsResponseSchema: GenMessage<ListUserWorkloadsSecretsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 23);

/**
 * User workloads ConfigMap used by Airflow tasks that run with Kubernetes
 * executor or KubernetesPodOperator.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap
 */
export type UserWorkloadsConfigMap = Message<"google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap"> & {
  /**
   * Identifier. The resource name of the ConfigMap, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}/userWorkloadsConfigMaps/{userWorkloadsConfigMapId}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The "data" field of Kubernetes ConfigMap, organized in key-value
   * pairs. For details see:
   * https://kubernetes.io/docs/concepts/configuration/configmap/
   *
   * @generated from field: map<string, string> data = 2;
   */
  data: { [key: string]: string };
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap.
 * Use `create(UserWorkloadsConfigMapSchema)` to create a new message.
 */
export const UserWorkloadsConfigMapSchema: GenMessage<UserWorkloadsConfigMap> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 24);

/**
 * The user workloads ConfigMaps for a given environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsResponse
 */
export type ListUserWorkloadsConfigMapsResponse = Message<"google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsResponse"> & {
  /**
   * The list of ConfigMaps returned by a ListUserWorkloadsConfigMapsRequest.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.UserWorkloadsConfigMap user_workloads_config_maps = 1;
   */
  userWorkloadsConfigMaps: UserWorkloadsConfigMap[];

  /**
   * The page token used to query for the next page if one exists.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListUserWorkloadsConfigMapsResponse.
 * Use `create(ListUserWorkloadsConfigMapsResponseSchema)` to create a new message.
 */
export const ListUserWorkloadsConfigMapsResponseSchema: GenMessage<ListUserWorkloadsConfigMapsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 25);

/**
 * Request for listing workloads in a Cloud Composer environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListWorkloadsRequest
 */
export type ListWorkloadsRequest = Message<"google.cloud.orchestration.airflow.service.v1.ListWorkloadsRequest"> & {
  /**
   * Required. The environment name to get workloads for, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of environments to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The list filter.
   * Currently only supports equality on the type field. The value of a field
   * specified in the filter expression must be one ComposerWorkloadType enum
   * option. It's possible to get multiple types using "OR" operator, e.g.:
   * "type=SCHEDULER OR type=CELERY_WORKER". If not specified, all items are
   * returned.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListWorkloadsRequest.
 * Use `create(ListWorkloadsRequestSchema)` to create a new message.
 */
export const ListWorkloadsRequestSchema: GenMessage<ListWorkloadsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 26);

/**
 * Response to ListWorkloadsRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse
 */
export type ListWorkloadsResponse = Message<"google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse"> & {
  /**
   * The list of environment workloads.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkload workloads = 1;
   */
  workloads: ListWorkloadsResponse_ComposerWorkload[];

  /**
   * The page token used to query for the next page if one exists.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.
 * Use `create(ListWorkloadsResponseSchema)` to create a new message.
 */
export const ListWorkloadsResponseSchema: GenMessage<ListWorkloadsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 27);

/**
 * Information about a single workload.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkload
 */
export type ListWorkloadsResponse_ComposerWorkload = Message<"google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkload"> & {
  /**
   * Name of a workload.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Type of a workload.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadType type = 2;
   */
  type: ListWorkloadsResponse_ComposerWorkloadType;

  /**
   * Output only. Status of a workload.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadStatus status = 3;
   */
  status?: ListWorkloadsResponse_ComposerWorkloadStatus;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkload.
 * Use `create(ListWorkloadsResponse_ComposerWorkloadSchema)` to create a new message.
 */
export const ListWorkloadsResponse_ComposerWorkloadSchema: GenMessage<ListWorkloadsResponse_ComposerWorkload> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 27, 0);

/**
 * Workload status.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadStatus
 */
export type ListWorkloadsResponse_ComposerWorkloadStatus = Message<"google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadStatus"> & {
  /**
   * Output only. Workload state.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadState state = 1;
   */
  state: ListWorkloadsResponse_ComposerWorkloadState;

  /**
   * Output only. Text to provide more descriptive status.
   *
   * @generated from field: string status_message = 2;
   */
  statusMessage: string;

  /**
   * Output only. Detailed message of the status.
   *
   * @generated from field: string detailed_status_message = 3;
   */
  detailedStatusMessage: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadStatus.
 * Use `create(ListWorkloadsResponse_ComposerWorkloadStatusSchema)` to create a new message.
 */
export const ListWorkloadsResponse_ComposerWorkloadStatusSchema: GenMessage<ListWorkloadsResponse_ComposerWorkloadStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 27, 1);

/**
 * Supported workload types.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadType
 */
export enum ListWorkloadsResponse_ComposerWorkloadType {
  /**
   * Not able to determine the type of the workload.
   *
   * @generated from enum value: COMPOSER_WORKLOAD_TYPE_UNSPECIFIED = 0;
   */
  COMPOSER_WORKLOAD_TYPE_UNSPECIFIED = 0,

  /**
   * Celery worker.
   *
   * @generated from enum value: CELERY_WORKER = 1;
   */
  CELERY_WORKER = 1,

  /**
   * Kubernetes worker.
   *
   * @generated from enum value: KUBERNETES_WORKER = 2;
   */
  KUBERNETES_WORKER = 2,

  /**
   * Workload created by Kubernetes Pod Operator.
   *
   * @generated from enum value: KUBERNETES_OPERATOR_POD = 3;
   */
  KUBERNETES_OPERATOR_POD = 3,

  /**
   * Airflow scheduler.
   *
   * @generated from enum value: SCHEDULER = 4;
   */
  SCHEDULER = 4,

  /**
   * Airflow Dag processor.
   *
   * @generated from enum value: DAG_PROCESSOR = 5;
   */
  DAG_PROCESSOR = 5,

  /**
   * Airflow triggerer.
   *
   * @generated from enum value: TRIGGERER = 6;
   */
  TRIGGERER = 6,

  /**
   * Airflow web server UI.
   *
   * @generated from enum value: WEB_SERVER = 7;
   */
  WEB_SERVER = 7,

  /**
   * Redis.
   *
   * @generated from enum value: REDIS = 8;
   */
  REDIS = 8,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadType.
 */
export const ListWorkloadsResponse_ComposerWorkloadTypeSchema: GenEnum<ListWorkloadsResponse_ComposerWorkloadType> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 27, 0);

/**
 * Workload states.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadState
 */
export enum ListWorkloadsResponse_ComposerWorkloadState {
  /**
   * Not able to determine the status of the workload.
   *
   * @generated from enum value: COMPOSER_WORKLOAD_STATE_UNSPECIFIED = 0;
   */
  COMPOSER_WORKLOAD_STATE_UNSPECIFIED = 0,

  /**
   * Workload is in pending state and has not yet started.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * Workload is running fine.
   *
   * @generated from enum value: OK = 2;
   */
  OK = 2,

  /**
   * Workload is running but there are some non-critical problems.
   *
   * @generated from enum value: WARNING = 3;
   */
  WARNING = 3,

  /**
   * Workload is not running due to an error.
   *
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,

  /**
   * Workload has finished execution with success.
   *
   * @generated from enum value: SUCCEEDED = 5;
   */
  SUCCEEDED = 5,

  /**
   * Workload has finished execution with failure.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.ListWorkloadsResponse.ComposerWorkloadState.
 */
export const ListWorkloadsResponse_ComposerWorkloadStateSchema: GenEnum<ListWorkloadsResponse_ComposerWorkloadState> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 27, 1);

/**
 * Request to create a snapshot of a Cloud Composer environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.SaveSnapshotRequest
 */
export type SaveSnapshotRequest = Message<"google.cloud.orchestration.airflow.service.v1.SaveSnapshotRequest"> & {
  /**
   * The resource name of the source environment in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * Location in a Cloud Storage where the snapshot is going to be stored, e.g.:
   * "gs://my-bucket/snapshots".
   *
   * @generated from field: string snapshot_location = 2;
   */
  snapshotLocation: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.SaveSnapshotRequest.
 * Use `create(SaveSnapshotRequestSchema)` to create a new message.
 */
export const SaveSnapshotRequestSchema: GenMessage<SaveSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 28);

/**
 * Response to SaveSnapshotRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.SaveSnapshotResponse
 */
export type SaveSnapshotResponse = Message<"google.cloud.orchestration.airflow.service.v1.SaveSnapshotResponse"> & {
  /**
   * The fully-resolved Cloud Storage path of the created snapshot,
   * e.g.:
   * "gs://my-bucket/snapshots/project_location_environment_timestamp".
   * This field is populated only if the snapshot creation was successful.
   *
   * @generated from field: string snapshot_path = 1;
   */
  snapshotPath: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.SaveSnapshotResponse.
 * Use `create(SaveSnapshotResponseSchema)` to create a new message.
 */
export const SaveSnapshotResponseSchema: GenMessage<SaveSnapshotResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 29);

/**
 * Request to load a snapshot into a Cloud Composer environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.LoadSnapshotRequest
 */
export type LoadSnapshotRequest = Message<"google.cloud.orchestration.airflow.service.v1.LoadSnapshotRequest"> & {
  /**
   * The resource name of the target environment in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * A Cloud Storage path to a snapshot to load, e.g.:
   * "gs://my-bucket/snapshots/project_location_environment_timestamp".
   *
   * @generated from field: string snapshot_path = 2;
   */
  snapshotPath: string;

  /**
   * Whether or not to skip installing Pypi packages when loading the
   * environment's state.
   *
   * @generated from field: bool skip_pypi_packages_installation = 3;
   */
  skipPypiPackagesInstallation: boolean;

  /**
   * Whether or not to skip setting environment variables when loading the
   * environment's state.
   *
   * @generated from field: bool skip_environment_variables_setting = 4;
   */
  skipEnvironmentVariablesSetting: boolean;

  /**
   * Whether or not to skip setting Airflow overrides when loading the
   * environment's state.
   *
   * @generated from field: bool skip_airflow_overrides_setting = 5;
   */
  skipAirflowOverridesSetting: boolean;

  /**
   * Whether or not to skip copying Cloud Storage data when loading the
   * environment's state.
   *
   * @generated from field: bool skip_gcs_data_copying = 6;
   */
  skipGcsDataCopying: boolean;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.LoadSnapshotRequest.
 * Use `create(LoadSnapshotRequestSchema)` to create a new message.
 */
export const LoadSnapshotRequestSchema: GenMessage<LoadSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 30);

/**
 * Response to LoadSnapshotRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.LoadSnapshotResponse
 */
export type LoadSnapshotResponse = Message<"google.cloud.orchestration.airflow.service.v1.LoadSnapshotResponse"> & {
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.LoadSnapshotResponse.
 * Use `create(LoadSnapshotResponseSchema)` to create a new message.
 */
export const LoadSnapshotResponseSchema: GenMessage<LoadSnapshotResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 31);

/**
 * Request to trigger database failover (only for highly resilient
 * environments).
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DatabaseFailoverRequest
 */
export type DatabaseFailoverRequest = Message<"google.cloud.orchestration.airflow.service.v1.DatabaseFailoverRequest"> & {
  /**
   * Target environment:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DatabaseFailoverRequest.
 * Use `create(DatabaseFailoverRequestSchema)` to create a new message.
 */
export const DatabaseFailoverRequestSchema: GenMessage<DatabaseFailoverRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 32);

/**
 * Response for DatabaseFailoverRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DatabaseFailoverResponse
 */
export type DatabaseFailoverResponse = Message<"google.cloud.orchestration.airflow.service.v1.DatabaseFailoverResponse"> & {
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DatabaseFailoverResponse.
 * Use `create(DatabaseFailoverResponseSchema)` to create a new message.
 */
export const DatabaseFailoverResponseSchema: GenMessage<DatabaseFailoverResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 33);

/**
 * Request to fetch properties of environment's database.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesRequest
 */
export type FetchDatabasePropertiesRequest = Message<"google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesRequest"> & {
  /**
   * Required. The resource name of the environment, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesRequest.
 * Use `create(FetchDatabasePropertiesRequestSchema)` to create a new message.
 */
export const FetchDatabasePropertiesRequestSchema: GenMessage<FetchDatabasePropertiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 34);

/**
 * Response for FetchDatabasePropertiesRequest.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesResponse
 */
export type FetchDatabasePropertiesResponse = Message<"google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesResponse"> & {
  /**
   * The Compute Engine zone that the instance is currently serving from.
   *
   * @generated from field: string primary_gce_zone = 1;
   */
  primaryGceZone: string;

  /**
   * The Compute Engine zone that the failover instance is currently serving
   * from for a regional Cloud SQL instance.
   *
   * @generated from field: string secondary_gce_zone = 2;
   */
  secondaryGceZone: string;

  /**
   * The availability status of the failover replica. A false status indicates
   * that the failover replica is out of sync. The primary instance can only
   * fail over to the failover replica when the status is true.
   *
   * @generated from field: bool is_failover_replica_available = 3;
   */
  isFailoverReplicaAvailable: boolean;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.FetchDatabasePropertiesResponse.
 * Use `create(FetchDatabasePropertiesResponseSchema)` to create a new message.
 */
export const FetchDatabasePropertiesResponseSchema: GenMessage<FetchDatabasePropertiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 35);

/**
 * The configuration for data storage in the environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.StorageConfig
 */
export type StorageConfig = Message<"google.cloud.orchestration.airflow.service.v1.StorageConfig"> & {
  /**
   * Optional. The name of the Cloud Storage bucket used by the environment. No
   * `gs://` prefix.
   *
   * @generated from field: string bucket = 1;
   */
  bucket: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.StorageConfig.
 * Use `create(StorageConfigSchema)` to create a new message.
 */
export const StorageConfigSchema: GenMessage<StorageConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 36);

/**
 * Configuration information for an environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.EnvironmentConfig
 */
export type EnvironmentConfig = Message<"google.cloud.orchestration.airflow.service.v1.EnvironmentConfig"> & {
  /**
   * Output only. The Kubernetes Engine cluster used to run this environment.
   *
   * @generated from field: string gke_cluster = 1;
   */
  gkeCluster: string;

  /**
   * Output only. The Cloud Storage prefix of the DAGs for this environment.
   * Although Cloud Storage objects reside in a flat namespace, a hierarchical
   * file tree can be simulated using "/"-delimited object name prefixes. DAG
   * objects for this environment reside in a simulated directory with the given
   * prefix.
   *
   * @generated from field: string dag_gcs_prefix = 2;
   */
  dagGcsPrefix: string;

  /**
   * The number of nodes in the Kubernetes Engine cluster that will be
   * used to run this environment.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: int32 node_count = 3;
   */
  nodeCount: number;

  /**
   * The configuration settings for software inside the environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.SoftwareConfig software_config = 4;
   */
  softwareConfig?: SoftwareConfig;

  /**
   * The configuration used for the Kubernetes Engine cluster.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.NodeConfig node_config = 5;
   */
  nodeConfig?: NodeConfig;

  /**
   * The configuration used for the Private IP Cloud Composer environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.PrivateEnvironmentConfig private_environment_config = 7;
   */
  privateEnvironmentConfig?: PrivateEnvironmentConfig;

  /**
   * Optional. The network-level access control policy for the Airflow web
   * server. If unspecified, no network-level access restrictions will be
   * applied.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl web_server_network_access_control = 8;
   */
  webServerNetworkAccessControl?: WebServerNetworkAccessControl;

  /**
   * Optional. The configuration settings for Cloud SQL instance used internally
   * by Apache Airflow software.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.DatabaseConfig database_config = 9;
   */
  databaseConfig?: DatabaseConfig;

  /**
   * Optional. The configuration settings for the Airflow web server App Engine
   * instance.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WebServerConfig web_server_config = 10;
   */
  webServerConfig?: WebServerConfig;

  /**
   * Optional. The encryption options for the Cloud Composer environment
   * and its dependencies. Cannot be updated.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.EncryptionConfig encryption_config = 11;
   */
  encryptionConfig?: EncryptionConfig;

  /**
   * Optional. The maintenance window is the period when Cloud Composer
   * components may undergo maintenance. It is defined so that maintenance is
   * not executed during peak hours or critical time periods.
   *
   * The system will not be under maintenance for every occurrence of this
   * window, but when maintenance is planned, it will be scheduled
   * during the window.
   *
   * The maintenance window period must encompass at least 12 hours per week.
   * This may be split into multiple chunks, each with a size of
   * at least 4 hours.
   *
   * If this value is omitted, the default value for maintenance window is
   * applied. By default, maintenance windows are from 00:00:00 to 04:00:00
   * (GMT) on Friday, Saturday, and Sunday every week.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.MaintenanceWindow maintenance_window = 12;
   */
  maintenanceWindow?: MaintenanceWindow;

  /**
   * Optional. The workloads configuration settings for the GKE cluster
   * associated with the Cloud Composer environment. The GKE cluster runs
   * Airflow scheduler, web server and workers workloads.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig workloads_config = 15;
   */
  workloadsConfig?: WorkloadsConfig;

  /**
   * Optional. The size of the Cloud Composer environment.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.EnvironmentSize environment_size = 16;
   */
  environmentSize: EnvironmentConfig_EnvironmentSize;

  /**
   * Output only. The URI of the Apache Airflow Web UI hosted within this
   * environment (see [Airflow web
   * interface](/composer/docs/how-to/accessing/airflow-web-interface)).
   *
   * @generated from field: string airflow_uri = 6;
   */
  airflowUri: string;

  /**
   * Output only. The 'bring your own identity' variant of the URI of the Apache
   * Airflow Web UI hosted within this environment, to be accessed with external
   * identities using workforce identity federation (see [Access environments
   * with workforce identity
   * federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).
   *
   * @generated from field: string airflow_byoid_uri = 20;
   */
  airflowByoidUri: string;

  /**
   * Optional. The configuration options for GKE cluster master authorized
   * networks. By default master authorized networks feature is:
   * - in case of private environment: enabled with no external networks
   * allowlisted.
   * - in case of public environment: disabled.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 17;
   */
  masterAuthorizedNetworksConfig?: MasterAuthorizedNetworksConfig;

  /**
   * Optional. The Recovery settings configuration of an environment.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.RecoveryConfig recovery_config = 18;
   */
  recoveryConfig?: RecoveryConfig;

  /**
   * Optional. Resilience mode of the Cloud Composer Environment.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.2.0-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.ResilienceMode resilience_mode = 19;
   */
  resilienceMode: EnvironmentConfig_ResilienceMode;

  /**
   * Optional. The configuration setting for Airflow database data retention
   * mechanism.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.DataRetentionConfig data_retention_config = 21;
   */
  dataRetentionConfig?: DataRetentionConfig;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.
 * Use `create(EnvironmentConfigSchema)` to create a new message.
 */
export const EnvironmentConfigSchema: GenMessage<EnvironmentConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 37);

/**
 * The size of the Cloud Composer environment.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.EnvironmentSize
 */
export enum EnvironmentConfig_EnvironmentSize {
  /**
   * The size of the environment is unspecified.
   *
   * @generated from enum value: ENVIRONMENT_SIZE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The environment size is small.
   *
   * @generated from enum value: ENVIRONMENT_SIZE_SMALL = 1;
   */
  SMALL = 1,

  /**
   * The environment size is medium.
   *
   * @generated from enum value: ENVIRONMENT_SIZE_MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * The environment size is large.
   *
   * @generated from enum value: ENVIRONMENT_SIZE_LARGE = 3;
   */
  LARGE = 3,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.EnvironmentSize.
 */
export const EnvironmentConfig_EnvironmentSizeSchema: GenEnum<EnvironmentConfig_EnvironmentSize> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 37, 0);

/**
 * Resilience mode of the Cloud Composer Environment.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.ResilienceMode
 */
export enum EnvironmentConfig_ResilienceMode {
  /**
   * Default mode doesn't change environment parameters.
   *
   * @generated from enum value: RESILIENCE_MODE_UNSPECIFIED = 0;
   */
  RESILIENCE_MODE_UNSPECIFIED = 0,

  /**
   * Enabled High Resilience mode, including Cloud SQL HA.
   *
   * @generated from enum value: HIGH_RESILIENCE = 1;
   */
  HIGH_RESILIENCE = 1,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.EnvironmentConfig.ResilienceMode.
 */
export const EnvironmentConfig_ResilienceModeSchema: GenEnum<EnvironmentConfig_ResilienceMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 37, 1);

/**
 * Network-level access control policy for the Airflow web server.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl
 */
export type WebServerNetworkAccessControl = Message<"google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl"> & {
  /**
   * A collection of allowed IP ranges with descriptions.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl.AllowedIpRange allowed_ip_ranges = 1;
   */
  allowedIpRanges: WebServerNetworkAccessControl_AllowedIpRange[];
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl.
 * Use `create(WebServerNetworkAccessControlSchema)` to create a new message.
 */
export const WebServerNetworkAccessControlSchema: GenMessage<WebServerNetworkAccessControl> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 38);

/**
 * Allowed IP range with user-provided description.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl.AllowedIpRange
 */
export type WebServerNetworkAccessControl_AllowedIpRange = Message<"google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl.AllowedIpRange"> & {
  /**
   * IP address or range, defined using CIDR notation, of requests that this
   * rule applies to.
   * Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32`
   *           or `2001:0db8:0000:0042:0000:8a2e:0370:7334`.
   *
   * IP range prefixes should be properly truncated. For example,
   * `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6,
   * `2001:db8::1/32` should be truncated to `2001:db8::/32`.
   *
   * @generated from field: string value = 1;
   */
  value: string;

  /**
   * Optional. User-provided description. It must contain at most 300
   * characters.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WebServerNetworkAccessControl.AllowedIpRange.
 * Use `create(WebServerNetworkAccessControl_AllowedIpRangeSchema)` to create a new message.
 */
export const WebServerNetworkAccessControl_AllowedIpRangeSchema: GenMessage<WebServerNetworkAccessControl_AllowedIpRange> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 38, 0);

/**
 * The configuration of Cloud SQL instance that is used by the Apache Airflow
 * software.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DatabaseConfig
 */
export type DatabaseConfig = Message<"google.cloud.orchestration.airflow.service.v1.DatabaseConfig"> & {
  /**
   * Optional. Cloud SQL machine type used by Airflow database.
   * It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8
   * or db-n1-standard-16. If not specified, db-n1-standard-2 will be used.
   * Supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: string machine_type = 1;
   */
  machineType: string;

  /**
   * Optional. The Compute Engine zone where the Airflow database is created. If
   * zone is provided, it must be in the region selected for the environment. If
   * zone is not provided, a zone is automatically selected. The zone can only
   * be set during environment creation. Supported for Cloud Composer
   * environments in versions composer-2.*.*-airflow-*.*.*.
   *
   * @generated from field: string zone = 2;
   */
  zone: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DatabaseConfig.
 * Use `create(DatabaseConfigSchema)` to create a new message.
 */
export const DatabaseConfigSchema: GenMessage<DatabaseConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 39);

/**
 * The configuration settings for the Airflow web server App Engine instance.
 * Supported for Cloud Composer environments in versions
 * composer-1.*.*-airflow-*.*.*
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WebServerConfig
 */
export type WebServerConfig = Message<"google.cloud.orchestration.airflow.service.v1.WebServerConfig"> & {
  /**
   * Optional. Machine type on which Airflow web server is running.
   * It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or
   * composer-n1-webserver-8.
   * If not specified, composer-n1-webserver-2 will be used.
   * Value custom is returned only in response, if Airflow web server parameters
   * were manually changed to a non-standard values.
   *
   * @generated from field: string machine_type = 1;
   */
  machineType: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WebServerConfig.
 * Use `create(WebServerConfigSchema)` to create a new message.
 */
export const WebServerConfigSchema: GenMessage<WebServerConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 40);

/**
 * The encryption options for the Cloud Composer environment
 * and its dependencies.Supported for Cloud Composer environments in versions
 * composer-1.*.*-airflow-*.*.*.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.EncryptionConfig
 */
export type EncryptionConfig = Message<"google.cloud.orchestration.airflow.service.v1.EncryptionConfig"> & {
  /**
   * Optional. Customer-managed Encryption Key available through Google's Key
   * Management Service. Cannot be updated. If not specified, Google-managed key
   * will be used.
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.EncryptionConfig.
 * Use `create(EncryptionConfigSchema)` to create a new message.
 */
export const EncryptionConfigSchema: GenMessage<EncryptionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 41);

/**
 * The configuration settings for Cloud Composer maintenance window.
 * The following example:
 *
 * ```
 *    {
 *      "startTime":"2019-08-01T01:00:00Z"
 *      "endTime":"2019-08-01T07:00:00Z"
 *      "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE"
 *    }
 * ```
 *
 * would define a maintenance window between 01 and 07 hours UTC during
 * each Tuesday and Wednesday.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.MaintenanceWindow
 */
export type MaintenanceWindow = Message<"google.cloud.orchestration.airflow.service.v1.MaintenanceWindow"> & {
  /**
   * Required. Start time of the first recurrence of the maintenance window.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * Required. Maintenance window end time. It is used only to calculate the
   * duration of the maintenance window. The value for end-time must be in the
   * future, relative to `start_time`.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Required. Maintenance window recurrence. Format is a subset of
   * [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed
   * values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...`
   * Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
   *
   * @generated from field: string recurrence = 3;
   */
  recurrence: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.MaintenanceWindow.
 * Use `create(MaintenanceWindowSchema)` to create a new message.
 */
export const MaintenanceWindowSchema: GenMessage<MaintenanceWindow> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 42);

/**
 * Specifies the selection and configuration of software inside the environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.SoftwareConfig
 */
export type SoftwareConfig = Message<"google.cloud.orchestration.airflow.service.v1.SoftwareConfig"> & {
  /**
   * The version of the software running in the environment.
   * This encapsulates both the version of Cloud Composer functionality and the
   * version of Apache Airflow. It must match the regular expression
   * `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`.
   * When used as input, the server also checks if the provided version is
   * supported and denies the request for an unsupported version.
   *
   * The Cloud Composer portion of the image version is a full
   * [semantic version](https://semver.org), or an alias in the form of major
   * version number or `latest`. When an alias is provided, the server replaces
   * it with the current Cloud Composer version that satisfies the alias.
   *
   * The Apache Airflow portion of the image version is a full semantic version
   * that points to one of the supported Apache Airflow versions, or an alias in
   * the form of only major or major.minor versions specified. When an alias is
   * provided, the server replaces it with the latest Apache Airflow version
   * that satisfies the alias and is supported in the given Cloud Composer
   * version.
   *
   * In all cases, the resolved image version is stored in the same field.
   *
   * See also [version
   * list](/composer/docs/concepts/versioning/composer-versions) and [versioning
   * overview](/composer/docs/concepts/versioning/composer-versioning-overview).
   *
   * @generated from field: string image_version = 1;
   */
  imageVersion: string;

  /**
   * Optional. Apache Airflow configuration properties to override.
   *
   * Property keys contain the section and property names, separated by a
   * hyphen, for example "core-dags_are_paused_at_creation". Section names must
   * not contain hyphens ("-"), opening square brackets ("["),  or closing
   * square brackets ("]"). The property name must not be empty and must not
   * contain an equals sign ("=") or semicolon (";"). Section and property names
   * must not contain a period ("."). Apache Airflow configuration property
   * names must be written in
   * [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can
   * contain any character, and can be written in any lower/upper case format.
   *
   * Certain Apache Airflow configuration property values are
   * [blocked](/composer/docs/concepts/airflow-configurations),
   * and cannot be overridden.
   *
   * @generated from field: map<string, string> airflow_config_overrides = 2;
   */
  airflowConfigOverrides: { [key: string]: string };

  /**
   * Optional. Custom Python Package Index (PyPI) packages to be installed in
   * the environment.
   *
   * Keys refer to the lowercase package name such as "numpy"
   * and values are the lowercase extras and version specifier such as
   * "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a
   * package without pinning it to a version specifier, use the empty string as
   * the value.
   *
   * @generated from field: map<string, string> pypi_packages = 3;
   */
  pypiPackages: { [key: string]: string };

  /**
   * Optional. Additional environment variables to provide to the Apache Airflow
   * scheduler, worker, and webserver processes.
   *
   * Environment variable names must match the regular expression
   * `[a-zA-Z_][a-zA-Z0-9_]*`. They cannot specify Apache Airflow
   * software configuration overrides (they cannot match the regular expression
   * `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the
   * following reserved names:
   *
   * * `AIRFLOW_HOME`
   * * `C_FORCE_ROOT`
   * * `CONTAINER_NAME`
   * * `DAGS_FOLDER`
   * * `GCP_PROJECT`
   * * `GCS_BUCKET`
   * * `GKE_CLUSTER_NAME`
   * * `SQL_DATABASE`
   * * `SQL_INSTANCE`
   * * `SQL_PASSWORD`
   * * `SQL_PROJECT`
   * * `SQL_REGION`
   * * `SQL_USER`
   *
   * @generated from field: map<string, string> env_variables = 4;
   */
  envVariables: { [key: string]: string };

  /**
   * Optional. The major version of Python used to run the Apache Airflow
   * scheduler, worker, and webserver processes.
   *
   * Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be
   * updated.
   *
   * This field is only supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*. Environments in newer versions always use
   * Python major version 3.
   *
   * @generated from field: string python_version = 6;
   */
  pythonVersion: string;

  /**
   * Optional. The number of schedulers for Airflow.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-2.*.*.
   *
   * @generated from field: int32 scheduler_count = 7;
   */
  schedulerCount: number;

  /**
   * Optional. The configuration for Cloud Data Lineage integration.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.CloudDataLineageIntegration cloud_data_lineage_integration = 8;
   */
  cloudDataLineageIntegration?: CloudDataLineageIntegration;

  /**
   * Optional. Whether or not the web server uses custom plugins.
   * If unspecified, the field defaults to `PLUGINS_ENABLED`.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.SoftwareConfig.WebServerPluginsMode web_server_plugins_mode = 10;
   */
  webServerPluginsMode: SoftwareConfig_WebServerPluginsMode;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.SoftwareConfig.
 * Use `create(SoftwareConfigSchema)` to create a new message.
 */
export const SoftwareConfigSchema: GenMessage<SoftwareConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 43);

/**
 * Web server plugins mode of the Cloud Composer environment.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.SoftwareConfig.WebServerPluginsMode
 */
export enum SoftwareConfig_WebServerPluginsMode {
  /**
   * Default mode.
   *
   * @generated from enum value: WEB_SERVER_PLUGINS_MODE_UNSPECIFIED = 0;
   */
  WEB_SERVER_PLUGINS_MODE_UNSPECIFIED = 0,

  /**
   * Web server plugins are not supported.
   *
   * @generated from enum value: PLUGINS_DISABLED = 1;
   */
  PLUGINS_DISABLED = 1,

  /**
   * Web server plugins are supported.
   *
   * @generated from enum value: PLUGINS_ENABLED = 2;
   */
  PLUGINS_ENABLED = 2,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.SoftwareConfig.WebServerPluginsMode.
 */
export const SoftwareConfig_WebServerPluginsModeSchema: GenEnum<SoftwareConfig_WebServerPluginsMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 43, 0);

/**
 * Configuration for controlling how IPs are allocated in the
 * GKE cluster running the Apache Airflow software.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy
 */
export type IPAllocationPolicy = Message<"google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy"> & {
  /**
   * Optional. Whether or not to enable Alias IPs in the GKE cluster.
   * If `true`, a VPC-native cluster is created.
   *
   * This field is only supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*. Environments in newer versions always use
   * VPC-native GKE clusters.
   *
   * @generated from field: bool use_ip_aliases = 1;
   */
  useIpAliases: boolean;

  /**
   * Configuration of allocating IP addresses for pods in the GKE cluster.
   *
   * @generated from oneof google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy.cluster_ip_allocation
   */
  clusterIpAllocation: {
    /**
     * Optional. The name of the GKE cluster's secondary range used to allocate
     * IP addresses to pods.
     *
     * For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*,
     * this field is applicable only when `use_ip_aliases` is true.
     *
     * @generated from field: string cluster_secondary_range_name = 2;
     */
    value: string;
    case: "clusterSecondaryRangeName";
  } | {
    /**
     * Optional. The IP address range used to allocate IP addresses to pods in
     * the GKE cluster.
     *
     * For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*,
     * this field is applicable only when `use_ip_aliases` is true.
     *
     * Set to blank to have GKE choose a range with the default size.
     *
     * Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific
     * netmask.
     *
     * Set to a
     * [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
     * notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
     * `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
     * to use.
     *
     * @generated from field: string cluster_ipv4_cidr_block = 4;
     */
    value: string;
    case: "clusterIpv4CidrBlock";
  } | { case: undefined; value?: undefined };

  /**
   * Configuration of allocating IP addresses for services in the GKE cluster.
   *
   * @generated from oneof google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy.services_ip_allocation
   */
  servicesIpAllocation: {
    /**
     * Optional. The name of the services' secondary range used to allocate
     * IP addresses to the GKE cluster.
     *
     * For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*,
     * this field is applicable only when `use_ip_aliases` is true.
     *
     * @generated from field: string services_secondary_range_name = 3;
     */
    value: string;
    case: "servicesSecondaryRangeName";
  } | {
    /**
     * Optional. The IP address range of the services IP addresses in this
     * GKE cluster.
     *
     * For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*,
     * this field is applicable only when `use_ip_aliases` is true.
     *
     * Set to blank to have GKE choose a range with the default size.
     *
     * Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific
     * netmask.
     *
     * Set to a
     * [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
     * notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g.
     * `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range
     * to use.
     *
     * @generated from field: string services_ipv4_cidr_block = 5;
     */
    value: string;
    case: "servicesIpv4CidrBlock";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy.
 * Use `create(IPAllocationPolicySchema)` to create a new message.
 */
export const IPAllocationPolicySchema: GenMessage<IPAllocationPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 44);

/**
 * The configuration information for the Kubernetes Engine nodes running
 * the Apache Airflow software.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.NodeConfig
 */
export type NodeConfig = Message<"google.cloud.orchestration.airflow.service.v1.NodeConfig"> & {
  /**
   * Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which
   * to deploy the VMs used to run the Apache Airflow software, specified as a
   * [relative resource
   * name](/apis/design/resource_names#relative_resource_name). For example:
   * "projects/{projectId}/zones/{zoneId}".
   *
   * This `location` must belong to the enclosing environment's project and
   * location. If both this field and `nodeConfig.machineType` are specified,
   * `nodeConfig.machineType` must belong to this `location`; if both are
   * unspecified, the service will pick a zone in the Compute Engine region
   * corresponding to the Cloud Composer location, and propagate that choice to
   * both fields. If only one field (`location` or `nodeConfig.machineType`) is
   * specified, the location information from the specified field will be
   * propagated to the unspecified field.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: string location = 1;
   */
  location: string;

  /**
   * Optional. The Compute Engine
   * [machine type](/compute/docs/machine-types) used for cluster instances,
   * specified as a
   * [relative resource
   * name](/apis/design/resource_names#relative_resource_name). For example:
   * "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}".
   *
   * The `machineType` must belong to the enclosing environment's project and
   * location. If both this field and `nodeConfig.location` are specified,
   * this `machineType` must belong to the `nodeConfig.location`; if both are
   * unspecified, the service will pick a zone in the Compute Engine region
   * corresponding to the Cloud Composer location, and propagate that choice to
   * both fields. If exactly one of this field and `nodeConfig.location` is
   * specified, the location information from the specified field will be
   * propagated to the unspecified field.
   *
   * The `machineTypeId` must not be a [shared-core machine
   * type](/compute/docs/machine-types#sharedcore).
   *
   * If this field is unspecified, the `machineTypeId` defaults
   * to "n1-standard-1".
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: string machine_type = 2;
   */
  machineType: string;

  /**
   * Optional. The Compute Engine network to be used for machine
   * communications, specified as a
   * [relative resource
   * name](/apis/design/resource_names#relative_resource_name). For example:
   * "projects/{projectId}/global/networks/{networkId}".
   *
   * If unspecified, the "default" network ID in the environment's project is
   * used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets)
   * is provided, `nodeConfig.subnetwork` must also be provided. For
   * [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see
   * `nodeConfig.subnetwork`.
   *
   * @generated from field: string network = 3;
   */
  network: string;

  /**
   * Optional. The Compute Engine subnetwork to be used for machine
   * communications, specified as a
   * [relative resource
   * name](/apis/design/resource_names#relative_resource_name). For example:
   * "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}"
   *
   * If a subnetwork is provided, `nodeConfig.network` must also be provided,
   * and the subnetwork must belong to the enclosing environment's project and
   * location.
   *
   * @generated from field: string subnetwork = 4;
   */
  subnetwork: string;

  /**
   * Optional. The disk size in GB used for node VMs. Minimum size is 30GB.
   * If unspecified, defaults to 100GB. Cannot be updated.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: int32 disk_size_gb = 5;
   */
  diskSizeGb: number;

  /**
   * Optional. The set of Google API scopes to be made available on all
   * node VMs. If `oauth_scopes` is empty, defaults to
   * ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: repeated string oauth_scopes = 6;
   */
  oauthScopes: string[];

  /**
   * Optional. The Google Cloud Platform Service Account to be used by the node
   * VMs. If a service account is not specified, the "default" Compute Engine
   * service account is used. Cannot be updated.
   *
   * @generated from field: string service_account = 7;
   */
  serviceAccount: string;

  /**
   * Optional. The list of instance tags applied to all node VMs. Tags are used
   * to identify valid sources or targets for network firewalls. Each tag within
   * the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
   * Cannot be updated.
   *
   * @generated from field: repeated string tags = 8;
   */
  tags: string[];

  /**
   * Optional. The configuration for controlling how IPs are allocated in the
   * GKE cluster.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.IPAllocationPolicy ip_allocation_policy = 9;
   */
  ipAllocationPolicy?: IPAllocationPolicy;

  /**
   * Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines
   * nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for
   * all destination addresses, except between pods traffic.
   *
   * See:
   * https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
   *
   * @generated from field: bool enable_ip_masq_agent = 11;
   */
  enableIpMasqAgent: boolean;

  /**
   * Optional. Network Attachment that Cloud Composer environment is connected
   * to, which provides connectivity with a user's VPC network. Takes precedence
   * over network and subnetwork settings. If not provided, but network and
   * subnetwork are defined during environment, it will be provisioned. If not
   * provided and network and subnetwork are also empty, then connectivity to
   * user's VPC network is disabled. Network attachment must be provided in
   * format
   * projects/{project}/regions/{region}/networkAttachments/{networkAttachment}.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: string composer_network_attachment = 12;
   */
  composerNetworkAttachment: string;

  /**
   * Optional. The IP range in CIDR notation to use internally by Cloud
   * Composer. IP addresses are not reserved - and the same range can be used by
   * multiple Cloud Composer environments. In case of overlap, IPs from this
   * range will not be accessible in the user's VPC network. Cannot be updated.
   * If not specified, the default value of '100.64.128.0/20' is used.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: string composer_internal_ipv4_cidr_block = 13;
   */
  composerInternalIpv4CidrBlock: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.NodeConfig.
 * Use `create(NodeConfigSchema)` to create a new message.
 */
export const NodeConfigSchema: GenMessage<NodeConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 45);

/**
 * Configuration options for the private GKE cluster in a Cloud Composer
 * environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PrivateClusterConfig
 */
export type PrivateClusterConfig = Message<"google.cloud.orchestration.airflow.service.v1.PrivateClusterConfig"> & {
  /**
   * Optional. If `true`, access to the public endpoint of the GKE cluster is
   * denied.
   *
   * @generated from field: bool enable_private_endpoint = 1;
   */
  enablePrivateEndpoint: boolean;

  /**
   * Optional. The CIDR block from which IPv4 range for GKE master will be
   * reserved. If left blank, the default value of '172.16.0.0/23' is used.
   *
   * @generated from field: string master_ipv4_cidr_block = 2;
   */
  masterIpv4CidrBlock: string;

  /**
   * Output only. The IP range in CIDR notation to use for the hosted master
   * network. This range is used for assigning internal IP addresses to the GKE
   * cluster master or set of masters and to the internal load balancer virtual
   * IP. This range must not overlap with any other ranges in use within the
   * cluster's network.
   *
   * @generated from field: string master_ipv4_reserved_range = 3;
   */
  masterIpv4ReservedRange: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PrivateClusterConfig.
 * Use `create(PrivateClusterConfigSchema)` to create a new message.
 */
export const PrivateClusterConfigSchema: GenMessage<PrivateClusterConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 46);

/**
 * Configuration options for networking connections in the Composer 2
 * environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.NetworkingConfig
 */
export type NetworkingConfig = Message<"google.cloud.orchestration.airflow.service.v1.NetworkingConfig"> & {
  /**
   * Optional. Indicates the user requested specifc connection type between
   * Tenant and Customer projects. You cannot set networking connection type in
   * public IP environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.NetworkingConfig.ConnectionType connection_type = 1;
   */
  connectionType: NetworkingConfig_ConnectionType;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.NetworkingConfig.
 * Use `create(NetworkingConfigSchema)` to create a new message.
 */
export const NetworkingConfigSchema: GenMessage<NetworkingConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 47);

/**
 * Represents connection type between Composer environment in Customer
 * Project and the corresponding Tenant project, from a predefined list
 * of available connection modes.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.NetworkingConfig.ConnectionType
 */
export enum NetworkingConfig_ConnectionType {
  /**
   * No specific connection type was requested, so the environment uses
   * the default value corresponding to the rest of its configuration.
   *
   * @generated from enum value: CONNECTION_TYPE_UNSPECIFIED = 0;
   */
  CONNECTION_TYPE_UNSPECIFIED = 0,

  /**
   * Requests the use of VPC peerings for connecting the Customer and Tenant
   * projects.
   *
   * @generated from enum value: VPC_PEERING = 1;
   */
  VPC_PEERING = 1,

  /**
   * Requests the use of Private Service Connect for connecting the Customer
   * and Tenant projects.
   *
   * @generated from enum value: PRIVATE_SERVICE_CONNECT = 2;
   */
  PRIVATE_SERVICE_CONNECT = 2,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.NetworkingConfig.ConnectionType.
 */
export const NetworkingConfig_ConnectionTypeSchema: GenEnum<NetworkingConfig_ConnectionType> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 47, 0);

/**
 * The configuration information for configuring a Private IP Cloud Composer
 * environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.PrivateEnvironmentConfig
 */
export type PrivateEnvironmentConfig = Message<"google.cloud.orchestration.airflow.service.v1.PrivateEnvironmentConfig"> & {
  /**
   * Optional. If `true`, a Private IP Cloud Composer environment is created.
   * If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be
   * set to true for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: bool enable_private_environment = 1;
   */
  enablePrivateEnvironment: boolean;

  /**
   * Optional. If `true`, builds performed during operations that install Python
   * packages have only private connectivity to Google services (including
   * Artifact Registry) and VPC network (if either `NodeConfig.network` and
   * `NodeConfig.subnetwork` fields or `NodeConfig.composer_network_attachment`
   * field are specified). If `false`, the builds also have access to the
   * internet.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: bool enable_private_builds_only = 11;
   */
  enablePrivateBuildsOnly: boolean;

  /**
   * Optional. Configuration for the private GKE cluster for a Private IP
   * Cloud Composer environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.PrivateClusterConfig private_cluster_config = 2;
   */
  privateClusterConfig?: PrivateClusterConfig;

  /**
   * Optional. The CIDR block from which IP range for web server will be
   * reserved. Needs to be disjoint from
   * `private_cluster_config.master_ipv4_cidr_block` and
   * `cloud_sql_ipv4_cidr_block`.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: string web_server_ipv4_cidr_block = 3;
   */
  webServerIpv4CidrBlock: string;

  /**
   * Optional. The CIDR block from which IP range in tenant project will be
   * reserved for Cloud SQL. Needs to be disjoint from
   * `web_server_ipv4_cidr_block`.
   *
   * @generated from field: string cloud_sql_ipv4_cidr_block = 4;
   */
  cloudSqlIpv4CidrBlock: string;

  /**
   * Output only. The IP range reserved for the tenant project's App Engine VMs.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-1.*.*-airflow-*.*.*.
   *
   * @generated from field: string web_server_ipv4_reserved_range = 5;
   */
  webServerIpv4ReservedRange: string;

  /**
   * Optional. The CIDR block from which IP range for Cloud Composer Network in
   * tenant project will be reserved. Needs to be disjoint from
   * private_cluster_config.master_ipv4_cidr_block and
   * cloud_sql_ipv4_cidr_block.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: string cloud_composer_network_ipv4_cidr_block = 7;
   */
  cloudComposerNetworkIpv4CidrBlock: string;

  /**
   * Output only. The IP range reserved for the tenant project's Cloud Composer
   * network.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-2.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: string cloud_composer_network_ipv4_reserved_range = 8;
   */
  cloudComposerNetworkIpv4ReservedRange: string;

  /**
   * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used
   * for `IPAllocationPolicy.cluster_ipv4_cidr_block` and
   * `IPAllocationPolicy.service_ipv4_cidr_block`.
   *
   * @generated from field: bool enable_privately_used_public_ips = 6;
   */
  enablePrivatelyUsedPublicIps: boolean;

  /**
   * Optional. When specified, the environment will use Private Service Connect
   * instead of VPC peerings to connect to Cloud SQL in the Tenant Project,
   * and the PSC endpoint in the Customer Project will use an IP address from
   * this subnetwork.
   *
   * @generated from field: string cloud_composer_connection_subnetwork = 9;
   */
  cloudComposerConnectionSubnetwork: string;

  /**
   * Optional. Configuration for the network connections configuration in the
   * environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.NetworkingConfig networking_config = 10;
   */
  networkingConfig?: NetworkingConfig;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.PrivateEnvironmentConfig.
 * Use `create(PrivateEnvironmentConfigSchema)` to create a new message.
 */
export const PrivateEnvironmentConfigSchema: GenMessage<PrivateEnvironmentConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 48);

/**
 * The Kubernetes workloads configuration for GKE cluster associated with the
 * Cloud Composer environment. Supported for Cloud Composer environments in
 * versions composer-2.*.*-airflow-*.*.* and newer.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig
 */
export type WorkloadsConfig = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig"> & {
  /**
   * Optional. Resources used by Airflow schedulers.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.SchedulerResource scheduler = 1;
   */
  scheduler?: WorkloadsConfig_SchedulerResource;

  /**
   * Optional. Resources used by Airflow web server.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WebServerResource web_server = 2;
   */
  webServer?: WorkloadsConfig_WebServerResource;

  /**
   * Optional. Resources used by Airflow workers.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WorkerResource worker = 3;
   */
  worker?: WorkloadsConfig_WorkerResource;

  /**
   * Optional. Resources used by Airflow triggerers.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.TriggererResource triggerer = 4;
   */
  triggerer?: WorkloadsConfig_TriggererResource;

  /**
   * Optional. Resources used by Airflow DAG processors.
   *
   * This field is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.DagProcessorResource dag_processor = 5;
   */
  dagProcessor?: WorkloadsConfig_DagProcessorResource;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.
 * Use `create(WorkloadsConfigSchema)` to create a new message.
 */
export const WorkloadsConfigSchema: GenMessage<WorkloadsConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49);

/**
 * Configuration for resources used by Airflow schedulers.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.SchedulerResource
 */
export type WorkloadsConfig_SchedulerResource = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.SchedulerResource"> & {
  /**
   * Optional. CPU request and limit for a single Airflow scheduler replica.
   *
   * @generated from field: float cpu = 1;
   */
  cpu: number;

  /**
   * Optional. Memory (GB) request and limit for a single Airflow scheduler
   * replica.
   *
   * @generated from field: float memory_gb = 2;
   */
  memoryGb: number;

  /**
   * Optional. Storage (GB) request and limit for a single Airflow scheduler
   * replica.
   *
   * @generated from field: float storage_gb = 3;
   */
  storageGb: number;

  /**
   * Optional. The number of schedulers.
   *
   * @generated from field: int32 count = 4;
   */
  count: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.SchedulerResource.
 * Use `create(WorkloadsConfig_SchedulerResourceSchema)` to create a new message.
 */
export const WorkloadsConfig_SchedulerResourceSchema: GenMessage<WorkloadsConfig_SchedulerResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49, 0);

/**
 * Configuration for resources used by Airflow web server.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WebServerResource
 */
export type WorkloadsConfig_WebServerResource = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WebServerResource"> & {
  /**
   * Optional. CPU request and limit for Airflow web server.
   *
   * @generated from field: float cpu = 1;
   */
  cpu: number;

  /**
   * Optional. Memory (GB) request and limit for Airflow web server.
   *
   * @generated from field: float memory_gb = 2;
   */
  memoryGb: number;

  /**
   * Optional. Storage (GB) request and limit for Airflow web server.
   *
   * @generated from field: float storage_gb = 3;
   */
  storageGb: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WebServerResource.
 * Use `create(WorkloadsConfig_WebServerResourceSchema)` to create a new message.
 */
export const WorkloadsConfig_WebServerResourceSchema: GenMessage<WorkloadsConfig_WebServerResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49, 1);

/**
 * Configuration for resources used by Airflow workers.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WorkerResource
 */
export type WorkloadsConfig_WorkerResource = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WorkerResource"> & {
  /**
   * Optional. CPU request and limit for a single Airflow worker replica.
   *
   * @generated from field: float cpu = 1;
   */
  cpu: number;

  /**
   * Optional. Memory (GB) request and limit for a single Airflow worker
   * replica.
   *
   * @generated from field: float memory_gb = 2;
   */
  memoryGb: number;

  /**
   * Optional. Storage (GB) request and limit for a single Airflow worker
   * replica.
   *
   * @generated from field: float storage_gb = 3;
   */
  storageGb: number;

  /**
   * Optional. Minimum number of workers for autoscaling.
   *
   * @generated from field: int32 min_count = 4;
   */
  minCount: number;

  /**
   * Optional. Maximum number of workers for autoscaling.
   *
   * @generated from field: int32 max_count = 5;
   */
  maxCount: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.WorkerResource.
 * Use `create(WorkloadsConfig_WorkerResourceSchema)` to create a new message.
 */
export const WorkloadsConfig_WorkerResourceSchema: GenMessage<WorkloadsConfig_WorkerResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49, 2);

/**
 * Configuration for resources used by Airflow triggerers.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.TriggererResource
 */
export type WorkloadsConfig_TriggererResource = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.TriggererResource"> & {
  /**
   * Optional. The number of triggerers.
   *
   * @generated from field: int32 count = 1;
   */
  count: number;

  /**
   * Optional. CPU request and limit for a single Airflow triggerer replica.
   *
   * @generated from field: float cpu = 2;
   */
  cpu: number;

  /**
   * Optional. Memory (GB) request and limit for a single Airflow triggerer
   * replica.
   *
   * @generated from field: float memory_gb = 3;
   */
  memoryGb: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.TriggererResource.
 * Use `create(WorkloadsConfig_TriggererResourceSchema)` to create a new message.
 */
export const WorkloadsConfig_TriggererResourceSchema: GenMessage<WorkloadsConfig_TriggererResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49, 3);

/**
 * Configuration for resources used by Airflow DAG processors.
 *
 * This field is supported for Cloud Composer environments in versions
 * composer-3.*.*-airflow-*.*.* and newer.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.DagProcessorResource
 */
export type WorkloadsConfig_DagProcessorResource = Message<"google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.DagProcessorResource"> & {
  /**
   * Optional. CPU request and limit for a single Airflow DAG processor
   * replica.
   *
   * @generated from field: float cpu = 1;
   */
  cpu: number;

  /**
   * Optional. Memory (GB) request and limit for a single Airflow DAG
   * processor replica.
   *
   * @generated from field: float memory_gb = 2;
   */
  memoryGb: number;

  /**
   * Optional. Storage (GB) request and limit for a single Airflow DAG
   * processor replica.
   *
   * @generated from field: float storage_gb = 3;
   */
  storageGb: number;

  /**
   * Optional. The number of DAG processors. If not provided or set to 0, a
   * single DAG processor instance will be created.
   *
   * @generated from field: int32 count = 4;
   */
  count: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.WorkloadsConfig.DagProcessorResource.
 * Use `create(WorkloadsConfig_DagProcessorResourceSchema)` to create a new message.
 */
export const WorkloadsConfig_DagProcessorResourceSchema: GenMessage<WorkloadsConfig_DagProcessorResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 49, 4);

/**
 * The Recovery settings of an environment.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.RecoveryConfig
 */
export type RecoveryConfig = Message<"google.cloud.orchestration.airflow.service.v1.RecoveryConfig"> & {
  /**
   * Optional. The configuration for scheduled snapshot creation mechanism.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.ScheduledSnapshotsConfig scheduled_snapshots_config = 1;
   */
  scheduledSnapshotsConfig?: ScheduledSnapshotsConfig;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.RecoveryConfig.
 * Use `create(RecoveryConfigSchema)` to create a new message.
 */
export const RecoveryConfigSchema: GenMessage<RecoveryConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 50);

/**
 * The configuration for scheduled snapshot creation mechanism.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.ScheduledSnapshotsConfig
 */
export type ScheduledSnapshotsConfig = Message<"google.cloud.orchestration.airflow.service.v1.ScheduledSnapshotsConfig"> & {
  /**
   * Optional. Whether scheduled snapshots creation is enabled.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Optional. The Cloud Storage location for storing automatically created
   * snapshots.
   *
   * @generated from field: string snapshot_location = 6;
   */
  snapshotLocation: string;

  /**
   * Optional. The cron expression representing the time when snapshots creation
   * mechanism runs. This field is subject to additional validation around
   * frequency of execution.
   *
   * @generated from field: string snapshot_creation_schedule = 3;
   */
  snapshotCreationSchedule: string;

  /**
   * Optional. Time zone that sets the context to interpret
   * snapshot_creation_schedule.
   *
   * @generated from field: string time_zone = 5;
   */
  timeZone: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.ScheduledSnapshotsConfig.
 * Use `create(ScheduledSnapshotsConfigSchema)` to create a new message.
 */
export const ScheduledSnapshotsConfigSchema: GenMessage<ScheduledSnapshotsConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 51);

/**
 * Configuration options for the master authorized networks feature. Enabled
 * master authorized networks will disallow all external traffic to access
 * Kubernetes master through HTTPS except traffic from the given CIDR blocks,
 * Google Compute Engine Public IPs and Google Prod IPs.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig
 */
export type MasterAuthorizedNetworksConfig = Message<"google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig"> & {
  /**
   * Whether or not master authorized networks feature is enabled.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Up to 50 external networks that could access Kubernetes master through
   * HTTPS.
   *
   * @generated from field: repeated google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
   */
  cidrBlocks: MasterAuthorizedNetworksConfig_CidrBlock[];
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig.
 * Use `create(MasterAuthorizedNetworksConfigSchema)` to create a new message.
 */
export const MasterAuthorizedNetworksConfigSchema: GenMessage<MasterAuthorizedNetworksConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 52);

/**
 * CIDR block with an optional name.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig.CidrBlock
 */
export type MasterAuthorizedNetworksConfig_CidrBlock = Message<"google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig.CidrBlock"> & {
  /**
   * User-defined name that identifies the CIDR block.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * CIDR block that must be specified in CIDR notation.
   *
   * @generated from field: string cidr_block = 2;
   */
  cidrBlock: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.MasterAuthorizedNetworksConfig.CidrBlock.
 * Use `create(MasterAuthorizedNetworksConfig_CidrBlockSchema)` to create a new message.
 */
export const MasterAuthorizedNetworksConfig_CidrBlockSchema: GenMessage<MasterAuthorizedNetworksConfig_CidrBlock> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 52, 0);

/**
 * Configuration for Cloud Data Lineage integration.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CloudDataLineageIntegration
 */
export type CloudDataLineageIntegration = Message<"google.cloud.orchestration.airflow.service.v1.CloudDataLineageIntegration"> & {
  /**
   * Optional. Whether or not Cloud Data Lineage integration is enabled.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CloudDataLineageIntegration.
 * Use `create(CloudDataLineageIntegrationSchema)` to create a new message.
 */
export const CloudDataLineageIntegrationSchema: GenMessage<CloudDataLineageIntegration> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 53);

/**
 * An environment for running orchestration tasks.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.Environment
 */
export type Environment = Message<"google.cloud.orchestration.airflow.service.v1.Environment"> & {
  /**
   * The resource name of the environment, in the form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * EnvironmentId must start with a lowercase letter followed by up to 63
   * lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Configuration parameters for this environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.EnvironmentConfig config = 2;
   */
  config?: EnvironmentConfig;

  /**
   * Output only. The UUID (Universally Unique IDentifier) associated with this
   * environment. This value is generated when the environment is created.
   *
   * @generated from field: string uuid = 3;
   */
  uuid: string;

  /**
   * The current state of the environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.Environment.State state = 4;
   */
  state: Environment_State;

  /**
   * Output only. The time at which this environment was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time at which this environment was last modified.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Optional. User-defined labels for this environment.
   * The labels map can contain no more than 64 entries. Entries of the labels
   * map are UTF8 strings that comply with the following restrictions:
   *
   * * Keys must conform to regexp: [\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}
   * * Values must conform to regexp:  [\p{Ll}\p{Lo}\p{N}_-]{0,63}
   * * Both keys and values are additionally constrained to be <= 128 bytes in
   * size.
   *
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string };

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzs = 8;
   */
  satisfiesPzs: boolean;

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzi = 10;
   */
  satisfiesPzi: boolean;

  /**
   * Optional. Storage configuration for this environment.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.StorageConfig storage_config = 9;
   */
  storageConfig?: StorageConfig;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.Environment.
 * Use `create(EnvironmentSchema)` to create a new message.
 */
export const EnvironmentSchema: GenMessage<Environment> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 54);

/**
 * State of the environment.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.Environment.State
 */
export enum Environment_State {
  /**
   * The state of the environment is unknown.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The environment is in the process of being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The environment is currently running and healthy. It is ready for use.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The environment is being updated. It remains usable but cannot receive
   * additional update requests or be deleted at this time.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The environment is undergoing deletion. It cannot be used.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * The environment has encountered an error and cannot be used.
   *
   * @generated from enum value: ERROR = 5;
   */
  ERROR = 5,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.Environment.State.
 */
export const Environment_StateSchema: GenEnum<Environment_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 54, 0);

/**
 * Request to check whether image upgrade will succeed.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CheckUpgradeRequest
 */
export type CheckUpgradeRequest = Message<"google.cloud.orchestration.airflow.service.v1.CheckUpgradeRequest"> & {
  /**
   * Required. The resource name of the environment to check upgrade for, in the
   * form:
   * "projects/{projectId}/locations/{locationId}/environments/{environmentId}"
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * Optional. The version of the software running in the environment.
   * This encapsulates both the version of Cloud Composer functionality and the
   * version of Apache Airflow. It must match the regular expression
   * `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`.
   * When used as input, the server also checks if the provided version is
   * supported and denies the request for an unsupported version.
   *
   * The Cloud Composer portion of the image version is a full
   * [semantic version](https://semver.org), or an alias in the form of major
   * version number or `latest`. When an alias is provided, the server replaces
   * it with the current Cloud Composer version that satisfies the alias.
   *
   * The Apache Airflow portion of the image version is a full semantic version
   * that points to one of the supported Apache Airflow versions, or an alias in
   * the form of only major or major.minor versions specified. When an alias is
   * provided, the server replaces it with the latest Apache Airflow version
   * that satisfies the alias and is supported in the given Cloud Composer
   * version.
   *
   * In all cases, the resolved image version is stored in the same field.
   *
   * See also [version
   * list](/composer/docs/concepts/versioning/composer-versions) and [versioning
   * overview](/composer/docs/concepts/versioning/composer-versioning-overview).
   *
   * @generated from field: string image_version = 2;
   */
  imageVersion: string;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CheckUpgradeRequest.
 * Use `create(CheckUpgradeRequestSchema)` to create a new message.
 */
export const CheckUpgradeRequestSchema: GenMessage<CheckUpgradeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 55);

/**
 * Message containing information about the result of an upgrade check
 * operation.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse
 */
export type CheckUpgradeResponse = Message<"google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse"> & {
  /**
   * Output only. Url for a docker build log of an upgraded image.
   *
   * @generated from field: string build_log_uri = 1;
   */
  buildLogUri: string;

  /**
   * Output only. Whether build has succeeded or failed on modules conflicts.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse.ConflictResult contains_pypi_modules_conflict = 4;
   */
  containsPypiModulesConflict: CheckUpgradeResponse_ConflictResult;

  /**
   * Output only. Extract from a docker image build log containing information
   * about pypi modules conflicts.
   *
   * @generated from field: string pypi_conflict_build_log_extract = 3;
   */
  pypiConflictBuildLogExtract: string;

  /**
   * Composer image for which the build was happening.
   *
   * @generated from field: string image_version = 5;
   */
  imageVersion: string;

  /**
   * Pypi dependencies specified in the environment configuration, at the time
   * when the build was triggered.
   *
   * @generated from field: map<string, string> pypi_dependencies = 6;
   */
  pypiDependencies: { [key: string]: string };
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse.
 * Use `create(CheckUpgradeResponseSchema)` to create a new message.
 */
export const CheckUpgradeResponseSchema: GenMessage<CheckUpgradeResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 56);

/**
 * Whether there were python modules conflict during image build.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse.ConflictResult
 */
export enum CheckUpgradeResponse_ConflictResult {
  /**
   * It is unknown whether build had conflicts or not.
   *
   * @generated from enum value: CONFLICT_RESULT_UNSPECIFIED = 0;
   */
  CONFLICT_RESULT_UNSPECIFIED = 0,

  /**
   * There were python packages conflicts.
   *
   * @generated from enum value: CONFLICT = 1;
   */
  CONFLICT = 1,

  /**
   * There were no python packages conflicts.
   *
   * @generated from enum value: NO_CONFLICT = 2;
   */
  NO_CONFLICT = 2,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.CheckUpgradeResponse.ConflictResult.
 */
export const CheckUpgradeResponse_ConflictResultSchema: GenEnum<CheckUpgradeResponse_ConflictResult> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 56, 0);

/**
 * The configuration setting for Airflow database data retention mechanism.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.DataRetentionConfig
 */
export type DataRetentionConfig = Message<"google.cloud.orchestration.airflow.service.v1.DataRetentionConfig"> & {
  /**
   * Optional. The retention policy for airflow metadata database.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig airflow_metadata_retention_config = 1;
   */
  airflowMetadataRetentionConfig?: AirflowMetadataRetentionPolicyConfig;

  /**
   * Optional. The configuration settings for task logs retention
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig task_logs_retention_config = 2;
   */
  taskLogsRetentionConfig?: TaskLogsRetentionConfig;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.DataRetentionConfig.
 * Use `create(DataRetentionConfigSchema)` to create a new message.
 */
export const DataRetentionConfigSchema: GenMessage<DataRetentionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 57);

/**
 * The configuration setting for Task Logs.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig
 */
export type TaskLogsRetentionConfig = Message<"google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig"> & {
  /**
   * Optional. The mode of storage for Airflow workers task logs.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig.TaskLogsStorageMode storage_mode = 2;
   */
  storageMode: TaskLogsRetentionConfig_TaskLogsStorageMode;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig.
 * Use `create(TaskLogsRetentionConfigSchema)` to create a new message.
 */
export const TaskLogsRetentionConfigSchema: GenMessage<TaskLogsRetentionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 58);

/**
 * The definition of task_logs_storage_mode.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig.TaskLogsStorageMode
 */
export enum TaskLogsRetentionConfig_TaskLogsStorageMode {
  /**
   * This configuration is not specified by the user.
   *
   * @generated from enum value: TASK_LOGS_STORAGE_MODE_UNSPECIFIED = 0;
   */
  TASK_LOGS_STORAGE_MODE_UNSPECIFIED = 0,

  /**
   * Store task logs in Cloud Logging and in the environment's Cloud Storage
   * bucket.
   *
   * @generated from enum value: CLOUD_LOGGING_AND_CLOUD_STORAGE = 1;
   */
  CLOUD_LOGGING_AND_CLOUD_STORAGE = 1,

  /**
   * Store task logs in Cloud Logging only.
   *
   * @generated from enum value: CLOUD_LOGGING_ONLY = 2;
   */
  CLOUD_LOGGING_ONLY = 2,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.TaskLogsRetentionConfig.TaskLogsStorageMode.
 */
export const TaskLogsRetentionConfig_TaskLogsStorageModeSchema: GenEnum<TaskLogsRetentionConfig_TaskLogsStorageMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 58, 0);

/**
 * The policy for airflow metadata database retention.
 *
 * @generated from message google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig
 */
export type AirflowMetadataRetentionPolicyConfig = Message<"google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig"> & {
  /**
   * Optional. Retention can be either enabled or disabled.
   *
   * @generated from field: google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig.RetentionMode retention_mode = 1;
   */
  retentionMode: AirflowMetadataRetentionPolicyConfig_RetentionMode;

  /**
   * Optional. How many days data should be retained for.
   *
   * @generated from field: int32 retention_days = 2;
   */
  retentionDays: number;
};

/**
 * Describes the message google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig.
 * Use `create(AirflowMetadataRetentionPolicyConfigSchema)` to create a new message.
 */
export const AirflowMetadataRetentionPolicyConfigSchema: GenMessage<AirflowMetadataRetentionPolicyConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 59);

/**
 * Describes retention policy.
 *
 * @generated from enum google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig.RetentionMode
 */
export enum AirflowMetadataRetentionPolicyConfig_RetentionMode {
  /**
   * Default mode doesn't change environment parameters.
   *
   * @generated from enum value: RETENTION_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Retention policy is enabled.
   *
   * @generated from enum value: RETENTION_MODE_ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * Retention policy is disabled.
   *
   * @generated from enum value: RETENTION_MODE_DISABLED = 2;
   */
  DISABLED = 2,
}

/**
 * Describes the enum google.cloud.orchestration.airflow.service.v1.AirflowMetadataRetentionPolicyConfig.RetentionMode.
 */
export const AirflowMetadataRetentionPolicyConfig_RetentionModeSchema: GenEnum<AirflowMetadataRetentionPolicyConfig_RetentionMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 59, 0);

/**
 * Managed Apache Airflow Environments.
 *
 * @generated from service google.cloud.orchestration.airflow.service.v1.Environments
 */
export const Environments: GenService<{
  /**
   * Create a new environment.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.CreateEnvironment
   */
  createEnvironment: {
    methodKind: "unary";
    input: typeof CreateEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Get an existing environment.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.GetEnvironment
   */
  getEnvironment: {
    methodKind: "unary";
    input: typeof GetEnvironmentRequestSchema;
    output: typeof EnvironmentSchema;
  },
  /**
   * List environments.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.ListEnvironments
   */
  listEnvironments: {
    methodKind: "unary";
    input: typeof ListEnvironmentsRequestSchema;
    output: typeof ListEnvironmentsResponseSchema;
  },
  /**
   * Update an environment.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.UpdateEnvironment
   */
  updateEnvironment: {
    methodKind: "unary";
    input: typeof UpdateEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Delete an environment.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.DeleteEnvironment
   */
  deleteEnvironment: {
    methodKind: "unary";
    input: typeof DeleteEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Executes Airflow CLI command.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.ExecuteAirflowCommand
   */
  executeAirflowCommand: {
    methodKind: "unary";
    input: typeof ExecuteAirflowCommandRequestSchema;
    output: typeof ExecuteAirflowCommandResponseSchema;
  },
  /**
   * Stops Airflow CLI command execution.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.StopAirflowCommand
   */
  stopAirflowCommand: {
    methodKind: "unary";
    input: typeof StopAirflowCommandRequestSchema;
    output: typeof StopAirflowCommandResponseSchema;
  },
  /**
   * Polls Airflow CLI command execution and fetches logs.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.PollAirflowCommand
   */
  pollAirflowCommand: {
    methodKind: "unary";
    input: typeof PollAirflowCommandRequestSchema;
    output: typeof PollAirflowCommandResponseSchema;
  },
  /**
   * Lists workloads in a Cloud Composer environment. Workload is a unit that
   * runs a single Composer component.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.ListWorkloads
   */
  listWorkloads: {
    methodKind: "unary";
    input: typeof ListWorkloadsRequestSchema;
    output: typeof ListWorkloadsResponseSchema;
  },
  /**
   * Check if an upgrade operation on the environment will succeed.
   *
   * In case of problems detailed info can be found in the returned Operation.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.CheckUpgrade
   */
  checkUpgrade: {
    methodKind: "unary";
    input: typeof CheckUpgradeRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a user workloads Secret.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.CreateUserWorkloadsSecret
   */
  createUserWorkloadsSecret: {
    methodKind: "unary";
    input: typeof CreateUserWorkloadsSecretRequestSchema;
    output: typeof UserWorkloadsSecretSchema;
  },
  /**
   * Gets an existing user workloads Secret.
   * Values of the "data" field in the response are cleared.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.GetUserWorkloadsSecret
   */
  getUserWorkloadsSecret: {
    methodKind: "unary";
    input: typeof GetUserWorkloadsSecretRequestSchema;
    output: typeof UserWorkloadsSecretSchema;
  },
  /**
   * Lists user workloads Secrets.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.ListUserWorkloadsSecrets
   */
  listUserWorkloadsSecrets: {
    methodKind: "unary";
    input: typeof ListUserWorkloadsSecretsRequestSchema;
    output: typeof ListUserWorkloadsSecretsResponseSchema;
  },
  /**
   * Updates a user workloads Secret.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.UpdateUserWorkloadsSecret
   */
  updateUserWorkloadsSecret: {
    methodKind: "unary";
    input: typeof UpdateUserWorkloadsSecretRequestSchema;
    output: typeof UserWorkloadsSecretSchema;
  },
  /**
   * Deletes a user workloads Secret.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.DeleteUserWorkloadsSecret
   */
  deleteUserWorkloadsSecret: {
    methodKind: "unary";
    input: typeof DeleteUserWorkloadsSecretRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a user workloads ConfigMap.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.CreateUserWorkloadsConfigMap
   */
  createUserWorkloadsConfigMap: {
    methodKind: "unary";
    input: typeof CreateUserWorkloadsConfigMapRequestSchema;
    output: typeof UserWorkloadsConfigMapSchema;
  },
  /**
   * Gets an existing user workloads ConfigMap.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.GetUserWorkloadsConfigMap
   */
  getUserWorkloadsConfigMap: {
    methodKind: "unary";
    input: typeof GetUserWorkloadsConfigMapRequestSchema;
    output: typeof UserWorkloadsConfigMapSchema;
  },
  /**
   * Lists user workloads ConfigMaps.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.ListUserWorkloadsConfigMaps
   */
  listUserWorkloadsConfigMaps: {
    methodKind: "unary";
    input: typeof ListUserWorkloadsConfigMapsRequestSchema;
    output: typeof ListUserWorkloadsConfigMapsResponseSchema;
  },
  /**
   * Updates a user workloads ConfigMap.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.UpdateUserWorkloadsConfigMap
   */
  updateUserWorkloadsConfigMap: {
    methodKind: "unary";
    input: typeof UpdateUserWorkloadsConfigMapRequestSchema;
    output: typeof UserWorkloadsConfigMapSchema;
  },
  /**
   * Deletes a user workloads ConfigMap.
   *
   * This method is supported for Cloud Composer environments in versions
   * composer-3.*.*-airflow-*.*.* and newer.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.DeleteUserWorkloadsConfigMap
   */
  deleteUserWorkloadsConfigMap: {
    methodKind: "unary";
    input: typeof DeleteUserWorkloadsConfigMapRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a snapshots of a Cloud Composer environment.
   *
   * As a result of this operation, snapshot of environment's state is stored
   * in a location specified in the SaveSnapshotRequest.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.SaveSnapshot
   */
  saveSnapshot: {
    methodKind: "unary";
    input: typeof SaveSnapshotRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Loads a snapshot of a Cloud Composer environment.
   *
   * As a result of this operation, a snapshot of environment's specified in
   * LoadSnapshotRequest is loaded into the environment.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.LoadSnapshot
   */
  loadSnapshot: {
    methodKind: "unary";
    input: typeof LoadSnapshotRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Triggers database failover (only for highly resilient environments).
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.DatabaseFailover
   */
  databaseFailover: {
    methodKind: "unary";
    input: typeof DatabaseFailoverRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Fetches database properties.
   *
   * @generated from rpc google.cloud.orchestration.airflow.service.v1.Environments.FetchDatabaseProperties
   */
  fetchDatabaseProperties: {
    methodKind: "unary";
    input: typeof FetchDatabasePropertiesRequestSchema;
    output: typeof FetchDatabasePropertiesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_orchestration_airflow_service_v1_environments, 0);

