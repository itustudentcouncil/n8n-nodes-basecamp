// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/confidentialcomputing/v1alpha1/service.proto (package google.cloud.confidentialcomputing.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/confidentialcomputing/v1alpha1/service.proto.
 */
export const file_google_cloud_confidentialcomputing_v1alpha1_service: GenFile = /*@__PURE__*/
  fileDesc("Cjlnb29nbGUvY2xvdWQvY29uZmlkZW50aWFsY29tcHV0aW5nL3YxYWxwaGExL3NlcnZpY2UucHJvdG8SK2dvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjFhbHBoYTEioQIKCUNoYWxsZW5nZRIRCgRuYW1lGAEgASgJQgPgQQMSNAoLY3JlYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLZXhwaXJlX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSEQoEdXNlZBgEIAEoCEID4EEDEhIKBW5vbmNlGAUgASgMQgPgQQM6bupBawouY29uZmlkZW50aWFsY29tcHV0aW5nLmdvb2dsZWFwaXMuY29tL0NoYWxsZW5nZRI5cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2NoYWxsZW5nZXMve3V1aWR9IqMBChZDcmVhdGVDaGFsbGVuZ2VSZXF1ZXN0EjkKBnBhcmVudBgBIAEoCUIp4EEC+kEjCiFsb2NhdGlvbnMuZ29vZ2xlYXBpcy5jb20vTG9jYXRpb24STgoJY2hhbGxlbmdlGAIgASgLMjYuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MWFscGhhMS5DaGFsbGVuZ2VCA+BBAiKbAgoYVmVyaWZ5QXR0ZXN0YXRpb25SZXF1ZXN0EkkKCWNoYWxsZW5nZRgBIAEoCUI24EEC+kEwCi5jb25maWRlbnRpYWxjb21wdXRpbmcuZ29vZ2xlYXBpcy5jb20vQ2hhbGxlbmdlElkKD2djcF9jcmVkZW50aWFscxgCIAEoCzI7Lmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjFhbHBoYTEuR2NwQ3JlZGVudGlhbHNCA+BBARJZCg90cG1fYXR0ZXN0YXRpb24YAyABKAsyOy5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxYWxwaGExLlRwbUF0dGVzdGF0aW9uQgPgQQIiNgoZVmVyaWZ5QXR0ZXN0YXRpb25SZXNwb25zZRIZCgxjbGFpbXNfdG9rZW4YASABKAxCA+BBAyIjCg5HY3BDcmVkZW50aWFscxIRCglpZF90b2tlbnMYASADKAwimwMKDlRwbUF0dGVzdGF0aW9uElEKBnF1b3RlcxgBIAMoCzJBLmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjFhbHBoYTEuVHBtQXR0ZXN0YXRpb24uUXVvdGUSFQoNdGNnX2V2ZW50X2xvZxgCIAEoDBIbChNjYW5vbmljYWxfZXZlbnRfbG9nGAMgASgMEg8KB2FrX2NlcnQYBCABKAwSEgoKY2VydF9jaGFpbhgFIAMoDBrcAQoFUXVvdGUSEQoJaGFzaF9hbGdvGAEgASgFEmQKCnBjcl92YWx1ZXMYAiADKAsyUC5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxYWxwaGExLlRwbUF0dGVzdGF0aW9uLlF1b3RlLlBjclZhbHVlc0VudHJ5EhEKCXJhd19xdW90ZRgDIAEoDBIVCg1yYXdfc2lnbmF0dXJlGAQgASgMGjAKDlBjclZhbHVlc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoDDoCOAEy2wQKFUNvbmZpZGVudGlhbENvbXB1dGluZxLqAQoPQ3JlYXRlQ2hhbGxlbmdlEkMuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MWFscGhhMS5DcmVhdGVDaGFsbGVuZ2VSZXF1ZXN0GjYuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MWFscGhhMS5DaGFsbGVuZ2UiWtpBEHBhcmVudCxjaGFsbGVuZ2WC0+STAkE6CWNoYWxsZW5nZSI0L3YxYWxwaGExL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vY2hhbGxlbmdlcxL6AQoRVmVyaWZ5QXR0ZXN0YXRpb24SRS5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxYWxwaGExLlZlcmlmeUF0dGVzdGF0aW9uUmVxdWVzdBpGLmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjFhbHBoYTEuVmVyaWZ5QXR0ZXN0YXRpb25SZXNwb25zZSJWgtPkkwJQOgEqIksvdjFhbHBoYTEve2NoYWxsZW5nZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2NoYWxsZW5nZXMvKn06dmVyaWZ5QXR0ZXN0YXRpb24aWMpBJGNvbmZpZGVudGlhbGNvbXB1dGluZy5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1CtQIKL2NvbS5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxYWxwaGExQgxTZXJ2aWNlUHJvdG9QAVplY2xvdWQuZ29vZ2xlLmNvbS9nby9jb25maWRlbnRpYWxjb21wdXRpbmcvYXBpdjFhbHBoYTEvY29uZmlkZW50aWFsY29tcHV0aW5ncGI7Y29uZmlkZW50aWFsY29tcHV0aW5ncGKqAitHb29nbGUuQ2xvdWQuQ29uZmlkZW50aWFsQ29tcHV0aW5nLlYxQWxwaGExygIrR29vZ2xlXENsb3VkXENvbmZpZGVudGlhbENvbXB1dGluZ1xWMWFscGhhMeoCLkdvb2dsZTo6Q2xvdWQ6OkNvbmZpZGVudGlhbENvbXB1dGluZzo6VjFhbHBoYTFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp]);

/**
 * A Challenge from the server used to guarantee freshness of attestations
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.Challenge
 */
export type Challenge = Message<"google.cloud.confidentialcomputing.v1alpha1.Challenge"> & {
  /**
   * Output only. The resource name for this Challenge in the format
   * `projects/*\/locations/*\/challenges/*`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The time at which this Challenge was created
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time at which this Challenge will no longer be usable. It
   * is also the expiration time for any tokens generated from this Challenge.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;

  /**
   * Output only. Indicates if this challenge has been used to generate a token.
   *
   * @generated from field: bool used = 4;
   */
  used: boolean;

  /**
   * Output only. Random data which should be used when calling TPM2_Quote.
   * --
   *
   * @generated from field: bytes nonce = 5;
   */
  nonce: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.Challenge.
 * Use `create(ChallengeSchema)` to create a new message.
 */
export const ChallengeSchema: GenMessage<Challenge> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 0);

/**
 * Message for creating a Challenge
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.CreateChallengeRequest
 */
export type CreateChallengeRequest = Message<"google.cloud.confidentialcomputing.v1alpha1.CreateChallengeRequest"> & {
  /**
   * Required. The resource name of the location where the Challenge will be
   * used, in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The Challenge to be created. Currently this field can be empty as
   * all the Challenge fields are set by the server.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1alpha1.Challenge challenge = 2;
   */
  challenge?: Challenge;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.CreateChallengeRequest.
 * Use `create(CreateChallengeRequestSchema)` to create a new message.
 */
export const CreateChallengeRequestSchema: GenMessage<CreateChallengeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 1);

/**
 * A request for an OIDC token, providing all the necessary information needed
 * for this service to verify the plaform state of the requestor.
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationRequest
 */
export type VerifyAttestationRequest = Message<"google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationRequest"> & {
  /**
   * Required. The name of the Challenge whose nonce was used to generate the
   * attestation, in the format `projects/*\/locations/*\/challenges/*`. The
   * provided Challenge will be consumed, and cannot be used again.
   *
   * @generated from field: string challenge = 1;
   */
  challenge: string;

  /**
   * Optional. Credentials used to populate the "emails" claim in the
   * claims_token.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1alpha1.GcpCredentials gcp_credentials = 2;
   */
  gcpCredentials?: GcpCredentials;

  /**
   * Required. The TPM-specific data provided by the attesting platform, used to
   * populate any of the claims regarding platform state.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1alpha1.TpmAttestation tpm_attestation = 3;
   */
  tpmAttestation?: TpmAttestation;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationRequest.
 * Use `create(VerifyAttestationRequestSchema)` to create a new message.
 */
export const VerifyAttestationRequestSchema: GenMessage<VerifyAttestationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 2);

/**
 * A response once an attestation has been successfully verified, containing a
 * signed OIDC token.
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationResponse
 */
export type VerifyAttestationResponse = Message<"google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationResponse"> & {
  /**
   * Output only. The OIDC token issued by this service. It contains specific
   * platform claims based on the contents of the provided attestation.
   * --
   *
   * @generated from field: bytes claims_token = 1;
   */
  claimsToken: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.VerifyAttestationResponse.
 * Use `create(VerifyAttestationResponseSchema)` to create a new message.
 */
export const VerifyAttestationResponseSchema: GenMessage<VerifyAttestationResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 3);

/**
 * Credentials issued by GCP which are linked to the platform attestation. These
 * will be verified server-side as part of attestaion verification.
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.GcpCredentials
 */
export type GcpCredentials = Message<"google.cloud.confidentialcomputing.v1alpha1.GcpCredentials"> & {
  /**
   * A list of service account OpenID Connect ID tokens identifying which
   * service account identities should be included in the claims_token. These
   * can be generated by calling `serviceAccounts.generateIdToken`. The
   * Challenge.name must be used as the `audience` parameter, and the
   * `includeEmail` parameter must be `true`.
   * --
   *
   * @generated from field: repeated bytes id_tokens = 1;
   */
  idTokens: Uint8Array[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.GcpCredentials.
 * Use `create(GcpCredentialsSchema)` to create a new message.
 */
export const GcpCredentialsSchema: GenMessage<GcpCredentials> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 4);

/**
 * TPM2 data containing everything necessary to validate any platform state
 * measured into the TPM.
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.TpmAttestation
 */
export type TpmAttestation = Message<"google.cloud.confidentialcomputing.v1alpha1.TpmAttestation"> & {
  /**
   * TPM2 PCR Quotes generated by calling TPM2_Quote on each PCR bank.
   *
   * @generated from field: repeated google.cloud.confidentialcomputing.v1alpha1.TpmAttestation.Quote quotes = 1;
   */
  quotes: TpmAttestation_Quote[];

  /**
   * The binary TCG Event Log containing events measured into the TPM by the
   * platform firmware and operating system. Formatted as described in the
   * "TCG PC Client Platform Firmware Profile Specification".
   *
   * @generated from field: bytes tcg_event_log = 2;
   */
  tcgEventLog: Uint8Array;

  /**
   * An Event Log containing additional events measured into the TPM that are
   * not already present in the tcg_event_log. Formatted as described in the
   * "Canonical Event Log Format" TCG Specification.
   *
   * @generated from field: bytes canonical_event_log = 3;
   */
  canonicalEventLog: Uint8Array;

  /**
   * DER-encoded X.509 certificate of the Attestation Key (otherwise known as
   * an AK or a TPM restricted signing key) used to generate the quotes.
   *
   * @generated from field: bytes ak_cert = 4;
   */
  akCert: Uint8Array;

  /**
   * List of DER-encoded X.509 certificates which, together with the ak_cert,
   * chain back to a trusted Root Certificate.
   *
   * @generated from field: repeated bytes cert_chain = 5;
   */
  certChain: Uint8Array[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.TpmAttestation.
 * Use `create(TpmAttestationSchema)` to create a new message.
 */
export const TpmAttestationSchema: GenMessage<TpmAttestation> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 5);

/**
 * Information about Platform Control Registers (PCRs) including a signature
 * over their values, which can be used for remote validation.
 *
 * @generated from message google.cloud.confidentialcomputing.v1alpha1.TpmAttestation.Quote
 */
export type TpmAttestation_Quote = Message<"google.cloud.confidentialcomputing.v1alpha1.TpmAttestation.Quote"> & {
  /**
   * The hash algorithm of the PCR bank being quoted, encoded as a TPM_ALG_ID
   *
   * @generated from field: int32 hash_algo = 1;
   */
  hashAlgo: number;

  /**
   * Raw binary values of each PCRs being quoted.
   *
   * @generated from field: map<int32, bytes> pcr_values = 2;
   */
  pcrValues: { [key: number]: Uint8Array };

  /**
   * TPM2 quote, encoded as a TPMS_ATTEST
   *
   * @generated from field: bytes raw_quote = 3;
   */
  rawQuote: Uint8Array;

  /**
   * TPM2 signature, encoded as a TPMT_SIGNATURE
   *
   * @generated from field: bytes raw_signature = 4;
   */
  rawSignature: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1alpha1.TpmAttestation.Quote.
 * Use `create(TpmAttestation_QuoteSchema)` to create a new message.
 */
export const TpmAttestation_QuoteSchema: GenMessage<TpmAttestation_Quote> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 5, 0);

/**
 * Service describing handlers for resources
 *
 * @generated from service google.cloud.confidentialcomputing.v1alpha1.ConfidentialComputing
 */
export const ConfidentialComputing: GenService<{
  /**
   * Creates a new Challenge in a given project and location.
   *
   * @generated from rpc google.cloud.confidentialcomputing.v1alpha1.ConfidentialComputing.CreateChallenge
   */
  createChallenge: {
    methodKind: "unary";
    input: typeof CreateChallengeRequestSchema;
    output: typeof ChallengeSchema;
  },
  /**
   * Verifies the provided attestation info, returning a signed OIDC token.
   *
   * @generated from rpc google.cloud.confidentialcomputing.v1alpha1.ConfidentialComputing.VerifyAttestation
   */
  verifyAttestation: {
    methodKind: "unary";
    input: typeof VerifyAttestationRequestSchema;
    output: typeof VerifyAttestationResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_confidentialcomputing_v1alpha1_service, 0);

