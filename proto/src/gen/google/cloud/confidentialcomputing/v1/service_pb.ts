// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/confidentialcomputing/v1/service.proto (package google.cloud.confidentialcomputing.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/confidentialcomputing/v1/service.proto.
 */
export const file_google_cloud_confidentialcomputing_v1_service: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvY2xvdWQvY29uZmlkZW50aWFsY29tcHV0aW5nL3YxL3NlcnZpY2UucHJvdG8SJWdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjEipQIKCUNoYWxsZW5nZRIRCgRuYW1lGAEgASgJQgPgQQMSNAoLY3JlYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLZXhwaXJlX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSEQoEdXNlZBgEIAEoCEID4EEDEhYKCXRwbV9ub25jZRgGIAEoCUID4EEDOm7qQWsKLmNvbmZpZGVudGlhbGNvbXB1dGluZy5nb29nbGVhcGlzLmNvbS9DaGFsbGVuZ2USOXByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9jaGFsbGVuZ2VzL3t1dWlkfSKdAQoWQ3JlYXRlQ2hhbGxlbmdlUmVxdWVzdBI5CgZwYXJlbnQYASABKAlCKeBBAvpBIwohbG9jYXRpb25zLmdvb2dsZWFwaXMuY29tL0xvY2F0aW9uEkgKCWNoYWxsZW5nZRgCIAEoCzIwLmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjEuQ2hhbGxlbmdlQgPgQQIiiAUKGFZlcmlmeUF0dGVzdGF0aW9uUmVxdWVzdBJRCgd0ZF9jY2VsGAYgASgLMjkuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5UZHhDY2VsQXR0ZXN0YXRpb25CA+BBAUgAElwKE3Nldl9zbnBfYXR0ZXN0YXRpb24YByABKAsyOC5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxLlNldlNucEF0dGVzdGF0aW9uQgPgQQFIABJJCgljaGFsbGVuZ2UYASABKAlCNuBBAvpBMAouY29uZmlkZW50aWFsY29tcHV0aW5nLmdvb2dsZWFwaXMuY29tL0NoYWxsZW5nZRJTCg9nY3BfY3JlZGVudGlhbHMYAiABKAsyNS5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxLkdjcENyZWRlbnRpYWxzQgPgQQESUwoPdHBtX2F0dGVzdGF0aW9uGAMgASgLMjUuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5UcG1BdHRlc3RhdGlvbkID4EECEmIKF2NvbmZpZGVudGlhbF9zcGFjZV9pbmZvGAQgASgLMjwuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5Db25maWRlbnRpYWxTcGFjZUluZm9CA+BBARJPCg10b2tlbl9vcHRpb25zGAUgASgLMjMuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5Ub2tlbk9wdGlvbnNCA+BBAUIRCg90ZWVfYXR0ZXN0YXRpb24igwEKElRkeENjZWxBdHRlc3RhdGlvbhIcCg9jY2VsX2FjcGlfdGFibGUYASABKAxCA+BBARIWCgljY2VsX2RhdGEYAiABKAxCA+BBARIgChNjYW5vbmljYWxfZXZlbnRfbG9nGAMgASgMQgPgQQESFQoIdGRfcXVvdGUYBCABKAxCA+BBASI/ChFTZXZTbnBBdHRlc3RhdGlvbhITCgZyZXBvcnQYASABKAxCA+BBARIVCghhdXhfYmxvYhgCIAEoDEID4EEBImwKGVZlcmlmeUF0dGVzdGF0aW9uUmVzcG9uc2USHgoRb2lkY19jbGFpbXNfdG9rZW4YAiABKAlCA+BBAxIvCg5wYXJ0aWFsX2Vycm9ycxgDIAMoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgPgQQMiMwoOR2NwQ3JlZGVudGlhbHMSIQoZc2VydmljZV9hY2NvdW50X2lkX3Rva2VucxgCIAMoCSKEAQoMVG9rZW5PcHRpb25zEhUKCGF1ZGllbmNlGAEgASgJQgPgQQESEgoFbm9uY2UYAiADKAlCA+BBARJJCgp0b2tlbl90eXBlGAMgASgOMjAuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5Ub2tlblR5cGVCA+BBASKPAwoOVHBtQXR0ZXN0YXRpb24SSwoGcXVvdGVzGAEgAygLMjsuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5UcG1BdHRlc3RhdGlvbi5RdW90ZRIVCg10Y2dfZXZlbnRfbG9nGAIgASgMEhsKE2Nhbm9uaWNhbF9ldmVudF9sb2cYAyABKAwSDwoHYWtfY2VydBgEIAEoDBISCgpjZXJ0X2NoYWluGAUgAygMGtYBCgVRdW90ZRIRCgloYXNoX2FsZ28YASABKAUSXgoKcGNyX3ZhbHVlcxgCIAMoCzJKLmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjEuVHBtQXR0ZXN0YXRpb24uUXVvdGUuUGNyVmFsdWVzRW50cnkSEQoJcmF3X3F1b3RlGAMgASgMEhUKDXJhd19zaWduYXR1cmUYBCABKAwaMAoOUGNyVmFsdWVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgMOgI4ASJqChVDb25maWRlbnRpYWxTcGFjZUluZm8SUQoPc2lnbmVkX2VudGl0aWVzGAEgAygLMjMuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5TaWduZWRFbnRpdHlCA+BBASJ3CgxTaWduZWRFbnRpdHkSZwoaY29udGFpbmVyX2ltYWdlX3NpZ25hdHVyZXMYASADKAsyPi5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxLkNvbnRhaW5lckltYWdlU2lnbmF0dXJlQgPgQQEirwEKF0NvbnRhaW5lckltYWdlU2lnbmF0dXJlEhQKB3BheWxvYWQYASABKAxCA+BBARIWCglzaWduYXR1cmUYAiABKAxCA+BBARIXCgpwdWJsaWNfa2V5GAMgASgMQgPgQQESTQoHc2lnX2FsZxgEIAEoDjI3Lmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjEuU2lnbmluZ0FsZ29yaXRobUID4EEBKn8KEFNpZ25pbmdBbGdvcml0aG0SIQodU0lHTklOR19BTEdPUklUSE1fVU5TUEVDSUZJRUQQABIVChFSU0FTU0FfUFNTX1NIQTI1NhABEhoKFlJTQVNTQV9QS0NTMVYxNV9TSEEyNTYQAhIVChFFQ0RTQV9QMjU2X1NIQTI1NhADKmwKCVRva2VuVHlwZRIaChZUT0tFTl9UWVBFX1VOU1BFQ0lGSUVEEAASEwoPVE9LRU5fVFlQRV9PSURDEAESEgoOVE9LRU5fVFlQRV9QS0kQAhIaChZUT0tFTl9UWVBFX0xJTUlURURfQVdTEAMytwQKFUNvbmZpZGVudGlhbENvbXB1dGluZxLYAQoPQ3JlYXRlQ2hhbGxlbmdlEj0uZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5DcmVhdGVDaGFsbGVuZ2VSZXF1ZXN0GjAuZ29vZ2xlLmNsb3VkLmNvbmZpZGVudGlhbGNvbXB1dGluZy52MS5DaGFsbGVuZ2UiVNpBEHBhcmVudCxjaGFsbGVuZ2WC0+STAjs6CWNoYWxsZW5nZSIuL3YxL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vY2hhbGxlbmdlcxLoAQoRVmVyaWZ5QXR0ZXN0YXRpb24SPy5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxLlZlcmlmeUF0dGVzdGF0aW9uUmVxdWVzdBpALmdvb2dsZS5jbG91ZC5jb25maWRlbnRpYWxjb21wdXRpbmcudjEuVmVyaWZ5QXR0ZXN0YXRpb25SZXNwb25zZSJQgtPkkwJKOgEqIkUvdjEve2NoYWxsZW5nZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2NoYWxsZW5nZXMvKn06dmVyaWZ5QXR0ZXN0YXRpb24aWMpBJGNvbmZpZGVudGlhbGNvbXB1dGluZy5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1ClwIKKWNvbS5nb29nbGUuY2xvdWQuY29uZmlkZW50aWFsY29tcHV0aW5nLnYxQgxTZXJ2aWNlUHJvdG9QAVpfY2xvdWQuZ29vZ2xlLmNvbS9nby9jb25maWRlbnRpYWxjb21wdXRpbmcvYXBpdjEvY29uZmlkZW50aWFsY29tcHV0aW5ncGI7Y29uZmlkZW50aWFsY29tcHV0aW5ncGKqAiVHb29nbGUuQ2xvdWQuQ29uZmlkZW50aWFsQ29tcHV0aW5nLlYxygIlR29vZ2xlXENsb3VkXENvbmZpZGVudGlhbENvbXB1dGluZ1xWMeoCKEdvb2dsZTo6Q2xvdWQ6OkNvbmZpZGVudGlhbENvbXB1dGluZzo6VjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * A Challenge from the server used to guarantee freshness of attestations
 *
 * @generated from message google.cloud.confidentialcomputing.v1.Challenge
 */
export type Challenge = Message<"google.cloud.confidentialcomputing.v1.Challenge"> & {
  /**
   * Output only. The resource name for this Challenge in the format
   * `projects/*\/locations/*\/challenges/*`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The time at which this Challenge was created
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time at which this Challenge will no longer be usable. It
   * is also the expiration time for any tokens generated from this Challenge.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;

  /**
   * Output only. Indicates if this challenge has been used to generate a token.
   *
   * @generated from field: bool used = 4;
   */
  used: boolean;

  /**
   * Output only. Identical to nonce, but as a string.
   *
   * @generated from field: string tpm_nonce = 6;
   */
  tpmNonce: string;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.Challenge.
 * Use `create(ChallengeSchema)` to create a new message.
 */
export const ChallengeSchema: GenMessage<Challenge> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 0);

/**
 * Message for creating a Challenge
 *
 * @generated from message google.cloud.confidentialcomputing.v1.CreateChallengeRequest
 */
export type CreateChallengeRequest = Message<"google.cloud.confidentialcomputing.v1.CreateChallengeRequest"> & {
  /**
   * Required. The resource name of the location where the Challenge will be
   * used, in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The Challenge to be created. Currently this field can be empty as
   * all the Challenge fields are set by the server.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.Challenge challenge = 2;
   */
  challenge?: Challenge;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.CreateChallengeRequest.
 * Use `create(CreateChallengeRequestSchema)` to create a new message.
 */
export const CreateChallengeRequestSchema: GenMessage<CreateChallengeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 1);

/**
 * A request for an OIDC token, providing all the necessary information needed
 * for this service to verify the plaform state of the requestor.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.VerifyAttestationRequest
 */
export type VerifyAttestationRequest = Message<"google.cloud.confidentialcomputing.v1.VerifyAttestationRequest"> & {
  /**
   * An optional tee attestation report, used to populate hardware rooted
   * claims.
   *
   * @generated from oneof google.cloud.confidentialcomputing.v1.VerifyAttestationRequest.tee_attestation
   */
  teeAttestation: {
    /**
     * Optional. A TDX with CCEL and RTMR Attestation Quote.
     *
     * @generated from field: google.cloud.confidentialcomputing.v1.TdxCcelAttestation td_ccel = 6;
     */
    value: TdxCcelAttestation;
    case: "tdCcel";
  } | {
    /**
     * Optional. An SEV-SNP Attestation Report.
     *
     * @generated from field: google.cloud.confidentialcomputing.v1.SevSnpAttestation sev_snp_attestation = 7;
     */
    value: SevSnpAttestation;
    case: "sevSnpAttestation";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The name of the Challenge whose nonce was used to generate the
   * attestation, in the format `projects/*\/locations/*\/challenges/*`. The
   * provided Challenge will be consumed, and cannot be used again.
   *
   * @generated from field: string challenge = 1;
   */
  challenge: string;

  /**
   * Optional. Credentials used to populate the "emails" claim in the
   * claims_token.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.GcpCredentials gcp_credentials = 2;
   */
  gcpCredentials?: GcpCredentials;

  /**
   * Required. The TPM-specific data provided by the attesting platform, used to
   * populate any of the claims regarding platform state.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.TpmAttestation tpm_attestation = 3;
   */
  tpmAttestation?: TpmAttestation;

  /**
   * Optional. Optional information related to the Confidential Space TEE.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.ConfidentialSpaceInfo confidential_space_info = 4;
   */
  confidentialSpaceInfo?: ConfidentialSpaceInfo;

  /**
   * Optional. A collection of optional, workload-specified claims that modify
   * the token output.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.TokenOptions token_options = 5;
   */
  tokenOptions?: TokenOptions;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.VerifyAttestationRequest.
 * Use `create(VerifyAttestationRequestSchema)` to create a new message.
 */
export const VerifyAttestationRequestSchema: GenMessage<VerifyAttestationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 2);

/**
 * A TDX Attestation quote.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.TdxCcelAttestation
 */
export type TdxCcelAttestation = Message<"google.cloud.confidentialcomputing.v1.TdxCcelAttestation"> & {
  /**
   * Optional. The Confidential Computing Event Log (CCEL) ACPI table. Formatted
   * as described in the ACPI Specification 6.5.
   *
   * @generated from field: bytes ccel_acpi_table = 1;
   */
  ccelAcpiTable: Uint8Array;

  /**
   * Optional. The CCEL event log. Formatted as described in the UEFI 2.10.
   *
   * @generated from field: bytes ccel_data = 2;
   */
  ccelData: Uint8Array;

  /**
   * Optional. An Event Log containing additional events measured into the RTMR
   * that are not already present in the CCEL.
   *
   * @generated from field: bytes canonical_event_log = 3;
   */
  canonicalEventLog: Uint8Array;

  /**
   * Optional. The TDX attestation quote from the guest. It contains the RTMR
   * values.
   *
   * @generated from field: bytes td_quote = 4;
   */
  tdQuote: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.TdxCcelAttestation.
 * Use `create(TdxCcelAttestationSchema)` to create a new message.
 */
export const TdxCcelAttestationSchema: GenMessage<TdxCcelAttestation> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 3);

/**
 * An SEV-SNP Attestation Report.
 * Contains the attestation report and the certificate bundle that the client
 * collects.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.SevSnpAttestation
 */
export type SevSnpAttestation = Message<"google.cloud.confidentialcomputing.v1.SevSnpAttestation"> & {
  /**
   * Optional. The SEV-SNP Attestation Report
   * Format is in revision 1.55, §7.3 Attestation, Table 22. ATTESTATION_REPORT
   * Structure in this document:
   * https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/56860.pdf
   *
   * @generated from field: bytes report = 1;
   */
  report: Uint8Array;

  /**
   * Optional. Certificate bundle defined in the GHCB protocol definition
   * Format is documented in GHCB revision 2.03, section 4.1.8.1 struct
   * cert_table in this document:
   * https://www.amd.com/content/dam/amd/en/documents/epyc-technical-docs/specifications/56421.pdf
   *
   * @generated from field: bytes aux_blob = 2;
   */
  auxBlob: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.SevSnpAttestation.
 * Use `create(SevSnpAttestationSchema)` to create a new message.
 */
export const SevSnpAttestationSchema: GenMessage<SevSnpAttestation> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 4);

/**
 * A response once an attestation has been successfully verified, containing a
 * signed OIDC token.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.VerifyAttestationResponse
 */
export type VerifyAttestationResponse = Message<"google.cloud.confidentialcomputing.v1.VerifyAttestationResponse"> & {
  /**
   * Output only. Same as claims_token, but as a string.
   *
   * @generated from field: string oidc_claims_token = 2;
   */
  oidcClaimsToken: string;

  /**
   * Output only. A list of messages that carry the partial error details
   * related to VerifyAttestation.
   *
   * @generated from field: repeated google.rpc.Status partial_errors = 3;
   */
  partialErrors: Status[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.VerifyAttestationResponse.
 * Use `create(VerifyAttestationResponseSchema)` to create a new message.
 */
export const VerifyAttestationResponseSchema: GenMessage<VerifyAttestationResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 5);

/**
 * Credentials issued by GCP which are linked to the platform attestation. These
 * will be verified server-side as part of attestaion verification.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.GcpCredentials
 */
export type GcpCredentials = Message<"google.cloud.confidentialcomputing.v1.GcpCredentials"> & {
  /**
   * Same as id_tokens, but as a string.
   *
   * @generated from field: repeated string service_account_id_tokens = 2;
   */
  serviceAccountIdTokens: string[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.GcpCredentials.
 * Use `create(GcpCredentialsSchema)` to create a new message.
 */
export const GcpCredentialsSchema: GenMessage<GcpCredentials> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 6);

/**
 * Options to modify claims in the token to generate custom-purpose tokens.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.TokenOptions
 */
export type TokenOptions = Message<"google.cloud.confidentialcomputing.v1.TokenOptions"> & {
  /**
   * Optional. Optional string to issue the token with a custom audience claim.
   * Required if one or more nonces are specified.
   *
   * @generated from field: string audience = 1;
   */
  audience: string;

  /**
   * Optional. Optional parameter to place one or more nonces in the eat_nonce
   * claim in the output token. The minimum size for JSON-encoded EATs is 10
   * bytes and the maximum size is 74 bytes.
   *
   * @generated from field: repeated string nonce = 2;
   */
  nonce: string[];

  /**
   * Optional. Optional token type to select what type of token to return.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.TokenType token_type = 3;
   */
  tokenType: TokenType;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.TokenOptions.
 * Use `create(TokenOptionsSchema)` to create a new message.
 */
export const TokenOptionsSchema: GenMessage<TokenOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 7);

/**
 * TPM2 data containing everything necessary to validate any platform state
 * measured into the TPM.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.TpmAttestation
 */
export type TpmAttestation = Message<"google.cloud.confidentialcomputing.v1.TpmAttestation"> & {
  /**
   * TPM2 PCR Quotes generated by calling TPM2_Quote on each PCR bank.
   *
   * @generated from field: repeated google.cloud.confidentialcomputing.v1.TpmAttestation.Quote quotes = 1;
   */
  quotes: TpmAttestation_Quote[];

  /**
   * The binary TCG Event Log containing events measured into the TPM by the
   * platform firmware and operating system. Formatted as described in the
   * "TCG PC Client Platform Firmware Profile Specification".
   *
   * @generated from field: bytes tcg_event_log = 2;
   */
  tcgEventLog: Uint8Array;

  /**
   * An Event Log containing additional events measured into the TPM that are
   * not already present in the tcg_event_log. Formatted as described in the
   * "Canonical Event Log Format" TCG Specification.
   *
   * @generated from field: bytes canonical_event_log = 3;
   */
  canonicalEventLog: Uint8Array;

  /**
   * DER-encoded X.509 certificate of the Attestation Key (otherwise known as
   * an AK or a TPM restricted signing key) used to generate the quotes.
   *
   * @generated from field: bytes ak_cert = 4;
   */
  akCert: Uint8Array;

  /**
   * List of DER-encoded X.509 certificates which, together with the ak_cert,
   * chain back to a trusted Root Certificate.
   *
   * @generated from field: repeated bytes cert_chain = 5;
   */
  certChain: Uint8Array[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.TpmAttestation.
 * Use `create(TpmAttestationSchema)` to create a new message.
 */
export const TpmAttestationSchema: GenMessage<TpmAttestation> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 8);

/**
 * Information about Platform Control Registers (PCRs) including a signature
 * over their values, which can be used for remote validation.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.TpmAttestation.Quote
 */
export type TpmAttestation_Quote = Message<"google.cloud.confidentialcomputing.v1.TpmAttestation.Quote"> & {
  /**
   * The hash algorithm of the PCR bank being quoted, encoded as a TPM_ALG_ID
   *
   * @generated from field: int32 hash_algo = 1;
   */
  hashAlgo: number;

  /**
   * Raw binary values of each PCRs being quoted.
   *
   * @generated from field: map<int32, bytes> pcr_values = 2;
   */
  pcrValues: { [key: number]: Uint8Array };

  /**
   * TPM2 quote, encoded as a TPMS_ATTEST
   *
   * @generated from field: bytes raw_quote = 3;
   */
  rawQuote: Uint8Array;

  /**
   * TPM2 signature, encoded as a TPMT_SIGNATURE
   *
   * @generated from field: bytes raw_signature = 4;
   */
  rawSignature: Uint8Array;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.TpmAttestation.Quote.
 * Use `create(TpmAttestation_QuoteSchema)` to create a new message.
 */
export const TpmAttestation_QuoteSchema: GenMessage<TpmAttestation_Quote> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 8, 0);

/**
 * ConfidentialSpaceInfo contains information related to the Confidential Space
 * TEE.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.ConfidentialSpaceInfo
 */
export type ConfidentialSpaceInfo = Message<"google.cloud.confidentialcomputing.v1.ConfidentialSpaceInfo"> & {
  /**
   * Optional. A list of signed entities containing container image signatures
   * that can be used for server-side signature verification.
   *
   * @generated from field: repeated google.cloud.confidentialcomputing.v1.SignedEntity signed_entities = 1;
   */
  signedEntities: SignedEntity[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.ConfidentialSpaceInfo.
 * Use `create(ConfidentialSpaceInfoSchema)` to create a new message.
 */
export const ConfidentialSpaceInfoSchema: GenMessage<ConfidentialSpaceInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 9);

/**
 * SignedEntity represents an OCI image object containing everything necessary
 * to verify container image signatures.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.SignedEntity
 */
export type SignedEntity = Message<"google.cloud.confidentialcomputing.v1.SignedEntity"> & {
  /**
   * Optional. A list of container image signatures attached to an OCI image
   * object.
   *
   * @generated from field: repeated google.cloud.confidentialcomputing.v1.ContainerImageSignature container_image_signatures = 1;
   */
  containerImageSignatures: ContainerImageSignature[];
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.SignedEntity.
 * Use `create(SignedEntitySchema)` to create a new message.
 */
export const SignedEntitySchema: GenMessage<SignedEntity> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 10);

/**
 * ContainerImageSignature holds necessary metadata to verify a container image
 * signature.
 *
 * @generated from message google.cloud.confidentialcomputing.v1.ContainerImageSignature
 */
export type ContainerImageSignature = Message<"google.cloud.confidentialcomputing.v1.ContainerImageSignature"> & {
  /**
   * Optional. The binary signature payload following the SimpleSigning format
   * https://github.com/sigstore/cosign/blob/main/specs/SIGNATURE_SPEC.md#simple-signing.
   * This payload includes the container image digest.
   *
   * @generated from field: bytes payload = 1;
   */
  payload: Uint8Array;

  /**
   * Optional. A signature over the payload.
   * The container image digest is incorporated into the signature as follows:
   * 1. Generate a SimpleSigning format payload that includes the container
   * image digest.
   * 2. Generate a signature over SHA256 digest of the payload.
   * The signature generation process can be represented as follows:
   * `Sign(sha256(SimpleSigningPayload(sha256(Image Manifest))))`
   *
   * @generated from field: bytes signature = 2;
   */
  signature: Uint8Array;

  /**
   * Optional. Reserved for future use.
   *
   * @generated from field: bytes public_key = 3;
   */
  publicKey: Uint8Array;

  /**
   * Optional. Reserved for future use.
   *
   * @generated from field: google.cloud.confidentialcomputing.v1.SigningAlgorithm sig_alg = 4;
   */
  sigAlg: SigningAlgorithm;
};

/**
 * Describes the message google.cloud.confidentialcomputing.v1.ContainerImageSignature.
 * Use `create(ContainerImageSignatureSchema)` to create a new message.
 */
export const ContainerImageSignatureSchema: GenMessage<ContainerImageSignature> = /*@__PURE__*/
  messageDesc(file_google_cloud_confidentialcomputing_v1_service, 11);

/**
 * SigningAlgorithm enumerates all the supported signing algorithms.
 *
 * @generated from enum google.cloud.confidentialcomputing.v1.SigningAlgorithm
 */
export enum SigningAlgorithm {
  /**
   * Unspecified signing algorithm.
   *
   * @generated from enum value: SIGNING_ALGORITHM_UNSPECIFIED = 0;
   */
  SIGNING_ALGORITHM_UNSPECIFIED = 0,

  /**
   * RSASSA-PSS with a SHA256 digest.
   *
   * @generated from enum value: RSASSA_PSS_SHA256 = 1;
   */
  RSASSA_PSS_SHA256 = 1,

  /**
   * RSASSA-PKCS1 v1.5 with a SHA256 digest.
   *
   * @generated from enum value: RSASSA_PKCS1V15_SHA256 = 2;
   */
  RSASSA_PKCS1V15_SHA256 = 2,

  /**
   * ECDSA on the P-256 Curve with a SHA256 digest.
   *
   * @generated from enum value: ECDSA_P256_SHA256 = 3;
   */
  ECDSA_P256_SHA256 = 3,
}

/**
 * Describes the enum google.cloud.confidentialcomputing.v1.SigningAlgorithm.
 */
export const SigningAlgorithmSchema: GenEnum<SigningAlgorithm> = /*@__PURE__*/
  enumDesc(file_google_cloud_confidentialcomputing_v1_service, 0);

/**
 * Token type enum contains the different types of token responses Confidential
 * Space supports
 *
 * @generated from enum google.cloud.confidentialcomputing.v1.TokenType
 */
export enum TokenType {
  /**
   * Unspecified token type
   *
   * @generated from enum value: TOKEN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * OpenID Connect (OIDC) token type
   *
   * @generated from enum value: TOKEN_TYPE_OIDC = 1;
   */
  OIDC = 1,

  /**
   * Public Key Infrastructure (PKI) token type
   *
   * @generated from enum value: TOKEN_TYPE_PKI = 2;
   */
  PKI = 2,

  /**
   * Limited claim token type for AWS integration
   *
   * @generated from enum value: TOKEN_TYPE_LIMITED_AWS = 3;
   */
  LIMITED_AWS = 3,
}

/**
 * Describes the enum google.cloud.confidentialcomputing.v1.TokenType.
 */
export const TokenTypeSchema: GenEnum<TokenType> = /*@__PURE__*/
  enumDesc(file_google_cloud_confidentialcomputing_v1_service, 1);

/**
 * Service describing handlers for resources
 *
 * @generated from service google.cloud.confidentialcomputing.v1.ConfidentialComputing
 */
export const ConfidentialComputing: GenService<{
  /**
   * Creates a new Challenge in a given project and location.
   *
   * @generated from rpc google.cloud.confidentialcomputing.v1.ConfidentialComputing.CreateChallenge
   */
  createChallenge: {
    methodKind: "unary";
    input: typeof CreateChallengeRequestSchema;
    output: typeof ChallengeSchema;
  },
  /**
   * Verifies the provided attestation info, returning a signed OIDC token.
   *
   * @generated from rpc google.cloud.confidentialcomputing.v1.ConfidentialComputing.VerifyAttestation
   */
  verifyAttestation: {
    methodKind: "unary";
    input: typeof VerifyAttestationRequestSchema;
    output: typeof VerifyAttestationResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_confidentialcomputing_v1_service, 0);

