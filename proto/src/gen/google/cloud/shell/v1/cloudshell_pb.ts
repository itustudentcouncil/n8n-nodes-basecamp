// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/shell/v1/cloudshell.proto (package google.cloud.shell.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/shell/v1/cloudshell.proto.
 */
export const file_google_cloud_shell_v1_cloudshell: GenFile = /*@__PURE__*/
  fileDesc("CiZnb29nbGUvY2xvdWQvc2hlbGwvdjEvY2xvdWRzaGVsbC5wcm90bxIVZ29vZ2xlLmNsb3VkLnNoZWxsLnYxIrMDCgtFbnZpcm9ubWVudBIRCgRuYW1lGAEgASgJQgPgQQUSDwoCaWQYAiABKAlCA+BBAxIcCgxkb2NrZXJfaW1hZ2UYAyABKAlCBuBBAuBBBRI8CgVzdGF0ZRgEIAEoDjIoLmdvb2dsZS5jbG91ZC5zaGVsbC52MS5FbnZpcm9ubWVudC5TdGF0ZUID4EEDEhUKCHdlYl9ob3N0GAwgASgJQgPgQQMSGQoMc3NoX3VzZXJuYW1lGAUgASgJQgPgQQMSFQoIc3NoX2hvc3QYBiABKAlCA+BBAxIVCghzc2hfcG9ydBgHIAEoBUID4EEDEhgKC3B1YmxpY19rZXlzGAggAygJQgPgQQMiVQoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABINCglTVVNQRU5ERUQQARILCgdQRU5ESU5HEAISCwoHUlVOTklORxADEgwKCERFTEVUSU5HEAQ6U+pBUAolY2xvdWRzaGVsbC5nb29nbGVhcGlzLmNvbS9FbnZpcm9ubWVudBIndXNlcnMve3VzZXJ9L2Vudmlyb25tZW50cy97ZW52aXJvbm1lbnR9IlQKFUdldEVudmlyb25tZW50UmVxdWVzdBI7CgRuYW1lGAEgASgJQi3gQQL6QScKJWNsb3Vkc2hlbGwuZ29vZ2xlYXBpcy5jb20vRW52aXJvbm1lbnQiGwoZQ3JlYXRlRW52aXJvbm1lbnRNZXRhZGF0YSIbChlEZWxldGVFbnZpcm9ubWVudE1ldGFkYXRhIlIKF1N0YXJ0RW52aXJvbm1lbnRSZXF1ZXN0EgwKBG5hbWUYASABKAkSFAoMYWNjZXNzX3Rva2VuGAIgASgJEhMKC3B1YmxpY19rZXlzGAMgAygJIoQBChtBdXRob3JpemVFbnZpcm9ubWVudFJlcXVlc3QSDAoEbmFtZRgBIAEoCRIUCgxhY2Nlc3NfdG9rZW4YAiABKAkSEAoIaWRfdG9rZW4YBCABKAkSLwoLZXhwaXJlX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIh4KHEF1dGhvcml6ZUVudmlyb25tZW50UmVzcG9uc2UiHgocQXV0aG9yaXplRW52aXJvbm1lbnRNZXRhZGF0YSLSAQoYU3RhcnRFbnZpcm9ubWVudE1ldGFkYXRhEkQKBXN0YXRlGAEgASgOMjUuZ29vZ2xlLmNsb3VkLnNoZWxsLnYxLlN0YXJ0RW52aXJvbm1lbnRNZXRhZGF0YS5TdGF0ZSJwCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgwKCFNUQVJUSU5HEAESFAoQVU5BUkNISVZJTkdfRElTSxACEh4KGkFXQUlUSU5HX0NPTVBVVEVfUkVTT1VSQ0VTEAQSDAoIRklOSVNIRUQQAyJTChhTdGFydEVudmlyb25tZW50UmVzcG9uc2USNwoLZW52aXJvbm1lbnQYASABKAsyIi5nb29nbGUuY2xvdWQuc2hlbGwudjEuRW52aXJvbm1lbnQiNwoTQWRkUHVibGljS2V5UmVxdWVzdBITCgtlbnZpcm9ubWVudBgBIAEoCRILCgNrZXkYAiABKAkiIwoUQWRkUHVibGljS2V5UmVzcG9uc2USCwoDa2V5GAEgASgJIhYKFEFkZFB1YmxpY0tleU1ldGFkYXRhIjoKFlJlbW92ZVB1YmxpY0tleVJlcXVlc3QSEwoLZW52aXJvbm1lbnQYASABKAkSCwoDa2V5GAIgASgJIhkKF1JlbW92ZVB1YmxpY0tleVJlc3BvbnNlIhkKF1JlbW92ZVB1YmxpY0tleU1ldGFkYXRhIp4CChZDbG91ZFNoZWxsRXJyb3JEZXRhaWxzEk8KBGNvZGUYASABKA4yQS5nb29nbGUuY2xvdWQuc2hlbGwudjEuQ2xvdWRTaGVsbEVycm9yRGV0YWlscy5DbG91ZFNoZWxsRXJyb3JDb2RlIrIBChNDbG91ZFNoZWxsRXJyb3JDb2RlEiYKIkNMT1VEX1NIRUxMX0VSUk9SX0NPREVfVU5TUEVDSUZJRUQQABIVChFJTUFHRV9VTkFWQUlMQUJMRRABEhgKFENMT1VEX1NIRUxMX0RJU0FCTEVEEAISEQoNVE9TX1ZJT0xBVElPThAEEhIKDlFVT1RBX0VYQ0VFREVEEAUSGwoXRU5WSVJPTk1FTlRfVU5BVkFJTEFCTEUQBjLUCAoRQ2xvdWRTaGVsbFNlcnZpY2USlAEKDkdldEVudmlyb25tZW50EiwuZ29vZ2xlLmNsb3VkLnNoZWxsLnYxLkdldEVudmlyb25tZW50UmVxdWVzdBoiLmdvb2dsZS5jbG91ZC5zaGVsbC52MS5FbnZpcm9ubWVudCIw2kEEbmFtZYLT5JMCIxIhL3YxL3tuYW1lPXVzZXJzLyovZW52aXJvbm1lbnRzLyp9EswBChBTdGFydEVudmlyb25tZW50Ei4uZ29vZ2xlLmNsb3VkLnNoZWxsLnYxLlN0YXJ0RW52aXJvbm1lbnRSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJpykE0ChhTdGFydEVudmlyb25tZW50UmVzcG9uc2USGFN0YXJ0RW52aXJvbm1lbnRNZXRhZGF0YYLT5JMCLDoBKiInL3YxL3tuYW1lPXVzZXJzLyovZW52aXJvbm1lbnRzLyp9OnN0YXJ0EuABChRBdXRob3JpemVFbnZpcm9ubWVudBIyLmdvb2dsZS5jbG91ZC5zaGVsbC52MS5BdXRob3JpemVFbnZpcm9ubWVudFJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uInXKQTwKHEF1dGhvcml6ZUVudmlyb25tZW50UmVzcG9uc2USHEF1dGhvcml6ZUVudmlyb25tZW50TWV0YWRhdGGC0+STAjA6ASoiKy92MS97bmFtZT11c2Vycy8qL2Vudmlyb25tZW50cy8qfTphdXRob3JpemUSygEKDEFkZFB1YmxpY0tleRIqLmdvb2dsZS5jbG91ZC5zaGVsbC52MS5BZGRQdWJsaWNLZXlSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJvykEsChRBZGRQdWJsaWNLZXlSZXNwb25zZRIUQWRkUHVibGljS2V5TWV0YWRhdGGC0+STAjo6ASoiNS92MS97ZW52aXJvbm1lbnQ9dXNlcnMvKi9lbnZpcm9ubWVudHMvKn06YWRkUHVibGljS2V5EtkBCg9SZW1vdmVQdWJsaWNLZXkSLS5nb29nbGUuY2xvdWQuc2hlbGwudjEuUmVtb3ZlUHVibGljS2V5UmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24ieMpBMgoXUmVtb3ZlUHVibGljS2V5UmVzcG9uc2USF1JlbW92ZVB1YmxpY0tleU1ldGFkYXRhgtPkkwI9OgEqIjgvdjEve2Vudmlyb25tZW50PXVzZXJzLyovZW52aXJvbm1lbnRzLyp9OnJlbW92ZVB1YmxpY0tleRpNykEZY2xvdWRzaGVsbC5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1CXwoZY29tLmdvb2dsZS5jbG91ZC5zaGVsbC52MUIPQ2xvdWRTaGVsbFByb3RvUAFaL2Nsb3VkLmdvb2dsZS5jb20vZ28vc2hlbGwvYXBpdjEvc2hlbGxwYjtzaGVsbHBiYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * A Cloud Shell environment, which is defined as the combination of a Docker
 * image specifying what is installed on the environment and a home directory
 * containing the user's data that will remain across sessions. Each user has
 * at least an environment with the ID "default".
 *
 * @generated from message google.cloud.shell.v1.Environment
 */
export type Environment = Message<"google.cloud.shell.v1.Environment"> & {
  /**
   * Immutable. Full name of this resource, in the format
   * `users/{owner_email}/environments/{environment_id}`. `{owner_email}` is the
   * email address of the user to whom this environment belongs, and
   * `{environment_id}` is the identifier of this environment. For example,
   * `users/someone@example.com/environments/default`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The environment's identifier, unique among the user's
   * environments.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Required. Immutable. Full path to the Docker image used to run this environment, e.g.
   * "gcr.io/dev-con/cloud-devshell:latest".
   *
   * @generated from field: string docker_image = 3;
   */
  dockerImage: string;

  /**
   * Output only. Current execution state of this environment.
   *
   * @generated from field: google.cloud.shell.v1.Environment.State state = 4;
   */
  state: Environment_State;

  /**
   * Output only. Host to which clients can connect to initiate HTTPS or WSS
   * connections with the environment.
   *
   * @generated from field: string web_host = 12;
   */
  webHost: string;

  /**
   * Output only. Username that clients should use when initiating SSH sessions
   * with the environment.
   *
   * @generated from field: string ssh_username = 5;
   */
  sshUsername: string;

  /**
   * Output only. Host to which clients can connect to initiate SSH sessions
   * with the environment.
   *
   * @generated from field: string ssh_host = 6;
   */
  sshHost: string;

  /**
   * Output only. Port to which clients can connect to initiate SSH sessions
   * with the environment.
   *
   * @generated from field: int32 ssh_port = 7;
   */
  sshPort: number;

  /**
   * Output only. Public keys associated with the environment. Clients can
   * connect to this environment via SSH only if they possess a private key
   * corresponding to at least one of these public keys. Keys can be added to or
   * removed from the environment using the AddPublicKey and RemovePublicKey
   * methods.
   *
   * @generated from field: repeated string public_keys = 8;
   */
  publicKeys: string[];
};

/**
 * Describes the message google.cloud.shell.v1.Environment.
 * Use `create(EnvironmentSchema)` to create a new message.
 */
export const EnvironmentSchema: GenMessage<Environment> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 0);

/**
 * Possible execution states for an environment.
 *
 * @generated from enum google.cloud.shell.v1.Environment.State
 */
export enum Environment_State {
  /**
   * The environment's states is unknown.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The environment is not running and can't be connected to. Starting the
   * environment will transition it to the PENDING state.
   *
   * @generated from enum value: SUSPENDED = 1;
   */
  SUSPENDED = 1,

  /**
   * The environment is being started but is not yet ready to accept
   * connections.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * The environment is running and ready to accept connections. It will
   * automatically transition back to DISABLED after a period of inactivity or
   * if another environment is started.
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * The environment is being deleted and can't be connected to.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}

/**
 * Describes the enum google.cloud.shell.v1.Environment.State.
 */
export const Environment_StateSchema: GenEnum<Environment_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_shell_v1_cloudshell, 0, 0);

/**
 * Request message for
 * [GetEnvironment][google.cloud.shell.v1.CloudShellService.GetEnvironment].
 *
 * @generated from message google.cloud.shell.v1.GetEnvironmentRequest
 */
export type GetEnvironmentRequest = Message<"google.cloud.shell.v1.GetEnvironmentRequest"> & {
  /**
   * Required. Name of the requested resource, for example `users/me/environments/default`
   * or `users/someone@example.com/environments/default`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.shell.v1.GetEnvironmentRequest.
 * Use `create(GetEnvironmentRequestSchema)` to create a new message.
 */
export const GetEnvironmentRequestSchema: GenMessage<GetEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 1);

/**
 * Message included in the metadata field of operations returned from
 * [CreateEnvironment][google.cloud.shell.v1.CloudShellService.CreateEnvironment].
 *
 * @generated from message google.cloud.shell.v1.CreateEnvironmentMetadata
 */
export type CreateEnvironmentMetadata = Message<"google.cloud.shell.v1.CreateEnvironmentMetadata"> & {
};

/**
 * Describes the message google.cloud.shell.v1.CreateEnvironmentMetadata.
 * Use `create(CreateEnvironmentMetadataSchema)` to create a new message.
 */
export const CreateEnvironmentMetadataSchema: GenMessage<CreateEnvironmentMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 2);

/**
 * Message included in the metadata field of operations returned from
 * [DeleteEnvironment][google.cloud.shell.v1.CloudShellService.DeleteEnvironment].
 *
 * @generated from message google.cloud.shell.v1.DeleteEnvironmentMetadata
 */
export type DeleteEnvironmentMetadata = Message<"google.cloud.shell.v1.DeleteEnvironmentMetadata"> & {
};

/**
 * Describes the message google.cloud.shell.v1.DeleteEnvironmentMetadata.
 * Use `create(DeleteEnvironmentMetadataSchema)` to create a new message.
 */
export const DeleteEnvironmentMetadataSchema: GenMessage<DeleteEnvironmentMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 3);

/**
 * Request message for
 * [StartEnvironment][google.cloud.shell.v1.CloudShellService.StartEnvironment].
 *
 * @generated from message google.cloud.shell.v1.StartEnvironmentRequest
 */
export type StartEnvironmentRequest = Message<"google.cloud.shell.v1.StartEnvironmentRequest"> & {
  /**
   * Name of the resource that should be started, for example
   * `users/me/environments/default` or
   * `users/someone@example.com/environments/default`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The initial access token passed to the environment. If this is present and
   * valid, the environment will be pre-authenticated with gcloud so that the
   * user can run gcloud commands in Cloud Shell without having to log in. This
   * code can be updated later by calling AuthorizeEnvironment.
   *
   * @generated from field: string access_token = 2;
   */
  accessToken: string;

  /**
   * Public keys that should be added to the environment before it is started.
   *
   * @generated from field: repeated string public_keys = 3;
   */
  publicKeys: string[];
};

/**
 * Describes the message google.cloud.shell.v1.StartEnvironmentRequest.
 * Use `create(StartEnvironmentRequestSchema)` to create a new message.
 */
export const StartEnvironmentRequestSchema: GenMessage<StartEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 4);

/**
 * Request message for
 * [AuthorizeEnvironment][google.cloud.shell.v1.CloudShellService.AuthorizeEnvironment].
 *
 * @generated from message google.cloud.shell.v1.AuthorizeEnvironmentRequest
 */
export type AuthorizeEnvironmentRequest = Message<"google.cloud.shell.v1.AuthorizeEnvironmentRequest"> & {
  /**
   * Name of the resource that should receive the credentials, for example
   * `users/me/environments/default` or
   * `users/someone@example.com/environments/default`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The OAuth access token that should be sent to the environment.
   *
   * @generated from field: string access_token = 2;
   */
  accessToken: string;

  /**
   * The OAuth ID token that should be sent to the environment.
   *
   * @generated from field: string id_token = 4;
   */
  idToken: string;

  /**
   * The time when the credentials expire. If not set, defaults to one hour from
   * when the server received the request.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.cloud.shell.v1.AuthorizeEnvironmentRequest.
 * Use `create(AuthorizeEnvironmentRequestSchema)` to create a new message.
 */
export const AuthorizeEnvironmentRequestSchema: GenMessage<AuthorizeEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 5);

/**
 * Response message for
 * [AuthorizeEnvironment][google.cloud.shell.v1.CloudShellService.AuthorizeEnvironment].
 *
 * @generated from message google.cloud.shell.v1.AuthorizeEnvironmentResponse
 */
export type AuthorizeEnvironmentResponse = Message<"google.cloud.shell.v1.AuthorizeEnvironmentResponse"> & {
};

/**
 * Describes the message google.cloud.shell.v1.AuthorizeEnvironmentResponse.
 * Use `create(AuthorizeEnvironmentResponseSchema)` to create a new message.
 */
export const AuthorizeEnvironmentResponseSchema: GenMessage<AuthorizeEnvironmentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 6);

/**
 * Message included in the metadata field of operations returned from
 * [AuthorizeEnvironment][google.cloud.shell.v1.CloudShellService.AuthorizeEnvironment].
 *
 * @generated from message google.cloud.shell.v1.AuthorizeEnvironmentMetadata
 */
export type AuthorizeEnvironmentMetadata = Message<"google.cloud.shell.v1.AuthorizeEnvironmentMetadata"> & {
};

/**
 * Describes the message google.cloud.shell.v1.AuthorizeEnvironmentMetadata.
 * Use `create(AuthorizeEnvironmentMetadataSchema)` to create a new message.
 */
export const AuthorizeEnvironmentMetadataSchema: GenMessage<AuthorizeEnvironmentMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 7);

/**
 * Message included in the metadata field of operations returned from
 * [StartEnvironment][google.cloud.shell.v1.CloudShellService.StartEnvironment].
 *
 * @generated from message google.cloud.shell.v1.StartEnvironmentMetadata
 */
export type StartEnvironmentMetadata = Message<"google.cloud.shell.v1.StartEnvironmentMetadata"> & {
  /**
   * Current state of the environment being started.
   *
   * @generated from field: google.cloud.shell.v1.StartEnvironmentMetadata.State state = 1;
   */
  state: StartEnvironmentMetadata_State;
};

/**
 * Describes the message google.cloud.shell.v1.StartEnvironmentMetadata.
 * Use `create(StartEnvironmentMetadataSchema)` to create a new message.
 */
export const StartEnvironmentMetadataSchema: GenMessage<StartEnvironmentMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 8);

/**
 * Possible states an environment might transition between during startup.
 * These states are not normally actionable by clients, but may be used to
 * show a progress message to the user. An environment won't necessarily go
 * through all of these states when starting. More states are likely to be
 * added in the future.
 *
 * @generated from enum google.cloud.shell.v1.StartEnvironmentMetadata.State
 */
export enum StartEnvironmentMetadata_State {
  /**
   * The environment's start state is unknown.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The environment is in the process of being started, but no additional
   * details are available.
   *
   * @generated from enum value: STARTING = 1;
   */
  STARTING = 1,

  /**
   * Startup is waiting for the user's disk to be unarchived. This can happen
   * when the user returns to Cloud Shell after not having used it for a
   * while, and suggests that startup will take longer than normal.
   *
   * @generated from enum value: UNARCHIVING_DISK = 2;
   */
  UNARCHIVING_DISK = 2,

  /**
   * Startup is waiting for compute resources to be assigned to the
   * environment. This should normally happen very quickly, but an environment
   * might stay in this state for an extended period of time if the system is
   * experiencing heavy load.
   *
   * @generated from enum value: AWAITING_COMPUTE_RESOURCES = 4;
   */
  AWAITING_COMPUTE_RESOURCES = 4,

  /**
   * Startup has completed. If the start operation was successful, the user
   * should be able to establish an SSH connection to their environment.
   * Otherwise, the operation will contain details of the failure.
   *
   * @generated from enum value: FINISHED = 3;
   */
  FINISHED = 3,
}

/**
 * Describes the enum google.cloud.shell.v1.StartEnvironmentMetadata.State.
 */
export const StartEnvironmentMetadata_StateSchema: GenEnum<StartEnvironmentMetadata_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_shell_v1_cloudshell, 8, 0);

/**
 * Message included in the response field of operations returned from
 * [StartEnvironment][google.cloud.shell.v1.CloudShellService.StartEnvironment]
 * once the operation is complete.
 *
 * @generated from message google.cloud.shell.v1.StartEnvironmentResponse
 */
export type StartEnvironmentResponse = Message<"google.cloud.shell.v1.StartEnvironmentResponse"> & {
  /**
   * Environment that was started.
   *
   * @generated from field: google.cloud.shell.v1.Environment environment = 1;
   */
  environment?: Environment;
};

/**
 * Describes the message google.cloud.shell.v1.StartEnvironmentResponse.
 * Use `create(StartEnvironmentResponseSchema)` to create a new message.
 */
export const StartEnvironmentResponseSchema: GenMessage<StartEnvironmentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 9);

/**
 * Request message for
 * [AddPublicKey][google.cloud.shell.v1.CloudShellService.AddPublicKey].
 *
 * @generated from message google.cloud.shell.v1.AddPublicKeyRequest
 */
export type AddPublicKeyRequest = Message<"google.cloud.shell.v1.AddPublicKeyRequest"> & {
  /**
   * Environment this key should be added to, e.g.
   * `users/me/environments/default`.
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * Key that should be added to the environment. Supported formats are
   * `ssh-dss` (see RFC4253), `ssh-rsa` (see RFC4253), `ecdsa-sha2-nistp256`
   * (see RFC5656), `ecdsa-sha2-nistp384` (see RFC5656) and
   * `ecdsa-sha2-nistp521` (see RFC5656). It should be structured as
   * &lt;format&gt; &lt;content&gt;, where &lt;content&gt; part is encoded with
   * Base64.
   *
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message google.cloud.shell.v1.AddPublicKeyRequest.
 * Use `create(AddPublicKeyRequestSchema)` to create a new message.
 */
export const AddPublicKeyRequestSchema: GenMessage<AddPublicKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 10);

/**
 * Response message for
 * [AddPublicKey][google.cloud.shell.v1.CloudShellService.AddPublicKey].
 *
 * @generated from message google.cloud.shell.v1.AddPublicKeyResponse
 */
export type AddPublicKeyResponse = Message<"google.cloud.shell.v1.AddPublicKeyResponse"> & {
  /**
   * Key that was added to the environment.
   *
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message google.cloud.shell.v1.AddPublicKeyResponse.
 * Use `create(AddPublicKeyResponseSchema)` to create a new message.
 */
export const AddPublicKeyResponseSchema: GenMessage<AddPublicKeyResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 11);

/**
 * Message included in the metadata field of operations returned from
 * [AddPublicKey][google.cloud.shell.v1.CloudShellService.AddPublicKey].
 *
 * @generated from message google.cloud.shell.v1.AddPublicKeyMetadata
 */
export type AddPublicKeyMetadata = Message<"google.cloud.shell.v1.AddPublicKeyMetadata"> & {
};

/**
 * Describes the message google.cloud.shell.v1.AddPublicKeyMetadata.
 * Use `create(AddPublicKeyMetadataSchema)` to create a new message.
 */
export const AddPublicKeyMetadataSchema: GenMessage<AddPublicKeyMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 12);

/**
 * Request message for
 * [RemovePublicKey][google.cloud.shell.v1.CloudShellService.RemovePublicKey].
 *
 * @generated from message google.cloud.shell.v1.RemovePublicKeyRequest
 */
export type RemovePublicKeyRequest = Message<"google.cloud.shell.v1.RemovePublicKeyRequest"> & {
  /**
   * Environment this key should be removed from, e.g.
   * `users/me/environments/default`.
   *
   * @generated from field: string environment = 1;
   */
  environment: string;

  /**
   * Key that should be removed from the environment.
   *
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message google.cloud.shell.v1.RemovePublicKeyRequest.
 * Use `create(RemovePublicKeyRequestSchema)` to create a new message.
 */
export const RemovePublicKeyRequestSchema: GenMessage<RemovePublicKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 13);

/**
 * Response message for
 * [RemovePublicKey][google.cloud.shell.v1.CloudShellService.RemovePublicKey].
 *
 * @generated from message google.cloud.shell.v1.RemovePublicKeyResponse
 */
export type RemovePublicKeyResponse = Message<"google.cloud.shell.v1.RemovePublicKeyResponse"> & {
};

/**
 * Describes the message google.cloud.shell.v1.RemovePublicKeyResponse.
 * Use `create(RemovePublicKeyResponseSchema)` to create a new message.
 */
export const RemovePublicKeyResponseSchema: GenMessage<RemovePublicKeyResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 14);

/**
 * Message included in the metadata field of operations returned from
 * [RemovePublicKey][google.cloud.shell.v1.CloudShellService.RemovePublicKey].
 *
 * @generated from message google.cloud.shell.v1.RemovePublicKeyMetadata
 */
export type RemovePublicKeyMetadata = Message<"google.cloud.shell.v1.RemovePublicKeyMetadata"> & {
};

/**
 * Describes the message google.cloud.shell.v1.RemovePublicKeyMetadata.
 * Use `create(RemovePublicKeyMetadataSchema)` to create a new message.
 */
export const RemovePublicKeyMetadataSchema: GenMessage<RemovePublicKeyMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 15);

/**
 * Cloud-shell specific information that will be included as details in failure
 * responses.
 *
 * @generated from message google.cloud.shell.v1.CloudShellErrorDetails
 */
export type CloudShellErrorDetails = Message<"google.cloud.shell.v1.CloudShellErrorDetails"> & {
  /**
   * Code indicating the specific error the occurred.
   *
   * @generated from field: google.cloud.shell.v1.CloudShellErrorDetails.CloudShellErrorCode code = 1;
   */
  code: CloudShellErrorDetails_CloudShellErrorCode;
};

/**
 * Describes the message google.cloud.shell.v1.CloudShellErrorDetails.
 * Use `create(CloudShellErrorDetailsSchema)` to create a new message.
 */
export const CloudShellErrorDetailsSchema: GenMessage<CloudShellErrorDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_shell_v1_cloudshell, 16);

/**
 * Set of possible errors returned from API calls.
 *
 * @generated from enum google.cloud.shell.v1.CloudShellErrorDetails.CloudShellErrorCode
 */
export enum CloudShellErrorDetails_CloudShellErrorCode {
  /**
   * An unknown error occurred.
   *
   * @generated from enum value: CLOUD_SHELL_ERROR_CODE_UNSPECIFIED = 0;
   */
  CLOUD_SHELL_ERROR_CODE_UNSPECIFIED = 0,

  /**
   * The image used by the Cloud Shell environment either does not exist or
   * the user does not have access to it.
   *
   * @generated from enum value: IMAGE_UNAVAILABLE = 1;
   */
  IMAGE_UNAVAILABLE = 1,

  /**
   * Cloud Shell has been disabled by an administrator for the user making the
   * request.
   *
   * @generated from enum value: CLOUD_SHELL_DISABLED = 2;
   */
  CLOUD_SHELL_DISABLED = 2,

  /**
   * Cloud Shell has been permanently disabled due to a Terms of Service
   * violation by the user.
   *
   * @generated from enum value: TOS_VIOLATION = 4;
   */
  TOS_VIOLATION = 4,

  /**
   * The user has exhausted their weekly Cloud Shell quota, and Cloud Shell
   * will be disabled until the quota resets.
   *
   * @generated from enum value: QUOTA_EXCEEDED = 5;
   */
  QUOTA_EXCEEDED = 5,

  /**
   * The Cloud Shell environment is unavailable and cannot be connected to at
   * the moment.
   *
   * @generated from enum value: ENVIRONMENT_UNAVAILABLE = 6;
   */
  ENVIRONMENT_UNAVAILABLE = 6,
}

/**
 * Describes the enum google.cloud.shell.v1.CloudShellErrorDetails.CloudShellErrorCode.
 */
export const CloudShellErrorDetails_CloudShellErrorCodeSchema: GenEnum<CloudShellErrorDetails_CloudShellErrorCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_shell_v1_cloudshell, 16, 0);

/**
 * API for interacting with Google Cloud Shell. Each user of Cloud Shell has at
 * least one environment, which has the ID "default". Environment consists of a
 * Docker image defining what is installed on the environment and a home
 * directory containing the user's data that will remain across sessions.
 * Clients use this API to start and fetch information about their environment,
 * which can then be used to connect to that environment via a separate SSH
 * client.
 *
 * @generated from service google.cloud.shell.v1.CloudShellService
 */
export const CloudShellService: GenService<{
  /**
   * Gets an environment. Returns NOT_FOUND if the environment does not exist.
   *
   * @generated from rpc google.cloud.shell.v1.CloudShellService.GetEnvironment
   */
  getEnvironment: {
    methodKind: "unary";
    input: typeof GetEnvironmentRequestSchema;
    output: typeof EnvironmentSchema;
  },
  /**
   * Starts an existing environment, allowing clients to connect to it. The
   * returned operation will contain an instance of StartEnvironmentMetadata in
   * its metadata field. Users can wait for the environment to start by polling
   * this operation via GetOperation. Once the environment has finished starting
   * and is ready to accept connections, the operation will contain a
   * StartEnvironmentResponse in its response field.
   *
   * @generated from rpc google.cloud.shell.v1.CloudShellService.StartEnvironment
   */
  startEnvironment: {
    methodKind: "unary";
    input: typeof StartEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Sends OAuth credentials to a running environment on behalf of a user. When
   * this completes, the environment will be authorized to run various Google
   * Cloud command line tools without requiring the user to manually
   * authenticate.
   *
   * @generated from rpc google.cloud.shell.v1.CloudShellService.AuthorizeEnvironment
   */
  authorizeEnvironment: {
    methodKind: "unary";
    input: typeof AuthorizeEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Adds a public SSH key to an environment, allowing clients with the
   * corresponding private key to connect to that environment via SSH. If a key
   * with the same content already exists, this will error with ALREADY_EXISTS.
   *
   * @generated from rpc google.cloud.shell.v1.CloudShellService.AddPublicKey
   */
  addPublicKey: {
    methodKind: "unary";
    input: typeof AddPublicKeyRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Removes a public SSH key from an environment. Clients will no longer be
   * able to connect to the environment using the corresponding private key.
   * If a key with the same content is not present, this will error with
   * NOT_FOUND.
   *
   * @generated from rpc google.cloud.shell.v1.CloudShellService.RemovePublicKey
   */
  removePublicKey: {
    methodKind: "unary";
    input: typeof RemovePublicKeyRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_shell_v1_cloudshell, 0);

