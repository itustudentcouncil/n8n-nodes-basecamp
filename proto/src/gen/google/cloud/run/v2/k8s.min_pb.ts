// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/run/v2/k8s.min.proto (package google.cloud.run.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/run/v2/k8s.min.proto.
 */
export const file_google_cloud_run_v2_k8s_min: GenFile = /*@__PURE__*/
  fileDesc("CiFnb29nbGUvY2xvdWQvcnVuL3YyL2s4cy5taW4ucHJvdG8SE2dvb2dsZS5jbG91ZC5ydW4udjIisAMKCUNvbnRhaW5lchIMCgRuYW1lGAEgASgJEhIKBWltYWdlGAIgASgJQgPgQQISDwoHY29tbWFuZBgDIAMoCRIMCgRhcmdzGAQgAygJEigKA2VudhgFIAMoCzIbLmdvb2dsZS5jbG91ZC5ydW4udjIuRW52VmFyEjwKCXJlc291cmNlcxgGIAEoCzIpLmdvb2dsZS5jbG91ZC5ydW4udjIuUmVzb3VyY2VSZXF1aXJlbWVudHMSMQoFcG9ydHMYByADKAsyIi5nb29nbGUuY2xvdWQucnVuLnYyLkNvbnRhaW5lclBvcnQSNwoNdm9sdW1lX21vdW50cxgIIAMoCzIgLmdvb2dsZS5jbG91ZC5ydW4udjIuVm9sdW1lTW91bnQSEwoLd29ya2luZ19kaXIYCSABKAkSMgoObGl2ZW5lc3NfcHJvYmUYCiABKAsyGi5nb29nbGUuY2xvdWQucnVuLnYyLlByb2JlEjEKDXN0YXJ0dXBfcHJvYmUYCyABKAsyGi5nb29nbGUuY2xvdWQucnVuLnYyLlByb2JlEhIKCmRlcGVuZHNfb24YDCADKAkiuQEKFFJlc291cmNlUmVxdWlyZW1lbnRzEkUKBmxpbWl0cxgBIAMoCzI1Lmdvb2dsZS5jbG91ZC5ydW4udjIuUmVzb3VyY2VSZXF1aXJlbWVudHMuTGltaXRzRW50cnkSEAoIY3B1X2lkbGUYAiABKAgSGQoRc3RhcnR1cF9jcHVfYm9vc3QYAyABKAgaLQoLTGltaXRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJxCgZFbnZWYXISEQoEbmFtZRgBIAEoCUID4EECEg8KBXZhbHVlGAIgASgJSAASOQoMdmFsdWVfc291cmNlGAMgASgLMiEuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5FbnZWYXJTb3VyY2VIAEIICgZ2YWx1ZXMiTgoMRW52VmFyU291cmNlEj4KDnNlY3JldF9rZXlfcmVmGAEgASgLMiYuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5TZWNyZXRLZXlTZWxlY3RvciKSAQoRU2VjcmV0S2V5U2VsZWN0b3ISOwoGc2VjcmV0GAEgASgJQivgQQL6QSUKI3NlY3JldG1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vU2VjcmV0EkAKB3ZlcnNpb24YAiABKAlCL/pBLAoqc2VjcmV0bWFuYWdlci5nb29nbGVhcGlzLmNvbS9TZWNyZXRWZXJzaW9uIjUKDUNvbnRhaW5lclBvcnQSDAoEbmFtZRgBIAEoCRIWCg5jb250YWluZXJfcG9ydBgDIAEoBSI5CgtWb2x1bWVNb3VudBIRCgRuYW1lGAEgASgJQgPgQQISFwoKbW91bnRfcGF0aBgDIAEoCUID4EECItQCCgZWb2x1bWUSEQoEbmFtZRgBIAEoCUID4EECEjkKBnNlY3JldBgCIAEoCzInLmdvb2dsZS5jbG91ZC5ydW4udjIuU2VjcmV0Vm9sdW1lU291cmNlSAASQwoSY2xvdWRfc3FsX2luc3RhbmNlGAMgASgLMiUuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5DbG91ZFNxbEluc3RhbmNlSAASPgoJZW1wdHlfZGlyGAQgASgLMikuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5FbXB0eURpclZvbHVtZVNvdXJjZUgAEjMKA25mcxgFIAEoCzIkLmdvb2dsZS5jbG91ZC5ydW4udjIuTkZTVm9sdW1lU291cmNlSAASMwoDZ2NzGAYgASgLMiQuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5HQ1NWb2x1bWVTb3VyY2VIAEINCgt2b2x1bWVfdHlwZSJyChJTZWNyZXRWb2x1bWVTb3VyY2USEwoGc2VjcmV0GAEgASgJQgPgQQISMQoFaXRlbXMYAiADKAsyIi5nb29nbGUuY2xvdWQucnVuLnYyLlZlcnNpb25Ub1BhdGgSFAoMZGVmYXVsdF9tb2RlGAMgASgFIkEKDVZlcnNpb25Ub1BhdGgSEQoEcGF0aBgBIAEoCUID4EECEg8KB3ZlcnNpb24YAiABKAkSDAoEbW9kZRgDIAEoBSIlChBDbG91ZFNxbEluc3RhbmNlEhEKCWluc3RhbmNlcxgBIAMoCSKaAQoURW1wdHlEaXJWb2x1bWVTb3VyY2USQAoGbWVkaXVtGAEgASgOMjAuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5FbXB0eURpclZvbHVtZVNvdXJjZS5NZWRpdW0SEgoKc2l6ZV9saW1pdBgCIAEoCSIsCgZNZWRpdW0SFgoSTUVESVVNX1VOU1BFQ0lGSUVEEAASCgoGTUVNT1JZEAEiQgoPTkZTVm9sdW1lU291cmNlEg4KBnNlcnZlchgBIAEoCRIMCgRwYXRoGAIgASgJEhEKCXJlYWRfb25seRgDIAEoCCI0Cg9HQ1NWb2x1bWVTb3VyY2USDgoGYnVja2V0GAEgASgJEhEKCXJlYWRfb25seRgCIAEoCCLIAgoFUHJvYmUSIgoVaW5pdGlhbF9kZWxheV9zZWNvbmRzGAEgASgFQgPgQQESHAoPdGltZW91dF9zZWNvbmRzGAIgASgFQgPgQQESGwoOcGVyaW9kX3NlY29uZHMYAyABKAVCA+BBARIeChFmYWlsdXJlX3RocmVzaG9sZBgEIAEoBUID4EEBEjsKCGh0dHBfZ2V0GAUgASgLMiIuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5IVFRQR2V0QWN0aW9uQgPgQQFIABI/Cgp0Y3Bfc29ja2V0GAYgASgLMiQuZ29vZ2xlLmNsb3VkLnJ1bi52Mi5UQ1BTb2NrZXRBY3Rpb25CA+BBAUgAEjQKBGdycGMYByABKAsyHy5nb29nbGUuY2xvdWQucnVuLnYyLkdSUENBY3Rpb25CA+BBAUgAQgwKCnByb2JlX3R5cGUicQoNSFRUUEdldEFjdGlvbhIRCgRwYXRoGAEgASgJQgPgQQESOgoMaHR0cF9oZWFkZXJzGAQgAygLMh8uZ29vZ2xlLmNsb3VkLnJ1bi52Mi5IVFRQSGVhZGVyQgPgQQESEQoEcG9ydBgFIAEoBUID4EEBIjMKCkhUVFBIZWFkZXISEQoEbmFtZRgBIAEoCUID4EECEhIKBXZhbHVlGAIgASgJQgPgQQEiJAoPVENQU29ja2V0QWN0aW9uEhEKBHBvcnQYASABKAVCA+BBASI1CgpHUlBDQWN0aW9uEhEKBHBvcnQYASABKAVCA+BBARIUCgdzZXJ2aWNlGAIgASgJQgPgQQFC6QMKF2NvbS5nb29nbGUuY2xvdWQucnVuLnYyQgtLOHNNaW5Qcm90b1ABWiljbG91ZC5nb29nbGUuY29tL2dvL3J1bi9hcGl2Mi9ydW5wYjtydW5wYupBeAohY2xvdWRrbXMuZ29vZ2xlYXBpcy5jb20vQ3J5cHRvS2V5ElNwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0va2V5UmluZ3Mve2tleV9yaW5nfS9jcnlwdG9LZXlzL3tjcnlwdG9fa2V5fepBSgojc2VjcmV0bWFuYWdlci5nb29nbGVhcGlzLmNvbS9TZWNyZXQSI3Byb2plY3RzL3twcm9qZWN0fS9zZWNyZXRzL3tzZWNyZXR96kFkCipzZWNyZXRtYW5hZ2VyLmdvb2dsZWFwaXMuY29tL1NlY3JldFZlcnNpb24SNnByb2plY3RzL3twcm9qZWN0fS9zZWNyZXRzL3tzZWNyZXR9L3ZlcnNpb25zL3t2ZXJzaW9ufepBZAoidnBjYWNjZXNzLmdvb2dsZWFwaXMuY29tL0Nvbm5lY3RvchI+cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2Nvbm5lY3RvcnMve2Nvbm5lY3Rvcn1iBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource]);

/**
 * A single application container.
 * This specifies both the container to run, the command to run in the container
 * and the arguments to supply to it.
 * Note that additional arguments can be supplied by the system to the container
 * at runtime.
 *
 * @generated from message google.cloud.run.v2.Container
 */
export type Container = Message<"google.cloud.run.v2.Container"> & {
  /**
   * Name of the container specified as a DNS_LABEL (RFC 1123).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Name of the container image in Dockerhub, Google Artifact
   * Registry, or Google Container Registry. If the host is not provided,
   * Dockerhub is assumed.
   *
   * @generated from field: string image = 2;
   */
  image: string;

  /**
   * Entrypoint array. Not executed within a shell.
   * The docker image's ENTRYPOINT is used if this is not provided.
   *
   * @generated from field: repeated string command = 3;
   */
  command: string[];

  /**
   * Arguments to the entrypoint.
   * The docker image's CMD is used if this is not provided.
   *
   * @generated from field: repeated string args = 4;
   */
  args: string[];

  /**
   * List of environment variables to set in the container.
   *
   * @generated from field: repeated google.cloud.run.v2.EnvVar env = 5;
   */
  env: EnvVar[];

  /**
   * Compute Resource requirements by this container.
   *
   * @generated from field: google.cloud.run.v2.ResourceRequirements resources = 6;
   */
  resources?: ResourceRequirements;

  /**
   * List of ports to expose from the container. Only a single port can be
   * specified. The specified ports must be listening on all interfaces
   * (0.0.0.0) within the container to be accessible.
   *
   * If omitted, a port number will be chosen and passed to the container
   * through the PORT environment variable for the container to listen on.
   *
   * @generated from field: repeated google.cloud.run.v2.ContainerPort ports = 7;
   */
  ports: ContainerPort[];

  /**
   * Volume to mount into the container's filesystem.
   *
   * @generated from field: repeated google.cloud.run.v2.VolumeMount volume_mounts = 8;
   */
  volumeMounts: VolumeMount[];

  /**
   * Container's working directory.
   * If not specified, the container runtime's default will be used, which
   * might be configured in the container image.
   *
   * @generated from field: string working_dir = 9;
   */
  workingDir: string;

  /**
   * Periodic probe of container liveness.
   * Container will be restarted if the probe fails.
   *
   * @generated from field: google.cloud.run.v2.Probe liveness_probe = 10;
   */
  livenessProbe?: Probe;

  /**
   * Startup probe of application within the container.
   * All other probes are disabled if a startup probe is provided, until it
   * succeeds. Container will not be added to service endpoints if the probe
   * fails.
   *
   * @generated from field: google.cloud.run.v2.Probe startup_probe = 11;
   */
  startupProbe?: Probe;

  /**
   * Names of the containers that must start before this container.
   *
   * @generated from field: repeated string depends_on = 12;
   */
  dependsOn: string[];
};

/**
 * Describes the message google.cloud.run.v2.Container.
 * Use `create(ContainerSchema)` to create a new message.
 */
export const ContainerSchema: GenMessage<Container> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 0);

/**
 * ResourceRequirements describes the compute resource requirements.
 *
 * @generated from message google.cloud.run.v2.ResourceRequirements
 */
export type ResourceRequirements = Message<"google.cloud.run.v2.ResourceRequirements"> & {
  /**
   * Only `memory` and `cpu` keys in the map are supported.
   *
   * <p>Notes:
   *  * The only supported values for CPU are '1', '2', '4', and '8'. Setting 4
   * CPU requires at least 2Gi of memory. For more information, go to
   * https://cloud.google.com/run/docs/configuring/cpu.
   *   * For supported 'memory' values and syntax, go to
   *  https://cloud.google.com/run/docs/configuring/memory-limits
   *
   * @generated from field: map<string, string> limits = 1;
   */
  limits: { [key: string]: string };

  /**
   * Determines whether CPU is only allocated during requests (true by default).
   * However, if ResourceRequirements is set, the caller must explicitly
   * set this field to true to preserve the default behavior.
   *
   * @generated from field: bool cpu_idle = 2;
   */
  cpuIdle: boolean;

  /**
   * Determines whether CPU should be boosted on startup of a new container
   * instance above the requested CPU threshold, this can help reduce cold-start
   * latency.
   *
   * @generated from field: bool startup_cpu_boost = 3;
   */
  startupCpuBoost: boolean;
};

/**
 * Describes the message google.cloud.run.v2.ResourceRequirements.
 * Use `create(ResourceRequirementsSchema)` to create a new message.
 */
export const ResourceRequirementsSchema: GenMessage<ResourceRequirements> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 1);

/**
 * EnvVar represents an environment variable present in a Container.
 *
 * @generated from message google.cloud.run.v2.EnvVar
 */
export type EnvVar = Message<"google.cloud.run.v2.EnvVar"> & {
  /**
   * Required. Name of the environment variable. Must not exceed 32768
   * characters.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof google.cloud.run.v2.EnvVar.values
   */
  values: {
    /**
     * Variable references $(VAR_NAME) are expanded
     * using the previous defined environment variables in the container and
     * any route environment variables. If a variable cannot be resolved,
     * the reference in the input string will be unchanged. The $(VAR_NAME)
     * syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
     * references will never be expanded, regardless of whether the variable
     * exists or not.
     * Defaults to "", and the maximum length is 32768 bytes.
     *
     * @generated from field: string value = 2;
     */
    value: string;
    case: "value";
  } | {
    /**
     * Source for the environment variable's value.
     *
     * @generated from field: google.cloud.run.v2.EnvVarSource value_source = 3;
     */
    value: EnvVarSource;
    case: "valueSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.run.v2.EnvVar.
 * Use `create(EnvVarSchema)` to create a new message.
 */
export const EnvVarSchema: GenMessage<EnvVar> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 2);

/**
 * EnvVarSource represents a source for the value of an EnvVar.
 *
 * @generated from message google.cloud.run.v2.EnvVarSource
 */
export type EnvVarSource = Message<"google.cloud.run.v2.EnvVarSource"> & {
  /**
   * Selects a secret and a specific version from Cloud Secret Manager.
   *
   * @generated from field: google.cloud.run.v2.SecretKeySelector secret_key_ref = 1;
   */
  secretKeyRef?: SecretKeySelector;
};

/**
 * Describes the message google.cloud.run.v2.EnvVarSource.
 * Use `create(EnvVarSourceSchema)` to create a new message.
 */
export const EnvVarSourceSchema: GenMessage<EnvVarSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 3);

/**
 * SecretEnvVarSource represents a source for the value of an EnvVar.
 *
 * @generated from message google.cloud.run.v2.SecretKeySelector
 */
export type SecretKeySelector = Message<"google.cloud.run.v2.SecretKeySelector"> & {
  /**
   * Required. The name of the secret in Cloud Secret Manager.
   * Format: {secret_name} if the secret is in the same project.
   * projects/{project}/secrets/{secret_name} if the secret is
   * in a different project.
   *
   * @generated from field: string secret = 1;
   */
  secret: string;

  /**
   * The Cloud Secret Manager secret version.
   * Can be 'latest' for the latest version, an integer for a specific version,
   * or a version alias.
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message google.cloud.run.v2.SecretKeySelector.
 * Use `create(SecretKeySelectorSchema)` to create a new message.
 */
export const SecretKeySelectorSchema: GenMessage<SecretKeySelector> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 4);

/**
 * ContainerPort represents a network port in a single container.
 *
 * @generated from message google.cloud.run.v2.ContainerPort
 */
export type ContainerPort = Message<"google.cloud.run.v2.ContainerPort"> & {
  /**
   * If specified, used to specify which protocol to use.
   * Allowed values are "http1" and "h2c".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Port number the container listens on.
   * This must be a valid TCP port number, 0 < container_port < 65536.
   *
   * @generated from field: int32 container_port = 3;
   */
  containerPort: number;
};

/**
 * Describes the message google.cloud.run.v2.ContainerPort.
 * Use `create(ContainerPortSchema)` to create a new message.
 */
export const ContainerPortSchema: GenMessage<ContainerPort> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 5);

/**
 * VolumeMount describes a mounting of a Volume within a container.
 *
 * @generated from message google.cloud.run.v2.VolumeMount
 */
export type VolumeMount = Message<"google.cloud.run.v2.VolumeMount"> & {
  /**
   * Required. This must match the Name of a Volume.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Path within the container at which the volume should be mounted.
   * Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must
   * otherwise be `/cloudsql`. All instances defined in the Volume will be
   * available as `/cloudsql/[instance]`. For more information on Cloud SQL
   * volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run
   *
   * @generated from field: string mount_path = 3;
   */
  mountPath: string;
};

/**
 * Describes the message google.cloud.run.v2.VolumeMount.
 * Use `create(VolumeMountSchema)` to create a new message.
 */
export const VolumeMountSchema: GenMessage<VolumeMount> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 6);

/**
 * Volume represents a named volume in a container.
 *
 * @generated from message google.cloud.run.v2.Volume
 */
export type Volume = Message<"google.cloud.run.v2.Volume"> & {
  /**
   * Required. Volume's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof google.cloud.run.v2.Volume.volume_type
   */
  volumeType: {
    /**
     * Secret represents a secret that should populate this volume.
     *
     * @generated from field: google.cloud.run.v2.SecretVolumeSource secret = 2;
     */
    value: SecretVolumeSource;
    case: "secret";
  } | {
    /**
     * For Cloud SQL volumes, contains the specific instances that should be
     * mounted. Visit https://cloud.google.com/sql/docs/mysql/connect-run for
     * more information on how to connect Cloud SQL and Cloud Run.
     *
     * @generated from field: google.cloud.run.v2.CloudSqlInstance cloud_sql_instance = 3;
     */
    value: CloudSqlInstance;
    case: "cloudSqlInstance";
  } | {
    /**
     * Ephemeral storage used as a shared volume.
     *
     * @generated from field: google.cloud.run.v2.EmptyDirVolumeSource empty_dir = 4;
     */
    value: EmptyDirVolumeSource;
    case: "emptyDir";
  } | {
    /**
     * For NFS Voumes, contains the path to the nfs Volume
     *
     * @generated from field: google.cloud.run.v2.NFSVolumeSource nfs = 5;
     */
    value: NFSVolumeSource;
    case: "nfs";
  } | {
    /**
     * Persistent storage backed by a Google Cloud Storage bucket.
     *
     * @generated from field: google.cloud.run.v2.GCSVolumeSource gcs = 6;
     */
    value: GCSVolumeSource;
    case: "gcs";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.run.v2.Volume.
 * Use `create(VolumeSchema)` to create a new message.
 */
export const VolumeSchema: GenMessage<Volume> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 7);

/**
 * The secret's value will be presented as the content of a file whose
 * name is defined in the item path. If no items are defined, the name of
 * the file is the secret.
 *
 * @generated from message google.cloud.run.v2.SecretVolumeSource
 */
export type SecretVolumeSource = Message<"google.cloud.run.v2.SecretVolumeSource"> & {
  /**
   * Required. The name of the secret in Cloud Secret Manager.
   * Format: {secret} if the secret is in the same project.
   * projects/{project}/secrets/{secret} if the secret is
   * in a different project.
   *
   * @generated from field: string secret = 1;
   */
  secret: string;

  /**
   * If unspecified, the volume will expose a file whose name is the
   * secret, relative to VolumeMount.mount_path.
   * If specified, the key will be used as the version to fetch from Cloud
   * Secret Manager and the path will be the name of the file exposed in the
   * volume. When items are defined, they must specify a path and a version.
   *
   * @generated from field: repeated google.cloud.run.v2.VersionToPath items = 2;
   */
  items: VersionToPath[];

  /**
   * Integer representation of mode bits to use on created files by default.
   * Must be a value between 0000 and 0777 (octal), defaulting to 0444.
   * Directories within the path are not affected by  this setting.
   *
   * Notes
   *
   * * Internally, a umask of 0222 will be applied to any non-zero value.
   * * This is an integer representation of the mode bits. So, the octal
   * integer value should look exactly as the chmod numeric notation with a
   * leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or
   * 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or
   * 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493
   * (base-10).
   * * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and the result can be other mode bits set.
   *
   * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and as a result, other mode bits could be set.
   *
   * @generated from field: int32 default_mode = 3;
   */
  defaultMode: number;
};

/**
 * Describes the message google.cloud.run.v2.SecretVolumeSource.
 * Use `create(SecretVolumeSourceSchema)` to create a new message.
 */
export const SecretVolumeSourceSchema: GenMessage<SecretVolumeSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 8);

/**
 * VersionToPath maps a specific version of a secret to a relative file to mount
 * to, relative to VolumeMount's mount_path.
 *
 * @generated from message google.cloud.run.v2.VersionToPath
 */
export type VersionToPath = Message<"google.cloud.run.v2.VersionToPath"> & {
  /**
   * Required. The relative path of the secret in the container.
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * The Cloud Secret Manager secret version.
   * Can be 'latest' for the latest value, or an integer or a secret alias for a
   * specific version.
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Integer octal mode bits to use on this file, must be a value between
   * 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be
   * used.
   *
   * Notes
   *
   * * Internally, a umask of 0222 will be applied to any non-zero value.
   * * This is an integer representation of the mode bits. So, the octal
   * integer value should look exactly as the chmod numeric notation with a
   * leading zero. Some examples: for chmod 777 (a=rwx), set to 0777 (octal) or
   * 511 (base-10). For chmod 640 (u=rw,g=r), set to 0640 (octal) or
   * 416 (base-10). For chmod 755 (u=rwx,g=rx,o=rx), set to 0755 (octal) or 493
   * (base-10).
   * * This might be in conflict with other options that affect the
   * file mode, like fsGroup, and the result can be other mode bits set.
   *
   * @generated from field: int32 mode = 3;
   */
  mode: number;
};

/**
 * Describes the message google.cloud.run.v2.VersionToPath.
 * Use `create(VersionToPathSchema)` to create a new message.
 */
export const VersionToPathSchema: GenMessage<VersionToPath> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 9);

/**
 * Represents a set of Cloud SQL instances. Each one will be available under
 * /cloudsql/[instance]. Visit
 * https://cloud.google.com/sql/docs/mysql/connect-run for more information on
 * how to connect Cloud SQL and Cloud Run.
 *
 * @generated from message google.cloud.run.v2.CloudSqlInstance
 */
export type CloudSqlInstance = Message<"google.cloud.run.v2.CloudSqlInstance"> & {
  /**
   * The Cloud SQL instance connection names, as can be found in
   * https://console.cloud.google.com/sql/instances. Visit
   * https://cloud.google.com/sql/docs/mysql/connect-run for more information on
   * how to connect Cloud SQL and Cloud Run. Format:
   * {project}:{location}:{instance}
   *
   * @generated from field: repeated string instances = 1;
   */
  instances: string[];
};

/**
 * Describes the message google.cloud.run.v2.CloudSqlInstance.
 * Use `create(CloudSqlInstanceSchema)` to create a new message.
 */
export const CloudSqlInstanceSchema: GenMessage<CloudSqlInstance> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 10);

/**
 * In memory (tmpfs) ephemeral storage.
 * It is ephemeral in the sense that when the sandbox is taken down, the data is
 * destroyed with it (it does not persist across sandbox runs).
 *
 * @generated from message google.cloud.run.v2.EmptyDirVolumeSource
 */
export type EmptyDirVolumeSource = Message<"google.cloud.run.v2.EmptyDirVolumeSource"> & {
  /**
   * The medium on which the data is stored. Acceptable values today is only
   * MEMORY or none. When none, the default will currently be backed by memory
   * but could change over time. +optional
   *
   * @generated from field: google.cloud.run.v2.EmptyDirVolumeSource.Medium medium = 1;
   */
  medium: EmptyDirVolumeSource_Medium;

  /**
   * Limit on the storage usable by this EmptyDir volume.
   * The size limit is also applicable for memory medium.
   * The maximum usage on memory medium EmptyDir would be the minimum value
   * between the SizeLimit specified here and the sum of memory limits of all
   * containers. The default is nil which means that the limit is undefined.
   * More info:
   * https://cloud.google.com/run/docs/configuring/in-memory-volumes#configure-volume.
   * Info in Kubernetes:
   * https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
   *
   * @generated from field: string size_limit = 2;
   */
  sizeLimit: string;
};

/**
 * Describes the message google.cloud.run.v2.EmptyDirVolumeSource.
 * Use `create(EmptyDirVolumeSourceSchema)` to create a new message.
 */
export const EmptyDirVolumeSourceSchema: GenMessage<EmptyDirVolumeSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 11);

/**
 * The different types of medium supported for EmptyDir.
 *
 * @generated from enum google.cloud.run.v2.EmptyDirVolumeSource.Medium
 */
export enum EmptyDirVolumeSource_Medium {
  /**
   * When not specified, falls back to the default implementation which
   * is currently in memory (this may change over time).
   *
   * @generated from enum value: MEDIUM_UNSPECIFIED = 0;
   */
  MEDIUM_UNSPECIFIED = 0,

  /**
   * Explicitly set the EmptyDir to be in memory. Uses tmpfs.
   *
   * @generated from enum value: MEMORY = 1;
   */
  MEMORY = 1,
}

/**
 * Describes the enum google.cloud.run.v2.EmptyDirVolumeSource.Medium.
 */
export const EmptyDirVolumeSource_MediumSchema: GenEnum<EmptyDirVolumeSource_Medium> = /*@__PURE__*/
  enumDesc(file_google_cloud_run_v2_k8s_min, 11, 0);

/**
 * Represents an NFS mount.
 *
 * @generated from message google.cloud.run.v2.NFSVolumeSource
 */
export type NFSVolumeSource = Message<"google.cloud.run.v2.NFSVolumeSource"> & {
  /**
   * Hostname or IP address of the NFS server
   *
   * @generated from field: string server = 1;
   */
  server: string;

  /**
   * Path that is exported by the NFS server.
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * If true, the volume will be mounted as read only for all mounts.
   *
   * @generated from field: bool read_only = 3;
   */
  readOnly: boolean;
};

/**
 * Describes the message google.cloud.run.v2.NFSVolumeSource.
 * Use `create(NFSVolumeSourceSchema)` to create a new message.
 */
export const NFSVolumeSourceSchema: GenMessage<NFSVolumeSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 12);

/**
 * Represents a volume backed by a Cloud Storage bucket using Cloud Storage
 * FUSE.
 *
 * @generated from message google.cloud.run.v2.GCSVolumeSource
 */
export type GCSVolumeSource = Message<"google.cloud.run.v2.GCSVolumeSource"> & {
  /**
   * Cloud Storage Bucket name.
   *
   * @generated from field: string bucket = 1;
   */
  bucket: string;

  /**
   * If true, the volume will be mounted as read only for all mounts.
   *
   * @generated from field: bool read_only = 2;
   */
  readOnly: boolean;
};

/**
 * Describes the message google.cloud.run.v2.GCSVolumeSource.
 * Use `create(GCSVolumeSourceSchema)` to create a new message.
 */
export const GCSVolumeSourceSchema: GenMessage<GCSVolumeSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 13);

/**
 * Probe describes a health check to be performed against a container to
 * determine whether it is alive or ready to receive traffic.
 *
 * @generated from message google.cloud.run.v2.Probe
 */
export type Probe = Message<"google.cloud.run.v2.Probe"> & {
  /**
   * Optional. Number of seconds after the container has started before the
   * probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum
   * value for liveness probe is 3600. Maximum value for startup probe is 240.
   *
   * @generated from field: int32 initial_delay_seconds = 1;
   */
  initialDelaySeconds: number;

  /**
   * Optional. Number of seconds after which the probe times out.
   * Defaults to 1 second. Minimum value is 1. Maximum value is 3600.
   * Must be smaller than period_seconds.
   *
   * @generated from field: int32 timeout_seconds = 2;
   */
  timeoutSeconds: number;

  /**
   * Optional. How often (in seconds) to perform the probe.
   * Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe
   * is 3600. Maximum value for startup probe is 240.
   * Must be greater or equal than timeout_seconds.
   *
   * @generated from field: int32 period_seconds = 3;
   */
  periodSeconds: number;

  /**
   * Optional. Minimum consecutive failures for the probe to be considered
   * failed after having succeeded. Defaults to 3. Minimum value is 1.
   *
   * @generated from field: int32 failure_threshold = 4;
   */
  failureThreshold: number;

  /**
   * @generated from oneof google.cloud.run.v2.Probe.probe_type
   */
  probeType: {
    /**
     * Optional. HTTPGet specifies the http request to perform.
     * Exactly one of httpGet, tcpSocket, or grpc must be specified.
     *
     * @generated from field: google.cloud.run.v2.HTTPGetAction http_get = 5;
     */
    value: HTTPGetAction;
    case: "httpGet";
  } | {
    /**
     * Optional. TCPSocket specifies an action involving a TCP port.
     * Exactly one of httpGet, tcpSocket, or grpc must be specified.
     *
     * @generated from field: google.cloud.run.v2.TCPSocketAction tcp_socket = 6;
     */
    value: TCPSocketAction;
    case: "tcpSocket";
  } | {
    /**
     * Optional. GRPC specifies an action involving a gRPC port.
     * Exactly one of httpGet, tcpSocket, or grpc must be specified.
     *
     * @generated from field: google.cloud.run.v2.GRPCAction grpc = 7;
     */
    value: GRPCAction;
    case: "grpc";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.run.v2.Probe.
 * Use `create(ProbeSchema)` to create a new message.
 */
export const ProbeSchema: GenMessage<Probe> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 14);

/**
 * HTTPGetAction describes an action based on HTTP Get requests.
 *
 * @generated from message google.cloud.run.v2.HTTPGetAction
 */
export type HTTPGetAction = Message<"google.cloud.run.v2.HTTPGetAction"> & {
  /**
   * Optional. Path to access on the HTTP server. Defaults to '/'.
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * Optional. Custom headers to set in the request. HTTP allows repeated
   * headers.
   *
   * @generated from field: repeated google.cloud.run.v2.HTTPHeader http_headers = 4;
   */
  httpHeaders: HTTPHeader[];

  /**
   * Optional. Port number to access on the container. Must be in the range 1 to
   * 65535. If not specified, defaults to the exposed port of the container,
   * which is the value of container.ports[0].containerPort.
   *
   * @generated from field: int32 port = 5;
   */
  port: number;
};

/**
 * Describes the message google.cloud.run.v2.HTTPGetAction.
 * Use `create(HTTPGetActionSchema)` to create a new message.
 */
export const HTTPGetActionSchema: GenMessage<HTTPGetAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 15);

/**
 * HTTPHeader describes a custom header to be used in HTTP probes
 *
 * @generated from message google.cloud.run.v2.HTTPHeader
 */
export type HTTPHeader = Message<"google.cloud.run.v2.HTTPHeader"> & {
  /**
   * Required. The header field name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The header field value
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.cloud.run.v2.HTTPHeader.
 * Use `create(HTTPHeaderSchema)` to create a new message.
 */
export const HTTPHeaderSchema: GenMessage<HTTPHeader> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 16);

/**
 * TCPSocketAction describes an action based on opening a socket
 *
 * @generated from message google.cloud.run.v2.TCPSocketAction
 */
export type TCPSocketAction = Message<"google.cloud.run.v2.TCPSocketAction"> & {
  /**
   * Optional. Port number to access on the container. Must be in the range 1 to
   * 65535. If not specified, defaults to the exposed port of the container,
   * which is the value of container.ports[0].containerPort.
   *
   * @generated from field: int32 port = 1;
   */
  port: number;
};

/**
 * Describes the message google.cloud.run.v2.TCPSocketAction.
 * Use `create(TCPSocketActionSchema)` to create a new message.
 */
export const TCPSocketActionSchema: GenMessage<TCPSocketAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 17);

/**
 * GRPCAction describes an action involving a GRPC port.
 *
 * @generated from message google.cloud.run.v2.GRPCAction
 */
export type GRPCAction = Message<"google.cloud.run.v2.GRPCAction"> & {
  /**
   * Optional. Port number of the gRPC service. Number must be in the range 1 to
   * 65535. If not specified, defaults to the exposed port of the container,
   * which is the value of container.ports[0].containerPort.
   *
   * @generated from field: int32 port = 1;
   */
  port: number;

  /**
   * Optional. Service is the name of the service to place in the gRPC
   * HealthCheckRequest (see
   * https://github.com/grpc/grpc/blob/master/doc/health-checking.md ). If this
   * is not specified, the default behavior is defined by gRPC.
   *
   * @generated from field: string service = 2;
   */
  service: string;
};

/**
 * Describes the message google.cloud.run.v2.GRPCAction.
 * Use `create(GRPCActionSchema)` to create a new message.
 */
export const GRPCActionSchema: GenMessage<GRPCAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_run_v2_k8s_min, 18);

