// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/iot/v1/resources.proto (package google.cloud.iot.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/iot/v1/resources.proto.
 */
export const file_google_cloud_iot_v1_resources: GenFile = /*@__PURE__*/
  fileDesc("CiNnb29nbGUvY2xvdWQvaW90L3YxL3Jlc291cmNlcy5wcm90bxITZ29vZ2xlLmNsb3VkLmlvdC52MSKwBwoGRGV2aWNlEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDgoGbnVtX2lkGAMgASgEEjoKC2NyZWRlbnRpYWxzGAwgAygLMiUuZ29vZ2xlLmNsb3VkLmlvdC52MS5EZXZpY2VDcmVkZW50aWFsEjcKE2xhc3RfaGVhcnRiZWF0X3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKD2xhc3RfZXZlbnRfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMwoPbGFzdF9zdGF0ZV90aW1lGBQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI4ChRsYXN0X2NvbmZpZ19hY2tfdGltZRgOIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOQoVbGFzdF9jb25maWdfc2VuZF90aW1lGBIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdibG9ja2VkGBMgASgIEjMKD2xhc3RfZXJyb3JfdGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoRbGFzdF9lcnJvcl9zdGF0dXMYCyABKAsyEi5nb29nbGUucnBjLlN0YXR1cxIxCgZjb25maWcYDSABKAsyIS5nb29nbGUuY2xvdWQuaW90LnYxLkRldmljZUNvbmZpZxIvCgVzdGF0ZRgQIAEoCzIgLmdvb2dsZS5jbG91ZC5pb3QudjEuRGV2aWNlU3RhdGUSMAoJbG9nX2xldmVsGBUgASgOMh0uZ29vZ2xlLmNsb3VkLmlvdC52MS5Mb2dMZXZlbBI7CghtZXRhZGF0YRgRIAMoCzIpLmdvb2dsZS5jbG91ZC5pb3QudjEuRGV2aWNlLk1ldGFkYXRhRW50cnkSOgoOZ2F0ZXdheV9jb25maWcYGCABKAsyIi5nb29nbGUuY2xvdWQuaW90LnYxLkdhdGV3YXlDb25maWcaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBOnPqQXAKHmNsb3VkaW90Lmdvb2dsZWFwaXMuY29tL0RldmljZRJOcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3JlZ2lzdHJpZXMve3JlZ2lzdHJ5fS9kZXZpY2VzL3tkZXZpY2V9Iu4BCg1HYXRld2F5Q29uZmlnEjYKDGdhdGV3YXlfdHlwZRgBIAEoDjIgLmdvb2dsZS5jbG91ZC5pb3QudjEuR2F0ZXdheVR5cGUSQwoTZ2F0ZXdheV9hdXRoX21ldGhvZBgCIAEoDjImLmdvb2dsZS5jbG91ZC5pb3QudjEuR2F0ZXdheUF1dGhNZXRob2QSIAoYbGFzdF9hY2Nlc3NlZF9nYXRld2F5X2lkGAMgASgJEj4KGmxhc3RfYWNjZXNzZWRfZ2F0ZXdheV90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCKPBAoORGV2aWNlUmVnaXN0cnkSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRJQChpldmVudF9ub3RpZmljYXRpb25fY29uZmlncxgKIAMoCzIsLmdvb2dsZS5jbG91ZC5pb3QudjEuRXZlbnROb3RpZmljYXRpb25Db25maWcSTwoZc3RhdGVfbm90aWZpY2F0aW9uX2NvbmZpZxgHIAEoCzIsLmdvb2dsZS5jbG91ZC5pb3QudjEuU3RhdGVOb3RpZmljYXRpb25Db25maWcSNAoLbXF0dF9jb25maWcYBCABKAsyHy5nb29nbGUuY2xvdWQuaW90LnYxLk1xdHRDb25maWcSNAoLaHR0cF9jb25maWcYCSABKAsyHy5nb29nbGUuY2xvdWQuaW90LnYxLkh0dHBDb25maWcSMAoJbG9nX2xldmVsGAsgASgOMh0uZ29vZ2xlLmNsb3VkLmlvdC52MS5Mb2dMZXZlbBI8CgtjcmVkZW50aWFscxgIIAMoCzInLmdvb2dsZS5jbG91ZC5pb3QudjEuUmVnaXN0cnlDcmVkZW50aWFsOmTqQWEKIGNsb3VkaW90Lmdvb2dsZWFwaXMuY29tL1JlZ2lzdHJ5Ej1wcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vcmVnaXN0cmllcy97cmVnaXN0cnl9IkgKCk1xdHRDb25maWcSOgoSbXF0dF9lbmFibGVkX3N0YXRlGAEgASgOMh4uZ29vZ2xlLmNsb3VkLmlvdC52MS5NcXR0U3RhdGUiSAoKSHR0cENvbmZpZxI6ChJodHRwX2VuYWJsZWRfc3RhdGUYASABKA4yHi5nb29nbGUuY2xvdWQuaW90LnYxLkh0dHBTdGF0ZSJPChdFdmVudE5vdGlmaWNhdGlvbkNvbmZpZxIZChFzdWJmb2xkZXJfbWF0Y2hlcxgCIAEoCRIZChFwdWJzdWJfdG9waWNfbmFtZRgBIAEoCSI0ChdTdGF0ZU5vdGlmaWNhdGlvbkNvbmZpZxIZChFwdWJzdWJfdG9waWNfbmFtZRgBIAEoCSJvChJSZWdpc3RyeUNyZWRlbnRpYWwSSwoWcHVibGljX2tleV9jZXJ0aWZpY2F0ZRgBIAEoCzIpLmdvb2dsZS5jbG91ZC5pb3QudjEuUHVibGljS2V5Q2VydGlmaWNhdGVIAEIMCgpjcmVkZW50aWFsItABChZYNTA5Q2VydGlmaWNhdGVEZXRhaWxzEg4KBmlzc3VlchgBIAEoCRIPCgdzdWJqZWN0GAIgASgJEi4KCnN0YXJ0X3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi8KC2V4cGlyeV90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIbChNzaWduYXR1cmVfYWxnb3JpdGhtGAUgASgJEhcKD3B1YmxpY19rZXlfdHlwZRgGIAEoCSKvAQoUUHVibGljS2V5Q2VydGlmaWNhdGUSPwoGZm9ybWF0GAEgASgOMi8uZ29vZ2xlLmNsb3VkLmlvdC52MS5QdWJsaWNLZXlDZXJ0aWZpY2F0ZUZvcm1hdBITCgtjZXJ0aWZpY2F0ZRgCIAEoCRJBCgx4NTA5X2RldGFpbHMYAyABKAsyKy5nb29nbGUuY2xvdWQuaW90LnYxLlg1MDlDZXJ0aWZpY2F0ZURldGFpbHMilQEKEERldmljZUNyZWRlbnRpYWwSPgoKcHVibGljX2tleRgCIAEoCzIoLmdvb2dsZS5jbG91ZC5pb3QudjEuUHVibGljS2V5Q3JlZGVudGlhbEgAEjMKD2V4cGlyYXRpb25fdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDAoKY3JlZGVudGlhbCJYChNQdWJsaWNLZXlDcmVkZW50aWFsEjQKBmZvcm1hdBgBIAEoDjIkLmdvb2dsZS5jbG91ZC5pb3QudjEuUHVibGljS2V5Rm9ybWF0EgsKA2tleRgCIAEoCSKgAQoMRGV2aWNlQ29uZmlnEg8KB3ZlcnNpb24YASABKAMSNQoRY2xvdWRfdXBkYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKD2RldmljZV9hY2tfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLYmluYXJ5X2RhdGEYBCABKAwiUwoLRGV2aWNlU3RhdGUSLwoLdXBkYXRlX3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC2JpbmFyeV9kYXRhGAIgASgMKkwKCU1xdHRTdGF0ZRIaChZNUVRUX1NUQVRFX1VOU1BFQ0lGSUVEEAASEAoMTVFUVF9FTkFCTEVEEAESEQoNTVFUVF9ESVNBQkxFRBACKkwKCUh0dHBTdGF0ZRIaChZIVFRQX1NUQVRFX1VOU1BFQ0lGSUVEEAASEAoMSFRUUF9FTkFCTEVEEAESEQoNSFRUUF9ESVNBQkxFRBACKk8KCExvZ0xldmVsEhkKFUxPR19MRVZFTF9VTlNQRUNJRklFRBAAEggKBE5PTkUQChIJCgVFUlJPUhAUEggKBElORk8QHhIJCgVERUJVRxAoKkkKC0dhdGV3YXlUeXBlEhwKGEdBVEVXQVlfVFlQRV9VTlNQRUNJRklFRBAAEgsKB0dBVEVXQVkQARIPCgtOT05fR0FURVdBWRACKpEBChFHYXRld2F5QXV0aE1ldGhvZBIjCh9HQVRFV0FZX0FVVEhfTUVUSE9EX1VOU1BFQ0lGSUVEEAASFAoQQVNTT0NJQVRJT05fT05MWRABEhoKFkRFVklDRV9BVVRIX1RPS0VOX09OTFkQAhIlCiFBU1NPQ0lBVElPTl9BTkRfREVWSUNFX0FVVEhfVE9LRU4QAyplChpQdWJsaWNLZXlDZXJ0aWZpY2F0ZUZvcm1hdBItCilVTlNQRUNJRklFRF9QVUJMSUNfS0VZX0NFUlRJRklDQVRFX0ZPUk1BVBAAEhgKFFg1MDlfQ0VSVElGSUNBVEVfUEVNEAEqdgoPUHVibGljS2V5Rm9ybWF0EiEKHVVOU1BFQ0lGSUVEX1BVQkxJQ19LRVlfRk9STUFUEAASCwoHUlNBX1BFTRADEhAKDFJTQV9YNTA5X1BFTRABEg0KCUVTMjU2X1BFTRACEhIKDkVTMjU2X1g1MDlfUEVNEARCWQoXY29tLmdvb2dsZS5jbG91ZC5pb3QudjFCDlJlc291cmNlc1Byb3RvUAFaKWNsb3VkLmdvb2dsZS5jb20vZ28vaW90L2FwaXYxL2lvdHBiO2lvdHBi+AEBYgZwcm90bzM", [file_google_api_resource, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * The device resource.
 *
 * @generated from message google.cloud.iot.v1.Device
 */
export type Device = Message<"google.cloud.iot.v1.Device"> & {
  /**
   * The user-defined device identifier. The device ID must be unique
   * within a device registry.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The resource path name. For example,
   * `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or
   * `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`.
   * When `name` is populated as a response from the service, it always ends
   * in the device numeric ID.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * [Output only] A server-defined unique numeric ID for the device. This is a
   * more compact way to identify devices, and it is globally unique.
   *
   * @generated from field: uint64 num_id = 3;
   */
  numId: bigint;

  /**
   * The credentials used to authenticate this device. To allow credential
   * rotation without interruption, multiple device credentials can be bound to
   * this device. No more than 3 credentials can be bound to a single device at
   * a time. When new credentials are added to a device, they are verified
   * against the registry credentials. For details, see the description of the
   * `DeviceRegistry.credentials` field.
   *
   * @generated from field: repeated google.cloud.iot.v1.DeviceCredential credentials = 12;
   */
  credentials: DeviceCredential[];

  /**
   * [Output only] The last time an MQTT `PINGREQ` was received. This field
   * applies only to devices connecting through MQTT. MQTT clients usually only
   * send `PINGREQ` messages if the connection is idle, and no other messages
   * have been sent. Timestamps are periodically collected and written to
   * storage; they may be stale by a few minutes.
   *
   * @generated from field: google.protobuf.Timestamp last_heartbeat_time = 7;
   */
  lastHeartbeatTime?: Timestamp;

  /**
   * [Output only] The last time a telemetry event was received. Timestamps are
   * periodically collected and written to storage; they may be stale by a few
   * minutes.
   *
   * @generated from field: google.protobuf.Timestamp last_event_time = 8;
   */
  lastEventTime?: Timestamp;

  /**
   * [Output only] The last time a state event was received. Timestamps are
   * periodically collected and written to storage; they may be stale by a few
   * minutes.
   *
   * @generated from field: google.protobuf.Timestamp last_state_time = 20;
   */
  lastStateTime?: Timestamp;

  /**
   * [Output only] The last time a cloud-to-device config version acknowledgment
   * was received from the device. This field is only for configurations
   * sent through MQTT.
   *
   * @generated from field: google.protobuf.Timestamp last_config_ack_time = 14;
   */
  lastConfigAckTime?: Timestamp;

  /**
   * [Output only] The last time a cloud-to-device config version was sent to
   * the device.
   *
   * @generated from field: google.protobuf.Timestamp last_config_send_time = 18;
   */
  lastConfigSendTime?: Timestamp;

  /**
   * If a device is blocked, connections or requests from this device will fail.
   * Can be used to temporarily prevent the device from connecting if, for
   * example, the sensor is generating bad data and needs maintenance.
   *
   * @generated from field: bool blocked = 19;
   */
  blocked: boolean;

  /**
   * [Output only] The time the most recent error occurred, such as a failure to
   * publish to Cloud Pub/Sub. This field is the timestamp of
   * 'last_error_status'.
   *
   * @generated from field: google.protobuf.Timestamp last_error_time = 10;
   */
  lastErrorTime?: Timestamp;

  /**
   * [Output only] The error message of the most recent error, such as a failure
   * to publish to Cloud Pub/Sub. 'last_error_time' is the timestamp of this
   * field. If no errors have occurred, this field has an empty message
   * and the status code 0 == OK. Otherwise, this field is expected to have a
   * status code other than OK.
   *
   * @generated from field: google.rpc.Status last_error_status = 11;
   */
  lastErrorStatus?: Status;

  /**
   * The most recent device configuration, which is eventually sent from
   * Cloud IoT Core to the device. If not present on creation, the
   * configuration will be initialized with an empty payload and version value
   * of `1`. To update this field after creation, use the
   * `DeviceManager.ModifyCloudToDeviceConfig` method.
   *
   * @generated from field: google.cloud.iot.v1.DeviceConfig config = 13;
   */
  config?: DeviceConfig;

  /**
   * [Output only] The state most recently received from the device. If no state
   * has been reported, this field is not present.
   *
   * @generated from field: google.cloud.iot.v1.DeviceState state = 16;
   */
  state?: DeviceState;

  /**
   * **Beta Feature**
   *
   * The logging verbosity for device activity. If unspecified,
   * DeviceRegistry.log_level will be used.
   *
   * @generated from field: google.cloud.iot.v1.LogLevel log_level = 21;
   */
  logLevel: LogLevel;

  /**
   * The metadata key-value pairs assigned to the device. This metadata is not
   * interpreted or indexed by Cloud IoT Core. It can be used to add contextual
   * information for the device.
   *
   * Keys must conform to the regular expression [a-zA-Z][a-zA-Z0-9-_.+~%]+ and
   * be less than 128 bytes in length.
   *
   * Values are free-form strings. Each value must be less than or equal to 32
   * KB in size.
   *
   * The total size of all keys and values must be less than 256 KB, and the
   * maximum number of key-value pairs is 500.
   *
   * @generated from field: map<string, string> metadata = 17;
   */
  metadata: { [key: string]: string };

  /**
   * Gateway-related configuration and state.
   *
   * @generated from field: google.cloud.iot.v1.GatewayConfig gateway_config = 24;
   */
  gatewayConfig?: GatewayConfig;
};

/**
 * Describes the message google.cloud.iot.v1.Device.
 * Use `create(DeviceSchema)` to create a new message.
 */
export const DeviceSchema: GenMessage<Device> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 0);

/**
 * Gateway-related configuration and state.
 *
 * @generated from message google.cloud.iot.v1.GatewayConfig
 */
export type GatewayConfig = Message<"google.cloud.iot.v1.GatewayConfig"> & {
  /**
   * Indicates whether the device is a gateway.
   *
   * @generated from field: google.cloud.iot.v1.GatewayType gateway_type = 1;
   */
  gatewayType: GatewayType;

  /**
   * Indicates how to authorize and/or authenticate devices to access the
   * gateway.
   *
   * @generated from field: google.cloud.iot.v1.GatewayAuthMethod gateway_auth_method = 2;
   */
  gatewayAuthMethod: GatewayAuthMethod;

  /**
   * [Output only] The ID of the gateway the device accessed most recently.
   *
   * @generated from field: string last_accessed_gateway_id = 3;
   */
  lastAccessedGatewayId: string;

  /**
   * [Output only] The most recent time at which the device accessed the gateway
   * specified in `last_accessed_gateway`.
   *
   * @generated from field: google.protobuf.Timestamp last_accessed_gateway_time = 4;
   */
  lastAccessedGatewayTime?: Timestamp;
};

/**
 * Describes the message google.cloud.iot.v1.GatewayConfig.
 * Use `create(GatewayConfigSchema)` to create a new message.
 */
export const GatewayConfigSchema: GenMessage<GatewayConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 1);

/**
 * A container for a group of devices.
 *
 * @generated from message google.cloud.iot.v1.DeviceRegistry
 */
export type DeviceRegistry = Message<"google.cloud.iot.v1.DeviceRegistry"> & {
  /**
   * The identifier of this device registry. For example, `myRegistry`.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The resource path name. For example,
   * `projects/example-project/locations/us-central1/registries/my-registry`.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The configuration for notification of telemetry events received from the
   * device. All telemetry events that were successfully published by the
   * device and acknowledged by Cloud IoT Core are guaranteed to be
   * delivered to Cloud Pub/Sub. If multiple configurations match a message,
   * only the first matching configuration is used. If you try to publish a
   * device telemetry event using MQTT without specifying a Cloud Pub/Sub topic
   * for the device's registry, the connection closes automatically. If you try
   * to do so using an HTTP connection, an error is returned. Up to 10
   * configurations may be provided.
   *
   * @generated from field: repeated google.cloud.iot.v1.EventNotificationConfig event_notification_configs = 10;
   */
  eventNotificationConfigs: EventNotificationConfig[];

  /**
   * The configuration for notification of new states received from the device.
   * State updates are guaranteed to be stored in the state history, but
   * notifications to Cloud Pub/Sub are not guaranteed. For example, if
   * permissions are misconfigured or the specified topic doesn't exist, no
   * notification will be published but the state will still be stored in Cloud
   * IoT Core.
   *
   * @generated from field: google.cloud.iot.v1.StateNotificationConfig state_notification_config = 7;
   */
  stateNotificationConfig?: StateNotificationConfig;

  /**
   * The MQTT configuration for this device registry.
   *
   * @generated from field: google.cloud.iot.v1.MqttConfig mqtt_config = 4;
   */
  mqttConfig?: MqttConfig;

  /**
   * The DeviceService (HTTP) configuration for this device registry.
   *
   * @generated from field: google.cloud.iot.v1.HttpConfig http_config = 9;
   */
  httpConfig?: HttpConfig;

  /**
   * **Beta Feature**
   *
   * The default logging verbosity for activity from devices in this registry.
   * The verbosity level can be overridden by Device.log_level.
   *
   * @generated from field: google.cloud.iot.v1.LogLevel log_level = 11;
   */
  logLevel: LogLevel;

  /**
   * The credentials used to verify the device credentials. No more than 10
   * credentials can be bound to a single registry at a time. The verification
   * process occurs at the time of device creation or update. If this field is
   * empty, no verification is performed. Otherwise, the credentials of a newly
   * created device or added credentials of an updated device should be signed
   * with one of these registry credentials.
   *
   * Note, however, that existing devices will never be affected by
   * modifications to this list of credentials: after a device has been
   * successfully created in a registry, it should be able to connect even if
   * its registry credentials are revoked, deleted, or modified.
   *
   * @generated from field: repeated google.cloud.iot.v1.RegistryCredential credentials = 8;
   */
  credentials: RegistryCredential[];
};

/**
 * Describes the message google.cloud.iot.v1.DeviceRegistry.
 * Use `create(DeviceRegistrySchema)` to create a new message.
 */
export const DeviceRegistrySchema: GenMessage<DeviceRegistry> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 2);

/**
 * The configuration of MQTT for a device registry.
 *
 * @generated from message google.cloud.iot.v1.MqttConfig
 */
export type MqttConfig = Message<"google.cloud.iot.v1.MqttConfig"> & {
  /**
   * If enabled, allows connections using the MQTT protocol. Otherwise, MQTT
   * connections to this registry will fail.
   *
   * @generated from field: google.cloud.iot.v1.MqttState mqtt_enabled_state = 1;
   */
  mqttEnabledState: MqttState;
};

/**
 * Describes the message google.cloud.iot.v1.MqttConfig.
 * Use `create(MqttConfigSchema)` to create a new message.
 */
export const MqttConfigSchema: GenMessage<MqttConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 3);

/**
 * The configuration of the HTTP bridge for a device registry.
 *
 * @generated from message google.cloud.iot.v1.HttpConfig
 */
export type HttpConfig = Message<"google.cloud.iot.v1.HttpConfig"> & {
  /**
   * If enabled, allows devices to use DeviceService via the HTTP protocol.
   * Otherwise, any requests to DeviceService will fail for this registry.
   *
   * @generated from field: google.cloud.iot.v1.HttpState http_enabled_state = 1;
   */
  httpEnabledState: HttpState;
};

/**
 * Describes the message google.cloud.iot.v1.HttpConfig.
 * Use `create(HttpConfigSchema)` to create a new message.
 */
export const HttpConfigSchema: GenMessage<HttpConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 4);

/**
 * The configuration for forwarding telemetry events.
 *
 * @generated from message google.cloud.iot.v1.EventNotificationConfig
 */
export type EventNotificationConfig = Message<"google.cloud.iot.v1.EventNotificationConfig"> & {
  /**
   * If the subfolder name matches this string exactly, this configuration will
   * be used. The string must not include the leading '/' character. If empty,
   * all strings are matched. This field is used only for telemetry events;
   * subfolders are not supported for state changes.
   *
   * @generated from field: string subfolder_matches = 2;
   */
  subfolderMatches: string;

  /**
   * A Cloud Pub/Sub topic name. For example,
   * `projects/myProject/topics/deviceEvents`.
   *
   * @generated from field: string pubsub_topic_name = 1;
   */
  pubsubTopicName: string;
};

/**
 * Describes the message google.cloud.iot.v1.EventNotificationConfig.
 * Use `create(EventNotificationConfigSchema)` to create a new message.
 */
export const EventNotificationConfigSchema: GenMessage<EventNotificationConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 5);

/**
 * The configuration for notification of new states received from the device.
 *
 * @generated from message google.cloud.iot.v1.StateNotificationConfig
 */
export type StateNotificationConfig = Message<"google.cloud.iot.v1.StateNotificationConfig"> & {
  /**
   * A Cloud Pub/Sub topic name. For example,
   * `projects/myProject/topics/deviceEvents`.
   *
   * @generated from field: string pubsub_topic_name = 1;
   */
  pubsubTopicName: string;
};

/**
 * Describes the message google.cloud.iot.v1.StateNotificationConfig.
 * Use `create(StateNotificationConfigSchema)` to create a new message.
 */
export const StateNotificationConfigSchema: GenMessage<StateNotificationConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 6);

/**
 * A server-stored registry credential used to validate device credentials.
 *
 * @generated from message google.cloud.iot.v1.RegistryCredential
 */
export type RegistryCredential = Message<"google.cloud.iot.v1.RegistryCredential"> & {
  /**
   * The credential data. Reserved for expansion in the future.
   *
   * @generated from oneof google.cloud.iot.v1.RegistryCredential.credential
   */
  credential: {
    /**
     * A public key certificate used to verify the device credentials.
     *
     * @generated from field: google.cloud.iot.v1.PublicKeyCertificate public_key_certificate = 1;
     */
    value: PublicKeyCertificate;
    case: "publicKeyCertificate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.iot.v1.RegistryCredential.
 * Use `create(RegistryCredentialSchema)` to create a new message.
 */
export const RegistryCredentialSchema: GenMessage<RegistryCredential> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 7);

/**
 * Details of an X.509 certificate. For informational purposes only.
 *
 * @generated from message google.cloud.iot.v1.X509CertificateDetails
 */
export type X509CertificateDetails = Message<"google.cloud.iot.v1.X509CertificateDetails"> & {
  /**
   * The entity that signed the certificate.
   *
   * @generated from field: string issuer = 1;
   */
  issuer: string;

  /**
   * The entity the certificate and public key belong to.
   *
   * @generated from field: string subject = 2;
   */
  subject: string;

  /**
   * The time the certificate becomes valid.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * The time the certificate becomes invalid.
   *
   * @generated from field: google.protobuf.Timestamp expiry_time = 4;
   */
  expiryTime?: Timestamp;

  /**
   * The algorithm used to sign the certificate.
   *
   * @generated from field: string signature_algorithm = 5;
   */
  signatureAlgorithm: string;

  /**
   * The type of public key in the certificate.
   *
   * @generated from field: string public_key_type = 6;
   */
  publicKeyType: string;
};

/**
 * Describes the message google.cloud.iot.v1.X509CertificateDetails.
 * Use `create(X509CertificateDetailsSchema)` to create a new message.
 */
export const X509CertificateDetailsSchema: GenMessage<X509CertificateDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 8);

/**
 * A public key certificate format and data.
 *
 * @generated from message google.cloud.iot.v1.PublicKeyCertificate
 */
export type PublicKeyCertificate = Message<"google.cloud.iot.v1.PublicKeyCertificate"> & {
  /**
   * The certificate format.
   *
   * @generated from field: google.cloud.iot.v1.PublicKeyCertificateFormat format = 1;
   */
  format: PublicKeyCertificateFormat;

  /**
   * The certificate data.
   *
   * @generated from field: string certificate = 2;
   */
  certificate: string;

  /**
   * [Output only] The certificate details. Used only for X.509 certificates.
   *
   * @generated from field: google.cloud.iot.v1.X509CertificateDetails x509_details = 3;
   */
  x509Details?: X509CertificateDetails;
};

/**
 * Describes the message google.cloud.iot.v1.PublicKeyCertificate.
 * Use `create(PublicKeyCertificateSchema)` to create a new message.
 */
export const PublicKeyCertificateSchema: GenMessage<PublicKeyCertificate> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 9);

/**
 * A server-stored device credential used for authentication.
 *
 * @generated from message google.cloud.iot.v1.DeviceCredential
 */
export type DeviceCredential = Message<"google.cloud.iot.v1.DeviceCredential"> & {
  /**
   * The credential data. Reserved for expansion in the future.
   *
   * @generated from oneof google.cloud.iot.v1.DeviceCredential.credential
   */
  credential: {
    /**
     * A public key used to verify the signature of JSON Web Tokens (JWTs).
     * When adding a new device credential, either via device creation or via
     * modifications, this public key credential may be required to be signed by
     * one of the registry level certificates. More specifically, if the
     * registry contains at least one certificate, any new device credential
     * must be signed by one of the registry certificates. As a result,
     * when the registry contains certificates, only X.509 certificates are
     * accepted as device credentials. However, if the registry does
     * not contain a certificate, self-signed certificates and public keys will
     * be accepted. New device credentials must be different from every
     * registry-level certificate.
     *
     * @generated from field: google.cloud.iot.v1.PublicKeyCredential public_key = 2;
     */
    value: PublicKeyCredential;
    case: "publicKey";
  } | { case: undefined; value?: undefined };

  /**
   * [Optional] The time at which this credential becomes invalid. This
   * credential will be ignored for new client authentication requests after
   * this timestamp; however, it will not be automatically deleted.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 6;
   */
  expirationTime?: Timestamp;
};

/**
 * Describes the message google.cloud.iot.v1.DeviceCredential.
 * Use `create(DeviceCredentialSchema)` to create a new message.
 */
export const DeviceCredentialSchema: GenMessage<DeviceCredential> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 10);

/**
 * A public key format and data.
 *
 * @generated from message google.cloud.iot.v1.PublicKeyCredential
 */
export type PublicKeyCredential = Message<"google.cloud.iot.v1.PublicKeyCredential"> & {
  /**
   * The format of the key.
   *
   * @generated from field: google.cloud.iot.v1.PublicKeyFormat format = 1;
   */
  format: PublicKeyFormat;

  /**
   * The key data.
   *
   * @generated from field: string key = 2;
   */
  key: string;
};

/**
 * Describes the message google.cloud.iot.v1.PublicKeyCredential.
 * Use `create(PublicKeyCredentialSchema)` to create a new message.
 */
export const PublicKeyCredentialSchema: GenMessage<PublicKeyCredential> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 11);

/**
 * The device configuration. Eventually delivered to devices.
 *
 * @generated from message google.cloud.iot.v1.DeviceConfig
 */
export type DeviceConfig = Message<"google.cloud.iot.v1.DeviceConfig"> & {
  /**
   * [Output only] The version of this update. The version number is assigned by
   * the server, and is always greater than 0 after device creation. The
   * version must be 0 on the `CreateDevice` request if a `config` is
   * specified; the response of `CreateDevice` will always have a value of 1.
   *
   * @generated from field: int64 version = 1;
   */
  version: bigint;

  /**
   * [Output only] The time at which this configuration version was updated in
   * Cloud IoT Core. This timestamp is set by the server.
   *
   * @generated from field: google.protobuf.Timestamp cloud_update_time = 2;
   */
  cloudUpdateTime?: Timestamp;

  /**
   * [Output only] The time at which Cloud IoT Core received the
   * acknowledgment from the device, indicating that the device has received
   * this configuration version. If this field is not present, the device has
   * not yet acknowledged that it received this version. Note that when
   * the config was sent to the device, many config versions may have been
   * available in Cloud IoT Core while the device was disconnected, and on
   * connection, only the latest version is sent to the device. Some
   * versions may never be sent to the device, and therefore are never
   * acknowledged. This timestamp is set by Cloud IoT Core.
   *
   * @generated from field: google.protobuf.Timestamp device_ack_time = 3;
   */
  deviceAckTime?: Timestamp;

  /**
   * The device configuration data.
   *
   * @generated from field: bytes binary_data = 4;
   */
  binaryData: Uint8Array;
};

/**
 * Describes the message google.cloud.iot.v1.DeviceConfig.
 * Use `create(DeviceConfigSchema)` to create a new message.
 */
export const DeviceConfigSchema: GenMessage<DeviceConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 12);

/**
 * The device state, as reported by the device.
 *
 * @generated from message google.cloud.iot.v1.DeviceState
 */
export type DeviceState = Message<"google.cloud.iot.v1.DeviceState"> & {
  /**
   * [Output only] The time at which this state version was updated in Cloud
   * IoT Core.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 1;
   */
  updateTime?: Timestamp;

  /**
   * The device state data.
   *
   * @generated from field: bytes binary_data = 2;
   */
  binaryData: Uint8Array;
};

/**
 * Describes the message google.cloud.iot.v1.DeviceState.
 * Use `create(DeviceStateSchema)` to create a new message.
 */
export const DeviceStateSchema: GenMessage<DeviceState> = /*@__PURE__*/
  messageDesc(file_google_cloud_iot_v1_resources, 13);

/**
 * Indicates whether an MQTT connection is enabled or disabled. See the field
 * description for details.
 *
 * @generated from enum google.cloud.iot.v1.MqttState
 */
export enum MqttState {
  /**
   * No MQTT state specified. If not specified, MQTT will be enabled by default.
   *
   * @generated from enum value: MQTT_STATE_UNSPECIFIED = 0;
   */
  MQTT_STATE_UNSPECIFIED = 0,

  /**
   * Enables a MQTT connection.
   *
   * @generated from enum value: MQTT_ENABLED = 1;
   */
  MQTT_ENABLED = 1,

  /**
   * Disables a MQTT connection.
   *
   * @generated from enum value: MQTT_DISABLED = 2;
   */
  MQTT_DISABLED = 2,
}

/**
 * Describes the enum google.cloud.iot.v1.MqttState.
 */
export const MqttStateSchema: GenEnum<MqttState> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 0);

/**
 * Indicates whether DeviceService (HTTP) is enabled or disabled for the
 * registry. See the field description for details.
 *
 * @generated from enum google.cloud.iot.v1.HttpState
 */
export enum HttpState {
  /**
   * No HTTP state specified. If not specified, DeviceService will be
   * enabled by default.
   *
   * @generated from enum value: HTTP_STATE_UNSPECIFIED = 0;
   */
  HTTP_STATE_UNSPECIFIED = 0,

  /**
   * Enables DeviceService (HTTP) service for the registry.
   *
   * @generated from enum value: HTTP_ENABLED = 1;
   */
  HTTP_ENABLED = 1,

  /**
   * Disables DeviceService (HTTP) service for the registry.
   *
   * @generated from enum value: HTTP_DISABLED = 2;
   */
  HTTP_DISABLED = 2,
}

/**
 * Describes the enum google.cloud.iot.v1.HttpState.
 */
export const HttpStateSchema: GenEnum<HttpState> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 1);

/**
 * **Beta Feature**
 *
 * The logging verbosity for device activity. Specifies which events should be
 * written to logs. For example, if the LogLevel is ERROR, only events that
 * terminate in errors will be logged. LogLevel is inclusive; enabling INFO
 * logging will also enable ERROR logging.
 *
 * @generated from enum google.cloud.iot.v1.LogLevel
 */
export enum LogLevel {
  /**
   * No logging specified. If not specified, logging will be disabled.
   *
   * @generated from enum value: LOG_LEVEL_UNSPECIFIED = 0;
   */
  LOG_LEVEL_UNSPECIFIED = 0,

  /**
   * Disables logging.
   *
   * @generated from enum value: NONE = 10;
   */
  NONE = 10,

  /**
   * Error events will be logged.
   *
   * @generated from enum value: ERROR = 20;
   */
  ERROR = 20,

  /**
   * Informational events will be logged, such as connections and
   * disconnections.
   *
   * @generated from enum value: INFO = 30;
   */
  INFO = 30,

  /**
   * All events will be logged.
   *
   * @generated from enum value: DEBUG = 40;
   */
  DEBUG = 40,
}

/**
 * Describes the enum google.cloud.iot.v1.LogLevel.
 */
export const LogLevelSchema: GenEnum<LogLevel> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 2);

/**
 * Gateway type.
 *
 * @generated from enum google.cloud.iot.v1.GatewayType
 */
export enum GatewayType {
  /**
   * If unspecified, the device is considered a non-gateway device.
   *
   * @generated from enum value: GATEWAY_TYPE_UNSPECIFIED = 0;
   */
  GATEWAY_TYPE_UNSPECIFIED = 0,

  /**
   * The device is a gateway.
   *
   * @generated from enum value: GATEWAY = 1;
   */
  GATEWAY = 1,

  /**
   * The device is not a gateway.
   *
   * @generated from enum value: NON_GATEWAY = 2;
   */
  NON_GATEWAY = 2,
}

/**
 * Describes the enum google.cloud.iot.v1.GatewayType.
 */
export const GatewayTypeSchema: GenEnum<GatewayType> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 3);

/**
 * The gateway authorization/authentication method. This setting determines how
 * Cloud IoT Core authorizes/authenticate devices to access the gateway.
 *
 * @generated from enum google.cloud.iot.v1.GatewayAuthMethod
 */
export enum GatewayAuthMethod {
  /**
   * No authentication/authorization method specified. No devices are allowed to
   * access the gateway.
   *
   * @generated from enum value: GATEWAY_AUTH_METHOD_UNSPECIFIED = 0;
   */
  GATEWAY_AUTH_METHOD_UNSPECIFIED = 0,

  /**
   * The device is authenticated through the gateway association only. Device
   * credentials are ignored even if provided.
   *
   * @generated from enum value: ASSOCIATION_ONLY = 1;
   */
  ASSOCIATION_ONLY = 1,

  /**
   * The device is authenticated through its own credentials. Gateway
   * association is not checked.
   *
   * @generated from enum value: DEVICE_AUTH_TOKEN_ONLY = 2;
   */
  DEVICE_AUTH_TOKEN_ONLY = 2,

  /**
   * The device is authenticated through both device credentials and gateway
   * association. The device must be bound to the gateway and must provide its
   * own credentials.
   *
   * @generated from enum value: ASSOCIATION_AND_DEVICE_AUTH_TOKEN = 3;
   */
  ASSOCIATION_AND_DEVICE_AUTH_TOKEN = 3,
}

/**
 * Describes the enum google.cloud.iot.v1.GatewayAuthMethod.
 */
export const GatewayAuthMethodSchema: GenEnum<GatewayAuthMethod> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 4);

/**
 * The supported formats for the public key.
 *
 * @generated from enum google.cloud.iot.v1.PublicKeyCertificateFormat
 */
export enum PublicKeyCertificateFormat {
  /**
   * The format has not been specified. This is an invalid default value and
   * must not be used.
   *
   * @generated from enum value: UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT = 0;
   */
  UNSPECIFIED_PUBLIC_KEY_CERTIFICATE_FORMAT = 0,

  /**
   * An X.509v3 certificate ([RFC5280](https://www.ietf.org/rfc/rfc5280.txt)),
   * encoded in base64, and wrapped by `-----BEGIN CERTIFICATE-----` and
   * `-----END CERTIFICATE-----`.
   *
   * @generated from enum value: X509_CERTIFICATE_PEM = 1;
   */
  X509_CERTIFICATE_PEM = 1,
}

/**
 * Describes the enum google.cloud.iot.v1.PublicKeyCertificateFormat.
 */
export const PublicKeyCertificateFormatSchema: GenEnum<PublicKeyCertificateFormat> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 5);

/**
 * The supported formats for the public key.
 *
 * @generated from enum google.cloud.iot.v1.PublicKeyFormat
 */
export enum PublicKeyFormat {
  /**
   * The format has not been specified. This is an invalid default value and
   * must not be used.
   *
   * @generated from enum value: UNSPECIFIED_PUBLIC_KEY_FORMAT = 0;
   */
  UNSPECIFIED_PUBLIC_KEY_FORMAT = 0,

  /**
   * An RSA public key encoded in base64, and wrapped by
   * `-----BEGIN PUBLIC KEY-----` and `-----END PUBLIC KEY-----`. This can be
   * used to verify `RS256` signatures in JWT tokens ([RFC7518](
   * https://www.ietf.org/rfc/rfc7518.txt)).
   *
   * @generated from enum value: RSA_PEM = 3;
   */
  RSA_PEM = 3,

  /**
   * As RSA_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
   * https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
   * `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
   *
   * @generated from enum value: RSA_X509_PEM = 1;
   */
  RSA_X509_PEM = 1,

  /**
   * Public key for the ECDSA algorithm using P-256 and SHA-256, encoded in
   * base64, and wrapped by `-----BEGIN PUBLIC KEY-----` and `-----END
   * PUBLIC KEY-----`. This can be used to verify JWT tokens with the `ES256`
   * algorithm ([RFC7518](https://www.ietf.org/rfc/rfc7518.txt)). This curve is
   * defined in [OpenSSL](https://www.openssl.org/) as the `prime256v1` curve.
   *
   * @generated from enum value: ES256_PEM = 2;
   */
  ES256_PEM = 2,

  /**
   * As ES256_PEM, but wrapped in an X.509v3 certificate ([RFC5280](
   * https://www.ietf.org/rfc/rfc5280.txt)), encoded in base64, and wrapped by
   * `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----`.
   *
   * @generated from enum value: ES256_X509_PEM = 4;
   */
  ES256_X509_PEM = 4,
}

/**
 * Describes the enum google.cloud.iot.v1.PublicKeyFormat.
 */
export const PublicKeyFormatSchema: GenEnum<PublicKeyFormat> = /*@__PURE__*/
  enumDesc(file_google_cloud_iot_v1_resources, 6);

