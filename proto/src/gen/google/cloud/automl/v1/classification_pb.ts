// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/automl/v1/classification.proto (package google.cloud.automl.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/automl/v1/classification.proto.
 */
export const file_google_cloud_automl_v1_classification: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvY2xvdWQvYXV0b21sL3YxL2NsYXNzaWZpY2F0aW9uLnByb3RvEhZnb29nbGUuY2xvdWQuYXV0b21sLnYxIikKGENsYXNzaWZpY2F0aW9uQW5ub3RhdGlvbhINCgVzY29yZRgBIAEoAiKBBwofQ2xhc3NpZmljYXRpb25FdmFsdWF0aW9uTWV0cmljcxIOCgZhdV9wcmMYASABKAISDgoGYXVfcm9jGAYgASgCEhAKCGxvZ19sb3NzGAcgASgCEnAKGGNvbmZpZGVuY2VfbWV0cmljc19lbnRyeRgDIAMoCzJOLmdvb2dsZS5jbG91ZC5hdXRvbWwudjEuQ2xhc3NpZmljYXRpb25FdmFsdWF0aW9uTWV0cmljcy5Db25maWRlbmNlTWV0cmljc0VudHJ5EmEKEGNvbmZ1c2lvbl9tYXRyaXgYBCABKAsyRy5nb29nbGUuY2xvdWQuYXV0b21sLnYxLkNsYXNzaWZpY2F0aW9uRXZhbHVhdGlvbk1ldHJpY3MuQ29uZnVzaW9uTWF0cml4EhoKEmFubm90YXRpb25fc3BlY19pZBgFIAMoCRr8AgoWQ29uZmlkZW5jZU1ldHJpY3NFbnRyeRIcChRjb25maWRlbmNlX3RocmVzaG9sZBgBIAEoAhIaChJwb3NpdGlvbl90aHJlc2hvbGQYDiABKAUSDgoGcmVjYWxsGAIgASgCEhEKCXByZWNpc2lvbhgDIAEoAhIbChNmYWxzZV9wb3NpdGl2ZV9yYXRlGAggASgCEhAKCGYxX3Njb3JlGAQgASgCEhIKCnJlY2FsbF9hdDEYBSABKAISFQoNcHJlY2lzaW9uX2F0MRgGIAEoAhIfChdmYWxzZV9wb3NpdGl2ZV9yYXRlX2F0MRgJIAEoAhIUCgxmMV9zY29yZV9hdDEYByABKAISGwoTdHJ1ZV9wb3NpdGl2ZV9jb3VudBgKIAEoAxIcChRmYWxzZV9wb3NpdGl2ZV9jb3VudBgLIAEoAxIcChRmYWxzZV9uZWdhdGl2ZV9jb3VudBgMIAEoAxIbChN0cnVlX25lZ2F0aXZlX2NvdW50GA0gASgDGrsBCg9Db25mdXNpb25NYXRyaXgSGgoSYW5ub3RhdGlvbl9zcGVjX2lkGAEgAygJEhQKDGRpc3BsYXlfbmFtZRgDIAMoCRJYCgNyb3cYAiADKAsySy5nb29nbGUuY2xvdWQuYXV0b21sLnYxLkNsYXNzaWZpY2F0aW9uRXZhbHVhdGlvbk1ldHJpY3MuQ29uZnVzaW9uTWF0cml4LlJvdxocCgNSb3cSFQoNZXhhbXBsZV9jb3VudBgBIAMoBSpZChJDbGFzc2lmaWNhdGlvblR5cGUSIwofQ0xBU1NJRklDQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEg4KCk1VTFRJQ0xBU1MQARIOCgpNVUxUSUxBQkVMEAJCtQEKGmNvbS5nb29nbGUuY2xvdWQuYXV0b21sLnYxQhNDbGFzc2lmaWNhdGlvblByb3RvUAFaMmNsb3VkLmdvb2dsZS5jb20vZ28vYXV0b21sL2FwaXYxL2F1dG9tbHBiO2F1dG9tbHBiqgIWR29vZ2xlLkNsb3VkLkF1dG9NTC5WMcoCFkdvb2dsZVxDbG91ZFxBdXRvTWxcVjHqAhlHb29nbGU6OkNsb3VkOjpBdXRvTUw6OlYxYgZwcm90bzM");

/**
 * Contains annotation details specific to classification.
 *
 * @generated from message google.cloud.automl.v1.ClassificationAnnotation
 */
export type ClassificationAnnotation = Message<"google.cloud.automl.v1.ClassificationAnnotation"> & {
  /**
   * Output only. A confidence estimate between 0.0 and 1.0. A higher value
   * means greater confidence that the annotation is positive. If a user
   * approves an annotation as negative or positive, the score value remains
   * unchanged. If a user creates an annotation, the score is 0 for negative or
   * 1 for positive.
   *
   * @generated from field: float score = 1;
   */
  score: number;
};

/**
 * Describes the message google.cloud.automl.v1.ClassificationAnnotation.
 * Use `create(ClassificationAnnotationSchema)` to create a new message.
 */
export const ClassificationAnnotationSchema: GenMessage<ClassificationAnnotation> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1_classification, 0);

/**
 * Model evaluation metrics for classification problems.
 * Note: For Video Classification this metrics only describe quality of the
 * Video Classification predictions of "segment_classification" type.
 *
 * @generated from message google.cloud.automl.v1.ClassificationEvaluationMetrics
 */
export type ClassificationEvaluationMetrics = Message<"google.cloud.automl.v1.ClassificationEvaluationMetrics"> & {
  /**
   * Output only. The Area Under Precision-Recall Curve metric. Micro-averaged
   * for the overall evaluation.
   *
   * @generated from field: float au_prc = 1;
   */
  auPrc: number;

  /**
   * Output only. The Area Under Receiver Operating Characteristic curve metric.
   * Micro-averaged for the overall evaluation.
   *
   * @generated from field: float au_roc = 6;
   */
  auRoc: number;

  /**
   * Output only. The Log Loss metric.
   *
   * @generated from field: float log_loss = 7;
   */
  logLoss: number;

  /**
   * Output only. Metrics for each confidence_threshold in
   * 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and
   * position_threshold = INT32_MAX_VALUE.
   * ROC and precision-recall curves, and other aggregated metrics are derived
   * from them. The confidence metrics entries may also be supplied for
   * additional values of position_threshold, but from these no aggregated
   * metrics are computed.
   *
   * @generated from field: repeated google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry confidence_metrics_entry = 3;
   */
  confidenceMetricsEntry: ClassificationEvaluationMetrics_ConfidenceMetricsEntry[];

  /**
   * Output only. Confusion matrix of the evaluation.
   * Only set for MULTICLASS classification problems where number
   * of labels is no more than 10.
   * Only set for model level evaluation, not for evaluation per label.
   *
   * @generated from field: google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix confusion_matrix = 4;
   */
  confusionMatrix?: ClassificationEvaluationMetrics_ConfusionMatrix;

  /**
   * Output only. The annotation spec ids used for this evaluation.
   *
   * @generated from field: repeated string annotation_spec_id = 5;
   */
  annotationSpecId: string[];
};

/**
 * Describes the message google.cloud.automl.v1.ClassificationEvaluationMetrics.
 * Use `create(ClassificationEvaluationMetricsSchema)` to create a new message.
 */
export const ClassificationEvaluationMetricsSchema: GenMessage<ClassificationEvaluationMetrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1_classification, 1);

/**
 * Metrics for a single confidence threshold.
 *
 * @generated from message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry
 */
export type ClassificationEvaluationMetrics_ConfidenceMetricsEntry = Message<"google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry"> & {
  /**
   * Output only. Metrics are computed with an assumption that the model
   * never returns predictions with score lower than this value.
   *
   * @generated from field: float confidence_threshold = 1;
   */
  confidenceThreshold: number;

  /**
   * Output only. Metrics are computed with an assumption that the model
   * always returns at most this many predictions (ordered by their score,
   * descendingly), but they all still need to meet the confidence_threshold.
   *
   * @generated from field: int32 position_threshold = 14;
   */
  positionThreshold: number;

  /**
   * Output only. Recall (True Positive Rate) for the given confidence
   * threshold.
   *
   * @generated from field: float recall = 2;
   */
  recall: number;

  /**
   * Output only. Precision for the given confidence threshold.
   *
   * @generated from field: float precision = 3;
   */
  precision: number;

  /**
   * Output only. False Positive Rate for the given confidence threshold.
   *
   * @generated from field: float false_positive_rate = 8;
   */
  falsePositiveRate: number;

  /**
   * Output only. The harmonic mean of recall and precision.
   *
   * @generated from field: float f1_score = 4;
   */
  f1Score: number;

  /**
   * Output only. The Recall (True Positive Rate) when only considering the
   * label that has the highest prediction score and not below the confidence
   * threshold for each example.
   *
   * @generated from field: float recall_at1 = 5;
   */
  recallAt1: number;

  /**
   * Output only. The precision when only considering the label that has the
   * highest prediction score and not below the confidence threshold for each
   * example.
   *
   * @generated from field: float precision_at1 = 6;
   */
  precisionAt1: number;

  /**
   * Output only. The False Positive Rate when only considering the label that
   * has the highest prediction score and not below the confidence threshold
   * for each example.
   *
   * @generated from field: float false_positive_rate_at1 = 9;
   */
  falsePositiveRateAt1: number;

  /**
   * Output only. The harmonic mean of [recall_at1][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry.recall_at1] and [precision_at1][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry.precision_at1].
   *
   * @generated from field: float f1_score_at1 = 7;
   */
  f1ScoreAt1: number;

  /**
   * Output only. The number of model created labels that match a ground truth
   * label.
   *
   * @generated from field: int64 true_positive_count = 10;
   */
  truePositiveCount: bigint;

  /**
   * Output only. The number of model created labels that do not match a
   * ground truth label.
   *
   * @generated from field: int64 false_positive_count = 11;
   */
  falsePositiveCount: bigint;

  /**
   * Output only. The number of ground truth labels that are not matched
   * by a model created label.
   *
   * @generated from field: int64 false_negative_count = 12;
   */
  falseNegativeCount: bigint;

  /**
   * Output only. The number of labels that were not created by the model,
   * but if they would, they would not match a ground truth label.
   *
   * @generated from field: int64 true_negative_count = 13;
   */
  trueNegativeCount: bigint;
};

/**
 * Describes the message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfidenceMetricsEntry.
 * Use `create(ClassificationEvaluationMetrics_ConfidenceMetricsEntrySchema)` to create a new message.
 */
export const ClassificationEvaluationMetrics_ConfidenceMetricsEntrySchema: GenMessage<ClassificationEvaluationMetrics_ConfidenceMetricsEntry> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1_classification, 1, 0);

/**
 * Confusion matrix of the model running the classification.
 *
 * @generated from message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix
 */
export type ClassificationEvaluationMetrics_ConfusionMatrix = Message<"google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix"> & {
  /**
   * Output only. IDs of the annotation specs used in the confusion matrix.
   * For Tables CLASSIFICATION
   * [prediction_type][google.cloud.automl.v1p1beta.TablesModelMetadata.prediction_type]
   * only list of [annotation_spec_display_name-s][] is populated.
   *
   * @generated from field: repeated string annotation_spec_id = 1;
   */
  annotationSpecId: string[];

  /**
   * Output only. Display name of the annotation specs used in the confusion
   * matrix, as they were at the moment of the evaluation. For Tables
   * CLASSIFICATION
   * [prediction_type-s][google.cloud.automl.v1p1beta.TablesModelMetadata.prediction_type],
   * distinct values of the target column at the moment of the model
   * evaluation are populated here.
   *
   * @generated from field: repeated string display_name = 3;
   */
  displayName: string[];

  /**
   * Output only. Rows in the confusion matrix. The number of rows is equal to
   * the size of `annotation_spec_id`.
   * `row[i].example_count[j]` is the number of examples that have ground
   * truth of the `annotation_spec_id[i]` and are predicted as
   * `annotation_spec_id[j]` by the model being evaluated.
   *
   * @generated from field: repeated google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.Row row = 2;
   */
  row: ClassificationEvaluationMetrics_ConfusionMatrix_Row[];
};

/**
 * Describes the message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.
 * Use `create(ClassificationEvaluationMetrics_ConfusionMatrixSchema)` to create a new message.
 */
export const ClassificationEvaluationMetrics_ConfusionMatrixSchema: GenMessage<ClassificationEvaluationMetrics_ConfusionMatrix> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1_classification, 1, 1);

/**
 * Output only. A row in the confusion matrix.
 *
 * @generated from message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.Row
 */
export type ClassificationEvaluationMetrics_ConfusionMatrix_Row = Message<"google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.Row"> & {
  /**
   * Output only. Value of the specific cell in the confusion matrix.
   * The number of values each row has (i.e. the length of the row) is equal
   * to the length of the `annotation_spec_id` field or, if that one is not
   * populated, length of the [display_name][google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.display_name] field.
   *
   * @generated from field: repeated int32 example_count = 1;
   */
  exampleCount: number[];
};

/**
 * Describes the message google.cloud.automl.v1.ClassificationEvaluationMetrics.ConfusionMatrix.Row.
 * Use `create(ClassificationEvaluationMetrics_ConfusionMatrix_RowSchema)` to create a new message.
 */
export const ClassificationEvaluationMetrics_ConfusionMatrix_RowSchema: GenMessage<ClassificationEvaluationMetrics_ConfusionMatrix_Row> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1_classification, 1, 1, 0);

/**
 * Type of the classification problem.
 *
 * @generated from enum google.cloud.automl.v1.ClassificationType
 */
export enum ClassificationType {
  /**
   * An un-set value of this enum.
   *
   * @generated from enum value: CLASSIFICATION_TYPE_UNSPECIFIED = 0;
   */
  CLASSIFICATION_TYPE_UNSPECIFIED = 0,

  /**
   * At most one label is allowed per example.
   *
   * @generated from enum value: MULTICLASS = 1;
   */
  MULTICLASS = 1,

  /**
   * Multiple labels are allowed for one example.
   *
   * @generated from enum value: MULTILABEL = 2;
   */
  MULTILABEL = 2,
}

/**
 * Describes the enum google.cloud.automl.v1.ClassificationType.
 */
export const ClassificationTypeSchema: GenEnum<ClassificationType> = /*@__PURE__*/
  enumDesc(file_google_cloud_automl_v1_classification, 0);

