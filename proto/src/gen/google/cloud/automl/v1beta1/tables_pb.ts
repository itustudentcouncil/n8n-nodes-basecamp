// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/automl/v1beta1/tables.proto (package google.cloud.automl.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_cloud_automl_v1beta1_classification } from "./classification_pb";
import type { ColumnSpec } from "./column_spec_pb";
import { file_google_cloud_automl_v1beta1_column_spec } from "./column_spec_pb";
import { file_google_cloud_automl_v1beta1_data_items } from "./data_items_pb";
import type { CorrelationStats } from "./data_stats_pb";
import { file_google_cloud_automl_v1beta1_data_stats } from "./data_stats_pb";
import type { DoubleRange } from "./ranges_pb";
import { file_google_cloud_automl_v1beta1_ranges } from "./ranges_pb";
import { file_google_cloud_automl_v1beta1_regression } from "./regression_pb";
import { file_google_cloud_automl_v1beta1_temporal } from "./temporal_pb";
import type { Timestamp, Value } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/automl/v1beta1/tables.proto.
 */
export const file_google_cloud_automl_v1beta1_tables: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvY2xvdWQvYXV0b21sL3YxYmV0YTEvdGFibGVzLnByb3RvEhtnb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTEisAMKFVRhYmxlc0RhdGFzZXRNZXRhZGF0YRIdChVwcmltYXJ5X3RhYmxlX3NwZWNfaWQYASABKAkSHQoVdGFyZ2V0X2NvbHVtbl9zcGVjX2lkGAIgASgJEh0KFXdlaWdodF9jb2x1bW5fc3BlY19pZBgDIAEoCRIdChVtbF91c2VfY29sdW1uX3NwZWNfaWQYBCABKAkSdAoadGFyZ2V0X2NvbHVtbl9jb3JyZWxhdGlvbnMYBiADKAsyUC5nb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTEuVGFibGVzRGF0YXNldE1ldGFkYXRhLlRhcmdldENvbHVtbkNvcnJlbGF0aW9uc0VudHJ5EjUKEXN0YXRzX3VwZGF0ZV90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBpuCh1UYXJnZXRDb2x1bW5Db3JyZWxhdGlvbnNFbnRyeRILCgNrZXkYASABKAkSPAoFdmFsdWUYAiABKAsyLS5nb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTEuQ29ycmVsYXRpb25TdGF0czoCOAEilgQKE1RhYmxlc01vZGVsTWV0YWRhdGESLQojb3B0aW1pemF0aW9uX29iamVjdGl2ZV9yZWNhbGxfdmFsdWUYESABKAJIABIwCiZvcHRpbWl6YXRpb25fb2JqZWN0aXZlX3ByZWNpc2lvbl92YWx1ZRgSIAEoAkgAEkMKEnRhcmdldF9jb2x1bW5fc3BlYxgCIAEoCzInLmdvb2dsZS5jbG91ZC5hdXRvbWwudjFiZXRhMS5Db2x1bW5TcGVjEksKGmlucHV0X2ZlYXR1cmVfY29sdW1uX3NwZWNzGAMgAygLMicuZ29vZ2xlLmNsb3VkLmF1dG9tbC52MWJldGExLkNvbHVtblNwZWMSHgoWb3B0aW1pemF0aW9uX29iamVjdGl2ZRgEIAEoCRJUChh0YWJsZXNfbW9kZWxfY29sdW1uX2luZm8YBSADKAsyMi5nb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTEuVGFibGVzTW9kZWxDb2x1bW5JbmZvEiUKHXRyYWluX2J1ZGdldF9taWxsaV9ub2RlX2hvdXJzGAYgASgDEiMKG3RyYWluX2Nvc3RfbWlsbGlfbm9kZV9ob3VycxgHIAEoAxIeChZkaXNhYmxlX2Vhcmx5X3N0b3BwaW5nGAwgASgIQioKKGFkZGl0aW9uYWxfb3B0aW1pemF0aW9uX29iamVjdGl2ZV9jb25maWci/QEKEFRhYmxlc0Fubm90YXRpb24SDQoFc2NvcmUYASABKAISRQoTcHJlZGljdGlvbl9pbnRlcnZhbBgEIAEoCzIoLmdvb2dsZS5jbG91ZC5hdXRvbWwudjFiZXRhMS5Eb3VibGVSYW5nZRIlCgV2YWx1ZRgCIAEoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZRJUChh0YWJsZXNfbW9kZWxfY29sdW1uX2luZm8YAyADKAsyMi5nb29nbGUuY2xvdWQuYXV0b21sLnYxYmV0YTEuVGFibGVzTW9kZWxDb2x1bW5JbmZvEhYKDmJhc2VsaW5lX3Njb3JlGAUgASgCImoKFVRhYmxlc01vZGVsQ29sdW1uSW5mbxIYChBjb2x1bW5fc3BlY19uYW1lGAEgASgJEhsKE2NvbHVtbl9kaXNwbGF5X25hbWUYAiABKAkSGgoSZmVhdHVyZV9pbXBvcnRhbmNlGAMgASgCQpsBCh9jb20uZ29vZ2xlLmNsb3VkLmF1dG9tbC52MWJldGExUAFaN2Nsb3VkLmdvb2dsZS5jb20vZ28vYXV0b21sL2FwaXYxYmV0YTEvYXV0b21scGI7YXV0b21scGLKAhtHb29nbGVcQ2xvdWRcQXV0b01sXFYxYmV0YTHqAh5Hb29nbGU6OkNsb3VkOjpBdXRvTUw6OlYxYmV0YTFiBnByb3RvMw", [file_google_cloud_automl_v1beta1_classification, file_google_cloud_automl_v1beta1_column_spec, file_google_cloud_automl_v1beta1_data_items, file_google_cloud_automl_v1beta1_data_stats, file_google_cloud_automl_v1beta1_ranges, file_google_cloud_automl_v1beta1_regression, file_google_cloud_automl_v1beta1_temporal, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * Metadata for a dataset used for AutoML Tables.
 *
 * @generated from message google.cloud.automl.v1beta1.TablesDatasetMetadata
 */
export type TablesDatasetMetadata = Message<"google.cloud.automl.v1beta1.TablesDatasetMetadata"> & {
  /**
   * Output only. The table_spec_id of the primary table of this dataset.
   *
   * @generated from field: string primary_table_spec_id = 1;
   */
  primaryTableSpecId: string;

  /**
   * column_spec_id of the primary table's column that should be used as the
   * training & prediction target.
   * This column must be non-nullable and have one of following data types
   * (otherwise model creation will error):
   *
   * * CATEGORY
   *
   * * FLOAT64
   *
   * If the type is CATEGORY , only up to
   * 100 unique values may exist in that column across all rows.
   *
   * NOTE: Updates of this field will instantly affect any other users
   * concurrently working with the dataset.
   *
   * @generated from field: string target_column_spec_id = 2;
   */
  targetColumnSpecId: string;

  /**
   * column_spec_id of the primary table's column that should be used as the
   * weight column, i.e. the higher the value the more important the row will be
   * during model training.
   * Required type: FLOAT64.
   * Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is
   *                 ignored for training.
   * If not set all rows are assumed to have equal weight of 1.
   * NOTE: Updates of this field will instantly affect any other users
   * concurrently working with the dataset.
   *
   * @generated from field: string weight_column_spec_id = 3;
   */
  weightColumnSpecId: string;

  /**
   * column_spec_id of the primary table column which specifies a possible ML
   * use of the row, i.e. the column will be used to split the rows into TRAIN,
   * VALIDATE and TEST sets.
   * Required type: STRING.
   * This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST`
   * among its values, or only have `TEST`, `UNASSIGNED` values. In the latter
   * case the rows with `UNASSIGNED` value will be assigned by AutoML. Note
   * that if a given ml use distribution makes it impossible to create a "good"
   * model, that call will error describing the issue.
   * If both this column_spec_id and primary table's time_column_spec_id are not
   * set, then all rows are treated as `UNASSIGNED`.
   * NOTE: Updates of this field will instantly affect any other users
   * concurrently working with the dataset.
   *
   * @generated from field: string ml_use_column_spec_id = 4;
   */
  mlUseColumnSpecId: string;

  /**
   * Output only. Correlations between
   *
   * [TablesDatasetMetadata.target_column_spec_id][google.cloud.automl.v1beta1.TablesDatasetMetadata.target_column_spec_id],
   * and other columns of the
   *
   * [TablesDatasetMetadataprimary_table][google.cloud.automl.v1beta1.TablesDatasetMetadata.primary_table_spec_id].
   * Only set if the target column is set. Mapping from other column spec id to
   * its CorrelationStats with the target column.
   * This field may be stale, see the stats_update_time field for
   * for the timestamp at which these stats were last updated.
   *
   * @generated from field: map<string, google.cloud.automl.v1beta1.CorrelationStats> target_column_correlations = 6;
   */
  targetColumnCorrelations: { [key: string]: CorrelationStats };

  /**
   * Output only. The most recent timestamp when target_column_correlations
   * field and all descendant ColumnSpec.data_stats and
   * ColumnSpec.top_correlated_columns fields were last (re-)generated. Any
   * changes that happened to the dataset afterwards are not reflected in these
   * fields values. The regeneration happens in the background on a best effort
   * basis.
   *
   * @generated from field: google.protobuf.Timestamp stats_update_time = 7;
   */
  statsUpdateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.automl.v1beta1.TablesDatasetMetadata.
 * Use `create(TablesDatasetMetadataSchema)` to create a new message.
 */
export const TablesDatasetMetadataSchema: GenMessage<TablesDatasetMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1beta1_tables, 0);

/**
 * Model metadata specific to AutoML Tables.
 *
 * @generated from message google.cloud.automl.v1beta1.TablesModelMetadata
 */
export type TablesModelMetadata = Message<"google.cloud.automl.v1beta1.TablesModelMetadata"> & {
  /**
   * Additional optimization objective configuration. Required for
   * `MAXIMIZE_PRECISION_AT_RECALL` and `MAXIMIZE_RECALL_AT_PRECISION`,
   * otherwise unused.
   *
   * @generated from oneof google.cloud.automl.v1beta1.TablesModelMetadata.additional_optimization_objective_config
   */
  additionalOptimizationObjectiveConfig: {
    /**
     * Required when optimization_objective is "MAXIMIZE_PRECISION_AT_RECALL".
     * Must be between 0 and 1, inclusive.
     *
     * @generated from field: float optimization_objective_recall_value = 17;
     */
    value: number;
    case: "optimizationObjectiveRecallValue";
  } | {
    /**
     * Required when optimization_objective is "MAXIMIZE_RECALL_AT_PRECISION".
     * Must be between 0 and 1, inclusive.
     *
     * @generated from field: float optimization_objective_precision_value = 18;
     */
    value: number;
    case: "optimizationObjectivePrecisionValue";
  } | { case: undefined; value?: undefined };

  /**
   * Column spec of the dataset's primary table's column the model is
   * predicting. Snapshotted when model creation started.
   * Only 3 fields are used:
   * name - May be set on CreateModel, if it's not then the ColumnSpec
   *        corresponding to the current target_column_spec_id of the dataset
   *        the model is trained from is used.
   *        If neither is set, CreateModel will error.
   * display_name - Output only.
   * data_type - Output only.
   *
   * @generated from field: google.cloud.automl.v1beta1.ColumnSpec target_column_spec = 2;
   */
  targetColumnSpec?: ColumnSpec;

  /**
   * Column specs of the dataset's primary table's columns, on which
   * the model is trained and which are used as the input for predictions.
   * The
   *
   * [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
   * as well as, according to dataset's state upon model creation,
   *
   * [weight_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.weight_column_spec_id],
   * and
   *
   * [ml_use_column][google.cloud.automl.v1beta1.TablesDatasetMetadata.ml_use_column_spec_id]
   * must never be included here.
   *
   * Only 3 fields are used:
   *
   * * name - May be set on CreateModel, if set only the columns specified are
   *   used, otherwise all primary table's columns (except the ones listed
   *   above) are used for the training and prediction input.
   *
   * * display_name - Output only.
   *
   * * data_type - Output only.
   *
   * @generated from field: repeated google.cloud.automl.v1beta1.ColumnSpec input_feature_column_specs = 3;
   */
  inputFeatureColumnSpecs: ColumnSpec[];

  /**
   * Objective function the model is optimizing towards. The training process
   * creates a model that maximizes/minimizes the value of the objective
   * function over the validation set.
   *
   * The supported optimization objectives depend on the prediction type.
   * If the field is not set, a default objective function is used.
   *
   * CLASSIFICATION_BINARY:
   *   "MAXIMIZE_AU_ROC" (default) - Maximize the area under the receiver
   *                                 operating characteristic (ROC) curve.
   *   "MINIMIZE_LOG_LOSS" - Minimize log loss.
   *   "MAXIMIZE_AU_PRC" - Maximize the area under the precision-recall curve.
   *   "MAXIMIZE_PRECISION_AT_RECALL" - Maximize precision for a specified
   *                                   recall value.
   *   "MAXIMIZE_RECALL_AT_PRECISION" - Maximize recall for a specified
   *                                    precision value.
   *
   * CLASSIFICATION_MULTI_CLASS :
   *   "MINIMIZE_LOG_LOSS" (default) - Minimize log loss.
   *
   *
   * REGRESSION:
   *   "MINIMIZE_RMSE" (default) - Minimize root-mean-squared error (RMSE).
   *   "MINIMIZE_MAE" - Minimize mean-absolute error (MAE).
   *   "MINIMIZE_RMSLE" - Minimize root-mean-squared log error (RMSLE).
   *
   * @generated from field: string optimization_objective = 4;
   */
  optimizationObjective: string;

  /**
   * Output only. Auxiliary information for each of the
   * input_feature_column_specs with respect to this particular model.
   *
   * @generated from field: repeated google.cloud.automl.v1beta1.TablesModelColumnInfo tables_model_column_info = 5;
   */
  tablesModelColumnInfo: TablesModelColumnInfo[];

  /**
   * Required. The train budget of creating this model, expressed in milli node
   * hours i.e. 1,000 value in this field means 1 node hour.
   *
   * The training cost of the model will not exceed this budget. The final cost
   * will be attempted to be close to the budget, though may end up being (even)
   * noticeably smaller - at the backend's discretion. This especially may
   * happen when further model training ceases to provide any improvements.
   *
   * If the budget is set to a value known to be insufficient to train a
   * model for the given dataset, the training won't be attempted and
   * will error.
   *
   * The train budget must be between 1,000 and 72,000 milli node hours,
   * inclusive.
   *
   * @generated from field: int64 train_budget_milli_node_hours = 6;
   */
  trainBudgetMilliNodeHours: bigint;

  /**
   * Output only. The actual training cost of the model, expressed in milli
   * node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
   * to not exceed the train budget.
   *
   * @generated from field: int64 train_cost_milli_node_hours = 7;
   */
  trainCostMilliNodeHours: bigint;

  /**
   * Use the entire training budget. This disables the early stopping feature.
   * By default, the early stopping feature is enabled, which means that AutoML
   * Tables might stop training before the entire training budget has been used.
   *
   * @generated from field: bool disable_early_stopping = 12;
   */
  disableEarlyStopping: boolean;
};

/**
 * Describes the message google.cloud.automl.v1beta1.TablesModelMetadata.
 * Use `create(TablesModelMetadataSchema)` to create a new message.
 */
export const TablesModelMetadataSchema: GenMessage<TablesModelMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1beta1_tables, 1);

/**
 * Contains annotation details specific to Tables.
 *
 * @generated from message google.cloud.automl.v1beta1.TablesAnnotation
 */
export type TablesAnnotation = Message<"google.cloud.automl.v1beta1.TablesAnnotation"> & {
  /**
   * Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher
   * value means greater confidence in the returned value.
   * For
   *
   * [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
   * of FLOAT64 data type the score is not populated.
   *
   * @generated from field: float score = 1;
   */
  score: number;

  /**
   * Output only. Only populated when
   *
   * [target_column_spec][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec]
   * has FLOAT64 data type. An interval in which the exactly correct target
   * value has 95% chance to be in.
   *
   * @generated from field: google.cloud.automl.v1beta1.DoubleRange prediction_interval = 4;
   */
  predictionInterval?: DoubleRange;

  /**
   * The predicted value of the row's
   *
   * [target_column][google.cloud.automl.v1beta1.TablesModelMetadata.target_column_spec].
   * The value depends on the column's DataType:
   *
   * * CATEGORY - the predicted (with the above confidence `score`) CATEGORY
   *   value.
   *
   * * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.
   *
   * @generated from field: google.protobuf.Value value = 2;
   */
  value?: Value;

  /**
   * Output only. Auxiliary information for each of the model's
   *
   * [input_feature_column_specs][google.cloud.automl.v1beta1.TablesModelMetadata.input_feature_column_specs]
   * with respect to this particular prediction.
   * If no other fields than
   *
   * [column_spec_name][google.cloud.automl.v1beta1.TablesModelColumnInfo.column_spec_name]
   * and
   *
   * [column_display_name][google.cloud.automl.v1beta1.TablesModelColumnInfo.column_display_name]
   * would be populated, then this whole field is not.
   *
   * @generated from field: repeated google.cloud.automl.v1beta1.TablesModelColumnInfo tables_model_column_info = 3;
   */
  tablesModelColumnInfo: TablesModelColumnInfo[];

  /**
   * Output only. Stores the prediction score for the baseline example, which
   * is defined as the example with all values set to their baseline values.
   * This is used as part of the Sampled Shapley explanation of the model's
   * prediction. This field is populated only when feature importance is
   * requested. For regression models, this holds the baseline prediction for
   * the baseline example. For classification models, this holds the baseline
   * prediction for the baseline example for the argmax class.
   *
   * @generated from field: float baseline_score = 5;
   */
  baselineScore: number;
};

/**
 * Describes the message google.cloud.automl.v1beta1.TablesAnnotation.
 * Use `create(TablesAnnotationSchema)` to create a new message.
 */
export const TablesAnnotationSchema: GenMessage<TablesAnnotation> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1beta1_tables, 2);

/**
 * An information specific to given column and Tables Model, in context
 * of the Model and the predictions created by it.
 *
 * @generated from message google.cloud.automl.v1beta1.TablesModelColumnInfo
 */
export type TablesModelColumnInfo = Message<"google.cloud.automl.v1beta1.TablesModelColumnInfo"> & {
  /**
   * Output only. The name of the ColumnSpec describing the column. Not
   * populated when this proto is outputted to BigQuery.
   *
   * @generated from field: string column_spec_name = 1;
   */
  columnSpecName: string;

  /**
   * Output only. The display name of the column (same as the display_name of
   * its ColumnSpec).
   *
   * @generated from field: string column_display_name = 2;
   */
  columnDisplayName: string;

  /**
   * Output only. When given as part of a Model (always populated):
   * Measurement of how much model predictions correctness on the TEST data
   * depend on values in this column. A value between 0 and 1, higher means
   * higher influence. These values are normalized - for all input feature
   * columns of a given model they add to 1.
   *
   * When given back by Predict (populated iff
   * [feature_importance
   * param][google.cloud.automl.v1beta1.PredictRequest.params] is set) or Batch
   * Predict (populated iff
   * [feature_importance][google.cloud.automl.v1beta1.PredictRequest.params]
   * param is set):
   * Measurement of how impactful for the prediction returned for the given row
   * the value in this column was. Specifically, the feature importance
   * specifies the marginal contribution that the feature made to the prediction
   * score compared to the baseline score. These values are computed using the
   * Sampled Shapley method.
   *
   * @generated from field: float feature_importance = 3;
   */
  featureImportance: number;
};

/**
 * Describes the message google.cloud.automl.v1beta1.TablesModelColumnInfo.
 * Use `create(TablesModelColumnInfoSchema)` to create a new message.
 */
export const TablesModelColumnInfoSchema: GenMessage<TablesModelColumnInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_automl_v1beta1_tables, 3);

