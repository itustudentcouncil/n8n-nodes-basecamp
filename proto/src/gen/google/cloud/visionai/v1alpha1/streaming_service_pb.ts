// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/visionai/v1alpha1/streaming_service.proto (package google.cloud.visionai.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { Packet } from "./streaming_resources_pb";
import { file_google_cloud_visionai_v1alpha1_streaming_resources } from "./streaming_resources_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/visionai/v1alpha1/streaming_service.proto.
 */
export const file_google_cloud_visionai_v1alpha1_streaming_service: GenFile = /*@__PURE__*/
  fileDesc("CjZnb29nbGUvY2xvdWQvdmlzaW9uYWkvdjFhbHBoYTEvc3RyZWFtaW5nX3NlcnZpY2UucHJvdG8SHmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMSLHAwoUUmVjZWl2ZUV2ZW50c1JlcXVlc3QSWgoNc2V0dXBfcmVxdWVzdBgBIAEoCzJBLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5SZWNlaXZlRXZlbnRzUmVxdWVzdC5TZXR1cFJlcXVlc3RIABJHCg5jb21taXRfcmVxdWVzdBgCIAEoCzItLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5Db21taXRSZXF1ZXN0SAAa/gEKDFNldHVwUmVxdWVzdBIPCgdjbHVzdGVyGAEgASgJEg4KBnN0cmVhbRgCIAEoCRIQCghyZWNlaXZlchgDIAEoCRJHCg9jb250cm9sbGVkX21vZGUYBCABKAsyLi5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuQ29udHJvbGxlZE1vZGUSNQoSaGVhcnRiZWF0X2ludGVydmFsGAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjsKGHdyaXRlc19kb25lX2dyYWNlX3BlcmlvZBgGIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIJCgdyZXF1ZXN0In0KC0V2ZW50VXBkYXRlEg4KBnN0cmVhbRgBIAEoCRINCgVldmVudBgCIAEoCRIOCgZzZXJpZXMYAyABKAkSLwoLdXBkYXRlX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg4KBm9mZnNldBgFIAEoAyJdChxSZWNlaXZlRXZlbnRzQ29udHJvbFJlc3BvbnNlEhMKCWhlYXJ0YmVhdBgBIAEoCEgAEh0KE3dyaXRlc19kb25lX3JlcXVlc3QYAiABKAhIAEIJCgdjb250cm9sIrkBChVSZWNlaXZlRXZlbnRzUmVzcG9uc2USQwoMZXZlbnRfdXBkYXRlGAEgASgLMisuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLkV2ZW50VXBkYXRlSAASTwoHY29udHJvbBgCIAEoCzI8Lmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5SZWNlaXZlRXZlbnRzQ29udHJvbFJlc3BvbnNlSABCCgoIcmVzcG9uc2UiogEKBUxlYXNlEgoKAmlkGAEgASgJEg4KBnNlcmllcxgCIAEoCRINCgVvd25lchgDIAEoCRIvCgtleHBpcmVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASPQoKbGVhc2VfdHlwZRgFIAEoDjIpLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5MZWFzZVR5cGUinAEKE0FjcXVpcmVMZWFzZVJlcXVlc3QSDgoGc2VyaWVzGAEgASgJEg0KBW93bmVyGAIgASgJEicKBHRlcm0YAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SPQoKbGVhc2VfdHlwZRgEIAEoDjIpLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5MZWFzZVR5cGUiZwoRUmVuZXdMZWFzZVJlcXVlc3QSCgoCaWQYASABKAkSDgoGc2VyaWVzGAIgASgJEg0KBW93bmVyGAMgASgJEicKBHRlcm0YBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24iQAoTUmVsZWFzZUxlYXNlUmVxdWVzdBIKCgJpZBgBIAEoCRIOCgZzZXJpZXMYAiABKAkSDQoFb3duZXIYAyABKAkiFgoUUmVsZWFzZUxlYXNlUmVzcG9uc2UikAEKD1JlcXVlc3RNZXRhZGF0YRIOCgZzdHJlYW0YASABKAkSDQoFZXZlbnQYAiABKAkSDgoGc2VyaWVzGAMgASgJEhAKCGxlYXNlX2lkGAQgASgJEg0KBW93bmVyGAUgASgJEi0KCmxlYXNlX3Rlcm0YBiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24ingEKElNlbmRQYWNrZXRzUmVxdWVzdBI4CgZwYWNrZXQYASABKAsyJi5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUGFja2V0SAASQwoIbWV0YWRhdGEYAiABKAsyLy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUmVxdWVzdE1ldGFkYXRhSABCCQoHcmVxdWVzdCIVChNTZW5kUGFja2V0c1Jlc3BvbnNlIs8EChVSZWNlaXZlUGFja2V0c1JlcXVlc3QSWwoNc2V0dXBfcmVxdWVzdBgGIAEoCzJCLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5SZWNlaXZlUGFja2V0c1JlcXVlc3QuU2V0dXBSZXF1ZXN0SAASRwoOY29tbWl0X3JlcXVlc3QYByABKAsyLS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuQ29tbWl0UmVxdWVzdEgAGoQDCgxTZXR1cFJlcXVlc3QSRwoSZWFnZXJfcmVjZWl2ZV9tb2RlGAMgASgLMikuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLkVhZ2VyTW9kZUgAElEKF2NvbnRyb2xsZWRfcmVjZWl2ZV9tb2RlGAQgASgLMi4uZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLkNvbnRyb2xsZWRNb2RlSAASQQoIbWV0YWRhdGEYASABKAsyLy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUmVxdWVzdE1ldGFkYXRhEhAKCHJlY2VpdmVyGAIgASgJEjUKEmhlYXJ0YmVhdF9pbnRlcnZhbBgFIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI7Chh3cml0ZXNfZG9uZV9ncmFjZV9wZXJpb2QYBiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDwoNY29uc3VtZXJfbW9kZUIJCgdyZXF1ZXN0Il4KHVJlY2VpdmVQYWNrZXRzQ29udHJvbFJlc3BvbnNlEhMKCWhlYXJ0YmVhdBgBIAEoCEgAEh0KE3dyaXRlc19kb25lX3JlcXVlc3QYAiABKAhIAEIJCgdjb250cm9sIrABChZSZWNlaXZlUGFja2V0c1Jlc3BvbnNlEjgKBnBhY2tldBgBIAEoCzImLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5QYWNrZXRIABJQCgdjb250cm9sGAMgASgLMj0uZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLlJlY2VpdmVQYWNrZXRzQ29udHJvbFJlc3BvbnNlSABCCgoIcmVzcG9uc2UiCwoJRWFnZXJNb2RlImgKDkNvbnRyb2xsZWRNb2RlEiEKF3N0YXJ0aW5nX2xvZ2ljYWxfb2Zmc2V0GAEgASgJSAASIAoYZmFsbGJhY2tfc3RhcnRpbmdfb2Zmc2V0GAIgASgJQhEKD3N0YXJ0aW5nX29mZnNldCIfCg1Db21taXRSZXF1ZXN0Eg4KBm9mZnNldBgBIAEoAypVCglMZWFzZVR5cGUSGgoWTEVBU0VfVFlQRV9VTlNQRUNJRklFRBAAEhUKEUxFQVNFX1RZUEVfUkVBREVSEAESFQoRTEVBU0VfVFlQRV9XUklURVIQAjK/CAoQU3RyZWFtaW5nU2VydmljZRJ8CgtTZW5kUGFja2V0cxIyLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5TZW5kUGFja2V0c1JlcXVlc3QaMy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuU2VuZFBhY2tldHNSZXNwb25zZSIAKAEwARKFAQoOUmVjZWl2ZVBhY2tldHMSNS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUmVjZWl2ZVBhY2tldHNSZXF1ZXN0GjYuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLlJlY2VpdmVQYWNrZXRzUmVzcG9uc2UiACgBMAESggEKDVJlY2VpdmVFdmVudHMSNC5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUmVjZWl2ZUV2ZW50c1JlcXVlc3QaNS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuUmVjZWl2ZUV2ZW50c1Jlc3BvbnNlIgAoATABEsEBCgxBY3F1aXJlTGVhc2USMy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTEuQWNxdWlyZUxlYXNlUmVxdWVzdBolLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5MZWFzZSJVgtPkkwJPOgEqIkovdjFhbHBoYTEve3Nlcmllcz1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2NsdXN0ZXJzLyovc2VyaWVzLyp9OmFjcXVpcmVMZWFzZRK7AQoKUmVuZXdMZWFzZRIxLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5SZW5ld0xlYXNlUmVxdWVzdBolLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5MZWFzZSJTgtPkkwJNOgEqIkgvdjFhbHBoYTEve3Nlcmllcz1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2NsdXN0ZXJzLyovc2VyaWVzLyp9OnJlbmV3TGVhc2US0AEKDFJlbGVhc2VMZWFzZRIzLmdvb2dsZS5jbG91ZC52aXNpb25haS52MWFscGhhMS5SZWxlYXNlTGVhc2VSZXF1ZXN0GjQuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxYWxwaGExLlJlbGVhc2VMZWFzZVJlc3BvbnNlIlWC0+STAk86ASoiSi92MWFscGhhMS97c2VyaWVzPXByb2plY3RzLyovbG9jYXRpb25zLyovY2x1c3RlcnMvKi9zZXJpZXMvKn06cmVsZWFzZUxlYXNlGkvKQRd2aXNpb25haS5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1C4wEKImNvbS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFhbHBoYTFCFVN0cmVhbWluZ1NlcnZpY2VQcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL3Zpc2lvbmFpL2FwaXYxYWxwaGExL3Zpc2lvbmFpcGI7dmlzaW9uYWlwYqoCHkdvb2dsZS5DbG91ZC5WaXNpb25BSS5WMUFscGhhMcoCHkdvb2dsZVxDbG91ZFxWaXNpb25BSVxWMWFscGhhMeoCIUdvb2dsZTo6Q2xvdWQ6OlZpc2lvbkFJOjpWMWFscGhhMWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_cloud_visionai_v1alpha1_streaming_resources, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * Request message for ReceiveEvents.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceiveEventsRequest
 */
export type ReceiveEventsRequest = Message<"google.cloud.visionai.v1alpha1.ReceiveEventsRequest"> & {
  /**
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceiveEventsRequest.request
   */
  request: {
    /**
     * The setup request to setup the RPC connection.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.ReceiveEventsRequest.SetupRequest setup_request = 1;
     */
    value: ReceiveEventsRequest_SetupRequest;
    case: "setupRequest";
  } | {
    /**
     * This request checkpoints the consumer's read progress.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.CommitRequest commit_request = 2;
     */
    value: CommitRequest;
    case: "commitRequest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceiveEventsRequest.
 * Use `create(ReceiveEventsRequestSchema)` to create a new message.
 */
export const ReceiveEventsRequestSchema: GenMessage<ReceiveEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 0);

/**
 * SetupRequest is the first message sent to the service to setup the RPC
 * connection.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceiveEventsRequest.SetupRequest
 */
export type ReceiveEventsRequest_SetupRequest = Message<"google.cloud.visionai.v1alpha1.ReceiveEventsRequest.SetupRequest"> & {
  /**
   * The cluster name.
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * The stream name. The service will return the events for the given stream.
   *
   * @generated from field: string stream = 2;
   */
  stream: string;

  /**
   * A name for the receiver to self-identify.
   *
   * This is used to keep track of a receiver's read progress.
   *
   * @generated from field: string receiver = 3;
   */
  receiver: string;

  /**
   * Controller mode configuration for receiving events from the server.
   *
   * @generated from field: google.cloud.visionai.v1alpha1.ControlledMode controlled_mode = 4;
   */
  controlledMode?: ControlledMode;

  /**
   * The maximum duration of server silence before the client determines the
   * server unreachable.
   *
   * The client must either receive an `Event` update or a heart beat message
   * before this duration expires; otherwise, the client will automatically
   * cancel the current connection and retry.
   *
   * @generated from field: google.protobuf.Duration heartbeat_interval = 5;
   */
  heartbeatInterval?: Duration;

  /**
   * The grace period after which a `writes_done_request` is issued, that a
   * `WritesDone` is expected from the client.
   *
   * The server is free to cancel the RPC should this expire.
   *
   * A system default will be chosen if unset.
   *
   * @generated from field: google.protobuf.Duration writes_done_grace_period = 6;
   */
  writesDoneGracePeriod?: Duration;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceiveEventsRequest.SetupRequest.
 * Use `create(ReceiveEventsRequest_SetupRequestSchema)` to create a new message.
 */
export const ReceiveEventsRequest_SetupRequestSchema: GenMessage<ReceiveEventsRequest_SetupRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 0, 0);

/**
 * The event update message.
 *
 * @generated from message google.cloud.visionai.v1alpha1.EventUpdate
 */
export type EventUpdate = Message<"google.cloud.visionai.v1alpha1.EventUpdate"> & {
  /**
   * The name of the stream that the event is attached to.
   *
   * @generated from field: string stream = 1;
   */
  stream: string;

  /**
   * The name of the event.
   *
   * @generated from field: string event = 2;
   */
  event: string;

  /**
   * The name of the series.
   *
   * @generated from field: string series = 3;
   */
  series: string;

  /**
   * The timestamp when the Event update happens.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * The offset of the message that will be used to acknowledge of the message
   * receiving.
   *
   * @generated from field: int64 offset = 5;
   */
  offset: bigint;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.EventUpdate.
 * Use `create(EventUpdateSchema)` to create a new message.
 */
export const EventUpdateSchema: GenMessage<EventUpdate> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 1);

/**
 * Control message for a ReceiveEventsResponse.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceiveEventsControlResponse
 */
export type ReceiveEventsControlResponse = Message<"google.cloud.visionai.v1alpha1.ReceiveEventsControlResponse"> & {
  /**
   * Possible control messages.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceiveEventsControlResponse.control
   */
  control: {
    /**
     * A server heartbeat.
     *
     * @generated from field: bool heartbeat = 1;
     */
    value: boolean;
    case: "heartbeat";
  } | {
    /**
     * A request to the receiver to complete any final writes followed by a
     * `WritesDone`; e.g. issue any final `CommitRequest`s.
     *
     * May be ignored if `WritesDone` has already been issued at any point
     * prior to receiving this message.
     *
     * If `WritesDone` does not get issued, then the server will forcefully
     * cancel the connection, and the receiver will likely receive an
     * uninformative after `Read` returns `false` and `Finish` is called.
     *
     * @generated from field: bool writes_done_request = 2;
     */
    value: boolean;
    case: "writesDoneRequest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceiveEventsControlResponse.
 * Use `create(ReceiveEventsControlResponseSchema)` to create a new message.
 */
export const ReceiveEventsControlResponseSchema: GenMessage<ReceiveEventsControlResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 2);

/**
 * Response message for the ReceiveEvents.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceiveEventsResponse
 */
export type ReceiveEventsResponse = Message<"google.cloud.visionai.v1alpha1.ReceiveEventsResponse"> & {
  /**
   * Possible response types.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceiveEventsResponse.response
   */
  response: {
    /**
     * The event update message.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.EventUpdate event_update = 1;
     */
    value: EventUpdate;
    case: "eventUpdate";
  } | {
    /**
     * A control message from the server.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.ReceiveEventsControlResponse control = 2;
     */
    value: ReceiveEventsControlResponse;
    case: "control";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceiveEventsResponse.
 * Use `create(ReceiveEventsResponseSchema)` to create a new message.
 */
export const ReceiveEventsResponseSchema: GenMessage<ReceiveEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 3);

/**
 * The lease message.
 *
 * @generated from message google.cloud.visionai.v1alpha1.Lease
 */
export type Lease = Message<"google.cloud.visionai.v1alpha1.Lease"> & {
  /**
   * The lease id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The series name.
   *
   * @generated from field: string series = 2;
   */
  series: string;

  /**
   * The owner name.
   *
   * @generated from field: string owner = 3;
   */
  owner: string;

  /**
   * The lease expire time.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;

  /**
   * The lease type.
   *
   * @generated from field: google.cloud.visionai.v1alpha1.LeaseType lease_type = 5;
   */
  leaseType: LeaseType;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.Lease.
 * Use `create(LeaseSchema)` to create a new message.
 */
export const LeaseSchema: GenMessage<Lease> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 4);

/**
 * Request message for acquiring a lease.
 *
 * @generated from message google.cloud.visionai.v1alpha1.AcquireLeaseRequest
 */
export type AcquireLeaseRequest = Message<"google.cloud.visionai.v1alpha1.AcquireLeaseRequest"> & {
  /**
   * The series name.
   *
   * @generated from field: string series = 1;
   */
  series: string;

  /**
   * The owner name.
   *
   * @generated from field: string owner = 2;
   */
  owner: string;

  /**
   * The lease term.
   *
   * @generated from field: google.protobuf.Duration term = 3;
   */
  term?: Duration;

  /**
   * The lease type.
   *
   * @generated from field: google.cloud.visionai.v1alpha1.LeaseType lease_type = 4;
   */
  leaseType: LeaseType;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.AcquireLeaseRequest.
 * Use `create(AcquireLeaseRequestSchema)` to create a new message.
 */
export const AcquireLeaseRequestSchema: GenMessage<AcquireLeaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 5);

/**
 * Request message for renewing a lease.
 *
 * @generated from message google.cloud.visionai.v1alpha1.RenewLeaseRequest
 */
export type RenewLeaseRequest = Message<"google.cloud.visionai.v1alpha1.RenewLeaseRequest"> & {
  /**
   * Lease id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Series name.
   *
   * @generated from field: string series = 2;
   */
  series: string;

  /**
   * Lease owner.
   *
   * @generated from field: string owner = 3;
   */
  owner: string;

  /**
   * Lease term.
   *
   * @generated from field: google.protobuf.Duration term = 4;
   */
  term?: Duration;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.RenewLeaseRequest.
 * Use `create(RenewLeaseRequestSchema)` to create a new message.
 */
export const RenewLeaseRequestSchema: GenMessage<RenewLeaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 6);

/**
 * Request message for releasing lease.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReleaseLeaseRequest
 */
export type ReleaseLeaseRequest = Message<"google.cloud.visionai.v1alpha1.ReleaseLeaseRequest"> & {
  /**
   * Lease id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Series name.
   *
   * @generated from field: string series = 2;
   */
  series: string;

  /**
   * Lease owner.
   *
   * @generated from field: string owner = 3;
   */
  owner: string;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReleaseLeaseRequest.
 * Use `create(ReleaseLeaseRequestSchema)` to create a new message.
 */
export const ReleaseLeaseRequestSchema: GenMessage<ReleaseLeaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 7);

/**
 * Response message for release lease.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReleaseLeaseResponse
 */
export type ReleaseLeaseResponse = Message<"google.cloud.visionai.v1alpha1.ReleaseLeaseResponse"> & {
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReleaseLeaseResponse.
 * Use `create(ReleaseLeaseResponseSchema)` to create a new message.
 */
export const ReleaseLeaseResponseSchema: GenMessage<ReleaseLeaseResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 8);

/**
 * RequestMetadata is the metadata message for the request.
 *
 * @generated from message google.cloud.visionai.v1alpha1.RequestMetadata
 */
export type RequestMetadata = Message<"google.cloud.visionai.v1alpha1.RequestMetadata"> & {
  /**
   * Stream name.
   *
   * @generated from field: string stream = 1;
   */
  stream: string;

  /**
   * Evevt name.
   *
   * @generated from field: string event = 2;
   */
  event: string;

  /**
   * Series name.
   *
   * @generated from field: string series = 3;
   */
  series: string;

  /**
   * Lease id.
   *
   * @generated from field: string lease_id = 4;
   */
  leaseId: string;

  /**
   * Owner name.
   *
   * @generated from field: string owner = 5;
   */
  owner: string;

  /**
   * Lease term specifies how long the client wants the session to be maintained
   * by the server after the client leaves. If the lease term is not set, the
   * server will release the session immediately and the client cannot reconnect
   * to the same session later.
   *
   * @generated from field: google.protobuf.Duration lease_term = 6;
   */
  leaseTerm?: Duration;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.RequestMetadata.
 * Use `create(RequestMetadataSchema)` to create a new message.
 */
export const RequestMetadataSchema: GenMessage<RequestMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 9);

/**
 * Request message for sending packets.
 *
 * @generated from message google.cloud.visionai.v1alpha1.SendPacketsRequest
 */
export type SendPacketsRequest = Message<"google.cloud.visionai.v1alpha1.SendPacketsRequest"> & {
  /**
   * @generated from oneof google.cloud.visionai.v1alpha1.SendPacketsRequest.request
   */
  request: {
    /**
     * Packets sent over the streaming rpc.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.Packet packet = 1;
     */
    value: Packet;
    case: "packet";
  } | {
    /**
     * The first message of the streaming rpc including the request metadata.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.RequestMetadata metadata = 2;
     */
    value: RequestMetadata;
    case: "metadata";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.SendPacketsRequest.
 * Use `create(SendPacketsRequestSchema)` to create a new message.
 */
export const SendPacketsRequestSchema: GenMessage<SendPacketsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 10);

/**
 * Response message for sending packets.
 *
 * @generated from message google.cloud.visionai.v1alpha1.SendPacketsResponse
 */
export type SendPacketsResponse = Message<"google.cloud.visionai.v1alpha1.SendPacketsResponse"> & {
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.SendPacketsResponse.
 * Use `create(SendPacketsResponseSchema)` to create a new message.
 */
export const SendPacketsResponseSchema: GenMessage<SendPacketsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 11);

/**
 * Request message for receiving packets.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceivePacketsRequest
 */
export type ReceivePacketsRequest = Message<"google.cloud.visionai.v1alpha1.ReceivePacketsRequest"> & {
  /**
   * Possible request types from the client.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceivePacketsRequest.request
   */
  request: {
    /**
     * The request to setup the initial state of session.
     *
     * The client must send and only send this as the first message.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.ReceivePacketsRequest.SetupRequest setup_request = 6;
     */
    value: ReceivePacketsRequest_SetupRequest;
    case: "setupRequest";
  } | {
    /**
     * This request checkpoints the consumer's read progress.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.CommitRequest commit_request = 7;
     */
    value: CommitRequest;
    case: "commitRequest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceivePacketsRequest.
 * Use `create(ReceivePacketsRequestSchema)` to create a new message.
 */
export const ReceivePacketsRequestSchema: GenMessage<ReceivePacketsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 12);

/**
 * The message specifying the initial settings for the ReceivePackets session.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceivePacketsRequest.SetupRequest
 */
export type ReceivePacketsRequest_SetupRequest = Message<"google.cloud.visionai.v1alpha1.ReceivePacketsRequest.SetupRequest"> & {
  /**
   * The mode in which the consumer reads messages.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceivePacketsRequest.SetupRequest.consumer_mode
   */
  consumerMode: {
    /**
     * Options for configuring eager mode.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.EagerMode eager_receive_mode = 3;
     */
    value: EagerMode;
    case: "eagerReceiveMode";
  } | {
    /**
     * Options for configuring controlled mode.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.ControlledMode controlled_receive_mode = 4;
     */
    value: ControlledMode;
    case: "controlledReceiveMode";
  } | { case: undefined; value?: undefined };

  /**
   * The configurations that specify where packets are retrieved.
   *
   * @generated from field: google.cloud.visionai.v1alpha1.RequestMetadata metadata = 1;
   */
  metadata?: RequestMetadata;

  /**
   * A name for the receiver to self-identify.
   *
   * This is used to keep track of a receiver's read progress.
   *
   * @generated from field: string receiver = 2;
   */
  receiver: string;

  /**
   * The maximum duration of server silence before the client determines the
   * server unreachable.
   *
   * The client must either receive a `Packet` or a heart beat message before
   * this duration expires; otherwise, the client will automatically cancel
   * the current connection and retry.
   *
   * @generated from field: google.protobuf.Duration heartbeat_interval = 5;
   */
  heartbeatInterval?: Duration;

  /**
   * The grace period after which a `writes_done_request` is issued, that a
   * `WritesDone` is expected from the client.
   *
   * The server is free to cancel the RPC should this expire.
   *
   * A system default will be chosen if unset.
   *
   * @generated from field: google.protobuf.Duration writes_done_grace_period = 6;
   */
  writesDoneGracePeriod?: Duration;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceivePacketsRequest.SetupRequest.
 * Use `create(ReceivePacketsRequest_SetupRequestSchema)` to create a new message.
 */
export const ReceivePacketsRequest_SetupRequestSchema: GenMessage<ReceivePacketsRequest_SetupRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 12, 0);

/**
 * Control message for a ReceivePacketsResponse.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceivePacketsControlResponse
 */
export type ReceivePacketsControlResponse = Message<"google.cloud.visionai.v1alpha1.ReceivePacketsControlResponse"> & {
  /**
   * Possible control messages.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceivePacketsControlResponse.control
   */
  control: {
    /**
     * A server heartbeat.
     *
     * @generated from field: bool heartbeat = 1;
     */
    value: boolean;
    case: "heartbeat";
  } | {
    /**
     * A request to the receiver to complete any final writes followed by a
     * `WritesDone`; e.g. issue any final `CommitRequest`s.
     *
     * May be ignored if `WritesDone` has already been issued at any point
     * prior to receiving this message.
     *
     * If `WritesDone` does not get issued, then the server will forcefully
     * cancel the connection, and the receiver will likely receive an
     * uninformative after `Read` returns `false` and `Finish` is called.
     *
     * @generated from field: bool writes_done_request = 2;
     */
    value: boolean;
    case: "writesDoneRequest";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceivePacketsControlResponse.
 * Use `create(ReceivePacketsControlResponseSchema)` to create a new message.
 */
export const ReceivePacketsControlResponseSchema: GenMessage<ReceivePacketsControlResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 13);

/**
 * Response message from ReceivePackets.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ReceivePacketsResponse
 */
export type ReceivePacketsResponse = Message<"google.cloud.visionai.v1alpha1.ReceivePacketsResponse"> & {
  /**
   * Possible response types.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ReceivePacketsResponse.response
   */
  response: {
    /**
     * A genuine data payload originating from the sender.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.Packet packet = 1;
     */
    value: Packet;
    case: "packet";
  } | {
    /**
     * A control message from the server.
     *
     * @generated from field: google.cloud.visionai.v1alpha1.ReceivePacketsControlResponse control = 3;
     */
    value: ReceivePacketsControlResponse;
    case: "control";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ReceivePacketsResponse.
 * Use `create(ReceivePacketsResponseSchema)` to create a new message.
 */
export const ReceivePacketsResponseSchema: GenMessage<ReceivePacketsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 14);

/**
 * The options for receiver under the eager mode.
 *
 * @generated from message google.cloud.visionai.v1alpha1.EagerMode
 */
export type EagerMode = Message<"google.cloud.visionai.v1alpha1.EagerMode"> & {
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.EagerMode.
 * Use `create(EagerModeSchema)` to create a new message.
 */
export const EagerModeSchema: GenMessage<EagerMode> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 15);

/**
 * The options for receiver under the controlled mode.
 *
 * @generated from message google.cloud.visionai.v1alpha1.ControlledMode
 */
export type ControlledMode = Message<"google.cloud.visionai.v1alpha1.ControlledMode"> & {
  /**
   * This is the offset from which to start receiveing.
   *
   * @generated from oneof google.cloud.visionai.v1alpha1.ControlledMode.starting_offset
   */
  startingOffset: {
    /**
     * This can be set to the following logical starting points:
     *
     * "begin": This will read from the earliest available message.
     *
     * "most-recent": This will read from the latest available message.
     *
     * "end": This will read only future messages.
     *
     * "stored": This will resume reads one past the last committed offset.
     *           It is the only option that resumes progress; all others
     *           jump unilaterally.
     *
     * @generated from field: string starting_logical_offset = 1;
     */
    value: string;
    case: "startingLogicalOffset";
  } | { case: undefined; value?: undefined };

  /**
   * This is the logical starting point to fallback upon should the
   * specified starting offset be unavailable.
   *
   * This can be one of the following values:
   *
   * "begin": This will read from the earliest available message.
   *
   * "end": This will read only future messages.
   *
   * @generated from field: string fallback_starting_offset = 2;
   */
  fallbackStartingOffset: string;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.ControlledMode.
 * Use `create(ControlledModeSchema)` to create a new message.
 */
export const ControlledModeSchema: GenMessage<ControlledMode> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 16);

/**
 * The message for explicitly committing the read progress.
 *
 * This may only be used when `ReceivePacketsControlledMode` is set in the
 * initial setup request.
 *
 * @generated from message google.cloud.visionai.v1alpha1.CommitRequest
 */
export type CommitRequest = Message<"google.cloud.visionai.v1alpha1.CommitRequest"> & {
  /**
   * The offset to commit.
   *
   * @generated from field: int64 offset = 1;
   */
  offset: bigint;
};

/**
 * Describes the message google.cloud.visionai.v1alpha1.CommitRequest.
 * Use `create(CommitRequestSchema)` to create a new message.
 */
export const CommitRequestSchema: GenMessage<CommitRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 17);

/**
 * The lease type.
 *
 * @generated from enum google.cloud.visionai.v1alpha1.LeaseType
 */
export enum LeaseType {
  /**
   * Lease type unspecified.
   *
   * @generated from enum value: LEASE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Lease for stream reader.
   *
   * @generated from enum value: LEASE_TYPE_READER = 1;
   */
  READER = 1,

  /**
   * Lease for stream writer.
   *
   * @generated from enum value: LEASE_TYPE_WRITER = 2;
   */
  WRITER = 2,
}

/**
 * Describes the enum google.cloud.visionai.v1alpha1.LeaseType.
 */
export const LeaseTypeSchema: GenEnum<LeaseType> = /*@__PURE__*/
  enumDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 0);

/**
 * Streaming service for receiving and sending packets.
 *
 * @generated from service google.cloud.visionai.v1alpha1.StreamingService
 */
export const StreamingService: GenService<{
  /**
   * Send packets to the series.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.SendPackets
   */
  sendPackets: {
    methodKind: "bidi_streaming";
    input: typeof SendPacketsRequestSchema;
    output: typeof SendPacketsResponseSchema;
  },
  /**
   * Receive packets from the series.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.ReceivePackets
   */
  receivePackets: {
    methodKind: "bidi_streaming";
    input: typeof ReceivePacketsRequestSchema;
    output: typeof ReceivePacketsResponseSchema;
  },
  /**
   * Receive events given the stream name.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.ReceiveEvents
   */
  receiveEvents: {
    methodKind: "bidi_streaming";
    input: typeof ReceiveEventsRequestSchema;
    output: typeof ReceiveEventsResponseSchema;
  },
  /**
   * AcquireLease acquires a lease.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.AcquireLease
   */
  acquireLease: {
    methodKind: "unary";
    input: typeof AcquireLeaseRequestSchema;
    output: typeof LeaseSchema;
  },
  /**
   * RenewLease renews a lease.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.RenewLease
   */
  renewLease: {
    methodKind: "unary";
    input: typeof RenewLeaseRequestSchema;
    output: typeof LeaseSchema;
  },
  /**
   * RleaseLease releases a lease.
   *
   * @generated from rpc google.cloud.visionai.v1alpha1.StreamingService.ReleaseLease
   */
  releaseLease: {
    methodKind: "unary";
    input: typeof ReleaseLeaseRequestSchema;
    output: typeof ReleaseLeaseResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_visionai_v1alpha1_streaming_service, 0);

