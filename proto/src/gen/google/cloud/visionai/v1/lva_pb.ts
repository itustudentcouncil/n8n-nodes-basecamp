// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/visionai/v1/lva.proto (package google.cloud.visionai.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/visionai/v1/lva.proto.
 */
export const file_google_cloud_visionai_v1_lva: GenFile = /*@__PURE__*/
  fileDesc("CiJnb29nbGUvY2xvdWQvdmlzaW9uYWkvdjEvbHZhLnByb3RvEhhnb29nbGUuY2xvdWQudmlzaW9uYWkudjEiygQKEk9wZXJhdG9yRGVmaW5pdGlvbhIQCghvcGVyYXRvchgBIAEoCRJTCgppbnB1dF9hcmdzGAIgAygLMj8uZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLk9wZXJhdG9yRGVmaW5pdGlvbi5Bcmd1bWVudERlZmluaXRpb24SVAoLb3V0cHV0X2FyZ3MYAyADKAsyPy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuT3BlcmF0b3JEZWZpbml0aW9uLkFyZ3VtZW50RGVmaW5pdGlvbhJUCgphdHRyaWJ1dGVzGAQgAygLMkAuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLk9wZXJhdG9yRGVmaW5pdGlvbi5BdHRyaWJ1dGVEZWZpbml0aW9uEkIKCXJlc291cmNlcxgFIAEoCzIvLmdvb2dsZS5jbG91ZC52aXNpb25haS52MS5SZXNvdXJjZVNwZWNpZmljYXRpb24SGQoRc2hvcnRfZGVzY3JpcHRpb24YBiABKAkSEwoLZGVzY3JpcHRpb24YByABKAkaNAoSQXJndW1lbnREZWZpbml0aW9uEhAKCGFyZ3VtZW50GAEgASgJEgwKBHR5cGUYAiABKAkadwoTQXR0cmlidXRlRGVmaW5pdGlvbhIRCglhdHRyaWJ1dGUYASABKAkSDAoEdHlwZRgCIAEoCRI/Cg1kZWZhdWx0X3ZhbHVlGAMgASgLMiguZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLkF0dHJpYnV0ZVZhbHVlIogBChVSZXNvdXJjZVNwZWNpZmljYXRpb24SCwoDY3B1GAEgASgJEhIKCmNwdV9saW1pdHMYBSABKAkSDgoGbWVtb3J5GAIgASgJEhUKDW1lbW9yeV9saW1pdHMYBiABKAkSDAoEZ3B1cxgDIAEoBRIZChFsYXRlbmN5X2J1ZGdldF9tcxgEIAEoBSJNCg5BdHRyaWJ1dGVWYWx1ZRILCgFpGAEgASgDSAASCwoBZhgCIAEoAkgAEgsKAWIYAyABKAhIABILCgFzGAQgASgMSABCBwoFdmFsdWUi2wUKEkFuYWx5emVyRGVmaW5pdGlvbhIQCghhbmFseXplchgBIAEoCRIQCghvcGVyYXRvchgCIAEoCRJICgZpbnB1dHMYAyADKAsyOC5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuQW5hbHl6ZXJEZWZpbml0aW9uLlN0cmVhbUlucHV0EkYKBWF0dHJzGAQgAygLMjcuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLkFuYWx5emVyRGVmaW5pdGlvbi5BdHRyc0VudHJ5ElAKDWRlYnVnX29wdGlvbnMYBSABKAsyOS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuQW5hbHl6ZXJEZWZpbml0aW9uLkRlYnVnT3B0aW9ucxJUCg9vcGVyYXRvcl9vcHRpb24YBiABKAsyOy5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuQW5hbHl6ZXJEZWZpbml0aW9uLk9wZXJhdG9yT3B0aW9uGhwKC1N0cmVhbUlucHV0Eg0KBWlucHV0GAEgASgJGr8BCgxEZWJ1Z09wdGlvbnMScgoVZW52aXJvbm1lbnRfdmFyaWFibGVzGAEgAygLMlMuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLkFuYWx5emVyRGVmaW5pdGlvbi5EZWJ1Z09wdGlvbnMuRW52aXJvbm1lbnRWYXJpYWJsZXNFbnRyeRo7ChlFbnZpcm9ubWVudFZhcmlhYmxlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaLwoOT3BlcmF0b3JPcHRpb24SCwoDdGFnGAEgASgJEhAKCHJlZ2lzdHJ5GAIgASgJGlYKCkF0dHJzRW50cnkSCwoDa2V5GAEgASgJEjcKBXZhbHVlGAIgASgLMiguZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLkF0dHJpYnV0ZVZhbHVlOgI4ASJVChJBbmFseXNpc0RlZmluaXRpb24SPwoJYW5hbHl6ZXJzGAEgAygLMiwuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLkFuYWx5emVyRGVmaW5pdGlvbiK8AQoJUnVuU3RhdHVzEjgKBXN0YXRlGAEgASgOMikuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLlJ1blN0YXR1cy5TdGF0ZRIOCgZyZWFzb24YAiABKAkiZQoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIQCgxJTklUSUFMSVpJTkcQARILCgdSVU5OSU5HEAISDQoJQ09NUExFVEVEEAMSCgoGRkFJTEVEEAQSCwoHUEVORElORxAFKj0KB1J1bk1vZGUSGAoUUlVOX01PREVfVU5TUEVDSUZJRUQQABIICgRMSVZFEAESDgoKU1VCTUlTU0lPThACQrgBChxjb20uZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxQghMdmFQcm90b1ABWjhjbG91ZC5nb29nbGUuY29tL2dvL3Zpc2lvbmFpL2FwaXYxL3Zpc2lvbmFpcGI7dmlzaW9uYWlwYqoCGEdvb2dsZS5DbG91ZC5WaXNpb25BSS5WMcoCGEdvb2dsZVxDbG91ZFxWaXNpb25BSVxWMeoCG0dvb2dsZTo6Q2xvdWQ6OlZpc2lvbkFJOjpWMWIGcHJvdG8z");

/**
 * Defines the interface of an Operator.
 *
 * Arguments to an operator are input/output streams that are getting
 * processesed/returned while attributes are fixed configuration parameters.
 *
 * @generated from message google.cloud.visionai.v1.OperatorDefinition
 */
export type OperatorDefinition = Message<"google.cloud.visionai.v1.OperatorDefinition"> & {
  /**
   * The name of this operator.
   *
   * Tentatively [A-Z][a-zA-Z0-9]*, e.g., BboxCounter, PetDetector,
   * PetDetector1.
   *
   * @generated from field: string operator = 1;
   */
  operator: string;

  /**
   * Declares input arguments.
   *
   * @generated from field: repeated google.cloud.visionai.v1.OperatorDefinition.ArgumentDefinition input_args = 2;
   */
  inputArgs: OperatorDefinition_ArgumentDefinition[];

  /**
   * Declares output arguments.
   *
   * @generated from field: repeated google.cloud.visionai.v1.OperatorDefinition.ArgumentDefinition output_args = 3;
   */
  outputArgs: OperatorDefinition_ArgumentDefinition[];

  /**
   * Declares the attributes.
   *
   * @generated from field: repeated google.cloud.visionai.v1.OperatorDefinition.AttributeDefinition attributes = 4;
   */
  attributes: OperatorDefinition_AttributeDefinition[];

  /**
   * The resources for running the operator.
   *
   * @generated from field: google.cloud.visionai.v1.ResourceSpecification resources = 5;
   */
  resources?: ResourceSpecification;

  /**
   * Short description of the operator.
   *
   * @generated from field: string short_description = 6;
   */
  shortDescription: string;

  /**
   * Full description of the operator.
   *
   * @generated from field: string description = 7;
   */
  description: string;
};

/**
 * Describes the message google.cloud.visionai.v1.OperatorDefinition.
 * Use `create(OperatorDefinitionSchema)` to create a new message.
 */
export const OperatorDefinitionSchema: GenMessage<OperatorDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 0);

/**
 * Defines an argument to an operator.
 *
 * Used for both inputs and outputs.
 *
 * @generated from message google.cloud.visionai.v1.OperatorDefinition.ArgumentDefinition
 */
export type OperatorDefinition_ArgumentDefinition = Message<"google.cloud.visionai.v1.OperatorDefinition.ArgumentDefinition"> & {
  /**
   * The name of the argument.
   *
   * Tentatively [a-z]([_a-z0-9]*[a-z0-9])?, e.g., video, audio,
   * high_fps_frame.
   *
   * @generated from field: string argument = 1;
   */
  argument: string;

  /**
   * The data type of the argument.
   *
   * This should match the textual representation of a stream/Packet type.
   *
   * @generated from field: string type = 2;
   */
  type: string;
};

/**
 * Describes the message google.cloud.visionai.v1.OperatorDefinition.ArgumentDefinition.
 * Use `create(OperatorDefinition_ArgumentDefinitionSchema)` to create a new message.
 */
export const OperatorDefinition_ArgumentDefinitionSchema: GenMessage<OperatorDefinition_ArgumentDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 0, 0);

/**
 * Defines an attribute of an operator.
 *
 * @generated from message google.cloud.visionai.v1.OperatorDefinition.AttributeDefinition
 */
export type OperatorDefinition_AttributeDefinition = Message<"google.cloud.visionai.v1.OperatorDefinition.AttributeDefinition"> & {
  /**
   * The name of the attribute.
   *
   * Tentatively [a-z]([_a-z0-9]*[a-z0-9])?, e.g., max_frames_per_video,
   * resize_height.
   *
   * @generated from field: string attribute = 1;
   */
  attribute: string;

  /**
   * The type of this attribute.
   *
   * See attribute_value.proto for possibilities.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * The default value for the attribute.
   *
   * @generated from field: google.cloud.visionai.v1.AttributeValue default_value = 3;
   */
  defaultValue?: AttributeValue;
};

/**
 * Describes the message google.cloud.visionai.v1.OperatorDefinition.AttributeDefinition.
 * Use `create(OperatorDefinition_AttributeDefinitionSchema)` to create a new message.
 */
export const OperatorDefinition_AttributeDefinitionSchema: GenMessage<OperatorDefinition_AttributeDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 0, 1);

/**
 * ResourceSpec collects a set of resources that can
 * be used to specify requests and requirements.
 *
 * Note: Highly experimental as this can be runtime dependent.
 * Can use the "extras" field to experiment first before trying
 * to abstract it.
 *
 * @generated from message google.cloud.visionai.v1.ResourceSpecification
 */
export type ResourceSpecification = Message<"google.cloud.visionai.v1.ResourceSpecification"> & {
  /**
   * CPU specification.
   *
   * Examples:
   * "100m", "0.5", "1", "2", ... correspond to
   * 0.1, half, 1, or 2 cpus.
   *
   * Leave empty to let the system decide.
   *
   * Note that this does *not* determine the cpu vender/make,
   * or its underlying clock speed and specific SIMD features.
   * It is only the amount time it requires in timeslicing.
   *
   * @generated from field: string cpu = 1;
   */
  cpu: string;

  /**
   * CPU limit.
   *
   * Examples:
   * "100m", "0.5", "1", "2", ... correspond to
   * 0.1, half, 1, or 2 cpus.
   *
   * Leave empty to indicate no limit.
   *
   * @generated from field: string cpu_limits = 5;
   */
  cpuLimits: string;

  /**
   * Memory specification (in bytes).
   *
   * Examples:
   * "128974848", "129e6", "129M", "123Mi", ... correspond to
   * 128974848 bytes, 129000000 bytes, 129 mebibytes, 123 megabytes.
   *
   * Leave empty to let the system decide.
   *
   * @generated from field: string memory = 2;
   */
  memory: string;

  /**
   * Memory usage limits.
   *
   * Examples:
   * "128974848", "129e6", "129M", "123Mi", ... correspond to
   * 128974848 bytes, 129000000 bytes, 129 mebibytes, 123 megabytes.
   *
   * Leave empty to indicate no limit.
   *
   * @generated from field: string memory_limits = 6;
   */
  memoryLimits: string;

  /**
   * Number of gpus.
   *
   * @generated from field: int32 gpus = 3;
   */
  gpus: number;

  /**
   * The maximum latency that this operator may use to process an element.
   *
   * If non positive, then a system default will be used.
   * Operator developers should arrange for the system compute resources to be
   * aligned with this latency budget; e.g. if you want a ML model to produce
   * results within 500ms, then you should make sure you request enough
   * cpu/gpu/memory to achieve that.
   *
   * @generated from field: int32 latency_budget_ms = 4;
   */
  latencyBudgetMs: number;
};

/**
 * Describes the message google.cloud.visionai.v1.ResourceSpecification.
 * Use `create(ResourceSpecificationSchema)` to create a new message.
 */
export const ResourceSpecificationSchema: GenMessage<ResourceSpecification> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 1);

/**
 * Represents an actual value of an operator attribute.
 *
 * @generated from message google.cloud.visionai.v1.AttributeValue
 */
export type AttributeValue = Message<"google.cloud.visionai.v1.AttributeValue"> & {
  /**
   * Attribute value.
   *
   * @generated from oneof google.cloud.visionai.v1.AttributeValue.value
   */
  value: {
    /**
     * int.
     *
     * @generated from field: int64 i = 1;
     */
    value: bigint;
    case: "i";
  } | {
    /**
     * float.
     *
     * @generated from field: float f = 2;
     */
    value: number;
    case: "f";
  } | {
    /**
     * bool.
     *
     * @generated from field: bool b = 3;
     */
    value: boolean;
    case: "b";
  } | {
    /**
     * string.
     *
     * @generated from field: bytes s = 4;
     */
    value: Uint8Array;
    case: "s";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.visionai.v1.AttributeValue.
 * Use `create(AttributeValueSchema)` to create a new message.
 */
export const AttributeValueSchema: GenMessage<AttributeValue> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 2);

/**
 * Defines an Analyzer.
 *
 * An analyzer processes data from its input streams using the logic defined in
 * the Operator that it represents. Of course, it produces data for the output
 * streams declared in the Operator.
 *
 * @generated from message google.cloud.visionai.v1.AnalyzerDefinition
 */
export type AnalyzerDefinition = Message<"google.cloud.visionai.v1.AnalyzerDefinition"> & {
  /**
   * The name of this analyzer.
   *
   * Tentatively [a-z][a-z0-9]*(_[a-z0-9]+)*.
   *
   * @generated from field: string analyzer = 1;
   */
  analyzer: string;

  /**
   * The name of the operator that this analyzer runs.
   *
   * Must match the name of a supported operator.
   *
   * @generated from field: string operator = 2;
   */
  operator: string;

  /**
   * Input streams.
   *
   * @generated from field: repeated google.cloud.visionai.v1.AnalyzerDefinition.StreamInput inputs = 3;
   */
  inputs: AnalyzerDefinition_StreamInput[];

  /**
   * The attribute values that this analyzer applies to the operator.
   *
   * Supply a mapping between the attribute names and the actual value you wish
   * to apply. If an attribute name is omitted, then it will take a
   * preconfigured default value.
   *
   * @generated from field: map<string, google.cloud.visionai.v1.AttributeValue> attrs = 4;
   */
  attrs: { [key: string]: AttributeValue };

  /**
   * Debug options.
   *
   * @generated from field: google.cloud.visionai.v1.AnalyzerDefinition.DebugOptions debug_options = 5;
   */
  debugOptions?: AnalyzerDefinition_DebugOptions;

  /**
   * Operator option.
   *
   * @generated from field: google.cloud.visionai.v1.AnalyzerDefinition.OperatorOption operator_option = 6;
   */
  operatorOption?: AnalyzerDefinition_OperatorOption;
};

/**
 * Describes the message google.cloud.visionai.v1.AnalyzerDefinition.
 * Use `create(AnalyzerDefinitionSchema)` to create a new message.
 */
export const AnalyzerDefinitionSchema: GenMessage<AnalyzerDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 3);

/**
 * The inputs to this analyzer.
 *
 * We accept input name references of the following form:
 * <analyzer-name>:<output-argument-name>
 *
 * Example:
 *
 * Suppose you had an operator named "SomeOp" that has 2 output
 * arguments, the first of which is named "foo" and the second of which is
 * named "bar", and an operator named "MyOp" that accepts 2 inputs.
 *
 * Also suppose that there is an analyzer named "some-analyzer" that is
 * running "SomeOp" and another analyzer named "my-analyzer" running "MyOp".
 *
 * To indicate that "my-analyzer" is to consume "some-analyzer"'s "foo"
 * output as its first input and "some-analyzer"'s "bar" output as its
 * second input, you can set this field to the following:
 * input = ["some-analyzer:foo", "some-analyzer:bar"]
 *
 * @generated from message google.cloud.visionai.v1.AnalyzerDefinition.StreamInput
 */
export type AnalyzerDefinition_StreamInput = Message<"google.cloud.visionai.v1.AnalyzerDefinition.StreamInput"> & {
  /**
   * The name of the stream input (as discussed above).
   *
   * @generated from field: string input = 1;
   */
  input: string;
};

/**
 * Describes the message google.cloud.visionai.v1.AnalyzerDefinition.StreamInput.
 * Use `create(AnalyzerDefinition_StreamInputSchema)` to create a new message.
 */
export const AnalyzerDefinition_StreamInputSchema: GenMessage<AnalyzerDefinition_StreamInput> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 3, 0);

/**
 * Options available for debugging purposes only.
 *
 * @generated from message google.cloud.visionai.v1.AnalyzerDefinition.DebugOptions
 */
export type AnalyzerDefinition_DebugOptions = Message<"google.cloud.visionai.v1.AnalyzerDefinition.DebugOptions"> & {
  /**
   * Environment variables.
   *
   * @generated from field: map<string, string> environment_variables = 1;
   */
  environmentVariables: { [key: string]: string };
};

/**
 * Describes the message google.cloud.visionai.v1.AnalyzerDefinition.DebugOptions.
 * Use `create(AnalyzerDefinition_DebugOptionsSchema)` to create a new message.
 */
export const AnalyzerDefinition_DebugOptionsSchema: GenMessage<AnalyzerDefinition_DebugOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 3, 1);

/**
 * Option related to the operator.
 *
 * @generated from message google.cloud.visionai.v1.AnalyzerDefinition.OperatorOption
 */
export type AnalyzerDefinition_OperatorOption = Message<"google.cloud.visionai.v1.AnalyzerDefinition.OperatorOption"> & {
  /**
   * Tag of the operator.
   *
   * @generated from field: string tag = 1;
   */
  tag: string;

  /**
   * Registry of the operator. e.g. public, dev.
   *
   * @generated from field: string registry = 2;
   */
  registry: string;
};

/**
 * Describes the message google.cloud.visionai.v1.AnalyzerDefinition.OperatorOption.
 * Use `create(AnalyzerDefinition_OperatorOptionSchema)` to create a new message.
 */
export const AnalyzerDefinition_OperatorOptionSchema: GenMessage<AnalyzerDefinition_OperatorOption> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 3, 2);

/**
 * Defines a full analysis.
 *
 * This is a description of the overall live analytics pipeline.
 * You may think of this as an edge list representation of a multigraph.
 *
 * This may be directly authored by a human in protobuf textformat, or it may be
 * generated by a programming API (perhaps Python or JavaScript depending on
 * context).
 *
 * @generated from message google.cloud.visionai.v1.AnalysisDefinition
 */
export type AnalysisDefinition = Message<"google.cloud.visionai.v1.AnalysisDefinition"> & {
  /**
   * Analyzer definitions.
   *
   * @generated from field: repeated google.cloud.visionai.v1.AnalyzerDefinition analyzers = 1;
   */
  analyzers: AnalyzerDefinition[];
};

/**
 * Describes the message google.cloud.visionai.v1.AnalysisDefinition.
 * Use `create(AnalysisDefinitionSchema)` to create a new message.
 */
export const AnalysisDefinitionSchema: GenMessage<AnalysisDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 4);

/**
 * Message describing the status of the Process.
 *
 * @generated from message google.cloud.visionai.v1.RunStatus
 */
export type RunStatus = Message<"google.cloud.visionai.v1.RunStatus"> & {
  /**
   * The state of the Process.
   *
   * @generated from field: google.cloud.visionai.v1.RunStatus.State state = 1;
   */
  state: RunStatus_State;

  /**
   * The reason of becoming the state.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message google.cloud.visionai.v1.RunStatus.
 * Use `create(RunStatusSchema)` to create a new message.
 */
export const RunStatusSchema: GenMessage<RunStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_lva, 5);

/**
 * State represents the running status of the Process.
 *
 * @generated from enum google.cloud.visionai.v1.RunStatus.State
 */
export enum RunStatus_State {
  /**
   * State is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * INITIALIZING means the Process is scheduled but yet ready to handle
   * real traffic.
   *
   * @generated from enum value: INITIALIZING = 1;
   */
  INITIALIZING = 1,

  /**
   * RUNNING means the Process is up running and handling traffic.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * COMPLETED means the Process has completed the processing, especially
   * for non-streaming use case.
   *
   * @generated from enum value: COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * FAILED means the Process failed to complete the processing.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * PENDING means the Process is created but yet to be scheduled.
   *
   * @generated from enum value: PENDING = 5;
   */
  PENDING = 5,
}

/**
 * Describes the enum google.cloud.visionai.v1.RunStatus.State.
 */
export const RunStatus_StateSchema: GenEnum<RunStatus_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_visionai_v1_lva, 5, 0);

/**
 * RunMode represents the mode to launch the Process on.
 *
 * @generated from enum google.cloud.visionai.v1.RunMode
 */
export enum RunMode {
  /**
   * Mode is unspecified.
   *
   * @generated from enum value: RUN_MODE_UNSPECIFIED = 0;
   */
  RUN_MODE_UNSPECIFIED = 0,

  /**
   * Live mode. Meaning the Process is launched to handle live video
   * source, and possible packet drops are expected.
   *
   * @generated from enum value: LIVE = 1;
   */
  LIVE = 1,

  /**
   * Submission mode. Meaning the Process is launched to handle bounded video
   * files, with no packet drop. Completion status is tracked.
   *
   * @generated from enum value: SUBMISSION = 2;
   */
  SUBMISSION = 2,
}

/**
 * Describes the enum google.cloud.visionai.v1.RunMode.
 */
export const RunModeSchema: GenEnum<RunMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_visionai_v1_lva, 0);

