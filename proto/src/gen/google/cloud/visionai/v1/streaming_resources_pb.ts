// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/visionai/v1/streaming_resources.proto (package google.cloud.visionai.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/visionai/v1/streaming_resources.proto.
 */
export const file_google_cloud_visionai_v1_streaming_resources: GenFile = /*@__PURE__*/
  fileDesc("CjJnb29nbGUvY2xvdWQvdmlzaW9uYWkvdjEvc3RyZWFtaW5nX3Jlc291cmNlcy5wcm90bxIYZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxIs8BChlHc3RyZWFtZXJCdWZmZXJEZXNjcmlwdG9yEhMKC2NhcHNfc3RyaW5nGAEgASgJEhQKDGlzX2tleV9mcmFtZRgCIAEoCBIsCghwdHNfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZHRzX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisKCGR1cmF0aW9uGAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIkMKElJhd0ltYWdlRGVzY3JpcHRvchIOCgZmb3JtYXQYASABKAkSDgoGaGVpZ2h0GAIgASgFEg0KBXdpZHRoGAMgASgFIskCCgpQYWNrZXRUeXBlEhIKCnR5cGVfY2xhc3MYASABKAkSTAoPdHlwZV9kZXNjcmlwdG9yGAIgASgLMjMuZ29vZ2xlLmNsb3VkLnZpc2lvbmFpLnYxLlBhY2tldFR5cGUuVHlwZURlc2NyaXB0b3Ia2AEKDlR5cGVEZXNjcmlwdG9yEloKG2dzdHJlYW1lcl9idWZmZXJfZGVzY3JpcHRvchgCIAEoCzIzLmdvb2dsZS5jbG91ZC52aXNpb25haS52MS5Hc3RyZWFtZXJCdWZmZXJEZXNjcmlwdG9ySAASTAoUcmF3X2ltYWdlX2Rlc2NyaXB0b3IYAyABKAsyLC5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuUmF3SW1hZ2VEZXNjcmlwdG9ySAASDAoEdHlwZRgBIAEoCUIOCgx0eXBlX2RldGFpbHMiUQoOU2VydmVyTWV0YWRhdGESDgoGb2Zmc2V0GAEgASgDEi8KC2luZ2VzdF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJFCg5TZXJpZXNNZXRhZGF0YRIzCgZzZXJpZXMYASABKAlCI/pBIAoedmlzaW9uYWkuZ29vZ2xlYXBpcy5jb20vU2VyaWVzIvQCCgxQYWNrZXRIZWFkZXISNQoMY2FwdHVyZV90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEEEjoKBHR5cGUYAiABKAsyJC5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuUGFja2V0VHlwZUIG4EEE4EEFEi4KCG1ldGFkYXRhGAMgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEID4EEEEkYKD3NlcnZlcl9tZXRhZGF0YRgEIAEoCzIoLmdvb2dsZS5jbG91ZC52aXNpb25haS52MS5TZXJ2ZXJNZXRhZGF0YUID4EEDEkkKD3Nlcmllc19tZXRhZGF0YRgFIAEoCzIoLmdvb2dsZS5jbG91ZC52aXNpb25haS52MS5TZXJpZXNNZXRhZGF0YUIG4EEE4EEFEhIKBWZsYWdzGAYgASgFQgPgQQUSGgoNdHJhY2VfY29udGV4dBgHIAEoCUID4EEFIlEKBlBhY2tldBI2CgZoZWFkZXIYASABKAsyJi5nb29nbGUuY2xvdWQudmlzaW9uYWkudjEuUGFja2V0SGVhZGVyEg8KB3BheWxvYWQYAiABKAxCxwEKHGNvbS5nb29nbGUuY2xvdWQudmlzaW9uYWkudjFCF1N0cmVhbWluZ1Jlc291cmNlc1Byb3RvUAFaOGNsb3VkLmdvb2dsZS5jb20vZ28vdmlzaW9uYWkvYXBpdjEvdmlzaW9uYWlwYjt2aXNpb25haXBiqgIYR29vZ2xlLkNsb3VkLlZpc2lvbkFJLlYxygIYR29vZ2xlXENsb3VkXFZpc2lvbkFJXFYx6gIbR29vZ2xlOjpDbG91ZDo6VmlzaW9uQUk6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * The descriptor for a gstreamer buffer payload.
 *
 * @generated from message google.cloud.visionai.v1.GstreamerBufferDescriptor
 */
export type GstreamerBufferDescriptor = Message<"google.cloud.visionai.v1.GstreamerBufferDescriptor"> & {
  /**
   * The caps string of the payload.
   *
   * @generated from field: string caps_string = 1;
   */
  capsString: string;

  /**
   * Whether the buffer is a key frame.
   *
   * @generated from field: bool is_key_frame = 2;
   */
  isKeyFrame: boolean;

  /**
   * PTS of the frame.
   *
   * @generated from field: google.protobuf.Timestamp pts_time = 3;
   */
  ptsTime?: Timestamp;

  /**
   * DTS of the frame.
   *
   * @generated from field: google.protobuf.Timestamp dts_time = 4;
   */
  dtsTime?: Timestamp;

  /**
   * Duration of the frame.
   *
   * @generated from field: google.protobuf.Duration duration = 5;
   */
  duration?: Duration;
};

/**
 * Describes the message google.cloud.visionai.v1.GstreamerBufferDescriptor.
 * Use `create(GstreamerBufferDescriptorSchema)` to create a new message.
 */
export const GstreamerBufferDescriptorSchema: GenMessage<GstreamerBufferDescriptor> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 0);

/**
 * The descriptor for a raw image.
 *
 * @generated from message google.cloud.visionai.v1.RawImageDescriptor
 */
export type RawImageDescriptor = Message<"google.cloud.visionai.v1.RawImageDescriptor"> & {
  /**
   * Raw image format. Its possible values are: "srgb".
   *
   * @generated from field: string format = 1;
   */
  format: string;

  /**
   * The height of the image.
   *
   * @generated from field: int32 height = 2;
   */
  height: number;

  /**
   * The width of the image.
   *
   * @generated from field: int32 width = 3;
   */
  width: number;
};

/**
 * Describes the message google.cloud.visionai.v1.RawImageDescriptor.
 * Use `create(RawImageDescriptorSchema)` to create a new message.
 */
export const RawImageDescriptorSchema: GenMessage<RawImageDescriptor> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 1);

/**
 * The message that represents the data type of a packet.
 *
 * @generated from message google.cloud.visionai.v1.PacketType
 */
export type PacketType = Message<"google.cloud.visionai.v1.PacketType"> & {
  /**
   * The type class of the packet. Its possible values are:
   * "gst", "protobuf", and "string".
   *
   * @generated from field: string type_class = 1;
   */
  typeClass: string;

  /**
   * The type descriptor.
   *
   * @generated from field: google.cloud.visionai.v1.PacketType.TypeDescriptor type_descriptor = 2;
   */
  typeDescriptor?: PacketType_TypeDescriptor;
};

/**
 * Describes the message google.cloud.visionai.v1.PacketType.
 * Use `create(PacketTypeSchema)` to create a new message.
 */
export const PacketTypeSchema: GenMessage<PacketType> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 2);

/**
 * The message that fully specifies the type of the packet.
 *
 * @generated from message google.cloud.visionai.v1.PacketType.TypeDescriptor
 */
export type PacketType_TypeDescriptor = Message<"google.cloud.visionai.v1.PacketType.TypeDescriptor"> & {
  /**
   * Detailed information about the type.
   *
   * It is non-empty only for specific type class codecs. Needed only when the
   * type string alone is not enough to disambiguate the specific type.
   *
   * @generated from oneof google.cloud.visionai.v1.PacketType.TypeDescriptor.type_details
   */
  typeDetails: {
    /**
     * GstreamerBufferDescriptor is the descriptor for gstreamer buffer type.
     *
     * @generated from field: google.cloud.visionai.v1.GstreamerBufferDescriptor gstreamer_buffer_descriptor = 2;
     */
    value: GstreamerBufferDescriptor;
    case: "gstreamerBufferDescriptor";
  } | {
    /**
     * RawImageDescriptor is the descriptor for the raw image type.
     *
     * @generated from field: google.cloud.visionai.v1.RawImageDescriptor raw_image_descriptor = 3;
     */
    value: RawImageDescriptor;
    case: "rawImageDescriptor";
  } | { case: undefined; value?: undefined };

  /**
   * The type of the packet. Its possible values is codec dependent.
   *
   * The fully qualified type name is always the concatenation of the
   * value in `type_class` together with the value in `type`, separated by a
   * '/'.
   *
   * Note that specific codecs can define their own type hierarchy, and so the
   * type string here can in fact be separated by multiple '/'s of its own.
   *
   * Please see the open source SDK for specific codec documentation.
   *
   * @generated from field: string type = 1;
   */
  type: string;
};

/**
 * Describes the message google.cloud.visionai.v1.PacketType.TypeDescriptor.
 * Use `create(PacketType_TypeDescriptorSchema)` to create a new message.
 */
export const PacketType_TypeDescriptorSchema: GenMessage<PacketType_TypeDescriptor> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 2, 0);

/**
 * The message that represents server metadata.
 *
 * @generated from message google.cloud.visionai.v1.ServerMetadata
 */
export type ServerMetadata = Message<"google.cloud.visionai.v1.ServerMetadata"> & {
  /**
   * The offset position for the packet in its stream.
   *
   * @generated from field: int64 offset = 1;
   */
  offset: bigint;

  /**
   * The timestamp at which the stream server receives this packet. This is
   * based on the local clock of on the server side. It is guaranteed to be
   * monotonically increasing for the packets within each session; however
   * this timestamp is not comparable across packets sent to the same stream
   * different sessions. Session here refers to one individual gRPC streaming
   * request to the stream server.
   *
   * @generated from field: google.protobuf.Timestamp ingest_time = 2;
   */
  ingestTime?: Timestamp;
};

/**
 * Describes the message google.cloud.visionai.v1.ServerMetadata.
 * Use `create(ServerMetadataSchema)` to create a new message.
 */
export const ServerMetadataSchema: GenMessage<ServerMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 3);

/**
 * The message that represents series metadata.
 *
 * @generated from message google.cloud.visionai.v1.SeriesMetadata
 */
export type SeriesMetadata = Message<"google.cloud.visionai.v1.SeriesMetadata"> & {
  /**
   * Series name. It's in the format of
   * "projects/{project}/locations/{location}/clusters/{cluster}/series/{stream}".
   *
   * @generated from field: string series = 1;
   */
  series: string;
};

/**
 * Describes the message google.cloud.visionai.v1.SeriesMetadata.
 * Use `create(SeriesMetadataSchema)` to create a new message.
 */
export const SeriesMetadataSchema: GenMessage<SeriesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 4);

/**
 * The message that represents packet header.
 *
 * @generated from message google.cloud.visionai.v1.PacketHeader
 */
export type PacketHeader = Message<"google.cloud.visionai.v1.PacketHeader"> & {
  /**
   * Input only. The capture time of the packet.
   *
   * @generated from field: google.protobuf.Timestamp capture_time = 1;
   */
  captureTime?: Timestamp;

  /**
   * Input only. Immutable. The type of the payload.
   *
   * @generated from field: google.cloud.visionai.v1.PacketType type = 2;
   */
  type?: PacketType;

  /**
   * Input only. This field is for users to attach user managed metadata.
   *
   * @generated from field: google.protobuf.Struct metadata = 3;
   */
  metadata?: JsonObject;

  /**
   * Output only. Metadata that the server appends to each packet before sending
   * it to receivers. You don't need to set a value for this field when sending
   * packets.
   *
   * @generated from field: google.cloud.visionai.v1.ServerMetadata server_metadata = 4;
   */
  serverMetadata?: ServerMetadata;

  /**
   * Input only. Immutable. Metadata that the server needs to know where to
   * write the packets to. It's only required for the first packet.
   *
   * @generated from field: google.cloud.visionai.v1.SeriesMetadata series_metadata = 5;
   */
  seriesMetadata?: SeriesMetadata;

  /**
   * Immutable. Packet flag set. SDK will set the flag automatically.
   *
   * @generated from field: int32 flags = 6;
   */
  flags: number;

  /**
   * Immutable. Header string for tracing across services. It should be set when
   * the packet is first arrived in the stream server.
   *
   * The input format is a lowercase hex string:
   *   - version_id: 1 byte, currently must be zero - hex encoded (2 characters)
   *   - trace_id: 16 bytes (opaque blob) - hex encoded (32 characters)
   *   - span_id: 8 bytes (opaque blob) - hex encoded (16 characters)
   *   - trace_options: 1 byte (LSB means tracing enabled) - hex encoded (2
   *   characters)
   * Example: "00-404142434445464748494a4b4c4d4e4f-6162636465666768-01"
   *           v  trace_id                         span_id          options
   *
   * @generated from field: string trace_context = 7;
   */
  traceContext: string;
};

/**
 * Describes the message google.cloud.visionai.v1.PacketHeader.
 * Use `create(PacketHeaderSchema)` to create a new message.
 */
export const PacketHeaderSchema: GenMessage<PacketHeader> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 5);

/**
 * The quanta of datum that the series accepts.
 *
 * @generated from message google.cloud.visionai.v1.Packet
 */
export type Packet = Message<"google.cloud.visionai.v1.Packet"> & {
  /**
   * The packet header.
   *
   * @generated from field: google.cloud.visionai.v1.PacketHeader header = 1;
   */
  header?: PacketHeader;

  /**
   * The payload of the packet.
   *
   * @generated from field: bytes payload = 2;
   */
  payload: Uint8Array;
};

/**
 * Describes the message google.cloud.visionai.v1.Packet.
 * Use `create(PacketSchema)` to create a new message.
 */
export const PacketSchema: GenMessage<Packet> = /*@__PURE__*/
  messageDesc(file_google_cloud_visionai_v1_streaming_resources, 6);

