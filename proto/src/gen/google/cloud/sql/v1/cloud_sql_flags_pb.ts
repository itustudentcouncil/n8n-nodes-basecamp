// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/sql/v1/cloud_sql_flags.proto (package google.cloud.sql.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { SqlDatabaseVersion } from "./cloud_sql_resources_pb";
import { file_google_cloud_sql_v1_cloud_sql_resources } from "./cloud_sql_resources_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/sql/v1/cloud_sql_flags.proto.
 */
export const file_google_cloud_sql_v1_cloud_sql_flags: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvY2xvdWQvc3FsL3YxL2Nsb3VkX3NxbF9mbGFncy5wcm90bxITZ29vZ2xlLmNsb3VkLnNxbC52MSIvChNTcWxGbGFnc0xpc3RSZXF1ZXN0EhgKEGRhdGFiYXNlX3ZlcnNpb24YASABKAkiSwoRRmxhZ3NMaXN0UmVzcG9uc2USDAoEa2luZBgBIAEoCRIoCgVpdGVtcxgCIAMoCzIZLmdvb2dsZS5jbG91ZC5zcWwudjEuRmxhZyKNAwoERmxhZxIMCgRuYW1lGAEgASgJEi4KBHR5cGUYAiABKA4yIC5nb29nbGUuY2xvdWQuc3FsLnYxLlNxbEZsYWdUeXBlEjsKCmFwcGxpZXNfdG8YAyADKA4yJy5nb29nbGUuY2xvdWQuc3FsLnYxLlNxbERhdGFiYXNlVmVyc2lvbhIdChVhbGxvd2VkX3N0cmluZ192YWx1ZXMYBCADKAkSLgoJbWluX3ZhbHVlGAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSLgoJbWF4X3ZhbHVlGAYgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNAoQcmVxdWlyZXNfcmVzdGFydBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSDAoEa2luZBgIIAEoCRIrCgdpbl9iZXRhGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIaChJhbGxvd2VkX2ludF92YWx1ZXMYCiADKAMqlwEKC1NxbEZsYWdUeXBlEh0KGVNRTF9GTEFHX1RZUEVfVU5TUEVDSUZJRUQQABILCgdCT09MRUFOEAESCgoGU1RSSU5HEAISCwoHSU5URUdFUhADEggKBE5PTkUQBBIZChVNWVNRTF9USU1FWk9ORV9PRkZTRVQQBRIJCgVGTE9BVBAGEhMKD1JFUEVBVEVEX1NUUklORxAHMvwBCg9TcWxGbGFnc1NlcnZpY2USawoETGlzdBIoLmdvb2dsZS5jbG91ZC5zcWwudjEuU3FsRmxhZ3NMaXN0UmVxdWVzdBomLmdvb2dsZS5jbG91ZC5zcWwudjEuRmxhZ3NMaXN0UmVzcG9uc2UiEYLT5JMCCxIJL3YxL2ZsYWdzGnzKQRdzcWxhZG1pbi5nb29nbGVhcGlzLmNvbdJBX2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9zcWxzZXJ2aWNlLmFkbWluQloKF2NvbS5nb29nbGUuY2xvdWQuc3FsLnYxQhJDbG91ZFNxbEZsYWdzUHJvdG9QAVopY2xvdWQuZ29vZ2xlLmNvbS9nby9zcWwvYXBpdjEvc3FscGI7c3FscGJiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_cloud_sql_v1_cloud_sql_resources, file_google_protobuf_wrappers]);

/**
 * Flags list request.
 *
 * @generated from message google.cloud.sql.v1.SqlFlagsListRequest
 */
export type SqlFlagsListRequest = Message<"google.cloud.sql.v1.SqlFlagsListRequest"> & {
  /**
   * Database type and version you want to retrieve flags for. By default, this
   * method returns flags for all database types and versions.
   *
   * @generated from field: string database_version = 1;
   */
  databaseVersion: string;
};

/**
 * Describes the message google.cloud.sql.v1.SqlFlagsListRequest.
 * Use `create(SqlFlagsListRequestSchema)` to create a new message.
 */
export const SqlFlagsListRequestSchema: GenMessage<SqlFlagsListRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_sql_v1_cloud_sql_flags, 0);

/**
 * Flags list response.
 *
 * @generated from message google.cloud.sql.v1.FlagsListResponse
 */
export type FlagsListResponse = Message<"google.cloud.sql.v1.FlagsListResponse"> & {
  /**
   * This is always `sql#flagsList`.
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * List of flags.
   *
   * @generated from field: repeated google.cloud.sql.v1.Flag items = 2;
   */
  items: Flag[];
};

/**
 * Describes the message google.cloud.sql.v1.FlagsListResponse.
 * Use `create(FlagsListResponseSchema)` to create a new message.
 */
export const FlagsListResponseSchema: GenMessage<FlagsListResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_sql_v1_cloud_sql_flags, 1);

/**
 * A flag resource.
 *
 * @generated from message google.cloud.sql.v1.Flag
 */
export type Flag = Message<"google.cloud.sql.v1.Flag"> & {
  /**
   * This is the name of the flag. Flag names always use underscores, not
   * hyphens, for example: `max_allowed_packet`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`,
   * `INTEGER` or `NONE`. `NONE` is used for flags that do not take a
   * value, such as `skip_grant_tables`.
   *
   * @generated from field: google.cloud.sql.v1.SqlFlagType type = 2;
   */
  type: SqlFlagType;

  /**
   * The database version this flag applies to. Can be
   * MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`,
   * or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`,
   * `POSTGRES_11` or `POSTGRES_12`. SQL Server instances:
   * `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`,
   * `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`,
   * `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or
   * `SQLSERVER_2019_WEB`.
   * See [the complete
   * list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
   *
   * @generated from field: repeated google.cloud.sql.v1.SqlDatabaseVersion applies_to = 3;
   */
  appliesTo: SqlDatabaseVersion[];

  /**
   * For `STRING` flags, a list of strings that the value can be set to.
   *
   * @generated from field: repeated string allowed_string_values = 4;
   */
  allowedStringValues: string[];

  /**
   * For `INTEGER` flags, the minimum allowed value.
   *
   * @generated from field: google.protobuf.Int64Value min_value = 5;
   */
  minValue?: bigint;

  /**
   * For `INTEGER` flags, the maximum allowed value.
   *
   * @generated from field: google.protobuf.Int64Value max_value = 6;
   */
  maxValue?: bigint;

  /**
   * Indicates whether changing this flag will trigger a database restart. Only
   * applicable to Second Generation instances.
   *
   * @generated from field: google.protobuf.BoolValue requires_restart = 7;
   */
  requiresRestart?: boolean;

  /**
   * This is always `sql#flag`.
   *
   * @generated from field: string kind = 8;
   */
  kind: string;

  /**
   * Whether or not the flag is considered in beta.
   *
   * @generated from field: google.protobuf.BoolValue in_beta = 9;
   */
  inBeta?: boolean;

  /**
   * Use this field if only certain integers are accepted. Can be combined
   * with min_value and max_value to add additional values.
   *
   * @generated from field: repeated int64 allowed_int_values = 10;
   */
  allowedIntValues: bigint[];
};

/**
 * Describes the message google.cloud.sql.v1.Flag.
 * Use `create(FlagSchema)` to create a new message.
 */
export const FlagSchema: GenMessage<Flag> = /*@__PURE__*/
  messageDesc(file_google_cloud_sql_v1_cloud_sql_flags, 2);

/**
 * @generated from enum google.cloud.sql.v1.SqlFlagType
 */
export enum SqlFlagType {
  /**
   * This is an unknown flag type.
   *
   * @generated from enum value: SQL_FLAG_TYPE_UNSPECIFIED = 0;
   */
  SQL_FLAG_TYPE_UNSPECIFIED = 0,

  /**
   * Boolean type flag.
   *
   * @generated from enum value: BOOLEAN = 1;
   */
  BOOLEAN = 1,

  /**
   * String type flag.
   *
   * @generated from enum value: STRING = 2;
   */
  STRING = 2,

  /**
   * Integer type flag.
   *
   * @generated from enum value: INTEGER = 3;
   */
  INTEGER = 3,

  /**
   * Flag type used for a server startup option.
   *
   * @generated from enum value: NONE = 4;
   */
  NONE = 4,

  /**
   * Type introduced specially for MySQL TimeZone offset. Accept a string value
   * with the format [-12:59, 13:00].
   *
   * @generated from enum value: MYSQL_TIMEZONE_OFFSET = 5;
   */
  MYSQL_TIMEZONE_OFFSET = 5,

  /**
   * Float type flag.
   *
   * @generated from enum value: FLOAT = 6;
   */
  FLOAT = 6,

  /**
   * Comma-separated list of the strings in a SqlFlagType enum.
   *
   * @generated from enum value: REPEATED_STRING = 7;
   */
  REPEATED_STRING = 7,
}

/**
 * Describes the enum google.cloud.sql.v1.SqlFlagType.
 */
export const SqlFlagTypeSchema: GenEnum<SqlFlagType> = /*@__PURE__*/
  enumDesc(file_google_cloud_sql_v1_cloud_sql_flags, 0);

/**
 * Service to manage database flags for Cloud SQL instances.
 *
 * @generated from service google.cloud.sql.v1.SqlFlagsService
 */
export const SqlFlagsService: GenService<{
  /**
   * Lists all available database flags for Cloud SQL instances.
   *
   * @generated from rpc google.cloud.sql.v1.SqlFlagsService.List
   */
  list: {
    methodKind: "unary";
    input: typeof SqlFlagsListRequestSchema;
    output: typeof FlagsListResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_sql_v1_cloud_sql_flags, 0);

