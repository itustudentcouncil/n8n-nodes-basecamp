// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/binaryauthorization/v1/resources.proto (package google.cloud.binaryauthorization.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/binaryauthorization/v1/resources.proto.
 */
export const file_google_cloud_binaryauthorization_v1_resources: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvY2xvdWQvYmluYXJ5YXV0aG9yaXphdGlvbi92MS9yZXNvdXJjZXMucHJvdG8SI2dvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxIvgMCgZQb2xpY3kSEQoEbmFtZRgBIAEoCUID4EEDEhgKC2Rlc2NyaXB0aW9uGAYgASgJQgPgQQEScgodZ2xvYmFsX3BvbGljeV9ldmFsdWF0aW9uX21vZGUYByABKA4yRi5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5Qb2xpY3kuR2xvYmFsUG9saWN5RXZhbHVhdGlvbk1vZGVCA+BBARJpChxhZG1pc3Npb25fd2hpdGVsaXN0X3BhdHRlcm5zGAIgAygLMj4uZ29vZ2xlLmNsb3VkLmJpbmFyeWF1dGhvcml6YXRpb24udjEuQWRtaXNzaW9uV2hpdGVsaXN0UGF0dGVybkID4EEBEmwKF2NsdXN0ZXJfYWRtaXNzaW9uX3J1bGVzGAMgAygLMkYuZ29vZ2xlLmNsb3VkLmJpbmFyeWF1dGhvcml6YXRpb24udjEuUG9saWN5LkNsdXN0ZXJBZG1pc3Npb25SdWxlc0VudHJ5QgPgQQEShQEKJGt1YmVybmV0ZXNfbmFtZXNwYWNlX2FkbWlzc2lvbl9ydWxlcxgKIAMoCzJSLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLlBvbGljeS5LdWJlcm5ldGVzTmFtZXNwYWNlQWRtaXNzaW9uUnVsZXNFbnRyeUID4EEBEpABCiprdWJlcm5ldGVzX3NlcnZpY2VfYWNjb3VudF9hZG1pc3Npb25fcnVsZXMYCCADKAsyVy5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5Qb2xpY3kuS3ViZXJuZXRlc1NlcnZpY2VBY2NvdW50QWRtaXNzaW9uUnVsZXNFbnRyeUID4EEBEogBCiZpc3Rpb19zZXJ2aWNlX2lkZW50aXR5X2FkbWlzc2lvbl9ydWxlcxgJIAMoCzJTLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLlBvbGljeS5Jc3Rpb1NlcnZpY2VJZGVudGl0eUFkbWlzc2lvblJ1bGVzRW50cnlCA+BBARJXChZkZWZhdWx0X2FkbWlzc2lvbl9ydWxlGAQgASgLMjIuZ29vZ2xlLmNsb3VkLmJpbmFyeWF1dGhvcml6YXRpb24udjEuQWRtaXNzaW9uUnVsZUID4EECEjQKC3VwZGF0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDGnAKGkNsdXN0ZXJBZG1pc3Npb25SdWxlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLkFkbWlzc2lvblJ1bGU6AjgBGnwKJkt1YmVybmV0ZXNOYW1lc3BhY2VBZG1pc3Npb25SdWxlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLkFkbWlzc2lvblJ1bGU6AjgBGoEBCitLdWJlcm5ldGVzU2VydmljZUFjY291bnRBZG1pc3Npb25SdWxlc0VudHJ5EgsKA2tleRgBIAEoCRJBCgV2YWx1ZRgCIAEoCzIyLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLkFkbWlzc2lvblJ1bGU6AjgBGn0KJ0lzdGlvU2VydmljZUlkZW50aXR5QWRtaXNzaW9uUnVsZXNFbnRyeRILCgNrZXkYASABKAkSQQoFdmFsdWUYAiABKAsyMi5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5BZG1pc3Npb25SdWxlOgI4ASJkChpHbG9iYWxQb2xpY3lFdmFsdWF0aW9uTW9kZRItCilHTE9CQUxfUE9MSUNZX0VWQUxVQVRJT05fTU9ERV9VTlNQRUNJRklFRBAAEgoKBkVOQUJMRRABEgsKB0RJU0FCTEUQAjpm6kFjCiliaW5hcnlhdXRob3JpemF0aW9uLmdvb2dsZWFwaXMuY29tL1BvbGljeRIZcHJvamVjdHMve3Byb2plY3R9L3BvbGljeRIbbG9jYXRpb25zL3tsb2NhdGlvbn0vcG9saWN5IjEKGUFkbWlzc2lvbldoaXRlbGlzdFBhdHRlcm4SFAoMbmFtZV9wYXR0ZXJuGAEgASgJItoDCg1BZG1pc3Npb25SdWxlEl8KD2V2YWx1YXRpb25fbW9kZRgBIAEoDjJBLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLkFkbWlzc2lvblJ1bGUuRXZhbHVhdGlvbk1vZGVCA+BBAhIkChdyZXF1aXJlX2F0dGVzdGF0aW9uc19ieRgCIAMoCUID4EEBEmEKEGVuZm9yY2VtZW50X21vZGUYAyABKA4yQi5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5BZG1pc3Npb25SdWxlLkVuZm9yY2VtZW50TW9kZUID4EECIm0KDkV2YWx1YXRpb25Nb2RlEh8KG0VWQUxVQVRJT05fTU9ERV9VTlNQRUNJRklFRBAAEhAKDEFMV0FZU19BTExPVxABEhcKE1JFUVVJUkVfQVRURVNUQVRJT04QAhIPCgtBTFdBWVNfREVOWRADInAKD0VuZm9yY2VtZW50TW9kZRIgChxFTkZPUkNFTUVOVF9NT0RFX1VOU1BFQ0lGSUVEEAASIAocRU5GT1JDRURfQkxPQ0tfQU5EX0FVRElUX0xPRxABEhkKFURSWVJVTl9BVURJVF9MT0dfT05MWRACIrcCCghBdHRlc3RvchIRCgRuYW1lGAEgASgJQgPgQQISGAoLZGVzY3JpcHRpb24YBiABKAlCA+BBARJcChd1c2VyX293bmVkX2dyYWZlYXNfbm90ZRgDIAEoCzI5Lmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLlVzZXJPd25lZEdyYWZlYXNOb3RlSAASNAoLdXBkYXRlX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQM6WepBVgorYmluYXJ5YXV0aG9yaXphdGlvbi5nb29nbGVhcGlzLmNvbS9BdHRlc3RvchIncHJvamVjdHMve3Byb2plY3R9L2F0dGVzdG9ycy97YXR0ZXN0b3J9Qg8KDWF0dGVzdG9yX3R5cGUitAEKFFVzZXJPd25lZEdyYWZlYXNOb3RlEhsKDm5vdGVfcmVmZXJlbmNlGAEgASgJQgPgQQISUAoLcHVibGljX2tleXMYAiADKAsyNi5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5BdHRlc3RvclB1YmxpY0tleUID4EEBEi0KIGRlbGVnYXRpb25fc2VydmljZV9hY2NvdW50X2VtYWlsGAMgASgJQgPgQQMivwQKDVBraXhQdWJsaWNLZXkSFgoOcHVibGljX2tleV9wZW0YASABKAkSYgoTc2lnbmF0dXJlX2FsZ29yaXRobRgCIAEoDjJFLmdvb2dsZS5jbG91ZC5iaW5hcnlhdXRob3JpemF0aW9uLnYxLlBraXhQdWJsaWNLZXkuU2lnbmF0dXJlQWxnb3JpdGhtIrEDChJTaWduYXR1cmVBbGdvcml0aG0SIwofU0lHTkFUVVJFX0FMR09SSVRITV9VTlNQRUNJRklFRBAAEhcKE1JTQV9QU1NfMjA0OF9TSEEyNTYQARIXChNSU0FfUFNTXzMwNzJfU0hBMjU2EAISFwoTUlNBX1BTU180MDk2X1NIQTI1NhADEhcKE1JTQV9QU1NfNDA5Nl9TSEE1MTIQBBIeChpSU0FfU0lHTl9QS0NTMV8yMDQ4X1NIQTI1NhAFEh4KGlJTQV9TSUdOX1BLQ1MxXzMwNzJfU0hBMjU2EAYSHgoaUlNBX1NJR05fUEtDUzFfNDA5Nl9TSEEyNTYQBxIeChpSU0FfU0lHTl9QS0NTMV80MDk2X1NIQTUxMhAIEhUKEUVDRFNBX1AyNTZfU0hBMjU2EAkSFwoTRUNfU0lHTl9QMjU2X1NIQTI1NhAJEhUKEUVDRFNBX1AzODRfU0hBMzg0EAoSFwoTRUNfU0lHTl9QMzg0X1NIQTM4NBAKEhUKEUVDRFNBX1A1MjFfU0hBNTEyEAsSFwoTRUNfU0lHTl9QNTIxX1NIQTUxMhALGgIQASK6AQoRQXR0ZXN0b3JQdWJsaWNLZXkSFAoHY29tbWVudBgBIAEoCUID4EEBEgoKAmlkGAIgASgJEiYKHGFzY2lpX2FybW9yZWRfcGdwX3B1YmxpY19rZXkYAyABKAlIABJNCg9wa2l4X3B1YmxpY19rZXkYBSABKAsyMi5nb29nbGUuY2xvdWQuYmluYXJ5YXV0aG9yaXphdGlvbi52MS5Qa2l4UHVibGljS2V5SABCDAoKcHVibGljX2tleUKMAgo1Y29tLmdvb2dsZS5wcm90b3MuZ29vZ2xlLmNsb3VkLmJpbmFyeWF1dGhvcml6YXRpb24udjFQAFpZY2xvdWQuZ29vZ2xlLmNvbS9nby9iaW5hcnlhdXRob3JpemF0aW9uL2FwaXYxL2JpbmFyeWF1dGhvcml6YXRpb25wYjtiaW5hcnlhdXRob3JpemF0aW9ucGL4AQGqAiNHb29nbGUuQ2xvdWQuQmluYXJ5QXV0aG9yaXphdGlvbi5WMcoCI0dvb2dsZVxDbG91ZFxCaW5hcnlBdXRob3JpemF0aW9uXFYx6gImR29vZ2xlOjpDbG91ZDo6QmluYXJ5QXV0aG9yaXphdGlvbjo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp]);

/**
 * A [policy][google.cloud.binaryauthorization.v1.Policy] for container image binary authorization.
 *
 * @generated from message google.cloud.binaryauthorization.v1.Policy
 */
export type Policy = Message<"google.cloud.binaryauthorization.v1.Policy"> & {
  /**
   * Output only. The resource name, in the format `projects/*\/policy`. There is
   * at most one policy per project.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. A descriptive comment.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * Optional. Controls the evaluation of a Google-maintained global admission
   * policy for common system-level images. Images not covered by the global
   * policy will be subject to the project admission policy. This setting
   * has no effect when specified inside a global admission policy.
   *
   * @generated from field: google.cloud.binaryauthorization.v1.Policy.GlobalPolicyEvaluationMode global_policy_evaluation_mode = 7;
   */
  globalPolicyEvaluationMode: Policy_GlobalPolicyEvaluationMode;

  /**
   * Optional. Admission policy allowlisting. A matching admission request will
   * always be permitted. This feature is typically used to exclude Google or
   * third-party infrastructure images from Binary Authorization policies.
   *
   * @generated from field: repeated google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern admission_whitelist_patterns = 2;
   */
  admissionWhitelistPatterns: AdmissionWhitelistPattern[];

  /**
   * Optional. Per-cluster admission rules. Cluster spec format:
   * `location.clusterId`. There can be at most one admission rule per cluster
   * spec.
   * A `location` is either a compute zone (e.g. us-central1-a) or a region
   * (e.g. us-central1).
   * For `clusterId` syntax restrictions see
   * https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.
   *
   * @generated from field: map<string, google.cloud.binaryauthorization.v1.AdmissionRule> cluster_admission_rules = 3;
   */
  clusterAdmissionRules: { [key: string]: AdmissionRule };

  /**
   * Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format:
   * [a-z.-]+, e.g. 'some-namespace'
   *
   * @generated from field: map<string, google.cloud.binaryauthorization.v1.AdmissionRule> kubernetes_namespace_admission_rules = 10;
   */
  kubernetesNamespaceAdmissionRules: { [key: string]: AdmissionRule };

  /**
   * Optional. Per-kubernetes-service-account admission rules. Service account
   * spec format: `namespace:serviceaccount`. e.g. 'test-ns:default'
   *
   * @generated from field: map<string, google.cloud.binaryauthorization.v1.AdmissionRule> kubernetes_service_account_admission_rules = 8;
   */
  kubernetesServiceAccountAdmissionRules: { [key: string]: AdmissionRule };

  /**
   * Optional. Per-istio-service-identity admission rules. Istio service
   * identity spec format:
   * spiffe://<domain>/ns/<namespace>/sa/<serviceaccount> or
   * <domain>/ns/<namespace>/sa/<serviceaccount>
   * e.g. spiffe://example.com/ns/test-ns/sa/default
   *
   * @generated from field: map<string, google.cloud.binaryauthorization.v1.AdmissionRule> istio_service_identity_admission_rules = 9;
   */
  istioServiceIdentityAdmissionRules: { [key: string]: AdmissionRule };

  /**
   * Required. Default admission rule for a cluster without a per-cluster, per-
   * kubernetes-service-account, or per-istio-service-identity admission rule.
   *
   * @generated from field: google.cloud.binaryauthorization.v1.AdmissionRule default_admission_rule = 4;
   */
  defaultAdmissionRule?: AdmissionRule;

  /**
   * Output only. Time when the policy was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.Policy.
 * Use `create(PolicySchema)` to create a new message.
 */
export const PolicySchema: GenMessage<Policy> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 0);

/**
 * @generated from enum google.cloud.binaryauthorization.v1.Policy.GlobalPolicyEvaluationMode
 */
export enum Policy_GlobalPolicyEvaluationMode {
  /**
   * Not specified: DISABLE is assumed.
   *
   * @generated from enum value: GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED = 0;
   */
  GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED = 0,

  /**
   * Enables system policy evaluation.
   *
   * @generated from enum value: ENABLE = 1;
   */
  ENABLE = 1,

  /**
   * Disables system policy evaluation.
   *
   * @generated from enum value: DISABLE = 2;
   */
  DISABLE = 2,
}

/**
 * Describes the enum google.cloud.binaryauthorization.v1.Policy.GlobalPolicyEvaluationMode.
 */
export const Policy_GlobalPolicyEvaluationModeSchema: GenEnum<Policy_GlobalPolicyEvaluationMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_binaryauthorization_v1_resources, 0, 0);

/**
 * An [admission allowlist pattern][google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern] exempts images
 * from checks by [admission rules][google.cloud.binaryauthorization.v1.AdmissionRule].
 *
 * @generated from message google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern
 */
export type AdmissionWhitelistPattern = Message<"google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern"> & {
  /**
   * An image name pattern to allowlist, in the form `registry/path/to/image`.
   * This supports a trailing `*` wildcard, but this is allowed only in
   * text after the `registry/` part. This also supports a trailing `**`
   * wildcard which matches subdirectories of a given entry.
   *
   * @generated from field: string name_pattern = 1;
   */
  namePattern: string;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern.
 * Use `create(AdmissionWhitelistPatternSchema)` to create a new message.
 */
export const AdmissionWhitelistPatternSchema: GenMessage<AdmissionWhitelistPattern> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 1);

/**
 * An [admission rule][google.cloud.binaryauthorization.v1.AdmissionRule] specifies either that all container images
 * used in a pod creation request must be attested to by one or more
 * [attestors][google.cloud.binaryauthorization.v1.Attestor], that all pod creations will be allowed, or that all
 * pod creations will be denied.
 *
 * Images matching an [admission allowlist pattern][google.cloud.binaryauthorization.v1.AdmissionWhitelistPattern]
 * are exempted from admission rules and will never block a pod creation.
 *
 * @generated from message google.cloud.binaryauthorization.v1.AdmissionRule
 */
export type AdmissionRule = Message<"google.cloud.binaryauthorization.v1.AdmissionRule"> & {
  /**
   * Required. How this admission rule will be evaluated.
   *
   * @generated from field: google.cloud.binaryauthorization.v1.AdmissionRule.EvaluationMode evaluation_mode = 1;
   */
  evaluationMode: AdmissionRule_EvaluationMode;

  /**
   * Optional. The resource names of the attestors that must attest to
   * a container image, in the format `projects/*\/attestors/*`. Each
   * attestor must exist before a policy can reference it.  To add an attestor
   * to a policy the principal issuing the policy change request must be able
   * to read the attestor resource.
   *
   * Note: this field must be non-empty when the evaluation_mode field specifies
   * REQUIRE_ATTESTATION, otherwise it must be empty.
   *
   * @generated from field: repeated string require_attestations_by = 2;
   */
  requireAttestationsBy: string[];

  /**
   * Required. The action when a pod creation is denied by the admission rule.
   *
   * @generated from field: google.cloud.binaryauthorization.v1.AdmissionRule.EnforcementMode enforcement_mode = 3;
   */
  enforcementMode: AdmissionRule_EnforcementMode;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.AdmissionRule.
 * Use `create(AdmissionRuleSchema)` to create a new message.
 */
export const AdmissionRuleSchema: GenMessage<AdmissionRule> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 2);

/**
 * @generated from enum google.cloud.binaryauthorization.v1.AdmissionRule.EvaluationMode
 */
export enum AdmissionRule_EvaluationMode {
  /**
   * Do not use.
   *
   * @generated from enum value: EVALUATION_MODE_UNSPECIFIED = 0;
   */
  EVALUATION_MODE_UNSPECIFIED = 0,

  /**
   * This rule allows all all pod creations.
   *
   * @generated from enum value: ALWAYS_ALLOW = 1;
   */
  ALWAYS_ALLOW = 1,

  /**
   * This rule allows a pod creation if all the attestors listed in
   * 'require_attestations_by' have valid attestations for all of the
   * images in the pod spec.
   *
   * @generated from enum value: REQUIRE_ATTESTATION = 2;
   */
  REQUIRE_ATTESTATION = 2,

  /**
   * This rule denies all pod creations.
   *
   * @generated from enum value: ALWAYS_DENY = 3;
   */
  ALWAYS_DENY = 3,
}

/**
 * Describes the enum google.cloud.binaryauthorization.v1.AdmissionRule.EvaluationMode.
 */
export const AdmissionRule_EvaluationModeSchema: GenEnum<AdmissionRule_EvaluationMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_binaryauthorization_v1_resources, 2, 0);

/**
 * Defines the possible actions when a pod creation is denied by an admission
 * rule.
 *
 * @generated from enum google.cloud.binaryauthorization.v1.AdmissionRule.EnforcementMode
 */
export enum AdmissionRule_EnforcementMode {
  /**
   * Do not use.
   *
   * @generated from enum value: ENFORCEMENT_MODE_UNSPECIFIED = 0;
   */
  ENFORCEMENT_MODE_UNSPECIFIED = 0,

  /**
   * Enforce the admission rule by blocking the pod creation.
   *
   * @generated from enum value: ENFORCED_BLOCK_AND_AUDIT_LOG = 1;
   */
  ENFORCED_BLOCK_AND_AUDIT_LOG = 1,

  /**
   * Dryrun mode: Audit logging only.  This will allow the pod creation as if
   * the admission request had specified break-glass.
   *
   * @generated from enum value: DRYRUN_AUDIT_LOG_ONLY = 2;
   */
  DRYRUN_AUDIT_LOG_ONLY = 2,
}

/**
 * Describes the enum google.cloud.binaryauthorization.v1.AdmissionRule.EnforcementMode.
 */
export const AdmissionRule_EnforcementModeSchema: GenEnum<AdmissionRule_EnforcementMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_binaryauthorization_v1_resources, 2, 1);

/**
 * An [attestor][google.cloud.binaryauthorization.v1.Attestor] that attests to container image
 * artifacts. An existing attestor cannot be modified except where
 * indicated.
 *
 * @generated from message google.cloud.binaryauthorization.v1.Attestor
 */
export type Attestor = Message<"google.cloud.binaryauthorization.v1.Attestor"> & {
  /**
   * Required. The resource name, in the format:
   * `projects/*\/attestors/*`. This field may not be updated.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. A descriptive comment.  This field may be updated.
   * The field may be displayed in chooser dialogs.
   *
   * @generated from field: string description = 6;
   */
  description: string;

  /**
   * @generated from oneof google.cloud.binaryauthorization.v1.Attestor.attestor_type
   */
  attestorType: {
    /**
     * This specifies how an attestation will be read, and how it will be used
     * during policy enforcement.
     *
     * @generated from field: google.cloud.binaryauthorization.v1.UserOwnedGrafeasNote user_owned_grafeas_note = 3;
     */
    value: UserOwnedGrafeasNote;
    case: "userOwnedGrafeasNote";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. Time when the attestor was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.Attestor.
 * Use `create(AttestorSchema)` to create a new message.
 */
export const AttestorSchema: GenMessage<Attestor> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 3);

/**
 * An [user owned Grafeas note][google.cloud.binaryauthorization.v1.UserOwnedGrafeasNote] references a Grafeas
 * Attestation.Authority Note created by the user.
 *
 * @generated from message google.cloud.binaryauthorization.v1.UserOwnedGrafeasNote
 */
export type UserOwnedGrafeasNote = Message<"google.cloud.binaryauthorization.v1.UserOwnedGrafeasNote"> & {
  /**
   * Required. The Grafeas resource name of a Attestation.Authority Note,
   * created by the user, in the format: `projects/*\/notes/*`. This field may
   * not be updated.
   *
   * An attestation by this attestor is stored as a Grafeas
   * Attestation.Authority Occurrence that names a container image and that
   * links to this Note. Grafeas is an external dependency.
   *
   * @generated from field: string note_reference = 1;
   */
  noteReference: string;

  /**
   * Optional. Public keys that verify attestations signed by this
   * attestor.  This field may be updated.
   *
   * If this field is non-empty, one of the specified public keys must
   * verify that an attestation was signed by this attestor for the
   * image specified in the admission request.
   *
   * If this field is empty, this attestor always returns that no
   * valid attestations exist.
   *
   * @generated from field: repeated google.cloud.binaryauthorization.v1.AttestorPublicKey public_keys = 2;
   */
  publicKeys: AttestorPublicKey[];

  /**
   * Output only. This field will contain the service account email address
   * that this Attestor will use as the principal when querying Container
   * Analysis. Attestor administrators must grant this service account the
   * IAM role needed to read attestations from the [note_reference][Note] in
   * Container Analysis (`containeranalysis.notes.occurrences.viewer`).
   *
   * This email address is fixed for the lifetime of the Attestor, but callers
   * should not make any other assumptions about the service account email;
   * future versions may use an email based on a different naming pattern.
   *
   * @generated from field: string delegation_service_account_email = 3;
   */
  delegationServiceAccountEmail: string;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.UserOwnedGrafeasNote.
 * Use `create(UserOwnedGrafeasNoteSchema)` to create a new message.
 */
export const UserOwnedGrafeasNoteSchema: GenMessage<UserOwnedGrafeasNote> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 4);

/**
 * A public key in the PkixPublicKey format (see
 * https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details).
 * Public keys of this type are typically textually encoded using the PEM
 * format.
 *
 * @generated from message google.cloud.binaryauthorization.v1.PkixPublicKey
 */
export type PkixPublicKey = Message<"google.cloud.binaryauthorization.v1.PkixPublicKey"> & {
  /**
   * A PEM-encoded public key, as described in
   * https://tools.ietf.org/html/rfc7468#section-13
   *
   * @generated from field: string public_key_pem = 1;
   */
  publicKeyPem: string;

  /**
   * The signature algorithm used to verify a message against a signature using
   * this key.
   * These signature algorithm must match the structure and any object
   * identifiers encoded in `public_key_pem` (i.e. this algorithm must match
   * that of the public key).
   *
   * @generated from field: google.cloud.binaryauthorization.v1.PkixPublicKey.SignatureAlgorithm signature_algorithm = 2;
   */
  signatureAlgorithm: PkixPublicKey_SignatureAlgorithm;
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.PkixPublicKey.
 * Use `create(PkixPublicKeySchema)` to create a new message.
 */
export const PkixPublicKeySchema: GenMessage<PkixPublicKey> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 5);

/**
 * Represents a signature algorithm and other information necessary to verify
 * signatures with a given public key.
 * This is based primarily on the public key types supported by Tink's
 * PemKeyType, which is in turn based on KMS's supported signing algorithms.
 * See https://cloud.google.com/kms/docs/algorithms. In the future, BinAuthz
 * might support additional public key types independently of Tink and/or KMS.
 *
 * @generated from enum google.cloud.binaryauthorization.v1.PkixPublicKey.SignatureAlgorithm
 */
export enum PkixPublicKey_SignatureAlgorithm {
  /**
   * Not specified.
   *
   * @generated from enum value: SIGNATURE_ALGORITHM_UNSPECIFIED = 0;
   */
  SIGNATURE_ALGORITHM_UNSPECIFIED = 0,

  /**
   * RSASSA-PSS 2048 bit key with a SHA256 digest.
   *
   * @generated from enum value: RSA_PSS_2048_SHA256 = 1;
   */
  RSA_PSS_2048_SHA256 = 1,

  /**
   * RSASSA-PSS 3072 bit key with a SHA256 digest.
   *
   * @generated from enum value: RSA_PSS_3072_SHA256 = 2;
   */
  RSA_PSS_3072_SHA256 = 2,

  /**
   * RSASSA-PSS 4096 bit key with a SHA256 digest.
   *
   * @generated from enum value: RSA_PSS_4096_SHA256 = 3;
   */
  RSA_PSS_4096_SHA256 = 3,

  /**
   * RSASSA-PSS 4096 bit key with a SHA512 digest.
   *
   * @generated from enum value: RSA_PSS_4096_SHA512 = 4;
   */
  RSA_PSS_4096_SHA512 = 4,

  /**
   * RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
   *
   * @generated from enum value: RSA_SIGN_PKCS1_2048_SHA256 = 5;
   */
  RSA_SIGN_PKCS1_2048_SHA256 = 5,

  /**
   * RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
   *
   * @generated from enum value: RSA_SIGN_PKCS1_3072_SHA256 = 6;
   */
  RSA_SIGN_PKCS1_3072_SHA256 = 6,

  /**
   * RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
   *
   * @generated from enum value: RSA_SIGN_PKCS1_4096_SHA256 = 7;
   */
  RSA_SIGN_PKCS1_4096_SHA256 = 7,

  /**
   * RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
   *
   * @generated from enum value: RSA_SIGN_PKCS1_4096_SHA512 = 8;
   */
  RSA_SIGN_PKCS1_4096_SHA512 = 8,

  /**
   * ECDSA on the NIST P-256 curve with a SHA256 digest.
   *
   * @generated from enum value: ECDSA_P256_SHA256 = 9;
   */
  ECDSA_P256_SHA256 = 9,

  /**
   * ECDSA on the NIST P-256 curve with a SHA256 digest.
   *
   * @generated from enum value: EC_SIGN_P256_SHA256 = 9;
   */
  EC_SIGN_P256_SHA256 = 9,

  /**
   * ECDSA on the NIST P-384 curve with a SHA384 digest.
   *
   * @generated from enum value: ECDSA_P384_SHA384 = 10;
   */
  ECDSA_P384_SHA384 = 10,

  /**
   * ECDSA on the NIST P-384 curve with a SHA384 digest.
   *
   * @generated from enum value: EC_SIGN_P384_SHA384 = 10;
   */
  EC_SIGN_P384_SHA384 = 10,

  /**
   * ECDSA on the NIST P-521 curve with a SHA512 digest.
   *
   * @generated from enum value: ECDSA_P521_SHA512 = 11;
   */
  ECDSA_P521_SHA512 = 11,

  /**
   * ECDSA on the NIST P-521 curve with a SHA512 digest.
   *
   * @generated from enum value: EC_SIGN_P521_SHA512 = 11;
   */
  EC_SIGN_P521_SHA512 = 11,
}

/**
 * Describes the enum google.cloud.binaryauthorization.v1.PkixPublicKey.SignatureAlgorithm.
 */
export const PkixPublicKey_SignatureAlgorithmSchema: GenEnum<PkixPublicKey_SignatureAlgorithm> = /*@__PURE__*/
  enumDesc(file_google_cloud_binaryauthorization_v1_resources, 5, 0);

/**
 * An [attestor public key][google.cloud.binaryauthorization.v1.AttestorPublicKey] that will be used to verify
 * attestations signed by this attestor.
 *
 * @generated from message google.cloud.binaryauthorization.v1.AttestorPublicKey
 */
export type AttestorPublicKey = Message<"google.cloud.binaryauthorization.v1.AttestorPublicKey"> & {
  /**
   * Optional. A descriptive comment. This field may be updated.
   *
   * @generated from field: string comment = 1;
   */
  comment: string;

  /**
   * The ID of this public key.
   * Signatures verified by BinAuthz must include the ID of the public key that
   * can be used to verify them, and that ID must match the contents of this
   * field exactly.
   * Additional restrictions on this field can be imposed based on which public
   * key type is encapsulated. See the documentation on `public_key` cases below
   * for details.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * @generated from oneof google.cloud.binaryauthorization.v1.AttestorPublicKey.public_key
   */
  publicKey: {
    /**
     * ASCII-armored representation of a PGP public key, as the entire output by
     * the command `gpg --export --armor foo@example.com` (either LF or CRLF
     * line endings).
     * When using this field, `id` should be left blank.  The BinAuthz API
     * handlers will calculate the ID and fill it in automatically.  BinAuthz
     * computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as
     * upper-case hex.  If `id` is provided by the caller, it will be
     * overwritten by the API-calculated ID.
     *
     * @generated from field: string ascii_armored_pgp_public_key = 3;
     */
    value: string;
    case: "asciiArmoredPgpPublicKey";
  } | {
    /**
     * A raw PKIX SubjectPublicKeyInfo format public key.
     *
     * NOTE: `id` may be explicitly provided by the caller when using this
     * type of public key, but it MUST be a valid RFC3986 URI. If `id` is left
     * blank, a default one will be computed based on the digest of the DER
     * encoding of the public key.
     *
     * @generated from field: google.cloud.binaryauthorization.v1.PkixPublicKey pkix_public_key = 5;
     */
    value: PkixPublicKey;
    case: "pkixPublicKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.binaryauthorization.v1.AttestorPublicKey.
 * Use `create(AttestorPublicKeySchema)` to create a new message.
 */
export const AttestorPublicKeySchema: GenMessage<AttestorPublicKey> = /*@__PURE__*/
  messageDesc(file_google_cloud_binaryauthorization_v1_resources, 6);

