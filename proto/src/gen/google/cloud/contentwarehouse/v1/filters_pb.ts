// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/contentwarehouse/v1/filters.proto (package google.cloud.contentwarehouse.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Interval } from "../../../type/interval_pb";
import { file_google_type_interval } from "../../../type/interval_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/contentwarehouse/v1/filters.proto.
 */
export const file_google_cloud_contentwarehouse_v1_filters: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvY2xvdWQvY29udGVudHdhcmVob3VzZS92MS9maWx0ZXJzLnByb3RvEiBnb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MSKdBAoNRG9jdW1lbnRRdWVyeRINCgVxdWVyeRgBIAEoCRITCgtpc19ubF9xdWVyeRgMIAEoCBIiChZjdXN0b21fcHJvcGVydHlfZmlsdGVyGAQgASgJQgIYARJCCgx0aW1lX2ZpbHRlcnMYBSADKAsyLC5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5UaW1lRmlsdGVyEh0KFWRvY3VtZW50X3NjaGVtYV9uYW1lcxgGIAMoCRJJCg9wcm9wZXJ0eV9maWx0ZXIYByADKAsyMC5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5Qcm9wZXJ0eUZpbHRlchJKChBmaWxlX3R5cGVfZmlsdGVyGAggASgLMjAuZ29vZ2xlLmNsb3VkLmNvbnRlbnR3YXJlaG91c2UudjEuRmlsZVR5cGVGaWx0ZXISGgoSZm9sZGVyX25hbWVfZmlsdGVyGAkgASgJEhwKFGRvY3VtZW50X25hbWVfZmlsdGVyGA4gAygJEhUKDXF1ZXJ5X2NvbnRleHQYCiADKAkSHwoXZG9jdW1lbnRfY3JlYXRvcl9maWx0ZXIYCyADKAkSWAoXY3VzdG9tX3dlaWdodHNfbWV0YWRhdGEYDSABKAsyNy5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5DdXN0b21XZWlnaHRzTWV0YWRhdGEi5AEKClRpbWVGaWx0ZXISKQoKdGltZV9yYW5nZRgBIAEoCzIVLmdvb2dsZS50eXBlLkludGVydmFsEkoKCnRpbWVfZmllbGQYAiABKA4yNi5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5UaW1lRmlsdGVyLlRpbWVGaWVsZCJfCglUaW1lRmllbGQSGgoWVElNRV9GSUVMRF9VTlNQRUNJRklFRBAAEg8KC0NSRUFURV9USU1FEAESDwoLVVBEQVRFX1RJTUUQAhIUChBESVNQT1NJVElPTl9USU1FEAMidgoOUHJvcGVydHlGaWx0ZXISUQoUZG9jdW1lbnRfc2NoZW1hX25hbWUYASABKAlCM/pBMAouY29udGVudHdhcmVob3VzZS5nb29nbGVhcGlzLmNvbS9Eb2N1bWVudFNjaGVtYRIRCgljb25kaXRpb24YAiABKAkiuQEKDkZpbGVUeXBlRmlsdGVyEkwKCWZpbGVfdHlwZRgBIAEoDjI5Lmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLkZpbGVUeXBlRmlsdGVyLkZpbGVUeXBlIlkKCEZpbGVUeXBlEhkKFUZJTEVfVFlQRV9VTlNQRUNJRklFRBAAEgcKA0FMTBABEgoKBkZPTERFUhACEgwKCERPQ1VNRU5UEAMSDwoLUk9PVF9GT0xERVIQBCJ1ChVDdXN0b21XZWlnaHRzTWV0YWRhdGESXAoad2VpZ2h0ZWRfc2NoZW1hX3Byb3BlcnRpZXMYASADKAsyOC5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5XZWlnaHRlZFNjaGVtYVByb3BlcnR5IoMBChZXZWlnaHRlZFNjaGVtYVByb3BlcnR5ElEKFGRvY3VtZW50X3NjaGVtYV9uYW1lGAEgASgJQjP6QTAKLmNvbnRlbnR3YXJlaG91c2UuZ29vZ2xlYXBpcy5jb20vRG9jdW1lbnRTY2hlbWESFgoOcHJvcGVydHlfbmFtZXMYAiADKAlC9AEKJGNvbS5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MUIMRmlsdGVyc1Byb3RvUAFaUGNsb3VkLmdvb2dsZS5jb20vZ28vY29udGVudHdhcmVob3VzZS9hcGl2MS9jb250ZW50d2FyZWhvdXNlcGI7Y29udGVudHdhcmVob3VzZXBiqgIgR29vZ2xlLkNsb3VkLkNvbnRlbnRXYXJlaG91c2UuVjHKAiBHb29nbGVcQ2xvdWRcQ29udGVudFdhcmVob3VzZVxWMeoCI0dvb2dsZTo6Q2xvdWQ6OkNvbnRlbnRXYXJlaG91c2U6OlYxYgZwcm90bzM", [file_google_api_resource, file_google_type_interval]);

/**
 * @generated from message google.cloud.contentwarehouse.v1.DocumentQuery
 */
export type DocumentQuery = Message<"google.cloud.contentwarehouse.v1.DocumentQuery"> & {
  /**
   * The query string that matches against the full text of the document and
   * the searchable properties.
   *
   * The query partially supports [Google AIP style
   * syntax](https://google.aip.dev/160). Specifically, the query supports
   * literals, logical operators, negation operators, comparison operators, and
   * functions.
   *
   * Literals: A bare literal value (examples: "42", "Hugo") is a value to be
   * matched against. It searches over the full text of the document and the
   * searchable properties.
   *
   * Logical operators: "AND", "and", "OR", and "or" are binary logical
   * operators (example: "engineer OR developer").
   *
   * Negation operators: "NOT" and "!" are negation operators (example: "NOT
   * software").
   *
   * Comparison operators: support the binary comparison operators =, !=, <, >,
   * <= and >= for string, numeric, enum, boolean. Also support like operator
   * `~~` for string. It provides semantic search functionality by parsing,
   * stemming and doing synonyms expansion against the input query.
   *
   * To specify a property in the query, the left hand side expression in the
   * comparison must be the property ID including the parent. The right hand
   * side must be literals. For example:
   * "\"projects/123/locations/us\".property_a < 1" matches results whose
   * "property_a" is less than 1 in project 123 and us location.
   * The literals and comparison expression can be connected in a single query
   * (example: "software engineer \"projects/123/locations/us\".salary > 100").
   *
   * Functions: supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Support nested expressions connected using parenthesis and logical
   * operators. The default logical operators is `AND` if there is no operators
   * between expressions.
   *
   * The query can be used with other filters e.g. `time_filters` and
   * `folder_name_filter`. They are connected with `AND` operator under the
   * hood.
   *
   * The maximum number of allowed characters is 255.
   *
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * Experimental, do not use.
   * If the query is a natural language question. False by default. If true,
   * then the question-answering feature will be used instead of search, and
   * `result_count` in
   * [SearchDocumentsRequest][google.cloud.contentwarehouse.v1.SearchDocumentsRequest]
   * must be set. In addition, all other input fields related to search
   * (pagination, histograms, etc.) will be ignored.
   *
   * @generated from field: bool is_nl_query = 12;
   */
  isNlQuery: boolean;

  /**
   * This filter specifies a structured syntax to match against the
   * [PropertyDefinition].[is_filterable][] marked as `true`. The syntax for
   * this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left
   * of the operator is a property name and the right of the operator is a
   * number or a quoted string. You must escape backslash (\\) and quote (\")
   * characters. Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be < 6000 bytes in length.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND
   * driving_years > 10`
   *
   * @generated from field: string custom_property_filter = 4 [deprecated = true];
   * @deprecated
   */
  customPropertyFilter: string;

  /**
   * Documents created/updated within a range specified by this filter are
   * searched against.
   *
   * @generated from field: repeated google.cloud.contentwarehouse.v1.TimeFilter time_filters = 5;
   */
  timeFilters: TimeFilter[];

  /**
   * This filter specifies the exact document schema
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name]
   * of the documents to search against.
   *
   * If a value isn't specified, documents within the search results are
   * associated with any schema. If multiple values are specified, documents
   * within the search results may be associated with any of the specified
   * schemas.
   *
   * At most 20 document schema names are allowed.
   *
   * @generated from field: repeated string document_schema_names = 6;
   */
  documentSchemaNames: string[];

  /**
   * This filter specifies a structured syntax to match against the
   * [PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]
   * marked as `true`. The relationship between the PropertyFilters is OR.
   *
   * @generated from field: repeated google.cloud.contentwarehouse.v1.PropertyFilter property_filter = 7;
   */
  propertyFilter: PropertyFilter[];

  /**
   * This filter specifies the types of files to return: ALL, FOLDER, or FILE.
   * If FOLDER or FILE is specified, then only either folders or files will be
   * returned, respectively. If ALL is specified, both folders and files will be
   * returned.
   *
   * If no value is specified, ALL files will be returned.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.FileTypeFilter file_type_filter = 8;
   */
  fileTypeFilter?: FileTypeFilter;

  /**
   * Search all the documents under this specified folder.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{document_id}.
   *
   * @generated from field: string folder_name_filter = 9;
   */
  folderNameFilter: string;

  /**
   * Search the documents in the list.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{document_id}.
   *
   * @generated from field: repeated string document_name_filter = 14;
   */
  documentNameFilter: string[];

  /**
   * For custom synonyms.
   * Customers provide the synonyms based on context. One customer can provide
   * multiple set of synonyms based on different context. The search query will
   * be expanded based on the custom synonyms of the query context set.
   * By default, no custom synonyms wll be applied if no query context is
   * provided.
   * It is not supported for CMEK compliant deployment.
   *
   * @generated from field: repeated string query_context = 10;
   */
  queryContext: string[];

  /**
   * The exact creator(s) of the documents to search against.
   *
   * If a value isn't specified, documents within the search results are
   * associated with any creator. If multiple values are specified, documents
   * within the search results may be associated with any of the specified
   * creators.
   *
   * @generated from field: repeated string document_creator_filter = 11;
   */
  documentCreatorFilter: string[];

  /**
   * To support the custom weighting across document schemas, customers need to
   * provide the properties to be used to boost the ranking in the search
   * request. For a search query with CustomWeightsMetadata specified, only the
   * RetrievalImportance for the properties in the CustomWeightsMetadata will
   * be honored.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.CustomWeightsMetadata custom_weights_metadata = 13;
   */
  customWeightsMetadata?: CustomWeightsMetadata;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.DocumentQuery.
 * Use `create(DocumentQuerySchema)` to create a new message.
 */
export const DocumentQuerySchema: GenMessage<DocumentQuery> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 0);

/**
 * Filter on create timestamp or update timestamp of documents.
 *
 * @generated from message google.cloud.contentwarehouse.v1.TimeFilter
 */
export type TimeFilter = Message<"google.cloud.contentwarehouse.v1.TimeFilter"> & {
  /**
   * @generated from field: google.type.Interval time_range = 1;
   */
  timeRange?: Interval;

  /**
   * Specifies which time field to filter documents on.
   *
   * Defaults to [TimeField.UPLOAD_TIME][].
   *
   * @generated from field: google.cloud.contentwarehouse.v1.TimeFilter.TimeField time_field = 2;
   */
  timeField: TimeFilter_TimeField;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.TimeFilter.
 * Use `create(TimeFilterSchema)` to create a new message.
 */
export const TimeFilterSchema: GenMessage<TimeFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 1);

/**
 * Time field used in TimeFilter.
 *
 * @generated from enum google.cloud.contentwarehouse.v1.TimeFilter.TimeField
 */
export enum TimeFilter_TimeField {
  /**
   * Default value.
   *
   * @generated from enum value: TIME_FIELD_UNSPECIFIED = 0;
   */
  TIME_FIELD_UNSPECIFIED = 0,

  /**
   * Earliest document create time.
   *
   * @generated from enum value: CREATE_TIME = 1;
   */
  CREATE_TIME = 1,

  /**
   * Latest document update time.
   *
   * @generated from enum value: UPDATE_TIME = 2;
   */
  UPDATE_TIME = 2,

  /**
   * Time when document becomes mutable again.
   *
   * @generated from enum value: DISPOSITION_TIME = 3;
   */
  DISPOSITION_TIME = 3,
}

/**
 * Describes the enum google.cloud.contentwarehouse.v1.TimeFilter.TimeField.
 */
export const TimeFilter_TimeFieldSchema: GenEnum<TimeFilter_TimeField> = /*@__PURE__*/
  enumDesc(file_google_cloud_contentwarehouse_v1_filters, 1, 0);

/**
 * @generated from message google.cloud.contentwarehouse.v1.PropertyFilter
 */
export type PropertyFilter = Message<"google.cloud.contentwarehouse.v1.PropertyFilter"> & {
  /**
   * The Document schema name
   * [Document.document_schema_name][google.cloud.contentwarehouse.v1.Document.document_schema_name].
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   *
   * @generated from field: string document_schema_name = 1;
   */
  documentSchemaName: string;

  /**
   * The filter condition.
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `<`, `<=`, `>`, `>=`, and `~~` where
   * the left of the operator is a property name and the right of the operator
   * is a number or a quoted string. You must escape backslash (\\) and quote
   * (\") characters.
   *
   * `~~` is the LIKE operator. The right of the operator must be a string. The
   * only supported property data type for LIKE is text_values. It provides
   * semantic search functionality by parsing, stemming and doing synonyms
   * expansion against the input query. It matches if the property contains
   * semantic similar content to the query. It is not regex matching or wildcard
   * matching. For example, "property.company ~~ \"google\"" will match records
   * whose property `property.compnay` have values like "Google Inc.", "Google
   * LLC" or "Google Company".
   *
   * Supported functions are `LOWER([property_name])` to perform a
   * case insensitive match and `EMPTY([property_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting
   * (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression must
   * be < 6000 bytes in length.
   *
   * Only properties that are marked filterable are allowed
   * ([PropertyDefinition.is_filterable][google.cloud.contentwarehouse.v1.PropertyDefinition.is_filterable]).
   * Property names do not need to be prefixed by the document schema id (as is
   * the case with histograms), however property names will need to be prefixed
   * by its parent hierarchy, if any.  For example:
   * top_property_name.sub_property_name.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND
   * driving_years > 10`
   *
   *
   * CMEK compliant deployment only supports:
   *
   * * Operators: `=`, `<`, `<=`, `>`, and `>=`.
   * * Boolean expressions: AND and OR.
   *
   * @generated from field: string condition = 2;
   */
  condition: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.PropertyFilter.
 * Use `create(PropertyFilterSchema)` to create a new message.
 */
export const PropertyFilterSchema: GenMessage<PropertyFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 2);

/**
 * Filter for the specific types of documents returned.
 *
 * @generated from message google.cloud.contentwarehouse.v1.FileTypeFilter
 */
export type FileTypeFilter = Message<"google.cloud.contentwarehouse.v1.FileTypeFilter"> & {
  /**
   * The type of files to return.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.FileTypeFilter.FileType file_type = 1;
   */
  fileType: FileTypeFilter_FileType;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.FileTypeFilter.
 * Use `create(FileTypeFilterSchema)` to create a new message.
 */
export const FileTypeFilterSchema: GenMessage<FileTypeFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 3);

/**
 * Representation of the types of files.
 *
 * @generated from enum google.cloud.contentwarehouse.v1.FileTypeFilter.FileType
 */
export enum FileTypeFilter_FileType {
  /**
   * Default document type. If set, disables the filter.
   *
   * @generated from enum value: FILE_TYPE_UNSPECIFIED = 0;
   */
  FILE_TYPE_UNSPECIFIED = 0,

  /**
   * Returns all document types, including folders.
   *
   * @generated from enum value: ALL = 1;
   */
  ALL = 1,

  /**
   * Returns only folders.
   *
   * @generated from enum value: FOLDER = 2;
   */
  FOLDER = 2,

  /**
   * Returns only non-folder documents.
   *
   * @generated from enum value: DOCUMENT = 3;
   */
  DOCUMENT = 3,

  /**
   * Returns only root folders
   *
   * @generated from enum value: ROOT_FOLDER = 4;
   */
  ROOT_FOLDER = 4,
}

/**
 * Describes the enum google.cloud.contentwarehouse.v1.FileTypeFilter.FileType.
 */
export const FileTypeFilter_FileTypeSchema: GenEnum<FileTypeFilter_FileType> = /*@__PURE__*/
  enumDesc(file_google_cloud_contentwarehouse_v1_filters, 3, 0);

/**
 * To support the custom weighting across document schemas.
 *
 * @generated from message google.cloud.contentwarehouse.v1.CustomWeightsMetadata
 */
export type CustomWeightsMetadata = Message<"google.cloud.contentwarehouse.v1.CustomWeightsMetadata"> & {
  /**
   * List of schema and property name. Allows a maximum of 10 schemas to be
   * specified for relevance boosting.
   *
   * @generated from field: repeated google.cloud.contentwarehouse.v1.WeightedSchemaProperty weighted_schema_properties = 1;
   */
  weightedSchemaProperties: WeightedSchemaProperty[];
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.CustomWeightsMetadata.
 * Use `create(CustomWeightsMetadataSchema)` to create a new message.
 */
export const CustomWeightsMetadataSchema: GenMessage<CustomWeightsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 4);

/**
 * Specifies the schema property name.
 *
 * @generated from message google.cloud.contentwarehouse.v1.WeightedSchemaProperty
 */
export type WeightedSchemaProperty = Message<"google.cloud.contentwarehouse.v1.WeightedSchemaProperty"> & {
  /**
   * The document schema name.
   *
   * @generated from field: string document_schema_name = 1;
   */
  documentSchemaName: string;

  /**
   * The property definition names in the schema.
   *
   * @generated from field: repeated string property_names = 2;
   */
  propertyNames: string[];
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.WeightedSchemaProperty.
 * Use `create(WeightedSchemaPropertySchema)` to create a new message.
 */
export const WeightedSchemaPropertySchema: GenMessage<WeightedSchemaProperty> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_filters, 5);

