// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/contentwarehouse/v1/pipelines.proto (package google.cloud.contentwarehouse.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { UserInfo } from "./common_pb";
import { file_google_cloud_contentwarehouse_v1_common } from "./common_pb";
import type { Policy } from "../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../iam/v1/policy_pb";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/contentwarehouse/v1/pipelines.proto.
 */
export const file_google_cloud_contentwarehouse_v1_pipelines: GenFile = /*@__PURE__*/
  fileDesc("CjBnb29nbGUvY2xvdWQvY29udGVudHdhcmVob3VzZS92MS9waXBlbGluZXMucHJvdG8SIGdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxIhUKE1J1blBpcGVsaW5lUmVzcG9uc2Ui+gcKE1J1blBpcGVsaW5lTWV0YWRhdGESGAoQdG90YWxfZmlsZV9jb3VudBgBIAEoBRIZChFmYWlsZWRfZmlsZV9jb3VudBgCIAEoBRI9Cgl1c2VyX2luZm8YAyABKAsyKi5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5Vc2VySW5mbxJ3ChxnY3NfaW5nZXN0X3BpcGVsaW5lX21ldGFkYXRhGAQgASgLMk8uZ29vZ2xlLmNsb3VkLmNvbnRlbnR3YXJlaG91c2UudjEuUnVuUGlwZWxpbmVNZXRhZGF0YS5HY3NJbmdlc3RQaXBlbGluZU1ldGFkYXRhSAASfAofZXhwb3J0X3RvX2Nkd19waXBlbGluZV9tZXRhZGF0YRgGIAEoCzJRLmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLlJ1blBpcGVsaW5lTWV0YWRhdGEuRXhwb3J0VG9DZHdQaXBlbGluZU1ldGFkYXRhSAAShwEKJXByb2Nlc3Nfd2l0aF9kb2NfYWlfcGlwZWxpbmVfbWV0YWRhdGEYByABKAsyVi5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5SdW5QaXBlbGluZU1ldGFkYXRhLlByb2Nlc3NXaXRoRG9jQWlQaXBlbGluZU1ldGFkYXRhSAASdAocaW5kaXZpZHVhbF9kb2N1bWVudF9zdGF0dXNlcxgFIAMoCzJOLmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLlJ1blBpcGVsaW5lTWV0YWRhdGEuSW5kaXZpZHVhbERvY3VtZW50U3RhdHVzGi8KGUdjc0luZ2VzdFBpcGVsaW5lTWV0YWRhdGESEgoKaW5wdXRfcGF0aBgBIAEoCRpdChtFeHBvcnRUb0Nkd1BpcGVsaW5lTWV0YWRhdGESEQoJZG9jdW1lbnRzGAEgAygJEhYKDmRvY19haV9kYXRhc2V0GAIgASgJEhMKC291dHB1dF9wYXRoGAMgASgJGn4KIFByb2Nlc3NXaXRoRG9jQWlQaXBlbGluZU1ldGFkYXRhEhEKCWRvY3VtZW50cxgBIAMoCRJHCg5wcm9jZXNzb3JfaW5mbxgCIAEoCzIvLmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLlByb2Nlc3NvckluZm8aUwoYSW5kaXZpZHVhbERvY3VtZW50U3RhdHVzEhMKC2RvY3VtZW50X2lkGAEgASgJEiIKBnN0YXR1cxgCIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQhMKEXBpcGVsaW5lX21ldGFkYXRhIlMKDVByb2Nlc3NvckluZm8SFgoOcHJvY2Vzc29yX25hbWUYASABKAkSFQoNZG9jdW1lbnRfdHlwZRgCIAEoCRITCgtzY2hlbWFfbmFtZRgDIAEoCSLSAQoUSW5nZXN0UGlwZWxpbmVDb25maWcSMgoTZG9jdW1lbnRfYWNsX3BvbGljeRgBIAEoCzIVLmdvb2dsZS5pYW0udjEuUG9saWN5EicKH2VuYWJsZV9kb2N1bWVudF90ZXh0X2V4dHJhY3Rpb24YAiABKAgSEwoGZm9sZGVyGAMgASgJQgPgQQESSAoOY2xvdWRfZnVuY3Rpb24YBCABKAlCMPpBLQorY2xvdWRmdW5jdGlvbnMuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGdW5jdGlvbiLLAQoRR2NzSW5nZXN0UGlwZWxpbmUSEgoKaW5wdXRfcGF0aBgBIAEoCRITCgtzY2hlbWFfbmFtZRgCIAEoCRIWCg5wcm9jZXNzb3JfdHlwZRgDIAEoCRIfChdza2lwX2luZ2VzdGVkX2RvY3VtZW50cxgEIAEoCBJUCg9waXBlbGluZV9jb25maWcYBSABKAsyNi5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5Jbmdlc3RQaXBlbGluZUNvbmZpZ0ID4EEBIoIDCiRHY3NJbmdlc3RXaXRoRG9jQWlQcm9jZXNzb3JzUGlwZWxpbmUSEgoKaW5wdXRfcGF0aBgBIAEoCRJWCh1zcGxpdF9jbGFzc2lmeV9wcm9jZXNzb3JfaW5mbxgCIAEoCzIvLmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLlByb2Nlc3NvckluZm8SUAoXZXh0cmFjdF9wcm9jZXNzb3JfaW5mb3MYAyADKAsyLy5nb29nbGUuY2xvdWQuY29udGVudHdhcmVob3VzZS52MS5Qcm9jZXNzb3JJbmZvEiUKHXByb2Nlc3Nvcl9yZXN1bHRzX2ZvbGRlcl9wYXRoGAQgASgJEh8KF3NraXBfaW5nZXN0ZWRfZG9jdW1lbnRzGAUgASgIElQKD3BpcGVsaW5lX2NvbmZpZxgGIAEoCzI2Lmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxLkluZ2VzdFBpcGVsaW5lQ29uZmlnQgPgQQEifwoTRXhwb3J0VG9DZHdQaXBlbGluZRIRCglkb2N1bWVudHMYASADKAkSGgoSZXhwb3J0X2ZvbGRlcl9wYXRoGAIgASgJEhsKDmRvY19haV9kYXRhc2V0GAMgASgJQgPgQQESHAoUdHJhaW5pbmdfc3BsaXRfcmF0aW8YBCABKAIiuQEKGFByb2Nlc3NXaXRoRG9jQWlQaXBlbGluZRIRCglkb2N1bWVudHMYASADKAkSGgoSZXhwb3J0X2ZvbGRlcl9wYXRoGAIgASgJEkcKDnByb2Nlc3Nvcl9pbmZvGAMgASgLMi8uZ29vZ2xlLmNsb3VkLmNvbnRlbnR3YXJlaG91c2UudjEuUHJvY2Vzc29ySW5mbxIlCh1wcm9jZXNzb3JfcmVzdWx0c19mb2xkZXJfcGF0aBgEIAEoCULkAgokY29tLmdvb2dsZS5jbG91ZC5jb250ZW50d2FyZWhvdXNlLnYxQg5QaXBlbGluZXNQcm90b1ABWlBjbG91ZC5nb29nbGUuY29tL2dvL2NvbnRlbnR3YXJlaG91c2UvYXBpdjEvY29udGVudHdhcmVob3VzZXBiO2NvbnRlbnR3YXJlaG91c2VwYqoCIEdvb2dsZS5DbG91ZC5Db250ZW50V2FyZWhvdXNlLlYxygIgR29vZ2xlXENsb3VkXENvbnRlbnRXYXJlaG91c2VcVjHqAiNHb29nbGU6OkNsb3VkOjpDb250ZW50V2FyZWhvdXNlOjpWMepBaworY2xvdWRmdW5jdGlvbnMuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGdW5jdGlvbhI8cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2Z1bmN0aW9ucy97ZnVuY3Rpb259YgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_contentwarehouse_v1_common, file_google_iam_v1_policy, file_google_rpc_status]);

/**
 * Response message of RunPipeline method.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineResponse
 */
export type RunPipelineResponse = Message<"google.cloud.contentwarehouse.v1.RunPipelineResponse"> & {
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineResponse.
 * Use `create(RunPipelineResponseSchema)` to create a new message.
 */
export const RunPipelineResponseSchema: GenMessage<RunPipelineResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 0);

/**
 * Metadata message of RunPipeline method.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineMetadata
 */
export type RunPipelineMetadata = Message<"google.cloud.contentwarehouse.v1.RunPipelineMetadata"> & {
  /**
   * Number of files that were processed by the pipeline.
   *
   * @generated from field: int32 total_file_count = 1;
   */
  totalFileCount: number;

  /**
   * Number of files that have failed at some point in the pipeline.
   *
   * @generated from field: int32 failed_file_count = 2;
   */
  failedFileCount: number;

  /**
   * User unique identification and groups information.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.UserInfo user_info = 3;
   */
  userInfo?: UserInfo;

  /**
   * The pipeline metadata.
   *
   * @generated from oneof google.cloud.contentwarehouse.v1.RunPipelineMetadata.pipeline_metadata
   */
  pipelineMetadata: {
    /**
     * The pipeline metadata for GcsIngest pipeline.
     *
     * @generated from field: google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata gcs_ingest_pipeline_metadata = 4;
     */
    value: RunPipelineMetadata_GcsIngestPipelineMetadata;
    case: "gcsIngestPipelineMetadata";
  } | {
    /**
     * The pipeline metadata for Export-to-CDW pipeline.
     *
     * @generated from field: google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata export_to_cdw_pipeline_metadata = 6;
     */
    value: RunPipelineMetadata_ExportToCdwPipelineMetadata;
    case: "exportToCdwPipelineMetadata";
  } | {
    /**
     * The pipeline metadata for Process-with-DocAi pipeline.
     *
     * @generated from field: google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata process_with_doc_ai_pipeline_metadata = 7;
     */
    value: RunPipelineMetadata_ProcessWithDocAiPipelineMetadata;
    case: "processWithDocAiPipelineMetadata";
  } | { case: undefined; value?: undefined };

  /**
   * The list of response details of each document.
   *
   * @generated from field: repeated google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus individual_document_statuses = 5;
   */
  individualDocumentStatuses: RunPipelineMetadata_IndividualDocumentStatus[];
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineMetadata.
 * Use `create(RunPipelineMetadataSchema)` to create a new message.
 */
export const RunPipelineMetadataSchema: GenMessage<RunPipelineMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 1);

/**
 * The metadata message for GcsIngest pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata
 */
export type RunPipelineMetadata_GcsIngestPipelineMetadata = Message<"google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata"> & {
  /**
   * The input Cloud Storage folder in this pipeline.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string input_path = 1;
   */
  inputPath: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata.
 * Use `create(RunPipelineMetadata_GcsIngestPipelineMetadataSchema)` to create a new message.
 */
export const RunPipelineMetadata_GcsIngestPipelineMetadataSchema: GenMessage<RunPipelineMetadata_GcsIngestPipelineMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 1, 0);

/**
 * The metadata message for Export-to-CDW pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata
 */
export type RunPipelineMetadata_ExportToCdwPipelineMetadata = Message<"google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata"> & {
  /**
   * The input list of all the resource names of the documents to be exported.
   *
   * @generated from field: repeated string documents = 1;
   */
  documents: string[];

  /**
   * The output CDW dataset resource name.
   *
   * @generated from field: string doc_ai_dataset = 2;
   */
  docAiDataset: string;

  /**
   * The output Cloud Storage folder in this pipeline.
   *
   * @generated from field: string output_path = 3;
   */
  outputPath: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata.
 * Use `create(RunPipelineMetadata_ExportToCdwPipelineMetadataSchema)` to create a new message.
 */
export const RunPipelineMetadata_ExportToCdwPipelineMetadataSchema: GenMessage<RunPipelineMetadata_ExportToCdwPipelineMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 1, 1);

/**
 * The metadata message for Process-with-DocAi pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata
 */
export type RunPipelineMetadata_ProcessWithDocAiPipelineMetadata = Message<"google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata"> & {
  /**
   * The input list of all the resource names of the documents to be
   * processed.
   *
   * @generated from field: repeated string documents = 1;
   */
  documents: string[];

  /**
   * The DocAI processor to process the documents with.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.ProcessorInfo processor_info = 2;
   */
  processorInfo?: ProcessorInfo;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata.
 * Use `create(RunPipelineMetadata_ProcessWithDocAiPipelineMetadataSchema)` to create a new message.
 */
export const RunPipelineMetadata_ProcessWithDocAiPipelineMetadataSchema: GenMessage<RunPipelineMetadata_ProcessWithDocAiPipelineMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 1, 2);

/**
 * The status of processing a document.
 *
 * @generated from message google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus
 */
export type RunPipelineMetadata_IndividualDocumentStatus = Message<"google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus"> & {
  /**
   * Document identifier of an existing document.
   *
   * @generated from field: string document_id = 1;
   */
  documentId: string;

  /**
   * The status processing the document.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus.
 * Use `create(RunPipelineMetadata_IndividualDocumentStatusSchema)` to create a new message.
 */
export const RunPipelineMetadata_IndividualDocumentStatusSchema: GenMessage<RunPipelineMetadata_IndividualDocumentStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 1, 3);

/**
 * The DocAI processor information.
 *
 * @generated from message google.cloud.contentwarehouse.v1.ProcessorInfo
 */
export type ProcessorInfo = Message<"google.cloud.contentwarehouse.v1.ProcessorInfo"> & {
  /**
   * The processor resource name.
   * Format is `projects/{project}/locations/{location}/processors/{processor}`,
   * or
   * `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
   *
   * @generated from field: string processor_name = 1;
   */
  processorName: string;

  /**
   * The processor will process the documents with this document type.
   *
   * @generated from field: string document_type = 2;
   */
  documentType: string;

  /**
   * The Document schema resource name. All documents processed by this
   * processor will use this schema.
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   *
   * @generated from field: string schema_name = 3;
   */
  schemaName: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.ProcessorInfo.
 * Use `create(ProcessorInfoSchema)` to create a new message.
 */
export const ProcessorInfoSchema: GenMessage<ProcessorInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 2);

/**
 * The ingestion pipeline config.
 *
 * @generated from message google.cloud.contentwarehouse.v1.IngestPipelineConfig
 */
export type IngestPipelineConfig = Message<"google.cloud.contentwarehouse.v1.IngestPipelineConfig"> & {
  /**
   * The document level acl policy config.
   * This refers to an Identity and Access (IAM) policy, which specifies access
   * controls for all documents ingested by the pipeline. The
   * [role][google.iam.v1.Binding.role] and
   * [members][google.iam.v1.Binding.role] under the policy needs to be
   * specified.
   *
   * The following roles are supported for document level acl control:
   * * roles/contentwarehouse.documentAdmin
   * * roles/contentwarehouse.documentEditor
   * * roles/contentwarehouse.documentViewer
   *
   * The following members are supported for document level acl control:
   * * user:user-email@example.com
   * * group:group-email@example.com
   * Note that for documents searched with LLM, only single level user or group
   * acl check is supported.
   *
   * @generated from field: google.iam.v1.Policy document_acl_policy = 1;
   */
  documentAclPolicy?: Policy;

  /**
   * The document text extraction enabled flag.
   * If the flag is set to true, DWH will perform text extraction on the raw
   * document.
   *
   * @generated from field: bool enable_document_text_extraction = 2;
   */
  enableDocumentTextExtraction: boolean;

  /**
   * Optional. The name of the folder to which all ingested documents will be
   * linked during ingestion process. Format is
   * `projects/{project}/locations/{location}/documents/{folder_id}`
   *
   * @generated from field: string folder = 3;
   */
  folder: string;

  /**
   * The Cloud Function resource name. The Cloud Function needs to live inside
   * consumer project and is accessible to Document AI Warehouse P4SA.
   * Only Cloud Functions V2 is supported. Cloud function execution should
   * complete within 5 minutes or this file ingestion may fail due to timeout.
   * Format: `https://{region}-{project_id}.cloudfunctions.net/{cloud_function}`
   * The following keys are available the request json payload.
   * * display_name
   * * properties
   * * plain_text
   * * reference_id
   * * document_schema_name
   * * raw_document_path
   * * raw_document_file_type
   *
   * The following keys from the cloud function json response payload will be
   * ingested to the Document AI Warehouse as part of Document proto content
   * and/or related information. The original values will be overridden if any
   * key is present in the response.
   * * display_name
   * * properties
   * * plain_text
   * * document_acl_policy
   * * folder
   *
   * @generated from field: string cloud_function = 4;
   */
  cloudFunction: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.IngestPipelineConfig.
 * Use `create(IngestPipelineConfigSchema)` to create a new message.
 */
export const IngestPipelineConfigSchema: GenMessage<IngestPipelineConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 3);

/**
 * The configuration of the Cloud Storage Ingestion pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.GcsIngestPipeline
 */
export type GcsIngestPipeline = Message<"google.cloud.contentwarehouse.v1.GcsIngestPipeline"> & {
  /**
   * The input Cloud Storage folder. All files under this folder will be
   * imported to Document Warehouse.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string input_path = 1;
   */
  inputPath: string;

  /**
   * The Document Warehouse schema resource name. All documents processed by
   * this pipeline will use this schema.
   * Format:
   * projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
   *
   * @generated from field: string schema_name = 2;
   */
  schemaName: string;

  /**
   * The Doc AI processor type name. Only used when the format of ingested
   * files is Doc AI Document proto format.
   *
   * @generated from field: string processor_type = 3;
   */
  processorType: string;

  /**
   * The flag whether to skip ingested documents.
   * If it is set to true, documents in Cloud Storage contains key "status" with
   * value "status=ingested" in custom metadata will be skipped to ingest.
   *
   * @generated from field: bool skip_ingested_documents = 4;
   */
  skipIngestedDocuments: boolean;

  /**
   * Optional. The config for the Cloud Storage Ingestion pipeline.
   * It provides additional customization options to run the pipeline and can be
   * skipped if it is not applicable.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.IngestPipelineConfig pipeline_config = 5;
   */
  pipelineConfig?: IngestPipelineConfig;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.GcsIngestPipeline.
 * Use `create(GcsIngestPipelineSchema)` to create a new message.
 */
export const GcsIngestPipelineSchema: GenMessage<GcsIngestPipeline> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 4);

/**
 * The configuration of the Cloud Storage Ingestion with DocAI Processors
 * pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline
 */
export type GcsIngestWithDocAiProcessorsPipeline = Message<"google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline"> & {
  /**
   * The input Cloud Storage folder. All files under this folder will be
   * imported to Document Warehouse.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string input_path = 1;
   */
  inputPath: string;

  /**
   * The split and classify processor information.
   * The split and classify result will be used to find a matched extract
   * processor.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.ProcessorInfo split_classify_processor_info = 2;
   */
  splitClassifyProcessorInfo?: ProcessorInfo;

  /**
   * The extract processors information.
   * One matched extract processor will be used to process documents based on
   * the classify processor result. If no classify processor is specified, the
   * first extract processor will be used.
   *
   * @generated from field: repeated google.cloud.contentwarehouse.v1.ProcessorInfo extract_processor_infos = 3;
   */
  extractProcessorInfos: ProcessorInfo[];

  /**
   * The Cloud Storage folder path used to store the raw results from
   * processors.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string processor_results_folder_path = 4;
   */
  processorResultsFolderPath: string;

  /**
   * The flag whether to skip ingested documents.
   * If it is set to true, documents in Cloud Storage contains key "status" with
   * value "status=ingested" in custom metadata will be skipped to ingest.
   *
   * @generated from field: bool skip_ingested_documents = 5;
   */
  skipIngestedDocuments: boolean;

  /**
   * Optional. The config for the Cloud Storage Ingestion with DocAI Processors
   * pipeline. It provides additional customization options to run the pipeline
   * and can be skipped if it is not applicable.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.IngestPipelineConfig pipeline_config = 6;
   */
  pipelineConfig?: IngestPipelineConfig;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline.
 * Use `create(GcsIngestWithDocAiProcessorsPipelineSchema)` to create a new message.
 */
export const GcsIngestWithDocAiProcessorsPipelineSchema: GenMessage<GcsIngestWithDocAiProcessorsPipeline> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 5);

/**
 * The configuration of exporting documents from the Document Warehouse to CDW
 * pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.ExportToCdwPipeline
 */
export type ExportToCdwPipeline = Message<"google.cloud.contentwarehouse.v1.ExportToCdwPipeline"> & {
  /**
   * The list of all the resource names of the documents to be processed.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{document_id}.
   *
   * @generated from field: repeated string documents = 1;
   */
  documents: string[];

  /**
   * The Cloud Storage folder path used to store the exported documents before
   * being sent to CDW.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string export_folder_path = 2;
   */
  exportFolderPath: string;

  /**
   * Optional. The CDW dataset resource name. This field is optional. If not
   * set, the documents will be exported to Cloud Storage only. Format:
   * projects/{project}/locations/{location}/processors/{processor}/dataset
   *
   * @generated from field: string doc_ai_dataset = 3;
   */
  docAiDataset: string;

  /**
   * Ratio of training dataset split. When importing into Document AI Workbench,
   * documents will be automatically split into training and test split category
   * with the specified ratio. This field is required if doc_ai_dataset is set.
   *
   * @generated from field: float training_split_ratio = 4;
   */
  trainingSplitRatio: number;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.ExportToCdwPipeline.
 * Use `create(ExportToCdwPipelineSchema)` to create a new message.
 */
export const ExportToCdwPipelineSchema: GenMessage<ExportToCdwPipeline> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 6);

/**
 * The configuration of processing documents in Document Warehouse with DocAi
 * processors pipeline.
 *
 * @generated from message google.cloud.contentwarehouse.v1.ProcessWithDocAiPipeline
 */
export type ProcessWithDocAiPipeline = Message<"google.cloud.contentwarehouse.v1.ProcessWithDocAiPipeline"> & {
  /**
   * The list of all the resource names of the documents to be processed.
   * Format:
   * projects/{project_number}/locations/{location}/documents/{document_id}.
   *
   * @generated from field: repeated string documents = 1;
   */
  documents: string[];

  /**
   * The Cloud Storage folder path used to store the exported documents before
   * being sent to CDW.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string export_folder_path = 2;
   */
  exportFolderPath: string;

  /**
   * The CDW processor information.
   *
   * @generated from field: google.cloud.contentwarehouse.v1.ProcessorInfo processor_info = 3;
   */
  processorInfo?: ProcessorInfo;

  /**
   * The Cloud Storage folder path used to store the raw results from
   * processors.
   * Format: `gs://<bucket-name>/<folder-name>`.
   *
   * @generated from field: string processor_results_folder_path = 4;
   */
  processorResultsFolderPath: string;
};

/**
 * Describes the message google.cloud.contentwarehouse.v1.ProcessWithDocAiPipeline.
 * Use `create(ProcessWithDocAiPipelineSchema)` to create a new message.
 */
export const ProcessWithDocAiPipelineSchema: GenMessage<ProcessWithDocAiPipeline> = /*@__PURE__*/
  messageDesc(file_google_cloud_contentwarehouse_v1_pipelines, 7);

