// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/datacatalog/v1beta1/policytagmanagerserialization.proto (package google.cloud.datacatalog.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Taxonomy, Taxonomy_PolicyType } from "./policytagmanager_pb";
import { file_google_cloud_datacatalog_v1beta1_policytagmanager } from "./policytagmanager_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/datacatalog/v1beta1/policytagmanagerserialization.proto.
 */
export const file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization: GenFile = /*@__PURE__*/
  fileDesc("CkRnb29nbGUvY2xvdWQvZGF0YWNhdGFsb2cvdjFiZXRhMS9wb2xpY3l0YWdtYW5hZ2Vyc2VyaWFsaXphdGlvbi5wcm90bxIgZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxYmV0YTEi5wEKElNlcmlhbGl6ZWRUYXhvbm9teRIZCgxkaXNwbGF5X25hbWUYASABKAlCA+BBAhITCgtkZXNjcmlwdGlvbhgCIAEoCRJKCgtwb2xpY3lfdGFncxgDIAMoCzI1Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MWJldGExLlNlcmlhbGl6ZWRQb2xpY3lUYWcSVQoWYWN0aXZhdGVkX3BvbGljeV90eXBlcxgEIAMoDjI1Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MWJldGExLlRheG9ub215LlBvbGljeVR5cGUiqwEKE1NlcmlhbGl6ZWRQb2xpY3lUYWcSEgoKcG9saWN5X3RhZxgBIAEoCRIZCgxkaXNwbGF5X25hbWUYAiABKAlCA+BBAhITCgtkZXNjcmlwdGlvbhgDIAEoCRJQChFjaGlsZF9wb2xpY3lfdGFncxgEIAMoCzI1Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MWJldGExLlNlcmlhbGl6ZWRQb2xpY3lUYWciqQEKF0ltcG9ydFRheG9ub21pZXNSZXF1ZXN0EjsKBnBhcmVudBgBIAEoCUIr4EEC+kElEiNkYXRhY2F0YWxvZy5nb29nbGVhcGlzLmNvbS9UYXhvbm9teRJHCg1pbmxpbmVfc291cmNlGAIgASgLMi4uZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxYmV0YTEuSW5saW5lU291cmNlSABCCAoGc291cmNlIl0KDElubGluZVNvdXJjZRJNCgp0YXhvbm9taWVzGAEgAygLMjQuZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxYmV0YTEuU2VyaWFsaXplZFRheG9ub215QgPgQQIiWgoYSW1wb3J0VGF4b25vbWllc1Jlc3BvbnNlEj4KCnRheG9ub21pZXMYASADKAsyKi5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjFiZXRhMS5UYXhvbm9teSLHAQoXRXhwb3J0VGF4b25vbWllc1JlcXVlc3QSOwoGcGFyZW50GAEgASgJQivgQQL6QSUSI2RhdGFjYXRhbG9nLmdvb2dsZWFwaXMuY29tL1RheG9ub215Ej8KCnRheG9ub21pZXMYAiADKAlCK+BBAvpBJQojZGF0YWNhdGFsb2cuZ29vZ2xlYXBpcy5jb20vVGF4b25vbXkSHwoVc2VyaWFsaXplZF90YXhvbm9taWVzGAMgASgISABCDQoLZGVzdGluYXRpb24iZAoYRXhwb3J0VGF4b25vbWllc1Jlc3BvbnNlEkgKCnRheG9ub21pZXMYASADKAsyNC5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjFiZXRhMS5TZXJpYWxpemVkVGF4b25vbXkykgQKHVBvbGljeVRhZ01hbmFnZXJTZXJpYWxpemF0aW9uEtABChBJbXBvcnRUYXhvbm9taWVzEjkuZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxYmV0YTEuSW1wb3J0VGF4b25vbWllc1JlcXVlc3QaOi5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjFiZXRhMS5JbXBvcnRUYXhvbm9taWVzUmVzcG9uc2UiRYLT5JMCPzoBKiI6L3YxYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qfS90YXhvbm9taWVzOmltcG9ydBLNAQoQRXhwb3J0VGF4b25vbWllcxI5Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MWJldGExLkV4cG9ydFRheG9ub21pZXNSZXF1ZXN0GjouZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxYmV0YTEuRXhwb3J0VGF4b25vbWllc1Jlc3BvbnNlIkKC0+STAjwSOi92MWJldGExL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vdGF4b25vbWllczpleHBvcnQaTspBGmRhdGFjYXRhbG9nLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybUKDAgokY29tLmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MWJldGExQiJQb2xpY3lUYWdNYW5hZ2VyU2VyaWFsaXphdGlvblByb3RvUAFaRmNsb3VkLmdvb2dsZS5jb20vZ28vZGF0YWNhdGFsb2cvYXBpdjFiZXRhMS9kYXRhY2F0YWxvZ3BiO2RhdGFjYXRhbG9ncGL4AQGqAiBHb29nbGUuQ2xvdWQuRGF0YUNhdGFsb2cuVjFCZXRhMcoCIEdvb2dsZVxDbG91ZFxEYXRhQ2F0YWxvZ1xWMWJldGEx6gIjR29vZ2xlOjpDbG91ZDo6RGF0YUNhdGFsb2c6OlYxYmV0YTFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_datacatalog_v1beta1_policytagmanager]);

/**
 * Message capturing a taxonomy and its policy tag hierarchy as a nested proto.
 * Used for taxonomy import/export and mutation.
 *
 * @generated from message google.cloud.datacatalog.v1beta1.SerializedTaxonomy
 */
export type SerializedTaxonomy = Message<"google.cloud.datacatalog.v1beta1.SerializedTaxonomy"> & {
  /**
   * Required. Display name of the taxonomy. Max 200 bytes when encoded in
   * UTF-8.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Description of the serialized taxonomy. The length of the
   * description is limited to 2000 bytes when encoded in UTF-8. If not set,
   * defaults to an empty description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Top level policy tags associated with the taxonomy if any.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.SerializedPolicyTag policy_tags = 3;
   */
  policyTags: SerializedPolicyTag[];

  /**
   * A list of policy types that are activated for a taxonomy.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.Taxonomy.PolicyType activated_policy_types = 4;
   */
  activatedPolicyTypes: Taxonomy_PolicyType[];
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.SerializedTaxonomy.
 * Use `create(SerializedTaxonomySchema)` to create a new message.
 */
export const SerializedTaxonomySchema: GenMessage<SerializedTaxonomy> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 0);

/**
 * Message representing one policy tag when exported as a nested proto.
 *
 * @generated from message google.cloud.datacatalog.v1beta1.SerializedPolicyTag
 */
export type SerializedPolicyTag = Message<"google.cloud.datacatalog.v1beta1.SerializedPolicyTag"> & {
  /**
   * Resource name of the policy tag.
   *
   * This field will be ignored when calling ImportTaxonomies.
   *
   * @generated from field: string policy_tag = 1;
   */
  policyTag: string;

  /**
   * Required. Display name of the policy tag. Max 200 bytes when encoded in
   * UTF-8.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Description of the serialized policy tag. The length of the
   * description is limited to 2000 bytes when encoded in UTF-8. If not set,
   * defaults to an empty description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Children of the policy tag if any.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.SerializedPolicyTag child_policy_tags = 4;
   */
  childPolicyTags: SerializedPolicyTag[];
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.SerializedPolicyTag.
 * Use `create(SerializedPolicyTagSchema)` to create a new message.
 */
export const SerializedPolicyTagSchema: GenMessage<SerializedPolicyTag> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 1);

/**
 * Request message for
 * [ImportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ImportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1beta1.ImportTaxonomiesRequest
 */
export type ImportTaxonomiesRequest = Message<"google.cloud.datacatalog.v1beta1.ImportTaxonomiesRequest"> & {
  /**
   * Required. Resource name of project that the imported taxonomies will belong
   * to.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Source taxonomies to be imported.
   *
   * @generated from oneof google.cloud.datacatalog.v1beta1.ImportTaxonomiesRequest.source
   */
  source: {
    /**
     * Inline source used for taxonomies to be imported.
     *
     * @generated from field: google.cloud.datacatalog.v1beta1.InlineSource inline_source = 2;
     */
    value: InlineSource;
    case: "inlineSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.ImportTaxonomiesRequest.
 * Use `create(ImportTaxonomiesRequestSchema)` to create a new message.
 */
export const ImportTaxonomiesRequestSchema: GenMessage<ImportTaxonomiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 2);

/**
 * Inline source used for taxonomies import.
 *
 * @generated from message google.cloud.datacatalog.v1beta1.InlineSource
 */
export type InlineSource = Message<"google.cloud.datacatalog.v1beta1.InlineSource"> & {
  /**
   * Required. Taxonomies to be imported.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.SerializedTaxonomy taxonomies = 1;
   */
  taxonomies: SerializedTaxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.InlineSource.
 * Use `create(InlineSourceSchema)` to create a new message.
 */
export const InlineSourceSchema: GenMessage<InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 3);

/**
 * Response message for
 * [ImportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ImportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1beta1.ImportTaxonomiesResponse
 */
export type ImportTaxonomiesResponse = Message<"google.cloud.datacatalog.v1beta1.ImportTaxonomiesResponse"> & {
  /**
   * Taxonomies that were imported.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.Taxonomy taxonomies = 1;
   */
  taxonomies: Taxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.ImportTaxonomiesResponse.
 * Use `create(ImportTaxonomiesResponseSchema)` to create a new message.
 */
export const ImportTaxonomiesResponseSchema: GenMessage<ImportTaxonomiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 4);

/**
 * Request message for
 * [ExportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ExportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1beta1.ExportTaxonomiesRequest
 */
export type ExportTaxonomiesRequest = Message<"google.cloud.datacatalog.v1beta1.ExportTaxonomiesRequest"> & {
  /**
   * Required. Resource name of the project that taxonomies to be exported
   * will share.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Resource names of the taxonomies to be exported.
   *
   * @generated from field: repeated string taxonomies = 2;
   */
  taxonomies: string[];

  /**
   * Required. Taxonomies export destination.
   *
   * @generated from oneof google.cloud.datacatalog.v1beta1.ExportTaxonomiesRequest.destination
   */
  destination: {
    /**
     * Export taxonomies as serialized taxonomies.
     *
     * @generated from field: bool serialized_taxonomies = 3;
     */
    value: boolean;
    case: "serializedTaxonomies";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.ExportTaxonomiesRequest.
 * Use `create(ExportTaxonomiesRequestSchema)` to create a new message.
 */
export const ExportTaxonomiesRequestSchema: GenMessage<ExportTaxonomiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 5);

/**
 * Response message for
 * [ExportTaxonomies][google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ExportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1beta1.ExportTaxonomiesResponse
 */
export type ExportTaxonomiesResponse = Message<"google.cloud.datacatalog.v1beta1.ExportTaxonomiesResponse"> & {
  /**
   * List of taxonomies and policy tags in a tree structure.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1beta1.SerializedTaxonomy taxonomies = 1;
   */
  taxonomies: SerializedTaxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1beta1.ExportTaxonomiesResponse.
 * Use `create(ExportTaxonomiesResponseSchema)` to create a new message.
 */
export const ExportTaxonomiesResponseSchema: GenMessage<ExportTaxonomiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 6);

/**
 * Policy tag manager serialization API service allows clients to manipulate
 * their taxonomies and policy tags data with serialized format.
 *
 * @generated from service google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization
 */
export const PolicyTagManagerSerialization: GenService<{
  /**
   * Imports all taxonomies and their policy tags to a project as new
   * taxonomies.
   *
   * This method provides a bulk taxonomy / policy tag creation using nested
   * proto structure.
   *
   * @generated from rpc google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ImportTaxonomies
   */
  importTaxonomies: {
    methodKind: "unary";
    input: typeof ImportTaxonomiesRequestSchema;
    output: typeof ImportTaxonomiesResponseSchema;
  },
  /**
   * Exports all taxonomies and their policy tags in a project.
   *
   * This method generates SerializedTaxonomy protos with nested policy tags
   * that can be used as an input for future ImportTaxonomies calls.
   *
   * @generated from rpc google.cloud.datacatalog.v1beta1.PolicyTagManagerSerialization.ExportTaxonomies
   */
  exportTaxonomies: {
    methodKind: "unary";
    input: typeof ExportTaxonomiesRequestSchema;
    output: typeof ExportTaxonomiesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_datacatalog_v1beta1_policytagmanagerserialization, 0);

