// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/datacatalog/v1/policytagmanagerserialization.proto (package google.cloud.datacatalog.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Taxonomy, Taxonomy_PolicyType, TaxonomySchema } from "./policytagmanager_pb";
import { file_google_cloud_datacatalog_v1_policytagmanager } from "./policytagmanager_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/datacatalog/v1/policytagmanagerserialization.proto.
 */
export const file_google_cloud_datacatalog_v1_policytagmanagerserialization: GenFile = /*@__PURE__*/
  fileDesc("Cj9nb29nbGUvY2xvdWQvZGF0YWNhdGFsb2cvdjEvcG9saWN5dGFnbWFuYWdlcnNlcmlhbGl6YXRpb24ucHJvdG8SG2dvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MSLdAQoSU2VyaWFsaXplZFRheG9ub215EhkKDGRpc3BsYXlfbmFtZRgBIAEoCUID4EECEhMKC2Rlc2NyaXB0aW9uGAIgASgJEkUKC3BvbGljeV90YWdzGAMgAygLMjAuZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxLlNlcmlhbGl6ZWRQb2xpY3lUYWcSUAoWYWN0aXZhdGVkX3BvbGljeV90eXBlcxgEIAMoDjIwLmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MS5UYXhvbm9teS5Qb2xpY3lUeXBlIqYBChNTZXJpYWxpemVkUG9saWN5VGFnEhIKCnBvbGljeV90YWcYASABKAkSGQoMZGlzcGxheV9uYW1lGAIgASgJQgPgQQISEwoLZGVzY3JpcHRpb24YAyABKAkSSwoRY2hpbGRfcG9saWN5X3RhZ3MYBCADKAsyMC5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjEuU2VyaWFsaXplZFBvbGljeVRhZyKmAQoWUmVwbGFjZVRheG9ub215UmVxdWVzdBI5CgRuYW1lGAEgASgJQivgQQL6QSUKI2RhdGFjYXRhbG9nLmdvb2dsZWFwaXMuY29tL1RheG9ub215ElEKE3NlcmlhbGl6ZWRfdGF4b25vbXkYAiABKAsyLy5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjEuU2VyaWFsaXplZFRheG9ub215QgPgQQIi9wEKF0ltcG9ydFRheG9ub21pZXNSZXF1ZXN0EjsKBnBhcmVudBgBIAEoCUIr4EEC+kElEiNkYXRhY2F0YWxvZy5nb29nbGVhcGlzLmNvbS9UYXhvbm9teRJCCg1pbmxpbmVfc291cmNlGAIgASgLMikuZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxLklubGluZVNvdXJjZUgAElEKFWNyb3NzX3JlZ2lvbmFsX3NvdXJjZRgDIAEoCzIwLmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MS5Dcm9zc1JlZ2lvbmFsU291cmNlSABCCAoGc291cmNlIlgKDElubGluZVNvdXJjZRJICgp0YXhvbm9taWVzGAEgAygLMi8uZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxLlNlcmlhbGl6ZWRUYXhvbm9teUID4EECIlQKE0Nyb3NzUmVnaW9uYWxTb3VyY2USPQoIdGF4b25vbXkYASABKAlCK+BBAvpBJQojZGF0YWNhdGFsb2cuZ29vZ2xlYXBpcy5jb20vVGF4b25vbXkiVQoYSW1wb3J0VGF4b25vbWllc1Jlc3BvbnNlEjkKCnRheG9ub21pZXMYASADKAsyJS5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjEuVGF4b25vbXkixwEKF0V4cG9ydFRheG9ub21pZXNSZXF1ZXN0EjsKBnBhcmVudBgBIAEoCUIr4EEC+kElEiNkYXRhY2F0YWxvZy5nb29nbGVhcGlzLmNvbS9UYXhvbm9teRI/Cgp0YXhvbm9taWVzGAIgAygJQivgQQL6QSUKI2RhdGFjYXRhbG9nLmdvb2dsZWFwaXMuY29tL1RheG9ub215Eh8KFXNlcmlhbGl6ZWRfdGF4b25vbWllcxgDIAEoCEgAQg0KC2Rlc3RpbmF0aW9uIl8KGEV4cG9ydFRheG9ub21pZXNSZXNwb25zZRJDCgp0YXhvbm9taWVzGAEgAygLMi8uZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxLlNlcmlhbGl6ZWRUYXhvbm9teTKnBQodUG9saWN5VGFnTWFuYWdlclNlcmlhbGl6YXRpb24SsAEKD1JlcGxhY2VUYXhvbm9teRIzLmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MS5SZXBsYWNlVGF4b25vbXlSZXF1ZXN0GiUuZ29vZ2xlLmNsb3VkLmRhdGFjYXRhbG9nLnYxLlRheG9ub215IkGC0+STAjs6ASoiNi92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3RheG9ub21pZXMvKn06cmVwbGFjZRLBAQoQSW1wb3J0VGF4b25vbWllcxI0Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MS5JbXBvcnRUYXhvbm9taWVzUmVxdWVzdBo1Lmdvb2dsZS5jbG91ZC5kYXRhY2F0YWxvZy52MS5JbXBvcnRUYXhvbm9taWVzUmVzcG9uc2UiQILT5JMCOjoBKiI1L3YxL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vdGF4b25vbWllczppbXBvcnQSvgEKEEV4cG9ydFRheG9ub21pZXMSNC5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjEuRXhwb3J0VGF4b25vbWllc1JlcXVlc3QaNS5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjEuRXhwb3J0VGF4b25vbWllc1Jlc3BvbnNlIj2C0+STAjcSNS92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyp9L3RheG9ub21pZXM6ZXhwb3J0Gk7KQRpkYXRhY2F0YWxvZy5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1C6gEKH2NvbS5nb29nbGUuY2xvdWQuZGF0YWNhdGFsb2cudjFCIlBvbGljeVRhZ01hbmFnZXJTZXJpYWxpemF0aW9uUHJvdG9QAVpBY2xvdWQuZ29vZ2xlLmNvbS9nby9kYXRhY2F0YWxvZy9hcGl2MS9kYXRhY2F0YWxvZ3BiO2RhdGFjYXRhbG9ncGL4AQGqAhtHb29nbGUuQ2xvdWQuRGF0YUNhdGFsb2cuVjHKAhtHb29nbGVcQ2xvdWRcRGF0YUNhdGFsb2dcVjHqAh5Hb29nbGU6OkNsb3VkOjpEYXRhQ2F0YWxvZzo6VjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_datacatalog_v1_policytagmanager]);

/**
 * A nested protocol buffer that represents a taxonomy and the hierarchy of its
 * policy tags. Used for taxonomy replacement, import, and
 * export.
 *
 * @generated from message google.cloud.datacatalog.v1.SerializedTaxonomy
 */
export type SerializedTaxonomy = Message<"google.cloud.datacatalog.v1.SerializedTaxonomy"> & {
  /**
   * Required. Display name of the taxonomy. At most 200 bytes when encoded in
   * UTF-8.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Description of the serialized taxonomy. At most 2000 bytes when
   * encoded in UTF-8. If not set, defaults to an empty description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Top level policy tags associated with the taxonomy, if any.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.SerializedPolicyTag policy_tags = 3;
   */
  policyTags: SerializedPolicyTag[];

  /**
   * A list of policy types that are activated per taxonomy.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.Taxonomy.PolicyType activated_policy_types = 4;
   */
  activatedPolicyTypes: Taxonomy_PolicyType[];
};

/**
 * Describes the message google.cloud.datacatalog.v1.SerializedTaxonomy.
 * Use `create(SerializedTaxonomySchema)` to create a new message.
 */
export const SerializedTaxonomySchema: GenMessage<SerializedTaxonomy> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 0);

/**
 * A nested protocol buffer that represents a policy tag and all its
 * descendants.
 *
 * @generated from message google.cloud.datacatalog.v1.SerializedPolicyTag
 */
export type SerializedPolicyTag = Message<"google.cloud.datacatalog.v1.SerializedPolicyTag"> & {
  /**
   * Resource name of the policy tag.
   *
   * This field is ignored when calling `ImportTaxonomies`.
   *
   * @generated from field: string policy_tag = 1;
   */
  policyTag: string;

  /**
   * Required. Display name of the policy tag. At most 200 bytes when encoded
   * in UTF-8.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Description of the serialized policy tag. At most
   * 2000 bytes when encoded in UTF-8. If not set, defaults to an
   * empty description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Children of the policy tag, if any.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.SerializedPolicyTag child_policy_tags = 4;
   */
  childPolicyTags: SerializedPolicyTag[];
};

/**
 * Describes the message google.cloud.datacatalog.v1.SerializedPolicyTag.
 * Use `create(SerializedPolicyTagSchema)` to create a new message.
 */
export const SerializedPolicyTagSchema: GenMessage<SerializedPolicyTag> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 1);

/**
 * Request message for
 * [ReplaceTaxonomy][google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ReplaceTaxonomy].
 *
 * @generated from message google.cloud.datacatalog.v1.ReplaceTaxonomyRequest
 */
export type ReplaceTaxonomyRequest = Message<"google.cloud.datacatalog.v1.ReplaceTaxonomyRequest"> & {
  /**
   * Required. Resource name of the taxonomy to update.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Taxonomy to update along with its child policy tags.
   *
   * @generated from field: google.cloud.datacatalog.v1.SerializedTaxonomy serialized_taxonomy = 2;
   */
  serializedTaxonomy?: SerializedTaxonomy;
};

/**
 * Describes the message google.cloud.datacatalog.v1.ReplaceTaxonomyRequest.
 * Use `create(ReplaceTaxonomyRequestSchema)` to create a new message.
 */
export const ReplaceTaxonomyRequestSchema: GenMessage<ReplaceTaxonomyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 2);

/**
 * Request message for
 * [ImportTaxonomies][google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ImportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1.ImportTaxonomiesRequest
 */
export type ImportTaxonomiesRequest = Message<"google.cloud.datacatalog.v1.ImportTaxonomiesRequest"> & {
  /**
   * Required. Resource name of project that the imported taxonomies will belong
   * to.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Source taxonomies to import.
   *
   * @generated from oneof google.cloud.datacatalog.v1.ImportTaxonomiesRequest.source
   */
  source: {
    /**
     * Inline source taxonomy to import.
     *
     * @generated from field: google.cloud.datacatalog.v1.InlineSource inline_source = 2;
     */
    value: InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cross-regional source taxonomy to import.
     *
     * @generated from field: google.cloud.datacatalog.v1.CrossRegionalSource cross_regional_source = 3;
     */
    value: CrossRegionalSource;
    case: "crossRegionalSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.datacatalog.v1.ImportTaxonomiesRequest.
 * Use `create(ImportTaxonomiesRequestSchema)` to create a new message.
 */
export const ImportTaxonomiesRequestSchema: GenMessage<ImportTaxonomiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 3);

/**
 * Inline source containing taxonomies to import.
 *
 * @generated from message google.cloud.datacatalog.v1.InlineSource
 */
export type InlineSource = Message<"google.cloud.datacatalog.v1.InlineSource"> & {
  /**
   * Required. Taxonomies to import.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.SerializedTaxonomy taxonomies = 1;
   */
  taxonomies: SerializedTaxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1.InlineSource.
 * Use `create(InlineSourceSchema)` to create a new message.
 */
export const InlineSourceSchema: GenMessage<InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 4);

/**
 * Cross-regional source used to import an existing taxonomy into a different
 * region.
 *
 * @generated from message google.cloud.datacatalog.v1.CrossRegionalSource
 */
export type CrossRegionalSource = Message<"google.cloud.datacatalog.v1.CrossRegionalSource"> & {
  /**
   * Required. The resource name of the source taxonomy to import.
   *
   * @generated from field: string taxonomy = 1;
   */
  taxonomy: string;
};

/**
 * Describes the message google.cloud.datacatalog.v1.CrossRegionalSource.
 * Use `create(CrossRegionalSourceSchema)` to create a new message.
 */
export const CrossRegionalSourceSchema: GenMessage<CrossRegionalSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 5);

/**
 * Response message for
 * [ImportTaxonomies][google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ImportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1.ImportTaxonomiesResponse
 */
export type ImportTaxonomiesResponse = Message<"google.cloud.datacatalog.v1.ImportTaxonomiesResponse"> & {
  /**
   * Imported taxonomies.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.Taxonomy taxonomies = 1;
   */
  taxonomies: Taxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1.ImportTaxonomiesResponse.
 * Use `create(ImportTaxonomiesResponseSchema)` to create a new message.
 */
export const ImportTaxonomiesResponseSchema: GenMessage<ImportTaxonomiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 6);

/**
 * Request message for
 * [ExportTaxonomies][google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ExportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1.ExportTaxonomiesRequest
 */
export type ExportTaxonomiesRequest = Message<"google.cloud.datacatalog.v1.ExportTaxonomiesRequest"> & {
  /**
   * Required. Resource name of the project that the exported taxonomies belong
   * to.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Resource names of the taxonomies to export.
   *
   * @generated from field: repeated string taxonomies = 2;
   */
  taxonomies: string[];

  /**
   * Required. Export destination for taxonomies.
   *
   * @generated from oneof google.cloud.datacatalog.v1.ExportTaxonomiesRequest.destination
   */
  destination: {
    /**
     * Serialized export taxonomies that contain all the policy
     * tags as nested protocol buffers.
     *
     * @generated from field: bool serialized_taxonomies = 3;
     */
    value: boolean;
    case: "serializedTaxonomies";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.datacatalog.v1.ExportTaxonomiesRequest.
 * Use `create(ExportTaxonomiesRequestSchema)` to create a new message.
 */
export const ExportTaxonomiesRequestSchema: GenMessage<ExportTaxonomiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 7);

/**
 * Response message for
 * [ExportTaxonomies][google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ExportTaxonomies].
 *
 * @generated from message google.cloud.datacatalog.v1.ExportTaxonomiesResponse
 */
export type ExportTaxonomiesResponse = Message<"google.cloud.datacatalog.v1.ExportTaxonomiesResponse"> & {
  /**
   * List of taxonomies and policy tags as nested protocol buffers.
   *
   * @generated from field: repeated google.cloud.datacatalog.v1.SerializedTaxonomy taxonomies = 1;
   */
  taxonomies: SerializedTaxonomy[];
};

/**
 * Describes the message google.cloud.datacatalog.v1.ExportTaxonomiesResponse.
 * Use `create(ExportTaxonomiesResponseSchema)` to create a new message.
 */
export const ExportTaxonomiesResponseSchema: GenMessage<ExportTaxonomiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 8);

/**
 * Policy Tag Manager Serialization API service allows you to manipulate
 * your policy tags and taxonomies in a serialized format.
 *
 * Taxonomy is a hierarchical group of policy tags.
 *
 * @generated from service google.cloud.datacatalog.v1.PolicyTagManagerSerialization
 */
export const PolicyTagManagerSerialization: GenService<{
  /**
   * Replaces (updates) a taxonomy and all its policy tags.
   *
   * The taxonomy and its entire hierarchy of policy tags must be
   * represented literally by `SerializedTaxonomy` and the nested
   * `SerializedPolicyTag` messages.
   *
   * This operation automatically does the following:
   *
   * - Deletes the existing policy tags that are missing from the
   *   `SerializedPolicyTag`.
   * - Creates policy tags that don't have resource names. They are considered
   *   new.
   * - Updates policy tags with valid resources names accordingly.
   *
   * @generated from rpc google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ReplaceTaxonomy
   */
  replaceTaxonomy: {
    methodKind: "unary";
    input: typeof ReplaceTaxonomyRequestSchema;
    output: typeof TaxonomySchema;
  },
  /**
   * Creates new taxonomies (including their policy tags) in a given project
   * by importing from inlined or cross-regional sources.
   *
   * For a cross-regional source, new taxonomies are created by copying
   * from a source in another region.
   *
   * For an inlined source, taxonomies and policy tags are created in bulk using
   * nested protocol buffer structures.
   *
   * @generated from rpc google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ImportTaxonomies
   */
  importTaxonomies: {
    methodKind: "unary";
    input: typeof ImportTaxonomiesRequestSchema;
    output: typeof ImportTaxonomiesResponseSchema;
  },
  /**
   * Exports taxonomies in the requested type and returns them,
   * including their policy tags. The requested taxonomies must belong to the
   * same project.
   *
   * This method generates `SerializedTaxonomy` protocol buffers with nested
   * policy tags that can be used as input for `ImportTaxonomies` calls.
   *
   * @generated from rpc google.cloud.datacatalog.v1.PolicyTagManagerSerialization.ExportTaxonomies
   */
  exportTaxonomies: {
    methodKind: "unary";
    input: typeof ExportTaxonomiesRequestSchema;
    output: typeof ExportTaxonomiesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_datacatalog_v1_policytagmanagerserialization, 0);

