// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/talent/v4/filters.proto (package google.cloud.talent.v4, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { CommuteMethod, CompensationInfo_CompensationRange, CompensationInfo_CompensationUnit, EmploymentType, JobCategory, TimestampRange } from "./common_pb";
import { file_google_cloud_talent_v4_common } from "./common_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { TimeOfDay } from "../../../type/timeofday_pb";
import { file_google_type_timeofday } from "../../../type/timeofday_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/talent/v4/filters.proto.
 */
export const file_google_cloud_talent_v4_filters: GenFile = /*@__PURE__*/
  fileDesc("CiRnb29nbGUvY2xvdWQvdGFsZW50L3Y0L2ZpbHRlcnMucHJvdG8SFmdvb2dsZS5jbG91ZC50YWxlbnQudjQi4gQKCEpvYlF1ZXJ5Eg0KBXF1ZXJ5GAEgASgJEhsKE3F1ZXJ5X2xhbmd1YWdlX2NvZGUYDiABKAkSEQoJY29tcGFuaWVzGAIgAygJEkAKEGxvY2F0aW9uX2ZpbHRlcnMYAyADKAsyJi5nb29nbGUuY2xvdWQudGFsZW50LnY0LkxvY2F0aW9uRmlsdGVyEjsKDmpvYl9jYXRlZ29yaWVzGAQgAygOMiMuZ29vZ2xlLmNsb3VkLnRhbGVudC52NC5Kb2JDYXRlZ29yeRI9Cg5jb21tdXRlX2ZpbHRlchgFIAEoCzIlLmdvb2dsZS5jbG91ZC50YWxlbnQudjQuQ29tbXV0ZUZpbHRlchIdChVjb21wYW55X2Rpc3BsYXlfbmFtZXMYBiADKAkSRwoTY29tcGVuc2F0aW9uX2ZpbHRlchgHIAEoCzIqLmdvb2dsZS5jbG91ZC50YWxlbnQudjQuQ29tcGVuc2F0aW9uRmlsdGVyEh8KF2N1c3RvbV9hdHRyaWJ1dGVfZmlsdGVyGAggASgJEhsKE2Rpc2FibGVfc3BlbGxfY2hlY2sYCSABKAgSQAoQZW1wbG95bWVudF90eXBlcxgKIAMoDjImLmdvb2dsZS5jbG91ZC50YWxlbnQudjQuRW1wbG95bWVudFR5cGUSFgoObGFuZ3VhZ2VfY29kZXMYCyADKAkSQgoScHVibGlzaF90aW1lX3JhbmdlGAwgASgLMiYuZ29vZ2xlLmNsb3VkLnRhbGVudC52NC5UaW1lc3RhbXBSYW5nZRIVCg1leGNsdWRlZF9qb2JzGA0gAygJIu0CCg5Mb2NhdGlvbkZpbHRlchIPCgdhZGRyZXNzGAEgASgJEhMKC3JlZ2lvbl9jb2RlGAIgASgJEiQKB2xhdF9sbmcYAyABKAsyEy5nb29nbGUudHlwZS5MYXRMbmcSGQoRZGlzdGFuY2VfaW5fbWlsZXMYBCABKAESXAoWdGVsZWNvbW11dGVfcHJlZmVyZW5jZRgFIAEoDjI8Lmdvb2dsZS5jbG91ZC50YWxlbnQudjQuTG9jYXRpb25GaWx0ZXIuVGVsZWNvbW11dGVQcmVmZXJlbmNlIpUBChVUZWxlY29tbXV0ZVByZWZlcmVuY2USJgoiVEVMRUNPTU1VVEVfUFJFRkVSRU5DRV9VTlNQRUNJRklFRBAAEhwKFFRFTEVDT01NVVRFX0VYQ0xVREVEEAEaAggBEhcKE1RFTEVDT01NVVRFX0FMTE9XRUQQAhIdChlURUxFQ09NTVVURV9KT0JTX0VYQ0xVREVEEAMiuwMKEkNvbXBlbnNhdGlvbkZpbHRlchJICgR0eXBlGAEgASgOMjUuZ29vZ2xlLmNsb3VkLnRhbGVudC52NC5Db21wZW5zYXRpb25GaWx0ZXIuRmlsdGVyVHlwZUID4EECEk0KBXVuaXRzGAIgAygOMjkuZ29vZ2xlLmNsb3VkLnRhbGVudC52NC5Db21wZW5zYXRpb25JbmZvLkNvbXBlbnNhdGlvblVuaXRCA+BBAhJJCgVyYW5nZRgDIAEoCzI6Lmdvb2dsZS5jbG91ZC50YWxlbnQudjQuQ29tcGVuc2F0aW9uSW5mby5Db21wZW5zYXRpb25SYW5nZRI4CjBpbmNsdWRlX2pvYnNfd2l0aF91bnNwZWNpZmllZF9jb21wZW5zYXRpb25fcmFuZ2UYBCABKAgihgEKCkZpbHRlclR5cGUSGwoXRklMVEVSX1RZUEVfVU5TUEVDSUZJRUQQABINCglVTklUX09OTFkQARITCg9VTklUX0FORF9BTU9VTlQQAhIaChZBTk5VQUxJWkVEX0JBU0VfQU1PVU5UEAMSGwoXQU5OVUFMSVpFRF9UT1RBTF9BTU9VTlQQBCLBAwoNQ29tbXV0ZUZpbHRlchJCCg5jb21tdXRlX21ldGhvZBgBIAEoDjIlLmdvb2dsZS5jbG91ZC50YWxlbnQudjQuQ29tbXV0ZU1ldGhvZEID4EECEjMKEXN0YXJ0X2Nvb3JkaW5hdGVzGAIgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nQgPgQQISNwoPdHJhdmVsX2R1cmF0aW9uGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQISIQoZYWxsb3dfaW1wcmVjaXNlX2FkZHJlc3NlcxgEIAEoCBJJCgxyb2FkX3RyYWZmaWMYBSABKA4yMS5nb29nbGUuY2xvdWQudGFsZW50LnY0LkNvbW11dGVGaWx0ZXIuUm9hZFRyYWZmaWNIABIwCg5kZXBhcnR1cmVfdGltZRgGIAEoCzIWLmdvb2dsZS50eXBlLlRpbWVPZkRheUgAIkwKC1JvYWRUcmFmZmljEhwKGFJPQURfVFJBRkZJQ19VTlNQRUNJRklFRBAAEhAKDFRSQUZGSUNfRlJFRRABEg0KCUJVU1lfSE9VUhACQhAKDnRyYWZmaWNfb3B0aW9uQmYKGmNvbS5nb29nbGUuY2xvdWQudGFsZW50LnY0QgxGaWx0ZXJzUHJvdG9QAVoyY2xvdWQuZ29vZ2xlLmNvbS9nby90YWxlbnQvYXBpdjQvdGFsZW50cGI7dGFsZW50cGKiAgNDVFNiBnByb3RvMw", [file_google_api_field_behavior, file_google_cloud_talent_v4_common, file_google_protobuf_duration, file_google_type_latlng, file_google_type_timeofday]);

/**
 * The query required to perform a search query.
 *
 * @generated from message google.cloud.talent.v4.JobQuery
 */
export type JobQuery = Message<"google.cloud.talent.v4.JobQuery"> & {
  /**
   * The query string that matches against the job title, description, and
   * location fields.
   *
   * The maximum number of allowed characters is 255.
   *
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * The language code of [query][google.cloud.talent.v4.JobQuery.query]. For
   * example, "en-US". This field helps to better interpret the query.
   *
   * If a value isn't specified, the query language code is automatically
   * detected, which may not be accurate.
   *
   * Language code should be in BCP-47 format, such as "en-US" or "sr-Latn".
   * For more information, see
   * [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
   *
   * @generated from field: string query_language_code = 14;
   */
  queryLanguageCode: string;

  /**
   * This filter specifies the company entities to search against.
   *
   * If a value isn't specified, jobs are searched for against all
   * companies.
   *
   * If multiple values are specified, jobs are searched against the
   * companies specified.
   *
   * The format is
   * "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For
   * example, "projects/foo/tenants/bar/companies/baz".
   *
   * At most 20 company filters are allowed.
   *
   * @generated from field: repeated string companies = 2;
   */
  companies: string[];

  /**
   * The location filter specifies geo-regions containing the jobs to
   * search against. See [LocationFilter][google.cloud.talent.v4.LocationFilter]
   * for more information.
   *
   * If a location value isn't specified, jobs fitting the other search
   * criteria are retrieved regardless of where they're located.
   *
   * If multiple values are specified, jobs are retrieved from any of the
   * specified locations. If different values are specified for the
   * [LocationFilter.distance_in_miles][google.cloud.talent.v4.LocationFilter.distance_in_miles]
   * parameter, the maximum provided distance is used for all locations.
   *
   * At most 5 location filters are allowed.
   *
   * @generated from field: repeated google.cloud.talent.v4.LocationFilter location_filters = 3;
   */
  locationFilters: LocationFilter[];

  /**
   * The category filter specifies the categories of jobs to search against.
   * See [JobCategory][google.cloud.talent.v4.JobCategory] for more information.
   *
   * If a value isn't specified, jobs from any category are searched against.
   *
   * If multiple values are specified, jobs from any of the specified
   * categories are searched against.
   *
   * @generated from field: repeated google.cloud.talent.v4.JobCategory job_categories = 4;
   */
  jobCategories: JobCategory[];

  /**
   * Allows filtering jobs by commute time with different travel methods (for
   *  example, driving or public transit).
   *
   * Note: This only works when you specify a
   * [CommuteMethod][google.cloud.talent.v4.CommuteMethod]. In this case,
   * [location_filters][google.cloud.talent.v4.JobQuery.location_filters] is
   * ignored.
   *
   *  Currently we don't support sorting by commute time.
   *
   * @generated from field: google.cloud.talent.v4.CommuteFilter commute_filter = 5;
   */
  commuteFilter?: CommuteFilter;

  /**
   * This filter specifies the company
   * [Company.display_name][google.cloud.talent.v4.Company.display_name] of the
   * jobs to search against. The company name must match the value exactly.
   *
   * Alternatively, the value being searched for can be wrapped in different
   * match operators.
   * `SUBSTRING_MATCH([value])`
   * The company name must contain a case insensitive substring match of the
   * value. Using this function may increase latency.
   *
   * Sample Value: `SUBSTRING_MATCH(google)`
   *
   * `MULTI_WORD_TOKEN_MATCH([value])`
   * The value will be treated as a multi word token and the company name must
   * contain a case insensitive match of the value. Using this function may
   * increase latency.
   *
   * Sample Value: `MULTI_WORD_TOKEN_MATCH(google)`
   *
   * If a value isn't specified, jobs within the search results are
   * associated with any company.
   *
   * If multiple values are specified, jobs within the search results may be
   * associated with any of the specified companies.
   *
   * At most 20 company display name filters are allowed.
   *
   * @generated from field: repeated string company_display_names = 6;
   */
  companyDisplayNames: string[];

  /**
   * This search filter is applied only to
   * [Job.compensation_info][google.cloud.talent.v4.Job.compensation_info]. For
   * example, if the filter is specified as "Hourly job with per-hour
   * compensation > $15", only jobs meeting these criteria are searched. If a
   * filter isn't defined, all open jobs are searched.
   *
   * @generated from field: google.cloud.talent.v4.CompensationFilter compensation_filter = 7;
   */
  compensationFilter?: CompensationFilter;

  /**
   * This filter specifies a structured syntax to match against the
   * [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes]
   * marked as `filterable`.
   *
   * The syntax for this expression is a subset of SQL syntax.
   *
   * Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the
   * left of the operator is a custom field key and the right of the operator
   * is a number or a quoted string. You must escape backslash (\\) and
   * quote (\") characters.
   *
   * Supported functions are `LOWER([field_name])` to
   * perform a case insensitive match and `EMPTY([field_name])` to filter on the
   * existence of a key.
   *
   * Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
   * nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
   * comparisons or functions are allowed in the expression. The expression
   * must be < 10000 bytes in length.
   *
   * Sample Query:
   * `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND
   * driving_years > 10`
   *
   * @generated from field: string custom_attribute_filter = 8;
   */
  customAttributeFilter: string;

  /**
   * This flag controls the spell-check feature. If false, the
   * service attempts to correct a misspelled query,
   * for example, "enginee" is corrected to "engineer".
   *
   * Defaults to false: a spell check is performed.
   *
   * @generated from field: bool disable_spell_check = 9;
   */
  disableSpellCheck: boolean;

  /**
   * The employment type filter specifies the employment type of jobs to
   * search against, such as
   * [EmploymentType.FULL_TIME][google.cloud.talent.v4.EmploymentType.FULL_TIME].
   *
   * If a value isn't specified, jobs in the search results includes any
   * employment type.
   *
   * If multiple values are specified, jobs in the search results include
   * any of the specified employment types.
   *
   * @generated from field: repeated google.cloud.talent.v4.EmploymentType employment_types = 10;
   */
  employmentTypes: EmploymentType[];

  /**
   * This filter specifies the locale of jobs to search against,
   * for example, "en-US".
   *
   * If a value isn't specified, the search results can contain jobs in any
   * locale.
   *
   *
   * Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn".
   * For more information, see
   * [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
   *
   * At most 10 language code filters are allowed.
   *
   * @generated from field: repeated string language_codes = 11;
   */
  languageCodes: string[];

  /**
   * Jobs published within a range specified by this filter are searched
   * against.
   *
   * @generated from field: google.cloud.talent.v4.TimestampRange publish_time_range = 12;
   */
  publishTimeRange?: TimestampRange;

  /**
   * This filter specifies a list of job names to be excluded during search.
   *
   * At most 400 excluded job names are allowed.
   *
   * @generated from field: repeated string excluded_jobs = 13;
   */
  excludedJobs: string[];
};

/**
 * Describes the message google.cloud.talent.v4.JobQuery.
 * Use `create(JobQuerySchema)` to create a new message.
 */
export const JobQuerySchema: GenMessage<JobQuery> = /*@__PURE__*/
  messageDesc(file_google_cloud_talent_v4_filters, 0);

/**
 * Geographic region of the search.
 *
 * @generated from message google.cloud.talent.v4.LocationFilter
 */
export type LocationFilter = Message<"google.cloud.talent.v4.LocationFilter"> & {
  /**
   * The address name, such as "Mountain View" or "Bay Area".
   *
   * @generated from field: string address = 1;
   */
  address: string;

  /**
   * CLDR region code of the country/region. This field may be used in two ways:
   *
   * 1) If telecommute preference is not set, this field is used address
   * ambiguity of the user-input address. For example, "Liverpool" may refer to
   * "Liverpool, NY, US" or "Liverpool, UK". This region code biases the
   * address resolution toward a specific country or territory. If this field is
   * not set, address resolution is biased toward the United States by default.
   *
   * 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the
   * telecommute location filter will be limited to the region specified in this
   * field. If this field is not set, the telecommute job locations will not be
   *
   * See
   * https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html
   * for details. Example: "CH" for Switzerland.
   *
   * @generated from field: string region_code = 2;
   */
  regionCode: string;

  /**
   * The latitude and longitude of the geographic center to search from. This
   * field is ignored if `address` is provided.
   *
   * @generated from field: google.type.LatLng lat_lng = 3;
   */
  latLng?: LatLng;

  /**
   * The distance_in_miles is applied when the location being searched for is
   * identified as a city or smaller. This field is ignored if the location
   * being searched for is a state or larger.
   *
   * @generated from field: double distance_in_miles = 4;
   */
  distanceInMiles: number;

  /**
   * Allows the client to return jobs without a
   * set location, specifically, telecommuting jobs (telecommuting is considered
   * by the service as a special location).
   * [Job.posting_region][google.cloud.talent.v4.Job.posting_region] indicates
   * if a job permits telecommuting. If this field is set to
   * [TelecommutePreference.TELECOMMUTE_ALLOWED][google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_ALLOWED],
   * telecommuting jobs are searched, and
   * [address][google.cloud.talent.v4.LocationFilter.address] and
   * [lat_lng][google.cloud.talent.v4.LocationFilter.lat_lng] are ignored. If
   * not set or set to
   * [TelecommutePreference.TELECOMMUTE_EXCLUDED][google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_EXCLUDED],
   * the telecommute status of the jobs is ignored. Jobs that have
   * [PostingRegion.TELECOMMUTE][google.cloud.talent.v4.PostingRegion.TELECOMMUTE]
   * and have additional [Job.addresses][google.cloud.talent.v4.Job.addresses]
   * may still be matched based on other location filters using
   * [address][google.cloud.talent.v4.LocationFilter.address] or [latlng][].
   *
   * This filter can be used by itself to search exclusively for telecommuting
   * jobs, or it can be combined with another location
   * filter to search for a combination of job locations,
   * such as "Mountain View" or "telecommuting" jobs. However, when used in
   * combination with other location filters, telecommuting jobs can be
   * treated as less relevant than other jobs in the search response.
   *
   * This field is only used for job search requests.
   *
   * @generated from field: google.cloud.talent.v4.LocationFilter.TelecommutePreference telecommute_preference = 5;
   */
  telecommutePreference: LocationFilter_TelecommutePreference;
};

/**
 * Describes the message google.cloud.talent.v4.LocationFilter.
 * Use `create(LocationFilterSchema)` to create a new message.
 */
export const LocationFilterSchema: GenMessage<LocationFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_talent_v4_filters, 1);

/**
 * Specify whether to include telecommute jobs.
 *
 * @generated from enum google.cloud.talent.v4.LocationFilter.TelecommutePreference
 */
export enum LocationFilter_TelecommutePreference {
  /**
   * Default value if the telecommute preference isn't specified.
   *
   * @generated from enum value: TELECOMMUTE_PREFERENCE_UNSPECIFIED = 0;
   */
  TELECOMMUTE_PREFERENCE_UNSPECIFIED = 0,

  /**
   * Deprecated: Ignore telecommute status of jobs. Use
   * TELECOMMUTE_JOBS_EXCLUDED if want to exclude telecommute jobs.
   *
   * @generated from enum value: TELECOMMUTE_EXCLUDED = 1 [deprecated = true];
   * @deprecated
   */
  TELECOMMUTE_EXCLUDED = 1,

  /**
   * Allow telecommute jobs.
   *
   * @generated from enum value: TELECOMMUTE_ALLOWED = 2;
   */
  TELECOMMUTE_ALLOWED = 2,

  /**
   * Exclude telecommute jobs.
   *
   * @generated from enum value: TELECOMMUTE_JOBS_EXCLUDED = 3;
   */
  TELECOMMUTE_JOBS_EXCLUDED = 3,
}

/**
 * Describes the enum google.cloud.talent.v4.LocationFilter.TelecommutePreference.
 */
export const LocationFilter_TelecommutePreferenceSchema: GenEnum<LocationFilter_TelecommutePreference> = /*@__PURE__*/
  enumDesc(file_google_cloud_talent_v4_filters, 1, 0);

/**
 * Filter on job compensation type and amount.
 *
 * @generated from message google.cloud.talent.v4.CompensationFilter
 */
export type CompensationFilter = Message<"google.cloud.talent.v4.CompensationFilter"> & {
  /**
   * Required. Type of filter.
   *
   * @generated from field: google.cloud.talent.v4.CompensationFilter.FilterType type = 1;
   */
  type: CompensationFilter_FilterType;

  /**
   * Required. Specify desired `base compensation entry's`
   * [CompensationInfo.CompensationUnit][google.cloud.talent.v4.CompensationInfo.CompensationUnit].
   *
   * @generated from field: repeated google.cloud.talent.v4.CompensationInfo.CompensationUnit units = 2;
   */
  units: CompensationInfo_CompensationUnit[];

  /**
   * Compensation range.
   *
   * @generated from field: google.cloud.talent.v4.CompensationInfo.CompensationRange range = 3;
   */
  range?: CompensationInfo_CompensationRange;

  /**
   * If set to true, jobs with unspecified compensation range fields are
   * included.
   *
   * @generated from field: bool include_jobs_with_unspecified_compensation_range = 4;
   */
  includeJobsWithUnspecifiedCompensationRange: boolean;
};

/**
 * Describes the message google.cloud.talent.v4.CompensationFilter.
 * Use `create(CompensationFilterSchema)` to create a new message.
 */
export const CompensationFilterSchema: GenMessage<CompensationFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_talent_v4_filters, 2);

/**
 * Specify the type of filtering.
 *
 * @generated from enum google.cloud.talent.v4.CompensationFilter.FilterType
 */
export enum CompensationFilter_FilterType {
  /**
   * Filter type unspecified. Position holder, INVALID, should never be used.
   *
   * @generated from enum value: FILTER_TYPE_UNSPECIFIED = 0;
   */
  FILTER_TYPE_UNSPECIFIED = 0,

  /**
   * Filter by `base compensation entry's` unit. A job is a match if and
   * only if the job contains a base CompensationEntry and the base
   * CompensationEntry's unit matches provided
   * [units][google.cloud.talent.v4.CompensationFilter.units]. Populate one or
   * more [units][google.cloud.talent.v4.CompensationFilter.units].
   *
   * See
   * [CompensationInfo.CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
   * for definition of base compensation entry.
   *
   * @generated from enum value: UNIT_ONLY = 1;
   */
  UNIT_ONLY = 1,

  /**
   * Filter by `base compensation entry's` unit and amount / range. A job
   * is a match if and only if the job contains a base CompensationEntry, and
   * the base entry's unit matches provided
   * [CompensationUnit][google.cloud.talent.v4.CompensationInfo.CompensationUnit]
   * and amount or range overlaps with provided
   * [CompensationRange][google.cloud.talent.v4.CompensationInfo.CompensationRange].
   *
   * See
   * [CompensationInfo.CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
   * for definition of base compensation entry.
   *
   * Set exactly one [units][google.cloud.talent.v4.CompensationFilter.units]
   * and populate [range][google.cloud.talent.v4.CompensationFilter.range].
   *
   * @generated from enum value: UNIT_AND_AMOUNT = 2;
   */
  UNIT_AND_AMOUNT = 2,

  /**
   * Filter by annualized base compensation amount and `base compensation
   * entry's` unit. Populate
   * [range][google.cloud.talent.v4.CompensationFilter.range] and zero or more
   * [units][google.cloud.talent.v4.CompensationFilter.units].
   *
   * @generated from enum value: ANNUALIZED_BASE_AMOUNT = 3;
   */
  ANNUALIZED_BASE_AMOUNT = 3,

  /**
   * Filter by annualized total compensation amount and `base compensation
   * entry's` unit . Populate
   * [range][google.cloud.talent.v4.CompensationFilter.range] and zero or more
   * [units][google.cloud.talent.v4.CompensationFilter.units].
   *
   * @generated from enum value: ANNUALIZED_TOTAL_AMOUNT = 4;
   */
  ANNUALIZED_TOTAL_AMOUNT = 4,
}

/**
 * Describes the enum google.cloud.talent.v4.CompensationFilter.FilterType.
 */
export const CompensationFilter_FilterTypeSchema: GenEnum<CompensationFilter_FilterType> = /*@__PURE__*/
  enumDesc(file_google_cloud_talent_v4_filters, 2, 0);

/**
 * Parameters needed for commute search.
 *
 * @generated from message google.cloud.talent.v4.CommuteFilter
 */
export type CommuteFilter = Message<"google.cloud.talent.v4.CommuteFilter"> & {
  /**
   * Required. The method of transportation to calculate the commute time for.
   *
   * @generated from field: google.cloud.talent.v4.CommuteMethod commute_method = 1;
   */
  commuteMethod: CommuteMethod;

  /**
   * Required. The latitude and longitude of the location to calculate the
   * commute time from.
   *
   * @generated from field: google.type.LatLng start_coordinates = 2;
   */
  startCoordinates?: LatLng;

  /**
   * Required. The maximum travel time in seconds. The maximum allowed value is
   * `3600s` (one hour). Format is `123s`.
   *
   * @generated from field: google.protobuf.Duration travel_duration = 3;
   */
  travelDuration?: Duration;

  /**
   * If `true`, jobs without street level addresses may also be returned.
   * For city level addresses, the city center is used. For state and coarser
   * level addresses, text matching is used.
   * If this field is set to `false` or isn't specified, only jobs that include
   * street level addresses will be returned by commute search.
   *
   * @generated from field: bool allow_imprecise_addresses = 4;
   */
  allowImpreciseAddresses: boolean;

  /**
   * Traffic factor to take into account while searching by commute.
   *
   * @generated from oneof google.cloud.talent.v4.CommuteFilter.traffic_option
   */
  trafficOption: {
    /**
     * Specifies the traffic density to use when calculating commute time.
     *
     * @generated from field: google.cloud.talent.v4.CommuteFilter.RoadTraffic road_traffic = 5;
     */
    value: CommuteFilter_RoadTraffic;
    case: "roadTraffic";
  } | {
    /**
     * The departure time used to calculate traffic impact, represented as
     * [google.type.TimeOfDay][google.type.TimeOfDay] in local time zone.
     *
     * Currently traffic model is restricted to hour level resolution.
     *
     * @generated from field: google.type.TimeOfDay departure_time = 6;
     */
    value: TimeOfDay;
    case: "departureTime";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.talent.v4.CommuteFilter.
 * Use `create(CommuteFilterSchema)` to create a new message.
 */
export const CommuteFilterSchema: GenMessage<CommuteFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_talent_v4_filters, 3);

/**
 * The traffic density to use when calculating commute time.
 *
 * @generated from enum google.cloud.talent.v4.CommuteFilter.RoadTraffic
 */
export enum CommuteFilter_RoadTraffic {
  /**
   * Road traffic situation isn't specified.
   *
   * @generated from enum value: ROAD_TRAFFIC_UNSPECIFIED = 0;
   */
  ROAD_TRAFFIC_UNSPECIFIED = 0,

  /**
   * Optimal commute time without considering any traffic impact.
   *
   * @generated from enum value: TRAFFIC_FREE = 1;
   */
  TRAFFIC_FREE = 1,

  /**
   * Commute time calculation takes in account the peak traffic impact.
   *
   * @generated from enum value: BUSY_HOUR = 2;
   */
  BUSY_HOUR = 2,
}

/**
 * Describes the enum google.cloud.talent.v4.CommuteFilter.RoadTraffic.
 */
export const CommuteFilter_RoadTrafficSchema: GenEnum<CommuteFilter_RoadTraffic> = /*@__PURE__*/
  enumDesc(file_google_cloud_talent_v4_filters, 3, 0);

