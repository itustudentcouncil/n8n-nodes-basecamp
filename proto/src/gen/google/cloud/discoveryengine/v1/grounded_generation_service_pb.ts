// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/discoveryengine/v1/grounded_generation_service.proto (package google.cloud.discoveryengine.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { FactChunk, GroundingFact } from "./grounding_pb";
import { file_google_cloud_discoveryengine_v1_grounding } from "./grounding_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/discoveryengine/v1/grounded_generation_service.proto.
 */
export const file_google_cloud_discoveryengine_v1_grounded_generation_service: GenFile = /*@__PURE__*/
  fileDesc("CkFnb29nbGUvY2xvdWQvZGlzY292ZXJ5ZW5naW5lL3YxL2dyb3VuZGVkX2dlbmVyYXRpb25fc2VydmljZS5wcm90bxIfZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MSJMChJDaGVja0dyb3VuZGluZ1NwZWMSHwoSY2l0YXRpb25fdGhyZXNob2xkGAEgASgBSACIAQFCFQoTX2NpdGF0aW9uX3RocmVzaG9sZCKfAwoVQ2hlY2tHcm91bmRpbmdSZXF1ZXN0ElAKEGdyb3VuZGluZ19jb25maWcYASABKAlCNuBBAvpBMAouZGlzY292ZXJ5ZW5naW5lLmdvb2dsZWFwaXMuY29tL0dyb3VuZGluZ0NvbmZpZxIYChBhbnN3ZXJfY2FuZGlkYXRlGAIgASgJEj0KBWZhY3RzGAMgAygLMi4uZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MS5Hcm91bmRpbmdGYWN0EksKDmdyb3VuZGluZ19zcGVjGAQgASgLMjMuZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MS5DaGVja0dyb3VuZGluZ1NwZWMSWwoLdXNlcl9sYWJlbHMYBSADKAsyRi5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxLkNoZWNrR3JvdW5kaW5nUmVxdWVzdC5Vc2VyTGFiZWxzRW50cnkaMQoPVXNlckxhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEimwMKFkNoZWNrR3JvdW5kaW5nUmVzcG9uc2USGgoNc3VwcG9ydF9zY29yZRgBIAEoAkgAiAEBEkAKDGNpdGVkX2NodW5rcxgDIAMoCzIqLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjEuRmFjdENodW5rEk0KBmNsYWltcxgEIAMoCzI9Lmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjEuQ2hlY2tHcm91bmRpbmdSZXNwb25zZS5DbGFpbRrBAQoFQ2xhaW0SFgoJc3RhcnRfcG9zGAEgASgFSACIAQESFAoHZW5kX3BvcxgCIAEoBUgBiAEBEhIKCmNsYWltX3RleHQYAyABKAkSGAoQY2l0YXRpb25faW5kaWNlcxgEIAMoBRIlChhncm91bmRpbmdfY2hlY2tfcmVxdWlyZWQYBiABKAhIAogBAUIMCgpfc3RhcnRfcG9zQgoKCF9lbmRfcG9zQhsKGV9ncm91bmRpbmdfY2hlY2tfcmVxdWlyZWRCEAoOX3N1cHBvcnRfc2NvcmUyxgIKGUdyb3VuZGVkR2VuZXJhdGlvblNlcnZpY2US1AEKDkNoZWNrR3JvdW5kaW5nEjYuZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MS5DaGVja0dyb3VuZGluZ1JlcXVlc3QaNy5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxLkNoZWNrR3JvdW5kaW5nUmVzcG9uc2UiUYLT5JMCSzoBKiJGL3YxL3tncm91bmRpbmdfY29uZmlnPXByb2plY3RzLyovbG9jYXRpb25zLyovZ3JvdW5kaW5nQ29uZmlncy8qfTpjaGVjaxpSykEeZGlzY292ZXJ5ZW5naW5lLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybUKRAgojY29tLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFCHkdyb3VuZGVkR2VuZXJhdGlvblNlcnZpY2VQcm90b1ABWk1jbG91ZC5nb29nbGUuY29tL2dvL2Rpc2NvdmVyeWVuZ2luZS9hcGl2MS9kaXNjb3ZlcnllbmdpbmVwYjtkaXNjb3ZlcnllbmdpbmVwYqICD0RJU0NPVkVSWUVOR0lORaoCH0dvb2dsZS5DbG91ZC5EaXNjb3ZlcnlFbmdpbmUuVjHKAh9Hb29nbGVcQ2xvdWRcRGlzY292ZXJ5RW5naW5lXFYx6gIiR29vZ2xlOjpDbG91ZDo6RGlzY292ZXJ5RW5naW5lOjpWMWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_discoveryengine_v1_grounding]);

/**
 * Specification for the grounding check.
 *
 * @generated from message google.cloud.discoveryengine.v1.CheckGroundingSpec
 */
export type CheckGroundingSpec = Message<"google.cloud.discoveryengine.v1.CheckGroundingSpec"> & {
  /**
   * The threshold (in [0,1]) used for determining whether a fact must be
   * cited for a claim in the answer candidate. Choosing a higher threshold
   * will lead to fewer but very strong citations, while choosing a lower
   * threshold may lead to more but somewhat weaker citations. If unset, the
   * threshold will default to 0.6.
   *
   * @generated from field: optional double citation_threshold = 1;
   */
  citationThreshold?: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1.CheckGroundingSpec.
 * Use `create(CheckGroundingSpecSchema)` to create a new message.
 */
export const CheckGroundingSpecSchema: GenMessage<CheckGroundingSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1_grounded_generation_service, 0);

/**
 * Request message for
 * [GroundedGenerationService.CheckGrounding][google.cloud.discoveryengine.v1.GroundedGenerationService.CheckGrounding]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1.CheckGroundingRequest
 */
export type CheckGroundingRequest = Message<"google.cloud.discoveryengine.v1.CheckGroundingRequest"> & {
  /**
   * Required. The resource name of the grounding config, such as
   * `projects/*\/locations/global/groundingConfigs/default_grounding_config`.
   *
   * @generated from field: string grounding_config = 1;
   */
  groundingConfig: string;

  /**
   * Answer candidate to check. Can have a maximum length of 1024 characters.
   *
   * @generated from field: string answer_candidate = 2;
   */
  answerCandidate: string;

  /**
   * List of facts for the grounding check.
   * We support up to 200 facts.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1.GroundingFact facts = 3;
   */
  facts: GroundingFact[];

  /**
   * Configuration of the grounding check.
   *
   * @generated from field: google.cloud.discoveryengine.v1.CheckGroundingSpec grounding_spec = 4;
   */
  groundingSpec?: CheckGroundingSpec;

  /**
   * The user labels applied to a resource must meet the following requirements:
   *
   * * Each resource can have multiple labels, up to a maximum of 64.
   * * Each label must be a key-value pair.
   * * Keys have a minimum length of 1 character and a maximum length of 63
   *   characters and cannot be empty. Values can be empty and have a maximum
   *   length of 63 characters.
   * * Keys and values can contain only lowercase letters, numeric characters,
   *   underscores, and dashes. All characters must use UTF-8 encoding, and
   *   international characters are allowed.
   * * The key portion of a label must be unique. However, you can use the same
   *   key with multiple resources.
   * * Keys must start with a lowercase letter or international character.
   *
   * See [Google Cloud
   * Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements)
   * for more details.
   *
   * @generated from field: map<string, string> user_labels = 5;
   */
  userLabels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.discoveryengine.v1.CheckGroundingRequest.
 * Use `create(CheckGroundingRequestSchema)` to create a new message.
 */
export const CheckGroundingRequestSchema: GenMessage<CheckGroundingRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1_grounded_generation_service, 1);

/**
 * Response message for the
 * [GroundedGenerationService.CheckGrounding][google.cloud.discoveryengine.v1.GroundedGenerationService.CheckGrounding]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1.CheckGroundingResponse
 */
export type CheckGroundingResponse = Message<"google.cloud.discoveryengine.v1.CheckGroundingResponse"> & {
  /**
   * The support score for the input answer candidate.
   * Higher the score, higher is the fraction of claims that are supported by
   * the provided facts. This is always set when a response is returned.
   *
   * @generated from field: optional float support_score = 1;
   */
  supportScore?: number;

  /**
   * List of facts cited across all claims in the answer candidate.
   * These are derived from the facts supplied in the request.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1.FactChunk cited_chunks = 3;
   */
  citedChunks: FactChunk[];

  /**
   * Claim texts and citation info across all claims in the answer candidate.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim claims = 4;
   */
  claims: CheckGroundingResponse_Claim[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1.CheckGroundingResponse.
 * Use `create(CheckGroundingResponseSchema)` to create a new message.
 */
export const CheckGroundingResponseSchema: GenMessage<CheckGroundingResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1_grounded_generation_service, 2);

/**
 * Text and citation info for a claim in the answer candidate.
 *
 * @generated from message google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim
 */
export type CheckGroundingResponse_Claim = Message<"google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim"> & {
  /**
   * Position indicating the start of the claim in the answer candidate,
   * measured in bytes.
   *
   * @generated from field: optional int32 start_pos = 1;
   */
  startPos?: number;

  /**
   * Position indicating the end of the claim in the answer candidate,
   * exclusive.
   *
   * @generated from field: optional int32 end_pos = 2;
   */
  endPos?: number;

  /**
   * Text for the claim in the answer candidate. Always provided regardless of
   * whether citations or anti-citations are found.
   *
   * @generated from field: string claim_text = 3;
   */
  claimText: string;

  /**
   * A list of indices (into 'cited_chunks') specifying the citations
   * associated with the claim. For instance [1,3,4] means that
   * cited_chunks[1], cited_chunks[3], cited_chunks[4] are the facts cited
   * supporting for the claim. A citation to a fact indicates that the claim
   * is supported by the fact.
   *
   * @generated from field: repeated int32 citation_indices = 4;
   */
  citationIndices: number[];

  /**
   * Indicates that this claim required grounding check. When the system
   * decided this claim doesn't require attribution/grounding check, this
   * field will be set to false. In that case, no grounding check was done for
   * the claim and therefore
   * [citation_indices][google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim.citation_indices],
   * [anti_citation_indices][google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim.anti_citation_indices],
   * and
   * [score][google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim.score]
   * should not be returned.
   *
   * @generated from field: optional bool grounding_check_required = 6;
   */
  groundingCheckRequired?: boolean;
};

/**
 * Describes the message google.cloud.discoveryengine.v1.CheckGroundingResponse.Claim.
 * Use `create(CheckGroundingResponse_ClaimSchema)` to create a new message.
 */
export const CheckGroundingResponse_ClaimSchema: GenMessage<CheckGroundingResponse_Claim> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1_grounded_generation_service, 2, 0);

/**
 * Service for grounded generation.
 *
 * @generated from service google.cloud.discoveryengine.v1.GroundedGenerationService
 */
export const GroundedGenerationService: GenService<{
  /**
   * Performs a grounding check.
   *
   * @generated from rpc google.cloud.discoveryengine.v1.GroundedGenerationService.CheckGrounding
   */
  checkGrounding: {
    methodKind: "unary";
    input: typeof CheckGroundingRequestSchema;
    output: typeof CheckGroundingResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_discoveryengine_v1_grounded_generation_service, 0);

