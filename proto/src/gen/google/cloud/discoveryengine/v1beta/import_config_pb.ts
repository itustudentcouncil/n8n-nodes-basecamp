// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/discoveryengine/v1beta/import_config.proto (package google.cloud.discoveryengine.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { CompletionSuggestion, SuggestionDenyListEntry } from "./completion_pb";
import { file_google_cloud_discoveryengine_v1beta_completion } from "./completion_pb";
import type { Document } from "./document_pb";
import { file_google_cloud_discoveryengine_v1beta_document } from "./document_pb";
import type { SampleQuery } from "./sample_query_pb";
import { file_google_cloud_discoveryengine_v1beta_sample_query } from "./sample_query_pb";
import type { UserEvent } from "./user_event_pb";
import { file_google_cloud_discoveryengine_v1beta_user_event } from "./user_event_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/discoveryengine/v1beta/import_config.proto.
 */
export const file_google_cloud_discoveryengine_v1beta_import_config: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_discoveryengine_v1beta_completion, file_google_cloud_discoveryengine_v1beta_document, file_google_cloud_discoveryengine_v1beta_sample_query, file_google_cloud_discoveryengine_v1beta_user_event, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_rpc_status, file_google_type_date]);

/**
 * Cloud Storage location for input content.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.GcsSource
 */
export type GcsSource = Message<"google.cloud.discoveryengine.v1beta.GcsSource"> & {
  /**
   * Required. Cloud Storage URIs to input files. Each URI can be up to
   * 2000 characters long. URIs can match the full object path (for example,
   * `gs://bucket/directory/object.json`) or a pattern matching one or more
   * files, such as `gs://bucket/directory/*.json`.
   *
   * A request can contain at most 100 files (or 100,000 files if `data_schema`
   * is `content`). Each file can be up to 2 GB (or 100 MB if `data_schema` is
   * `content`).
   *
   * @generated from field: repeated string input_uris = 1;
   */
  inputUris: string[];

  /**
   * The schema to use when parsing the data from the source.
   *
   * Supported values for document imports:
   *
   * * `document` (default): One JSON
   * [Document][google.cloud.discoveryengine.v1beta.Document] per line. Each
   * document must
   *   have a valid
   *   [Document.id][google.cloud.discoveryengine.v1beta.Document.id].
   * * `content`: Unstructured data (e.g. PDF, HTML). Each file matched by
   *   `input_uris` becomes a document, with the ID set to the first 128
   *   bits of SHA256(URI) encoded as a hex string.
   * * `custom`: One custom data JSON per row in arbitrary format that conforms
   *   to the defined [Schema][google.cloud.discoveryengine.v1beta.Schema] of
   *   the data store. This can only be used by the GENERIC Data Store vertical.
   * * `csv`: A CSV file with header conforming to the defined
   * [Schema][google.cloud.discoveryengine.v1beta.Schema] of the
   *   data store. Each entry after the header is imported as a Document.
   *   This can only be used by the GENERIC Data Store vertical.
   *
   * Supported values for user event imports:
   *
   * * `user_event` (default): One JSON
   * [UserEvent][google.cloud.discoveryengine.v1beta.UserEvent] per line.
   *
   * @generated from field: string data_schema = 2;
   */
  dataSchema: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.GcsSource.
 * Use `create(GcsSourceSchema)` to create a new message.
 */
export const GcsSourceSchema: GenMessage<GcsSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 0);

/**
 * BigQuery source import data from.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.BigQuerySource
 */
export type BigQuerySource = Message<"google.cloud.discoveryengine.v1beta.BigQuerySource"> & {
  /**
   * BigQuery table partition info. Leave this empty if the BigQuery table
   * is not partitioned.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.BigQuerySource.partition
   */
  partition: {
    /**
     * BigQuery time partitioned table's _PARTITIONDATE in YYYY-MM-DD format.
     *
     * @generated from field: google.type.Date partition_date = 5;
     */
    value: Date;
    case: "partitionDate";
  } | { case: undefined; value?: undefined };

  /**
   * The project ID or the project number that contains the BigQuery source. Has
   * a length limit of 128 characters. If not specified, inherits the project
   * ID from the parent request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The BigQuery data set to copy the data from with a length limit
   * of 1,024 characters.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId: string;

  /**
   * Required. The BigQuery table to copy the data from with a length limit of
   * 1,024 characters.
   *
   * @generated from field: string table_id = 3;
   */
  tableId: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * BigQuery export to a specific Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 4;
   */
  gcsStagingDir: string;

  /**
   * The schema to use when parsing the data from the source.
   *
   * Supported values for user event imports:
   *
   * * `user_event` (default): One
   * [UserEvent][google.cloud.discoveryengine.v1beta.UserEvent] per row.
   *
   * Supported values for document imports:
   *
   * * `document` (default): One
   * [Document][google.cloud.discoveryengine.v1beta.Document] format per
   *   row. Each document must have a valid
   *   [Document.id][google.cloud.discoveryengine.v1beta.Document.id] and one of
   *   [Document.json_data][google.cloud.discoveryengine.v1beta.Document.json_data]
   *   or
   *   [Document.struct_data][google.cloud.discoveryengine.v1beta.Document.struct_data].
   * * `custom`: One custom data per row in arbitrary format that conforms to
   *   the defined [Schema][google.cloud.discoveryengine.v1beta.Schema] of the
   *   data store. This can only be used by the GENERIC Data Store vertical.
   *
   * @generated from field: string data_schema = 6;
   */
  dataSchema: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.BigQuerySource.
 * Use `create(BigQuerySourceSchema)` to create a new message.
 */
export const BigQuerySourceSchema: GenMessage<BigQuerySource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 1);

/**
 * The Spanner source for importing data
 *
 * @generated from message google.cloud.discoveryengine.v1beta.SpannerSource
 */
export type SpannerSource = Message<"google.cloud.discoveryengine.v1beta.SpannerSource"> & {
  /**
   * The project ID that contains the Spanner source. Has a length limit of 128
   * characters. If not specified, inherits the project ID from the parent
   * request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The instance ID of the source Spanner table.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. The database ID of the source Spanner table.
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;

  /**
   * Required. The table name of the Spanner database that needs to be imported.
   *
   * @generated from field: string table_id = 4;
   */
  tableId: string;

  /**
   * Whether to apply data boost on Spanner export. Enabling this option will
   * incur additional cost. More info can be found
   * [here](https://cloud.google.com/spanner/docs/databoost/databoost-overview#billing_and_quotas).
   *
   * @generated from field: bool enable_data_boost = 5;
   */
  enableDataBoost: boolean;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.SpannerSource.
 * Use `create(SpannerSourceSchema)` to create a new message.
 */
export const SpannerSourceSchema: GenMessage<SpannerSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 2);

/**
 * The Bigtable Options object that contains information to support
 * the import.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.BigtableOptions
 */
export type BigtableOptions = Message<"google.cloud.discoveryengine.v1beta.BigtableOptions"> & {
  /**
   * The field name used for saving row key value in the document. The name has
   * to match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
   *
   * @generated from field: string key_field_name = 1;
   */
  keyFieldName: string;

  /**
   * The mapping from family names to an object that contains column families
   * level information for the given column family. If a family is not present
   * in this map it will be ignored.
   *
   * @generated from field: map<string, google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumnFamily> families = 2;
   */
  families: { [key: string]: BigtableOptions_BigtableColumnFamily };
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.BigtableOptions.
 * Use `create(BigtableOptionsSchema)` to create a new message.
 */
export const BigtableOptionsSchema: GenMessage<BigtableOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 3);

/**
 * The column family of the Bigtable.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumnFamily
 */
export type BigtableOptions_BigtableColumnFamily = Message<"google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumnFamily"> & {
  /**
   * The field name to use for this column family in the document. The
   * name has to match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`. If not set,
   * it is parsed from the family name with best effort. However, due to
   * different naming patterns, field name collisions could happen, where
   * parsing behavior is undefined.
   *
   * @generated from field: string field_name = 1;
   */
  fieldName: string;

  /**
   * The encoding mode of the values when the type is not STRING.
   * Acceptable encoding values are:
   *
   * * `TEXT`: indicates values are alphanumeric text strings.
   * * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
   * family of functions. This can be overridden for a specific column
   * by listing that column in `columns` and specifying an encoding for it.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.BigtableOptions.Encoding encoding = 2;
   */
  encoding: BigtableOptions_Encoding;

  /**
   * The type of values in this column family.
   * The values are expected to be encoded using `HBase Bytes.toBytes`
   * function when the encoding value is set to `BINARY`.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.BigtableOptions.Type type = 3;
   */
  type: BigtableOptions_Type;

  /**
   * The list of objects that contains column level information for each
   * column. If a column is not present in this list it will be ignored.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumn columns = 4;
   */
  columns: BigtableOptions_BigtableColumn[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumnFamily.
 * Use `create(BigtableOptions_BigtableColumnFamilySchema)` to create a new message.
 */
export const BigtableOptions_BigtableColumnFamilySchema: GenMessage<BigtableOptions_BigtableColumnFamily> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 3, 0);

/**
 * The column of the Bigtable.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumn
 */
export type BigtableOptions_BigtableColumn = Message<"google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumn"> & {
  /**
   * Required. Qualifier of the column. If it cannot be decoded with utf-8,
   * use a base-64 encoded string instead.
   *
   * @generated from field: bytes qualifier = 1;
   */
  qualifier: Uint8Array;

  /**
   * The field name to use for this column in the document. The name has to
   * match the pattern `[a-zA-Z0-9][a-zA-Z0-9-_]*`.
   * If not set, it is parsed from the qualifier bytes with best effort.
   * However, due to different naming patterns, field name collisions could
   * happen, where parsing behavior is undefined.
   *
   * @generated from field: string field_name = 2;
   */
  fieldName: string;

  /**
   * The encoding mode of the values when the type is not `STRING`.
   * Acceptable encoding values are:
   *
   * * `TEXT`: indicates values are alphanumeric text strings.
   * * `BINARY`: indicates values are encoded using `HBase Bytes.toBytes`
   * family of functions. This can be overridden for a specific column
   * by listing that column in `columns` and specifying an encoding for it.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.BigtableOptions.Encoding encoding = 3;
   */
  encoding: BigtableOptions_Encoding;

  /**
   * The type of values in this column family.
   * The values are expected to be encoded using `HBase Bytes.toBytes`
   * function when the encoding value is set to `BINARY`.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.BigtableOptions.Type type = 4;
   */
  type: BigtableOptions_Type;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.BigtableOptions.BigtableColumn.
 * Use `create(BigtableOptions_BigtableColumnSchema)` to create a new message.
 */
export const BigtableOptions_BigtableColumnSchema: GenMessage<BigtableOptions_BigtableColumn> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 3, 1);

/**
 * The type of values in a Bigtable column or column family.
 * The values are expected to be encoded using
 * [HBase
 * Bytes.toBytes](https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/util/Bytes.html)
 * function when the encoding value is set to `BINARY`.
 *
 * @generated from enum google.cloud.discoveryengine.v1beta.BigtableOptions.Type
 */
export enum BigtableOptions_Type {
  /**
   * The type is unspecified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * String type.
   *
   * @generated from enum value: STRING = 1;
   */
  STRING = 1,

  /**
   * Numerical type.
   *
   * @generated from enum value: NUMBER = 2;
   */
  NUMBER = 2,

  /**
   * Integer type.
   *
   * @generated from enum value: INTEGER = 3;
   */
  INTEGER = 3,

  /**
   * Variable length integer type.
   *
   * @generated from enum value: VAR_INTEGER = 4;
   */
  VAR_INTEGER = 4,

  /**
   * BigDecimal type.
   *
   * @generated from enum value: BIG_NUMERIC = 5;
   */
  BIG_NUMERIC = 5,

  /**
   * Boolean type.
   *
   * @generated from enum value: BOOLEAN = 6;
   */
  BOOLEAN = 6,

  /**
   * JSON type.
   *
   * @generated from enum value: JSON = 7;
   */
  JSON = 7,
}

/**
 * Describes the enum google.cloud.discoveryengine.v1beta.BigtableOptions.Type.
 */
export const BigtableOptions_TypeSchema: GenEnum<BigtableOptions_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_discoveryengine_v1beta_import_config, 3, 0);

/**
 * The encoding mode of a Bigtable column or column family.
 *
 * @generated from enum google.cloud.discoveryengine.v1beta.BigtableOptions.Encoding
 */
export enum BigtableOptions_Encoding {
  /**
   * The encoding is unspecified.
   *
   * @generated from enum value: ENCODING_UNSPECIFIED = 0;
   */
  ENCODING_UNSPECIFIED = 0,

  /**
   * Text encoding.
   *
   * @generated from enum value: TEXT = 1;
   */
  TEXT = 1,

  /**
   * Binary encoding.
   *
   * @generated from enum value: BINARY = 2;
   */
  BINARY = 2,
}

/**
 * Describes the enum google.cloud.discoveryengine.v1beta.BigtableOptions.Encoding.
 */
export const BigtableOptions_EncodingSchema: GenEnum<BigtableOptions_Encoding> = /*@__PURE__*/
  enumDesc(file_google_cloud_discoveryengine_v1beta_import_config, 3, 1);

/**
 * The Cloud Bigtable source for importing data.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.BigtableSource
 */
export type BigtableSource = Message<"google.cloud.discoveryengine.v1beta.BigtableSource"> & {
  /**
   * The project ID that contains the Bigtable source. Has a length limit of 128
   * characters. If not specified, inherits the project ID from the parent
   * request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The instance ID of the Cloud Bigtable that needs to be imported.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. The table ID of the Cloud Bigtable that needs to be imported.
   *
   * @generated from field: string table_id = 3;
   */
  tableId: string;

  /**
   * Required. Bigtable options that contains information needed when parsing
   * data into typed structures. For example, column type annotations.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.BigtableOptions bigtable_options = 4;
   */
  bigtableOptions?: BigtableOptions;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.BigtableSource.
 * Use `create(BigtableSourceSchema)` to create a new message.
 */
export const BigtableSourceSchema: GenMessage<BigtableSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 4);

/**
 * Cloud FhirStore source import data from.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.FhirStoreSource
 */
export type FhirStoreSource = Message<"google.cloud.discoveryengine.v1beta.FhirStoreSource"> & {
  /**
   * Required. The full resource name of the FHIR store to import data from, in
   * the format of
   * `projects/{project}/locations/{location}/datasets/{dataset}/fhirStores/{fhir_store}`.
   *
   * @generated from field: string fhir_store = 1;
   */
  fhirStore: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * FhirStore export to a specific Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 2;
   */
  gcsStagingDir: string;

  /**
   * The FHIR resource types to import. The resource types should be a subset of
   * all [supported FHIR resource
   * types](https://cloud.google.com/generative-ai-app-builder/docs/fhir-schema-reference#resource-level-specification).
   * Default to all supported FHIR resource types if empty.
   *
   * @generated from field: repeated string resource_types = 3;
   */
  resourceTypes: string[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.FhirStoreSource.
 * Use `create(FhirStoreSourceSchema)` to create a new message.
 */
export const FhirStoreSourceSchema: GenMessage<FhirStoreSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 5);

/**
 * Cloud SQL source import data from.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.CloudSqlSource
 */
export type CloudSqlSource = Message<"google.cloud.discoveryengine.v1beta.CloudSqlSource"> & {
  /**
   * The project ID that contains the Cloud SQL source. Has a length limit of
   * 128 characters. If not specified, inherits the project ID from the parent
   * request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Cloud SQL instance to copy the data from with a length limit
   * of 256 characters.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. The Cloud SQL database to copy the data from with a length limit
   * of 256 characters.
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;

  /**
   * Required. The Cloud SQL table to copy the data from with a length limit of
   * 256 characters.
   *
   * @generated from field: string table_id = 4;
   */
  tableId: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * Cloud SQL export to a specific Cloud Storage directory.
   *
   * Ensure that the Cloud SQL service account has the necessary Cloud
   * Storage Admin permissions to access the specified Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 5;
   */
  gcsStagingDir: string;

  /**
   * Option for serverless export. Enabling this option will incur additional
   * cost. More info can be found
   * [here](https://cloud.google.com/sql/pricing#serverless).
   *
   * @generated from field: bool offload = 6;
   */
  offload: boolean;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.CloudSqlSource.
 * Use `create(CloudSqlSourceSchema)` to create a new message.
 */
export const CloudSqlSourceSchema: GenMessage<CloudSqlSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 6);

/**
 * AlloyDB source import data from.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.AlloyDbSource
 */
export type AlloyDbSource = Message<"google.cloud.discoveryengine.v1beta.AlloyDbSource"> & {
  /**
   * The project ID that contains the AlloyDB source.
   * Has a length limit of 128 characters. If not specified, inherits the
   * project ID from the parent request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The AlloyDB location to copy the data from with a length limit of
   * 256 characters.
   *
   * @generated from field: string location_id = 2;
   */
  locationId: string;

  /**
   * Required. The AlloyDB cluster to copy the data from with a length limit of
   * 256 characters.
   *
   * @generated from field: string cluster_id = 3;
   */
  clusterId: string;

  /**
   * Required. The AlloyDB database to copy the data from with a length limit of
   * 256 characters.
   *
   * @generated from field: string database_id = 4;
   */
  databaseId: string;

  /**
   * Required. The AlloyDB table to copy the data from with a length limit of
   * 256 characters.
   *
   * @generated from field: string table_id = 5;
   */
  tableId: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * AlloyDB export to a specific Cloud Storage directory.
   *
   * Ensure that the AlloyDB service account has the necessary Cloud
   * Storage Admin permissions to access the specified Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 6;
   */
  gcsStagingDir: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.AlloyDbSource.
 * Use `create(AlloyDbSourceSchema)` to create a new message.
 */
export const AlloyDbSourceSchema: GenMessage<AlloyDbSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 7);

/**
 * Firestore source import data from.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.FirestoreSource
 */
export type FirestoreSource = Message<"google.cloud.discoveryengine.v1beta.FirestoreSource"> & {
  /**
   * The project ID that the Cloud SQL source is in with a length limit of 128
   * characters. If not specified, inherits the project ID from the parent
   * request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Firestore database to copy the data from with a length limit
   * of 256 characters.
   *
   * @generated from field: string database_id = 2;
   */
  databaseId: string;

  /**
   * Required. The Firestore collection (or entity) to copy the data from with a
   * length limit of 1,500 characters.
   *
   * @generated from field: string collection_id = 3;
   */
  collectionId: string;

  /**
   * Intermediate Cloud Storage directory used for the import with a length
   * limit of 2,000 characters. Can be specified if one wants to have the
   * Firestore export to a specific Cloud Storage directory.
   *
   * Ensure that the Firestore service account has the necessary Cloud
   * Storage Admin permissions to access the specified Cloud Storage directory.
   *
   * @generated from field: string gcs_staging_dir = 4;
   */
  gcsStagingDir: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.FirestoreSource.
 * Use `create(FirestoreSourceSchema)` to create a new message.
 */
export const FirestoreSourceSchema: GenMessage<FirestoreSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 8);

/**
 * Configuration of destination for Import related errors.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportErrorConfig
 */
export type ImportErrorConfig = Message<"google.cloud.discoveryengine.v1beta.ImportErrorConfig"> & {
  /**
   * Required. Errors destination.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportErrorConfig.destination
   */
  destination: {
    /**
     * Cloud Storage prefix for import errors. This must be an empty,
     * existing Cloud Storage directory. Import errors are written to
     * sharded files in this directory, one per line, as a JSON-encoded
     * `google.rpc.Status` message.
     *
     * @generated from field: string gcs_prefix = 1;
     */
    value: string;
    case: "gcsPrefix";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportErrorConfig.
 * Use `create(ImportErrorConfigSchema)` to create a new message.
 */
export const ImportErrorConfigSchema: GenMessage<ImportErrorConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 9);

/**
 * Request message for the ImportUserEvents request.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportUserEventsRequest
 */
export type ImportUserEventsRequest = Message<"google.cloud.discoveryengine.v1beta.ImportUserEventsRequest"> & {
  /**
   * Required - The desired input source of the user event data.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.source
   */
  source: {
    /**
     * The Inline source for the input content for UserEvents.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.InlineSource inline_source = 2;
     */
    value: ImportUserEventsRequest_InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.GcsSource gcs_source = 3;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * BigQuery input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.BigQuerySource bigquery_source = 4;
     */
    value: BigQuerySource;
    case: "bigquerySource";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Parent DataStore resource name, of the form
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The desired location of errors incurred during the Import. Cannot be set
   * for inline user event imports.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 5;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.
 * Use `create(ImportUserEventsRequestSchema)` to create a new message.
 */
export const ImportUserEventsRequestSchema: GenMessage<ImportUserEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 10);

/**
 * The inline source for the input config for ImportUserEvents method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.InlineSource
 */
export type ImportUserEventsRequest_InlineSource = Message<"google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.InlineSource"> & {
  /**
   * Required. A list of user events to import. Recommended max of 10k items.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.UserEvent user_events = 1;
   */
  userEvents: UserEvent[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportUserEventsRequest.InlineSource.
 * Use `create(ImportUserEventsRequest_InlineSourceSchema)` to create a new message.
 */
export const ImportUserEventsRequest_InlineSourceSchema: GenMessage<ImportUserEventsRequest_InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 10, 0);

/**
 * Response of the ImportUserEventsRequest. If the long running
 * operation was successful, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportUserEventsResponse
 */
export type ImportUserEventsResponse = Message<"google.cloud.discoveryengine.v1beta.ImportUserEventsResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * Echoes the destination for the complete errors if this field was set in
   * the request.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 2;
   */
  errorConfig?: ImportErrorConfig;

  /**
   * Count of user events imported with complete existing Documents.
   *
   * @generated from field: int64 joined_events_count = 3;
   */
  joinedEventsCount: bigint;

  /**
   * Count of user events imported, but with Document information not found
   * in the existing Branch.
   *
   * @generated from field: int64 unjoined_events_count = 4;
   */
  unjoinedEventsCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportUserEventsResponse.
 * Use `create(ImportUserEventsResponseSchema)` to create a new message.
 */
export const ImportUserEventsResponseSchema: GenMessage<ImportUserEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 11);

/**
 * Metadata related to the progress of the Import operation. This is
 * returned by the google.longrunning.Operation.metadata field.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportUserEventsMetadata
 */
export type ImportUserEventsMetadata = Message<"google.cloud.discoveryengine.v1beta.ImportUserEventsMetadata"> & {
  /**
   * Operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Count of entries that were processed successfully.
   *
   * @generated from field: int64 success_count = 3;
   */
  successCount: bigint;

  /**
   * Count of entries that encountered errors while processing.
   *
   * @generated from field: int64 failure_count = 4;
   */
  failureCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportUserEventsMetadata.
 * Use `create(ImportUserEventsMetadataSchema)` to create a new message.
 */
export const ImportUserEventsMetadataSchema: GenMessage<ImportUserEventsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 12);

/**
 * Metadata related to the progress of the ImportDocuments operation. This is
 * returned by the google.longrunning.Operation.metadata field.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata
 */
export type ImportDocumentsMetadata = Message<"google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata"> & {
  /**
   * Operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Count of entries that were processed successfully.
   *
   * @generated from field: int64 success_count = 3;
   */
  successCount: bigint;

  /**
   * Count of entries that encountered errors while processing.
   *
   * @generated from field: int64 failure_count = 4;
   */
  failureCount: bigint;

  /**
   * Total count of entries that were processed.
   *
   * @generated from field: int64 total_count = 5;
   */
  totalCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportDocumentsMetadata.
 * Use `create(ImportDocumentsMetadataSchema)` to create a new message.
 */
export const ImportDocumentsMetadataSchema: GenMessage<ImportDocumentsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 13);

/**
 * Request message for Import methods.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportDocumentsRequest
 */
export type ImportDocumentsRequest = Message<"google.cloud.discoveryengine.v1beta.ImportDocumentsRequest"> & {
  /**
   * Required. The source of the input.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.source
   */
  source: {
    /**
     * The Inline source for the input content for documents.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.InlineSource inline_source = 2;
     */
    value: ImportDocumentsRequest_InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.GcsSource gcs_source = 3;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * BigQuery input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.BigQuerySource bigquery_source = 4;
     */
    value: BigQuerySource;
    case: "bigquerySource";
  } | {
    /**
     * FhirStore input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.FhirStoreSource fhir_store_source = 10;
     */
    value: FhirStoreSource;
    case: "fhirStoreSource";
  } | {
    /**
     * Spanner input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.SpannerSource spanner_source = 11;
     */
    value: SpannerSource;
    case: "spannerSource";
  } | {
    /**
     * Cloud SQL input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.CloudSqlSource cloud_sql_source = 12;
     */
    value: CloudSqlSource;
    case: "cloudSqlSource";
  } | {
    /**
     * Firestore input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.FirestoreSource firestore_source = 13;
     */
    value: FirestoreSource;
    case: "firestoreSource";
  } | {
    /**
     * AlloyDB input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.AlloyDbSource alloy_db_source = 14;
     */
    value: AlloyDbSource;
    case: "alloyDbSource";
  } | {
    /**
     * Cloud Bigtable input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.BigtableSource bigtable_source = 15;
     */
    value: BigtableSource;
    case: "bigtableSource";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The parent branch resource name, such as
   * `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
   * Requires create/update permission.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 5;
   */
  errorConfig?: ImportErrorConfig;

  /**
   * The mode of reconciliation between existing documents and the documents to
   * be imported. Defaults to
   * [ReconciliationMode.INCREMENTAL][google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode.INCREMENTAL].
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode reconciliation_mode = 6;
   */
  reconciliationMode: ImportDocumentsRequest_ReconciliationMode;

  /**
   * Indicates which fields in the provided imported documents to update. If
   * not set, the default is to update all fields.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 7;
   */
  updateMask?: FieldMask;

  /**
   * Whether to automatically generate IDs for the documents if absent.
   *
   * If set to `true`,
   * [Document.id][google.cloud.discoveryengine.v1beta.Document.id]s are
   * automatically generated based on the hash of the payload, where IDs may not
   * be consistent during multiple imports. In which case
   * [ReconciliationMode.FULL][google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode.FULL]
   * is highly recommended to avoid duplicate contents. If unset or set to
   * `false`, [Document.id][google.cloud.discoveryengine.v1beta.Document.id]s
   * have to be specified using
   * [id_field][google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.id_field],
   * otherwise, documents without IDs fail to be imported.
   *
   * Supported data sources:
   *
   * * [GcsSource][google.cloud.discoveryengine.v1beta.GcsSource].
   * [GcsSource.data_schema][google.cloud.discoveryengine.v1beta.GcsSource.data_schema]
   * must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.
   * * [BigQuerySource][google.cloud.discoveryengine.v1beta.BigQuerySource].
   * [BigQuerySource.data_schema][google.cloud.discoveryengine.v1beta.BigQuerySource.data_schema]
   * must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.
   * * [SpannerSource][google.cloud.discoveryengine.v1beta.SpannerSource].
   * * [CloudSqlSource][google.cloud.discoveryengine.v1beta.CloudSqlSource].
   * * [FirestoreSource][google.cloud.discoveryengine.v1beta.FirestoreSource].
   * * [BigtableSource][google.cloud.discoveryengine.v1beta.BigtableSource].
   *
   * @generated from field: bool auto_generate_ids = 8;
   */
  autoGenerateIds: boolean;

  /**
   * The field indicates the ID field or column to be used as unique IDs of
   * the documents.
   *
   * For [GcsSource][google.cloud.discoveryengine.v1beta.GcsSource] it is the
   * key of the JSON field. For instance, `my_id` for JSON `{"my_id":
   * "some_uuid"}`. For others, it may be the column name of the table where the
   * unique ids are stored.
   *
   * The values of the JSON field or the table column are used as the
   * [Document.id][google.cloud.discoveryengine.v1beta.Document.id]s. The JSON
   * field or the table column must be of string type, and the values must be
   * set as valid strings conform to
   * [RFC-1034](https://tools.ietf.org/html/rfc1034) with 1-63 characters.
   * Otherwise, documents without valid IDs fail to be imported.
   *
   * Only set this field when
   * [auto_generate_ids][google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.auto_generate_ids]
   * is unset or set as `false`. Otherwise, an INVALID_ARGUMENT error is thrown.
   *
   * If it is unset, a default value `_id` is used when importing from the
   * allowed data sources.
   *
   * Supported data sources:
   *
   * * [GcsSource][google.cloud.discoveryengine.v1beta.GcsSource].
   * [GcsSource.data_schema][google.cloud.discoveryengine.v1beta.GcsSource.data_schema]
   * must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.
   * * [BigQuerySource][google.cloud.discoveryengine.v1beta.BigQuerySource].
   * [BigQuerySource.data_schema][google.cloud.discoveryengine.v1beta.BigQuerySource.data_schema]
   * must be `custom` or `csv`. Otherwise, an INVALID_ARGUMENT error is thrown.
   * * [SpannerSource][google.cloud.discoveryengine.v1beta.SpannerSource].
   * * [CloudSqlSource][google.cloud.discoveryengine.v1beta.CloudSqlSource].
   * * [FirestoreSource][google.cloud.discoveryengine.v1beta.FirestoreSource].
   * * [BigtableSource][google.cloud.discoveryengine.v1beta.BigtableSource].
   *
   * @generated from field: string id_field = 9;
   */
  idField: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.
 * Use `create(ImportDocumentsRequestSchema)` to create a new message.
 */
export const ImportDocumentsRequestSchema: GenMessage<ImportDocumentsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 14);

/**
 * The inline source for the input config for ImportDocuments method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.InlineSource
 */
export type ImportDocumentsRequest_InlineSource = Message<"google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.InlineSource"> & {
  /**
   * Required. A list of documents to update/create. Each document must have a
   * valid [Document.id][google.cloud.discoveryengine.v1beta.Document.id].
   * Recommended max of 100 items.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.Document documents = 1;
   */
  documents: Document[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.InlineSource.
 * Use `create(ImportDocumentsRequest_InlineSourceSchema)` to create a new message.
 */
export const ImportDocumentsRequest_InlineSourceSchema: GenMessage<ImportDocumentsRequest_InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 14, 0);

/**
 * Indicates how imported documents are reconciled with the existing documents
 * created or imported before.
 *
 * @generated from enum google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode
 */
export enum ImportDocumentsRequest_ReconciliationMode {
  /**
   * Defaults to `INCREMENTAL`.
   *
   * @generated from enum value: RECONCILIATION_MODE_UNSPECIFIED = 0;
   */
  RECONCILIATION_MODE_UNSPECIFIED = 0,

  /**
   * Inserts new documents or updates existing documents.
   *
   * @generated from enum value: INCREMENTAL = 1;
   */
  INCREMENTAL = 1,

  /**
   * Calculates diff and replaces the entire document dataset. Existing
   * documents may be deleted if they are not present in the source location.
   *
   * @generated from enum value: FULL = 2;
   */
  FULL = 2,
}

/**
 * Describes the enum google.cloud.discoveryengine.v1beta.ImportDocumentsRequest.ReconciliationMode.
 */
export const ImportDocumentsRequest_ReconciliationModeSchema: GenEnum<ImportDocumentsRequest_ReconciliationMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_discoveryengine_v1beta_import_config, 14, 0);

/**
 * Response of the
 * [ImportDocumentsRequest][google.cloud.discoveryengine.v1beta.ImportDocumentsRequest].
 * If the long running operation is done, then this message is returned by the
 * google.longrunning.Operations.response field if the operation was successful.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportDocumentsResponse
 */
export type ImportDocumentsResponse = Message<"google.cloud.discoveryengine.v1beta.ImportDocumentsResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * Echoes the destination for the complete errors in the request if set.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 2;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportDocumentsResponse.
 * Use `create(ImportDocumentsResponseSchema)` to create a new message.
 */
export const ImportDocumentsResponseSchema: GenMessage<ImportDocumentsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 15);

/**
 * Request message for
 * [CompletionService.ImportSuggestionDenyListEntries][google.cloud.discoveryengine.v1beta.CompletionService.ImportSuggestionDenyListEntries]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest
 */
export type ImportSuggestionDenyListEntriesRequest = Message<"google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest"> & {
  /**
   * The source of the updated SuggestionDenyList.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.source
   */
  source: {
    /**
     * The Inline source for the input content for suggestion deny list entries.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.InlineSource inline_source = 2;
     */
    value: ImportSuggestionDenyListEntriesRequest_InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cloud Storage location for the input content.
     *
     * Only 1 file can be specified that contains all entries to import.
     * Supported values `gcs_source.schema` for autocomplete suggestion deny
     * list entry imports:
     *
     * * `suggestion_deny_list` (default): One JSON [SuggestionDenyListEntry]
     * per line.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.GcsSource gcs_source = 3;
     */
    value: GcsSource;
    case: "gcsSource";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The parent data store resource name for which to import denylist
   * entries. Follows pattern projects/*\/locations/*\/collections/*\/dataStores/*.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.
 * Use `create(ImportSuggestionDenyListEntriesRequestSchema)` to create a new message.
 */
export const ImportSuggestionDenyListEntriesRequestSchema: GenMessage<ImportSuggestionDenyListEntriesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 16);

/**
 * The inline source for SuggestionDenyListEntry.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.InlineSource
 */
export type ImportSuggestionDenyListEntriesRequest_InlineSource = Message<"google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.InlineSource"> & {
  /**
   * Required. A list of all denylist entries to import. Max of 1000 items.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry entries = 1;
   */
  entries: SuggestionDenyListEntry[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesRequest.InlineSource.
 * Use `create(ImportSuggestionDenyListEntriesRequest_InlineSourceSchema)` to create a new message.
 */
export const ImportSuggestionDenyListEntriesRequest_InlineSourceSchema: GenMessage<ImportSuggestionDenyListEntriesRequest_InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 16, 0);

/**
 * Response message for
 * [CompletionService.ImportSuggestionDenyListEntries][google.cloud.discoveryengine.v1beta.CompletionService.ImportSuggestionDenyListEntries]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesResponse
 */
export type ImportSuggestionDenyListEntriesResponse = Message<"google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * Count of deny list entries successfully imported.
   *
   * @generated from field: int64 imported_entries_count = 2;
   */
  importedEntriesCount: bigint;

  /**
   * Count of deny list entries that failed to be imported.
   *
   * @generated from field: int64 failed_entries_count = 3;
   */
  failedEntriesCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesResponse.
 * Use `create(ImportSuggestionDenyListEntriesResponseSchema)` to create a new message.
 */
export const ImportSuggestionDenyListEntriesResponseSchema: GenMessage<ImportSuggestionDenyListEntriesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 17);

/**
 * Metadata related to the progress of the ImportSuggestionDenyListEntries
 * operation. This is returned by the google.longrunning.Operation.metadata
 * field.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesMetadata
 */
export type ImportSuggestionDenyListEntriesMetadata = Message<"google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesMetadata"> & {
  /**
   * Operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSuggestionDenyListEntriesMetadata.
 * Use `create(ImportSuggestionDenyListEntriesMetadataSchema)` to create a new message.
 */
export const ImportSuggestionDenyListEntriesMetadataSchema: GenMessage<ImportSuggestionDenyListEntriesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 18);

/**
 * Request message for
 * [CompletionService.ImportCompletionSuggestions][google.cloud.discoveryengine.v1beta.CompletionService.ImportCompletionSuggestions]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest
 */
export type ImportCompletionSuggestionsRequest = Message<"google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest"> & {
  /**
   * The source of the autocomplete suggestions.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.source
   */
  source: {
    /**
     * The Inline source for suggestion entries.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.InlineSource inline_source = 2;
     */
    value: ImportCompletionSuggestionsRequest_InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.GcsSource gcs_source = 3;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * BigQuery input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.BigQuerySource bigquery_source = 4;
     */
    value: BigQuerySource;
    case: "bigquerySource";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The parent data store resource name for which to import customer
   * autocomplete suggestions.
   *
   * Follows pattern `projects/*\/locations/*\/collections/*\/dataStores/*`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 5;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.
 * Use `create(ImportCompletionSuggestionsRequestSchema)` to create a new message.
 */
export const ImportCompletionSuggestionsRequestSchema: GenMessage<ImportCompletionSuggestionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 19);

/**
 * The inline source for CompletionSuggestions.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.InlineSource
 */
export type ImportCompletionSuggestionsRequest_InlineSource = Message<"google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.InlineSource"> & {
  /**
   * Required. A list of all denylist entries to import. Max of 1000 items.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.CompletionSuggestion suggestions = 1;
   */
  suggestions: CompletionSuggestion[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsRequest.InlineSource.
 * Use `create(ImportCompletionSuggestionsRequest_InlineSourceSchema)` to create a new message.
 */
export const ImportCompletionSuggestionsRequest_InlineSourceSchema: GenMessage<ImportCompletionSuggestionsRequest_InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 19, 0);

/**
 * Response of the
 * [CompletionService.ImportCompletionSuggestions][google.cloud.discoveryengine.v1beta.CompletionService.ImportCompletionSuggestions]
 * method. If the long running operation is done, this message is returned by
 * the google.longrunning.Operations.response field if the operation is
 * successful.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsResponse
 */
export type ImportCompletionSuggestionsResponse = Message<"google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 2;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsResponse.
 * Use `create(ImportCompletionSuggestionsResponseSchema)` to create a new message.
 */
export const ImportCompletionSuggestionsResponseSchema: GenMessage<ImportCompletionSuggestionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 20);

/**
 * Metadata related to the progress of the ImportCompletionSuggestions
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsMetadata
 */
export type ImportCompletionSuggestionsMetadata = Message<"google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsMetadata"> & {
  /**
   * Operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Operation last update time. If the operation is done, this is also the
   * finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Count of
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * successfully imported.
   *
   * @generated from field: int64 success_count = 3;
   */
  successCount: bigint;

  /**
   * Count of
   * [CompletionSuggestion][google.cloud.discoveryengine.v1beta.CompletionSuggestion]s
   * that failed to be imported.
   *
   * @generated from field: int64 failure_count = 4;
   */
  failureCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportCompletionSuggestionsMetadata.
 * Use `create(ImportCompletionSuggestionsMetadataSchema)` to create a new message.
 */
export const ImportCompletionSuggestionsMetadataSchema: GenMessage<ImportCompletionSuggestionsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 21);

/**
 * Request message for
 * [SampleQueryService.ImportSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ImportSampleQueries]
 * method.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest
 */
export type ImportSampleQueriesRequest = Message<"google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest"> & {
  /**
   * The source of the sample queries.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.source
   */
  source: {
    /**
     * The Inline source for sample query entries.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.InlineSource inline_source = 2;
     */
    value: ImportSampleQueriesRequest_InlineSource;
    case: "inlineSource";
  } | {
    /**
     * Cloud Storage location for the input content.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.GcsSource gcs_source = 3;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * BigQuery input source.
     *
     * @generated from field: google.cloud.discoveryengine.v1beta.BigQuerySource bigquery_source = 4;
     */
    value: BigQuerySource;
    case: "bigquerySource";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The parent sample query set resource name, such as
   * `projects/{project}/locations/{location}/sampleQuerySets/{sampleQuerySet}`.
   *
   * If the caller does not have permission to list
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s under this
   * sample query set, regardless of whether or not this sample query set
   * exists, a `PERMISSION_DENIED` error is returned.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 5;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.
 * Use `create(ImportSampleQueriesRequestSchema)` to create a new message.
 */
export const ImportSampleQueriesRequestSchema: GenMessage<ImportSampleQueriesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 22);

/**
 * The inline source for
 * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.InlineSource
 */
export type ImportSampleQueriesRequest_InlineSource = Message<"google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.InlineSource"> & {
  /**
   * Required. A list of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s to
   * import. Max of 1000 items.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.SampleQuery sample_queries = 1;
   */
  sampleQueries: SampleQuery[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSampleQueriesRequest.InlineSource.
 * Use `create(ImportSampleQueriesRequest_InlineSourceSchema)` to create a new message.
 */
export const ImportSampleQueriesRequest_InlineSourceSchema: GenMessage<ImportSampleQueriesRequest_InlineSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 22, 0);

/**
 * Response of the
 * [SampleQueryService.ImportSampleQueries][google.cloud.discoveryengine.v1beta.SampleQueryService.ImportSampleQueries]
 * method. If the long running operation is done, this message is returned by
 * the google.longrunning.Operations.response field if the operation is
 * successful.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSampleQueriesResponse
 */
export type ImportSampleQueriesResponse = Message<"google.cloud.discoveryengine.v1beta.ImportSampleQueriesResponse"> & {
  /**
   * A sample of errors encountered while processing the request.
   *
   * @generated from field: repeated google.rpc.Status error_samples = 1;
   */
  errorSamples: Status[];

  /**
   * The desired location of errors incurred during the Import.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.ImportErrorConfig error_config = 2;
   */
  errorConfig?: ImportErrorConfig;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSampleQueriesResponse.
 * Use `create(ImportSampleQueriesResponseSchema)` to create a new message.
 */
export const ImportSampleQueriesResponseSchema: GenMessage<ImportSampleQueriesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 23);

/**
 * Metadata related to the progress of the ImportSampleQueries
 * operation. This will be returned by the google.longrunning.Operation.metadata
 * field.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.ImportSampleQueriesMetadata
 */
export type ImportSampleQueriesMetadata = Message<"google.cloud.discoveryengine.v1beta.ImportSampleQueriesMetadata"> & {
  /**
   * ImportSampleQueries operation create time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * ImportSampleQueries operation last update time. If the operation is done,
   * this is also the finish time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Count of [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s
   * successfully imported.
   *
   * @generated from field: int64 success_count = 3;
   */
  successCount: bigint;

  /**
   * Count of [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s
   * that failed to be imported.
   *
   * @generated from field: int64 failure_count = 4;
   */
  failureCount: bigint;

  /**
   * Total count of
   * [SampleQuery][google.cloud.discoveryengine.v1beta.SampleQuery]s that were
   * processed.
   *
   * @generated from field: int64 total_count = 5;
   */
  totalCount: bigint;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.ImportSampleQueriesMetadata.
 * Use `create(ImportSampleQueriesMetadataSchema)` to create a new message.
 */
export const ImportSampleQueriesMetadataSchema: GenMessage<ImportSampleQueriesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_import_config, 24);

