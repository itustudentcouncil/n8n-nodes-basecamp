// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/discoveryengine/v1beta/user_event.proto (package google.cloud.discoveryengine.v1beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { CustomAttribute, UserInfo } from "./common_pb";
import { file_google_cloud_discoveryengine_v1beta_common } from "./common_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/discoveryengine/v1beta/user_event.proto.
 */
export const file_google_cloud_discoveryengine_v1beta_user_event: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvY2xvdWQvZGlzY292ZXJ5ZW5naW5lL3YxYmV0YS91c2VyX2V2ZW50LnByb3RvEiNnb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YSLiCAoJVXNlckV2ZW50EhcKCmV2ZW50X3R5cGUYASABKAlCA+BBAhIbCg51c2VyX3BzZXVkb19pZBgCIAEoCUID4EECEjoKBmVuZ2luZRgTIAEoCUIq+kEnCiVkaXNjb3ZlcnllbmdpbmUuZ29vZ2xlYXBpcy5jb20vRW5naW5lEkEKCmRhdGFfc3RvcmUYFCABKAlCLfpBKgooZGlzY292ZXJ5ZW5naW5lLmdvb2dsZWFwaXMuY29tL0RhdGFTdG9yZRIuCgpldmVudF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJACgl1c2VyX2luZm8YBCABKAsyLS5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YS5Vc2VySW5mbxIbChNkaXJlY3RfdXNlcl9yZXF1ZXN0GAUgASgIEhIKCnNlc3Npb25faWQYBiABKAkSQAoJcGFnZV9pbmZvGAcgASgLMi0uZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MWJldGEuUGFnZUluZm8SGQoRYXR0cmlidXRpb25fdG9rZW4YCCABKAkSDgoGZmlsdGVyGAkgASgJEkQKCWRvY3VtZW50cxgKIAMoCzIxLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLkRvY3VtZW50SW5mbxI9CgVwYW5lbBgLIAEoCzIuLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLlBhbmVsSW5mbxJECgtzZWFyY2hfaW5mbxgMIAEoCzIvLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLlNlYXJjaEluZm8STAoPY29tcGxldGlvbl9pbmZvGA0gASgLMjMuZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MWJldGEuQ29tcGxldGlvbkluZm8STgoQdHJhbnNhY3Rpb25faW5mbxgOIAEoCzI0Lmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLlRyYW5zYWN0aW9uSW5mbxIPCgd0YWdfaWRzGA8gAygJEhUKDXByb21vdGlvbl9pZHMYECADKAkSUgoKYXR0cmlidXRlcxgRIAMoCzI+Lmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLlVzZXJFdmVudC5BdHRyaWJ1dGVzRW50cnkSQgoKbWVkaWFfaW5mbxgSIAEoCzIuLmdvb2dsZS5jbG91ZC5kaXNjb3ZlcnllbmdpbmUudjFiZXRhLk1lZGlhSW5mbxpnCg9BdHRyaWJ1dGVzRW50cnkSCwoDa2V5GAEgASgJEkMKBXZhbHVlGAIgASgLMjQuZ29vZ2xlLmNsb3VkLmRpc2NvdmVyeWVuZ2luZS52MWJldGEuQ3VzdG9tQXR0cmlidXRlOgI4ASJZCghQYWdlSW5mbxITCgtwYWdldmlld19pZBgBIAEoCRIVCg1wYWdlX2NhdGVnb3J5GAIgASgJEgsKA3VyaRgDIAEoCRIUCgxyZWZlcnJlcl91cmkYBCABKAkiVAoKU2VhcmNoSW5mbxIUCgxzZWFyY2hfcXVlcnkYASABKAkSEAoIb3JkZXJfYnkYAiABKAkSEwoGb2Zmc2V0GAMgASgFSACIAQFCCQoHX29mZnNldCJICg5Db21wbGV0aW9uSW5mbxIbChNzZWxlY3RlZF9zdWdnZXN0aW9uGAEgASgJEhkKEXNlbGVjdGVkX3Bvc2l0aW9uGAIgASgFIskBCg9UcmFuc2FjdGlvbkluZm8SFwoFdmFsdWUYASABKAJCA+BBAkgAiAEBEhUKCGN1cnJlbmN5GAIgASgJQgPgQQISFgoOdHJhbnNhY3Rpb25faWQYAyABKAkSEAoDdGF4GAQgASgCSAGIAQESEQoEY29zdBgFIAEoAkgCiAEBEhsKDmRpc2NvdW50X3ZhbHVlGAYgASgCSAOIAQFCCAoGX3ZhbHVlQgYKBF90YXhCBwoFX2Nvc3RCEQoPX2Rpc2NvdW50X3ZhbHVlItABCgxEb2N1bWVudEluZm8SDAoCaWQYASABKAlIABI8CgRuYW1lGAIgASgJQiz6QSkKJ2Rpc2NvdmVyeWVuZ2luZS5nb29nbGVhcGlzLmNvbS9Eb2N1bWVudEgAEg0KA3VyaRgGIAEoCUgAEhUKCHF1YW50aXR5GAMgASgFSAGIAQESFQoNcHJvbW90aW9uX2lkcxgEIAMoCRITCgZqb2luZWQYBSABKAhCA+BBA0IVChNkb2N1bWVudF9kZXNjcmlwdG9yQgsKCV9xdWFudGl0eSKUAQoJUGFuZWxJbmZvEhUKCHBhbmVsX2lkGAIgASgJQgPgQQISFAoMZGlzcGxheV9uYW1lGAMgASgJEhsKDnBhbmVsX3Bvc2l0aW9uGAQgASgFSACIAQESGQoMdG90YWxfcGFuZWxzGAUgASgFSAGIAQFCEQoPX3BhbmVsX3Bvc2l0aW9uQg8KDV90b3RhbF9wYW5lbHMijQEKCU1lZGlhSW5mbxI6ChdtZWRpYV9wcm9ncmVzc19kdXJhdGlvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhImChltZWRpYV9wcm9ncmVzc19wZXJjZW50YWdlGAIgASgCSACIAQFCHAoaX21lZGlhX3Byb2dyZXNzX3BlcmNlbnRhZ2VClQIKJ2NvbS5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YUIOVXNlckV2ZW50UHJvdG9QAVpRY2xvdWQuZ29vZ2xlLmNvbS9nby9kaXNjb3ZlcnllbmdpbmUvYXBpdjFiZXRhL2Rpc2NvdmVyeWVuZ2luZXBiO2Rpc2NvdmVyeWVuZ2luZXBiogIPRElTQ09WRVJZRU5HSU5FqgIjR29vZ2xlLkNsb3VkLkRpc2NvdmVyeUVuZ2luZS5WMUJldGHKAiNHb29nbGVcQ2xvdWRcRGlzY292ZXJ5RW5naW5lXFYxYmV0YeoCJkdvb2dsZTo6Q2xvdWQ6OkRpc2NvdmVyeUVuZ2luZTo6VjFiZXRhYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_discoveryengine_v1beta_common, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * UserEvent captures all metadata information Discovery Engine API needs to
 * know about how end users interact with your website.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.UserEvent
 */
export type UserEvent = Message<"google.cloud.discoveryengine.v1beta.UserEvent"> & {
  /**
   * Required. User event type. Allowed values are:
   *
   * Generic values:
   *
   * * `search`: Search for Documents.
   * * `view-item`: Detailed page view of a Document.
   * * `view-item-list`: View of a panel or ordered list of Documents.
   * * `view-home-page`: View of the home page.
   * * `view-category-page`: View of a category page, e.g. Home > Men > Jeans
   *
   * Retail-related values:
   *
   * * `add-to-cart`: Add an item(s) to cart, e.g. in Retail online shopping
   * * `purchase`: Purchase an item(s)
   *
   * Media-related values:
   *
   * * `media-play`: Start/resume watching a video, playing a song, etc.
   * * `media-complete`: Finished or stopped midway through a video, song, etc.
   *
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * Required. A unique identifier for tracking visitors.
   *
   * For example, this could be implemented with an HTTP cookie, which should be
   * able to uniquely identify a visitor on a single device. This unique
   * identifier should not change if the visitor log in/out of the website.
   *
   * Do not set the field to the same fixed ID for different users. This mixes
   * the event history of those users together, which results in degraded model
   * quality.
   *
   * The field must be a UTF-8 encoded string with a length limit of 128
   * characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * The field should not contain PII or user-data. We recommend to use Google
   * Analytics [Client
   * ID](https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#clientId)
   * for this field.
   *
   * @generated from field: string user_pseudo_id = 2;
   */
  userPseudoId: string;

  /**
   * The [Engine][google.cloud.discoveryengine.v1beta.Engine] resource name, in
   * the form of
   * `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
   *
   * Optional. Only required for
   * [Engine][google.cloud.discoveryengine.v1beta.Engine] produced user events.
   * For example, user events from blended search.
   *
   * @generated from field: string engine = 19;
   */
  engine: string;

  /**
   * The [DataStore][google.cloud.discoveryengine.v1beta.DataStore] resource
   * full name, of the form
   * `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
   *
   * Optional. Only required for user events whose data store can't by
   * determined by
   * [UserEvent.engine][google.cloud.discoveryengine.v1beta.UserEvent.engine] or
   * [UserEvent.documents][google.cloud.discoveryengine.v1beta.UserEvent.documents].
   * If data store is set in the parent of write/import/collect user event
   * requests, this field can be omitted.
   *
   * @generated from field: string data_store = 20;
   */
  dataStore: string;

  /**
   * Only required for
   * [UserEventService.ImportUserEvents][google.cloud.discoveryengine.v1beta.UserEventService.ImportUserEvents]
   * method. Timestamp of when the user event happened.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 3;
   */
  eventTime?: Timestamp;

  /**
   * Information about the end user.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.UserInfo user_info = 4;
   */
  userInfo?: UserInfo;

  /**
   * Should set to true if the request is made directly from the end user, in
   * which case the
   * [UserEvent.user_info.user_agent][google.cloud.discoveryengine.v1beta.UserInfo.user_agent]
   * can be populated from the HTTP request.
   *
   * This flag should be set only if the API request is made directly from the
   * end user such as a mobile app (and not if a gateway or a server is
   * processing and pushing the user events).
   *
   * This should not be set when using the JavaScript tag in
   * [UserEventService.CollectUserEvent][google.cloud.discoveryengine.v1beta.UserEventService.CollectUserEvent].
   *
   * @generated from field: bool direct_user_request = 5;
   */
  directUserRequest: boolean;

  /**
   * A unique identifier for tracking a visitor session with a length limit of
   * 128 bytes. A session is an aggregation of an end user behavior in a time
   * span.
   *
   * A general guideline to populate the session_id:
   *
   * 1. If user has no activity for 30 min, a new session_id should be assigned.
   * 2. The session_id should be unique across users, suggest use uuid or add
   * [UserEvent.user_pseudo_id][google.cloud.discoveryengine.v1beta.UserEvent.user_pseudo_id]
   * as prefix.
   *
   * @generated from field: string session_id = 6;
   */
  sessionId: string;

  /**
   * Page metadata such as categories and other critical information for certain
   * event types such as `view-category-page`.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.PageInfo page_info = 7;
   */
  pageInfo?: PageInfo;

  /**
   * Token to attribute an API response to user action(s) to trigger the event.
   *
   * Highly recommended for user events that are the result of
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend].
   * This field enables accurate attribution of recommendation model
   * performance.
   *
   * The value must be one of:
   *
   * * [RecommendResponse.attribution_token][google.cloud.discoveryengine.v1beta.RecommendResponse.attribution_token] for events that are the result of
   * [RecommendationService.Recommend][google.cloud.discoveryengine.v1beta.RecommendationService.Recommend].
   * * [SearchResponse.attribution_token][google.cloud.discoveryengine.v1beta.SearchResponse.attribution_token] for events that are the result of
   * [SearchService.Search][google.cloud.discoveryengine.v1beta.SearchService.Search].
   *
   * This token enables us to accurately attribute page view or conversion
   * completion back to the event and the particular predict response containing
   * this clicked/purchased product. If user clicks on product K in the
   * recommendation results, pass
   * [RecommendResponse.attribution_token][google.cloud.discoveryengine.v1beta.RecommendResponse.attribution_token]
   * as a URL parameter to product K's page. When recording events on product
   * K's page, log the
   * [RecommendResponse.attribution_token][google.cloud.discoveryengine.v1beta.RecommendResponse.attribution_token]
   * to this field.
   *
   * @generated from field: string attribution_token = 8;
   */
  attributionToken: string;

  /**
   * The filter syntax consists of an expression language for constructing a
   * predicate from one or more fields of the documents being filtered.
   *
   * One example is for `search` events, the associated
   * [SearchRequest][google.cloud.discoveryengine.v1beta.SearchRequest] may
   * contain a filter expression in
   * [SearchRequest.filter][google.cloud.discoveryengine.v1beta.SearchRequest.filter]
   * conforming to https://google.aip.dev/160#filtering.
   *
   * Similarly, for `view-item-list` events that are generated from a
   * [RecommendRequest][google.cloud.discoveryengine.v1beta.RecommendRequest],
   * this field may be populated directly from
   * [RecommendRequest.filter][google.cloud.discoveryengine.v1beta.RecommendRequest.filter]
   * conforming to https://google.aip.dev/160#filtering.
   *
   * The value must be a UTF-8 encoded string with a length limit of 1,000
   * characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string filter = 9;
   */
  filter: string;

  /**
   * List of [Document][google.cloud.discoveryengine.v1beta.Document]s
   * associated with this user event.
   *
   * This field is optional except for the following event types:
   *
   * * `view-item`
   * * `add-to-cart`
   * * `purchase`
   * * `media-play`
   * * `media-complete`
   *
   * In a `search` event, this field represents the documents returned to the
   * end user on the current page (the end user may have not finished browsing
   * the whole page yet). When a new page is returned to the end user, after
   * pagination/filtering/ordering even for the same query, a new `search` event
   * with different
   * [UserEvent.documents][google.cloud.discoveryengine.v1beta.UserEvent.documents]
   * is desired.
   *
   * @generated from field: repeated google.cloud.discoveryengine.v1beta.DocumentInfo documents = 10;
   */
  documents: DocumentInfo[];

  /**
   * Panel metadata associated with this user event.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.PanelInfo panel = 11;
   */
  panel?: PanelInfo;

  /**
   * [SearchService.Search][google.cloud.discoveryengine.v1beta.SearchService.Search]
   * details related to the event.
   *
   * This field should be set for `search` event.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.SearchInfo search_info = 12;
   */
  searchInfo?: SearchInfo;

  /**
   * [CompletionService.CompleteQuery][google.cloud.discoveryengine.v1beta.CompletionService.CompleteQuery]
   * details related to the event.
   *
   * This field should be set for `search` event when autocomplete function is
   * enabled and the user clicks a suggestion for search.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.CompletionInfo completion_info = 13;
   */
  completionInfo?: CompletionInfo;

  /**
   * The transaction metadata (if any) associated with this user event.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.TransactionInfo transaction_info = 14;
   */
  transactionInfo?: TransactionInfo;

  /**
   * A list of identifiers for the independent experiment groups this user event
   * belongs to. This is used to distinguish between user events associated with
   * different experiment setups.
   *
   * @generated from field: repeated string tag_ids = 15;
   */
  tagIds: string[];

  /**
   * The promotion IDs if this is an event associated with promotions.
   * Currently, this field is restricted to at most one ID.
   *
   * @generated from field: repeated string promotion_ids = 16;
   */
  promotionIds: string[];

  /**
   * Extra user event features to include in the recommendation model.
   * These attributes must NOT contain data that needs to be parsed or processed
   * further, e.g. JSON or other encodings.
   *
   * If you provide custom attributes for ingested user events, also include
   * them in the user events that you associate with prediction requests. Custom
   * attribute formatting must be consistent between imported events and events
   * provided with prediction requests. This lets the Discovery Engine API use
   * those custom attributes when training models and serving predictions, which
   * helps improve recommendation quality.
   *
   * This field needs to pass all below criteria, otherwise an
   * `INVALID_ARGUMENT` error is returned:
   *
   * * The key must be a UTF-8 encoded string with a length limit of 5,000
   *   characters.
   * * For text attributes, at most 400 values are allowed. Empty values are not
   *   allowed. Each value must be a UTF-8 encoded string with a length limit of
   *   256 characters.
   * * For number attributes, at most 400 values are allowed.
   *
   * For product recommendations, an example of extra user information is
   * `traffic_channel`, which is how a user arrives at the site. Users can
   * arrive
   * at the site by coming to the site directly, coming through Google
   * search, or in other ways.
   *
   * @generated from field: map<string, google.cloud.discoveryengine.v1beta.CustomAttribute> attributes = 17;
   */
  attributes: { [key: string]: CustomAttribute };

  /**
   * Media-specific info.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.MediaInfo media_info = 18;
   */
  mediaInfo?: MediaInfo;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.UserEvent.
 * Use `create(UserEventSchema)` to create a new message.
 */
export const UserEventSchema: GenMessage<UserEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 0);

/**
 * Detailed page information.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.PageInfo
 */
export type PageInfo = Message<"google.cloud.discoveryengine.v1beta.PageInfo"> & {
  /**
   * A unique ID of a web page view.
   *
   * This should be kept the same for all user events triggered from the same
   * pageview. For example, an item detail page view could trigger multiple
   * events as the user is browsing the page. The `pageview_id` property should
   * be kept the same for all these events so that they can be grouped together
   * properly.
   *
   * When using the client side event reporting with JavaScript pixel and Google
   * Tag Manager, this value is filled in automatically.
   *
   * @generated from field: string pageview_id = 1;
   */
  pageviewId: string;

  /**
   * The most specific category associated with a category page.
   *
   * To represent full path of category, use '>' sign to separate different
   * hierarchies. If '>' is part of the category name, replace it with
   * other character(s).
   *
   * Category pages include special pages such as sales or promotions. For
   * instance, a special sale page may have the category hierarchy:
   * `"pageCategory" : "Sales > 2017 Black Friday Deals"`.
   *
   * Required for `view-category-page` events. Other event types should not set
   * this field. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string page_category = 2;
   */
  pageCategory: string;

  /**
   * Complete URL (window.location.href) of the user's current page.
   *
   * When using the client side event reporting with JavaScript pixel and Google
   * Tag Manager, this value is filled in automatically. Maximum length 5,000
   * characters.
   *
   * @generated from field: string uri = 3;
   */
  uri: string;

  /**
   * The referrer URL of the current page.
   *
   * When using the client side event reporting with JavaScript pixel and Google
   * Tag Manager, this value is filled in automatically. However, some browser
   * privacy restrictions may cause this field to be empty.
   *
   * @generated from field: string referrer_uri = 4;
   */
  referrerUri: string;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.PageInfo.
 * Use `create(PageInfoSchema)` to create a new message.
 */
export const PageInfoSchema: GenMessage<PageInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 1);

/**
 * Detailed search information.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.SearchInfo
 */
export type SearchInfo = Message<"google.cloud.discoveryengine.v1beta.SearchInfo"> & {
  /**
   * The user's search query.
   *
   * See
   * [SearchRequest.query][google.cloud.discoveryengine.v1beta.SearchRequest.query]
   * for definition.
   *
   * The value must be a UTF-8 encoded string with a length limit of 5,000
   * characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * At least one of
   * [search_query][google.cloud.discoveryengine.v1beta.SearchInfo.search_query]
   * or
   * [PageInfo.page_category][google.cloud.discoveryengine.v1beta.PageInfo.page_category]
   * is required for `search` events. Other event types should not set this
   * field. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string search_query = 1;
   */
  searchQuery: string;

  /**
   * The order in which products are returned, if applicable.
   *
   * See
   * [SearchRequest.order_by][google.cloud.discoveryengine.v1beta.SearchRequest.order_by]
   * for definition and syntax.
   *
   * The value must be a UTF-8 encoded string with a length limit of 1,000
   * characters. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * This can only be set for `search` events. Other event types should not set
   * this field. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: string order_by = 2;
   */
  orderBy: string;

  /**
   * An integer that specifies the current offset for pagination (the 0-indexed
   * starting location, amongst the products deemed by the API as relevant).
   *
   * See
   * [SearchRequest.offset][google.cloud.discoveryengine.v1beta.SearchRequest.offset]
   * for definition.
   *
   * If this field is negative, an `INVALID_ARGUMENT` is returned.
   *
   * This can only be set for `search` events. Other event types should not set
   * this field. Otherwise, an `INVALID_ARGUMENT` error is returned.
   *
   * @generated from field: optional int32 offset = 3;
   */
  offset?: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.SearchInfo.
 * Use `create(SearchInfoSchema)` to create a new message.
 */
export const SearchInfoSchema: GenMessage<SearchInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 2);

/**
 * Detailed completion information including completion attribution token and
 * clicked completion info.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.CompletionInfo
 */
export type CompletionInfo = Message<"google.cloud.discoveryengine.v1beta.CompletionInfo"> & {
  /**
   * End user selected
   * [CompleteQueryResponse.QuerySuggestion.suggestion][google.cloud.discoveryengine.v1beta.CompleteQueryResponse.QuerySuggestion.suggestion].
   *
   * @generated from field: string selected_suggestion = 1;
   */
  selectedSuggestion: string;

  /**
   * End user selected
   * [CompleteQueryResponse.QuerySuggestion.suggestion][google.cloud.discoveryengine.v1beta.CompleteQueryResponse.QuerySuggestion.suggestion]
   * position, starting from 0.
   *
   * @generated from field: int32 selected_position = 2;
   */
  selectedPosition: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.CompletionInfo.
 * Use `create(CompletionInfoSchema)` to create a new message.
 */
export const CompletionInfoSchema: GenMessage<CompletionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 3);

/**
 * A transaction represents the entire purchase transaction.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.TransactionInfo
 */
export type TransactionInfo = Message<"google.cloud.discoveryengine.v1beta.TransactionInfo"> & {
  /**
   * Required. Total non-zero value associated with the transaction. This value
   * may include shipping, tax, or other adjustments to the total value that you
   * want to include.
   *
   * @generated from field: optional float value = 1;
   */
  value?: number;

  /**
   * Required. Currency code. Use three-character ISO-4217 code.
   *
   * @generated from field: string currency = 2;
   */
  currency: string;

  /**
   * The transaction ID with a length limit of 128 characters.
   *
   * @generated from field: string transaction_id = 3;
   */
  transactionId: string;

  /**
   * All the taxes associated with the transaction.
   *
   * @generated from field: optional float tax = 4;
   */
  tax?: number;

  /**
   * All the costs associated with the products. These can be manufacturing
   * costs, shipping expenses not borne by the end user, or any other costs,
   * such that:
   *
   * * Profit =
   * [value][google.cloud.discoveryengine.v1beta.TransactionInfo.value] -
   * [tax][google.cloud.discoveryengine.v1beta.TransactionInfo.tax] -
   * [cost][google.cloud.discoveryengine.v1beta.TransactionInfo.cost]
   *
   * @generated from field: optional float cost = 5;
   */
  cost?: number;

  /**
   * The total discount(s) value applied to this transaction.
   * This figure should be excluded from
   * [TransactionInfo.value][google.cloud.discoveryengine.v1beta.TransactionInfo.value]
   *
   * For example, if a user paid
   * [TransactionInfo.value][google.cloud.discoveryengine.v1beta.TransactionInfo.value]
   * amount, then nominal (pre-discount) value of the transaction is the sum of
   * [TransactionInfo.value][google.cloud.discoveryengine.v1beta.TransactionInfo.value]
   * and
   * [TransactionInfo.discount_value][google.cloud.discoveryengine.v1beta.TransactionInfo.discount_value]
   *
   * This means that profit is calculated the same way, regardless of the
   * discount value, and that
   * [TransactionInfo.discount_value][google.cloud.discoveryengine.v1beta.TransactionInfo.discount_value]
   * can be larger than
   * [TransactionInfo.value][google.cloud.discoveryengine.v1beta.TransactionInfo.value]:
   *
   * * Profit =
   * [value][google.cloud.discoveryengine.v1beta.TransactionInfo.value] -
   * [tax][google.cloud.discoveryengine.v1beta.TransactionInfo.tax] -
   * [cost][google.cloud.discoveryengine.v1beta.TransactionInfo.cost]
   *
   * @generated from field: optional float discount_value = 6;
   */
  discountValue?: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.TransactionInfo.
 * Use `create(TransactionInfoSchema)` to create a new message.
 */
export const TransactionInfoSchema: GenMessage<TransactionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 4);

/**
 * Detailed document information associated with a user event.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.DocumentInfo
 */
export type DocumentInfo = Message<"google.cloud.discoveryengine.v1beta.DocumentInfo"> & {
  /**
   * A required descriptor of the associated
   * [Document][google.cloud.discoveryengine.v1beta.Document].
   *
   * * If [id][google.cloud.discoveryengine.v1beta.DocumentInfo.id] is
   * specified, then the default values for
   * `{location}`, `{collection_id}`, `{data_store_id}`, and `{branch_id}` are
   * used when annotating with the stored Document.
   *
   * * If [name][google.cloud.discoveryengine.v1beta.DocumentInfo.name] is
   * specified, then the provided values (default values allowed) for
   * `{location}`, `{collection_id}`, `{data_store_id}`, and
   * `{branch_id}` are used when annotating with the stored Document.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.DocumentInfo.document_descriptor
   */
  documentDescriptor: {
    /**
     * The [Document][google.cloud.discoveryengine.v1beta.Document] resource ID.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | {
    /**
     * The [Document][google.cloud.discoveryengine.v1beta.Document] resource
     * full name, of the form:
     * `projects/{project_id}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/branches/{branch_id}/documents/{document_id}`
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | {
    /**
     * The [Document][google.cloud.discoveryengine.v1beta.Document] URI - only
     * allowed for website data stores.
     *
     * @generated from field: string uri = 6;
     */
    value: string;
    case: "uri";
  } | { case: undefined; value?: undefined };

  /**
   * Quantity of the Document associated with the user event. Defaults to 1.
   *
   * For example, this field is 2 if two quantities of the same Document
   * are involved in a `add-to-cart` event.
   *
   * Required for events of the following event types:
   *
   * * `add-to-cart`
   * * `purchase`
   *
   * @generated from field: optional int32 quantity = 3;
   */
  quantity?: number;

  /**
   * The promotion IDs associated with this Document.
   * Currently, this field is restricted to at most one ID.
   *
   * @generated from field: repeated string promotion_ids = 4;
   */
  promotionIds: string[];

  /**
   * Output only. Whether the referenced Document can be found in the data
   * store.
   *
   * @generated from field: bool joined = 5;
   */
  joined: boolean;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.DocumentInfo.
 * Use `create(DocumentInfoSchema)` to create a new message.
 */
export const DocumentInfoSchema: GenMessage<DocumentInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 5);

/**
 * Detailed panel information associated with a user event.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.PanelInfo
 */
export type PanelInfo = Message<"google.cloud.discoveryengine.v1beta.PanelInfo"> & {
  /**
   * Required. The panel ID.
   *
   * @generated from field: string panel_id = 2;
   */
  panelId: string;

  /**
   * The display name of the panel.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * The ordered position of the panel, if shown to the user with other panels.
   * If set, then
   * [total_panels][google.cloud.discoveryengine.v1beta.PanelInfo.total_panels]
   * must also be set.
   *
   * @generated from field: optional int32 panel_position = 4;
   */
  panelPosition?: number;

  /**
   * The total number of panels, including this one, shown to the user.
   * Must be set if
   * [panel_position][google.cloud.discoveryengine.v1beta.PanelInfo.panel_position]
   * is set.
   *
   * @generated from field: optional int32 total_panels = 5;
   */
  totalPanels?: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.PanelInfo.
 * Use `create(PanelInfoSchema)` to create a new message.
 */
export const PanelInfoSchema: GenMessage<PanelInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 6);

/**
 * Media-specific user event information.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.MediaInfo
 */
export type MediaInfo = Message<"google.cloud.discoveryengine.v1beta.MediaInfo"> & {
  /**
   * The media progress time in seconds, if applicable.
   * For example, if the end user has finished 90 seconds of a playback video,
   * then
   * [MediaInfo.media_progress_duration.seconds][google.protobuf.Duration.seconds]
   * should be set to 90.
   *
   * @generated from field: google.protobuf.Duration media_progress_duration = 1;
   */
  mediaProgressDuration?: Duration;

  /**
   * Media progress should be computed using only the
   * [media_progress_duration][google.cloud.discoveryengine.v1beta.MediaInfo.media_progress_duration]
   * relative to the media total length.
   *
   * This value must be between `[0, 1.0]` inclusive.
   *
   * If this is not a playback or the progress cannot be computed (e.g. ongoing
   * livestream), this field should be unset.
   *
   * @generated from field: optional float media_progress_percentage = 2;
   */
  mediaProgressPercentage?: number;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.MediaInfo.
 * Use `create(MediaInfoSchema)` to create a new message.
 */
export const MediaInfoSchema: GenMessage<MediaInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_user_event, 7);

