// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/discoveryengine/v1beta/completion.proto (package google.cloud.discoveryengine.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/discoveryengine/v1beta/completion.proto.
 */
export const file_google_cloud_discoveryengine_v1beta_completion: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvY2xvdWQvZGlzY292ZXJ5ZW5naW5lL3YxYmV0YS9jb21wbGV0aW9uLnByb3RvEiNnb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YSLtAQoXU3VnZ2VzdGlvbkRlbnlMaXN0RW50cnkSGQoMYmxvY2tfcGhyYXNlGAEgASgJQgPgQQISZwoObWF0Y2hfb3BlcmF0b3IYAiABKA4ySi5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YS5TdWdnZXN0aW9uRGVueUxpc3RFbnRyeS5NYXRjaE9wZXJhdG9yQgPgQQIiTgoNTWF0Y2hPcGVyYXRvchIeChpNQVRDSF9PUEVSQVRPUl9VTlNQRUNJRklFRBAAEg8KC0VYQUNUX01BVENIEAESDAoIQ09OVEFJTlMQAiLHAQoUQ29tcGxldGlvblN1Z2dlc3Rpb24SFgoMZ2xvYmFsX3Njb3JlGAIgASgBSAASEwoJZnJlcXVlbmN5GAMgASgDSAASFwoKc3VnZ2VzdGlvbhgBIAEoCUID4EECEhUKDWxhbmd1YWdlX2NvZGUYBCABKAkSEAoIZ3JvdXBfaWQYBSABKAkSEwoLZ3JvdXBfc2NvcmUYBiABKAESGwoTYWx0ZXJuYXRpdmVfcGhyYXNlcxgHIAMoCUIOCgxyYW5raW5nX2luZm9ClgIKJ2NvbS5nb29nbGUuY2xvdWQuZGlzY292ZXJ5ZW5naW5lLnYxYmV0YUIPQ29tcGxldGlvblByb3RvUAFaUWNsb3VkLmdvb2dsZS5jb20vZ28vZGlzY292ZXJ5ZW5naW5lL2FwaXYxYmV0YS9kaXNjb3ZlcnllbmdpbmVwYjtkaXNjb3ZlcnllbmdpbmVwYqICD0RJU0NPVkVSWUVOR0lORaoCI0dvb2dsZS5DbG91ZC5EaXNjb3ZlcnlFbmdpbmUuVjFCZXRhygIjR29vZ2xlXENsb3VkXERpc2NvdmVyeUVuZ2luZVxWMWJldGHqAiZHb29nbGU6OkNsb3VkOjpEaXNjb3ZlcnlFbmdpbmU6OlYxYmV0YWIGcHJvdG8z", [file_google_api_field_behavior]);

/**
 * Suggestion deny list entry identifying the phrase to block from suggestions
 * and the applied operation for the phrase.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry
 */
export type SuggestionDenyListEntry = Message<"google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry"> & {
  /**
   * Required. Phrase to block from suggestions served. Can be maximum 125
   * characters.
   *
   * @generated from field: string block_phrase = 1;
   */
  blockPhrase: string;

  /**
   * Required. The match operator to apply for this phrase. Whether to block the
   * exact phrase, or block any suggestions containing this phrase.
   *
   * @generated from field: google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry.MatchOperator match_operator = 2;
   */
  matchOperator: SuggestionDenyListEntry_MatchOperator;
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry.
 * Use `create(SuggestionDenyListEntrySchema)` to create a new message.
 */
export const SuggestionDenyListEntrySchema: GenMessage<SuggestionDenyListEntry> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_completion, 0);

/**
 * Operator for matching with the generated suggestions.
 *
 * @generated from enum google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry.MatchOperator
 */
export enum SuggestionDenyListEntry_MatchOperator {
  /**
   * Default value. Should not be used
   *
   * @generated from enum value: MATCH_OPERATOR_UNSPECIFIED = 0;
   */
  MATCH_OPERATOR_UNSPECIFIED = 0,

  /**
   * If the suggestion is an exact match to the block_phrase, then block it.
   *
   * @generated from enum value: EXACT_MATCH = 1;
   */
  EXACT_MATCH = 1,

  /**
   * If the suggestion contains the block_phrase, then block it.
   *
   * @generated from enum value: CONTAINS = 2;
   */
  CONTAINS = 2,
}

/**
 * Describes the enum google.cloud.discoveryengine.v1beta.SuggestionDenyListEntry.MatchOperator.
 */
export const SuggestionDenyListEntry_MatchOperatorSchema: GenEnum<SuggestionDenyListEntry_MatchOperator> = /*@__PURE__*/
  enumDesc(file_google_cloud_discoveryengine_v1beta_completion, 0, 0);

/**
 * Autocomplete suggestions that are imported from Customer.
 *
 * @generated from message google.cloud.discoveryengine.v1beta.CompletionSuggestion
 */
export type CompletionSuggestion = Message<"google.cloud.discoveryengine.v1beta.CompletionSuggestion"> & {
  /**
   * Ranking metrics of this suggestion.
   *
   * @generated from oneof google.cloud.discoveryengine.v1beta.CompletionSuggestion.ranking_info
   */
  rankingInfo: {
    /**
     * Global score of this suggestion. Control how this suggestion would be
     * scored / ranked.
     *
     * @generated from field: double global_score = 2;
     */
    value: number;
    case: "globalScore";
  } | {
    /**
     * Frequency of this suggestion. Will be used to rank suggestions when score
     * is not available.
     *
     * @generated from field: int64 frequency = 3;
     */
    value: bigint;
    case: "frequency";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The suggestion text.
   *
   * @generated from field: string suggestion = 1;
   */
  suggestion: string;

  /**
   * BCP-47 language code of this suggestion.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;

  /**
   * If two suggestions have the same groupId, they will not be
   * returned together. Instead the one ranked higher will be returned. This can
   * be used to deduplicate semantically identical suggestions.
   *
   * @generated from field: string group_id = 5;
   */
  groupId: string;

  /**
   * The score of this suggestion within its group.
   *
   * @generated from field: double group_score = 6;
   */
  groupScore: number;

  /**
   * Alternative matching phrases for this suggestion.
   *
   * @generated from field: repeated string alternative_phrases = 7;
   */
  alternativePhrases: string[];
};

/**
 * Describes the message google.cloud.discoveryengine.v1beta.CompletionSuggestion.
 * Use `create(CompletionSuggestionSchema)` to create a new message.
 */
export const CompletionSuggestionSchema: GenMessage<CompletionSuggestion> = /*@__PURE__*/
  messageDesc(file_google_cloud_discoveryengine_v1beta_completion, 1);

