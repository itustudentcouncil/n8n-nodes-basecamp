// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/contactcenterinsights/v1/resources.proto (package google.cloud.contactcenterinsights.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/contactcenterinsights/v1/resources.proto.
 */
export const file_google_cloud_contactcenterinsights_v1_resources: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * The conversation resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation
 */
export type Conversation = Message<"google.cloud.contactcenterinsights.v1.Conversation"> & {
  /**
   * Metadata that applies to the conversation.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.Conversation.metadata
   */
  metadata: {
    /**
     * Call-specific metadata.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.CallMetadata call_metadata = 7;
     */
    value: Conversation_CallMetadata;
    case: "callMetadata";
  } | { case: undefined; value?: undefined };

  /**
   * A time to live expiration setting, can be either a specified timestamp or a
   * duration from the time that the conversation creation request was received.
   * Conversations with an expiration set will be removed up to 24 hours after
   * the specified time.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.Conversation.expiration
   */
  expiration: {
    /**
     * The time at which this conversation should expire. After this time, the
     * conversation data and any associated analyses will be deleted.
     *
     * @generated from field: google.protobuf.Timestamp expire_time = 15;
     */
    value: Timestamp;
    case: "expireTime";
  } | {
    /**
     * Input only. The TTL for this resource. If specified, then this TTL will
     * be used to calculate the expire time.
     *
     * @generated from field: google.protobuf.Duration ttl = 16;
     */
    value: Duration;
    case: "ttl";
  } | { case: undefined; value?: undefined };

  /**
   * Immutable. The resource name of the conversation.
   * Format:
   * projects/{project}/locations/{location}/conversations/{conversation}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The source of the audio and transcription for the conversation.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.ConversationDataSource data_source = 2;
   */
  dataSource?: ConversationDataSource;

  /**
   * Output only. The time at which the conversation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The most recent time at which the conversation was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * The time at which the conversation started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 17;
   */
  startTime?: Timestamp;

  /**
   * A user-specified language code for the conversation.
   *
   * @generated from field: string language_code = 14;
   */
  languageCode: string;

  /**
   * An opaque, user-specified string representing the human agent who handled
   * the conversation.
   *
   * @generated from field: string agent_id = 5;
   */
  agentId: string;

  /**
   * A map for the user to specify any custom fields. A maximum of 20 labels per
   * conversation is allowed, with a maximum of 256 characters per entry.
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };

  /**
   * Conversation metadata related to quality management.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata quality_metadata = 24;
   */
  qualityMetadata?: Conversation_QualityMetadata;

  /**
   * Output only. The conversation transcript.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.Transcript transcript = 8;
   */
  transcript?: Conversation_Transcript;

  /**
   * Immutable. The conversation medium, if unspecified will default to
   * PHONE_CALL.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.Medium medium = 9;
   */
  medium: Conversation_Medium;

  /**
   * Output only. The duration of the conversation.
   *
   * @generated from field: google.protobuf.Duration duration = 10;
   */
  duration?: Duration;

  /**
   * Output only. The number of turns in the conversation.
   *
   * @generated from field: int32 turn_count = 11;
   */
  turnCount: number;

  /**
   * Output only. The conversation's latest analysis, if one exists.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Analysis latest_analysis = 12;
   */
  latestAnalysis?: Analysis;

  /**
   * Output only. Latest summary of the conversation.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.ConversationSummarizationSuggestionData latest_summary = 20;
   */
  latestSummary?: ConversationSummarizationSuggestionData;

  /**
   * Output only. The annotations that were generated during the customer and
   * agent interaction.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.RuntimeAnnotation runtime_annotations = 13;
   */
  runtimeAnnotations: RuntimeAnnotation[];

  /**
   * Output only. All the matched Dialogflow intents in the call. The key
   * corresponds to a Dialogflow intent, format:
   * projects/{project}/agent/{agent}/intents/{intent}
   *
   * @generated from field: map<string, google.cloud.contactcenterinsights.v1.DialogflowIntent> dialogflow_intents = 18;
   */
  dialogflowIntents: { [key: string]: DialogflowIntent };

  /**
   * Obfuscated user ID which the customer sent to us.
   *
   * @generated from field: string obfuscated_user_id = 21;
   */
  obfuscatedUserId: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.
 * Use `create(ConversationSchema)` to create a new message.
 */
export const ConversationSchema: GenMessage<Conversation> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0);

/**
 * Call-specific metadata.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.CallMetadata
 */
export type Conversation_CallMetadata = Message<"google.cloud.contactcenterinsights.v1.Conversation.CallMetadata"> & {
  /**
   * The audio channel that contains the customer.
   *
   * @generated from field: int32 customer_channel = 1;
   */
  customerChannel: number;

  /**
   * The audio channel that contains the agent.
   *
   * @generated from field: int32 agent_channel = 2;
   */
  agentChannel: number;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.CallMetadata.
 * Use `create(Conversation_CallMetadataSchema)` to create a new message.
 */
export const Conversation_CallMetadataSchema: GenMessage<Conversation_CallMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 0);

/**
 * Conversation metadata related to quality management.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata
 */
export type Conversation_QualityMetadata = Message<"google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata"> & {
  /**
   * An arbitrary integer value indicating the customer's satisfaction rating.
   *
   * @generated from field: int32 customer_satisfaction_rating = 1;
   */
  customerSatisfactionRating: number;

  /**
   * The amount of time the customer waited to connect with an agent.
   *
   * @generated from field: google.protobuf.Duration wait_duration = 2;
   */
  waitDuration?: Duration;

  /**
   * An arbitrary string value specifying the menu path the customer took.
   *
   * @generated from field: string menu_path = 3;
   */
  menuPath: string;

  /**
   * Information about agents involved in the call.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata.AgentInfo agent_info = 4;
   */
  agentInfo: Conversation_QualityMetadata_AgentInfo[];
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata.
 * Use `create(Conversation_QualityMetadataSchema)` to create a new message.
 */
export const Conversation_QualityMetadataSchema: GenMessage<Conversation_QualityMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 1);

/**
 * Information about an agent involved in the conversation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata.AgentInfo
 */
export type Conversation_QualityMetadata_AgentInfo = Message<"google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata.AgentInfo"> & {
  /**
   * A user-specified string representing the agent.
   *
   * @generated from field: string agent_id = 1;
   */
  agentId: string;

  /**
   * The agent's name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * A user-specified string representing the agent's team.
   *
   * @generated from field: string team = 3;
   */
  team: string;

  /**
   * A user-provided string indicating the outcome of the agent's segment of
   * the call.
   *
   * @generated from field: string disposition_code = 4;
   */
  dispositionCode: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.QualityMetadata.AgentInfo.
 * Use `create(Conversation_QualityMetadata_AgentInfoSchema)` to create a new message.
 */
export const Conversation_QualityMetadata_AgentInfoSchema: GenMessage<Conversation_QualityMetadata_AgentInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 1, 0);

/**
 * A message representing the transcript of a conversation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.Transcript
 */
export type Conversation_Transcript = Message<"google.cloud.contactcenterinsights.v1.Conversation.Transcript"> & {
  /**
   * A list of sequential transcript segments that comprise the conversation.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment transcript_segments = 1;
   */
  transcriptSegments: Conversation_Transcript_TranscriptSegment[];
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.Transcript.
 * Use `create(Conversation_TranscriptSchema)` to create a new message.
 */
export const Conversation_TranscriptSchema: GenMessage<Conversation_Transcript> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 2);

/**
 * A segment of a full transcript.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment
 */
export type Conversation_Transcript_TranscriptSegment = Message<"google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment"> & {
  /**
   * The time that the message occurred, if provided.
   *
   * @generated from field: google.protobuf.Timestamp message_time = 6;
   */
  messageTime?: Timestamp;

  /**
   * The text of this segment.
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * A confidence estimate between 0.0 and 1.0 of the fidelity of this
   * segment. A default value of 0.0 indicates that the value is unset.
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;

  /**
   * A list of the word-specific information for each word in the segment.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.WordInfo words = 3;
   */
  words: Conversation_Transcript_TranscriptSegment_WordInfo[];

  /**
   * The language code of this segment as a
   * [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
   * Example: "en-US".
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;

  /**
   * For conversations derived from multi-channel audio, this is the channel
   * number corresponding to the audio from that channel. For
   * audioChannelCount = N, its output values can range from '1' to 'N'. A
   * channel tag of 0 indicates that the audio is mono.
   *
   * @generated from field: int32 channel_tag = 5;
   */
  channelTag: number;

  /**
   * The participant of this segment.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.ConversationParticipant segment_participant = 9;
   */
  segmentParticipant?: ConversationParticipant;

  /**
   * CCAI metadata relating to the current transcript segment.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata dialogflow_segment_metadata = 10;
   */
  dialogflowSegmentMetadata?: Conversation_Transcript_TranscriptSegment_DialogflowSegmentMetadata;

  /**
   * The sentiment for this transcript segment.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.SentimentData sentiment = 11;
   */
  sentiment?: SentimentData;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.
 * Use `create(Conversation_Transcript_TranscriptSegmentSchema)` to create a new message.
 */
export const Conversation_Transcript_TranscriptSegmentSchema: GenMessage<Conversation_Transcript_TranscriptSegment> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 2, 0);

/**
 * Word-level info for words in a transcript.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.WordInfo
 */
export type Conversation_Transcript_TranscriptSegment_WordInfo = Message<"google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.WordInfo"> & {
  /**
   * Time offset of the start of this word relative to the beginning of
   * the total conversation.
   *
   * @generated from field: google.protobuf.Duration start_offset = 1;
   */
  startOffset?: Duration;

  /**
   * Time offset of the end of this word relative to the beginning of the
   * total conversation.
   *
   * @generated from field: google.protobuf.Duration end_offset = 2;
   */
  endOffset?: Duration;

  /**
   * The word itself. Includes punctuation marks that surround the word.
   *
   * @generated from field: string word = 3;
   */
  word: string;

  /**
   * A confidence estimate between 0.0 and 1.0 of the fidelity of this
   * word. A default value of 0.0 indicates that the value is unset.
   *
   * @generated from field: float confidence = 4;
   */
  confidence: number;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.WordInfo.
 * Use `create(Conversation_Transcript_TranscriptSegment_WordInfoSchema)` to create a new message.
 */
export const Conversation_Transcript_TranscriptSegment_WordInfoSchema: GenMessage<Conversation_Transcript_TranscriptSegment_WordInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 2, 0, 0);

/**
 * Metadata from Dialogflow relating to the current transcript segment.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata
 */
export type Conversation_Transcript_TranscriptSegment_DialogflowSegmentMetadata = Message<"google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata"> & {
  /**
   * Whether the transcript segment was covered under the configured smart
   * reply allowlist in Agent Assist.
   *
   * @generated from field: bool smart_reply_allowlist_covered = 1;
   */
  smartReplyAllowlistCovered: boolean;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Conversation.Transcript.TranscriptSegment.DialogflowSegmentMetadata.
 * Use `create(Conversation_Transcript_TranscriptSegment_DialogflowSegmentMetadataSchema)` to create a new message.
 */
export const Conversation_Transcript_TranscriptSegment_DialogflowSegmentMetadataSchema: GenMessage<Conversation_Transcript_TranscriptSegment_DialogflowSegmentMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 2, 0, 1);

/**
 * Possible media for the conversation.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.Conversation.Medium
 */
export enum Conversation_Medium {
  /**
   * Default value, if unspecified will default to PHONE_CALL.
   *
   * @generated from enum value: MEDIUM_UNSPECIFIED = 0;
   */
  MEDIUM_UNSPECIFIED = 0,

  /**
   * The format for conversations that took place over the phone.
   *
   * @generated from enum value: PHONE_CALL = 1;
   */
  PHONE_CALL = 1,

  /**
   * The format for conversations that took place over chat.
   *
   * @generated from enum value: CHAT = 2;
   */
  CHAT = 2,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.Conversation.Medium.
 */
export const Conversation_MediumSchema: GenEnum<Conversation_Medium> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 0, 0);

/**
 * The analysis resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Analysis
 */
export type Analysis = Message<"google.cloud.contactcenterinsights.v1.Analysis"> & {
  /**
   * Immutable. The resource name of the analysis.
   * Format:
   * projects/{project}/locations/{location}/conversations/{conversation}/analyses/{analysis}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The time at which the analysis was requested.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * Output only. The time at which the analysis was created, which occurs when
   * the long-running operation completes.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The result of the analysis, which is populated when the
   * analysis finishes.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnalysisResult analysis_result = 7;
   */
  analysisResult?: AnalysisResult;

  /**
   * To select the annotators to run and the phrase matchers to use
   * (if any). If not specified, all annotators will be run.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotatorSelector annotator_selector = 8;
   */
  annotatorSelector?: AnnotatorSelector;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Analysis.
 * Use `create(AnalysisSchema)` to create a new message.
 */
export const AnalysisSchema: GenMessage<Analysis> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 1);

/**
 * The conversation source, which is a combination of transcript and audio.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ConversationDataSource
 */
export type ConversationDataSource = Message<"google.cloud.contactcenterinsights.v1.ConversationDataSource"> & {
  /**
   * The source of the conversation.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.ConversationDataSource.source
   */
  source: {
    /**
     * A Cloud Storage location specification for the audio and transcript.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.GcsSource gcs_source = 1;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * The source when the conversation comes from Dialogflow.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.DialogflowSource dialogflow_source = 3;
     */
    value: DialogflowSource;
    case: "dialogflowSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ConversationDataSource.
 * Use `create(ConversationDataSourceSchema)` to create a new message.
 */
export const ConversationDataSourceSchema: GenMessage<ConversationDataSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 2);

/**
 * A Cloud Storage source of conversation data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.GcsSource
 */
export type GcsSource = Message<"google.cloud.contactcenterinsights.v1.GcsSource"> & {
  /**
   * Cloud Storage URI that points to a file that contains the conversation
   * audio.
   *
   * @generated from field: string audio_uri = 1;
   */
  audioUri: string;

  /**
   * Immutable. Cloud Storage URI that points to a file that contains the
   * conversation transcript.
   *
   * @generated from field: string transcript_uri = 2;
   */
  transcriptUri: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.GcsSource.
 * Use `create(GcsSourceSchema)` to create a new message.
 */
export const GcsSourceSchema: GenMessage<GcsSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 3);

/**
 * A Dialogflow source of conversation data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.DialogflowSource
 */
export type DialogflowSource = Message<"google.cloud.contactcenterinsights.v1.DialogflowSource"> & {
  /**
   * Output only. The name of the Dialogflow conversation that this conversation
   * resource is derived from. Format:
   * projects/{project}/locations/{location}/conversations/{conversation}
   *
   * @generated from field: string dialogflow_conversation = 1;
   */
  dialogflowConversation: string;

  /**
   * Cloud Storage URI that points to a file that contains the conversation
   * audio.
   *
   * @generated from field: string audio_uri = 3;
   */
  audioUri: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.DialogflowSource.
 * Use `create(DialogflowSourceSchema)` to create a new message.
 */
export const DialogflowSourceSchema: GenMessage<DialogflowSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 4);

/**
 * The result of an analysis.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnalysisResult
 */
export type AnalysisResult = Message<"google.cloud.contactcenterinsights.v1.AnalysisResult"> & {
  /**
   * Metadata discovered during analysis.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.AnalysisResult.metadata
   */
  metadata: {
    /**
     * Call-specific metadata created by the analysis.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.AnalysisResult.CallAnalysisMetadata call_analysis_metadata = 2;
     */
    value: AnalysisResult_CallAnalysisMetadata;
    case: "callAnalysisMetadata";
  } | { case: undefined; value?: undefined };

  /**
   * The time at which the analysis ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 1;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnalysisResult.
 * Use `create(AnalysisResultSchema)` to create a new message.
 */
export const AnalysisResultSchema: GenMessage<AnalysisResult> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 5);

/**
 * Call-specific metadata created during analysis.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnalysisResult.CallAnalysisMetadata
 */
export type AnalysisResult_CallAnalysisMetadata = Message<"google.cloud.contactcenterinsights.v1.AnalysisResult.CallAnalysisMetadata"> & {
  /**
   * A list of call annotations that apply to this call.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.CallAnnotation annotations = 2;
   */
  annotations: CallAnnotation[];

  /**
   * All the entities in the call.
   *
   * @generated from field: map<string, google.cloud.contactcenterinsights.v1.Entity> entities = 3;
   */
  entities: { [key: string]: Entity };

  /**
   * Overall conversation-level sentiment for each channel of the call.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.ConversationLevelSentiment sentiments = 4;
   */
  sentiments: ConversationLevelSentiment[];

  /**
   * All the matched intents in the call.
   *
   * @generated from field: map<string, google.cloud.contactcenterinsights.v1.Intent> intents = 6;
   */
  intents: { [key: string]: Intent };

  /**
   * All the matched phrase matchers in the call.
   *
   * @generated from field: map<string, google.cloud.contactcenterinsights.v1.PhraseMatchData> phrase_matchers = 7;
   */
  phraseMatchers: { [key: string]: PhraseMatchData };

  /**
   * Overall conversation-level issue modeling result.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueModelResult issue_model_result = 8;
   */
  issueModelResult?: IssueModelResult;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnalysisResult.CallAnalysisMetadata.
 * Use `create(AnalysisResult_CallAnalysisMetadataSchema)` to create a new message.
 */
export const AnalysisResult_CallAnalysisMetadataSchema: GenMessage<AnalysisResult_CallAnalysisMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 5, 0);

/**
 * Issue Modeling result on a conversation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueModelResult
 */
export type IssueModelResult = Message<"google.cloud.contactcenterinsights.v1.IssueModelResult"> & {
  /**
   * Issue model that generates the result.
   * Format: projects/{project}/locations/{location}/issueModels/{issue_model}
   *
   * @generated from field: string issue_model = 1;
   */
  issueModel: string;

  /**
   * All the matched issues.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.IssueAssignment issues = 2;
   */
  issues: IssueAssignment[];
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueModelResult.
 * Use `create(IssueModelResultSchema)` to create a new message.
 */
export const IssueModelResultSchema: GenMessage<IssueModelResult> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 6);

/**
 * One channel of conversation-level sentiment data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ConversationLevelSentiment
 */
export type ConversationLevelSentiment = Message<"google.cloud.contactcenterinsights.v1.ConversationLevelSentiment"> & {
  /**
   * The channel of the audio that the data applies to.
   *
   * @generated from field: int32 channel_tag = 1;
   */
  channelTag: number;

  /**
   * Data specifying sentiment.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.SentimentData sentiment_data = 2;
   */
  sentimentData?: SentimentData;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ConversationLevelSentiment.
 * Use `create(ConversationLevelSentimentSchema)` to create a new message.
 */
export const ConversationLevelSentimentSchema: GenMessage<ConversationLevelSentiment> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 7);

/**
 * Information about the issue.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueAssignment
 */
export type IssueAssignment = Message<"google.cloud.contactcenterinsights.v1.IssueAssignment"> & {
  /**
   * Resource name of the assigned issue.
   *
   * @generated from field: string issue = 1;
   */
  issue: string;

  /**
   * Score indicating the likelihood of the issue assignment.
   * currently bounded on [0,1].
   *
   * @generated from field: double score = 2;
   */
  score: number;

  /**
   * Immutable. Display name of the assigned issue. This field is set at time of
   * analyis and immutable since then.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueAssignment.
 * Use `create(IssueAssignmentSchema)` to create a new message.
 */
export const IssueAssignmentSchema: GenMessage<IssueAssignment> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 8);

/**
 * A piece of metadata that applies to a window of a call.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.CallAnnotation
 */
export type CallAnnotation = Message<"google.cloud.contactcenterinsights.v1.CallAnnotation"> & {
  /**
   * The data in the annotation.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.CallAnnotation.data
   */
  data: {
    /**
     * Data specifying an interruption.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.InterruptionData interruption_data = 10;
     */
    value: InterruptionData;
    case: "interruptionData";
  } | {
    /**
     * Data specifying sentiment.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.SentimentData sentiment_data = 11;
     */
    value: SentimentData;
    case: "sentimentData";
  } | {
    /**
     * Data specifying silence.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.SilenceData silence_data = 12;
     */
    value: SilenceData;
    case: "silenceData";
  } | {
    /**
     * Data specifying a hold.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.HoldData hold_data = 13;
     */
    value: HoldData;
    case: "holdData";
  } | {
    /**
     * Data specifying an entity mention.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.EntityMentionData entity_mention_data = 15;
     */
    value: EntityMentionData;
    case: "entityMentionData";
  } | {
    /**
     * Data specifying an intent match.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.IntentMatchData intent_match_data = 16;
     */
    value: IntentMatchData;
    case: "intentMatchData";
  } | {
    /**
     * Data specifying a phrase match.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.PhraseMatchData phrase_match_data = 17;
     */
    value: PhraseMatchData;
    case: "phraseMatchData";
  } | {
    /**
     * Data specifying an issue match.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.IssueMatchData issue_match_data = 18;
     */
    value: IssueMatchData;
    case: "issueMatchData";
  } | { case: undefined; value?: undefined };

  /**
   * The channel of the audio where the annotation occurs. For single-channel
   * audio, this field is not populated.
   *
   * @generated from field: int32 channel_tag = 1;
   */
  channelTag: number;

  /**
   * The boundary in the conversation where the annotation starts, inclusive.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotationBoundary annotation_start_boundary = 4;
   */
  annotationStartBoundary?: AnnotationBoundary;

  /**
   * The boundary in the conversation where the annotation ends, inclusive.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotationBoundary annotation_end_boundary = 5;
   */
  annotationEndBoundary?: AnnotationBoundary;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.CallAnnotation.
 * Use `create(CallAnnotationSchema)` to create a new message.
 */
export const CallAnnotationSchema: GenMessage<CallAnnotation> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 9);

/**
 * A point in a conversation that marks the start or the end of an annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnnotationBoundary
 */
export type AnnotationBoundary = Message<"google.cloud.contactcenterinsights.v1.AnnotationBoundary"> & {
  /**
   * A detailed boundary, which describes a more specific point.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.AnnotationBoundary.detailed_boundary
   */
  detailedBoundary: {
    /**
     * The word index of this boundary with respect to the first word in the
     * transcript piece. This index starts at zero.
     *
     * @generated from field: int32 word_index = 3;
     */
    value: number;
    case: "wordIndex";
  } | { case: undefined; value?: undefined };

  /**
   * The index in the sequence of transcribed pieces of the conversation where
   * the boundary is located. This index starts at zero.
   *
   * @generated from field: int32 transcript_index = 1;
   */
  transcriptIndex: number;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnnotationBoundary.
 * Use `create(AnnotationBoundarySchema)` to create a new message.
 */
export const AnnotationBoundarySchema: GenMessage<AnnotationBoundary> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 10);

/**
 * The data for an entity annotation.
 * Represents a phrase in the conversation that is a known entity, such
 * as a person, an organization, or location.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Entity
 */
export type Entity = Message<"google.cloud.contactcenterinsights.v1.Entity"> & {
  /**
   * The representative name for the entity.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * The entity type.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Entity.Type type = 2;
   */
  type: Entity_Type;

  /**
   * Metadata associated with the entity.
   *
   * For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`)
   * and Knowledge Graph MID (`mid`), if they are available. For the metadata
   * associated with other entity types, see the Type table below.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The salience score associated with the entity in the [0, 1.0] range.
   *
   * The salience score for an entity provides information about the
   * importance or centrality of that entity to the entire document text.
   * Scores closer to 0 are less salient, while scores closer to 1.0 are highly
   * salient.
   *
   * @generated from field: float salience = 4;
   */
  salience: number;

  /**
   * The aggregate sentiment expressed for this entity in the conversation.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.SentimentData sentiment = 5;
   */
  sentiment?: SentimentData;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Entity.
 * Use `create(EntitySchema)` to create a new message.
 */
export const EntitySchema: GenMessage<Entity> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 11);

/**
 * The type of the entity. For most entity types, the associated metadata is a
 * Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`). The table
 * below lists the associated fields for entities that have different
 * metadata.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.Entity.Type
 */
export enum Entity_Type {
  /**
   * Unspecified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Person.
   *
   * @generated from enum value: PERSON = 1;
   */
  PERSON = 1,

  /**
   * Location.
   *
   * @generated from enum value: LOCATION = 2;
   */
  LOCATION = 2,

  /**
   * Organization.
   *
   * @generated from enum value: ORGANIZATION = 3;
   */
  ORGANIZATION = 3,

  /**
   * Event.
   *
   * @generated from enum value: EVENT = 4;
   */
  EVENT = 4,

  /**
   * Artwork.
   *
   * @generated from enum value: WORK_OF_ART = 5;
   */
  WORK_OF_ART = 5,

  /**
   * Consumer product.
   *
   * @generated from enum value: CONSUMER_GOOD = 6;
   */
  CONSUMER_GOOD = 6,

  /**
   * Other types of entities.
   *
   * @generated from enum value: OTHER = 7;
   */
  OTHER = 7,

  /**
   * Phone number.
   *
   * The metadata lists the phone number (formatted according to local
   * convention), plus whichever additional elements appear in the text:
   *
   * * `number` - The actual number, broken down into sections according to
   * local convention.
   * * `national_prefix` - Country code, if detected.
   * * `area_code` - Region or area code, if detected.
   * * `extension` - Phone extension (to be dialed after connection), if
   * detected.
   *
   * @generated from enum value: PHONE_NUMBER = 9;
   */
  PHONE_NUMBER = 9,

  /**
   * Address.
   *
   * The metadata identifies the street number and locality plus whichever
   * additional elements appear in the text:
   *
   * * `street_number` - Street number.
   * * `locality` - City or town.
   * * `street_name` - Street/route name, if detected.
   * * `postal_code` - Postal code, if detected.
   * * `country` - Country, if detected.
   * * `broad_region` - Administrative area, such as the state, if detected.
   * * `narrow_region` - Smaller administrative area, such as county, if
   * detected.
   * * `sublocality` - Used in Asian addresses to demark a district within a
   * city, if detected.
   *
   * @generated from enum value: ADDRESS = 10;
   */
  ADDRESS = 10,

  /**
   * Date.
   *
   * The metadata identifies the components of the date:
   *
   * * `year` - Four digit year, if detected.
   * * `month` - Two digit month number, if detected.
   * * `day` - Two digit day number, if detected.
   *
   * @generated from enum value: DATE = 11;
   */
  DATE = 11,

  /**
   * Number.
   *
   * The metadata is the number itself.
   *
   * @generated from enum value: NUMBER = 12;
   */
  NUMBER = 12,

  /**
   * Price.
   *
   * The metadata identifies the `value` and `currency`.
   *
   * @generated from enum value: PRICE = 13;
   */
  PRICE = 13,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.Entity.Type.
 */
export const Entity_TypeSchema: GenEnum<Entity_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 11, 0);

/**
 * The data for an intent.
 * Represents a detected intent in the conversation, for example MAKES_PROMISE.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Intent
 */
export type Intent = Message<"google.cloud.contactcenterinsights.v1.Intent"> & {
  /**
   * The unique identifier of the intent.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The human-readable name of the intent.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Intent.
 * Use `create(IntentSchema)` to create a new message.
 */
export const IntentSchema: GenMessage<Intent> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 12);

/**
 * The data for a matched phrase matcher.
 * Represents information identifying a phrase matcher for a given match.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.PhraseMatchData
 */
export type PhraseMatchData = Message<"google.cloud.contactcenterinsights.v1.PhraseMatchData"> & {
  /**
   * The unique identifier (the resource name) of the phrase matcher.
   *
   * @generated from field: string phrase_matcher = 1;
   */
  phraseMatcher: string;

  /**
   * The human-readable name of the phrase matcher.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.PhraseMatchData.
 * Use `create(PhraseMatchDataSchema)` to create a new message.
 */
export const PhraseMatchDataSchema: GenMessage<PhraseMatchData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 13);

/**
 * The data for a Dialogflow intent.
 * Represents a detected intent in the conversation, e.g. MAKES_PROMISE.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.DialogflowIntent
 */
export type DialogflowIntent = Message<"google.cloud.contactcenterinsights.v1.DialogflowIntent"> & {
  /**
   * The human-readable name of the intent.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.DialogflowIntent.
 * Use `create(DialogflowIntentSchema)` to create a new message.
 */
export const DialogflowIntentSchema: GenMessage<DialogflowIntent> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 14);

/**
 * The data for an interruption annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.InterruptionData
 */
export type InterruptionData = Message<"google.cloud.contactcenterinsights.v1.InterruptionData"> & {
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.InterruptionData.
 * Use `create(InterruptionDataSchema)` to create a new message.
 */
export const InterruptionDataSchema: GenMessage<InterruptionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 15);

/**
 * The data for a silence annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.SilenceData
 */
export type SilenceData = Message<"google.cloud.contactcenterinsights.v1.SilenceData"> & {
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.SilenceData.
 * Use `create(SilenceDataSchema)` to create a new message.
 */
export const SilenceDataSchema: GenMessage<SilenceData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 16);

/**
 * The data for a hold annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.HoldData
 */
export type HoldData = Message<"google.cloud.contactcenterinsights.v1.HoldData"> & {
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.HoldData.
 * Use `create(HoldDataSchema)` to create a new message.
 */
export const HoldDataSchema: GenMessage<HoldData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 17);

/**
 * The data for an entity mention annotation.
 * This represents a mention of an `Entity` in the conversation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.EntityMentionData
 */
export type EntityMentionData = Message<"google.cloud.contactcenterinsights.v1.EntityMentionData"> & {
  /**
   * The key of this entity in conversation entities.
   * Can be used to retrieve the exact `Entity` this mention is attached to.
   *
   * @generated from field: string entity_unique_id = 1;
   */
  entityUniqueId: string;

  /**
   * The type of the entity mention.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.EntityMentionData.MentionType type = 2;
   */
  type: EntityMentionData_MentionType;

  /**
   * Sentiment expressed for this mention of the entity.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.SentimentData sentiment = 3;
   */
  sentiment?: SentimentData;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.EntityMentionData.
 * Use `create(EntityMentionDataSchema)` to create a new message.
 */
export const EntityMentionDataSchema: GenMessage<EntityMentionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 18);

/**
 * The supported types of mentions.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.EntityMentionData.MentionType
 */
export enum EntityMentionData_MentionType {
  /**
   * Unspecified.
   *
   * @generated from enum value: MENTION_TYPE_UNSPECIFIED = 0;
   */
  MENTION_TYPE_UNSPECIFIED = 0,

  /**
   * Proper noun.
   *
   * @generated from enum value: PROPER = 1;
   */
  PROPER = 1,

  /**
   * Common noun (or noun compound).
   *
   * @generated from enum value: COMMON = 2;
   */
  COMMON = 2,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.EntityMentionData.MentionType.
 */
export const EntityMentionData_MentionTypeSchema: GenEnum<EntityMentionData_MentionType> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 18, 0);

/**
 * The data for an intent match.
 * Represents an intent match for a text segment in the conversation. A text
 * segment can be part of a sentence, a complete sentence, or an utterance
 * with multiple sentences.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IntentMatchData
 */
export type IntentMatchData = Message<"google.cloud.contactcenterinsights.v1.IntentMatchData"> & {
  /**
   * The id of the matched intent.
   * Can be used to retrieve the corresponding intent information.
   *
   * @generated from field: string intent_unique_id = 1;
   */
  intentUniqueId: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IntentMatchData.
 * Use `create(IntentMatchDataSchema)` to create a new message.
 */
export const IntentMatchDataSchema: GenMessage<IntentMatchData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 19);

/**
 * The data for a sentiment annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.SentimentData
 */
export type SentimentData = Message<"google.cloud.contactcenterinsights.v1.SentimentData"> & {
  /**
   * A non-negative number from 0 to infinity which represents the abolute
   * magnitude of sentiment regardless of score.
   *
   * @generated from field: float magnitude = 1;
   */
  magnitude: number;

  /**
   * The sentiment score between -1.0 (negative) and 1.0 (positive).
   *
   * @generated from field: float score = 2;
   */
  score: number;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.SentimentData.
 * Use `create(SentimentDataSchema)` to create a new message.
 */
export const SentimentDataSchema: GenMessage<SentimentData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 20);

/**
 * The data for an issue match annotation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueMatchData
 */
export type IssueMatchData = Message<"google.cloud.contactcenterinsights.v1.IssueMatchData"> & {
  /**
   * Information about the issue's assignment.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueAssignment issue_assignment = 1;
   */
  issueAssignment?: IssueAssignment;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueMatchData.
 * Use `create(IssueMatchDataSchema)` to create a new message.
 */
export const IssueMatchDataSchema: GenMessage<IssueMatchData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 21);

/**
 * The issue model resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueModel
 */
export type IssueModel = Message<"google.cloud.contactcenterinsights.v1.IssueModel"> & {
  /**
   * Immutable. The resource name of the issue model.
   * Format:
   * projects/{project}/locations/{location}/issueModels/{issue_model}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The representative name for the issue model.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Output only. The time at which this issue model was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The most recent time at which the issue model was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Number of issues in this issue model.
   *
   * @generated from field: int64 issue_count = 8;
   */
  issueCount: bigint;

  /**
   * Output only. State of the model.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueModel.State state = 5;
   */
  state: IssueModel_State;

  /**
   * Configs for the input data that used to create the issue model.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueModel.InputDataConfig input_data_config = 6;
   */
  inputDataConfig?: IssueModel_InputDataConfig;

  /**
   * Output only. Immutable. The issue model's label statistics on its training
   * data.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueModelLabelStats training_stats = 7;
   */
  trainingStats?: IssueModelLabelStats;

  /**
   * Type of the model.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.IssueModel.ModelType model_type = 9;
   */
  modelType: IssueModel_ModelType;

  /**
   * Language of the model.
   *
   * @generated from field: string language_code = 10;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueModel.
 * Use `create(IssueModelSchema)` to create a new message.
 */
export const IssueModelSchema: GenMessage<IssueModel> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 22);

/**
 * Configs for the input data used to create the issue model.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueModel.InputDataConfig
 */
export type IssueModel_InputDataConfig = Message<"google.cloud.contactcenterinsights.v1.IssueModel.InputDataConfig"> & {
  /**
   * Medium of conversations used in training data. This field is being
   * deprecated. To specify the medium to be used in training a new issue
   * model, set the `medium` field on `filter`.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Conversation.Medium medium = 1 [deprecated = true];
   * @deprecated
   */
  medium: Conversation_Medium;

  /**
   * Output only. Number of conversations used in training. Output only.
   *
   * @generated from field: int64 training_conversations_count = 2;
   */
  trainingConversationsCount: bigint;

  /**
   * A filter to reduce the conversations used for training the model to a
   * specific subset.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueModel.InputDataConfig.
 * Use `create(IssueModel_InputDataConfigSchema)` to create a new message.
 */
export const IssueModel_InputDataConfigSchema: GenMessage<IssueModel_InputDataConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 22, 0);

/**
 * State of the model.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.IssueModel.State
 */
export enum IssueModel_State {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Model is not deployed but is ready to deploy.
   *
   * @generated from enum value: UNDEPLOYED = 1;
   */
  UNDEPLOYED = 1,

  /**
   * Model is being deployed.
   *
   * @generated from enum value: DEPLOYING = 2;
   */
  DEPLOYING = 2,

  /**
   * Model is deployed and is ready to be used. A model can only be used in
   * analysis if it's in this state.
   *
   * @generated from enum value: DEPLOYED = 3;
   */
  DEPLOYED = 3,

  /**
   * Model is being undeployed.
   *
   * @generated from enum value: UNDEPLOYING = 4;
   */
  UNDEPLOYING = 4,

  /**
   * Model is being deleted.
   *
   * @generated from enum value: DELETING = 5;
   */
  DELETING = 5,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.IssueModel.State.
 */
export const IssueModel_StateSchema: GenEnum<IssueModel_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 22, 0);

/**
 * Type of the model.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.IssueModel.ModelType
 */
export enum IssueModel_ModelType {
  /**
   * Unspecified model type.
   *
   * @generated from enum value: MODEL_TYPE_UNSPECIFIED = 0;
   */
  MODEL_TYPE_UNSPECIFIED = 0,

  /**
   * Type V1.
   *
   * @generated from enum value: TYPE_V1 = 1;
   */
  TYPE_V1 = 1,

  /**
   * Type V2.
   *
   * @generated from enum value: TYPE_V2 = 2;
   */
  TYPE_V2 = 2,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.IssueModel.ModelType.
 */
export const IssueModel_ModelTypeSchema: GenEnum<IssueModel_ModelType> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 22, 1);

/**
 * The issue resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Issue
 */
export type Issue = Message<"google.cloud.contactcenterinsights.v1.Issue"> & {
  /**
   * Immutable. The resource name of the issue.
   * Format:
   * projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The representative name for the issue.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Output only. The time at which this issue was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The most recent time that this issue was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Resource names of the sample representative utterances that
   * match to this issue.
   *
   * @generated from field: repeated string sample_utterances = 6;
   */
  sampleUtterances: string[];
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Issue.
 * Use `create(IssueSchema)` to create a new message.
 */
export const IssueSchema: GenMessage<Issue> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 23);

/**
 * Aggregated statistics about an issue model.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueModelLabelStats
 */
export type IssueModelLabelStats = Message<"google.cloud.contactcenterinsights.v1.IssueModelLabelStats"> & {
  /**
   * Number of conversations the issue model has analyzed at this point in time.
   *
   * @generated from field: int64 analyzed_conversations_count = 1;
   */
  analyzedConversationsCount: bigint;

  /**
   * Number of analyzed conversations for which no issue was applicable at this
   * point in time.
   *
   * @generated from field: int64 unclassified_conversations_count = 2;
   */
  unclassifiedConversationsCount: bigint;

  /**
   * Statistics on each issue. Key is the issue's resource name.
   *
   * @generated from field: map<string, google.cloud.contactcenterinsights.v1.IssueModelLabelStats.IssueStats> issue_stats = 3;
   */
  issueStats: { [key: string]: IssueModelLabelStats_IssueStats };
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueModelLabelStats.
 * Use `create(IssueModelLabelStatsSchema)` to create a new message.
 */
export const IssueModelLabelStatsSchema: GenMessage<IssueModelLabelStats> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 24);

/**
 * Aggregated statistics about an issue.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.IssueModelLabelStats.IssueStats
 */
export type IssueModelLabelStats_IssueStats = Message<"google.cloud.contactcenterinsights.v1.IssueModelLabelStats.IssueStats"> & {
  /**
   * Issue resource.
   * Format:
   * projects/{project}/locations/{location}/issueModels/{issue_model}/issues/{issue}
   *
   * @generated from field: string issue = 1;
   */
  issue: string;

  /**
   * Number of conversations attached to the issue at this point in time.
   *
   * @generated from field: int64 labeled_conversations_count = 2;
   */
  labeledConversationsCount: bigint;

  /**
   * Display name of the issue.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.IssueModelLabelStats.IssueStats.
 * Use `create(IssueModelLabelStats_IssueStatsSchema)` to create a new message.
 */
export const IssueModelLabelStats_IssueStatsSchema: GenMessage<IssueModelLabelStats_IssueStats> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 24, 0);

/**
 * The phrase matcher resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.PhraseMatcher
 */
export type PhraseMatcher = Message<"google.cloud.contactcenterinsights.v1.PhraseMatcher"> & {
  /**
   * The resource name of the phrase matcher.
   * Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Immutable. The revision ID of the phrase matcher.
   * A new revision is committed whenever the matcher is changed, except when it
   * is activated or deactivated. A server generated random ID will be used.
   * Example: locations/global/phraseMatchers/my-first-matcher@1234567
   *
   * @generated from field: string revision_id = 2;
   */
  revisionId: string;

  /**
   * The customized version tag to use for the phrase matcher. If not specified,
   * it will default to `revision_id`.
   *
   * @generated from field: string version_tag = 3;
   */
  versionTag: string;

  /**
   * Output only. The timestamp of when the revision was created. It is also the
   * create time when a new matcher is added.
   *
   * @generated from field: google.protobuf.Timestamp revision_create_time = 4;
   */
  revisionCreateTime?: Timestamp;

  /**
   * The human-readable name of the phrase matcher.
   *
   * @generated from field: string display_name = 5;
   */
  displayName: string;

  /**
   * Required. The type of this phrase matcher.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.PhraseMatcher.PhraseMatcherType type = 6;
   */
  type: PhraseMatcher_PhraseMatcherType;

  /**
   * Applies the phrase matcher only when it is active.
   *
   * @generated from field: bool active = 7;
   */
  active: boolean;

  /**
   * A list of phase match rule groups that are included in this matcher.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup phrase_match_rule_groups = 8;
   */
  phraseMatchRuleGroups: PhraseMatchRuleGroup[];

  /**
   * Output only. The most recent time at which the activation status was
   * updated.
   *
   * @generated from field: google.protobuf.Timestamp activation_update_time = 9;
   */
  activationUpdateTime?: Timestamp;

  /**
   * The role whose utterances the phrase matcher should be matched
   * against. If the role is ROLE_UNSPECIFIED it will be matched against any
   * utterances in the transcript.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.ConversationParticipant.Role role_match = 10;
   */
  roleMatch: ConversationParticipant_Role;

  /**
   * Output only. The most recent time at which the phrase matcher was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 11;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.PhraseMatcher.
 * Use `create(PhraseMatcherSchema)` to create a new message.
 */
export const PhraseMatcherSchema: GenMessage<PhraseMatcher> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 25);

/**
 * Specifies how to combine each phrase match rule group to determine whether
 * there is a match.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.PhraseMatcher.PhraseMatcherType
 */
export enum PhraseMatcher_PhraseMatcherType {
  /**
   * Unspecified.
   *
   * @generated from enum value: PHRASE_MATCHER_TYPE_UNSPECIFIED = 0;
   */
  PHRASE_MATCHER_TYPE_UNSPECIFIED = 0,

  /**
   * Must meet all phrase match rule groups or there is no match.
   *
   * @generated from enum value: ALL_OF = 1;
   */
  ALL_OF = 1,

  /**
   * If any of the phrase match rule groups are met, there is a match.
   *
   * @generated from enum value: ANY_OF = 2;
   */
  ANY_OF = 2,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.PhraseMatcher.PhraseMatcherType.
 */
export const PhraseMatcher_PhraseMatcherTypeSchema: GenEnum<PhraseMatcher_PhraseMatcherType> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 25, 0);

/**
 * A message representing a rule in the phrase matcher.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup
 */
export type PhraseMatchRuleGroup = Message<"google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup"> & {
  /**
   * Required. The type of this phrase match rule group.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup.PhraseMatchRuleGroupType type = 1;
   */
  type: PhraseMatchRuleGroup_PhraseMatchRuleGroupType;

  /**
   * A list of phrase match rules that are included in this group.
   *
   * @generated from field: repeated google.cloud.contactcenterinsights.v1.PhraseMatchRule phrase_match_rules = 2;
   */
  phraseMatchRules: PhraseMatchRule[];
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup.
 * Use `create(PhraseMatchRuleGroupSchema)` to create a new message.
 */
export const PhraseMatchRuleGroupSchema: GenMessage<PhraseMatchRuleGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 26);

/**
 * Specifies how to combine each phrase match rule for whether there is a
 * match.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup.PhraseMatchRuleGroupType
 */
export enum PhraseMatchRuleGroup_PhraseMatchRuleGroupType {
  /**
   * Unspecified.
   *
   * @generated from enum value: PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED = 0;
   */
  PHRASE_MATCH_RULE_GROUP_TYPE_UNSPECIFIED = 0,

  /**
   * Must meet all phrase match rules or there is no match.
   *
   * @generated from enum value: ALL_OF = 1;
   */
  ALL_OF = 1,

  /**
   * If any of the phrase match rules are met, there is a match.
   *
   * @generated from enum value: ANY_OF = 2;
   */
  ANY_OF = 2,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.PhraseMatchRuleGroup.PhraseMatchRuleGroupType.
 */
export const PhraseMatchRuleGroup_PhraseMatchRuleGroupTypeSchema: GenEnum<PhraseMatchRuleGroup_PhraseMatchRuleGroupType> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 26, 0);

/**
 * The data for a phrase match rule.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.PhraseMatchRule
 */
export type PhraseMatchRule = Message<"google.cloud.contactcenterinsights.v1.PhraseMatchRule"> & {
  /**
   * Required. The phrase to be matched.
   *
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * Specifies whether the phrase must be missing from the transcript segment or
   * present in the transcript segment.
   *
   * @generated from field: bool negated = 2;
   */
  negated: boolean;

  /**
   * Provides additional information about the rule that specifies how to apply
   * the rule.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.PhraseMatchRuleConfig config = 3;
   */
  config?: PhraseMatchRuleConfig;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.PhraseMatchRule.
 * Use `create(PhraseMatchRuleSchema)` to create a new message.
 */
export const PhraseMatchRuleSchema: GenMessage<PhraseMatchRule> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 27);

/**
 * Configuration information of a phrase match rule.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.PhraseMatchRuleConfig
 */
export type PhraseMatchRuleConfig = Message<"google.cloud.contactcenterinsights.v1.PhraseMatchRuleConfig"> & {
  /**
   * The configuration of the phrase match rule.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.PhraseMatchRuleConfig.config
   */
  config: {
    /**
     * The configuration for the exact match rule.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.ExactMatchConfig exact_match_config = 1;
     */
    value: ExactMatchConfig;
    case: "exactMatchConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.PhraseMatchRuleConfig.
 * Use `create(PhraseMatchRuleConfigSchema)` to create a new message.
 */
export const PhraseMatchRuleConfigSchema: GenMessage<PhraseMatchRuleConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 28);

/**
 * Exact match configuration.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ExactMatchConfig
 */
export type ExactMatchConfig = Message<"google.cloud.contactcenterinsights.v1.ExactMatchConfig"> & {
  /**
   * Whether to consider case sensitivity when performing an exact match.
   *
   * @generated from field: bool case_sensitive = 1;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ExactMatchConfig.
 * Use `create(ExactMatchConfigSchema)` to create a new message.
 */
export const ExactMatchConfigSchema: GenMessage<ExactMatchConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 29);

/**
 * The settings resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Settings
 */
export type Settings = Message<"google.cloud.contactcenterinsights.v1.Settings"> & {
  /**
   * Immutable. The resource name of the settings resource.
   * Format:
   * projects/{project}/locations/{location}/settings
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The time at which the settings was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time at which the settings were last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * A language code to be applied to each transcript segment unless the segment
   * already specifies a language code. Language code defaults to "en-US" if it
   * is neither specified on the segment nor here.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;

  /**
   * The default TTL for newly-created conversations. If a conversation has a
   * specified expiration, that value will be used instead. Changing this
   * value will not change the expiration of existing conversations.
   * Conversations with no expire time persist until they are deleted.
   *
   * @generated from field: google.protobuf.Duration conversation_ttl = 5;
   */
  conversationTtl?: Duration;

  /**
   * A map that maps a notification trigger to a Pub/Sub topic. Each time a
   * specified trigger occurs, Insights will notify the corresponding Pub/Sub
   * topic.
   *
   * Keys are notification triggers. Supported keys are:
   *
   * * "all-triggers": Notify each time any of the supported triggers occurs.
   * * "create-analysis": Notify each time an analysis is created.
   * * "create-conversation": Notify each time a conversation is created.
   * * "export-insights-data": Notify each time an export is complete.
   * * "update-conversation": Notify each time a conversation is updated via
   * UpdateConversation.
   *
   * Values are Pub/Sub topics. The format of each Pub/Sub topic is:
   * projects/{project}/topics/{topic}
   *
   * @generated from field: map<string, string> pubsub_notification_settings = 6;
   */
  pubsubNotificationSettings: { [key: string]: string };

  /**
   * Default analysis settings.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.Settings.AnalysisConfig analysis_config = 7;
   */
  analysisConfig?: Settings_AnalysisConfig;

  /**
   * Default DLP redaction resources to be applied while ingesting
   * conversations.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.RedactionConfig redaction_config = 10;
   */
  redactionConfig?: RedactionConfig;

  /**
   * Optional. Default Speech-to-Text resources to be used while ingesting audio
   * files. Optional, CCAI Insights will create a default if not provided.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.SpeechConfig speech_config = 11;
   */
  speechConfig?: SpeechConfig;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Settings.
 * Use `create(SettingsSchema)` to create a new message.
 */
export const SettingsSchema: GenMessage<Settings> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 30);

/**
 * Default configuration when creating Analyses in Insights.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.Settings.AnalysisConfig
 */
export type Settings_AnalysisConfig = Message<"google.cloud.contactcenterinsights.v1.Settings.AnalysisConfig"> & {
  /**
   * Percentage of conversations created using Dialogflow runtime integration
   * to analyze automatically, between [0, 100].
   *
   * @generated from field: double runtime_integration_analysis_percentage = 1;
   */
  runtimeIntegrationAnalysisPercentage: number;

  /**
   * Percentage of conversations created using the UploadConversation endpoint
   * to analyze automatically, between [0, 100].
   *
   * @generated from field: double upload_conversation_analysis_percentage = 6;
   */
  uploadConversationAnalysisPercentage: number;

  /**
   * To select the annotators to run and the phrase matchers to use
   * (if any). If not specified, all annotators will be run.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotatorSelector annotator_selector = 5;
   */
  annotatorSelector?: AnnotatorSelector;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.Settings.AnalysisConfig.
 * Use `create(Settings_AnalysisConfigSchema)` to create a new message.
 */
export const Settings_AnalysisConfigSchema: GenMessage<Settings_AnalysisConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 30, 0);

/**
 * DLP resources used for redaction while ingesting conversations.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.RedactionConfig
 */
export type RedactionConfig = Message<"google.cloud.contactcenterinsights.v1.RedactionConfig"> & {
  /**
   * The fully-qualified DLP deidentify template resource name.
   * Format:
   * `projects/{project}/deidentifyTemplates/{template}`
   *
   * @generated from field: string deidentify_template = 1;
   */
  deidentifyTemplate: string;

  /**
   * The fully-qualified DLP inspect template resource name.
   * Format:
   * `projects/{project}/locations/{location}/inspectTemplates/{template}`
   *
   * @generated from field: string inspect_template = 2;
   */
  inspectTemplate: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.RedactionConfig.
 * Use `create(RedactionConfigSchema)` to create a new message.
 */
export const RedactionConfigSchema: GenMessage<RedactionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 31);

/**
 * Speech-to-Text configuration.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.SpeechConfig
 */
export type SpeechConfig = Message<"google.cloud.contactcenterinsights.v1.SpeechConfig"> & {
  /**
   * The fully-qualified Speech Recognizer resource name.
   * Format:
   * `projects/{project_id}/locations/{location}/recognizer/{recognizer}`
   *
   * @generated from field: string speech_recognizer = 1;
   */
  speechRecognizer: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.SpeechConfig.
 * Use `create(SpeechConfigSchema)` to create a new message.
 */
export const SpeechConfigSchema: GenMessage<SpeechConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 32);

/**
 * An annotation that was generated during the customer and agent interaction.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.RuntimeAnnotation
 */
export type RuntimeAnnotation = Message<"google.cloud.contactcenterinsights.v1.RuntimeAnnotation"> & {
  /**
   * The data in the annotation.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.RuntimeAnnotation.data
   */
  data: {
    /**
     * Agent Assist Article Suggestion data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.ArticleSuggestionData article_suggestion = 6;
     */
    value: ArticleSuggestionData;
    case: "articleSuggestion";
  } | {
    /**
     * Agent Assist FAQ answer data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.FaqAnswerData faq_answer = 7;
     */
    value: FaqAnswerData;
    case: "faqAnswer";
  } | {
    /**
     * Agent Assist Smart Reply data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.SmartReplyData smart_reply = 8;
     */
    value: SmartReplyData;
    case: "smartReply";
  } | {
    /**
     * Agent Assist Smart Compose suggestion data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.SmartComposeSuggestionData smart_compose_suggestion = 9;
     */
    value: SmartComposeSuggestionData;
    case: "smartComposeSuggestion";
  } | {
    /**
     * Dialogflow interaction data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.DialogflowInteractionData dialogflow_interaction = 10;
     */
    value: DialogflowInteractionData;
    case: "dialogflowInteraction";
  } | {
    /**
     * Conversation summarization suggestion data.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.ConversationSummarizationSuggestionData conversation_summarization_suggestion = 12;
     */
    value: ConversationSummarizationSuggestionData;
    case: "conversationSummarizationSuggestion";
  } | { case: undefined; value?: undefined };

  /**
   * The unique identifier of the annotation.
   * Format:
   * projects/{project}/locations/{location}/conversationDatasets/{dataset}/conversationDataItems/{data_item}/conversationAnnotations/{annotation}
   *
   * @generated from field: string annotation_id = 1;
   */
  annotationId: string;

  /**
   * The time at which this annotation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * The boundary in the conversation where the annotation starts, inclusive.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotationBoundary start_boundary = 3;
   */
  startBoundary?: AnnotationBoundary;

  /**
   * The boundary in the conversation where the annotation ends, inclusive.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotationBoundary end_boundary = 4;
   */
  endBoundary?: AnnotationBoundary;

  /**
   * The feedback that the customer has about the answer in `data`.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnswerFeedback answer_feedback = 5;
   */
  answerFeedback?: AnswerFeedback;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.RuntimeAnnotation.
 * Use `create(RuntimeAnnotationSchema)` to create a new message.
 */
export const RuntimeAnnotationSchema: GenMessage<RuntimeAnnotation> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 33);

/**
 * The feedback that the customer has about a certain answer in the
 * conversation.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnswerFeedback
 */
export type AnswerFeedback = Message<"google.cloud.contactcenterinsights.v1.AnswerFeedback"> & {
  /**
   * The correctness level of an answer.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnswerFeedback.CorrectnessLevel correctness_level = 1;
   */
  correctnessLevel: AnswerFeedback_CorrectnessLevel;

  /**
   * Indicates whether an answer or item was clicked by the human agent.
   *
   * @generated from field: bool clicked = 2;
   */
  clicked: boolean;

  /**
   * Indicates whether an answer or item was displayed to the human agent in the
   * agent desktop UI.
   *
   * @generated from field: bool displayed = 3;
   */
  displayed: boolean;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnswerFeedback.
 * Use `create(AnswerFeedbackSchema)` to create a new message.
 */
export const AnswerFeedbackSchema: GenMessage<AnswerFeedback> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 34);

/**
 * The correctness level of an answer.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.AnswerFeedback.CorrectnessLevel
 */
export enum AnswerFeedback_CorrectnessLevel {
  /**
   * Correctness level unspecified.
   *
   * @generated from enum value: CORRECTNESS_LEVEL_UNSPECIFIED = 0;
   */
  CORRECTNESS_LEVEL_UNSPECIFIED = 0,

  /**
   * Answer is totally wrong.
   *
   * @generated from enum value: NOT_CORRECT = 1;
   */
  NOT_CORRECT = 1,

  /**
   * Answer is partially correct.
   *
   * @generated from enum value: PARTIALLY_CORRECT = 2;
   */
  PARTIALLY_CORRECT = 2,

  /**
   * Answer is fully correct.
   *
   * @generated from enum value: FULLY_CORRECT = 3;
   */
  FULLY_CORRECT = 3,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.AnswerFeedback.CorrectnessLevel.
 */
export const AnswerFeedback_CorrectnessLevelSchema: GenEnum<AnswerFeedback_CorrectnessLevel> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 34, 0);

/**
 * Agent Assist Article Suggestion data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ArticleSuggestionData
 */
export type ArticleSuggestionData = Message<"google.cloud.contactcenterinsights.v1.ArticleSuggestionData"> & {
  /**
   * Article title.
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * Article URI.
   *
   * @generated from field: string uri = 2;
   */
  uri: string;

  /**
   * The system's confidence score that this article is a good match for this
   * conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
   * certain).
   *
   * @generated from field: float confidence_score = 3;
   */
  confidenceScore: number;

  /**
   * Map that contains metadata about the Article Suggestion and the document
   * that it originates from.
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };

  /**
   * The name of the answer record.
   * Format:
   * projects/{project}/locations/{location}/answerRecords/{answer_record}
   *
   * @generated from field: string query_record = 5;
   */
  queryRecord: string;

  /**
   * The knowledge document that this answer was extracted from.
   * Format:
   * projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}
   *
   * @generated from field: string source = 6;
   */
  source: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ArticleSuggestionData.
 * Use `create(ArticleSuggestionDataSchema)` to create a new message.
 */
export const ArticleSuggestionDataSchema: GenMessage<ArticleSuggestionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 35);

/**
 * Agent Assist frequently-asked-question answer data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.FaqAnswerData
 */
export type FaqAnswerData = Message<"google.cloud.contactcenterinsights.v1.FaqAnswerData"> & {
  /**
   * The piece of text from the `source` knowledge base document.
   *
   * @generated from field: string answer = 1;
   */
  answer: string;

  /**
   * The system's confidence score that this answer is a good match for this
   * conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
   * certain).
   *
   * @generated from field: float confidence_score = 2;
   */
  confidenceScore: number;

  /**
   * The corresponding FAQ question.
   *
   * @generated from field: string question = 3;
   */
  question: string;

  /**
   * Map that contains metadata about the FAQ answer and the document that
   * it originates from.
   *
   * @generated from field: map<string, string> metadata = 4;
   */
  metadata: { [key: string]: string };

  /**
   * The name of the answer record.
   * Format:
   * projects/{project}/locations/{location}/answerRecords/{answer_record}
   *
   * @generated from field: string query_record = 5;
   */
  queryRecord: string;

  /**
   * The knowledge document that this answer was extracted from.
   * Format:
   * projects/{project}/knowledgeBases/{knowledge_base}/documents/{document}.
   *
   * @generated from field: string source = 6;
   */
  source: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.FaqAnswerData.
 * Use `create(FaqAnswerDataSchema)` to create a new message.
 */
export const FaqAnswerDataSchema: GenMessage<FaqAnswerData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 36);

/**
 * Agent Assist Smart Reply data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.SmartReplyData
 */
export type SmartReplyData = Message<"google.cloud.contactcenterinsights.v1.SmartReplyData"> & {
  /**
   * The content of the reply.
   *
   * @generated from field: string reply = 1;
   */
  reply: string;

  /**
   * The system's confidence score that this reply is a good match for this
   * conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
   * certain).
   *
   * @generated from field: double confidence_score = 2;
   */
  confidenceScore: number;

  /**
   * Map that contains metadata about the Smart Reply and the document from
   * which it originates.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The name of the answer record.
   * Format:
   * projects/{project}/locations/{location}/answerRecords/{answer_record}
   *
   * @generated from field: string query_record = 4;
   */
  queryRecord: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.SmartReplyData.
 * Use `create(SmartReplyDataSchema)` to create a new message.
 */
export const SmartReplyDataSchema: GenMessage<SmartReplyData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 37);

/**
 * Agent Assist Smart Compose suggestion data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.SmartComposeSuggestionData
 */
export type SmartComposeSuggestionData = Message<"google.cloud.contactcenterinsights.v1.SmartComposeSuggestionData"> & {
  /**
   * The content of the suggestion.
   *
   * @generated from field: string suggestion = 1;
   */
  suggestion: string;

  /**
   * The system's confidence score that this suggestion is a good match for this
   * conversation, ranging from 0.0 (completely uncertain) to 1.0 (completely
   * certain).
   *
   * @generated from field: double confidence_score = 2;
   */
  confidenceScore: number;

  /**
   * Map that contains metadata about the Smart Compose suggestion and the
   * document from which it originates.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The name of the answer record.
   * Format:
   * projects/{project}/locations/{location}/answerRecords/{answer_record}
   *
   * @generated from field: string query_record = 4;
   */
  queryRecord: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.SmartComposeSuggestionData.
 * Use `create(SmartComposeSuggestionDataSchema)` to create a new message.
 */
export const SmartComposeSuggestionDataSchema: GenMessage<SmartComposeSuggestionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 38);

/**
 * Dialogflow interaction data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.DialogflowInteractionData
 */
export type DialogflowInteractionData = Message<"google.cloud.contactcenterinsights.v1.DialogflowInteractionData"> & {
  /**
   * The Dialogflow intent resource path. Format:
   * projects/{project}/agent/{agent}/intents/{intent}
   *
   * @generated from field: string dialogflow_intent_id = 1;
   */
  dialogflowIntentId: string;

  /**
   * The confidence of the match ranging from 0.0 (completely uncertain) to 1.0
   * (completely certain).
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.DialogflowInteractionData.
 * Use `create(DialogflowInteractionDataSchema)` to create a new message.
 */
export const DialogflowInteractionDataSchema: GenMessage<DialogflowInteractionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 39);

/**
 * Conversation summarization suggestion data.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ConversationSummarizationSuggestionData
 */
export type ConversationSummarizationSuggestionData = Message<"google.cloud.contactcenterinsights.v1.ConversationSummarizationSuggestionData"> & {
  /**
   * The summarization content that is concatenated into one string.
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * The summarization content that is divided into sections. The key is the
   * section's name and the value is the section's content. There is no
   * specific format for the key or value.
   *
   * @generated from field: map<string, string> text_sections = 5;
   */
  textSections: { [key: string]: string };

  /**
   * The confidence score of the summarization.
   *
   * @generated from field: float confidence = 2;
   */
  confidence: number;

  /**
   * A map that contains metadata about the summarization and the document
   * from which it originates.
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };

  /**
   * The name of the answer record.
   * Format:
   * projects/{project}/locations/{location}/answerRecords/{answer_record}
   *
   * @generated from field: string answer_record = 4;
   */
  answerRecord: string;

  /**
   * The name of the model that generates this summary.
   * Format:
   * projects/{project}/locations/{location}/conversationModels/{conversation_model}
   *
   * @generated from field: string conversation_model = 6;
   */
  conversationModel: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ConversationSummarizationSuggestionData.
 * Use `create(ConversationSummarizationSuggestionDataSchema)` to create a new message.
 */
export const ConversationSummarizationSuggestionDataSchema: GenMessage<ConversationSummarizationSuggestionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 40);

/**
 * The call participant speaking for a given utterance.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.ConversationParticipant
 */
export type ConversationParticipant = Message<"google.cloud.contactcenterinsights.v1.ConversationParticipant"> & {
  /**
   * @generated from oneof google.cloud.contactcenterinsights.v1.ConversationParticipant.participant
   */
  participant: {
    /**
     * The name of the participant provided by Dialogflow. Format:
     * projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
     *
     * @generated from field: string dialogflow_participant_name = 5;
     */
    value: string;
    case: "dialogflowParticipantName";
  } | {
    /**
     * A user-specified ID representing the participant.
     *
     * @generated from field: string user_id = 6;
     */
    value: string;
    case: "userId";
  } | { case: undefined; value?: undefined };

  /**
   * Deprecated. Use `dialogflow_participant_name` instead.
   * The name of the Dialogflow participant. Format:
   * projects/{project}/locations/{location}/conversations/{conversation}/participants/{participant}
   *
   * @generated from field: string dialogflow_participant = 1 [deprecated = true];
   * @deprecated
   */
  dialogflowParticipant: string;

  /**
   * Obfuscated user ID from Dialogflow.
   *
   * @generated from field: string obfuscated_external_user_id = 3;
   */
  obfuscatedExternalUserId: string;

  /**
   * The role of the participant.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.ConversationParticipant.Role role = 2;
   */
  role: ConversationParticipant_Role;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.ConversationParticipant.
 * Use `create(ConversationParticipantSchema)` to create a new message.
 */
export const ConversationParticipantSchema: GenMessage<ConversationParticipant> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 41);

/**
 * The role of the participant.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.ConversationParticipant.Role
 */
export enum ConversationParticipant_Role {
  /**
   * Participant's role is not set.
   *
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  ROLE_UNSPECIFIED = 0,

  /**
   * Participant is a human agent.
   *
   * @generated from enum value: HUMAN_AGENT = 1;
   */
  HUMAN_AGENT = 1,

  /**
   * Participant is an automated agent.
   *
   * @generated from enum value: AUTOMATED_AGENT = 2;
   */
  AUTOMATED_AGENT = 2,

  /**
   * Participant is an end user who conversed with the contact center.
   *
   * @generated from enum value: END_USER = 3;
   */
  END_USER = 3,

  /**
   * Participant is either a human or automated agent.
   *
   * @generated from enum value: ANY_AGENT = 4;
   */
  ANY_AGENT = 4,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.ConversationParticipant.Role.
 */
export const ConversationParticipant_RoleSchema: GenEnum<ConversationParticipant_Role> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 41, 0);

/**
 * The View resource.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.View
 */
export type View = Message<"google.cloud.contactcenterinsights.v1.View"> & {
  /**
   * Immutable. The resource name of the view.
   * Format:
   * projects/{project}/locations/{location}/views/{view}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The human-readable display name of the view.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Output only. The time at which this view was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The most recent time at which the view was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * String with specific view properties, must be non-empty.
   *
   * @generated from field: string value = 5;
   */
  value: string;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.View.
 * Use `create(ViewSchema)` to create a new message.
 */
export const ViewSchema: GenMessage<View> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 42);

/**
 * Selector of all available annotators and phrase matchers to run.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnnotatorSelector
 */
export type AnnotatorSelector = Message<"google.cloud.contactcenterinsights.v1.AnnotatorSelector"> & {
  /**
   * Whether to run the interruption annotator.
   *
   * @generated from field: bool run_interruption_annotator = 1;
   */
  runInterruptionAnnotator: boolean;

  /**
   * Whether to run the silence annotator.
   *
   * @generated from field: bool run_silence_annotator = 2;
   */
  runSilenceAnnotator: boolean;

  /**
   * Whether to run the active phrase matcher annotator(s).
   *
   * @generated from field: bool run_phrase_matcher_annotator = 3;
   */
  runPhraseMatcherAnnotator: boolean;

  /**
   * The list of phrase matchers to run. If not provided, all active phrase
   * matchers will be used. If inactive phrase matchers are provided, they will
   * not be used. Phrase matchers will be run only if
   * run_phrase_matcher_annotator is set to true. Format:
   * projects/{project}/locations/{location}/phraseMatchers/{phrase_matcher}
   *
   * @generated from field: repeated string phrase_matchers = 4;
   */
  phraseMatchers: string[];

  /**
   * Whether to run the sentiment annotator.
   *
   * @generated from field: bool run_sentiment_annotator = 5;
   */
  runSentimentAnnotator: boolean;

  /**
   * Whether to run the entity annotator.
   *
   * @generated from field: bool run_entity_annotator = 6;
   */
  runEntityAnnotator: boolean;

  /**
   * Whether to run the intent annotator.
   *
   * @generated from field: bool run_intent_annotator = 7;
   */
  runIntentAnnotator: boolean;

  /**
   * Whether to run the issue model annotator. A model should have already been
   * deployed for this to take effect.
   *
   * @generated from field: bool run_issue_model_annotator = 8;
   */
  runIssueModelAnnotator: boolean;

  /**
   * The issue model to run. If not provided, the most recently deployed topic
   * model will be used. The provided issue model will only be used for
   * inference if the issue model is deployed and if run_issue_model_annotator
   * is set to true. If more than one issue model is provided, only the first
   * provided issue model will be used for inference.
   *
   * @generated from field: repeated string issue_models = 10;
   */
  issueModels: string[];

  /**
   * Whether to run the summarization annotator.
   *
   * @generated from field: bool run_summarization_annotator = 9;
   */
  runSummarizationAnnotator: boolean;

  /**
   * Configuration for the summarization annotator.
   *
   * @generated from field: google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig summarization_config = 11;
   */
  summarizationConfig?: AnnotatorSelector_SummarizationConfig;
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnnotatorSelector.
 * Use `create(AnnotatorSelectorSchema)` to create a new message.
 */
export const AnnotatorSelectorSchema: GenMessage<AnnotatorSelector> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 43);

/**
 * Configuration for summarization.
 *
 * @generated from message google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig
 */
export type AnnotatorSelector_SummarizationConfig = Message<"google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig"> & {
  /**
   * Summarization must use either a preexisting conversation profile or one
   * of the supported default models.
   *
   * @generated from oneof google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig.model_source
   */
  modelSource: {
    /**
     * Resource name of the Dialogflow conversation profile.
     * Format:
     * projects/{project}/locations/{location}/conversationProfiles/{conversation_profile}
     *
     * @generated from field: string conversation_profile = 1;
     */
    value: string;
    case: "conversationProfile";
  } | {
    /**
     * Default summarization model to be used.
     *
     * @generated from field: google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig.SummarizationModel summarization_model = 2;
     */
    value: AnnotatorSelector_SummarizationConfig_SummarizationModel;
    case: "summarizationModel";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig.
 * Use `create(AnnotatorSelector_SummarizationConfigSchema)` to create a new message.
 */
export const AnnotatorSelector_SummarizationConfigSchema: GenMessage<AnnotatorSelector_SummarizationConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_contactcenterinsights_v1_resources, 43, 0);

/**
 * Summarization model to use, if `conversation_profile` is not used.
 *
 * @generated from enum google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig.SummarizationModel
 */
export enum AnnotatorSelector_SummarizationConfig_SummarizationModel {
  /**
   * Unspecified summarization model.
   *
   * @generated from enum value: SUMMARIZATION_MODEL_UNSPECIFIED = 0;
   */
  SUMMARIZATION_MODEL_UNSPECIFIED = 0,

  /**
   * The CCAI baseline model.
   *
   * @generated from enum value: BASELINE_MODEL = 1;
   */
  BASELINE_MODEL = 1,
}

/**
 * Describes the enum google.cloud.contactcenterinsights.v1.AnnotatorSelector.SummarizationConfig.SummarizationModel.
 */
export const AnnotatorSelector_SummarizationConfig_SummarizationModelSchema: GenEnum<AnnotatorSelector_SummarizationConfig_SummarizationModel> = /*@__PURE__*/
  enumDesc(file_google_cloud_contactcenterinsights_v1_resources, 43, 0, 0);

