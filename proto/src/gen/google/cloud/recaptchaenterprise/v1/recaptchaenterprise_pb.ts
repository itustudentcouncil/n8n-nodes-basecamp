// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/recaptchaenterprise/v1/recaptchaenterprise.proto (package google.cloud.recaptchaenterprise.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../api/field_info_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/recaptchaenterprise/v1/recaptchaenterprise.proto.
 */
export const file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * The create assessment request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest
 */
export type CreateAssessmentRequest = Message<"google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest"> & {
  /**
   * Required. The name of the project in which the assessment is created,
   * in the format `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The assessment details.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.Assessment assessment = 2;
   */
  assessment?: Assessment;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.CreateAssessmentRequest.
 * Use `create(CreateAssessmentRequestSchema)` to create a new message.
 */
export const CreateAssessmentRequestSchema: GenMessage<CreateAssessmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 0);

/**
 * Describes an event in the lifecycle of a payment transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionEvent
 */
export type TransactionEvent = Message<"google.cloud.recaptchaenterprise.v1.TransactionEvent"> & {
  /**
   * Optional. The type of this transaction event.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType event_type = 1;
   */
  eventType: TransactionEvent_TransactionEventType;

  /**
   * Optional. The reason or standardized code that corresponds with this
   * transaction event, if one exists. For example, a CHARGEBACK event with code
   * 6005.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * Optional. The value that corresponds with this transaction event, if one
   * exists. For example, a refund event where $5.00 was refunded. Currency is
   * obtained from the original transaction data.
   *
   * @generated from field: double value = 3;
   */
  value: number;

  /**
   * Optional. Timestamp when this transaction event occurred; otherwise assumed
   * to be the time of the API call.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 4;
   */
  eventTime?: Timestamp;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionEvent.
 * Use `create(TransactionEventSchema)` to create a new message.
 */
export const TransactionEventSchema: GenMessage<TransactionEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 1);

/**
 * Enum that represents an event in the payment transaction lifecycle.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType
 */
export enum TransactionEvent_TransactionEventType {
  /**
   * Default, unspecified event type.
   *
   * @generated from enum value: TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0;
   */
  TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * Indicates that the transaction is approved by the merchant. The
   * accompanying reasons can include terms such as 'INHOUSE', 'ACCERTIFY',
   * 'CYBERSOURCE', or 'MANUAL_REVIEW'.
   *
   * @generated from enum value: MERCHANT_APPROVE = 1;
   */
  MERCHANT_APPROVE = 1,

  /**
   * Indicates that the transaction is denied and concluded due to risks
   * detected by the merchant. The accompanying reasons can include terms such
   * as 'INHOUSE',  'ACCERTIFY',  'CYBERSOURCE', or 'MANUAL_REVIEW'.
   *
   * @generated from enum value: MERCHANT_DENY = 2;
   */
  MERCHANT_DENY = 2,

  /**
   * Indicates that the transaction is being evaluated by a human, due to
   * suspicion or risk.
   *
   * @generated from enum value: MANUAL_REVIEW = 3;
   */
  MANUAL_REVIEW = 3,

  /**
   * Indicates that the authorization attempt with the card issuer succeeded.
   *
   * @generated from enum value: AUTHORIZATION = 4;
   */
  AUTHORIZATION = 4,

  /**
   * Indicates that the authorization attempt with the card issuer failed.
   * The accompanying reasons can include Visa's '54' indicating that the card
   * is expired, or '82' indicating that the CVV is incorrect.
   *
   * @generated from enum value: AUTHORIZATION_DECLINE = 5;
   */
  AUTHORIZATION_DECLINE = 5,

  /**
   * Indicates that the transaction is completed because the funds were
   * settled.
   *
   * @generated from enum value: PAYMENT_CAPTURE = 6;
   */
  PAYMENT_CAPTURE = 6,

  /**
   * Indicates that the transaction could not be completed because the funds
   * were not settled.
   *
   * @generated from enum value: PAYMENT_CAPTURE_DECLINE = 7;
   */
  PAYMENT_CAPTURE_DECLINE = 7,

  /**
   * Indicates that the transaction has been canceled. Specify the reason
   * for the cancellation. For example, 'INSUFFICIENT_INVENTORY'.
   *
   * @generated from enum value: CANCEL = 8;
   */
  CANCEL = 8,

  /**
   * Indicates that the merchant has received a chargeback inquiry due to
   * fraud for the transaction, requesting additional information before a
   * fraud chargeback is officially issued and a formal chargeback
   * notification is sent.
   *
   * @generated from enum value: CHARGEBACK_INQUIRY = 9;
   */
  CHARGEBACK_INQUIRY = 9,

  /**
   * Indicates that the merchant has received a chargeback alert due to fraud
   * for the transaction. The process of resolving the dispute without
   * involving the payment network is started.
   *
   * @generated from enum value: CHARGEBACK_ALERT = 10;
   */
  CHARGEBACK_ALERT = 10,

  /**
   * Indicates that a fraud notification is issued for the transaction, sent
   * by the payment instrument's issuing bank because the transaction appears
   * to be fraudulent. We recommend including TC40 or SAFE data in the
   * `reason` field for this event type. For partial chargebacks, we recommend
   * that you include an amount in the `value` field.
   *
   * @generated from enum value: FRAUD_NOTIFICATION = 11;
   */
  FRAUD_NOTIFICATION = 11,

  /**
   * Indicates that the merchant is informed by the payment network that the
   * transaction has entered the chargeback process due to fraud. Reason code
   * examples include Discover's '6005' and '6041'. For partial chargebacks,
   * we recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK = 12;
   */
  CHARGEBACK = 12,

  /**
   * Indicates that the transaction has entered the chargeback process due to
   * fraud, and that the merchant has chosen to enter representment. Reason
   * examples include Discover's '6005' and '6041'. For partial chargebacks,
   * we recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK_REPRESENTMENT = 13;
   */
  CHARGEBACK_REPRESENTMENT = 13,

  /**
   * Indicates that the transaction has had a fraud chargeback which was
   * illegitimate and was reversed as a result. For partial chargebacks, we
   * recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK_REVERSE = 14;
   */
  CHARGEBACK_REVERSE = 14,

  /**
   * Indicates that the merchant has received a refund for a completed
   * transaction. For partial refunds, we recommend that you include an amount
   * in the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of
   * exempt tax)
   *
   * @generated from enum value: REFUND_REQUEST = 15;
   */
  REFUND_REQUEST = 15,

  /**
   * Indicates that the merchant has received a refund request for this
   * transaction, but that they have declined it. For partial refunds, we
   * recommend that you include an amount in the `value` field. Reason
   * example: 'TAX_EXEMPT' (partial refund of exempt tax)
   *
   * @generated from enum value: REFUND_DECLINE = 16;
   */
  REFUND_DECLINE = 16,

  /**
   * Indicates that the completed transaction was refunded by the merchant.
   * For partial refunds, we recommend that you include an amount in the
   * `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt
   * tax)
   *
   * @generated from enum value: REFUND = 17;
   */
  REFUND = 17,

  /**
   * Indicates that the completed transaction was refunded by the merchant,
   * and that this refund was reversed. For partial refunds, we recommend that
   * you include an amount in the `value` field.
   *
   * @generated from enum value: REFUND_REVERSE = 18;
   */
  REFUND_REVERSE = 18,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.TransactionEvent.TransactionEventType.
 */
export const TransactionEvent_TransactionEventTypeSchema: GenEnum<TransactionEvent_TransactionEventType> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 1, 0);

/**
 * The request message to annotate an Assessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest
 */
export type AnnotateAssessmentRequest = Message<"google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest"> & {
  /**
   * Required. The resource name of the Assessment, in the format
   * `projects/{project}/assessments/{assessment}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The annotation that is assigned to the Event. This field can
   * be left empty to provide reasons that apply to an event without concluding
   * whether the event is legitimate or fraudulent.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation annotation = 2;
   */
  annotation: AnnotateAssessmentRequest_Annotation;

  /**
   * Optional. Reasons for the annotation that are assigned to the event.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason reasons = 3;
   */
  reasons: AnnotateAssessmentRequest_Reason[];

  /**
   * Optional. A stable account identifier to apply to the assessment. This is
   * an alternative to setting `account_id` in `CreateAssessment`, for example
   * when a stable account identifier is not yet known in the initial request.
   *
   * @generated from field: string account_id = 7;
   */
  accountId: string;

  /**
   * Optional. A stable hashed account identifier to apply to the assessment.
   * This is an alternative to setting `hashed_account_id` in
   * `CreateAssessment`, for example when a stable account identifier is not yet
   * known in the initial request.
   *
   * @generated from field: bytes hashed_account_id = 4;
   */
  hashedAccountId: Uint8Array;

  /**
   * Optional. If the assessment is part of a payment transaction, provide
   * details on payment lifecycle events that occur in the transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionEvent transaction_event = 5;
   */
  transactionEvent?: TransactionEvent;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.
 * Use `create(AnnotateAssessmentRequestSchema)` to create a new message.
 */
export const AnnotateAssessmentRequestSchema: GenMessage<AnnotateAssessmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 2);

/**
 * Enum that represents the types of annotations.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation
 */
export enum AnnotateAssessmentRequest_Annotation {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: ANNOTATION_UNSPECIFIED = 0;
   */
  ANNOTATION_UNSPECIFIED = 0,

  /**
   * Provides information that the event turned out to be legitimate.
   *
   * @generated from enum value: LEGITIMATE = 1;
   */
  LEGITIMATE = 1,

  /**
   * Provides information that the event turned out to be fraudulent.
   *
   * @generated from enum value: FRAUDULENT = 2;
   */
  FRAUDULENT = 2,

  /**
   * Provides information that the event was related to a login event in which
   * the user typed the correct password. Deprecated, prefer indicating
   * CORRECT_PASSWORD through the reasons field instead.
   *
   * @generated from enum value: PASSWORD_CORRECT = 3 [deprecated = true];
   * @deprecated
   */
  PASSWORD_CORRECT = 3,

  /**
   * Provides information that the event was related to a login event in which
   * the user typed the incorrect password. Deprecated, prefer indicating
   * INCORRECT_PASSWORD through the reasons field instead.
   *
   * @generated from enum value: PASSWORD_INCORRECT = 4 [deprecated = true];
   * @deprecated
   */
  PASSWORD_INCORRECT = 4,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Annotation.
 */
export const AnnotateAssessmentRequest_AnnotationSchema: GenEnum<AnnotateAssessmentRequest_Annotation> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 2, 0);

/**
 * Enum that represents potential reasons for annotating an assessment.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason
 */
export enum AnnotateAssessmentRequest_Reason {
  /**
   * Default unspecified reason.
   *
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * Indicates that the transaction had a chargeback issued with no other
   * details. When possible, specify the type by using CHARGEBACK_FRAUD or
   * CHARGEBACK_DISPUTE instead.
   *
   * @generated from enum value: CHARGEBACK = 1;
   */
  CHARGEBACK = 1,

  /**
   * Indicates that the transaction had a chargeback issued related to an
   * alleged unauthorized transaction from the cardholder's perspective (for
   * example, the card number was stolen).
   *
   * @generated from enum value: CHARGEBACK_FRAUD = 8;
   */
  CHARGEBACK_FRAUD = 8,

  /**
   * Indicates that the transaction had a chargeback issued related to the
   * cardholder having provided their card details but allegedly not being
   * satisfied with the purchase (for example, misrepresentation, attempted
   * cancellation).
   *
   * @generated from enum value: CHARGEBACK_DISPUTE = 9;
   */
  CHARGEBACK_DISPUTE = 9,

  /**
   * Indicates that the completed payment transaction was refunded by the
   * seller.
   *
   * @generated from enum value: REFUND = 10;
   */
  REFUND = 10,

  /**
   * Indicates that the completed payment transaction was determined to be
   * fraudulent by the seller, and was cancelled and refunded as a result.
   *
   * @generated from enum value: REFUND_FRAUD = 11;
   */
  REFUND_FRAUD = 11,

  /**
   * Indicates that the payment transaction was accepted, and the user was
   * charged.
   *
   * @generated from enum value: TRANSACTION_ACCEPTED = 12;
   */
  TRANSACTION_ACCEPTED = 12,

  /**
   * Indicates that the payment transaction was declined, for example due to
   * invalid card details.
   *
   * @generated from enum value: TRANSACTION_DECLINED = 13;
   */
  TRANSACTION_DECLINED = 13,

  /**
   * Indicates the transaction associated with the assessment is suspected of
   * being fraudulent based on the payment method, billing details, shipping
   * address or other transaction information.
   *
   * @generated from enum value: PAYMENT_HEURISTICS = 2;
   */
  PAYMENT_HEURISTICS = 2,

  /**
   * Indicates that the user was served a 2FA challenge. An old assessment
   * with `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been
   * overwritten with `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow.
   * This is equivalent to `FAILED_TWO_FACTOR`.
   *
   * @generated from enum value: INITIATED_TWO_FACTOR = 7;
   */
  INITIATED_TWO_FACTOR = 7,

  /**
   * Indicates that the user passed a 2FA challenge.
   *
   * @generated from enum value: PASSED_TWO_FACTOR = 3;
   */
  PASSED_TWO_FACTOR = 3,

  /**
   * Indicates that the user failed a 2FA challenge.
   *
   * @generated from enum value: FAILED_TWO_FACTOR = 4;
   */
  FAILED_TWO_FACTOR = 4,

  /**
   * Indicates the user provided the correct password.
   *
   * @generated from enum value: CORRECT_PASSWORD = 5;
   */
  CORRECT_PASSWORD = 5,

  /**
   * Indicates the user provided an incorrect password.
   *
   * @generated from enum value: INCORRECT_PASSWORD = 6;
   */
  INCORRECT_PASSWORD = 6,

  /**
   * Indicates that the user sent unwanted and abusive messages to other users
   * of the platform, such as spam, scams, phishing, or social engineering.
   *
   * @generated from enum value: SOCIAL_SPAM = 14;
   */
  SOCIAL_SPAM = 14,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.AnnotateAssessmentRequest.Reason.
 */
export const AnnotateAssessmentRequest_ReasonSchema: GenEnum<AnnotateAssessmentRequest_Reason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 2, 1);

/**
 * Empty response for AnnotateAssessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse
 */
export type AnnotateAssessmentResponse = Message<"google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AnnotateAssessmentResponse.
 * Use `create(AnnotateAssessmentResponseSchema)` to create a new message.
 */
export const AnnotateAssessmentResponseSchema: GenMessage<AnnotateAssessmentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 3);

/**
 * Information about a verification endpoint that can be used for 2FA.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo
 */
export type EndpointVerificationInfo = Message<"google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo"> & {
  /**
   * @generated from oneof google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.endpoint
   */
  endpoint: {
    /**
     * Email address for which to trigger a verification request.
     *
     * @generated from field: string email_address = 1;
     */
    value: string;
    case: "emailAddress";
  } | {
    /**
     * Phone number for which to trigger a verification request. Should be given
     * in E.164 format.
     *
     * @generated from field: string phone_number = 2;
     */
    value: string;
    case: "phoneNumber";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. Token to provide to the client to trigger endpoint
   * verification. It must be used within 15 minutes.
   *
   * @generated from field: string request_token = 3;
   */
  requestToken: string;

  /**
   * Output only. Timestamp of the last successful verification for the
   * endpoint, if any.
   *
   * @generated from field: google.protobuf.Timestamp last_verification_time = 4;
   */
  lastVerificationTime?: Timestamp;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo.
 * Use `create(EndpointVerificationInfoSchema)` to create a new message.
 */
export const EndpointVerificationInfoSchema: GenMessage<EndpointVerificationInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 4);

/**
 * Information about account verification, used for identity verification.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AccountVerificationInfo
 */
export type AccountVerificationInfo = Message<"google.cloud.recaptchaenterprise.v1.AccountVerificationInfo"> & {
  /**
   * Optional. Endpoints that can be used for identity verification.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.EndpointVerificationInfo endpoints = 1;
   */
  endpoints: EndpointVerificationInfo[];

  /**
   * Optional. Language code preference for the verification message, set as a
   * IETF BCP 47 language code.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;

  /**
   * Output only. Result of the latest account verification challenge.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result latest_verification_result = 7;
   */
  latestVerificationResult: AccountVerificationInfo_Result;

  /**
   * Username of the account that is being verified. Deprecated. Customers
   * should now provide the `account_id` field in `event.user_info`.
   *
   * @generated from field: string username = 2 [deprecated = true];
   * @deprecated
   */
  username: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.
 * Use `create(AccountVerificationInfoSchema)` to create a new message.
 */
export const AccountVerificationInfoSchema: GenMessage<AccountVerificationInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 5);

/**
 * Result of the account verification as contained in the verdict token issued
 * at the end of the verification flow.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result
 */
export enum AccountVerificationInfo_Result {
  /**
   * No information about the latest account verification.
   *
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  RESULT_UNSPECIFIED = 0,

  /**
   * The user was successfully verified. This means the account verification
   * challenge was successfully completed.
   *
   * @generated from enum value: SUCCESS_USER_VERIFIED = 1;
   */
  SUCCESS_USER_VERIFIED = 1,

  /**
   * The user failed the verification challenge.
   *
   * @generated from enum value: ERROR_USER_NOT_VERIFIED = 2;
   */
  ERROR_USER_NOT_VERIFIED = 2,

  /**
   * The site is not properly onboarded to use the account verification
   * feature.
   *
   * @generated from enum value: ERROR_SITE_ONBOARDING_INCOMPLETE = 3;
   */
  ERROR_SITE_ONBOARDING_INCOMPLETE = 3,

  /**
   * The recipient is not allowed for account verification. This can occur
   * during integration but should not occur in production.
   *
   * @generated from enum value: ERROR_RECIPIENT_NOT_ALLOWED = 4;
   */
  ERROR_RECIPIENT_NOT_ALLOWED = 4,

  /**
   * The recipient has already been sent too many verification codes in a
   * short amount of time.
   *
   * @generated from enum value: ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED = 5;
   */
  ERROR_RECIPIENT_ABUSE_LIMIT_EXHAUSTED = 5,

  /**
   * The verification flow could not be completed due to a critical internal
   * error.
   *
   * @generated from enum value: ERROR_CRITICAL_INTERNAL = 6;
   */
  ERROR_CRITICAL_INTERNAL = 6,

  /**
   * The client has exceeded their two factor request quota for this period of
   * time.
   *
   * @generated from enum value: ERROR_CUSTOMER_QUOTA_EXHAUSTED = 7;
   */
  ERROR_CUSTOMER_QUOTA_EXHAUSTED = 7,

  /**
   * The request cannot be processed at the time because of an incident. This
   * bypass can be restricted to a problematic destination email domain, a
   * customer, or could affect the entire service.
   *
   * @generated from enum value: ERROR_VERIFICATION_BYPASSED = 8;
   */
  ERROR_VERIFICATION_BYPASSED = 8,

  /**
   * The request parameters do not match with the token provided and cannot be
   * processed.
   *
   * @generated from enum value: ERROR_VERDICT_MISMATCH = 9;
   */
  ERROR_VERDICT_MISMATCH = 9,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.AccountVerificationInfo.Result.
 */
export const AccountVerificationInfo_ResultSchema: GenEnum<AccountVerificationInfo_Result> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 5, 0);

/**
 * Private password leak verification info.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification
 */
export type PrivatePasswordLeakVerification = Message<"google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification"> & {
  /**
   * Required. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized
   * username. It is used to look up password leaks associated with that hash
   * prefix.
   *
   * @generated from field: bytes lookup_hash_prefix = 1;
   */
  lookupHashPrefix: Uint8Array;

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It
   * is re-encrypted by the server and returned through
   * `reencrypted_user_credentials_hash`.
   *
   * @generated from field: bytes encrypted_user_credentials_hash = 2;
   */
  encryptedUserCredentialsHash: Uint8Array;

  /**
   * Output only. List of prefixes of the encrypted potential password leaks
   * that matched the given parameters. They must be compared with the
   * client-side decryption prefix of `reencrypted_user_credentials_hash`
   *
   * @generated from field: repeated bytes encrypted_leak_match_prefixes = 3;
   */
  encryptedLeakMatchPrefixes: Uint8Array[];

  /**
   * Output only. Corresponds to the re-encryption of the
   * `encrypted_user_credentials_hash` field. It is used to match potential
   * password leaks within `encrypted_leak_match_prefixes`.
   *
   * @generated from field: bytes reencrypted_user_credentials_hash = 4;
   */
  reencryptedUserCredentialsHash: Uint8Array;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification.
 * Use `create(PrivatePasswordLeakVerificationSchema)` to create a new message.
 */
export const PrivatePasswordLeakVerificationSchema: GenMessage<PrivatePasswordLeakVerification> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 6);

/**
 * A reCAPTCHA Enterprise assessment resource.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.Assessment
 */
export type Assessment = Message<"google.cloud.recaptchaenterprise.v1.Assessment"> & {
  /**
   * Output only. Identifier. The resource name for the Assessment in the format
   * `projects/{project}/assessments/{assessment}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The event being assessed.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.Event event = 2;
   */
  event?: Event;

  /**
   * Output only. The risk analysis result for the event being assessed.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.RiskAnalysis risk_analysis = 3;
   */
  riskAnalysis?: RiskAnalysis;

  /**
   * Output only. Properties of the provided event token.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TokenProperties token_properties = 4;
   */
  tokenProperties?: TokenProperties;

  /**
   * Optional. Account verification information for identity verification. The
   * assessment event must include a token and site key to use this feature.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AccountVerificationInfo account_verification = 5;
   */
  accountVerification?: AccountVerificationInfo;

  /**
   * Output only. Assessment returned by account defender when an account
   * identifier is provided.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment account_defender_assessment = 6;
   */
  accountDefenderAssessment?: AccountDefenderAssessment;

  /**
   * Optional. The private password leak verification field contains the
   * parameters that are used to to check for leaks privately without sharing
   * user credentials.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.PrivatePasswordLeakVerification private_password_leak_verification = 8;
   */
  privatePasswordLeakVerification?: PrivatePasswordLeakVerification;

  /**
   * Output only. Assessment returned when firewall policies belonging to the
   * project are evaluated using the field firewall_policy_evaluation.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallPolicyAssessment firewall_policy_assessment = 10;
   */
  firewallPolicyAssessment?: FirewallPolicyAssessment;

  /**
   * Output only. Assessment returned by Fraud Prevention when TransactionData
   * is provided.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment fraud_prevention_assessment = 11;
   */
  fraudPreventionAssessment?: FraudPreventionAssessment;

  /**
   * Output only. Fraud Signals specific to the users involved in a payment
   * transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudSignals fraud_signals = 13;
   */
  fraudSignals?: FraudSignals;

  /**
   * Output only. Assessment returned when a site key, a token, and a phone
   * number as `user_id` are provided. Account defender and SMS toll fraud
   * protection need to be enabled.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.PhoneFraudAssessment phone_fraud_assessment = 12;
   */
  phoneFraudAssessment?: PhoneFraudAssessment;

  /**
   * Optional. The environment creating the assessment. This describes your
   * environment (the system invoking CreateAssessment), NOT the environment of
   * your user.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AssessmentEnvironment assessment_environment = 14;
   */
  assessmentEnvironment?: AssessmentEnvironment;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.Assessment.
 * Use `create(AssessmentSchema)` to create a new message.
 */
export const AssessmentSchema: GenMessage<Assessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 7);

/**
 * The event being assessed.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.Event
 */
export type Event = Message<"google.cloud.recaptchaenterprise.v1.Event"> & {
  /**
   * Optional. The user response token provided by the reCAPTCHA Enterprise
   * client-side integration on your site.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Optional. The site key that was used to invoke reCAPTCHA Enterprise on your
   * site and generate the token.
   *
   * @generated from field: string site_key = 2;
   */
  siteKey: string;

  /**
   * Optional. The user agent present in the request from the user's device
   * related to this event.
   *
   * @generated from field: string user_agent = 3;
   */
  userAgent: string;

  /**
   * Optional. The IP address in the request from the user's device related to
   * this event.
   *
   * @generated from field: string user_ip_address = 4;
   */
  userIpAddress: string;

  /**
   * Optional. The expected action for this type of event. This should be the
   * same action provided at token generation time on client-side platforms
   * already integrated with recaptcha enterprise.
   *
   * @generated from field: string expected_action = 5;
   */
  expectedAction: string;

  /**
   * Optional. Deprecated: use `user_info.account_id` instead.
   * Unique stable hashed user identifier for the request. The identifier must
   * be hashed using hmac-sha256 with stable secret.
   *
   * @generated from field: bytes hashed_account_id = 6 [deprecated = true];
   * @deprecated
   */
  hashedAccountId: Uint8Array;

  /**
   * Optional. Flag for a reCAPTCHA express request for an assessment without a
   * token. If enabled, `site_key` must reference an express key.
   *
   * @generated from field: bool express = 14;
   */
  express: boolean;

  /**
   * Optional. The URI resource the user requested that triggered an assessment.
   *
   * @generated from field: string requested_uri = 8;
   */
  requestedUri: string;

  /**
   * Optional. Flag for running WAF token assessment.
   * If enabled, the token must be specified, and have been created by a
   * WAF-enabled key.
   *
   * @generated from field: bool waf_token_assessment = 9;
   */
  wafTokenAssessment: boolean;

  /**
   * Optional. JA3 fingerprint for SSL clients.
   *
   * @generated from field: string ja3 = 10;
   */
  ja3: string;

  /**
   * Optional. HTTP header information about the request.
   *
   * @generated from field: repeated string headers = 11;
   */
  headers: string[];

  /**
   * Optional. Flag for enabling firewall policy config assessment.
   * If this flag is enabled, the firewall policy is evaluated and a
   * suggested firewall action is returned in the response.
   *
   * @generated from field: bool firewall_policy_evaluation = 12;
   */
  firewallPolicyEvaluation: boolean;

  /**
   * Optional. Data describing a payment transaction to be assessed. Sending
   * this data enables reCAPTCHA Fraud Prevention and the
   * FraudPreventionAssessment component in the response.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionData transaction_data = 13;
   */
  transactionData?: TransactionData;

  /**
   * Optional. Information about the user that generates this event, when they
   * can be identified. They are often identified through the use of an account
   * for logged-in requests or login/registration requests, or by providing user
   * identifiers for guest actions like checkout.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.UserInfo user_info = 15;
   */
  userInfo?: UserInfo;

  /**
   * Optional. The Fraud Prevention setting for this assessment.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.Event.FraudPrevention fraud_prevention = 17;
   */
  fraudPrevention: Event_FraudPrevention;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 8);

/**
 * Setting that controls Fraud Prevention assessments.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.Event.FraudPrevention
 */
export enum Event_FraudPrevention {
  /**
   * Default, unspecified setting. If opted in for automatic detection,
   * `fraud_prevention_assessment` is returned based on the request.
   * Otherwise, `fraud_prevention_assessment` is returned if
   * `transaction_data` is present in the `Event` and Fraud Prevention is
   * enabled in the Google Cloud console.
   *
   * @generated from enum value: FRAUD_PREVENTION_UNSPECIFIED = 0;
   */
  FRAUD_PREVENTION_UNSPECIFIED = 0,

  /**
   * Enable Fraud Prevention for this assessment, if Fraud Prevention is
   * enabled in the Google Cloud console.
   *
   * @generated from enum value: ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * Disable Fraud Prevention for this assessment, regardless of opt-in
   * status or Google Cloud console settings.
   *
   * @generated from enum value: DISABLED = 2;
   */
  DISABLED = 2,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.Event.FraudPrevention.
 */
export const Event_FraudPreventionSchema: GenEnum<Event_FraudPrevention> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 8, 0);

/**
 * Transaction data associated with a payment protected by reCAPTCHA Enterprise.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionData
 */
export type TransactionData = Message<"google.cloud.recaptchaenterprise.v1.TransactionData"> & {
  /**
   * Unique identifier for the transaction. This custom identifier can be used
   * to reference this transaction in the future, for example, labeling a refund
   * or chargeback event. Two attempts at the same transaction should use the
   * same transaction id.
   *
   * @generated from field: optional string transaction_id = 11;
   */
  transactionId?: string;

  /**
   * Optional. The payment method for the transaction. The allowed values are:
   *
   * * credit-card
   * * debit-card
   * * gift-card
   * * processor-{name} (If a third-party is used, for example,
   * processor-paypal)
   * * custom-{name} (If an alternative method is used, for example,
   * custom-crypto)
   *
   * @generated from field: string payment_method = 1;
   */
  paymentMethod: string;

  /**
   * Optional. The Bank Identification Number - generally the first 6 or 8
   * digits of the card.
   *
   * @generated from field: string card_bin = 2;
   */
  cardBin: string;

  /**
   * Optional. The last four digits of the card.
   *
   * @generated from field: string card_last_four = 3;
   */
  cardLastFour: string;

  /**
   * Optional. The currency code in ISO-4217 format.
   *
   * @generated from field: string currency_code = 4;
   */
  currencyCode: string;

  /**
   * Optional. The decimal value of the transaction in the specified currency.
   *
   * @generated from field: double value = 5;
   */
  value: number;

  /**
   * Optional. The value of shipping in the specified currency. 0 for free or no
   * shipping.
   *
   * @generated from field: double shipping_value = 12;
   */
  shippingValue: number;

  /**
   * Optional. Destination address if this transaction involves shipping a
   * physical item.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionData.Address shipping_address = 6;
   */
  shippingAddress?: TransactionData_Address;

  /**
   * Optional. Address associated with the payment method when applicable.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionData.Address billing_address = 7;
   */
  billingAddress?: TransactionData_Address;

  /**
   * Optional. Information about the user paying/initiating the transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionData.User user = 8;
   */
  user?: TransactionData_User;

  /**
   * Optional. Information about the user or users fulfilling the transaction.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.TransactionData.User merchants = 13;
   */
  merchants: TransactionData_User[];

  /**
   * Optional. Items purchased in this transaction.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.TransactionData.Item items = 14;
   */
  items: TransactionData_Item[];

  /**
   * Optional. Information about the payment gateway's response to the
   * transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo gateway_info = 10;
   */
  gatewayInfo?: TransactionData_GatewayInfo;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionData.
 * Use `create(TransactionDataSchema)` to create a new message.
 */
export const TransactionDataSchema: GenMessage<TransactionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 9);

/**
 * Structured address format for billing and shipping addresses.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionData.Address
 */
export type TransactionData_Address = Message<"google.cloud.recaptchaenterprise.v1.TransactionData.Address"> & {
  /**
   * Optional. The recipient name, potentially including information such as
   * "care of".
   *
   * @generated from field: string recipient = 1;
   */
  recipient: string;

  /**
   * Optional. The first lines of the address. The first line generally
   * contains the street name and number, and further lines may include
   * information such as an apartment number.
   *
   * @generated from field: repeated string address = 2;
   */
  address: string[];

  /**
   * Optional. The town/city of the address.
   *
   * @generated from field: string locality = 3;
   */
  locality: string;

  /**
   * Optional. The state, province, or otherwise administrative area of the
   * address.
   *
   * @generated from field: string administrative_area = 4;
   */
  administrativeArea: string;

  /**
   * Optional. The CLDR country/region of the address.
   *
   * @generated from field: string region_code = 5;
   */
  regionCode: string;

  /**
   * Optional. The postal or ZIP code of the address.
   *
   * @generated from field: string postal_code = 6;
   */
  postalCode: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionData.Address.
 * Use `create(TransactionData_AddressSchema)` to create a new message.
 */
export const TransactionData_AddressSchema: GenMessage<TransactionData_Address> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 9, 0);

/**
 * Details about a user's account involved in the transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionData.User
 */
export type TransactionData_User = Message<"google.cloud.recaptchaenterprise.v1.TransactionData.User"> & {
  /**
   * Optional. Unique account identifier for this user. If using account
   * defender, this should match the hashed_account_id field. Otherwise, a
   * unique and persistent identifier for this account.
   *
   * @generated from field: string account_id = 6;
   */
  accountId: string;

  /**
   * Optional. The epoch milliseconds of the user's account creation.
   *
   * @generated from field: int64 creation_ms = 1;
   */
  creationMs: bigint;

  /**
   * Optional. The email address of the user.
   *
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * Optional. Whether the email has been verified to be accessible by the
   * user (OTP or similar).
   *
   * @generated from field: bool email_verified = 3;
   */
  emailVerified: boolean;

  /**
   * Optional. The phone number of the user, with country code.
   *
   * @generated from field: string phone_number = 4;
   */
  phoneNumber: string;

  /**
   * Optional. Whether the phone number has been verified to be accessible by
   * the user (OTP or similar).
   *
   * @generated from field: bool phone_verified = 5;
   */
  phoneVerified: boolean;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionData.User.
 * Use `create(TransactionData_UserSchema)` to create a new message.
 */
export const TransactionData_UserSchema: GenMessage<TransactionData_User> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 9, 1);

/**
 * Line items being purchased in this transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionData.Item
 */
export type TransactionData_Item = Message<"google.cloud.recaptchaenterprise.v1.TransactionData.Item"> & {
  /**
   * Optional. The full name of the item.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The value per item that the user is paying, in the transaction
   * currency, after discounts.
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * Optional. The quantity of this item that is being purchased.
   *
   * @generated from field: int64 quantity = 3;
   */
  quantity: bigint;

  /**
   * Optional. When a merchant is specified, its corresponding account_id.
   * Necessary to populate marketplace-style transactions.
   *
   * @generated from field: string merchant_account_id = 4;
   */
  merchantAccountId: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionData.Item.
 * Use `create(TransactionData_ItemSchema)` to create a new message.
 */
export const TransactionData_ItemSchema: GenMessage<TransactionData_Item> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 9, 2);

/**
 * Details about the transaction from the gateway.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo
 */
export type TransactionData_GatewayInfo = Message<"google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo"> & {
  /**
   * Optional. Name of the gateway service (for example, stripe, square,
   * paypal).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Gateway response code describing the state of the transaction.
   *
   * @generated from field: string gateway_response_code = 2;
   */
  gatewayResponseCode: string;

  /**
   * Optional. AVS response code from the gateway
   * (available only when reCAPTCHA Enterprise is called after authorization).
   *
   * @generated from field: string avs_response_code = 3;
   */
  avsResponseCode: string;

  /**
   * Optional. CVV response code from the gateway
   * (available only when reCAPTCHA Enterprise is called after authorization).
   *
   * @generated from field: string cvv_response_code = 4;
   */
  cvvResponseCode: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TransactionData.GatewayInfo.
 * Use `create(TransactionData_GatewayInfoSchema)` to create a new message.
 */
export const TransactionData_GatewayInfoSchema: GenMessage<TransactionData_GatewayInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 9, 3);

/**
 * User information associated with a request protected by reCAPTCHA Enterprise.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.UserInfo
 */
export type UserInfo = Message<"google.cloud.recaptchaenterprise.v1.UserInfo"> & {
  /**
   * Optional. Creation time for this account associated with this user. Leave
   * blank for non logged-in actions, guest checkout, or when there is no
   * account associated with the current user.
   *
   * @generated from field: google.protobuf.Timestamp create_account_time = 1;
   */
  createAccountTime?: Timestamp;

  /**
   * Optional. For logged-in requests or login/registration requests, the unique
   * account identifier associated with this user. You can use the username if
   * it is stable (meaning it is the same for every request associated with the
   * same user), or any stable user ID of your choice. Leave blank for non
   * logged-in actions or guest checkout.
   *
   * @generated from field: string account_id = 2;
   */
  accountId: string;

  /**
   * Optional. Identifiers associated with this user or request.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.UserId user_ids = 3;
   */
  userIds: UserId[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.UserInfo.
 * Use `create(UserInfoSchema)` to create a new message.
 */
export const UserInfoSchema: GenMessage<UserInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 10);

/**
 * An identifier associated with a user.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.UserId
 */
export type UserId = Message<"google.cloud.recaptchaenterprise.v1.UserId"> & {
  /**
   * @generated from oneof google.cloud.recaptchaenterprise.v1.UserId.id_oneof
   */
  idOneof: {
    /**
     * Optional. An email address.
     *
     * @generated from field: string email = 1;
     */
    value: string;
    case: "email";
  } | {
    /**
     * Optional. A phone number. Should use the E.164 format.
     *
     * @generated from field: string phone_number = 2;
     */
    value: string;
    case: "phoneNumber";
  } | {
    /**
     * Optional. A unique username, if different from all the other identifiers
     * and `account_id` that are provided. Can be a unique login handle or
     * display name for a user.
     *
     * @generated from field: string username = 3;
     */
    value: string;
    case: "username";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.UserId.
 * Use `create(UserIdSchema)` to create a new message.
 */
export const UserIdSchema: GenMessage<UserId> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 11);

/**
 * Risk analysis result for an event.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.RiskAnalysis
 */
export type RiskAnalysis = Message<"google.cloud.recaptchaenterprise.v1.RiskAnalysis"> & {
  /**
   * Output only. Legitimate event score from 0.0 to 1.0.
   * (1.0 means very likely legitimate traffic while 0.0 means very likely
   * non-legitimate traffic).
   *
   * @generated from field: float score = 1;
   */
  score: number;

  /**
   * Output only. Reasons contributing to the risk analysis verdict.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason reasons = 2;
   */
  reasons: RiskAnalysis_ClassificationReason[];

  /**
   * Output only. Extended verdict reasons to be used for experimentation only.
   * The set of possible reasons is subject to change.
   *
   * @generated from field: repeated string extended_verdict_reasons = 3;
   */
  extendedVerdictReasons: string[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.RiskAnalysis.
 * Use `create(RiskAnalysisSchema)` to create a new message.
 */
export const RiskAnalysisSchema: GenMessage<RiskAnalysis> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 12);

/**
 * Reasons contributing to the risk analysis verdict.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason
 */
export enum RiskAnalysis_ClassificationReason {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: CLASSIFICATION_REASON_UNSPECIFIED = 0;
   */
  CLASSIFICATION_REASON_UNSPECIFIED = 0,

  /**
   * Interactions matched the behavior of an automated agent.
   *
   * @generated from enum value: AUTOMATION = 1;
   */
  AUTOMATION = 1,

  /**
   * The event originated from an illegitimate environment.
   *
   * @generated from enum value: UNEXPECTED_ENVIRONMENT = 2;
   */
  UNEXPECTED_ENVIRONMENT = 2,

  /**
   * Traffic volume from the event source is higher than normal.
   *
   * @generated from enum value: TOO_MUCH_TRAFFIC = 3;
   */
  TOO_MUCH_TRAFFIC = 3,

  /**
   * Interactions with the site were significantly different than expected
   * patterns.
   *
   * @generated from enum value: UNEXPECTED_USAGE_PATTERNS = 4;
   */
  UNEXPECTED_USAGE_PATTERNS = 4,

  /**
   * Too little traffic has been received from this site thus far to generate
   * quality risk analysis.
   *
   * @generated from enum value: LOW_CONFIDENCE_SCORE = 5;
   */
  LOW_CONFIDENCE_SCORE = 5,

  /**
   * The request matches behavioral characteristics of a carding attack.
   *
   * @generated from enum value: SUSPECTED_CARDING = 6;
   */
  SUSPECTED_CARDING = 6,

  /**
   * The request matches behavioral characteristics of chargebacks for fraud.
   *
   * @generated from enum value: SUSPECTED_CHARGEBACK = 7;
   */
  SUSPECTED_CHARGEBACK = 7,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.RiskAnalysis.ClassificationReason.
 */
export const RiskAnalysis_ClassificationReasonSchema: GenEnum<RiskAnalysis_ClassificationReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 12, 0);

/**
 * Properties of the provided event token.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TokenProperties
 */
export type TokenProperties = Message<"google.cloud.recaptchaenterprise.v1.TokenProperties"> & {
  /**
   * Output only. Whether the provided user response token is valid. When valid
   * = false, the reason could be specified in invalid_reason or it could also
   * be due to a user failing to solve a challenge or a sitekey mismatch (i.e
   * the sitekey used to generate the token was different than the one specified
   * in the assessment).
   *
   * @generated from field: bool valid = 1;
   */
  valid: boolean;

  /**
   * Output only. Reason associated with the response when valid = false.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason invalid_reason = 2;
   */
  invalidReason: TokenProperties_InvalidReason;

  /**
   * Output only. The timestamp corresponding to the generation of the token.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The hostname of the page on which the token was generated (Web
   * keys only).
   *
   * @generated from field: string hostname = 4;
   */
  hostname: string;

  /**
   * Output only. The name of the Android package with which the token was
   * generated (Android keys only).
   *
   * @generated from field: string android_package_name = 8;
   */
  androidPackageName: string;

  /**
   * Output only. The ID of the iOS bundle with which the token was generated
   * (iOS keys only).
   *
   * @generated from field: string ios_bundle_id = 9;
   */
  iosBundleId: string;

  /**
   * Output only. Action name provided at token generation.
   *
   * @generated from field: string action = 5;
   */
  action: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TokenProperties.
 * Use `create(TokenPropertiesSchema)` to create a new message.
 */
export const TokenPropertiesSchema: GenMessage<TokenProperties> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 13);

/**
 * Enum that represents the types of invalid token reasons.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason
 */
export enum TokenProperties_InvalidReason {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: INVALID_REASON_UNSPECIFIED = 0;
   */
  INVALID_REASON_UNSPECIFIED = 0,

  /**
   * If the failure reason was not accounted for.
   *
   * @generated from enum value: UNKNOWN_INVALID_REASON = 1;
   */
  UNKNOWN_INVALID_REASON = 1,

  /**
   * The provided user verification token was malformed.
   *
   * @generated from enum value: MALFORMED = 2;
   */
  MALFORMED = 2,

  /**
   * The user verification token had expired.
   *
   * @generated from enum value: EXPIRED = 3;
   */
  EXPIRED = 3,

  /**
   * The user verification had already been seen.
   *
   * @generated from enum value: DUPE = 4;
   */
  DUPE = 4,

  /**
   * The user verification token was not present.
   *
   * @generated from enum value: MISSING = 5;
   */
  MISSING = 5,

  /**
   * A retriable error (such as network failure) occurred on the browser.
   * Could easily be simulated by an attacker.
   *
   * @generated from enum value: BROWSER_ERROR = 6;
   */
  BROWSER_ERROR = 6,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.TokenProperties.InvalidReason.
 */
export const TokenProperties_InvalidReasonSchema: GenEnum<TokenProperties_InvalidReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 13, 0);

/**
 * Assessment for Fraud Prevention.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment
 */
export type FraudPreventionAssessment = Message<"google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment"> & {
  /**
   * Output only. Probability of this transaction being fraudulent. Summarizes
   * the combined risk of attack vectors below. Values are from 0.0 (lowest)
   * to 1.0 (highest).
   *
   * @generated from field: float transaction_risk = 1;
   */
  transactionRisk: number;

  /**
   * Output only. Assessment of this transaction for risk of a stolen
   * instrument.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict stolen_instrument_verdict = 2;
   */
  stolenInstrumentVerdict?: FraudPreventionAssessment_StolenInstrumentVerdict;

  /**
   * Output only. Assessment of this transaction for risk of being part of a
   * card testing attack.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict card_testing_verdict = 3;
   */
  cardTestingVerdict?: FraudPreventionAssessment_CardTestingVerdict;

  /**
   * Output only. Assessment of this transaction for behavioral trust.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.BehavioralTrustVerdict behavioral_trust_verdict = 4;
   */
  behavioralTrustVerdict?: FraudPreventionAssessment_BehavioralTrustVerdict;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.
 * Use `create(FraudPreventionAssessmentSchema)` to create a new message.
 */
export const FraudPreventionAssessmentSchema: GenMessage<FraudPreventionAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 14);

/**
 * Information about stolen instrument fraud, where the user is not the
 * legitimate owner of the instrument being used for the purchase.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict
 */
export type FraudPreventionAssessment_StolenInstrumentVerdict = Message<"google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict"> & {
  /**
   * Output only. Probability of this transaction being executed with a stolen
   * instrument. Values are from 0.0 (lowest) to 1.0 (highest).
   *
   * @generated from field: float risk = 1;
   */
  risk: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.StolenInstrumentVerdict.
 * Use `create(FraudPreventionAssessment_StolenInstrumentVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_StolenInstrumentVerdictSchema: GenMessage<FraudPreventionAssessment_StolenInstrumentVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 14, 0);

/**
 * Information about card testing fraud, where an adversary is testing
 * fraudulently obtained cards or brute forcing their details.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict
 */
export type FraudPreventionAssessment_CardTestingVerdict = Message<"google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict"> & {
  /**
   * Output only. Probability of this transaction attempt being part of a card
   * testing attack. Values are from 0.0 (lowest) to 1.0 (highest).
   *
   * @generated from field: float risk = 1;
   */
  risk: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.CardTestingVerdict.
 * Use `create(FraudPreventionAssessment_CardTestingVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_CardTestingVerdictSchema: GenMessage<FraudPreventionAssessment_CardTestingVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 14, 1);

/**
 * Information about behavioral trust of the transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.BehavioralTrustVerdict
 */
export type FraudPreventionAssessment_BehavioralTrustVerdict = Message<"google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.BehavioralTrustVerdict"> & {
  /**
   * Output only. Probability of this transaction attempt being executed in a
   * behaviorally trustworthy way. Values are from 0.0 (lowest) to 1.0
   * (highest).
   *
   * @generated from field: float trust = 1;
   */
  trust: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudPreventionAssessment.BehavioralTrustVerdict.
 * Use `create(FraudPreventionAssessment_BehavioralTrustVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_BehavioralTrustVerdictSchema: GenMessage<FraudPreventionAssessment_BehavioralTrustVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 14, 2);

/**
 * Fraud signals describing users and cards involved in the transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudSignals
 */
export type FraudSignals = Message<"google.cloud.recaptchaenterprise.v1.FraudSignals"> & {
  /**
   * Output only. Signals describing the end user in this transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudSignals.UserSignals user_signals = 1;
   */
  userSignals?: FraudSignals_UserSignals;

  /**
   * Output only. Signals describing the payment card or cards used in this
   * transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals card_signals = 2;
   */
  cardSignals?: FraudSignals_CardSignals;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudSignals.
 * Use `create(FraudSignalsSchema)` to create a new message.
 */
export const FraudSignalsSchema: GenMessage<FraudSignals> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 15);

/**
 * Signals describing the user involved in this transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudSignals.UserSignals
 */
export type FraudSignals_UserSignals = Message<"google.cloud.recaptchaenterprise.v1.FraudSignals.UserSignals"> & {
  /**
   * Output only. This user (based on email, phone, and other identifiers) has
   * been seen on the internet for at least this number of days.
   *
   * @generated from field: int32 active_days_lower_bound = 1;
   */
  activeDaysLowerBound: number;

  /**
   * Output only. Likelihood (from 0.0 to 1.0) this user includes synthetic
   * components in their identity, such as a randomly generated email address,
   * temporary phone number, or fake shipping address.
   *
   * @generated from field: float synthetic_risk = 2;
   */
  syntheticRisk: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudSignals.UserSignals.
 * Use `create(FraudSignals_UserSignalsSchema)` to create a new message.
 */
export const FraudSignals_UserSignalsSchema: GenMessage<FraudSignals_UserSignals> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 15, 0);

/**
 * Signals describing the payment card used in this transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals
 */
export type FraudSignals_CardSignals = Message<"google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals"> & {
  /**
   * Output only. The labels for the payment card in this transaction.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals.CardLabel card_labels = 1;
   */
  cardLabels: FraudSignals_CardSignals_CardLabel[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals.
 * Use `create(FraudSignals_CardSignalsSchema)` to create a new message.
 */
export const FraudSignals_CardSignalsSchema: GenMessage<FraudSignals_CardSignals> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 15, 1);

/**
 * Risk labels describing the card being assessed, such as its funding
 * mechanism.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals.CardLabel
 */
export enum FraudSignals_CardSignals_CardLabel {
  /**
   * No label specified.
   *
   * @generated from enum value: CARD_LABEL_UNSPECIFIED = 0;
   */
  CARD_LABEL_UNSPECIFIED = 0,

  /**
   * This card has been detected as prepaid.
   *
   * @generated from enum value: PREPAID = 1;
   */
  PREPAID = 1,

  /**
   * This card has been detected as virtual, such as a card number generated
   * for a single transaction or merchant.
   *
   * @generated from enum value: VIRTUAL = 2;
   */
  VIRTUAL = 2,

  /**
   * This card has been detected as being used in an unexpected geographic
   * location.
   *
   * @generated from enum value: UNEXPECTED_LOCATION = 3;
   */
  UNEXPECTED_LOCATION = 3,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.FraudSignals.CardSignals.CardLabel.
 */
export const FraudSignals_CardSignals_CardLabelSchema: GenEnum<FraudSignals_CardSignals_CardLabel> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 15, 1, 0);

/**
 * Information about SMS toll fraud.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict
 */
export type SmsTollFraudVerdict = Message<"google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict"> & {
  /**
   * Output only. Probability of an SMS event being fraudulent.
   * Values are from 0.0 (lowest) to 1.0 (highest).
   *
   * @generated from field: float risk = 1;
   */
  risk: number;

  /**
   * Output only. Reasons contributing to the SMS toll fraud verdict.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict.SmsTollFraudReason reasons = 2;
   */
  reasons: SmsTollFraudVerdict_SmsTollFraudReason[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict.
 * Use `create(SmsTollFraudVerdictSchema)` to create a new message.
 */
export const SmsTollFraudVerdictSchema: GenMessage<SmsTollFraudVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 16);

/**
 * Reasons contributing to the SMS toll fraud verdict.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict.SmsTollFraudReason
 */
export enum SmsTollFraudVerdict_SmsTollFraudReason {
  /**
   * Default unspecified reason
   *
   * @generated from enum value: SMS_TOLL_FRAUD_REASON_UNSPECIFIED = 0;
   */
  SMS_TOLL_FRAUD_REASON_UNSPECIFIED = 0,

  /**
   * The provided phone number was invalid
   *
   * @generated from enum value: INVALID_PHONE_NUMBER = 1;
   */
  INVALID_PHONE_NUMBER = 1,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict.SmsTollFraudReason.
 */
export const SmsTollFraudVerdict_SmsTollFraudReasonSchema: GenEnum<SmsTollFraudVerdict_SmsTollFraudReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 16, 0);

/**
 * Assessment for Phone Fraud
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.PhoneFraudAssessment
 */
export type PhoneFraudAssessment = Message<"google.cloud.recaptchaenterprise.v1.PhoneFraudAssessment"> & {
  /**
   * Output only. Assessment of this phone event for risk of SMS toll fraud.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.SmsTollFraudVerdict sms_toll_fraud_verdict = 1;
   */
  smsTollFraudVerdict?: SmsTollFraudVerdict;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.PhoneFraudAssessment.
 * Use `create(PhoneFraudAssessmentSchema)` to create a new message.
 */
export const PhoneFraudAssessmentSchema: GenMessage<PhoneFraudAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 17);

/**
 * Account defender risk assessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment
 */
export type AccountDefenderAssessment = Message<"google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment"> & {
  /**
   * Output only. Labels for this request.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel labels = 1;
   */
  labels: AccountDefenderAssessment_AccountDefenderLabel[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.
 * Use `create(AccountDefenderAssessmentSchema)` to create a new message.
 */
export const AccountDefenderAssessmentSchema: GenMessage<AccountDefenderAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 18);

/**
 * Labels returned by account defender for this request.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel
 */
export enum AccountDefenderAssessment_AccountDefenderLabel {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: ACCOUNT_DEFENDER_LABEL_UNSPECIFIED = 0;
   */
  ACCOUNT_DEFENDER_LABEL_UNSPECIFIED = 0,

  /**
   * The request matches a known good profile for the user.
   *
   * @generated from enum value: PROFILE_MATCH = 1;
   */
  PROFILE_MATCH = 1,

  /**
   * The request is potentially a suspicious login event and must be further
   * verified either through multi-factor authentication or another system.
   *
   * @generated from enum value: SUSPICIOUS_LOGIN_ACTIVITY = 2;
   */
  SUSPICIOUS_LOGIN_ACTIVITY = 2,

  /**
   * The request matched a profile that previously had suspicious account
   * creation behavior. This can mean that this is a fake account.
   *
   * @generated from enum value: SUSPICIOUS_ACCOUNT_CREATION = 3;
   */
  SUSPICIOUS_ACCOUNT_CREATION = 3,

  /**
   * The account in the request has a high number of related accounts. It does
   * not necessarily imply that the account is bad but can require further
   * investigation.
   *
   * @generated from enum value: RELATED_ACCOUNTS_NUMBER_HIGH = 4;
   */
  RELATED_ACCOUNTS_NUMBER_HIGH = 4,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.AccountDefenderAssessment.AccountDefenderLabel.
 */
export const AccountDefenderAssessment_AccountDefenderLabelSchema: GenEnum<AccountDefenderAssessment_AccountDefenderLabel> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 18, 0);

/**
 * The create key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.CreateKeyRequest
 */
export type CreateKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.CreateKeyRequest"> & {
  /**
   * Required. The name of the project in which the key is created, in the
   * format `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Information to create a reCAPTCHA Enterprise key.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.Key key = 2;
   */
  key?: Key;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.CreateKeyRequest.
 * Use `create(CreateKeyRequestSchema)` to create a new message.
 */
export const CreateKeyRequestSchema: GenMessage<CreateKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 19);

/**
 * The list keys request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListKeysRequest
 */
export type ListKeysRequest = Message<"google.cloud.recaptchaenterprise.v1.ListKeysRequest"> & {
  /**
   * Required. The name of the project that contains the keys that are
   * listed, in the format `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of keys to return. Default is 10. Max limit is
   * 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous.
   * ListKeysRequest, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListKeysRequest.
 * Use `create(ListKeysRequestSchema)` to create a new message.
 */
export const ListKeysRequestSchema: GenMessage<ListKeysRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 20);

/**
 * Response to request to list keys in a project.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListKeysResponse
 */
export type ListKeysResponse = Message<"google.cloud.recaptchaenterprise.v1.ListKeysResponse"> & {
  /**
   * Key details.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.Key keys = 1;
   */
  keys: Key[];

  /**
   * Token to retrieve the next page of results. It is set to empty if no keys
   * remain in results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListKeysResponse.
 * Use `create(ListKeysResponseSchema)` to create a new message.
 */
export const ListKeysResponseSchema: GenMessage<ListKeysResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 21);

/**
 * The retrieve legacy secret key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest
 */
export type RetrieveLegacySecretKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest"> & {
  /**
   * Required. The public key name linked to the requested secret key in the
   * format `projects/{project}/keys/{key}`.
   *
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyRequest.
 * Use `create(RetrieveLegacySecretKeyRequestSchema)` to create a new message.
 */
export const RetrieveLegacySecretKeyRequestSchema: GenMessage<RetrieveLegacySecretKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 22);

/**
 * The get key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.GetKeyRequest
 */
export type GetKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.GetKeyRequest"> & {
  /**
   * Required. The name of the requested key, in the format
   * `projects/{project}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.GetKeyRequest.
 * Use `create(GetKeyRequestSchema)` to create a new message.
 */
export const GetKeyRequestSchema: GenMessage<GetKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 23);

/**
 * The update key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.UpdateKeyRequest
 */
export type UpdateKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.UpdateKeyRequest"> & {
  /**
   * Required. The key to update.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.Key key = 1;
   */
  key?: Key;

  /**
   * Optional. The mask to control which fields of the key get updated. If the
   * mask is not present, all fields are updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.UpdateKeyRequest.
 * Use `create(UpdateKeyRequestSchema)` to create a new message.
 */
export const UpdateKeyRequestSchema: GenMessage<UpdateKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 24);

/**
 * The delete key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.DeleteKeyRequest
 */
export type DeleteKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.DeleteKeyRequest"> & {
  /**
   * Required. The name of the key to be deleted, in the format
   * `projects/{project}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.DeleteKeyRequest.
 * Use `create(DeleteKeyRequestSchema)` to create a new message.
 */
export const DeleteKeyRequestSchema: GenMessage<DeleteKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 25);

/**
 * The create firewall policy request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.CreateFirewallPolicyRequest
 */
export type CreateFirewallPolicyRequest = Message<"google.cloud.recaptchaenterprise.v1.CreateFirewallPolicyRequest"> & {
  /**
   * Required. The name of the project this policy will apply to, in the format
   * `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Information to create the policy.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallPolicy firewall_policy = 2;
   */
  firewallPolicy?: FirewallPolicy;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.CreateFirewallPolicyRequest.
 * Use `create(CreateFirewallPolicyRequestSchema)` to create a new message.
 */
export const CreateFirewallPolicyRequestSchema: GenMessage<CreateFirewallPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 26);

/**
 * The list firewall policies request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesRequest
 */
export type ListFirewallPoliciesRequest = Message<"google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesRequest"> & {
  /**
   * Required. The name of the project to list the policies for, in the format
   * `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of policies to return. Default is 10. Max
   * limit is 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous.
   * ListFirewallPoliciesRequest, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesRequest.
 * Use `create(ListFirewallPoliciesRequestSchema)` to create a new message.
 */
export const ListFirewallPoliciesRequestSchema: GenMessage<ListFirewallPoliciesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 27);

/**
 * Response to request to list firewall policies belonging to a project.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesResponse
 */
export type ListFirewallPoliciesResponse = Message<"google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesResponse"> & {
  /**
   * Policy details.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.FirewallPolicy firewall_policies = 1;
   */
  firewallPolicies: FirewallPolicy[];

  /**
   * Token to retrieve the next page of results. It is set to empty if no
   * policies remain in results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListFirewallPoliciesResponse.
 * Use `create(ListFirewallPoliciesResponseSchema)` to create a new message.
 */
export const ListFirewallPoliciesResponseSchema: GenMessage<ListFirewallPoliciesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 28);

/**
 * The get firewall policy request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.GetFirewallPolicyRequest
 */
export type GetFirewallPolicyRequest = Message<"google.cloud.recaptchaenterprise.v1.GetFirewallPolicyRequest"> & {
  /**
   * Required. The name of the requested policy, in the format
   * `projects/{project}/firewallpolicies/{firewallpolicy}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.GetFirewallPolicyRequest.
 * Use `create(GetFirewallPolicyRequestSchema)` to create a new message.
 */
export const GetFirewallPolicyRequestSchema: GenMessage<GetFirewallPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 29);

/**
 * The update firewall policy request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.UpdateFirewallPolicyRequest
 */
export type UpdateFirewallPolicyRequest = Message<"google.cloud.recaptchaenterprise.v1.UpdateFirewallPolicyRequest"> & {
  /**
   * Required. The policy to update.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallPolicy firewall_policy = 1;
   */
  firewallPolicy?: FirewallPolicy;

  /**
   * Optional. The mask to control which fields of the policy get updated. If
   * the mask is not present, all fields are updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.UpdateFirewallPolicyRequest.
 * Use `create(UpdateFirewallPolicyRequestSchema)` to create a new message.
 */
export const UpdateFirewallPolicyRequestSchema: GenMessage<UpdateFirewallPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 30);

/**
 * The delete firewall policy request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.DeleteFirewallPolicyRequest
 */
export type DeleteFirewallPolicyRequest = Message<"google.cloud.recaptchaenterprise.v1.DeleteFirewallPolicyRequest"> & {
  /**
   * Required. The name of the policy to be deleted, in the format
   * `projects/{project}/firewallpolicies/{firewallpolicy}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.DeleteFirewallPolicyRequest.
 * Use `create(DeleteFirewallPolicyRequestSchema)` to create a new message.
 */
export const DeleteFirewallPolicyRequestSchema: GenMessage<DeleteFirewallPolicyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 31);

/**
 * The reorder firewall policies request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesRequest
 */
export type ReorderFirewallPoliciesRequest = Message<"google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesRequest"> & {
  /**
   * Required. The name of the project to list the policies for, in the format
   * `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A list containing all policy names, in the new order. Each name
   * is in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.
   *
   * @generated from field: repeated string names = 2;
   */
  names: string[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesRequest.
 * Use `create(ReorderFirewallPoliciesRequestSchema)` to create a new message.
 */
export const ReorderFirewallPoliciesRequestSchema: GenMessage<ReorderFirewallPoliciesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 32);

/**
 * The reorder firewall policies response message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesResponse
 */
export type ReorderFirewallPoliciesResponse = Message<"google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesResponse"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ReorderFirewallPoliciesResponse.
 * Use `create(ReorderFirewallPoliciesResponseSchema)` to create a new message.
 */
export const ReorderFirewallPoliciesResponseSchema: GenMessage<ReorderFirewallPoliciesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 33);

/**
 * The migrate key request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.MigrateKeyRequest
 */
export type MigrateKeyRequest = Message<"google.cloud.recaptchaenterprise.v1.MigrateKeyRequest"> & {
  /**
   * Required. The name of the key to be migrated, in the format
   * `projects/{project}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. If true, skips the billing check.
   * A reCAPTCHA Enterprise key or migrated key behaves differently than a
   * reCAPTCHA (non-Enterprise version) key when you reach a quota limit (see
   * https://cloud.google.com/recaptcha/quotas#quota_limit). To avoid
   * any disruption of your usage, we check that a billing account is present.
   * If your usage of reCAPTCHA is under the free quota, you can safely skip the
   * billing check and proceed with the migration. See
   * https://cloud.google.com/recaptcha/docs/billing-information.
   *
   * @generated from field: bool skip_billing_check = 2;
   */
  skipBillingCheck: boolean;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.MigrateKeyRequest.
 * Use `create(MigrateKeyRequestSchema)` to create a new message.
 */
export const MigrateKeyRequestSchema: GenMessage<MigrateKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 34);

/**
 * The get metrics request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.GetMetricsRequest
 */
export type GetMetricsRequest = Message<"google.cloud.recaptchaenterprise.v1.GetMetricsRequest"> & {
  /**
   * Required. The name of the requested metrics, in the format
   * `projects/{project}/keys/{key}/metrics`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.GetMetricsRequest.
 * Use `create(GetMetricsRequestSchema)` to create a new message.
 */
export const GetMetricsRequestSchema: GenMessage<GetMetricsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 35);

/**
 * Metrics for a single Key.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.Metrics
 */
export type Metrics = Message<"google.cloud.recaptchaenterprise.v1.Metrics"> & {
  /**
   * Output only. Identifier. The name of the metrics, in the format
   * `projects/{project}/keys/{key}/metrics`.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Inclusive start time aligned to a day (UTC).
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * Metrics are continuous and in order by dates, and in the granularity
   * of day. All Key types should have score-based data.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.ScoreMetrics score_metrics = 2;
   */
  scoreMetrics: ScoreMetrics[];

  /**
   * Metrics are continuous and in order by dates, and in the granularity
   * of day. Only challenge-based keys (CHECKBOX, INVISIBLE), will have
   * challenge-based data.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.ChallengeMetrics challenge_metrics = 3;
   */
  challengeMetrics: ChallengeMetrics[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.Metrics.
 * Use `create(MetricsSchema)` to create a new message.
 */
export const MetricsSchema: GenMessage<Metrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 36);

/**
 * Secret key is used only in legacy reCAPTCHA. It must be used in a 3rd party
 * integration with legacy reCAPTCHA.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse
 */
export type RetrieveLegacySecretKeyResponse = Message<"google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse"> & {
  /**
   * The secret key (also known as shared secret) authorizes communication
   * between your application backend and the reCAPTCHA Enterprise server to
   * create an assessment.
   * The secret key needs to be kept safe for security purposes.
   *
   * @generated from field: string legacy_secret_key = 1;
   */
  legacySecretKey: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.RetrieveLegacySecretKeyResponse.
 * Use `create(RetrieveLegacySecretKeyResponseSchema)` to create a new message.
 */
export const RetrieveLegacySecretKeyResponseSchema: GenMessage<RetrieveLegacySecretKeyResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 37);

/**
 * A key used to identify and configure applications (web and/or mobile) that
 * use reCAPTCHA Enterprise.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.Key
 */
export type Key = Message<"google.cloud.recaptchaenterprise.v1.Key"> & {
  /**
   * Identifier. The resource name for the Key in the format
   * `projects/{project}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Human-readable display name of this key. Modifiable by user.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Platform-specific settings for this key. The key can only be used on a
   * platform for which the settings are enabled.
   *
   * @generated from oneof google.cloud.recaptchaenterprise.v1.Key.platform_settings
   */
  platformSettings: {
    /**
     * Settings for keys that can be used by websites.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.WebKeySettings web_settings = 3;
     */
    value: WebKeySettings;
    case: "webSettings";
  } | {
    /**
     * Settings for keys that can be used by Android apps.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.AndroidKeySettings android_settings = 4;
     */
    value: AndroidKeySettings;
    case: "androidSettings";
  } | {
    /**
     * Settings for keys that can be used by iOS apps.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.IOSKeySettings ios_settings = 5;
     */
    value: IOSKeySettings;
    case: "iosSettings";
  } | {
    /**
     * Settings specific to keys that can be used for reCAPTCHA Express.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.ExpressKeySettings express_settings = 11;
     */
    value: ExpressKeySettings;
    case: "expressSettings";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. See [Creating and managing labels]
   * (https://cloud.google.com/recaptcha/docs/labels).
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };

  /**
   * Output only. The timestamp corresponding to the creation of this key.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Optional. Options for user acceptance testing.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TestingOptions testing_options = 9;
   */
  testingOptions?: TestingOptions;

  /**
   * Optional. Settings for WAF
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.WafSettings waf_settings = 10;
   */
  wafSettings?: WafSettings;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.Key.
 * Use `create(KeySchema)` to create a new message.
 */
export const KeySchema: GenMessage<Key> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 38);

/**
 * Options for user acceptance testing.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.TestingOptions
 */
export type TestingOptions = Message<"google.cloud.recaptchaenterprise.v1.TestingOptions"> & {
  /**
   * Optional. All assessments for this Key will return this score. Must be
   * between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
   *
   * @generated from field: float testing_score = 1;
   */
  testingScore: number;

  /**
   * Optional. For challenge-based keys only (CHECKBOX, INVISIBLE), all
   * challenge requests for this site will return nocaptcha if NOCAPTCHA, or an
   * unsolvable challenge if CHALLENGE.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge testing_challenge = 2;
   */
  testingChallenge: TestingOptions_TestingChallenge;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.TestingOptions.
 * Use `create(TestingOptionsSchema)` to create a new message.
 */
export const TestingOptionsSchema: GenMessage<TestingOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 39);

/**
 * Enum that represents the challenge option for challenge-based (CHECKBOX,
 * INVISIBLE) testing keys.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge
 */
export enum TestingOptions_TestingChallenge {
  /**
   * Perform the normal risk analysis and return either nocaptcha or a
   * challenge depending on risk and trust factors.
   *
   * @generated from enum value: TESTING_CHALLENGE_UNSPECIFIED = 0;
   */
  TESTING_CHALLENGE_UNSPECIFIED = 0,

  /**
   * Challenge requests for this key always return a nocaptcha, which
   * does not require a solution.
   *
   * @generated from enum value: NOCAPTCHA = 1;
   */
  NOCAPTCHA = 1,

  /**
   * Challenge requests for this key always return an unsolvable
   * challenge.
   *
   * @generated from enum value: UNSOLVABLE_CHALLENGE = 2;
   */
  UNSOLVABLE_CHALLENGE = 2,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.TestingOptions.TestingChallenge.
 */
export const TestingOptions_TestingChallengeSchema: GenEnum<TestingOptions_TestingChallenge> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 39, 0);

/**
 * Settings specific to keys that can be used by websites.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.WebKeySettings
 */
export type WebKeySettings = Message<"google.cloud.recaptchaenterprise.v1.WebKeySettings"> & {
  /**
   * Optional. If set to true, it means allowed_domains will not be enforced.
   *
   * @generated from field: bool allow_all_domains = 3;
   */
  allowAllDomains: boolean;

  /**
   * Optional. Domains or subdomains of websites allowed to use the key. All
   * subdomains of an allowed domain are automatically allowed. A valid domain
   * requires a host and must not include any path, port, query or fragment.
   * Examples: 'example.com' or 'subdomain.example.com'
   *
   * @generated from field: repeated string allowed_domains = 1;
   */
  allowedDomains: string[];

  /**
   * Optional. If set to true, the key can be used on AMP (Accelerated Mobile
   * Pages) websites. This is supported only for the SCORE integration type.
   *
   * @generated from field: bool allow_amp_traffic = 2;
   */
  allowAmpTraffic: boolean;

  /**
   * Required. Describes how this key is integrated with the website.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType integration_type = 4;
   */
  integrationType: WebKeySettings_IntegrationType;

  /**
   * Optional. Settings for the frequency and difficulty at which this key
   * triggers captcha challenges. This should only be specified for
   * IntegrationTypes CHECKBOX and INVISIBLE.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference challenge_security_preference = 5;
   */
  challengeSecurityPreference: WebKeySettings_ChallengeSecurityPreference;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.WebKeySettings.
 * Use `create(WebKeySettingsSchema)` to create a new message.
 */
export const WebKeySettingsSchema: GenMessage<WebKeySettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 40);

/**
 * Enum that represents the integration types for web keys.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType
 */
export enum WebKeySettings_IntegrationType {
  /**
   * Default type that indicates this enum hasn't been specified. This is not
   * a valid IntegrationType, one of the other types must be specified
   * instead.
   *
   * @generated from enum value: INTEGRATION_TYPE_UNSPECIFIED = 0;
   */
  INTEGRATION_TYPE_UNSPECIFIED = 0,

  /**
   * Only used to produce scores. It doesn't display the "I'm not a robot"
   * checkbox and never shows captcha challenges.
   *
   * @generated from enum value: SCORE = 1;
   */
  SCORE = 1,

  /**
   * Displays the "I'm not a robot" checkbox and may show captcha challenges
   * after it is checked.
   *
   * @generated from enum value: CHECKBOX = 2;
   */
  CHECKBOX = 2,

  /**
   * Doesn't display the "I'm not a robot" checkbox, but may show captcha
   * challenges after risk analysis.
   *
   * @generated from enum value: INVISIBLE = 3;
   */
  INVISIBLE = 3,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.WebKeySettings.IntegrationType.
 */
export const WebKeySettings_IntegrationTypeSchema: GenEnum<WebKeySettings_IntegrationType> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 40, 0);

/**
 * Enum that represents the possible challenge frequency and difficulty
 * configurations for a web key.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference
 */
export enum WebKeySettings_ChallengeSecurityPreference {
  /**
   * Default type that indicates this enum hasn't been specified.
   *
   * @generated from enum value: CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED = 0;
   */
  CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED = 0,

  /**
   * Key tends to show fewer and easier challenges.
   *
   * @generated from enum value: USABILITY = 1;
   */
  USABILITY = 1,

  /**
   * Key tends to show balanced (in amount and difficulty) challenges.
   *
   * @generated from enum value: BALANCE = 2;
   */
  BALANCE = 2,

  /**
   * Key tends to show more and harder challenges.
   *
   * @generated from enum value: SECURITY = 3;
   */
  SECURITY = 3,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.WebKeySettings.ChallengeSecurityPreference.
 */
export const WebKeySettings_ChallengeSecurityPreferenceSchema: GenEnum<WebKeySettings_ChallengeSecurityPreference> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 40, 1);

/**
 * Settings specific to keys that can be used by Android apps.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AndroidKeySettings
 */
export type AndroidKeySettings = Message<"google.cloud.recaptchaenterprise.v1.AndroidKeySettings"> & {
  /**
   * Optional. If set to true, allowed_package_names are not enforced.
   *
   * @generated from field: bool allow_all_package_names = 2;
   */
  allowAllPackageNames: boolean;

  /**
   * Optional. Android package names of apps allowed to use the key.
   * Example: 'com.companyname.appname'
   *
   * @generated from field: repeated string allowed_package_names = 1;
   */
  allowedPackageNames: string[];

  /**
   * Optional. Set to true for keys that are used in an Android application that
   * is available for download in app stores in addition to the Google Play
   * Store.
   *
   * @generated from field: bool support_non_google_app_store_distribution = 3;
   */
  supportNonGoogleAppStoreDistribution: boolean;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AndroidKeySettings.
 * Use `create(AndroidKeySettingsSchema)` to create a new message.
 */
export const AndroidKeySettingsSchema: GenMessage<AndroidKeySettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 41);

/**
 * Settings specific to keys that can be used by iOS apps.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.IOSKeySettings
 */
export type IOSKeySettings = Message<"google.cloud.recaptchaenterprise.v1.IOSKeySettings"> & {
  /**
   * Optional. If set to true, allowed_bundle_ids are not enforced.
   *
   * @generated from field: bool allow_all_bundle_ids = 2;
   */
  allowAllBundleIds: boolean;

  /**
   * Optional. iOS bundle ids of apps allowed to use the key.
   * Example: 'com.companyname.productname.appname'
   *
   * @generated from field: repeated string allowed_bundle_ids = 1;
   */
  allowedBundleIds: string[];

  /**
   * Optional. Apple Developer account details for the app that is protected by
   * the reCAPTCHA Key. reCAPTCHA Enterprise leverages platform-specific checks
   * like Apple App Attest and Apple DeviceCheck to protect your app from abuse.
   * Providing these fields allows reCAPTCHA Enterprise to get a better
   * assessment of the integrity of your app.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.AppleDeveloperId apple_developer_id = 3;
   */
  appleDeveloperId?: AppleDeveloperId;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.IOSKeySettings.
 * Use `create(IOSKeySettingsSchema)` to create a new message.
 */
export const IOSKeySettingsSchema: GenMessage<IOSKeySettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 42);

/**
 * Settings specific to keys that can be used for reCAPTCHA Express.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ExpressKeySettings
 */
export type ExpressKeySettings = Message<"google.cloud.recaptchaenterprise.v1.ExpressKeySettings"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ExpressKeySettings.
 * Use `create(ExpressKeySettingsSchema)` to create a new message.
 */
export const ExpressKeySettingsSchema: GenMessage<ExpressKeySettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 43);

/**
 * Contains fields that are required to perform Apple-specific integrity checks.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AppleDeveloperId
 */
export type AppleDeveloperId = Message<"google.cloud.recaptchaenterprise.v1.AppleDeveloperId"> & {
  /**
   * Required. Input only. A private key (downloaded as a text file with a .p8
   * file extension) generated for your Apple Developer account. Ensure that
   * Apple DeviceCheck is enabled for the private key.
   *
   * @generated from field: string private_key = 1;
   */
  privateKey: string;

  /**
   * Required. The Apple developer key ID (10-character string).
   *
   * @generated from field: string key_id = 2;
   */
  keyId: string;

  /**
   * Required. The Apple team ID (10-character string) owning the provisioning
   * profile used to build your application.
   *
   * @generated from field: string team_id = 3;
   */
  teamId: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AppleDeveloperId.
 * Use `create(AppleDeveloperIdSchema)` to create a new message.
 */
export const AppleDeveloperIdSchema: GenMessage<AppleDeveloperId> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 44);

/**
 * Score distribution.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ScoreDistribution
 */
export type ScoreDistribution = Message<"google.cloud.recaptchaenterprise.v1.ScoreDistribution"> & {
  /**
   * Map key is score value multiplied by 100. The scores are discrete values
   * between [0, 1]. The maximum number of buckets is on order of a few dozen,
   * but typically much lower (ie. 10).
   *
   * @generated from field: map<int32, int64> score_buckets = 1;
   */
  scoreBuckets: { [key: number]: bigint };
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ScoreDistribution.
 * Use `create(ScoreDistributionSchema)` to create a new message.
 */
export const ScoreDistributionSchema: GenMessage<ScoreDistribution> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 45);

/**
 * Metrics related to scoring.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ScoreMetrics
 */
export type ScoreMetrics = Message<"google.cloud.recaptchaenterprise.v1.ScoreMetrics"> & {
  /**
   * Aggregated score metrics for all traffic.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.ScoreDistribution overall_metrics = 1;
   */
  overallMetrics?: ScoreDistribution;

  /**
   * Action-based metrics. The map key is the action name which specified by the
   * site owners at time of the "execute" client-side call.
   *
   * @generated from field: map<string, google.cloud.recaptchaenterprise.v1.ScoreDistribution> action_metrics = 2;
   */
  actionMetrics: { [key: string]: ScoreDistribution };
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ScoreMetrics.
 * Use `create(ScoreMetricsSchema)` to create a new message.
 */
export const ScoreMetricsSchema: GenMessage<ScoreMetrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 46);

/**
 * Metrics related to challenges.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ChallengeMetrics
 */
export type ChallengeMetrics = Message<"google.cloud.recaptchaenterprise.v1.ChallengeMetrics"> & {
  /**
   * Count of reCAPTCHA checkboxes or badges rendered. This is mostly equivalent
   * to a count of pageloads for pages that include reCAPTCHA.
   *
   * @generated from field: int64 pageload_count = 1;
   */
  pageloadCount: bigint;

  /**
   * Count of nocaptchas (successful verification without a challenge) issued.
   *
   * @generated from field: int64 nocaptcha_count = 2;
   */
  nocaptchaCount: bigint;

  /**
   * Count of submitted challenge solutions that were incorrect or otherwise
   * deemed suspicious such that a subsequent challenge was triggered.
   *
   * @generated from field: int64 failed_count = 3;
   */
  failedCount: bigint;

  /**
   * Count of nocaptchas (successful verification without a challenge) plus
   * submitted challenge solutions that were correct and resulted in
   * verification.
   *
   * @generated from field: int64 passed_count = 4;
   */
  passedCount: bigint;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ChallengeMetrics.
 * Use `create(ChallengeMetricsSchema)` to create a new message.
 */
export const ChallengeMetricsSchema: GenMessage<ChallengeMetrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 47);

/**
 * Policy config assessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallPolicyAssessment
 */
export type FirewallPolicyAssessment = Message<"google.cloud.recaptchaenterprise.v1.FirewallPolicyAssessment"> & {
  /**
   * Output only. If the processing of a policy config fails, an error is
   * populated and the firewall_policy is left empty.
   *
   * @generated from field: google.rpc.Status error = 5;
   */
  error?: Status;

  /**
   * Output only. The policy that matched the request. If more than one policy
   * may match, this is the first match. If no policy matches the incoming
   * request, the policy field is left empty.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallPolicy firewall_policy = 8;
   */
  firewallPolicy?: FirewallPolicy;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallPolicyAssessment.
 * Use `create(FirewallPolicyAssessmentSchema)` to create a new message.
 */
export const FirewallPolicyAssessmentSchema: GenMessage<FirewallPolicyAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 48);

/**
 * An individual action. Each action represents what to do if a policy
 * matches.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction
 */
export type FirewallAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction"> & {
  /**
   * @generated from oneof google.cloud.recaptchaenterprise.v1.FirewallAction.firewall_action_oneof
   */
  firewallActionOneof: {
    /**
     * The user request did not match any policy and should be allowed
     * access to the requested resource.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.AllowAction allow = 1;
     */
    value: FirewallAction_AllowAction;
    case: "allow";
  } | {
    /**
     * This action will deny access to a given page. The user will get an HTTP
     * error code.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.BlockAction block = 2;
     */
    value: FirewallAction_BlockAction;
    case: "block";
  } | {
    /**
     * This action will inject reCAPTCHA JavaScript code into the HTML page
     * returned by the site backend.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.IncludeRecaptchaScriptAction include_recaptcha_script = 6;
     */
    value: FirewallAction_IncludeRecaptchaScriptAction;
    case: "includeRecaptchaScript";
  } | {
    /**
     * This action will redirect the request to a ReCaptcha interstitial to
     * attach a token.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.RedirectAction redirect = 5;
     */
    value: FirewallAction_RedirectAction;
    case: "redirect";
  } | {
    /**
     * This action will transparently serve a different page to an offending
     * user.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.SubstituteAction substitute = 3;
     */
    value: FirewallAction_SubstituteAction;
    case: "substitute";
  } | {
    /**
     * This action will set a custom header but allow the request to continue
     * to the customer backend.
     *
     * @generated from field: google.cloud.recaptchaenterprise.v1.FirewallAction.SetHeaderAction set_header = 4;
     */
    value: FirewallAction_SetHeaderAction;
    case: "setHeader";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.
 * Use `create(FirewallActionSchema)` to create a new message.
 */
export const FirewallActionSchema: GenMessage<FirewallAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49);

/**
 * An allow action continues processing a request unimpeded.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.AllowAction
 */
export type FirewallAction_AllowAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.AllowAction"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.AllowAction.
 * Use `create(FirewallAction_AllowActionSchema)` to create a new message.
 */
export const FirewallAction_AllowActionSchema: GenMessage<FirewallAction_AllowAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 0);

/**
 * A block action serves an HTTP error code a prevents the request from
 * hitting the backend.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.BlockAction
 */
export type FirewallAction_BlockAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.BlockAction"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.BlockAction.
 * Use `create(FirewallAction_BlockActionSchema)` to create a new message.
 */
export const FirewallAction_BlockActionSchema: GenMessage<FirewallAction_BlockAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 1);

/**
 * An include reCAPTCHA script action involves injecting reCAPTCHA JavaScript
 * code into the HTML returned by the site backend. This reCAPTCHA
 * script is tasked with collecting user signals on the requested web page,
 * issuing tokens as a cookie within the site domain, and enabling their
 * utilization in subsequent page requests.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.IncludeRecaptchaScriptAction
 */
export type FirewallAction_IncludeRecaptchaScriptAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.IncludeRecaptchaScriptAction"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.IncludeRecaptchaScriptAction.
 * Use `create(FirewallAction_IncludeRecaptchaScriptActionSchema)` to create a new message.
 */
export const FirewallAction_IncludeRecaptchaScriptActionSchema: GenMessage<FirewallAction_IncludeRecaptchaScriptAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 2);

/**
 * A redirect action returns a 307 (temporary redirect) response, pointing
 * the user to a ReCaptcha interstitial page to attach a token.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.RedirectAction
 */
export type FirewallAction_RedirectAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.RedirectAction"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.RedirectAction.
 * Use `create(FirewallAction_RedirectActionSchema)` to create a new message.
 */
export const FirewallAction_RedirectActionSchema: GenMessage<FirewallAction_RedirectAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 3);

/**
 * A substitute action transparently serves a different page than the one
 * requested.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.SubstituteAction
 */
export type FirewallAction_SubstituteAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.SubstituteAction"> & {
  /**
   * Optional. The address to redirect to. The target is a relative path in
   * the current host. Example: "/blog/404.html".
   *
   * @generated from field: string path = 1;
   */
  path: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.SubstituteAction.
 * Use `create(FirewallAction_SubstituteActionSchema)` to create a new message.
 */
export const FirewallAction_SubstituteActionSchema: GenMessage<FirewallAction_SubstituteAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 4);

/**
 * A set header action sets a header and forwards the request to the
 * backend. This can be used to trigger custom protection implemented on the
 * backend.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallAction.SetHeaderAction
 */
export type FirewallAction_SetHeaderAction = Message<"google.cloud.recaptchaenterprise.v1.FirewallAction.SetHeaderAction"> & {
  /**
   * Optional. The header key to set in the request to the backend server.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Optional. The header value to set in the request to the backend server.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallAction.SetHeaderAction.
 * Use `create(FirewallAction_SetHeaderActionSchema)` to create a new message.
 */
export const FirewallAction_SetHeaderActionSchema: GenMessage<FirewallAction_SetHeaderAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 49, 5);

/**
 * A FirewallPolicy represents a single matching pattern and resulting actions
 * to take.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.FirewallPolicy
 */
export type FirewallPolicy = Message<"google.cloud.recaptchaenterprise.v1.FirewallPolicy"> & {
  /**
   * Identifier. The resource name for the FirewallPolicy in the format
   * `projects/{project}/firewallpolicies/{firewallpolicy}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. A description of what this policy aims to achieve, for
   * convenience purposes. The description can at most include 256 UTF-8
   * characters.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Optional. The path for which this policy applies, specified as a glob
   * pattern. For more information on glob, see the [manual
   * page](https://man7.org/linux/man-pages/man7/glob.7.html).
   * A path has a max length of 200 characters.
   *
   * @generated from field: string path = 4;
   */
  path: string;

  /**
   * Optional. A CEL (Common Expression Language) conditional expression that
   * specifies if this policy applies to an incoming user request. If this
   * condition evaluates to true and the requested path matched the path
   * pattern, the associated actions should be executed by the caller. The
   * condition string is checked for CEL syntax correctness on creation. For
   * more information, see the [CEL spec](https://github.com/google/cel-spec)
   * and its [language
   * definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md).
   * A condition has a max length of 500 characters.
   *
   * @generated from field: string condition = 5;
   */
  condition: string;

  /**
   * Optional. The actions that the caller should take regarding user access.
   * There should be at most one terminal action. A terminal action is any
   * action that forces a response, such as `AllowAction`,
   * `BlockAction` or `SubstituteAction`.
   * Zero or more non-terminal actions such as `SetHeader` might be
   * specified. A single policy can contain up to 16 actions.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.FirewallAction actions = 6;
   */
  actions: FirewallAction[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.FirewallPolicy.
 * Use `create(FirewallPolicySchema)` to create a new message.
 */
export const FirewallPolicySchema: GenMessage<FirewallPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 50);

/**
 * The request message to list memberships in a related account group.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest
 */
export type ListRelatedAccountGroupMembershipsRequest = Message<"google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest"> & {
  /**
   * Required. The resource name for the related account group in the format
   * `projects/{project}/relatedaccountgroups/{relatedaccountgroup}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of accounts to return. The service might
   * return fewer than this value. If unspecified, at most 50 accounts are
   * returned. The maximum value is 1000; values above 1000 are coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous
   * `ListRelatedAccountGroupMemberships` call.
   *
   * When paginating, all other parameters provided to
   * `ListRelatedAccountGroupMemberships` must match the call that provided the
   * page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsRequest.
 * Use `create(ListRelatedAccountGroupMembershipsRequestSchema)` to create a new message.
 */
export const ListRelatedAccountGroupMembershipsRequestSchema: GenMessage<ListRelatedAccountGroupMembershipsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 51);

/**
 * The response to a `ListRelatedAccountGroupMemberships` call.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse
 */
export type ListRelatedAccountGroupMembershipsResponse = Message<"google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse"> & {
  /**
   * The memberships listed by the query.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership related_account_group_memberships = 1;
   */
  relatedAccountGroupMemberships: RelatedAccountGroupMembership[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupMembershipsResponse.
 * Use `create(ListRelatedAccountGroupMembershipsResponseSchema)` to create a new message.
 */
export const ListRelatedAccountGroupMembershipsResponseSchema: GenMessage<ListRelatedAccountGroupMembershipsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 52);

/**
 * The request message to list related account groups.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest
 */
export type ListRelatedAccountGroupsRequest = Message<"google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest"> & {
  /**
   * Required. The name of the project to list related account groups from, in
   * the format `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of groups to return. The service might return
   * fewer than this value. If unspecified, at most 50 groups are returned. The
   * maximum value is 1000; values above 1000 are coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListRelatedAccountGroups`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to
   * `ListRelatedAccountGroups` must match the call that provided the page
   * token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsRequest.
 * Use `create(ListRelatedAccountGroupsRequestSchema)` to create a new message.
 */
export const ListRelatedAccountGroupsRequestSchema: GenMessage<ListRelatedAccountGroupsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 53);

/**
 * The response to a `ListRelatedAccountGroups` call.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse
 */
export type ListRelatedAccountGroupsResponse = Message<"google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse"> & {
  /**
   * The groups of related accounts listed by the query.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.RelatedAccountGroup related_account_groups = 1;
   */
  relatedAccountGroups: RelatedAccountGroup[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.ListRelatedAccountGroupsResponse.
 * Use `create(ListRelatedAccountGroupsResponseSchema)` to create a new message.
 */
export const ListRelatedAccountGroupsResponseSchema: GenMessage<ListRelatedAccountGroupsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 54);

/**
 * The request message to search related account group memberships.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest
 */
export type SearchRelatedAccountGroupMembershipsRequest = Message<"google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest"> & {
  /**
   * Required. The name of the project to search related account group
   * memberships from. Specify the project name in the following format:
   * `projects/{project}`.
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * Optional. The unique stable account identifier used to search connections.
   * The identifier should correspond to an `account_id` provided in a previous
   * `CreateAssessment` or `AnnotateAssessment` call. Either hashed_account_id
   * or account_id must be set, but not both.
   *
   * @generated from field: string account_id = 5;
   */
  accountId: string;

  /**
   * Optional. Deprecated: use `account_id` instead.
   * The unique stable hashed account identifier used to search connections. The
   * identifier should correspond to a `hashed_account_id` provided in a
   * previous `CreateAssessment` or `AnnotateAssessment` call. Either
   * hashed_account_id or account_id must be set, but not both.
   *
   * @generated from field: bytes hashed_account_id = 2 [deprecated = true];
   * @deprecated
   */
  hashedAccountId: Uint8Array;

  /**
   * Optional. The maximum number of groups to return. The service might return
   * fewer than this value. If unspecified, at most 50 groups are returned. The
   * maximum value is 1000; values above 1000 are coerced to 1000.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous
   * `SearchRelatedAccountGroupMemberships` call. Provide this to retrieve the
   * subsequent page.
   *
   * When paginating, all other parameters provided to
   * `SearchRelatedAccountGroupMemberships` must match the call that provided
   * the page token.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsRequest.
 * Use `create(SearchRelatedAccountGroupMembershipsRequestSchema)` to create a new message.
 */
export const SearchRelatedAccountGroupMembershipsRequestSchema: GenMessage<SearchRelatedAccountGroupMembershipsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 55);

/**
 * The response to a `SearchRelatedAccountGroupMemberships` call.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse
 */
export type SearchRelatedAccountGroupMembershipsResponse = Message<"google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse"> & {
  /**
   * The queried memberships.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership related_account_group_memberships = 1;
   */
  relatedAccountGroupMemberships: RelatedAccountGroupMembership[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.SearchRelatedAccountGroupMembershipsResponse.
 * Use `create(SearchRelatedAccountGroupMembershipsResponseSchema)` to create a new message.
 */
export const SearchRelatedAccountGroupMembershipsResponseSchema: GenMessage<SearchRelatedAccountGroupMembershipsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 56);

/**
 * The AddIpOverride request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AddIpOverrideRequest
 */
export type AddIpOverrideRequest = Message<"google.cloud.recaptchaenterprise.v1.AddIpOverrideRequest"> & {
  /**
   * Required. The name of the key to which the IP override is added, in the
   * format `projects/{project}/keys/{key}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. IP override added to the key.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.IpOverrideData ip_override_data = 2;
   */
  ipOverrideData?: IpOverrideData;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AddIpOverrideRequest.
 * Use `create(AddIpOverrideRequestSchema)` to create a new message.
 */
export const AddIpOverrideRequestSchema: GenMessage<AddIpOverrideRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 57);

/**
 * Response for AddIpOverride.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AddIpOverrideResponse
 */
export type AddIpOverrideResponse = Message<"google.cloud.recaptchaenterprise.v1.AddIpOverrideResponse"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AddIpOverrideResponse.
 * Use `create(AddIpOverrideResponseSchema)` to create a new message.
 */
export const AddIpOverrideResponseSchema: GenMessage<AddIpOverrideResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 58);

/**
 * A membership in a group of related accounts.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership
 */
export type RelatedAccountGroupMembership = Message<"google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership"> & {
  /**
   * Required. Identifier. The resource name for this membership in the format
   * `projects/{project}/relatedaccountgroups/{relatedaccountgroup}/memberships/{membership}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The unique stable account identifier of the member. The identifier
   * corresponds to an `account_id` provided in a previous `CreateAssessment` or
   * `AnnotateAssessment` call.
   *
   * @generated from field: string account_id = 4;
   */
  accountId: string;

  /**
   * Deprecated: use `account_id` instead.
   * The unique stable hashed account identifier of the member. The identifier
   * corresponds to a `hashed_account_id` provided in a previous
   * `CreateAssessment` or `AnnotateAssessment` call.
   *
   * @generated from field: bytes hashed_account_id = 2 [deprecated = true];
   * @deprecated
   */
  hashedAccountId: Uint8Array;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.RelatedAccountGroupMembership.
 * Use `create(RelatedAccountGroupMembershipSchema)` to create a new message.
 */
export const RelatedAccountGroupMembershipSchema: GenMessage<RelatedAccountGroupMembership> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 59);

/**
 * A group of related accounts.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.RelatedAccountGroup
 */
export type RelatedAccountGroup = Message<"google.cloud.recaptchaenterprise.v1.RelatedAccountGroup"> & {
  /**
   * Required. Identifier. The resource name for the related account group in
   * the format
   * `projects/{project}/relatedaccountgroups/{related_account_group}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.RelatedAccountGroup.
 * Use `create(RelatedAccountGroupSchema)` to create a new message.
 */
export const RelatedAccountGroupSchema: GenMessage<RelatedAccountGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 60);

/**
 * Settings specific to keys that can be used for WAF (Web Application
 * Firewall).
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.WafSettings
 */
export type WafSettings = Message<"google.cloud.recaptchaenterprise.v1.WafSettings"> & {
  /**
   * Required. The WAF service that uses this key.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.WafSettings.WafService waf_service = 1;
   */
  wafService: WafSettings_WafService;

  /**
   * Required. The WAF feature for which this key is enabled.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature waf_feature = 2;
   */
  wafFeature: WafSettings_WafFeature;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.WafSettings.
 * Use `create(WafSettingsSchema)` to create a new message.
 */
export const WafSettingsSchema: GenMessage<WafSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 61);

/**
 * Supported WAF features. For more information, see
 * https://cloud.google.com/recaptcha/docs/usecase#comparison_of_features.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature
 */
export enum WafSettings_WafFeature {
  /**
   * Undefined feature.
   *
   * @generated from enum value: WAF_FEATURE_UNSPECIFIED = 0;
   */
  WAF_FEATURE_UNSPECIFIED = 0,

  /**
   * Redirects suspicious traffic to reCAPTCHA.
   *
   * @generated from enum value: CHALLENGE_PAGE = 1;
   */
  CHALLENGE_PAGE = 1,

  /**
   * Use reCAPTCHA session-tokens to protect the whole user session on the
   * site's domain.
   *
   * @generated from enum value: SESSION_TOKEN = 2;
   */
  SESSION_TOKEN = 2,

  /**
   * Use reCAPTCHA action-tokens to protect user actions.
   *
   * @generated from enum value: ACTION_TOKEN = 3;
   */
  ACTION_TOKEN = 3,

  /**
   * Use reCAPTCHA WAF express protection to protect any content other than
   * web pages, like APIs and IoT devices.
   *
   * @generated from enum value: EXPRESS = 5;
   */
  EXPRESS = 5,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.WafSettings.WafFeature.
 */
export const WafSettings_WafFeatureSchema: GenEnum<WafSettings_WafFeature> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 61, 0);

/**
 * Web Application Firewalls supported by reCAPTCHA Enterprise.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.WafSettings.WafService
 */
export enum WafSettings_WafService {
  /**
   * Undefined WAF
   *
   * @generated from enum value: WAF_SERVICE_UNSPECIFIED = 0;
   */
  WAF_SERVICE_UNSPECIFIED = 0,

  /**
   * Cloud Armor
   *
   * @generated from enum value: CA = 1;
   */
  CA = 1,

  /**
   * Fastly
   *
   * @generated from enum value: FASTLY = 3;
   */
  FASTLY = 3,

  /**
   * Cloudflare
   *
   * @generated from enum value: CLOUDFLARE = 4;
   */
  CLOUDFLARE = 4,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.WafSettings.WafService.
 */
export const WafSettings_WafServiceSchema: GenEnum<WafSettings_WafService> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 61, 1);

/**
 * The environment creating the assessment. This describes your environment
 * (the system invoking CreateAssessment), NOT the environment of your user.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.AssessmentEnvironment
 */
export type AssessmentEnvironment = Message<"google.cloud.recaptchaenterprise.v1.AssessmentEnvironment"> & {
  /**
   * Optional. Identifies the client module initiating the CreateAssessment
   * request. This can be the link to the client module's project. Examples
   * include:
   * - "github.com/GoogleCloudPlatform/recaptcha-enterprise-google-tag-manager"
   * - "cloud.google.com/recaptcha/docs/implement-waf-akamai"
   * - "cloud.google.com/recaptcha/docs/implement-waf-cloudflare"
   * - "wordpress.org/plugins/recaptcha-something"
   *
   * @generated from field: string client = 1;
   */
  client: string;

  /**
   * Optional. The version of the client module. For example, "1.0.0".
   *
   * @generated from field: string version = 2;
   */
  version: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.AssessmentEnvironment.
 * Use `create(AssessmentEnvironmentSchema)` to create a new message.
 */
export const AssessmentEnvironmentSchema: GenMessage<AssessmentEnvironment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 62);

/**
 * Information about the IP or IP range override.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1.IpOverrideData
 */
export type IpOverrideData = Message<"google.cloud.recaptchaenterprise.v1.IpOverrideData"> & {
  /**
   * Required. The IP address to override (can be IPv4, IPv6 or CIDR).
   * The IP override must be a valid IPv4 or IPv6 address, or a CIDR range.
   * The IP override must be a public IP address.
   * Example of IPv4: 168.192.5.6
   * Example of IPv6: 2001:0000:130F:0000:0000:09C0:876A:130B
   * Example of IPv4 with CIDR: 168.192.5.0/24
   * Example of IPv6 with CIDR: 2001:0DB8:1234::/48
   *
   * @generated from field: string ip = 1;
   */
  ip: string;

  /**
   * Required. Describes the type of IP override.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1.IpOverrideData.OverrideType override_type = 3;
   */
  overrideType: IpOverrideData_OverrideType;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1.IpOverrideData.
 * Use `create(IpOverrideDataSchema)` to create a new message.
 */
export const IpOverrideDataSchema: GenMessage<IpOverrideData> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 63);

/**
 * Enum that represents the type of IP override.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1.IpOverrideData.OverrideType
 */
export enum IpOverrideData_OverrideType {
  /**
   * Default override type that indicates this enum hasn't been specified.
   *
   * @generated from enum value: OVERRIDE_TYPE_UNSPECIFIED = 0;
   */
  OVERRIDE_TYPE_UNSPECIFIED = 0,

  /**
   * Allowlist the IP address; i.e. give a `risk_analysis.score` of 0.9 for
   * all valid assessments.
   *
   * @generated from enum value: ALLOW = 1;
   */
  ALLOW = 1,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1.IpOverrideData.OverrideType.
 */
export const IpOverrideData_OverrideTypeSchema: GenEnum<IpOverrideData_OverrideType> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 63, 0);

/**
 * Service to determine the likelihood an event is legitimate.
 *
 * @generated from service google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService
 */
export const RecaptchaEnterpriseService: GenService<{
  /**
   * Creates an Assessment of the likelihood an event is legitimate.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.CreateAssessment
   */
  createAssessment: {
    methodKind: "unary";
    input: typeof CreateAssessmentRequestSchema;
    output: typeof AssessmentSchema;
  },
  /**
   * Annotates a previously created Assessment to provide additional information
   * on whether the event turned out to be authentic or fraudulent.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.AnnotateAssessment
   */
  annotateAssessment: {
    methodKind: "unary";
    input: typeof AnnotateAssessmentRequestSchema;
    output: typeof AnnotateAssessmentResponseSchema;
  },
  /**
   * Creates a new reCAPTCHA Enterprise key.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.CreateKey
   */
  createKey: {
    methodKind: "unary";
    input: typeof CreateKeyRequestSchema;
    output: typeof KeySchema;
  },
  /**
   * Returns the list of all keys that belong to a project.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListKeys
   */
  listKeys: {
    methodKind: "unary";
    input: typeof ListKeysRequestSchema;
    output: typeof ListKeysResponseSchema;
  },
  /**
   * Returns the secret key related to the specified public key.
   * You must use the legacy secret key only in a 3rd party integration with
   * legacy reCAPTCHA.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.RetrieveLegacySecretKey
   */
  retrieveLegacySecretKey: {
    methodKind: "unary";
    input: typeof RetrieveLegacySecretKeyRequestSchema;
    output: typeof RetrieveLegacySecretKeyResponseSchema;
  },
  /**
   * Returns the specified key.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.GetKey
   */
  getKey: {
    methodKind: "unary";
    input: typeof GetKeyRequestSchema;
    output: typeof KeySchema;
  },
  /**
   * Updates the specified key.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.UpdateKey
   */
  updateKey: {
    methodKind: "unary";
    input: typeof UpdateKeyRequestSchema;
    output: typeof KeySchema;
  },
  /**
   * Deletes the specified key.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.DeleteKey
   */
  deleteKey: {
    methodKind: "unary";
    input: typeof DeleteKeyRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise.
   * Once a key is migrated, it can be used from either product. SiteVerify
   * requests are billed as CreateAssessment calls. You must be
   * authenticated as one of the current owners of the reCAPTCHA Key, and
   * your user must have the reCAPTCHA Enterprise Admin IAM role in the
   * destination project.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.MigrateKey
   */
  migrateKey: {
    methodKind: "unary";
    input: typeof MigrateKeyRequestSchema;
    output: typeof KeySchema;
  },
  /**
   * Adds an IP override to a key. The following restrictions hold:
   * * The maximum number of IP overrides per key is 100.
   * * For any conflict (such as IP already exists or IP part of an existing
   *   IP range), an error is returned.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.AddIpOverride
   */
  addIpOverride: {
    methodKind: "unary";
    input: typeof AddIpOverrideRequestSchema;
    output: typeof AddIpOverrideResponseSchema;
  },
  /**
   * Get some aggregated metrics for a Key. This data can be used to build
   * dashboards.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.GetMetrics
   */
  getMetrics: {
    methodKind: "unary";
    input: typeof GetMetricsRequestSchema;
    output: typeof MetricsSchema;
  },
  /**
   * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA
   * Enterprise actions can be executed.
   * A project may have a maximum of 1000 policies.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.CreateFirewallPolicy
   */
  createFirewallPolicy: {
    methodKind: "unary";
    input: typeof CreateFirewallPolicyRequestSchema;
    output: typeof FirewallPolicySchema;
  },
  /**
   * Returns the list of all firewall policies that belong to a project.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListFirewallPolicies
   */
  listFirewallPolicies: {
    methodKind: "unary";
    input: typeof ListFirewallPoliciesRequestSchema;
    output: typeof ListFirewallPoliciesResponseSchema;
  },
  /**
   * Returns the specified firewall policy.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.GetFirewallPolicy
   */
  getFirewallPolicy: {
    methodKind: "unary";
    input: typeof GetFirewallPolicyRequestSchema;
    output: typeof FirewallPolicySchema;
  },
  /**
   * Updates the specified firewall policy.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.UpdateFirewallPolicy
   */
  updateFirewallPolicy: {
    methodKind: "unary";
    input: typeof UpdateFirewallPolicyRequestSchema;
    output: typeof FirewallPolicySchema;
  },
  /**
   * Deletes the specified firewall policy.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.DeleteFirewallPolicy
   */
  deleteFirewallPolicy: {
    methodKind: "unary";
    input: typeof DeleteFirewallPolicyRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Reorders all firewall policies.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ReorderFirewallPolicies
   */
  reorderFirewallPolicies: {
    methodKind: "unary";
    input: typeof ReorderFirewallPoliciesRequestSchema;
    output: typeof ReorderFirewallPoliciesResponseSchema;
  },
  /**
   * List groups of related accounts.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListRelatedAccountGroups
   */
  listRelatedAccountGroups: {
    methodKind: "unary";
    input: typeof ListRelatedAccountGroupsRequestSchema;
    output: typeof ListRelatedAccountGroupsResponseSchema;
  },
  /**
   * Get memberships in a group of related accounts.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.ListRelatedAccountGroupMemberships
   */
  listRelatedAccountGroupMemberships: {
    methodKind: "unary";
    input: typeof ListRelatedAccountGroupMembershipsRequestSchema;
    output: typeof ListRelatedAccountGroupMembershipsResponseSchema;
  },
  /**
   * Search group memberships related to a given account.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1.RecaptchaEnterpriseService.SearchRelatedAccountGroupMemberships
   */
  searchRelatedAccountGroupMemberships: {
    methodKind: "unary";
    input: typeof SearchRelatedAccountGroupMembershipsRequestSchema;
    output: typeof SearchRelatedAccountGroupMembershipsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_recaptchaenterprise_v1_recaptchaenterprise, 0);

