// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/recaptchaenterprise/v1beta1/recaptchaenterprise.proto (package google.cloud.recaptchaenterprise.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/recaptchaenterprise/v1beta1/recaptchaenterprise.proto.
 */
export const file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp]);

/**
 * The create assessment request message.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest
 */
export type CreateAssessmentRequest = Message<"google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest"> & {
  /**
   * Required. The name of the project in which the assessment will be created,
   * in the format `projects/{project_number}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The assessment details.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.Assessment assessment = 2;
   */
  assessment?: Assessment;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.CreateAssessmentRequest.
 * Use `create(CreateAssessmentRequestSchema)` to create a new message.
 */
export const CreateAssessmentRequestSchema: GenMessage<CreateAssessmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 0);

/**
 * Describes an event in the lifecycle of a payment transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionEvent
 */
export type TransactionEvent = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionEvent"> & {
  /**
   * Optional. The type of this transaction event.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType event_type = 1;
   */
  eventType: TransactionEvent_TransactionEventType;

  /**
   * Optional. The reason or standardized code that corresponds with this
   * transaction event, if one exists. For example, a CHARGEBACK event with code
   * 6005.
   *
   * @generated from field: string reason = 2;
   */
  reason: string;

  /**
   * Optional. The value that corresponds with this transaction event, if one
   * exists. For example, a refund event where $5.00 was refunded. Currency is
   * obtained from the original transaction data.
   *
   * @generated from field: double value = 3;
   */
  value: number;

  /**
   * Optional. Timestamp when this transaction event occurred; otherwise assumed
   * to be the time of the API call.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 4;
   */
  eventTime?: Timestamp;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.
 * Use `create(TransactionEventSchema)` to create a new message.
 */
export const TransactionEventSchema: GenMessage<TransactionEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 1);

/**
 * Enum that represents an event in the payment transaction lifecycle.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType
 */
export enum TransactionEvent_TransactionEventType {
  /**
   * Default, unspecified event type.
   *
   * @generated from enum value: TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0;
   */
  TRANSACTION_EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * Indicates that the transaction is approved by the merchant. The
   * accompanying reasons can include terms such as 'INHOUSE', 'ACCERTIFY',
   * 'CYBERSOURCE', or 'MANUAL_REVIEW'.
   *
   * @generated from enum value: MERCHANT_APPROVE = 1;
   */
  MERCHANT_APPROVE = 1,

  /**
   * Indicates that the transaction is denied and concluded due to risks
   * detected by the merchant. The accompanying reasons can include terms such
   * as 'INHOUSE',  'ACCERTIFY',  'CYBERSOURCE', or 'MANUAL_REVIEW'.
   *
   * @generated from enum value: MERCHANT_DENY = 2;
   */
  MERCHANT_DENY = 2,

  /**
   * Indicates that the transaction is being evaluated by a human, due to
   * suspicion or risk.
   *
   * @generated from enum value: MANUAL_REVIEW = 3;
   */
  MANUAL_REVIEW = 3,

  /**
   * Indicates that the authorization attempt with the card issuer succeeded.
   *
   * @generated from enum value: AUTHORIZATION = 4;
   */
  AUTHORIZATION = 4,

  /**
   * Indicates that the authorization attempt with the card issuer failed.
   * The accompanying reasons can include Visa's '54' indicating that the card
   * is expired, or '82' indicating that the CVV is incorrect.
   *
   * @generated from enum value: AUTHORIZATION_DECLINE = 5;
   */
  AUTHORIZATION_DECLINE = 5,

  /**
   * Indicates that the transaction is completed because the funds were
   * settled.
   *
   * @generated from enum value: PAYMENT_CAPTURE = 6;
   */
  PAYMENT_CAPTURE = 6,

  /**
   * Indicates that the transaction could not be completed because the funds
   * were not settled.
   *
   * @generated from enum value: PAYMENT_CAPTURE_DECLINE = 7;
   */
  PAYMENT_CAPTURE_DECLINE = 7,

  /**
   * Indicates that the transaction has been canceled. Specify the reason
   * for the cancellation. For example, 'INSUFFICIENT_INVENTORY'.
   *
   * @generated from enum value: CANCEL = 8;
   */
  CANCEL = 8,

  /**
   * Indicates that the merchant has received a chargeback inquiry due to
   * fraud for the transaction, requesting additional information before a
   * fraud chargeback is officially issued and a formal chargeback
   * notification is sent.
   *
   * @generated from enum value: CHARGEBACK_INQUIRY = 9;
   */
  CHARGEBACK_INQUIRY = 9,

  /**
   * Indicates that the merchant has received a chargeback alert due to fraud
   * for the transaction. The process of resolving the dispute without
   * involving the payment network is started.
   *
   * @generated from enum value: CHARGEBACK_ALERT = 10;
   */
  CHARGEBACK_ALERT = 10,

  /**
   * Indicates that a fraud notification is issued for the transaction, sent
   * by the payment instrument's issuing bank because the transaction appears
   * to be fraudulent. We recommend including TC40 or SAFE data in the
   * `reason` field for this event type. For partial chargebacks, we recommend
   * that you include an amount in the `value` field.
   *
   * @generated from enum value: FRAUD_NOTIFICATION = 11;
   */
  FRAUD_NOTIFICATION = 11,

  /**
   * Indicates that the merchant is informed by the payment network that the
   * transaction has entered the chargeback process due to fraud. Reason code
   * examples include Discover's '6005' and '6041'. For partial chargebacks,
   * we recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK = 12;
   */
  CHARGEBACK = 12,

  /**
   * Indicates that the transaction has entered the chargeback process due to
   * fraud, and that the merchant has chosen to enter representment. Reason
   * examples include Discover's '6005' and '6041'. For partial chargebacks,
   * we recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK_REPRESENTMENT = 13;
   */
  CHARGEBACK_REPRESENTMENT = 13,

  /**
   * Indicates that the transaction has had a fraud chargeback which was
   * illegitimate and was reversed as a result. For partial chargebacks, we
   * recommend that you include an amount in the `value` field.
   *
   * @generated from enum value: CHARGEBACK_REVERSE = 14;
   */
  CHARGEBACK_REVERSE = 14,

  /**
   * Indicates that the merchant has received a refund for a completed
   * transaction. For partial refunds, we recommend that you include an amount
   * in the `value` field. Reason example: 'TAX_EXEMPT' (partial refund of
   * exempt tax)
   *
   * @generated from enum value: REFUND_REQUEST = 15;
   */
  REFUND_REQUEST = 15,

  /**
   * Indicates that the merchant has received a refund request for this
   * transaction, but that they have declined it. For partial refunds, we
   * recommend that you include an amount in the `value` field. Reason
   * example: 'TAX_EXEMPT' (partial refund of exempt tax)
   *
   * @generated from enum value: REFUND_DECLINE = 16;
   */
  REFUND_DECLINE = 16,

  /**
   * Indicates that the completed transaction was refunded by the merchant.
   * For partial refunds, we recommend that you include an amount in the
   * `value` field. Reason example: 'TAX_EXEMPT' (partial refund of exempt
   * tax)
   *
   * @generated from enum value: REFUND = 17;
   */
  REFUND = 17,

  /**
   * Indicates that the completed transaction was refunded by the merchant,
   * and that this refund was reversed. For partial refunds, we recommend that
   * you include an amount in the `value` field.
   *
   * @generated from enum value: REFUND_REVERSE = 18;
   */
  REFUND_REVERSE = 18,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.TransactionEvent.TransactionEventType.
 */
export const TransactionEvent_TransactionEventTypeSchema: GenEnum<TransactionEvent_TransactionEventType> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 1, 0);

/**
 * The request message to annotate an Assessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest
 */
export type AnnotateAssessmentRequest = Message<"google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest"> & {
  /**
   * Required. The resource name of the Assessment, in the format
   * `projects/{project_number}/assessments/{assessment_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The annotation that will be assigned to the Event. This field can
   * be left empty to provide reasons that apply to an event without concluding
   * whether the event is legitimate or fraudulent.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation annotation = 2;
   */
  annotation: AnnotateAssessmentRequest_Annotation;

  /**
   * Optional. Reasons for the annotation that are assigned to the event.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason reasons = 3;
   */
  reasons: AnnotateAssessmentRequest_Reason[];

  /**
   * Optional. Unique stable hashed user identifier to apply to the assessment.
   * This is an alternative to setting the `hashed_account_id` in
   * `CreateAssessment`, for example, when the account identifier is not yet
   * known in the initial request. It is recommended that the identifier is
   * hashed using hmac-sha256 with stable secret.
   *
   * @generated from field: bytes hashed_account_id = 4;
   */
  hashedAccountId: Uint8Array;

  /**
   * Optional. If the assessment is part of a payment transaction, provide
   * details on payment lifecycle events that occur in the transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionEvent transaction_event = 5;
   */
  transactionEvent?: TransactionEvent;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.
 * Use `create(AnnotateAssessmentRequestSchema)` to create a new message.
 */
export const AnnotateAssessmentRequestSchema: GenMessage<AnnotateAssessmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 2);

/**
 * Enum that represents the types of annotations.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation
 */
export enum AnnotateAssessmentRequest_Annotation {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: ANNOTATION_UNSPECIFIED = 0;
   */
  ANNOTATION_UNSPECIFIED = 0,

  /**
   * Provides information that the event turned out to be legitimate.
   *
   * @generated from enum value: LEGITIMATE = 1;
   */
  LEGITIMATE = 1,

  /**
   * Provides information that the event turned out to be fraudulent.
   *
   * @generated from enum value: FRAUDULENT = 2;
   */
  FRAUDULENT = 2,

  /**
   * Provides information that the event was related to a login event in which
   * the user typed the correct password. Deprecated, prefer indicating
   * CORRECT_PASSWORD through the reasons field instead.
   *
   * @generated from enum value: PASSWORD_CORRECT = 3 [deprecated = true];
   * @deprecated
   */
  PASSWORD_CORRECT = 3,

  /**
   * Provides information that the event was related to a login event in which
   * the user typed the incorrect password. Deprecated, prefer indicating
   * INCORRECT_PASSWORD through the reasons field instead.
   *
   * @generated from enum value: PASSWORD_INCORRECT = 4 [deprecated = true];
   * @deprecated
   */
  PASSWORD_INCORRECT = 4,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Annotation.
 */
export const AnnotateAssessmentRequest_AnnotationSchema: GenEnum<AnnotateAssessmentRequest_Annotation> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 2, 0);

/**
 * Enum that represents potential reasons for annotating an assessment.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason
 */
export enum AnnotateAssessmentRequest_Reason {
  /**
   * Default unspecified reason.
   *
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * Indicates that the transaction had a chargeback issued with no other
   * details. When possible, specify the type by using CHARGEBACK_FRAUD or
   * CHARGEBACK_DISPUTE instead.
   *
   * @generated from enum value: CHARGEBACK = 1;
   */
  CHARGEBACK = 1,

  /**
   * Indicates that the transaction had a chargeback issued related to an
   * alleged unauthorized transaction from the cardholder's perspective (for
   * example, the card number was stolen).
   *
   * @generated from enum value: CHARGEBACK_FRAUD = 8;
   */
  CHARGEBACK_FRAUD = 8,

  /**
   * Indicates that the transaction had a chargeback issued related to the
   * cardholder having provided their card details but allegedly not being
   * satisfied with the purchase (for example, misrepresentation, attempted
   * cancellation).
   *
   * @generated from enum value: CHARGEBACK_DISPUTE = 9;
   */
  CHARGEBACK_DISPUTE = 9,

  /**
   * Indicates that the completed payment transaction was refunded by the
   * seller.
   *
   * @generated from enum value: REFUND = 10;
   */
  REFUND = 10,

  /**
   * Indicates that the completed payment transaction was determined to be
   * fraudulent by the seller, and was cancelled and refunded as a result.
   *
   * @generated from enum value: REFUND_FRAUD = 11;
   */
  REFUND_FRAUD = 11,

  /**
   * Indicates that the payment transaction was accepted, and the user was
   * charged.
   *
   * @generated from enum value: TRANSACTION_ACCEPTED = 12;
   */
  TRANSACTION_ACCEPTED = 12,

  /**
   * Indicates that the payment transaction was declined, for example due to
   * invalid card details.
   *
   * @generated from enum value: TRANSACTION_DECLINED = 13;
   */
  TRANSACTION_DECLINED = 13,

  /**
   * Indicates the transaction associated with the assessment is suspected of
   * being fraudulent based on the payment method, billing details, shipping
   * address or other transaction information.
   *
   * @generated from enum value: PAYMENT_HEURISTICS = 2;
   */
  PAYMENT_HEURISTICS = 2,

  /**
   * Indicates that the user was served a 2FA challenge. An old assessment
   * with `ENUM_VALUES.INITIATED_TWO_FACTOR` reason that has not been
   * overwritten with `PASSED_TWO_FACTOR` is treated as an abandoned 2FA flow.
   * This is equivalent to `FAILED_TWO_FACTOR`.
   *
   * @generated from enum value: INITIATED_TWO_FACTOR = 7;
   */
  INITIATED_TWO_FACTOR = 7,

  /**
   * Indicates that the user passed a 2FA challenge.
   *
   * @generated from enum value: PASSED_TWO_FACTOR = 3;
   */
  PASSED_TWO_FACTOR = 3,

  /**
   * Indicates that the user failed a 2FA challenge.
   *
   * @generated from enum value: FAILED_TWO_FACTOR = 4;
   */
  FAILED_TWO_FACTOR = 4,

  /**
   * Indicates the user provided the correct password.
   *
   * @generated from enum value: CORRECT_PASSWORD = 5;
   */
  CORRECT_PASSWORD = 5,

  /**
   * Indicates the user provided an incorrect password.
   *
   * @generated from enum value: INCORRECT_PASSWORD = 6;
   */
  INCORRECT_PASSWORD = 6,

  /**
   * Indicates that the user sent unwanted and abusive messages to other users
   * of the platform, such as spam, scams, phishing, or social engineering.
   *
   * @generated from enum value: SOCIAL_SPAM = 14;
   */
  SOCIAL_SPAM = 14,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentRequest.Reason.
 */
export const AnnotateAssessmentRequest_ReasonSchema: GenEnum<AnnotateAssessmentRequest_Reason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 2, 1);

/**
 * Empty response for AnnotateAssessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse
 */
export type AnnotateAssessmentResponse = Message<"google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse"> & {
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.AnnotateAssessmentResponse.
 * Use `create(AnnotateAssessmentResponseSchema)` to create a new message.
 */
export const AnnotateAssessmentResponseSchema: GenMessage<AnnotateAssessmentResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 3);

/**
 * Password leak verification info.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification
 */
export type PasswordLeakVerification = Message<"google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification"> & {
  /**
   * Optional. Scrypt hash of the username+password that the customer wants to
   * verify against a known password leak.
   *
   * @generated from field: bytes hashed_user_credentials = 1;
   */
  hashedUserCredentials: Uint8Array;

  /**
   * Output only. Whether or not the user's credentials are present in a known
   * leak.
   *
   * @generated from field: bool credentials_leaked = 2;
   */
  credentialsLeaked: boolean;

  /**
   * Optional. The username part of the user credentials for which we want to
   * trigger a leak check in canonicalized form. This is the same data used to
   * create the hashed_user_credentials on the customer side.
   *
   * @generated from field: string canonicalized_username = 3;
   */
  canonicalizedUsername: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification.
 * Use `create(PasswordLeakVerificationSchema)` to create a new message.
 */
export const PasswordLeakVerificationSchema: GenMessage<PasswordLeakVerification> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 4);

/**
 * A reCAPTCHA Enterprise assessment resource.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.Assessment
 */
export type Assessment = Message<"google.cloud.recaptchaenterprise.v1beta1.Assessment"> & {
  /**
   * Output only. The resource name for the Assessment in the format
   * `projects/{project_number}/assessments/{assessment_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The event being assessed.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.Event event = 2;
   */
  event?: Event;

  /**
   * Output only. Legitimate event score from 0.0 to 1.0.
   * (1.0 means very likely legitimate traffic while 0.0 means very likely
   * non-legitimate traffic).
   *
   * @generated from field: float score = 3;
   */
  score: number;

  /**
   * Output only. Properties of the provided event token.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TokenProperties token_properties = 4;
   */
  tokenProperties?: TokenProperties;

  /**
   * Output only. Reasons contributing to the risk analysis verdict.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason reasons = 5;
   */
  reasons: Assessment_ClassificationReason[];

  /**
   * Information about the user's credentials used to check for leaks.
   * This feature is part of the Early Access Program (EAP). Exercise caution,
   * and do not deploy integrations based on this feature in a production
   * environment.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.PasswordLeakVerification password_leak_verification = 7;
   */
  passwordLeakVerification?: PasswordLeakVerification;

  /**
   * Assessment returned by account defender when a hashed_account_id is
   * provided.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment account_defender_assessment = 8;
   */
  accountDefenderAssessment?: AccountDefenderAssessment;

  /**
   * Assessment returned by Fraud Prevention when TransactionData is provided.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment fraud_prevention_assessment = 11;
   */
  fraudPreventionAssessment?: FraudPreventionAssessment;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.Assessment.
 * Use `create(AssessmentSchema)` to create a new message.
 */
export const AssessmentSchema: GenMessage<Assessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 5);

/**
 * Reasons contributing to the risk analysis verdict.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason
 */
export enum Assessment_ClassificationReason {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: CLASSIFICATION_REASON_UNSPECIFIED = 0;
   */
  CLASSIFICATION_REASON_UNSPECIFIED = 0,

  /**
   * Interactions matched the behavior of an automated agent.
   *
   * @generated from enum value: AUTOMATION = 1;
   */
  AUTOMATION = 1,

  /**
   * The event originated from an illegitimate environment.
   *
   * @generated from enum value: UNEXPECTED_ENVIRONMENT = 2;
   */
  UNEXPECTED_ENVIRONMENT = 2,

  /**
   * Traffic volume from the event source is higher than normal.
   *
   * @generated from enum value: TOO_MUCH_TRAFFIC = 3;
   */
  TOO_MUCH_TRAFFIC = 3,

  /**
   * Interactions with the site were significantly different than expected
   * patterns.
   *
   * @generated from enum value: UNEXPECTED_USAGE_PATTERNS = 4;
   */
  UNEXPECTED_USAGE_PATTERNS = 4,

  /**
   * Too little traffic has been received from this site thus far to generate
   * quality risk analysis.
   *
   * @generated from enum value: LOW_CONFIDENCE_SCORE = 5;
   */
  LOW_CONFIDENCE_SCORE = 5,

  /**
   * The request matches behavioral characteristics of a carding attack.
   *
   * @generated from enum value: SUSPECTED_CARDING = 6;
   */
  SUSPECTED_CARDING = 6,

  /**
   * The request matches behavioral characteristics of chargebacks for fraud.
   *
   * @generated from enum value: SUSPECTED_CHARGEBACK = 7;
   */
  SUSPECTED_CHARGEBACK = 7,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.Assessment.ClassificationReason.
 */
export const Assessment_ClassificationReasonSchema: GenEnum<Assessment_ClassificationReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 5, 0);

/**
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.Event
 */
export type Event = Message<"google.cloud.recaptchaenterprise.v1beta1.Event"> & {
  /**
   * Optional. The user response token provided by the reCAPTCHA Enterprise
   * client-side integration on your site.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Optional. The site key that was used to invoke reCAPTCHA Enterprise on your
   * site and generate the token.
   *
   * @generated from field: string site_key = 2;
   */
  siteKey: string;

  /**
   * Optional. The user agent present in the request from the user's device
   * related to this event.
   *
   * @generated from field: string user_agent = 3;
   */
  userAgent: string;

  /**
   * Optional. The IP address in the request from the user's device related to
   * this event.
   *
   * @generated from field: string user_ip_address = 4;
   */
  userIpAddress: string;

  /**
   * Optional. The expected action for this type of event. This should be the
   * same action provided at token generation time on client-side platforms
   * already integrated with recaptcha enterprise.
   *
   * @generated from field: string expected_action = 5;
   */
  expectedAction: string;

  /**
   * Optional. Unique stable hashed user identifier for the request. The
   * identifier must be hashed using hmac-sha256 with stable secret.
   *
   * @generated from field: bytes hashed_account_id = 6;
   */
  hashedAccountId: Uint8Array;

  /**
   * Optional. Data describing a payment transaction to be assessed. Sending
   * this data enables reCAPTCHA Enterprise Fraud Prevention and the
   * FraudPreventionAssessment component in the response.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionData transaction_data = 13;
   */
  transactionData?: TransactionData;

  /**
   * Optional. The Fraud Prevention setting for this Assessment.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.Event.FraudPrevention fraud_prevention = 17;
   */
  fraudPrevention: Event_FraudPrevention;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 6);

/**
 * Setting that controls Fraud Prevention assessments.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.Event.FraudPrevention
 */
export enum Event_FraudPrevention {
  /**
   * Default, unspecified setting. If opted in for automatic detection,
   * `fraud_prevention_assessment` is returned based on the request.
   * Otherwise, `fraud_prevention_assessment` is returned if
   * `transaction_data` is present in the `Event` and Fraud Prevention is
   * enabled in the Google Cloud console.
   *
   * @generated from enum value: FRAUD_PREVENTION_UNSPECIFIED = 0;
   */
  FRAUD_PREVENTION_UNSPECIFIED = 0,

  /**
   * Enable Fraud Prevention for this assessment, if Fraud Prevention is
   * enabled in the Google Cloud console.
   *
   * @generated from enum value: ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * Disable Fraud Prevention for this assessment, regardless of opt-in
   * status or the Google Cloud console settings.
   *
   * @generated from enum value: DISABLED = 2;
   */
  DISABLED = 2,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.Event.FraudPrevention.
 */
export const Event_FraudPreventionSchema: GenEnum<Event_FraudPrevention> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 6, 0);

/**
 * Transaction data associated with a payment protected by reCAPTCHA Enterprise.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionData
 */
export type TransactionData = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionData"> & {
  /**
   * Unique identifier for the transaction. This custom identifier can be used
   * to reference this transaction in the future, for example, labeling a refund
   * or chargeback event. Two attempts at the same transaction should use the
   * same transaction id.
   *
   * @generated from field: optional string transaction_id = 11;
   */
  transactionId?: string;

  /**
   * The payment method for the transaction. The allowed values are:
   *
   * * credit-card
   * * debit-card
   * * gift-card
   * * processor-{name} (If a third-party is used, for example,
   * processor-paypal)
   * * custom-{name} (If an alternative method is used, for example,
   * custom-crypto)
   *
   * @generated from field: string payment_method = 1;
   */
  paymentMethod: string;

  /**
   * The Bank Identification Number - generally the first 6 or 8 digits of the
   * card.
   *
   * @generated from field: string card_bin = 2;
   */
  cardBin: string;

  /**
   * The last four digits of the card.
   *
   * @generated from field: string card_last_four = 3;
   */
  cardLastFour: string;

  /**
   * The currency code in ISO-4217 format.
   *
   * @generated from field: string currency_code = 4;
   */
  currencyCode: string;

  /**
   * The decimal value of the transaction in the specified currency.
   *
   * @generated from field: double value = 5;
   */
  value: number;

  /**
   * The value of shipping in the specified currency. 0 for free or no shipping.
   *
   * @generated from field: double shipping_value = 12;
   */
  shippingValue: number;

  /**
   * Destination address if this transaction involves shipping a physical item.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address shipping_address = 6;
   */
  shippingAddress?: TransactionData_Address;

  /**
   * Address associated with the payment method when applicable.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address billing_address = 7;
   */
  billingAddress?: TransactionData_Address;

  /**
   * Information about the user paying/initiating the transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionData.User user = 8;
   */
  user?: TransactionData_User;

  /**
   * Information about the user or users fulfilling the transaction.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1beta1.TransactionData.User merchants = 13;
   */
  merchants: TransactionData_User[];

  /**
   * Items purchased in this transaction.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item items = 14;
   */
  items: TransactionData_Item[];

  /**
   * Information about the payment gateway's response to the transaction.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo gateway_info = 10;
   */
  gatewayInfo?: TransactionData_GatewayInfo;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionData.
 * Use `create(TransactionDataSchema)` to create a new message.
 */
export const TransactionDataSchema: GenMessage<TransactionData> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 7);

/**
 * Structured address format for billing and shipping addresses.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address
 */
export type TransactionData_Address = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address"> & {
  /**
   * The recipient name, potentially including information such as "care of".
   *
   * @generated from field: string recipient = 1;
   */
  recipient: string;

  /**
   * The first lines of the address. The first line generally contains the
   * street name and number, and further lines may include information such as
   * an apartment number.
   *
   * @generated from field: repeated string address = 2;
   */
  address: string[];

  /**
   * The town/city of the address.
   *
   * @generated from field: string locality = 3;
   */
  locality: string;

  /**
   * The state, province, or otherwise administrative area of the address.
   *
   * @generated from field: string administrative_area = 4;
   */
  administrativeArea: string;

  /**
   * The CLDR country/region of the address.
   *
   * @generated from field: string region_code = 5;
   */
  regionCode: string;

  /**
   * The postal or ZIP code of the address.
   *
   * @generated from field: string postal_code = 6;
   */
  postalCode: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionData.Address.
 * Use `create(TransactionData_AddressSchema)` to create a new message.
 */
export const TransactionData_AddressSchema: GenMessage<TransactionData_Address> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 7, 0);

/**
 * Details about a user's account involved in the transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionData.User
 */
export type TransactionData_User = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionData.User"> & {
  /**
   * Unique account identifier for this user. If using account defender,
   * this should match the hashed_account_id field. Otherwise, a unique and
   * persistent identifier for this account.
   *
   * @generated from field: string account_id = 6;
   */
  accountId: string;

  /**
   * The epoch milliseconds of the user's account creation.
   *
   * @generated from field: int64 creation_ms = 1;
   */
  creationMs: bigint;

  /**
   * The email address of the user.
   *
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * Whether the email has been verified to be accessible by the user (OTP or
   * similar).
   *
   * @generated from field: bool email_verified = 3;
   */
  emailVerified: boolean;

  /**
   * The phone number of the user, with country code.
   *
   * @generated from field: string phone_number = 4;
   */
  phoneNumber: string;

  /**
   * Whether the phone number has been verified to be accessible by the user
   * (OTP or similar).
   *
   * @generated from field: bool phone_verified = 5;
   */
  phoneVerified: boolean;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionData.User.
 * Use `create(TransactionData_UserSchema)` to create a new message.
 */
export const TransactionData_UserSchema: GenMessage<TransactionData_User> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 7, 1);

/**
 * Line items being purchased in this transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item
 */
export type TransactionData_Item = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item"> & {
  /**
   * The full name of the item.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The value per item that the user is paying, in the transaction currency,
   * after discounts.
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * The quantity of this item that is being purchased.
   *
   * @generated from field: int64 quantity = 3;
   */
  quantity: bigint;

  /**
   * When a merchant is specified, its corresponding account_id. Necessary to
   * populate marketplace-style transactions.
   *
   * @generated from field: string merchant_account_id = 4;
   */
  merchantAccountId: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionData.Item.
 * Use `create(TransactionData_ItemSchema)` to create a new message.
 */
export const TransactionData_ItemSchema: GenMessage<TransactionData_Item> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 7, 2);

/**
 * Details about the transaction from the gateway.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo
 */
export type TransactionData_GatewayInfo = Message<"google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo"> & {
  /**
   * Name of the gateway service (for example, stripe, square, paypal).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Gateway response code describing the state of the transaction.
   *
   * @generated from field: string gateway_response_code = 2;
   */
  gatewayResponseCode: string;

  /**
   * AVS response code from the gateway
   * (available only when reCAPTCHA Enterprise is called after authorization).
   *
   * @generated from field: string avs_response_code = 3;
   */
  avsResponseCode: string;

  /**
   * CVV response code from the gateway
   * (available only when reCAPTCHA Enterprise is called after authorization).
   *
   * @generated from field: string cvv_response_code = 4;
   */
  cvvResponseCode: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TransactionData.GatewayInfo.
 * Use `create(TransactionData_GatewayInfoSchema)` to create a new message.
 */
export const TransactionData_GatewayInfoSchema: GenMessage<TransactionData_GatewayInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 7, 3);

/**
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.TokenProperties
 */
export type TokenProperties = Message<"google.cloud.recaptchaenterprise.v1beta1.TokenProperties"> & {
  /**
   * Whether the provided user response token is valid. When valid = false, the
   * reason could be specified in invalid_reason or it could also be due to
   * a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey
   * used to generate the token was different than the one specified in the
   * assessment).
   *
   * @generated from field: bool valid = 1;
   */
  valid: boolean;

  /**
   * Reason associated with the response when valid = false.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason invalid_reason = 2;
   */
  invalidReason: TokenProperties_InvalidReason;

  /**
   * The timestamp corresponding to the generation of the token.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * The hostname of the page on which the token was generated.
   *
   * @generated from field: string hostname = 4;
   */
  hostname: string;

  /**
   * Action name provided at token generation.
   *
   * @generated from field: string action = 5;
   */
  action: string;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.TokenProperties.
 * Use `create(TokenPropertiesSchema)` to create a new message.
 */
export const TokenPropertiesSchema: GenMessage<TokenProperties> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 8);

/**
 * Enum that represents the types of invalid token reasons.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason
 */
export enum TokenProperties_InvalidReason {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: INVALID_REASON_UNSPECIFIED = 0;
   */
  INVALID_REASON_UNSPECIFIED = 0,

  /**
   * If the failure reason was not accounted for.
   *
   * @generated from enum value: UNKNOWN_INVALID_REASON = 1;
   */
  UNKNOWN_INVALID_REASON = 1,

  /**
   * The provided user verification token was malformed.
   *
   * @generated from enum value: MALFORMED = 2;
   */
  MALFORMED = 2,

  /**
   * The user verification token had expired.
   *
   * @generated from enum value: EXPIRED = 3;
   */
  EXPIRED = 3,

  /**
   * The user verification had already been seen.
   *
   * @generated from enum value: DUPE = 4;
   */
  DUPE = 4,

  /**
   * The user verification token did not match the provided site key.
   * This may be a configuration error (for example, development keys used in
   * production) or end users trying to use verification tokens from other
   * sites.
   *
   * @generated from enum value: SITE_MISMATCH = 5 [deprecated = true];
   * @deprecated
   */
  SITE_MISMATCH = 5,

  /**
   * The user verification token was not present.  It is a required input.
   *
   * @generated from enum value: MISSING = 6;
   */
  MISSING = 6,

  /**
   * A retriable error (such as network failure) occurred on the browser.
   * Could easily be simulated by an attacker.
   *
   * @generated from enum value: BROWSER_ERROR = 7;
   */
  BROWSER_ERROR = 7,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.TokenProperties.InvalidReason.
 */
export const TokenProperties_InvalidReasonSchema: GenEnum<TokenProperties_InvalidReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 8, 0);

/**
 * Assessment for Fraud Prevention.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment
 */
export type FraudPreventionAssessment = Message<"google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment"> & {
  /**
   * Probability (0-1) of this transaction being fraudulent. Summarizes the
   * combined risk of attack vectors below.
   *
   * @generated from field: float transaction_risk = 1;
   */
  transactionRisk: number;

  /**
   * Assessment of this transaction for risk of a stolen instrument.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict stolen_instrument_verdict = 2;
   */
  stolenInstrumentVerdict?: FraudPreventionAssessment_StolenInstrumentVerdict;

  /**
   * Assessment of this transaction for risk of being part of a card testing
   * attack.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict card_testing_verdict = 3;
   */
  cardTestingVerdict?: FraudPreventionAssessment_CardTestingVerdict;

  /**
   * Assessment of this transaction for behavioral trust.
   *
   * @generated from field: google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.BehavioralTrustVerdict behavioral_trust_verdict = 4;
   */
  behavioralTrustVerdict?: FraudPreventionAssessment_BehavioralTrustVerdict;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.
 * Use `create(FraudPreventionAssessmentSchema)` to create a new message.
 */
export const FraudPreventionAssessmentSchema: GenMessage<FraudPreventionAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 9);

/**
 * Information about stolen instrument fraud, where the user is not the
 * legitimate owner of the instrument being used for the purchase.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict
 */
export type FraudPreventionAssessment_StolenInstrumentVerdict = Message<"google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict"> & {
  /**
   * Probability (0-1) of this transaction being executed with a stolen
   * instrument.
   *
   * @generated from field: float risk = 1;
   */
  risk: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.StolenInstrumentVerdict.
 * Use `create(FraudPreventionAssessment_StolenInstrumentVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_StolenInstrumentVerdictSchema: GenMessage<FraudPreventionAssessment_StolenInstrumentVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 9, 0);

/**
 * Information about card testing fraud, where an adversary is testing
 * fraudulently obtained cards or brute forcing their details.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict
 */
export type FraudPreventionAssessment_CardTestingVerdict = Message<"google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict"> & {
  /**
   * Probability (0-1) of this transaction attempt being part of a card
   * testing attack.
   *
   * @generated from field: float risk = 1;
   */
  risk: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.CardTestingVerdict.
 * Use `create(FraudPreventionAssessment_CardTestingVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_CardTestingVerdictSchema: GenMessage<FraudPreventionAssessment_CardTestingVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 9, 1);

/**
 * Information about behavioral trust of the transaction.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.BehavioralTrustVerdict
 */
export type FraudPreventionAssessment_BehavioralTrustVerdict = Message<"google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.BehavioralTrustVerdict"> & {
  /**
   * Probability (0-1) of this transaction attempt being executed in a
   * behaviorally trustworthy way.
   *
   * @generated from field: float trust = 1;
   */
  trust: number;
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.FraudPreventionAssessment.BehavioralTrustVerdict.
 * Use `create(FraudPreventionAssessment_BehavioralTrustVerdictSchema)` to create a new message.
 */
export const FraudPreventionAssessment_BehavioralTrustVerdictSchema: GenMessage<FraudPreventionAssessment_BehavioralTrustVerdict> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 9, 2);

/**
 * Account defender risk assessment.
 *
 * @generated from message google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment
 */
export type AccountDefenderAssessment = Message<"google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment"> & {
  /**
   * Labels for this request.
   *
   * @generated from field: repeated google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel labels = 1;
   */
  labels: AccountDefenderAssessment_AccountDefenderLabel[];
};

/**
 * Describes the message google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.
 * Use `create(AccountDefenderAssessmentSchema)` to create a new message.
 */
export const AccountDefenderAssessmentSchema: GenMessage<AccountDefenderAssessment> = /*@__PURE__*/
  messageDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 10);

/**
 * Labels returned by account defender for this request.
 *
 * @generated from enum google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel
 */
export enum AccountDefenderAssessment_AccountDefenderLabel {
  /**
   * Default unspecified type.
   *
   * @generated from enum value: ACCOUNT_DEFENDER_LABEL_UNSPECIFIED = 0;
   */
  ACCOUNT_DEFENDER_LABEL_UNSPECIFIED = 0,

  /**
   * The request matches a known good profile for the user.
   *
   * @generated from enum value: PROFILE_MATCH = 1;
   */
  PROFILE_MATCH = 1,

  /**
   * The request is potentially a suspicious login event and should be further
   * verified either via multi-factor authentication or another system.
   *
   * @generated from enum value: SUSPICIOUS_LOGIN_ACTIVITY = 2;
   */
  SUSPICIOUS_LOGIN_ACTIVITY = 2,

  /**
   * The request matched a profile that previously had suspicious account
   * creation behavior. This could mean this is a fake account.
   *
   * @generated from enum value: SUSPICIOUS_ACCOUNT_CREATION = 3;
   */
  SUSPICIOUS_ACCOUNT_CREATION = 3,

  /**
   * The account in the request has a high number of related accounts. It does
   * not necessarily imply that the account is bad but could require
   * investigating.
   *
   * @generated from enum value: RELATED_ACCOUNTS_NUMBER_HIGH = 4;
   */
  RELATED_ACCOUNTS_NUMBER_HIGH = 4,
}

/**
 * Describes the enum google.cloud.recaptchaenterprise.v1beta1.AccountDefenderAssessment.AccountDefenderLabel.
 */
export const AccountDefenderAssessment_AccountDefenderLabelSchema: GenEnum<AccountDefenderAssessment_AccountDefenderLabel> = /*@__PURE__*/
  enumDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 10, 0);

/**
 * Service to determine the likelihood an event is legitimate.
 *
 * @generated from service google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1
 */
export const RecaptchaEnterpriseServiceV1Beta1: GenService<{
  /**
   * Creates an Assessment of the likelihood an event is legitimate.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1.CreateAssessment
   */
  createAssessment: {
    methodKind: "unary";
    input: typeof CreateAssessmentRequestSchema;
    output: typeof AssessmentSchema;
  },
  /**
   * Annotates a previously created Assessment to provide additional information
   * on whether the event turned out to be authentic or fradulent.
   *
   * @generated from rpc google.cloud.recaptchaenterprise.v1beta1.RecaptchaEnterpriseServiceV1Beta1.AnnotateAssessment
   */
  annotateAssessment: {
    methodKind: "unary";
    input: typeof AnnotateAssessmentRequestSchema;
    output: typeof AnnotateAssessmentResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_recaptchaenterprise_v1beta1_recaptchaenterprise, 0);

