// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/migration/v2/translation_config.proto (package google.cloud.bigquery.migration.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/migration/v2/translation_config.proto.
 */
export const file_google_cloud_bigquery_migration_v2_translation_config: GenFile = /*@__PURE__*/
  fileDesc("Cjtnb29nbGUvY2xvdWQvYmlncXVlcnkvbWlncmF0aW9uL3YyL3RyYW5zbGF0aW9uX2NvbmZpZy5wcm90bxIiZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52MiLgAwoYVHJhbnNsYXRpb25Db25maWdEZXRhaWxzEhkKD2djc19zb3VyY2VfcGF0aBgBIAEoCUgAEhkKD2djc190YXJnZXRfcGF0aBgCIAEoCUgBElYKEW5hbWVfbWFwcGluZ19saXN0GAUgASgLMjkuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5PYmplY3ROYW1lTWFwcGluZ0xpc3RIAhJDCg5zb3VyY2VfZGlhbGVjdBgDIAEoCzIrLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuRGlhbGVjdBJDCg50YXJnZXRfZGlhbGVjdBgEIAEoCzIrLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuRGlhbGVjdBJBCgpzb3VyY2VfZW52GAYgASgLMi0uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5Tb3VyY2VFbnYSFgoOcmVxdWVzdF9zb3VyY2UYCCABKAkSFAoMdGFyZ2V0X3R5cGVzGAkgAygJQhEKD3NvdXJjZV9sb2NhdGlvbkIRCg90YXJnZXRfbG9jYXRpb25CFQoTb3V0cHV0X25hbWVfbWFwcGluZyLrCgoHRGlhbGVjdBJPChBiaWdxdWVyeV9kaWFsZWN0GAEgASgLMjMuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5CaWdRdWVyeURpYWxlY3RIABJLCg5oaXZlcWxfZGlhbGVjdBgCIAEoCzIxLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuSGl2ZVFMRGlhbGVjdEgAEk8KEHJlZHNoaWZ0X2RpYWxlY3QYAyABKAsyMy5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLlJlZHNoaWZ0RGlhbGVjdEgAEk8KEHRlcmFkYXRhX2RpYWxlY3QYBCABKAsyMy5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLlRlcmFkYXRhRGlhbGVjdEgAEksKDm9yYWNsZV9kaWFsZWN0GAUgASgLMjEuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5PcmFjbGVEaWFsZWN0SAASTwoQc3BhcmtzcWxfZGlhbGVjdBgGIAEoCzIzLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuU3BhcmtTUUxEaWFsZWN0SAASUQoRc25vd2ZsYWtlX2RpYWxlY3QYByABKAsyNC5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLlNub3dmbGFrZURpYWxlY3RIABJNCg9uZXRlenphX2RpYWxlY3QYCCABKAsyMi5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLk5ldGV6emFEaWFsZWN0SAASWAoVYXp1cmVfc3luYXBzZV9kaWFsZWN0GAkgASgLMjcuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5BenVyZVN5bmFwc2VEaWFsZWN0SAASTQoPdmVydGljYV9kaWFsZWN0GAogASgLMjIuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5WZXJ0aWNhRGlhbGVjdEgAElIKEnNxbF9zZXJ2ZXJfZGlhbGVjdBgLIAEoCzI0Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuU1FMU2VydmVyRGlhbGVjdEgAElMKEnBvc3RncmVzcWxfZGlhbGVjdBgMIAEoCzI1Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuUG9zdGdyZXNxbERpYWxlY3RIABJLCg5wcmVzdG9fZGlhbGVjdBgNIAEoCzIxLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuUHJlc3RvRGlhbGVjdEgAEkkKDW15c3FsX2RpYWxlY3QYDiABKAsyMC5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLk15U1FMRGlhbGVjdEgAEkUKC2RiMl9kaWFsZWN0GA8gASgLMi4uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5EQjJEaWFsZWN0SAASSwoOc3FsaXRlX2RpYWxlY3QYECABKAsyMS5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyLlNRTGl0ZURpYWxlY3RIABJRChFncmVlbnBsdW1fZGlhbGVjdBgRIAEoCzI0Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuR3JlZW5wbHVtRGlhbGVjdEgAQg8KDWRpYWxlY3RfdmFsdWUiEQoPQmlnUXVlcnlEaWFsZWN0Ig8KDUhpdmVRTERpYWxlY3QiEQoPUmVkc2hpZnREaWFsZWN0IooBCg9UZXJhZGF0YURpYWxlY3QSRgoEbW9kZRgBIAEoDjI4Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuVGVyYWRhdGFEaWFsZWN0Lk1vZGUiLwoETW9kZRIUChBNT0RFX1VOU1BFQ0lGSUVEEAASBwoDU1FMEAESCAoEQlRFURACIg8KDU9yYWNsZURpYWxlY3QiEQoPU3BhcmtTUUxEaWFsZWN0IhIKEFNub3dmbGFrZURpYWxlY3QiEAoOTmV0ZXp6YURpYWxlY3QiFQoTQXp1cmVTeW5hcHNlRGlhbGVjdCIQCg5WZXJ0aWNhRGlhbGVjdCISChBTUUxTZXJ2ZXJEaWFsZWN0IhMKEVBvc3RncmVzcWxEaWFsZWN0Ig8KDVByZXN0b0RpYWxlY3QiDgoMTXlTUUxEaWFsZWN0IgwKCkRCMkRpYWxlY3QiDwoNU1FMaXRlRGlhbGVjdCISChBHcmVlbnBsdW1EaWFsZWN0ImAKFU9iamVjdE5hbWVNYXBwaW5nTGlzdBJHCghuYW1lX21hcBgBIAMoCzI1Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuT2JqZWN0TmFtZU1hcHBpbmcinQEKEU9iamVjdE5hbWVNYXBwaW5nEkIKBnNvdXJjZRgBIAEoCzIyLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5taWdyYXRpb24udjIuTmFtZU1hcHBpbmdLZXkSRAoGdGFyZ2V0GAIgASgLMjQuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5OYW1lTWFwcGluZ1ZhbHVlIqsCCg5OYW1lTWFwcGluZ0tleRJFCgR0eXBlGAEgASgOMjcuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5Lm1pZ3JhdGlvbi52Mi5OYW1lTWFwcGluZ0tleS5UeXBlEhAKCGRhdGFiYXNlGAIgASgJEg4KBnNjaGVtYRgDIAEoCRIQCghyZWxhdGlvbhgEIAEoCRIRCglhdHRyaWJ1dGUYBSABKAkiigEKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgwKCERBVEFCQVNFEAESCgoGU0NIRU1BEAISDAoIUkVMQVRJT04QAxINCglBVFRSSUJVVEUQBBISCg5SRUxBVElPTl9BTElBUxAFEhMKD0FUVFJJQlVURV9BTElBUxAGEgwKCEZVTkNUSU9OEAciWQoQTmFtZU1hcHBpbmdWYWx1ZRIQCghkYXRhYmFzZRgBIAEoCRIOCgZzY2hlbWEYAiABKAkSEAoIcmVsYXRpb24YAyABKAkSEQoJYXR0cmlidXRlGAQgASgJImYKCVNvdXJjZUVudhIYChBkZWZhdWx0X2RhdGFiYXNlGAEgASgJEhoKEnNjaGVtYV9zZWFyY2hfcGF0aBgCIAMoCRIjChZtZXRhZGF0YV9zdG9yZV9kYXRhc2V0GAMgASgJQgPgQQFC0gEKJmNvbS5nb29nbGUuY2xvdWQuYmlncXVlcnkubWlncmF0aW9uLnYyQhZUcmFuc2xhdGlvbkNvbmZpZ1Byb3RvUAFaRGNsb3VkLmdvb2dsZS5jb20vZ28vYmlncXVlcnkvbWlncmF0aW9uL2FwaXYyL21pZ3JhdGlvbnBiO21pZ3JhdGlvbnBiqgIiR29vZ2xlLkNsb3VkLkJpZ1F1ZXJ5Lk1pZ3JhdGlvbi5WMsoCIkdvb2dsZVxDbG91ZFxCaWdRdWVyeVxNaWdyYXRpb25cVjJiBnByb3RvMw", [file_google_api_field_behavior]);

/**
 * The translation config to capture necessary settings for a translation task
 * and subtask.
 *
 * @generated from message google.cloud.bigquery.migration.v2.TranslationConfigDetails
 */
export type TranslationConfigDetails = Message<"google.cloud.bigquery.migration.v2.TranslationConfigDetails"> & {
  /**
   * The chosen path where the source for input files will be found.
   *
   * @generated from oneof google.cloud.bigquery.migration.v2.TranslationConfigDetails.source_location
   */
  sourceLocation: {
    /**
     * The Cloud Storage path for a directory of files to translate in a task.
     *
     * @generated from field: string gcs_source_path = 1;
     */
    value: string;
    case: "gcsSourcePath";
  } | { case: undefined; value?: undefined };

  /**
   * The chosen path where the destination for output files will be found.
   *
   * @generated from oneof google.cloud.bigquery.migration.v2.TranslationConfigDetails.target_location
   */
  targetLocation: {
    /**
     * The Cloud Storage path to write back the corresponding input files to.
     *
     * @generated from field: string gcs_target_path = 2;
     */
    value: string;
    case: "gcsTargetPath";
  } | { case: undefined; value?: undefined };

  /**
   * The mapping of full SQL object names from their current state to the
   * desired output.
   *
   * @generated from oneof google.cloud.bigquery.migration.v2.TranslationConfigDetails.output_name_mapping
   */
  outputNameMapping: {
    /**
     * The mapping of objects to their desired output names in list form.
     *
     * @generated from field: google.cloud.bigquery.migration.v2.ObjectNameMappingList name_mapping_list = 5;
     */
    value: ObjectNameMappingList;
    case: "nameMappingList";
  } | { case: undefined; value?: undefined };

  /**
   * The dialect of the input files.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.Dialect source_dialect = 3;
   */
  sourceDialect?: Dialect;

  /**
   * The target dialect for the engine to translate the input to.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.Dialect target_dialect = 4;
   */
  targetDialect?: Dialect;

  /**
   * The default source environment values for the translation.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.SourceEnv source_env = 6;
   */
  sourceEnv?: SourceEnv;

  /**
   * The indicator to show translation request initiator.
   *
   * @generated from field: string request_source = 8;
   */
  requestSource: string;

  /**
   * The types of output to generate, e.g. sql, metadata etc. If not specified,
   * a default set of targets will be generated. Some additional target types
   * may be slower to generate. See the documentation for the set of available
   * target types.
   *
   * @generated from field: repeated string target_types = 9;
   */
  targetTypes: string[];
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.TranslationConfigDetails.
 * Use `create(TranslationConfigDetailsSchema)` to create a new message.
 */
export const TranslationConfigDetailsSchema: GenMessage<TranslationConfigDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 0);

/**
 * The possible dialect options for translation.
 *
 * @generated from message google.cloud.bigquery.migration.v2.Dialect
 */
export type Dialect = Message<"google.cloud.bigquery.migration.v2.Dialect"> & {
  /**
   * The possible dialect options that this message represents.
   *
   * @generated from oneof google.cloud.bigquery.migration.v2.Dialect.dialect_value
   */
  dialectValue: {
    /**
     * The BigQuery dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.BigQueryDialect bigquery_dialect = 1;
     */
    value: BigQueryDialect;
    case: "bigqueryDialect";
  } | {
    /**
     * The HiveQL dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.HiveQLDialect hiveql_dialect = 2;
     */
    value: HiveQLDialect;
    case: "hiveqlDialect";
  } | {
    /**
     * The Redshift dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.RedshiftDialect redshift_dialect = 3;
     */
    value: RedshiftDialect;
    case: "redshiftDialect";
  } | {
    /**
     * The Teradata dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.TeradataDialect teradata_dialect = 4;
     */
    value: TeradataDialect;
    case: "teradataDialect";
  } | {
    /**
     * The Oracle dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.OracleDialect oracle_dialect = 5;
     */
    value: OracleDialect;
    case: "oracleDialect";
  } | {
    /**
     * The SparkSQL dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.SparkSQLDialect sparksql_dialect = 6;
     */
    value: SparkSQLDialect;
    case: "sparksqlDialect";
  } | {
    /**
     * The Snowflake dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.SnowflakeDialect snowflake_dialect = 7;
     */
    value: SnowflakeDialect;
    case: "snowflakeDialect";
  } | {
    /**
     * The Netezza dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.NetezzaDialect netezza_dialect = 8;
     */
    value: NetezzaDialect;
    case: "netezzaDialect";
  } | {
    /**
     * The Azure Synapse dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.AzureSynapseDialect azure_synapse_dialect = 9;
     */
    value: AzureSynapseDialect;
    case: "azureSynapseDialect";
  } | {
    /**
     * The Vertica dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.VerticaDialect vertica_dialect = 10;
     */
    value: VerticaDialect;
    case: "verticaDialect";
  } | {
    /**
     * The SQL Server dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.SQLServerDialect sql_server_dialect = 11;
     */
    value: SQLServerDialect;
    case: "sqlServerDialect";
  } | {
    /**
     * The Postgresql dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.PostgresqlDialect postgresql_dialect = 12;
     */
    value: PostgresqlDialect;
    case: "postgresqlDialect";
  } | {
    /**
     * The Presto dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.PrestoDialect presto_dialect = 13;
     */
    value: PrestoDialect;
    case: "prestoDialect";
  } | {
    /**
     * The MySQL dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.MySQLDialect mysql_dialect = 14;
     */
    value: MySQLDialect;
    case: "mysqlDialect";
  } | {
    /**
     * DB2 dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.DB2Dialect db2_dialect = 15;
     */
    value: DB2Dialect;
    case: "db2Dialect";
  } | {
    /**
     * SQLite dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.SQLiteDialect sqlite_dialect = 16;
     */
    value: SQLiteDialect;
    case: "sqliteDialect";
  } | {
    /**
     * Greenplum dialect
     *
     * @generated from field: google.cloud.bigquery.migration.v2.GreenplumDialect greenplum_dialect = 17;
     */
    value: GreenplumDialect;
    case: "greenplumDialect";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.Dialect.
 * Use `create(DialectSchema)` to create a new message.
 */
export const DialectSchema: GenMessage<Dialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 1);

/**
 * The dialect definition for BigQuery.
 *
 * @generated from message google.cloud.bigquery.migration.v2.BigQueryDialect
 */
export type BigQueryDialect = Message<"google.cloud.bigquery.migration.v2.BigQueryDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.BigQueryDialect.
 * Use `create(BigQueryDialectSchema)` to create a new message.
 */
export const BigQueryDialectSchema: GenMessage<BigQueryDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 2);

/**
 * The dialect definition for HiveQL.
 *
 * @generated from message google.cloud.bigquery.migration.v2.HiveQLDialect
 */
export type HiveQLDialect = Message<"google.cloud.bigquery.migration.v2.HiveQLDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.HiveQLDialect.
 * Use `create(HiveQLDialectSchema)` to create a new message.
 */
export const HiveQLDialectSchema: GenMessage<HiveQLDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 3);

/**
 * The dialect definition for Redshift.
 *
 * @generated from message google.cloud.bigquery.migration.v2.RedshiftDialect
 */
export type RedshiftDialect = Message<"google.cloud.bigquery.migration.v2.RedshiftDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.RedshiftDialect.
 * Use `create(RedshiftDialectSchema)` to create a new message.
 */
export const RedshiftDialectSchema: GenMessage<RedshiftDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 4);

/**
 * The dialect definition for Teradata.
 *
 * @generated from message google.cloud.bigquery.migration.v2.TeradataDialect
 */
export type TeradataDialect = Message<"google.cloud.bigquery.migration.v2.TeradataDialect"> & {
  /**
   * Which Teradata sub-dialect mode the user specifies.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.TeradataDialect.Mode mode = 1;
   */
  mode: TeradataDialect_Mode;
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.TeradataDialect.
 * Use `create(TeradataDialectSchema)` to create a new message.
 */
export const TeradataDialectSchema: GenMessage<TeradataDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 5);

/**
 * The sub-dialect options for Teradata.
 *
 * @generated from enum google.cloud.bigquery.migration.v2.TeradataDialect.Mode
 */
export enum TeradataDialect_Mode {
  /**
   * Unspecified mode.
   *
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  MODE_UNSPECIFIED = 0,

  /**
   * Teradata SQL mode.
   *
   * @generated from enum value: SQL = 1;
   */
  SQL = 1,

  /**
   * BTEQ mode (which includes SQL).
   *
   * @generated from enum value: BTEQ = 2;
   */
  BTEQ = 2,
}

/**
 * Describes the enum google.cloud.bigquery.migration.v2.TeradataDialect.Mode.
 */
export const TeradataDialect_ModeSchema: GenEnum<TeradataDialect_Mode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_migration_v2_translation_config, 5, 0);

/**
 * The dialect definition for Oracle.
 *
 * @generated from message google.cloud.bigquery.migration.v2.OracleDialect
 */
export type OracleDialect = Message<"google.cloud.bigquery.migration.v2.OracleDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.OracleDialect.
 * Use `create(OracleDialectSchema)` to create a new message.
 */
export const OracleDialectSchema: GenMessage<OracleDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 6);

/**
 * The dialect definition for SparkSQL.
 *
 * @generated from message google.cloud.bigquery.migration.v2.SparkSQLDialect
 */
export type SparkSQLDialect = Message<"google.cloud.bigquery.migration.v2.SparkSQLDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.SparkSQLDialect.
 * Use `create(SparkSQLDialectSchema)` to create a new message.
 */
export const SparkSQLDialectSchema: GenMessage<SparkSQLDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 7);

/**
 * The dialect definition for Snowflake.
 *
 * @generated from message google.cloud.bigquery.migration.v2.SnowflakeDialect
 */
export type SnowflakeDialect = Message<"google.cloud.bigquery.migration.v2.SnowflakeDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.SnowflakeDialect.
 * Use `create(SnowflakeDialectSchema)` to create a new message.
 */
export const SnowflakeDialectSchema: GenMessage<SnowflakeDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 8);

/**
 * The dialect definition for Netezza.
 *
 * @generated from message google.cloud.bigquery.migration.v2.NetezzaDialect
 */
export type NetezzaDialect = Message<"google.cloud.bigquery.migration.v2.NetezzaDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.NetezzaDialect.
 * Use `create(NetezzaDialectSchema)` to create a new message.
 */
export const NetezzaDialectSchema: GenMessage<NetezzaDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 9);

/**
 * The dialect definition for Azure Synapse.
 *
 * @generated from message google.cloud.bigquery.migration.v2.AzureSynapseDialect
 */
export type AzureSynapseDialect = Message<"google.cloud.bigquery.migration.v2.AzureSynapseDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.AzureSynapseDialect.
 * Use `create(AzureSynapseDialectSchema)` to create a new message.
 */
export const AzureSynapseDialectSchema: GenMessage<AzureSynapseDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 10);

/**
 * The dialect definition for Vertica.
 *
 * @generated from message google.cloud.bigquery.migration.v2.VerticaDialect
 */
export type VerticaDialect = Message<"google.cloud.bigquery.migration.v2.VerticaDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.VerticaDialect.
 * Use `create(VerticaDialectSchema)` to create a new message.
 */
export const VerticaDialectSchema: GenMessage<VerticaDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 11);

/**
 * The dialect definition for SQL Server.
 *
 * @generated from message google.cloud.bigquery.migration.v2.SQLServerDialect
 */
export type SQLServerDialect = Message<"google.cloud.bigquery.migration.v2.SQLServerDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.SQLServerDialect.
 * Use `create(SQLServerDialectSchema)` to create a new message.
 */
export const SQLServerDialectSchema: GenMessage<SQLServerDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 12);

/**
 * The dialect definition for Postgresql.
 *
 * @generated from message google.cloud.bigquery.migration.v2.PostgresqlDialect
 */
export type PostgresqlDialect = Message<"google.cloud.bigquery.migration.v2.PostgresqlDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.PostgresqlDialect.
 * Use `create(PostgresqlDialectSchema)` to create a new message.
 */
export const PostgresqlDialectSchema: GenMessage<PostgresqlDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 13);

/**
 * The dialect definition for Presto.
 *
 * @generated from message google.cloud.bigquery.migration.v2.PrestoDialect
 */
export type PrestoDialect = Message<"google.cloud.bigquery.migration.v2.PrestoDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.PrestoDialect.
 * Use `create(PrestoDialectSchema)` to create a new message.
 */
export const PrestoDialectSchema: GenMessage<PrestoDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 14);

/**
 * The dialect definition for MySQL.
 *
 * @generated from message google.cloud.bigquery.migration.v2.MySQLDialect
 */
export type MySQLDialect = Message<"google.cloud.bigquery.migration.v2.MySQLDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.MySQLDialect.
 * Use `create(MySQLDialectSchema)` to create a new message.
 */
export const MySQLDialectSchema: GenMessage<MySQLDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 15);

/**
 * The dialect definition for DB2.
 *
 * @generated from message google.cloud.bigquery.migration.v2.DB2Dialect
 */
export type DB2Dialect = Message<"google.cloud.bigquery.migration.v2.DB2Dialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.DB2Dialect.
 * Use `create(DB2DialectSchema)` to create a new message.
 */
export const DB2DialectSchema: GenMessage<DB2Dialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 16);

/**
 * The dialect definition for SQLite.
 *
 * @generated from message google.cloud.bigquery.migration.v2.SQLiteDialect
 */
export type SQLiteDialect = Message<"google.cloud.bigquery.migration.v2.SQLiteDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.SQLiteDialect.
 * Use `create(SQLiteDialectSchema)` to create a new message.
 */
export const SQLiteDialectSchema: GenMessage<SQLiteDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 17);

/**
 * The dialect definition for Greenplum.
 *
 * @generated from message google.cloud.bigquery.migration.v2.GreenplumDialect
 */
export type GreenplumDialect = Message<"google.cloud.bigquery.migration.v2.GreenplumDialect"> & {
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.GreenplumDialect.
 * Use `create(GreenplumDialectSchema)` to create a new message.
 */
export const GreenplumDialectSchema: GenMessage<GreenplumDialect> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 18);

/**
 * Represents a map of name mappings using a list of key:value proto messages of
 * existing name to desired output name.
 *
 * @generated from message google.cloud.bigquery.migration.v2.ObjectNameMappingList
 */
export type ObjectNameMappingList = Message<"google.cloud.bigquery.migration.v2.ObjectNameMappingList"> & {
  /**
   * The elements of the object name map.
   *
   * @generated from field: repeated google.cloud.bigquery.migration.v2.ObjectNameMapping name_map = 1;
   */
  nameMap: ObjectNameMapping[];
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.ObjectNameMappingList.
 * Use `create(ObjectNameMappingListSchema)` to create a new message.
 */
export const ObjectNameMappingListSchema: GenMessage<ObjectNameMappingList> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 19);

/**
 * Represents a key-value pair of NameMappingKey to NameMappingValue to
 * represent the mapping of SQL names from the input value to desired output.
 *
 * @generated from message google.cloud.bigquery.migration.v2.ObjectNameMapping
 */
export type ObjectNameMapping = Message<"google.cloud.bigquery.migration.v2.ObjectNameMapping"> & {
  /**
   * The name of the object in source that is being mapped.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.NameMappingKey source = 1;
   */
  source?: NameMappingKey;

  /**
   * The desired target name of the object that is being mapped.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.NameMappingValue target = 2;
   */
  target?: NameMappingValue;
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.ObjectNameMapping.
 * Use `create(ObjectNameMappingSchema)` to create a new message.
 */
export const ObjectNameMappingSchema: GenMessage<ObjectNameMapping> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 20);

/**
 * The potential components of a full name mapping that will be mapped
 * during translation in the source data warehouse.
 *
 * @generated from message google.cloud.bigquery.migration.v2.NameMappingKey
 */
export type NameMappingKey = Message<"google.cloud.bigquery.migration.v2.NameMappingKey"> & {
  /**
   * The type of object that is being mapped.
   *
   * @generated from field: google.cloud.bigquery.migration.v2.NameMappingKey.Type type = 1;
   */
  type: NameMappingKey_Type;

  /**
   * The database name (BigQuery project ID equivalent in the source data
   * warehouse).
   *
   * @generated from field: string database = 2;
   */
  database: string;

  /**
   * The schema name (BigQuery dataset equivalent in the source data warehouse).
   *
   * @generated from field: string schema = 3;
   */
  schema: string;

  /**
   * The relation name (BigQuery table or view equivalent in the source data
   * warehouse).
   *
   * @generated from field: string relation = 4;
   */
  relation: string;

  /**
   * The attribute name (BigQuery column equivalent in the source data
   * warehouse).
   *
   * @generated from field: string attribute = 5;
   */
  attribute: string;
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.NameMappingKey.
 * Use `create(NameMappingKeySchema)` to create a new message.
 */
export const NameMappingKeySchema: GenMessage<NameMappingKey> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 21);

/**
 * The type of the object that is being mapped.
 *
 * @generated from enum google.cloud.bigquery.migration.v2.NameMappingKey.Type
 */
export enum NameMappingKey_Type {
  /**
   * Unspecified name mapping type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * The object being mapped is a database.
   *
   * @generated from enum value: DATABASE = 1;
   */
  DATABASE = 1,

  /**
   * The object being mapped is a schema.
   *
   * @generated from enum value: SCHEMA = 2;
   */
  SCHEMA = 2,

  /**
   * The object being mapped is a relation.
   *
   * @generated from enum value: RELATION = 3;
   */
  RELATION = 3,

  /**
   * The object being mapped is an attribute.
   *
   * @generated from enum value: ATTRIBUTE = 4;
   */
  ATTRIBUTE = 4,

  /**
   * The object being mapped is a relation alias.
   *
   * @generated from enum value: RELATION_ALIAS = 5;
   */
  RELATION_ALIAS = 5,

  /**
   * The object being mapped is a an attribute alias.
   *
   * @generated from enum value: ATTRIBUTE_ALIAS = 6;
   */
  ATTRIBUTE_ALIAS = 6,

  /**
   * The object being mapped is a function.
   *
   * @generated from enum value: FUNCTION = 7;
   */
  FUNCTION = 7,
}

/**
 * Describes the enum google.cloud.bigquery.migration.v2.NameMappingKey.Type.
 */
export const NameMappingKey_TypeSchema: GenEnum<NameMappingKey_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_migration_v2_translation_config, 21, 0);

/**
 * The potential components of a full name mapping that will be mapped
 * during translation in the target data warehouse.
 *
 * @generated from message google.cloud.bigquery.migration.v2.NameMappingValue
 */
export type NameMappingValue = Message<"google.cloud.bigquery.migration.v2.NameMappingValue"> & {
  /**
   * The database name (BigQuery project ID equivalent in the target data
   * warehouse).
   *
   * @generated from field: string database = 1;
   */
  database: string;

  /**
   * The schema name (BigQuery dataset equivalent in the target data warehouse).
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The relation name (BigQuery table or view equivalent in the target data
   * warehouse).
   *
   * @generated from field: string relation = 3;
   */
  relation: string;

  /**
   * The attribute name (BigQuery column equivalent in the target data
   * warehouse).
   *
   * @generated from field: string attribute = 4;
   */
  attribute: string;
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.NameMappingValue.
 * Use `create(NameMappingValueSchema)` to create a new message.
 */
export const NameMappingValueSchema: GenMessage<NameMappingValue> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 22);

/**
 * Represents the default source environment values for the translation.
 *
 * @generated from message google.cloud.bigquery.migration.v2.SourceEnv
 */
export type SourceEnv = Message<"google.cloud.bigquery.migration.v2.SourceEnv"> & {
  /**
   * The default database name to fully qualify SQL objects when their database
   * name is missing.
   *
   * @generated from field: string default_database = 1;
   */
  defaultDatabase: string;

  /**
   * The schema search path. When SQL objects are missing schema name,
   * translation engine will search through this list to find the value.
   *
   * @generated from field: repeated string schema_search_path = 2;
   */
  schemaSearchPath: string[];

  /**
   * Optional. Expects a valid BigQuery dataset ID that exists, e.g.,
   * project-123.metadata_store_123.  If specified, translation will search and
   * read the required schema information from a metadata store in this dataset.
   * If metadata store doesn't exist, translation will parse the metadata file
   * and upload the schema info to a temp table in the dataset to speed up
   * future translation jobs.
   *
   * @generated from field: string metadata_store_dataset = 3;
   */
  metadataStoreDataset: string;
};

/**
 * Describes the message google.cloud.bigquery.migration.v2.SourceEnv.
 * Use `create(SourceEnvSchema)` to create a new message.
 */
export const SourceEnvSchema: GenMessage<SourceEnv> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_migration_v2_translation_config, 23);

