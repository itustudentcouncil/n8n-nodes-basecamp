// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/v2/standard_sql.proto (package google.cloud.bigquery.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/v2/standard_sql.proto.
 */
export const file_google_cloud_bigquery_v2_standard_sql: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvY2xvdWQvYmlncXVlcnkvdjIvc3RhbmRhcmRfc3FsLnByb3RvEhhnb29nbGUuY2xvdWQuYmlncXVlcnkudjIiywQKE1N0YW5kYXJkU3FsRGF0YVR5cGUSTgoJdHlwZV9raW5kGAEgASgOMjYuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLlN0YW5kYXJkU3FsRGF0YVR5cGUuVHlwZUtpbmRCA+BBAhJLChJhcnJheV9lbGVtZW50X3R5cGUYAiABKAsyLS5nb29nbGUuY2xvdWQuYmlncXVlcnkudjIuU3RhbmRhcmRTcWxEYXRhVHlwZUgAEkYKC3N0cnVjdF90eXBlGAMgASgLMi8uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLlN0YW5kYXJkU3FsU3RydWN0VHlwZUgAEksKEnJhbmdlX2VsZW1lbnRfdHlwZRgEIAEoCzItLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5TdGFuZGFyZFNxbERhdGFUeXBlSAAi9QEKCFR5cGVLaW5kEhkKFVRZUEVfS0lORF9VTlNQRUNJRklFRBAAEgkKBUlOVDY0EAISCAoEQk9PTBAFEgsKB0ZMT0FUNjQQBxIKCgZTVFJJTkcQCBIJCgVCWVRFUxAJEg0KCVRJTUVTVEFNUBATEggKBERBVEUQChIICgRUSU1FEBQSDAoIREFURVRJTUUQFRIMCghJTlRFUlZBTBAaEg0KCUdFT0dSQVBIWRAWEgsKB05VTUVSSUMQFxIOCgpCSUdOVU1FUklDEBgSCAoESlNPThAZEgkKBUFSUkFZEBASCgoGU1RSVUNUEBESCQoFUkFOR0UQHUIKCghzdWJfdHlwZSJnChBTdGFuZGFyZFNxbEZpZWxkEhEKBG5hbWUYASABKAlCA+BBARJACgR0eXBlGAIgASgLMi0uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLlN0YW5kYXJkU3FsRGF0YVR5cGVCA+BBASJTChVTdGFuZGFyZFNxbFN0cnVjdFR5cGUSOgoGZmllbGRzGAEgAygLMiouZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnYyLlN0YW5kYXJkU3FsRmllbGQiUwoUU3RhbmRhcmRTcWxUYWJsZVR5cGUSOwoHY29sdW1ucxgBIAMoCzIqLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS52Mi5TdGFuZGFyZFNxbEZpZWxkQmoKHGNvbS5nb29nbGUuY2xvdWQuYmlncXVlcnkudjJCEFN0YW5kYXJkU3FsUHJvdG9aOGNsb3VkLmdvb2dsZS5jb20vZ28vYmlncXVlcnkvYXBpdjIvYmlncXVlcnlwYjtiaWdxdWVyeXBiYgZwcm90bzM", [file_google_api_field_behavior]);

/**
 * The data type of a variable such as a function argument.
 * Examples include:
 *
 * * INT64: `{"typeKind": "INT64"}`
 *
 * * ARRAY<STRING>:
 *
 *     {
 *       "typeKind": "ARRAY",
 *       "arrayElementType": {"typeKind": "STRING"}
 *     }
 *
 * * STRUCT<x STRING, y ARRAY<DATE>>:
 *
 *     {
 *       "typeKind": "STRUCT",
 *       "structType":
 *       {
 *         "fields":
 *         [
 *           {
 *             "name": "x",
 *             "type": {"typeKind": "STRING"}
 *           },
 *           {
 *             "name": "y",
 *             "type":
 *             {
 *               "typeKind": "ARRAY",
 *               "arrayElementType": {"typeKind": "DATE"}
 *             }
 *           }
 *         ]
 *       }
 *     }
 *
 * * RANGE<DATE>:
 *
 *     {
 *       "typeKind": "RANGE",
 *       "rangeElementType": {"typeKind": "DATE"}
 *     }
 *
 * @generated from message google.cloud.bigquery.v2.StandardSqlDataType
 */
export type StandardSqlDataType = Message<"google.cloud.bigquery.v2.StandardSqlDataType"> & {
  /**
   * Required. The top level type of this field.
   * Can be any GoogleSQL data type (e.g., "INT64", "DATE", "ARRAY").
   *
   * @generated from field: google.cloud.bigquery.v2.StandardSqlDataType.TypeKind type_kind = 1;
   */
  typeKind: StandardSqlDataType_TypeKind;

  /**
   * For complex types, the sub type information.
   *
   * @generated from oneof google.cloud.bigquery.v2.StandardSqlDataType.sub_type
   */
  subType: {
    /**
     * The type of the array's elements, if type_kind = "ARRAY".
     *
     * @generated from field: google.cloud.bigquery.v2.StandardSqlDataType array_element_type = 2;
     */
    value: StandardSqlDataType;
    case: "arrayElementType";
  } | {
    /**
     * The fields of this struct, in order, if type_kind = "STRUCT".
     *
     * @generated from field: google.cloud.bigquery.v2.StandardSqlStructType struct_type = 3;
     */
    value: StandardSqlStructType;
    case: "structType";
  } | {
    /**
     * The type of the range's elements, if type_kind = "RANGE".
     *
     * @generated from field: google.cloud.bigquery.v2.StandardSqlDataType range_element_type = 4;
     */
    value: StandardSqlDataType;
    case: "rangeElementType";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.bigquery.v2.StandardSqlDataType.
 * Use `create(StandardSqlDataTypeSchema)` to create a new message.
 */
export const StandardSqlDataTypeSchema: GenMessage<StandardSqlDataType> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_standard_sql, 0);

/**
 * The kind of the datatype.
 *
 * @generated from enum google.cloud.bigquery.v2.StandardSqlDataType.TypeKind
 */
export enum StandardSqlDataType_TypeKind {
  /**
   * Invalid type.
   *
   * @generated from enum value: TYPE_KIND_UNSPECIFIED = 0;
   */
  TYPE_KIND_UNSPECIFIED = 0,

  /**
   * Encoded as a string in decimal format.
   *
   * @generated from enum value: INT64 = 2;
   */
  INT64 = 2,

  /**
   * Encoded as a boolean "false" or "true".
   *
   * @generated from enum value: BOOL = 5;
   */
  BOOL = 5,

  /**
   * Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
   *
   * @generated from enum value: FLOAT64 = 7;
   */
  FLOAT64 = 7,

  /**
   * Encoded as a string value.
   *
   * @generated from enum value: STRING = 8;
   */
  STRING = 8,

  /**
   * Encoded as a base64 string per RFC 4648, section 4.
   *
   * @generated from enum value: BYTES = 9;
   */
  BYTES = 9,

  /**
   * Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
   * 1985-04-12T23:20:50.52Z
   *
   * @generated from enum value: TIMESTAMP = 19;
   */
  TIMESTAMP = 19,

  /**
   * Encoded as RFC 3339 full-date format string: 1985-04-12
   *
   * @generated from enum value: DATE = 10;
   */
  DATE = 10,

  /**
   * Encoded as RFC 3339 partial-time format string: 23:20:50.52
   *
   * @generated from enum value: TIME = 20;
   */
  TIME = 20,

  /**
   * Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
   *
   * @generated from enum value: DATETIME = 21;
   */
  DATETIME = 21,

  /**
   * Encoded as fully qualified 3 part: 0-5 15 2:30:45.6
   *
   * @generated from enum value: INTERVAL = 26;
   */
  INTERVAL = 26,

  /**
   * Encoded as WKT
   *
   * @generated from enum value: GEOGRAPHY = 22;
   */
  GEOGRAPHY = 22,

  /**
   * Encoded as a decimal string.
   *
   * @generated from enum value: NUMERIC = 23;
   */
  NUMERIC = 23,

  /**
   * Encoded as a decimal string.
   *
   * @generated from enum value: BIGNUMERIC = 24;
   */
  BIGNUMERIC = 24,

  /**
   * Encoded as a string.
   *
   * @generated from enum value: JSON = 25;
   */
  JSON = 25,

  /**
   * Encoded as a list with types matching Type.array_type.
   *
   * @generated from enum value: ARRAY = 16;
   */
  ARRAY = 16,

  /**
   * Encoded as a list with fields of type Type.struct_type[i]. List is used
   * because a JSON object cannot have duplicate field names.
   *
   * @generated from enum value: STRUCT = 17;
   */
  STRUCT = 17,

  /**
   * Encoded as a pair with types matching range_element_type. Pairs must
   * begin with "[", end with ")", and be separated by ", ".
   *
   * @generated from enum value: RANGE = 29;
   */
  RANGE = 29,
}

/**
 * Describes the enum google.cloud.bigquery.v2.StandardSqlDataType.TypeKind.
 */
export const StandardSqlDataType_TypeKindSchema: GenEnum<StandardSqlDataType_TypeKind> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_standard_sql, 0, 0);

/**
 * A field or a column.
 *
 * @generated from message google.cloud.bigquery.v2.StandardSqlField
 */
export type StandardSqlField = Message<"google.cloud.bigquery.v2.StandardSqlField"> & {
  /**
   * Optional. The name of this field. Can be absent for struct fields.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The type of this parameter. Absent if not explicitly
   * specified (e.g., CREATE FUNCTION statement can omit the return type;
   * in this case the output parameter does not have this "type" field).
   *
   * @generated from field: google.cloud.bigquery.v2.StandardSqlDataType type = 2;
   */
  type?: StandardSqlDataType;
};

/**
 * Describes the message google.cloud.bigquery.v2.StandardSqlField.
 * Use `create(StandardSqlFieldSchema)` to create a new message.
 */
export const StandardSqlFieldSchema: GenMessage<StandardSqlField> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_standard_sql, 1);

/**
 * The representation of a SQL STRUCT type.
 *
 * @generated from message google.cloud.bigquery.v2.StandardSqlStructType
 */
export type StandardSqlStructType = Message<"google.cloud.bigquery.v2.StandardSqlStructType"> & {
  /**
   * Fields within the struct.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.StandardSqlField fields = 1;
   */
  fields: StandardSqlField[];
};

/**
 * Describes the message google.cloud.bigquery.v2.StandardSqlStructType.
 * Use `create(StandardSqlStructTypeSchema)` to create a new message.
 */
export const StandardSqlStructTypeSchema: GenMessage<StandardSqlStructType> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_standard_sql, 2);

/**
 * A table type
 *
 * @generated from message google.cloud.bigquery.v2.StandardSqlTableType
 */
export type StandardSqlTableType = Message<"google.cloud.bigquery.v2.StandardSqlTableType"> & {
  /**
   * The columns in this table type
   *
   * @generated from field: repeated google.cloud.bigquery.v2.StandardSqlField columns = 1;
   */
  columns: StandardSqlField[];
};

/**
 * Describes the message google.cloud.bigquery.v2.StandardSqlTableType.
 * Use `create(StandardSqlTableTypeSchema)` to create a new message.
 */
export const StandardSqlTableTypeSchema: GenMessage<StandardSqlTableType> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_standard_sql, 3);

