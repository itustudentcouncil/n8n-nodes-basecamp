// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/v2/job_stats.proto (package google.cloud.bigquery.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { DatasetReference } from "./dataset_reference_pb";
import { file_google_cloud_bigquery_v2_dataset_reference } from "./dataset_reference_pb";
import type { Model_HparamTuningTrial, Model_ModelType, Model_TrainingRun_IterationResult } from "./model_pb";
import { file_google_cloud_bigquery_v2_model } from "./model_pb";
import type { QueryParameter } from "./query_parameter_pb";
import { file_google_cloud_bigquery_v2_query_parameter } from "./query_parameter_pb";
import type { RoutineReference } from "./routine_reference_pb";
import { file_google_cloud_bigquery_v2_routine_reference } from "./routine_reference_pb";
import type { RowAccessPolicyReference } from "./row_access_policy_reference_pb";
import { file_google_cloud_bigquery_v2_row_access_policy_reference } from "./row_access_policy_reference_pb";
import type { SessionInfo } from "./session_info_pb";
import { file_google_cloud_bigquery_v2_session_info } from "./session_info_pb";
import type { TableReference } from "./table_reference_pb";
import { file_google_cloud_bigquery_v2_table_reference } from "./table_reference_pb";
import type { TableSchema } from "./table_schema_pb";
import { file_google_cloud_bigquery_v2_table_schema } from "./table_schema_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/v2/job_stats.proto.
 */
export const file_google_cloud_bigquery_v2_job_stats: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_bigquery_v2_dataset_reference, file_google_cloud_bigquery_v2_model, file_google_cloud_bigquery_v2_query_parameter, file_google_cloud_bigquery_v2_routine_reference, file_google_cloud_bigquery_v2_row_access_policy_reference, file_google_cloud_bigquery_v2_session_info, file_google_cloud_bigquery_v2_table_reference, file_google_cloud_bigquery_v2_table_schema, file_google_protobuf_duration, file_google_protobuf_struct, file_google_protobuf_wrappers]);

/**
 * An operation within a stage.
 *
 * @generated from message google.cloud.bigquery.v2.ExplainQueryStep
 */
export type ExplainQueryStep = Message<"google.cloud.bigquery.v2.ExplainQueryStep"> & {
  /**
   * Machine-readable operation type.
   *
   * @generated from field: string kind = 1;
   */
  kind: string;

  /**
   * Human-readable description of the step(s).
   *
   * @generated from field: repeated string substeps = 2;
   */
  substeps: string[];
};

/**
 * Describes the message google.cloud.bigquery.v2.ExplainQueryStep.
 * Use `create(ExplainQueryStepSchema)` to create a new message.
 */
export const ExplainQueryStepSchema: GenMessage<ExplainQueryStep> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 0);

/**
 * A single stage of query execution.
 *
 * @generated from message google.cloud.bigquery.v2.ExplainQueryStage
 */
export type ExplainQueryStage = Message<"google.cloud.bigquery.v2.ExplainQueryStage"> & {
  /**
   * Human-readable name for the stage.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Unique ID for the stage within the plan.
   *
   * @generated from field: google.protobuf.Int64Value id = 2;
   */
  id?: bigint;

  /**
   * Stage start time represented as milliseconds since the epoch.
   *
   * @generated from field: int64 start_ms = 3;
   */
  startMs: bigint;

  /**
   * Stage end time represented as milliseconds since the epoch.
   *
   * @generated from field: int64 end_ms = 4;
   */
  endMs: bigint;

  /**
   * IDs for stages that are inputs to this stage.
   *
   * @generated from field: repeated int64 input_stages = 5;
   */
  inputStages: bigint[];

  /**
   * Relative amount of time the average shard spent waiting to be
   * scheduled.
   *
   * @generated from field: google.protobuf.DoubleValue wait_ratio_avg = 6;
   */
  waitRatioAvg?: number;

  /**
   * Milliseconds the average shard spent waiting to be scheduled.
   *
   * @generated from field: google.protobuf.Int64Value wait_ms_avg = 7;
   */
  waitMsAvg?: bigint;

  /**
   * Relative amount of time the slowest shard spent waiting to be
   * scheduled.
   *
   * @generated from field: google.protobuf.DoubleValue wait_ratio_max = 8;
   */
  waitRatioMax?: number;

  /**
   * Milliseconds the slowest shard spent waiting to be scheduled.
   *
   * @generated from field: google.protobuf.Int64Value wait_ms_max = 9;
   */
  waitMsMax?: bigint;

  /**
   * Relative amount of time the average shard spent reading input.
   *
   * @generated from field: google.protobuf.DoubleValue read_ratio_avg = 10;
   */
  readRatioAvg?: number;

  /**
   * Milliseconds the average shard spent reading input.
   *
   * @generated from field: google.protobuf.Int64Value read_ms_avg = 11;
   */
  readMsAvg?: bigint;

  /**
   * Relative amount of time the slowest shard spent reading input.
   *
   * @generated from field: google.protobuf.DoubleValue read_ratio_max = 12;
   */
  readRatioMax?: number;

  /**
   * Milliseconds the slowest shard spent reading input.
   *
   * @generated from field: google.protobuf.Int64Value read_ms_max = 13;
   */
  readMsMax?: bigint;

  /**
   * Relative amount of time the average shard spent on CPU-bound tasks.
   *
   * @generated from field: google.protobuf.DoubleValue compute_ratio_avg = 14;
   */
  computeRatioAvg?: number;

  /**
   * Milliseconds the average shard spent on CPU-bound tasks.
   *
   * @generated from field: google.protobuf.Int64Value compute_ms_avg = 15;
   */
  computeMsAvg?: bigint;

  /**
   * Relative amount of time the slowest shard spent on CPU-bound tasks.
   *
   * @generated from field: google.protobuf.DoubleValue compute_ratio_max = 16;
   */
  computeRatioMax?: number;

  /**
   * Milliseconds the slowest shard spent on CPU-bound tasks.
   *
   * @generated from field: google.protobuf.Int64Value compute_ms_max = 17;
   */
  computeMsMax?: bigint;

  /**
   * Relative amount of time the average shard spent on writing output.
   *
   * @generated from field: google.protobuf.DoubleValue write_ratio_avg = 18;
   */
  writeRatioAvg?: number;

  /**
   * Milliseconds the average shard spent on writing output.
   *
   * @generated from field: google.protobuf.Int64Value write_ms_avg = 19;
   */
  writeMsAvg?: bigint;

  /**
   * Relative amount of time the slowest shard spent on writing output.
   *
   * @generated from field: google.protobuf.DoubleValue write_ratio_max = 20;
   */
  writeRatioMax?: number;

  /**
   * Milliseconds the slowest shard spent on writing output.
   *
   * @generated from field: google.protobuf.Int64Value write_ms_max = 21;
   */
  writeMsMax?: bigint;

  /**
   * Total number of bytes written to shuffle.
   *
   * @generated from field: google.protobuf.Int64Value shuffle_output_bytes = 22;
   */
  shuffleOutputBytes?: bigint;

  /**
   * Total number of bytes written to shuffle and spilled to disk.
   *
   * @generated from field: google.protobuf.Int64Value shuffle_output_bytes_spilled = 23;
   */
  shuffleOutputBytesSpilled?: bigint;

  /**
   * Number of records read into the stage.
   *
   * @generated from field: google.protobuf.Int64Value records_read = 24;
   */
  recordsRead?: bigint;

  /**
   * Number of records written by the stage.
   *
   * @generated from field: google.protobuf.Int64Value records_written = 25;
   */
  recordsWritten?: bigint;

  /**
   * Number of parallel input segments to be processed
   *
   * @generated from field: google.protobuf.Int64Value parallel_inputs = 26;
   */
  parallelInputs?: bigint;

  /**
   * Number of parallel input segments completed.
   *
   * @generated from field: google.protobuf.Int64Value completed_parallel_inputs = 27;
   */
  completedParallelInputs?: bigint;

  /**
   * Current status for this stage.
   *
   * @generated from field: string status = 28;
   */
  status: string;

  /**
   * List of operations within the stage in dependency order (approximately
   * chronological).
   *
   * @generated from field: repeated google.cloud.bigquery.v2.ExplainQueryStep steps = 29;
   */
  steps: ExplainQueryStep[];

  /**
   * Slot-milliseconds used by the stage.
   *
   * @generated from field: google.protobuf.Int64Value slot_ms = 30;
   */
  slotMs?: bigint;

  /**
   * Output only. Compute mode for this stage.
   *
   * @generated from field: google.cloud.bigquery.v2.ExplainQueryStage.ComputeMode compute_mode = 31;
   */
  computeMode: ExplainQueryStage_ComputeMode;
};

/**
 * Describes the message google.cloud.bigquery.v2.ExplainQueryStage.
 * Use `create(ExplainQueryStageSchema)` to create a new message.
 */
export const ExplainQueryStageSchema: GenMessage<ExplainQueryStage> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 1);

/**
 * Indicates the type of compute mode.
 *
 * @generated from enum google.cloud.bigquery.v2.ExplainQueryStage.ComputeMode
 */
export enum ExplainQueryStage_ComputeMode {
  /**
   * ComputeMode type not specified.
   *
   * @generated from enum value: COMPUTE_MODE_UNSPECIFIED = 0;
   */
  COMPUTE_MODE_UNSPECIFIED = 0,

  /**
   * This stage was processed using BigQuery slots.
   *
   * @generated from enum value: BIGQUERY = 1;
   */
  BIGQUERY = 1,

  /**
   * This stage was processed using BI Engine compute.
   *
   * @generated from enum value: BI_ENGINE = 2;
   */
  BI_ENGINE = 2,
}

/**
 * Describes the enum google.cloud.bigquery.v2.ExplainQueryStage.ComputeMode.
 */
export const ExplainQueryStage_ComputeModeSchema: GenEnum<ExplainQueryStage_ComputeMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 1, 0);

/**
 * Summary of the state of query execution at a given time.
 *
 * @generated from message google.cloud.bigquery.v2.QueryTimelineSample
 */
export type QueryTimelineSample = Message<"google.cloud.bigquery.v2.QueryTimelineSample"> & {
  /**
   * Milliseconds elapsed since the start of query execution.
   *
   * @generated from field: google.protobuf.Int64Value elapsed_ms = 1;
   */
  elapsedMs?: bigint;

  /**
   * Cumulative slot-ms consumed by the query.
   *
   * @generated from field: google.protobuf.Int64Value total_slot_ms = 2;
   */
  totalSlotMs?: bigint;

  /**
   * Total units of work remaining for the query. This number can be revised
   * (increased or decreased) while the query is running.
   *
   * @generated from field: google.protobuf.Int64Value pending_units = 3;
   */
  pendingUnits?: bigint;

  /**
   * Total parallel units of work completed by this query.
   *
   * @generated from field: google.protobuf.Int64Value completed_units = 4;
   */
  completedUnits?: bigint;

  /**
   * Total number of active workers. This does not correspond directly to
   * slot usage. This is the largest value observed since the last sample.
   *
   * @generated from field: google.protobuf.Int64Value active_units = 5;
   */
  activeUnits?: bigint;

  /**
   * Units of work that can be scheduled immediately. Providing additional slots
   * for these units of work will accelerate the query, if no other query in
   * the reservation needs additional slots.
   *
   * @generated from field: google.protobuf.Int64Value estimated_runnable_units = 7;
   */
  estimatedRunnableUnits?: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.QueryTimelineSample.
 * Use `create(QueryTimelineSampleSchema)` to create a new message.
 */
export const QueryTimelineSampleSchema: GenMessage<QueryTimelineSample> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 2);

/**
 * The external service cost is a portion of the total cost, these costs are not
 * additive with total_bytes_billed. Moreover, this field only track external
 * service costs that will show up as BigQuery costs (e.g. training BigQuery
 * ML job with google cloud CAIP or Automl Tables services), not other costs
 * which may be accrued by running the query (e.g. reading from Bigtable or
 * Cloud Storage). The external service costs with different billing sku (e.g.
 * CAIP job is charged based on VM usage) are converted to BigQuery
 * billed_bytes and slot_ms with equivalent amount of US dollars. Services may
 * not directly correlate to these metrics, but these are the equivalents for
 * billing purposes.
 * Output only.
 *
 * @generated from message google.cloud.bigquery.v2.ExternalServiceCost
 */
export type ExternalServiceCost = Message<"google.cloud.bigquery.v2.ExternalServiceCost"> & {
  /**
   * External service name.
   *
   * @generated from field: string external_service = 1;
   */
  externalService: string;

  /**
   * External service cost in terms of bigquery bytes processed.
   *
   * @generated from field: google.protobuf.Int64Value bytes_processed = 2;
   */
  bytesProcessed?: bigint;

  /**
   * External service cost in terms of bigquery bytes billed.
   *
   * @generated from field: google.protobuf.Int64Value bytes_billed = 3;
   */
  bytesBilled?: bigint;

  /**
   * External service cost in terms of bigquery slot milliseconds.
   *
   * @generated from field: google.protobuf.Int64Value slot_ms = 4;
   */
  slotMs?: bigint;

  /**
   * Non-preemptable reserved slots used for external job.
   * For example, reserved slots for Cloua AI Platform job are the VM usages
   * converted to BigQuery slot with equivalent mount of price.
   *
   * @generated from field: int64 reserved_slot_count = 5;
   */
  reservedSlotCount: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.ExternalServiceCost.
 * Use `create(ExternalServiceCostSchema)` to create a new message.
 */
export const ExternalServiceCostSchema: GenMessage<ExternalServiceCost> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 3);

/**
 * Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT
 * JOB statistics are populated in JobStatistics4.
 *
 * @generated from message google.cloud.bigquery.v2.ExportDataStatistics
 */
export type ExportDataStatistics = Message<"google.cloud.bigquery.v2.ExportDataStatistics"> & {
  /**
   * Number of destination files generated in case of EXPORT DATA
   * statement only.
   *
   * @generated from field: google.protobuf.Int64Value file_count = 1;
   */
  fileCount?: bigint;

  /**
   * [Alpha] Number of destination rows generated in case of EXPORT DATA
   * statement only.
   *
   * @generated from field: google.protobuf.Int64Value row_count = 2;
   */
  rowCount?: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.ExportDataStatistics.
 * Use `create(ExportDataStatisticsSchema)` to create a new message.
 */
export const ExportDataStatisticsSchema: GenMessage<ExportDataStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 4);

/**
 * Reason why BI Engine didn't accelerate the query (or sub-query).
 *
 * @generated from message google.cloud.bigquery.v2.BiEngineReason
 */
export type BiEngineReason = Message<"google.cloud.bigquery.v2.BiEngineReason"> & {
  /**
   * Output only. High-level BI Engine reason for partial or disabled
   * acceleration
   *
   * @generated from field: google.cloud.bigquery.v2.BiEngineReason.Code code = 1;
   */
  code: BiEngineReason_Code;

  /**
   * Output only. Free form human-readable reason for partial or disabled
   * acceleration.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.BiEngineReason.
 * Use `create(BiEngineReasonSchema)` to create a new message.
 */
export const BiEngineReasonSchema: GenMessage<BiEngineReason> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 5);

/**
 * Indicates the high-level reason for no/partial acceleration
 *
 * @generated from enum google.cloud.bigquery.v2.BiEngineReason.Code
 */
export enum BiEngineReason_Code {
  /**
   * BiEngineReason not specified.
   *
   * @generated from enum value: CODE_UNSPECIFIED = 0;
   */
  CODE_UNSPECIFIED = 0,

  /**
   * No reservation available for BI Engine acceleration.
   *
   * @generated from enum value: NO_RESERVATION = 1;
   */
  NO_RESERVATION = 1,

  /**
   * Not enough memory available for BI Engine acceleration.
   *
   * @generated from enum value: INSUFFICIENT_RESERVATION = 2;
   */
  INSUFFICIENT_RESERVATION = 2,

  /**
   * This particular SQL text is not supported for acceleration by BI Engine.
   *
   * @generated from enum value: UNSUPPORTED_SQL_TEXT = 4;
   */
  UNSUPPORTED_SQL_TEXT = 4,

  /**
   * Input too large for acceleration by BI Engine.
   *
   * @generated from enum value: INPUT_TOO_LARGE = 5;
   */
  INPUT_TOO_LARGE = 5,

  /**
   * Catch-all code for all other cases for partial or disabled acceleration.
   *
   * @generated from enum value: OTHER_REASON = 6;
   */
  OTHER_REASON = 6,

  /**
   * One or more tables were not eligible for BI Engine acceleration.
   *
   * @generated from enum value: TABLE_EXCLUDED = 7;
   */
  TABLE_EXCLUDED = 7,
}

/**
 * Describes the enum google.cloud.bigquery.v2.BiEngineReason.Code.
 */
export const BiEngineReason_CodeSchema: GenEnum<BiEngineReason_Code> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 5, 0);

/**
 * Statistics for a BI Engine specific query.
 * Populated as part of JobStatistics2
 *
 * @generated from message google.cloud.bigquery.v2.BiEngineStatistics
 */
export type BiEngineStatistics = Message<"google.cloud.bigquery.v2.BiEngineStatistics"> & {
  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed
   * (if any).
   *
   * @generated from field: google.cloud.bigquery.v2.BiEngineStatistics.BiEngineMode bi_engine_mode = 1;
   */
  biEngineMode: BiEngineStatistics_BiEngineMode;

  /**
   * Output only. Specifies which mode of BI Engine acceleration was performed
   * (if any).
   *
   * @generated from field: google.cloud.bigquery.v2.BiEngineStatistics.BiEngineAccelerationMode acceleration_mode = 3;
   */
  accelerationMode: BiEngineStatistics_BiEngineAccelerationMode;

  /**
   * In case of DISABLED or PARTIAL bi_engine_mode, these contain the
   * explanatory reasons as to why BI Engine could not accelerate.
   * In case the full query was accelerated, this field is not populated.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.BiEngineReason bi_engine_reasons = 2;
   */
  biEngineReasons: BiEngineReason[];
};

/**
 * Describes the message google.cloud.bigquery.v2.BiEngineStatistics.
 * Use `create(BiEngineStatisticsSchema)` to create a new message.
 */
export const BiEngineStatisticsSchema: GenMessage<BiEngineStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 6);

/**
 * Indicates the type of BI Engine acceleration.
 *
 * @generated from enum google.cloud.bigquery.v2.BiEngineStatistics.BiEngineMode
 */
export enum BiEngineStatistics_BiEngineMode {
  /**
   * BiEngineMode type not specified.
   *
   * @generated from enum value: ACCELERATION_MODE_UNSPECIFIED = 0;
   */
  ACCELERATION_MODE_UNSPECIFIED = 0,

  /**
   * BI Engine disabled the acceleration. bi_engine_reasons
   * specifies a more detailed reason.
   *
   * @generated from enum value: DISABLED = 1;
   */
  DISABLED = 1,

  /**
   * Part of the query was accelerated using BI Engine.
   * See bi_engine_reasons for why parts of the query were not
   * accelerated.
   *
   * @generated from enum value: PARTIAL = 2;
   */
  PARTIAL = 2,

  /**
   * All of the query was accelerated using BI Engine.
   *
   * @generated from enum value: FULL = 3;
   */
  FULL = 3,
}

/**
 * Describes the enum google.cloud.bigquery.v2.BiEngineStatistics.BiEngineMode.
 */
export const BiEngineStatistics_BiEngineModeSchema: GenEnum<BiEngineStatistics_BiEngineMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 6, 0);

/**
 * Indicates the type of BI Engine acceleration.
 *
 * @generated from enum google.cloud.bigquery.v2.BiEngineStatistics.BiEngineAccelerationMode
 */
export enum BiEngineStatistics_BiEngineAccelerationMode {
  /**
   * BiEngineMode type not specified.
   *
   * @generated from enum value: BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED = 0;
   */
  BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED = 0,

  /**
   * BI Engine acceleration was attempted but disabled. bi_engine_reasons
   * specifies a more detailed reason.
   *
   * @generated from enum value: BI_ENGINE_DISABLED = 1;
   */
  BI_ENGINE_DISABLED = 1,

  /**
   * Some inputs were accelerated using BI Engine.
   * See bi_engine_reasons for why parts of the query were not
   * accelerated.
   *
   * @generated from enum value: PARTIAL_INPUT = 2;
   */
  PARTIAL_INPUT = 2,

  /**
   * All of the query inputs were accelerated using BI Engine.
   *
   * @generated from enum value: FULL_INPUT = 3;
   */
  FULL_INPUT = 3,

  /**
   * All of the query was accelerated using BI Engine.
   *
   * @generated from enum value: FULL_QUERY = 4;
   */
  FULL_QUERY = 4,
}

/**
 * Describes the enum google.cloud.bigquery.v2.BiEngineStatistics.BiEngineAccelerationMode.
 */
export const BiEngineStatistics_BiEngineAccelerationModeSchema: GenEnum<BiEngineStatistics_BiEngineAccelerationMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 6, 1);

/**
 * Reason about why no search index was used in the search query (or
 * sub-query).
 *
 * @generated from message google.cloud.bigquery.v2.IndexUnusedReason
 */
export type IndexUnusedReason = Message<"google.cloud.bigquery.v2.IndexUnusedReason"> & {
  /**
   * Specifies the high-level reason for the scenario when no search index was
   * used.
   *
   * @generated from field: optional google.cloud.bigquery.v2.IndexUnusedReason.Code code = 1;
   */
  code?: IndexUnusedReason_Code;

  /**
   * Free form human-readable reason for the scenario when no search index was
   * used.
   *
   * @generated from field: optional string message = 2;
   */
  message?: string;

  /**
   * Specifies the base table involved in the reason that no search index was
   * used.
   *
   * @generated from field: optional google.cloud.bigquery.v2.TableReference base_table = 3;
   */
  baseTable?: TableReference;

  /**
   * Specifies the name of the unused search index, if available.
   *
   * @generated from field: optional string index_name = 4;
   */
  indexName?: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.IndexUnusedReason.
 * Use `create(IndexUnusedReasonSchema)` to create a new message.
 */
export const IndexUnusedReasonSchema: GenMessage<IndexUnusedReason> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 7);

/**
 * Indicates the high-level reason for the scenario when no search index was
 * used.
 *
 * @generated from enum google.cloud.bigquery.v2.IndexUnusedReason.Code
 */
export enum IndexUnusedReason_Code {
  /**
   * Code not specified.
   *
   * @generated from enum value: CODE_UNSPECIFIED = 0;
   */
  CODE_UNSPECIFIED = 0,

  /**
   * Indicates the search index configuration has not been created.
   *
   * @generated from enum value: INDEX_CONFIG_NOT_AVAILABLE = 1;
   */
  INDEX_CONFIG_NOT_AVAILABLE = 1,

  /**
   * Indicates the search index creation has not been completed.
   *
   * @generated from enum value: PENDING_INDEX_CREATION = 2;
   */
  PENDING_INDEX_CREATION = 2,

  /**
   * Indicates the base table has been truncated (rows have been removed
   * from table with TRUNCATE TABLE statement) since the last time the search
   * index was refreshed.
   *
   * @generated from enum value: BASE_TABLE_TRUNCATED = 3;
   */
  BASE_TABLE_TRUNCATED = 3,

  /**
   * Indicates the search index configuration has been changed since the last
   * time the search index was refreshed.
   *
   * @generated from enum value: INDEX_CONFIG_MODIFIED = 4;
   */
  INDEX_CONFIG_MODIFIED = 4,

  /**
   * Indicates the search query accesses data at a timestamp before the last
   * time the search index was refreshed.
   *
   * @generated from enum value: TIME_TRAVEL_QUERY = 5;
   */
  TIME_TRAVEL_QUERY = 5,

  /**
   * Indicates the usage of search index will not contribute to any pruning
   * improvement for the search function, e.g. when the search predicate is in
   * a disjunction with other non-search predicates.
   *
   * @generated from enum value: NO_PRUNING_POWER = 6;
   */
  NO_PRUNING_POWER = 6,

  /**
   * Indicates the search index does not cover all fields in the search
   * function.
   *
   * @generated from enum value: UNINDEXED_SEARCH_FIELDS = 7;
   */
  UNINDEXED_SEARCH_FIELDS = 7,

  /**
   * Indicates the search index does not support the given search query
   * pattern.
   *
   * @generated from enum value: UNSUPPORTED_SEARCH_PATTERN = 8;
   */
  UNSUPPORTED_SEARCH_PATTERN = 8,

  /**
   * Indicates the query has been optimized by using a materialized view.
   *
   * @generated from enum value: OPTIMIZED_WITH_MATERIALIZED_VIEW = 9;
   */
  OPTIMIZED_WITH_MATERIALIZED_VIEW = 9,

  /**
   * Indicates the query has been secured by data masking, and thus search
   * indexes are not applicable.
   *
   * @generated from enum value: SECURED_BY_DATA_MASKING = 11;
   */
  SECURED_BY_DATA_MASKING = 11,

  /**
   * Indicates that the search index and the search function call do not
   * have the same text analyzer.
   *
   * @generated from enum value: MISMATCHED_TEXT_ANALYZER = 12;
   */
  MISMATCHED_TEXT_ANALYZER = 12,

  /**
   * Indicates the base table is too small (below a certain threshold).
   * The index does not provide noticeable search performance gains
   * when the base table is too small.
   *
   * @generated from enum value: BASE_TABLE_TOO_SMALL = 13;
   */
  BASE_TABLE_TOO_SMALL = 13,

  /**
   * Indicates that the total size of indexed base tables in your organization
   * exceeds your region's limit and the index is not used in the query. To
   * index larger base tables, you can
   * <a
   * href="https://cloud.google.com/bigquery/docs/search-index#use_your_own_reservation">use
   * your own reservation</a> for index-management jobs.
   *
   * @generated from enum value: BASE_TABLE_TOO_LARGE = 14;
   */
  BASE_TABLE_TOO_LARGE = 14,

  /**
   * Indicates that the estimated performance gain from using the search index
   * is too low for the given search query.
   *
   * @generated from enum value: ESTIMATED_PERFORMANCE_GAIN_TOO_LOW = 15;
   */
  ESTIMATED_PERFORMANCE_GAIN_TOO_LOW = 15,

  /**
   * Indicates that search indexes can not be used for search query with
   * STANDARD edition.
   *
   * @generated from enum value: NOT_SUPPORTED_IN_STANDARD_EDITION = 17;
   */
  NOT_SUPPORTED_IN_STANDARD_EDITION = 17,

  /**
   * Indicates that an option in the search function that cannot make use of
   * the index has been selected.
   *
   * @generated from enum value: INDEX_SUPPRESSED_BY_FUNCTION_OPTION = 18;
   */
  INDEX_SUPPRESSED_BY_FUNCTION_OPTION = 18,

  /**
   * Indicates that the query was cached, and thus the search index was not
   * used.
   *
   * @generated from enum value: QUERY_CACHE_HIT = 19;
   */
  QUERY_CACHE_HIT = 19,

  /**
   * The index cannot be used in the search query because it is stale.
   *
   * @generated from enum value: STALE_INDEX = 20;
   */
  STALE_INDEX = 20,

  /**
   * Indicates an internal error that causes the search index to be unused.
   *
   * @generated from enum value: INTERNAL_ERROR = 10;
   */
  INTERNAL_ERROR = 10,

  /**
   * Indicates that the reason search indexes cannot be used in the query is
   * not covered by any of the other IndexUnusedReason options.
   *
   * @generated from enum value: OTHER_REASON = 16;
   */
  OTHER_REASON = 16,
}

/**
 * Describes the enum google.cloud.bigquery.v2.IndexUnusedReason.Code.
 */
export const IndexUnusedReason_CodeSchema: GenEnum<IndexUnusedReason_Code> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 7, 0);

/**
 * Statistics for a search query.
 * Populated as part of JobStatistics2.
 *
 * @generated from message google.cloud.bigquery.v2.SearchStatistics
 */
export type SearchStatistics = Message<"google.cloud.bigquery.v2.SearchStatistics"> & {
  /**
   * Specifies the index usage mode for the query.
   *
   * @generated from field: google.cloud.bigquery.v2.SearchStatistics.IndexUsageMode index_usage_mode = 1;
   */
  indexUsageMode: SearchStatistics_IndexUsageMode;

  /**
   * When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
   * why indexes were not used in all or part of the search query. If
   * `indexUsageMode` is `FULLY_USED`, this field is not populated.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.IndexUnusedReason index_unused_reasons = 2;
   */
  indexUnusedReasons: IndexUnusedReason[];
};

/**
 * Describes the message google.cloud.bigquery.v2.SearchStatistics.
 * Use `create(SearchStatisticsSchema)` to create a new message.
 */
export const SearchStatisticsSchema: GenMessage<SearchStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 8);

/**
 * Indicates the type of search index usage in the entire search query.
 *
 * @generated from enum google.cloud.bigquery.v2.SearchStatistics.IndexUsageMode
 */
export enum SearchStatistics_IndexUsageMode {
  /**
   * Index usage mode not specified.
   *
   * @generated from enum value: INDEX_USAGE_MODE_UNSPECIFIED = 0;
   */
  INDEX_USAGE_MODE_UNSPECIFIED = 0,

  /**
   * No search indexes were used in the search query. See
   * [`indexUnusedReasons`]
   * (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
   * for detailed reasons.
   *
   * @generated from enum value: UNUSED = 1;
   */
  UNUSED = 1,

  /**
   * Part of the search query used search indexes. See [`indexUnusedReasons`]
   * (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
   * for why other parts of the query did not use search indexes.
   *
   * @generated from enum value: PARTIALLY_USED = 2;
   */
  PARTIALLY_USED = 2,

  /**
   * The entire search query used search indexes.
   *
   * @generated from enum value: FULLY_USED = 4;
   */
  FULLY_USED = 4,
}

/**
 * Describes the enum google.cloud.bigquery.v2.SearchStatistics.IndexUsageMode.
 */
export const SearchStatistics_IndexUsageModeSchema: GenEnum<SearchStatistics_IndexUsageMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 8, 0);

/**
 * Statistics for a vector search query.
 * Populated as part of JobStatistics2.
 *
 * @generated from message google.cloud.bigquery.v2.VectorSearchStatistics
 */
export type VectorSearchStatistics = Message<"google.cloud.bigquery.v2.VectorSearchStatistics"> & {
  /**
   * Specifies the index usage mode for the query.
   *
   * @generated from field: google.cloud.bigquery.v2.VectorSearchStatistics.IndexUsageMode index_usage_mode = 1;
   */
  indexUsageMode: VectorSearchStatistics_IndexUsageMode;

  /**
   * When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains
   * why indexes were not used in all or part of the vector search query. If
   * `indexUsageMode` is `FULLY_USED`, this field is not populated.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.IndexUnusedReason index_unused_reasons = 2;
   */
  indexUnusedReasons: IndexUnusedReason[];
};

/**
 * Describes the message google.cloud.bigquery.v2.VectorSearchStatistics.
 * Use `create(VectorSearchStatisticsSchema)` to create a new message.
 */
export const VectorSearchStatisticsSchema: GenMessage<VectorSearchStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 9);

/**
 * Indicates the type of vector index usage in the entire vector search query.
 *
 * @generated from enum google.cloud.bigquery.v2.VectorSearchStatistics.IndexUsageMode
 */
export enum VectorSearchStatistics_IndexUsageMode {
  /**
   * Index usage mode not specified.
   *
   * @generated from enum value: INDEX_USAGE_MODE_UNSPECIFIED = 0;
   */
  INDEX_USAGE_MODE_UNSPECIFIED = 0,

  /**
   * No vector indexes were used in the vector search query. See
   * [`indexUnusedReasons`]
   * (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
   * for detailed reasons.
   *
   * @generated from enum value: UNUSED = 1;
   */
  UNUSED = 1,

  /**
   * Part of the vector search query used vector indexes. See
   * [`indexUnusedReasons`]
   * (/bigquery/docs/reference/rest/v2/Job#IndexUnusedReason)
   * for why other parts of the query did not use vector indexes.
   *
   * @generated from enum value: PARTIALLY_USED = 2;
   */
  PARTIALLY_USED = 2,

  /**
   * The entire vector search query used vector indexes.
   *
   * @generated from enum value: FULLY_USED = 4;
   */
  FULLY_USED = 4,
}

/**
 * Describes the enum google.cloud.bigquery.v2.VectorSearchStatistics.IndexUsageMode.
 */
export const VectorSearchStatistics_IndexUsageModeSchema: GenEnum<VectorSearchStatistics_IndexUsageMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 9, 0);

/**
 * Query optimization information for a QUERY job.
 *
 * @generated from message google.cloud.bigquery.v2.QueryInfo
 */
export type QueryInfo = Message<"google.cloud.bigquery.v2.QueryInfo"> & {
  /**
   * Output only. Information about query optimizations.
   *
   * @generated from field: google.protobuf.Struct optimization_details = 2;
   */
  optimizationDetails?: JsonObject;
};

/**
 * Describes the message google.cloud.bigquery.v2.QueryInfo.
 * Use `create(QueryInfoSchema)` to create a new message.
 */
export const QueryInfoSchema: GenMessage<QueryInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 10);

/**
 * Statistics for a LOAD query.
 *
 * @generated from message google.cloud.bigquery.v2.LoadQueryStatistics
 */
export type LoadQueryStatistics = Message<"google.cloud.bigquery.v2.LoadQueryStatistics"> & {
  /**
   * Output only. Number of source files in a LOAD query.
   *
   * @generated from field: google.protobuf.Int64Value input_files = 1;
   */
  inputFiles?: bigint;

  /**
   * Output only. Number of bytes of source data in a LOAD query.
   *
   * @generated from field: google.protobuf.Int64Value input_file_bytes = 2;
   */
  inputFileBytes?: bigint;

  /**
   * Output only. Number of rows imported in a LOAD query.
   * Note that while a LOAD query is in the running state, this value may
   * change.
   *
   * @generated from field: google.protobuf.Int64Value output_rows = 3;
   */
  outputRows?: bigint;

  /**
   * Output only. Size of the loaded data in bytes. Note that while a LOAD query
   * is in the running state, this value may change.
   *
   * @generated from field: google.protobuf.Int64Value output_bytes = 4;
   */
  outputBytes?: bigint;

  /**
   * Output only. The number of bad records encountered while processing a LOAD
   * query. Note that if the job has failed because of more bad records
   * encountered than the maximum allowed in the load job configuration, then
   * this number can be less than the total number of bad records present in the
   * input data.
   *
   * @generated from field: google.protobuf.Int64Value bad_records = 5;
   */
  badRecords?: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.LoadQueryStatistics.
 * Use `create(LoadQueryStatisticsSchema)` to create a new message.
 */
export const LoadQueryStatisticsSchema: GenMessage<LoadQueryStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 11);

/**
 * Statistics for a query job.
 *
 * @generated from message google.cloud.bigquery.v2.JobStatistics2
 */
export type JobStatistics2 = Message<"google.cloud.bigquery.v2.JobStatistics2"> & {
  /**
   * Output only. Describes execution plan for the query.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.ExplainQueryStage query_plan = 1;
   */
  queryPlan: ExplainQueryStage[];

  /**
   * Output only. The original estimate of bytes processed for the job.
   *
   * @generated from field: google.protobuf.Int64Value estimated_bytes_processed = 2;
   */
  estimatedBytesProcessed?: bigint;

  /**
   * Output only. Describes a timeline of job execution.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.QueryTimelineSample timeline = 3;
   */
  timeline: QueryTimelineSample[];

  /**
   * Output only. Total number of partitions processed from all partitioned
   * tables referenced in the job.
   *
   * @generated from field: google.protobuf.Int64Value total_partitions_processed = 4;
   */
  totalPartitionsProcessed?: bigint;

  /**
   * Output only. Total bytes processed for the job.
   *
   * @generated from field: google.protobuf.Int64Value total_bytes_processed = 5;
   */
  totalBytesProcessed?: bigint;

  /**
   * Output only. For dry-run jobs, totalBytesProcessed is an estimate and this
   * field specifies the accuracy of the estimate. Possible values can be:
   * UNKNOWN: accuracy of the estimate is unknown.
   * PRECISE: estimate is precise.
   * LOWER_BOUND: estimate is lower bound of what the query would cost.
   * UPPER_BOUND: estimate is upper bound of what the query would cost.
   *
   * @generated from field: string total_bytes_processed_accuracy = 21;
   */
  totalBytesProcessedAccuracy: string;

  /**
   * Output only. If the project is configured to use on-demand pricing,
   * then this field contains the total bytes billed for the job.
   * If the project is configured to use flat-rate pricing, then you are
   * not billed for bytes and this field is informational only.
   *
   * @generated from field: google.protobuf.Int64Value total_bytes_billed = 6;
   */
  totalBytesBilled?: bigint;

  /**
   * Output only. Billing tier for the job. This is a BigQuery-specific concept
   * which is not related to the Google Cloud notion of "free tier". The value
   * here is a measure of the query's resource consumption relative to the
   * amount of data scanned. For on-demand queries, the limit is 100, and all
   * queries within this limit are billed at the standard on-demand rates.
   * On-demand queries that exceed this limit will fail with a
   * billingTierLimitExceeded error.
   *
   * @generated from field: google.protobuf.Int32Value billing_tier = 7;
   */
  billingTier?: number;

  /**
   * Output only. Slot-milliseconds for the job.
   *
   * @generated from field: google.protobuf.Int64Value total_slot_ms = 8;
   */
  totalSlotMs?: bigint;

  /**
   * Output only. Whether the query result was fetched from the query cache.
   *
   * @generated from field: google.protobuf.BoolValue cache_hit = 9;
   */
  cacheHit?: boolean;

  /**
   * Output only. Referenced tables for the job. Queries that reference more
   * than 50 tables will not have a complete list.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.TableReference referenced_tables = 10;
   */
  referencedTables: TableReference[];

  /**
   * Output only. Referenced routines for the job.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.RoutineReference referenced_routines = 24;
   */
  referencedRoutines: RoutineReference[];

  /**
   * Output only. The schema of the results. Present only for successful dry
   * run of non-legacy SQL queries.
   *
   * @generated from field: google.cloud.bigquery.v2.TableSchema schema = 11;
   */
  schema?: TableSchema;

  /**
   * Output only. The number of rows affected by a DML statement. Present
   * only for DML statements INSERT, UPDATE or DELETE.
   *
   * @generated from field: google.protobuf.Int64Value num_dml_affected_rows = 12;
   */
  numDmlAffectedRows?: bigint;

  /**
   * Output only. Detailed statistics for DML statements INSERT, UPDATE, DELETE,
   * MERGE or TRUNCATE.
   *
   * @generated from field: google.cloud.bigquery.v2.DmlStats dml_stats = 32;
   */
  dmlStats?: DmlStats;

  /**
   * Output only. GoogleSQL only: list of undeclared query
   * parameters detected during a dry run validation.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.QueryParameter undeclared_query_parameters = 13;
   */
  undeclaredQueryParameters: QueryParameter[];

  /**
   * Output only. The type of query statement, if valid.
   * Possible values:
   *
   * * `SELECT`:
   * [`SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#select_list)
   * statement.
   * * `ASSERT`:
   * [`ASSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/debugging-statements#assert)
   * statement.
   * * `INSERT`:
   * [`INSERT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement)
   * statement.
   * * `UPDATE`:
   * [`UPDATE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/query-syntax#update_statement)
   * statement.
   * * `DELETE`:
   * [`DELETE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
   * statement.
   * * `MERGE`:
   * [`MERGE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-manipulation-language)
   * statement.
   * * `CREATE_TABLE`: [`CREATE
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement)
   * statement, without `AS SELECT`.
   * * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS
   * SELECT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#query_statement)
   * statement.
   * * `CREATE_VIEW`: [`CREATE
   * VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement)
   * statement.
   * * `CREATE_MODEL`: [`CREATE
   * MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement)
   * statement.
   * * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED
   * VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement)
   * statement.
   * * `CREATE_FUNCTION`: [`CREATE
   * FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement)
   * statement.
   * * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE
   * FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement)
   * statement.
   * * `CREATE_PROCEDURE`: [`CREATE
   * PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure)
   * statement.
   * * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS
   * POLICY`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement)
   * statement.
   * * `CREATE_SCHEMA`: [`CREATE
   * SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement)
   * statement.
   * * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement)
   * statement.
   * * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH
   * INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement)
   * statement.
   * * `DROP_TABLE`: [`DROP
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement)
   * statement.
   * * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement)
   * statement.
   * * `DROP_VIEW`: [`DROP
   * VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement)
   * statement.
   * * `DROP_MODEL`: [`DROP
   * MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model)
   * statement.
   * * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED
   *  VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement)
   * statement.
   * * `DROP_FUNCTION` : [`DROP
   * FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement)
   * statement.
   * * `DROP_TABLE_FUNCTION` : [`DROP TABLE
   * FUNCTION`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function)
   * statement.
   * * `DROP_PROCEDURE`: [`DROP
   * PROCEDURE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement)
   * statement.
   * * `DROP_SEARCH_INDEX`: [`DROP SEARCH
   * INDEX`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index)
   * statement.
   * * `DROP_SCHEMA`: [`DROP
   * SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement)
   * statement.
   * * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement)
   * statement.
   * * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS
   * POLICY|POLICIES`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement)
   * statement.
   * * `ALTER_TABLE`: [`ALTER
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement)
   * statement.
   * * `ALTER_VIEW`: [`ALTER
   * VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement)
   * statement.
   * * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED
   * VIEW`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement)
   * statement.
   * * `ALTER_SCHEMA`: [`ALTER
   * SCHEMA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement)
   * statement.
   * * `SCRIPT`:
   * [`SCRIPT`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language).
   * * `TRUNCATE_TABLE`: [`TRUNCATE
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement)
   * statement.
   * * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL
   * TABLE`](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement)
   * statement.
   * * `EXPORT_DATA`: [`EXPORT
   * DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#export_data_statement)
   * statement.
   * * `EXPORT_MODEL`: [`EXPORT
   * MODEL`](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model)
   * statement.
   * * `LOAD_DATA`: [`LOAD
   * DATA`](https://cloud.google.com/bigquery/docs/reference/standard-sql/other-statements#load_data_statement)
   * statement.
   * * `CALL`:
   * [`CALL`](https://cloud.google.com/bigquery/docs/reference/standard-sql/procedural-language#call)
   * statement.
   *
   * @generated from field: string statement_type = 14;
   */
  statementType: string;

  /**
   * Output only. The DDL operation performed, possibly
   * dependent on the pre-existence of the DDL target.
   *
   * @generated from field: string ddl_operation_performed = 15;
   */
  ddlOperationPerformed: string;

  /**
   * Output only. The DDL target table. Present only for
   * CREATE/DROP TABLE/VIEW and DROP ALL ROW ACCESS POLICIES queries.
   *
   * @generated from field: google.cloud.bigquery.v2.TableReference ddl_target_table = 16;
   */
  ddlTargetTable?: TableReference;

  /**
   * Output only. The table after rename. Present only for ALTER TABLE RENAME TO
   * query.
   *
   * @generated from field: google.cloud.bigquery.v2.TableReference ddl_destination_table = 31;
   */
  ddlDestinationTable?: TableReference;

  /**
   * Output only. The DDL target row access policy. Present only for
   * CREATE/DROP ROW ACCESS POLICY queries.
   *
   * @generated from field: google.cloud.bigquery.v2.RowAccessPolicyReference ddl_target_row_access_policy = 26;
   */
  ddlTargetRowAccessPolicy?: RowAccessPolicyReference;

  /**
   * Output only. The number of row access policies affected by a DDL statement.
   * Present only for DROP ALL ROW ACCESS POLICIES queries.
   *
   * @generated from field: google.protobuf.Int64Value ddl_affected_row_access_policy_count = 27;
   */
  ddlAffectedRowAccessPolicyCount?: bigint;

  /**
   * Output only. [Beta] The DDL target routine. Present only for
   * CREATE/DROP FUNCTION/PROCEDURE queries.
   *
   * @generated from field: google.cloud.bigquery.v2.RoutineReference ddl_target_routine = 22;
   */
  ddlTargetRoutine?: RoutineReference;

  /**
   * Output only. The DDL target dataset. Present only for CREATE/ALTER/DROP
   * SCHEMA(dataset) queries.
   *
   * @generated from field: google.cloud.bigquery.v2.DatasetReference ddl_target_dataset = 30;
   */
  ddlTargetDataset?: DatasetReference;

  /**
   * Output only. Statistics of a BigQuery ML training job.
   *
   * @generated from field: google.cloud.bigquery.v2.MlStatistics ml_statistics = 23;
   */
  mlStatistics?: MlStatistics;

  /**
   * Output only. Stats for EXPORT DATA statement.
   *
   * @generated from field: google.cloud.bigquery.v2.ExportDataStatistics export_data_statistics = 25;
   */
  exportDataStatistics?: ExportDataStatistics;

  /**
   * Output only. Job cost breakdown as bigquery internal cost and external
   * service costs.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.ExternalServiceCost external_service_costs = 28;
   */
  externalServiceCosts: ExternalServiceCost[];

  /**
   * Output only. BI Engine specific Statistics.
   *
   * @generated from field: google.cloud.bigquery.v2.BiEngineStatistics bi_engine_statistics = 29;
   */
  biEngineStatistics?: BiEngineStatistics;

  /**
   * Output only. Statistics for a LOAD query.
   *
   * @generated from field: google.cloud.bigquery.v2.LoadQueryStatistics load_query_statistics = 33;
   */
  loadQueryStatistics?: LoadQueryStatistics;

  /**
   * Output only. Referenced table for DCL statement.
   *
   * @generated from field: google.cloud.bigquery.v2.TableReference dcl_target_table = 34;
   */
  dclTargetTable?: TableReference;

  /**
   * Output only. Referenced view for DCL statement.
   *
   * @generated from field: google.cloud.bigquery.v2.TableReference dcl_target_view = 35;
   */
  dclTargetView?: TableReference;

  /**
   * Output only. Referenced dataset for DCL statement.
   *
   * @generated from field: google.cloud.bigquery.v2.DatasetReference dcl_target_dataset = 36;
   */
  dclTargetDataset?: DatasetReference;

  /**
   * Output only. Search query specific statistics.
   *
   * @generated from field: google.cloud.bigquery.v2.SearchStatistics search_statistics = 37;
   */
  searchStatistics?: SearchStatistics;

  /**
   * Output only. Vector Search query specific statistics.
   *
   * @generated from field: google.cloud.bigquery.v2.VectorSearchStatistics vector_search_statistics = 44;
   */
  vectorSearchStatistics?: VectorSearchStatistics;

  /**
   * Output only. Performance insights.
   *
   * @generated from field: google.cloud.bigquery.v2.PerformanceInsights performance_insights = 38;
   */
  performanceInsights?: PerformanceInsights;

  /**
   * Output only. Query optimization information for a QUERY job.
   *
   * @generated from field: google.cloud.bigquery.v2.QueryInfo query_info = 39;
   */
  queryInfo?: QueryInfo;

  /**
   * Output only. Statistics of a Spark procedure job.
   *
   * @generated from field: google.cloud.bigquery.v2.SparkStatistics spark_statistics = 40;
   */
  sparkStatistics?: SparkStatistics;

  /**
   * Output only. Total bytes transferred for cross-cloud queries such as Cross
   * Cloud Transfer and CREATE TABLE AS SELECT (CTAS).
   *
   * @generated from field: google.protobuf.Int64Value transferred_bytes = 41;
   */
  transferredBytes?: bigint;

  /**
   * Output only. Statistics of materialized views of a query job.
   *
   * @generated from field: google.cloud.bigquery.v2.MaterializedViewStatistics materialized_view_statistics = 42;
   */
  materializedViewStatistics?: MaterializedViewStatistics;

  /**
   * Output only. Statistics of metadata cache usage in a query for BigLake
   * tables.
   *
   * @generated from field: google.cloud.bigquery.v2.MetadataCacheStatistics metadata_cache_statistics = 43;
   */
  metadataCacheStatistics?: MetadataCacheStatistics;
};

/**
 * Describes the message google.cloud.bigquery.v2.JobStatistics2.
 * Use `create(JobStatistics2Schema)` to create a new message.
 */
export const JobStatistics2Schema: GenMessage<JobStatistics2> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 12);

/**
 * Statistics for a load job.
 *
 * @generated from message google.cloud.bigquery.v2.JobStatistics3
 */
export type JobStatistics3 = Message<"google.cloud.bigquery.v2.JobStatistics3"> & {
  /**
   * Output only. Number of source files in a load job.
   *
   * @generated from field: google.protobuf.Int64Value input_files = 1;
   */
  inputFiles?: bigint;

  /**
   * Output only. Number of bytes of source data in a load job.
   *
   * @generated from field: google.protobuf.Int64Value input_file_bytes = 2;
   */
  inputFileBytes?: bigint;

  /**
   * Output only. Number of rows imported in a load job.
   * Note that while an import job is in the running state, this
   * value may change.
   *
   * @generated from field: google.protobuf.Int64Value output_rows = 3;
   */
  outputRows?: bigint;

  /**
   * Output only. Size of the loaded data in bytes. Note
   * that while a load job is in the running state, this value may change.
   *
   * @generated from field: google.protobuf.Int64Value output_bytes = 4;
   */
  outputBytes?: bigint;

  /**
   * Output only. The number of bad records encountered. Note that if the job
   * has failed because of more bad records encountered than the maximum
   * allowed in the load job configuration, then this number can be less than
   * the total number of bad records present in the input data.
   *
   * @generated from field: google.protobuf.Int64Value bad_records = 5;
   */
  badRecords?: bigint;

  /**
   * Output only. Describes a timeline of job execution.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.QueryTimelineSample timeline = 7;
   */
  timeline: QueryTimelineSample[];
};

/**
 * Describes the message google.cloud.bigquery.v2.JobStatistics3.
 * Use `create(JobStatistics3Schema)` to create a new message.
 */
export const JobStatistics3Schema: GenMessage<JobStatistics3> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 13);

/**
 * Statistics for an extract job.
 *
 * @generated from message google.cloud.bigquery.v2.JobStatistics4
 */
export type JobStatistics4 = Message<"google.cloud.bigquery.v2.JobStatistics4"> & {
  /**
   * Output only. Number of files per destination URI or URI pattern
   * specified in the extract configuration. These values will be in the same
   * order as the URIs specified in the 'destinationUris' field.
   *
   * @generated from field: repeated int64 destination_uri_file_counts = 1;
   */
  destinationUriFileCounts: bigint[];

  /**
   * Output only. Number of user bytes extracted into the result. This is the
   * byte count as computed by BigQuery for billing purposes
   * and doesn't have any relationship with the number of actual
   * result bytes extracted in the desired format.
   *
   * @generated from field: google.protobuf.Int64Value input_bytes = 2;
   */
  inputBytes?: bigint;

  /**
   * Output only. Describes a timeline of job execution.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.QueryTimelineSample timeline = 3;
   */
  timeline: QueryTimelineSample[];
};

/**
 * Describes the message google.cloud.bigquery.v2.JobStatistics4.
 * Use `create(JobStatistics4Schema)` to create a new message.
 */
export const JobStatistics4Schema: GenMessage<JobStatistics4> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 14);

/**
 * Statistics for a copy job.
 *
 * @generated from message google.cloud.bigquery.v2.CopyJobStatistics
 */
export type CopyJobStatistics = Message<"google.cloud.bigquery.v2.CopyJobStatistics"> & {
  /**
   * Output only. Number of rows copied to the destination table.
   *
   * @generated from field: google.protobuf.Int64Value copied_rows = 1;
   */
  copiedRows?: bigint;

  /**
   * Output only. Number of logical bytes copied to the destination table.
   *
   * @generated from field: google.protobuf.Int64Value copied_logical_bytes = 2;
   */
  copiedLogicalBytes?: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.CopyJobStatistics.
 * Use `create(CopyJobStatisticsSchema)` to create a new message.
 */
export const CopyJobStatisticsSchema: GenMessage<CopyJobStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 15);

/**
 * Job statistics specific to a BigQuery ML training job.
 *
 * @generated from message google.cloud.bigquery.v2.MlStatistics
 */
export type MlStatistics = Message<"google.cloud.bigquery.v2.MlStatistics"> & {
  /**
   * Output only. Maximum number of iterations specified as max_iterations in
   * the 'CREATE MODEL' query. The actual number of iterations may be less than
   * this number due to early stop.
   *
   * @generated from field: int64 max_iterations = 1;
   */
  maxIterations: bigint;

  /**
   * Results for all completed iterations.
   * Empty for [hyperparameter tuning
   * jobs](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
   *
   * @generated from field: repeated google.cloud.bigquery.v2.Model.TrainingRun.IterationResult iteration_results = 2;
   */
  iterationResults: Model_TrainingRun_IterationResult[];

  /**
   * Output only. The type of the model that is being trained.
   *
   * @generated from field: google.cloud.bigquery.v2.Model.ModelType model_type = 3;
   */
  modelType: Model_ModelType;

  /**
   * Output only. Training type of the job.
   *
   * @generated from field: google.cloud.bigquery.v2.MlStatistics.TrainingType training_type = 4;
   */
  trainingType: MlStatistics_TrainingType;

  /**
   * Output only. Trials of a [hyperparameter tuning
   * job](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview)
   * sorted by trial_id.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.Model.HparamTuningTrial hparam_trials = 5;
   */
  hparamTrials: Model_HparamTuningTrial[];
};

/**
 * Describes the message google.cloud.bigquery.v2.MlStatistics.
 * Use `create(MlStatisticsSchema)` to create a new message.
 */
export const MlStatisticsSchema: GenMessage<MlStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 16);

/**
 * Training type.
 *
 * @generated from enum google.cloud.bigquery.v2.MlStatistics.TrainingType
 */
export enum MlStatistics_TrainingType {
  /**
   * Unspecified training type.
   *
   * @generated from enum value: TRAINING_TYPE_UNSPECIFIED = 0;
   */
  TRAINING_TYPE_UNSPECIFIED = 0,

  /**
   * Single training with fixed parameter space.
   *
   * @generated from enum value: SINGLE_TRAINING = 1;
   */
  SINGLE_TRAINING = 1,

  /**
   * [Hyperparameter tuning
   * training](https://cloud.google.com/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).
   *
   * @generated from enum value: HPARAM_TUNING = 2;
   */
  HPARAM_TUNING = 2,
}

/**
 * Describes the enum google.cloud.bigquery.v2.MlStatistics.TrainingType.
 */
export const MlStatistics_TrainingTypeSchema: GenEnum<MlStatistics_TrainingType> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 16, 0);

/**
 * Job statistics specific to the child job of a script.
 *
 * @generated from message google.cloud.bigquery.v2.ScriptStatistics
 */
export type ScriptStatistics = Message<"google.cloud.bigquery.v2.ScriptStatistics"> & {
  /**
   * Whether this child job was a statement or expression.
   *
   * @generated from field: google.cloud.bigquery.v2.ScriptStatistics.EvaluationKind evaluation_kind = 1;
   */
  evaluationKind: ScriptStatistics_EvaluationKind;

  /**
   * Stack trace showing the line/column/procedure name of each frame on the
   * stack at the point where the current evaluation happened. The leaf frame
   * is first, the primary script is last. Never empty.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame stack_frames = 2;
   */
  stackFrames: ScriptStatistics_ScriptStackFrame[];
};

/**
 * Describes the message google.cloud.bigquery.v2.ScriptStatistics.
 * Use `create(ScriptStatisticsSchema)` to create a new message.
 */
export const ScriptStatisticsSchema: GenMessage<ScriptStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 17);

/**
 * Represents the location of the statement/expression being evaluated.
 * Line and column numbers are defined as follows:
 *
 * - Line and column numbers start with one.  That is, line 1 column 1 denotes
 *   the start of the script.
 * - When inside a stored procedure, all line/column numbers are relative
 *   to the procedure body, not the script in which the procedure was defined.
 * - Start/end positions exclude leading/trailing comments and whitespace.
 *   The end position always ends with a ";", when present.
 * - Multi-byte Unicode characters are treated as just one column.
 * - If the original script (or procedure definition) contains TAB characters,
 *   a tab "snaps" the indentation forward to the nearest multiple of 8
 *   characters, plus 1. For example, a TAB on column 1, 2, 3, 4, 5, 6 , or 8
 *   will advance the next character to column 9.  A TAB on column 9, 10, 11,
 *   12, 13, 14, 15, or 16 will advance the next character to column 17.
 *
 * @generated from message google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame
 */
export type ScriptStatistics_ScriptStackFrame = Message<"google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame"> & {
  /**
   * Output only. One-based start line.
   *
   * @generated from field: int32 start_line = 1;
   */
  startLine: number;

  /**
   * Output only. One-based start column.
   *
   * @generated from field: int32 start_column = 2;
   */
  startColumn: number;

  /**
   * Output only. One-based end line.
   *
   * @generated from field: int32 end_line = 3;
   */
  endLine: number;

  /**
   * Output only. One-based end column.
   *
   * @generated from field: int32 end_column = 4;
   */
  endColumn: number;

  /**
   * Output only. Name of the active procedure, empty if in a top-level
   * script.
   *
   * @generated from field: string procedure_id = 5;
   */
  procedureId: string;

  /**
   * Output only. Text of the current statement/expression.
   *
   * @generated from field: string text = 6;
   */
  text: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.ScriptStatistics.ScriptStackFrame.
 * Use `create(ScriptStatistics_ScriptStackFrameSchema)` to create a new message.
 */
export const ScriptStatistics_ScriptStackFrameSchema: GenMessage<ScriptStatistics_ScriptStackFrame> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 17, 0);

/**
 * Describes how the job is evaluated.
 *
 * @generated from enum google.cloud.bigquery.v2.ScriptStatistics.EvaluationKind
 */
export enum ScriptStatistics_EvaluationKind {
  /**
   * Default value.
   *
   * @generated from enum value: EVALUATION_KIND_UNSPECIFIED = 0;
   */
  EVALUATION_KIND_UNSPECIFIED = 0,

  /**
   * The statement appears directly in the script.
   *
   * @generated from enum value: STATEMENT = 1;
   */
  STATEMENT = 1,

  /**
   * The statement evaluates an expression that appears in the script.
   *
   * @generated from enum value: EXPRESSION = 2;
   */
  EXPRESSION = 2,
}

/**
 * Describes the enum google.cloud.bigquery.v2.ScriptStatistics.EvaluationKind.
 */
export const ScriptStatistics_EvaluationKindSchema: GenEnum<ScriptStatistics_EvaluationKind> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 17, 0);

/**
 * Statistics for row-level security.
 *
 * @generated from message google.cloud.bigquery.v2.RowLevelSecurityStatistics
 */
export type RowLevelSecurityStatistics = Message<"google.cloud.bigquery.v2.RowLevelSecurityStatistics"> & {
  /**
   * Whether any accessed data was protected by row access policies.
   *
   * @generated from field: bool row_level_security_applied = 1;
   */
  rowLevelSecurityApplied: boolean;
};

/**
 * Describes the message google.cloud.bigquery.v2.RowLevelSecurityStatistics.
 * Use `create(RowLevelSecurityStatisticsSchema)` to create a new message.
 */
export const RowLevelSecurityStatisticsSchema: GenMessage<RowLevelSecurityStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 18);

/**
 * Statistics for data-masking.
 *
 * @generated from message google.cloud.bigquery.v2.DataMaskingStatistics
 */
export type DataMaskingStatistics = Message<"google.cloud.bigquery.v2.DataMaskingStatistics"> & {
  /**
   * Whether any accessed data was protected by the data masking.
   *
   * @generated from field: bool data_masking_applied = 1;
   */
  dataMaskingApplied: boolean;
};

/**
 * Describes the message google.cloud.bigquery.v2.DataMaskingStatistics.
 * Use `create(DataMaskingStatisticsSchema)` to create a new message.
 */
export const DataMaskingStatisticsSchema: GenMessage<DataMaskingStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 19);

/**
 * Statistics for a single job execution.
 *
 * @generated from message google.cloud.bigquery.v2.JobStatistics
 */
export type JobStatistics = Message<"google.cloud.bigquery.v2.JobStatistics"> & {
  /**
   * Output only. Creation time of this job, in milliseconds since the epoch.
   * This field will be present on all jobs.
   *
   * @generated from field: int64 creation_time = 1;
   */
  creationTime: bigint;

  /**
   * Output only. Start time of this job, in milliseconds since the epoch.
   * This field will be present when the job transitions from the PENDING state
   * to either RUNNING or DONE.
   *
   * @generated from field: int64 start_time = 2;
   */
  startTime: bigint;

  /**
   * Output only. End time of this job, in milliseconds since the epoch. This
   * field will be present whenever a job is in the DONE state.
   *
   * @generated from field: int64 end_time = 3;
   */
  endTime: bigint;

  /**
   * Output only. Total bytes processed for the job.
   *
   * @generated from field: google.protobuf.Int64Value total_bytes_processed = 4;
   */
  totalBytesProcessed?: bigint;

  /**
   * Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and
   * EXTRACT jobs.
   *
   * @generated from field: google.protobuf.DoubleValue completion_ratio = 5;
   */
  completionRatio?: number;

  /**
   * Output only. Quotas which delayed this job's start time.
   *
   * @generated from field: repeated string quota_deferments = 9;
   */
  quotaDeferments: string[];

  /**
   * Output only. Statistics for a query job.
   *
   * @generated from field: google.cloud.bigquery.v2.JobStatistics2 query = 6;
   */
  query?: JobStatistics2;

  /**
   * Output only. Statistics for a load job.
   *
   * @generated from field: google.cloud.bigquery.v2.JobStatistics3 load = 7;
   */
  load?: JobStatistics3;

  /**
   * Output only. Statistics for an extract job.
   *
   * @generated from field: google.cloud.bigquery.v2.JobStatistics4 extract = 8;
   */
  extract?: JobStatistics4;

  /**
   * Output only. Statistics for a copy job.
   *
   * @generated from field: google.cloud.bigquery.v2.CopyJobStatistics copy = 21;
   */
  copy?: CopyJobStatistics;

  /**
   * Output only. Slot-milliseconds for the job.
   *
   * @generated from field: google.protobuf.Int64Value total_slot_ms = 10;
   */
  totalSlotMs?: bigint;

  /**
   * Output only. Name of the primary reservation assigned to this job. Note
   * that this could be different than reservations reported in the reservation
   * usage field if parent reservations were used to execute this job.
   *
   * @generated from field: string reservation_id = 15;
   */
  reservationId: string;

  /**
   * Output only. Number of child jobs executed.
   *
   * @generated from field: int64 num_child_jobs = 12;
   */
  numChildJobs: bigint;

  /**
   * Output only. If this is a child job, specifies the job ID of the parent.
   *
   * @generated from field: string parent_job_id = 13;
   */
  parentJobId: string;

  /**
   * Output only. If this a child job of a script, specifies information about
   * the context of this job within the script.
   *
   * @generated from field: google.cloud.bigquery.v2.ScriptStatistics script_statistics = 14;
   */
  scriptStatistics?: ScriptStatistics;

  /**
   * Output only. Statistics for row-level security. Present only for query and
   * extract jobs.
   *
   * @generated from field: google.cloud.bigquery.v2.RowLevelSecurityStatistics row_level_security_statistics = 16;
   */
  rowLevelSecurityStatistics?: RowLevelSecurityStatistics;

  /**
   * Output only. Statistics for data-masking. Present only for query and
   * extract jobs.
   *
   * @generated from field: google.cloud.bigquery.v2.DataMaskingStatistics data_masking_statistics = 20;
   */
  dataMaskingStatistics?: DataMaskingStatistics;

  /**
   * Output only. [Alpha] Information of the multi-statement transaction if this
   * job is part of one.
   *
   * This property is only expected on a child job or a job that is in a
   * session. A script parent job is not part of the transaction started in the
   * script.
   *
   * @generated from field: google.cloud.bigquery.v2.JobStatistics.TransactionInfo transaction_info = 17;
   */
  transactionInfo?: JobStatistics_TransactionInfo;

  /**
   * Output only. Information of the session if this job is part of one.
   *
   * @generated from field: google.cloud.bigquery.v2.SessionInfo session_info = 18;
   */
  sessionInfo?: SessionInfo;

  /**
   * Output only. The duration in milliseconds of the execution of the final
   * attempt of this job, as BigQuery may internally re-attempt to execute the
   * job.
   *
   * @generated from field: int64 final_execution_duration_ms = 22;
   */
  finalExecutionDurationMs: bigint;

  /**
   * Output only. Name of edition corresponding to the reservation for this job
   * at the time of this update.
   *
   * @generated from field: google.cloud.bigquery.v2.ReservationEdition edition = 24;
   */
  edition: ReservationEdition;
};

/**
 * Describes the message google.cloud.bigquery.v2.JobStatistics.
 * Use `create(JobStatisticsSchema)` to create a new message.
 */
export const JobStatisticsSchema: GenMessage<JobStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 20);

/**
 * [Alpha] Information of a multi-statement transaction.
 *
 * @generated from message google.cloud.bigquery.v2.JobStatistics.TransactionInfo
 */
export type JobStatistics_TransactionInfo = Message<"google.cloud.bigquery.v2.JobStatistics.TransactionInfo"> & {
  /**
   * Output only. [Alpha] Id of the transaction.
   *
   * @generated from field: string transaction_id = 1;
   */
  transactionId: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.JobStatistics.TransactionInfo.
 * Use `create(JobStatistics_TransactionInfoSchema)` to create a new message.
 */
export const JobStatistics_TransactionInfoSchema: GenMessage<JobStatistics_TransactionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 20, 0);

/**
 * Detailed statistics for DML statements
 *
 * @generated from message google.cloud.bigquery.v2.DmlStats
 */
export type DmlStats = Message<"google.cloud.bigquery.v2.DmlStats"> & {
  /**
   * Output only. Number of inserted Rows. Populated by DML INSERT and MERGE
   * statements
   *
   * @generated from field: google.protobuf.Int64Value inserted_row_count = 1;
   */
  insertedRowCount?: bigint;

  /**
   * Output only. Number of deleted Rows. populated by DML DELETE, MERGE and
   * TRUNCATE statements.
   *
   * @generated from field: google.protobuf.Int64Value deleted_row_count = 2;
   */
  deletedRowCount?: bigint;

  /**
   * Output only. Number of updated Rows. Populated by DML UPDATE and MERGE
   * statements.
   *
   * @generated from field: google.protobuf.Int64Value updated_row_count = 3;
   */
  updatedRowCount?: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.DmlStats.
 * Use `create(DmlStatsSchema)` to create a new message.
 */
export const DmlStatsSchema: GenMessage<DmlStats> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 21);

/**
 * Performance insights for the job.
 *
 * @generated from message google.cloud.bigquery.v2.PerformanceInsights
 */
export type PerformanceInsights = Message<"google.cloud.bigquery.v2.PerformanceInsights"> & {
  /**
   * Output only. Average execution ms of previous runs. Indicates the job ran
   * slow compared to previous executions. To find previous executions, use
   * INFORMATION_SCHEMA tables and filter jobs with same query hash.
   *
   * @generated from field: int64 avg_previous_execution_ms = 1;
   */
  avgPreviousExecutionMs: bigint;

  /**
   * Output only. Standalone query stage performance insights, for exploring
   * potential improvements.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.StagePerformanceStandaloneInsight stage_performance_standalone_insights = 2;
   */
  stagePerformanceStandaloneInsights: StagePerformanceStandaloneInsight[];

  /**
   * Output only. Query stage performance insights compared to previous runs,
   * for diagnosing performance regression.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.StagePerformanceChangeInsight stage_performance_change_insights = 3;
   */
  stagePerformanceChangeInsights: StagePerformanceChangeInsight[];
};

/**
 * Describes the message google.cloud.bigquery.v2.PerformanceInsights.
 * Use `create(PerformanceInsightsSchema)` to create a new message.
 */
export const PerformanceInsightsSchema: GenMessage<PerformanceInsights> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 22);

/**
 * Performance insights compared to the previous executions for a specific
 * stage.
 *
 * @generated from message google.cloud.bigquery.v2.StagePerformanceChangeInsight
 */
export type StagePerformanceChangeInsight = Message<"google.cloud.bigquery.v2.StagePerformanceChangeInsight"> & {
  /**
   * Output only. The stage id that the insight mapped to.
   *
   * @generated from field: int64 stage_id = 1;
   */
  stageId: bigint;

  /**
   * Output only. Input data change insight of the query stage.
   *
   * @generated from field: optional google.cloud.bigquery.v2.InputDataChange input_data_change = 2;
   */
  inputDataChange?: InputDataChange;
};

/**
 * Describes the message google.cloud.bigquery.v2.StagePerformanceChangeInsight.
 * Use `create(StagePerformanceChangeInsightSchema)` to create a new message.
 */
export const StagePerformanceChangeInsightSchema: GenMessage<StagePerformanceChangeInsight> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 23);

/**
 * Details about the input data change insight.
 *
 * @generated from message google.cloud.bigquery.v2.InputDataChange
 */
export type InputDataChange = Message<"google.cloud.bigquery.v2.InputDataChange"> & {
  /**
   * Output only. Records read difference percentage compared to a previous run.
   *
   * @generated from field: float records_read_diff_percentage = 1;
   */
  recordsReadDiffPercentage: number;
};

/**
 * Describes the message google.cloud.bigquery.v2.InputDataChange.
 * Use `create(InputDataChangeSchema)` to create a new message.
 */
export const InputDataChangeSchema: GenMessage<InputDataChange> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 24);

/**
 * Standalone performance insights for a specific stage.
 *
 * @generated from message google.cloud.bigquery.v2.StagePerformanceStandaloneInsight
 */
export type StagePerformanceStandaloneInsight = Message<"google.cloud.bigquery.v2.StagePerformanceStandaloneInsight"> & {
  /**
   * Output only. The stage id that the insight mapped to.
   *
   * @generated from field: int64 stage_id = 1;
   */
  stageId: bigint;

  /**
   * Output only. True if the stage has a slot contention issue.
   *
   * @generated from field: optional bool slot_contention = 2;
   */
  slotContention?: boolean;

  /**
   * Output only. True if the stage has insufficient shuffle quota.
   *
   * @generated from field: optional bool insufficient_shuffle_quota = 3;
   */
  insufficientShuffleQuota?: boolean;

  /**
   * Output only. If present, the stage had the following reasons for being
   * disqualified from BI Engine execution.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.BiEngineReason bi_engine_reasons = 5;
   */
  biEngineReasons: BiEngineReason[];

  /**
   * Output only. High cardinality joins in the stage.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.HighCardinalityJoin high_cardinality_joins = 6;
   */
  highCardinalityJoins: HighCardinalityJoin[];

  /**
   * Output only. Partition skew in the stage.
   *
   * @generated from field: optional google.cloud.bigquery.v2.PartitionSkew partition_skew = 7;
   */
  partitionSkew?: PartitionSkew;
};

/**
 * Describes the message google.cloud.bigquery.v2.StagePerformanceStandaloneInsight.
 * Use `create(StagePerformanceStandaloneInsightSchema)` to create a new message.
 */
export const StagePerformanceStandaloneInsightSchema: GenMessage<StagePerformanceStandaloneInsight> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 25);

/**
 * High cardinality join detailed information.
 *
 * @generated from message google.cloud.bigquery.v2.HighCardinalityJoin
 */
export type HighCardinalityJoin = Message<"google.cloud.bigquery.v2.HighCardinalityJoin"> & {
  /**
   * Output only. Count of left input rows.
   *
   * @generated from field: int64 left_rows = 1;
   */
  leftRows: bigint;

  /**
   * Output only. Count of right input rows.
   *
   * @generated from field: int64 right_rows = 2;
   */
  rightRows: bigint;

  /**
   * Output only. Count of the output rows.
   *
   * @generated from field: int64 output_rows = 3;
   */
  outputRows: bigint;

  /**
   * Output only. The index of the join operator in the ExplainQueryStep lists.
   *
   * @generated from field: int32 step_index = 4;
   */
  stepIndex: number;
};

/**
 * Describes the message google.cloud.bigquery.v2.HighCardinalityJoin.
 * Use `create(HighCardinalityJoinSchema)` to create a new message.
 */
export const HighCardinalityJoinSchema: GenMessage<HighCardinalityJoin> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 26);

/**
 * Partition skew detailed information.
 *
 * @generated from message google.cloud.bigquery.v2.PartitionSkew
 */
export type PartitionSkew = Message<"google.cloud.bigquery.v2.PartitionSkew"> & {
  /**
   * Output only. Source stages which produce skewed data.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.PartitionSkew.SkewSource skew_sources = 1;
   */
  skewSources: PartitionSkew_SkewSource[];
};

/**
 * Describes the message google.cloud.bigquery.v2.PartitionSkew.
 * Use `create(PartitionSkewSchema)` to create a new message.
 */
export const PartitionSkewSchema: GenMessage<PartitionSkew> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 27);

/**
 * Details about source stages which produce skewed data.
 *
 * @generated from message google.cloud.bigquery.v2.PartitionSkew.SkewSource
 */
export type PartitionSkew_SkewSource = Message<"google.cloud.bigquery.v2.PartitionSkew.SkewSource"> & {
  /**
   * Output only. Stage id of the skew source stage.
   *
   * @generated from field: int64 stage_id = 1;
   */
  stageId: bigint;
};

/**
 * Describes the message google.cloud.bigquery.v2.PartitionSkew.SkewSource.
 * Use `create(PartitionSkew_SkewSourceSchema)` to create a new message.
 */
export const PartitionSkew_SkewSourceSchema: GenMessage<PartitionSkew_SkewSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 27, 0);

/**
 * Statistics for a BigSpark query.
 * Populated as part of JobStatistics2
 *
 * @generated from message google.cloud.bigquery.v2.SparkStatistics
 */
export type SparkStatistics = Message<"google.cloud.bigquery.v2.SparkStatistics"> & {
  /**
   * Output only. Spark job ID if a Spark job is created successfully.
   *
   * @generated from field: optional string spark_job_id = 1;
   */
  sparkJobId?: string;

  /**
   * Output only. Location where the Spark job is executed.
   * A location is selected by BigQueury for jobs configured to run in a
   * multi-region.
   *
   * @generated from field: optional string spark_job_location = 2;
   */
  sparkJobLocation?: string;

  /**
   * Output only. Endpoints returned from Dataproc.
   * Key list:
   *  - history_server_endpoint: A link to Spark job UI.
   *
   * @generated from field: map<string, string> endpoints = 3;
   */
  endpoints: { [key: string]: string };

  /**
   * Output only. Logging info is used to generate a link to Cloud Logging.
   *
   * @generated from field: optional google.cloud.bigquery.v2.SparkStatistics.LoggingInfo logging_info = 4;
   */
  loggingInfo?: SparkStatistics_LoggingInfo;

  /**
   * Output only. The Cloud KMS encryption key that is used to protect the
   * resources created by the Spark job. If the Spark procedure uses the invoker
   * security mode, the Cloud KMS encryption key is either inferred from the
   * provided system variable,
   * `@@spark_proc_properties.kms_key_name`, or the default key of the BigQuery
   * job's project (if the CMEK organization policy is enforced). Otherwise, the
   * Cloud KMS key is either inferred from the Spark connection associated with
   * the procedure (if it is provided), or from the default key of the Spark
   * connection's project if the CMEK organization policy is enforced.
   *
   * Example:
   *
   * * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
   *
   * @generated from field: optional string kms_key_name = 5;
   */
  kmsKeyName?: string;

  /**
   * Output only. The Google Cloud Storage bucket that is used as the default
   * file system by the Spark application. This field is only filled when the
   * Spark procedure uses the invoker security mode. The `gcsStagingBucket`
   * bucket is inferred from the `@@spark_proc_properties.staging_bucket` system
   * variable (if it is provided). Otherwise, BigQuery creates a default staging
   * bucket for the job and returns the bucket name in this field.
   *
   * Example:
   *
   * * `gs://[bucket_name]`
   *
   * @generated from field: optional string gcs_staging_bucket = 6;
   */
  gcsStagingBucket?: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.SparkStatistics.
 * Use `create(SparkStatisticsSchema)` to create a new message.
 */
export const SparkStatisticsSchema: GenMessage<SparkStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 28);

/**
 * Spark job logs can be filtered by these fields in Cloud Logging.
 *
 * @generated from message google.cloud.bigquery.v2.SparkStatistics.LoggingInfo
 */
export type SparkStatistics_LoggingInfo = Message<"google.cloud.bigquery.v2.SparkStatistics.LoggingInfo"> & {
  /**
   * Output only. Resource type used for logging.
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType: string;

  /**
   * Output only. Project ID where the Spark logs were written.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.SparkStatistics.LoggingInfo.
 * Use `create(SparkStatistics_LoggingInfoSchema)` to create a new message.
 */
export const SparkStatistics_LoggingInfoSchema: GenMessage<SparkStatistics_LoggingInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 28, 0);

/**
 * Statistics of materialized views considered in a query job.
 *
 * @generated from message google.cloud.bigquery.v2.MaterializedViewStatistics
 */
export type MaterializedViewStatistics = Message<"google.cloud.bigquery.v2.MaterializedViewStatistics"> & {
  /**
   * Materialized views considered for the query job. Only certain materialized
   * views are used. For a detailed list, see the child message.
   *
   * If many materialized views are considered, then the list might be
   * incomplete.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.MaterializedView materialized_view = 1;
   */
  materializedView: MaterializedView[];
};

/**
 * Describes the message google.cloud.bigquery.v2.MaterializedViewStatistics.
 * Use `create(MaterializedViewStatisticsSchema)` to create a new message.
 */
export const MaterializedViewStatisticsSchema: GenMessage<MaterializedViewStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 29);

/**
 * A materialized view considered for a query job.
 *
 * @generated from message google.cloud.bigquery.v2.MaterializedView
 */
export type MaterializedView = Message<"google.cloud.bigquery.v2.MaterializedView"> & {
  /**
   * The candidate materialized view.
   *
   * @generated from field: optional google.cloud.bigquery.v2.TableReference table_reference = 1;
   */
  tableReference?: TableReference;

  /**
   * Whether the materialized view is chosen for the query.
   *
   * A materialized view can be chosen to rewrite multiple parts of the same
   * query. If a materialized view is chosen to rewrite any part of the query,
   * then this field is true, even if the materialized view was not chosen to
   * rewrite others parts.
   *
   * @generated from field: optional bool chosen = 2;
   */
  chosen?: boolean;

  /**
   * If present, specifies a best-effort estimation of the bytes saved by using
   * the materialized view rather than its base tables.
   *
   * @generated from field: optional int64 estimated_bytes_saved = 3;
   */
  estimatedBytesSaved?: bigint;

  /**
   * If present, specifies the reason why the materialized view was not chosen
   * for the query.
   *
   * @generated from field: optional google.cloud.bigquery.v2.MaterializedView.RejectedReason rejected_reason = 4;
   */
  rejectedReason?: MaterializedView_RejectedReason;
};

/**
 * Describes the message google.cloud.bigquery.v2.MaterializedView.
 * Use `create(MaterializedViewSchema)` to create a new message.
 */
export const MaterializedViewSchema: GenMessage<MaterializedView> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 30);

/**
 * Reason why a materialized view was not chosen for a query. For more
 * information, see [Understand why materialized views were
 * rejected](https://cloud.google.com/bigquery/docs/materialized-views-use#understand-rejected).
 *
 * @generated from enum google.cloud.bigquery.v2.MaterializedView.RejectedReason
 */
export enum MaterializedView_RejectedReason {
  /**
   * Default unspecified value.
   *
   * @generated from enum value: REJECTED_REASON_UNSPECIFIED = 0;
   */
  REJECTED_REASON_UNSPECIFIED = 0,

  /**
   * View has no cached data because it has not refreshed yet.
   *
   * @generated from enum value: NO_DATA = 1;
   */
  NO_DATA = 1,

  /**
   * The estimated cost of the view is more expensive than another view or the
   * base table.
   *
   * Note: The estimate cost might not match the billed cost.
   *
   * @generated from enum value: COST = 2;
   */
  COST = 2,

  /**
   * View has no cached data because a base table is truncated.
   *
   * @generated from enum value: BASE_TABLE_TRUNCATED = 3;
   */
  BASE_TABLE_TRUNCATED = 3,

  /**
   * View is invalidated because of a data change in one or more base tables.
   * It could be any recent change if the
   * [`max_staleness`](https://cloud.google.com/bigquery/docs/materialized-views-create#max_staleness)
   * option is not set for the view, or otherwise any change outside of the
   * staleness window.
   *
   * @generated from enum value: BASE_TABLE_DATA_CHANGE = 4;
   */
  BASE_TABLE_DATA_CHANGE = 4,

  /**
   * View is invalidated because a base table's partition expiration has
   * changed.
   *
   * @generated from enum value: BASE_TABLE_PARTITION_EXPIRATION_CHANGE = 5;
   */
  BASE_TABLE_PARTITION_EXPIRATION_CHANGE = 5,

  /**
   * View is invalidated because a base table's partition has expired.
   *
   * @generated from enum value: BASE_TABLE_EXPIRED_PARTITION = 6;
   */
  BASE_TABLE_EXPIRED_PARTITION = 6,

  /**
   * View is invalidated because a base table has an incompatible metadata
   * change.
   *
   * @generated from enum value: BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE = 7;
   */
  BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE = 7,

  /**
   * View is invalidated because it was refreshed with a time zone other than
   * that of the current job.
   *
   * @generated from enum value: TIME_ZONE = 8;
   */
  TIME_ZONE = 8,

  /**
   * View is outside the time travel window.
   *
   * @generated from enum value: OUT_OF_TIME_TRAVEL_WINDOW = 9;
   */
  OUT_OF_TIME_TRAVEL_WINDOW = 9,

  /**
   * View is inaccessible to the user because of a fine-grained security
   * policy on one of its base tables.
   *
   * @generated from enum value: BASE_TABLE_FINE_GRAINED_SECURITY_POLICY = 10;
   */
  BASE_TABLE_FINE_GRAINED_SECURITY_POLICY = 10,

  /**
   * One of the view's base tables is too stale. For example, the cached
   * metadata of a BigLake external table needs to be updated.
   *
   * @generated from enum value: BASE_TABLE_TOO_STALE = 11;
   */
  BASE_TABLE_TOO_STALE = 11,
}

/**
 * Describes the enum google.cloud.bigquery.v2.MaterializedView.RejectedReason.
 */
export const MaterializedView_RejectedReasonSchema: GenEnum<MaterializedView_RejectedReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 30, 0);

/**
 * Table level detail on the usage of metadata caching. Only set for Metadata
 * caching eligible tables referenced in the query.
 *
 * @generated from message google.cloud.bigquery.v2.TableMetadataCacheUsage
 */
export type TableMetadataCacheUsage = Message<"google.cloud.bigquery.v2.TableMetadataCacheUsage"> & {
  /**
   * Metadata caching eligible table referenced in the query.
   *
   * @generated from field: optional google.cloud.bigquery.v2.TableReference table_reference = 1;
   */
  tableReference?: TableReference;

  /**
   * Reason for not using metadata caching for the table.
   *
   * @generated from field: optional google.cloud.bigquery.v2.TableMetadataCacheUsage.UnusedReason unused_reason = 2;
   */
  unusedReason?: TableMetadataCacheUsage_UnusedReason;

  /**
   * Free form human-readable reason metadata caching was unused for
   * the job.
   *
   * @generated from field: optional string explanation = 3;
   */
  explanation?: string;

  /**
   * Duration since last refresh as of this job for managed tables (indicates
   * metadata cache staleness as seen by this job).
   *
   * @generated from field: google.protobuf.Duration staleness = 5;
   */
  staleness?: Duration;

  /**
   * [Table
   * type](https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#Table.FIELDS.type).
   *
   * @generated from field: string table_type = 6;
   */
  tableType: string;
};

/**
 * Describes the message google.cloud.bigquery.v2.TableMetadataCacheUsage.
 * Use `create(TableMetadataCacheUsageSchema)` to create a new message.
 */
export const TableMetadataCacheUsageSchema: GenMessage<TableMetadataCacheUsage> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 31);

/**
 * Reasons for not using metadata caching.
 *
 * @generated from enum google.cloud.bigquery.v2.TableMetadataCacheUsage.UnusedReason
 */
export enum TableMetadataCacheUsage_UnusedReason {
  /**
   * Unused reasons not specified.
   *
   * @generated from enum value: UNUSED_REASON_UNSPECIFIED = 0;
   */
  UNUSED_REASON_UNSPECIFIED = 0,

  /**
   * Metadata cache was outside the table's maxStaleness.
   *
   * @generated from enum value: EXCEEDED_MAX_STALENESS = 1;
   */
  EXCEEDED_MAX_STALENESS = 1,

  /**
   * Metadata caching feature is not enabled. [Update BigLake tables]
   * (/bigquery/docs/create-cloud-storage-table-biglake#update-biglake-tables)
   * to enable the metadata caching.
   *
   * @generated from enum value: METADATA_CACHING_NOT_ENABLED = 3;
   */
  METADATA_CACHING_NOT_ENABLED = 3,

  /**
   * Other unknown reason.
   *
   * @generated from enum value: OTHER_REASON = 2;
   */
  OTHER_REASON = 2,
}

/**
 * Describes the enum google.cloud.bigquery.v2.TableMetadataCacheUsage.UnusedReason.
 */
export const TableMetadataCacheUsage_UnusedReasonSchema: GenEnum<TableMetadataCacheUsage_UnusedReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 31, 0);

/**
 * Statistics for metadata caching in BigLake tables.
 *
 * @generated from message google.cloud.bigquery.v2.MetadataCacheStatistics
 */
export type MetadataCacheStatistics = Message<"google.cloud.bigquery.v2.MetadataCacheStatistics"> & {
  /**
   * Set for the Metadata caching eligible tables referenced in the query.
   *
   * @generated from field: repeated google.cloud.bigquery.v2.TableMetadataCacheUsage table_metadata_cache_usage = 1;
   */
  tableMetadataCacheUsage: TableMetadataCacheUsage[];
};

/**
 * Describes the message google.cloud.bigquery.v2.MetadataCacheStatistics.
 * Use `create(MetadataCacheStatisticsSchema)` to create a new message.
 */
export const MetadataCacheStatisticsSchema: GenMessage<MetadataCacheStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_v2_job_stats, 32);

/**
 * The type of editions.
 * Different features and behaviors are provided to different editions
 * Capacity commitments and reservations are linked to editions.
 *
 * @generated from enum google.cloud.bigquery.v2.ReservationEdition
 */
export enum ReservationEdition {
  /**
   * Default value, which will be treated as ENTERPRISE.
   *
   * @generated from enum value: RESERVATION_EDITION_UNSPECIFIED = 0;
   */
  RESERVATION_EDITION_UNSPECIFIED = 0,

  /**
   * Standard edition.
   *
   * @generated from enum value: STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * Enterprise edition.
   *
   * @generated from enum value: ENTERPRISE = 2;
   */
  ENTERPRISE = 2,

  /**
   * Enterprise plus edition.
   *
   * @generated from enum value: ENTERPRISE_PLUS = 3;
   */
  ENTERPRISE_PLUS = 3,
}

/**
 * Describes the enum google.cloud.bigquery.v2.ReservationEdition.
 */
export const ReservationEditionSchema: GenEnum<ReservationEdition> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_v2_job_stats, 0);

