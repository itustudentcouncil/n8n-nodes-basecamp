// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/datatransfer/v1/transfer.proto (package google.cloud.bigquery.datatransfer.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../../rpc/status_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/datatransfer/v1/transfer.proto.
 */
export const file_google_cloud_bigquery_datatransfer_v1_transfer: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvY2xvdWQvYmlncXVlcnkvZGF0YXRyYW5zZmVyL3YxL3RyYW5zZmVyLnByb3RvEiVnb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxIjAKEEVtYWlsUHJlZmVyZW5jZXMSHAoUZW5hYmxlX2ZhaWx1cmVfZW1haWwYASABKAgikAEKD1NjaGVkdWxlT3B0aW9ucxIfChdkaXNhYmxlX2F1dG9fc2NoZWR1bGluZxgDIAEoCBIuCgpzdGFydF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiKAoIVXNlckluZm8SEgoFZW1haWwYASABKAlIAIgBAUIICgZfZW1haWwinAgKDlRyYW5zZmVyQ29uZmlnEhEKBG5hbWUYASABKAlCA+BBCBIgChZkZXN0aW5hdGlvbl9kYXRhc2V0X2lkGAIgASgJSAASFAoMZGlzcGxheV9uYW1lGAMgASgJEhYKDmRhdGFfc291cmNlX2lkGAUgASgJEicKBnBhcmFtcxgJIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSEAoIc2NoZWR1bGUYByABKAkSUAoQc2NoZWR1bGVfb3B0aW9ucxgYIAEoCzI2Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuU2NoZWR1bGVPcHRpb25zEiAKGGRhdGFfcmVmcmVzaF93aW5kb3dfZGF5cxgMIAEoBRIQCghkaXNhYmxlZBgNIAEoCBI0Cgt1cGRhdGVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI2Cg1uZXh0X3J1bl90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEkgKBXN0YXRlGAogASgOMjQuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5UcmFuc2ZlclN0YXRlQgPgQQMSDwoHdXNlcl9pZBgLIAEoAxIbCg5kYXRhc2V0X3JlZ2lvbhgOIAEoCUID4EEDEiEKGW5vdGlmaWNhdGlvbl9wdWJzdWJfdG9waWMYDyABKAkSUgoRZW1haWxfcHJlZmVyZW5jZXMYEiABKAsyNy5nb29nbGUuY2xvdWQuYmlncXVlcnkuZGF0YXRyYW5zZmVyLnYxLkVtYWlsUHJlZmVyZW5jZXMSTQoKb3duZXJfaW5mbxgbIAEoCzIvLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVXNlckluZm9CA+BBA0gBiAEBEmAKGGVuY3J5cHRpb25fY29uZmlndXJhdGlvbhgcIAEoCzI+Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuRW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246uQHqQbUBCjJiaWdxdWVyeWRhdGF0cmFuc2Zlci5nb29nbGVhcGlzLmNvbS9UcmFuc2ZlckNvbmZpZxI0cHJvamVjdHMve3Byb2plY3R9L3RyYW5zZmVyQ29uZmlncy97dHJhbnNmZXJfY29uZmlnfRJJcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3RyYW5zZmVyQ29uZmlncy97dHJhbnNmZXJfY29uZmlnfUINCgtkZXN0aW5hdGlvbkINCgtfb3duZXJfaW5mbyJNChdFbmNyeXB0aW9uQ29uZmlndXJhdGlvbhIyCgxrbXNfa2V5X25hbWUYASABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUi/wYKC1RyYW5zZmVyUnVuEhEKBG5hbWUYASABKAlCA+BBCBIxCg1zY2hlZHVsZV90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghydW5fdGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKAoMZXJyb3Jfc3RhdHVzGBUgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXMSMwoKc3RhcnRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIxCghlbmRfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIsCgZwYXJhbXMYCSABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0QgPgQQMSJQoWZGVzdGluYXRpb25fZGF0YXNldF9pZBgCIAEoCUID4EEDSAASGwoOZGF0YV9zb3VyY2VfaWQYByABKAlCA+BBAxJDCgVzdGF0ZRgIIAEoDjI0Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJTdGF0ZRIPCgd1c2VyX2lkGAsgASgDEhUKCHNjaGVkdWxlGAwgASgJQgPgQQMSJgoZbm90aWZpY2F0aW9uX3B1YnN1Yl90b3BpYxgXIAEoCUID4EEDElcKEWVtYWlsX3ByZWZlcmVuY2VzGBkgASgLMjcuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LmRhdGF0cmFuc2Zlci52MS5FbWFpbFByZWZlcmVuY2VzQgPgQQM6xAHqQcABCidiaWdxdWVyeWRhdGF0cmFuc2Zlci5nb29nbGVhcGlzLmNvbS9SdW4SP3Byb2plY3RzL3twcm9qZWN0fS90cmFuc2ZlckNvbmZpZ3Mve3RyYW5zZmVyX2NvbmZpZ30vcnVucy97cnVufRJUcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3RyYW5zZmVyQ29uZmlncy97dHJhbnNmZXJfY29uZmlnfS9ydW5zL3tydW59Qg0KC2Rlc3RpbmF0aW9uIooCCg9UcmFuc2Zlck1lc3NhZ2USMAoMbWVzc2FnZV90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJYCghzZXZlcml0eRgCIAEoDjJGLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjEuVHJhbnNmZXJNZXNzYWdlLk1lc3NhZ2VTZXZlcml0eRIUCgxtZXNzYWdlX3RleHQYAyABKAkiVQoPTWVzc2FnZVNldmVyaXR5EiAKHE1FU1NBR0VfU0VWRVJJVFlfVU5TUEVDSUZJRUQQABIICgRJTkZPEAESCwoHV0FSTklORxACEgkKBUVSUk9SEAMqSwoMVHJhbnNmZXJUeXBlEh0KGVRSQU5TRkVSX1RZUEVfVU5TUEVDSUZJRUQQABIJCgVCQVRDSBABEg0KCVNUUkVBTUlORxACGgIYASpzCg1UcmFuc2ZlclN0YXRlEh4KGlRSQU5TRkVSX1NUQVRFX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxACEgsKB1JVTk5JTkcQAxINCglTVUNDRUVERUQQBBIKCgZGQUlMRUQQBRINCglDQU5DRUxMRUQQBkKPAgopY29tLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5kYXRhdHJhbnNmZXIudjFCDVRyYW5zZmVyUHJvdG9QAVpNY2xvdWQuZ29vZ2xlLmNvbS9nby9iaWdxdWVyeS9kYXRhdHJhbnNmZXIvYXBpdjEvZGF0YXRyYW5zZmVycGI7ZGF0YXRyYW5zZmVycGKiAgVHQ0JEVKoCJUdvb2dsZS5DbG91ZC5CaWdRdWVyeS5EYXRhVHJhbnNmZXIuVjHKAiVHb29nbGVcQ2xvdWRcQmlnUXVlcnlcRGF0YVRyYW5zZmVyXFYx6gIpR29vZ2xlOjpDbG91ZDo6QmlncXVlcnk6OkRhdGFUcmFuc2Zlcjo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_google_rpc_status]);

/**
 * Represents preferences for sending email notifications for transfer run
 * events.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.EmailPreferences
 */
export type EmailPreferences = Message<"google.cloud.bigquery.datatransfer.v1.EmailPreferences"> & {
  /**
   * If true, email notifications will be sent on transfer run failures.
   *
   * @generated from field: bool enable_failure_email = 1;
   */
  enableFailureEmail: boolean;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.EmailPreferences.
 * Use `create(EmailPreferencesSchema)` to create a new message.
 */
export const EmailPreferencesSchema: GenMessage<EmailPreferences> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 0);

/**
 * Options customizing the data transfer schedule.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.ScheduleOptions
 */
export type ScheduleOptions = Message<"google.cloud.bigquery.datatransfer.v1.ScheduleOptions"> & {
  /**
   * If true, automatic scheduling of data transfer runs for this configuration
   * will be disabled. The runs can be started on ad-hoc basis using
   * StartManualTransferRuns API. When automatic scheduling is disabled, the
   * TransferConfig.schedule field will be ignored.
   *
   * @generated from field: bool disable_auto_scheduling = 3;
   */
  disableAutoScheduling: boolean;

  /**
   * Specifies time to start scheduling transfer runs. The first run will be
   * scheduled at or after the start time according to a recurrence pattern
   * defined in the schedule string. The start time can be changed at any
   * moment. The time when a data transfer can be triggered manually is not
   * limited by this option.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * Defines time to stop scheduling transfer runs. A transfer run cannot be
   * scheduled at or after the end time. The end time can be changed at any
   * moment. The time when a data transfer can be triggered manually is not
   * limited by this option.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.ScheduleOptions.
 * Use `create(ScheduleOptionsSchema)` to create a new message.
 */
export const ScheduleOptionsSchema: GenMessage<ScheduleOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 1);

/**
 * Information about a user.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.UserInfo
 */
export type UserInfo = Message<"google.cloud.bigquery.datatransfer.v1.UserInfo"> & {
  /**
   * E-mail address of the user.
   *
   * @generated from field: optional string email = 1;
   */
  email?: string;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.UserInfo.
 * Use `create(UserInfoSchema)` to create a new message.
 */
export const UserInfoSchema: GenMessage<UserInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 2);

/**
 * Represents a data transfer configuration. A transfer configuration
 * contains all metadata needed to perform a data transfer. For example,
 * `destination_dataset_id` specifies where data should be stored.
 * When a new transfer configuration is created, the specified
 * `destination_dataset_id` is created when needed and shared with the
 * appropriate data source service account.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.TransferConfig
 */
export type TransferConfig = Message<"google.cloud.bigquery.datatransfer.v1.TransferConfig"> & {
  /**
   * Identifier. The resource name of the transfer config.
   * Transfer config names have the form either
   * `projects/{project_id}/locations/{region}/transferConfigs/{config_id}` or
   * `projects/{project_id}/transferConfigs/{config_id}`,
   * where `config_id` is usually a UUID, even though it is not
   * guaranteed or required. The name is ignored when creating a transfer
   * config.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The desination of the transfer config.
   *
   * @generated from oneof google.cloud.bigquery.datatransfer.v1.TransferConfig.destination
   */
  destination: {
    /**
     * The BigQuery target dataset id.
     *
     * @generated from field: string destination_dataset_id = 2;
     */
    value: string;
    case: "destinationDatasetId";
  } | { case: undefined; value?: undefined };

  /**
   * User specified display name for the data transfer.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Data source ID. This cannot be changed once data transfer is created. The
   * full list of available data source IDs can be returned through an API call:
   * https://cloud.google.com/bigquery-transfer/docs/reference/datatransfer/rest/v1/projects.locations.dataSources/list
   *
   * @generated from field: string data_source_id = 5;
   */
  dataSourceId: string;

  /**
   * Parameters specific to each data source. For more information see the
   * bq tab in the 'Setting up a data transfer' section for each data source.
   * For example the parameters for Cloud Storage transfers are listed here:
   * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
   *
   * @generated from field: google.protobuf.Struct params = 9;
   */
  params?: JsonObject;

  /**
   * Data transfer schedule.
   * If the data source does not support a custom schedule, this should be
   * empty. If it is empty, the default value for the data source will be used.
   * The specified times are in UTC.
   * Examples of valid format:
   * `1st,3rd monday of month 15:30`,
   * `every wed,fri of jan,jun 13:15`, and
   * `first sunday of quarter 00:00`.
   * See more explanation about the format here:
   * https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#the_schedule_format
   *
   * NOTE: The minimum interval time between recurring transfers depends on the
   * data source; refer to the documentation for your data source.
   *
   * @generated from field: string schedule = 7;
   */
  schedule: string;

  /**
   * Options customizing the data transfer schedule.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.ScheduleOptions schedule_options = 24;
   */
  scheduleOptions?: ScheduleOptions;

  /**
   * The number of days to look back to automatically refresh the data.
   * For example, if `data_refresh_window_days = 10`, then every day
   * BigQuery reingests data for [today-10, today-1], rather than ingesting data
   * for just [today-1].
   * Only valid if the data source supports the feature. Set the value to 0
   * to use the default value.
   *
   * @generated from field: int32 data_refresh_window_days = 12;
   */
  dataRefreshWindowDays: number;

  /**
   * Is this config disabled. When set to true, no runs will be scheduled for
   * this transfer config.
   *
   * @generated from field: bool disabled = 13;
   */
  disabled: boolean;

  /**
   * Output only. Data transfer modification time. Ignored by server on input.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Next time when data transfer will run.
   *
   * @generated from field: google.protobuf.Timestamp next_run_time = 8;
   */
  nextRunTime?: Timestamp;

  /**
   * Output only. State of the most recently updated transfer run.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.TransferState state = 10;
   */
  state: TransferState;

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   *
   * @generated from field: int64 user_id = 11;
   */
  userId: bigint;

  /**
   * Output only. Region in which BigQuery dataset is located.
   *
   * @generated from field: string dataset_region = 14;
   */
  datasetRegion: string;

  /**
   * Pub/Sub topic where notifications will be sent after transfer runs
   * associated with this transfer config finish.
   *
   * The format for specifying a pubsub topic is:
   * `projects/{project_id}/topics/{topic_id}`
   *
   * @generated from field: string notification_pubsub_topic = 15;
   */
  notificationPubsubTopic: string;

  /**
   * Email notifications will be sent according to these preferences
   * to the email address of the user who owns this transfer config.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 18;
   */
  emailPreferences?: EmailPreferences;

  /**
   * Output only. Information about the user whose credentials are used to
   * transfer data. Populated only for `transferConfigs.get` requests. In case
   * the user information is not available, this field will not be populated.
   *
   * @generated from field: optional google.cloud.bigquery.datatransfer.v1.UserInfo owner_info = 27;
   */
  ownerInfo?: UserInfo;

  /**
   * The encryption configuration part. Currently, it is only used for the
   * optional KMS key name. The BigQuery service account of your project must be
   * granted permissions to use the key. Read methods will return the key name
   * applied in effect. Write methods will apply the key if it is present, or
   * otherwise try to apply project default keys if it is absent.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.EncryptionConfiguration encryption_configuration = 28;
   */
  encryptionConfiguration?: EncryptionConfiguration;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.TransferConfig.
 * Use `create(TransferConfigSchema)` to create a new message.
 */
export const TransferConfigSchema: GenMessage<TransferConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 3);

/**
 * Represents the encryption configuration for a transfer.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.EncryptionConfiguration
 */
export type EncryptionConfiguration = Message<"google.cloud.bigquery.datatransfer.v1.EncryptionConfiguration"> & {
  /**
   * The name of the KMS key used for encrypting BigQuery data.
   *
   * @generated from field: google.protobuf.StringValue kms_key_name = 1;
   */
  kmsKeyName?: string;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.EncryptionConfiguration.
 * Use `create(EncryptionConfigurationSchema)` to create a new message.
 */
export const EncryptionConfigurationSchema: GenMessage<EncryptionConfiguration> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 4);

/**
 * Represents a data transfer run.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.TransferRun
 */
export type TransferRun = Message<"google.cloud.bigquery.datatransfer.v1.TransferRun"> & {
  /**
   * Identifier. The resource name of the transfer run.
   * Transfer run names have the form
   * `projects/{project_id}/locations/{location}/transferConfigs/{config_id}/runs/{run_id}`.
   * The name is ignored when creating a transfer run.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Minimum time after which a transfer run can be started.
   *
   * @generated from field: google.protobuf.Timestamp schedule_time = 3;
   */
  scheduleTime?: Timestamp;

  /**
   * For batch transfer runs, specifies the date and time of the data should be
   * ingested.
   *
   * @generated from field: google.protobuf.Timestamp run_time = 10;
   */
  runTime?: Timestamp;

  /**
   * Status of the transfer run.
   *
   * @generated from field: google.rpc.Status error_status = 21;
   */
  errorStatus?: Status;

  /**
   * Output only. Time when transfer run was started.
   * Parameter ignored by server for input requests.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * Output only. Time when transfer run ended.
   * Parameter ignored by server for input requests.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;

  /**
   * Output only. Last time the data transfer run state was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Parameters specific to each data source. For more information
   * see the bq tab in the 'Setting up a data transfer' section for each data
   * source. For example the parameters for Cloud Storage transfers are listed
   * here:
   * https://cloud.google.com/bigquery-transfer/docs/cloud-storage-transfer#bq
   *
   * @generated from field: google.protobuf.Struct params = 9;
   */
  params?: JsonObject;

  /**
   * Data transfer destination.
   *
   * @generated from oneof google.cloud.bigquery.datatransfer.v1.TransferRun.destination
   */
  destination: {
    /**
     * Output only. The BigQuery target dataset id.
     *
     * @generated from field: string destination_dataset_id = 2;
     */
    value: string;
    case: "destinationDatasetId";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. Data source id.
   *
   * @generated from field: string data_source_id = 7;
   */
  dataSourceId: string;

  /**
   * Data transfer run state. Ignored for input requests.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.TransferState state = 8;
   */
  state: TransferState;

  /**
   * Deprecated. Unique ID of the user on whose behalf transfer is done.
   *
   * @generated from field: int64 user_id = 11;
   */
  userId: bigint;

  /**
   * Output only. Describes the schedule of this transfer run if it was
   * created as part of a regular schedule. For batch transfer runs that are
   * scheduled manually, this is empty.
   * NOTE: the system might choose to delay the schedule depending on the
   * current load, so `schedule_time` doesn't always match this.
   *
   * @generated from field: string schedule = 12;
   */
  schedule: string;

  /**
   * Output only. Pub/Sub topic where a notification will be sent after this
   * transfer run finishes.
   *
   * The format for specifying a pubsub topic is:
   * `projects/{project_id}/topics/{topic_id}`
   *
   * @generated from field: string notification_pubsub_topic = 23;
   */
  notificationPubsubTopic: string;

  /**
   * Output only. Email notifications will be sent according to these
   * preferences to the email address of the user who owns the transfer config
   * this run was derived from.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.EmailPreferences email_preferences = 25;
   */
  emailPreferences?: EmailPreferences;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.TransferRun.
 * Use `create(TransferRunSchema)` to create a new message.
 */
export const TransferRunSchema: GenMessage<TransferRun> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 5);

/**
 * Represents a user facing message for a particular data transfer run.
 *
 * @generated from message google.cloud.bigquery.datatransfer.v1.TransferMessage
 */
export type TransferMessage = Message<"google.cloud.bigquery.datatransfer.v1.TransferMessage"> & {
  /**
   * Time when message was logged.
   *
   * @generated from field: google.protobuf.Timestamp message_time = 1;
   */
  messageTime?: Timestamp;

  /**
   * Message severity.
   *
   * @generated from field: google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity severity = 2;
   */
  severity: TransferMessage_MessageSeverity;

  /**
   * Message text.
   *
   * @generated from field: string message_text = 3;
   */
  messageText: string;
};

/**
 * Describes the message google.cloud.bigquery.datatransfer.v1.TransferMessage.
 * Use `create(TransferMessageSchema)` to create a new message.
 */
export const TransferMessageSchema: GenMessage<TransferMessage> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 6);

/**
 * Represents data transfer user facing message severity.
 *
 * @generated from enum google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity
 */
export enum TransferMessage_MessageSeverity {
  /**
   * No severity specified.
   *
   * @generated from enum value: MESSAGE_SEVERITY_UNSPECIFIED = 0;
   */
  MESSAGE_SEVERITY_UNSPECIFIED = 0,

  /**
   * Informational message.
   *
   * @generated from enum value: INFO = 1;
   */
  INFO = 1,

  /**
   * Warning message.
   *
   * @generated from enum value: WARNING = 2;
   */
  WARNING = 2,

  /**
   * Error message.
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}

/**
 * Describes the enum google.cloud.bigquery.datatransfer.v1.TransferMessage.MessageSeverity.
 */
export const TransferMessage_MessageSeveritySchema: GenEnum<TransferMessage_MessageSeverity> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 6, 0);

/**
 * DEPRECATED. Represents data transfer type.
 *
 * @generated from enum google.cloud.bigquery.datatransfer.v1.TransferType
 * @deprecated
 */
export enum TransferType {
  /**
   * Invalid or Unknown transfer type placeholder.
   *
   * @generated from enum value: TRANSFER_TYPE_UNSPECIFIED = 0;
   */
  TRANSFER_TYPE_UNSPECIFIED = 0,

  /**
   * Batch data transfer.
   *
   * @generated from enum value: BATCH = 1;
   */
  BATCH = 1,

  /**
   * Streaming data transfer. Streaming data source currently doesn't
   * support multiple transfer configs per project.
   *
   * @generated from enum value: STREAMING = 2;
   */
  STREAMING = 2,
}

/**
 * Describes the enum google.cloud.bigquery.datatransfer.v1.TransferType.
 * @deprecated
 */
export const TransferTypeSchema: GenEnum<TransferType> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 0);

/**
 * Represents data transfer run state.
 *
 * @generated from enum google.cloud.bigquery.datatransfer.v1.TransferState
 */
export enum TransferState {
  /**
   * State placeholder (0).
   *
   * @generated from enum value: TRANSFER_STATE_UNSPECIFIED = 0;
   */
  TRANSFER_STATE_UNSPECIFIED = 0,

  /**
   * Data transfer is scheduled and is waiting to be picked up by
   * data transfer backend (2).
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * Data transfer is in progress (3).
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * Data transfer completed successfully (4).
   *
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,

  /**
   * Data transfer failed (5).
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * Data transfer is cancelled (6).
   *
   * @generated from enum value: CANCELLED = 6;
   */
  CANCELLED = 6,
}

/**
 * Describes the enum google.cloud.bigquery.datatransfer.v1.TransferState.
 */
export const TransferStateSchema: GenEnum<TransferState> = /*@__PURE__*/
  enumDesc(file_google_cloud_bigquery_datatransfer_v1_transfer, 1);

