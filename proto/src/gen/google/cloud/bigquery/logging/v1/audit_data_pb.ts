// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/logging/v1/audit_data.proto (package google.cloud.bigquery.logging.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { SetIamPolicyRequest } from "../../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../../iam/v1/iam_policy_pb";
import type { Policy } from "../../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../../iam/v1/policy_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/logging/v1/audit_data.proto.
 */
export const file_google_cloud_bigquery_logging_v1_audit_data: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_protobuf_duration, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * BigQuery request and response messages for audit log.
 * Note: `Table.schema` has been deprecated in favor of `Table.schemaJson`.
 * `Table.schema` may continue to be present in your logs during this
 * transition.
 *
 * @generated from message google.cloud.bigquery.logging.v1.AuditData
 */
export type AuditData = Message<"google.cloud.bigquery.logging.v1.AuditData"> & {
  /**
   * Request data for each BigQuery method.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.AuditData.request
   */
  request: {
    /**
     * Table insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableInsertRequest table_insert_request = 1;
     */
    value: TableInsertRequest;
    case: "tableInsertRequest";
  } | {
    /**
     * Table update request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableUpdateRequest table_update_request = 16;
     */
    value: TableUpdateRequest;
    case: "tableUpdateRequest";
  } | {
    /**
     * Dataset list request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetListRequest dataset_list_request = 2;
     */
    value: DatasetListRequest;
    case: "datasetListRequest";
  } | {
    /**
     * Dataset insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetInsertRequest dataset_insert_request = 3;
     */
    value: DatasetInsertRequest;
    case: "datasetInsertRequest";
  } | {
    /**
     * Dataset update request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetUpdateRequest dataset_update_request = 4;
     */
    value: DatasetUpdateRequest;
    case: "datasetUpdateRequest";
  } | {
    /**
     * Job insert request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobInsertRequest job_insert_request = 5;
     */
    value: JobInsertRequest;
    case: "jobInsertRequest";
  } | {
    /**
     * Job query request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryRequest job_query_request = 6;
     */
    value: JobQueryRequest;
    case: "jobQueryRequest";
  } | {
    /**
     * Job get query results request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest job_get_query_results_request = 7;
     */
    value: JobGetQueryResultsRequest;
    case: "jobGetQueryResultsRequest";
  } | {
    /**
     * Table data-list request.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableDataListRequest table_data_list_request = 8;
     */
    value: TableDataListRequest;
    case: "tableDataListRequest";
  } | {
    /**
     * Iam policy request.
     *
     * @generated from field: google.iam.v1.SetIamPolicyRequest set_iam_policy_request = 20;
     */
    value: SetIamPolicyRequest;
    case: "setIamPolicyRequest";
  } | { case: undefined; value?: undefined };

  /**
   * Response data for each BigQuery method.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.AuditData.response
   */
  response: {
    /**
     * Table insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableInsertResponse table_insert_response = 9;
     */
    value: TableInsertResponse;
    case: "tableInsertResponse";
  } | {
    /**
     * Table update response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.TableUpdateResponse table_update_response = 10;
     */
    value: TableUpdateResponse;
    case: "tableUpdateResponse";
  } | {
    /**
     * Dataset insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetInsertResponse dataset_insert_response = 11;
     */
    value: DatasetInsertResponse;
    case: "datasetInsertResponse";
  } | {
    /**
     * Dataset update response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.DatasetUpdateResponse dataset_update_response = 12;
     */
    value: DatasetUpdateResponse;
    case: "datasetUpdateResponse";
  } | {
    /**
     * Job insert response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobInsertResponse job_insert_response = 18;
     */
    value: JobInsertResponse;
    case: "jobInsertResponse";
  } | {
    /**
     * Job query response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryResponse job_query_response = 13;
     */
    value: JobQueryResponse;
    case: "jobQueryResponse";
  } | {
    /**
     * Job get query results response.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse job_get_query_results_response = 14;
     */
    value: JobGetQueryResultsResponse;
    case: "jobGetQueryResultsResponse";
  } | {
    /**
     * Deprecated: Job query-done response. Use this information for usage
     * analysis.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobQueryDoneResponse job_query_done_response = 15;
     */
    value: JobQueryDoneResponse;
    case: "jobQueryDoneResponse";
  } | {
    /**
     * Iam Policy.
     *
     * @generated from field: google.iam.v1.Policy policy_response = 21;
     */
    value: Policy;
    case: "policyResponse";
  } | { case: undefined; value?: undefined };

  /**
   * A job completion event.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobCompletedEvent job_completed_event = 17;
   */
  jobCompletedEvent?: JobCompletedEvent;

  /**
   * Information about the table access events.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableDataReadEvent table_data_read_events = 19;
   */
  tableDataReadEvents: TableDataReadEvent[];
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.AuditData.
 * Use `create(AuditDataSchema)` to create a new message.
 */
export const AuditDataSchema: GenMessage<AuditData> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 0);

/**
 * Table insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInsertRequest
 */
export type TableInsertRequest = Message<"google.cloud.bigquery.logging.v1.TableInsertRequest"> & {
  /**
   * The new table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableInsertRequest.
 * Use `create(TableInsertRequestSchema)` to create a new message.
 */
export const TableInsertRequestSchema: GenMessage<TableInsertRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 1);

/**
 * Table update request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableUpdateRequest
 */
export type TableUpdateRequest = Message<"google.cloud.bigquery.logging.v1.TableUpdateRequest"> & {
  /**
   * The table to be updated.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableUpdateRequest.
 * Use `create(TableUpdateRequestSchema)` to create a new message.
 */
export const TableUpdateRequestSchema: GenMessage<TableUpdateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 2);

/**
 * Table insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInsertResponse
 */
export type TableInsertResponse = Message<"google.cloud.bigquery.logging.v1.TableInsertResponse"> & {
  /**
   * Final state of the inserted table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableInsertResponse.
 * Use `create(TableInsertResponseSchema)` to create a new message.
 */
export const TableInsertResponseSchema: GenMessage<TableInsertResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 3);

/**
 * Table update response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableUpdateResponse
 */
export type TableUpdateResponse = Message<"google.cloud.bigquery.logging.v1.TableUpdateResponse"> & {
  /**
   * Final state of the updated table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Table resource = 1;
   */
  resource?: Table;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableUpdateResponse.
 * Use `create(TableUpdateResponseSchema)` to create a new message.
 */
export const TableUpdateResponseSchema: GenMessage<TableUpdateResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 4);

/**
 * Dataset list request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetListRequest
 */
export type DatasetListRequest = Message<"google.cloud.bigquery.logging.v1.DatasetListRequest"> & {
  /**
   * Whether to list all datasets, including hidden ones.
   *
   * @generated from field: bool list_all = 1;
   */
  listAll: boolean;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetListRequest.
 * Use `create(DatasetListRequestSchema)` to create a new message.
 */
export const DatasetListRequestSchema: GenMessage<DatasetListRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 5);

/**
 * Dataset insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInsertRequest
 */
export type DatasetInsertRequest = Message<"google.cloud.bigquery.logging.v1.DatasetInsertRequest"> & {
  /**
   * The dataset to be inserted.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetInsertRequest.
 * Use `create(DatasetInsertRequestSchema)` to create a new message.
 */
export const DatasetInsertRequestSchema: GenMessage<DatasetInsertRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 6);

/**
 * Dataset insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInsertResponse
 */
export type DatasetInsertResponse = Message<"google.cloud.bigquery.logging.v1.DatasetInsertResponse"> & {
  /**
   * Final state of the inserted dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetInsertResponse.
 * Use `create(DatasetInsertResponseSchema)` to create a new message.
 */
export const DatasetInsertResponseSchema: GenMessage<DatasetInsertResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 7);

/**
 * Dataset update request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetUpdateRequest
 */
export type DatasetUpdateRequest = Message<"google.cloud.bigquery.logging.v1.DatasetUpdateRequest"> & {
  /**
   * The dataset to be updated.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetUpdateRequest.
 * Use `create(DatasetUpdateRequestSchema)` to create a new message.
 */
export const DatasetUpdateRequestSchema: GenMessage<DatasetUpdateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 8);

/**
 * Dataset update response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetUpdateResponse
 */
export type DatasetUpdateResponse = Message<"google.cloud.bigquery.logging.v1.DatasetUpdateResponse"> & {
  /**
   * Final state of the updated dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Dataset resource = 1;
   */
  resource?: Dataset;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetUpdateResponse.
 * Use `create(DatasetUpdateResponseSchema)` to create a new message.
 */
export const DatasetUpdateResponseSchema: GenMessage<DatasetUpdateResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 9);

/**
 * Job insert request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobInsertRequest
 */
export type JobInsertRequest = Message<"google.cloud.bigquery.logging.v1.JobInsertRequest"> & {
  /**
   * Job insert request.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job resource = 1;
   */
  resource?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobInsertRequest.
 * Use `create(JobInsertRequestSchema)` to create a new message.
 */
export const JobInsertRequestSchema: GenMessage<JobInsertRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 10);

/**
 * Job insert response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobInsertResponse
 */
export type JobInsertResponse = Message<"google.cloud.bigquery.logging.v1.JobInsertResponse"> & {
  /**
   * Job insert response.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job resource = 1;
   */
  resource?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobInsertResponse.
 * Use `create(JobInsertResponseSchema)` to create a new message.
 */
export const JobInsertResponseSchema: GenMessage<JobInsertResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 11);

/**
 * Job query request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryRequest
 */
export type JobQueryRequest = Message<"google.cloud.bigquery.logging.v1.JobQueryRequest"> & {
  /**
   * The query.
   *
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * The maximum number of results.
   *
   * @generated from field: uint32 max_results = 2;
   */
  maxResults: number;

  /**
   * The default dataset for tables that do not have a dataset specified.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName default_dataset = 3;
   */
  defaultDataset?: DatasetName;

  /**
   * Project that the query should be charged to.
   *
   * @generated from field: string project_id = 4;
   */
  projectId: string;

  /**
   * If true, don't actually run the job. Just check that it would run.
   *
   * @generated from field: bool dry_run = 5;
   */
  dryRun: boolean;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobQueryRequest.
 * Use `create(JobQueryRequestSchema)` to create a new message.
 */
export const JobQueryRequestSchema: GenMessage<JobQueryRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 12);

/**
 * Job query response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryResponse
 */
export type JobQueryResponse = Message<"google.cloud.bigquery.logging.v1.JobQueryResponse"> & {
  /**
   * The total number of rows in the full query result set.
   *
   * @generated from field: uint64 total_results = 1;
   */
  totalResults: bigint;

  /**
   * Information about the queried job.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobQueryResponse.
 * Use `create(JobQueryResponseSchema)` to create a new message.
 */
export const JobQueryResponseSchema: GenMessage<JobQueryResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 13);

/**
 * Job getQueryResults request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest
 */
export type JobGetQueryResultsRequest = Message<"google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest"> & {
  /**
   * Maximum number of results to return.
   *
   * @generated from field: uint32 max_results = 1;
   */
  maxResults: number;

  /**
   * Zero-based row number at which to start.
   *
   * @generated from field: uint64 start_row = 2;
   */
  startRow: bigint;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobGetQueryResultsRequest.
 * Use `create(JobGetQueryResultsRequestSchema)` to create a new message.
 */
export const JobGetQueryResultsRequestSchema: GenMessage<JobGetQueryResultsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 14);

/**
 * Job getQueryResults response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse
 */
export type JobGetQueryResultsResponse = Message<"google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse"> & {
  /**
   * Total number of results in query results.
   *
   * @generated from field: uint64 total_results = 1;
   */
  totalResults: bigint;

  /**
   * The job that was created to run the query.
   * It completed if `job.status.state` is `DONE`.
   * It failed if `job.status.errorResult` is also present.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobGetQueryResultsResponse.
 * Use `create(JobGetQueryResultsResponseSchema)` to create a new message.
 */
export const JobGetQueryResultsResponseSchema: GenMessage<JobGetQueryResultsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 15);

/**
 * Job getQueryDone response.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobQueryDoneResponse
 */
export type JobQueryDoneResponse = Message<"google.cloud.bigquery.logging.v1.JobQueryDoneResponse"> & {
  /**
   * The job and status information.
   * The job completed if `job.status.state` is `DONE`.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 1;
   */
  job?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobQueryDoneResponse.
 * Use `create(JobQueryDoneResponseSchema)` to create a new message.
 */
export const JobQueryDoneResponseSchema: GenMessage<JobQueryDoneResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 16);

/**
 * Query job completed event.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobCompletedEvent
 */
export type JobCompletedEvent = Message<"google.cloud.bigquery.logging.v1.JobCompletedEvent"> & {
  /**
   * Name of the event.
   *
   * @generated from field: string event_name = 1;
   */
  eventName: string;

  /**
   * Job information.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.Job job = 2;
   */
  job?: Job;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobCompletedEvent.
 * Use `create(JobCompletedEventSchema)` to create a new message.
 */
export const JobCompletedEventSchema: GenMessage<JobCompletedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 17);

/**
 * Table data read event. Only present for tables, not views, and is only
 * included in the log record for the project that owns the table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableDataReadEvent
 */
export type TableDataReadEvent = Message<"google.cloud.bigquery.logging.v1.TableDataReadEvent"> & {
  /**
   * Name of the accessed table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName table_name = 1;
   */
  tableName?: TableName;

  /**
   * A list of referenced fields. This information is not included by default.
   * To enable this in the logs, please contact BigQuery support or open a bug
   * in the BigQuery issue tracker.
   *
   * @generated from field: repeated string referenced_fields = 2;
   */
  referencedFields: string[];
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableDataReadEvent.
 * Use `create(TableDataReadEventSchema)` to create a new message.
 */
export const TableDataReadEventSchema: GenMessage<TableDataReadEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 18);

/**
 * Table data-list request.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableDataListRequest
 */
export type TableDataListRequest = Message<"google.cloud.bigquery.logging.v1.TableDataListRequest"> & {
  /**
   * Starting row offset.
   *
   * @generated from field: uint64 start_row = 1;
   */
  startRow: bigint;

  /**
   * Maximum number of results to return.
   *
   * @generated from field: uint32 max_results = 2;
   */
  maxResults: number;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableDataListRequest.
 * Use `create(TableDataListRequestSchema)` to create a new message.
 */
export const TableDataListRequestSchema: GenMessage<TableDataListRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 19);

/**
 * Describes a BigQuery table.
 * See the [Table](/bigquery/docs/reference/v2/tables) API resource
 * for more details on individual fields.
 * Note: `Table.schema` has been deprecated in favor of `Table.schemaJson`.
 * `Table.schema` may continue to be present in your logs during this
 * transition.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Table
 */
export type Table = Message<"google.cloud.bigquery.logging.v1.Table"> & {
  /**
   * The name of the table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName table_name = 1;
   */
  tableName?: TableName;

  /**
   * User-provided metadata for the table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableInfo info = 2;
   */
  info?: TableInfo;

  /**
   * A JSON representation of the table's schema.
   *
   * @generated from field: string schema_json = 8;
   */
  schemaJson: string;

  /**
   * If present, this is a virtual table defined by a SQL query.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableViewDefinition view = 4;
   */
  view?: TableViewDefinition;

  /**
   * The expiration date for the table, after which the table
   * is deleted and the storage reclaimed.
   * If not present, the table persists indefinitely.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * The time the table was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * The time the table was last truncated
   * by an operation with a `writeDisposition` of `WRITE_TRUNCATE`.
   *
   * @generated from field: google.protobuf.Timestamp truncate_time = 7;
   */
  truncateTime?: Timestamp;

  /**
   * The time the table was last modified.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 9;
   */
  updateTime?: Timestamp;

  /**
   * The table encryption information. Set when non-default encryption is used.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.EncryptionInfo encryption = 10;
   */
  encryption?: EncryptionInfo;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.Table.
 * Use `create(TableSchema)` to create a new message.
 */
export const TableSchema: GenMessage<Table> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 20);

/**
 * User-provided metadata for a table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableInfo
 */
export type TableInfo = Message<"google.cloud.bigquery.logging.v1.TableInfo"> & {
  /**
   * A short name for the table, such as`"Analytics Data - Jan 2011"`.
   *
   * @generated from field: string friendly_name = 1;
   */
  friendlyName: string;

  /**
   * A long description, perhaps several paragraphs,
   * describing the table contents in detail.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Labels provided for the table.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableInfo.
 * Use `create(TableInfoSchema)` to create a new message.
 */
export const TableInfoSchema: GenMessage<TableInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 21);

/**
 * Describes a virtual table defined by a SQL query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableViewDefinition
 */
export type TableViewDefinition = Message<"google.cloud.bigquery.logging.v1.TableViewDefinition"> & {
  /**
   * SQL query defining the view.
   *
   * @generated from field: string query = 1;
   */
  query: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableViewDefinition.
 * Use `create(TableViewDefinitionSchema)` to create a new message.
 */
export const TableViewDefinitionSchema: GenMessage<TableViewDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 22);

/**
 * BigQuery dataset information.
 * See the [Dataset](/bigquery/docs/reference/v2/datasets) API resource
 * for more details on individual fields.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Dataset
 */
export type Dataset = Message<"google.cloud.bigquery.logging.v1.Dataset"> & {
  /**
   * The name of the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName dataset_name = 1;
   */
  datasetName?: DatasetName;

  /**
   * User-provided metadata for the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetInfo info = 2;
   */
  info?: DatasetInfo;

  /**
   * The time the dataset was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * The time the dataset was last modified.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * The access control list for the dataset.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.BigQueryAcl acl = 6;
   */
  acl?: BigQueryAcl;

  /**
   * If this field is present, each table that does not specify an
   * expiration time is assigned an expiration time by adding this
   * duration to the table's `createTime`.  If this field is empty,
   * there is no default table expiration time.
   *
   * @generated from field: google.protobuf.Duration default_table_expire_duration = 8;
   */
  defaultTableExpireDuration?: Duration;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.Dataset.
 * Use `create(DatasetSchema)` to create a new message.
 */
export const DatasetSchema: GenMessage<Dataset> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 23);

/**
 * User-provided metadata for a dataset.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetInfo
 */
export type DatasetInfo = Message<"google.cloud.bigquery.logging.v1.DatasetInfo"> & {
  /**
   * A short name for the dataset, such as`"Analytics Data 2011"`.
   *
   * @generated from field: string friendly_name = 1;
   */
  friendlyName: string;

  /**
   * A long description, perhaps several paragraphs,
   * describing the dataset contents in detail.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Labels provided for the dataset.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetInfo.
 * Use `create(DatasetInfoSchema)` to create a new message.
 */
export const DatasetInfoSchema: GenMessage<DatasetInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 24);

/**
 * An access control list.
 *
 * @generated from message google.cloud.bigquery.logging.v1.BigQueryAcl
 */
export type BigQueryAcl = Message<"google.cloud.bigquery.logging.v1.BigQueryAcl"> & {
  /**
   * Access control entry list.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.BigQueryAcl.Entry entries = 1;
   */
  entries: BigQueryAcl_Entry[];
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.BigQueryAcl.
 * Use `create(BigQueryAclSchema)` to create a new message.
 */
export const BigQueryAclSchema: GenMessage<BigQueryAcl> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 25);

/**
 * Access control entry.
 *
 * @generated from message google.cloud.bigquery.logging.v1.BigQueryAcl.Entry
 */
export type BigQueryAcl_Entry = Message<"google.cloud.bigquery.logging.v1.BigQueryAcl.Entry"> & {
  /**
   * The granted role, which can be `READER`, `WRITER`, or `OWNER`.
   *
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * Grants access to a group identified by an email address.
   *
   * @generated from field: string group_email = 2;
   */
  groupEmail: string;

  /**
   * Grants access to a user identified by an email address.
   *
   * @generated from field: string user_email = 3;
   */
  userEmail: string;

  /**
   * Grants access to all members of a domain.
   *
   * @generated from field: string domain = 4;
   */
  domain: string;

  /**
   * Grants access to special groups. Valid groups are `PROJECT_OWNERS`,
   * `PROJECT_READERS`, `PROJECT_WRITERS` and `ALL_AUTHENTICATED_USERS`.
   *
   * @generated from field: string special_group = 5;
   */
  specialGroup: string;

  /**
   * Grants access to a BigQuery View.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName view_name = 6;
   */
  viewName?: TableName;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.BigQueryAcl.Entry.
 * Use `create(BigQueryAcl_EntrySchema)` to create a new message.
 */
export const BigQueryAcl_EntrySchema: GenMessage<BigQueryAcl_Entry> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 25, 0);

/**
 * Describes a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.Job
 */
export type Job = Message<"google.cloud.bigquery.logging.v1.Job"> & {
  /**
   * Job name.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobName job_name = 1;
   */
  jobName?: JobName;

  /**
   * Job configuration.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration job_configuration = 2;
   */
  jobConfiguration?: JobConfiguration;

  /**
   * Job status.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobStatus job_status = 3;
   */
  jobStatus?: JobStatus;

  /**
   * Job statistics.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.JobStatistics job_statistics = 4;
   */
  jobStatistics?: JobStatistics;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.Job.
 * Use `create(JobSchema)` to create a new message.
 */
export const JobSchema: GenMessage<Job> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 26);

/**
 * Job configuration information.
 * See the [Jobs](/bigquery/docs/reference/v2/jobs) API resource
 * for more details on individual fields.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration
 */
export type JobConfiguration = Message<"google.cloud.bigquery.logging.v1.JobConfiguration"> & {
  /**
   * Job configuration information.
   *
   * @generated from oneof google.cloud.bigquery.logging.v1.JobConfiguration.configuration
   */
  configuration: {
    /**
     * Query job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Query query = 5;
     */
    value: JobConfiguration_Query;
    case: "query";
  } | {
    /**
     * Load job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Load load = 6;
     */
    value: JobConfiguration_Load;
    case: "load";
  } | {
    /**
     * Extract job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.Extract extract = 7;
     */
    value: JobConfiguration_Extract;
    case: "extract";
  } | {
    /**
     * TableCopy job information.
     *
     * @generated from field: google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy table_copy = 8;
     */
    value: JobConfiguration_TableCopy;
    case: "tableCopy";
  } | { case: undefined; value?: undefined };

  /**
   * If true, don't actually run the job. Just check that it would run.
   *
   * @generated from field: bool dry_run = 9;
   */
  dryRun: boolean;

  /**
   * Labels provided for the job.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobConfiguration.
 * Use `create(JobConfigurationSchema)` to create a new message.
 */
export const JobConfigurationSchema: GenMessage<JobConfiguration> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 27);

/**
 * Describes a query job, which executes a SQL-like query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Query
 */
export type JobConfiguration_Query = Message<"google.cloud.bigquery.logging.v1.JobConfiguration.Query"> & {
  /**
   * The SQL query to run.
   *
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * The table where results are written.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 2;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 3;
   */
  createDisposition: string;

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 4;
   */
  writeDisposition: string;

  /**
   * If a table name is specified without a dataset in a query,
   * this dataset will be added to table name.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.DatasetName default_dataset = 5;
   */
  defaultDataset?: DatasetName;

  /**
   * Describes data sources outside BigQuery, if needed.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableDefinition table_definitions = 6;
   */
  tableDefinitions: TableDefinition[];

  /**
   * Describes the priority given to the query:
   * `QUERY_INTERACTIVE` or `QUERY_BATCH`.
   *
   * @generated from field: string query_priority = 7;
   */
  queryPriority: string;

  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 8;
   */
  destinationTableEncryption?: EncryptionInfo;

  /**
   * Type of the statement (e.g. SELECT, INSERT, CREATE_TABLE, CREATE_MODEL..)
   *
   * @generated from field: string statement_type = 9;
   */
  statementType: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobConfiguration.Query.
 * Use `create(JobConfiguration_QuerySchema)` to create a new message.
 */
export const JobConfiguration_QuerySchema: GenMessage<JobConfiguration_Query> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 27, 0);

/**
 * Describes a load job, which loads data from an external source via
 * the  import pipeline.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Load
 */
export type JobConfiguration_Load = Message<"google.cloud.bigquery.logging.v1.JobConfiguration.Load"> & {
  /**
   * URIs for the data to be imported. Only Google Cloud Storage URIs are
   * supported.
   *
   * @generated from field: repeated string source_uris = 1;
   */
  sourceUris: string[];

  /**
   * The table schema in JSON format representation of a TableSchema.
   *
   * @generated from field: string schema_json = 6;
   */
  schemaJson: string;

  /**
   * The table where the imported data is written.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 3;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 4;
   */
  createDisposition: string;

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 5;
   */
  writeDisposition: string;

  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 7;
   */
  destinationTableEncryption?: EncryptionInfo;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobConfiguration.Load.
 * Use `create(JobConfiguration_LoadSchema)` to create a new message.
 */
export const JobConfiguration_LoadSchema: GenMessage<JobConfiguration_Load> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 27, 1);

/**
 * Describes an extract job, which exports data to an external source
 * via the  export pipeline.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.Extract
 */
export type JobConfiguration_Extract = Message<"google.cloud.bigquery.logging.v1.JobConfiguration.Extract"> & {
  /**
   * Google Cloud Storage URIs where extracted data should be written.
   *
   * @generated from field: repeated string destination_uris = 1;
   */
  destinationUris: string[];

  /**
   * The source table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName source_table = 2;
   */
  sourceTable?: TableName;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobConfiguration.Extract.
 * Use `create(JobConfiguration_ExtractSchema)` to create a new message.
 */
export const JobConfiguration_ExtractSchema: GenMessage<JobConfiguration_Extract> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 27, 2);

/**
 * Describes a copy job, which copies an existing table to another table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy
 */
export type JobConfiguration_TableCopy = Message<"google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy"> & {
  /**
   * Source tables.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableName source_tables = 1;
   */
  sourceTables: TableName[];

  /**
   * Destination table.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.TableName destination_table = 2;
   */
  destinationTable?: TableName;

  /**
   * Describes when a job is allowed to create a table:
   * `CREATE_IF_NEEDED`, `CREATE_NEVER`.
   *
   * @generated from field: string create_disposition = 3;
   */
  createDisposition: string;

  /**
   * Describes how writes affect existing tables:
   * `WRITE_TRUNCATE`, `WRITE_APPEND`, `WRITE_EMPTY`.
   *
   * @generated from field: string write_disposition = 4;
   */
  writeDisposition: string;

  /**
   * Result table encryption information. Set when non-default encryption is
   * used.
   *
   * @generated from field: google.cloud.bigquery.logging.v1.EncryptionInfo destination_table_encryption = 5;
   */
  destinationTableEncryption?: EncryptionInfo;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobConfiguration.TableCopy.
 * Use `create(JobConfiguration_TableCopySchema)` to create a new message.
 */
export const JobConfiguration_TableCopySchema: GenMessage<JobConfiguration_TableCopy> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 27, 3);

/**
 * Describes an external data source used in a query.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableDefinition
 */
export type TableDefinition = Message<"google.cloud.bigquery.logging.v1.TableDefinition"> & {
  /**
   * Name of the table, used in queries.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Google Cloud Storage URIs for the data to be imported.
   *
   * @generated from field: repeated string source_uris = 2;
   */
  sourceUris: string[];
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableDefinition.
 * Use `create(TableDefinitionSchema)` to create a new message.
 */
export const TableDefinitionSchema: GenMessage<TableDefinition> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 28);

/**
 * Running state of a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobStatus
 */
export type JobStatus = Message<"google.cloud.bigquery.logging.v1.JobStatus"> & {
  /**
   * State of a job: `PENDING`, `RUNNING`, or `DONE`.
   *
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * If the job did not complete successfully, this field describes why.
   *
   * @generated from field: google.rpc.Status error = 2;
   */
  error?: Status;

  /**
   * Errors encountered during the running of the job. Do not necessarily mean
   * that the job has completed or was unsuccessful.
   *
   * @generated from field: repeated google.rpc.Status additional_errors = 3;
   */
  additionalErrors: Status[];
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobStatus.
 * Use `create(JobStatusSchema)` to create a new message.
 */
export const JobStatusSchema: GenMessage<JobStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 29);

/**
 * Job statistics that may change after a job starts.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobStatistics
 */
export type JobStatistics = Message<"google.cloud.bigquery.logging.v1.JobStatistics"> & {
  /**
   * Time when the job was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Time when the job started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Time when the job ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Total bytes processed for a job.
   *
   * @generated from field: int64 total_processed_bytes = 4;
   */
  totalProcessedBytes: bigint;

  /**
   * Processed bytes, adjusted by the job's CPU usage.
   *
   * @generated from field: int64 total_billed_bytes = 5;
   */
  totalBilledBytes: bigint;

  /**
   * The tier assigned by CPU-based billing.
   *
   * @generated from field: int32 billing_tier = 7;
   */
  billingTier: number;

  /**
   * The total number of slot-ms consumed by the query job.
   *
   * @generated from field: int64 total_slot_ms = 8;
   */
  totalSlotMs: bigint;

  /**
   * Reservation usage. This field reported misleading information and will
   * no longer be populated. Aggregate usage of all jobs submitted to a
   * reservation should provide a more reliable indicator of reservation
   * imbalance.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage reservation_usage = 14 [deprecated = true];
   * @deprecated
   */
  reservationUsage: JobStatistics_ReservationResourceUsage[];

  /**
   * Reservation name or "unreserved" for on-demand resource usage.
   *
   * @generated from field: string reservation = 16;
   */
  reservation: string;

  /**
   * The first N tables accessed by the query job. Older queries that
   * reference a large number of tables may not have all of their
   * tables in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableName referenced_tables = 9;
   */
  referencedTables: TableName[];

  /**
   * Total number of unique tables referenced in the query.
   *
   * @generated from field: int32 total_tables_processed = 10;
   */
  totalTablesProcessed: number;

  /**
   * The first N views accessed by the query job. Older queries that
   * reference a large number of views may not have all of their
   * views in this list. You can use the total_tables_processed count to
   * know how many total tables were read in the query. For new queries,
   * there is currently no limit.
   *
   * @generated from field: repeated google.cloud.bigquery.logging.v1.TableName referenced_views = 11;
   */
  referencedViews: TableName[];

  /**
   * Total number of unique views referenced in the query.
   *
   * @generated from field: int32 total_views_processed = 12;
   */
  totalViewsProcessed: number;

  /**
   * Number of output rows produced by the query job.
   *
   * @generated from field: int64 query_output_row_count = 15;
   */
  queryOutputRowCount: bigint;

  /**
   * Total bytes loaded for an import job.
   *
   * @generated from field: int64 total_load_output_bytes = 13;
   */
  totalLoadOutputBytes: bigint;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobStatistics.
 * Use `create(JobStatisticsSchema)` to create a new message.
 */
export const JobStatisticsSchema: GenMessage<JobStatistics> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 30);

/**
 * Job resource usage breakdown by reservation.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage
 */
export type JobStatistics_ReservationResourceUsage = Message<"google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage"> & {
  /**
   * Reservation name or "unreserved" for on-demand resources usage.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Total slot milliseconds used by the reservation for a particular job.
   *
   * @generated from field: int64 slot_ms = 2;
   */
  slotMs: bigint;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobStatistics.ReservationResourceUsage.
 * Use `create(JobStatistics_ReservationResourceUsageSchema)` to create a new message.
 */
export const JobStatistics_ReservationResourceUsageSchema: GenMessage<JobStatistics_ReservationResourceUsage> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 30, 0);

/**
 * The fully-qualified name for a dataset.
 *
 * @generated from message google.cloud.bigquery.logging.v1.DatasetName
 */
export type DatasetName = Message<"google.cloud.bigquery.logging.v1.DatasetName"> & {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The dataset ID within the project.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.DatasetName.
 * Use `create(DatasetNameSchema)` to create a new message.
 */
export const DatasetNameSchema: GenMessage<DatasetName> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 31);

/**
 * The fully-qualified name for a table.
 *
 * @generated from message google.cloud.bigquery.logging.v1.TableName
 */
export type TableName = Message<"google.cloud.bigquery.logging.v1.TableName"> & {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The dataset ID within the project.
   *
   * @generated from field: string dataset_id = 2;
   */
  datasetId: string;

  /**
   * The table ID of the table within the dataset.
   *
   * @generated from field: string table_id = 3;
   */
  tableId: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.TableName.
 * Use `create(TableNameSchema)` to create a new message.
 */
export const TableNameSchema: GenMessage<TableName> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 32);

/**
 * The fully-qualified name for a job.
 *
 * @generated from message google.cloud.bigquery.logging.v1.JobName
 */
export type JobName = Message<"google.cloud.bigquery.logging.v1.JobName"> & {
  /**
   * The project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The job ID within the project.
   *
   * @generated from field: string job_id = 2;
   */
  jobId: string;

  /**
   * The job location.
   *
   * @generated from field: string location = 3;
   */
  location: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.JobName.
 * Use `create(JobNameSchema)` to create a new message.
 */
export const JobNameSchema: GenMessage<JobName> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 33);

/**
 * Describes encryption properties for a table or a job
 *
 * @generated from message google.cloud.bigquery.logging.v1.EncryptionInfo
 */
export type EncryptionInfo = Message<"google.cloud.bigquery.logging.v1.EncryptionInfo"> & {
  /**
   * unique identifier for cloud kms key
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName: string;
};

/**
 * Describes the message google.cloud.bigquery.logging.v1.EncryptionInfo.
 * Use `create(EncryptionInfoSchema)` to create a new message.
 */
export const EncryptionInfoSchema: GenMessage<EncryptionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_logging_v1_audit_data, 34);

