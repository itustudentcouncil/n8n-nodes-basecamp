// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/bigquery/storage/v1alpha/metastore_partition.proto (package google.cloud.bigquery.storage.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { MetastorePartition, MetastorePartitionList, MetastorePartitionValues, StreamList } from "./partition_pb";
import { file_google_cloud_bigquery_storage_v1alpha_partition } from "./partition_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/bigquery/storage/v1alpha/metastore_partition.proto.
 */
export const file_google_cloud_bigquery_storage_v1alpha_metastore_partition: GenFile = /*@__PURE__*/
  fileDesc("Cj9nb29nbGUvY2xvdWQvYmlncXVlcnkvc3RvcmFnZS92MWFscGhhL21ldGFzdG9yZV9wYXJ0aXRpb24ucHJvdG8SJWdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEitQEKH0NyZWF0ZU1ldGFzdG9yZVBhcnRpdGlvblJlcXVlc3QSNQoGcGFyZW50GAEgASgJQiXgQQL6QR8KHWJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL1RhYmxlElsKE21ldGFzdG9yZV9wYXJ0aXRpb24YAiABKAsyOS5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLk1ldGFzdG9yZVBhcnRpdGlvbkID4EECIuQBCiVCYXRjaENyZWF0ZU1ldGFzdG9yZVBhcnRpdGlvbnNSZXF1ZXN0EjUKBnBhcmVudBgBIAEoCUIl4EEC+kEfCh1iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9UYWJsZRJdCghyZXF1ZXN0cxgCIAMoCzJGLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuQ3JlYXRlTWV0YXN0b3JlUGFydGl0aW9uUmVxdWVzdEID4EECEiUKGHNraXBfZXhpc3RpbmdfcGFydGl0aW9ucxgDIAEoCEID4EEBIncKJkJhdGNoQ3JlYXRlTWV0YXN0b3JlUGFydGl0aW9uc1Jlc3BvbnNlEk0KCnBhcnRpdGlvbnMYASADKAsyOS5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLk1ldGFzdG9yZVBhcnRpdGlvbiK+AQolQmF0Y2hEZWxldGVNZXRhc3RvcmVQYXJ0aXRpb25zUmVxdWVzdBI1CgZwYXJlbnQYASABKAlCJeBBAvpBHwodYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vVGFibGUSXgoQcGFydGl0aW9uX3ZhbHVlcxgCIAMoCzI/Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuTWV0YXN0b3JlUGFydGl0aW9uVmFsdWVzQgPgQQIitAEKH1VwZGF0ZU1ldGFzdG9yZVBhcnRpdGlvblJlcXVlc3QSWwoTbWV0YXN0b3JlX3BhcnRpdGlvbhgBIAEoCzI5Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuTWV0YXN0b3JlUGFydGl0aW9uQgPgQQISNAoLdXBkYXRlX21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrQgPgQQEivQEKJUJhdGNoVXBkYXRlTWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QSNQoGcGFyZW50GAEgASgJQiXgQQL6QR8KHWJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL1RhYmxlEl0KCHJlcXVlc3RzGAIgAygLMkYuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnN0b3JhZ2UudjFhbHBoYS5VcGRhdGVNZXRhc3RvcmVQYXJ0aXRpb25SZXF1ZXN0QgPgQQIidwomQmF0Y2hVcGRhdGVNZXRhc3RvcmVQYXJ0aXRpb25zUmVzcG9uc2USTQoKcGFydGl0aW9ucxgBIAMoCzI5Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuTWV0YXN0b3JlUGFydGl0aW9uImwKHkxpc3RNZXRhc3RvcmVQYXJ0aXRpb25zUmVxdWVzdBI1CgZwYXJlbnQYASABKAlCJeBBAvpBHwodYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vVGFibGUSEwoGZmlsdGVyGAIgASgJQgPgQQEiyAEKH0xpc3RNZXRhc3RvcmVQYXJ0aXRpb25zUmVzcG9uc2USUwoKcGFydGl0aW9ucxgBIAEoCzI9Lmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuTWV0YXN0b3JlUGFydGl0aW9uTGlzdEgAEkQKB3N0cmVhbXMYAiABKAsyMS5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLlN0cmVhbUxpc3RIAEIKCghyZXNwb25zZSLeAQogU3RyZWFtTWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QSNQoGcGFyZW50GAEgASgJQiXgQQL6QR8KHWJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL1RhYmxlElwKFG1ldGFzdG9yZV9wYXJ0aXRpb25zGAIgAygLMjkuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnN0b3JhZ2UudjFhbHBoYS5NZXRhc3RvcmVQYXJ0aXRpb25CA+BBARIlChhza2lwX2V4aXN0aW5nX3BhcnRpdGlvbnMYAyABKAhCA+BBASJ1CiFTdHJlYW1NZXRhc3RvcmVQYXJ0aXRpb25zUmVzcG9uc2USJwofdG90YWxfcGFydGl0aW9uc19zdHJlYW1lZF9jb3VudBgCIAEoAxInCh90b3RhbF9wYXJ0aXRpb25zX2luc2VydGVkX2NvdW50GAMgASgDIkwKFkJhdGNoU2l6ZVRvb0xhcmdlRXJyb3ISFgoObWF4X2JhdGNoX3NpemUYASABKAMSGgoNZXJyb3JfbWVzc2FnZRgCIAEoCUID4EEBMoILChlNZXRhc3RvcmVQYXJ0aXRpb25TZXJ2aWNlEp0CCh5CYXRjaENyZWF0ZU1ldGFzdG9yZVBhcnRpdGlvbnMSTC5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLkJhdGNoQ3JlYXRlTWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QaTS5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLkJhdGNoQ3JlYXRlTWV0YXN0b3JlUGFydGl0aW9uc1Jlc3BvbnNlIl6C0+STAlg6ASoiUy92MWFscGhhL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9kYXRhc2V0cy8qL3RhYmxlcy8qfS9wYXJ0aXRpb25zOmJhdGNoQ3JlYXRlEuYBCh5CYXRjaERlbGV0ZU1ldGFzdG9yZVBhcnRpdGlvbnMSTC5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLkJhdGNoRGVsZXRlTWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiXoLT5JMCWDoBKiJTL3YxYWxwaGEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2RhdGFzZXRzLyovdGFibGVzLyp9L3BhcnRpdGlvbnM6YmF0Y2hEZWxldGUSnQIKHkJhdGNoVXBkYXRlTWV0YXN0b3JlUGFydGl0aW9ucxJMLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuQmF0Y2hVcGRhdGVNZXRhc3RvcmVQYXJ0aXRpb25zUmVxdWVzdBpNLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuQmF0Y2hVcGRhdGVNZXRhc3RvcmVQYXJ0aXRpb25zUmVzcG9uc2UiXoLT5JMCWDoBKiJTL3YxYWxwaGEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2RhdGFzZXRzLyovdGFibGVzLyp9L3BhcnRpdGlvbnM6YmF0Y2hVcGRhdGUShwIKF0xpc3RNZXRhc3RvcmVQYXJ0aXRpb25zEkUuZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnN0b3JhZ2UudjFhbHBoYS5MaXN0TWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QaRi5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLkxpc3RNZXRhc3RvcmVQYXJ0aXRpb25zUmVzcG9uc2UiXdpBBnBhcmVudILT5JMCThJML3YxYWxwaGEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2RhdGFzZXRzLyovdGFibGVzLyp9L3BhcnRpdGlvbnM6bGlzdBK0AQoZU3RyZWFtTWV0YXN0b3JlUGFydGl0aW9ucxJHLmdvb2dsZS5jbG91ZC5iaWdxdWVyeS5zdG9yYWdlLnYxYWxwaGEuU3RyZWFtTWV0YXN0b3JlUGFydGl0aW9uc1JlcXVlc3QaSC5nb29nbGUuY2xvdWQuYmlncXVlcnkuc3RvcmFnZS52MWFscGhhLlN0cmVhbU1ldGFzdG9yZVBhcnRpdGlvbnNSZXNwb25zZSIAKAEwARp7ykEeYmlncXVlcnlzdG9yYWdlLmdvb2dsZWFwaXMuY29t0kFXaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9iaWdxdWVyeSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQroCCiljb20uZ29vZ2xlLmNsb3VkLmJpZ3F1ZXJ5LnN0b3JhZ2UudjFhbHBoYUIeTWV0YXN0b3JlUGFydGl0aW9uU2VydmljZVByb3RvUAFaQ2Nsb3VkLmdvb2dsZS5jb20vZ28vYmlncXVlcnkvc3RvcmFnZS9hcGl2MWFscGhhL3N0b3JhZ2VwYjtzdG9yYWdlcGKqAiVHb29nbGUuQ2xvdWQuQmlnUXVlcnkuU3RvcmFnZS5WMUFscGhhygIlR29vZ2xlXENsb3VkXEJpZ1F1ZXJ5XFN0b3JhZ2VcVjFhbHBoYepBVQodYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vVGFibGUSNHByb2plY3RzL3twcm9qZWN0fS9kYXRhc2V0cy97ZGF0YXNldH0vdGFibGVzL3t0YWJsZX1iBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_bigquery_storage_v1alpha_partition, file_google_protobuf_empty, file_google_protobuf_field_mask]);

/**
 * Request message for CreateMetastorePartition. The MetastorePartition is
 * uniquely identified by values, which is an ordered list. Hence, there is no
 * separate name or partition id field.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.CreateMetastorePartitionRequest
 */
export type CreateMetastorePartitionRequest = Message<"google.cloud.bigquery.storage.v1alpha.CreateMetastorePartitionRequest"> & {
  /**
   * Required. Reference to the table to where the metastore partition to be
   * added, in the format of
   * projects/{project}/databases/{databases}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The metastore partition to be added.
   *
   * @generated from field: google.cloud.bigquery.storage.v1alpha.MetastorePartition metastore_partition = 2;
   */
  metastorePartition?: MetastorePartition;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.CreateMetastorePartitionRequest.
 * Use `create(CreateMetastorePartitionRequestSchema)` to create a new message.
 */
export const CreateMetastorePartitionRequestSchema: GenMessage<CreateMetastorePartitionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 0);

/**
 * Request message for BatchCreateMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest
 */
export type BatchCreateMetastorePartitionsRequest = Message<"google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest"> & {
  /**
   * Required. Reference to the table to where the metastore partitions to be
   * added, in the format of
   * projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Requests to add metastore partitions to the table.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.CreateMetastorePartitionRequest requests = 2;
   */
  requests: CreateMetastorePartitionRequest[];

  /**
   * Optional. Mimics the ifNotExists flag in IMetaStoreClient
   * add_partitions(..). If the flag is set to false, the server will return
   * ALREADY_EXISTS if any partition already exists. If the flag is set to true,
   * the server will skip existing partitions and insert only the non-existing
   * partitions.
   *
   * @generated from field: bool skip_existing_partitions = 3;
   */
  skipExistingPartitions: boolean;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsRequest.
 * Use `create(BatchCreateMetastorePartitionsRequestSchema)` to create a new message.
 */
export const BatchCreateMetastorePartitionsRequestSchema: GenMessage<BatchCreateMetastorePartitionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 1);

/**
 * Response message for BatchCreateMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse
 */
export type BatchCreateMetastorePartitionsResponse = Message<"google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse"> & {
  /**
   * The list of metastore partitions that have been created.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.MetastorePartition partitions = 1;
   */
  partitions: MetastorePartition[];
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse.
 * Use `create(BatchCreateMetastorePartitionsResponseSchema)` to create a new message.
 */
export const BatchCreateMetastorePartitionsResponseSchema: GenMessage<BatchCreateMetastorePartitionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 2);

/**
 * Request message for BatchDeleteMetastorePartitions. The MetastorePartition is
 * uniquely identified by values, which is an ordered list. Hence, there is no
 * separate name or partition id field.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest
 */
export type BatchDeleteMetastorePartitionsRequest = Message<"google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest"> & {
  /**
   * Required. Reference to the table to which these metastore partitions
   * belong, in the format of
   * projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The list of metastore partitions (identified by its values) to be
   * deleted. A maximum of 100 partitions can be deleted in a batch.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.MetastorePartitionValues partition_values = 2;
   */
  partitionValues: MetastorePartitionValues[];
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchDeleteMetastorePartitionsRequest.
 * Use `create(BatchDeleteMetastorePartitionsRequestSchema)` to create a new message.
 */
export const BatchDeleteMetastorePartitionsRequestSchema: GenMessage<BatchDeleteMetastorePartitionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 3);

/**
 * Request message for UpdateMetastorePartition.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.UpdateMetastorePartitionRequest
 */
export type UpdateMetastorePartitionRequest = Message<"google.cloud.bigquery.storage.v1alpha.UpdateMetastorePartitionRequest"> & {
  /**
   * Required. The metastore partition to be updated.
   *
   * @generated from field: google.cloud.bigquery.storage.v1alpha.MetastorePartition metastore_partition = 1;
   */
  metastorePartition?: MetastorePartition;

  /**
   * Optional. The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.UpdateMetastorePartitionRequest.
 * Use `create(UpdateMetastorePartitionRequestSchema)` to create a new message.
 */
export const UpdateMetastorePartitionRequestSchema: GenMessage<UpdateMetastorePartitionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 4);

/**
 * Request message for BatchUpdateMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest
 */
export type BatchUpdateMetastorePartitionsRequest = Message<"google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest"> & {
  /**
   * Required. Reference to the table to which these metastore partitions
   * belong, in the format of
   * projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Requests to update metastore partitions in the table.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.UpdateMetastorePartitionRequest requests = 2;
   */
  requests: UpdateMetastorePartitionRequest[];
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsRequest.
 * Use `create(BatchUpdateMetastorePartitionsRequestSchema)` to create a new message.
 */
export const BatchUpdateMetastorePartitionsRequestSchema: GenMessage<BatchUpdateMetastorePartitionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 5);

/**
 * Response message for BatchUpdateMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse
 */
export type BatchUpdateMetastorePartitionsResponse = Message<"google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse"> & {
  /**
   * The list of metastore partitions that have been updated.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.MetastorePartition partitions = 1;
   */
  partitions: MetastorePartition[];
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse.
 * Use `create(BatchUpdateMetastorePartitionsResponseSchema)` to create a new message.
 */
export const BatchUpdateMetastorePartitionsResponseSchema: GenMessage<BatchUpdateMetastorePartitionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 6);

/**
 * Request message for ListMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest
 */
export type ListMetastorePartitionsRequest = Message<"google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest"> & {
  /**
   * Required. Reference to the table to which these metastore partitions
   * belong, in the format of
   * projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. SQL text filtering statement, similar to a WHERE clause in a
   * query. Only supports single-row expressions.  Aggregate functions are not
   * supported.
   *
   * Examples: "int_field > 5"
   *           "date_field = CAST('2014-9-27' as DATE)"
   *           "nullable_field is not NULL"
   *           "st_equals(geo_field, st_geofromtext("POINT(2, 2)"))"
   *           "numeric_field BETWEEN 1.0 AND 5.0"
   * Restricted to a maximum length for 1 MB.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsRequest.
 * Use `create(ListMetastorePartitionsRequestSchema)` to create a new message.
 */
export const ListMetastorePartitionsRequestSchema: GenMessage<ListMetastorePartitionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 7);

/**
 * Response message for ListMetastorePartitions.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse
 */
export type ListMetastorePartitionsResponse = Message<"google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse"> & {
  /**
   * The response depends on the number of metastore partitions to be returned;
   * it can be a list of partitions or a list of
   * [ReadStream]((https://cloud.google.com/bigquery/docs/reference/storage/rpc/google.cloud.bigquery.storage.v1#readstream))
   * objects. For the second situation, the BigQuery [Read API
   * ReadRows](https://cloud.google.com/bigquery/docs/reference/storage#read_from_a_session_stream)
   * method must be used to stream the data and convert it into a list of
   * partitions.
   *
   * @generated from oneof google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse.response
   */
  response: {
    /**
     * The list of partitions.
     *
     * @generated from field: google.cloud.bigquery.storage.v1alpha.MetastorePartitionList partitions = 1;
     */
    value: MetastorePartitionList;
    case: "partitions";
  } | {
    /**
     * The list of streams.
     *
     * @generated from field: google.cloud.bigquery.storage.v1alpha.StreamList streams = 2;
     */
    value: StreamList;
    case: "streams";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse.
 * Use `create(ListMetastorePartitionsResponseSchema)` to create a new message.
 */
export const ListMetastorePartitionsResponseSchema: GenMessage<ListMetastorePartitionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 8);

/**
 * The top-level message sent by the client to the
 * [Partitions.StreamMetastorePartitions][] method.
 * Follows the default gRPC streaming maximum size of 4 MB.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest
 */
export type StreamMetastorePartitionsRequest = Message<"google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest"> & {
  /**
   * Required. Reference to the table to where the partition to be added, in the
   * format of
   * projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. A list of metastore partitions to be added to the table.
   *
   * @generated from field: repeated google.cloud.bigquery.storage.v1alpha.MetastorePartition metastore_partitions = 2;
   */
  metastorePartitions: MetastorePartition[];

  /**
   * Optional. Mimics the ifNotExists flag in IMetaStoreClient
   * add_partitions(..). If the flag is set to false, the server will return
   * ALREADY_EXISTS on commit if any partition already exists. If the flag is
   * set to true:
   *  1) the server will skip existing partitions
   *  insert only the non-existing partitions as part of the commit.
   *  2) The client must set the `skip_existing_partitions` field to true for
   *  all requests in the stream.
   *
   * @generated from field: bool skip_existing_partitions = 3;
   */
  skipExistingPartitions: boolean;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest.
 * Use `create(StreamMetastorePartitionsRequestSchema)` to create a new message.
 */
export const StreamMetastorePartitionsRequestSchema: GenMessage<StreamMetastorePartitionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 9);

/**
 * This is the response message sent by the server
 * to the client for the [Partitions.StreamMetastorePartitions][] method when
 * the commit is successful. Server will close the stream after sending this
 * message.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse
 */
export type StreamMetastorePartitionsResponse = Message<"google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse"> & {
  /**
   * Total count of partitions streamed by the client during the lifetime of the
   * stream. This is only set in the final response message before closing the
   * stream.
   *
   * @generated from field: int64 total_partitions_streamed_count = 2;
   */
  totalPartitionsStreamedCount: bigint;

  /**
   * Total count of partitions inserted by the server during the lifetime of the
   * stream. This is only set in the final response message before closing the
   * stream.
   *
   * @generated from field: int64 total_partitions_inserted_count = 3;
   */
  totalPartitionsInsertedCount: bigint;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse.
 * Use `create(StreamMetastorePartitionsResponseSchema)` to create a new message.
 */
export const StreamMetastorePartitionsResponseSchema: GenMessage<StreamMetastorePartitionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 10);

/**
 * Structured custom error message for batch size too large error.
 * The error can be attached as error details in the returned rpc Status for
 * more structured error handling in the client.
 *
 * @generated from message google.cloud.bigquery.storage.v1alpha.BatchSizeTooLargeError
 */
export type BatchSizeTooLargeError = Message<"google.cloud.bigquery.storage.v1alpha.BatchSizeTooLargeError"> & {
  /**
   * The maximum number of items that are supported in a single batch. This is
   * returned as a hint to the client to adjust the batch size.
   *
   * @generated from field: int64 max_batch_size = 1;
   */
  maxBatchSize: bigint;

  /**
   * Optional. The error message that is returned to the client.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;
};

/**
 * Describes the message google.cloud.bigquery.storage.v1alpha.BatchSizeTooLargeError.
 * Use `create(BatchSizeTooLargeErrorSchema)` to create a new message.
 */
export const BatchSizeTooLargeErrorSchema: GenMessage<BatchSizeTooLargeError> = /*@__PURE__*/
  messageDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 11);

/**
 * BigQuery Metastore Partition Service API.
 * This service is used for managing metastore partitions in BigQuery metastore.
 * The service supports only batch operations for write.
 *
 * @generated from service google.cloud.bigquery.storage.v1alpha.MetastorePartitionService
 */
export const MetastorePartitionService: GenService<{
  /**
   * Adds metastore partitions to a table.
   *
   * @generated from rpc google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.BatchCreateMetastorePartitions
   */
  batchCreateMetastorePartitions: {
    methodKind: "unary";
    input: typeof BatchCreateMetastorePartitionsRequestSchema;
    output: typeof BatchCreateMetastorePartitionsResponseSchema;
  },
  /**
   * Deletes metastore partitions from a table.
   *
   * @generated from rpc google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.BatchDeleteMetastorePartitions
   */
  batchDeleteMetastorePartitions: {
    methodKind: "unary";
    input: typeof BatchDeleteMetastorePartitionsRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Updates metastore partitions in a table.
   *
   * @generated from rpc google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.BatchUpdateMetastorePartitions
   */
  batchUpdateMetastorePartitions: {
    methodKind: "unary";
    input: typeof BatchUpdateMetastorePartitionsRequestSchema;
    output: typeof BatchUpdateMetastorePartitionsResponseSchema;
  },
  /**
   * Gets metastore partitions from a table.
   *
   * @generated from rpc google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.ListMetastorePartitions
   */
  listMetastorePartitions: {
    methodKind: "unary";
    input: typeof ListMetastorePartitionsRequestSchema;
    output: typeof ListMetastorePartitionsResponseSchema;
  },
  /**
   * This is a bi-di streaming rpc method that allows the client to send
   * a stream of partitions and commit all of them atomically at the end.
   * If the commit is successful, the server will return a
   * response and close the stream. If the commit fails (due to duplicate
   * partitions or other reason), the server will close the stream with an
   * error. This method is only available via the gRPC API (not REST).
   *
   * @generated from rpc google.cloud.bigquery.storage.v1alpha.MetastorePartitionService.StreamMetastorePartitions
   */
  streamMetastorePartitions: {
    methodKind: "bidi_streaming";
    input: typeof StreamMetastorePartitionsRequestSchema;
    output: typeof StreamMetastorePartitionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_bigquery_storage_v1alpha_metastore_partition, 0);

