// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/functions/v1/functions.proto (package google.cloud.functions.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import { file_google_cloud_functions_v1_operations } from "./operations_pb";
import type { GetIamPolicyRequestSchema, SetIamPolicyRequestSchema, TestIamPermissionsRequestSchema, TestIamPermissionsResponseSchema } from "../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../iam/v1/iam_policy_pb";
import type { PolicySchema } from "../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../iam/v1/policy_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/functions/v1/functions.proto.
 */
export const file_google_cloud_functions_v1_functions: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_functions_v1_operations, file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Describes a Cloud Function that contains user computation executed in
 * response to an event. It encapsulate function and triggers configurations.
 *
 * @generated from message google.cloud.functions.v1.CloudFunction
 */
export type CloudFunction = Message<"google.cloud.functions.v1.CloudFunction"> & {
  /**
   * A user-defined name of the function. Function names must be unique
   * globally and match pattern `projects/*\/locations/*\/functions/*`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * User-provided description of a function.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The location of the function source code.
   *
   * @generated from oneof google.cloud.functions.v1.CloudFunction.source_code
   */
  sourceCode: {
    /**
     * The Google Cloud Storage URL, starting with `gs://`, pointing to the zip
     * archive which contains the function.
     *
     * @generated from field: string source_archive_url = 3;
     */
    value: string;
    case: "sourceArchiveUrl";
  } | {
    /**
     * **Beta Feature**
     *
     * The source repository where a function is hosted.
     *
     * @generated from field: google.cloud.functions.v1.SourceRepository source_repository = 4;
     */
    value: SourceRepository;
    case: "sourceRepository";
  } | {
    /**
     * The Google Cloud Storage signed URL used for source uploading, generated
     * by calling [google.cloud.functions.v1.GenerateUploadUrl].
     *
     * The signature is validated on write methods (Create, Update)
     * The signature is stripped from the Function object on read methods (Get,
     * List)
     *
     * @generated from field: string source_upload_url = 16;
     */
    value: string;
    case: "sourceUploadUrl";
  } | { case: undefined; value?: undefined };

  /**
   * An event that triggers the function.
   *
   * @generated from oneof google.cloud.functions.v1.CloudFunction.trigger
   */
  trigger: {
    /**
     * An HTTPS endpoint type of source that can be triggered via URL.
     *
     * @generated from field: google.cloud.functions.v1.HttpsTrigger https_trigger = 5;
     */
    value: HttpsTrigger;
    case: "httpsTrigger";
  } | {
    /**
     * A source that fires events in response to a condition in another service.
     *
     * @generated from field: google.cloud.functions.v1.EventTrigger event_trigger = 6;
     */
    value: EventTrigger;
    case: "eventTrigger";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. Status of the function deployment.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunctionStatus status = 7;
   */
  status: CloudFunctionStatus;

  /**
   * The name of the function (as defined in source code) that will be
   * executed. Defaults to the resource name suffix (ID of the function), if not
   * specified.
   *
   * @generated from field: string entry_point = 8;
   */
  entryPoint: string;

  /**
   * The runtime in which to run the function. Required when deploying a new
   * function, optional when updating an existing function. For a complete
   * list of possible choices, see the
   * [`gcloud` command
   * reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
   *
   * @generated from field: string runtime = 19;
   */
  runtime: string;

  /**
   * The function execution timeout. Execution is considered failed and
   * can be terminated if the function is not completed at the end of the
   * timeout period. Defaults to 60 seconds.
   *
   * @generated from field: google.protobuf.Duration timeout = 9;
   */
  timeout?: Duration;

  /**
   * The amount of memory in MB available for a function.
   * Defaults to 256MB.
   *
   * @generated from field: int32 available_memory_mb = 10;
   */
  availableMemoryMb: number;

  /**
   * The email of the function's service account. If empty, defaults to
   * `{project_id}@appspot.gserviceaccount.com`.
   *
   * @generated from field: string service_account_email = 11;
   */
  serviceAccountEmail: string;

  /**
   * Output only. The last update timestamp of a Cloud Function.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 12;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The version identifier of the Cloud Function. Each deployment
   * attempt results in a new version of a function being created.
   *
   * @generated from field: int64 version_id = 14;
   */
  versionId: bigint;

  /**
   * Labels associated with this Cloud Function.
   *
   * @generated from field: map<string, string> labels = 15;
   */
  labels: { [key: string]: string };

  /**
   * Environment variables that shall be available during function execution.
   *
   * @generated from field: map<string, string> environment_variables = 17;
   */
  environmentVariables: { [key: string]: string };

  /**
   * Build environment variables that shall be available during build time.
   *
   * @generated from field: map<string, string> build_environment_variables = 28;
   */
  buildEnvironmentVariables: { [key: string]: string };

  /**
   * Deprecated: use vpc_connector
   *
   * @generated from field: string network = 18 [deprecated = true];
   * @deprecated
   */
  network: string;

  /**
   * The limit on the maximum number of function instances that may coexist at a
   * given time.
   *
   * In some cases, such as rapid traffic surges, Cloud Functions may, for a
   * short period of time, create more instances than the specified max
   * instances limit. If your function cannot tolerate this temporary behavior,
   * you may want to factor in a safety margin and set a lower max instances
   * value than your function can tolerate.
   *
   * See the [Max
   * Instances](https://cloud.google.com/functions/docs/max-instances) Guide for
   * more details.
   *
   * @generated from field: int32 max_instances = 20;
   */
  maxInstances: number;

  /**
   * A lower bound for the number function instances that may coexist at a
   * given time.
   *
   * @generated from field: int32 min_instances = 32;
   */
  minInstances: number;

  /**
   * The VPC Network Connector that this cloud function can connect to. It can
   * be either the fully-qualified URI, or the short name of the network
   * connector resource. The format of this field is
   * `projects/*\/locations/*\/connectors/*`
   *
   * This field is mutually exclusive with `network` field and will eventually
   * replace it.
   *
   * See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for
   * more information on connecting Cloud projects.
   *
   * @generated from field: string vpc_connector = 22;
   */
  vpcConnector: string;

  /**
   * The egress settings for the connector, controlling what traffic is diverted
   * through it.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunction.VpcConnectorEgressSettings vpc_connector_egress_settings = 23;
   */
  vpcConnectorEgressSettings: CloudFunction_VpcConnectorEgressSettings;

  /**
   * The ingress settings for the function, controlling what traffic can reach
   * it.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunction.IngressSettings ingress_settings = 24;
   */
  ingressSettings: CloudFunction_IngressSettings;

  /**
   * Resource name of a KMS crypto key (managed by the user) used to
   * encrypt/decrypt function resources.
   *
   * It must match the pattern
   * `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   *
   * If specified, you must also provide an artifact registry repository using
   * the `docker_repository` field that was created with the same KMS crypto
   * key.
   *
   * The following service accounts need to be granted the role 'Cloud KMS
   * CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)'
   * on the Key/KeyRing/Project/Organization (least access preferred).
   *
   * 1. Google Cloud Functions service account
   *    (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) -
   *    Required to protect the function's image.
   * 2. Google Storage service account
   *    (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) -
   *    Required to protect the function's source code.
   *    If this service account does not exist, deploying a function without a
   *    KMS key or retrieving the service agent name provisions it. For more
   *    information, see
   *    https://cloud.google.com/storage/docs/projects#service-agents and
   *    https://cloud.google.com/storage/docs/getting-service-agent#gsutil.
   *
   * Google Cloud Functions delegates access to service agents to protect
   * function resources in internal projects that are not accessible by the
   * end user.
   *
   * @generated from field: string kms_key_name = 25;
   */
  kmsKeyName: string;

  /**
   * Name of the Cloud Build Custom Worker Pool that should be used to build the
   * function. The format of this field is
   * `projects/{project}/locations/{region}/workerPools/{workerPool}` where
   * `{project}` and `{region}` are the project id and region respectively where
   * the worker pool is defined and `{workerPool}` is the short name of the
   * worker pool.
   *
   * If the project id is not the same as the function, then the Cloud
   * Functions Service Agent
   * (`service-<project_number>@gcf-admin-robot.iam.gserviceaccount.com`) must
   * be granted the role Cloud Build Custom Workers Builder
   * (`roles/cloudbuild.customworkers.builder`) in the project.
   *
   * @generated from field: string build_worker_pool = 26;
   */
  buildWorkerPool: string;

  /**
   * Output only. The Cloud Build ID of the latest successful deployment of the
   * function.
   *
   * @generated from field: string build_id = 27;
   */
  buildId: string;

  /**
   * Output only. The Cloud Build Name of the function deployment.
   * `projects/<project-number>/locations/<region>/builds/<build-id>`.
   *
   * @generated from field: string build_name = 33;
   */
  buildName: string;

  /**
   * Secret environment variables configuration.
   *
   * @generated from field: repeated google.cloud.functions.v1.SecretEnvVar secret_environment_variables = 29;
   */
  secretEnvironmentVariables: SecretEnvVar[];

  /**
   * Secret volumes configuration.
   *
   * @generated from field: repeated google.cloud.functions.v1.SecretVolume secret_volumes = 30;
   */
  secretVolumes: SecretVolume[];

  /**
   * Input only. An identifier for Firebase function sources. Disclaimer: This
   * field is only supported for Firebase function deployments.
   *
   * @generated from field: string source_token = 31;
   */
  sourceToken: string;

  /**
   * User-managed repository created in Artifact Registry to which the
   * function's Docker image will be pushed after it is built by Cloud Build.
   * May optionally be encrypted with a customer-managed encryption key (CMEK).
   * If unspecified and `docker_registry` is not explicitly set to
   * `CONTAINER_REGISTRY`, GCF will create and use a default Artifact Registry
   * repository named 'gcf-artifacts' in the region.
   *
   * It must match the pattern
   * `projects/{project}/locations/{location}/repositories/{repository}`.
   *
   * Cross-project repositories are not supported.
   * Cross-location repositories are not supported.
   * Repository format must be 'DOCKER'.
   *
   * @generated from field: string docker_repository = 34;
   */
  dockerRepository: string;

  /**
   * Docker Registry to use for this deployment.
   *
   * If unspecified, it defaults to `ARTIFACT_REGISTRY`.
   * If `docker_repository` field is specified, this field should either be left
   * unspecified or set to `ARTIFACT_REGISTRY`.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunction.DockerRegistry docker_registry = 35;
   */
  dockerRegistry: CloudFunction_DockerRegistry;

  /**
   * This controls when security patches are applied to the runtime environment.
   *
   * @generated from oneof google.cloud.functions.v1.CloudFunction.runtime_update_policy
   */
  runtimeUpdatePolicy: {
    /**
     * @generated from field: google.cloud.functions.v1.CloudFunction.AutomaticUpdatePolicy automatic_update_policy = 40;
     */
    value: CloudFunction_AutomaticUpdatePolicy;
    case: "automaticUpdatePolicy";
  } | {
    /**
     * @generated from field: google.cloud.functions.v1.CloudFunction.OnDeployUpdatePolicy on_deploy_update_policy = 41;
     */
    value: CloudFunction_OnDeployUpdatePolicy;
    case: "onDeployUpdatePolicy";
  } | { case: undefined; value?: undefined };

  /**
   * A service account the user provides for use with Cloud Build. The format of
   * this field is
   * `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
   *
   * @generated from field: string build_service_account = 43;
   */
  buildServiceAccount: string;
};

/**
 * Describes the message google.cloud.functions.v1.CloudFunction.
 * Use `create(CloudFunctionSchema)` to create a new message.
 */
export const CloudFunctionSchema: GenMessage<CloudFunction> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 0);

/**
 * Security patches are applied automatically to the runtime without requiring
 * the function to be redeployed.
 *
 * @generated from message google.cloud.functions.v1.CloudFunction.AutomaticUpdatePolicy
 */
export type CloudFunction_AutomaticUpdatePolicy = Message<"google.cloud.functions.v1.CloudFunction.AutomaticUpdatePolicy"> & {
};

/**
 * Describes the message google.cloud.functions.v1.CloudFunction.AutomaticUpdatePolicy.
 * Use `create(CloudFunction_AutomaticUpdatePolicySchema)` to create a new message.
 */
export const CloudFunction_AutomaticUpdatePolicySchema: GenMessage<CloudFunction_AutomaticUpdatePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 0, 0);

/**
 * Security patches are only applied when a function is redeployed.
 *
 * @generated from message google.cloud.functions.v1.CloudFunction.OnDeployUpdatePolicy
 */
export type CloudFunction_OnDeployUpdatePolicy = Message<"google.cloud.functions.v1.CloudFunction.OnDeployUpdatePolicy"> & {
  /**
   * Output only. Contains the runtime version which was used during latest
   * function deployment.
   *
   * @generated from field: string runtime_version = 1;
   */
  runtimeVersion: string;
};

/**
 * Describes the message google.cloud.functions.v1.CloudFunction.OnDeployUpdatePolicy.
 * Use `create(CloudFunction_OnDeployUpdatePolicySchema)` to create a new message.
 */
export const CloudFunction_OnDeployUpdatePolicySchema: GenMessage<CloudFunction_OnDeployUpdatePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 0, 1);

/**
 * Available egress settings.
 *
 * This controls what traffic is diverted through the VPC Access Connector
 * resource. By default PRIVATE_RANGES_ONLY will be used.
 *
 * @generated from enum google.cloud.functions.v1.CloudFunction.VpcConnectorEgressSettings
 */
export enum CloudFunction_VpcConnectorEgressSettings {
  /**
   * Unspecified.
   *
   * @generated from enum value: VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED = 0;
   */
  VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED = 0,

  /**
   * Use the VPC Access Connector only for private IP space from RFC1918.
   *
   * @generated from enum value: PRIVATE_RANGES_ONLY = 1;
   */
  PRIVATE_RANGES_ONLY = 1,

  /**
   * Force the use of VPC Access Connector for all egress traffic from the
   * function.
   *
   * @generated from enum value: ALL_TRAFFIC = 2;
   */
  ALL_TRAFFIC = 2,
}

/**
 * Describes the enum google.cloud.functions.v1.CloudFunction.VpcConnectorEgressSettings.
 */
export const CloudFunction_VpcConnectorEgressSettingsSchema: GenEnum<CloudFunction_VpcConnectorEgressSettings> = /*@__PURE__*/
  enumDesc(file_google_cloud_functions_v1_functions, 0, 0);

/**
 * Available ingress settings.
 *
 * This controls what traffic can reach the function.
 *
 * If unspecified, ALLOW_ALL will be used.
 *
 * @generated from enum google.cloud.functions.v1.CloudFunction.IngressSettings
 */
export enum CloudFunction_IngressSettings {
  /**
   * Unspecified.
   *
   * @generated from enum value: INGRESS_SETTINGS_UNSPECIFIED = 0;
   */
  INGRESS_SETTINGS_UNSPECIFIED = 0,

  /**
   * Allow HTTP traffic from public and private sources.
   *
   * @generated from enum value: ALLOW_ALL = 1;
   */
  ALLOW_ALL = 1,

  /**
   * Allow HTTP traffic from only private VPC sources.
   *
   * @generated from enum value: ALLOW_INTERNAL_ONLY = 2;
   */
  ALLOW_INTERNAL_ONLY = 2,

  /**
   * Allow HTTP traffic from private VPC sources and through GCLB.
   *
   * @generated from enum value: ALLOW_INTERNAL_AND_GCLB = 3;
   */
  ALLOW_INTERNAL_AND_GCLB = 3,
}

/**
 * Describes the enum google.cloud.functions.v1.CloudFunction.IngressSettings.
 */
export const CloudFunction_IngressSettingsSchema: GenEnum<CloudFunction_IngressSettings> = /*@__PURE__*/
  enumDesc(file_google_cloud_functions_v1_functions, 0, 1);

/**
 * Docker Registry to use for storing function Docker images.
 *
 * @generated from enum google.cloud.functions.v1.CloudFunction.DockerRegistry
 */
export enum CloudFunction_DockerRegistry {
  /**
   * Unspecified.
   *
   * @generated from enum value: DOCKER_REGISTRY_UNSPECIFIED = 0;
   */
  DOCKER_REGISTRY_UNSPECIFIED = 0,

  /**
   * Docker images will be stored in multi-regional Container Registry
   * repositories named `gcf`.
   *
   * @generated from enum value: CONTAINER_REGISTRY = 1;
   */
  CONTAINER_REGISTRY = 1,

  /**
   * Docker images will be stored in regional Artifact Registry repositories.
   * By default, GCF will create and use repositories named `gcf-artifacts`
   * in every region in which a function is deployed. But the repository to
   * use can also be specified by the user using the `docker_repository`
   * field.
   *
   * @generated from enum value: ARTIFACT_REGISTRY = 2;
   */
  ARTIFACT_REGISTRY = 2,
}

/**
 * Describes the enum google.cloud.functions.v1.CloudFunction.DockerRegistry.
 */
export const CloudFunction_DockerRegistrySchema: GenEnum<CloudFunction_DockerRegistry> = /*@__PURE__*/
  enumDesc(file_google_cloud_functions_v1_functions, 0, 2);

/**
 * Describes SourceRepository, used to represent parameters related to
 * source repository where a function is hosted.
 *
 * @generated from message google.cloud.functions.v1.SourceRepository
 */
export type SourceRepository = Message<"google.cloud.functions.v1.SourceRepository"> & {
  /**
   * The URL pointing to the hosted repository where the function is defined.
   * There are supported Cloud Source Repository URLs in the following
   * formats:
   *
   * To refer to a specific commit:
   * `https://source.developers.google.com/projects/*\/repos/*\/revisions/*\/paths/*`
   * To refer to a moveable alias (branch):
   * `https://source.developers.google.com/projects/*\/repos/*\/moveable-aliases/*\/paths/*`
   * In particular, to refer to HEAD use `master` moveable alias.
   * To refer to a specific fixed alias (tag):
   * `https://source.developers.google.com/projects/*\/repos/*\/fixed-aliases/*\/paths/*`
   *
   * You may omit `paths/*` if you want to use the main directory. The function
   * response may add an empty `/paths/` to the URL.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Output only. The URL pointing to the hosted repository where the function
   * were defined at the time of deployment. It always points to a specific
   * commit in the format described above.
   *
   * @generated from field: string deployed_url = 2;
   */
  deployedUrl: string;
};

/**
 * Describes the message google.cloud.functions.v1.SourceRepository.
 * Use `create(SourceRepositorySchema)` to create a new message.
 */
export const SourceRepositorySchema: GenMessage<SourceRepository> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 1);

/**
 * Describes HttpsTrigger, could be used to connect web hooks to function.
 *
 * @generated from message google.cloud.functions.v1.HttpsTrigger
 */
export type HttpsTrigger = Message<"google.cloud.functions.v1.HttpsTrigger"> & {
  /**
   * Output only. The deployed url for the function.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * The security level for the function.
   *
   * @generated from field: google.cloud.functions.v1.HttpsTrigger.SecurityLevel security_level = 2;
   */
  securityLevel: HttpsTrigger_SecurityLevel;
};

/**
 * Describes the message google.cloud.functions.v1.HttpsTrigger.
 * Use `create(HttpsTriggerSchema)` to create a new message.
 */
export const HttpsTriggerSchema: GenMessage<HttpsTrigger> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 2);

/**
 * Available security level settings.
 *
 * This controls the methods to enforce security (HTTPS) on a URL.
 *
 * If unspecified, SECURE_OPTIONAL will be used.
 *
 * @generated from enum google.cloud.functions.v1.HttpsTrigger.SecurityLevel
 */
export enum HttpsTrigger_SecurityLevel {
  /**
   * Unspecified.
   *
   * @generated from enum value: SECURITY_LEVEL_UNSPECIFIED = 0;
   */
  SECURITY_LEVEL_UNSPECIFIED = 0,

  /**
   * Requests for a URL that match this handler that do not use HTTPS are
   * automatically redirected to the HTTPS URL with the same path. Query
   * parameters are reserved for the redirect.
   *
   * @generated from enum value: SECURE_ALWAYS = 1;
   */
  SECURE_ALWAYS = 1,

  /**
   * Both HTTP and HTTPS requests with URLs that match the handler succeed
   * without redirects. The application can examine the request to determine
   * which protocol was used and respond accordingly.
   *
   * @generated from enum value: SECURE_OPTIONAL = 2;
   */
  SECURE_OPTIONAL = 2,
}

/**
 * Describes the enum google.cloud.functions.v1.HttpsTrigger.SecurityLevel.
 */
export const HttpsTrigger_SecurityLevelSchema: GenEnum<HttpsTrigger_SecurityLevel> = /*@__PURE__*/
  enumDesc(file_google_cloud_functions_v1_functions, 2, 0);

/**
 * Describes EventTrigger, used to request events be sent from another
 * service.
 *
 * @generated from message google.cloud.functions.v1.EventTrigger
 */
export type EventTrigger = Message<"google.cloud.functions.v1.EventTrigger"> & {
  /**
   * Required. The type of event to observe. For example:
   * `providers/cloud.storage/eventTypes/object.change` and
   * `providers/cloud.pubsub/eventTypes/topic.publish`.
   *
   * Event types match pattern `providers/*\/eventTypes/*.*`.
   * The pattern contains:
   *
   * 1. namespace: For example, `cloud.storage` and
   *    `google.firebase.analytics`.
   * 2. resource type: The type of resource on which event occurs. For
   *    example, the Google Cloud Storage API includes the type `object`.
   * 3. action: The action that generates the event. For example, action for
   *    a Google Cloud Storage Object is 'change'.
   * These parts are lower case.
   *
   * @generated from field: string event_type = 1;
   */
  eventType: string;

  /**
   * Required. The resource(s) from which to observe events, for example,
   * `projects/_/buckets/myBucket`.
   *
   * Not all syntactically correct values are accepted by all services. For
   * example:
   *
   * 1. The authorization model must support it. Google Cloud Functions
   *    only allows EventTriggers to be deployed that observe resources in the
   *    same project as the `CloudFunction`.
   * 2. The resource type must match the pattern expected for an
   *    `event_type`. For example, an `EventTrigger` that has an
   *    `event_type` of "google.pubsub.topic.publish" should have a resource
   *    that matches Google Cloud Pub/Sub topics.
   *
   * Additionally, some services may support short names when creating an
   * `EventTrigger`. These will always be returned in the normalized "long"
   * format.
   *
   * See each *service's* documentation for supported formats.
   *
   * @generated from field: string resource = 2;
   */
  resource: string;

  /**
   * The hostname of the service that should be observed.
   *
   * If no string is provided, the default service implementing the API will
   * be used. For example, `storage.googleapis.com` is the default for all
   * event types in the `google.storage` namespace.
   *
   * @generated from field: string service = 3;
   */
  service: string;

  /**
   * Specifies policy for failed executions.
   *
   * @generated from field: google.cloud.functions.v1.FailurePolicy failure_policy = 5;
   */
  failurePolicy?: FailurePolicy;
};

/**
 * Describes the message google.cloud.functions.v1.EventTrigger.
 * Use `create(EventTriggerSchema)` to create a new message.
 */
export const EventTriggerSchema: GenMessage<EventTrigger> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 3);

/**
 * Describes the policy in case of function's execution failure.
 * If empty, then defaults to ignoring failures (i.e. not retrying them).
 *
 * @generated from message google.cloud.functions.v1.FailurePolicy
 */
export type FailurePolicy = Message<"google.cloud.functions.v1.FailurePolicy"> & {
  /**
   * Defines the action taken in case of a function execution failure.
   *
   * @generated from oneof google.cloud.functions.v1.FailurePolicy.action
   */
  action: {
    /**
     * If specified, then the function will be retried in case of a failure.
     *
     * @generated from field: google.cloud.functions.v1.FailurePolicy.Retry retry = 1;
     */
    value: FailurePolicy_Retry;
    case: "retry";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.functions.v1.FailurePolicy.
 * Use `create(FailurePolicySchema)` to create a new message.
 */
export const FailurePolicySchema: GenMessage<FailurePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 4);

/**
 * Describes the retry policy in case of function's execution failure.
 * A function execution will be retried on any failure.
 * A failed execution will be retried up to 7 days with an exponential backoff
 * (capped at 10 seconds).
 * Retried execution is charged as any other execution.
 *
 * @generated from message google.cloud.functions.v1.FailurePolicy.Retry
 */
export type FailurePolicy_Retry = Message<"google.cloud.functions.v1.FailurePolicy.Retry"> & {
};

/**
 * Describes the message google.cloud.functions.v1.FailurePolicy.Retry.
 * Use `create(FailurePolicy_RetrySchema)` to create a new message.
 */
export const FailurePolicy_RetrySchema: GenMessage<FailurePolicy_Retry> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 4, 0);

/**
 * Configuration for a secret environment variable. It has the information
 * necessary to fetch the secret value from secret manager and expose it as an
 * environment variable.
 *
 * @generated from message google.cloud.functions.v1.SecretEnvVar
 */
export type SecretEnvVar = Message<"google.cloud.functions.v1.SecretEnvVar"> & {
  /**
   * Name of the environment variable.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Project identifier (preferrably project number but can also be the project
   * ID) of the project that contains the secret. If not set, it will be
   * populated with the function's project assuming that the secret exists in
   * the same project as of the function.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Name of the secret in secret manager (not the full resource name).
   *
   * @generated from field: string secret = 3;
   */
  secret: string;

  /**
   * Version of the secret (version number or the string 'latest'). It is
   * recommended to use a numeric version for secret environment variables as
   * any updates to the secret value is not reflected until new instances start.
   *
   * @generated from field: string version = 4;
   */
  version: string;
};

/**
 * Describes the message google.cloud.functions.v1.SecretEnvVar.
 * Use `create(SecretEnvVarSchema)` to create a new message.
 */
export const SecretEnvVarSchema: GenMessage<SecretEnvVar> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 5);

/**
 * Configuration for a secret volume. It has the information necessary to fetch
 * the secret value from secret manager and make it available as files mounted
 * at the requested paths within the application container. Secret value is not
 * a part of the configuration. Every filesystem read operation performs a
 * lookup in secret manager to retrieve the secret value.
 *
 * @generated from message google.cloud.functions.v1.SecretVolume
 */
export type SecretVolume = Message<"google.cloud.functions.v1.SecretVolume"> & {
  /**
   * The path within the container to mount the secret volume. For example,
   * setting the mount_path as `/etc/secrets` would mount the secret value files
   * under the `/etc/secrets` directory. This directory will also be completely
   * shadowed and unavailable to mount any other secrets.
   *
   * Recommended mount paths: /etc/secrets
   * Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
   *
   * @generated from field: string mount_path = 1;
   */
  mountPath: string;

  /**
   * Project identifier (preferrably project number but can also be the project
   * ID) of the project that contains the secret. If not set, it will be
   * populated with the function's project assuming that the secret exists in
   * the same project as of the function.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Name of the secret in secret manager (not the full resource name).
   *
   * @generated from field: string secret = 3;
   */
  secret: string;

  /**
   * List of secret versions to mount for this secret. If empty, the `latest`
   * version of the secret will be made available in a file named after the
   * secret under the mount point.
   *
   * @generated from field: repeated google.cloud.functions.v1.SecretVolume.SecretVersion versions = 4;
   */
  versions: SecretVolume_SecretVersion[];
};

/**
 * Describes the message google.cloud.functions.v1.SecretVolume.
 * Use `create(SecretVolumeSchema)` to create a new message.
 */
export const SecretVolumeSchema: GenMessage<SecretVolume> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 6);

/**
 * Configuration for a single version.
 *
 * @generated from message google.cloud.functions.v1.SecretVolume.SecretVersion
 */
export type SecretVolume_SecretVersion = Message<"google.cloud.functions.v1.SecretVolume.SecretVersion"> & {
  /**
   * Version of the secret (version number or the string 'latest'). It is
   * preferable to use `latest` version with secret volumes as secret value
   * changes are reflected immediately.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * Relative path of the file under the mount path where the secret value for
   * this version will be fetched and made available. For example, setting the
   * mount_path as '/etc/secrets' and path as `/secret_foo` would mount the
   * secret value file at `/etc/secrets/secret_foo`.
   *
   * @generated from field: string path = 2;
   */
  path: string;
};

/**
 * Describes the message google.cloud.functions.v1.SecretVolume.SecretVersion.
 * Use `create(SecretVolume_SecretVersionSchema)` to create a new message.
 */
export const SecretVolume_SecretVersionSchema: GenMessage<SecretVolume_SecretVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 6, 0);

/**
 * Request for the `CreateFunction` method.
 *
 * @generated from message google.cloud.functions.v1.CreateFunctionRequest
 */
export type CreateFunctionRequest = Message<"google.cloud.functions.v1.CreateFunctionRequest"> & {
  /**
   * Required. The project and location in which the function should be created,
   * specified in the format `projects/*\/locations/*`
   *
   * @generated from field: string location = 1;
   */
  location: string;

  /**
   * Required. Function to be created.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunction function = 2;
   */
  function?: CloudFunction;
};

/**
 * Describes the message google.cloud.functions.v1.CreateFunctionRequest.
 * Use `create(CreateFunctionRequestSchema)` to create a new message.
 */
export const CreateFunctionRequestSchema: GenMessage<CreateFunctionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 7);

/**
 * Request for the `UpdateFunction` method.
 *
 * @generated from message google.cloud.functions.v1.UpdateFunctionRequest
 */
export type UpdateFunctionRequest = Message<"google.cloud.functions.v1.UpdateFunctionRequest"> & {
  /**
   * Required. New version of the function.
   *
   * @generated from field: google.cloud.functions.v1.CloudFunction function = 1;
   */
  function?: CloudFunction;

  /**
   * Required. The list of fields in `CloudFunction` that have to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.functions.v1.UpdateFunctionRequest.
 * Use `create(UpdateFunctionRequestSchema)` to create a new message.
 */
export const UpdateFunctionRequestSchema: GenMessage<UpdateFunctionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 8);

/**
 * Request for the `GetFunction` method.
 *
 * @generated from message google.cloud.functions.v1.GetFunctionRequest
 */
export type GetFunctionRequest = Message<"google.cloud.functions.v1.GetFunctionRequest"> & {
  /**
   * Required. The name of the function which details should be obtained.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The optional version of the function whose details should be
   * obtained. The version of a 1st Gen function is an integer that starts from
   * 1 and gets incremented on redeployments. Each deployment creates a config
   * version of the underlying function. GCF may keep historical configs for old
   * versions. This field can be specified to fetch the historical configs.
   * Leave it blank or set to 0 to get the latest version of the function.
   *
   * @generated from field: int64 version_id = 2;
   */
  versionId: bigint;
};

/**
 * Describes the message google.cloud.functions.v1.GetFunctionRequest.
 * Use `create(GetFunctionRequestSchema)` to create a new message.
 */
export const GetFunctionRequestSchema: GenMessage<GetFunctionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 9);

/**
 * Request for the `ListFunctions` method.
 *
 * @generated from message google.cloud.functions.v1.ListFunctionsRequest
 */
export type ListFunctionsRequest = Message<"google.cloud.functions.v1.ListFunctionsRequest"> & {
  /**
   * The project and location from which the function should be listed,
   * specified in the format `projects/*\/locations/*`
   * If you want to list functions in all locations, use "-" in place of a
   * location. When listing functions in all locations, if one or more
   * location(s) are unreachable, the response will contain functions from all
   * reachable locations along with the names of any unreachable locations.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum number of functions to return per call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value returned by the last
   * `ListFunctionsResponse`; indicates that
   * this is a continuation of a prior `ListFunctions` call, and that the
   * system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.functions.v1.ListFunctionsRequest.
 * Use `create(ListFunctionsRequestSchema)` to create a new message.
 */
export const ListFunctionsRequestSchema: GenMessage<ListFunctionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 10);

/**
 * Response for the `ListFunctions` method.
 *
 * @generated from message google.cloud.functions.v1.ListFunctionsResponse
 */
export type ListFunctionsResponse = Message<"google.cloud.functions.v1.ListFunctionsResponse"> & {
  /**
   * The functions that match the request.
   *
   * @generated from field: repeated google.cloud.functions.v1.CloudFunction functions = 1;
   */
  functions: CloudFunction[];

  /**
   * If not empty, indicates that there may be more functions that match
   * the request; this value should be passed in a new
   * [google.cloud.functions.v1.ListFunctionsRequest][google.cloud.functions.v1.ListFunctionsRequest]
   * to get more functions.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached. The response does not include any
   * functions from these locations.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.functions.v1.ListFunctionsResponse.
 * Use `create(ListFunctionsResponseSchema)` to create a new message.
 */
export const ListFunctionsResponseSchema: GenMessage<ListFunctionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 11);

/**
 * Request for the `DeleteFunction` method.
 *
 * @generated from message google.cloud.functions.v1.DeleteFunctionRequest
 */
export type DeleteFunctionRequest = Message<"google.cloud.functions.v1.DeleteFunctionRequest"> & {
  /**
   * Required. The name of the function which should be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.functions.v1.DeleteFunctionRequest.
 * Use `create(DeleteFunctionRequestSchema)` to create a new message.
 */
export const DeleteFunctionRequestSchema: GenMessage<DeleteFunctionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 12);

/**
 * Request for the `CallFunction` method.
 *
 * @generated from message google.cloud.functions.v1.CallFunctionRequest
 */
export type CallFunctionRequest = Message<"google.cloud.functions.v1.CallFunctionRequest"> & {
  /**
   * Required. The name of the function to be called.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Input to be passed to the function.
   *
   * @generated from field: string data = 2;
   */
  data: string;
};

/**
 * Describes the message google.cloud.functions.v1.CallFunctionRequest.
 * Use `create(CallFunctionRequestSchema)` to create a new message.
 */
export const CallFunctionRequestSchema: GenMessage<CallFunctionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 13);

/**
 * Response of `CallFunction` method.
 *
 * @generated from message google.cloud.functions.v1.CallFunctionResponse
 */
export type CallFunctionResponse = Message<"google.cloud.functions.v1.CallFunctionResponse"> & {
  /**
   * Execution id of function invocation.
   *
   * @generated from field: string execution_id = 1;
   */
  executionId: string;

  /**
   * Result populated for successful execution of synchronous function. Will
   * not be populated if function does not return a result through context.
   *
   * @generated from field: string result = 2;
   */
  result: string;

  /**
   * Either system or user-function generated error. Set if execution
   * was not successful.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message google.cloud.functions.v1.CallFunctionResponse.
 * Use `create(CallFunctionResponseSchema)` to create a new message.
 */
export const CallFunctionResponseSchema: GenMessage<CallFunctionResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 14);

/**
 * Request of `GenerateSourceUploadUrl` method.
 *
 * @generated from message google.cloud.functions.v1.GenerateUploadUrlRequest
 */
export type GenerateUploadUrlRequest = Message<"google.cloud.functions.v1.GenerateUploadUrlRequest"> & {
  /**
   * The project and location in which the Google Cloud Storage signed URL
   * should be generated, specified in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Resource name of a KMS crypto key (managed by the user) used to
   * encrypt/decrypt function source code objects in intermediate Cloud Storage
   * buckets. When you generate an upload url and upload your source code, it
   * gets copied to an intermediate Cloud Storage bucket. The source code is
   * then copied to a versioned directory in the sources bucket in the consumer
   * project during the function deployment.
   *
   * It must match the pattern
   * `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
   *
   * The Google Cloud Functions service account
   * (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be
   * granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter
   * (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the
   * Key/KeyRing/Project/Organization (least access preferred). GCF will
   * delegate access to the Google Storage service account in the internal
   * project.
   *
   * @generated from field: string kms_key_name = 2;
   */
  kmsKeyName: string;
};

/**
 * Describes the message google.cloud.functions.v1.GenerateUploadUrlRequest.
 * Use `create(GenerateUploadUrlRequestSchema)` to create a new message.
 */
export const GenerateUploadUrlRequestSchema: GenMessage<GenerateUploadUrlRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 15);

/**
 * Response of `GenerateSourceUploadUrl` method.
 *
 * @generated from message google.cloud.functions.v1.GenerateUploadUrlResponse
 */
export type GenerateUploadUrlResponse = Message<"google.cloud.functions.v1.GenerateUploadUrlResponse"> & {
  /**
   * The generated Google Cloud Storage signed URL that should be used for a
   * function source code upload. The uploaded file should be a zip archive
   * which contains a function.
   *
   * @generated from field: string upload_url = 1;
   */
  uploadUrl: string;
};

/**
 * Describes the message google.cloud.functions.v1.GenerateUploadUrlResponse.
 * Use `create(GenerateUploadUrlResponseSchema)` to create a new message.
 */
export const GenerateUploadUrlResponseSchema: GenMessage<GenerateUploadUrlResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 16);

/**
 * Request of `GenerateDownloadUrl` method.
 *
 * @generated from message google.cloud.functions.v1.GenerateDownloadUrlRequest
 */
export type GenerateDownloadUrlRequest = Message<"google.cloud.functions.v1.GenerateDownloadUrlRequest"> & {
  /**
   * The name of function for which source code Google Cloud Storage signed
   * URL should be generated.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The optional version of function. If not set, default, current version
   * is used.
   *
   * @generated from field: uint64 version_id = 2;
   */
  versionId: bigint;
};

/**
 * Describes the message google.cloud.functions.v1.GenerateDownloadUrlRequest.
 * Use `create(GenerateDownloadUrlRequestSchema)` to create a new message.
 */
export const GenerateDownloadUrlRequestSchema: GenMessage<GenerateDownloadUrlRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 17);

/**
 * Response of `GenerateDownloadUrl` method.
 *
 * @generated from message google.cloud.functions.v1.GenerateDownloadUrlResponse
 */
export type GenerateDownloadUrlResponse = Message<"google.cloud.functions.v1.GenerateDownloadUrlResponse"> & {
  /**
   * The generated Google Cloud Storage signed URL that should be used for
   * function source code download.
   *
   * @generated from field: string download_url = 1;
   */
  downloadUrl: string;
};

/**
 * Describes the message google.cloud.functions.v1.GenerateDownloadUrlResponse.
 * Use `create(GenerateDownloadUrlResponseSchema)` to create a new message.
 */
export const GenerateDownloadUrlResponseSchema: GenMessage<GenerateDownloadUrlResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_functions_v1_functions, 18);

/**
 * Describes the current stage of a deployment.
 *
 * @generated from enum google.cloud.functions.v1.CloudFunctionStatus
 */
export enum CloudFunctionStatus {
  /**
   * Not specified. Invalid state.
   *
   * @generated from enum value: CLOUD_FUNCTION_STATUS_UNSPECIFIED = 0;
   */
  CLOUD_FUNCTION_STATUS_UNSPECIFIED = 0,

  /**
   * Function has been successfully deployed and is serving.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Function deployment failed and the function isn’t serving.
   *
   * @generated from enum value: OFFLINE = 2;
   */
  OFFLINE = 2,

  /**
   * Function is being created or updated.
   *
   * @generated from enum value: DEPLOY_IN_PROGRESS = 3;
   */
  DEPLOY_IN_PROGRESS = 3,

  /**
   * Function is being deleted.
   *
   * @generated from enum value: DELETE_IN_PROGRESS = 4;
   */
  DELETE_IN_PROGRESS = 4,

  /**
   * Function deployment failed and the function serving state is undefined.
   * The function should be updated or deleted to move it out of this state.
   *
   * @generated from enum value: UNKNOWN = 5;
   */
  UNKNOWN = 5,
}

/**
 * Describes the enum google.cloud.functions.v1.CloudFunctionStatus.
 */
export const CloudFunctionStatusSchema: GenEnum<CloudFunctionStatus> = /*@__PURE__*/
  enumDesc(file_google_cloud_functions_v1_functions, 0);

/**
 * A service that application uses to manipulate triggers and functions.
 *
 * @generated from service google.cloud.functions.v1.CloudFunctionsService
 */
export const CloudFunctionsService: GenService<{
  /**
   * Returns a list of functions that belong to the requested project.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.ListFunctions
   */
  listFunctions: {
    methodKind: "unary";
    input: typeof ListFunctionsRequestSchema;
    output: typeof ListFunctionsResponseSchema;
  },
  /**
   * Returns a function with the given name from the requested project.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.GetFunction
   */
  getFunction: {
    methodKind: "unary";
    input: typeof GetFunctionRequestSchema;
    output: typeof CloudFunctionSchema;
  },
  /**
   * Creates a new function. If a function with the given name already exists in
   * the specified project, the long running operation will return
   * `ALREADY_EXISTS` error.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.CreateFunction
   */
  createFunction: {
    methodKind: "unary";
    input: typeof CreateFunctionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates existing function.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.UpdateFunction
   */
  updateFunction: {
    methodKind: "unary";
    input: typeof UpdateFunctionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a function with the given name from the specified project. If the
   * given function is used by some trigger, the trigger will be updated to
   * remove this function.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.DeleteFunction
   */
  deleteFunction: {
    methodKind: "unary";
    input: typeof DeleteFunctionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Synchronously invokes a deployed Cloud Function. To be used for testing
   * purposes as very limited traffic is allowed. For more information on
   * the actual limits, refer to
   * [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.CallFunction
   */
  callFunction: {
    methodKind: "unary";
    input: typeof CallFunctionRequestSchema;
    output: typeof CallFunctionResponseSchema;
  },
  /**
   * Returns a signed URL for uploading a function source code.
   * For more information about the signed URL usage see:
   * https://cloud.google.com/storage/docs/access-control/signed-urls.
   * Once the function source code upload is complete, the used signed
   * URL should be provided in CreateFunction or UpdateFunction request
   * as a reference to the function source code.
   *
   * When uploading source code to the generated signed URL, please follow
   * these restrictions:
   *
   * * Source file type should be a zip file.
   * * Source file size should not exceed 100MB limit.
   * * No credentials should be attached - the signed URLs provide access to the
   *   target bucket using internal service identity; if credentials were
   *   attached, the identity from the credentials would be used, but that
   *   identity does not have permissions to upload files to the URL.
   *
   * When making a HTTP PUT request, these two headers need to be specified:
   *
   * * `content-type: application/zip`
   * * `x-goog-content-length-range: 0,104857600`
   *
   * And this header SHOULD NOT be specified:
   *
   * * `Authorization: Bearer YOUR_TOKEN`
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.GenerateUploadUrl
   */
  generateUploadUrl: {
    methodKind: "unary";
    input: typeof GenerateUploadUrlRequestSchema;
    output: typeof GenerateUploadUrlResponseSchema;
  },
  /**
   * Returns a signed URL for downloading deployed function source code.
   * The URL is only valid for a limited period and should be used within
   * minutes after generation.
   * For more information about the signed URL usage see:
   * https://cloud.google.com/storage/docs/access-control/signed-urls
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.GenerateDownloadUrl
   */
  generateDownloadUrl: {
    methodKind: "unary";
    input: typeof GenerateDownloadUrlRequestSchema;
    output: typeof GenerateDownloadUrlResponseSchema;
  },
  /**
   * Sets the IAM access control policy on the specified function.
   * Replaces any existing policy.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.SetIamPolicy
   */
  setIamPolicy: {
    methodKind: "unary";
    input: typeof SetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Gets the IAM access control policy for a function.
   * Returns an empty policy if the function exists and does not have a policy
   * set.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.GetIamPolicy
   */
  getIamPolicy: {
    methodKind: "unary";
    input: typeof GetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Tests the specified permissions against the IAM access control policy
   * for a function.
   * If the function does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * @generated from rpc google.cloud.functions.v1.CloudFunctionsService.TestIamPermissions
   */
  testIamPermissions: {
    methodKind: "unary";
    input: typeof TestIamPermissionsRequestSchema;
    output: typeof TestIamPermissionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_functions_v1_functions, 0);

