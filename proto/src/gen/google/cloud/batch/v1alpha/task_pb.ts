// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/batch/v1alpha/task.proto (package google.cloud.batch.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Volume } from "./volume_pb";
import { file_google_cloud_batch_v1alpha_volume } from "./volume_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/batch/v1alpha/task.proto.
 */
export const file_google_cloud_batch_v1alpha_task: GenFile = /*@__PURE__*/
  fileDesc("CiVnb29nbGUvY2xvdWQvYmF0Y2gvdjFhbHBoYS90YXNrLnByb3RvEhpnb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYSJiCg9Db21wdXRlUmVzb3VyY2USEQoJY3B1X21pbGxpGAEgASgDEhIKCm1lbW9yeV9taWIYAiABKAMSEQoJZ3B1X2NvdW50GAMgASgDEhUKDWJvb3RfZGlza19taWIYBCABKAMi5QEKC1N0YXR1c0V2ZW50EgwKBHR5cGUYAyABKAkSEwoLZGVzY3JpcHRpb24YASABKAkSLgoKZXZlbnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASQQoOdGFza19leGVjdXRpb24YBCABKAsyKS5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5UYXNrRXhlY3V0aW9uEkAKCnRhc2tfc3RhdGUYBSABKA4yLC5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5UYXNrU3RhdHVzLlN0YXRlIj8KDVRhc2tFeGVjdXRpb24SEQoJZXhpdF9jb2RlGAEgASgFEhsKDnN0ZGVycl9zbmlwcGV0GAIgASgJQgPgQQEiwwIKClRhc2tTdGF0dXMSOwoFc3RhdGUYASABKA4yLC5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5UYXNrU3RhdHVzLlN0YXRlEj4KDXN0YXR1c19ldmVudHMYAiADKAsyJy5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5TdGF0dXNFdmVudBJFCg5yZXNvdXJjZV91c2FnZRgDIAEoCzItLmdvb2dsZS5jbG91ZC5iYXRjaC52MWFscGhhLlRhc2tSZXNvdXJjZVVzYWdlInEKBVN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxABEgwKCEFTU0lHTkVEEAISCwoHUlVOTklORxADEgoKBkZBSUxFRBAEEg0KCVNVQ0NFRURFRBAFEg4KClVORVhFQ1VURUQQBiInChFUYXNrUmVzb3VyY2VVc2FnZRISCgpjb3JlX2hvdXJzGAEgASgBIrcGCghSdW5uYWJsZRJDCgljb250YWluZXIYASABKAsyLi5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5SdW5uYWJsZS5Db250YWluZXJIABI9CgZzY3JpcHQYAiABKAsyKy5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5SdW5uYWJsZS5TY3JpcHRIABI/CgdiYXJyaWVyGAYgASgLMiwuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuUnVubmFibGUuQmFycmllckgAEhkKDGRpc3BsYXlfbmFtZRgKIAEoCUID4EEBEhoKEmlnbm9yZV9leGl0X3N0YXR1cxgDIAEoCBISCgpiYWNrZ3JvdW5kGAQgASgIEhIKCmFsd2F5c19ydW4YBSABKAgSPAoLZW52aXJvbm1lbnQYByABKAsyJy5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5FbnZpcm9ubWVudBIqCgd0aW1lb3V0GAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkAKBmxhYmVscxgJIAMoCzIwLmdvb2dsZS5jbG91ZC5iYXRjaC52MWFscGhhLlJ1bm5hYmxlLkxhYmVsc0VudHJ5Gs8BCglDb250YWluZXISEQoJaW1hZ2VfdXJpGAEgASgJEhAKCGNvbW1hbmRzGAIgAygJEhIKCmVudHJ5cG9pbnQYAyABKAkSDwoHdm9sdW1lcxgHIAMoCRIPCgdvcHRpb25zGAggASgJEh4KFmJsb2NrX2V4dGVybmFsX25ldHdvcmsYCSABKAgSEAoIdXNlcm5hbWUYCiABKAkSEAoIcGFzc3dvcmQYCyABKAkSIwoWZW5hYmxlX2ltYWdlX3N0cmVhbWluZxgMIAEoCEID4EEBGjMKBlNjcmlwdBIOCgRwYXRoGAEgASgJSAASDgoEdGV4dBgCIAEoCUgAQgkKB2NvbW1hbmQaFwoHQmFycmllchIMCgRuYW1lGAEgASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCDAoKZXhlY3V0YWJsZSKbBAoIVGFza1NwZWMSNwoJcnVubmFibGVzGAggAygLMiQuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuUnVubmFibGUSRQoQY29tcHV0ZV9yZXNvdXJjZRgDIAEoCzIrLmdvb2dsZS5jbG91ZC5iYXRjaC52MWFscGhhLkNvbXB1dGVSZXNvdXJjZRIzChBtYXhfcnVuX2R1cmF0aW9uGAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhcKD21heF9yZXRyeV9jb3VudBgFIAEoBRJHChJsaWZlY3ljbGVfcG9saWNpZXMYCSADKAsyKy5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5MaWZlY3ljbGVQb2xpY3kSUAoMZW52aXJvbm1lbnRzGAYgAygLMjYuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuVGFza1NwZWMuRW52aXJvbm1lbnRzRW50cnlCAhgBEjMKB3ZvbHVtZXMYByADKAsyIi5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5Wb2x1bWUSPAoLZW52aXJvbm1lbnQYCiABKAsyJy5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5FbnZpcm9ubWVudBozChFFbnZpcm9ubWVudHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpQCCg9MaWZlY3ljbGVQb2xpY3kSQgoGYWN0aW9uGAEgASgOMjIuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuTGlmZWN5Y2xlUG9saWN5LkFjdGlvbhJVChBhY3Rpb25fY29uZGl0aW9uGAIgASgLMjsuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuTGlmZWN5Y2xlUG9saWN5LkFjdGlvbkNvbmRpdGlvbholCg9BY3Rpb25Db25kaXRpb24SEgoKZXhpdF9jb2RlcxgBIAMoBSI/CgZBY3Rpb24SFgoSQUNUSU9OX1VOU1BFQ0lGSUVEEAASDgoKUkVUUllfVEFTSxABEg0KCUZBSUxfVEFTSxACIsUBCgRUYXNrEgwKBG5hbWUYASABKAkSNgoGc3RhdHVzGAIgASgLMiYuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuVGFza1N0YXR1czp36kF0ChliYXRjaC5nb29nbGVhcGlzLmNvbS9UYXNrEldwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vam9icy97am9ifS90YXNrR3JvdXBzL3t0YXNrX2dyb3VwfS90YXNrcy97dGFza30ingMKC0Vudmlyb25tZW50EkkKCXZhcmlhYmxlcxgBIAMoCzI2Lmdvb2dsZS5jbG91ZC5iYXRjaC52MWFscGhhLkVudmlyb25tZW50LlZhcmlhYmxlc0VudHJ5ElYKEHNlY3JldF92YXJpYWJsZXMYAiADKAsyPC5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYS5FbnZpcm9ubWVudC5TZWNyZXRWYXJpYWJsZXNFbnRyeRJOChNlbmNyeXB0ZWRfdmFyaWFibGVzGAMgASgLMjEuZ29vZ2xlLmNsb3VkLmJhdGNoLnYxYWxwaGEuRW52aXJvbm1lbnQuS01TRW52TWFwGjIKCUtNU0Vudk1hcBIQCghrZXlfbmFtZRgBIAEoCRITCgtjaXBoZXJfdGV4dBgCIAEoCRowCg5WYXJpYWJsZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjYKFFNlY3JldFZhcmlhYmxlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCwwEKHmNvbS5nb29nbGUuY2xvdWQuYmF0Y2gudjFhbHBoYUIJVGFza1Byb3RvUAFaNGNsb3VkLmdvb2dsZS5jb20vZ28vYmF0Y2gvYXBpdjFhbHBoYS9iYXRjaHBiO2JhdGNocGKiAgNHQ0KqAhpHb29nbGUuQ2xvdWQuQmF0Y2guVjFBbHBoYcoCGkdvb2dsZVxDbG91ZFxCYXRjaFxWMWFscGhh6gIdR29vZ2xlOjpDbG91ZDo6QmF0Y2g6OlYxYWxwaGFiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_batch_v1alpha_volume, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * Compute resource requirements.
 *
 * ComputeResource defines the amount of resources required for each task.
 * Make sure your tasks have enough resources to successfully run.
 * If you also define the types of resources for a job to use with the
 * [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate)
 * field, make sure both fields are compatible with each other.
 *
 * @generated from message google.cloud.batch.v1alpha.ComputeResource
 */
export type ComputeResource = Message<"google.cloud.batch.v1alpha.ComputeResource"> & {
  /**
   * The milliCPU count.
   *
   * `cpuMilli` defines the amount of CPU resources per task in milliCPU units.
   * For example, `1000` corresponds to 1 vCPU per task. If undefined, the
   * default value is `2000`.
   *
   * If you also define the VM's machine type using the `machineType` in
   * [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy)
   * field or inside the `instanceTemplate` in the
   * [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate)
   * field, make sure the CPU resources for both fields are compatible with each
   * other and with how many tasks you want to allow to run on the same VM at
   * the same time.
   *
   * For example, if you specify the `n2-standard-2` machine type, which has 2
   * vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or
   * you are recommended to run two tasks on the same VM if you set `cpuMilli`
   * to `1000` or less.
   *
   * @generated from field: int64 cpu_milli = 1;
   */
  cpuMilli: bigint;

  /**
   * Memory in MiB.
   *
   * `memoryMib` defines the amount of memory per task in MiB units.
   * If undefined, the default value is `2000`.
   * If you also define the VM's machine type using the `machineType` in
   * [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy)
   * field or inside the `instanceTemplate` in the
   * [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate)
   * field, make sure the memory resources for both fields are compatible with
   * each other and with how many tasks you want to allow to run on the same VM
   * at the same time.
   *
   * For example, if you specify the `n2-standard-2` machine type, which has 8
   * GiB each, you are recommended to set `memoryMib` to no more than `8192`,
   * or you are recommended to run two tasks on the same VM if you set
   * `memoryMib` to `4096` or less.
   *
   * @generated from field: int64 memory_mib = 2;
   */
  memoryMib: bigint;

  /**
   * The GPU count.
   *
   * Not yet implemented.
   *
   * @generated from field: int64 gpu_count = 3;
   */
  gpuCount: bigint;

  /**
   * Extra boot disk size in MiB for each task.
   *
   * @generated from field: int64 boot_disk_mib = 4;
   */
  bootDiskMib: bigint;
};

/**
 * Describes the message google.cloud.batch.v1alpha.ComputeResource.
 * Use `create(ComputeResourceSchema)` to create a new message.
 */
export const ComputeResourceSchema: GenMessage<ComputeResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 0);

/**
 * Status event.
 *
 * @generated from message google.cloud.batch.v1alpha.StatusEvent
 */
export type StatusEvent = Message<"google.cloud.batch.v1alpha.StatusEvent"> & {
  /**
   * Type of the event.
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * Description of the event.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * The time this event occurred.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 2;
   */
  eventTime?: Timestamp;

  /**
   * Task Execution.
   * This field is only defined for task-level status events where the task
   * fails.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskExecution task_execution = 4;
   */
  taskExecution?: TaskExecution;

  /**
   * Task State.
   * This field is only defined for task-level status events.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskStatus.State task_state = 5;
   */
  taskState: TaskStatus_State;
};

/**
 * Describes the message google.cloud.batch.v1alpha.StatusEvent.
 * Use `create(StatusEventSchema)` to create a new message.
 */
export const StatusEventSchema: GenMessage<StatusEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 1);

/**
 * This Task Execution field includes detail information for
 * task execution procedures, based on StatusEvent types.
 *
 * @generated from message google.cloud.batch.v1alpha.TaskExecution
 */
export type TaskExecution = Message<"google.cloud.batch.v1alpha.TaskExecution"> & {
  /**
   * The exit code of a finished task.
   *
   * If the task succeeded, the exit code will be 0. If the task failed but not
   * due to the following reasons, the exit code will be 50000.
   *
   * Otherwise, it can be from different sources:
   * * Batch known failures:
   * https://cloud.google.com/batch/docs/troubleshooting#reserved-exit-codes.
   * * Batch runnable execution failures; you can rely on Batch logs to further
   * diagnose: https://cloud.google.com/batch/docs/analyze-job-using-logs. If
   * there are multiple runnables failures, Batch only exposes the first error.
   *
   * @generated from field: int32 exit_code = 1;
   */
  exitCode: number;

  /**
   * Optional. The tail end of any content written to standard error by the task
   * execution. This field will be populated only when the execution failed.
   *
   * @generated from field: string stderr_snippet = 2;
   */
  stderrSnippet: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.TaskExecution.
 * Use `create(TaskExecutionSchema)` to create a new message.
 */
export const TaskExecutionSchema: GenMessage<TaskExecution> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 2);

/**
 * Status of a task.
 *
 * @generated from message google.cloud.batch.v1alpha.TaskStatus
 */
export type TaskStatus = Message<"google.cloud.batch.v1alpha.TaskStatus"> & {
  /**
   * Task state.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskStatus.State state = 1;
   */
  state: TaskStatus_State;

  /**
   * Detailed info about why the state is reached.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.StatusEvent status_events = 2;
   */
  statusEvents: StatusEvent[];

  /**
   * The resource usage of the task.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskResourceUsage resource_usage = 3;
   */
  resourceUsage?: TaskResourceUsage;
};

/**
 * Describes the message google.cloud.batch.v1alpha.TaskStatus.
 * Use `create(TaskStatusSchema)` to create a new message.
 */
export const TaskStatusSchema: GenMessage<TaskStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 3);

/**
 * Task states.
 *
 * @generated from enum google.cloud.batch.v1alpha.TaskStatus.State
 */
export enum TaskStatus_State {
  /**
   * Unknown state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The Task is created and waiting for resources.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * The Task is assigned to at least one VM.
   *
   * @generated from enum value: ASSIGNED = 2;
   */
  ASSIGNED = 2,

  /**
   * The Task is running.
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * The Task has failed.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * The Task has succeeded.
   *
   * @generated from enum value: SUCCEEDED = 5;
   */
  SUCCEEDED = 5,

  /**
   * The Task has not been executed when the Job finishes.
   *
   * @generated from enum value: UNEXECUTED = 6;
   */
  UNEXECUTED = 6,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.TaskStatus.State.
 */
export const TaskStatus_StateSchema: GenEnum<TaskStatus_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_task, 3, 0);

/**
 * TaskResourceUsage describes the resource usage of the task.
 *
 * @generated from message google.cloud.batch.v1alpha.TaskResourceUsage
 */
export type TaskResourceUsage = Message<"google.cloud.batch.v1alpha.TaskResourceUsage"> & {
  /**
   * The CPU core hours the task consumes based on task requirement and run
   * time.
   *
   * @generated from field: double core_hours = 1;
   */
  coreHours: number;
};

/**
 * Describes the message google.cloud.batch.v1alpha.TaskResourceUsage.
 * Use `create(TaskResourceUsageSchema)` to create a new message.
 */
export const TaskResourceUsageSchema: GenMessage<TaskResourceUsage> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 4);

/**
 * Runnable describes instructions for executing a specific script or container
 * as part of a Task.
 *
 * @generated from message google.cloud.batch.v1alpha.Runnable
 */
export type Runnable = Message<"google.cloud.batch.v1alpha.Runnable"> & {
  /**
   * Required. The script, container, or barrier for this runnable to execute.
   *
   * @generated from oneof google.cloud.batch.v1alpha.Runnable.executable
   */
  executable: {
    /**
     * Container runnable.
     *
     * @generated from field: google.cloud.batch.v1alpha.Runnable.Container container = 1;
     */
    value: Runnable_Container;
    case: "container";
  } | {
    /**
     * Script runnable.
     *
     * @generated from field: google.cloud.batch.v1alpha.Runnable.Script script = 2;
     */
    value: Runnable_Script;
    case: "script";
  } | {
    /**
     * Barrier runnable.
     *
     * @generated from field: google.cloud.batch.v1alpha.Runnable.Barrier barrier = 6;
     */
    value: Runnable_Barrier;
    case: "barrier";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. DisplayName is an optional field that can be provided by the
   * caller. If provided, it will be used in logs and other outputs to identify
   * the script, making it easier for users to understand the logs. If not
   * provided the index of the runnable will be used for outputs.
   *
   * @generated from field: string display_name = 10;
   */
  displayName: string;

  /**
   * Normally, a runnable that returns a non-zero exit status fails and causes
   * the task to fail. However, you can set this field to `true` to allow the
   * task to continue executing its other runnables even if this runnable
   * fails.
   *
   * @generated from field: bool ignore_exit_status = 3;
   */
  ignoreExitStatus: boolean;

  /**
   * Normally, a runnable that doesn't exit causes its task to fail. However,
   * you can set this field to `true` to configure a background runnable.
   * Background runnables are allowed continue running in the background while
   * the task executes subsequent runnables. For example, background runnables
   * are useful for providing services to other runnables or providing
   * debugging-support tools like SSH servers.
   *
   * Specifically, background runnables are killed automatically (if they have
   * not already exited) a short time after all foreground runnables have
   * completed. Even though this is likely to result in a non-zero exit status
   * for the background runnable, these automatic kills are not treated as task
   * failures.
   *
   * @generated from field: bool background = 4;
   */
  background: boolean;

  /**
   * By default, after a Runnable fails, no further Runnable are executed. This
   * flag indicates that this Runnable must be run even if the Task has already
   * failed. This is useful for Runnables that copy output files off of the VM
   * or for debugging.
   *
   * The always_run flag does not override the Task's overall max_run_duration.
   * If the max_run_duration has expired then no further Runnables will execute,
   * not even always_run Runnables.
   *
   * @generated from field: bool always_run = 5;
   */
  alwaysRun: boolean;

  /**
   * Environment variables for this Runnable (overrides variables set for the
   * whole Task or TaskGroup).
   *
   * @generated from field: google.cloud.batch.v1alpha.Environment environment = 7;
   */
  environment?: Environment;

  /**
   * Timeout for this Runnable.
   *
   * @generated from field: google.protobuf.Duration timeout = 8;
   */
  timeout?: Duration;

  /**
   * Labels for this Runnable.
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.batch.v1alpha.Runnable.
 * Use `create(RunnableSchema)` to create a new message.
 */
export const RunnableSchema: GenMessage<Runnable> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 5);

/**
 * Container runnable.
 *
 * @generated from message google.cloud.batch.v1alpha.Runnable.Container
 */
export type Runnable_Container = Message<"google.cloud.batch.v1alpha.Runnable.Container"> & {
  /**
   * Required. The URI to pull the container image from.
   *
   * @generated from field: string image_uri = 1;
   */
  imageUri: string;

  /**
   * Required for some container images. Overrides the `CMD` specified in the
   * container. If there is an `ENTRYPOINT` (either in the container image or
   * with the `entrypoint` field below) then these commands are appended as
   * arguments to the `ENTRYPOINT`.
   *
   * @generated from field: repeated string commands = 2;
   */
  commands: string[];

  /**
   * Required for some container images. Overrides the `ENTRYPOINT` specified
   * in the container.
   *
   * @generated from field: string entrypoint = 3;
   */
  entrypoint: string;

  /**
   * Volumes to mount (bind mount) from the host machine files or directories
   * into the container, formatted to match `--volume` option for the
   * `docker run` command&mdash;for example, `/foo:/bar` or `/foo:/bar:ro`.
   *
   * If the `TaskSpec.Volumes` field is specified but this field is not, Batch
   * will mount each volume from the host machine to the container with the
   * same mount path by default. In this case, the default mount option for
   * containers will be read-only (`ro`) for existing persistent disks and
   * read-write (`rw`) for other volume types, regardless of the original
   * mount options specified in `TaskSpec.Volumes`. If you need different
   * mount settings, you can explicitly configure them in this field.
   *
   * @generated from field: repeated string volumes = 7;
   */
  volumes: string[];

  /**
   * Required for some container images. Arbitrary additional options to
   * include in the `docker run` command when running this container&mdash;for
   * example, `--network host`. For the `--volume` option, use the `volumes`
   * field for the container.
   *
   * @generated from field: string options = 8;
   */
  options: string;

  /**
   * If set to true, external network access to and from container will be
   * blocked, containers that are with block_external_network as true can
   * still communicate with each other, network cannot be specified in the
   * `container.options` field.
   *
   * @generated from field: bool block_external_network = 9;
   */
  blockExternalNetwork: boolean;

  /**
   * Required if the container image is from a private Docker registry. The
   * username to login to the Docker registry that contains the image.
   *
   * You can either specify the username directly by using plain text or
   * specify an encrypted username by using a Secret Manager secret:
   * `projects/*\/secrets/*\/versions/*`. However, using a secret is
   * recommended for enhanced security.
   *
   * Caution: If you specify the username using plain text, you risk the
   * username being exposed to any users who can view the job or its logs.
   * To avoid this risk, specify a secret that contains the username instead.
   *
   * Learn more about [Secret
   * Manager](https://cloud.google.com/secret-manager/docs/) and [using
   * Secret Manager with
   * Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).
   *
   * @generated from field: string username = 10;
   */
  username: string;

  /**
   * Required if the container image is from a private Docker registry. The
   * password to login to the Docker registry that contains the image.
   *
   * For security, it is strongly recommended to specify an
   * encrypted password by using a Secret Manager secret:
   * `projects/*\/secrets/*\/versions/*`.
   *
   * Warning: If you specify the password using plain text, you risk the
   * password being exposed to any users who can view the job or its logs.
   * To avoid this risk, specify a secret that contains the password instead.
   *
   * Learn more about [Secret
   * Manager](https://cloud.google.com/secret-manager/docs/) and [using
   * Secret Manager with
   * Batch](https://cloud.google.com/batch/docs/create-run-job-secret-manager).
   *
   * @generated from field: string password = 11;
   */
  password: string;

  /**
   * Optional. If set to true, this container runnable uses Image streaming.
   *
   * Use Image streaming to allow the runnable to initialize without
   * waiting for the entire container image to download, which can
   * significantly reduce startup time for large container images.
   *
   * When `enableImageStreaming` is set to true, the container
   * runtime is [containerd](https://containerd.io/) instead of Docker.
   * Additionally, this container runnable only supports the following
   * `container` subfields: `imageUri`,
   * `commands[]`, `entrypoint`, and
   * `volumes[]`; any other `container` subfields are ignored.
   *
   * For more information about the requirements and limitations for using
   * Image streaming with Batch, see the [`image-streaming`
   * sample on
   * GitHub](https://github.com/GoogleCloudPlatform/batch-samples/tree/main/api-samples/image-streaming).
   *
   * @generated from field: bool enable_image_streaming = 12;
   */
  enableImageStreaming: boolean;
};

/**
 * Describes the message google.cloud.batch.v1alpha.Runnable.Container.
 * Use `create(Runnable_ContainerSchema)` to create a new message.
 */
export const Runnable_ContainerSchema: GenMessage<Runnable_Container> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 5, 0);

/**
 * Script runnable.
 *
 * @generated from message google.cloud.batch.v1alpha.Runnable.Script
 */
export type Runnable_Script = Message<"google.cloud.batch.v1alpha.Runnable.Script"> & {
  /**
   * Required. The source code for this script runnable.
   *
   * @generated from oneof google.cloud.batch.v1alpha.Runnable.Script.command
   */
  command: {
    /**
     * The path to a script file that is accessible from the host VM(s).
     *
     * Unless the script file supports the default `#!/bin/sh` shell
     * interpreter, you must specify an interpreter by including a
     * [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix) as the
     * first line of the file. For example, to execute the script using bash,
     * include `#!/bin/bash` as the first line of the file. Alternatively,
     * to execute the script using Python3, include `#!/usr/bin/env python3`
     * as the first line of the file.
     *
     * @generated from field: string path = 1;
     */
    value: string;
    case: "path";
  } | {
    /**
     * The text for a script.
     *
     * Unless the script text supports the default `#!/bin/sh` shell
     * interpreter, you must specify an interpreter by including a
     * [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix) at the
     * beginning of the text. For example, to execute the script using bash,
     * include `#!/bin/bash\n` at the beginning of the text. Alternatively,
     * to execute the script using Python3, include `#!/usr/bin/env python3\n`
     * at the beginning of the text.
     *
     * @generated from field: string text = 2;
     */
    value: string;
    case: "text";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.batch.v1alpha.Runnable.Script.
 * Use `create(Runnable_ScriptSchema)` to create a new message.
 */
export const Runnable_ScriptSchema: GenMessage<Runnable_Script> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 5, 1);

/**
 * A barrier runnable automatically blocks the execution of subsequent
 * runnables until all the tasks in the task group reach the barrier.
 *
 * @generated from message google.cloud.batch.v1alpha.Runnable.Barrier
 */
export type Runnable_Barrier = Message<"google.cloud.batch.v1alpha.Runnable.Barrier"> & {
  /**
   * Barriers are identified by their index in runnable list.
   * Names are not required, but if present should be an identifier.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.Runnable.Barrier.
 * Use `create(Runnable_BarrierSchema)` to create a new message.
 */
export const Runnable_BarrierSchema: GenMessage<Runnable_Barrier> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 5, 2);

/**
 * Spec of a task
 *
 * @generated from message google.cloud.batch.v1alpha.TaskSpec
 */
export type TaskSpec = Message<"google.cloud.batch.v1alpha.TaskSpec"> & {
  /**
   * Required. The sequence of one or more runnables (executable scripts,
   * executable containers, and/or barriers) for each task in this task group to
   * run. Each task runs this list of runnables in order. For a task to succeed,
   * all of its script and container runnables each must meet at least one of
   * the following conditions:
   *
   * + The runnable exited with a zero status.
   * + The runnable didn't finish, but you enabled its `background` subfield.
   * + The runnable exited with a non-zero status, but you enabled its
   *   `ignore_exit_status` subfield.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.Runnable runnables = 8;
   */
  runnables: Runnable[];

  /**
   * ComputeResource requirements.
   *
   * @generated from field: google.cloud.batch.v1alpha.ComputeResource compute_resource = 3;
   */
  computeResource?: ComputeResource;

  /**
   * Maximum duration the task should run before being automatically retried
   * (if enabled) or automatically failed. Format the value of this field
   * as a time limit in seconds followed by `s`&mdash;for example, `3600s`
   * for 1 hour. The field accepts any value between 0 and the maximum listed
   * for the `Duration` field type at
   * https://protobuf.dev/reference/protobuf/google.protobuf/#duration; however,
   * the actual maximum run time for a job will be limited to the maximum run
   * time for a job listed at
   * https://cloud.google.com/batch/quotas#max-job-duration.
   *
   * @generated from field: google.protobuf.Duration max_run_duration = 4;
   */
  maxRunDuration?: Duration;

  /**
   * Maximum number of retries on failures.
   * The default, 0, which means never retry.
   * The valid value range is [0, 10].
   *
   * @generated from field: int32 max_retry_count = 5;
   */
  maxRetryCount: number;

  /**
   * Lifecycle management schema when any task in a task group is failed.
   * Currently we only support one lifecycle policy.
   * When the lifecycle policy condition is met,
   * the action in the policy will execute.
   * If task execution result does not meet with the defined lifecycle
   * policy, we consider it as the default policy.
   * Default policy means if the exit code is 0, exit task.
   * If task ends with non-zero exit code, retry the task with max_retry_count.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.LifecyclePolicy lifecycle_policies = 9;
   */
  lifecyclePolicies: LifecyclePolicy[];

  /**
   * Deprecated: please use environment(non-plural) instead.
   *
   * @generated from field: map<string, string> environments = 6 [deprecated = true];
   * @deprecated
   */
  environments: { [key: string]: string };

  /**
   * Volumes to mount before running Tasks using this TaskSpec.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.Volume volumes = 7;
   */
  volumes: Volume[];

  /**
   * Environment variables to set before running the Task.
   *
   * @generated from field: google.cloud.batch.v1alpha.Environment environment = 10;
   */
  environment?: Environment;
};

/**
 * Describes the message google.cloud.batch.v1alpha.TaskSpec.
 * Use `create(TaskSpecSchema)` to create a new message.
 */
export const TaskSpecSchema: GenMessage<TaskSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 6);

/**
 * LifecyclePolicy describes how to deal with task failures
 * based on different conditions.
 *
 * @generated from message google.cloud.batch.v1alpha.LifecyclePolicy
 */
export type LifecyclePolicy = Message<"google.cloud.batch.v1alpha.LifecyclePolicy"> & {
  /**
   * Action to execute when ActionCondition is true.
   * When RETRY_TASK is specified, we will retry failed tasks
   * if we notice any exit code match and fail tasks if no match is found.
   * Likewise, when FAIL_TASK is specified, we will fail tasks
   * if we notice any exit code match and retry tasks if no match is found.
   *
   * @generated from field: google.cloud.batch.v1alpha.LifecyclePolicy.Action action = 1;
   */
  action: LifecyclePolicy_Action;

  /**
   * Conditions that decide why a task failure is dealt with a specific action.
   *
   * @generated from field: google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition action_condition = 2;
   */
  actionCondition?: LifecyclePolicy_ActionCondition;
};

/**
 * Describes the message google.cloud.batch.v1alpha.LifecyclePolicy.
 * Use `create(LifecyclePolicySchema)` to create a new message.
 */
export const LifecyclePolicySchema: GenMessage<LifecyclePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 7);

/**
 * Conditions for actions to deal with task failures.
 *
 * @generated from message google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
 */
export type LifecyclePolicy_ActionCondition = Message<"google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition"> & {
  /**
   * Exit codes of a task execution.
   * If there are more than 1 exit codes,
   * when task executes with any of the exit code in the list,
   * the condition is met and the action will be executed.
   *
   * @generated from field: repeated int32 exit_codes = 1;
   */
  exitCodes: number[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.
 * Use `create(LifecyclePolicy_ActionConditionSchema)` to create a new message.
 */
export const LifecyclePolicy_ActionConditionSchema: GenMessage<LifecyclePolicy_ActionCondition> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 7, 0);

/**
 * Action on task failures based on different conditions.
 *
 * @generated from enum google.cloud.batch.v1alpha.LifecyclePolicy.Action
 */
export enum LifecyclePolicy_Action {
  /**
   * Action unspecified.
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  ACTION_UNSPECIFIED = 0,

  /**
   * Action that tasks in the group will be scheduled to re-execute.
   *
   * @generated from enum value: RETRY_TASK = 1;
   */
  RETRY_TASK = 1,

  /**
   * Action that tasks in the group will be stopped immediately.
   *
   * @generated from enum value: FAIL_TASK = 2;
   */
  FAIL_TASK = 2,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.LifecyclePolicy.Action.
 */
export const LifecyclePolicy_ActionSchema: GenEnum<LifecyclePolicy_Action> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_task, 7, 0);

/**
 * A Cloud Batch task.
 *
 * @generated from message google.cloud.batch.v1alpha.Task
 */
export type Task = Message<"google.cloud.batch.v1alpha.Task"> & {
  /**
   * Task name.
   * The name is generated from the parent TaskGroup name and 'id' field.
   * For example:
   * "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Task Status.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskStatus status = 2;
   */
  status?: TaskStatus;
};

/**
 * Describes the message google.cloud.batch.v1alpha.Task.
 * Use `create(TaskSchema)` to create a new message.
 */
export const TaskSchema: GenMessage<Task> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 8);

/**
 * An Environment describes a collection of environment variables to set when
 * executing Tasks.
 *
 * @generated from message google.cloud.batch.v1alpha.Environment
 */
export type Environment = Message<"google.cloud.batch.v1alpha.Environment"> & {
  /**
   * A map of environment variable names to values.
   *
   * @generated from field: map<string, string> variables = 1;
   */
  variables: { [key: string]: string };

  /**
   * A map of environment variable names to Secret Manager secret names.
   * The VM will access the named secrets to set the value of each environment
   * variable.
   *
   * @generated from field: map<string, string> secret_variables = 2;
   */
  secretVariables: { [key: string]: string };

  /**
   * An encrypted JSON dictionary where the key/value pairs correspond to
   * environment variable names and their values.
   *
   * @generated from field: google.cloud.batch.v1alpha.Environment.KMSEnvMap encrypted_variables = 3;
   */
  encryptedVariables?: Environment_KMSEnvMap;
};

/**
 * Describes the message google.cloud.batch.v1alpha.Environment.
 * Use `create(EnvironmentSchema)` to create a new message.
 */
export const EnvironmentSchema: GenMessage<Environment> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 9);

/**
 * @generated from message google.cloud.batch.v1alpha.Environment.KMSEnvMap
 */
export type Environment_KMSEnvMap = Message<"google.cloud.batch.v1alpha.Environment.KMSEnvMap"> & {
  /**
   * The name of the KMS key that will be used to decrypt the cipher text.
   *
   * @generated from field: string key_name = 1;
   */
  keyName: string;

  /**
   * The value of the cipherText response from the `encrypt` method.
   *
   * @generated from field: string cipher_text = 2;
   */
  cipherText: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.Environment.KMSEnvMap.
 * Use `create(Environment_KMSEnvMapSchema)` to create a new message.
 */
export const Environment_KMSEnvMapSchema: GenMessage<Environment_KMSEnvMap> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_task, 9, 0);

