// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/batch/v1alpha/job.proto (package google.cloud.batch.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Environment, StatusEvent, TaskSpec, TaskStatus_State } from "./task_pb";
import { file_google_cloud_batch_v1alpha_task } from "./task_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/batch/v1alpha/job.proto.
 */
export const file_google_cloud_batch_v1alpha_job: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_batch_v1alpha_task, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * The Cloud Batch Job description.
 *
 * @generated from message google.cloud.batch.v1alpha.Job
 */
export type Job = Message<"google.cloud.batch.v1alpha.Job"> & {
  /**
   * Output only. Job name.
   * For example: "projects/123456/locations/us-central1/jobs/job01".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. A system generated unique ID for the Job.
   *
   * @generated from field: string uid = 2;
   */
  uid: string;

  /**
   * Priority of the Job.
   * The valid value range is [0, 100). Default value is 0.
   * Higher value indicates higher priority.
   * A job with higher priority value is more likely to run earlier if all other
   * requirements are satisfied.
   *
   * @generated from field: int64 priority = 3;
   */
  priority: bigint;

  /**
   * Required. TaskGroups in the Job. Only one TaskGroup is supported now.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.TaskGroup task_groups = 4;
   */
  taskGroups: TaskGroup[];

  /**
   * Scheduling policy for TaskGroups in the job.
   *
   * @generated from field: google.cloud.batch.v1alpha.Job.SchedulingPolicy scheduling_policy = 5;
   */
  schedulingPolicy: Job_SchedulingPolicy;

  /**
   * At least one of the dependencies must be satisfied before the Job is
   * scheduled to run.
   * Only one JobDependency is supported now.
   * Not yet implemented.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.JobDependency dependencies = 6;
   */
  dependencies: JobDependency[];

  /**
   * Compute resource allocation for all TaskGroups in the Job.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy allocation_policy = 7;
   */
  allocationPolicy?: AllocationPolicy;

  /**
   * Labels for the Job. Labels could be user provided or system generated.
   * For example,
   * "labels": {
   *    "department": "finance",
   *    "environment": "test"
   *  }
   * You can assign up to 64 labels.  [Google Compute Engine label
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
   * apply.
   * Label names that start with "goog-" or "google-" are reserved.
   *
   * @generated from field: map<string, string> labels = 8;
   */
  labels: { [key: string]: string };

  /**
   * Output only. Job status. It is read only for users.
   *
   * @generated from field: google.cloud.batch.v1alpha.JobStatus status = 9;
   */
  status?: JobStatus;

  /**
   * Deprecated: please use notifications instead.
   *
   * @generated from field: google.cloud.batch.v1alpha.JobNotification notification = 10 [deprecated = true];
   * @deprecated
   */
  notification?: JobNotification;

  /**
   * Output only. When the Job was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 11;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last time the Job was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 12;
   */
  updateTime?: Timestamp;

  /**
   * Log preservation policy for the Job.
   *
   * @generated from field: google.cloud.batch.v1alpha.LogsPolicy logs_policy = 13;
   */
  logsPolicy?: LogsPolicy;

  /**
   * Notification configurations.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.JobNotification notifications = 14;
   */
  notifications: JobNotification[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.Job.
 * Use `create(JobSchema)` to create a new message.
 */
export const JobSchema: GenMessage<Job> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 0);

/**
 * The order that TaskGroups are scheduled relative to each other.
 *
 * Not yet implemented.
 *
 * @generated from enum google.cloud.batch.v1alpha.Job.SchedulingPolicy
 */
export enum Job_SchedulingPolicy {
  /**
   * Unspecified.
   *
   * @generated from enum value: SCHEDULING_POLICY_UNSPECIFIED = 0;
   */
  SCHEDULING_POLICY_UNSPECIFIED = 0,

  /**
   * Run all TaskGroups as soon as possible.
   *
   * @generated from enum value: AS_SOON_AS_POSSIBLE = 1;
   */
  AS_SOON_AS_POSSIBLE = 1,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.Job.SchedulingPolicy.
 */
export const Job_SchedulingPolicySchema: GenEnum<Job_SchedulingPolicy> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 0, 0);

/**
 * LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be
 * preserved.
 *
 * @generated from message google.cloud.batch.v1alpha.LogsPolicy
 */
export type LogsPolicy = Message<"google.cloud.batch.v1alpha.LogsPolicy"> & {
  /**
   * Where logs should be saved.
   *
   * @generated from field: google.cloud.batch.v1alpha.LogsPolicy.Destination destination = 1;
   */
  destination: LogsPolicy_Destination;

  /**
   * The path to which logs are saved when the destination = PATH. This can be a
   * local file path on the VM, or under the mount point of a Persistent Disk or
   * Filestore, or a Cloud Storage path.
   *
   * @generated from field: string logs_path = 2;
   */
  logsPath: string;

  /**
   * Optional. Additional settings for Cloud Logging. It will only take effect
   * when the destination of `LogsPolicy` is set to `CLOUD_LOGGING`.
   *
   * @generated from field: google.cloud.batch.v1alpha.LogsPolicy.CloudLoggingOption cloud_logging_option = 3;
   */
  cloudLoggingOption?: LogsPolicy_CloudLoggingOption;
};

/**
 * Describes the message google.cloud.batch.v1alpha.LogsPolicy.
 * Use `create(LogsPolicySchema)` to create a new message.
 */
export const LogsPolicySchema: GenMessage<LogsPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 1);

/**
 * `CloudLoggingOption` contains additional settings for Cloud Logging logs
 * generated by Batch job.
 *
 * @generated from message google.cloud.batch.v1alpha.LogsPolicy.CloudLoggingOption
 */
export type LogsPolicy_CloudLoggingOption = Message<"google.cloud.batch.v1alpha.LogsPolicy.CloudLoggingOption"> & {
  /**
   * Optional. Set this flag to true to change the [monitored resource
   * type](https://cloud.google.com/monitoring/api/resources) for
   * Cloud Logging logs generated by this Batch job from
   * the
   * [`batch.googleapis.com/Job`](https://cloud.google.com/monitoring/api/resources#tag_batch.googleapis.com/Job)
   * type to the formerly used
   * [`generic_task`](https://cloud.google.com/monitoring/api/resources#tag_generic_task)
   * type.
   *
   * @generated from field: bool use_generic_task_monitored_resource = 1;
   */
  useGenericTaskMonitoredResource: boolean;
};

/**
 * Describes the message google.cloud.batch.v1alpha.LogsPolicy.CloudLoggingOption.
 * Use `create(LogsPolicy_CloudLoggingOptionSchema)` to create a new message.
 */
export const LogsPolicy_CloudLoggingOptionSchema: GenMessage<LogsPolicy_CloudLoggingOption> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 1, 0);

/**
 * The destination (if any) for logs.
 *
 * @generated from enum google.cloud.batch.v1alpha.LogsPolicy.Destination
 */
export enum LogsPolicy_Destination {
  /**
   * Logs are not preserved.
   *
   * @generated from enum value: DESTINATION_UNSPECIFIED = 0;
   */
  DESTINATION_UNSPECIFIED = 0,

  /**
   * Logs are streamed to Cloud Logging.
   *
   * @generated from enum value: CLOUD_LOGGING = 1;
   */
  CLOUD_LOGGING = 1,

  /**
   * Logs are saved to a file path.
   *
   * @generated from enum value: PATH = 2;
   */
  PATH = 2,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.LogsPolicy.Destination.
 */
export const LogsPolicy_DestinationSchema: GenEnum<LogsPolicy_Destination> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 1, 0);

/**
 * JobDependency describes the state of other Jobs that the start of this Job
 * depends on.
 * All dependent Jobs must have been submitted in the same region.
 *
 * @generated from message google.cloud.batch.v1alpha.JobDependency
 */
export type JobDependency = Message<"google.cloud.batch.v1alpha.JobDependency"> & {
  /**
   * Each item maps a Job name to a Type.
   * All items must be satisfied for the JobDependency to be satisfied (the AND
   * operation).
   * Once a condition for one item becomes true, it won't go back to false
   * even the dependent Job state changes again.
   *
   * @generated from field: map<string, google.cloud.batch.v1alpha.JobDependency.Type> items = 1;
   */
  items: { [key: string]: JobDependency_Type };
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobDependency.
 * Use `create(JobDependencySchema)` to create a new message.
 */
export const JobDependencySchema: GenMessage<JobDependency> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 2);

/**
 * Dependency type.
 *
 * @generated from enum google.cloud.batch.v1alpha.JobDependency.Type
 */
export enum JobDependency_Type {
  /**
   * Unspecified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * The dependent Job has succeeded.
   *
   * @generated from enum value: SUCCEEDED = 1;
   */
  SUCCEEDED = 1,

  /**
   * The dependent Job has failed.
   *
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,

  /**
   * SUCCEEDED or FAILED.
   *
   * @generated from enum value: FINISHED = 3;
   */
  FINISHED = 3,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.JobDependency.Type.
 */
export const JobDependency_TypeSchema: GenEnum<JobDependency_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 2, 0);

/**
 * Job status.
 *
 * @generated from message google.cloud.batch.v1alpha.JobStatus
 */
export type JobStatus = Message<"google.cloud.batch.v1alpha.JobStatus"> & {
  /**
   * Job state
   *
   * @generated from field: google.cloud.batch.v1alpha.JobStatus.State state = 1;
   */
  state: JobStatus_State;

  /**
   * Job status events
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.StatusEvent status_events = 2;
   */
  statusEvents: StatusEvent[];

  /**
   * Aggregated task status for each TaskGroup in the Job.
   * The map key is TaskGroup ID.
   *
   * @generated from field: map<string, google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus> task_groups = 4;
   */
  taskGroups: { [key: string]: JobStatus_TaskGroupStatus };

  /**
   * The duration of time that the Job spent in status RUNNING.
   *
   * @generated from field: google.protobuf.Duration run_duration = 5;
   */
  runDuration?: Duration;

  /**
   * The resource usage of the job.
   *
   * @generated from field: google.cloud.batch.v1alpha.ResourceUsage resource_usage = 6;
   */
  resourceUsage?: ResourceUsage;
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobStatus.
 * Use `create(JobStatusSchema)` to create a new message.
 */
export const JobStatusSchema: GenMessage<JobStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 3);

/**
 * VM instance status.
 *
 * @generated from message google.cloud.batch.v1alpha.JobStatus.InstanceStatus
 */
export type JobStatus_InstanceStatus = Message<"google.cloud.batch.v1alpha.JobStatus.InstanceStatus"> & {
  /**
   * The Compute Engine machine type.
   *
   * @generated from field: string machine_type = 1;
   */
  machineType: string;

  /**
   * The VM instance provisioning model.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel provisioning_model = 2;
   */
  provisioningModel: AllocationPolicy_ProvisioningModel;

  /**
   * The max number of tasks can be assigned to this instance type.
   *
   * @generated from field: int64 task_pack = 3;
   */
  taskPack: bigint;

  /**
   * The VM boot disk.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.Disk boot_disk = 4;
   */
  bootDisk?: AllocationPolicy_Disk;
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobStatus.InstanceStatus.
 * Use `create(JobStatus_InstanceStatusSchema)` to create a new message.
 */
export const JobStatus_InstanceStatusSchema: GenMessage<JobStatus_InstanceStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 3, 0);

/**
 * Aggregated task status for a TaskGroup.
 *
 * @generated from message google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
 */
export type JobStatus_TaskGroupStatus = Message<"google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus"> & {
  /**
   * Count of task in each state in the TaskGroup.
   * The map key is task state name.
   *
   * @generated from field: map<string, int64> counts = 1;
   */
  counts: { [key: string]: bigint };

  /**
   * Status of instances allocated for the TaskGroup.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.JobStatus.InstanceStatus instances = 2;
   */
  instances: JobStatus_InstanceStatus[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.
 * Use `create(JobStatus_TaskGroupStatusSchema)` to create a new message.
 */
export const JobStatus_TaskGroupStatusSchema: GenMessage<JobStatus_TaskGroupStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 3, 1);

/**
 * Valid Job states.
 *
 * @generated from enum google.cloud.batch.v1alpha.JobStatus.State
 */
export enum JobStatus_State {
  /**
   * Job state unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Job is admitted (validated and persisted) and waiting for resources.
   *
   * @generated from enum value: QUEUED = 1;
   */
  QUEUED = 1,

  /**
   * Job is scheduled to run as soon as resource allocation is ready.
   * The resource allocation may happen at a later time but with a high
   * chance to succeed.
   *
   * @generated from enum value: SCHEDULED = 2;
   */
  SCHEDULED = 2,

  /**
   * Resource allocation has been successful. At least one Task in the Job is
   * RUNNING.
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * All Tasks in the Job have finished successfully.
   *
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,

  /**
   * At least one Task in the Job has failed.
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * The Job will be deleted, but has not been deleted yet. Typically this is
   * because resources used by the Job are still being cleaned up.
   *
   * @generated from enum value: DELETION_IN_PROGRESS = 6;
   */
  DELETION_IN_PROGRESS = 6,

  /**
   * The Job cancellation is in progress, this is because the resources used
   * by the Job are still being cleaned up.
   *
   * @generated from enum value: CANCELLATION_IN_PROGRESS = 7;
   */
  CANCELLATION_IN_PROGRESS = 7,

  /**
   * The Job has been cancelled, the task executions were stopped and the
   * resources were cleaned up.
   *
   * @generated from enum value: CANCELLED = 8;
   */
  CANCELLED = 8,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.JobStatus.State.
 */
export const JobStatus_StateSchema: GenEnum<JobStatus_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 3, 0);

/**
 * ResourceUsage describes the resource usage of the job.
 *
 * @generated from message google.cloud.batch.v1alpha.ResourceUsage
 */
export type ResourceUsage = Message<"google.cloud.batch.v1alpha.ResourceUsage"> & {
  /**
   * The CPU core hours that the job consumes.
   *
   * @generated from field: double core_hours = 1;
   */
  coreHours: number;
};

/**
 * Describes the message google.cloud.batch.v1alpha.ResourceUsage.
 * Use `create(ResourceUsageSchema)` to create a new message.
 */
export const ResourceUsageSchema: GenMessage<ResourceUsage> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 4);

/**
 * Notification configurations.
 *
 * @generated from message google.cloud.batch.v1alpha.JobNotification
 */
export type JobNotification = Message<"google.cloud.batch.v1alpha.JobNotification"> & {
  /**
   * The Pub/Sub topic where notifications for the job, like state
   * changes, will be published. If undefined, no Pub/Sub notifications
   * are sent for this job.
   *
   * Specify the topic using the following format:
   * `projects/{project}/topics/{topic}`.
   * Notably, if you want to specify a Pub/Sub topic that is in a
   * different project than the job, your administrator must grant your
   * project's Batch service agent permission to publish to that topic.
   *
   * For more information about configuring Pub/Sub notifications for
   * a job, see
   * https://cloud.google.com/batch/docs/enable-notifications.
   *
   * @generated from field: string pubsub_topic = 1;
   */
  pubsubTopic: string;

  /**
   * The attribute requirements of messages to be sent to this Pub/Sub topic.
   * Without this field, no message will be sent.
   *
   * @generated from field: google.cloud.batch.v1alpha.JobNotification.Message message = 2;
   */
  message?: JobNotification_Message;
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobNotification.
 * Use `create(JobNotificationSchema)` to create a new message.
 */
export const JobNotificationSchema: GenMessage<JobNotification> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 5);

/**
 * Message details.
 * Describe the conditions under which messages will be sent.
 * If no attribute is defined, no message will be sent by default.
 * One message should specify either the job or the task level attributes,
 * but not both. For example,
 * job level: JOB_STATE_CHANGED and/or a specified new_job_state;
 * task level: TASK_STATE_CHANGED and/or a specified new_task_state.
 *
 * @generated from message google.cloud.batch.v1alpha.JobNotification.Message
 */
export type JobNotification_Message = Message<"google.cloud.batch.v1alpha.JobNotification.Message"> & {
  /**
   * The message type.
   *
   * @generated from field: google.cloud.batch.v1alpha.JobNotification.Type type = 1;
   */
  type: JobNotification_Type;

  /**
   * The new job state.
   *
   * @generated from field: google.cloud.batch.v1alpha.JobStatus.State new_job_state = 2;
   */
  newJobState: JobStatus_State;

  /**
   * The new task state.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskStatus.State new_task_state = 3;
   */
  newTaskState: TaskStatus_State;
};

/**
 * Describes the message google.cloud.batch.v1alpha.JobNotification.Message.
 * Use `create(JobNotification_MessageSchema)` to create a new message.
 */
export const JobNotification_MessageSchema: GenMessage<JobNotification_Message> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 5, 0);

/**
 * The message type.
 *
 * @generated from enum google.cloud.batch.v1alpha.JobNotification.Type
 */
export enum JobNotification_Type {
  /**
   * Unspecified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Notify users that the job state has changed.
   *
   * @generated from enum value: JOB_STATE_CHANGED = 1;
   */
  JOB_STATE_CHANGED = 1,

  /**
   * Notify users that the task state has changed.
   *
   * @generated from enum value: TASK_STATE_CHANGED = 2;
   */
  TASK_STATE_CHANGED = 2,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.JobNotification.Type.
 */
export const JobNotification_TypeSchema: GenEnum<JobNotification_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 5, 0);

/**
 * A Job's resource allocation policy describes when, where, and how compute
 * resources should be allocated for the Job.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy
 */
export type AllocationPolicy = Message<"google.cloud.batch.v1alpha.AllocationPolicy"> & {
  /**
   * Location where compute resources should be allocated for the Job.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy location = 1;
   */
  location?: AllocationPolicy_LocationPolicy;

  /**
   * Deprecated: please use instances[0].policy instead.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy instance = 2 [deprecated = true];
   * @deprecated
   */
  instance?: AllocationPolicy_InstancePolicy;

  /**
   * Describe instances that can be created by this AllocationPolicy.
   * Only instances[0] is supported now.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate instances = 8;
   */
  instances: AllocationPolicy_InstancePolicyOrTemplate[];

  /**
   * Deprecated: please use instances[0].template instead.
   *
   * @generated from field: repeated string instance_templates = 3 [deprecated = true];
   * @deprecated
   */
  instanceTemplates: string[];

  /**
   * Deprecated: please use instances[0].policy.provisioning_model instead.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel provisioning_models = 4 [deprecated = true];
   * @deprecated
   */
  provisioningModels: AllocationPolicy_ProvisioningModel[];

  /**
   * Deprecated: please use service_account instead.
   *
   * @generated from field: string service_account_email = 5 [deprecated = true];
   * @deprecated
   */
  serviceAccountEmail: string;

  /**
   * Defines the service account for Batch-created VMs. If omitted, the [default
   * Compute Engine service
   * account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
   * is used. Must match the service account specified in any used instance
   * template configured in the Batch job.
   *
   * Includes the following fields:
   *  * email: The service account's email address. If not set, the default
   *  Compute Engine service account is used.
   *  * scopes: Additional OAuth scopes to grant the service account, beyond the
   *  default cloud-platform scope. (list of strings)
   *
   * @generated from field: google.cloud.batch.v1alpha.ServiceAccount service_account = 9;
   */
  serviceAccount?: ServiceAccount;

  /**
   * Labels applied to all VM instances and other resources
   * created by AllocationPolicy.
   * Labels could be user provided or system generated.
   * You can assign up to 64 labels. [Google Compute Engine label
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
   * apply.
   * Label names that start with "goog-" or "google-" are reserved.
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };

  /**
   * The network policy.
   *
   * If you define an instance template in the `InstancePolicyOrTemplate` field,
   * Batch will use the network settings in the instance template instead of
   * this field.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy network = 7;
   */
  network?: AllocationPolicy_NetworkPolicy;

  /**
   * The placement policy.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy placement = 10;
   */
  placement?: AllocationPolicy_PlacementPolicy;

  /**
   * Optional. Tags applied to the VM instances.
   *
   * The tags identify valid sources or targets for network firewalls.
   * Each tag must be 1-63 characters long, and comply with
   * [RFC1035](https://www.ietf.org/rfc/rfc1035.txt).
   *
   * @generated from field: repeated string tags = 11;
   */
  tags: string[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.
 * Use `create(AllocationPolicySchema)` to create a new message.
 */
export const AllocationPolicySchema: GenMessage<AllocationPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6);

/**
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
 */
export type AllocationPolicy_LocationPolicy = Message<"google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy"> & {
  /**
   * A list of allowed location names represented by internal URLs.
   *
   * Each location can be a region or a zone.
   * Only one region or multiple zones in one region is supported now.
   * For example,
   * ["regions/us-central1"] allow VMs in any zones in region us-central1.
   * ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs
   * in zones us-central1-a and us-central1-c.
   *
   * Mixing locations from different regions would cause errors.
   * For example,
   * ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b",
   * "zones/us-west1-a"] contains locations from two distinct regions:
   * us-central1 and us-west1. This combination will trigger an error.
   *
   * @generated from field: repeated string allowed_locations = 1;
   */
  allowedLocations: string[];

  /**
   * A list of denied location names.
   *
   * Not yet implemented.
   *
   * @generated from field: repeated string denied_locations = 2;
   */
  deniedLocations: string[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.
 * Use `create(AllocationPolicy_LocationPolicySchema)` to create a new message.
 */
export const AllocationPolicy_LocationPolicySchema: GenMessage<AllocationPolicy_LocationPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 0);

/**
 * A new persistent disk or a local ssd.
 * A VM can only have one local SSD setting but multiple local SSD partitions.
 * See https://cloud.google.com/compute/docs/disks#pdspecs and
 * https://cloud.google.com/compute/docs/disks#localssds.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.Disk
 */
export type AllocationPolicy_Disk = Message<"google.cloud.batch.v1alpha.AllocationPolicy.Disk"> & {
  /**
   * A data source from which a PD will be created.
   *
   * @generated from oneof google.cloud.batch.v1alpha.AllocationPolicy.Disk.data_source
   */
  dataSource: {
    /**
     * URL for a VM image to use as the data source for this disk.
     * For example, the following are all valid URLs:
     *
     * * Specify the image by its family name:
     * projects/{project}/global/images/family/{image_family}
     * * Specify the image version:
     * projects/{project}/global/images/{image_version}
     *
     * You can also use Batch customized image in short names.
     * The following image values are supported for a boot disk:
     *
     * * `batch-debian`: use Batch Debian images.
     * * `batch-cos`: use Batch Container-Optimized images.
     * * `batch-hpc-rocky`: use Batch HPC Rocky Linux images.
     *
     * @generated from field: string image = 4;
     */
    value: string;
    case: "image";
  } | {
    /**
     * Name of a snapshot used as the data source.
     * Snapshot is not supported as boot disk now.
     *
     * @generated from field: string snapshot = 5;
     */
    value: string;
    case: "snapshot";
  } | { case: undefined; value?: undefined };

  /**
   * Disk type as shown in `gcloud compute disk-types list`.
   * For example, local SSD uses type "local-ssd".
   * Persistent disks and boot disks use "pd-balanced", "pd-extreme", "pd-ssd"
   * or "pd-standard". If not specified, "pd-standard" will be used as the
   * default type for non-boot disks, "pd-balanced" will be used as the
   * default type for boot disks.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Disk size in GB.
   *
   * **Non-Boot Disk**:
   * If the `type` specifies a persistent disk, this field
   * is ignored if `data_source` is set as `image` or `snapshot`.
   * If the `type` specifies a local SSD, this field should be a multiple of
   * 375 GB, otherwise, the final size will be the next greater multiple of
   * 375 GB.
   *
   * **Boot Disk**:
   * Batch will calculate the boot disk size based on source
   * image and task requirements if you do not speicify the size.
   * If both this field and the `boot_disk_mib` field in task spec's
   * `compute_resource` are defined, Batch will only honor this field.
   * Also, this field should be no smaller than the source disk's
   * size when the `data_source` is set as `snapshot` or `image`.
   * For example, if you set an image as the `data_source` field and the
   * image's default disk size 30 GB, you can only use this field to make the
   * disk larger or equal to 30 GB.
   *
   * @generated from field: int64 size_gb = 2;
   */
  sizeGb: bigint;

  /**
   * Local SSDs are available through both "SCSI" and "NVMe" interfaces.
   * If not indicated, "NVMe" will be the default one for local ssds.
   * This field is ignored for persistent disks as the interface is chosen
   * automatically. See
   * https://cloud.google.com/compute/docs/disks/persistent-disks#choose_an_interface.
   *
   * @generated from field: string disk_interface = 6;
   */
  diskInterface: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.Disk.
 * Use `create(AllocationPolicy_DiskSchema)` to create a new message.
 */
export const AllocationPolicy_DiskSchema: GenMessage<AllocationPolicy_Disk> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 1);

/**
 * A new or an existing persistent disk (PD) or a local ssd attached to a VM
 * instance.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
 */
export type AllocationPolicy_AttachedDisk = Message<"google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk"> & {
  /**
   * @generated from oneof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.attached
   */
  attached: {
    /**
     * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.Disk new_disk = 1;
     */
    value: AllocationPolicy_Disk;
    case: "newDisk";
  } | {
    /**
     * Name of an existing PD.
     *
     * @generated from field: string existing_disk = 2;
     */
    value: string;
    case: "existingDisk";
  } | { case: undefined; value?: undefined };

  /**
   * Device name that the guest operating system will see.
   * It is used by Runnable.volumes field to mount disks. So please specify
   * the device_name if you want Batch to help mount the disk, and it should
   * match the device_name field in volumes.
   *
   * @generated from field: string device_name = 3;
   */
  deviceName: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.
 * Use `create(AllocationPolicy_AttachedDiskSchema)` to create a new message.
 */
export const AllocationPolicy_AttachedDiskSchema: GenMessage<AllocationPolicy_AttachedDisk> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 2);

/**
 * Accelerator describes Compute Engine accelerators to be attached to the VM.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
 */
export type AllocationPolicy_Accelerator = Message<"google.cloud.batch.v1alpha.AllocationPolicy.Accelerator"> & {
  /**
   * The accelerator type. For example, "nvidia-tesla-t4".
   * See `gcloud compute accelerator-types list`.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * The number of accelerators of this type.
   *
   * @generated from field: int64 count = 2;
   */
  count: bigint;

  /**
   * Deprecated: please use instances[0].install_gpu_drivers instead.
   *
   * @generated from field: bool install_gpu_drivers = 3 [deprecated = true];
   * @deprecated
   */
  installGpuDrivers: boolean;

  /**
   * Optional. The NVIDIA GPU driver version that should be installed for this
   * type.
   *
   * You can define the specific driver version such as "470.103.01",
   * following the driver version requirements in
   * https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver.
   * Batch will install the specific accelerator driver if qualified.
   *
   * @generated from field: string driver_version = 4;
   */
  driverVersion: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.
 * Use `create(AllocationPolicy_AcceleratorSchema)` to create a new message.
 */
export const AllocationPolicy_AcceleratorSchema: GenMessage<AllocationPolicy_Accelerator> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 3);

/**
 * InstancePolicy describes an instance type and resources attached to each VM
 * created by this InstancePolicy.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
 */
export type AllocationPolicy_InstancePolicy = Message<"google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy"> & {
  /**
   * Deprecated: please use machine_type instead.
   *
   * @generated from field: repeated string allowed_machine_types = 1 [deprecated = true];
   * @deprecated
   */
  allowedMachineTypes: string[];

  /**
   * The Compute Engine machine type.
   *
   * @generated from field: string machine_type = 2;
   */
  machineType: string;

  /**
   * The minimum CPU platform.
   * See
   * https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
   *
   * @generated from field: string min_cpu_platform = 3;
   */
  minCpuPlatform: string;

  /**
   * The provisioning model.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel provisioning_model = 4;
   */
  provisioningModel: AllocationPolicy_ProvisioningModel;

  /**
   * The accelerators attached to each VM instance.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.AllocationPolicy.Accelerator accelerators = 5;
   */
  accelerators: AllocationPolicy_Accelerator[];

  /**
   * Boot disk to be created and attached to each VM by this InstancePolicy.
   * Boot disk will be deleted when the VM is deleted.
   * Batch API now only supports booting from image.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.Disk boot_disk = 8;
   */
  bootDisk?: AllocationPolicy_Disk;

  /**
   * Non-boot disks to be attached for each VM created by this InstancePolicy.
   * New disks will be deleted when the VM is deleted.
   * A non-boot disk is a disk that can be of a device with a
   * file system or a raw storage drive that is not ready for data
   * storage and accessing.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk disks = 6;
   */
  disks: AllocationPolicy_AttachedDisk[];

  /**
   * Optional. If specified, VMs will consume only the specified reservation.
   * If not specified (default), VMs will consume any applicable reservation.
   *
   * @generated from field: string reservation = 7;
   */
  reservation: string;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.
 * Use `create(AllocationPolicy_InstancePolicySchema)` to create a new message.
 */
export const AllocationPolicy_InstancePolicySchema: GenMessage<AllocationPolicy_InstancePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 4);

/**
 * InstancePolicyOrTemplate lets you define the type of resources to use for
 * this job either with an InstancePolicy or an instance template.
 * If undefined, Batch picks the type of VM to use and doesn't include
 * optional VM resources such as GPUs and extra disks.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
 */
export type AllocationPolicy_InstancePolicyOrTemplate = Message<"google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate"> & {
  /**
   * @generated from oneof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.policy_template
   */
  policyTemplate: {
    /**
     * InstancePolicy.
     *
     * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy policy = 1;
     */
    value: AllocationPolicy_InstancePolicy;
    case: "policy";
  } | {
    /**
     * Name of an instance template used to create VMs.
     * Named the field as 'instance_template' instead of 'template' to avoid
     * c++ keyword conflict.
     *
     * @generated from field: string instance_template = 2;
     */
    value: string;
    case: "instanceTemplate";
  } | { case: undefined; value?: undefined };

  /**
   * Set this field true if you want Batch to help fetch drivers from a third
   * party location and install them for GPUs specified in
   * `policy.accelerators` or `instance_template` on your behalf. Default is
   * false.
   *
   * For Container-Optimized Image cases, Batch will install the
   * accelerator driver following milestones of
   * https://cloud.google.com/container-optimized-os/docs/release-notes. For
   * non Container-Optimized Image cases, following
   * https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.
   *
   * @generated from field: bool install_gpu_drivers = 3;
   */
  installGpuDrivers: boolean;

  /**
   * Optional. Set this field true if you want Batch to install Ops Agent on
   * your behalf. Default is false.
   *
   * @generated from field: bool install_ops_agent = 4;
   */
  installOpsAgent: boolean;

  /**
   * Optional. Set this field to `true` if you want Batch to block
   * project-level SSH keys from accessing this job's VMs.  Alternatively, you
   * can configure the job to specify a VM instance template that blocks
   * project-level SSH keys. In either case, Batch blocks project-level SSH
   * keys while creating the VMs for this job.
   *
   * Batch allows project-level SSH keys for a job's VMs only if all
   * the following are true:
   *
   * + This field is undefined or set to `false`.
   * + The job's VM instance template (if any) doesn't block project-level
   *   SSH keys.
   *
   * Notably, you can override this behavior by manually updating a VM to
   * block or allow project-level SSH keys. For more information about
   * blocking project-level SSH keys, see the Compute Engine documentation:
   * https://cloud.google.com/compute/docs/connect/restrict-ssh-keys#block-keys
   *
   * @generated from field: bool block_project_ssh_keys = 5;
   */
  blockProjectSshKeys: boolean;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.
 * Use `create(AllocationPolicy_InstancePolicyOrTemplateSchema)` to create a new message.
 */
export const AllocationPolicy_InstancePolicyOrTemplateSchema: GenMessage<AllocationPolicy_InstancePolicyOrTemplate> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 5);

/**
 * A network interface.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
 */
export type AllocationPolicy_NetworkInterface = Message<"google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface"> & {
  /**
   * The URL of an existing network resource.
   * You can specify the network as a full or partial URL.
   *
   * For example, the following are all valid URLs:
   *
   * * https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
   * * projects/{project}/global/networks/{network}
   * * global/networks/{network}
   *
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * The URL of an existing subnetwork resource in the network.
   * You can specify the subnetwork as a full or partial URL.
   *
   * For example, the following are all valid URLs:
   *
   * * https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork}
   * * projects/{project}/regions/{region}/subnetworks/{subnetwork}
   * * regions/{region}/subnetworks/{subnetwork}
   *
   * @generated from field: string subnetwork = 2;
   */
  subnetwork: string;

  /**
   * Default is false (with an external IP address). Required if
   * no external public IP address is attached to the VM. If no external
   * public IP address, additional configuration is required to allow the VM
   * to access Google Services. See
   * https://cloud.google.com/vpc/docs/configure-private-google-access and
   * https://cloud.google.com/nat/docs/gce-example#create-nat for more
   * information.
   *
   * @generated from field: bool no_external_ip_address = 3;
   */
  noExternalIpAddress: boolean;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.
 * Use `create(AllocationPolicy_NetworkInterfaceSchema)` to create a new message.
 */
export const AllocationPolicy_NetworkInterfaceSchema: GenMessage<AllocationPolicy_NetworkInterface> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 6);

/**
 * NetworkPolicy describes VM instance network configurations.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
 */
export type AllocationPolicy_NetworkPolicy = Message<"google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy"> & {
  /**
   * Network configurations.
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface network_interfaces = 1;
   */
  networkInterfaces: AllocationPolicy_NetworkInterface[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.
 * Use `create(AllocationPolicy_NetworkPolicySchema)` to create a new message.
 */
export const AllocationPolicy_NetworkPolicySchema: GenMessage<AllocationPolicy_NetworkPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 7);

/**
 * PlacementPolicy describes a group placement policy for the VMs controlled
 * by this AllocationPolicy.
 *
 * @generated from message google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
 */
export type AllocationPolicy_PlacementPolicy = Message<"google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy"> & {
  /**
   * UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you
   * want VMs to be located close to each other for low network latency
   * between the VMs. No placement policy will be generated when collocation
   * is UNSPECIFIED.
   *
   * @generated from field: string collocation = 1;
   */
  collocation: string;

  /**
   * When specified, causes the job to fail if more than max_distance logical
   * switches are required between VMs. Batch uses the most compact possible
   * placement of VMs even when max_distance is not specified. An explicit
   * max_distance makes that level of compactness a strict requirement.
   * Not yet implemented
   *
   * @generated from field: int64 max_distance = 2;
   */
  maxDistance: bigint;
};

/**
 * Describes the message google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.
 * Use `create(AllocationPolicy_PlacementPolicySchema)` to create a new message.
 */
export const AllocationPolicy_PlacementPolicySchema: GenMessage<AllocationPolicy_PlacementPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 6, 8);

/**
 * Compute Engine VM instance provisioning model.
 *
 * @generated from enum google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel
 */
export enum AllocationPolicy_ProvisioningModel {
  /**
   * Unspecified.
   *
   * @generated from enum value: PROVISIONING_MODEL_UNSPECIFIED = 0;
   */
  PROVISIONING_MODEL_UNSPECIFIED = 0,

  /**
   * Standard VM.
   *
   * @generated from enum value: STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * SPOT VM.
   *
   * @generated from enum value: SPOT = 2;
   */
  SPOT = 2,

  /**
   * Preemptible VM (PVM).
   *
   * Above SPOT VM is the preferable model for preemptible VM instances: the
   * old preemptible VM model (indicated by this field) is the older model,
   * and has been migrated to use the SPOT model as the underlying technology.
   * This old model will still be supported.
   *
   * @generated from enum value: PREEMPTIBLE = 3;
   */
  PREEMPTIBLE = 3,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel.
 */
export const AllocationPolicy_ProvisioningModelSchema: GenEnum<AllocationPolicy_ProvisioningModel> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 6, 0);

/**
 * A TaskGroup defines one or more Tasks that all share the same TaskSpec.
 *
 * @generated from message google.cloud.batch.v1alpha.TaskGroup
 */
export type TaskGroup = Message<"google.cloud.batch.v1alpha.TaskGroup"> & {
  /**
   * Output only. TaskGroup name.
   * The system generates this field based on parent Job name.
   * For example:
   * "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Tasks in the group share the same task spec.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskSpec task_spec = 3;
   */
  taskSpec?: TaskSpec;

  /**
   * Number of Tasks in the TaskGroup.
   * Default is 1.
   *
   * @generated from field: int64 task_count = 4;
   */
  taskCount: bigint;

  /**
   * Max number of tasks that can run in parallel.
   * Default to min(task_count, parallel tasks per job limit).
   * See: [Job Limits](https://cloud.google.com/batch/quotas#job_limits).
   * Field parallelism must be 1 if the scheduling_policy is IN_ORDER.
   *
   * @generated from field: int64 parallelism = 5;
   */
  parallelism: bigint;

  /**
   * Scheduling policy for Tasks in the TaskGroup.
   * The default value is AS_SOON_AS_POSSIBLE.
   *
   * @generated from field: google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy scheduling_policy = 6;
   */
  schedulingPolicy: TaskGroup_SchedulingPolicy;

  /**
   * Compute resource allocation for the TaskGroup.
   * If specified, it overrides resources in Job.
   *
   * @generated from field: google.cloud.batch.v1alpha.AllocationPolicy allocation_policy = 7;
   */
  allocationPolicy?: AllocationPolicy;

  /**
   * Labels for the TaskGroup.
   * Labels could be user provided or system generated.
   * You can assign up to 64 labels.  [Google Compute Engine label
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
   * apply.
   * Label names that start with "goog-" or "google-" are reserved.
   *
   * @generated from field: map<string, string> labels = 8;
   */
  labels: { [key: string]: string };

  /**
   * An array of environment variable mappings, which are passed to Tasks with
   * matching indices. If task_environments is used then task_count should
   * not be specified in the request (and will be ignored). Task count will be
   * the length of task_environments.
   *
   * Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in
   * addition to any environment variables set in task_environments, specifying
   * the number of Tasks in the Task's parent TaskGroup, and the specific Task's
   * index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).
   *
   * @generated from field: repeated google.cloud.batch.v1alpha.Environment task_environments = 9;
   */
  taskEnvironments: Environment[];

  /**
   * Max number of tasks that can be run on a VM at the same time.
   * If not specified, the system will decide a value based on available
   * compute resources on a VM and task requirements.
   *
   * @generated from field: int64 task_count_per_node = 10;
   */
  taskCountPerNode: bigint;

  /**
   * When true, Batch will populate a file with a list of all VMs assigned to
   * the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path
   * of that file. Defaults to false. The host file supports up to 1000 VMs.
   *
   * @generated from field: bool require_hosts_file = 11;
   */
  requireHostsFile: boolean;

  /**
   * When true, Batch will configure SSH to allow passwordless login between
   * VMs running the Batch tasks in the same TaskGroup.
   *
   * @generated from field: bool permissive_ssh = 12;
   */
  permissiveSsh: boolean;

  /**
   * Optional. If not set or set to false, Batch uses the root user to execute
   * runnables. If set to true, Batch runs the runnables using a non-root user.
   * Currently, the non-root user Batch used is generated by OS Login. For more
   * information, see [About OS
   * Login](https://cloud.google.com/compute/docs/oslogin).
   *
   * @generated from field: bool run_as_non_root = 14;
   */
  runAsNonRoot: boolean;

  /**
   * Optional. ServiceAccount used by tasks within the task group for the access
   * to other Cloud resources. This allows tasks to operate with permissions
   * distinct from the service account for the VM set at `AllocationPolicy`. Use
   * this field when tasks require different access rights than those of the VM.
   *
   * Specify the service account's `email` field. Ensure `scopes`
   * include any necessary permissions for tasks, in addition to the default
   * 'cloud-platform' scope.
   *
   * @generated from field: google.cloud.batch.v1alpha.ServiceAccount service_account = 15;
   */
  serviceAccount?: ServiceAccount;
};

/**
 * Describes the message google.cloud.batch.v1alpha.TaskGroup.
 * Use `create(TaskGroupSchema)` to create a new message.
 */
export const TaskGroupSchema: GenMessage<TaskGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 7);

/**
 * How Tasks in the TaskGroup should be scheduled relative to each other.
 *
 * @generated from enum google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy
 */
export enum TaskGroup_SchedulingPolicy {
  /**
   * Unspecified.
   *
   * @generated from enum value: SCHEDULING_POLICY_UNSPECIFIED = 0;
   */
  SCHEDULING_POLICY_UNSPECIFIED = 0,

  /**
   * Run Tasks as soon as resources are available.
   *
   * Tasks might be executed in parallel depending on parallelism and
   * task_count values.
   *
   * @generated from enum value: AS_SOON_AS_POSSIBLE = 1;
   */
  AS_SOON_AS_POSSIBLE = 1,

  /**
   * Run Tasks sequentially with increased task index.
   *
   * @generated from enum value: IN_ORDER = 2;
   */
  IN_ORDER = 2,
}

/**
 * Describes the enum google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy.
 */
export const TaskGroup_SchedulingPolicySchema: GenEnum<TaskGroup_SchedulingPolicy> = /*@__PURE__*/
  enumDesc(file_google_cloud_batch_v1alpha_job, 7, 0);

/**
 * Carries information about a Google Cloud service account.
 *
 * @generated from message google.cloud.batch.v1alpha.ServiceAccount
 */
export type ServiceAccount = Message<"google.cloud.batch.v1alpha.ServiceAccount"> & {
  /**
   * Email address of the service account.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * List of scopes to be enabled for this service account.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * Describes the message google.cloud.batch.v1alpha.ServiceAccount.
 * Use `create(ServiceAccountSchema)` to create a new message.
 */
export const ServiceAccountSchema: GenMessage<ServiceAccount> = /*@__PURE__*/
  messageDesc(file_google_cloud_batch_v1alpha_job, 8);

