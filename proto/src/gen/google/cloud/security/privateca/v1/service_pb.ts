// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/security/privateca/v1/service.proto (package google.cloud.security.privateca.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { CaPool, CaPoolSchema, Certificate, CertificateAuthority, CertificateAuthoritySchema, CertificateRevocationList, CertificateRevocationListSchema, CertificateSchema, CertificateTemplate, CertificateTemplateSchema, RevocationReason, SubordinateConfig } from "./resources_pb";
import { file_google_cloud_security_privateca_v1_resources } from "./resources_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/security/privateca/v1/service.proto.
 */
export const file_google_cloud_security_privateca_v1_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_security_privateca_v1_resources, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificate].
 *
 * @generated from message google.cloud.security.privateca.v1.CreateCertificateRequest
 */
export type CreateCertificateRequest = Message<"google.cloud.security.privateca.v1.CreateCertificateRequest"> & {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [Certificate][google.cloud.security.privateca.v1.Certificate], in the
   * format `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the Enterprise [CertificateAuthority.Tier][], but is optional and its
   * value is ignored otherwise.
   *
   * @generated from field: string certificate_id = 2;
   */
  certificateId: string;

  /**
   * Required. A [Certificate][google.cloud.security.privateca.v1.Certificate]
   * with initial field values.
   *
   * @generated from field: google.cloud.security.privateca.v1.Certificate certificate = 3;
   */
  certificate?: Certificate;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. If this is true, no
   * [Certificate][google.cloud.security.privateca.v1.Certificate] resource will
   * be persisted regardless of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool]'s
   * [tier][google.cloud.security.privateca.v1.CaPool.tier], and the returned
   * [Certificate][google.cloud.security.privateca.v1.Certificate] will not
   * contain the
   * [pem_certificate][google.cloud.security.privateca.v1.Certificate.pem_certificate]
   * field.
   *
   * @generated from field: bool validate_only = 5;
   */
  validateOnly: boolean;

  /**
   * Optional. The resource ID of the
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that should issue the certificate.  This optional field will ignore the
   * load-balancing scheme of the Pool and directly issue the certificate from
   * the CA with the specified ID, contained in the same
   * [CaPool][google.cloud.security.privateca.v1.CaPool] referenced by `parent`.
   * Per-CA quota rules apply. If left empty, a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * will be chosen from the [CaPool][google.cloud.security.privateca.v1.CaPool]
   * by the service. For example, to issue a
   * [Certificate][google.cloud.security.privateca.v1.Certificate] from a
   * Certificate Authority with resource name
   * "projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca",
   * you can set the
   * [parent][google.cloud.security.privateca.v1.CreateCertificateRequest.parent]
   * to "projects/my-project/locations/us-central1/caPools/my-pool" and the
   * [issuing_certificate_authority_id][google.cloud.security.privateca.v1.CreateCertificateRequest.issuing_certificate_authority_id]
   * to "my-ca".
   *
   * @generated from field: string issuing_certificate_authority_id = 6;
   */
  issuingCertificateAuthorityId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.CreateCertificateRequest.
 * Use `create(CreateCertificateRequestSchema)` to create a new message.
 */
export const CreateCertificateRequestSchema: GenMessage<CreateCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 0);

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificate].
 *
 * @generated from message google.cloud.security.privateca.v1.GetCertificateRequest
 */
export type GetCertificateRequest = Message<"google.cloud.security.privateca.v1.GetCertificateRequest"> & {
  /**
   * Required. The [name][google.cloud.security.privateca.v1.Certificate.name]
   * of the [Certificate][google.cloud.security.privateca.v1.Certificate] to
   * get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.GetCertificateRequest.
 * Use `create(GetCertificateRequestSchema)` to create a new message.
 */
export const GetCertificateRequestSchema: GenMessage<GetCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 1);

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificates].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificatesRequest
 */
export type ListCertificatesRequest = Message<"google.cloud.security.privateca.v1.ListCertificatesRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [Certificates][google.cloud.security.privateca.v1.Certificate], in the
   * format `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Limit on the number of
   * [Certificates][google.cloud.security.privateca.v1.Certificate] to include
   * in the response. Further
   * [Certificates][google.cloud.security.privateca.v1.Certificate] can
   * subsequently be obtained by including the
   * [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificatesResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Only include resources that match the filter in the response. For
   * details on supported filters and syntax, see [Certificates Filtering
   * documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#filtering_support).
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specify how the results should be sorted. For details on
   * supported fields and syntax, see [Certificates Sorting
   * documentation](https://cloud.google.com/certificate-authority-service/docs/sorting-filtering-certificates#sorting_support).
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificatesRequest.
 * Use `create(ListCertificatesRequestSchema)` to create a new message.
 */
export const ListCertificatesRequestSchema: GenMessage<ListCertificatesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 2);

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificates].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificatesResponse
 */
export type ListCertificatesResponse = Message<"google.cloud.security.privateca.v1.ListCertificatesResponse"> & {
  /**
   * The list of [Certificates][google.cloud.security.privateca.v1.Certificate].
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.Certificate certificates = 1;
   */
  certificates: Certificate[];

  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificatesRequest.next_page_token][] to retrieve the
   * next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations (e.g. "us-west1") that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificatesResponse.
 * Use `create(ListCertificatesResponseSchema)` to create a new message.
 */
export const ListCertificatesResponseSchema: GenMessage<ListCertificatesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 3);

/**
 * Request message for
 * [CertificateAuthorityService.RevokeCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.RevokeCertificate].
 *
 * @generated from message google.cloud.security.privateca.v1.RevokeCertificateRequest
 */
export type RevokeCertificateRequest = Message<"google.cloud.security.privateca.v1.RevokeCertificateRequest"> & {
  /**
   * Required. The resource name for this
   * [Certificate][google.cloud.security.privateca.v1.Certificate] in the format
   * `projects/*\/locations/*\/caPools/*\/certificates/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The
   * [RevocationReason][google.cloud.security.privateca.v1.RevocationReason] for
   * revoking this certificate.
   *
   * @generated from field: google.cloud.security.privateca.v1.RevocationReason reason = 2;
   */
  reason: RevocationReason;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.RevokeCertificateRequest.
 * Use `create(RevokeCertificateRequestSchema)` to create a new message.
 */
export const RevokeCertificateRequestSchema: GenMessage<RevokeCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 4);

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificate][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificate].
 *
 * @generated from message google.cloud.security.privateca.v1.UpdateCertificateRequest
 */
export type UpdateCertificateRequest = Message<"google.cloud.security.privateca.v1.UpdateCertificateRequest"> & {
  /**
   * Required. [Certificate][google.cloud.security.privateca.v1.Certificate]
   * with updated values.
   *
   * @generated from field: google.cloud.security.privateca.v1.Certificate certificate = 1;
   */
  certificate?: Certificate;

  /**
   * Required. A list of fields to be updated in this request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UpdateCertificateRequest.
 * Use `create(UpdateCertificateRequestSchema)` to create a new message.
 */
export const UpdateCertificateRequestSchema: GenMessage<UpdateCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 5);

/**
 * Request message for
 * [CertificateAuthorityService.ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.ActivateCertificateAuthorityRequest
 */
export type ActivateCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.ActivateCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The signed CA certificate issued from
   * [FetchCertificateAuthorityCsrResponse.pem_csr][google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse.pem_csr].
   *
   * @generated from field: string pem_ca_certificate = 2;
   */
  pemCaCertificate: string;

  /**
   * Required. Must include information about the issuer of
   * 'pem_ca_certificate', and any further issuers until the self-signed CA.
   *
   * @generated from field: google.cloud.security.privateca.v1.SubordinateConfig subordinate_config = 3;
   */
  subordinateConfig?: SubordinateConfig;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ActivateCertificateAuthorityRequest.
 * Use `create(ActivateCertificateAuthorityRequestSchema)` to create a new message.
 */
export const ActivateCertificateAuthorityRequestSchema: GenMessage<ActivateCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 6);

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.CreateCertificateAuthorityRequest
 */
export type CreateCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.CreateCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority],
   * in the format `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   *
   * @generated from field: string certificate_authority_id = 2;
   */
  certificateAuthorityId: string;

  /**
   * Required. A
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * with initial field values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CertificateAuthority certificate_authority = 3;
   */
  certificateAuthority?: CertificateAuthority;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.CreateCertificateAuthorityRequest.
 * Use `create(CreateCertificateAuthorityRequestSchema)` to create a new message.
 */
export const CreateCertificateAuthorityRequestSchema: GenMessage<CreateCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 7);

/**
 * Request message for
 * [CertificateAuthorityService.DisableCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.DisableCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.DisableCertificateAuthorityRequest
 */
export type DisableCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.DisableCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. This field allows this CA to be disabled even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the CA will
   * no longer be able to issue certificates.
   *
   * @generated from field: bool ignore_dependent_resources = 3;
   */
  ignoreDependentResources: boolean;
};

/**
 * Describes the message google.cloud.security.privateca.v1.DisableCertificateAuthorityRequest.
 * Use `create(DisableCertificateAuthorityRequestSchema)` to create a new message.
 */
export const DisableCertificateAuthorityRequestSchema: GenMessage<DisableCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 8);

/**
 * Request message for
 * [CertificateAuthorityService.EnableCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.EnableCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.EnableCertificateAuthorityRequest
 */
export type EnableCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.EnableCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.EnableCertificateAuthorityRequest.
 * Use `create(EnableCertificateAuthorityRequestSchema)` to create a new message.
 */
export const EnableCertificateAuthorityRequestSchema: GenMessage<EnableCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 9);

/**
 * Request message for
 * [CertificateAuthorityService.FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr].
 *
 * @generated from message google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrRequest
 */
export type FetchCertificateAuthorityCsrRequest = Message<"google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrRequest.
 * Use `create(FetchCertificateAuthorityCsrRequestSchema)` to create a new message.
 */
export const FetchCertificateAuthorityCsrRequestSchema: GenMessage<FetchCertificateAuthorityCsrRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 10);

/**
 * Response message for
 * [CertificateAuthorityService.FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr].
 *
 * @generated from message google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse
 */
export type FetchCertificateAuthorityCsrResponse = Message<"google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse"> & {
  /**
   * Output only. The PEM-encoded signed certificate signing request (CSR).
   *
   * @generated from field: string pem_csr = 1;
   */
  pemCsr: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.FetchCertificateAuthorityCsrResponse.
 * Use `create(FetchCertificateAuthorityCsrResponseSchema)` to create a new message.
 */
export const FetchCertificateAuthorityCsrResponseSchema: GenMessage<FetchCertificateAuthorityCsrResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 11);

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.GetCertificateAuthorityRequest
 */
export type GetCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.GetCertificateAuthorityRequest"> & {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateAuthority.name] of the
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.GetCertificateAuthorityRequest.
 * Use `create(GetCertificateAuthorityRequestSchema)` to create a new message.
 */
export const GetCertificateAuthorityRequestSchema: GenMessage<GetCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 12);

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateAuthorities].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateAuthoritiesRequest
 */
export type ListCertificateAuthoritiesRequest = Message<"google.cloud.security.privateca.v1.ListCertificateAuthoritiesRequest"> & {
  /**
   * Required. The resource name of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] associated with the
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority],
   * in the format `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Limit on the number of
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority]
   * to include in the response. Further
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority]
   * can subsequently be obtained by including the
   * [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateAuthoritiesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Only include resources that match the filter in the response.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specify how the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateAuthoritiesRequest.
 * Use `create(ListCertificateAuthoritiesRequestSchema)` to create a new message.
 */
export const ListCertificateAuthoritiesRequestSchema: GenMessage<ListCertificateAuthoritiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 13);

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateAuthorities].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse
 */
export type ListCertificateAuthoritiesResponse = Message<"google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse"> & {
  /**
   * The list of
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.CertificateAuthority certificate_authorities = 1;
   */
  certificateAuthorities: CertificateAuthority[];

  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateAuthoritiesRequest.next_page_token][] to retrieve the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations (e.g. "us-west1") that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateAuthoritiesResponse.
 * Use `create(ListCertificateAuthoritiesResponseSchema)` to create a new message.
 */
export const ListCertificateAuthoritiesResponseSchema: GenMessage<ListCertificateAuthoritiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 14);

/**
 * Request message for
 * [CertificateAuthorityService.UndeleteCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.UndeleteCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.UndeleteCertificateAuthorityRequest
 */
export type UndeleteCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.UndeleteCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UndeleteCertificateAuthorityRequest.
 * Use `create(UndeleteCertificateAuthorityRequestSchema)` to create a new message.
 */
export const UndeleteCertificateAuthorityRequestSchema: GenMessage<UndeleteCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 15);

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.DeleteCertificateAuthorityRequest
 */
export type DeleteCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.DeleteCertificateAuthorityRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. This field allows the CA to be deleted even if the CA has
   * active certs. Active certs include both unrevoked and unexpired certs.
   *
   * @generated from field: bool ignore_active_certificates = 4;
   */
  ignoreActiveCertificates: boolean;

  /**
   * Optional. If this flag is set, the Certificate Authority will be deleted as
   * soon as possible without a 30-day grace period where undeletion would have
   * been allowed. If you proceed, there will be no way to recover this CA.
   *
   * @generated from field: bool skip_grace_period = 5;
   */
  skipGracePeriod: boolean;

  /**
   * Optional. This field allows this CA to be deleted even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the CA will
   * no longer be able to issue certificates.
   *
   * @generated from field: bool ignore_dependent_resources = 6;
   */
  ignoreDependentResources: boolean;
};

/**
 * Describes the message google.cloud.security.privateca.v1.DeleteCertificateAuthorityRequest.
 * Use `create(DeleteCertificateAuthorityRequestSchema)` to create a new message.
 */
export const DeleteCertificateAuthorityRequestSchema: GenMessage<DeleteCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 16);

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateAuthority].
 *
 * @generated from message google.cloud.security.privateca.v1.UpdateCertificateAuthorityRequest
 */
export type UpdateCertificateAuthorityRequest = Message<"google.cloud.security.privateca.v1.UpdateCertificateAuthorityRequest"> & {
  /**
   * Required.
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * with updated values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CertificateAuthority certificate_authority = 1;
   */
  certificateAuthority?: CertificateAuthority;

  /**
   * Required. A list of fields to be updated in this request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UpdateCertificateAuthorityRequest.
 * Use `create(UpdateCertificateAuthorityRequestSchema)` to create a new message.
 */
export const UpdateCertificateAuthorityRequestSchema: GenMessage<UpdateCertificateAuthorityRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 17);

/**
 * Request message for
 * [CertificateAuthorityService.CreateCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCaPool].
 *
 * @generated from message google.cloud.security.privateca.v1.CreateCaPoolRequest
 */
export type CreateCaPoolRequest = Message<"google.cloud.security.privateca.v1.CreateCaPoolRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [CaPool][google.cloud.security.privateca.v1.CaPool], in the format
   * `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   *
   * @generated from field: string ca_pool_id = 2;
   */
  caPoolId: string;

  /**
   * Required. A [CaPool][google.cloud.security.privateca.v1.CaPool] with
   * initial field values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CaPool ca_pool = 3;
   */
  caPool?: CaPool;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.CreateCaPoolRequest.
 * Use `create(CreateCaPoolRequestSchema)` to create a new message.
 */
export const CreateCaPoolRequestSchema: GenMessage<CreateCaPoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 18);

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCaPool].
 *
 * @generated from message google.cloud.security.privateca.v1.UpdateCaPoolRequest
 */
export type UpdateCaPoolRequest = Message<"google.cloud.security.privateca.v1.UpdateCaPoolRequest"> & {
  /**
   * Required. [CaPool][google.cloud.security.privateca.v1.CaPool] with updated
   * values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CaPool ca_pool = 1;
   */
  caPool?: CaPool;

  /**
   * Required. A list of fields to be updated in this request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UpdateCaPoolRequest.
 * Use `create(UpdateCaPoolRequestSchema)` to create a new message.
 */
export const UpdateCaPoolRequestSchema: GenMessage<UpdateCaPoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 19);

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCaPool].
 *
 * @generated from message google.cloud.security.privateca.v1.DeleteCaPoolRequest
 */
export type DeleteCaPoolRequest = Message<"google.cloud.security.privateca.v1.DeleteCaPoolRequest"> & {
  /**
   * Required. The resource name for this
   * [CaPool][google.cloud.security.privateca.v1.CaPool] in the format
   * `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. This field allows this pool to be deleted even if it's being
   * depended on by another resource. However, doing so may result in unintended
   * and unrecoverable effects on any dependent resources since the pool will
   * no longer be able to issue certificates.
   *
   * @generated from field: bool ignore_dependent_resources = 4;
   */
  ignoreDependentResources: boolean;
};

/**
 * Describes the message google.cloud.security.privateca.v1.DeleteCaPoolRequest.
 * Use `create(DeleteCaPoolRequestSchema)` to create a new message.
 */
export const DeleteCaPoolRequestSchema: GenMessage<DeleteCaPoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 20);

/**
 * Request message for
 * [CertificateAuthorityService.FetchCaCerts][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCaCerts].
 *
 * @generated from message google.cloud.security.privateca.v1.FetchCaCertsRequest
 */
export type FetchCaCertsRequest = Message<"google.cloud.security.privateca.v1.FetchCaCertsRequest"> & {
  /**
   * Required. The resource name for the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] in the format
   * `projects/*\/locations/*\/caPools/*`.
   *
   * @generated from field: string ca_pool = 1;
   */
  caPool: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.FetchCaCertsRequest.
 * Use `create(FetchCaCertsRequestSchema)` to create a new message.
 */
export const FetchCaCertsRequestSchema: GenMessage<FetchCaCertsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 21);

/**
 * Response message for
 * [CertificateAuthorityService.FetchCaCerts][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCaCerts].
 *
 * @generated from message google.cloud.security.privateca.v1.FetchCaCertsResponse
 */
export type FetchCaCertsResponse = Message<"google.cloud.security.privateca.v1.FetchCaCertsResponse"> & {
  /**
   * The PEM encoded CA certificate chains of all certificate authorities in
   * this [CaPool][google.cloud.security.privateca.v1.CaPool] in the ENABLED,
   * DISABLED, or STAGED states.
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.FetchCaCertsResponse.CertChain ca_certs = 1;
   */
  caCerts: FetchCaCertsResponse_CertChain[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.FetchCaCertsResponse.
 * Use `create(FetchCaCertsResponseSchema)` to create a new message.
 */
export const FetchCaCertsResponseSchema: GenMessage<FetchCaCertsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 22);

/**
 * @generated from message google.cloud.security.privateca.v1.FetchCaCertsResponse.CertChain
 */
export type FetchCaCertsResponse_CertChain = Message<"google.cloud.security.privateca.v1.FetchCaCertsResponse.CertChain"> & {
  /**
   * The certificates that form the CA chain, from leaf to root order.
   *
   * @generated from field: repeated string certificates = 1;
   */
  certificates: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.FetchCaCertsResponse.CertChain.
 * Use `create(FetchCaCertsResponse_CertChainSchema)` to create a new message.
 */
export const FetchCaCertsResponse_CertChainSchema: GenMessage<FetchCaCertsResponse_CertChain> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 22, 0);

/**
 * Request message for
 * [CertificateAuthorityService.GetCaPool][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCaPool].
 *
 * @generated from message google.cloud.security.privateca.v1.GetCaPoolRequest
 */
export type GetCaPoolRequest = Message<"google.cloud.security.privateca.v1.GetCaPoolRequest"> & {
  /**
   * Required. The [name][google.cloud.security.privateca.v1.CaPool.name] of the
   * [CaPool][google.cloud.security.privateca.v1.CaPool] to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.GetCaPoolRequest.
 * Use `create(GetCaPoolRequestSchema)` to create a new message.
 */
export const GetCaPoolRequestSchema: GenMessage<GetCaPoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 23);

/**
 * Request message for
 * [CertificateAuthorityService.ListCaPools][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCaPools].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCaPoolsRequest
 */
export type ListCaPoolsRequest = Message<"google.cloud.security.privateca.v1.ListCaPoolsRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [CaPools][google.cloud.security.privateca.v1.CaPool], in the format
   * `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Limit on the number of
   * [CaPools][google.cloud.security.privateca.v1.CaPool] to include in the
   * response. Further [CaPools][google.cloud.security.privateca.v1.CaPool] can
   * subsequently be obtained by including the
   * [ListCaPoolsResponse.next_page_token][google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Pagination token, returned earlier via
   * [ListCaPoolsResponse.next_page_token][google.cloud.security.privateca.v1.ListCaPoolsResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Only include resources that match the filter in the response.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specify how the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCaPoolsRequest.
 * Use `create(ListCaPoolsRequestSchema)` to create a new message.
 */
export const ListCaPoolsRequestSchema: GenMessage<ListCaPoolsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 24);

/**
 * Response message for
 * [CertificateAuthorityService.ListCaPools][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCaPools].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCaPoolsResponse
 */
export type ListCaPoolsResponse = Message<"google.cloud.security.privateca.v1.ListCaPoolsResponse"> & {
  /**
   * The list of [CaPools][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.CaPool ca_pools = 1;
   */
  caPools: CaPool[];

  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateAuthoritiesRequest.next_page_token][] to retrieve the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations (e.g. "us-west1") that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCaPoolsResponse.
 * Use `create(ListCaPoolsResponseSchema)` to create a new message.
 */
export const ListCaPoolsResponseSchema: GenMessage<ListCaPoolsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 25);

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateRevocationList][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateRevocationList].
 *
 * @generated from message google.cloud.security.privateca.v1.GetCertificateRevocationListRequest
 */
export type GetCertificateRevocationListRequest = Message<"google.cloud.security.privateca.v1.GetCertificateRevocationListRequest"> & {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateRevocationList.name]
   * of the
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList]
   * to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.GetCertificateRevocationListRequest.
 * Use `create(GetCertificateRevocationListRequestSchema)` to create a new message.
 */
export const GetCertificateRevocationListRequestSchema: GenMessage<GetCertificateRevocationListRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 26);

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateRevocationLists].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateRevocationListsRequest
 */
export type ListCertificateRevocationListsRequest = Message<"google.cloud.security.privateca.v1.ListCertificateRevocationListsRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList],
   * in the format `projects/*\/locations/*\/caPools/*\/certificateAuthorities/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Limit on the number of
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList]
   * to include in the response. Further
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList]
   * can subsequently be obtained by including the
   * [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateRevocationListsResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Only include resources that match the filter in the response.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specify how the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateRevocationListsRequest.
 * Use `create(ListCertificateRevocationListsRequestSchema)` to create a new message.
 */
export const ListCertificateRevocationListsRequestSchema: GenMessage<ListCertificateRevocationListsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 27);

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateRevocationLists][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateRevocationLists].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse
 */
export type ListCertificateRevocationListsResponse = Message<"google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse"> & {
  /**
   * The list of
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.CertificateRevocationList certificate_revocation_lists = 1;
   */
  certificateRevocationLists: CertificateRevocationList[];

  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateRevocationListsRequest.next_page_token][] to retrieve the
   * next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations (e.g. "us-west1") that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateRevocationListsResponse.
 * Use `create(ListCertificateRevocationListsResponseSchema)` to create a new message.
 */
export const ListCertificateRevocationListsResponseSchema: GenMessage<ListCertificateRevocationListsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 28);

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateRevocationList][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateRevocationList].
 *
 * @generated from message google.cloud.security.privateca.v1.UpdateCertificateRevocationListRequest
 */
export type UpdateCertificateRevocationListRequest = Message<"google.cloud.security.privateca.v1.UpdateCertificateRevocationListRequest"> & {
  /**
   * Required.
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList]
   * with updated values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CertificateRevocationList certificate_revocation_list = 1;
   */
  certificateRevocationList?: CertificateRevocationList;

  /**
   * Required. A list of fields to be updated in this request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UpdateCertificateRevocationListRequest.
 * Use `create(UpdateCertificateRevocationListRequestSchema)` to create a new message.
 */
export const UpdateCertificateRevocationListRequestSchema: GenMessage<UpdateCertificateRevocationListRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 29);

/**
 * Request message for
 * [CertificateAuthorityService.CreateCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateTemplate].
 *
 * @generated from message google.cloud.security.privateca.v1.CreateCertificateTemplateRequest
 */
export type CreateCertificateTemplateRequest = Message<"google.cloud.security.privateca.v1.CreateCertificateTemplateRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate],
   * in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. It must be unique within a location and match the regular
   * expression `[a-zA-Z0-9_-]{1,63}`
   *
   * @generated from field: string certificate_template_id = 2;
   */
  certificateTemplateId: string;

  /**
   * Required. A
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * with initial field values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CertificateTemplate certificate_template = 3;
   */
  certificateTemplate?: CertificateTemplate;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.CreateCertificateTemplateRequest.
 * Use `create(CreateCertificateTemplateRequestSchema)` to create a new message.
 */
export const CreateCertificateTemplateRequestSchema: GenMessage<CreateCertificateTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 30);

/**
 * Request message for
 * [CertificateAuthorityService.DeleteCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateTemplate].
 *
 * @generated from message google.cloud.security.privateca.v1.DeleteCertificateTemplateRequest
 */
export type DeleteCertificateTemplateRequest = Message<"google.cloud.security.privateca.v1.DeleteCertificateTemplateRequest"> & {
  /**
   * Required. The resource name for this
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * in the format `projects/*\/locations/*\/certificateTemplates/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.DeleteCertificateTemplateRequest.
 * Use `create(DeleteCertificateTemplateRequestSchema)` to create a new message.
 */
export const DeleteCertificateTemplateRequestSchema: GenMessage<DeleteCertificateTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 31);

/**
 * Request message for
 * [CertificateAuthorityService.GetCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateTemplate].
 *
 * @generated from message google.cloud.security.privateca.v1.GetCertificateTemplateRequest
 */
export type GetCertificateTemplateRequest = Message<"google.cloud.security.privateca.v1.GetCertificateTemplateRequest"> & {
  /**
   * Required. The
   * [name][google.cloud.security.privateca.v1.CertificateTemplate.name] of the
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.GetCertificateTemplateRequest.
 * Use `create(GetCertificateTemplateRequestSchema)` to create a new message.
 */
export const GetCertificateTemplateRequestSchema: GenMessage<GetCertificateTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 32);

/**
 * Request message for
 * [CertificateAuthorityService.ListCertificateTemplates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateTemplates].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateTemplatesRequest
 */
export type ListCertificateTemplatesRequest = Message<"google.cloud.security.privateca.v1.ListCertificateTemplatesRequest"> & {
  /**
   * Required. The resource name of the location associated with the
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate],
   * in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Limit on the number of
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate]
   * to include in the response. Further
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate]
   * can subsequently be obtained by including the
   * [ListCertificateTemplatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token]
   * in a subsequent request. If unspecified, the server will pick an
   * appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Pagination token, returned earlier via
   * [ListCertificateTemplatesResponse.next_page_token][google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.next_page_token].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Only include resources that match the filter in the response.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specify how the results should be sorted.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateTemplatesRequest.
 * Use `create(ListCertificateTemplatesRequestSchema)` to create a new message.
 */
export const ListCertificateTemplatesRequestSchema: GenMessage<ListCertificateTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 33);

/**
 * Response message for
 * [CertificateAuthorityService.ListCertificateTemplates][google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateTemplates].
 *
 * @generated from message google.cloud.security.privateca.v1.ListCertificateTemplatesResponse
 */
export type ListCertificateTemplatesResponse = Message<"google.cloud.security.privateca.v1.ListCertificateTemplatesResponse"> & {
  /**
   * The list of
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
   *
   * @generated from field: repeated google.cloud.security.privateca.v1.CertificateTemplate certificate_templates = 1;
   */
  certificateTemplates: CertificateTemplate[];

  /**
   * A token to retrieve next page of results. Pass this value in
   * [ListCertificateTemplatesRequest.next_page_token][] to retrieve
   * the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations (e.g. "us-west1") that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.security.privateca.v1.ListCertificateTemplatesResponse.
 * Use `create(ListCertificateTemplatesResponseSchema)` to create a new message.
 */
export const ListCertificateTemplatesResponseSchema: GenMessage<ListCertificateTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 34);

/**
 * Request message for
 * [CertificateAuthorityService.UpdateCertificateTemplate][google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateTemplate].
 *
 * @generated from message google.cloud.security.privateca.v1.UpdateCertificateTemplateRequest
 */
export type UpdateCertificateTemplateRequest = Message<"google.cloud.security.privateca.v1.UpdateCertificateTemplateRequest"> & {
  /**
   * Required.
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * with updated values.
   *
   * @generated from field: google.cloud.security.privateca.v1.CertificateTemplate certificate_template = 1;
   */
  certificateTemplate?: CertificateTemplate;

  /**
   * Required. A list of fields to be updated in this request.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. An ID to identify requests. Specify a unique request ID so that
   * if you must retry your request, the server will know to ignore the request
   * if it has already been completed. The server will guarantee that for at
   * least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.UpdateCertificateTemplateRequest.
 * Use `create(UpdateCertificateTemplateRequestSchema)` to create a new message.
 */
export const UpdateCertificateTemplateRequestSchema: GenMessage<UpdateCertificateTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 35);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.security.privateca.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.security.privateca.v1.OperationMetadata"> & {
  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.security.privateca.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_security_privateca_v1_service, 36);

/**
 * [Certificate Authority
 * Service][google.cloud.security.privateca.v1.CertificateAuthorityService]
 * manages private certificate authorities and issued certificates.
 *
 * @generated from service google.cloud.security.privateca.v1.CertificateAuthorityService
 */
export const CertificateAuthorityService: GenService<{
  /**
   * Create a new [Certificate][google.cloud.security.privateca.v1.Certificate]
   * in a given Project, Location from a particular
   * [CaPool][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificate
   */
  createCertificate: {
    methodKind: "unary";
    input: typeof CreateCertificateRequestSchema;
    output: typeof CertificateSchema;
  },
  /**
   * Returns a [Certificate][google.cloud.security.privateca.v1.Certificate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificate
   */
  getCertificate: {
    methodKind: "unary";
    input: typeof GetCertificateRequestSchema;
    output: typeof CertificateSchema;
  },
  /**
   * Lists [Certificates][google.cloud.security.privateca.v1.Certificate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificates
   */
  listCertificates: {
    methodKind: "unary";
    input: typeof ListCertificatesRequestSchema;
    output: typeof ListCertificatesResponseSchema;
  },
  /**
   * Revoke a [Certificate][google.cloud.security.privateca.v1.Certificate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.RevokeCertificate
   */
  revokeCertificate: {
    methodKind: "unary";
    input: typeof RevokeCertificateRequestSchema;
    output: typeof CertificateSchema;
  },
  /**
   * Update a [Certificate][google.cloud.security.privateca.v1.Certificate].
   * Currently, the only field you can update is the
   * [labels][google.cloud.security.privateca.v1.Certificate.labels] field.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificate
   */
  updateCertificate: {
    methodKind: "unary";
    input: typeof UpdateCertificateRequestSchema;
    output: typeof CertificateSchema;
  },
  /**
   * Activate a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * After the parent Certificate Authority signs a certificate signing request
   * from
   * [FetchCertificateAuthorityCsr][google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr],
   * this method can complete the activation process.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority
   */
  activateCertificateAuthority: {
    methodKind: "unary";
    input: typeof ActivateCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Create a new
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * in a given Project and Location.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateAuthority
   */
  createCertificateAuthority: {
    methodKind: "unary";
    input: typeof CreateCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Disable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.DisableCertificateAuthority
   */
  disableCertificateAuthority: {
    methodKind: "unary";
    input: typeof DisableCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Enable a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.EnableCertificateAuthority
   */
  enableCertificateAuthority: {
    methodKind: "unary";
    input: typeof EnableCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Fetch a certificate signing request (CSR) from a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that is in state
   * [AWAITING_USER_ACTIVATION][google.cloud.security.privateca.v1.CertificateAuthority.State.AWAITING_USER_ACTIVATION]
   * and is of type
   * [SUBORDINATE][google.cloud.security.privateca.v1.CertificateAuthority.Type.SUBORDINATE].
   * The CSR must then be signed by the desired parent Certificate Authority,
   * which could be another
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * resource, or could be an on-prem certificate authority. See also
   * [ActivateCertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthorityService.ActivateCertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCertificateAuthorityCsr
   */
  fetchCertificateAuthorityCsr: {
    methodKind: "unary";
    input: typeof FetchCertificateAuthorityCsrRequestSchema;
    output: typeof FetchCertificateAuthorityCsrResponseSchema;
  },
  /**
   * Returns a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateAuthority
   */
  getCertificateAuthority: {
    methodKind: "unary";
    input: typeof GetCertificateAuthorityRequestSchema;
    output: typeof CertificateAuthoritySchema;
  },
  /**
   * Lists
   * [CertificateAuthorities][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateAuthorities
   */
  listCertificateAuthorities: {
    methodKind: "unary";
    input: typeof ListCertificateAuthoritiesRequestSchema;
    output: typeof ListCertificateAuthoritiesResponseSchema;
  },
  /**
   * Undelete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority]
   * that has been deleted.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UndeleteCertificateAuthority
   */
  undeleteCertificateAuthority: {
    methodKind: "unary";
    input: typeof UndeleteCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Delete a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateAuthority
   */
  deleteCertificateAuthority: {
    methodKind: "unary";
    input: typeof DeleteCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Update a
   * [CertificateAuthority][google.cloud.security.privateca.v1.CertificateAuthority].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateAuthority
   */
  updateCertificateAuthority: {
    methodKind: "unary";
    input: typeof UpdateCertificateAuthorityRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Create a [CaPool][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCaPool
   */
  createCaPool: {
    methodKind: "unary";
    input: typeof CreateCaPoolRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Update a [CaPool][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCaPool
   */
  updateCaPool: {
    methodKind: "unary";
    input: typeof UpdateCaPoolRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Returns a [CaPool][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.GetCaPool
   */
  getCaPool: {
    methodKind: "unary";
    input: typeof GetCaPoolRequestSchema;
    output: typeof CaPoolSchema;
  },
  /**
   * Lists [CaPools][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ListCaPools
   */
  listCaPools: {
    methodKind: "unary";
    input: typeof ListCaPoolsRequestSchema;
    output: typeof ListCaPoolsResponseSchema;
  },
  /**
   * Delete a [CaPool][google.cloud.security.privateca.v1.CaPool].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCaPool
   */
  deleteCaPool: {
    methodKind: "unary";
    input: typeof DeleteCaPoolRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * FetchCaCerts returns the current trust anchor for the
   * [CaPool][google.cloud.security.privateca.v1.CaPool]. This will include CA
   * certificate chains for all certificate authorities in the ENABLED,
   * DISABLED, or STAGED states.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.FetchCaCerts
   */
  fetchCaCerts: {
    methodKind: "unary";
    input: typeof FetchCaCertsRequestSchema;
    output: typeof FetchCaCertsResponseSchema;
  },
  /**
   * Returns a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateRevocationList
   */
  getCertificateRevocationList: {
    methodKind: "unary";
    input: typeof GetCertificateRevocationListRequestSchema;
    output: typeof CertificateRevocationListSchema;
  },
  /**
   * Lists
   * [CertificateRevocationLists][google.cloud.security.privateca.v1.CertificateRevocationList].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateRevocationLists
   */
  listCertificateRevocationLists: {
    methodKind: "unary";
    input: typeof ListCertificateRevocationListsRequestSchema;
    output: typeof ListCertificateRevocationListsResponseSchema;
  },
  /**
   * Update a
   * [CertificateRevocationList][google.cloud.security.privateca.v1.CertificateRevocationList].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateRevocationList
   */
  updateCertificateRevocationList: {
    methodKind: "unary";
    input: typeof UpdateCertificateRevocationListRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Create a new
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate]
   * in a given Project and Location.
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.CreateCertificateTemplate
   */
  createCertificateTemplate: {
    methodKind: "unary";
    input: typeof CreateCertificateTemplateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * DeleteCertificateTemplate deletes a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.DeleteCertificateTemplate
   */
  deleteCertificateTemplate: {
    methodKind: "unary";
    input: typeof DeleteCertificateTemplateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Returns a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.GetCertificateTemplate
   */
  getCertificateTemplate: {
    methodKind: "unary";
    input: typeof GetCertificateTemplateRequestSchema;
    output: typeof CertificateTemplateSchema;
  },
  /**
   * Lists
   * [CertificateTemplates][google.cloud.security.privateca.v1.CertificateTemplate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.ListCertificateTemplates
   */
  listCertificateTemplates: {
    methodKind: "unary";
    input: typeof ListCertificateTemplatesRequestSchema;
    output: typeof ListCertificateTemplatesResponseSchema;
  },
  /**
   * Update a
   * [CertificateTemplate][google.cloud.security.privateca.v1.CertificateTemplate].
   *
   * @generated from rpc google.cloud.security.privateca.v1.CertificateAuthorityService.UpdateCertificateTemplate
   */
  updateCertificateTemplate: {
    methodKind: "unary";
    input: typeof UpdateCertificateTemplateRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_security_privateca_v1_service, 0);

