// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/certificatemanager/v1/certificate_manager.proto (package google.cloud.certificatemanager.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { CertificateIssuanceConfigSchema, CreateCertificateIssuanceConfigRequestSchema, DeleteCertificateIssuanceConfigRequestSchema, GetCertificateIssuanceConfigRequestSchema, ListCertificateIssuanceConfigsRequestSchema, ListCertificateIssuanceConfigsResponseSchema } from "./certificate_issuance_config_pb";
import { file_google_cloud_certificatemanager_v1_certificate_issuance_config } from "./certificate_issuance_config_pb";
import type { CreateTrustConfigRequestSchema, DeleteTrustConfigRequestSchema, GetTrustConfigRequestSchema, ListTrustConfigsRequestSchema, ListTrustConfigsResponseSchema, TrustConfigSchema, UpdateTrustConfigRequestSchema } from "./trust_config_pb";
import { file_google_cloud_certificatemanager_v1_trust_config } from "./trust_config_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/certificatemanager/v1/certificate_manager.proto.
 */
export const file_google_cloud_certificatemanager_v1_certificate_manager: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_certificatemanager_v1_certificate_issuance_config, file_google_cloud_certificatemanager_v1_trust_config, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Request for the `ListCertificates` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificatesRequest
 */
export type ListCertificatesRequest = Message<"google.cloud.certificatemanager.v1.ListCertificatesRequest"> & {
  /**
   * Required. The project and location from which the certificate should be
   * listed, specified in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum number of certificates to return per call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value returned by the last `ListCertificatesResponse`. Indicates that
   * this is a continuation of a prior `ListCertificates` call, and that the
   * system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter expression to restrict the Certificates returned.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * A list of Certificate field names used to specify the order of the returned
   * results. The default sorting order is ascending. To specify descending
   * order for a field, add a suffix `" desc"`.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificatesRequest.
 * Use `create(ListCertificatesRequestSchema)` to create a new message.
 */
export const ListCertificatesRequestSchema: GenMessage<ListCertificatesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 0);

/**
 * Response for the `ListCertificates` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificatesResponse
 */
export type ListCertificatesResponse = Message<"google.cloud.certificatemanager.v1.ListCertificatesResponse"> & {
  /**
   * A list of certificates for the parent resource.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.Certificate certificates = 1;
   */
  certificates: Certificate[];

  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * A list of locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificatesResponse.
 * Use `create(ListCertificatesResponseSchema)` to create a new message.
 */
export const ListCertificatesResponseSchema: GenMessage<ListCertificatesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 1);

/**
 * Request for the `GetCertificate` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.GetCertificateRequest
 */
export type GetCertificateRequest = Message<"google.cloud.certificatemanager.v1.GetCertificateRequest"> & {
  /**
   * Required. A name of the certificate to describe. Must be in the format
   * `projects/*\/locations/*\/certificates/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.GetCertificateRequest.
 * Use `create(GetCertificateRequestSchema)` to create a new message.
 */
export const GetCertificateRequestSchema: GenMessage<GetCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 2);

/**
 * Request for the `CreateCertificate` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.CreateCertificateRequest
 */
export type CreateCertificateRequest = Message<"google.cloud.certificatemanager.v1.CreateCertificateRequest"> & {
  /**
   * Required. The parent resource of the certificate. Must be in the format
   * `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A user-provided name of the certificate.
   *
   * @generated from field: string certificate_id = 2;
   */
  certificateId: string;

  /**
   * Required. A definition of the certificate to create.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate certificate = 3;
   */
  certificate?: Certificate;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CreateCertificateRequest.
 * Use `create(CreateCertificateRequestSchema)` to create a new message.
 */
export const CreateCertificateRequestSchema: GenMessage<CreateCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 3);

/**
 * Request for the `UpdateCertificate` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.UpdateCertificateRequest
 */
export type UpdateCertificateRequest = Message<"google.cloud.certificatemanager.v1.UpdateCertificateRequest"> & {
  /**
   * Required. A definition of the certificate to update.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate certificate = 1;
   */
  certificate?: Certificate;

  /**
   * Required. The update mask applies to the resource. For the `FieldMask`
   * definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.UpdateCertificateRequest.
 * Use `create(UpdateCertificateRequestSchema)` to create a new message.
 */
export const UpdateCertificateRequestSchema: GenMessage<UpdateCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 4);

/**
 * Request for the `DeleteCertificate` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.DeleteCertificateRequest
 */
export type DeleteCertificateRequest = Message<"google.cloud.certificatemanager.v1.DeleteCertificateRequest"> & {
  /**
   * Required. A name of the certificate to delete. Must be in the format
   * `projects/*\/locations/*\/certificates/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DeleteCertificateRequest.
 * Use `create(DeleteCertificateRequestSchema)` to create a new message.
 */
export const DeleteCertificateRequestSchema: GenMessage<DeleteCertificateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 5);

/**
 * Request for the `ListCertificateMaps` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificateMapsRequest
 */
export type ListCertificateMapsRequest = Message<"google.cloud.certificatemanager.v1.ListCertificateMapsRequest"> & {
  /**
   * Required. The project and location from which the certificate maps should
   * be listed, specified in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum number of certificate maps to return per call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value returned by the last `ListCertificateMapsResponse`. Indicates
   * that this is a continuation of a prior `ListCertificateMaps` call, and that
   * the system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter expression to restrict the Certificates Maps returned.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * A list of Certificate Map field names used to specify the order of the
   * returned results. The default sorting order is ascending. To specify
   * descending order for a field, add a suffix `" desc"`.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificateMapsRequest.
 * Use `create(ListCertificateMapsRequestSchema)` to create a new message.
 */
export const ListCertificateMapsRequestSchema: GenMessage<ListCertificateMapsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 6);

/**
 * Response for the `ListCertificateMaps` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificateMapsResponse
 */
export type ListCertificateMapsResponse = Message<"google.cloud.certificatemanager.v1.ListCertificateMapsResponse"> & {
  /**
   * A list of certificate maps for the parent resource.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.CertificateMap certificate_maps = 1;
   */
  certificateMaps: CertificateMap[];

  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificateMapsResponse.
 * Use `create(ListCertificateMapsResponseSchema)` to create a new message.
 */
export const ListCertificateMapsResponseSchema: GenMessage<ListCertificateMapsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 7);

/**
 * Request for the `GetCertificateMap` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.GetCertificateMapRequest
 */
export type GetCertificateMapRequest = Message<"google.cloud.certificatemanager.v1.GetCertificateMapRequest"> & {
  /**
   * Required. A name of the certificate map to describe. Must be in the format
   * `projects/*\/locations/*\/certificateMaps/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.GetCertificateMapRequest.
 * Use `create(GetCertificateMapRequestSchema)` to create a new message.
 */
export const GetCertificateMapRequestSchema: GenMessage<GetCertificateMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 8);

/**
 * Request for the `CreateCertificateMap` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.CreateCertificateMapRequest
 */
export type CreateCertificateMapRequest = Message<"google.cloud.certificatemanager.v1.CreateCertificateMapRequest"> & {
  /**
   * Required. The parent resource of the certificate map. Must be in the format
   * `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A user-provided name of the certificate map.
   *
   * @generated from field: string certificate_map_id = 2;
   */
  certificateMapId: string;

  /**
   * Required. A definition of the certificate map to create.
   *
   * @generated from field: google.cloud.certificatemanager.v1.CertificateMap certificate_map = 3;
   */
  certificateMap?: CertificateMap;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CreateCertificateMapRequest.
 * Use `create(CreateCertificateMapRequestSchema)` to create a new message.
 */
export const CreateCertificateMapRequestSchema: GenMessage<CreateCertificateMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 9);

/**
 * Request for the `UpdateCertificateMap` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.UpdateCertificateMapRequest
 */
export type UpdateCertificateMapRequest = Message<"google.cloud.certificatemanager.v1.UpdateCertificateMapRequest"> & {
  /**
   * Required. A definition of the certificate map to update.
   *
   * @generated from field: google.cloud.certificatemanager.v1.CertificateMap certificate_map = 1;
   */
  certificateMap?: CertificateMap;

  /**
   * Required. The update mask applies to the resource. For the `FieldMask`
   * definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.UpdateCertificateMapRequest.
 * Use `create(UpdateCertificateMapRequestSchema)` to create a new message.
 */
export const UpdateCertificateMapRequestSchema: GenMessage<UpdateCertificateMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 10);

/**
 * Request for the `DeleteCertificateMap` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.DeleteCertificateMapRequest
 */
export type DeleteCertificateMapRequest = Message<"google.cloud.certificatemanager.v1.DeleteCertificateMapRequest"> & {
  /**
   * Required. A name of the certificate map to delete. Must be in the format
   * `projects/*\/locations/*\/certificateMaps/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DeleteCertificateMapRequest.
 * Use `create(DeleteCertificateMapRequestSchema)` to create a new message.
 */
export const DeleteCertificateMapRequestSchema: GenMessage<DeleteCertificateMapRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 11);

/**
 * Request for the `ListCertificateMapEntries` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificateMapEntriesRequest
 */
export type ListCertificateMapEntriesRequest = Message<"google.cloud.certificatemanager.v1.ListCertificateMapEntriesRequest"> & {
  /**
   * Required. The project, location and certificate map from which the
   * certificate map entries should be listed, specified in the format
   * `projects/*\/locations/*\/certificateMaps/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum number of certificate map entries to return. The service may return
   * fewer than this value.
   * If unspecified, at most 50 certificate map entries will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value returned by the last `ListCertificateMapEntriesResponse`.
   * Indicates that this is a continuation of a prior
   * `ListCertificateMapEntries` call, and that the system should return the
   * next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter expression to restrict the returned Certificate Map Entries.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * A list of Certificate Map Entry field names used to specify
   * the order of the returned results. The default sorting order is ascending.
   * To specify descending order for a field, add a suffix `" desc"`.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificateMapEntriesRequest.
 * Use `create(ListCertificateMapEntriesRequestSchema)` to create a new message.
 */
export const ListCertificateMapEntriesRequestSchema: GenMessage<ListCertificateMapEntriesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 12);

/**
 * Response for the `ListCertificateMapEntries` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListCertificateMapEntriesResponse
 */
export type ListCertificateMapEntriesResponse = Message<"google.cloud.certificatemanager.v1.ListCertificateMapEntriesResponse"> & {
  /**
   * A list of certificate map entries for the parent resource.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.CertificateMapEntry certificate_map_entries = 1;
   */
  certificateMapEntries: CertificateMapEntry[];

  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListCertificateMapEntriesResponse.
 * Use `create(ListCertificateMapEntriesResponseSchema)` to create a new message.
 */
export const ListCertificateMapEntriesResponseSchema: GenMessage<ListCertificateMapEntriesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 13);

/**
 * Request for the `GetCertificateMapEntry` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.GetCertificateMapEntryRequest
 */
export type GetCertificateMapEntryRequest = Message<"google.cloud.certificatemanager.v1.GetCertificateMapEntryRequest"> & {
  /**
   * Required. A name of the certificate map entry to describe. Must be in the
   * format `projects/*\/locations/*\/certificateMaps/*\/certificateMapEntries/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.GetCertificateMapEntryRequest.
 * Use `create(GetCertificateMapEntryRequestSchema)` to create a new message.
 */
export const GetCertificateMapEntryRequestSchema: GenMessage<GetCertificateMapEntryRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 14);

/**
 * Request for the `CreateCertificateMapEntry` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.CreateCertificateMapEntryRequest
 */
export type CreateCertificateMapEntryRequest = Message<"google.cloud.certificatemanager.v1.CreateCertificateMapEntryRequest"> & {
  /**
   * Required. The parent resource of the certificate map entry. Must be in the
   * format `projects/*\/locations/*\/certificateMaps/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A user-provided name of the certificate map entry.
   *
   * @generated from field: string certificate_map_entry_id = 2;
   */
  certificateMapEntryId: string;

  /**
   * Required. A definition of the certificate map entry to create.
   *
   * @generated from field: google.cloud.certificatemanager.v1.CertificateMapEntry certificate_map_entry = 3;
   */
  certificateMapEntry?: CertificateMapEntry;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CreateCertificateMapEntryRequest.
 * Use `create(CreateCertificateMapEntryRequestSchema)` to create a new message.
 */
export const CreateCertificateMapEntryRequestSchema: GenMessage<CreateCertificateMapEntryRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 15);

/**
 * Request for the `UpdateCertificateMapEntry` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.UpdateCertificateMapEntryRequest
 */
export type UpdateCertificateMapEntryRequest = Message<"google.cloud.certificatemanager.v1.UpdateCertificateMapEntryRequest"> & {
  /**
   * Required. A definition of the certificate map entry to create map entry.
   *
   * @generated from field: google.cloud.certificatemanager.v1.CertificateMapEntry certificate_map_entry = 1;
   */
  certificateMapEntry?: CertificateMapEntry;

  /**
   * Required. The update mask applies to the resource. For the `FieldMask`
   * definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.UpdateCertificateMapEntryRequest.
 * Use `create(UpdateCertificateMapEntryRequestSchema)` to create a new message.
 */
export const UpdateCertificateMapEntryRequestSchema: GenMessage<UpdateCertificateMapEntryRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 16);

/**
 * Request for the `DeleteCertificateMapEntry` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.DeleteCertificateMapEntryRequest
 */
export type DeleteCertificateMapEntryRequest = Message<"google.cloud.certificatemanager.v1.DeleteCertificateMapEntryRequest"> & {
  /**
   * Required. A name of the certificate map entry to delete. Must be in the
   * format `projects/*\/locations/*\/certificateMaps/*\/certificateMapEntries/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DeleteCertificateMapEntryRequest.
 * Use `create(DeleteCertificateMapEntryRequestSchema)` to create a new message.
 */
export const DeleteCertificateMapEntryRequestSchema: GenMessage<DeleteCertificateMapEntryRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 17);

/**
 * Request for the `ListDnsAuthorizations` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListDnsAuthorizationsRequest
 */
export type ListDnsAuthorizationsRequest = Message<"google.cloud.certificatemanager.v1.ListDnsAuthorizationsRequest"> & {
  /**
   * Required. The project and location from which the dns authorizations should
   * be listed, specified in the format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum number of dns authorizations to return per call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
   * that this is a continuation of a prior `ListDnsAuthorizations` call, and
   * that the system should return the next page of data.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter expression to restrict the Dns Authorizations returned.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * A list of Dns Authorization field names used to specify the order of the
   * returned results. The default sorting order is ascending. To specify
   * descending order for a field, add a suffix `" desc"`.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListDnsAuthorizationsRequest.
 * Use `create(ListDnsAuthorizationsRequestSchema)` to create a new message.
 */
export const ListDnsAuthorizationsRequestSchema: GenMessage<ListDnsAuthorizationsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 18);

/**
 * Response for the `ListDnsAuthorizations` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.ListDnsAuthorizationsResponse
 */
export type ListDnsAuthorizationsResponse = Message<"google.cloud.certificatemanager.v1.ListDnsAuthorizationsResponse"> & {
  /**
   * A list of dns authorizations for the parent resource.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.DnsAuthorization dns_authorizations = 1;
   */
  dnsAuthorizations: DnsAuthorization[];

  /**
   * If there might be more results than those appearing in this response, then
   * `next_page_token` is included. To get the next set of results, call this
   * method again using the value of `next_page_token` as `page_token`.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.ListDnsAuthorizationsResponse.
 * Use `create(ListDnsAuthorizationsResponseSchema)` to create a new message.
 */
export const ListDnsAuthorizationsResponseSchema: GenMessage<ListDnsAuthorizationsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 19);

/**
 * Request for the `GetDnsAuthorization` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.GetDnsAuthorizationRequest
 */
export type GetDnsAuthorizationRequest = Message<"google.cloud.certificatemanager.v1.GetDnsAuthorizationRequest"> & {
  /**
   * Required. A name of the dns authorization to describe. Must be in the
   * format `projects/*\/locations/*\/dnsAuthorizations/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.GetDnsAuthorizationRequest.
 * Use `create(GetDnsAuthorizationRequestSchema)` to create a new message.
 */
export const GetDnsAuthorizationRequestSchema: GenMessage<GetDnsAuthorizationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 20);

/**
 * Request for the `CreateDnsAuthorization` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.CreateDnsAuthorizationRequest
 */
export type CreateDnsAuthorizationRequest = Message<"google.cloud.certificatemanager.v1.CreateDnsAuthorizationRequest"> & {
  /**
   * Required. The parent resource of the dns authorization. Must be in the
   * format `projects/*\/locations/*`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A user-provided name of the dns authorization.
   *
   * @generated from field: string dns_authorization_id = 2;
   */
  dnsAuthorizationId: string;

  /**
   * Required. A definition of the dns authorization to create.
   *
   * @generated from field: google.cloud.certificatemanager.v1.DnsAuthorization dns_authorization = 3;
   */
  dnsAuthorization?: DnsAuthorization;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CreateDnsAuthorizationRequest.
 * Use `create(CreateDnsAuthorizationRequestSchema)` to create a new message.
 */
export const CreateDnsAuthorizationRequestSchema: GenMessage<CreateDnsAuthorizationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 21);

/**
 * Request for the `UpdateDnsAuthorization` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.UpdateDnsAuthorizationRequest
 */
export type UpdateDnsAuthorizationRequest = Message<"google.cloud.certificatemanager.v1.UpdateDnsAuthorizationRequest"> & {
  /**
   * Required. A definition of the dns authorization to update.
   *
   * @generated from field: google.cloud.certificatemanager.v1.DnsAuthorization dns_authorization = 1;
   */
  dnsAuthorization?: DnsAuthorization;

  /**
   * Required. The update mask applies to the resource. For the `FieldMask`
   * definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.UpdateDnsAuthorizationRequest.
 * Use `create(UpdateDnsAuthorizationRequestSchema)` to create a new message.
 */
export const UpdateDnsAuthorizationRequestSchema: GenMessage<UpdateDnsAuthorizationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 22);

/**
 * Request for the `DeleteDnsAuthorization` method.
 *
 * @generated from message google.cloud.certificatemanager.v1.DeleteDnsAuthorizationRequest
 */
export type DeleteDnsAuthorizationRequest = Message<"google.cloud.certificatemanager.v1.DeleteDnsAuthorizationRequest"> & {
  /**
   * Required. A name of the dns authorization to delete. Must be in the format
   * `projects/*\/locations/*\/dnsAuthorizations/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DeleteDnsAuthorizationRequest.
 * Use `create(DeleteDnsAuthorizationRequestSchema)` to create a new message.
 */
export const DeleteDnsAuthorizationRequestSchema: GenMessage<DeleteDnsAuthorizationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 23);

/**
 * Represents the metadata of the long-running operation. Output only.
 *
 * @generated from message google.cloud.certificatemanager.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.certificatemanager.v1.OperationMetadata"> & {
  /**
   * The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 24);

/**
 * Defines TLS certificate.
 *
 * @generated from message google.cloud.certificatemanager.v1.Certificate
 */
export type Certificate = Message<"google.cloud.certificatemanager.v1.Certificate"> & {
  /**
   * A user-defined name of the certificate. Certificate names must be unique
   * globally and match pattern `projects/*\/locations/*\/certificates/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * One or more paragraphs of text description of a certificate.
   *
   * @generated from field: string description = 8;
   */
  description: string;

  /**
   * Output only. The creation timestamp of a Certificate.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of a Certificate.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Set of labels associated with a Certificate.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * @generated from oneof google.cloud.certificatemanager.v1.Certificate.type
   */
  type: {
    /**
     * If set, defines data of a self-managed certificate.
     *
     * @generated from field: google.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate self_managed = 5;
     */
    value: Certificate_SelfManagedCertificate;
    case: "selfManaged";
  } | {
    /**
     * If set, contains configuration and state of a managed certificate.
     *
     * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate managed = 11;
     */
    value: Certificate_ManagedCertificate;
    case: "managed";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. The list of Subject Alternative Names of dnsName type defined
   * in the certificate (see RFC 5280 4.2.1.6). Managed certificates that
   * haven't been provisioned yet have this field populated with a value of the
   * managed.domains field.
   *
   * @generated from field: repeated string san_dnsnames = 6;
   */
  sanDnsnames: string[];

  /**
   * Output only. The PEM-encoded certificate chain.
   *
   * @generated from field: string pem_certificate = 9;
   */
  pemCertificate: string;

  /**
   * Output only. The expiry timestamp of a Certificate.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 7;
   */
  expireTime?: Timestamp;

  /**
   * Immutable. The scope of the certificate.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.Scope scope = 12;
   */
  scope: Certificate_Scope;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.Certificate.
 * Use `create(CertificateSchema)` to create a new message.
 */
export const CertificateSchema: GenMessage<Certificate> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25);

/**
 * Certificate data for a SelfManaged Certificate.
 * SelfManaged Certificates are uploaded by the user. Updating such
 * certificates before they expire remains the user's responsibility.
 *
 * @generated from message google.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate
 */
export type Certificate_SelfManagedCertificate = Message<"google.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate"> & {
  /**
   * Input only. The PEM-encoded certificate chain.
   * Leaf certificate comes first, followed by intermediate ones if any.
   *
   * @generated from field: string pem_certificate = 1;
   */
  pemCertificate: string;

  /**
   * Input only. The PEM-encoded private key of the leaf certificate.
   *
   * @generated from field: string pem_private_key = 2;
   */
  pemPrivateKey: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.Certificate.SelfManagedCertificate.
 * Use `create(Certificate_SelfManagedCertificateSchema)` to create a new message.
 */
export const Certificate_SelfManagedCertificateSchema: GenMessage<Certificate_SelfManagedCertificate> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 0);

/**
 * Configuration and state of a Managed Certificate.
 * Certificate Manager provisions and renews Managed Certificates
 * automatically, for as long as it's authorized to do so.
 *
 * @generated from message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate
 */
export type Certificate_ManagedCertificate = Message<"google.cloud.certificatemanager.v1.Certificate.ManagedCertificate"> & {
  /**
   * Immutable. The domains for which a managed SSL certificate will be
   * generated. Wildcard domains are only supported with DNS challenge
   * resolution.
   *
   * @generated from field: repeated string domains = 1;
   */
  domains: string[];

  /**
   * Immutable. Authorizations that will be used for performing domain
   * authorization.
   *
   * @generated from field: repeated string dns_authorizations = 2;
   */
  dnsAuthorizations: string[];

  /**
   * Immutable. The resource name for a
   * [CertificateIssuanceConfig][google.cloud.certificatemanager.v1.CertificateIssuanceConfig]
   * used to configure private PKI certificates in the format
   * `projects/*\/locations/*\/certificateIssuanceConfigs/*`.
   * If this field is not set, the certificates will instead be publicly
   * signed as documented at
   * https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
   *
   * @generated from field: string issuance_config = 6;
   */
  issuanceConfig: string;

  /**
   * Output only. State of the managed certificate resource.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State state = 4;
   */
  state: Certificate_ManagedCertificate_State;

  /**
   * Output only. Information about issues with provisioning a Managed
   * Certificate.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue provisioning_issue = 3;
   */
  provisioningIssue?: Certificate_ManagedCertificate_ProvisioningIssue;

  /**
   * Output only. Detailed state of the latest authorization attempt for each
   * domain specified for managed certificate resource.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo authorization_attempt_info = 5;
   */
  authorizationAttemptInfo: Certificate_ManagedCertificate_AuthorizationAttemptInfo[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.
 * Use `create(Certificate_ManagedCertificateSchema)` to create a new message.
 */
export const Certificate_ManagedCertificateSchema: GenMessage<Certificate_ManagedCertificate> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1);

/**
 * Information about issues with provisioning a Managed Certificate.
 *
 * @generated from message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue
 */
export type Certificate_ManagedCertificate_ProvisioningIssue = Message<"google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue"> & {
  /**
   * Output only. Reason for provisioning failures.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason reason = 1;
   */
  reason: Certificate_ManagedCertificate_ProvisioningIssue_Reason;

  /**
   * Output only. Human readable explanation about the issue. Provided to
   * help address the configuration issues. Not guaranteed to be stable. For
   * programmatic access use Reason enum.
   *
   * @generated from field: string details = 2;
   */
  details: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.
 * Use `create(Certificate_ManagedCertificate_ProvisioningIssueSchema)` to create a new message.
 */
export const Certificate_ManagedCertificate_ProvisioningIssueSchema: GenMessage<Certificate_ManagedCertificate_ProvisioningIssue> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 0);

/**
 * Reason for provisioning failures.
 *
 * @generated from enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason
 */
export enum Certificate_ManagedCertificate_ProvisioningIssue_Reason {
  /**
   * Reason is unspecified.
   *
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * Certificate provisioning failed due to an issue with one or more of
   * the domains on the certificate.
   * For details of which domains failed, consult the
   * `authorization_attempt_info` field.
   *
   * @generated from enum value: AUTHORIZATION_ISSUE = 1;
   */
  AUTHORIZATION_ISSUE = 1,

  /**
   * Exceeded Certificate Authority quotas or internal rate limits of the
   * system. Provisioning may take longer to complete.
   *
   * @generated from enum value: RATE_LIMITED = 2;
   */
  RATE_LIMITED = 2,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.ProvisioningIssue.Reason.
 */
export const Certificate_ManagedCertificate_ProvisioningIssue_ReasonSchema: GenEnum<Certificate_ManagedCertificate_ProvisioningIssue_Reason> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 0, 0);

/**
 * State of the latest attempt to authorize a domain for certificate
 * issuance.
 *
 * @generated from message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo
 */
export type Certificate_ManagedCertificate_AuthorizationAttemptInfo = Message<"google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo"> & {
  /**
   * Domain name of the authorization attempt.
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * Output only. State of the domain for managed certificate issuance.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State state = 2;
   */
  state: Certificate_ManagedCertificate_AuthorizationAttemptInfo_State;

  /**
   * Output only. Reason for failure of the authorization attempt for the
   * domain.
   *
   * @generated from field: google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason failure_reason = 3;
   */
  failureReason: Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason;

  /**
   * Output only. Human readable explanation for reaching the state.
   * Provided to help address the configuration issues. Not guaranteed to be
   * stable. For programmatic access use FailureReason enum.
   *
   * @generated from field: string details = 4;
   */
  details: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.
 * Use `create(Certificate_ManagedCertificate_AuthorizationAttemptInfoSchema)` to create a new message.
 */
export const Certificate_ManagedCertificate_AuthorizationAttemptInfoSchema: GenMessage<Certificate_ManagedCertificate_AuthorizationAttemptInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 1);

/**
 * State of the domain for managed certificate issuance.
 *
 * @generated from enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State
 */
export enum Certificate_ManagedCertificate_AuthorizationAttemptInfo_State {
  /**
   * State is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Certificate provisioning for this domain is under way. Google Cloud
   * will attempt to authorize the domain.
   *
   * @generated from enum value: AUTHORIZING = 1;
   */
  AUTHORIZING = 1,

  /**
   * A managed certificate can be provisioned, no issues for this domain.
   *
   * @generated from enum value: AUTHORIZED = 6;
   */
  AUTHORIZED = 6,

  /**
   * Attempt to authorize the domain failed. This prevents the Managed
   * Certificate from being issued.
   * See `failure_reason` and `details` fields for more information.
   *
   * @generated from enum value: FAILED = 7;
   */
  FAILED = 7,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.State.
 */
export const Certificate_ManagedCertificate_AuthorizationAttemptInfo_StateSchema: GenEnum<Certificate_ManagedCertificate_AuthorizationAttemptInfo_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 1, 0);

/**
 * Reason for failure of the authorization attempt for the domain.
 *
 * @generated from enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason
 */
export enum Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason {
  /**
   * FailureReason is unspecified.
   *
   * @generated from enum value: FAILURE_REASON_UNSPECIFIED = 0;
   */
  FAILURE_REASON_UNSPECIFIED = 0,

  /**
   * There was a problem with the user's DNS or load balancer
   * configuration for this domain.
   *
   * @generated from enum value: CONFIG = 1;
   */
  CONFIG = 1,

  /**
   * Certificate issuance forbidden by an explicit CAA record for the
   * domain or a failure to check CAA records for the domain.
   *
   * @generated from enum value: CAA = 2;
   */
  CAA = 2,

  /**
   * Reached a CA or internal rate-limit for the domain,
   * e.g. for certificates per top-level private domain.
   *
   * @generated from enum value: RATE_LIMITED = 3;
   */
  RATE_LIMITED = 3,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.AuthorizationAttemptInfo.FailureReason.
 */
export const Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReasonSchema: GenEnum<Certificate_ManagedCertificate_AuthorizationAttemptInfo_FailureReason> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 1, 1);

/**
 * State of the managed certificate resource.
 *
 * @generated from enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State
 */
export enum Certificate_ManagedCertificate_State {
  /**
   * State is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Certificate Manager attempts to provision or renew the certificate.
   * If the process takes longer than expected, consult the
   * `provisioning_issue` field.
   *
   * @generated from enum value: PROVISIONING = 1;
   */
  PROVISIONING = 1,

  /**
   * Multiple certificate provisioning attempts failed and Certificate
   * Manager gave up. To try again, delete and create a new managed
   * Certificate resource.
   * For details see the `provisioning_issue` field.
   *
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,

  /**
   * The certificate management is working, and a certificate has been
   * provisioned.
   *
   * @generated from enum value: ACTIVE = 3;
   */
  ACTIVE = 3,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.Certificate.ManagedCertificate.State.
 */
export const Certificate_ManagedCertificate_StateSchema: GenEnum<Certificate_ManagedCertificate_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 1, 0);

/**
 * Certificate scope.
 *
 * @generated from enum google.cloud.certificatemanager.v1.Certificate.Scope
 */
export enum Certificate_Scope {
  /**
   * Certificates with default scope are served from core Google data centers.
   * If unsure, choose this option.
   *
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * Certificates with scope EDGE_CACHE are special-purposed certificates,
   * served from Edge Points of Presence.
   * See https://cloud.google.com/vpc/docs/edge-locations.
   *
   * @generated from enum value: EDGE_CACHE = 1;
   */
  EDGE_CACHE = 1,

  /**
   * Certificates with ALL_REGIONS scope are served from all Google Cloud
   * regions. See https://cloud.google.com/compute/docs/regions-zones.
   *
   * @generated from enum value: ALL_REGIONS = 2;
   */
  ALL_REGIONS = 2,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.Certificate.Scope.
 */
export const Certificate_ScopeSchema: GenEnum<Certificate_Scope> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 25, 0);

/**
 * Defines a collection of certificate configurations.
 *
 * @generated from message google.cloud.certificatemanager.v1.CertificateMap
 */
export type CertificateMap = Message<"google.cloud.certificatemanager.v1.CertificateMap"> & {
  /**
   * A user-defined name of the Certificate Map. Certificate Map names must be
   * unique globally and match pattern
   * `projects/*\/locations/*\/certificateMaps/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * One or more paragraphs of text description of a certificate map.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Output only. The creation timestamp of a Certificate Map.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The update timestamp of a Certificate Map.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Set of labels associated with a Certificate Map.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * Output only. A list of GCLB targets that use this Certificate Map.
   * A Target Proxy is only present on this list if it's attached to a
   * Forwarding Rule.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.CertificateMap.GclbTarget gclb_targets = 4;
   */
  gclbTargets: CertificateMap_GclbTarget[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CertificateMap.
 * Use `create(CertificateMapSchema)` to create a new message.
 */
export const CertificateMapSchema: GenMessage<CertificateMap> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 26);

/**
 * Describes a Target Proxy that uses this Certificate Map.
 *
 * @generated from message google.cloud.certificatemanager.v1.CertificateMap.GclbTarget
 */
export type CertificateMap_GclbTarget = Message<"google.cloud.certificatemanager.v1.CertificateMap.GclbTarget"> & {
  /**
   * A Target Proxy to which this map is attached to.
   *
   * @generated from oneof google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.target_proxy
   */
  targetProxy: {
    /**
     * Output only. This field returns the resource name in the following
     * format:
     * `//compute.googleapis.com/projects/*\/global/targetHttpsProxies/*`.
     *
     * @generated from field: string target_https_proxy = 1;
     */
    value: string;
    case: "targetHttpsProxy";
  } | {
    /**
     * Output only. This field returns the resource name in the following
     * format:
     * `//compute.googleapis.com/projects/*\/global/targetSslProxies/*`.
     *
     * @generated from field: string target_ssl_proxy = 3;
     */
    value: string;
    case: "targetSslProxy";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. IP configurations for this Target Proxy where the
   * Certificate Map is serving.
   *
   * @generated from field: repeated google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig ip_configs = 2;
   */
  ipConfigs: CertificateMap_GclbTarget_IpConfig[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.
 * Use `create(CertificateMap_GclbTargetSchema)` to create a new message.
 */
export const CertificateMap_GclbTargetSchema: GenMessage<CertificateMap_GclbTarget> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 26, 0);

/**
 * Defines IP configuration where this Certificate Map is serving.
 *
 * @generated from message google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig
 */
export type CertificateMap_GclbTarget_IpConfig = Message<"google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig"> & {
  /**
   * Output only. An external IP address.
   *
   * @generated from field: string ip_address = 1;
   */
  ipAddress: string;

  /**
   * Output only. Ports.
   *
   * @generated from field: repeated uint32 ports = 3;
   */
  ports: number[];
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CertificateMap.GclbTarget.IpConfig.
 * Use `create(CertificateMap_GclbTarget_IpConfigSchema)` to create a new message.
 */
export const CertificateMap_GclbTarget_IpConfigSchema: GenMessage<CertificateMap_GclbTarget_IpConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 26, 0, 0);

/**
 * Defines a certificate map entry.
 *
 * @generated from message google.cloud.certificatemanager.v1.CertificateMapEntry
 */
export type CertificateMapEntry = Message<"google.cloud.certificatemanager.v1.CertificateMapEntry"> & {
  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry
   * names must be unique globally and match pattern
   * `projects/*\/locations/*\/certificateMaps/*\/certificateMapEntries/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * One or more paragraphs of text description of a certificate map entry.
   *
   * @generated from field: string description = 9;
   */
  description: string;

  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Set of labels associated with a Certificate Map Entry.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * @generated from oneof google.cloud.certificatemanager.v1.CertificateMapEntry.match
   */
  match: {
    /**
     * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression
     * (`*.example.com`) for a set of hostnames with common suffix. Used as
     * Server Name Indication (SNI) for selecting a proper certificate.
     *
     * @generated from field: string hostname = 5;
     */
    value: string;
    case: "hostname";
  } | {
    /**
     * A predefined matcher for particular cases, other than SNI selection.
     *
     * @generated from field: google.cloud.certificatemanager.v1.CertificateMapEntry.Matcher matcher = 10;
     */
    value: CertificateMapEntry_Matcher;
    case: "matcher";
  } | { case: undefined; value?: undefined };

  /**
   * A set of Certificates defines for the given `hostname`. There can be
   * defined up to four certificates in each Certificate Map Entry. Each
   * certificate must match pattern `projects/*\/locations/*\/certificates/*`.
   *
   * @generated from field: repeated string certificates = 7;
   */
  certificates: string[];

  /**
   * Output only. A serving state of this Certificate Map Entry.
   *
   * @generated from field: google.cloud.certificatemanager.v1.ServingState state = 8;
   */
  state: ServingState;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.CertificateMapEntry.
 * Use `create(CertificateMapEntrySchema)` to create a new message.
 */
export const CertificateMapEntrySchema: GenMessage<CertificateMapEntry> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 27);

/**
 * Defines predefined cases other than SNI-hostname match when this
 * configuration should be applied.
 *
 * @generated from enum google.cloud.certificatemanager.v1.CertificateMapEntry.Matcher
 */
export enum CertificateMapEntry_Matcher {
  /**
   * A matcher has't been recognized.
   *
   * @generated from enum value: MATCHER_UNSPECIFIED = 0;
   */
  MATCHER_UNSPECIFIED = 0,

  /**
   * A primary certificate that is served when SNI wasn't specified in the
   * request or SNI couldn't be found in the map.
   *
   * @generated from enum value: PRIMARY = 1;
   */
  PRIMARY = 1,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.CertificateMapEntry.Matcher.
 */
export const CertificateMapEntry_MatcherSchema: GenEnum<CertificateMapEntry_Matcher> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 27, 0);

/**
 * A DnsAuthorization resource describes a way to perform domain authorization
 * for certificate issuance.
 *
 * @generated from message google.cloud.certificatemanager.v1.DnsAuthorization
 */
export type DnsAuthorization = Message<"google.cloud.certificatemanager.v1.DnsAuthorization"> & {
  /**
   * A user-defined name of the dns authorization. DnsAuthorization names must
   * be unique globally and match pattern
   * `projects/*\/locations/*\/dnsAuthorizations/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The creation timestamp of a DnsAuthorization.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of a DnsAuthorization.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Set of labels associated with a DnsAuthorization.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * One or more paragraphs of text description of a DnsAuthorization.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Required. Immutable. A domain that is being authorized. A DnsAuthorization
   * resource covers a single domain and its wildcard, e.g. authorization for
   * `example.com` can be used to issue certificates for `example.com` and
   * `*.example.com`.
   *
   * @generated from field: string domain = 6;
   */
  domain: string;

  /**
   * Output only. DNS Resource Record that needs to be added to DNS
   * configuration.
   *
   * @generated from field: google.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord dns_resource_record = 10;
   */
  dnsResourceRecord?: DnsAuthorization_DnsResourceRecord;

  /**
   * Immutable. Type of DnsAuthorization. If unset during resource creation the
   * following default will be used:
   * - in location global: FIXED_RECORD.
   *
   * @generated from field: google.cloud.certificatemanager.v1.DnsAuthorization.Type type = 11;
   */
  type: DnsAuthorization_Type;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DnsAuthorization.
 * Use `create(DnsAuthorizationSchema)` to create a new message.
 */
export const DnsAuthorizationSchema: GenMessage<DnsAuthorization> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 28);

/**
 * The structure describing the DNS Resource Record that needs to be added
 * to DNS configuration for the authorization to be usable by
 * certificate.
 *
 * @generated from message google.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord
 */
export type DnsAuthorization_DnsResourceRecord = Message<"google.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord"> & {
  /**
   * Output only. Fully qualified name of the DNS Resource Record.
   * e.g. `_acme-challenge.example.com`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Type of the DNS Resource Record.
   * Currently always set to "CNAME".
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Output only. Data of the DNS Resource Record.
   *
   * @generated from field: string data = 3;
   */
  data: string;
};

/**
 * Describes the message google.cloud.certificatemanager.v1.DnsAuthorization.DnsResourceRecord.
 * Use `create(DnsAuthorization_DnsResourceRecordSchema)` to create a new message.
 */
export const DnsAuthorization_DnsResourceRecordSchema: GenMessage<DnsAuthorization_DnsResourceRecord> = /*@__PURE__*/
  messageDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 28, 0);

/**
 * DnsAuthorization type.
 *
 * @generated from enum google.cloud.certificatemanager.v1.DnsAuthorization.Type
 */
export enum DnsAuthorization_Type {
  /**
   * Type is unspecified.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * FIXED_RECORD DNS authorization uses DNS-01 validation method.
   *
   * @generated from enum value: FIXED_RECORD = 1;
   */
  FIXED_RECORD = 1,

  /**
   * PER_PROJECT_RECORD DNS authorization allows for independent management
   * of Google-managed certificates with DNS authorization across multiple
   * projects.
   *
   * @generated from enum value: PER_PROJECT_RECORD = 2;
   */
  PER_PROJECT_RECORD = 2,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.DnsAuthorization.Type.
 */
export const DnsAuthorization_TypeSchema: GenEnum<DnsAuthorization_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 28, 0);

/**
 * Defines set of serving states associated with a resource.
 *
 * @generated from enum google.cloud.certificatemanager.v1.ServingState
 */
export enum ServingState {
  /**
   * The status is undefined.
   *
   * @generated from enum value: SERVING_STATE_UNSPECIFIED = 0;
   */
  SERVING_STATE_UNSPECIFIED = 0,

  /**
   * The configuration is serving.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Update is in progress. Some frontends may serve this configuration.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,
}

/**
 * Describes the enum google.cloud.certificatemanager.v1.ServingState.
 */
export const ServingStateSchema: GenEnum<ServingState> = /*@__PURE__*/
  enumDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 0);

/**
 * API Overview
 *
 * Certificates Manager API allows customers to see and manage all their TLS
 * certificates.
 *
 * Certificates Manager API service provides methods to manage certificates,
 * group them into collections, and create serving configuration that can be
 * easily applied to other Cloud resources e.g. Target Proxies.
 *
 * Data Model
 *
 * The Certificates Manager service exposes the following resources:
 *
 * * `Certificate` that describes a single TLS certificate.
 * * `CertificateMap` that describes a collection of certificates that can be
 * attached to a target resource.
 * * `CertificateMapEntry` that describes a single configuration entry that
 * consists of a SNI and a group of certificates. It's a subresource of
 * CertificateMap.
 *
 * Certificate, CertificateMap and CertificateMapEntry IDs
 * have to fully match the regexp `[a-z0-9-]{1,63}`. In other words,
 * - only lower case letters, digits, and hyphen are allowed
 * - length of the resource ID has to be in [1,63] range.
 *
 * Provides methods to manage Cloud Certificate Manager entities.
 *
 * @generated from service google.cloud.certificatemanager.v1.CertificateManager
 */
export const CertificateManager: GenService<{
  /**
   * Lists Certificates in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListCertificates
   */
  listCertificates: {
    methodKind: "unary";
    input: typeof ListCertificatesRequestSchema;
    output: typeof ListCertificatesResponseSchema;
  },
  /**
   * Gets details of a single Certificate.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetCertificate
   */
  getCertificate: {
    methodKind: "unary";
    input: typeof GetCertificateRequestSchema;
    output: typeof CertificateSchema;
  },
  /**
   * Creates a new Certificate in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateCertificate
   */
  createCertificate: {
    methodKind: "unary";
    input: typeof CreateCertificateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a Certificate.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.UpdateCertificate
   */
  updateCertificate: {
    methodKind: "unary";
    input: typeof UpdateCertificateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single Certificate.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteCertificate
   */
  deleteCertificate: {
    methodKind: "unary";
    input: typeof DeleteCertificateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists CertificateMaps in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListCertificateMaps
   */
  listCertificateMaps: {
    methodKind: "unary";
    input: typeof ListCertificateMapsRequestSchema;
    output: typeof ListCertificateMapsResponseSchema;
  },
  /**
   * Gets details of a single CertificateMap.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetCertificateMap
   */
  getCertificateMap: {
    methodKind: "unary";
    input: typeof GetCertificateMapRequestSchema;
    output: typeof CertificateMapSchema;
  },
  /**
   * Creates a new CertificateMap in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateCertificateMap
   */
  createCertificateMap: {
    methodKind: "unary";
    input: typeof CreateCertificateMapRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a CertificateMap.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.UpdateCertificateMap
   */
  updateCertificateMap: {
    methodKind: "unary";
    input: typeof UpdateCertificateMapRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single CertificateMap. A Certificate Map can't be deleted
   * if it contains Certificate Map Entries. Remove all the entries from
   * the map before calling this method.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteCertificateMap
   */
  deleteCertificateMap: {
    methodKind: "unary";
    input: typeof DeleteCertificateMapRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists CertificateMapEntries in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListCertificateMapEntries
   */
  listCertificateMapEntries: {
    methodKind: "unary";
    input: typeof ListCertificateMapEntriesRequestSchema;
    output: typeof ListCertificateMapEntriesResponseSchema;
  },
  /**
   * Gets details of a single CertificateMapEntry.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetCertificateMapEntry
   */
  getCertificateMapEntry: {
    methodKind: "unary";
    input: typeof GetCertificateMapEntryRequestSchema;
    output: typeof CertificateMapEntrySchema;
  },
  /**
   * Creates a new CertificateMapEntry in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateCertificateMapEntry
   */
  createCertificateMapEntry: {
    methodKind: "unary";
    input: typeof CreateCertificateMapEntryRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a CertificateMapEntry.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.UpdateCertificateMapEntry
   */
  updateCertificateMapEntry: {
    methodKind: "unary";
    input: typeof UpdateCertificateMapEntryRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single CertificateMapEntry.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteCertificateMapEntry
   */
  deleteCertificateMapEntry: {
    methodKind: "unary";
    input: typeof DeleteCertificateMapEntryRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists DnsAuthorizations in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListDnsAuthorizations
   */
  listDnsAuthorizations: {
    methodKind: "unary";
    input: typeof ListDnsAuthorizationsRequestSchema;
    output: typeof ListDnsAuthorizationsResponseSchema;
  },
  /**
   * Gets details of a single DnsAuthorization.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetDnsAuthorization
   */
  getDnsAuthorization: {
    methodKind: "unary";
    input: typeof GetDnsAuthorizationRequestSchema;
    output: typeof DnsAuthorizationSchema;
  },
  /**
   * Creates a new DnsAuthorization in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateDnsAuthorization
   */
  createDnsAuthorization: {
    methodKind: "unary";
    input: typeof CreateDnsAuthorizationRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a DnsAuthorization.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.UpdateDnsAuthorization
   */
  updateDnsAuthorization: {
    methodKind: "unary";
    input: typeof UpdateDnsAuthorizationRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single DnsAuthorization.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteDnsAuthorization
   */
  deleteDnsAuthorization: {
    methodKind: "unary";
    input: typeof DeleteDnsAuthorizationRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists CertificateIssuanceConfigs in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListCertificateIssuanceConfigs
   */
  listCertificateIssuanceConfigs: {
    methodKind: "unary";
    input: typeof ListCertificateIssuanceConfigsRequestSchema;
    output: typeof ListCertificateIssuanceConfigsResponseSchema;
  },
  /**
   * Gets details of a single CertificateIssuanceConfig.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetCertificateIssuanceConfig
   */
  getCertificateIssuanceConfig: {
    methodKind: "unary";
    input: typeof GetCertificateIssuanceConfigRequestSchema;
    output: typeof CertificateIssuanceConfigSchema;
  },
  /**
   * Creates a new CertificateIssuanceConfig in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateCertificateIssuanceConfig
   */
  createCertificateIssuanceConfig: {
    methodKind: "unary";
    input: typeof CreateCertificateIssuanceConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single CertificateIssuanceConfig.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteCertificateIssuanceConfig
   */
  deleteCertificateIssuanceConfig: {
    methodKind: "unary";
    input: typeof DeleteCertificateIssuanceConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists TrustConfigs in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.ListTrustConfigs
   */
  listTrustConfigs: {
    methodKind: "unary";
    input: typeof ListTrustConfigsRequestSchema;
    output: typeof ListTrustConfigsResponseSchema;
  },
  /**
   * Gets details of a single TrustConfig.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.GetTrustConfig
   */
  getTrustConfig: {
    methodKind: "unary";
    input: typeof GetTrustConfigRequestSchema;
    output: typeof TrustConfigSchema;
  },
  /**
   * Creates a new TrustConfig in a given project and location.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.CreateTrustConfig
   */
  createTrustConfig: {
    methodKind: "unary";
    input: typeof CreateTrustConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a TrustConfig.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.UpdateTrustConfig
   */
  updateTrustConfig: {
    methodKind: "unary";
    input: typeof UpdateTrustConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single TrustConfig.
   *
   * @generated from rpc google.cloud.certificatemanager.v1.CertificateManager.DeleteTrustConfig
   */
  deleteTrustConfig: {
    methodKind: "unary";
    input: typeof DeleteTrustConfigRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_certificatemanager_v1_certificate_manager, 0);

