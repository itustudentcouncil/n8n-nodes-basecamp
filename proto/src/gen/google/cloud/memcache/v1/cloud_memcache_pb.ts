// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/memcache/v1/cloud_memcache.proto (package google.cloud.memcache.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { DayOfWeek } from "../../../type/dayofweek_pb";
import { file_google_type_dayofweek } from "../../../type/dayofweek_pb";
import type { TimeOfDay } from "../../../type/timeofday_pb";
import { file_google_type_timeofday } from "../../../type/timeofday_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/memcache/v1/cloud_memcache.proto.
 */
export const file_google_cloud_memcache_v1_cloud_memcache: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_type_dayofweek, file_google_type_timeofday]);

/**
 * A Memorystore for Memcached instance
 *
 * @generated from message google.cloud.memcache.v1.Instance
 */
export type Instance = Message<"google.cloud.memcache.v1.Instance"> & {
  /**
   * Required. Unique name of the resource in this scope including project and
   * location using the form:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   *
   * Note: Memcached instances are managed and addressed at the regional level
   * so `location_id` here refers to a Google Cloud region; however, users may
   * choose which zones Memcached nodes should be provisioned in within an
   * instance. Refer to [zones][google.cloud.memcache.v1.Instance.zones] field for more details.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * User provided name for the instance, which is only used for display
   * purposes. Cannot be more than 80 characters.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Resource labels to represent user-provided metadata.
   * Refer to cloud documentation on labels for more details.
   * https://cloud.google.com/compute/docs/labeling-resources
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The full name of the Google Compute Engine
   * [network](/compute/docs/networks-and-firewalls#networks) to which the
   * instance is connected. If left unspecified, the `default` network
   * will be used.
   *
   * @generated from field: string authorized_network = 4;
   */
  authorizedNetwork: string;

  /**
   * Zones in which Memcached nodes should be provisioned.
   * Memcached nodes will be equally distributed across these zones. If not
   * provided, the service will by default create nodes in all zones in the
   * region for the instance.
   *
   * @generated from field: repeated string zones = 5;
   */
  zones: string[];

  /**
   * Required. Number of nodes in the Memcached instance.
   *
   * @generated from field: int32 node_count = 6;
   */
  nodeCount: number;

  /**
   * Required. Configuration for Memcached nodes.
   *
   * @generated from field: google.cloud.memcache.v1.Instance.NodeConfig node_config = 7;
   */
  nodeConfig?: Instance_NodeConfig;

  /**
   * The major version of Memcached software.
   * If not provided, latest supported version will be used. Currently the
   * latest supported major version is `MEMCACHE_1_5`.
   * The minor version will be automatically determined by our system based on
   * the latest supported minor version.
   *
   * @generated from field: google.cloud.memcache.v1.MemcacheVersion memcache_version = 9;
   */
  memcacheVersion: MemcacheVersion;

  /**
   * User defined parameters to apply to the memcached process
   * on each node.
   *
   * @generated from field: google.cloud.memcache.v1.MemcacheParameters parameters = 11;
   */
  parameters?: MemcacheParameters;

  /**
   * Output only. List of Memcached nodes.
   * Refer to [Node][google.cloud.memcache.v1.Instance.Node] message for more details.
   *
   * @generated from field: repeated google.cloud.memcache.v1.Instance.Node memcache_nodes = 12;
   */
  memcacheNodes: Instance_Node[];

  /**
   * Output only. The time the instance was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 13;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the instance was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 14;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The state of this Memcached instance.
   *
   * @generated from field: google.cloud.memcache.v1.Instance.State state = 15;
   */
  state: Instance_State;

  /**
   * Output only. The full version of memcached server running on this instance.
   * System automatically determines the full memcached version for an instance
   * based on the input MemcacheVersion.
   * The full version format will be "memcached-1.5.16".
   *
   * @generated from field: string memcache_full_version = 18;
   */
  memcacheFullVersion: string;

  /**
   * List of messages that describe the current state of the Memcached instance.
   *
   * @generated from field: repeated google.cloud.memcache.v1.Instance.InstanceMessage instance_messages = 19;
   */
  instanceMessages: Instance_InstanceMessage[];

  /**
   * Output only. Endpoint for the Discovery API.
   *
   * @generated from field: string discovery_endpoint = 20;
   */
  discoveryEndpoint: string;

  /**
   * The maintenance policy for the instance. If not provided,
   * the maintenance event will be performed based on Memorystore
   * internal rollout schedule.
   *
   * @generated from field: google.cloud.memcache.v1.MaintenancePolicy maintenance_policy = 21;
   */
  maintenancePolicy?: MaintenancePolicy;

  /**
   * Output only. Published maintenance schedule.
   *
   * @generated from field: google.cloud.memcache.v1.MaintenanceSchedule maintenance_schedule = 22;
   */
  maintenanceSchedule?: MaintenanceSchedule;
};

/**
 * Describes the message google.cloud.memcache.v1.Instance.
 * Use `create(InstanceSchema)` to create a new message.
 */
export const InstanceSchema: GenMessage<Instance> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 0);

/**
 * Configuration for a Memcached Node.
 *
 * @generated from message google.cloud.memcache.v1.Instance.NodeConfig
 */
export type Instance_NodeConfig = Message<"google.cloud.memcache.v1.Instance.NodeConfig"> & {
  /**
   * Required. Number of cpus per Memcached node.
   *
   * @generated from field: int32 cpu_count = 1;
   */
  cpuCount: number;

  /**
   * Required. Memory size in MiB for each Memcached node.
   *
   * @generated from field: int32 memory_size_mb = 2;
   */
  memorySizeMb: number;
};

/**
 * Describes the message google.cloud.memcache.v1.Instance.NodeConfig.
 * Use `create(Instance_NodeConfigSchema)` to create a new message.
 */
export const Instance_NodeConfigSchema: GenMessage<Instance_NodeConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 0);

/**
 * @generated from message google.cloud.memcache.v1.Instance.Node
 */
export type Instance_Node = Message<"google.cloud.memcache.v1.Instance.Node"> & {
  /**
   * Output only. Identifier of the Memcached node. The node id does not
   * include project or location like the Memcached instance name.
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Output only. Location (GCP Zone) for the Memcached node.
   *
   * @generated from field: string zone = 2;
   */
  zone: string;

  /**
   * Output only. Current state of the Memcached node.
   *
   * @generated from field: google.cloud.memcache.v1.Instance.Node.State state = 3;
   */
  state: Instance_Node_State;

  /**
   * Output only. Hostname or IP address of the Memcached node used by the
   * clients to connect to the Memcached server on this node.
   *
   * @generated from field: string host = 4;
   */
  host: string;

  /**
   * Output only. The port number of the Memcached server on this node.
   *
   * @generated from field: int32 port = 5;
   */
  port: number;

  /**
   * User defined parameters currently applied to the node.
   *
   * @generated from field: google.cloud.memcache.v1.MemcacheParameters parameters = 6;
   */
  parameters?: MemcacheParameters;
};

/**
 * Describes the message google.cloud.memcache.v1.Instance.Node.
 * Use `create(Instance_NodeSchema)` to create a new message.
 */
export const Instance_NodeSchema: GenMessage<Instance_Node> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 1);

/**
 * Different states of a Memcached node.
 *
 * @generated from enum google.cloud.memcache.v1.Instance.Node.State
 */
export enum Instance_Node_State {
  /**
   * Node state is not set.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Node is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * Node has been created and ready to be used.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * Node is being deleted.
   *
   * @generated from enum value: DELETING = 3;
   */
  DELETING = 3,

  /**
   * Node is being updated.
   *
   * @generated from enum value: UPDATING = 4;
   */
  UPDATING = 4,
}

/**
 * Describes the enum google.cloud.memcache.v1.Instance.Node.State.
 */
export const Instance_Node_StateSchema: GenEnum<Instance_Node_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 1, 0);

/**
 * @generated from message google.cloud.memcache.v1.Instance.InstanceMessage
 */
export type Instance_InstanceMessage = Message<"google.cloud.memcache.v1.Instance.InstanceMessage"> & {
  /**
   * A code that correspond to one type of user-facing message.
   *
   * @generated from field: google.cloud.memcache.v1.Instance.InstanceMessage.Code code = 1;
   */
  code: Instance_InstanceMessage_Code;

  /**
   * Message on memcached instance which will be exposed to users.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message google.cloud.memcache.v1.Instance.InstanceMessage.
 * Use `create(Instance_InstanceMessageSchema)` to create a new message.
 */
export const Instance_InstanceMessageSchema: GenMessage<Instance_InstanceMessage> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 2);

/**
 * @generated from enum google.cloud.memcache.v1.Instance.InstanceMessage.Code
 */
export enum Instance_InstanceMessage_Code {
  /**
   * Message Code not set.
   *
   * @generated from enum value: CODE_UNSPECIFIED = 0;
   */
  CODE_UNSPECIFIED = 0,

  /**
   * Memcached nodes are distributed unevenly.
   *
   * @generated from enum value: ZONE_DISTRIBUTION_UNBALANCED = 1;
   */
  ZONE_DISTRIBUTION_UNBALANCED = 1,
}

/**
 * Describes the enum google.cloud.memcache.v1.Instance.InstanceMessage.Code.
 */
export const Instance_InstanceMessage_CodeSchema: GenEnum<Instance_InstanceMessage_Code> = /*@__PURE__*/
  enumDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 2, 0);

/**
 * Different states of a Memcached instance.
 *
 * @generated from enum google.cloud.memcache.v1.Instance.State
 */
export enum Instance_State {
  /**
   * State not set.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Memcached instance is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * Memcached instance has been created and ready to be used.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * Memcached instance is updating configuration such as maintenance policy
   * and schedule.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * Memcached instance is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * Memcached instance is going through maintenance, e.g. data plane rollout.
   *
   * @generated from enum value: PERFORMING_MAINTENANCE = 5;
   */
  PERFORMING_MAINTENANCE = 5,
}

/**
 * Describes the enum google.cloud.memcache.v1.Instance.State.
 */
export const Instance_StateSchema: GenEnum<Instance_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_memcache_v1_cloud_memcache, 0, 0);

/**
 * Maintenance policy per instance.
 *
 * @generated from message google.cloud.memcache.v1.MaintenancePolicy
 */
export type MaintenancePolicy = Message<"google.cloud.memcache.v1.MaintenancePolicy"> & {
  /**
   * Output only. The time when the policy was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time when the policy was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;

  /**
   * Description of what this policy is for. Create/Update methods
   * return INVALID_ARGUMENT if the length is greater than 512.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Required. Maintenance window that is applied to resources covered by this
   * policy. Minimum 1. For the current version, the maximum number of
   * weekly_maintenance_windows is expected to be one.
   *
   * @generated from field: repeated google.cloud.memcache.v1.WeeklyMaintenanceWindow weekly_maintenance_window = 4;
   */
  weeklyMaintenanceWindow: WeeklyMaintenanceWindow[];
};

/**
 * Describes the message google.cloud.memcache.v1.MaintenancePolicy.
 * Use `create(MaintenancePolicySchema)` to create a new message.
 */
export const MaintenancePolicySchema: GenMessage<MaintenancePolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 1);

/**
 * Time window specified for weekly operations.
 *
 * @generated from message google.cloud.memcache.v1.WeeklyMaintenanceWindow
 */
export type WeeklyMaintenanceWindow = Message<"google.cloud.memcache.v1.WeeklyMaintenanceWindow"> & {
  /**
   * Required. Allows to define schedule that runs specified day of the week.
   *
   * @generated from field: google.type.DayOfWeek day = 1;
   */
  day: DayOfWeek;

  /**
   * Required. Start time of the window in UTC.
   *
   * @generated from field: google.type.TimeOfDay start_time = 2;
   */
  startTime?: TimeOfDay;

  /**
   * Required. Duration of the time window.
   *
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;
};

/**
 * Describes the message google.cloud.memcache.v1.WeeklyMaintenanceWindow.
 * Use `create(WeeklyMaintenanceWindowSchema)` to create a new message.
 */
export const WeeklyMaintenanceWindowSchema: GenMessage<WeeklyMaintenanceWindow> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 2);

/**
 * Upcoming maintenance schedule.
 *
 * @generated from message google.cloud.memcache.v1.MaintenanceSchedule
 */
export type MaintenanceSchedule = Message<"google.cloud.memcache.v1.MaintenanceSchedule"> & {
  /**
   * Output only. The start time of any upcoming scheduled maintenance for this instance.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * Output only. The end time of any upcoming scheduled maintenance for this instance.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. The deadline that the maintenance schedule start time can not go beyond,
   * including reschedule.
   *
   * @generated from field: google.protobuf.Timestamp schedule_deadline_time = 4;
   */
  scheduleDeadlineTime?: Timestamp;
};

/**
 * Describes the message google.cloud.memcache.v1.MaintenanceSchedule.
 * Use `create(MaintenanceScheduleSchema)` to create a new message.
 */
export const MaintenanceScheduleSchema: GenMessage<MaintenanceSchedule> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 3);

/**
 * Request for [RescheduleMaintenance][google.cloud.memcache.v1.CloudMemcache.RescheduleMaintenance].
 *
 * @generated from message google.cloud.memcache.v1.RescheduleMaintenanceRequest
 */
export type RescheduleMaintenanceRequest = Message<"google.cloud.memcache.v1.RescheduleMaintenanceRequest"> & {
  /**
   * Required. Memcache instance resource name using the form:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region.
   *
   * @generated from field: string instance = 1;
   */
  instance: string;

  /**
   * Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.
   *
   * @generated from field: google.cloud.memcache.v1.RescheduleMaintenanceRequest.RescheduleType reschedule_type = 2;
   */
  rescheduleType: RescheduleMaintenanceRequest_RescheduleType;

  /**
   * Timestamp when the maintenance shall be rescheduled to if
   * reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for
   * example `2012-11-15T16:19:00.094Z`.
   *
   * @generated from field: google.protobuf.Timestamp schedule_time = 3;
   */
  scheduleTime?: Timestamp;
};

/**
 * Describes the message google.cloud.memcache.v1.RescheduleMaintenanceRequest.
 * Use `create(RescheduleMaintenanceRequestSchema)` to create a new message.
 */
export const RescheduleMaintenanceRequestSchema: GenMessage<RescheduleMaintenanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 4);

/**
 * Reschedule options.
 *
 * @generated from enum google.cloud.memcache.v1.RescheduleMaintenanceRequest.RescheduleType
 */
export enum RescheduleMaintenanceRequest_RescheduleType {
  /**
   * Not set.
   *
   * @generated from enum value: RESCHEDULE_TYPE_UNSPECIFIED = 0;
   */
  RESCHEDULE_TYPE_UNSPECIFIED = 0,

  /**
   * If the user wants to schedule the maintenance to happen now.
   *
   * @generated from enum value: IMMEDIATE = 1;
   */
  IMMEDIATE = 1,

  /**
   * If the user wants to use the existing maintenance policy to find the
   * next available window.
   *
   * @generated from enum value: NEXT_AVAILABLE_WINDOW = 2;
   */
  NEXT_AVAILABLE_WINDOW = 2,

  /**
   * If the user wants to reschedule the maintenance to a specific time.
   *
   * @generated from enum value: SPECIFIC_TIME = 3;
   */
  SPECIFIC_TIME = 3,
}

/**
 * Describes the enum google.cloud.memcache.v1.RescheduleMaintenanceRequest.RescheduleType.
 */
export const RescheduleMaintenanceRequest_RescheduleTypeSchema: GenEnum<RescheduleMaintenanceRequest_RescheduleType> = /*@__PURE__*/
  enumDesc(file_google_cloud_memcache_v1_cloud_memcache, 4, 0);

/**
 * Request for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances].
 *
 * @generated from message google.cloud.memcache.v1.ListInstancesRequest
 */
export type ListInstancesRequest = Message<"google.cloud.memcache.v1.ListInstancesRequest"> & {
  /**
   * Required. The resource name of the instance location using the form:
   *     `projects/{project_id}/locations/{location_id}`
   * where `location_id` refers to a GCP region
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return.
   *
   * If not specified, a default value of 1000 will be used by the service.
   * Regardless of the `page_size` value, the response may include a partial
   * list and a caller should only rely on response's
   * [`next_page_token`][google.cloud.memcache.v1.ListInstancesResponse.next_page_token]
   * to determine if there are more instances left to be queried.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The `next_page_token` value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * List filter. For example, exclude all Memcached instances with name as
   * my-instance by specifying `"name != my-instance"`.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Sort results. Supported values are "name", "name desc" or "" (unsorted).
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.memcache.v1.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export const ListInstancesRequestSchema: GenMessage<ListInstancesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 5);

/**
 * Response for [ListInstances][google.cloud.memcache.v1.CloudMemcache.ListInstances].
 *
 * @generated from message google.cloud.memcache.v1.ListInstancesResponse
 */
export type ListInstancesResponse = Message<"google.cloud.memcache.v1.ListInstancesResponse"> & {
  /**
   * A list of Memcached instances in the project in the specified location,
   * or across all locations.
   *
   * If the `location_id` in the parent field of the request is "-", all regions
   * available to the project are queried, and the results aggregated.
   *
   * @generated from field: repeated google.cloud.memcache.v1.Instance instances = 1;
   */
  instances: Instance[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.memcache.v1.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export const ListInstancesResponseSchema: GenMessage<ListInstancesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 6);

/**
 * Request for [GetInstance][google.cloud.memcache.v1.CloudMemcache.GetInstance].
 *
 * @generated from message google.cloud.memcache.v1.GetInstanceRequest
 */
export type GetInstanceRequest = Message<"google.cloud.memcache.v1.GetInstanceRequest"> & {
  /**
   * Required. Memcached instance resource name in the format:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.memcache.v1.GetInstanceRequest.
 * Use `create(GetInstanceRequestSchema)` to create a new message.
 */
export const GetInstanceRequestSchema: GenMessage<GetInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 7);

/**
 * Request for [CreateInstance][google.cloud.memcache.v1.CloudMemcache.CreateInstance].
 *
 * @generated from message google.cloud.memcache.v1.CreateInstanceRequest
 */
export type CreateInstanceRequest = Message<"google.cloud.memcache.v1.CreateInstanceRequest"> & {
  /**
   * Required. The resource name of the instance location using the form:
   *     `projects/{project_id}/locations/{location_id}`
   * where `location_id` refers to a GCP region
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The logical name of the Memcached instance in the user
   * project with the following restrictions:
   *
   * * Must contain only lowercase letters, numbers, and hyphens.
   * * Must start with a letter.
   * * Must be between 1-40 characters.
   * * Must end with a number or a letter.
   * * Must be unique within the user project / location.
   *
   * If any of the above are not met, the API raises an invalid argument error.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. A Memcached Instance
   *
   * @generated from field: google.cloud.memcache.v1.Instance instance = 3;
   */
  instance?: Instance;
};

/**
 * Describes the message google.cloud.memcache.v1.CreateInstanceRequest.
 * Use `create(CreateInstanceRequestSchema)` to create a new message.
 */
export const CreateInstanceRequestSchema: GenMessage<CreateInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 8);

/**
 * Request for [UpdateInstance][google.cloud.memcache.v1.CloudMemcache.UpdateInstance].
 *
 * @generated from message google.cloud.memcache.v1.UpdateInstanceRequest
 */
export type UpdateInstanceRequest = Message<"google.cloud.memcache.v1.UpdateInstanceRequest"> & {
  /**
   * Required. Mask of fields to update.
   *
   *  *   `displayName`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. A Memcached Instance.
   * Only fields specified in update_mask are updated.
   *
   * @generated from field: google.cloud.memcache.v1.Instance instance = 2;
   */
  instance?: Instance;
};

/**
 * Describes the message google.cloud.memcache.v1.UpdateInstanceRequest.
 * Use `create(UpdateInstanceRequestSchema)` to create a new message.
 */
export const UpdateInstanceRequestSchema: GenMessage<UpdateInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 9);

/**
 * Request for [DeleteInstance][google.cloud.memcache.v1.CloudMemcache.DeleteInstance].
 *
 * @generated from message google.cloud.memcache.v1.DeleteInstanceRequest
 */
export type DeleteInstanceRequest = Message<"google.cloud.memcache.v1.DeleteInstanceRequest"> & {
  /**
   * Required. Memcached instance resource name in the format:
   *     `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
   * where `location_id` refers to a GCP region
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.memcache.v1.DeleteInstanceRequest.
 * Use `create(DeleteInstanceRequestSchema)` to create a new message.
 */
export const DeleteInstanceRequestSchema: GenMessage<DeleteInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 10);

/**
 * Request for [ApplyParameters][google.cloud.memcache.v1.CloudMemcache.ApplyParameters].
 *
 * @generated from message google.cloud.memcache.v1.ApplyParametersRequest
 */
export type ApplyParametersRequest = Message<"google.cloud.memcache.v1.ApplyParametersRequest"> & {
  /**
   * Required. Resource name of the Memcached instance for which parameter group updates
   * should be applied.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Nodes to which the instance-level parameter group is applied.
   *
   * @generated from field: repeated string node_ids = 2;
   */
  nodeIds: string[];

  /**
   * Whether to apply instance-level parameter group to all nodes. If set to
   * true, users are restricted from specifying individual nodes, and
   * `ApplyParameters` updates all nodes within the instance.
   *
   * @generated from field: bool apply_all = 3;
   */
  applyAll: boolean;
};

/**
 * Describes the message google.cloud.memcache.v1.ApplyParametersRequest.
 * Use `create(ApplyParametersRequestSchema)` to create a new message.
 */
export const ApplyParametersRequestSchema: GenMessage<ApplyParametersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 11);

/**
 * Request for [UpdateParameters][google.cloud.memcache.v1.CloudMemcache.UpdateParameters].
 *
 * @generated from message google.cloud.memcache.v1.UpdateParametersRequest
 */
export type UpdateParametersRequest = Message<"google.cloud.memcache.v1.UpdateParametersRequest"> & {
  /**
   * Required. Resource name of the Memcached instance for which the parameters should be
   * updated.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Mask of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * The parameters to apply to the instance.
   *
   * @generated from field: google.cloud.memcache.v1.MemcacheParameters parameters = 3;
   */
  parameters?: MemcacheParameters;
};

/**
 * Describes the message google.cloud.memcache.v1.UpdateParametersRequest.
 * Use `create(UpdateParametersRequestSchema)` to create a new message.
 */
export const UpdateParametersRequestSchema: GenMessage<UpdateParametersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 12);

/**
 * @generated from message google.cloud.memcache.v1.MemcacheParameters
 */
export type MemcacheParameters = Message<"google.cloud.memcache.v1.MemcacheParameters"> & {
  /**
   * Output only. The unique ID associated with this set of parameters. Users
   * can use this id to determine if the parameters associated with the instance
   * differ from the parameters associated with the nodes. A discrepancy between
   * parameter ids can inform users that they may need to take action to apply
   * parameters on nodes.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * User defined set of parameters to use in the memcached process.
   *
   * @generated from field: map<string, string> params = 3;
   */
  params: { [key: string]: string };
};

/**
 * Describes the message google.cloud.memcache.v1.MemcacheParameters.
 * Use `create(MemcacheParametersSchema)` to create a new message.
 */
export const MemcacheParametersSchema: GenMessage<MemcacheParameters> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 13);

/**
 * Represents the metadata of a long-running operation.
 *
 * @generated from message google.cloud.memcache.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.memcache.v1.OperationMetadata"> & {
  /**
   * Output only. Time when the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. Time when the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_detail = 5;
   */
  statusDetail: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   *
   * @generated from field: bool cancel_requested = 6;
   */
  cancelRequested: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.memcache.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 14);

/**
 * Metadata for the given [google.cloud.location.Location][google.cloud.location.Location].
 *
 * @generated from message google.cloud.memcache.v1.LocationMetadata
 */
export type LocationMetadata = Message<"google.cloud.memcache.v1.LocationMetadata"> & {
  /**
   * Output only. The set of available zones in the location. The map is keyed
   * by the lowercase ID of each zone, as defined by GCE. These keys can be
   * specified in the `zones` field when creating a Memcached instance.
   *
   * @generated from field: map<string, google.cloud.memcache.v1.ZoneMetadata> available_zones = 1;
   */
  availableZones: { [key: string]: ZoneMetadata };
};

/**
 * Describes the message google.cloud.memcache.v1.LocationMetadata.
 * Use `create(LocationMetadataSchema)` to create a new message.
 */
export const LocationMetadataSchema: GenMessage<LocationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 15);

/**
 * @generated from message google.cloud.memcache.v1.ZoneMetadata
 */
export type ZoneMetadata = Message<"google.cloud.memcache.v1.ZoneMetadata"> & {
};

/**
 * Describes the message google.cloud.memcache.v1.ZoneMetadata.
 * Use `create(ZoneMetadataSchema)` to create a new message.
 */
export const ZoneMetadataSchema: GenMessage<ZoneMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_memcache_v1_cloud_memcache, 16);

/**
 * Memcached versions supported by our service.
 *
 * @generated from enum google.cloud.memcache.v1.MemcacheVersion
 */
export enum MemcacheVersion {
  /**
   * @generated from enum value: MEMCACHE_VERSION_UNSPECIFIED = 0;
   */
  MEMCACHE_VERSION_UNSPECIFIED = 0,

  /**
   * Memcached 1.5 version.
   *
   * @generated from enum value: MEMCACHE_1_5 = 1;
   */
  MEMCACHE_1_5 = 1,
}

/**
 * Describes the enum google.cloud.memcache.v1.MemcacheVersion.
 */
export const MemcacheVersionSchema: GenEnum<MemcacheVersion> = /*@__PURE__*/
  enumDesc(file_google_cloud_memcache_v1_cloud_memcache, 0);

/**
 * Configures and manages Cloud Memorystore for Memcached instances.
 *
 *
 * The `memcache.googleapis.com` service implements the Google Cloud Memorystore
 * for Memcached API and defines the following resource model for managing
 * Memorystore Memcached (also called Memcached below) instances:
 * * The service works with a collection of cloud projects, named: `/projects/*`
 * * Each project has a collection of available locations, named: `/locations/*`
 * * Each location has a collection of Memcached instances, named:
 * `/instances/*`
 * * As such, Memcached instances are resources of the form:
 *   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *
 * Note that location_id must be a GCP `region`; for example:
 * * `projects/my-memcached-project/locations/us-central1/instances/my-memcached`
 *
 * @generated from service google.cloud.memcache.v1.CloudMemcache
 */
export const CloudMemcache: GenService<{
  /**
   * Lists Instances in a given location.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.ListInstances
   */
  listInstances: {
    methodKind: "unary";
    input: typeof ListInstancesRequestSchema;
    output: typeof ListInstancesResponseSchema;
  },
  /**
   * Gets details of a single Instance.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.GetInstance
   */
  getInstance: {
    methodKind: "unary";
    input: typeof GetInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * Creates a new Instance in a given location.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.CreateInstance
   */
  createInstance: {
    methodKind: "unary";
    input: typeof CreateInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates an existing Instance in a given project and location.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.UpdateInstance
   */
  updateInstance: {
    methodKind: "unary";
    input: typeof UpdateInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the defined Memcached parameters for an existing instance.
   * This method only stages the parameters, it must be followed by
   * `ApplyParameters` to apply the parameters to nodes of the Memcached
   * instance.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.UpdateParameters
   */
  updateParameters: {
    methodKind: "unary";
    input: typeof UpdateParametersRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single Instance.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.DeleteInstance
   */
  deleteInstance: {
    methodKind: "unary";
    input: typeof DeleteInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * `ApplyParameters` restarts the set of specified nodes in order to update
   * them to the current set of parameters for the Memcached Instance.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.ApplyParameters
   */
  applyParameters: {
    methodKind: "unary";
    input: typeof ApplyParametersRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Reschedules upcoming maintenance event.
   *
   * @generated from rpc google.cloud.memcache.v1.CloudMemcache.RescheduleMaintenance
   */
  rescheduleMaintenance: {
    methodKind: "unary";
    input: typeof RescheduleMaintenanceRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_memcache_v1_cloud_memcache, 0);

