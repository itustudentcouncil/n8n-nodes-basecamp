// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/paymentgateway/issuerswitch/v1/resolutions.proto (package google.cloud.paymentgateway.issuerswitch.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Participant } from "./common_fields_pb";
import { file_google_cloud_paymentgateway_issuerswitch_v1_common_fields } from "./common_fields_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Money } from "../../../../type/money_pb";
import { file_google_type_money } from "../../../../type/money_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/paymentgateway/issuerswitch/v1/resolutions.proto.
 */
export const file_google_cloud_paymentgateway_issuerswitch_v1_resolutions: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_paymentgateway_issuerswitch_v1_common_fields, file_google_longrunning_operations, file_google_protobuf_timestamp, file_google_type_money]);

/**
 * A complaint processed by the issuer switch.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.Complaint
 */
export type Complaint = Message<"google.cloud.paymentgateway.issuerswitch.v1.Complaint"> & {
  /**
   * The name of the complaint. This uniquely identifies the complaint.
   * Format of name is
   * projects/{project_id}/complaints/{complaint_id}.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The reason for raising the complaint. This maps adjustment flag
   * and reason code for the complaint to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively while raising a complaint.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment raise_complaint_adjustment = 2;
   */
  raiseComplaintAdjustment?: RaiseComplaintAdjustment;

  /**
   * Required. Details required for raising / resolving a complaint.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.CaseDetails details = 4;
   */
  details?: CaseDetails;

  /**
   * Output only. Response to the raised / resolved complaint.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.CaseResponse response = 5;
   */
  response?: CaseResponse;

  /**
   * The reason for resolving the complaint. It provides adjustment values while
   * resolving and for already resolved complaints. This maps adjustment flag
   * and reason code for the complaint to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively when a complete resolution is done via
   * Resolve Complaint API otherwise maps to `respAdjFlag` and `respAdjCode` in
   * complaint response respectively when a complaint request from UPI is
   * directly resolved by issuer switch.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment resolve_complaint_adjustment = 6;
   */
  resolveComplaintAdjustment?: ResolveComplaintAdjustment;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.Complaint.
 * Use `create(ComplaintSchema)` to create a new message.
 */
export const ComplaintSchema: GenMessage<Complaint> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 0);

/**
 * Request for the `CreateComplaint` method.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintRequest
 */
export type CreateComplaintRequest = Message<"google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintRequest"> & {
  /**
   * Required. The parent resource for the complaint. The format is
   * `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The complaint to be raised.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Complaint complaint = 2;
   */
  complaint?: Complaint;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintRequest.
 * Use `create(CreateComplaintRequestSchema)` to create a new message.
 */
export const CreateComplaintRequestSchema: GenMessage<CreateComplaintRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 1);

/**
 * Request for the `ResolveComplaint` method.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintRequest
 */
export type ResolveComplaintRequest = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintRequest"> & {
  /**
   * Required. The complaint to be resolved.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Complaint complaint = 1;
   */
  complaint?: Complaint;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintRequest.
 * Use `create(ResolveComplaintRequestSchema)` to create a new message.
 */
export const ResolveComplaintRequestSchema: GenMessage<ResolveComplaintRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 2);

/**
 * A dispute processed by the issuer switch.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.Dispute
 */
export type Dispute = Message<"google.cloud.paymentgateway.issuerswitch.v1.Dispute"> & {
  /**
   * The name of the dispute. This uniquely identifies the dispute.
   * Format of name is
   * projects/{project_id}/disputes/{dispute_id}.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The reason for raising the dispute. This maps adjustment flag
   * and reason code for the dispute to `reqAdjFlag` and `reqAdjCode` in
   * complaint request respectively while raising a dispute.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment raise_dispute_adjustment = 2;
   */
  raiseDisputeAdjustment?: RaiseDisputeAdjustment;

  /**
   * Required. Details required for raising/resolving dispute.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.CaseDetails details = 4;
   */
  details?: CaseDetails;

  /**
   * Output only. Response to the raised/resolved dispute.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.CaseResponse response = 5;
   */
  response?: CaseResponse;

  /**
   * The reason for resolving the dispute. It provides adjustment values while
   * resolving and for already resolved disputes. This maps adjustment flag
   * and reason code for the dispute to `reqAdjFlag` and `reqAdjCode` in
   * dispute request respectively while resolving a dispute.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment resolve_dispute_adjustment = 6;
   */
  resolveDisputeAdjustment?: ResolveDisputeAdjustment;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.Dispute.
 * Use `create(DisputeSchema)` to create a new message.
 */
export const DisputeSchema: GenMessage<Dispute> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 3);

/**
 * Request for the `CreateDispute` method.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeRequest
 */
export type CreateDisputeRequest = Message<"google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeRequest"> & {
  /**
   * Required. The parent resource for the dispute. The format is
   * `projects/{project}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The dispute to be raised.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Dispute dispute = 2;
   */
  dispute?: Dispute;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeRequest.
 * Use `create(CreateDisputeRequestSchema)` to create a new message.
 */
export const CreateDisputeRequestSchema: GenMessage<CreateDisputeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 4);

/**
 * Request for the `ResolveDispute` method.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeRequest
 */
export type ResolveDisputeRequest = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeRequest"> & {
  /**
   * Required. The dispute to be resolved.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Dispute dispute = 1;
   */
  dispute?: Dispute;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeRequest.
 * Use `create(ResolveDisputeRequestSchema)` to create a new message.
 */
export const ResolveDisputeRequestSchema: GenMessage<ResolveDisputeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 5);

/**
 * Details of original transaction.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.OriginalTransaction
 */
export type OriginalTransaction = Message<"google.cloud.paymentgateway.issuerswitch.v1.OriginalTransaction"> & {
  /**
   * Required. Uniquely identifies the original transaction. This maps to the
   * `Txn.Id` value of the original transaction in India's UPI system.
   *
   * @generated from field: string transaction_id = 1;
   */
  transactionId: string;

  /**
   * Required. Retrieval Reference Number (RRN) of the original transaction.
   *
   * @generated from field: string retrieval_reference_number = 2;
   */
  retrievalReferenceNumber: string;

  /**
   * Timestamp of the original transaction request.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 3;
   */
  requestTime?: Timestamp;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.OriginalTransaction.
 * Use `create(OriginalTransactionSchema)` to create a new message.
 */
export const OriginalTransactionSchema: GenMessage<OriginalTransaction> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 6);

/**
 * Details of the complaint or dispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CaseDetails
 */
export type CaseDetails = Message<"google.cloud.paymentgateway.issuerswitch.v1.CaseDetails"> & {
  /**
   * Required. Details of original transaction.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.OriginalTransaction original_transaction = 1;
   */
  originalTransaction?: OriginalTransaction;

  /**
   * Required. Initiator of the complaint / dispute.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.TransactionSubType transaction_sub_type = 2;
   */
  transactionSubType: TransactionSubType;

  /**
   * Required. The adjustment amount in URCS for the complaint / dispute. This
   * maps to `reqAdjAmount` in complaint request.
   *
   * @generated from field: google.type.Money amount = 3;
   */
  amount?: Money;

  /**
   * The original response code which has been updated in the complaint
   * Response. This should map to settlement response code currently available
   * in URCS system.
   *
   * @generated from field: string original_settlement_response_code = 4;
   */
  originalSettlementResponseCode: string;

  /**
   * Required. Set to true if the complaint / dispute belongs to current
   * settlement cycle, false otherwise.
   *
   * @generated from field: bool current_cycle = 5;
   */
  currentCycle: boolean;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CaseDetails.
 * Use `create(CaseDetailsSchema)` to create a new message.
 */
export const CaseDetailsSchema: GenMessage<CaseDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 7);

/**
 * Response to the complaint or dispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CaseResponse
 */
export type CaseResponse = Message<"google.cloud.paymentgateway.issuerswitch.v1.CaseResponse"> & {
  /**
   * Complaint Reference Number(CRN) sent by UPI as a reference against the
   * generated complaint / dispute.
   *
   * @generated from field: string complaint_reference_number = 1;
   */
  complaintReferenceNumber: string;

  /**
   * The adjustment amount of the response. This maps to `adjAmt` in
   * complaint response.
   *
   * @generated from field: google.type.Money amount = 2;
   */
  amount?: Money;

  /**
   * The adjustment flag in response to the complaint. This maps adjustment flag
   * in URCS for the complaint transaction to `Resp.Ref.adjFlag` in complaint
   * response.
   *
   * @generated from field: string adjustment_flag = 3;
   */
  adjustmentFlag: string;

  /**
   * The adjustment code in response to the complaint. This maps reason code in
   * URCS for the complaint transaction to `Resp.Ref.adjCode` in complaint
   * response.
   *
   * @generated from field: string adjustment_code = 4;
   */
  adjustmentCode: string;

  /**
   * It defines the Adjustment Reference ID which has been updated in the
   * complaint response. This maps to `adjRefID` in complaint response.
   *
   * @generated from field: string adjustment_reference_id = 5;
   */
  adjustmentReferenceId: string;

  /**
   * Adjustment Remarks. This maps to `adjRemarks` in complaint response.
   *
   * @generated from field: string adjustment_remarks = 6;
   */
  adjustmentRemarks: string;

  /**
   * The Approval Reference Number. This maps to `approvalNum` in complaint
   * response.
   *
   * @generated from field: string approval_number = 7;
   */
  approvalNumber: string;

  /**
   * Process Status of the transaction. This maps to `procStatus` in complaint
   * response.
   *
   * @generated from field: string process_status = 8;
   */
  processStatus: string;

  /**
   * The adjustment timestamp when bank performs the adjustment for the received
   * complaint request. This maps to `adjTs` in complaint response.
   *
   * @generated from field: google.protobuf.Timestamp adjustment_time = 9;
   */
  adjustmentTime?: Timestamp;

  /**
   * The details of the participant of the original financial transaction.
   *
   * @generated from oneof google.cloud.paymentgateway.issuerswitch.v1.CaseResponse.participant
   */
  participant: {
    /**
     * The payer in the original financial transaction.
     *
     * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Participant payer = 10;
     */
    value: Participant;
    case: "payer";
  } | {
    /**
     * The payee in the original financial transaction.
     *
     * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.Participant payee = 11;
     */
    value: Participant;
    case: "payee";
  } | { case: undefined; value?: undefined };

  /**
   * The result of the transaction.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.CaseResponse.Result result = 12;
   */
  result: CaseResponse_Result;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CaseResponse.
 * Use `create(CaseResponseSchema)` to create a new message.
 */
export const CaseResponseSchema: GenMessage<CaseResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 8);

/**
 * The status of the complaint or dispute transaction. This maps to `result`
 * in complaint transaction response.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.CaseResponse.Result
 */
export enum CaseResponse_Result {
  /**
   * Unspecified status.
   *
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  RESULT_UNSPECIFIED = 0,

  /**
   * The transaction has successfully completed.
   *
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * The transaction has failed.
   *
   * @generated from enum value: FAILURE = 2;
   */
  FAILURE = 2,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.CaseResponse.Result.
 */
export const CaseResponse_ResultSchema: GenEnum<CaseResponse_Result> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 8, 0);

/**
 * The adjusment flag and reason code for raising complaint.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment
 */
export type RaiseComplaintAdjustment = Message<"google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment"> & {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in complaint request and `respAdjFlag` in complaint
   * response.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.AdjustmentFlag adjustment_flag = 1;
   */
  adjustmentFlag: RaiseComplaintAdjustment_AdjustmentFlag;

  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in complaint request.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.ReasonCode adjustment_code = 2;
   */
  adjustmentCode: RaiseComplaintAdjustment_ReasonCode;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.
 * Use `create(RaiseComplaintAdjustmentSchema)` to create a new message.
 */
export const RaiseComplaintAdjustmentSchema: GenMessage<RaiseComplaintAdjustment> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 9);

/**
 * The adjusment flag for raising complaint.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.AdjustmentFlag
 */
export enum RaiseComplaintAdjustment_AdjustmentFlag {
  /**
   * Unspecified adjustment flag.
   *
   * @generated from enum value: ADJUSTMENT_FLAG_UNSPECIFIED = 0;
   */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,

  /**
   * Complaint Raise. This flag maps to the `PBRB` adjustment flag as defined
   * in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RAISE = 1;
   */
  RAISE = 1,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.AdjustmentFlag.
 */
export const RaiseComplaintAdjustment_AdjustmentFlagSchema: GenEnum<RaiseComplaintAdjustment_AdjustmentFlag> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 9, 0);

/**
 * The reason for raising complaint.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.ReasonCode
 */
export enum RaiseComplaintAdjustment_ReasonCode {
  /**
   * Unspecified reason code.
   *
   * @generated from enum value: REASON_CODE_UNSPECIFIED = 0;
   */
  REASON_CODE_UNSPECIFIED = 0,

  /**
   * Customer account has not yet reversed for a declined pay transaction.
   * This reason code maps to the `U005` reason code as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: CUSTOMER_ACCOUNT_NOT_REVERSED = 1;
   */
  CUSTOMER_ACCOUNT_NOT_REVERSED = 1,

  /**
   * Goods / services are not provided for approved transaction.
   * This reason code maps to the `U008` reason code as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: GOODS_SERVICES_NOT_PROVIDED = 2;
   */
  GOODS_SERVICES_NOT_PROVIDED = 2,

  /**
   * Customer account not credited back for declined transaction. This
   * reason code maps to the `U009` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: CUSTOMER_ACCOUNT_NOT_CREDITED_BACK = 3;
   */
  CUSTOMER_ACCOUNT_NOT_CREDITED_BACK = 3,

  /**
   * Beneficiary account is not credited for successful pay transaction. This
   * reason code maps to the `U010` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: BENEFICIARY_ACCOUNT_NOT_CREDITED = 4;
   */
  BENEFICIARY_ACCOUNT_NOT_CREDITED = 4,

  /**
   * Credit not processed for cancelled or returned goods and services.
   * This reason code maps to the `U021` reason code as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: GOODS_SERVICES_CREDIT_NOT_PROCESSED = 5;
   */
  GOODS_SERVICES_CREDIT_NOT_PROCESSED = 5,

  /**
   * Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `U022` reason code as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: MERCHANT_NOT_RECEIVED_CONFIRMATION = 6;
   */
  MERCHANT_NOT_RECEIVED_CONFIRMATION = 6,

  /**
   * Paid by alternate means / Duplicate payment. This reason code maps to the
   * `U023` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PAID_BY_ALTERNATE_MEANS = 7;
   */
  PAID_BY_ALTERNATE_MEANS = 7,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.RaiseComplaintAdjustment.ReasonCode.
 */
export const RaiseComplaintAdjustment_ReasonCodeSchema: GenEnum<RaiseComplaintAdjustment_ReasonCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 9, 1);

/**
 * The adjusment flag and reason code for resolving the complaint.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment
 */
export type ResolveComplaintAdjustment = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment"> & {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in complaint request and `respAdjFlag` in complaint
   * response.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.AdjustmentFlag adjustment_flag = 1;
   */
  adjustmentFlag: ResolveComplaintAdjustment_AdjustmentFlag;

  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in complaint request.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.ReasonCode adjustment_code = 2;
   */
  adjustmentCode: ResolveComplaintAdjustment_ReasonCode;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.
 * Use `create(ResolveComplaintAdjustmentSchema)` to create a new message.
 */
export const ResolveComplaintAdjustmentSchema: GenMessage<ResolveComplaintAdjustment> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 10);

/**
 * The adjusment flag for resolving the complaint.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.AdjustmentFlag
 */
export enum ResolveComplaintAdjustment_AdjustmentFlag {
  /**
   * Unspecified adjustment flag.
   *
   * @generated from enum value: ADJUSTMENT_FLAG_UNSPECIFIED = 0;
   */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,

  /**
   * Debit Reversal Confirmation. This flag maps to the `DRC` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEBIT_REVERSAL_CONFIRMATION = 1;
   */
  DEBIT_REVERSAL_CONFIRMATION = 1,

  /**
   * Return. This flag maps to the `RET` adjustment flag as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: RETURN = 2;
   */
  RETURN = 2,

  /**
   * Refund Reversal Confirmation. This flag maps to the `RRC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: REFUND_REVERSAL_CONFIRMATION = 3;
   */
  REFUND_REVERSAL_CONFIRMATION = 3,

  /**
   * Transaction Credit Confirmation. This flag maps to the `TCC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: TRANSACTION_CREDIT_CONFIRMATION = 4;
   */
  TRANSACTION_CREDIT_CONFIRMATION = 4,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.AdjustmentFlag.
 */
export const ResolveComplaintAdjustment_AdjustmentFlagSchema: GenEnum<ResolveComplaintAdjustment_AdjustmentFlag> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 10, 0);

/**
 * The complaint resolution reason code.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.ReasonCode
 */
export enum ResolveComplaintAdjustment_ReasonCode {
  /**
   * Unspecified reason code.
   *
   * @generated from enum value: REASON_CODE_UNSPECIFIED = 0;
   */
  REASON_CODE_UNSPECIFIED = 0,

  /**
   * Customer account has been reversed online for DRC dispute or beneficiary
   * account has been credited online for TCC dispute. This reason code maps
   * to the `102` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: COMPLAINT_RESOLVED_ONLINE = 1;
   */
  COMPLAINT_RESOLVED_ONLINE = 1,

  /**
   * Customer account has been reversed now or manually post reconciliation
   * for DRC dispute or beneficiary account has been credited now or manually
   * post reconciliation for TCC dispute. This reason code maps to the `103`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: COMPLAINT_RESOLVED_NOW_OR_MANUALLY = 2;
   */
  COMPLAINT_RESOLVED_NOW_OR_MANUALLY = 2,

  /**
   * Online decline response failed. This reason code maps to the
   * `104` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ORIGINAL_TRANSACTION_NOT_DONE = 3;
   */
  ORIGINAL_TRANSACTION_NOT_DONE = 3,

  /**
   * Account closed. This reason code maps to the `114` reason code for
   * RET dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_ACCOUNT_CLOSED = 4;
   */
  RET_ACCOUNT_CLOSED = 4,

  /**
   * Account does not exist. This reason code maps to the `115` reason code
   * for RET dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_ACCOUNT_DOES_NOT_EXIST = 5;
   */
  RET_ACCOUNT_DOES_NOT_EXIST = 5,

  /**
   * Party instructions. This reason code maps to the `116` reason code for
   * RET dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_PARTY_INSTRUCTIONS = 6;
   */
  RET_PARTY_INSTRUCTIONS = 6,

  /**
   * NRI account. This reason code maps to the `117` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_NRI_ACCOUNT = 7;
   */
  RET_NRI_ACCOUNT = 7,

  /**
   * Credit freezed. This reason code maps to the `118` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_CREDIT_FREEZED = 8;
   */
  RET_CREDIT_FREEZED = 8,

  /**
   * Invalid beneficiary details. This reason code maps to the `119` reason
   * code for RET dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_INVALID_BENEFICIARY_DETAILS = 9;
   */
  RET_INVALID_BENEFICIARY_DETAILS = 9,

  /**
   * Any other reason. This reason code maps to the `120` reason code for RET
   * dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_ANY_OTHER_REASON = 10;
   */
  RET_ANY_OTHER_REASON = 10,

  /**
   * Beneficiary bank unable to credit their customer account.
   * This reason code maps to the `1094` reason code for RET dispute as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_BENEFICIARY_CANNOT_CREDIT = 11;
   */
  RET_BENEFICIARY_CANNOT_CREDIT = 11,

  /**
   * Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for Credit
   * adjustment and RET dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RET_MERCHANT_NOT_RECEIVED_CONFIRMATION = 12;
   */
  RET_MERCHANT_NOT_RECEIVED_CONFIRMATION = 12,

  /**
   * Customer account has been credited. This reason code maps to the `501`
   * reason code for Refund reversal confirmation dispute as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: RRC_CUSTOMER_ACCOUNT_CREDITED = 13;
   */
  RRC_CUSTOMER_ACCOUNT_CREDITED = 13,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintAdjustment.ReasonCode.
 */
export const ResolveComplaintAdjustment_ReasonCodeSchema: GenEnum<ResolveComplaintAdjustment_ReasonCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 10, 1);

/**
 * The adjusment flag and reason code for raising dispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment
 */
export type RaiseDisputeAdjustment = Message<"google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment"> & {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in dispute request and `respAdjFlag` in dispute
   * response.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.AdjustmentFlag adjustment_flag = 1;
   */
  adjustmentFlag: RaiseDisputeAdjustment_AdjustmentFlag;

  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in dispute request.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.ReasonCode adjustment_code = 2;
   */
  adjustmentCode: RaiseDisputeAdjustment_ReasonCode;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.
 * Use `create(RaiseDisputeAdjustmentSchema)` to create a new message.
 */
export const RaiseDisputeAdjustmentSchema: GenMessage<RaiseDisputeAdjustment> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 11);

/**
 * The adjusment flag for raising dispute.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.AdjustmentFlag
 */
export enum RaiseDisputeAdjustment_AdjustmentFlag {
  /**
   * Unspecified adjustment flag.
   *
   * @generated from enum value: ADJUSTMENT_FLAG_UNSPECIFIED = 0;
   */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,

  /**
   * Chargeback Raise. This flag maps to the `B` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_RAISE = 1;
   */
  CHARGEBACK_RAISE = 1,

  /**
   * Fraud Chargeback Raise. This flag maps to the `FC` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_RAISE = 2;
   */
  FRAUD_CHARGEBACK_RAISE = 2,

  /**
   * Wrong Credit Chargeback Raise. This flag maps to the `WC` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: WRONG_CREDIT_CHARGEBACK_RAISE = 3;
   */
  WRONG_CREDIT_CHARGEBACK_RAISE = 3,

  /**
   * Deferred Chargeback Raise. This flag maps to the `FB` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_CHARGEBACK_RAISE = 4;
   */
  DEFERRED_CHARGEBACK_RAISE = 4,

  /**
   * Pre-Arbitration Raise. This flag maps to the `P` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_RAISE = 5;
   */
  PRE_ARBITRATION_RAISE = 5,

  /**
   * Deferred Pre-Arbitration Raise. This flag maps to the `FP` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_RAISE = 6;
   */
  DEFERRED_PRE_ARBITRATION_RAISE = 6,

  /**
   * Arbitration Raise. This flag maps to the `AR` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_RAISE = 7;
   */
  ARBITRATION_RAISE = 7,

  /**
   * Deferred Arbitration Raise. This flag maps to the `FAR` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_ARBITRATION_RAISE = 8;
   */
  DEFERRED_ARBITRATION_RAISE = 8,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.AdjustmentFlag.
 */
export const RaiseDisputeAdjustment_AdjustmentFlagSchema: GenEnum<RaiseDisputeAdjustment_AdjustmentFlag> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 11, 0);

/**
 * The reason for raising dispute.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.ReasonCode
 */
export enum RaiseDisputeAdjustment_ReasonCode {
  /**
   * Unspecified reason code.
   *
   * @generated from enum value: REASON_CODE_UNSPECIFIED = 0;
   */
  REASON_CODE_UNSPECIFIED = 0,

  /**
   * Remitter account is debited but beneficiary account is not credited.
   * This reason code maps to the `108` reason code as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED = 1;
   */
  CHARGEBACK_RAISE_REMITTER_DEBITED_BENEFICIARY_NOT_CREDITED = 1,

  /**
   * Remitter bank customer still disputes that beneficiary account is not
   * credited. This reason code maps to the `109` reason code as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 2;
   */
  PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 2,

  /**
   * TCC has been raised but customer still complaining that beneficiary
   * account is not credited. This reason code maps to the `121` reason code
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED = 3;
   */
  DEFERRED_CHARGEBACK_RAISE_BENEFICIARY_NOT_CREDITED = 3,

  /**
   * Customer is still complaining for not crediting the beneficiary
   * customer account. This reason code maps to the `124` reason code as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 4;
   */
  DEFERRED_PRE_ARBITRATION_RAISE_BENEFICIARY_NOT_CREDITED = 4,

  /**
   * Customer is complaining even after raising Deferred Chargeback and
   * Pre-Arbitration on Deferred Chargeback where both have been rejected by
   * beneficiary bank. This reason code maps to the `127` reason code as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED = 5;
   */
  DEFERRED_ARBITRATION_RAISE_DEFERRED_CHARGEBACK_PRE_ARBITRATION_REJECTED = 5,

  /**
   * Chargeback on fraudulent transaction. This reason code maps to the `128`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_ON_FRAUD = 6;
   */
  CHARGEBACK_ON_FRAUD = 6,

  /**
   * Credit not processed for cancelled or returned goods and services. This
   * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: GOODS_SERVICES_CREDIT_NOT_PROCESSED = 7;
   */
  GOODS_SERVICES_CREDIT_NOT_PROCESSED = 7,

  /**
   * Goods and services not as described / defective. This reason code maps to
   * the `1062` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: GOODS_SERVICES_DEFECTIVE = 8;
   */
  GOODS_SERVICES_DEFECTIVE = 8,

  /**
   * Paid by alternate means. This reason code maps to the `1063` reason code
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PAID_BY_ALTERNATE_MEANS = 9;
   */
  PAID_BY_ALTERNATE_MEANS = 9,

  /**
   * Goods or services not provided / not received. This reason code maps to
   * the `1064` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: GOODS_SERVICES_NOT_RECEIVED = 10;
   */
  GOODS_SERVICES_NOT_RECEIVED = 10,

  /**
   * Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for chargeback
   * raise and deferred chargeback raise as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: MERCHANT_NOT_RECEIVED_CONFIRMATION = 11;
   */
  MERCHANT_NOT_RECEIVED_CONFIRMATION = 11,

  /**
   * Transaction not steeled within the specified timeframes. This reason code
   * maps to the `1081` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: TRANSACTION_NOT_STEELED = 12;
   */
  TRANSACTION_NOT_STEELED = 12,

  /**
   * Duplicate / Multiple transaction. This reason code maps to the `1084`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DUPLICATE_TRANSACTION = 13;
   */
  DUPLICATE_TRANSACTION = 13,

  /**
   * Card holder was charged more than the transaction amount.
   * This reason code maps to the `1085` reason code for Chargeback raise
   * dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_CARD_HOLDER_CHARGED_MORE = 14;
   */
  CHARGEBACK_CARD_HOLDER_CHARGED_MORE = 14,

  /**
   * Customer is still claiming that services are not delivered. This reason
   * code maps to the `1097` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED = 15;
   */
  CUSTOMER_CLAIMING_GOODS_SERVICES_NOT_DELIVERED = 15,

  /**
   * Both the parties denied to agree. This reason code maps to the `1100`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PARTIES_DENIED = 16;
   */
  PARTIES_DENIED = 16,

  /**
   * Customer transferred funds to the unintended beneficiary account. This
   * reason code maps to the `WC1` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY = 17;
   */
  FUNDS_TRANSFERRED_TO_UNINTENDED_BENEFICIARY = 17,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.RaiseDisputeAdjustment.ReasonCode.
 */
export const RaiseDisputeAdjustment_ReasonCodeSchema: GenEnum<RaiseDisputeAdjustment_ReasonCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 11, 1);

/**
 * The adjusment flag and reason code for resolving the dispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment
 */
export type ResolveDisputeAdjustment = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment"> & {
  /**
   * Required. The adjustment flag in URCS for the complaint transaction. This
   * maps to `reqAdjFlag` in dispute request and `respAdjFlag` in dispute
   * response.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag adjustment_flag = 1;
   */
  adjustmentFlag: ResolveDisputeAdjustment_AdjustmentFlag;

  /**
   * Required. The adjustment code in URCS for the complaint transaction. This
   * maps to `reqAdjCode` in dispute request.
   *
   * @generated from field: google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode adjustment_code = 2;
   */
  adjustmentCode: ResolveDisputeAdjustment_ReasonCode;
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.
 * Use `create(ResolveDisputeAdjustmentSchema)` to create a new message.
 */
export const ResolveDisputeAdjustmentSchema: GenMessage<ResolveDisputeAdjustment> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 12);

/**
 * The adjusment flag for resolving the dispute.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag
 */
export enum ResolveDisputeAdjustment_AdjustmentFlag {
  /**
   * Unspecified adjustment flag.
   *
   * @generated from enum value: ADJUSTMENT_FLAG_UNSPECIFIED = 0;
   */
  ADJUSTMENT_FLAG_UNSPECIFIED = 0,

  /**
   * Re-presentment Raise. This flag maps to the `R` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RE_PRESENTMENT_RAISE = 1;
   */
  RE_PRESENTMENT_RAISE = 1,

  /**
   * Deferred Re-presentment Raise. This flag maps to the `FR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_RE_PRESENTMENT_RAISE = 2;
   */
  DEFERRED_RE_PRESENTMENT_RAISE = 2,

  /**
   * Chargeback Acceptance. This flag maps to the `A` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_ACCEPTANCE = 3;
   */
  CHARGEBACK_ACCEPTANCE = 3,

  /**
   * Deferred Chargeback Acceptance. This flag maps to the `FA` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_CHARGEBACK_ACCEPTANCE = 4;
   */
  DEFERRED_CHARGEBACK_ACCEPTANCE = 4,

  /**
   * Pre-Arbitration Acceptance. This flag maps to the `AP` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_ACCEPTANCE = 5;
   */
  PRE_ARBITRATION_ACCEPTANCE = 5,

  /**
   * Deferred Pre-Arbitration Acceptance. This flag maps to the `FAP`
   * adjustment flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_ACCEPTANCE = 6;
   */
  DEFERRED_PRE_ARBITRATION_ACCEPTANCE = 6,

  /**
   * Pre-Arbitration Declined. This flag maps to the `PR` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_DECLINED = 7;
   */
  PRE_ARBITRATION_DECLINED = 7,

  /**
   * Deferred Pre-Arbitration Declined. This flag maps to the `FPR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_DECLINED = 8;
   */
  DEFERRED_PRE_ARBITRATION_DECLINED = 8,

  /**
   * Arbitration Acceptance. This flag maps to the `ACA` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_ACCEPTANCE = 9;
   */
  ARBITRATION_ACCEPTANCE = 9,

  /**
   * Arbitration Continuation. This flag maps to the `ACC` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_CONTINUATION = 10;
   */
  ARBITRATION_CONTINUATION = 10,

  /**
   * Arbitration Withdrawn. This flag maps to the `ACW` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_WITHDRAWN = 11;
   */
  ARBITRATION_WITHDRAWN = 11,

  /**
   * Arbitration Verdict. This flag maps to the `ACV` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_VERDICT = 12;
   */
  ARBITRATION_VERDICT = 12,

  /**
   * Credit Adjustment. This flag maps to the `C` adjustment flag as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT = 13;
   */
  CREDIT_ADJUSTMENT = 13,

  /**
   * Fraud Chargeback Representment. This flag maps to the `FCR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_REPRESENTMENT = 14;
   */
  FRAUD_CHARGEBACK_REPRESENTMENT = 14,

  /**
   * Fraud Chargeback Accept. This flag maps to the `FCA` adjustment flag
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_ACCEPT = 15;
   */
  FRAUD_CHARGEBACK_ACCEPT = 15,

  /**
   * Wrong Credit Representment. This flag maps to the `WR` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: WRONG_CREDIT_REPRESENTMENT = 16;
   */
  WRONG_CREDIT_REPRESENTMENT = 16,

  /**
   * Wrong Credit Chargeback Acceptance. This flag maps to the `WA` adjustment
   * flag as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: WRONG_CREDIT_CHARGEBACK_ACCEPTANCE = 17;
   */
  WRONG_CREDIT_CHARGEBACK_ACCEPTANCE = 17,

  /**
   * Manual Adjustment. This flag maps to the `MA` adjustment flag as defined
   * in NPCI's `UDIR` specification.
   *
   * @generated from enum value: MANUAL_ADJUSTMENT = 18;
   */
  MANUAL_ADJUSTMENT = 18,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.AdjustmentFlag.
 */
export const ResolveDisputeAdjustment_AdjustmentFlagSchema: GenEnum<ResolveDisputeAdjustment_AdjustmentFlag> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 12, 0);

/**
 * The dispute resolution reason code.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode
 */
export enum ResolveDisputeAdjustment_ReasonCode {
  /**
   * Unspecified reason code.
   *
   * @generated from enum value: REASON_CODE_UNSPECIFIED = 0;
   */
  REASON_CODE_UNSPECIFIED = 0,

  /**
   * Beneficiary bank unable to credit their customer account for Chargeback
   * Acceptance dispute or duplicate processing for Pre Arbitration Acceptance
   * dispute. This reason code maps to the `111` reason code as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS = 1;
   */
  CHARGEBACK_BENEFICIARY_CANNOT_CREDIT_OR_PRE_ARBITRATION_DUPLICATE_PROCESS = 1,

  /**
   * Beneficiary account has been credited online. This reason code maps to
   * the `112` reason code for Pre-arbitration declined dispute as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE = 3;
   */
  PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_ONLINE = 3,

  /**
   * Beneficiary account has been credited manually post reconciliation. This
   * reason code maps to the `113` reason code for Pre-arbitration declined
   * dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY = 4;
   */
  PRE_ARBITRATION_DECLINED_BENEFICIARY_CREDITED_MANUALLY = 4,

  /**
   * Customer account is not credited, TCC raised inadvertently. This reason
   * code maps to the `122` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED = 5;
   */
  DEFERRED_CHARGEBACK_ACCEPTANCE_ACCOUNT_NOT_CREDITED_TCC_RAISED = 5,

  /**
   * Customer account is credited successfully and TCC raised accordingly.
   * This reason code maps to the `123` reason code as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED = 6;
   */
  DEFERRED_RE_PRESENTMENT_RAISE_ACCOUNT_CREDITED_TCC_RAISED = 6,

  /**
   * Customer account is not credited, TCC and Re-Presentment raised
   * inadvertently. This reason code maps to the `125` reason code as defined
   * in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED = 7;
   */
  DEFERRED_PRE_ARBITRATION_ACCEPTANCE_ACCOUNT_NOT_CREDITED = 7,

  /**
   * Customer account is credited successfully and TCC and Re-Presentment
   * raised accordingly. This reason code maps to the `126` reason code as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED = 8;
   */
  DEFERRED_PRE_ARBITRATION_DECLINED_ACCOUNT_CREDITED = 8,

  /**
   * Amount has been recovered successfully from the fraudulent customer
   * account. This reason code maps to the `129` reason code as defined
   * in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT = 9;
   */
  FRAUD_CHARGEBACK_ACCEPT_AMOUNT_RECOVERED_FROM_FRAUDULENT_ACCOUNT = 9,

  /**
   * Lien marked however, customer account is not having sufficient balance to
   * debit. This reason code maps to the `130` reason code for
   * Fraud chargeback representment dispute as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 10;
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 10,

  /**
   * FIR Copy not provided for the disputed transaction. This reason code maps
   * to the `131` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED = 11;
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_FIR_NOT_PROVIDED = 11,

  /**
   * Other reason for Fraud chargeback representment dispute. This reason code
   * maps to the `132` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS = 12;
   */
  FRAUD_CHARGEBACK_REPRESENTMENT_REASON_OTHERS = 12,

  /**
   * Beneficiary account credited online. This reason code maps to the `208`
   * reason code for Re-presentment raise dispute as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE = 13;
   */
  RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_ONLINE = 13,

  /**
   * Beneficiary account credited manually post reconciliation. This reason
   * code maps to the `209` reason code for Re-presentment raise dispute as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY = 14;
   */
  RE_PRESENTMENT_RAISE_BENEFICIARY_CREDITED_MANUALLY = 14,

  /**
   * Credit not processed for cancelled or returned goods and services. This
   * reason code maps to the `1061` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED = 15;
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_CREDIT_NOT_PROCESSED = 15,

  /**
   * Goods and Services not as described / defective. This reason code maps to
   * the `1062` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16;
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_DEFECTIVE = 16,

  /**
   * Paid by alternate means. This reason code maps to the `1063` reason code
   * as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS = 17;
   */
  CREDIT_ADJUSTMENT_PAID_BY_ALTERNATE_MEANS = 17,

  /**
   * Goods or Services Not Provided / Not Received. This reason code maps to
   * the `1064` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED = 18;
   */
  CREDIT_ADJUSTMENT_GOODS_SERVICES_NOT_RECEIVED = 18,

  /**
   * Account debited but transaction confirmation not received at merchant
   * location. This reason code maps to the `1065` reason code for Credit
   * adjustment as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION = 19;
   */
  CREDIT_ADJUSTMENT_MERCHANT_NOT_RECEIVED_CONFIRMATION = 19,

  /**
   * Duplicate /Multiple Transaction. This reason code maps to the `1084`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20;
   */
  CREDIT_ADJUSTMENT_DUPLICATE_TRANSACTION = 20,

  /**
   * Other reason for Credit adjustment. This reason code maps to the `1090`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_REASON_OTHERS = 21;
   */
  CREDIT_ADJUSTMENT_REASON_OTHERS = 21,

  /**
   * Non Matching account number. This reason code maps to the `1091`
   * reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22;
   */
  CREDIT_ADJUSTMENT_NON_MATCHING_ACCOUNT_NUMBER = 22,

  /**
   * Card holder was charged more than the transaction amount.
   * This reason code maps to the `1092` reason code as defined in NPCI's
   * `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE = 23;
   */
  CREDIT_ADJUSTMENT_CARD_HOLDER_CHARGED_MORE = 23,

  /**
   * Credit not Processed. This reason code maps to the `1093` reason code as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24;
   */
  CREDIT_ADJUSTMENT_CREDIT_NOT_PROCESSED = 24,

  /**
   * Beneficiary bank unable to credit their customer account. This reason
   * code maps to the `1094` reason code for Credit Adjustment dispute as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT = 25;
   */
  CREDIT_ADJUSTMENT_BENEFICIARY_CANNOT_CREDIT = 25,

  /**
   * Merchant was unable to provide the service. This reason code maps to the
   * `1095` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE = 26;
   */
  CHARGEBACK_ACCEPTANCE_MERCHANT_CANNOT_PROVIDE_SERVICE = 26,

  /**
   * Services/Goods provided see the supporting document. This reason code
   * maps to the `1096` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED = 27;
   */
  RE_PRESENTMENT_RAISE_GOODS_SERVICES_PROVIDED = 27,

  /**
   * Services provided later see supporting documents. This reason code maps
   * to the `1098` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER = 28;
   */
  PRE_ARBITRATION_DECLINED_SERVICES_PROVIDED_LATER = 28,

  /**
   * Services not provided by the merchant. This reason code maps to the
   * `1099` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT = 29;
   */
  PRE_ARBITRATION_ACCEPTANCE_SERVICES_NOT_PROVIDED_BY_MERCHANT = 29,

  /**
   * Illegible Fulfilment. This reason code maps to the `1101` reason code for
   * arbitration acceptance dispute as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT = 30;
   */
  ARBITRATION_ACCEPTANCE_ILLEGIBLE_FULFILMENT = 30,

  /**
   * Customer has still not received the service. This reason code maps to the
   * `1102` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE = 31;
   */
  ARBITRATION_CONTINUATION_CUSTOMER_STILL_NOT_RECEIVED_SERVICE = 31,

  /**
   * Customer has received the service later. This reason code maps to the
   * `1103` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER = 32;
   */
  ARBITRATION_WITHDRAWN_CUSTOMER_RECEIVED_SERVICE_LATER = 32,

  /**
   * Panel will give the verdict. This reason code maps to the `1104` reason
   * code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ARBITRATION_VERDICT_PANEL_VERDICT = 33;
   */
  ARBITRATION_VERDICT_PANEL_VERDICT = 33,

  /**
   * Manual adjustment. This reason code maps to the `2001` reason code as
   * defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: MANUAL_ADJUSTMENT_REASON = 34;
   */
  MANUAL_ADJUSTMENT_REASON = 34,

  /**
   * Attributing to the Customer. This reason code maps to the `AC` reason
   * code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: ATTRIBUTING_CUSTOMER = 35;
   */
  ATTRIBUTING_CUSTOMER = 35,

  /**
   * Attributing to the Technical issue at bank/aggregator/merchant. This
   * reason code maps to the `AT` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: ATTRIBUTING_TECHNICAL_ISSUE = 36;
   */
  ATTRIBUTING_TECHNICAL_ISSUE = 36,

  /**
   * Amount has been recovered successfully from the unintended customer
   * account. This reason code maps to the `WC2` reason code as defined in
   * NPCI's `UDIR` specification.
   *
   * @generated from enum value: WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED = 37;
   */
  WRONG_CREDIT_CHARGEBACK_ACCEPTANCE_AMOUNT_RECOVERED = 37,

  /**
   * Lien marked however customer account is not having sufficient balance to
   * debit the customer account. This reason code maps to the `WC3` reason
   * code for Wrong credit representment dispute as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 38;
   */
  WRONG_CREDIT_REPRESENTMENT_LIEN_MARKED_INSUFFICIENT_BALANCE = 38,

  /**
   * Customer is not accessible for obtaining debit confirmation. This reason
   * code maps to the `WC4` reason code as defined in NPCI's `UDIR`
   * specification.
   *
   * @generated from enum value: WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE = 39;
   */
  WRONG_CREDIT_REPRESENTMENT_CUSTOMER_INACCESSIBLE = 39,

  /**
   * Other reason for Wrong credit representment. This reason code maps to the
   * `WC5` reason code as defined in NPCI's `UDIR` specification.
   *
   * @generated from enum value: WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS = 40;
   */
  WRONG_CREDIT_REPRESENTMENT_REASON_OTHERS = 40,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeAdjustment.ReasonCode.
 */
export const ResolveDisputeAdjustment_ReasonCodeSchema: GenEnum<ResolveDisputeAdjustment_ReasonCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 12, 1);

/**
 * Metadata for CreateComplaint.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata
 */
export type CreateComplaintMetadata = Message<"google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata"> & {
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata.
 * Use `create(CreateComplaintMetadataSchema)` to create a new message.
 */
export const CreateComplaintMetadataSchema: GenMessage<CreateComplaintMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 13);

/**
 * Metadata for ResolveComplaint.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata
 */
export type ResolveComplaintMetadata = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata"> & {
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata.
 * Use `create(ResolveComplaintMetadataSchema)` to create a new message.
 */
export const ResolveComplaintMetadataSchema: GenMessage<ResolveComplaintMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 14);

/**
 * Metadata for CreateDispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata
 */
export type CreateDisputeMetadata = Message<"google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata"> & {
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata.
 * Use `create(CreateDisputeMetadataSchema)` to create a new message.
 */
export const CreateDisputeMetadataSchema: GenMessage<CreateDisputeMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 15);

/**
 * Metadata for ResolveDispute.
 *
 * @generated from message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata
 */
export type ResolveDisputeMetadata = Message<"google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata"> & {
};

/**
 * Describes the message google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata.
 * Use `create(ResolveDisputeMetadataSchema)` to create a new message.
 */
export const ResolveDisputeMetadataSchema: GenMessage<ResolveDisputeMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 16);

/**
 * The subtype of the complaint or dispute.
 *
 * @generated from enum google.cloud.paymentgateway.issuerswitch.v1.TransactionSubType
 */
export enum TransactionSubType {
  /**
   * Unspecified transaction subtype.
   *
   * @generated from enum value: TRANSACTION_SUB_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Beneficiary transaction subtype.
   *
   * @generated from enum value: TRANSACTION_SUB_TYPE_BENEFICIARY = 1;
   */
  BENEFICIARY = 1,

  /**
   * Remitter transaction subtype.
   *
   * @generated from enum value: TRANSACTION_SUB_TYPE_REMITTER = 2;
   */
  REMITTER = 2,
}

/**
 * Describes the enum google.cloud.paymentgateway.issuerswitch.v1.TransactionSubType.
 */
export const TransactionSubTypeSchema: GenEnum<TransactionSubType> = /*@__PURE__*/
  enumDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 0);

/**
 * Creates and resolves UPI complaints and disputes.
 *
 * @generated from service google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions
 */
export const IssuerSwitchResolutions: GenService<{
  /**
   * Create a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   *
   * @generated from rpc google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions.CreateComplaint
   */
  createComplaint: {
    methodKind: "unary";
    input: typeof CreateComplaintRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Resolve a complaint. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveComplaintMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveComplaintMetadata]
   * - `response`:
   * [Complaint][google.cloud.paymentgateway.issuerswitch.v1.Complaint]
   *
   * @generated from rpc google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions.ResolveComplaint
   */
  resolveComplaint: {
    methodKind: "unary";
    input: typeof ResolveComplaintRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Create a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [CreateDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.CreateDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   *
   * @generated from rpc google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions.CreateDispute
   */
  createDispute: {
    methodKind: "unary";
    input: typeof CreateDisputeRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Resolve a dispute. The returned `Operation` type has
   * the following method-specific fields:
   *
   * - `metadata`:
   * [ResolveDisputeMetadata][google.cloud.paymentgateway.issuerswitch.v1.ResolveDisputeMetadata]
   * - `response`:
   * [Dispute][google.cloud.paymentgateway.issuerswitch.v1.Dispute]
   *
   * @generated from rpc google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchResolutions.ResolveDispute
   */
  resolveDispute: {
    methodKind: "unary";
    input: typeof ResolveDisputeRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_paymentgateway_issuerswitch_v1_resolutions, 0);

