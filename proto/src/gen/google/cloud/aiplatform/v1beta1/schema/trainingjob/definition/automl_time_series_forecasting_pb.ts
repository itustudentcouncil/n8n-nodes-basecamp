// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1beta1/schema/trainingjob/definition/automl_time_series_forecasting.proto (package google.cloud.aiplatform.v1beta1.schema.trainingjob.definition, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ExportEvaluatedDataItemsConfig } from "./export_evaluated_data_items_config_pb";
import { file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_export_evaluated_data_items_config } from "./export_evaluated_data_items_config_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1beta1/schema/trainingjob/definition/automl_time_series_forecasting.proto.
 */
export const file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting: GenFile = /*@__PURE__*/
  fileDesc("CmJnb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MWJldGExL3NjaGVtYS90cmFpbmluZ2pvYi9kZWZpbml0aW9uL2F1dG9tbF90aW1lX3Nlcmllc19mb3JlY2FzdGluZy5wcm90bxI9Z29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5zY2hlbWEudHJhaW5pbmdqb2IuZGVmaW5pdGlvbiLnAQoRQXV0b01sRm9yZWNhc3RpbmcSZgoGaW5wdXRzGAEgASgLMlYuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5zY2hlbWEudHJhaW5pbmdqb2IuZGVmaW5pdGlvbi5BdXRvTWxGb3JlY2FzdGluZ0lucHV0cxJqCghtZXRhZGF0YRgCIAEoCzJYLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuc2NoZW1hLnRyYWluaW5nam9iLmRlZmluaXRpb24uQXV0b01sRm9yZWNhc3RpbmdNZXRhZGF0YSL3DgoXQXV0b01sRm9yZWNhc3RpbmdJbnB1dHMSFQoNdGFyZ2V0X2NvbHVtbhgBIAEoCRIlCh10aW1lX3Nlcmllc19pZGVudGlmaWVyX2NvbHVtbhgCIAEoCRITCgt0aW1lX2NvbHVtbhgDIAEoCRJ+Cg90cmFuc2Zvcm1hdGlvbnMYBCADKAsyZS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLnNjaGVtYS50cmFpbmluZ2pvYi5kZWZpbml0aW9uLkF1dG9NbEZvcmVjYXN0aW5nSW5wdXRzLlRyYW5zZm9ybWF0aW9uEh4KFm9wdGltaXphdGlvbl9vYmplY3RpdmUYBSABKAkSJQoddHJhaW5fYnVkZ2V0X21pbGxpX25vZGVfaG91cnMYBiABKAMSFQoNd2VpZ2h0X2NvbHVtbhgHIAEoCRIlCh10aW1lX3Nlcmllc19hdHRyaWJ1dGVfY29sdW1ucxgTIAMoCRInCh91bmF2YWlsYWJsZV9hdF9mb3JlY2FzdF9jb2x1bW5zGBQgAygJEiUKHWF2YWlsYWJsZV9hdF9mb3JlY2FzdF9jb2x1bW5zGBUgAygJEnwKEGRhdGFfZ3JhbnVsYXJpdHkYFiABKAsyYi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLnNjaGVtYS50cmFpbmluZ2pvYi5kZWZpbml0aW9uLkF1dG9NbEZvcmVjYXN0aW5nSW5wdXRzLkdyYW51bGFyaXR5EhgKEGZvcmVjYXN0X2hvcml6b24YFyABKAMSFgoOY29udGV4dF93aW5kb3cYGCABKAMSiQEKImV4cG9ydF9ldmFsdWF0ZWRfZGF0YV9pdGVtc19jb25maWcYDyABKAsyXS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLnNjaGVtYS50cmFpbmluZ2pvYi5kZWZpbml0aW9uLkV4cG9ydEV2YWx1YXRlZERhdGFJdGVtc0NvbmZpZxIRCglxdWFudGlsZXMYECADKAESGgoSdmFsaWRhdGlvbl9vcHRpb25zGBEgASgJEh4KFmFkZGl0aW9uYWxfZXhwZXJpbWVudHMYGSADKAka+QcKDlRyYW5zZm9ybWF0aW9uEogBCgRhdXRvGAEgASgLMnguZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5zY2hlbWEudHJhaW5pbmdqb2IuZGVmaW5pdGlvbi5BdXRvTWxGb3JlY2FzdGluZ0lucHV0cy5UcmFuc2Zvcm1hdGlvbi5BdXRvVHJhbnNmb3JtYXRpb25IABKOAQoHbnVtZXJpYxgCIAEoCzJ7Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuc2NoZW1hLnRyYWluaW5nam9iLmRlZmluaXRpb24uQXV0b01sRm9yZWNhc3RpbmdJbnB1dHMuVHJhbnNmb3JtYXRpb24uTnVtZXJpY1RyYW5zZm9ybWF0aW9uSAASlgEKC2NhdGVnb3JpY2FsGAMgASgLMn8uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5zY2hlbWEudHJhaW5pbmdqb2IuZGVmaW5pdGlvbi5BdXRvTWxGb3JlY2FzdGluZ0lucHV0cy5UcmFuc2Zvcm1hdGlvbi5DYXRlZ29yaWNhbFRyYW5zZm9ybWF0aW9uSAASkgEKCXRpbWVzdGFtcBgEIAEoCzJ9Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuc2NoZW1hLnRyYWluaW5nam9iLmRlZmluaXRpb24uQXV0b01sRm9yZWNhc3RpbmdJbnB1dHMuVHJhbnNmb3JtYXRpb24uVGltZXN0YW1wVHJhbnNmb3JtYXRpb25IABKIAQoEdGV4dBgFIAEoCzJ4Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuc2NoZW1hLnRyYWluaW5nam9iLmRlZmluaXRpb24uQXV0b01sRm9yZWNhc3RpbmdJbnB1dHMuVHJhbnNmb3JtYXRpb24uVGV4dFRyYW5zZm9ybWF0aW9uSAAaKQoSQXV0b1RyYW5zZm9ybWF0aW9uEhMKC2NvbHVtbl9uYW1lGAEgASgJGiwKFU51bWVyaWNUcmFuc2Zvcm1hdGlvbhITCgtjb2x1bW5fbmFtZRgBIAEoCRowChlDYXRlZ29yaWNhbFRyYW5zZm9ybWF0aW9uEhMKC2NvbHVtbl9uYW1lGAEgASgJGkMKF1RpbWVzdGFtcFRyYW5zZm9ybWF0aW9uEhMKC2NvbHVtbl9uYW1lGAEgASgJEhMKC3RpbWVfZm9ybWF0GAIgASgJGikKElRleHRUcmFuc2Zvcm1hdGlvbhITCgtjb2x1bW5fbmFtZRgBIAEoCUIXChV0cmFuc2Zvcm1hdGlvbl9kZXRhaWwaLQoLR3JhbnVsYXJpdHkSDAoEdW5pdBgBIAEoCRIQCghxdWFudGl0eRgCIAEoAyJAChlBdXRvTWxGb3JlY2FzdGluZ01ldGFkYXRhEiMKG3RyYWluX2Nvc3RfbWlsbGlfbm9kZV9ob3VycxgBIAEoA0KGAwpBY29tLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuc2NoZW1hLnRyYWluaW5nam9iLmRlZmluaXRpb25CFkF1dG9NTEZvcmVjYXN0aW5nUHJvdG9QAVphY2xvdWQuZ29vZ2xlLmNvbS9nby9haXBsYXRmb3JtL2FwaXYxYmV0YTEvc2NoZW1hL3RyYWluaW5nam9iL2RlZmluaXRpb24vZGVmaW5pdGlvbnBiO2RlZmluaXRpb25wYqoCPUdvb2dsZS5DbG91ZC5BSVBsYXRmb3JtLlYxQmV0YTEuU2NoZW1hLlRyYWluaW5nSm9iLkRlZmluaXRpb27KAj1Hb29nbGVcQ2xvdWRcQUlQbGF0Zm9ybVxWMWJldGExXFNjaGVtYVxUcmFpbmluZ0pvYlxEZWZpbml0aW9u6gJDR29vZ2xlOjpDbG91ZDo6QUlQbGF0Zm9ybTo6VjFiZXRhMTo6U2NoZW1hOjpUcmFpbmluZ0pvYjo6RGVmaW5pdGlvbmIGcHJvdG8z", [file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_export_evaluated_data_items_config]);

/**
 * A TrainingJob that trains and uploads an AutoML Forecasting Model.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecasting
 */
export type AutoMlForecasting = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecasting"> & {
  /**
   * The input parameters of this TrainingJob.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs inputs = 1;
   */
  inputs?: AutoMlForecastingInputs;

  /**
   * The metadata information.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingMetadata metadata = 2;
   */
  metadata?: AutoMlForecastingMetadata;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecasting.
 * Use `create(AutoMlForecastingSchema)` to create a new message.
 */
export const AutoMlForecastingSchema: GenMessage<AutoMlForecasting> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 0);

/**
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs
 */
export type AutoMlForecastingInputs = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs"> & {
  /**
   * The name of the column that the model is to predict.
   *
   * @generated from field: string target_column = 1;
   */
  targetColumn: string;

  /**
   * The name of the column that identifies the time series.
   *
   * @generated from field: string time_series_identifier_column = 2;
   */
  timeSeriesIdentifierColumn: string;

  /**
   * The name of the column that identifies time order in the time series.
   *
   * @generated from field: string time_column = 3;
   */
  timeColumn: string;

  /**
   * Each transformation will apply transform function to given input column.
   * And the result will be used for training.
   * When creating transformation for BigQuery Struct column, the column should
   * be flattened using "." as the delimiter.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation transformations = 4;
   */
  transformations: AutoMlForecastingInputs_Transformation[];

  /**
   * Objective function the model is optimizing towards. The training process
   * creates a model that optimizes the value of the objective
   * function over the validation set.
   *
   * The supported optimization objectives:
   *
   *   * "minimize-rmse" (default) - Minimize root-mean-squared error (RMSE).
   *
   *   * "minimize-mae" - Minimize mean-absolute error (MAE).
   *
   *   * "minimize-rmsle" - Minimize root-mean-squared log error (RMSLE).
   *
   *   * "minimize-rmspe" - Minimize root-mean-squared percentage error (RMSPE).
   *
   *   * "minimize-wape-mae" - Minimize the combination of weighted absolute
   *     percentage error (WAPE) and mean-absolute-error (MAE).
   *
   *   * "minimize-quantile-loss" - Minimize the quantile loss at the quantiles
   *     defined in `quantiles`.
   *
   * @generated from field: string optimization_objective = 5;
   */
  optimizationObjective: string;

  /**
   * Required. The train budget of creating this model, expressed in milli node
   * hours i.e. 1,000 value in this field means 1 node hour.
   *
   * The training cost of the model will not exceed this budget. The final cost
   * will be attempted to be close to the budget, though may end up being (even)
   * noticeably smaller - at the backend's discretion. This especially may
   * happen when further model training ceases to provide any improvements.
   *
   * If the budget is set to a value known to be insufficient to train a
   * model for the given dataset, the training won't be attempted and
   * will error.
   *
   * The train budget must be between 1,000 and 72,000 milli node hours,
   * inclusive.
   *
   * @generated from field: int64 train_budget_milli_node_hours = 6;
   */
  trainBudgetMilliNodeHours: bigint;

  /**
   * Column name that should be used as the weight column.
   * Higher values in this column give more importance to the row
   * during model training. The column must have numeric values between 0 and
   * 10000 inclusively; 0 means the row is ignored for training. If weight
   * column field is not set, then all rows are assumed to have equal weight
   * of 1.
   *
   * @generated from field: string weight_column = 7;
   */
  weightColumn: string;

  /**
   * Column names that should be used as attribute columns.
   * The value of these columns does not vary as a function of time.
   * For example, store ID or item color.
   *
   * @generated from field: repeated string time_series_attribute_columns = 19;
   */
  timeSeriesAttributeColumns: string[];

  /**
   * Names of columns that are unavailable when a forecast is requested.
   * This column contains information for the given entity (identified
   * by the time_series_identifier_column) that is unknown before the forecast
   * For example, actual weather on a given day.
   *
   * @generated from field: repeated string unavailable_at_forecast_columns = 20;
   */
  unavailableAtForecastColumns: string[];

  /**
   * Names of columns that are available and provided when a forecast
   * is requested. These columns
   * contain information for the given entity (identified by the
   * time_series_identifier_column column) that is known at forecast.
   * For example, predicted weather for a specific day.
   *
   * @generated from field: repeated string available_at_forecast_columns = 21;
   */
  availableAtForecastColumns: string[];

  /**
   * Expected difference in time granularity between rows in the data.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Granularity data_granularity = 22;
   */
  dataGranularity?: AutoMlForecastingInputs_Granularity;

  /**
   * The amount of time into the future for which forecasted values for the
   * target are returned. Expressed in number of units defined by the
   * `data_granularity` field.
   *
   * @generated from field: int64 forecast_horizon = 23;
   */
  forecastHorizon: bigint;

  /**
   * The amount of time into the past training and prediction data is used
   * for model training and prediction respectively. Expressed in number of
   * units defined by the `data_granularity` field.
   *
   * @generated from field: int64 context_window = 24;
   */
  contextWindow: bigint;

  /**
   * Configuration for exporting test set predictions to a BigQuery table. If
   * this configuration is absent, then the export is not performed.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.ExportEvaluatedDataItemsConfig export_evaluated_data_items_config = 15;
   */
  exportEvaluatedDataItemsConfig?: ExportEvaluatedDataItemsConfig;

  /**
   * Quantiles to use for minimize-quantile-loss `optimization_objective`. Up to
   * 5 quantiles are allowed of values between 0 and 1, exclusive. Required if
   * the value of optimization_objective is minimize-quantile-loss. Represents
   * the percent quantiles to use for that objective. Quantiles must be unique.
   *
   * @generated from field: repeated double quantiles = 16;
   */
  quantiles: number[];

  /**
   * Validation options for the data validation component. The available options
   * are:
   *
   *   * "fail-pipeline" - default, will validate against the validation and
   *      fail the pipeline if it fails.
   *
   *   * "ignore-validation" - ignore the results of the validation and continue
   *
   * @generated from field: string validation_options = 17;
   */
  validationOptions: string;

  /**
   * Additional experiment flags for the time series forcasting training.
   *
   * @generated from field: repeated string additional_experiments = 25;
   */
  additionalExperiments: string[];
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.
 * Use `create(AutoMlForecastingInputsSchema)` to create a new message.
 */
export const AutoMlForecastingInputsSchema: GenMessage<AutoMlForecastingInputs> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1);

/**
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation
 */
export type AutoMlForecastingInputs_Transformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation"> & {
  /**
   * The transformation that the training pipeline will apply to the input
   * columns.
   *
   * @generated from oneof google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.transformation_detail
   */
  transformationDetail: {
    /**
     * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.AutoTransformation auto = 1;
     */
    value: AutoMlForecastingInputs_Transformation_AutoTransformation;
    case: "auto";
  } | {
    /**
     * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.NumericTransformation numeric = 2;
     */
    value: AutoMlForecastingInputs_Transformation_NumericTransformation;
    case: "numeric";
  } | {
    /**
     * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.CategoricalTransformation categorical = 3;
     */
    value: AutoMlForecastingInputs_Transformation_CategoricalTransformation;
    case: "categorical";
  } | {
    /**
     * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TimestampTransformation timestamp = 4;
     */
    value: AutoMlForecastingInputs_Transformation_TimestampTransformation;
    case: "timestamp";
  } | {
    /**
     * @generated from field: google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TextTransformation text = 5;
     */
    value: AutoMlForecastingInputs_Transformation_TextTransformation;
    case: "text";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.
 * Use `create(AutoMlForecastingInputs_TransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_TransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0);

/**
 * Training pipeline will infer the proper transformation based on the
 * statistic of dataset.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.AutoTransformation
 */
export type AutoMlForecastingInputs_Transformation_AutoTransformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.AutoTransformation"> & {
  /**
   * @generated from field: string column_name = 1;
   */
  columnName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.AutoTransformation.
 * Use `create(AutoMlForecastingInputs_Transformation_AutoTransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_Transformation_AutoTransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation_AutoTransformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0, 0);

/**
 * Training pipeline will perform following transformation functions.
 *
 * *  The value converted to float32.
 *
 * *  The z_score of the value.
 *
 * *  log(value+1) when the value is greater than or equal to 0. Otherwise,
 *    this transformation is not applied and the value is considered a
 *    missing value.
 *
 * *  z_score of log(value+1) when the value is greater than or equal to 0.
 *    Otherwise, this transformation is not applied and the value is
 *    considered a missing value.
 *
 * *  A boolean value that indicates whether the value is valid.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.NumericTransformation
 */
export type AutoMlForecastingInputs_Transformation_NumericTransformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.NumericTransformation"> & {
  /**
   * @generated from field: string column_name = 1;
   */
  columnName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.NumericTransformation.
 * Use `create(AutoMlForecastingInputs_Transformation_NumericTransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_Transformation_NumericTransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation_NumericTransformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0, 1);

/**
 * Training pipeline will perform following transformation functions.
 *
 * *  The categorical string as is--no change to case, punctuation,
 *    spelling, tense, and so on.
 *
 * *  Convert the category name to a dictionary lookup index and generate an
 *    embedding for each index.
 *
 * *  Categories that appear less than 5 times in the training dataset are
 *    treated as the "unknown" category. The "unknown" category gets its own
 *    special lookup index and resulting embedding.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.CategoricalTransformation
 */
export type AutoMlForecastingInputs_Transformation_CategoricalTransformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.CategoricalTransformation"> & {
  /**
   * @generated from field: string column_name = 1;
   */
  columnName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.CategoricalTransformation.
 * Use `create(AutoMlForecastingInputs_Transformation_CategoricalTransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_Transformation_CategoricalTransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation_CategoricalTransformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0, 2);

/**
 * Training pipeline will perform following transformation functions.
 *
 * *  Apply the transformation functions for Numerical columns.
 *
 * *  Determine the year, month, day,and weekday. Treat each value from the
 *    timestamp as a Categorical column.
 *
 * *  Invalid numerical values (for example, values that fall outside of a
 *    typical timestamp range, or are extreme values) receive no special
 *    treatment and are not removed.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TimestampTransformation
 */
export type AutoMlForecastingInputs_Transformation_TimestampTransformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TimestampTransformation"> & {
  /**
   * @generated from field: string column_name = 1;
   */
  columnName: string;

  /**
   * The format in which that time field is expressed. The time_format must
   * either be one of:
   *
   * * `unix-seconds`
   *
   * * `unix-milliseconds`
   *
   * * `unix-microseconds`
   *
   * * `unix-nanoseconds`
   *
   * (for respectively number of seconds, milliseconds, microseconds and
   * nanoseconds since start of the Unix epoch);
   *
   * or be written in `strftime` syntax.
   *
   * If time_format is not set, then the
   * default format is RFC 3339 `date-time` format, where
   * `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z)
   *
   * @generated from field: string time_format = 2;
   */
  timeFormat: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TimestampTransformation.
 * Use `create(AutoMlForecastingInputs_Transformation_TimestampTransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_Transformation_TimestampTransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation_TimestampTransformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0, 3);

/**
 * Training pipeline will perform following transformation functions.
 *
 * *  The text as is--no change to case, punctuation, spelling, tense, and
 *    so on.
 *
 * *  Convert the category name to a dictionary lookup index and generate an
 *    embedding for each index.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TextTransformation
 */
export type AutoMlForecastingInputs_Transformation_TextTransformation = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TextTransformation"> & {
  /**
   * @generated from field: string column_name = 1;
   */
  columnName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Transformation.TextTransformation.
 * Use `create(AutoMlForecastingInputs_Transformation_TextTransformationSchema)` to create a new message.
 */
export const AutoMlForecastingInputs_Transformation_TextTransformationSchema: GenMessage<AutoMlForecastingInputs_Transformation_TextTransformation> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 0, 4);

/**
 * A duration of time expressed in time granularity units.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Granularity
 */
export type AutoMlForecastingInputs_Granularity = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Granularity"> & {
  /**
   * The time granularity unit of this time period.
   * The supported units are:
   *
   *  * "minute"
   *
   *  * "hour"
   *
   *  * "day"
   *
   *  * "week"
   *
   *  * "month"
   *
   *  * "year"
   *
   * @generated from field: string unit = 1;
   */
  unit: string;

  /**
   * The number of granularity_units between data points in the training
   * data. If `granularity_unit` is `minute`,
   * can be 1, 5, 10, 15, or 30. For all other values of `granularity_unit`,
   * must be 1.
   *
   * @generated from field: int64 quantity = 2;
   */
  quantity: bigint;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingInputs.Granularity.
 * Use `create(AutoMlForecastingInputs_GranularitySchema)` to create a new message.
 */
export const AutoMlForecastingInputs_GranularitySchema: GenMessage<AutoMlForecastingInputs_Granularity> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 1, 1);

/**
 * Model metadata specific to AutoML Forecasting.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingMetadata
 */
export type AutoMlForecastingMetadata = Message<"google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingMetadata"> & {
  /**
   * Output only. The actual training cost of the model, expressed in milli
   * node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
   * to not exceed the train budget.
   *
   * @generated from field: int64 train_cost_milli_node_hours = 1;
   */
  trainCostMilliNodeHours: bigint;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.schema.trainingjob.definition.AutoMlForecastingMetadata.
 * Use `create(AutoMlForecastingMetadataSchema)` to create a new message.
 */
export const AutoMlForecastingMetadataSchema: GenMessage<AutoMlForecastingMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_time_series_forecasting, 2);

