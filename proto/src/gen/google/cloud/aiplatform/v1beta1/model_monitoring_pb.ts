// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1beta1/model_monitoring.proto (package google.cloud.aiplatform.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { BigQueryDestination, BigQuerySource, GcsDestination, GcsSource } from "./io_pb";
import { file_google_cloud_aiplatform_v1beta1_io } from "./io_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1beta1/model_monitoring.proto.
 */
export const file_google_cloud_aiplatform_v1beta1_model_monitoring: GenFile = /*@__PURE__*/
  fileDesc("CjZnb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MWJldGExL21vZGVsX21vbml0b3JpbmcucHJvdG8SH2dvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEixQIKFU1vZGVsTW9uaXRvcmluZ0NvbmZpZxJaChFvYmplY3RpdmVfY29uZmlncxgDIAMoCzI/Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuTW9kZWxNb25pdG9yaW5nT2JqZWN0aXZlQ29uZmlnElEKDGFsZXJ0X2NvbmZpZxgCIAEoCzI7Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuTW9kZWxNb25pdG9yaW5nQWxlcnRDb25maWcSJAocYW5hbHlzaXNfaW5zdGFuY2Vfc2NoZW1hX3VyaRgEIAEoCRJXCh5zdGF0c19hbm9tYWxpZXNfYmFzZV9kaXJlY3RvcnkYBSABKAsyLy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLkdjc0Rlc3RpbmF0aW9uIqoWCh5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcSaQoQdHJhaW5pbmdfZGF0YXNldBgBIAEoCzJPLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuTW9kZWxNb25pdG9yaW5nT2JqZWN0aXZlQ29uZmlnLlRyYWluaW5nRGF0YXNldBKYAQopdHJhaW5pbmdfcHJlZGljdGlvbl9za2V3X2RldGVjdGlvbl9jb25maWcYAiABKAsyZS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLk1vZGVsTW9uaXRvcmluZ09iamVjdGl2ZUNvbmZpZy5UcmFpbmluZ1ByZWRpY3Rpb25Ta2V3RGV0ZWN0aW9uQ29uZmlnEokBCiFwcmVkaWN0aW9uX2RyaWZ0X2RldGVjdGlvbl9jb25maWcYAyABKAsyXi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLk1vZGVsTW9uaXRvcmluZ09iamVjdGl2ZUNvbmZpZy5QcmVkaWN0aW9uRHJpZnREZXRlY3Rpb25Db25maWcSbQoSZXhwbGFuYXRpb25fY29uZmlnGAUgASgLMlEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcuRXhwbGFuYXRpb25Db25maWca6gIKD1RyYWluaW5nRGF0YXNldBI5CgdkYXRhc2V0GAMgASgJQib6QSMKIWFpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vRGF0YXNldEgAEkAKCmdjc19zb3VyY2UYBCABKAsyKi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLkdjc1NvdXJjZUgAEkoKD2JpZ3F1ZXJ5X3NvdXJjZRgFIAEoCzIvLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuQmlnUXVlcnlTb3VyY2VIABITCgtkYXRhX2Zvcm1hdBgCIAEoCRIUCgx0YXJnZXRfZmllbGQYBiABKAkSVAoZbG9nZ2luZ19zYW1wbGluZ19zdHJhdGVneRgHIAEoCzIxLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuU2FtcGxpbmdTdHJhdGVneUINCgtkYXRhX3NvdXJjZRqoBQolVHJhaW5pbmdQcmVkaWN0aW9uU2tld0RldGVjdGlvbkNvbmZpZxKSAQoPc2tld190aHJlc2hvbGRzGAEgAygLMnkuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcuVHJhaW5pbmdQcmVkaWN0aW9uU2tld0RldGVjdGlvbkNvbmZpZy5Ta2V3VGhyZXNob2xkc0VudHJ5ErUBCiFhdHRyaWJ1dGlvbl9zY29yZV9za2V3X3RocmVzaG9sZHMYAiADKAsyiQEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcuVHJhaW5pbmdQcmVkaWN0aW9uU2tld0RldGVjdGlvbkNvbmZpZy5BdHRyaWJ1dGlvblNjb3JlU2tld1RocmVzaG9sZHNFbnRyeRJQChZkZWZhdWx0X3NrZXdfdGhyZXNob2xkGAYgASgLMjAuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5UaHJlc2hvbGRDb25maWcaZwoTU2tld1RocmVzaG9sZHNFbnRyeRILCgNrZXkYASABKAkSPwoFdmFsdWUYAiABKAsyMC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLlRocmVzaG9sZENvbmZpZzoCOAEadwojQXR0cmlidXRpb25TY29yZVNrZXdUaHJlc2hvbGRzRW50cnkSCwoDa2V5GAEgASgJEj8KBXZhbHVlGAIgASgLMjAuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5UaHJlc2hvbGRDb25maWc6AjgBGpoFCh5QcmVkaWN0aW9uRHJpZnREZXRlY3Rpb25Db25maWcSjQEKEGRyaWZ0X3RocmVzaG9sZHMYASADKAsycy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLk1vZGVsTW9uaXRvcmluZ09iamVjdGl2ZUNvbmZpZy5QcmVkaWN0aW9uRHJpZnREZXRlY3Rpb25Db25maWcuRHJpZnRUaHJlc2hvbGRzRW50cnkSsAEKImF0dHJpYnV0aW9uX3Njb3JlX2RyaWZ0X3RocmVzaG9sZHMYAiADKAsygwEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcuUHJlZGljdGlvbkRyaWZ0RGV0ZWN0aW9uQ29uZmlnLkF0dHJpYnV0aW9uU2NvcmVEcmlmdFRocmVzaG9sZHNFbnRyeRJRChdkZWZhdWx0X2RyaWZ0X3RocmVzaG9sZBgFIAEoCzIwLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuVGhyZXNob2xkQ29uZmlnGmgKFERyaWZ0VGhyZXNob2xkc0VudHJ5EgsKA2tleRgBIAEoCRI/CgV2YWx1ZRgCIAEoCzIwLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuVGhyZXNob2xkQ29uZmlnOgI4ARp4CiRBdHRyaWJ1dGlvblNjb3JlRHJpZnRUaHJlc2hvbGRzRW50cnkSCwoDa2V5GAEgASgJEj8KBXZhbHVlGAIgASgLMjAuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5UaHJlc2hvbGRDb25maWc6AjgBGtEEChFFeHBsYW5hdGlvbkNvbmZpZxIhChllbmFibGVfZmVhdHVyZV9hdHRyaWJ1dGVzGAEgASgIEoMBChRleHBsYW5hdGlvbl9iYXNlbGluZRgCIAEoCzJlLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuTW9kZWxNb25pdG9yaW5nT2JqZWN0aXZlQ29uZmlnLkV4cGxhbmF0aW9uQ29uZmlnLkV4cGxhbmF0aW9uQmFzZWxpbmUakgMKE0V4cGxhbmF0aW9uQmFzZWxpbmUSPgoDZ2NzGAIgASgLMi8uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5HY3NEZXN0aW5hdGlvbkgAEkgKCGJpZ3F1ZXJ5GAMgASgLMjQuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5CaWdRdWVyeURlc3RpbmF0aW9uSAASkQEKEXByZWRpY3Rpb25fZm9ybWF0GAEgASgOMnYuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFiZXRhMS5Nb2RlbE1vbml0b3JpbmdPYmplY3RpdmVDb25maWcuRXhwbGFuYXRpb25Db25maWcuRXhwbGFuYXRpb25CYXNlbGluZS5QcmVkaWN0aW9uRm9ybWF0Ik4KEFByZWRpY3Rpb25Gb3JtYXQSIQodUFJFRElDVElPTl9GT1JNQVRfVU5TUEVDSUZJRUQQABIJCgVKU09OTBACEgwKCEJJR1FVRVJZEANCDQoLZGVzdGluYXRpb24ipQIKGk1vZGVsTW9uaXRvcmluZ0FsZXJ0Q29uZmlnEmoKEmVtYWlsX2FsZXJ0X2NvbmZpZxgBIAEoCzJMLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTEuTW9kZWxNb25pdG9yaW5nQWxlcnRDb25maWcuRW1haWxBbGVydENvbmZpZ0gAEhYKDmVuYWJsZV9sb2dnaW5nGAIgASgIElEKFW5vdGlmaWNhdGlvbl9jaGFubmVscxgDIAMoCUIy+kEvCi1tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL05vdGlmaWNhdGlvbkNoYW5uZWwaJwoQRW1haWxBbGVydENvbmZpZxITCgt1c2VyX2VtYWlscxgBIAMoCUIHCgVhbGVydCIvCg9UaHJlc2hvbGRDb25maWcSDwoFdmFsdWUYASABKAFIAEILCgl0aHJlc2hvbGQioQEKEFNhbXBsaW5nU3RyYXRlZ3kSYgoUcmFuZG9tX3NhbXBsZV9jb25maWcYASABKAsyRC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MWJldGExLlNhbXBsaW5nU3RyYXRlZ3kuUmFuZG9tU2FtcGxlQ29uZmlnGikKElJhbmRvbVNhbXBsZUNvbmZpZxITCgtzYW1wbGVfcmF0ZRgBIAEoAULdAgojY29tLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxYmV0YTFCFE1vZGVsTW9uaXRvcmluZ1Byb3RvUAFaQ2Nsb3VkLmdvb2dsZS5jb20vZ28vYWlwbGF0Zm9ybS9hcGl2MWJldGExL2FpcGxhdGZvcm1wYjthaXBsYXRmb3JtcGKqAh9Hb29nbGUuQ2xvdWQuQUlQbGF0Zm9ybS5WMUJldGExygIfR29vZ2xlXENsb3VkXEFJUGxhdGZvcm1cVjFiZXRhMeoCIkdvb2dsZTo6Q2xvdWQ6OkFJUGxhdGZvcm06OlYxYmV0YTHqQW8KLW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vTm90aWZpY2F0aW9uQ2hhbm5lbBI+cHJvamVjdHMve3Byb2plY3R9L25vdGlmaWNhdGlvbkNoYW5uZWxzL3tub3RpZmljYXRpb25fY2hhbm5lbH1iBnByb3RvMw", [file_google_api_resource, file_google_cloud_aiplatform_v1beta1_io]);

/**
 * The model monitoring configuration used for Batch Prediction Job.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringConfig
 */
export type ModelMonitoringConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringConfig"> & {
  /**
   * Model monitoring objective config.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig objective_configs = 3;
   */
  objectiveConfigs: ModelMonitoringObjectiveConfig[];

  /**
   * Model monitoring alert config.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig alert_config = 2;
   */
  alertConfig?: ModelMonitoringAlertConfig;

  /**
   * YAML schema file uri in Cloud Storage describing the format of a single
   * instance that you want Tensorflow Data Validation (TFDV) to analyze.
   *
   * If there are any data type differences between predict instance and TFDV
   * instance, this field can be used to override the schema.
   * For models trained with Vertex AI, this field must be set as all the
   * fields in predict instance formatted as string.
   *
   * @generated from field: string analysis_instance_schema_uri = 4;
   */
  analysisInstanceSchemaUri: string;

  /**
   * A Google Cloud Storage location for batch prediction model monitoring to
   * dump statistics and anomalies.
   * If not provided, a folder will be created in customer project to hold
   * statistics and anomalies.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.GcsDestination stats_anomalies_base_directory = 5;
   */
  statsAnomaliesBaseDirectory?: GcsDestination;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringConfig.
 * Use `create(ModelMonitoringConfigSchema)` to create a new message.
 */
export const ModelMonitoringConfigSchema: GenMessage<ModelMonitoringConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 0);

/**
 * The objective configuration for model monitoring, including the information
 * needed to detect anomalies for one particular model.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig
 */
export type ModelMonitoringObjectiveConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig"> & {
  /**
   * Training dataset for models. This field has to be set only if
   * TrainingPredictionSkewDetectionConfig is specified.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingDataset training_dataset = 1;
   */
  trainingDataset?: ModelMonitoringObjectiveConfig_TrainingDataset;

  /**
   * The config for skew between training data and prediction data.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig training_prediction_skew_detection_config = 2;
   */
  trainingPredictionSkewDetectionConfig?: ModelMonitoringObjectiveConfig_TrainingPredictionSkewDetectionConfig;

  /**
   * The config for drift of prediction data.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig prediction_drift_detection_config = 3;
   */
  predictionDriftDetectionConfig?: ModelMonitoringObjectiveConfig_PredictionDriftDetectionConfig;

  /**
   * The config for integrating with Vertex Explainable AI.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig explanation_config = 5;
   */
  explanationConfig?: ModelMonitoringObjectiveConfig_ExplanationConfig;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.
 * Use `create(ModelMonitoringObjectiveConfigSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfigSchema: GenMessage<ModelMonitoringObjectiveConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1);

/**
 * Training Dataset information.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingDataset
 */
export type ModelMonitoringObjectiveConfig_TrainingDataset = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingDataset"> & {
  /**
   * @generated from oneof google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingDataset.data_source
   */
  dataSource: {
    /**
     * The resource name of the Dataset used to train this Model.
     *
     * @generated from field: string dataset = 3;
     */
    value: string;
    case: "dataset";
  } | {
    /**
     * The Google Cloud Storage uri of the unmanaged Dataset used to train
     * this Model.
     *
     * @generated from field: google.cloud.aiplatform.v1beta1.GcsSource gcs_source = 4;
     */
    value: GcsSource;
    case: "gcsSource";
  } | {
    /**
     * The BigQuery table of the unmanaged Dataset used to train this
     * Model.
     *
     * @generated from field: google.cloud.aiplatform.v1beta1.BigQuerySource bigquery_source = 5;
     */
    value: BigQuerySource;
    case: "bigquerySource";
  } | { case: undefined; value?: undefined };

  /**
   * Data format of the dataset, only applicable if the input is from
   * Google Cloud Storage.
   * The possible formats are:
   *
   * "tf-record"
   * The source file is a TFRecord file.
   *
   * "csv"
   * The source file is a CSV file.
   * "jsonl"
   * The source file is a JSONL file.
   *
   * @generated from field: string data_format = 2;
   */
  dataFormat: string;

  /**
   * The target field name the model is to predict.
   * This field will be excluded when doing Predict and (or) Explain for the
   * training data.
   *
   * @generated from field: string target_field = 6;
   */
  targetField: string;

  /**
   * Strategy to sample data from Training Dataset.
   * If not set, we process the whole dataset.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.SamplingStrategy logging_sampling_strategy = 7;
   */
  loggingSamplingStrategy?: SamplingStrategy;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingDataset.
 * Use `create(ModelMonitoringObjectiveConfig_TrainingDatasetSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfig_TrainingDatasetSchema: GenMessage<ModelMonitoringObjectiveConfig_TrainingDataset> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 0);

/**
 * The config for Training & Prediction data skew detection. It specifies the
 * training dataset sources and the skew detection parameters.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig
 */
export type ModelMonitoringObjectiveConfig_TrainingPredictionSkewDetectionConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig"> & {
  /**
   * Key is the feature name and value is the threshold. If a feature needs to
   * be monitored for skew, a value threshold must be configured for that
   * feature. The threshold here is against feature distribution distance
   * between the training and prediction feature.
   *
   * @generated from field: map<string, google.cloud.aiplatform.v1beta1.ThresholdConfig> skew_thresholds = 1;
   */
  skewThresholds: { [key: string]: ThresholdConfig };

  /**
   * Key is the feature name and value is the threshold. The threshold here is
   * against attribution score distance between the training and prediction
   * feature.
   *
   * @generated from field: map<string, google.cloud.aiplatform.v1beta1.ThresholdConfig> attribution_score_skew_thresholds = 2;
   */
  attributionScoreSkewThresholds: { [key: string]: ThresholdConfig };

  /**
   * Skew anomaly detection threshold used by all features.
   * When the per-feature thresholds are not set, this field can be used to
   * specify a threshold for all features.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ThresholdConfig default_skew_threshold = 6;
   */
  defaultSkewThreshold?: ThresholdConfig;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.TrainingPredictionSkewDetectionConfig.
 * Use `create(ModelMonitoringObjectiveConfig_TrainingPredictionSkewDetectionConfigSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfig_TrainingPredictionSkewDetectionConfigSchema: GenMessage<ModelMonitoringObjectiveConfig_TrainingPredictionSkewDetectionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 1);

/**
 * The config for Prediction data drift detection.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig
 */
export type ModelMonitoringObjectiveConfig_PredictionDriftDetectionConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig"> & {
  /**
   * Key is the feature name and value is the threshold. If a feature needs to
   * be monitored for drift, a value threshold must be configured for that
   * feature. The threshold here is against feature distribution distance
   * between different time windws.
   *
   * @generated from field: map<string, google.cloud.aiplatform.v1beta1.ThresholdConfig> drift_thresholds = 1;
   */
  driftThresholds: { [key: string]: ThresholdConfig };

  /**
   * Key is the feature name and value is the threshold. The threshold here is
   * against attribution score distance between different time windows.
   *
   * @generated from field: map<string, google.cloud.aiplatform.v1beta1.ThresholdConfig> attribution_score_drift_thresholds = 2;
   */
  attributionScoreDriftThresholds: { [key: string]: ThresholdConfig };

  /**
   * Drift anomaly detection threshold used by all features.
   * When the per-feature thresholds are not set, this field can be used to
   * specify a threshold for all features.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ThresholdConfig default_drift_threshold = 5;
   */
  defaultDriftThreshold?: ThresholdConfig;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.PredictionDriftDetectionConfig.
 * Use `create(ModelMonitoringObjectiveConfig_PredictionDriftDetectionConfigSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfig_PredictionDriftDetectionConfigSchema: GenMessage<ModelMonitoringObjectiveConfig_PredictionDriftDetectionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 2);

/**
 * The config for integrating with Vertex Explainable AI. Only applicable if
 * the Model has explanation_spec populated.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig
 */
export type ModelMonitoringObjectiveConfig_ExplanationConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig"> & {
  /**
   * If want to analyze the Vertex Explainable AI feature attribute scores or
   * not. If set to true, Vertex AI will log the feature attributions from
   * explain response and do the skew/drift detection for them.
   *
   * @generated from field: bool enable_feature_attributes = 1;
   */
  enableFeatureAttributes: boolean;

  /**
   * Predictions generated by the BatchPredictionJob using baseline dataset.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline explanation_baseline = 2;
   */
  explanationBaseline?: ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.
 * Use `create(ModelMonitoringObjectiveConfig_ExplanationConfigSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfig_ExplanationConfigSchema: GenMessage<ModelMonitoringObjectiveConfig_ExplanationConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 3);

/**
 * Output from
 * [BatchPredictionJob][google.cloud.aiplatform.v1beta1.BatchPredictionJob]
 * for Model Monitoring baseline dataset, which can be used to generate
 * baseline attribution scores.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline
 */
export type ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline"> & {
  /**
   * The configuration specifying of BatchExplain job output. This can be
   * used to generate the baseline of feature attribution scores.
   *
   * @generated from oneof google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline.destination
   */
  destination: {
    /**
     * Cloud Storage location for BatchExplain output.
     *
     * @generated from field: google.cloud.aiplatform.v1beta1.GcsDestination gcs = 2;
     */
    value: GcsDestination;
    case: "gcs";
  } | {
    /**
     * BigQuery location for BatchExplain output.
     *
     * @generated from field: google.cloud.aiplatform.v1beta1.BigQueryDestination bigquery = 3;
     */
    value: BigQueryDestination;
    case: "bigquery";
  } | { case: undefined; value?: undefined };

  /**
   * The storage format of the predictions generated BatchPrediction job.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline.PredictionFormat prediction_format = 1;
   */
  predictionFormat: ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline_PredictionFormat;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline.
 * Use `create(ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaselineSchema)` to create a new message.
 */
export const ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaselineSchema: GenMessage<ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 3, 0);

/**
 * The storage format of the predictions generated BatchPrediction job.
 *
 * @generated from enum google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline.PredictionFormat
 */
export enum ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline_PredictionFormat {
  /**
   * Should not be set.
   *
   * @generated from enum value: PREDICTION_FORMAT_UNSPECIFIED = 0;
   */
  PREDICTION_FORMAT_UNSPECIFIED = 0,

  /**
   * Predictions are in JSONL files.
   *
   * @generated from enum value: JSONL = 2;
   */
  JSONL = 2,

  /**
   * Predictions are in BigQuery.
   *
   * @generated from enum value: BIGQUERY = 3;
   */
  BIGQUERY = 3,
}

/**
 * Describes the enum google.cloud.aiplatform.v1beta1.ModelMonitoringObjectiveConfig.ExplanationConfig.ExplanationBaseline.PredictionFormat.
 */
export const ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline_PredictionFormatSchema: GenEnum<ModelMonitoringObjectiveConfig_ExplanationConfig_ExplanationBaseline_PredictionFormat> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 1, 3, 0, 0);

/**
 * The alert config for model monitoring.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig
 */
export type ModelMonitoringAlertConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig"> & {
  /**
   * @generated from oneof google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.alert
   */
  alert: {
    /**
     * Email alert config.
     *
     * @generated from field: google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.EmailAlertConfig email_alert_config = 1;
     */
    value: ModelMonitoringAlertConfig_EmailAlertConfig;
    case: "emailAlertConfig";
  } | { case: undefined; value?: undefined };

  /**
   * Dump the anomalies to Cloud Logging. The anomalies will be put to json
   * payload encoded from proto
   * [google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry][].
   * This can be further sinked to Pub/Sub or any other services supported
   * by Cloud Logging.
   *
   * @generated from field: bool enable_logging = 2;
   */
  enableLogging: boolean;

  /**
   * Resource names of the NotificationChannels to send alert.
   * Must be of the format
   * `projects/<project_id_or_number>/notificationChannels/<channel_id>`
   *
   * @generated from field: repeated string notification_channels = 3;
   */
  notificationChannels: string[];
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.
 * Use `create(ModelMonitoringAlertConfigSchema)` to create a new message.
 */
export const ModelMonitoringAlertConfigSchema: GenMessage<ModelMonitoringAlertConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 2);

/**
 * The config for email alert.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.EmailAlertConfig
 */
export type ModelMonitoringAlertConfig_EmailAlertConfig = Message<"google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.EmailAlertConfig"> & {
  /**
   * The email addresses to send the alert.
   *
   * @generated from field: repeated string user_emails = 1;
   */
  userEmails: string[];
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ModelMonitoringAlertConfig.EmailAlertConfig.
 * Use `create(ModelMonitoringAlertConfig_EmailAlertConfigSchema)` to create a new message.
 */
export const ModelMonitoringAlertConfig_EmailAlertConfigSchema: GenMessage<ModelMonitoringAlertConfig_EmailAlertConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 2, 0);

/**
 * The config for feature monitoring threshold.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.ThresholdConfig
 */
export type ThresholdConfig = Message<"google.cloud.aiplatform.v1beta1.ThresholdConfig"> & {
  /**
   * @generated from oneof google.cloud.aiplatform.v1beta1.ThresholdConfig.threshold
   */
  threshold: {
    /**
     * Specify a threshold value that can trigger the alert.
     * If this threshold config is for feature distribution distance:
     *   1. For categorical feature, the distribution distance is calculated by
     *      L-inifinity norm.
     *   2. For numerical feature, the distribution distance is calculated by
     *      Jensen–Shannon divergence.
     * Each feature must have a non-zero threshold if they need to be monitored.
     * Otherwise no alert will be triggered for that feature.
     *
     * @generated from field: double value = 1;
     */
    value: number;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.ThresholdConfig.
 * Use `create(ThresholdConfigSchema)` to create a new message.
 */
export const ThresholdConfigSchema: GenMessage<ThresholdConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 3);

/**
 * Sampling Strategy for logging, can be for both training and prediction
 * dataset.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.SamplingStrategy
 */
export type SamplingStrategy = Message<"google.cloud.aiplatform.v1beta1.SamplingStrategy"> & {
  /**
   * Random sample config. Will support more sampling strategies later.
   *
   * @generated from field: google.cloud.aiplatform.v1beta1.SamplingStrategy.RandomSampleConfig random_sample_config = 1;
   */
  randomSampleConfig?: SamplingStrategy_RandomSampleConfig;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.SamplingStrategy.
 * Use `create(SamplingStrategySchema)` to create a new message.
 */
export const SamplingStrategySchema: GenMessage<SamplingStrategy> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 4);

/**
 * Requests are randomly selected.
 *
 * @generated from message google.cloud.aiplatform.v1beta1.SamplingStrategy.RandomSampleConfig
 */
export type SamplingStrategy_RandomSampleConfig = Message<"google.cloud.aiplatform.v1beta1.SamplingStrategy.RandomSampleConfig"> & {
  /**
   * Sample rate (0, 1]
   *
   * @generated from field: double sample_rate = 1;
   */
  sampleRate: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1beta1.SamplingStrategy.RandomSampleConfig.
 * Use `create(SamplingStrategy_RandomSampleConfigSchema)` to create a new message.
 */
export const SamplingStrategy_RandomSampleConfigSchema: GenMessage<SamplingStrategy_RandomSampleConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1beta1_model_monitoring, 4, 0);

