// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1/nas_job.proto (package google.cloud.aiplatform.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { CustomJobSpec } from "./custom_job_pb";
import { file_google_cloud_aiplatform_v1_custom_job } from "./custom_job_pb";
import type { EncryptionSpec } from "./encryption_spec_pb";
import { file_google_cloud_aiplatform_v1_encryption_spec } from "./encryption_spec_pb";
import type { JobState } from "./job_state_pb";
import { file_google_cloud_aiplatform_v1_job_state } from "./job_state_pb";
import type { Measurement } from "./study_pb";
import { file_google_cloud_aiplatform_v1_study } from "./study_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1/nas_job.proto.
 */
export const file_google_cloud_aiplatform_v1_nas_job: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MS9uYXNfam9iLnByb3RvEhpnb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MSL1BgoGTmFzSm9iEhEKBG5hbWUYASABKAlCA+BBAxIZCgxkaXNwbGF5X25hbWUYAiABKAlCA+BBAhJBCgxuYXNfam9iX3NwZWMYBCABKAsyJi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5OYXNKb2JTcGVjQgPgQQISRQoObmFzX2pvYl9vdXRwdXQYBSABKAsyKC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5OYXNKb2JPdXRwdXRCA+BBAxI4CgVzdGF0ZRgGIAEoDjIkLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkpvYlN0YXRlQgPgQQMSNAoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSMwoKc3RhcnRfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIxCghlbmRfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0Cgt1cGRhdGVfdGltZRgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxImCgVlcnJvchgLIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgPgQQMSPgoGbGFiZWxzGAwgAygLMi4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iLkxhYmVsc0VudHJ5EkMKD2VuY3J5cHRpb25fc3BlYxgNIAEoCzIqLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkVuY3J5cHRpb25TcGVjEi8KIGVuYWJsZV9yZXN0cmljdGVkX2ltYWdlX3RyYWluaW5nGA4gASgIQgUYAeBBARIaCg1zYXRpc2ZpZXNfcHpzGA8gASgIQgPgQQMSGgoNc2F0aXNmaWVzX3B6aRgQIAEoCEID4EEDGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAE6YOpBXQogYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS9OYXNKb2ISOXByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9uYXNKb2JzL3tuYXNfam9ifSK9AgoOTmFzVHJpYWxEZXRhaWwSEQoEbmFtZRgBIAEoCUID4EEDEhIKCnBhcmFtZXRlcnMYAiABKAkSOgoMc2VhcmNoX3RyaWFsGAMgASgLMiQuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzVHJpYWwSOQoLdHJhaW5fdHJpYWwYBCABKAsyJC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5OYXNUcmlhbDqMAepBiAEKKGFpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vTmFzVHJpYWxEZXRhaWwSXHByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9uYXNKb2JzL3tuYXNfam9ifS9uYXNUcmlhbERldGFpbHMve25hc190cmlhbF9kZXRhaWx9IqUKCgpOYXNKb2JTcGVjEmQKGm11bHRpX3RyaWFsX2FsZ29yaXRobV9zcGVjGAIgASgLMj4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iU3BlYy5NdWx0aVRyaWFsQWxnb3JpdGhtU3BlY0gAEhkKEXJlc3VtZV9uYXNfam9iX2lkGAMgASgJEhkKEXNlYXJjaF9zcGFjZV9zcGVjGAEgASgJGuQIChdNdWx0aVRyaWFsQWxnb3JpdGhtU3BlYxJxChVtdWx0aV90cmlhbF9hbGdvcml0aG0YASABKA4yUi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5OYXNKb2JTcGVjLk11bHRpVHJpYWxBbGdvcml0aG1TcGVjLk11bHRpVHJpYWxBbGdvcml0aG0SWQoGbWV0cmljGAIgASgLMkkuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iU3BlYy5NdWx0aVRyaWFsQWxnb3JpdGhtU3BlYy5NZXRyaWNTcGVjEm4KEXNlYXJjaF90cmlhbF9zcGVjGAMgASgLMk4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iU3BlYy5NdWx0aVRyaWFsQWxnb3JpdGhtU3BlYy5TZWFyY2hUcmlhbFNwZWNCA+BBAhJnChB0cmFpbl90cmlhbF9zcGVjGAQgASgLMk0uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iU3BlYy5NdWx0aVRyaWFsQWxnb3JpdGhtU3BlYy5UcmFpblRyaWFsU3BlYxrOAQoKTWV0cmljU3BlYxIWCgltZXRyaWNfaWQYASABKAlCA+BBAhJlCgRnb2FsGAIgASgOMlIuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzSm9iU3BlYy5NdWx0aVRyaWFsQWxnb3JpdGhtU3BlYy5NZXRyaWNTcGVjLkdvYWxUeXBlQgPgQQIiQQoIR29hbFR5cGUSGQoVR09BTF9UWVBFX1VOU1BFQ0lGSUVEEAASDAoITUFYSU1JWkUQARIMCghNSU5JTUlaRRACGsUBCg9TZWFyY2hUcmlhbFNwZWMSTQoVc2VhcmNoX3RyaWFsX2pvYl9zcGVjGAEgASgLMikuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuQ3VzdG9tSm9iU3BlY0ID4EECEhwKD21heF90cmlhbF9jb3VudBgCIAEoBUID4EECEiUKGG1heF9wYXJhbGxlbF90cmlhbF9jb3VudBgDIAEoBUID4EECEh4KFm1heF9mYWlsZWRfdHJpYWxfY291bnQYBCABKAUanQEKDlRyYWluVHJpYWxTcGVjEkwKFHRyYWluX3RyaWFsX2pvYl9zcGVjGAEgASgLMikuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuQ3VzdG9tSm9iU3BlY0ID4EECEiUKGG1heF9wYXJhbGxlbF90cmlhbF9jb3VudBgCIAEoBUID4EECEhYKCWZyZXF1ZW5jeRgDIAEoBUID4EECImkKE011bHRpVHJpYWxBbGdvcml0aG0SJQohTVVMVElfVFJJQUxfQUxHT1JJVEhNX1VOU1BFQ0lGSUVEEAASGgoWUkVJTkZPUkNFTUVOVF9MRUFSTklORxABEg8KC0dSSURfU0VBUkNIEAJCFAoSbmFzX2FsZ29yaXRobV9zcGVjIpgCCgxOYXNKb2JPdXRwdXQSYwoWbXVsdGlfdHJpYWxfam9iX291dHB1dBgBIAEoCzI8Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk5hc0pvYk91dHB1dC5NdWx0aVRyaWFsSm9iT3V0cHV0QgPgQQNIABqYAQoTTXVsdGlUcmlhbEpvYk91dHB1dBJACg1zZWFyY2hfdHJpYWxzGAEgAygLMiQuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuTmFzVHJpYWxCA+BBAxI/Cgx0cmFpbl90cmlhbHMYAiADKAsyJC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5OYXNUcmlhbEID4EEDQggKBm91dHB1dCL0AgoITmFzVHJpYWwSDwoCaWQYASABKAlCA+BBAxI+CgVzdGF0ZRgCIAEoDjIqLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk5hc1RyaWFsLlN0YXRlQgPgQQMSRwoRZmluYWxfbWVhc3VyZW1lbnQYAyABKAsyJy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5NZWFzdXJlbWVudEID4EEDEjMKCnN0YXJ0X3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSMQoIZW5kX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMiZgoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABINCglSRVFVRVNURUQQARIKCgZBQ1RJVkUQAhIMCghTVE9QUElORxADEg0KCVNVQ0NFRURFRBAEEg4KCklORkVBU0lCTEUQBULJAQoeY29tLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxQgtOYXNKb2JQcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL2FpcGxhdGZvcm0vYXBpdjEvYWlwbGF0Zm9ybXBiO2FpcGxhdGZvcm1wYqoCGkdvb2dsZS5DbG91ZC5BSVBsYXRmb3JtLlYxygIaR29vZ2xlXENsb3VkXEFJUGxhdGZvcm1cVjHqAh1Hb29nbGU6OkNsb3VkOjpBSVBsYXRmb3JtOjpWMWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_aiplatform_v1_custom_job, file_google_cloud_aiplatform_v1_encryption_spec, file_google_cloud_aiplatform_v1_job_state, file_google_cloud_aiplatform_v1_study, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * Represents a Neural Architecture Search (NAS) job.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJob
 */
export type NasJob = Message<"google.cloud.aiplatform.v1.NasJob"> & {
  /**
   * Output only. Resource name of the NasJob.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The display name of the NasJob.
   * The name can be up to 128 characters long and can consist of any UTF-8
   * characters.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Required. The specification of a NasJob.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec nas_job_spec = 4;
   */
  nasJobSpec?: NasJobSpec;

  /**
   * Output only. Output of the NasJob.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobOutput nas_job_output = 5;
   */
  nasJobOutput?: NasJobOutput;

  /**
   * Output only. The detailed state of the job.
   *
   * @generated from field: google.cloud.aiplatform.v1.JobState state = 6;
   */
  state: JobState;

  /**
   * Output only. Time when the NasJob was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. Time when the NasJob for the first time entered the
   * `JOB_STATE_RUNNING` state.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 8;
   */
  startTime?: Timestamp;

  /**
   * Output only. Time when the NasJob entered any of the following states:
   * `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 9;
   */
  endTime?: Timestamp;

  /**
   * Output only. Time when the NasJob was most recently updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 10;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Only populated when job's state is JOB_STATE_FAILED or
   * JOB_STATE_CANCELLED.
   *
   * @generated from field: google.rpc.Status error = 11;
   */
  error?: Status;

  /**
   * The labels with user-defined metadata to organize NasJobs.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information and examples of labels.
   *
   * @generated from field: map<string, string> labels = 12;
   */
  labels: { [key: string]: string };

  /**
   * Customer-managed encryption key options for a NasJob.
   * If this is set, then all resources created by the NasJob
   * will be encrypted with the provided encryption key.
   *
   * @generated from field: google.cloud.aiplatform.v1.EncryptionSpec encryption_spec = 13;
   */
  encryptionSpec?: EncryptionSpec;

  /**
   * Optional. Enable a separation of Custom model training
   * and restricted image training for tenant project.
   *
   * @generated from field: bool enable_restricted_image_training = 14 [deprecated = true];
   * @deprecated
   */
  enableRestrictedImageTraining: boolean;

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzs = 15;
   */
  satisfiesPzs: boolean;

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzi = 16;
   */
  satisfiesPzi: boolean;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJob.
 * Use `create(NasJobSchema)` to create a new message.
 */
export const NasJobSchema: GenMessage<NasJob> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 0);

/**
 * Represents a NasTrial details along with its parameters. If there is a
 * corresponding train NasTrial, the train NasTrial is also returned.
 *
 * @generated from message google.cloud.aiplatform.v1.NasTrialDetail
 */
export type NasTrialDetail = Message<"google.cloud.aiplatform.v1.NasTrialDetail"> & {
  /**
   * Output only. Resource name of the NasTrialDetail.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The parameters for the NasJob NasTrial.
   *
   * @generated from field: string parameters = 2;
   */
  parameters: string;

  /**
   * The requested search NasTrial.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasTrial search_trial = 3;
   */
  searchTrial?: NasTrial;

  /**
   * The train NasTrial corresponding to
   * [search_trial][google.cloud.aiplatform.v1.NasTrialDetail.search_trial].
   * Only populated if
   * [search_trial][google.cloud.aiplatform.v1.NasTrialDetail.search_trial] is
   * used for training.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasTrial train_trial = 4;
   */
  trainTrial?: NasTrial;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasTrialDetail.
 * Use `create(NasTrialDetailSchema)` to create a new message.
 */
export const NasTrialDetailSchema: GenMessage<NasTrialDetail> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 1);

/**
 * Represents the spec of a NasJob.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobSpec
 */
export type NasJobSpec = Message<"google.cloud.aiplatform.v1.NasJobSpec"> & {
  /**
   * The Neural Architecture Search (NAS) algorithm specification.
   *
   * @generated from oneof google.cloud.aiplatform.v1.NasJobSpec.nas_algorithm_spec
   */
  nasAlgorithmSpec: {
    /**
     * The spec of multi-trial algorithms.
     *
     * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec multi_trial_algorithm_spec = 2;
     */
    value: NasJobSpec_MultiTrialAlgorithmSpec;
    case: "multiTrialAlgorithmSpec";
  } | { case: undefined; value?: undefined };

  /**
   * The ID of the existing NasJob in the same Project and Location
   * which will be used to resume search. search_space_spec and
   * nas_algorithm_spec are obtained from previous NasJob hence should not
   * provide them again for this NasJob.
   *
   * @generated from field: string resume_nas_job_id = 3;
   */
  resumeNasJobId: string;

  /**
   * It defines the search space for Neural Architecture Search (NAS).
   *
   * @generated from field: string search_space_spec = 1;
   */
  searchSpaceSpec: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobSpec.
 * Use `create(NasJobSpecSchema)` to create a new message.
 */
export const NasJobSpecSchema: GenMessage<NasJobSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 2);

/**
 * The spec of multi-trial Neural Architecture Search (NAS).
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec
 */
export type NasJobSpec_MultiTrialAlgorithmSpec = Message<"google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec"> & {
  /**
   * The multi-trial Neural Architecture Search (NAS) algorithm
   * type. Defaults to `REINFORCEMENT_LEARNING`.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MultiTrialAlgorithm multi_trial_algorithm = 1;
   */
  multiTrialAlgorithm: NasJobSpec_MultiTrialAlgorithmSpec_MultiTrialAlgorithm;

  /**
   * Metric specs for the NAS job.
   * Validation for this field is done at `multi_trial_algorithm_spec` field.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec metric = 2;
   */
  metric?: NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec;

  /**
   * Required. Spec for search trials.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec search_trial_spec = 3;
   */
  searchTrialSpec?: NasJobSpec_MultiTrialAlgorithmSpec_SearchTrialSpec;

  /**
   * Spec for train trials. Top N [TrainTrialSpec.max_parallel_trial_count]
   * search trials will be trained for every M
   * [TrainTrialSpec.frequency] trials searched.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec train_trial_spec = 4;
   */
  trainTrialSpec?: NasJobSpec_MultiTrialAlgorithmSpec_TrainTrialSpec;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.
 * Use `create(NasJobSpec_MultiTrialAlgorithmSpecSchema)` to create a new message.
 */
export const NasJobSpec_MultiTrialAlgorithmSpecSchema: GenMessage<NasJobSpec_MultiTrialAlgorithmSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0);

/**
 * Represents a metric to optimize.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec
 */
export type NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec = Message<"google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec"> & {
  /**
   * Required. The ID of the metric. Must not contain whitespaces.
   *
   * @generated from field: string metric_id = 1;
   */
  metricId: string;

  /**
   * Required. The optimization goal of the metric.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.GoalType goal = 2;
   */
  goal: NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec_GoalType;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.
 * Use `create(NasJobSpec_MultiTrialAlgorithmSpec_MetricSpecSchema)` to create a new message.
 */
export const NasJobSpec_MultiTrialAlgorithmSpec_MetricSpecSchema: GenMessage<NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0, 0);

/**
 * The available types of optimization goals.
 *
 * @generated from enum google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.GoalType
 */
export enum NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec_GoalType {
  /**
   * Goal Type will default to maximize.
   *
   * @generated from enum value: GOAL_TYPE_UNSPECIFIED = 0;
   */
  GOAL_TYPE_UNSPECIFIED = 0,

  /**
   * Maximize the goal metric.
   *
   * @generated from enum value: MAXIMIZE = 1;
   */
  MAXIMIZE = 1,

  /**
   * Minimize the goal metric.
   *
   * @generated from enum value: MINIMIZE = 2;
   */
  MINIMIZE = 2,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MetricSpec.GoalType.
 */
export const NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec_GoalTypeSchema: GenEnum<NasJobSpec_MultiTrialAlgorithmSpec_MetricSpec_GoalType> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0, 0, 0);

/**
 * Represent spec for search trials.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec
 */
export type NasJobSpec_MultiTrialAlgorithmSpec_SearchTrialSpec = Message<"google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec"> & {
  /**
   * Required. The spec of a search trial job. The same spec applies to
   * all search trials.
   *
   * @generated from field: google.cloud.aiplatform.v1.CustomJobSpec search_trial_job_spec = 1;
   */
  searchTrialJobSpec?: CustomJobSpec;

  /**
   * Required. The maximum number of Neural Architecture Search (NAS) trials
   * to run.
   *
   * @generated from field: int32 max_trial_count = 2;
   */
  maxTrialCount: number;

  /**
   * Required. The maximum number of trials to run in parallel.
   *
   * @generated from field: int32 max_parallel_trial_count = 3;
   */
  maxParallelTrialCount: number;

  /**
   * The number of failed trials that need to be seen before failing
   * the NasJob.
   *
   * If set to 0, Vertex AI decides how many trials must fail
   * before the whole job fails.
   *
   * @generated from field: int32 max_failed_trial_count = 4;
   */
  maxFailedTrialCount: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.SearchTrialSpec.
 * Use `create(NasJobSpec_MultiTrialAlgorithmSpec_SearchTrialSpecSchema)` to create a new message.
 */
export const NasJobSpec_MultiTrialAlgorithmSpec_SearchTrialSpecSchema: GenMessage<NasJobSpec_MultiTrialAlgorithmSpec_SearchTrialSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0, 1);

/**
 * Represent spec for train trials.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec
 */
export type NasJobSpec_MultiTrialAlgorithmSpec_TrainTrialSpec = Message<"google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec"> & {
  /**
   * Required. The spec of a train trial job. The same spec applies to
   * all train trials.
   *
   * @generated from field: google.cloud.aiplatform.v1.CustomJobSpec train_trial_job_spec = 1;
   */
  trainTrialJobSpec?: CustomJobSpec;

  /**
   * Required. The maximum number of trials to run in parallel.
   *
   * @generated from field: int32 max_parallel_trial_count = 2;
   */
  maxParallelTrialCount: number;

  /**
   * Required. Frequency of search trials to start train stage. Top N
   * [TrainTrialSpec.max_parallel_trial_count]
   * search trials will be trained for every M
   * [TrainTrialSpec.frequency] trials searched.
   *
   * @generated from field: int32 frequency = 3;
   */
  frequency: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.TrainTrialSpec.
 * Use `create(NasJobSpec_MultiTrialAlgorithmSpec_TrainTrialSpecSchema)` to create a new message.
 */
export const NasJobSpec_MultiTrialAlgorithmSpec_TrainTrialSpecSchema: GenMessage<NasJobSpec_MultiTrialAlgorithmSpec_TrainTrialSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0, 2);

/**
 * The available types of multi-trial algorithms.
 *
 * @generated from enum google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MultiTrialAlgorithm
 */
export enum NasJobSpec_MultiTrialAlgorithmSpec_MultiTrialAlgorithm {
  /**
   * Defaults to `REINFORCEMENT_LEARNING`.
   *
   * @generated from enum value: MULTI_TRIAL_ALGORITHM_UNSPECIFIED = 0;
   */
  MULTI_TRIAL_ALGORITHM_UNSPECIFIED = 0,

  /**
   * The Reinforcement Learning Algorithm for Multi-trial Neural
   * Architecture Search (NAS).
   *
   * @generated from enum value: REINFORCEMENT_LEARNING = 1;
   */
  REINFORCEMENT_LEARNING = 1,

  /**
   * The Grid Search Algorithm for Multi-trial Neural
   * Architecture Search (NAS).
   *
   * @generated from enum value: GRID_SEARCH = 2;
   */
  GRID_SEARCH = 2,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.NasJobSpec.MultiTrialAlgorithmSpec.MultiTrialAlgorithm.
 */
export const NasJobSpec_MultiTrialAlgorithmSpec_MultiTrialAlgorithmSchema: GenEnum<NasJobSpec_MultiTrialAlgorithmSpec_MultiTrialAlgorithm> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_nas_job, 2, 0, 0);

/**
 * Represents a uCAIP NasJob output.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobOutput
 */
export type NasJobOutput = Message<"google.cloud.aiplatform.v1.NasJobOutput"> & {
  /**
   * The output of this Neural Architecture Search (NAS) job.
   *
   * @generated from oneof google.cloud.aiplatform.v1.NasJobOutput.output
   */
  output: {
    /**
     * Output only. The output of this multi-trial Neural Architecture Search
     * (NAS) job.
     *
     * @generated from field: google.cloud.aiplatform.v1.NasJobOutput.MultiTrialJobOutput multi_trial_job_output = 1;
     */
    value: NasJobOutput_MultiTrialJobOutput;
    case: "multiTrialJobOutput";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobOutput.
 * Use `create(NasJobOutputSchema)` to create a new message.
 */
export const NasJobOutputSchema: GenMessage<NasJobOutput> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 3);

/**
 * The output of a multi-trial Neural Architecture Search (NAS) jobs.
 *
 * @generated from message google.cloud.aiplatform.v1.NasJobOutput.MultiTrialJobOutput
 */
export type NasJobOutput_MultiTrialJobOutput = Message<"google.cloud.aiplatform.v1.NasJobOutput.MultiTrialJobOutput"> & {
  /**
   * Output only. List of NasTrials that were started as part of search stage.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.NasTrial search_trials = 1;
   */
  searchTrials: NasTrial[];

  /**
   * Output only. List of NasTrials that were started as part of train stage.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.NasTrial train_trials = 2;
   */
  trainTrials: NasTrial[];
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasJobOutput.MultiTrialJobOutput.
 * Use `create(NasJobOutput_MultiTrialJobOutputSchema)` to create a new message.
 */
export const NasJobOutput_MultiTrialJobOutputSchema: GenMessage<NasJobOutput_MultiTrialJobOutput> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 3, 0);

/**
 * Represents a uCAIP NasJob trial.
 *
 * @generated from message google.cloud.aiplatform.v1.NasTrial
 */
export type NasTrial = Message<"google.cloud.aiplatform.v1.NasTrial"> & {
  /**
   * Output only. The identifier of the NasTrial assigned by the service.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Output only. The detailed state of the NasTrial.
   *
   * @generated from field: google.cloud.aiplatform.v1.NasTrial.State state = 2;
   */
  state: NasTrial_State;

  /**
   * Output only. The final measurement containing the objective value.
   *
   * @generated from field: google.cloud.aiplatform.v1.Measurement final_measurement = 3;
   */
  finalMeasurement?: Measurement;

  /**
   * Output only. Time when the NasTrial was started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * Output only. Time when the NasTrial's status changed to `SUCCEEDED` or
   * `INFEASIBLE`.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.cloud.aiplatform.v1.NasTrial.
 * Use `create(NasTrialSchema)` to create a new message.
 */
export const NasTrialSchema: GenMessage<NasTrial> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_nas_job, 4);

/**
 * Describes a NasTrial state.
 *
 * @generated from enum google.cloud.aiplatform.v1.NasTrial.State
 */
export enum NasTrial_State {
  /**
   * The NasTrial state is unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Indicates that a specific NasTrial has been requested, but it has not yet
   * been suggested by the service.
   *
   * @generated from enum value: REQUESTED = 1;
   */
  REQUESTED = 1,

  /**
   * Indicates that the NasTrial has been suggested.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * Indicates that the NasTrial should stop according to the service.
   *
   * @generated from enum value: STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * Indicates that the NasTrial is completed successfully.
   *
   * @generated from enum value: SUCCEEDED = 4;
   */
  SUCCEEDED = 4,

  /**
   * Indicates that the NasTrial should not be attempted again.
   * The service will set a NasTrial to INFEASIBLE when it's done but missing
   * the final_measurement.
   *
   * @generated from enum value: INFEASIBLE = 5;
   */
  INFEASIBLE = 5,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.NasTrial.State.
 */
export const NasTrial_StateSchema: GenEnum<NasTrial_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_nas_job, 4, 0);

