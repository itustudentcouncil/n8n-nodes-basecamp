// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1/vizier_service.proto (package google.cloud.aiplatform.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { GenericOperationMetadata } from "./operation_pb";
import { file_google_cloud_aiplatform_v1_operation } from "./operation_pb";
import type { Measurement, Study, Study_State, StudySchema, Trial, TrialContext, TrialSchema } from "./study_pb";
import { file_google_cloud_aiplatform_v1_study } from "./study_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1/vizier_service.proto.
 */
export const file_google_cloud_aiplatform_v1_vizier_service: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MS92aXppZXJfc2VydmljZS5wcm90bxIaZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEiSAoPR2V0U3R1ZHlSZXF1ZXN0EjUKBG5hbWUYASABKAlCJ+BBAvpBIQofYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS9TdHVkeSKGAQoSQ3JlYXRlU3R1ZHlSZXF1ZXN0EjkKBnBhcmVudBgBIAEoCUIp4EEC+kEjCiFsb2NhdGlvbnMuZ29vZ2xlYXBpcy5jb20vTG9jYXRpb24SNQoFc3R1ZHkYAiABKAsyIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5TdHVkeUID4EECIoABChJMaXN0U3R1ZGllc1JlcXVlc3QSOQoGcGFyZW50GAEgASgJQingQQL6QSMKIWxvY2F0aW9ucy5nb29nbGVhcGlzLmNvbS9Mb2NhdGlvbhIXCgpwYWdlX3Rva2VuGAIgASgJQgPgQQESFgoJcGFnZV9zaXplGAMgASgFQgPgQQEiYgoTTGlzdFN0dWRpZXNSZXNwb25zZRIyCgdzdHVkaWVzGAEgAygLMiEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuU3R1ZHkSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIksKEkRlbGV0ZVN0dWR5UmVxdWVzdBI1CgRuYW1lGAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vU3R1ZHkiagoSTG9va3VwU3R1ZHlSZXF1ZXN0EjkKBnBhcmVudBgBIAEoCUIp4EEC+kEjCiFsb2NhdGlvbnMuZ29vZ2xlYXBpcy5jb20vTG9jYXRpb24SGQoMZGlzcGxheV9uYW1lGAIgASgJQgPgQQIixwEKFFN1Z2dlc3RUcmlhbHNSZXF1ZXN0EjcKBnBhcmVudBgBIAEoCUIn4EEC+kEhCh9haXBsYXRmb3JtLmdvb2dsZWFwaXMuY29tL1N0dWR5Eh0KEHN1Z2dlc3Rpb25fY291bnQYAiABKAVCA+BBAhIWCgljbGllbnRfaWQYAyABKAlCA+BBAhI/Cghjb250ZXh0cxgEIAMoCzIoLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLlRyaWFsQ29udGV4dEID4EEBIuYBChVTdWdnZXN0VHJpYWxzUmVzcG9uc2USMQoGdHJpYWxzGAEgAygLMiEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuVHJpYWwSPAoLc3R1ZHlfc3RhdGUYAiABKA4yJy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5TdHVkeS5TdGF0ZRIuCgpzdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiegoVU3VnZ2VzdFRyaWFsc01ldGFkYXRhEk4KEGdlbmVyaWNfbWV0YWRhdGEYASABKAsyNC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5HZW5lcmljT3BlcmF0aW9uTWV0YWRhdGESEQoJY2xpZW50X2lkGAIgASgJIoQBChJDcmVhdGVUcmlhbFJlcXVlc3QSNwoGcGFyZW50GAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vU3R1ZHkSNQoFdHJpYWwYAiABKAsyIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5UcmlhbEID4EECIkgKD0dldFRyaWFsUmVxdWVzdBI1CgRuYW1lGAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vVHJpYWwifQoRTGlzdFRyaWFsc1JlcXVlc3QSNwoGcGFyZW50GAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vU3R1ZHkSFwoKcGFnZV90b2tlbhgCIAEoCUID4EEBEhYKCXBhZ2Vfc2l6ZRgDIAEoBUID4EEBImAKEkxpc3RUcmlhbHNSZXNwb25zZRIxCgZ0cmlhbHMYASADKAsyIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5UcmlhbBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkinAEKGkFkZFRyaWFsTWVhc3VyZW1lbnRSZXF1ZXN0EjsKCnRyaWFsX25hbWUYASABKAlCJ+BBAvpBIQofYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS9UcmlhbBJBCgttZWFzdXJlbWVudBgDIAEoCzInLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk1lYXN1cmVtZW50QgPgQQIi1QEKFENvbXBsZXRlVHJpYWxSZXF1ZXN0EjUKBG5hbWUYASABKAlCJ+BBAvpBIQofYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS9UcmlhbBJHChFmaW5hbF9tZWFzdXJlbWVudBgCIAEoCzInLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLk1lYXN1cmVtZW50QgPgQQESHQoQdHJpYWxfaW5mZWFzaWJsZRgDIAEoCEID4EEBEh4KEWluZmVhc2libGVfcmVhc29uGAQgASgJQgPgQQEiSwoSRGVsZXRlVHJpYWxSZXF1ZXN0EjUKBG5hbWUYASABKAlCJ+BBAvpBIQofYWlwbGF0Zm9ybS5nb29nbGVhcGlzLmNvbS9UcmlhbCJiCiNDaGVja1RyaWFsRWFybHlTdG9wcGluZ1N0YXRlUmVxdWVzdBI7Cgp0cmlhbF9uYW1lGAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vVHJpYWwiOwokQ2hlY2tUcmlhbEVhcmx5U3RvcHBpbmdTdGF0ZVJlc3BvbnNlEhMKC3Nob3VsZF9zdG9wGAEgASgIIpUBCiVDaGVja1RyaWFsRWFybHlTdG9wcGluZ1N0YXRlTWV0YXRkYXRhEk4KEGdlbmVyaWNfbWV0YWRhdGEYASABKAsyNC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5HZW5lcmljT3BlcmF0aW9uTWV0YWRhdGESDQoFc3R1ZHkYAiABKAkSDQoFdHJpYWwYAyABKAkiSQoQU3RvcFRyaWFsUmVxdWVzdBI1CgRuYW1lGAEgASgJQifgQQL6QSEKH2FpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vVHJpYWwiUwoYTGlzdE9wdGltYWxUcmlhbHNSZXF1ZXN0EjcKBnBhcmVudBgBIAEoCUIn4EEC+kEhCh9haXBsYXRmb3JtLmdvb2dsZWFwaXMuY29tL1N0dWR5IlYKGUxpc3RPcHRpbWFsVHJpYWxzUmVzcG9uc2USOQoOb3B0aW1hbF90cmlhbHMYASADKAsyIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5UcmlhbDLUFgoNVml6aWVyU2VydmljZRKrAQoLQ3JlYXRlU3R1ZHkSLi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5DcmVhdGVTdHVkeVJlcXVlc3QaIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5TdHVkeSJJ2kEMcGFyZW50LHN0dWR5gtPkkwI0OgVzdHVkeSIrL3YxL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vc3R1ZGllcxKWAQoIR2V0U3R1ZHkSKy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5HZXRTdHVkeVJlcXVlc3QaIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5TdHVkeSI62kEEbmFtZYLT5JMCLRIrL3YxL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovc3R1ZGllcy8qfRKsAQoLTGlzdFN0dWRpZXMSLi5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5MaXN0U3R1ZGllc1JlcXVlc3QaLy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5MaXN0U3R1ZGllc1Jlc3BvbnNlIjzaQQZwYXJlbnSC0+STAi0SKy92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyp9L3N0dWRpZXMSkQEKC0RlbGV0ZVN0dWR5Ei4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRGVsZXRlU3R1ZHlSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IjraQQRuYW1lgtPkkwItKisvdjEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9zdHVkaWVzLyp9EqgBCgtMb29rdXBTdHVkeRIuLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkxvb2t1cFN0dWR5UmVxdWVzdBohLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLlN0dWR5IkbaQQZwYXJlbnSC0+STAjc6ASoiMi92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyp9L3N0dWRpZXM6bG9va3VwEtoBCg1TdWdnZXN0VHJpYWxzEjAuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuU3VnZ2VzdFRyaWFsc1JlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uInjKQS4KFVN1Z2dlc3RUcmlhbHNSZXNwb25zZRIVU3VnZ2VzdFRyaWFsc01ldGFkYXRhgtPkkwJBOgEqIjwvdjEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKn0vdHJpYWxzOnN1Z2dlc3QStAEKC0NyZWF0ZVRyaWFsEi4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuQ3JlYXRlVHJpYWxSZXF1ZXN0GiEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuVHJpYWwiUtpBDHBhcmVudCx0cmlhbILT5JMCPToFdHJpYWwiNC92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyovc3R1ZGllcy8qfS90cmlhbHMSnwEKCEdldFRyaWFsEisuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuR2V0VHJpYWxSZXF1ZXN0GiEuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuVHJpYWwiQ9pBBG5hbWWC0+STAjYSNC92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKi90cmlhbHMvKn0SsgEKCkxpc3RUcmlhbHMSLS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5MaXN0VHJpYWxzUmVxdWVzdBouLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkxpc3RUcmlhbHNSZXNwb25zZSJF2kEGcGFyZW50gtPkkwI2EjQvdjEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKn0vdHJpYWxzEssBChNBZGRUcmlhbE1lYXN1cmVtZW50EjYuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuQWRkVHJpYWxNZWFzdXJlbWVudFJlcXVlc3QaIS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5UcmlhbCJZgtPkkwJTOgEqIk4vdjEve3RyaWFsX25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9zdHVkaWVzLyovdHJpYWxzLyp9OmFkZFRyaWFsTWVhc3VyZW1lbnQSrgEKDUNvbXBsZXRlVHJpYWwSMC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5Db21wbGV0ZVRyaWFsUmVxdWVzdBohLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLlRyaWFsIkiC0+STAkI6ASoiPS92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKi90cmlhbHMvKn06Y29tcGxldGUSmgEKC0RlbGV0ZVRyaWFsEi4uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRGVsZXRlVHJpYWxSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IkPaQQRuYW1lgtPkkwI2KjQvdjEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9zdHVkaWVzLyovdHJpYWxzLyp9ErMCChxDaGVja1RyaWFsRWFybHlTdG9wcGluZ1N0YXRlEj8uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuQ2hlY2tUcmlhbEVhcmx5U3RvcHBpbmdTdGF0ZVJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIrIBykFNCiRDaGVja1RyaWFsRWFybHlTdG9wcGluZ1N0YXRlUmVzcG9uc2USJUNoZWNrVHJpYWxFYXJseVN0b3BwaW5nU3RhdGVNZXRhdGRhdGGC0+STAlw6ASoiVy92MS97dHJpYWxfbmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKi90cmlhbHMvKn06Y2hlY2tUcmlhbEVhcmx5U3RvcHBpbmdTdGF0ZRKiAQoJU3RvcFRyaWFsEiwuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuU3RvcFRyaWFsUmVxdWVzdBohLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLlRyaWFsIkSC0+STAj46ASoiOS92MS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3N0dWRpZXMvKi90cmlhbHMvKn06c3RvcBLcAQoRTGlzdE9wdGltYWxUcmlhbHMSNC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5MaXN0T3B0aW1hbFRyaWFsc1JlcXVlc3QaNS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5MaXN0T3B0aW1hbFRyaWFsc1Jlc3BvbnNlIlraQQZwYXJlbnSC0+STAks6ASoiRi92MS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyovc3R1ZGllcy8qfS90cmlhbHM6bGlzdE9wdGltYWxUcmlhbHMaTcpBGWFpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb23SQS5odHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQtABCh5jb20uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjFCElZpemllclNlcnZpY2VQcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL2FpcGxhdGZvcm0vYXBpdjEvYWlwbGF0Zm9ybXBiO2FpcGxhdGZvcm1wYqoCGkdvb2dsZS5DbG91ZC5BSVBsYXRmb3JtLlYxygIaR29vZ2xlXENsb3VkXEFJUGxhdGZvcm1cVjHqAh1Hb29nbGU6OkNsb3VkOjpBSVBsYXRmb3JtOjpWMWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_aiplatform_v1_operation, file_google_cloud_aiplatform_v1_study, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_timestamp]);

/**
 * Request message for
 * [VizierService.GetStudy][google.cloud.aiplatform.v1.VizierService.GetStudy].
 *
 * @generated from message google.cloud.aiplatform.v1.GetStudyRequest
 */
export type GetStudyRequest = Message<"google.cloud.aiplatform.v1.GetStudyRequest"> & {
  /**
   * Required. The name of the Study resource.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.GetStudyRequest.
 * Use `create(GetStudyRequestSchema)` to create a new message.
 */
export const GetStudyRequestSchema: GenMessage<GetStudyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 0);

/**
 * Request message for
 * [VizierService.CreateStudy][google.cloud.aiplatform.v1.VizierService.CreateStudy].
 *
 * @generated from message google.cloud.aiplatform.v1.CreateStudyRequest
 */
export type CreateStudyRequest = Message<"google.cloud.aiplatform.v1.CreateStudyRequest"> & {
  /**
   * Required. The resource name of the Location to create the CustomJob in.
   * Format: `projects/{project}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The Study configuration used to create the Study.
   *
   * @generated from field: google.cloud.aiplatform.v1.Study study = 2;
   */
  study?: Study;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CreateStudyRequest.
 * Use `create(CreateStudyRequestSchema)` to create a new message.
 */
export const CreateStudyRequestSchema: GenMessage<CreateStudyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 1);

/**
 * Request message for
 * [VizierService.ListStudies][google.cloud.aiplatform.v1.VizierService.ListStudies].
 *
 * @generated from message google.cloud.aiplatform.v1.ListStudiesRequest
 */
export type ListStudiesRequest = Message<"google.cloud.aiplatform.v1.ListStudiesRequest"> & {
  /**
   * Required. The resource name of the Location to list the Study from.
   * Format: `projects/{project}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. A page token to request the next page of results.
   * If unspecified, there are no subsequent pages.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. The maximum number of studies to return per "page" of results.
   * If unspecified, service will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListStudiesRequest.
 * Use `create(ListStudiesRequestSchema)` to create a new message.
 */
export const ListStudiesRequestSchema: GenMessage<ListStudiesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 2);

/**
 * Response message for
 * [VizierService.ListStudies][google.cloud.aiplatform.v1.VizierService.ListStudies].
 *
 * @generated from message google.cloud.aiplatform.v1.ListStudiesResponse
 */
export type ListStudiesResponse = Message<"google.cloud.aiplatform.v1.ListStudiesResponse"> & {
  /**
   * The studies associated with the project.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.Study studies = 1;
   */
  studies: Study[];

  /**
   * Passes this token as the `page_token` field of the request for a
   * subsequent call.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListStudiesResponse.
 * Use `create(ListStudiesResponseSchema)` to create a new message.
 */
export const ListStudiesResponseSchema: GenMessage<ListStudiesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 3);

/**
 * Request message for
 * [VizierService.DeleteStudy][google.cloud.aiplatform.v1.VizierService.DeleteStudy].
 *
 * @generated from message google.cloud.aiplatform.v1.DeleteStudyRequest
 */
export type DeleteStudyRequest = Message<"google.cloud.aiplatform.v1.DeleteStudyRequest"> & {
  /**
   * Required. The name of the Study resource to be deleted.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.DeleteStudyRequest.
 * Use `create(DeleteStudyRequestSchema)` to create a new message.
 */
export const DeleteStudyRequestSchema: GenMessage<DeleteStudyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 4);

/**
 * Request message for
 * [VizierService.LookupStudy][google.cloud.aiplatform.v1.VizierService.LookupStudy].
 *
 * @generated from message google.cloud.aiplatform.v1.LookupStudyRequest
 */
export type LookupStudyRequest = Message<"google.cloud.aiplatform.v1.LookupStudyRequest"> & {
  /**
   * Required. The resource name of the Location to get the Study from.
   * Format: `projects/{project}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The user-defined display name of the Study
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.LookupStudyRequest.
 * Use `create(LookupStudyRequestSchema)` to create a new message.
 */
export const LookupStudyRequestSchema: GenMessage<LookupStudyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 5);

/**
 * Request message for
 * [VizierService.SuggestTrials][google.cloud.aiplatform.v1.VizierService.SuggestTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.SuggestTrialsRequest
 */
export type SuggestTrialsRequest = Message<"google.cloud.aiplatform.v1.SuggestTrialsRequest"> & {
  /**
   * Required. The project and location that the Study belongs to.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The number of suggestions requested. It must be positive.
   *
   * @generated from field: int32 suggestion_count = 2;
   */
  suggestionCount: number;

  /**
   * Required. The identifier of the client that is requesting the suggestion.
   *
   * If multiple SuggestTrialsRequests have the same `client_id`,
   * the service will return the identical suggested Trial if the Trial is
   * pending, and provide a new Trial if the last suggested Trial was completed.
   *
   * @generated from field: string client_id = 3;
   */
  clientId: string;

  /**
   * Optional. This allows you to specify the "context" for a Trial; a context
   * is a slice (a subspace) of the search space.
   *
   * Typical uses for contexts:
   * 1) You are using Vizier to tune a server for best performance, but there's
   *   a strong weekly cycle.  The context specifies the day-of-week.
   *   This allows Tuesday to generalize from Wednesday without assuming that
   *   everything is identical.
   * 2) Imagine you're optimizing some medical treatment for people.
   *   As they walk in the door, you know certain facts about them
   *   (e.g. sex, weight, height, blood-pressure).  Put that information in the
   *   context, and Vizier will adapt its suggestions to the patient.
   * 3) You want to do a fair A/B test efficiently.  Specify the "A" and "B"
   *   conditions as contexts, and Vizier will generalize between "A" and "B"
   *   conditions.  If they are similar, this will allow Vizier to converge
   *   to the optimum faster than if "A" and "B" were separate Studies.
   *   NOTE: You can also enter contexts as REQUESTED Trials, e.g. via the
   *   CreateTrial() RPC; that's the asynchronous option where you don't need a
   *   close association between contexts and suggestions.
   *
   * NOTE: All the Parameters you set in a context MUST be defined in the
   *   Study.
   * NOTE: You must supply 0 or $suggestion_count contexts.
   *   If you don't supply any contexts, Vizier will make suggestions
   *   from the full search space specified in the StudySpec; if you supply
   *   a full set of context, each suggestion will match the corresponding
   *   context.
   * NOTE: A Context with no features set matches anything, and allows
   *   suggestions from the full search space.
   * NOTE: Contexts MUST lie within the search space specified in the
   *   StudySpec.  It's an error if they don't.
   * NOTE: Contexts preferentially match ACTIVE then REQUESTED trials before
   *   new suggestions are generated.
   * NOTE: Generation of suggestions involves a match between a Context and
   *   (optionally) a REQUESTED trial; if that match is not fully specified, a
   *   suggestion will be geneated in the merged subspace.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.TrialContext contexts = 4;
   */
  contexts: TrialContext[];
};

/**
 * Describes the message google.cloud.aiplatform.v1.SuggestTrialsRequest.
 * Use `create(SuggestTrialsRequestSchema)` to create a new message.
 */
export const SuggestTrialsRequestSchema: GenMessage<SuggestTrialsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 6);

/**
 * Response message for
 * [VizierService.SuggestTrials][google.cloud.aiplatform.v1.VizierService.SuggestTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.SuggestTrialsResponse
 */
export type SuggestTrialsResponse = Message<"google.cloud.aiplatform.v1.SuggestTrialsResponse"> & {
  /**
   * A list of Trials.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.Trial trials = 1;
   */
  trials: Trial[];

  /**
   * The state of the Study.
   *
   * @generated from field: google.cloud.aiplatform.v1.Study.State study_state = 2;
   */
  studyState: Study_State;

  /**
   * The time at which the operation was started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * The time at which operation processing completed.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.cloud.aiplatform.v1.SuggestTrialsResponse.
 * Use `create(SuggestTrialsResponseSchema)` to create a new message.
 */
export const SuggestTrialsResponseSchema: GenMessage<SuggestTrialsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 7);

/**
 * Details of operations that perform Trials suggestion.
 *
 * @generated from message google.cloud.aiplatform.v1.SuggestTrialsMetadata
 */
export type SuggestTrialsMetadata = Message<"google.cloud.aiplatform.v1.SuggestTrialsMetadata"> & {
  /**
   * Operation metadata for suggesting Trials.
   *
   * @generated from field: google.cloud.aiplatform.v1.GenericOperationMetadata generic_metadata = 1;
   */
  genericMetadata?: GenericOperationMetadata;

  /**
   * The identifier of the client that is requesting the suggestion.
   *
   * If multiple SuggestTrialsRequests have the same `client_id`,
   * the service will return the identical suggested Trial if the Trial is
   * pending, and provide a new Trial if the last suggested Trial was completed.
   *
   * @generated from field: string client_id = 2;
   */
  clientId: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.SuggestTrialsMetadata.
 * Use `create(SuggestTrialsMetadataSchema)` to create a new message.
 */
export const SuggestTrialsMetadataSchema: GenMessage<SuggestTrialsMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 8);

/**
 * Request message for
 * [VizierService.CreateTrial][google.cloud.aiplatform.v1.VizierService.CreateTrial].
 *
 * @generated from message google.cloud.aiplatform.v1.CreateTrialRequest
 */
export type CreateTrialRequest = Message<"google.cloud.aiplatform.v1.CreateTrialRequest"> & {
  /**
   * Required. The resource name of the Study to create the Trial in.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The Trial to create.
   *
   * @generated from field: google.cloud.aiplatform.v1.Trial trial = 2;
   */
  trial?: Trial;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CreateTrialRequest.
 * Use `create(CreateTrialRequestSchema)` to create a new message.
 */
export const CreateTrialRequestSchema: GenMessage<CreateTrialRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 9);

/**
 * Request message for
 * [VizierService.GetTrial][google.cloud.aiplatform.v1.VizierService.GetTrial].
 *
 * @generated from message google.cloud.aiplatform.v1.GetTrialRequest
 */
export type GetTrialRequest = Message<"google.cloud.aiplatform.v1.GetTrialRequest"> & {
  /**
   * Required. The name of the Trial resource.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.GetTrialRequest.
 * Use `create(GetTrialRequestSchema)` to create a new message.
 */
export const GetTrialRequestSchema: GenMessage<GetTrialRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 10);

/**
 * Request message for
 * [VizierService.ListTrials][google.cloud.aiplatform.v1.VizierService.ListTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.ListTrialsRequest
 */
export type ListTrialsRequest = Message<"google.cloud.aiplatform.v1.ListTrialsRequest"> & {
  /**
   * Required. The resource name of the Study to list the Trial from.
   * Format: `projects/{project}/locations/{location}/studies/{study}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. A page token to request the next page of results.
   * If unspecified, there are no subsequent pages.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. The number of Trials to retrieve per "page" of results.
   * If unspecified, the service will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListTrialsRequest.
 * Use `create(ListTrialsRequestSchema)` to create a new message.
 */
export const ListTrialsRequestSchema: GenMessage<ListTrialsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 11);

/**
 * Response message for
 * [VizierService.ListTrials][google.cloud.aiplatform.v1.VizierService.ListTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.ListTrialsResponse
 */
export type ListTrialsResponse = Message<"google.cloud.aiplatform.v1.ListTrialsResponse"> & {
  /**
   * The Trials associated with the Study.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.Trial trials = 1;
   */
  trials: Trial[];

  /**
   * Pass this token as the `page_token` field of the request for a
   * subsequent call.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListTrialsResponse.
 * Use `create(ListTrialsResponseSchema)` to create a new message.
 */
export const ListTrialsResponseSchema: GenMessage<ListTrialsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 12);

/**
 * Request message for
 * [VizierService.AddTrialMeasurement][google.cloud.aiplatform.v1.VizierService.AddTrialMeasurement].
 *
 * @generated from message google.cloud.aiplatform.v1.AddTrialMeasurementRequest
 */
export type AddTrialMeasurementRequest = Message<"google.cloud.aiplatform.v1.AddTrialMeasurementRequest"> & {
  /**
   * Required. The name of the trial to add measurement.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string trial_name = 1;
   */
  trialName: string;

  /**
   * Required. The measurement to be added to a Trial.
   *
   * @generated from field: google.cloud.aiplatform.v1.Measurement measurement = 3;
   */
  measurement?: Measurement;
};

/**
 * Describes the message google.cloud.aiplatform.v1.AddTrialMeasurementRequest.
 * Use `create(AddTrialMeasurementRequestSchema)` to create a new message.
 */
export const AddTrialMeasurementRequestSchema: GenMessage<AddTrialMeasurementRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 13);

/**
 * Request message for
 * [VizierService.CompleteTrial][google.cloud.aiplatform.v1.VizierService.CompleteTrial].
 *
 * @generated from message google.cloud.aiplatform.v1.CompleteTrialRequest
 */
export type CompleteTrialRequest = Message<"google.cloud.aiplatform.v1.CompleteTrialRequest"> & {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. If provided, it will be used as the completed Trial's
   * final_measurement; Otherwise, the service will auto-select a
   * previously reported measurement as the final-measurement
   *
   * @generated from field: google.cloud.aiplatform.v1.Measurement final_measurement = 2;
   */
  finalMeasurement?: Measurement;

  /**
   * Optional. True if the Trial cannot be run with the given Parameter, and
   * final_measurement will be ignored.
   *
   * @generated from field: bool trial_infeasible = 3;
   */
  trialInfeasible: boolean;

  /**
   * Optional. A human readable reason why the trial was infeasible. This should
   * only be provided if `trial_infeasible` is true.
   *
   * @generated from field: string infeasible_reason = 4;
   */
  infeasibleReason: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CompleteTrialRequest.
 * Use `create(CompleteTrialRequestSchema)` to create a new message.
 */
export const CompleteTrialRequestSchema: GenMessage<CompleteTrialRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 14);

/**
 * Request message for
 * [VizierService.DeleteTrial][google.cloud.aiplatform.v1.VizierService.DeleteTrial].
 *
 * @generated from message google.cloud.aiplatform.v1.DeleteTrialRequest
 */
export type DeleteTrialRequest = Message<"google.cloud.aiplatform.v1.DeleteTrialRequest"> & {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.DeleteTrialRequest.
 * Use `create(DeleteTrialRequestSchema)` to create a new message.
 */
export const DeleteTrialRequestSchema: GenMessage<DeleteTrialRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 15);

/**
 * Request message for
 * [VizierService.CheckTrialEarlyStoppingState][google.cloud.aiplatform.v1.VizierService.CheckTrialEarlyStoppingState].
 *
 * @generated from message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateRequest
 */
export type CheckTrialEarlyStoppingStateRequest = Message<"google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateRequest"> & {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string trial_name = 1;
   */
  trialName: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateRequest.
 * Use `create(CheckTrialEarlyStoppingStateRequestSchema)` to create a new message.
 */
export const CheckTrialEarlyStoppingStateRequestSchema: GenMessage<CheckTrialEarlyStoppingStateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 16);

/**
 * Response message for
 * [VizierService.CheckTrialEarlyStoppingState][google.cloud.aiplatform.v1.VizierService.CheckTrialEarlyStoppingState].
 *
 * @generated from message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse
 */
export type CheckTrialEarlyStoppingStateResponse = Message<"google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse"> & {
  /**
   * True if the Trial should stop.
   *
   * @generated from field: bool should_stop = 1;
   */
  shouldStop: boolean;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse.
 * Use `create(CheckTrialEarlyStoppingStateResponseSchema)` to create a new message.
 */
export const CheckTrialEarlyStoppingStateResponseSchema: GenMessage<CheckTrialEarlyStoppingStateResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 17);

/**
 * This message will be placed in the metadata field of a
 * google.longrunning.Operation associated with a CheckTrialEarlyStoppingState
 * request.
 *
 * @generated from message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateMetatdata
 */
export type CheckTrialEarlyStoppingStateMetatdata = Message<"google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateMetatdata"> & {
  /**
   * Operation metadata for suggesting Trials.
   *
   * @generated from field: google.cloud.aiplatform.v1.GenericOperationMetadata generic_metadata = 1;
   */
  genericMetadata?: GenericOperationMetadata;

  /**
   * The name of the Study that the Trial belongs to.
   *
   * @generated from field: string study = 2;
   */
  study: string;

  /**
   * The Trial name.
   *
   * @generated from field: string trial = 3;
   */
  trial: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateMetatdata.
 * Use `create(CheckTrialEarlyStoppingStateMetatdataSchema)` to create a new message.
 */
export const CheckTrialEarlyStoppingStateMetatdataSchema: GenMessage<CheckTrialEarlyStoppingStateMetatdata> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 18);

/**
 * Request message for
 * [VizierService.StopTrial][google.cloud.aiplatform.v1.VizierService.StopTrial].
 *
 * @generated from message google.cloud.aiplatform.v1.StopTrialRequest
 */
export type StopTrialRequest = Message<"google.cloud.aiplatform.v1.StopTrialRequest"> & {
  /**
   * Required. The Trial's name.
   * Format:
   * `projects/{project}/locations/{location}/studies/{study}/trials/{trial}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.StopTrialRequest.
 * Use `create(StopTrialRequestSchema)` to create a new message.
 */
export const StopTrialRequestSchema: GenMessage<StopTrialRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 19);

/**
 * Request message for
 * [VizierService.ListOptimalTrials][google.cloud.aiplatform.v1.VizierService.ListOptimalTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.ListOptimalTrialsRequest
 */
export type ListOptimalTrialsRequest = Message<"google.cloud.aiplatform.v1.ListOptimalTrialsRequest"> & {
  /**
   * Required. The name of the Study that the optimal Trial belongs to.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListOptimalTrialsRequest.
 * Use `create(ListOptimalTrialsRequestSchema)` to create a new message.
 */
export const ListOptimalTrialsRequestSchema: GenMessage<ListOptimalTrialsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 20);

/**
 * Response message for
 * [VizierService.ListOptimalTrials][google.cloud.aiplatform.v1.VizierService.ListOptimalTrials].
 *
 * @generated from message google.cloud.aiplatform.v1.ListOptimalTrialsResponse
 */
export type ListOptimalTrialsResponse = Message<"google.cloud.aiplatform.v1.ListOptimalTrialsResponse"> & {
  /**
   * The pareto-optimal Trials for multiple objective Study or the
   * optimal trial for single objective Study. The definition of
   * pareto-optimal can be checked in wiki page.
   * https://en.wikipedia.org/wiki/Pareto_efficiency
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.Trial optimal_trials = 1;
   */
  optimalTrials: Trial[];
};

/**
 * Describes the message google.cloud.aiplatform.v1.ListOptimalTrialsResponse.
 * Use `create(ListOptimalTrialsResponseSchema)` to create a new message.
 */
export const ListOptimalTrialsResponseSchema: GenMessage<ListOptimalTrialsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_vizier_service, 21);

/**
 * Vertex AI Vizier API.
 *
 * Vertex AI Vizier is a service to solve blackbox optimization problems,
 * such as tuning machine learning hyperparameters and searching over deep
 * learning architectures.
 *
 * @generated from service google.cloud.aiplatform.v1.VizierService
 */
export const VizierService: GenService<{
  /**
   * Creates a Study. A resource name will be generated after creation of the
   * Study.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.CreateStudy
   */
  createStudy: {
    methodKind: "unary";
    input: typeof CreateStudyRequestSchema;
    output: typeof StudySchema;
  },
  /**
   * Gets a Study by name.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.GetStudy
   */
  getStudy: {
    methodKind: "unary";
    input: typeof GetStudyRequestSchema;
    output: typeof StudySchema;
  },
  /**
   * Lists all the studies in a region for an associated project.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.ListStudies
   */
  listStudies: {
    methodKind: "unary";
    input: typeof ListStudiesRequestSchema;
    output: typeof ListStudiesResponseSchema;
  },
  /**
   * Deletes a Study.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.DeleteStudy
   */
  deleteStudy: {
    methodKind: "unary";
    input: typeof DeleteStudyRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Looks a study up using the user-defined display_name field instead of the
   * fully qualified resource name.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.LookupStudy
   */
  lookupStudy: {
    methodKind: "unary";
    input: typeof LookupStudyRequestSchema;
    output: typeof StudySchema;
  },
  /**
   * Adds one or more Trials to a Study, with parameter values
   * suggested by Vertex AI Vizier. Returns a long-running
   * operation associated with the generation of Trial suggestions.
   * When this long-running operation succeeds, it will contain
   * a
   * [SuggestTrialsResponse][google.cloud.aiplatform.v1.SuggestTrialsResponse].
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.SuggestTrials
   */
  suggestTrials: {
    methodKind: "unary";
    input: typeof SuggestTrialsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Adds a user provided Trial to a Study.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.CreateTrial
   */
  createTrial: {
    methodKind: "unary";
    input: typeof CreateTrialRequestSchema;
    output: typeof TrialSchema;
  },
  /**
   * Gets a Trial.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.GetTrial
   */
  getTrial: {
    methodKind: "unary";
    input: typeof GetTrialRequestSchema;
    output: typeof TrialSchema;
  },
  /**
   * Lists the Trials associated with a Study.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.ListTrials
   */
  listTrials: {
    methodKind: "unary";
    input: typeof ListTrialsRequestSchema;
    output: typeof ListTrialsResponseSchema;
  },
  /**
   * Adds a measurement of the objective metrics to a Trial. This measurement
   * is assumed to have been taken before the Trial is complete.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.AddTrialMeasurement
   */
  addTrialMeasurement: {
    methodKind: "unary";
    input: typeof AddTrialMeasurementRequestSchema;
    output: typeof TrialSchema;
  },
  /**
   * Marks a Trial as complete.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.CompleteTrial
   */
  completeTrial: {
    methodKind: "unary";
    input: typeof CompleteTrialRequestSchema;
    output: typeof TrialSchema;
  },
  /**
   * Deletes a Trial.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.DeleteTrial
   */
  deleteTrial: {
    methodKind: "unary";
    input: typeof DeleteTrialRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Checks  whether a Trial should stop or not. Returns a
   * long-running operation. When the operation is successful,
   * it will contain a
   * [CheckTrialEarlyStoppingStateResponse][google.cloud.aiplatform.v1.CheckTrialEarlyStoppingStateResponse].
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.CheckTrialEarlyStoppingState
   */
  checkTrialEarlyStoppingState: {
    methodKind: "unary";
    input: typeof CheckTrialEarlyStoppingStateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Stops a Trial.
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.StopTrial
   */
  stopTrial: {
    methodKind: "unary";
    input: typeof StopTrialRequestSchema;
    output: typeof TrialSchema;
  },
  /**
   * Lists the pareto-optimal Trials for multi-objective Study or the
   * optimal Trials for single-objective Study. The definition of
   * pareto-optimal can be checked in wiki page.
   * https://en.wikipedia.org/wiki/Pareto_efficiency
   *
   * @generated from rpc google.cloud.aiplatform.v1.VizierService.ListOptimalTrials
   */
  listOptimalTrials: {
    methodKind: "unary";
    input: typeof ListOptimalTrialsRequestSchema;
    output: typeof ListOptimalTrialsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_aiplatform_v1_vizier_service, 0);

