// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1/featurestore_monitoring.proto (package google.cloud.aiplatform.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1/featurestore_monitoring.proto.
 */
export const file_google_cloud_aiplatform_v1_featurestore_monitoring: GenFile = /*@__PURE__*/
  fileDesc("Cjhnb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MS9mZWF0dXJlc3RvcmVfbW9uaXRvcmluZy5wcm90bxIaZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEiqQgKHEZlYXR1cmVzdG9yZU1vbml0b3JpbmdDb25maWcSZAoRc25hcHNob3RfYW5hbHlzaXMYASABKAsySS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5GZWF0dXJlc3RvcmVNb25pdG9yaW5nQ29uZmlnLlNuYXBzaG90QW5hbHlzaXMScQoYaW1wb3J0X2ZlYXR1cmVzX2FuYWx5c2lzGAIgASgLMk8uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZXN0b3JlTW9uaXRvcmluZ0NvbmZpZy5JbXBvcnRGZWF0dXJlc0FuYWx5c2lzEmwKGm51bWVyaWNhbF90aHJlc2hvbGRfY29uZmlnGAMgASgLMkguZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZXN0b3JlTW9uaXRvcmluZ0NvbmZpZy5UaHJlc2hvbGRDb25maWcSbgocY2F0ZWdvcmljYWxfdGhyZXNob2xkX2NvbmZpZxgEIAEoCzJILmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkZlYXR1cmVzdG9yZU1vbml0b3JpbmdDb25maWcuVGhyZXNob2xkQ29uZmlnGl4KEFNuYXBzaG90QW5hbHlzaXMSEAoIZGlzYWJsZWQYASABKAgSIAoYbW9uaXRvcmluZ19pbnRlcnZhbF9kYXlzGAMgASgFEhYKDnN0YWxlbmVzc19kYXlzGAQgASgFGsADChZJbXBvcnRGZWF0dXJlc0FuYWx5c2lzEmQKBXN0YXRlGAEgASgOMlUuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZXN0b3JlTW9uaXRvcmluZ0NvbmZpZy5JbXBvcnRGZWF0dXJlc0FuYWx5c2lzLlN0YXRlEnwKGmFub21hbHlfZGV0ZWN0aW9uX2Jhc2VsaW5lGAIgASgOMlguZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZXN0b3JlTW9uaXRvcmluZ0NvbmZpZy5JbXBvcnRGZWF0dXJlc0FuYWx5c2lzLkJhc2VsaW5lIkYKBVN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASCwoHREVGQVVMVBABEgsKB0VOQUJMRUQQAhIMCghESVNBQkxFRBADInoKCEJhc2VsaW5lEhgKFEJBU0VMSU5FX1VOU1BFQ0lGSUVEEAASEAoMTEFURVNUX1NUQVRTEAESHgoaTU9TVF9SRUNFTlRfU05BUFNIT1RfU1RBVFMQAhIiCh5QUkVWSU9VU19JTVBPUlRfRkVBVFVSRVNfU1RBVFMQAxovCg9UaHJlc2hvbGRDb25maWcSDwoFdmFsdWUYASABKAFIAEILCgl0aHJlc2hvbGRC2QEKHmNvbS5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MUIbRmVhdHVyZXN0b3JlTW9uaXRvcmluZ1Byb3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vYWlwbGF0Zm9ybS9hcGl2MS9haXBsYXRmb3JtcGI7YWlwbGF0Zm9ybXBiqgIaR29vZ2xlLkNsb3VkLkFJUGxhdGZvcm0uVjHKAhpHb29nbGVcQ2xvdWRcQUlQbGF0Zm9ybVxWMeoCHUdvb2dsZTo6Q2xvdWQ6OkFJUGxhdGZvcm06OlYxYgZwcm90bzM");

/**
 * Configuration of how features in Featurestore are monitored.
 *
 * @generated from message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig
 */
export type FeaturestoreMonitoringConfig = Message<"google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig"> & {
  /**
   * The config for Snapshot Analysis Based Feature Monitoring.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis snapshot_analysis = 1;
   */
  snapshotAnalysis?: FeaturestoreMonitoringConfig_SnapshotAnalysis;

  /**
   * The config for ImportFeatures Analysis Based Feature Monitoring.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis import_features_analysis = 2;
   */
  importFeaturesAnalysis?: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis;

  /**
   * Threshold for numerical features of anomaly detection.
   * This is shared by all objectives of Featurestore Monitoring for numerical
   * features (i.e. Features with type
   * ([Feature.ValueType][google.cloud.aiplatform.v1.Feature.ValueType]) DOUBLE
   * or INT64).
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig numerical_threshold_config = 3;
   */
  numericalThresholdConfig?: FeaturestoreMonitoringConfig_ThresholdConfig;

  /**
   * Threshold for categorical features of anomaly detection.
   * This is shared by all types of Featurestore Monitoring for categorical
   * features (i.e. Features with type
   * ([Feature.ValueType][google.cloud.aiplatform.v1.Feature.ValueType]) BOOL or
   * STRING).
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig categorical_threshold_config = 4;
   */
  categoricalThresholdConfig?: FeaturestoreMonitoringConfig_ThresholdConfig;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.
 * Use `create(FeaturestoreMonitoringConfigSchema)` to create a new message.
 */
export const FeaturestoreMonitoringConfigSchema: GenMessage<FeaturestoreMonitoringConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0);

/**
 * Configuration of the Featurestore's Snapshot Analysis Based Monitoring.
 * This type of analysis generates statistics for each Feature based on a
 * snapshot of the latest feature value of each entities every
 * monitoring_interval.
 *
 * @generated from message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis
 */
export type FeaturestoreMonitoringConfig_SnapshotAnalysis = Message<"google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis"> & {
  /**
   * The monitoring schedule for snapshot analysis.
   * For EntityType-level config:
   *   unset / disabled = true indicates disabled by
   *   default for Features under it; otherwise by default enable snapshot
   *   analysis monitoring with monitoring_interval for Features under it.
   * Feature-level config:
   *   disabled = true indicates disabled regardless of the EntityType-level
   *   config; unset monitoring_interval indicates going with EntityType-level
   *   config; otherwise run snapshot analysis monitoring with
   *   monitoring_interval regardless of the EntityType-level config.
   * Explicitly Disable the snapshot analysis based monitoring.
   *
   * @generated from field: bool disabled = 1;
   */
  disabled: boolean;

  /**
   * Configuration of the snapshot analysis based monitoring pipeline
   * running interval. The value indicates number of days.
   *
   * @generated from field: int32 monitoring_interval_days = 3;
   */
  monitoringIntervalDays: number;

  /**
   * Customized export features time window for snapshot analysis. Unit is one
   * day. Default value is 3 weeks. Minimum value is 1 day. Maximum value is
   * 4000 days.
   *
   * @generated from field: int32 staleness_days = 4;
   */
  stalenessDays: number;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.SnapshotAnalysis.
 * Use `create(FeaturestoreMonitoringConfig_SnapshotAnalysisSchema)` to create a new message.
 */
export const FeaturestoreMonitoringConfig_SnapshotAnalysisSchema: GenMessage<FeaturestoreMonitoringConfig_SnapshotAnalysis> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0, 0);

/**
 * Configuration of the Featurestore's ImportFeature Analysis Based
 * Monitoring. This type of analysis generates statistics for values of each
 * Feature imported by every
 * [ImportFeatureValues][google.cloud.aiplatform.v1.FeaturestoreService.ImportFeatureValues]
 * operation.
 *
 * @generated from message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis
 */
export type FeaturestoreMonitoringConfig_ImportFeaturesAnalysis = Message<"google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis"> & {
  /**
   * Whether to enable / disable / inherite default hebavior for import
   * features analysis.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.State state = 1;
   */
  state: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State;

  /**
   * The baseline used to do anomaly detection for the statistics generated by
   * import features analysis.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.Baseline anomaly_detection_baseline = 2;
   */
  anomalyDetectionBaseline: FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.
 * Use `create(FeaturestoreMonitoringConfig_ImportFeaturesAnalysisSchema)` to create a new message.
 */
export const FeaturestoreMonitoringConfig_ImportFeaturesAnalysisSchema: GenMessage<FeaturestoreMonitoringConfig_ImportFeaturesAnalysis> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0, 1);

/**
 * The state defines whether to enable ImportFeature analysis.
 *
 * @generated from enum google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.State
 */
export enum FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State {
  /**
   * Should not be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The default behavior of whether to enable the monitoring.
   * EntityType-level config: disabled.
   * Feature-level config: inherited from the configuration of EntityType
   * this Feature belongs to.
   *
   * @generated from enum value: DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * Explicitly enables import features analysis.
   * EntityType-level config: by default enables import features analysis
   * for all Features under it. Feature-level config: enables import
   * features analysis regardless of the EntityType-level config.
   *
   * @generated from enum value: ENABLED = 2;
   */
  ENABLED = 2,

  /**
   * Explicitly disables import features analysis.
   * EntityType-level config: by default disables import features analysis
   * for all Features under it. Feature-level config: disables import
   * features analysis regardless of the EntityType-level config.
   *
   * @generated from enum value: DISABLED = 3;
   */
  DISABLED = 3,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.State.
 */
export const FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_StateSchema: GenEnum<FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0, 1, 0);

/**
 * Defines the baseline to do anomaly detection for feature values imported
 * by each
 * [ImportFeatureValues][google.cloud.aiplatform.v1.FeaturestoreService.ImportFeatureValues]
 * operation.
 *
 * @generated from enum google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.Baseline
 */
export enum FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline {
  /**
   * Should not be used.
   *
   * @generated from enum value: BASELINE_UNSPECIFIED = 0;
   */
  BASELINE_UNSPECIFIED = 0,

  /**
   * Choose the later one statistics generated by either most recent
   * snapshot analysis or previous import features analysis. If non of them
   * exists, skip anomaly detection and only generate a statistics.
   *
   * @generated from enum value: LATEST_STATS = 1;
   */
  LATEST_STATS = 1,

  /**
   * Use the statistics generated by the most recent snapshot analysis if
   * exists.
   *
   * @generated from enum value: MOST_RECENT_SNAPSHOT_STATS = 2;
   */
  MOST_RECENT_SNAPSHOT_STATS = 2,

  /**
   * Use the statistics generated by the previous import features analysis
   * if exists.
   *
   * @generated from enum value: PREVIOUS_IMPORT_FEATURES_STATS = 3;
   */
  PREVIOUS_IMPORT_FEATURES_STATS = 3,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ImportFeaturesAnalysis.Baseline.
 */
export const FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_BaselineSchema: GenEnum<FeaturestoreMonitoringConfig_ImportFeaturesAnalysis_Baseline> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0, 1, 1);

/**
 * The config for Featurestore Monitoring threshold.
 *
 * @generated from message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig
 */
export type FeaturestoreMonitoringConfig_ThresholdConfig = Message<"google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig"> & {
  /**
   * @generated from oneof google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig.threshold
   */
  threshold: {
    /**
     * Specify a threshold value that can trigger the alert.
     * 1. For categorical feature, the distribution distance is calculated by
     * L-inifinity norm.
     * 2. For numerical feature, the distribution distance is calculated by
     * Jensen–Shannon divergence. Each feature must have a non-zero threshold
     * if they need to be monitored. Otherwise no alert will be triggered for
     * that feature.
     *
     * @generated from field: double value = 1;
     */
    value: number;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeaturestoreMonitoringConfig.ThresholdConfig.
 * Use `create(FeaturestoreMonitoringConfig_ThresholdConfigSchema)` to create a new message.
 */
export const FeaturestoreMonitoringConfig_ThresholdConfigSchema: GenMessage<FeaturestoreMonitoringConfig_ThresholdConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_featurestore_monitoring, 0, 2);

