// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/aiplatform/v1/feature_view.proto (package google.cloud.aiplatform.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/aiplatform/v1/feature_view.proto.
 */
export const file_google_cloud_aiplatform_v1_feature_view: GenFile = /*@__PURE__*/
  fileDesc("Ci1nb29nbGUvY2xvdWQvYWlwbGF0Zm9ybS92MS9mZWF0dXJlX3ZpZXcucHJvdG8SGmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxIrgQCgtGZWF0dXJlVmlldxJXChBiaWdfcXVlcnlfc291cmNlGAYgASgLMjYuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZVZpZXcuQmlnUXVlcnlTb3VyY2VCA+BBAUgAEmUKF2ZlYXR1cmVfcmVnaXN0cnlfc291cmNlGAkgASgLMj0uZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZVZpZXcuRmVhdHVyZVJlZ2lzdHJ5U291cmNlQgPgQQFIABJZChF2ZXJ0ZXhfcmFnX3NvdXJjZRgSIAEoCzI3Lmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxLkZlYXR1cmVWaWV3LlZlcnRleFJhZ1NvdXJjZUID4EEBSAASEQoEbmFtZRgBIAEoCUID4EEIEjQKC2NyZWF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC3VwZGF0ZV90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEhEKBGV0YWcYBCABKAlCA+BBARJICgZsYWJlbHMYBSADKAsyMy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5GZWF0dXJlVmlldy5MYWJlbHNFbnRyeUID4EEBEkcKC3N5bmNfY29uZmlnGAcgASgLMjIuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZVZpZXcuU3luY0NvbmZpZxJOCgxpbmRleF9jb25maWcYDyABKAsyMy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5GZWF0dXJlVmlldy5JbmRleENvbmZpZ0ID4EEBEhoKDXNhdGlzZmllc19wenMYEyABKAhCA+BBAxIaCg1zYXRpc2ZpZXNfcHppGBQgASgIQgPgQQMaQgoOQmlnUXVlcnlTb3VyY2USEAoDdXJpGAEgASgJQgPgQQISHgoRZW50aXR5X2lkX2NvbHVtbnMYAiADKAlCA+BBAhoaCgpTeW5jQ29uZmlnEgwKBGNyb24YASABKAka5wUKC0luZGV4Q29uZmlnEl8KDnRyZWVfYWhfY29uZmlnGAYgASgLMkAuZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZVZpZXcuSW5kZXhDb25maWcuVHJlZUFIQ29uZmlnQgPgQQFIABJnChJicnV0ZV9mb3JjZV9jb25maWcYByABKAsyRC5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5GZWF0dXJlVmlldy5JbmRleENvbmZpZy5CcnV0ZUZvcmNlQ29uZmlnQgPgQQFIABIdChBlbWJlZGRpbmdfY29sdW1uGAEgASgJQgPgQQESGwoOZmlsdGVyX2NvbHVtbnMYAiADKAlCA+BBARIcCg9jcm93ZGluZ19jb2x1bW4YAyABKAlCA+BBARIlChNlbWJlZGRpbmdfZGltZW5zaW9uGAQgASgFQgPgQQFIAYgBARJrChVkaXN0YW5jZV9tZWFzdXJlX3R5cGUYBSABKA4yRy5nb29nbGUuY2xvdWQuYWlwbGF0Zm9ybS52MS5GZWF0dXJlVmlldy5JbmRleENvbmZpZy5EaXN0YW5jZU1lYXN1cmVUeXBlQgPgQQEaEgoQQnJ1dGVGb3JjZUNvbmZpZxpZCgxUcmVlQUhDb25maWcSKwoZbGVhZl9ub2RlX2VtYmVkZGluZ19jb3VudBgBIAEoA0ID4EEBSACIAQFCHAoaX2xlYWZfbm9kZV9lbWJlZGRpbmdfY291bnQihAEKE0Rpc3RhbmNlTWVhc3VyZVR5cGUSJQohRElTVEFOQ0VfTUVBU1VSRV9UWVBFX1VOU1BFQ0lGSUVEEAASFwoTU1FVQVJFRF9MMl9ESVNUQU5DRRABEhMKD0NPU0lORV9ESVNUQU5DRRACEhgKFERPVF9QUk9EVUNUX0RJU1RBTkNFEANCEgoQYWxnb3JpdGhtX2NvbmZpZ0IWChRfZW1iZWRkaW5nX2RpbWVuc2lvbhr+AQoVRmVhdHVyZVJlZ2lzdHJ5U291cmNlEmcKDmZlYXR1cmVfZ3JvdXBzGAEgAygLMkouZ29vZ2xlLmNsb3VkLmFpcGxhdGZvcm0udjEuRmVhdHVyZVZpZXcuRmVhdHVyZVJlZ2lzdHJ5U291cmNlLkZlYXR1cmVHcm91cEID4EECEiAKDnByb2plY3RfbnVtYmVyGAIgASgDQgPgQQFIAIgBARpHCgxGZWF0dXJlR3JvdXASHQoQZmVhdHVyZV9ncm91cF9pZBgBIAEoCUID4EECEhgKC2ZlYXR1cmVfaWRzGAIgAygJQgPgQQJCEQoPX3Byb2plY3RfbnVtYmVyGj8KD1ZlcnRleFJhZ1NvdXJjZRIQCgN1cmkYASABKAlCA+BBAhIaCg1yYWdfY29ycHVzX2lkGAIgASgDQgPgQQEaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ATqbAepBlwEKJWFpcGxhdGZvcm0uZ29vZ2xlYXBpcy5jb20vRmVhdHVyZVZpZXcSbnByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9mZWF0dXJlT25saW5lU3RvcmVzL3tmZWF0dXJlX29ubGluZV9zdG9yZX0vZmVhdHVyZVZpZXdzL3tmZWF0dXJlX3ZpZXd9QggKBnNvdXJjZULOAQoeY29tLmdvb2dsZS5jbG91ZC5haXBsYXRmb3JtLnYxQhBGZWF0dXJlVmlld1Byb3RvUAFaPmNsb3VkLmdvb2dsZS5jb20vZ28vYWlwbGF0Zm9ybS9hcGl2MS9haXBsYXRmb3JtcGI7YWlwbGF0Zm9ybXBiqgIaR29vZ2xlLkNsb3VkLkFJUGxhdGZvcm0uVjHKAhpHb29nbGVcQ2xvdWRcQUlQbGF0Zm9ybVxWMeoCHUdvb2dsZTo6Q2xvdWQ6OkFJUGxhdGZvcm06OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp]);

/**
 * FeatureView is representation of values that the FeatureOnlineStore will
 * serve based on its syncConfig.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView
 */
export type FeatureView = Message<"google.cloud.aiplatform.v1.FeatureView"> & {
  /**
   * @generated from oneof google.cloud.aiplatform.v1.FeatureView.source
   */
  source: {
    /**
     * Optional. Configures how data is supposed to be extracted from a BigQuery
     * source to be loaded onto the FeatureOnlineStore.
     *
     * @generated from field: google.cloud.aiplatform.v1.FeatureView.BigQuerySource big_query_source = 6;
     */
    value: FeatureView_BigQuerySource;
    case: "bigQuerySource";
  } | {
    /**
     * Optional. Configures the features from a Feature Registry source that
     * need to be loaded onto the FeatureOnlineStore.
     *
     * @generated from field: google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource feature_registry_source = 9;
     */
    value: FeatureView_FeatureRegistrySource;
    case: "featureRegistrySource";
  } | {
    /**
     * Optional. The Vertex RAG Source that the FeatureView is linked to.
     *
     * @generated from field: google.cloud.aiplatform.v1.FeatureView.VertexRagSource vertex_rag_source = 18;
     */
    value: FeatureView_VertexRagSource;
    case: "vertexRagSource";
  } | { case: undefined; value?: undefined };

  /**
   * Identifier. Name of the FeatureView. Format:
   * `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Timestamp when this FeatureView was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Timestamp when this FeatureView was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Optional. Used to perform consistent read-modify-write updates. If not set,
   * a blind "overwrite" update happens.
   *
   * @generated from field: string etag = 4;
   */
  etag: string;

  /**
   * Optional. The labels with user-defined metadata to organize your
   * FeatureViews.
   *
   * Label keys and values can be no longer than 64 characters
   * (Unicode codepoints), can only contain lowercase letters, numeric
   * characters, underscores and dashes. International characters are allowed.
   *
   * See https://goo.gl/xmQnxf for more information on and examples of labels.
   * No more than 64 user labels can be associated with one
   * FeatureOnlineStore(System labels are excluded)." System reserved label keys
   * are prefixed with "aiplatform.googleapis.com/" and are immutable.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string };

  /**
   * Configures when data is to be synced/updated for this FeatureView. At the
   * end of the sync the latest featureValues for each entityId of this
   * FeatureView are made ready for online serving.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeatureView.SyncConfig sync_config = 7;
   */
  syncConfig?: FeatureView_SyncConfig;

  /**
   * Optional. Configuration for index preparation for vector search. It
   * contains the required configurations to create an index from source data,
   * so that approximate nearest neighbor (a.k.a ANN) algorithms search can be
   * performed during online serving.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeatureView.IndexConfig index_config = 15;
   */
  indexConfig?: FeatureView_IndexConfig;

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzs = 19;
   */
  satisfiesPzs: boolean;

  /**
   * Output only. Reserved for future use.
   *
   * @generated from field: bool satisfies_pzi = 20;
   */
  satisfiesPzi: boolean;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.
 * Use `create(FeatureViewSchema)` to create a new message.
 */
export const FeatureViewSchema: GenMessage<FeatureView> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0);

/**
 * @generated from message google.cloud.aiplatform.v1.FeatureView.BigQuerySource
 */
export type FeatureView_BigQuerySource = Message<"google.cloud.aiplatform.v1.FeatureView.BigQuerySource"> & {
  /**
   * Required. The BigQuery view URI that will be materialized on each sync
   * trigger based on FeatureView.SyncConfig.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * Required. Columns to construct entity_id / row keys.
   *
   * @generated from field: repeated string entity_id_columns = 2;
   */
  entityIdColumns: string[];
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.BigQuerySource.
 * Use `create(FeatureView_BigQuerySourceSchema)` to create a new message.
 */
export const FeatureView_BigQuerySourceSchema: GenMessage<FeatureView_BigQuerySource> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 0);

/**
 * Configuration for Sync. Only one option is set.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.SyncConfig
 */
export type FeatureView_SyncConfig = Message<"google.cloud.aiplatform.v1.FeatureView.SyncConfig"> & {
  /**
   * Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled
   * runs. To explicitly set a timezone to the cron tab, apply a prefix in
   * the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}".
   * The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone
   * database. For example, "CRON_TZ=America/New_York 1 * * * *", or
   * "TZ=America/New_York 1 * * * *".
   *
   * @generated from field: string cron = 1;
   */
  cron: string;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.SyncConfig.
 * Use `create(FeatureView_SyncConfigSchema)` to create a new message.
 */
export const FeatureView_SyncConfigSchema: GenMessage<FeatureView_SyncConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 1);

/**
 * Configuration for vector indexing.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.IndexConfig
 */
export type FeatureView_IndexConfig = Message<"google.cloud.aiplatform.v1.FeatureView.IndexConfig"> & {
  /**
   * The configuration with regard to the algorithms used for efficient
   * search.
   *
   * @generated from oneof google.cloud.aiplatform.v1.FeatureView.IndexConfig.algorithm_config
   */
  algorithmConfig: {
    /**
     * Optional. Configuration options for the tree-AH algorithm (Shallow tree
     * + Asymmetric Hashing). Please refer to this paper for more details:
     * https://arxiv.org/abs/1908.10396
     *
     * @generated from field: google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig tree_ah_config = 6;
     */
    value: FeatureView_IndexConfig_TreeAHConfig;
    case: "treeAhConfig";
  } | {
    /**
     * Optional. Configuration options for using brute force search, which
     * simply implements the standard linear search in the database for each
     * query. It is primarily meant for benchmarking and to generate the
     * ground truth for approximate search.
     *
     * @generated from field: google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig brute_force_config = 7;
     */
    value: FeatureView_IndexConfig_BruteForceConfig;
    case: "bruteForceConfig";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Column of embedding. This column contains the source data to
   * create index for vector search. embedding_column must be set when using
   * vector search.
   *
   * @generated from field: string embedding_column = 1;
   */
  embeddingColumn: string;

  /**
   * Optional. Columns of features that're used to filter vector search
   * results.
   *
   * @generated from field: repeated string filter_columns = 2;
   */
  filterColumns: string[];

  /**
   * Optional. Column of crowding. This column contains crowding attribute
   * which is a constraint on a neighbor list produced by
   * [FeatureOnlineStoreService.SearchNearestEntities][google.cloud.aiplatform.v1.FeatureOnlineStoreService.SearchNearestEntities]
   * to diversify search results. If
   * [NearestNeighborQuery.per_crowding_attribute_neighbor_count][google.cloud.aiplatform.v1.NearestNeighborQuery.per_crowding_attribute_neighbor_count]
   * is set to K in
   * [SearchNearestEntitiesRequest][google.cloud.aiplatform.v1.SearchNearestEntitiesRequest],
   * it's guaranteed that no more than K entities of the same crowding
   * attribute are returned in the response.
   *
   * @generated from field: string crowding_column = 3;
   */
  crowdingColumn: string;

  /**
   * Optional. The number of dimensions of the input embedding.
   *
   * @generated from field: optional int32 embedding_dimension = 4;
   */
  embeddingDimension?: number;

  /**
   * Optional. The distance measure used in nearest neighbor search.
   *
   * @generated from field: google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType distance_measure_type = 5;
   */
  distanceMeasureType: FeatureView_IndexConfig_DistanceMeasureType;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.IndexConfig.
 * Use `create(FeatureView_IndexConfigSchema)` to create a new message.
 */
export const FeatureView_IndexConfigSchema: GenMessage<FeatureView_IndexConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 2);

/**
 * Configuration options for using brute force search.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig
 */
export type FeatureView_IndexConfig_BruteForceConfig = Message<"google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig"> & {
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.IndexConfig.BruteForceConfig.
 * Use `create(FeatureView_IndexConfig_BruteForceConfigSchema)` to create a new message.
 */
export const FeatureView_IndexConfig_BruteForceConfigSchema: GenMessage<FeatureView_IndexConfig_BruteForceConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 2, 0);

/**
 * Configuration options for the tree-AH algorithm.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig
 */
export type FeatureView_IndexConfig_TreeAHConfig = Message<"google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig"> & {
  /**
   * Optional. Number of embeddings on each leaf node. The default value is
   * 1000 if not set.
   *
   * @generated from field: optional int64 leaf_node_embedding_count = 1;
   */
  leafNodeEmbeddingCount?: bigint;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.IndexConfig.TreeAHConfig.
 * Use `create(FeatureView_IndexConfig_TreeAHConfigSchema)` to create a new message.
 */
export const FeatureView_IndexConfig_TreeAHConfigSchema: GenMessage<FeatureView_IndexConfig_TreeAHConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 2, 1);

/**
 * The distance measure used in nearest neighbor search.
 *
 * @generated from enum google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType
 */
export enum FeatureView_IndexConfig_DistanceMeasureType {
  /**
   * Should not be set.
   *
   * @generated from enum value: DISTANCE_MEASURE_TYPE_UNSPECIFIED = 0;
   */
  DISTANCE_MEASURE_TYPE_UNSPECIFIED = 0,

  /**
   * Euclidean (L_2) Distance.
   *
   * @generated from enum value: SQUARED_L2_DISTANCE = 1;
   */
  SQUARED_L2_DISTANCE = 1,

  /**
   * Cosine Distance. Defined as 1 - cosine similarity.
   *
   * We strongly suggest using DOT_PRODUCT_DISTANCE + UNIT_L2_NORM instead
   * of COSINE distance. Our algorithms have been more optimized for
   * DOT_PRODUCT distance which, when combined with UNIT_L2_NORM, is
   * mathematically equivalent to COSINE distance and results in the same
   * ranking.
   *
   * @generated from enum value: COSINE_DISTANCE = 2;
   */
  COSINE_DISTANCE = 2,

  /**
   * Dot Product Distance. Defined as a negative of the dot product.
   *
   * @generated from enum value: DOT_PRODUCT_DISTANCE = 3;
   */
  DOT_PRODUCT_DISTANCE = 3,
}

/**
 * Describes the enum google.cloud.aiplatform.v1.FeatureView.IndexConfig.DistanceMeasureType.
 */
export const FeatureView_IndexConfig_DistanceMeasureTypeSchema: GenEnum<FeatureView_IndexConfig_DistanceMeasureType> = /*@__PURE__*/
  enumDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 2, 0);

/**
 * A Feature Registry source for features that need to be synced to Online
 * Store.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource
 */
export type FeatureView_FeatureRegistrySource = Message<"google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource"> & {
  /**
   * Required. List of features that need to be synced to Online Store.
   *
   * @generated from field: repeated google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource.FeatureGroup feature_groups = 1;
   */
  featureGroups: FeatureView_FeatureRegistrySource_FeatureGroup[];

  /**
   * Optional. The project number of the parent project of the Feature Groups.
   *
   * @generated from field: optional int64 project_number = 2;
   */
  projectNumber?: bigint;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource.
 * Use `create(FeatureView_FeatureRegistrySourceSchema)` to create a new message.
 */
export const FeatureView_FeatureRegistrySourceSchema: GenMessage<FeatureView_FeatureRegistrySource> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 3);

/**
 * Features belonging to a single feature group that will be
 * synced to Online Store.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource.FeatureGroup
 */
export type FeatureView_FeatureRegistrySource_FeatureGroup = Message<"google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource.FeatureGroup"> & {
  /**
   * Required. Identifier of the feature group.
   *
   * @generated from field: string feature_group_id = 1;
   */
  featureGroupId: string;

  /**
   * Required. Identifiers of features under the feature group.
   *
   * @generated from field: repeated string feature_ids = 2;
   */
  featureIds: string[];
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.FeatureRegistrySource.FeatureGroup.
 * Use `create(FeatureView_FeatureRegistrySource_FeatureGroupSchema)` to create a new message.
 */
export const FeatureView_FeatureRegistrySource_FeatureGroupSchema: GenMessage<FeatureView_FeatureRegistrySource_FeatureGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 3, 0);

/**
 * A Vertex Rag source for features that need to be synced to Online
 * Store.
 *
 * @generated from message google.cloud.aiplatform.v1.FeatureView.VertexRagSource
 */
export type FeatureView_VertexRagSource = Message<"google.cloud.aiplatform.v1.FeatureView.VertexRagSource"> & {
  /**
   * Required. The BigQuery view/table URI that will be materialized on each
   * manual sync trigger. The table/view is expected to have the following
   * columns and types at least:
   *  - `corpus_id` (STRING, NULLABLE/REQUIRED)
   *  - `file_id` (STRING, NULLABLE/REQUIRED)
   *  - `chunk_id` (STRING, NULLABLE/REQUIRED)
   *  - `chunk_data_type` (STRING, NULLABLE/REQUIRED)
   *  - `chunk_data` (STRING, NULLABLE/REQUIRED)
   *  - `embeddings` (FLOAT, REPEATED)
   *  - `file_original_uri` (STRING, NULLABLE/REQUIRED)
   *
   * @generated from field: string uri = 1;
   */
  uri: string;

  /**
   * Optional. The RAG corpus id corresponding to this FeatureView.
   *
   * @generated from field: int64 rag_corpus_id = 2;
   */
  ragCorpusId: bigint;
};

/**
 * Describes the message google.cloud.aiplatform.v1.FeatureView.VertexRagSource.
 * Use `create(FeatureView_VertexRagSourceSchema)` to create a new message.
 */
export const FeatureView_VertexRagSourceSchema: GenMessage<FeatureView_VertexRagSource> = /*@__PURE__*/
  messageDesc(file_google_cloud_aiplatform_v1_feature_view, 0, 4);

