// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/notebooks/v2/diagnostic_config.proto (package google.cloud.notebooks.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/notebooks/v2/diagnostic_config.proto.
 */
export const file_google_cloud_notebooks_v2_diagnostic_config: GenFile = /*@__PURE__*/
  fileDesc("CjFnb29nbGUvY2xvdWQvbm90ZWJvb2tzL3YyL2RpYWdub3N0aWNfY29uZmlnLnByb3RvEhlnb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyIrsBChBEaWFnbm9zdGljQ29uZmlnEhcKCmdjc19idWNrZXQYASABKAlCA+BBAhIaCg1yZWxhdGl2ZV9wYXRoGAIgASgJQgPgQQESHwoSZW5hYmxlX3JlcGFpcl9mbGFnGAMgASgIQgPgQQESJwoaZW5hYmxlX3BhY2tldF9jYXB0dXJlX2ZsYWcYBCABKAhCA+BBARIoChtlbmFibGVfY29weV9ob21lX2ZpbGVzX2ZsYWcYBSABKAhCA+BBAULMAQodY29tLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjJCFURpYWdub3N0aWNDb25maWdQcm90b1ABWjtjbG91ZC5nb29nbGUuY29tL2dvL25vdGVib29rcy9hcGl2Mi9ub3RlYm9va3NwYjtub3RlYm9va3NwYqoCGUdvb2dsZS5DbG91ZC5Ob3RlYm9va3MuVjLKAhlHb29nbGVcQ2xvdWRcTm90ZWJvb2tzXFYy6gIcR29vZ2xlOjpDbG91ZDo6Tm90ZWJvb2tzOjpWMmIGcHJvdG8z", [file_google_api_field_behavior]);

/**
 * Defines flags that are used to run the diagnostic tool
 *
 * @generated from message google.cloud.notebooks.v2.DiagnosticConfig
 */
export type DiagnosticConfig = Message<"google.cloud.notebooks.v2.DiagnosticConfig"> & {
  /**
   * Required. User Cloud Storage bucket location (REQUIRED).
   * Must be formatted with path prefix (`gs://$GCS_BUCKET`).
   *
   * Permissions:
   * User Managed Notebooks:
   * - storage.buckets.writer: Must be given to the project's service account
   *   attached to VM.
   * Google Managed Notebooks:
   * - storage.buckets.writer: Must be given to the project's service account or
   *   user credentials attached to VM depending on authentication mode.
   *
   * Cloud Storage bucket Log file will be written to
   * `gs://$GCS_BUCKET/$RELATIVE_PATH/$VM_DATE_$TIME.tar.gz`
   *
   * @generated from field: string gcs_bucket = 1;
   */
  gcsBucket: string;

  /**
   * Optional. Defines the relative storage path in the Cloud Storage bucket
   * where the diagnostic logs will be written: Default path will be the root
   * directory of the Cloud Storage bucket
   * (`gs://$GCS_BUCKET/$DATE_$TIME.tar.gz`) Example of full path where Log file
   * will be written: `gs://$GCS_BUCKET/$RELATIVE_PATH/`
   *
   * @generated from field: string relative_path = 2;
   */
  relativePath: string;

  /**
   * Optional. Enables flag to repair service for instance
   *
   * @generated from field: bool enable_repair_flag = 3;
   */
  enableRepairFlag: boolean;

  /**
   * Optional. Enables flag to capture packets from the instance for 30 seconds
   *
   * @generated from field: bool enable_packet_capture_flag = 4;
   */
  enablePacketCaptureFlag: boolean;

  /**
   * Optional. Enables flag to copy all `/home/jupyter` folder contents
   *
   * @generated from field: bool enable_copy_home_files_flag = 5;
   */
  enableCopyHomeFilesFlag: boolean;
};

/**
 * Describes the message google.cloud.notebooks.v2.DiagnosticConfig.
 * Use `create(DiagnosticConfigSchema)` to create a new message.
 */
export const DiagnosticConfigSchema: GenMessage<DiagnosticConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_diagnostic_config, 0);

