// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/notebooks/v2/gce_setup.proto (package google.cloud.notebooks.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/notebooks/v2/gce_setup.proto.
 */
export const file_google_cloud_notebooks_v2_gce_setup: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvY2xvdWQvbm90ZWJvb2tzL3YyL2djZV9zZXR1cC5wcm90bxIZZ29vZ2xlLmNsb3VkLm5vdGVib29rcy52MiLJAQoQTmV0d29ya0ludGVyZmFjZRIUCgduZXR3b3JrGAEgASgJQgPgQQESEwoGc3VibmV0GAIgASgJQgPgQQESSgoIbmljX3R5cGUYAyABKA4yMy5nb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyLk5ldHdvcmtJbnRlcmZhY2UuTmljVHlwZUID4EEBIj4KB05pY1R5cGUSGAoUTklDX1RZUEVfVU5TUEVDSUZJRUQQABIOCgpWSVJUSU9fTkVUEAESCQoFR1ZOSUMQAiJUCgdWbUltYWdlEhQKB3Byb2plY3QYASABKAlCA+BBAhITCgRuYW1lGAIgASgJQgPgQQFIABIVCgZmYW1pbHkYAyABKAlCA+BBAUgAQgcKBWltYWdlIjsKDkNvbnRhaW5lckltYWdlEhcKCnJlcG9zaXRvcnkYASABKAlCA+BBAhIQCgN0YWcYAiABKAlCA+BBASKUAwoRQWNjZWxlcmF0b3JDb25maWcSTwoEdHlwZRgBIAEoDjI8Lmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuQWNjZWxlcmF0b3JDb25maWcuQWNjZWxlcmF0b3JUeXBlQgPgQQESFwoKY29yZV9jb3VudBgCIAEoA0ID4EEBIpQCCg9BY2NlbGVyYXRvclR5cGUSIAocQUNDRUxFUkFUT1JfVFlQRV9VTlNQRUNJRklFRBAAEhUKEU5WSURJQV9URVNMQV9QMTAwEAISFQoRTlZJRElBX1RFU0xBX1YxMDAQAxITCg9OVklESUFfVEVTTEFfUDQQBBITCg9OVklESUFfVEVTTEFfVDQQBRIVChFOVklESUFfVEVTTEFfQTEwMBALEhQKEE5WSURJQV9BMTAwXzgwR0IQDBINCglOVklESUFfTDQQDRIXChNOVklESUFfVEVTTEFfVDRfVldTEAgSGQoVTlZJRElBX1RFU0xBX1AxMDBfVldTEAkSFwoTTlZJRElBX1RFU0xBX1A0X1ZXUxAKIn0KFlNoaWVsZGVkSW5zdGFuY2VDb25maWcSHwoSZW5hYmxlX3NlY3VyZV9ib290GAEgASgIQgPgQQESGAoLZW5hYmxlX3Z0cG0YAiABKAhCA+BBARIoChtlbmFibGVfaW50ZWdyaXR5X21vbml0b3JpbmcYAyABKAhCA+BBASJWCg9HUFVEcml2ZXJDb25maWcSHgoRZW5hYmxlX2dwdV9kcml2ZXIYASABKAhCA+BBARIjChZjdXN0b21fZ3B1X2RyaXZlcl9wYXRoGAIgASgJQgPgQQEiygEKCERhdGFEaXNrEhkKDGRpc2tfc2l6ZV9nYhgBIAEoA0ID4EEBEj4KCWRpc2tfdHlwZRgCIAEoDjIjLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuRGlza1R5cGVCBuBBBOBBARJKCg9kaXNrX2VuY3J5cHRpb24YBSABKA4yKS5nb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyLkRpc2tFbmNyeXB0aW9uQgbgQQTgQQESFwoHa21zX2tleRgGIAEoCUIG4EEE4EEBIscBCghCb290RGlzaxIZCgxkaXNrX3NpemVfZ2IYASABKANCA+BBARI7CglkaXNrX3R5cGUYAiABKA4yIy5nb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyLkRpc2tUeXBlQgPgQQESSgoPZGlza19lbmNyeXB0aW9uGAMgASgOMikuZ29vZ2xlLmNsb3VkLm5vdGVib29rcy52Mi5EaXNrRW5jcnlwdGlvbkIG4EEE4EEBEhcKB2ttc19rZXkYBCABKAlCBuBBBOBBASI5Cg5TZXJ2aWNlQWNjb3VudBISCgVlbWFpbBgBIAEoCUID4EEBEhMKBnNjb3BlcxgCIAMoCUID4EEDIpAHCghHY2VTZXR1cBIZCgxtYWNoaW5lX3R5cGUYASABKAlCA+BBARJOChNhY2NlbGVyYXRvcl9jb25maWdzGAIgAygLMiwuZ29vZ2xlLmNsb3VkLm5vdGVib29rcy52Mi5BY2NlbGVyYXRvckNvbmZpZ0ID4EEBEkgKEHNlcnZpY2VfYWNjb3VudHMYAyADKAsyKS5nb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyLlNlcnZpY2VBY2NvdW50QgPgQQESOwoIdm1faW1hZ2UYBCABKAsyIi5nb29nbGUuY2xvdWQubm90ZWJvb2tzLnYyLlZtSW1hZ2VCA+BBAUgAEkkKD2NvbnRhaW5lcl9pbWFnZRgFIAEoCzIpLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuQ29udGFpbmVySW1hZ2VCA+BBAUgAEjsKCWJvb3RfZGlzaxgGIAEoCzIjLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuQm9vdERpc2tCA+BBARI8CgpkYXRhX2Rpc2tzGAcgAygLMiMuZ29vZ2xlLmNsb3VkLm5vdGVib29rcy52Mi5EYXRhRGlza0ID4EEBElgKGHNoaWVsZGVkX2luc3RhbmNlX2NvbmZpZxgIIAEoCzIxLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuU2hpZWxkZWRJbnN0YW5jZUNvbmZpZ0ID4EEBEkwKEm5ldHdvcmtfaW50ZXJmYWNlcxgJIAMoCzIrLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuTmV0d29ya0ludGVyZmFjZUID4EEBEh4KEWRpc2FibGVfcHVibGljX2lwGAogASgIQgPgQQESEQoEdGFncxgLIAMoCUID4EEBEkgKCG1ldGFkYXRhGAwgAygLMjEuZ29vZ2xlLmNsb3VkLm5vdGVib29rcy52Mi5HY2VTZXR1cC5NZXRhZGF0YUVudHJ5QgPgQQESIQoUZW5hYmxlX2lwX2ZvcndhcmRpbmcYDSABKAhCA+BBARJKChFncHVfZHJpdmVyX2NvbmZpZxgOIAEoCzIqLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjIuR1BVRHJpdmVyQ29uZmlnQgPgQQEaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBQgcKBWltYWdlKkUKDkRpc2tFbmNyeXB0aW9uEh8KG0RJU0tfRU5DUllQVElPTl9VTlNQRUNJRklFRBAAEggKBEdNRUsQARIICgRDTUVLEAIqYwoIRGlza1R5cGUSGQoVRElTS19UWVBFX1VOU1BFQ0lGSUVEEAASDwoLUERfU1RBTkRBUkQQARIKCgZQRF9TU0QQAhIPCgtQRF9CQUxBTkNFRBADEg4KClBEX0VYVFJFTUUQBELEAQodY29tLmdvb2dsZS5jbG91ZC5ub3RlYm9va3MudjJCDUdjZVNldHVwUHJvdG9QAVo7Y2xvdWQuZ29vZ2xlLmNvbS9nby9ub3RlYm9va3MvYXBpdjIvbm90ZWJvb2tzcGI7bm90ZWJvb2tzcGKqAhlHb29nbGUuQ2xvdWQuTm90ZWJvb2tzLlYyygIZR29vZ2xlXENsb3VkXE5vdGVib29rc1xWMuoCHEdvb2dsZTo6Q2xvdWQ6Ok5vdGVib29rczo6VjJiBnByb3RvMw", [file_google_api_field_behavior]);

/**
 * The definition of a network interface resource attached to a VM.
 *
 * @generated from message google.cloud.notebooks.v2.NetworkInterface
 */
export type NetworkInterface = Message<"google.cloud.notebooks.v2.NetworkInterface"> & {
  /**
   * Optional. The name of the VPC that this VM instance is in.
   * Format:
   * `projects/{project_id}/global/networks/{network_id}`
   *
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * Optional. The name of the subnet that this VM instance is in.
   * Format:
   * `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`
   *
   * @generated from field: string subnet = 2;
   */
  subnet: string;

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC
   * or VirtioNet.
   *
   * @generated from field: google.cloud.notebooks.v2.NetworkInterface.NicType nic_type = 3;
   */
  nicType: NetworkInterface_NicType;
};

/**
 * Describes the message google.cloud.notebooks.v2.NetworkInterface.
 * Use `create(NetworkInterfaceSchema)` to create a new message.
 */
export const NetworkInterfaceSchema: GenMessage<NetworkInterface> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 0);

/**
 * The type of vNIC driver.
 * Default should be NIC_TYPE_UNSPECIFIED.
 *
 * @generated from enum google.cloud.notebooks.v2.NetworkInterface.NicType
 */
export enum NetworkInterface_NicType {
  /**
   * No type specified.
   *
   * @generated from enum value: NIC_TYPE_UNSPECIFIED = 0;
   */
  NIC_TYPE_UNSPECIFIED = 0,

  /**
   * VIRTIO
   *
   * @generated from enum value: VIRTIO_NET = 1;
   */
  VIRTIO_NET = 1,

  /**
   * GVNIC
   *
   * @generated from enum value: GVNIC = 2;
   */
  GVNIC = 2,
}

/**
 * Describes the enum google.cloud.notebooks.v2.NetworkInterface.NicType.
 */
export const NetworkInterface_NicTypeSchema: GenEnum<NetworkInterface_NicType> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v2_gce_setup, 0, 0);

/**
 * Definition of a custom Compute Engine virtual machine image for starting a
 * notebook instance with the environment installed directly on the VM.
 *
 * @generated from message google.cloud.notebooks.v2.VmImage
 */
export type VmImage = Message<"google.cloud.notebooks.v2.VmImage"> & {
  /**
   * Required. The name of the Google Cloud project that this VM image belongs
   * to. Format: `{project_id}`
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * The reference to an external Compute Engine VM image.
   *
   * @generated from oneof google.cloud.notebooks.v2.VmImage.image
   */
  image: {
    /**
     * Optional. Use VM image name to find the image.
     *
     * @generated from field: string name = 2;
     */
    value: string;
    case: "name";
  } | {
    /**
     * Optional. Use this VM image family to find the image; the newest image in
     * this family will be used.
     *
     * @generated from field: string family = 3;
     */
    value: string;
    case: "family";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.notebooks.v2.VmImage.
 * Use `create(VmImageSchema)` to create a new message.
 */
export const VmImageSchema: GenMessage<VmImage> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 1);

/**
 * Definition of a container image for starting a notebook instance with the
 * environment installed in a container.
 *
 * @generated from message google.cloud.notebooks.v2.ContainerImage
 */
export type ContainerImage = Message<"google.cloud.notebooks.v2.ContainerImage"> & {
  /**
   * Required. The path to the container image repository. For example:
   * `gcr.io/{project_id}/{image_name}`
   *
   * @generated from field: string repository = 1;
   */
  repository: string;

  /**
   * Optional. The tag of the container image. If not specified, this defaults
   * to the latest tag.
   *
   * @generated from field: string tag = 2;
   */
  tag: string;
};

/**
 * Describes the message google.cloud.notebooks.v2.ContainerImage.
 * Use `create(ContainerImageSchema)` to create a new message.
 */
export const ContainerImageSchema: GenMessage<ContainerImage> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 2);

/**
 * An accelerator configuration for a VM instance
 * Definition of a hardware accelerator. Note that there is no check on `type`
 * and `core_count` combinations. TPUs are not supported.
 * See [GPUs on Compute
 * Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a
 * valid combination.
 *
 * @generated from message google.cloud.notebooks.v2.AcceleratorConfig
 */
export type AcceleratorConfig = Message<"google.cloud.notebooks.v2.AcceleratorConfig"> & {
  /**
   * Optional. Type of this accelerator.
   *
   * @generated from field: google.cloud.notebooks.v2.AcceleratorConfig.AcceleratorType type = 1;
   */
  type: AcceleratorConfig_AcceleratorType;

  /**
   * Optional. Count of cores of this accelerator.
   *
   * @generated from field: int64 core_count = 2;
   */
  coreCount: bigint;
};

/**
 * Describes the message google.cloud.notebooks.v2.AcceleratorConfig.
 * Use `create(AcceleratorConfigSchema)` to create a new message.
 */
export const AcceleratorConfigSchema: GenMessage<AcceleratorConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 3);

/**
 * Definition of the types of hardware accelerators that can be used on
 * this instance.
 *
 * @generated from enum google.cloud.notebooks.v2.AcceleratorConfig.AcceleratorType
 */
export enum AcceleratorConfig_AcceleratorType {
  /**
   * Accelerator type is not specified.
   *
   * @generated from enum value: ACCELERATOR_TYPE_UNSPECIFIED = 0;
   */
  ACCELERATOR_TYPE_UNSPECIFIED = 0,

  /**
   * Accelerator type is Nvidia Tesla P100.
   *
   * @generated from enum value: NVIDIA_TESLA_P100 = 2;
   */
  NVIDIA_TESLA_P100 = 2,

  /**
   * Accelerator type is Nvidia Tesla V100.
   *
   * @generated from enum value: NVIDIA_TESLA_V100 = 3;
   */
  NVIDIA_TESLA_V100 = 3,

  /**
   * Accelerator type is Nvidia Tesla P4.
   *
   * @generated from enum value: NVIDIA_TESLA_P4 = 4;
   */
  NVIDIA_TESLA_P4 = 4,

  /**
   * Accelerator type is Nvidia Tesla T4.
   *
   * @generated from enum value: NVIDIA_TESLA_T4 = 5;
   */
  NVIDIA_TESLA_T4 = 5,

  /**
   * Accelerator type is Nvidia Tesla A100 - 40GB.
   *
   * @generated from enum value: NVIDIA_TESLA_A100 = 11;
   */
  NVIDIA_TESLA_A100 = 11,

  /**
   * Accelerator type is Nvidia Tesla A100 - 80GB.
   *
   * @generated from enum value: NVIDIA_A100_80GB = 12;
   */
  NVIDIA_A100_80GB = 12,

  /**
   * Accelerator type is Nvidia Tesla L4.
   *
   * @generated from enum value: NVIDIA_L4 = 13;
   */
  NVIDIA_L4 = 13,

  /**
   * Accelerator type is NVIDIA Tesla T4 Virtual Workstations.
   *
   * @generated from enum value: NVIDIA_TESLA_T4_VWS = 8;
   */
  NVIDIA_TESLA_T4_VWS = 8,

  /**
   * Accelerator type is NVIDIA Tesla P100 Virtual Workstations.
   *
   * @generated from enum value: NVIDIA_TESLA_P100_VWS = 9;
   */
  NVIDIA_TESLA_P100_VWS = 9,

  /**
   * Accelerator type is NVIDIA Tesla P4 Virtual Workstations.
   *
   * @generated from enum value: NVIDIA_TESLA_P4_VWS = 10;
   */
  NVIDIA_TESLA_P4_VWS = 10,
}

/**
 * Describes the enum google.cloud.notebooks.v2.AcceleratorConfig.AcceleratorType.
 */
export const AcceleratorConfig_AcceleratorTypeSchema: GenEnum<AcceleratorConfig_AcceleratorType> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v2_gce_setup, 3, 0);

/**
 * A set of Shielded Instance options.
 * See [Images using supported Shielded VM
 * features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
 * Not all combinations are valid.
 *
 * @generated from message google.cloud.notebooks.v2.ShieldedInstanceConfig
 */
export type ShieldedInstanceConfig = Message<"google.cloud.notebooks.v2.ShieldedInstanceConfig"> & {
  /**
   * Optional. Defines whether the VM instance has Secure Boot enabled.
   *
   * Secure Boot helps ensure that the system only runs authentic software by
   * verifying the digital signature of all boot components, and halting the
   * boot process if signature verification fails. Disabled by default.
   *
   * @generated from field: bool enable_secure_boot = 1;
   */
  enableSecureBoot: boolean;

  /**
   * Optional. Defines whether the VM instance has the vTPM enabled. Enabled by
   * default.
   *
   * @generated from field: bool enable_vtpm = 2;
   */
  enableVtpm: boolean;

  /**
   * Optional. Defines whether the VM instance has integrity monitoring enabled.
   *
   * Enables monitoring and attestation of the boot integrity of the VM
   * instance. The attestation is performed against the integrity policy
   * baseline. This baseline is initially derived from the implicitly trusted
   * boot image when the VM instance is created. Enabled by default.
   *
   * @generated from field: bool enable_integrity_monitoring = 3;
   */
  enableIntegrityMonitoring: boolean;
};

/**
 * Describes the message google.cloud.notebooks.v2.ShieldedInstanceConfig.
 * Use `create(ShieldedInstanceConfigSchema)` to create a new message.
 */
export const ShieldedInstanceConfigSchema: GenMessage<ShieldedInstanceConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 4);

/**
 * A GPU driver configuration
 *
 * @generated from message google.cloud.notebooks.v2.GPUDriverConfig
 */
export type GPUDriverConfig = Message<"google.cloud.notebooks.v2.GPUDriverConfig"> & {
  /**
   * Optional. Whether the end user authorizes Google Cloud to install GPU
   * driver on this VM instance. If this field is empty or set to false, the GPU
   * driver won't be installed. Only applicable to instances with GPUs.
   *
   * @generated from field: bool enable_gpu_driver = 1;
   */
  enableGpuDriver: boolean;

  /**
   * Optional. Specify a custom Cloud Storage path where the GPU driver is
   * stored. If not specified, we'll automatically choose from official GPU
   * drivers.
   *
   * @generated from field: string custom_gpu_driver_path = 2;
   */
  customGpuDriverPath: string;
};

/**
 * Describes the message google.cloud.notebooks.v2.GPUDriverConfig.
 * Use `create(GPUDriverConfigSchema)` to create a new message.
 */
export const GPUDriverConfigSchema: GenMessage<GPUDriverConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 5);

/**
 * An instance-attached disk resource.
 *
 * @generated from message google.cloud.notebooks.v2.DataDisk
 */
export type DataDisk = Message<"google.cloud.notebooks.v2.DataDisk"> & {
  /**
   * Optional. The size of the disk in GB attached to this VM instance, up to a
   * maximum of 64000 GB (64 TB). If not specified, this defaults to 100.
   *
   * @generated from field: int64 disk_size_gb = 1;
   */
  diskSizeGb: bigint;

  /**
   * Optional. Input only. Indicates the type of the disk.
   *
   * @generated from field: google.cloud.notebooks.v2.DiskType disk_type = 2;
   */
  diskType: DiskType;

  /**
   * Optional. Input only. Disk encryption method used on the boot and data
   * disks, defaults to GMEK.
   *
   * @generated from field: google.cloud.notebooks.v2.DiskEncryption disk_encryption = 5;
   */
  diskEncryption: DiskEncryption;

  /**
   * Optional. Input only. The KMS key used to encrypt the disks, only
   * applicable if disk_encryption is CMEK. Format:
   * `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}`
   *
   * Learn more about using your own encryption keys.
   *
   * @generated from field: string kms_key = 6;
   */
  kmsKey: string;
};

/**
 * Describes the message google.cloud.notebooks.v2.DataDisk.
 * Use `create(DataDiskSchema)` to create a new message.
 */
export const DataDiskSchema: GenMessage<DataDisk> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 6);

/**
 * The definition of a boot disk.
 *
 * @generated from message google.cloud.notebooks.v2.BootDisk
 */
export type BootDisk = Message<"google.cloud.notebooks.v2.BootDisk"> & {
  /**
   * Optional. The size of the boot disk in GB attached to this instance, up to
   * a maximum of 64000 GB (64 TB). If not specified, this defaults to the
   * recommended value of 150GB.
   *
   * @generated from field: int64 disk_size_gb = 1;
   */
  diskSizeGb: bigint;

  /**
   * Optional. Indicates the type of the disk.
   *
   * @generated from field: google.cloud.notebooks.v2.DiskType disk_type = 2;
   */
  diskType: DiskType;

  /**
   * Optional. Input only. Disk encryption method used on the boot and data
   * disks, defaults to GMEK.
   *
   * @generated from field: google.cloud.notebooks.v2.DiskEncryption disk_encryption = 3;
   */
  diskEncryption: DiskEncryption;

  /**
   * Optional. Input only. The KMS key used to encrypt the disks, only
   * applicable if disk_encryption is CMEK. Format:
   * `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}`
   *
   * Learn more about using your own encryption keys.
   *
   * @generated from field: string kms_key = 4;
   */
  kmsKey: string;
};

/**
 * Describes the message google.cloud.notebooks.v2.BootDisk.
 * Use `create(BootDiskSchema)` to create a new message.
 */
export const BootDiskSchema: GenMessage<BootDisk> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 7);

/**
 * A service account that acts as an identity.
 *
 * @generated from message google.cloud.notebooks.v2.ServiceAccount
 */
export type ServiceAccount = Message<"google.cloud.notebooks.v2.ServiceAccount"> & {
  /**
   * Optional. Email address of the service account.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * Output only. The list of scopes to be made available for this service
   * account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * Describes the message google.cloud.notebooks.v2.ServiceAccount.
 * Use `create(ServiceAccountSchema)` to create a new message.
 */
export const ServiceAccountSchema: GenMessage<ServiceAccount> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 8);

/**
 * The definition of how to configure a VM instance outside of Resources and
 * Identity.
 *
 * @generated from message google.cloud.notebooks.v2.GceSetup
 */
export type GceSetup = Message<"google.cloud.notebooks.v2.GceSetup"> & {
  /**
   * Optional. The machine type of the VM instance.
   * https://cloud.google.com/compute/docs/machine-resource
   *
   * @generated from field: string machine_type = 1;
   */
  machineType: string;

  /**
   * Optional. The hardware accelerators used on this instance. If you use
   * accelerators, make sure that your configuration has
   * [enough vCPUs and memory to support the `machine_type` you have
   * selected](https://cloud.google.com/compute/docs/gpus/#gpus-list).
   * Currently supports only one accelerator configuration.
   *
   * @generated from field: repeated google.cloud.notebooks.v2.AcceleratorConfig accelerator_configs = 2;
   */
  acceleratorConfigs: AcceleratorConfig[];

  /**
   * Optional. The service account that serves as an identity for the VM
   * instance. Currently supports only one service account.
   *
   * @generated from field: repeated google.cloud.notebooks.v2.ServiceAccount service_accounts = 3;
   */
  serviceAccounts: ServiceAccount[];

  /**
   * Type of the image; can be one of VM image, or container image.
   *
   * @generated from oneof google.cloud.notebooks.v2.GceSetup.image
   */
  image: {
    /**
     * Optional. Use a Compute Engine VM image to start the notebook instance.
     *
     * @generated from field: google.cloud.notebooks.v2.VmImage vm_image = 4;
     */
    value: VmImage;
    case: "vmImage";
  } | {
    /**
     * Optional. Use a container image to start the notebook instance.
     *
     * @generated from field: google.cloud.notebooks.v2.ContainerImage container_image = 5;
     */
    value: ContainerImage;
    case: "containerImage";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. The boot disk for the VM.
   *
   * @generated from field: google.cloud.notebooks.v2.BootDisk boot_disk = 6;
   */
  bootDisk?: BootDisk;

  /**
   * Optional. Data disks attached to the VM instance.
   * Currently supports only one data disk.
   *
   * @generated from field: repeated google.cloud.notebooks.v2.DataDisk data_disks = 7;
   */
  dataDisks: DataDisk[];

  /**
   * Optional. Shielded VM configuration.
   * [Images using supported Shielded VM
   * features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm).
   *
   * @generated from field: google.cloud.notebooks.v2.ShieldedInstanceConfig shielded_instance_config = 8;
   */
  shieldedInstanceConfig?: ShieldedInstanceConfig;

  /**
   * Optional. The network interfaces for the VM.
   * Supports only one interface.
   *
   * @generated from field: repeated google.cloud.notebooks.v2.NetworkInterface network_interfaces = 9;
   */
  networkInterfaces: NetworkInterface[];

  /**
   * Optional. If true, no external IP will be assigned to this VM instance.
   *
   * @generated from field: bool disable_public_ip = 10;
   */
  disablePublicIp: boolean;

  /**
   * Optional. The Compute Engine tags to add to runtime (see [Tagging
   * instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
   *
   * @generated from field: repeated string tags = 11;
   */
  tags: string[];

  /**
   * Optional. Custom metadata to apply to this instance.
   *
   * @generated from field: map<string, string> metadata = 12;
   */
  metadata: { [key: string]: string };

  /**
   * Optional. Flag to enable ip forwarding or not, default false/off.
   * https://cloud.google.com/vpc/docs/using-routes#canipforward
   *
   * @generated from field: bool enable_ip_forwarding = 13;
   */
  enableIpForwarding: boolean;

  /**
   * Optional. Configuration for GPU drivers.
   *
   * @generated from field: google.cloud.notebooks.v2.GPUDriverConfig gpu_driver_config = 14;
   */
  gpuDriverConfig?: GPUDriverConfig;
};

/**
 * Describes the message google.cloud.notebooks.v2.GceSetup.
 * Use `create(GceSetupSchema)` to create a new message.
 */
export const GceSetupSchema: GenMessage<GceSetup> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v2_gce_setup, 9);

/**
 * Definition of the disk encryption options.
 *
 * @generated from enum google.cloud.notebooks.v2.DiskEncryption
 */
export enum DiskEncryption {
  /**
   * Disk encryption is not specified.
   *
   * @generated from enum value: DISK_ENCRYPTION_UNSPECIFIED = 0;
   */
  DISK_ENCRYPTION_UNSPECIFIED = 0,

  /**
   * Use Google managed encryption keys to encrypt the boot disk.
   *
   * @generated from enum value: GMEK = 1;
   */
  GMEK = 1,

  /**
   * Use customer managed encryption keys to encrypt the boot disk.
   *
   * @generated from enum value: CMEK = 2;
   */
  CMEK = 2,
}

/**
 * Describes the enum google.cloud.notebooks.v2.DiskEncryption.
 */
export const DiskEncryptionSchema: GenEnum<DiskEncryption> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v2_gce_setup, 0);

/**
 * Possible disk types.
 *
 * @generated from enum google.cloud.notebooks.v2.DiskType
 */
export enum DiskType {
  /**
   * Disk type not set.
   *
   * @generated from enum value: DISK_TYPE_UNSPECIFIED = 0;
   */
  DISK_TYPE_UNSPECIFIED = 0,

  /**
   * Standard persistent disk type.
   *
   * @generated from enum value: PD_STANDARD = 1;
   */
  PD_STANDARD = 1,

  /**
   * SSD persistent disk type.
   *
   * @generated from enum value: PD_SSD = 2;
   */
  PD_SSD = 2,

  /**
   * Balanced persistent disk type.
   *
   * @generated from enum value: PD_BALANCED = 3;
   */
  PD_BALANCED = 3,

  /**
   * Extreme persistent disk type.
   *
   * @generated from enum value: PD_EXTREME = 4;
   */
  PD_EXTREME = 4,
}

/**
 * Describes the enum google.cloud.notebooks.v2.DiskType.
 */
export const DiskTypeSchema: GenEnum<DiskType> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v2_gce_setup, 1);

