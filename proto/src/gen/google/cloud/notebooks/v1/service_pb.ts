// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/notebooks/v1/service.proto (package google.cloud.notebooks.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { DiagnosticConfig } from "./diagnostic_config_pb";
import { file_google_cloud_notebooks_v1_diagnostic_config } from "./diagnostic_config_pb";
import type { Environment, EnvironmentSchema } from "./environment_pb";
import { file_google_cloud_notebooks_v1_environment } from "./environment_pb";
import type { Execution, ExecutionSchema } from "./execution_pb";
import { file_google_cloud_notebooks_v1_execution } from "./execution_pb";
import type { Instance, Instance_AcceleratorType, Instance_ShieldedInstanceConfig, InstanceSchema } from "./instance_pb";
import { file_google_cloud_notebooks_v1_instance } from "./instance_pb";
import type { InstanceConfig } from "./instance_config_pb";
import { file_google_cloud_notebooks_v1_instance_config } from "./instance_config_pb";
import type { Schedule, ScheduleSchema } from "./schedule_pb";
import { file_google_cloud_notebooks_v1_schedule } from "./schedule_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/notebooks/v1/service.proto.
 */
export const file_google_cloud_notebooks_v1_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_notebooks_v1_diagnostic_config, file_google_cloud_notebooks_v1_environment, file_google_cloud_notebooks_v1_execution, file_google_cloud_notebooks_v1_instance, file_google_cloud_notebooks_v1_instance_config, file_google_cloud_notebooks_v1_schedule, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.notebooks.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.notebooks.v1.OperationMetadata"> & {
  /**
   * The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;

  /**
   * API endpoint name of this operation.
   *
   * @generated from field: string endpoint = 8;
   */
  endpoint: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 0);

/**
 * Request for listing notebook instances.
 *
 * @generated from message google.cloud.notebooks.v1.ListInstancesRequest
 */
export type ListInstancesRequest = Message<"google.cloud.notebooks.v1.ListInstancesRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum return size of the list call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export const ListInstancesRequestSchema: GenMessage<ListInstancesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 1);

/**
 * Response for listing notebook instances.
 *
 * @generated from message google.cloud.notebooks.v1.ListInstancesResponse
 */
export type ListInstancesResponse = Message<"google.cloud.notebooks.v1.ListInstancesResponse"> & {
  /**
   * A list of returned instances.
   *
   * @generated from field: repeated google.cloud.notebooks.v1.Instance instances = 1;
   */
  instances: Instance[];

  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached. For example,
   * `['us-west1-a', 'us-central1-b']`.
   * A ListInstancesResponse will only contain either instances or unreachables,
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.notebooks.v1.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export const ListInstancesResponseSchema: GenMessage<ListInstancesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 2);

/**
 * Request for getting a notebook instance.
 *
 * @generated from message google.cloud.notebooks.v1.GetInstanceRequest
 */
export type GetInstanceRequest = Message<"google.cloud.notebooks.v1.GetInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.GetInstanceRequest.
 * Use `create(GetInstanceRequestSchema)` to create a new message.
 */
export const GetInstanceRequestSchema: GenMessage<GetInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 3);

/**
 * Request for creating a notebook instance.
 *
 * @generated from message google.cloud.notebooks.v1.CreateInstanceRequest
 */
export type CreateInstanceRequest = Message<"google.cloud.notebooks.v1.CreateInstanceRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User-defined unique ID of this instance.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Required. The instance to be created.
   *
   * @generated from field: google.cloud.notebooks.v1.Instance instance = 3;
   */
  instance?: Instance;
};

/**
 * Describes the message google.cloud.notebooks.v1.CreateInstanceRequest.
 * Use `create(CreateInstanceRequestSchema)` to create a new message.
 */
export const CreateInstanceRequestSchema: GenMessage<CreateInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 4);

/**
 * Request for registering a notebook instance.
 *
 * @generated from message google.cloud.notebooks.v1.RegisterInstanceRequest
 */
export type RegisterInstanceRequest = Message<"google.cloud.notebooks.v1.RegisterInstanceRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User defined unique ID of this instance. The `instance_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.RegisterInstanceRequest.
 * Use `create(RegisterInstanceRequestSchema)` to create a new message.
 */
export const RegisterInstanceRequestSchema: GenMessage<RegisterInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 5);

/**
 * Request for setting instance accelerator.
 *
 * @generated from message google.cloud.notebooks.v1.SetInstanceAcceleratorRequest
 */
export type SetInstanceAcceleratorRequest = Message<"google.cloud.notebooks.v1.SetInstanceAcceleratorRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Type of this accelerator.
   *
   * @generated from field: google.cloud.notebooks.v1.Instance.AcceleratorType type = 2;
   */
  type: Instance_AcceleratorType;

  /**
   * Required. Count of cores of this accelerator. Note that not all combinations
   * of `type` and `core_count` are valid. Check [GPUs on
   * Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to
   * find a valid combination. TPUs are not supported.
   *
   * @generated from field: int64 core_count = 3;
   */
  coreCount: bigint;
};

/**
 * Describes the message google.cloud.notebooks.v1.SetInstanceAcceleratorRequest.
 * Use `create(SetInstanceAcceleratorRequestSchema)` to create a new message.
 */
export const SetInstanceAcceleratorRequestSchema: GenMessage<SetInstanceAcceleratorRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 6);

/**
 * Request for setting instance machine type.
 *
 * @generated from message google.cloud.notebooks.v1.SetInstanceMachineTypeRequest
 */
export type SetInstanceMachineTypeRequest = Message<"google.cloud.notebooks.v1.SetInstanceMachineTypeRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The [Compute Engine machine
   * type](https://cloud.google.com/compute/docs/machine-types).
   *
   * @generated from field: string machine_type = 2;
   */
  machineType: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.SetInstanceMachineTypeRequest.
 * Use `create(SetInstanceMachineTypeRequestSchema)` to create a new message.
 */
export const SetInstanceMachineTypeRequestSchema: GenMessage<SetInstanceMachineTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 7);

/**
 * Request for updating instance configurations.
 *
 * @generated from message google.cloud.notebooks.v1.UpdateInstanceConfigRequest
 */
export type UpdateInstanceConfigRequest = Message<"google.cloud.notebooks.v1.UpdateInstanceConfigRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The instance configurations to be updated.
   *
   * @generated from field: google.cloud.notebooks.v1.InstanceConfig config = 2;
   */
  config?: InstanceConfig;
};

/**
 * Describes the message google.cloud.notebooks.v1.UpdateInstanceConfigRequest.
 * Use `create(UpdateInstanceConfigRequestSchema)` to create a new message.
 */
export const UpdateInstanceConfigRequestSchema: GenMessage<UpdateInstanceConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 8);

/**
 * Request for setting instance labels.
 *
 * @generated from message google.cloud.notebooks.v1.SetInstanceLabelsRequest
 */
export type SetInstanceLabelsRequest = Message<"google.cloud.notebooks.v1.SetInstanceLabelsRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Labels to apply to this instance.
   * These can be later modified by the setLabels method
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.notebooks.v1.SetInstanceLabelsRequest.
 * Use `create(SetInstanceLabelsRequestSchema)` to create a new message.
 */
export const SetInstanceLabelsRequestSchema: GenMessage<SetInstanceLabelsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 9);

/**
 * Request for adding/changing metadata items  for an instance.
 *
 * @generated from message google.cloud.notebooks.v1.UpdateInstanceMetadataItemsRequest
 */
export type UpdateInstanceMetadataItemsRequest = Message<"google.cloud.notebooks.v1.UpdateInstanceMetadataItemsRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Metadata items to add/update for the instance.
   *
   * @generated from field: map<string, string> items = 2;
   */
  items: { [key: string]: string };
};

/**
 * Describes the message google.cloud.notebooks.v1.UpdateInstanceMetadataItemsRequest.
 * Use `create(UpdateInstanceMetadataItemsRequestSchema)` to create a new message.
 */
export const UpdateInstanceMetadataItemsRequestSchema: GenMessage<UpdateInstanceMetadataItemsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 10);

/**
 * Response for adding/changing metadata items for an instance.
 *
 * @generated from message google.cloud.notebooks.v1.UpdateInstanceMetadataItemsResponse
 */
export type UpdateInstanceMetadataItemsResponse = Message<"google.cloud.notebooks.v1.UpdateInstanceMetadataItemsResponse"> & {
  /**
   * Map of items that were added/updated to/in the metadata.
   *
   * @generated from field: map<string, string> items = 1;
   */
  items: { [key: string]: string };
};

/**
 * Describes the message google.cloud.notebooks.v1.UpdateInstanceMetadataItemsResponse.
 * Use `create(UpdateInstanceMetadataItemsResponseSchema)` to create a new message.
 */
export const UpdateInstanceMetadataItemsResponseSchema: GenMessage<UpdateInstanceMetadataItemsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 11);

/**
 * Request for updating the Shielded Instance config for a notebook instance.
 * You can only use this method on a stopped instance
 *
 * @generated from message google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest
 */
export type UpdateShieldedInstanceConfigRequest = Message<"google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * ShieldedInstance configuration to be updated.
   *
   * @generated from field: google.cloud.notebooks.v1.Instance.ShieldedInstanceConfig shielded_instance_config = 2;
   */
  shieldedInstanceConfig?: Instance_ShieldedInstanceConfig;
};

/**
 * Describes the message google.cloud.notebooks.v1.UpdateShieldedInstanceConfigRequest.
 * Use `create(UpdateShieldedInstanceConfigRequestSchema)` to create a new message.
 */
export const UpdateShieldedInstanceConfigRequestSchema: GenMessage<UpdateShieldedInstanceConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 12);

/**
 * Request for deleting a notebook instance.
 *
 * @generated from message google.cloud.notebooks.v1.DeleteInstanceRequest
 */
export type DeleteInstanceRequest = Message<"google.cloud.notebooks.v1.DeleteInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.DeleteInstanceRequest.
 * Use `create(DeleteInstanceRequestSchema)` to create a new message.
 */
export const DeleteInstanceRequestSchema: GenMessage<DeleteInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 13);

/**
 * Request for starting a notebook instance
 *
 * @generated from message google.cloud.notebooks.v1.StartInstanceRequest
 */
export type StartInstanceRequest = Message<"google.cloud.notebooks.v1.StartInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.StartInstanceRequest.
 * Use `create(StartInstanceRequestSchema)` to create a new message.
 */
export const StartInstanceRequestSchema: GenMessage<StartInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 14);

/**
 * Request for stopping a notebook instance
 *
 * @generated from message google.cloud.notebooks.v1.StopInstanceRequest
 */
export type StopInstanceRequest = Message<"google.cloud.notebooks.v1.StopInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.StopInstanceRequest.
 * Use `create(StopInstanceRequestSchema)` to create a new message.
 */
export const StopInstanceRequestSchema: GenMessage<StopInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 15);

/**
 * Request for resetting a notebook instance
 *
 * @generated from message google.cloud.notebooks.v1.ResetInstanceRequest
 */
export type ResetInstanceRequest = Message<"google.cloud.notebooks.v1.ResetInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.ResetInstanceRequest.
 * Use `create(ResetInstanceRequestSchema)` to create a new message.
 */
export const ResetInstanceRequestSchema: GenMessage<ResetInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 16);

/**
 * Request for notebook instances to report information to Notebooks API.
 *
 * @generated from message google.cloud.notebooks.v1.ReportInstanceInfoRequest
 */
export type ReportInstanceInfoRequest = Message<"google.cloud.notebooks.v1.ReportInstanceInfoRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   *
   * @generated from field: string vm_id = 2;
   */
  vmId: string;

  /**
   * The metadata reported to Notebooks API. This will be merged to the instance
   * metadata store
   *
   * @generated from field: map<string, string> metadata = 3;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message google.cloud.notebooks.v1.ReportInstanceInfoRequest.
 * Use `create(ReportInstanceInfoRequestSchema)` to create a new message.
 */
export const ReportInstanceInfoRequestSchema: GenMessage<ReportInstanceInfoRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 17);

/**
 * Request for checking if a notebook instance is upgradeable.
 *
 * @generated from message google.cloud.notebooks.v1.IsInstanceUpgradeableRequest
 */
export type IsInstanceUpgradeableRequest = Message<"google.cloud.notebooks.v1.IsInstanceUpgradeableRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string notebook_instance = 1;
   */
  notebookInstance: string;

  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   *
   * @generated from field: google.cloud.notebooks.v1.UpgradeType type = 2;
   */
  type: UpgradeType;
};

/**
 * Describes the message google.cloud.notebooks.v1.IsInstanceUpgradeableRequest.
 * Use `create(IsInstanceUpgradeableRequestSchema)` to create a new message.
 */
export const IsInstanceUpgradeableRequestSchema: GenMessage<IsInstanceUpgradeableRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 18);

/**
 * Response for checking if a notebook instance is upgradeable.
 *
 * @generated from message google.cloud.notebooks.v1.IsInstanceUpgradeableResponse
 */
export type IsInstanceUpgradeableResponse = Message<"google.cloud.notebooks.v1.IsInstanceUpgradeableResponse"> & {
  /**
   * If an instance is upgradeable.
   *
   * @generated from field: bool upgradeable = 1;
   */
  upgradeable: boolean;

  /**
   * The version this instance will be upgraded to if calling the upgrade
   * endpoint. This field will only be populated if field upgradeable is true.
   *
   * @generated from field: string upgrade_version = 2;
   */
  upgradeVersion: string;

  /**
   * Additional information about upgrade.
   *
   * @generated from field: string upgrade_info = 3;
   */
  upgradeInfo: string;

  /**
   * The new image self link this instance will be upgraded to if calling the
   * upgrade endpoint. This field will only be populated if field upgradeable
   * is true.
   *
   * @generated from field: string upgrade_image = 4;
   */
  upgradeImage: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.IsInstanceUpgradeableResponse.
 * Use `create(IsInstanceUpgradeableResponseSchema)` to create a new message.
 */
export const IsInstanceUpgradeableResponseSchema: GenMessage<IsInstanceUpgradeableResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 19);

/**
 * Request for checking if a notebook instance is healthy.
 *
 * @generated from message google.cloud.notebooks.v1.GetInstanceHealthRequest
 */
export type GetInstanceHealthRequest = Message<"google.cloud.notebooks.v1.GetInstanceHealthRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.GetInstanceHealthRequest.
 * Use `create(GetInstanceHealthRequestSchema)` to create a new message.
 */
export const GetInstanceHealthRequestSchema: GenMessage<GetInstanceHealthRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 20);

/**
 * Response for checking if a notebook instance is healthy.
 *
 * @generated from message google.cloud.notebooks.v1.GetInstanceHealthResponse
 */
export type GetInstanceHealthResponse = Message<"google.cloud.notebooks.v1.GetInstanceHealthResponse"> & {
  /**
   * Output only. Runtime health_state.
   *
   * @generated from field: google.cloud.notebooks.v1.GetInstanceHealthResponse.HealthState health_state = 1;
   */
  healthState: GetInstanceHealthResponse_HealthState;

  /**
   * Output only. Additional information about instance health.
   * Example:
   *     healthInfo": {
   *       "docker_proxy_agent_status": "1",
   *       "docker_status": "1",
   *       "jupyterlab_api_status": "-1",
   *       "jupyterlab_status": "-1",
   *       "updated": "2020-10-18 09:40:03.573409"
   *     }
   *
   * @generated from field: map<string, string> health_info = 2;
   */
  healthInfo: { [key: string]: string };
};

/**
 * Describes the message google.cloud.notebooks.v1.GetInstanceHealthResponse.
 * Use `create(GetInstanceHealthResponseSchema)` to create a new message.
 */
export const GetInstanceHealthResponseSchema: GenMessage<GetInstanceHealthResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 21);

/**
 * If an instance is healthy or not.
 *
 * @generated from enum google.cloud.notebooks.v1.GetInstanceHealthResponse.HealthState
 */
export enum GetInstanceHealthResponse_HealthState {
  /**
   * The instance substate is unknown.
   *
   * @generated from enum value: HEALTH_STATE_UNSPECIFIED = 0;
   */
  HEALTH_STATE_UNSPECIFIED = 0,

  /**
   * The instance is known to be in an healthy state
   * (for example, critical daemons are running)
   * Applies to ACTIVE state.
   *
   * @generated from enum value: HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * The instance is known to be in an unhealthy state
   * (for example, critical daemons are not running)
   * Applies to ACTIVE state.
   *
   * @generated from enum value: UNHEALTHY = 2;
   */
  UNHEALTHY = 2,

  /**
   * The instance has not installed health monitoring agent.
   * Applies to ACTIVE state.
   *
   * @generated from enum value: AGENT_NOT_INSTALLED = 3;
   */
  AGENT_NOT_INSTALLED = 3,

  /**
   * The instance health monitoring agent is not running.
   * Applies to ACTIVE state.
   *
   * @generated from enum value: AGENT_NOT_RUNNING = 4;
   */
  AGENT_NOT_RUNNING = 4,
}

/**
 * Describes the enum google.cloud.notebooks.v1.GetInstanceHealthResponse.HealthState.
 */
export const GetInstanceHealthResponse_HealthStateSchema: GenEnum<GetInstanceHealthResponse_HealthState> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v1_service, 21, 0);

/**
 * Request for upgrading a notebook instance
 *
 * @generated from message google.cloud.notebooks.v1.UpgradeInstanceRequest
 */
export type UpgradeInstanceRequest = Message<"google.cloud.notebooks.v1.UpgradeInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   *
   * @generated from field: google.cloud.notebooks.v1.UpgradeType type = 2;
   */
  type: UpgradeType;
};

/**
 * Describes the message google.cloud.notebooks.v1.UpgradeInstanceRequest.
 * Use `create(UpgradeInstanceRequestSchema)` to create a new message.
 */
export const UpgradeInstanceRequestSchema: GenMessage<UpgradeInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 22);

/**
 * Request for rollbacking a notebook instance
 *
 * @generated from message google.cloud.notebooks.v1.RollbackInstanceRequest
 */
export type RollbackInstanceRequest = Message<"google.cloud.notebooks.v1.RollbackInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The snapshot for rollback.
   * Example: `projects/test-project/global/snapshots/krwlzipynril`.
   *
   * @generated from field: string target_snapshot = 2;
   */
  targetSnapshot: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.RollbackInstanceRequest.
 * Use `create(RollbackInstanceRequestSchema)` to create a new message.
 */
export const RollbackInstanceRequestSchema: GenMessage<RollbackInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 23);

/**
 * Request for upgrading a notebook instance from within the VM
 *
 * @generated from message google.cloud.notebooks.v1.UpgradeInstanceInternalRequest
 */
export type UpgradeInstanceInternalRequest = Message<"google.cloud.notebooks.v1.UpgradeInstanceInternalRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The VM hardware token for authenticating the VM.
   * https://cloud.google.com/compute/docs/instances/verifying-instance-identity
   *
   * @generated from field: string vm_id = 2;
   */
  vmId: string;

  /**
   * Optional. The optional UpgradeType. Setting this field will search for additional
   * compute images to upgrade this instance.
   *
   * @generated from field: google.cloud.notebooks.v1.UpgradeType type = 3;
   */
  type: UpgradeType;
};

/**
 * Describes the message google.cloud.notebooks.v1.UpgradeInstanceInternalRequest.
 * Use `create(UpgradeInstanceInternalRequestSchema)` to create a new message.
 */
export const UpgradeInstanceInternalRequestSchema: GenMessage<UpgradeInstanceInternalRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 24);

/**
 * Request for listing environments.
 *
 * @generated from message google.cloud.notebooks.v1.ListEnvironmentsRequest
 */
export type ListEnvironmentsRequest = Message<"google.cloud.notebooks.v1.ListEnvironmentsRequest"> & {
  /**
   * Required. Format: `projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum return size of the list call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A previous returned page token that can be used to continue listing from
   * the last result.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.ListEnvironmentsRequest.
 * Use `create(ListEnvironmentsRequestSchema)` to create a new message.
 */
export const ListEnvironmentsRequestSchema: GenMessage<ListEnvironmentsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 25);

/**
 * Request for creating a notebook instance diagnostic file.
 *
 * @generated from message google.cloud.notebooks.v1.DiagnoseInstanceRequest
 */
export type DiagnoseInstanceRequest = Message<"google.cloud.notebooks.v1.DiagnoseInstanceRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/instances/{instance_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Defines flags that are used to run the diagnostic tool
   *
   * @generated from field: google.cloud.notebooks.v1.DiagnosticConfig diagnostic_config = 2;
   */
  diagnosticConfig?: DiagnosticConfig;
};

/**
 * Describes the message google.cloud.notebooks.v1.DiagnoseInstanceRequest.
 * Use `create(DiagnoseInstanceRequestSchema)` to create a new message.
 */
export const DiagnoseInstanceRequestSchema: GenMessage<DiagnoseInstanceRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 26);

/**
 * Response for listing environments.
 *
 * @generated from message google.cloud.notebooks.v1.ListEnvironmentsResponse
 */
export type ListEnvironmentsResponse = Message<"google.cloud.notebooks.v1.ListEnvironmentsResponse"> & {
  /**
   * A list of returned environments.
   *
   * @generated from field: repeated google.cloud.notebooks.v1.Environment environments = 1;
   */
  environments: Environment[];

  /**
   * A page token that can be used to continue listing from the last result
   * in the next list call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.notebooks.v1.ListEnvironmentsResponse.
 * Use `create(ListEnvironmentsResponseSchema)` to create a new message.
 */
export const ListEnvironmentsResponseSchema: GenMessage<ListEnvironmentsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 27);

/**
 * Request for getting a notebook environment.
 *
 * @generated from message google.cloud.notebooks.v1.GetEnvironmentRequest
 */
export type GetEnvironmentRequest = Message<"google.cloud.notebooks.v1.GetEnvironmentRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.GetEnvironmentRequest.
 * Use `create(GetEnvironmentRequestSchema)` to create a new message.
 */
export const GetEnvironmentRequestSchema: GenMessage<GetEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 28);

/**
 * Request for creating a notebook environment.
 *
 * @generated from message google.cloud.notebooks.v1.CreateEnvironmentRequest
 */
export type CreateEnvironmentRequest = Message<"google.cloud.notebooks.v1.CreateEnvironmentRequest"> & {
  /**
   * Required. Format: `projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User-defined unique ID of this environment. The `environment_id` must
   * be 1 to 63 characters long and contain only lowercase letters,
   * numeric characters, and dashes. The first character must be a lowercase
   * letter and the last character cannot be a dash.
   *
   * @generated from field: string environment_id = 2;
   */
  environmentId: string;

  /**
   * Required. The environment to be created.
   *
   * @generated from field: google.cloud.notebooks.v1.Environment environment = 3;
   */
  environment?: Environment;
};

/**
 * Describes the message google.cloud.notebooks.v1.CreateEnvironmentRequest.
 * Use `create(CreateEnvironmentRequestSchema)` to create a new message.
 */
export const CreateEnvironmentRequestSchema: GenMessage<CreateEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 29);

/**
 * Request for deleting a notebook environment.
 *
 * @generated from message google.cloud.notebooks.v1.DeleteEnvironmentRequest
 */
export type DeleteEnvironmentRequest = Message<"google.cloud.notebooks.v1.DeleteEnvironmentRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/environments/{environment_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.DeleteEnvironmentRequest.
 * Use `create(DeleteEnvironmentRequestSchema)` to create a new message.
 */
export const DeleteEnvironmentRequestSchema: GenMessage<DeleteEnvironmentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 30);

/**
 * Request for listing scheduled notebook job.
 *
 * @generated from message google.cloud.notebooks.v1.ListSchedulesRequest
 */
export type ListSchedulesRequest = Message<"google.cloud.notebooks.v1.ListSchedulesRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum return size of the list call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter applied to resulting schedules.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Field to order results by.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.ListSchedulesRequest.
 * Use `create(ListSchedulesRequestSchema)` to create a new message.
 */
export const ListSchedulesRequestSchema: GenMessage<ListSchedulesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 31);

/**
 * Response for listing scheduled notebook job.
 *
 * @generated from message google.cloud.notebooks.v1.ListSchedulesResponse
 */
export type ListSchedulesResponse = Message<"google.cloud.notebooks.v1.ListSchedulesResponse"> & {
  /**
   * A list of returned instances.
   *
   * @generated from field: repeated google.cloud.notebooks.v1.Schedule schedules = 1;
   */
  schedules: Schedule[];

  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Schedules that could not be reached. For example:
   *
   *     ['projects/{project_id}/location/{location}/schedules/monthly_digest',
   *      'projects/{project_id}/location/{location}/schedules/weekly_sentiment']
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.notebooks.v1.ListSchedulesResponse.
 * Use `create(ListSchedulesResponseSchema)` to create a new message.
 */
export const ListSchedulesResponseSchema: GenMessage<ListSchedulesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 32);

/**
 * Request for getting scheduled notebook.
 *
 * @generated from message google.cloud.notebooks.v1.GetScheduleRequest
 */
export type GetScheduleRequest = Message<"google.cloud.notebooks.v1.GetScheduleRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.GetScheduleRequest.
 * Use `create(GetScheduleRequestSchema)` to create a new message.
 */
export const GetScheduleRequestSchema: GenMessage<GetScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 33);

/**
 * Request for deleting an Schedule
 *
 * @generated from message google.cloud.notebooks.v1.DeleteScheduleRequest
 */
export type DeleteScheduleRequest = Message<"google.cloud.notebooks.v1.DeleteScheduleRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.DeleteScheduleRequest.
 * Use `create(DeleteScheduleRequestSchema)` to create a new message.
 */
export const DeleteScheduleRequestSchema: GenMessage<DeleteScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 34);

/**
 * Request for created scheduled notebooks
 *
 * @generated from message google.cloud.notebooks.v1.CreateScheduleRequest
 */
export type CreateScheduleRequest = Message<"google.cloud.notebooks.v1.CreateScheduleRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User-defined unique ID of this schedule.
   *
   * @generated from field: string schedule_id = 2;
   */
  scheduleId: string;

  /**
   * Required. The schedule to be created.
   *
   * @generated from field: google.cloud.notebooks.v1.Schedule schedule = 3;
   */
  schedule?: Schedule;
};

/**
 * Describes the message google.cloud.notebooks.v1.CreateScheduleRequest.
 * Use `create(CreateScheduleRequestSchema)` to create a new message.
 */
export const CreateScheduleRequestSchema: GenMessage<CreateScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 35);

/**
 * Request for created scheduled notebooks
 *
 * @generated from message google.cloud.notebooks.v1.TriggerScheduleRequest
 */
export type TriggerScheduleRequest = Message<"google.cloud.notebooks.v1.TriggerScheduleRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}/schedules/{schedule_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.TriggerScheduleRequest.
 * Use `create(TriggerScheduleRequestSchema)` to create a new message.
 */
export const TriggerScheduleRequestSchema: GenMessage<TriggerScheduleRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 36);

/**
 * Request for listing scheduled notebook executions.
 *
 * @generated from message google.cloud.notebooks.v1.ListExecutionsRequest
 */
export type ListExecutionsRequest = Message<"google.cloud.notebooks.v1.ListExecutionsRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Maximum return size of the list call.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A previous returned page token that can be used to continue listing
   * from the last result.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter applied to resulting executions. Currently only supports filtering
   * executions by a specified `schedule_id`.
   * Format: `schedule_id=<Schedule_ID>`
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Sort by field.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.ListExecutionsRequest.
 * Use `create(ListExecutionsRequestSchema)` to create a new message.
 */
export const ListExecutionsRequestSchema: GenMessage<ListExecutionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 37);

/**
 * Response for listing scheduled notebook executions
 *
 * @generated from message google.cloud.notebooks.v1.ListExecutionsResponse
 */
export type ListExecutionsResponse = Message<"google.cloud.notebooks.v1.ListExecutionsResponse"> & {
  /**
   * A list of returned instances.
   *
   * @generated from field: repeated google.cloud.notebooks.v1.Execution executions = 1;
   */
  executions: Execution[];

  /**
   * Page token that can be used to continue listing from the last result in the
   * next list call.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Executions IDs that could not be reached. For example:
   *
   *     ['projects/{project_id}/location/{location}/executions/imagenet_test1',
   *      'projects/{project_id}/location/{location}/executions/classifier_train1']
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.notebooks.v1.ListExecutionsResponse.
 * Use `create(ListExecutionsResponseSchema)` to create a new message.
 */
export const ListExecutionsResponseSchema: GenMessage<ListExecutionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 38);

/**
 * Request for getting scheduled notebook execution
 *
 * @generated from message google.cloud.notebooks.v1.GetExecutionRequest
 */
export type GetExecutionRequest = Message<"google.cloud.notebooks.v1.GetExecutionRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/executions/{execution_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.GetExecutionRequest.
 * Use `create(GetExecutionRequestSchema)` to create a new message.
 */
export const GetExecutionRequestSchema: GenMessage<GetExecutionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 39);

/**
 * Request for deleting a scheduled notebook execution
 *
 * @generated from message google.cloud.notebooks.v1.DeleteExecutionRequest
 */
export type DeleteExecutionRequest = Message<"google.cloud.notebooks.v1.DeleteExecutionRequest"> & {
  /**
   * Required. Format:
   * `projects/{project_id}/locations/{location}/executions/{execution_id}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.notebooks.v1.DeleteExecutionRequest.
 * Use `create(DeleteExecutionRequestSchema)` to create a new message.
 */
export const DeleteExecutionRequestSchema: GenMessage<DeleteExecutionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 40);

/**
 * Request to create notebook execution
 *
 * @generated from message google.cloud.notebooks.v1.CreateExecutionRequest
 */
export type CreateExecutionRequest = Message<"google.cloud.notebooks.v1.CreateExecutionRequest"> & {
  /**
   * Required. Format:
   * `parent=projects/{project_id}/locations/{location}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. User-defined unique ID of this execution.
   *
   * @generated from field: string execution_id = 2;
   */
  executionId: string;

  /**
   * Required. The execution to be created.
   *
   * @generated from field: google.cloud.notebooks.v1.Execution execution = 3;
   */
  execution?: Execution;
};

/**
 * Describes the message google.cloud.notebooks.v1.CreateExecutionRequest.
 * Use `create(CreateExecutionRequestSchema)` to create a new message.
 */
export const CreateExecutionRequestSchema: GenMessage<CreateExecutionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_notebooks_v1_service, 41);

/**
 * Definition of the types of upgrade that can be used on this
 * instance.
 *
 * @generated from enum google.cloud.notebooks.v1.UpgradeType
 */
export enum UpgradeType {
  /**
   * Upgrade type is not specified.
   *
   * @generated from enum value: UPGRADE_TYPE_UNSPECIFIED = 0;
   */
  UPGRADE_TYPE_UNSPECIFIED = 0,

  /**
   * Upgrade ML framework.
   *
   * @generated from enum value: UPGRADE_FRAMEWORK = 1;
   */
  UPGRADE_FRAMEWORK = 1,

  /**
   * Upgrade Operating System.
   *
   * @generated from enum value: UPGRADE_OS = 2;
   */
  UPGRADE_OS = 2,

  /**
   * Upgrade CUDA.
   *
   * @generated from enum value: UPGRADE_CUDA = 3;
   */
  UPGRADE_CUDA = 3,

  /**
   * Upgrade All (OS, Framework and CUDA).
   *
   * @generated from enum value: UPGRADE_ALL = 4;
   */
  UPGRADE_ALL = 4,
}

/**
 * Describes the enum google.cloud.notebooks.v1.UpgradeType.
 */
export const UpgradeTypeSchema: GenEnum<UpgradeType> = /*@__PURE__*/
  enumDesc(file_google_cloud_notebooks_v1_service, 0);

/**
 * API v1 service for Cloud AI Platform Notebooks.
 *
 * @generated from service google.cloud.notebooks.v1.NotebookService
 */
export const NotebookService: GenService<{
  /**
   * Lists instances in a given project and location.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ListInstances
   */
  listInstances: {
    methodKind: "unary";
    input: typeof ListInstancesRequestSchema;
    output: typeof ListInstancesResponseSchema;
  },
  /**
   * Gets details of a single Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.GetInstance
   */
  getInstance: {
    methodKind: "unary";
    input: typeof GetInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * Creates a new Instance in a given project and location.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.CreateInstance
   */
  createInstance: {
    methodKind: "unary";
    input: typeof CreateInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Registers an existing legacy notebook instance to the Notebooks API server.
   * Legacy instances are instances created with the legacy Compute Engine
   * calls. They are not manageable by the Notebooks API out of the box. This
   * call makes these instances manageable by the Notebooks API.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.RegisterInstance
   */
  registerInstance: {
    methodKind: "unary";
    input: typeof RegisterInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the guest accelerators of a single Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.SetInstanceAccelerator
   */
  setInstanceAccelerator: {
    methodKind: "unary";
    input: typeof SetInstanceAcceleratorRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the machine type of a single Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.SetInstanceMachineType
   */
  setInstanceMachineType: {
    methodKind: "unary";
    input: typeof SetInstanceMachineTypeRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Update Notebook Instance configurations.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.UpdateInstanceConfig
   */
  updateInstanceConfig: {
    methodKind: "unary";
    input: typeof UpdateInstanceConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the Shielded instance configuration of a single Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.UpdateShieldedInstanceConfig
   */
  updateShieldedInstanceConfig: {
    methodKind: "unary";
    input: typeof UpdateShieldedInstanceConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Replaces all the labels of an Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.SetInstanceLabels
   */
  setInstanceLabels: {
    methodKind: "unary";
    input: typeof SetInstanceLabelsRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Add/update metadata items for an instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.UpdateInstanceMetadataItems
   */
  updateInstanceMetadataItems: {
    methodKind: "unary";
    input: typeof UpdateInstanceMetadataItemsRequestSchema;
    output: typeof UpdateInstanceMetadataItemsResponseSchema;
  },
  /**
   * Deletes a single Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.DeleteInstance
   */
  deleteInstance: {
    methodKind: "unary";
    input: typeof DeleteInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Starts a notebook instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.StartInstance
   */
  startInstance: {
    methodKind: "unary";
    input: typeof StartInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Stops a notebook instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.StopInstance
   */
  stopInstance: {
    methodKind: "unary";
    input: typeof StopInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Resets a notebook instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ResetInstance
   */
  resetInstance: {
    methodKind: "unary";
    input: typeof ResetInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Allows notebook instances to
   * report their latest instance information to the Notebooks
   * API server. The server will merge the reported information to
   * the instance metadata store. Do not use this method directly.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ReportInstanceInfo
   */
  reportInstanceInfo: {
    methodKind: "unary";
    input: typeof ReportInstanceInfoRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Check if a notebook instance is upgradable.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.IsInstanceUpgradeable
   */
  isInstanceUpgradeable: {
    methodKind: "unary";
    input: typeof IsInstanceUpgradeableRequestSchema;
    output: typeof IsInstanceUpgradeableResponseSchema;
  },
  /**
   * Check if a notebook instance is healthy.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.GetInstanceHealth
   */
  getInstanceHealth: {
    methodKind: "unary";
    input: typeof GetInstanceHealthRequestSchema;
    output: typeof GetInstanceHealthResponseSchema;
  },
  /**
   * Upgrades a notebook instance to the latest version.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.UpgradeInstance
   */
  upgradeInstance: {
    methodKind: "unary";
    input: typeof UpgradeInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Rollbacks a notebook instance to the previous version.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.RollbackInstance
   */
  rollbackInstance: {
    methodKind: "unary";
    input: typeof RollbackInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a Diagnostic File and runs Diagnostic Tool given an Instance.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.DiagnoseInstance
   */
  diagnoseInstance: {
    methodKind: "unary";
    input: typeof DiagnoseInstanceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Allows notebook instances to
   * call this endpoint to upgrade themselves. Do not use this method directly.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.UpgradeInstanceInternal
   */
  upgradeInstanceInternal: {
    methodKind: "unary";
    input: typeof UpgradeInstanceInternalRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists environments in a project.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ListEnvironments
   */
  listEnvironments: {
    methodKind: "unary";
    input: typeof ListEnvironmentsRequestSchema;
    output: typeof ListEnvironmentsResponseSchema;
  },
  /**
   * Gets details of a single Environment.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.GetEnvironment
   */
  getEnvironment: {
    methodKind: "unary";
    input: typeof GetEnvironmentRequestSchema;
    output: typeof EnvironmentSchema;
  },
  /**
   * Creates a new Environment.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.CreateEnvironment
   */
  createEnvironment: {
    methodKind: "unary";
    input: typeof CreateEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single Environment.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.DeleteEnvironment
   */
  deleteEnvironment: {
    methodKind: "unary";
    input: typeof DeleteEnvironmentRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists schedules in a given project and location.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ListSchedules
   */
  listSchedules: {
    methodKind: "unary";
    input: typeof ListSchedulesRequestSchema;
    output: typeof ListSchedulesResponseSchema;
  },
  /**
   * Gets details of schedule
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.GetSchedule
   */
  getSchedule: {
    methodKind: "unary";
    input: typeof GetScheduleRequestSchema;
    output: typeof ScheduleSchema;
  },
  /**
   * Deletes schedule and all underlying jobs
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.DeleteSchedule
   */
  deleteSchedule: {
    methodKind: "unary";
    input: typeof DeleteScheduleRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a new Scheduled Notebook in a given project and location.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.CreateSchedule
   */
  createSchedule: {
    methodKind: "unary";
    input: typeof CreateScheduleRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Triggers execution of an existing schedule.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.TriggerSchedule
   */
  triggerSchedule: {
    methodKind: "unary";
    input: typeof TriggerScheduleRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists executions in a given project and location
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.ListExecutions
   */
  listExecutions: {
    methodKind: "unary";
    input: typeof ListExecutionsRequestSchema;
    output: typeof ListExecutionsResponseSchema;
  },
  /**
   * Gets details of executions
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.GetExecution
   */
  getExecution: {
    methodKind: "unary";
    input: typeof GetExecutionRequestSchema;
    output: typeof ExecutionSchema;
  },
  /**
   * Deletes execution
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.DeleteExecution
   */
  deleteExecution: {
    methodKind: "unary";
    input: typeof DeleteExecutionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a new Execution in a given project and location.
   *
   * @generated from rpc google.cloud.notebooks.v1.NotebookService.CreateExecution
   */
  createExecution: {
    methodKind: "unary";
    input: typeof CreateExecutionRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_notebooks_v1_service, 0);

