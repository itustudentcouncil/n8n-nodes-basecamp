// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/video/stitcher/v1/video_stitcher_service.proto (package google.cloud.video.stitcher.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { LiveAdTagDetail, LiveAdTagDetailSchema, VodAdTagDetail, VodAdTagDetailSchema } from "./ad_tag_details_pb";
import { file_google_cloud_video_stitcher_v1_ad_tag_details } from "./ad_tag_details_pb";
import type { CdnKey, CdnKeySchema } from "./cdn_keys_pb";
import { file_google_cloud_video_stitcher_v1_cdn_keys } from "./cdn_keys_pb";
import type { LiveConfig, LiveConfigSchema } from "./live_configs_pb";
import { file_google_cloud_video_stitcher_v1_live_configs } from "./live_configs_pb";
import type { LiveSession, LiveSessionSchema, VodSession, VodSessionSchema } from "./sessions_pb";
import { file_google_cloud_video_stitcher_v1_sessions } from "./sessions_pb";
import type { Slate, SlateSchema } from "./slates_pb";
import { file_google_cloud_video_stitcher_v1_slates } from "./slates_pb";
import type { VodStitchDetail, VodStitchDetailSchema } from "./stitch_details_pb";
import { file_google_cloud_video_stitcher_v1_stitch_details } from "./stitch_details_pb";
import type { VodConfig, VodConfigSchema } from "./vod_configs_pb";
import { file_google_cloud_video_stitcher_v1_vod_configs } from "./vod_configs_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/video/stitcher/v1/video_stitcher_service.proto.
 */
export const file_google_cloud_video_stitcher_v1_video_stitcher_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_video_stitcher_v1_ad_tag_details, file_google_cloud_video_stitcher_v1_cdn_keys, file_google_cloud_video_stitcher_v1_live_configs, file_google_cloud_video_stitcher_v1_sessions, file_google_cloud_video_stitcher_v1_slates, file_google_cloud_video_stitcher_v1_stitch_details, file_google_cloud_video_stitcher_v1_vod_configs, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Request message for VideoStitcherService.createCdnKey.
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateCdnKeyRequest
 */
export type CreateCdnKeyRequest = Message<"google.cloud.video.stitcher.v1.CreateCdnKeyRequest"> & {
  /**
   * Required. The project in which the CDN key should be created, in the form
   * of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The CDN key resource to create.
   *
   * @generated from field: google.cloud.video.stitcher.v1.CdnKey cdn_key = 2;
   */
  cdnKey?: CdnKey;

  /**
   * Required. The ID to use for the CDN key, which will become the final
   * component of the CDN key's resource name.
   *
   * This value should conform to RFC-1034, which restricts to
   * lower-case letters, numbers, and hyphen, with the first character a
   * letter, the last a letter or a number, and a 63 character maximum.
   *
   * @generated from field: string cdn_key_id = 3;
   */
  cdnKeyId: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateCdnKeyRequest.
 * Use `create(CreateCdnKeyRequestSchema)` to create a new message.
 */
export const CreateCdnKeyRequestSchema: GenMessage<CreateCdnKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 0);

/**
 * Request message for VideoStitcherService.listCdnKeys.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListCdnKeysRequest
 */
export type ListCdnKeysRequest = Message<"google.cloud.video.stitcher.v1.ListCdnKeysRequest"> & {
  /**
   * Required. The project that contains the list of CDN keys, in the form of
   * `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListCdnKeysRequest.
 * Use `create(ListCdnKeysRequestSchema)` to create a new message.
 */
export const ListCdnKeysRequestSchema: GenMessage<ListCdnKeysRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 1);

/**
 * Response message for VideoStitcher.ListCdnKeys.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListCdnKeysResponse
 */
export type ListCdnKeysResponse = Message<"google.cloud.video.stitcher.v1.ListCdnKeysResponse"> & {
  /**
   * List of CDN keys.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.CdnKey cdn_keys = 1;
   */
  cdnKeys: CdnKey[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListCdnKeysResponse.
 * Use `create(ListCdnKeysResponseSchema)` to create a new message.
 */
export const ListCdnKeysResponseSchema: GenMessage<ListCdnKeysResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 2);

/**
 * Request message for VideoStitcherService.getCdnKey.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetCdnKeyRequest
 */
export type GetCdnKeyRequest = Message<"google.cloud.video.stitcher.v1.GetCdnKeyRequest"> & {
  /**
   * Required. The name of the CDN key to be retrieved, in the form of
   * `projects/{project}/locations/{location}/cdnKeys/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetCdnKeyRequest.
 * Use `create(GetCdnKeyRequestSchema)` to create a new message.
 */
export const GetCdnKeyRequestSchema: GenMessage<GetCdnKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 3);

/**
 * Request message for VideoStitcherService.deleteCdnKey.
 *
 * @generated from message google.cloud.video.stitcher.v1.DeleteCdnKeyRequest
 */
export type DeleteCdnKeyRequest = Message<"google.cloud.video.stitcher.v1.DeleteCdnKeyRequest"> & {
  /**
   * Required. The name of the CDN key to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/cdnKeys/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.DeleteCdnKeyRequest.
 * Use `create(DeleteCdnKeyRequestSchema)` to create a new message.
 */
export const DeleteCdnKeyRequestSchema: GenMessage<DeleteCdnKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 4);

/**
 * Request message for VideoStitcherService.updateCdnKey.
 *
 * @generated from message google.cloud.video.stitcher.v1.UpdateCdnKeyRequest
 */
export type UpdateCdnKeyRequest = Message<"google.cloud.video.stitcher.v1.UpdateCdnKeyRequest"> & {
  /**
   * Required. The CDN key resource which replaces the resource on the server.
   *
   * @generated from field: google.cloud.video.stitcher.v1.CdnKey cdn_key = 1;
   */
  cdnKey?: CdnKey;

  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.UpdateCdnKeyRequest.
 * Use `create(UpdateCdnKeyRequestSchema)` to create a new message.
 */
export const UpdateCdnKeyRequestSchema: GenMessage<UpdateCdnKeyRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 5);

/**
 * Request message for VideoStitcherService.createVodSession
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateVodSessionRequest
 */
export type CreateVodSessionRequest = Message<"google.cloud.video.stitcher.v1.CreateVodSessionRequest"> & {
  /**
   * Required. The project and location in which the VOD session should be
   * created, in the form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Parameters for creating a session.
   *
   * @generated from field: google.cloud.video.stitcher.v1.VodSession vod_session = 2;
   */
  vodSession?: VodSession;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateVodSessionRequest.
 * Use `create(CreateVodSessionRequestSchema)` to create a new message.
 */
export const CreateVodSessionRequestSchema: GenMessage<CreateVodSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 6);

/**
 * Request message for VideoStitcherService.getVodSession
 *
 * @generated from message google.cloud.video.stitcher.v1.GetVodSessionRequest
 */
export type GetVodSessionRequest = Message<"google.cloud.video.stitcher.v1.GetVodSessionRequest"> & {
  /**
   * Required. The name of the VOD session to be retrieved, in the form of
   * `projects/{project_number}/locations/{location}/vodSessions/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetVodSessionRequest.
 * Use `create(GetVodSessionRequestSchema)` to create a new message.
 */
export const GetVodSessionRequestSchema: GenMessage<GetVodSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 7);

/**
 * Request message for VideoStitcherService.listVodStitchDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodStitchDetailsRequest
 */
export type ListVodStitchDetailsRequest = Message<"google.cloud.video.stitcher.v1.ListVodStitchDetailsRequest"> & {
  /**
   * Required. The VOD session where the stitch details belong to, in the form
   * of `projects/{project}/locations/{location}/vodSessions/{id}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodStitchDetailsRequest.
 * Use `create(ListVodStitchDetailsRequestSchema)` to create a new message.
 */
export const ListVodStitchDetailsRequestSchema: GenMessage<ListVodStitchDetailsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 8);

/**
 * Response message for VideoStitcherService.listVodStitchDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodStitchDetailsResponse
 */
export type ListVodStitchDetailsResponse = Message<"google.cloud.video.stitcher.v1.ListVodStitchDetailsResponse"> & {
  /**
   * A List of stitch Details.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.VodStitchDetail vod_stitch_details = 1;
   */
  vodStitchDetails: VodStitchDetail[];

  /**
   * The pagination token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodStitchDetailsResponse.
 * Use `create(ListVodStitchDetailsResponseSchema)` to create a new message.
 */
export const ListVodStitchDetailsResponseSchema: GenMessage<ListVodStitchDetailsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 9);

/**
 * Request message for VideoStitcherService.getVodStitchDetail.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetVodStitchDetailRequest
 */
export type GetVodStitchDetailRequest = Message<"google.cloud.video.stitcher.v1.GetVodStitchDetailRequest"> & {
  /**
   * Required. The name of the stitch detail in the specified VOD session, in
   * the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetVodStitchDetailRequest.
 * Use `create(GetVodStitchDetailRequestSchema)` to create a new message.
 */
export const GetVodStitchDetailRequestSchema: GenMessage<GetVodStitchDetailRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 10);

/**
 * Request message for VideoStitcherService.listVodAdTagDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodAdTagDetailsRequest
 */
export type ListVodAdTagDetailsRequest = Message<"google.cloud.video.stitcher.v1.ListVodAdTagDetailsRequest"> & {
  /**
   * Required. The VOD session which the ad tag details belong to, in the form
   * of `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodAdTagDetailsRequest.
 * Use `create(ListVodAdTagDetailsRequestSchema)` to create a new message.
 */
export const ListVodAdTagDetailsRequestSchema: GenMessage<ListVodAdTagDetailsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 11);

/**
 * Response message for VideoStitcherService.listVodAdTagDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodAdTagDetailsResponse
 */
export type ListVodAdTagDetailsResponse = Message<"google.cloud.video.stitcher.v1.ListVodAdTagDetailsResponse"> & {
  /**
   * A List of ad tag details.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.VodAdTagDetail vod_ad_tag_details = 1;
   */
  vodAdTagDetails: VodAdTagDetail[];

  /**
   * The pagination token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodAdTagDetailsResponse.
 * Use `create(ListVodAdTagDetailsResponseSchema)` to create a new message.
 */
export const ListVodAdTagDetailsResponseSchema: GenMessage<ListVodAdTagDetailsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 12);

/**
 * Request message for VideoStitcherService.getVodAdTagDetail
 *
 * @generated from message google.cloud.video.stitcher.v1.GetVodAdTagDetailRequest
 */
export type GetVodAdTagDetailRequest = Message<"google.cloud.video.stitcher.v1.GetVodAdTagDetailRequest"> & {
  /**
   * Required. The name of the ad tag detail for the specified VOD session, in
   * the form of
   * `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{vod_ad_tag_detail}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetVodAdTagDetailRequest.
 * Use `create(GetVodAdTagDetailRequestSchema)` to create a new message.
 */
export const GetVodAdTagDetailRequestSchema: GenMessage<GetVodAdTagDetailRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 13);

/**
 * Request message for VideoStitcherService.listLiveAdTagDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListLiveAdTagDetailsRequest
 */
export type ListLiveAdTagDetailsRequest = Message<"google.cloud.video.stitcher.v1.ListLiveAdTagDetailsRequest"> & {
  /**
   * Required. The resource parent in the form of
   * `projects/{project}/locations/{location}/liveSessions/{live_session}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The pagination token returned from a previous List request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListLiveAdTagDetailsRequest.
 * Use `create(ListLiveAdTagDetailsRequestSchema)` to create a new message.
 */
export const ListLiveAdTagDetailsRequestSchema: GenMessage<ListLiveAdTagDetailsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 14);

/**
 * Response message for VideoStitcherService.listLiveAdTagDetails.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListLiveAdTagDetailsResponse
 */
export type ListLiveAdTagDetailsResponse = Message<"google.cloud.video.stitcher.v1.ListLiveAdTagDetailsResponse"> & {
  /**
   * A list of live session ad tag details.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.LiveAdTagDetail live_ad_tag_details = 1;
   */
  liveAdTagDetails: LiveAdTagDetail[];

  /**
   * The pagination token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListLiveAdTagDetailsResponse.
 * Use `create(ListLiveAdTagDetailsResponseSchema)` to create a new message.
 */
export const ListLiveAdTagDetailsResponseSchema: GenMessage<ListLiveAdTagDetailsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 15);

/**
 * Request message for VideoStitcherService.getLiveAdTagDetail
 *
 * @generated from message google.cloud.video.stitcher.v1.GetLiveAdTagDetailRequest
 */
export type GetLiveAdTagDetailRequest = Message<"google.cloud.video.stitcher.v1.GetLiveAdTagDetailRequest"> & {
  /**
   * Required. The resource name in the form of
   * `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{live_ad_tag_detail}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetLiveAdTagDetailRequest.
 * Use `create(GetLiveAdTagDetailRequestSchema)` to create a new message.
 */
export const GetLiveAdTagDetailRequestSchema: GenMessage<GetLiveAdTagDetailRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 16);

/**
 * Request message for VideoStitcherService.createSlate.
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateSlateRequest
 */
export type CreateSlateRequest = Message<"google.cloud.video.stitcher.v1.CreateSlateRequest"> & {
  /**
   * Required. The project in which the slate should be created, in the form of
   * `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The unique identifier for the slate.
   * This value should conform to RFC-1034, which restricts to
   * lower-case letters, numbers, and hyphen, with the first character a
   * letter, the last a letter or a number, and a 63 character maximum.
   *
   * @generated from field: string slate_id = 2;
   */
  slateId: string;

  /**
   * Required. The slate to create.
   *
   * @generated from field: google.cloud.video.stitcher.v1.Slate slate = 3;
   */
  slate?: Slate;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateSlateRequest.
 * Use `create(CreateSlateRequestSchema)` to create a new message.
 */
export const CreateSlateRequestSchema: GenMessage<CreateSlateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 17);

/**
 * Request message for VideoStitcherService.getSlate.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetSlateRequest
 */
export type GetSlateRequest = Message<"google.cloud.video.stitcher.v1.GetSlateRequest"> & {
  /**
   * Required. The name of the slate to be retrieved, of the slate, in the form
   * of `projects/{project_number}/locations/{location}/slates/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetSlateRequest.
 * Use `create(GetSlateRequestSchema)` to create a new message.
 */
export const GetSlateRequestSchema: GenMessage<GetSlateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 18);

/**
 * Request message for VideoStitcherService.listSlates.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListSlatesRequest
 */
export type ListSlatesRequest = Message<"google.cloud.video.stitcher.v1.ListSlatesRequest"> & {
  /**
   * Required. The project to list slates, in the form of
   * `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListSlatesRequest.
 * Use `create(ListSlatesRequestSchema)` to create a new message.
 */
export const ListSlatesRequestSchema: GenMessage<ListSlatesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 19);

/**
 * Response message for VideoStitcherService.listSlates.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListSlatesResponse
 */
export type ListSlatesResponse = Message<"google.cloud.video.stitcher.v1.ListSlatesResponse"> & {
  /**
   * The list of slates
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.Slate slates = 1;
   */
  slates: Slate[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListSlatesResponse.
 * Use `create(ListSlatesResponseSchema)` to create a new message.
 */
export const ListSlatesResponseSchema: GenMessage<ListSlatesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 20);

/**
 * Request message for VideoStitcherService.updateSlate.
 *
 * @generated from message google.cloud.video.stitcher.v1.UpdateSlateRequest
 */
export type UpdateSlateRequest = Message<"google.cloud.video.stitcher.v1.UpdateSlateRequest"> & {
  /**
   * Required. The resource with updated fields.
   *
   * @generated from field: google.cloud.video.stitcher.v1.Slate slate = 1;
   */
  slate?: Slate;

  /**
   * Required. The update mask which specifies fields which should be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.UpdateSlateRequest.
 * Use `create(UpdateSlateRequestSchema)` to create a new message.
 */
export const UpdateSlateRequestSchema: GenMessage<UpdateSlateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 21);

/**
 * Request message for VideoStitcherService.deleteSlate.
 *
 * @generated from message google.cloud.video.stitcher.v1.DeleteSlateRequest
 */
export type DeleteSlateRequest = Message<"google.cloud.video.stitcher.v1.DeleteSlateRequest"> & {
  /**
   * Required. The name of the slate to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/slates/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.DeleteSlateRequest.
 * Use `create(DeleteSlateRequestSchema)` to create a new message.
 */
export const DeleteSlateRequestSchema: GenMessage<DeleteSlateRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 22);

/**
 * Request message for VideoStitcherService.createLiveSession.
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateLiveSessionRequest
 */
export type CreateLiveSessionRequest = Message<"google.cloud.video.stitcher.v1.CreateLiveSessionRequest"> & {
  /**
   * Required. The project and location in which the live session should be
   * created, in the form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Parameters for creating a live session.
   *
   * @generated from field: google.cloud.video.stitcher.v1.LiveSession live_session = 2;
   */
  liveSession?: LiveSession;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateLiveSessionRequest.
 * Use `create(CreateLiveSessionRequestSchema)` to create a new message.
 */
export const CreateLiveSessionRequestSchema: GenMessage<CreateLiveSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 23);

/**
 * Request message for VideoStitcherService.getSession.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetLiveSessionRequest
 */
export type GetLiveSessionRequest = Message<"google.cloud.video.stitcher.v1.GetLiveSessionRequest"> & {
  /**
   * Required. The name of the live session, in the form of
   * `projects/{project_number}/locations/{location}/liveSessions/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetLiveSessionRequest.
 * Use `create(GetLiveSessionRequestSchema)` to create a new message.
 */
export const GetLiveSessionRequestSchema: GenMessage<GetLiveSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 24);

/**
 * Request message for VideoStitcherService.createLiveConfig
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateLiveConfigRequest
 */
export type CreateLiveConfigRequest = Message<"google.cloud.video.stitcher.v1.CreateLiveConfigRequest"> & {
  /**
   * Required. The project in which the live config should be created, in
   * the form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The unique identifier ID to use for the live config.
   *
   * @generated from field: string live_config_id = 2;
   */
  liveConfigId: string;

  /**
   * Required. The live config resource to create.
   *
   * @generated from field: google.cloud.video.stitcher.v1.LiveConfig live_config = 3;
   */
  liveConfig?: LiveConfig;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateLiveConfigRequest.
 * Use `create(CreateLiveConfigRequestSchema)` to create a new message.
 */
export const CreateLiveConfigRequestSchema: GenMessage<CreateLiveConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 25);

/**
 * Request message for VideoStitcherService.listLiveConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListLiveConfigsRequest
 */
export type ListLiveConfigsRequest = Message<"google.cloud.video.stitcher.v1.ListLiveConfigsRequest"> & {
  /**
   * Required. The project that contains the list of live configs, in the
   * form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The filter to apply to list results (see
   * [Filtering](https://google.aip.dev/160)).
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specifies the ordering of results following
   * [Cloud API
   * syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListLiveConfigsRequest.
 * Use `create(ListLiveConfigsRequestSchema)` to create a new message.
 */
export const ListLiveConfigsRequestSchema: GenMessage<ListLiveConfigsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 26);

/**
 * Response message for VideoStitcher.ListLiveConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListLiveConfigsResponse
 */
export type ListLiveConfigsResponse = Message<"google.cloud.video.stitcher.v1.ListLiveConfigsResponse"> & {
  /**
   * List of live configs.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.LiveConfig live_configs = 1;
   */
  liveConfigs: LiveConfig[];

  /**
   * The pagination token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListLiveConfigsResponse.
 * Use `create(ListLiveConfigsResponseSchema)` to create a new message.
 */
export const ListLiveConfigsResponseSchema: GenMessage<ListLiveConfigsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 27);

/**
 * Request message for VideoStitcherService.getLiveConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetLiveConfigRequest
 */
export type GetLiveConfigRequest = Message<"google.cloud.video.stitcher.v1.GetLiveConfigRequest"> & {
  /**
   * Required. The name of the live config to be retrieved, in the form
   * of
   * `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetLiveConfigRequest.
 * Use `create(GetLiveConfigRequestSchema)` to create a new message.
 */
export const GetLiveConfigRequestSchema: GenMessage<GetLiveConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 28);

/**
 * Request message for VideoStitcherService.deleteLiveConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.DeleteLiveConfigRequest
 */
export type DeleteLiveConfigRequest = Message<"google.cloud.video.stitcher.v1.DeleteLiveConfigRequest"> & {
  /**
   * Required. The name of the live config to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.DeleteLiveConfigRequest.
 * Use `create(DeleteLiveConfigRequestSchema)` to create a new message.
 */
export const DeleteLiveConfigRequestSchema: GenMessage<DeleteLiveConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 29);

/**
 * Request message for VideoStitcherService.updateLiveConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.UpdateLiveConfigRequest
 */
export type UpdateLiveConfigRequest = Message<"google.cloud.video.stitcher.v1.UpdateLiveConfigRequest"> & {
  /**
   * Required. The LiveConfig resource which replaces the resource on the
   * server.
   *
   * @generated from field: google.cloud.video.stitcher.v1.LiveConfig live_config = 1;
   */
  liveConfig?: LiveConfig;

  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.UpdateLiveConfigRequest.
 * Use `create(UpdateLiveConfigRequestSchema)` to create a new message.
 */
export const UpdateLiveConfigRequestSchema: GenMessage<UpdateLiveConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 30);

/**
 * Request message for VideoStitcherService.createVodConfig
 *
 * @generated from message google.cloud.video.stitcher.v1.CreateVodConfigRequest
 */
export type CreateVodConfigRequest = Message<"google.cloud.video.stitcher.v1.CreateVodConfigRequest"> & {
  /**
   * Required. The project in which the VOD config should be created, in
   * the form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The unique identifier ID to use for the VOD config.
   *
   * @generated from field: string vod_config_id = 2;
   */
  vodConfigId: string;

  /**
   * Required. The VOD config resource to create.
   *
   * @generated from field: google.cloud.video.stitcher.v1.VodConfig vod_config = 3;
   */
  vodConfig?: VodConfig;

  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.CreateVodConfigRequest.
 * Use `create(CreateVodConfigRequestSchema)` to create a new message.
 */
export const CreateVodConfigRequestSchema: GenMessage<CreateVodConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 31);

/**
 * Request message for VideoStitcherService.listVodConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodConfigsRequest
 */
export type ListVodConfigsRequest = Message<"google.cloud.video.stitcher.v1.ListVodConfigsRequest"> & {
  /**
   * Required. The project that contains the list of VOD configs, in the
   * form of `projects/{project_number}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of items to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous List request,
   * if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The filter to apply to list results (see
   * [Filtering](https://google.aip.dev/160)).
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Specifies the ordering of results following
   * [Cloud API
   * syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodConfigsRequest.
 * Use `create(ListVodConfigsRequestSchema)` to create a new message.
 */
export const ListVodConfigsRequestSchema: GenMessage<ListVodConfigsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 32);

/**
 * Response message for VideoStitcher.ListVodConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.ListVodConfigsResponse
 */
export type ListVodConfigsResponse = Message<"google.cloud.video.stitcher.v1.ListVodConfigsResponse"> & {
  /**
   * List of VOD configs.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.VodConfig vod_configs = 1;
   */
  vodConfigs: VodConfig[];

  /**
   * The pagination token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ListVodConfigsResponse.
 * Use `create(ListVodConfigsResponseSchema)` to create a new message.
 */
export const ListVodConfigsResponseSchema: GenMessage<ListVodConfigsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 33);

/**
 * Request message for VideoStitcherService.getVodConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.GetVodConfigRequest
 */
export type GetVodConfigRequest = Message<"google.cloud.video.stitcher.v1.GetVodConfigRequest"> & {
  /**
   * Required. The name of the VOD config to be retrieved, in the form
   * of `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.GetVodConfigRequest.
 * Use `create(GetVodConfigRequestSchema)` to create a new message.
 */
export const GetVodConfigRequestSchema: GenMessage<GetVodConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 34);

/**
 * Request message for VideoStitcherService.deleteVodConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.DeleteVodConfigRequest
 */
export type DeleteVodConfigRequest = Message<"google.cloud.video.stitcher.v1.DeleteVodConfigRequest"> & {
  /**
   * Required. The name of the VOD config to be deleted, in the form of
   * `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.DeleteVodConfigRequest.
 * Use `create(DeleteVodConfigRequestSchema)` to create a new message.
 */
export const DeleteVodConfigRequestSchema: GenMessage<DeleteVodConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 35);

/**
 * Request message for VideoStitcherService.updateVodConfig.
 *
 * @generated from message google.cloud.video.stitcher.v1.UpdateVodConfigRequest
 */
export type UpdateVodConfigRequest = Message<"google.cloud.video.stitcher.v1.UpdateVodConfigRequest"> & {
  /**
   * Required. The VOD config resource which replaces the resource on the
   * server.
   *
   * @generated from field: google.cloud.video.stitcher.v1.VodConfig vod_config = 1;
   */
  vodConfig?: VodConfig;

  /**
   * Required. The update mask applies to the resource.
   * For the `FieldMask` definition, see
   * https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.UpdateVodConfigRequest.
 * Use `create(UpdateVodConfigRequestSchema)` to create a new message.
 */
export const UpdateVodConfigRequestSchema: GenMessage<UpdateVodConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 36);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.video.stitcher.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.video.stitcher.v1.OperationMetadata"> & {
  /**
   * The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 37);

/**
 * Video-On-Demand content stitching API allows you to insert ads
 * into (VoD) video on demand files. You will be able to render custom
 * scrubber bars with highlighted ads, enforce ad policies, allow
 * seamless playback and tracking on native players and monetize
 * content with any standard VMAP compliant ad server.
 *
 * @generated from service google.cloud.video.stitcher.v1.VideoStitcherService
 */
export const VideoStitcherService: GenService<{
  /**
   * Creates a new CDN key.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateCdnKey
   */
  createCdnKey: {
    methodKind: "unary";
    input: typeof CreateCdnKeyRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all CDN keys in the specified project and location.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListCdnKeys
   */
  listCdnKeys: {
    methodKind: "unary";
    input: typeof ListCdnKeysRequestSchema;
    output: typeof ListCdnKeysResponseSchema;
  },
  /**
   * Returns the specified CDN key.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetCdnKey
   */
  getCdnKey: {
    methodKind: "unary";
    input: typeof GetCdnKeyRequestSchema;
    output: typeof CdnKeySchema;
  },
  /**
   * Deletes the specified CDN key.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.DeleteCdnKey
   */
  deleteCdnKey: {
    methodKind: "unary";
    input: typeof DeleteCdnKeyRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the specified CDN key. Only update fields specified
   * in the call method body.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.UpdateCdnKey
   */
  updateCdnKey: {
    methodKind: "unary";
    input: typeof UpdateCdnKeyRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a client side playback VOD session and returns the full
   * tracking and playback metadata of the session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateVodSession
   */
  createVodSession: {
    methodKind: "unary";
    input: typeof CreateVodSessionRequestSchema;
    output: typeof VodSessionSchema;
  },
  /**
   * Returns the full tracking, playback metadata, and relevant ad-ops
   * logs for the specified VOD session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetVodSession
   */
  getVodSession: {
    methodKind: "unary";
    input: typeof GetVodSessionRequestSchema;
    output: typeof VodSessionSchema;
  },
  /**
   * Returns a list of detailed stitching information of the specified VOD
   * session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListVodStitchDetails
   */
  listVodStitchDetails: {
    methodKind: "unary";
    input: typeof ListVodStitchDetailsRequestSchema;
    output: typeof ListVodStitchDetailsResponseSchema;
  },
  /**
   * Returns the specified stitching information for the specified VOD session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetVodStitchDetail
   */
  getVodStitchDetail: {
    methodKind: "unary";
    input: typeof GetVodStitchDetailRequestSchema;
    output: typeof VodStitchDetailSchema;
  },
  /**
   * Return the list of ad tag details for the specified VOD session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListVodAdTagDetails
   */
  listVodAdTagDetails: {
    methodKind: "unary";
    input: typeof ListVodAdTagDetailsRequestSchema;
    output: typeof ListVodAdTagDetailsResponseSchema;
  },
  /**
   * Returns the specified ad tag detail for the specified VOD session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetVodAdTagDetail
   */
  getVodAdTagDetail: {
    methodKind: "unary";
    input: typeof GetVodAdTagDetailRequestSchema;
    output: typeof VodAdTagDetailSchema;
  },
  /**
   * Return the list of ad tag details for the specified live session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListLiveAdTagDetails
   */
  listLiveAdTagDetails: {
    methodKind: "unary";
    input: typeof ListLiveAdTagDetailsRequestSchema;
    output: typeof ListLiveAdTagDetailsResponseSchema;
  },
  /**
   * Returns the specified ad tag detail for the specified live session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetLiveAdTagDetail
   */
  getLiveAdTagDetail: {
    methodKind: "unary";
    input: typeof GetLiveAdTagDetailRequestSchema;
    output: typeof LiveAdTagDetailSchema;
  },
  /**
   * Creates a slate.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateSlate
   */
  createSlate: {
    methodKind: "unary";
    input: typeof CreateSlateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all slates in the specified project and location.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListSlates
   */
  listSlates: {
    methodKind: "unary";
    input: typeof ListSlatesRequestSchema;
    output: typeof ListSlatesResponseSchema;
  },
  /**
   * Returns the specified slate.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetSlate
   */
  getSlate: {
    methodKind: "unary";
    input: typeof GetSlateRequestSchema;
    output: typeof SlateSchema;
  },
  /**
   * Updates the specified slate.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.UpdateSlate
   */
  updateSlate: {
    methodKind: "unary";
    input: typeof UpdateSlateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes the specified slate.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.DeleteSlate
   */
  deleteSlate: {
    methodKind: "unary";
    input: typeof DeleteSlateRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a new live session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateLiveSession
   */
  createLiveSession: {
    methodKind: "unary";
    input: typeof CreateLiveSessionRequestSchema;
    output: typeof LiveSessionSchema;
  },
  /**
   * Returns the details for the specified live session.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetLiveSession
   */
  getLiveSession: {
    methodKind: "unary";
    input: typeof GetLiveSessionRequestSchema;
    output: typeof LiveSessionSchema;
  },
  /**
   * Registers the live config with the provided unique ID in
   * the specified region.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateLiveConfig
   */
  createLiveConfig: {
    methodKind: "unary";
    input: typeof CreateLiveConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all live configs managed by the Video Stitcher that
   * belong to the specified project and region.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListLiveConfigs
   */
  listLiveConfigs: {
    methodKind: "unary";
    input: typeof ListLiveConfigsRequestSchema;
    output: typeof ListLiveConfigsResponseSchema;
  },
  /**
   * Returns the specified live config managed by the Video
   * Stitcher service.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetLiveConfig
   */
  getLiveConfig: {
    methodKind: "unary";
    input: typeof GetLiveConfigRequestSchema;
    output: typeof LiveConfigSchema;
  },
  /**
   * Deletes the specified live config.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.DeleteLiveConfig
   */
  deleteLiveConfig: {
    methodKind: "unary";
    input: typeof DeleteLiveConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the specified LiveConfig. Only update fields specified
   * in the call method body.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.UpdateLiveConfig
   */
  updateLiveConfig: {
    methodKind: "unary";
    input: typeof UpdateLiveConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Registers the VOD config with the provided unique ID in
   * the specified region.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.CreateVodConfig
   */
  createVodConfig: {
    methodKind: "unary";
    input: typeof CreateVodConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all VOD configs managed by the Video Stitcher API that
   * belong to the specified project and region.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.ListVodConfigs
   */
  listVodConfigs: {
    methodKind: "unary";
    input: typeof ListVodConfigsRequestSchema;
    output: typeof ListVodConfigsResponseSchema;
  },
  /**
   * Returns the specified VOD config managed by the Video
   * Stitcher API service.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.GetVodConfig
   */
  getVodConfig: {
    methodKind: "unary";
    input: typeof GetVodConfigRequestSchema;
    output: typeof VodConfigSchema;
  },
  /**
   * Deletes the specified VOD config.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.DeleteVodConfig
   */
  deleteVodConfig: {
    methodKind: "unary";
    input: typeof DeleteVodConfigRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the specified VOD config. Only update fields specified
   * in the call method body.
   *
   * @generated from rpc google.cloud.video.stitcher.v1.VideoStitcherService.UpdateVodConfig
   */
  updateVodConfig: {
    methodKind: "unary";
    input: typeof UpdateVodConfigRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_video_stitcher_v1_video_stitcher_service, 0);

