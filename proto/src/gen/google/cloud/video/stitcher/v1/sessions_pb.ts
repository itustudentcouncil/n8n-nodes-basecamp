// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/video/stitcher/v1/sessions.proto (package google.cloud.video.stitcher.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { CompanionAds } from "./companions_pb";
import { file_google_cloud_video_stitcher_v1_companions } from "./companions_pb";
import type { Event, ProgressEvent } from "./events_pb";
import { file_google_cloud_video_stitcher_v1_events } from "./events_pb";
import type { AdTracking } from "./live_configs_pb";
import { file_google_cloud_video_stitcher_v1_live_configs } from "./live_configs_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/video/stitcher/v1/sessions.proto.
 */
export const file_google_cloud_video_stitcher_v1_sessions: GenFile = /*@__PURE__*/
  fileDesc("Ci1nb29nbGUvY2xvdWQvdmlkZW8vc3RpdGNoZXIvdjEvc2Vzc2lvbnMucHJvdG8SHmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MSKiBgoKVm9kU2Vzc2lvbhIRCgRuYW1lGAEgASgJQgPgQQMSSQoNaW50ZXJzdGl0aWFscxgCIAEoCzItLmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5JbnRlcnN0aXRpYWxzQgPgQQMSFQoIcGxheV91cmkYBCABKAlCA+BBAxISCgpzb3VyY2VfdXJpGAUgASgJEhIKCmFkX3RhZ191cmkYBiABKAkSVwoQYWRfdGFnX21hY3JvX21hcBgHIAMoCzI9Lmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5Wb2RTZXNzaW9uLkFkVGFnTWFjcm9NYXBFbnRyeRJJChBtYW5pZmVzdF9vcHRpb25zGAkgASgLMi8uZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLk1hbmlmZXN0T3B0aW9ucxIVCghhc3NldF9pZBgKIAEoCUID4EEDEkQKC2FkX3RyYWNraW5nGAsgASgOMiouZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLkFkVHJhY2tpbmdCA+BBAhJMCgxnYW1fc2V0dGluZ3MYDSABKAsyNi5nb29nbGUuY2xvdWQudmlkZW8uc3RpdGNoZXIudjEuVm9kU2Vzc2lvbi5HYW1TZXR0aW5ncxI/Cgp2b2RfY29uZmlnGA4gASgJQiv6QSgKJnZpZGVvc3RpdGNoZXIuZ29vZ2xlYXBpcy5jb20vVm9kQ29uZmlnGkAKC0dhbVNldHRpbmdzEhkKDG5ldHdvcmtfY29kZRgBIAEoCUID4EECEhYKCXN0cmVhbV9pZBgCIAEoCUID4EECGjQKEkFkVGFnTWFjcm9NYXBFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBOm/qQWwKJ3ZpZGVvc3RpdGNoZXIuZ29vZ2xlYXBpcy5jb20vVm9kU2Vzc2lvbhJBcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3ZvZFNlc3Npb25zL3t2b2Rfc2Vzc2lvbn0ioQEKDUludGVyc3RpdGlhbHMSRAoJYWRfYnJlYWtzGAEgAygLMjEuZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLlZvZFNlc3Npb25BZEJyZWFrEkoKD3Nlc3Npb25fY29udGVudBgCIAEoCzIxLmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5Wb2RTZXNzaW9uQ29udGVudCLAAQoMVm9kU2Vzc2lvbkFkEisKCGR1cmF0aW9uGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkMKDWNvbXBhbmlvbl9hZHMYAiABKAsyLC5nb29nbGUuY2xvdWQudmlkZW8uc3RpdGNoZXIudjEuQ29tcGFuaW9uQWRzEj4KD2FjdGl2aXR5X2V2ZW50cxgDIAMoCzIlLmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5FdmVudCJAChFWb2RTZXNzaW9uQ29udGVudBIrCghkdXJhdGlvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbiKAAgoRVm9kU2Vzc2lvbkFkQnJlYWsSRgoPcHJvZ3Jlc3NfZXZlbnRzGAEgAygLMi0uZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLlByb2dyZXNzRXZlbnQSOQoDYWRzGAIgAygLMiwuZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLlZvZFNlc3Npb25BZBIyCg9lbmRfdGltZV9vZmZzZXQYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SNAoRc3RhcnRfdGltZV9vZmZzZXQYBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24iqQYKC0xpdmVTZXNzaW9uEhEKBG5hbWUYASABKAlCA+BBAxIVCghwbGF5X3VyaRgCIAEoCUID4EEDElMKDWFkX3RhZ19tYWNyb3MYBiADKAsyPC5nb29nbGUuY2xvdWQudmlkZW8uc3RpdGNoZXIudjEuTGl2ZVNlc3Npb24uQWRUYWdNYWNyb3NFbnRyeRJJChBtYW5pZmVzdF9vcHRpb25zGAogASgLMi8uZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLk1hbmlmZXN0T3B0aW9ucxJNCgxnYW1fc2V0dGluZ3MYDyABKAsyNy5nb29nbGUuY2xvdWQudmlkZW8uc3RpdGNoZXIudjEuTGl2ZVNlc3Npb24uR2FtU2V0dGluZ3MSRAoLbGl2ZV9jb25maWcYECABKAlCL+BBAvpBKQondmlkZW9zdGl0Y2hlci5nb29nbGVhcGlzLmNvbS9MaXZlQ29uZmlnEj8KC2FkX3RyYWNraW5nGBEgASgOMiouZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLkFkVHJhY2tpbmca0QEKC0dhbVNldHRpbmdzEhYKCXN0cmVhbV9pZBgBIAEoCUID4EECEm4KFHRhcmdldGluZ19wYXJhbWV0ZXJzGAQgAygLMlAuZ29vZ2xlLmNsb3VkLnZpZGVvLnN0aXRjaGVyLnYxLkxpdmVTZXNzaW9uLkdhbVNldHRpbmdzLlRhcmdldGluZ1BhcmFtZXRlcnNFbnRyeRo6ChhUYXJnZXRpbmdQYXJhbWV0ZXJzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARoyChBBZFRhZ01hY3Jvc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAE6cupBbwoodmlkZW9zdGl0Y2hlci5nb29nbGVhcGlzLmNvbS9MaXZlU2Vzc2lvbhJDcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2xpdmVTZXNzaW9ucy97bGl2ZV9zZXNzaW9ufSL+AQoPTWFuaWZlc3RPcHRpb25zEksKEmluY2x1ZGVfcmVuZGl0aW9ucxgBIAMoCzIvLmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5SZW5kaXRpb25GaWx0ZXISUgoNYml0cmF0ZV9vcmRlchgCIAEoDjI7Lmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MS5NYW5pZmVzdE9wdGlvbnMuT3JkZXJQb2xpY3kiSgoLT3JkZXJQb2xpY3kSHAoYT1JERVJfUE9MSUNZX1VOU1BFQ0lGSUVEEAASDQoJQVNDRU5ESU5HEAESDgoKREVTQ0VORElORxACIjYKD1JlbmRpdGlvbkZpbHRlchITCgtiaXRyYXRlX2JwcxgBIAEoBRIOCgZjb2RlY3MYAiABKAlCdQoiY29tLmdvb2dsZS5jbG91ZC52aWRlby5zdGl0Y2hlci52MUINU2Vzc2lvbnNQcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL3ZpZGVvL3N0aXRjaGVyL2FwaXYxL3N0aXRjaGVycGI7c3RpdGNoZXJwYmIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_video_stitcher_v1_companions, file_google_cloud_video_stitcher_v1_events, file_google_cloud_video_stitcher_v1_live_configs, file_google_protobuf_duration]);

/**
 * Metadata for a VOD session. The session expires 4 hours after its creation.
 *
 * @generated from message google.cloud.video.stitcher.v1.VodSession
 */
export type VodSession = Message<"google.cloud.video.stitcher.v1.VodSession"> & {
  /**
   * Output only. The name of the VOD session, in the form of
   * `projects/{project_number}/locations/{location}/vodSessions/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Metadata of what was stitched into the content.
   *
   * @generated from field: google.cloud.video.stitcher.v1.Interstitials interstitials = 2;
   */
  interstitials?: Interstitials;

  /**
   * Output only. The playback URI of the stitched content.
   *
   * @generated from field: string play_uri = 4;
   */
  playUri: string;

  /**
   * URI of the media to stitch. For most use cases, you should create a
   * [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
   * rather than setting this field directly.
   *
   * @generated from field: string source_uri = 5;
   */
  sourceUri: string;

  /**
   * Ad tag URI. For most use cases, you should create a
   * [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
   * rather than setting this field directly.
   *
   * @generated from field: string ad_tag_uri = 6;
   */
  adTagUri: string;

  /**
   * Key value pairs for ad tag macro replacement, only available for VOD
   * sessions that do not implement Google Ad manager ad insertion. If the
   * specified ad tag URI has macros, this field provides the mapping to the
   * value that will replace the macro in the ad tag URI.
   *
   * Macros are designated by square brackets, for example:
   *
   *   Ad tag URI: `"https://doubleclick.google.com/ad/1?geo_id=[geoId]"`
   *
   *   Ad tag macro map: `{"geoId": "123"}`
   *
   *   Fully qualified ad tag:
   *   `"https://doubleclick.google.com/ad/1?geo_id=123"`
   *
   * @generated from field: map<string, string> ad_tag_macro_map = 7;
   */
  adTagMacroMap: { [key: string]: string };

  /**
   * Additional options that affect the output of the manifest.
   *
   * @generated from field: google.cloud.video.stitcher.v1.ManifestOptions manifest_options = 9;
   */
  manifestOptions?: ManifestOptions;

  /**
   * Output only. The generated ID of the VodSession's source media.
   *
   * @generated from field: string asset_id = 10;
   */
  assetId: string;

  /**
   * Required. Determines how the ad should be tracked.
   *
   * @generated from field: google.cloud.video.stitcher.v1.AdTracking ad_tracking = 11;
   */
  adTracking: AdTracking;

  /**
   * This field should be set with appropriate values if GAM is being used for
   * ads.
   *
   * @generated from field: google.cloud.video.stitcher.v1.VodSession.GamSettings gam_settings = 13;
   */
  gamSettings?: VodSession_GamSettings;

  /**
   * The resource name of the VOD config for this session, in the form of
   * `projects/{project}/locations/{location}/vodConfigs/{id}`.
   *
   * @generated from field: string vod_config = 14;
   */
  vodConfig: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.VodSession.
 * Use `create(VodSessionSchema)` to create a new message.
 */
export const VodSessionSchema: GenMessage<VodSession> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 0);

/**
 * Defines fields related to Google Ad Manager (GAM). This should be set if
 * GAM is being used for ads.
 *
 * @generated from message google.cloud.video.stitcher.v1.VodSession.GamSettings
 */
export type VodSession_GamSettings = Message<"google.cloud.video.stitcher.v1.VodSession.GamSettings"> & {
  /**
   * Required. Ad Manager network code.
   *
   * @generated from field: string network_code = 1;
   */
  networkCode: string;

  /**
   * Required. The stream ID generated by Ad Manager.
   *
   * @generated from field: string stream_id = 2;
   */
  streamId: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.VodSession.GamSettings.
 * Use `create(VodSession_GamSettingsSchema)` to create a new message.
 */
export const VodSession_GamSettingsSchema: GenMessage<VodSession_GamSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 0, 0);

/**
 * Describes what was stitched into a VOD session's manifest.
 *
 * @generated from message google.cloud.video.stitcher.v1.Interstitials
 */
export type Interstitials = Message<"google.cloud.video.stitcher.v1.Interstitials"> & {
  /**
   * List of ad breaks ordered by time.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.VodSessionAdBreak ad_breaks = 1;
   */
  adBreaks: VodSessionAdBreak[];

  /**
   * Information related to the content of the VOD session.
   *
   * @generated from field: google.cloud.video.stitcher.v1.VodSessionContent session_content = 2;
   */
  sessionContent?: VodSessionContent;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.Interstitials.
 * Use `create(InterstitialsSchema)` to create a new message.
 */
export const InterstitialsSchema: GenMessage<Interstitials> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 1);

/**
 * Metadata for an inserted ad in a VOD session.
 *
 * @generated from message google.cloud.video.stitcher.v1.VodSessionAd
 */
export type VodSessionAd = Message<"google.cloud.video.stitcher.v1.VodSessionAd"> & {
  /**
   * Duration in seconds of the ad.
   *
   * @generated from field: google.protobuf.Duration duration = 1;
   */
  duration?: Duration;

  /**
   * Metadata of companion ads associated with the ad.
   *
   * @generated from field: google.cloud.video.stitcher.v1.CompanionAds companion_ads = 2;
   */
  companionAds?: CompanionAds;

  /**
   * The list of progress tracking events for the ad break. These can be of
   * the following IAB types: `MUTE`, `UNMUTE`, `PAUSE`, `CLICK`,
   * `CLICK_THROUGH`, `REWIND`, `RESUME`, `ERROR`, `FULLSCREEN`,
   * `EXIT_FULLSCREEN`, `EXPAND`, `COLLAPSE`, `ACCEPT_INVITATION_LINEAR`,
   * `CLOSE_LINEAR`, `SKIP`.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.Event activity_events = 3;
   */
  activityEvents: Event[];
};

/**
 * Describes the message google.cloud.video.stitcher.v1.VodSessionAd.
 * Use `create(VodSessionAdSchema)` to create a new message.
 */
export const VodSessionAdSchema: GenMessage<VodSessionAd> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 2);

/**
 * Metadata for the entire stitched content in a VOD session.
 *
 * @generated from message google.cloud.video.stitcher.v1.VodSessionContent
 */
export type VodSessionContent = Message<"google.cloud.video.stitcher.v1.VodSessionContent"> & {
  /**
   * The total duration in seconds of the content including the ads stitched
   * in.
   *
   * @generated from field: google.protobuf.Duration duration = 1;
   */
  duration?: Duration;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.VodSessionContent.
 * Use `create(VodSessionContentSchema)` to create a new message.
 */
export const VodSessionContentSchema: GenMessage<VodSessionContent> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 3);

/**
 * Metadata for an inserted ad break.
 *
 * @generated from message google.cloud.video.stitcher.v1.VodSessionAdBreak
 */
export type VodSessionAdBreak = Message<"google.cloud.video.stitcher.v1.VodSessionAdBreak"> & {
  /**
   * List of events that are expected to be triggered, ordered by time.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.ProgressEvent progress_events = 1;
   */
  progressEvents: ProgressEvent[];

  /**
   * Ordered list of ads stitched into the ad break.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.VodSessionAd ads = 2;
   */
  ads: VodSessionAd[];

  /**
   * Ad break end time in seconds relative to the start of the VOD asset.
   *
   * @generated from field: google.protobuf.Duration end_time_offset = 3;
   */
  endTimeOffset?: Duration;

  /**
   * Ad break start time in seconds relative to the start of the VOD asset.
   *
   * @generated from field: google.protobuf.Duration start_time_offset = 4;
   */
  startTimeOffset?: Duration;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.VodSessionAdBreak.
 * Use `create(VodSessionAdBreakSchema)` to create a new message.
 */
export const VodSessionAdBreakSchema: GenMessage<VodSessionAdBreak> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 4);

/**
 * Metadata for a live session. The session expires 5 minutes after the client
 * stops fetching the session's playlists.
 *
 * @generated from message google.cloud.video.stitcher.v1.LiveSession
 */
export type LiveSession = Message<"google.cloud.video.stitcher.v1.LiveSession"> & {
  /**
   * Output only. The name of the live session, in the form of
   * `projects/{project}/locations/{location}/liveSessions/{id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The URI to play the live session's ad-stitched stream.
   *
   * @generated from field: string play_uri = 2;
   */
  playUri: string;

  /**
   * Key value pairs for ad tag macro replacement, only available for live
   * sessions that do not implement Google Ad manager ad insertion. If the
   * specified ad tag URI has macros, this field provides the mapping to the
   * value that will replace the macro in the ad tag URI.
   *
   * Macros are designated by square brackets, for example:
   *
   *   Ad tag URI: "https://doubleclick.google.com/ad/1?geo_id=[geoId]"
   *
   *   Ad tag macros: `{"geoId": "123"}`
   *
   *   Fully qualified ad tag:
   *   `"https://doubleclick.google.com/ad/1?geo_id=123"`
   *
   * @generated from field: map<string, string> ad_tag_macros = 6;
   */
  adTagMacros: { [key: string]: string };

  /**
   * Additional options that affect the output of the manifest.
   *
   * @generated from field: google.cloud.video.stitcher.v1.ManifestOptions manifest_options = 10;
   */
  manifestOptions?: ManifestOptions;

  /**
   * This field should be set with appropriate values if GAM is being used for
   * ads.
   *
   * @generated from field: google.cloud.video.stitcher.v1.LiveSession.GamSettings gam_settings = 15;
   */
  gamSettings?: LiveSession_GamSettings;

  /**
   * Required. The resource name of the live config for this session, in the
   * form of `projects/{project}/locations/{location}/liveConfigs/{id}`.
   *
   * @generated from field: string live_config = 16;
   */
  liveConfig: string;

  /**
   * Determines how the ad should be tracked. This overrides the value set in
   * the live config for this session.
   *
   * @generated from field: google.cloud.video.stitcher.v1.AdTracking ad_tracking = 17;
   */
  adTracking: AdTracking;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.LiveSession.
 * Use `create(LiveSessionSchema)` to create a new message.
 */
export const LiveSessionSchema: GenMessage<LiveSession> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 5);

/**
 * Defines fields related to Google Ad Manager (GAM).
 *
 * @generated from message google.cloud.video.stitcher.v1.LiveSession.GamSettings
 */
export type LiveSession_GamSettings = Message<"google.cloud.video.stitcher.v1.LiveSession.GamSettings"> & {
  /**
   * Required. The stream ID generated by Ad Manager. This must be set if GAM
   * is being used for ads and the session uses client-side ad tracking.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * [Targeting
   * parameters](https://support.google.com/admanager/answer/7320899) to send
   * to Ad Manager to generate a stream ID. This should only be set if the
   * session uses server-side ad tracking.
   *
   * @generated from field: map<string, string> targeting_parameters = 4;
   */
  targetingParameters: { [key: string]: string };
};

/**
 * Describes the message google.cloud.video.stitcher.v1.LiveSession.GamSettings.
 * Use `create(LiveSession_GamSettingsSchema)` to create a new message.
 */
export const LiveSession_GamSettingsSchema: GenMessage<LiveSession_GamSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 5, 0);

/**
 * Options for manifest generation.
 *
 * @generated from message google.cloud.video.stitcher.v1.ManifestOptions
 */
export type ManifestOptions = Message<"google.cloud.video.stitcher.v1.ManifestOptions"> & {
  /**
   * If specified, the output manifest will only return renditions matching the
   * specified filters.
   *
   * @generated from field: repeated google.cloud.video.stitcher.v1.RenditionFilter include_renditions = 1;
   */
  includeRenditions: RenditionFilter[];

  /**
   * If specified, the output manifest will orders the video and muxed
   * renditions by bitrate according to the ordering policy.
   *
   * @generated from field: google.cloud.video.stitcher.v1.ManifestOptions.OrderPolicy bitrate_order = 2;
   */
  bitrateOrder: ManifestOptions_OrderPolicy;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.ManifestOptions.
 * Use `create(ManifestOptionsSchema)` to create a new message.
 */
export const ManifestOptionsSchema: GenMessage<ManifestOptions> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 6);

/**
 * Defines the ordering policy during manifest generation.
 *
 * @generated from enum google.cloud.video.stitcher.v1.ManifestOptions.OrderPolicy
 */
export enum ManifestOptions_OrderPolicy {
  /**
   * Ordering policy is not specified.
   *
   * @generated from enum value: ORDER_POLICY_UNSPECIFIED = 0;
   */
  ORDER_POLICY_UNSPECIFIED = 0,

  /**
   * Order by ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Order by descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum google.cloud.video.stitcher.v1.ManifestOptions.OrderPolicy.
 */
export const ManifestOptions_OrderPolicySchema: GenEnum<ManifestOptions_OrderPolicy> = /*@__PURE__*/
  enumDesc(file_google_cloud_video_stitcher_v1_sessions, 6, 0);

/**
 * Filters for a video or muxed redition.
 *
 * @generated from message google.cloud.video.stitcher.v1.RenditionFilter
 */
export type RenditionFilter = Message<"google.cloud.video.stitcher.v1.RenditionFilter"> & {
  /**
   * Bitrate in bits per second for the rendition. If set, only renditions with
   * the exact bitrate will match.
   *
   * @generated from field: int32 bitrate_bps = 1;
   */
  bitrateBps: number;

  /**
   * Codecs for the rendition. If set, only renditions with the exact value
   * will match.
   *
   * @generated from field: string codecs = 2;
   */
  codecs: string;
};

/**
 * Describes the message google.cloud.video.stitcher.v1.RenditionFilter.
 * Use `create(RenditionFilterSchema)` to create a new message.
 */
export const RenditionFilterSchema: GenMessage<RenditionFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_stitcher_v1_sessions, 7);

