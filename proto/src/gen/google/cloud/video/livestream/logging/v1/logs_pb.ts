// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/video/livestream/logging/v1/logs.proto (package google.cloud.video.livestream.logging.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Channel_StreamingState, Event_State } from "../../v1/resources_pb";
import { file_google_cloud_video_livestream_v1_resources } from "../../v1/resources_pb";
import type { Status } from "../../../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/video/livestream/logging/v1/logs.proto.
 */
export const file_google_cloud_video_livestream_logging_v1_logs: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvY2xvdWQvdmlkZW8vbGl2ZXN0cmVhbS9sb2dnaW5nL3YxL2xvZ3MucHJvdG8SKGdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEikwUKD0NoYW5uZWxBY3Rpdml0eRIPCgdtZXNzYWdlGAEgASgJEmAKFnN0cmVhbWluZ19zdGF0ZV9jaGFuZ2UYAiABKAsyPi5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLlN0cmVhbWluZ1N0YXRlQ2hhbmdlSAASUwoPc3RyZWFtaW5nX2Vycm9yGAMgASgLMjguZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0ubG9nZ2luZy52MS5TdHJlYW1pbmdFcnJvckgAEk0KDGlucHV0X2FjY2VwdBgEIAEoCzI1Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuSW5wdXRBY2NlcHRIABJLCgtpbnB1dF9lcnJvchgFIAEoCzI0Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuSW5wdXRFcnJvckgAElUKEGlucHV0X2Rpc2Nvbm5lY3QYBiABKAsyOS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLklucHV0RGlzY29ubmVjdEgAElgKEmV2ZW50X3N0YXRlX2NoYW5nZRgHIAEoCzI6Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuRXZlbnRTdGF0ZUNoYW5nZUgAEloKF3NjdGUzNV9jb21tYW5kX3JlY2VpdmVkGAggASgLMjcuZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0ubG9nZ2luZy52MS5TY3RlMzVDb21tYW5kSABCDwoNYWN0aXZpdHlfdHlwZSK1AQoUU3RyZWFtaW5nU3RhdGVDaGFuZ2USSwoJbmV3X3N0YXRlGAEgASgOMjguZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuQ2hhbm5lbC5TdHJlYW1pbmdTdGF0ZRJQCg5wcmV2aW91c19zdGF0ZRgCIAEoDjI4Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLnYxLkNoYW5uZWwuU3RyZWFtaW5nU3RhdGUiMwoOU3RyZWFtaW5nRXJyb3ISIQoFZXJyb3IYASABKAsyEi5nb29nbGUucnBjLlN0YXR1cyKYAQoLSW5wdXRBY2NlcHQSEQoJc3RyZWFtX2lkGAEgASgJEhgKEGlucHV0X2F0dGFjaG1lbnQYAiABKAkSXAoVaW5wdXRfc3RyZWFtX3Byb3BlcnR5GAMgASgLMj0uZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0ubG9nZ2luZy52MS5JbnB1dFN0cmVhbVByb3BlcnR5IroBCgpJbnB1dEVycm9yEhEKCXN0cmVhbV9pZBgBIAEoCRIYChBpbnB1dF9hdHRhY2htZW50GAIgASgJElwKFWlucHV0X3N0cmVhbV9wcm9wZXJ0eRgDIAEoCzI9Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuSW5wdXRTdHJlYW1Qcm9wZXJ0eRIhCgVlcnJvchgEIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzIrEBChNJbnB1dFN0cmVhbVByb3BlcnR5EkwKDXZpZGVvX3N0cmVhbXMYASADKAsyNS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLlZpZGVvU3RyZWFtEkwKDWF1ZGlvX3N0cmVhbXMYAiADKAsyNS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLkF1ZGlvU3RyZWFtImkKC1ZpZGVvU3RyZWFtEg0KBWluZGV4GAEgASgFEksKDHZpZGVvX2Zvcm1hdBgCIAEoCzI1Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuVmlkZW9Gb3JtYXQiXQoLVmlkZW9Gb3JtYXQSDQoFY29kZWMYASABKAkSFAoMd2lkdGhfcGl4ZWxzGAIgASgFEhUKDWhlaWdodF9waXhlbHMYAyABKAUSEgoKZnJhbWVfcmF0ZRgEIAEoASJpCgtBdWRpb1N0cmVhbRINCgVpbmRleBgBIAEoBRJLCgxhdWRpb19mb3JtYXQYAiABKAsyNS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLkF1ZGlvRm9ybWF0IksKC0F1ZGlvRm9ybWF0Eg0KBWNvZGVjGAEgASgJEhUKDWNoYW5uZWxfY291bnQYAiABKAUSFgoOY2hhbm5lbF9sYXlvdXQYAyADKAkiPgoPSW5wdXREaXNjb25uZWN0EhEKCXN0cmVhbV9pZBgBIAEoCRIYChBpbnB1dF9hdHRhY2htZW50GAIgASgJIq0BChBFdmVudFN0YXRlQ2hhbmdlEhAKCGV2ZW50X2lkGAEgASgJEkAKCW5ld19zdGF0ZRgCIAEoDjItLmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLnYxLkV2ZW50LlN0YXRlEkUKDnByZXZpb3VzX3N0YXRlGAMgASgOMi0uZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuRXZlbnQuU3RhdGUiqQgKDVNjdGUzNUNvbW1hbmQSZgoTc3BsaWNlX2luZm9fc2VjdGlvbhgBIAEoCzJJLmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuU2N0ZTM1Q29tbWFuZC5TcGxpY2VJbmZvU2VjdGlvbho7CgpTcGxpY2VUaW1lEhsKE3RpbWVfc3BlY2lmaWVkX2ZsYWcYASABKAgSEAoIcHRzX3RpbWUYAiABKAMaNgoNQnJlYWtEdXJhdGlvbhITCgthdXRvX3JldHVybhgBIAEoCBIQCghkdXJhdGlvbhgCIAEoAxp7CglDb21wb25lbnQSFQoNY29tcG9uZW50X3RhZxgBIAEoBRJXCgtzcGxpY2VfdGltZRgCIAEoCzJCLmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuU2N0ZTM1Q29tbWFuZC5TcGxpY2VUaW1lGrIECgxTcGxpY2VJbnNlcnQSFwoPc3BsaWNlX2V2ZW50X2lkGAEgASgFEiUKHXNwbGljZV9ldmVudF9jYW5jZWxfaW5kaWNhdG9yGAIgASgIEiAKGG91dF9vZl9uZXR3b3JrX2luZGljYXRvchgDIAEoCBIbChNwcm9ncmFtX3NwbGljZV9mbGFnGAQgASgIEhUKDWR1cmF0aW9uX2ZsYWcYBSABKAgSHQoVc3BsaWNlX2ltbWVkaWF0ZV9mbGFnGAYgASgIElcKC3NwbGljZV90aW1lGAcgASgLMkIuZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0ubG9nZ2luZy52MS5TY3RlMzVDb21tYW5kLlNwbGljZVRpbWUSXQoOYnJlYWtfZHVyYXRpb24YCCABKAsyRS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxLlNjdGUzNUNvbW1hbmQuQnJlYWtEdXJhdGlvbhIZChF1bmlxdWVfcHJvZ3JhbV9pZBgJIAEoBRIRCglhdmFpbF9udW0YCiABKAUSFwoPYXZhaWxzX2V4cGVjdGVkGAsgASgFEhcKD2NvbXBvbmVudF9jb3VudBgMIAEoBRJVCgpjb21wb25lbnRzGA0gAygLMkEuZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0ubG9nZ2luZy52MS5TY3RlMzVDb21tYW5kLkNvbXBvbmVudBqIAQoRU3BsaWNlSW5mb1NlY3Rpb24SFgoOcHRzX2FkanVzdG1lbnQYASABKAMSWwoNc3BsaWNlX2luc2VydBgCIAEoCzJELmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLmxvZ2dpbmcudjEuU2N0ZTM1Q29tbWFuZC5TcGxpY2VJbnNlcnRCgwEKLGNvbS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS5sb2dnaW5nLnYxQglMb2dzUHJvdG9QAVpGY2xvdWQuZ29vZ2xlLmNvbS9nby92aWRlby9saXZlc3RyZWFtL2xvZ2dpbmcvYXBpdjEvbG9nZ2luZ3BiO2xvZ2dpbmdwYmIGcHJvdG8z", [file_google_cloud_video_livestream_v1_resources, file_google_rpc_status]);

/**
 * Logs of activities related to the Channels.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.ChannelActivity
 */
export type ChannelActivity = Message<"google.cloud.video.livestream.logging.v1.ChannelActivity"> & {
  /**
   * Message is for more details of the log and instructions to users.
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * Different types of the logs.
   *
   * @generated from oneof google.cloud.video.livestream.logging.v1.ChannelActivity.activity_type
   */
  activityType: {
    /**
     * The channel streaming state changes.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.StreamingStateChange streaming_state_change = 2;
     */
    value: StreamingStateChange;
    case: "streamingStateChange";
  } | {
    /**
     * An error happens with the video pipeline.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.StreamingError streaming_error = 3;
     */
    value: StreamingError;
    case: "streamingError";
  } | {
    /**
     * The channel has accepted an input stream.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.InputAccept input_accept = 4;
     */
    value: InputAccept;
    case: "inputAccept";
  } | {
    /**
     * An error happens with the input stream.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.InputError input_error = 5;
     */
    value: InputError;
    case: "inputError";
  } | {
    /**
     * An input stream disconnects.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.InputDisconnect input_disconnect = 6;
     */
    value: InputDisconnect;
    case: "inputDisconnect";
  } | {
    /**
     * An event state changes.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.EventStateChange event_state_change = 7;
     */
    value: EventStateChange;
    case: "eventStateChange";
  } | {
    /**
     * A SCTE35 command is received.
     *
     * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command scte35_command_received = 8;
     */
    value: Scte35Command;
    case: "scte35CommandReceived";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.ChannelActivity.
 * Use `create(ChannelActivitySchema)` to create a new message.
 */
export const ChannelActivitySchema: GenMessage<ChannelActivity> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 0);

/**
 * StreamingStateChange records when the channel streaming state changes.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.StreamingStateChange
 */
export type StreamingStateChange = Message<"google.cloud.video.livestream.logging.v1.StreamingStateChange"> & {
  /**
   * New streaming state of the channel.
   *
   * @generated from field: google.cloud.video.livestream.v1.Channel.StreamingState new_state = 1;
   */
  newState: Channel_StreamingState;

  /**
   * Previous streaming state of the channel.
   *
   * @generated from field: google.cloud.video.livestream.v1.Channel.StreamingState previous_state = 2;
   */
  previousState: Channel_StreamingState;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.StreamingStateChange.
 * Use `create(StreamingStateChangeSchema)` to create a new message.
 */
export const StreamingStateChangeSchema: GenMessage<StreamingStateChange> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 1);

/**
 * StreamingError records when an error happens with the video pipeline.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.StreamingError
 */
export type StreamingError = Message<"google.cloud.video.livestream.logging.v1.StreamingError"> & {
  /**
   * A description of the reason for the streaming error.
   *
   * @generated from field: google.rpc.Status error = 1;
   */
  error?: Status;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.StreamingError.
 * Use `create(StreamingErrorSchema)` to create a new message.
 */
export const StreamingErrorSchema: GenMessage<StreamingError> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 2);

/**
 * InputAccept records when the channel has accepted an input stream.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.InputAccept
 */
export type InputAccept = Message<"google.cloud.video.livestream.logging.v1.InputAccept"> & {
  /**
   * ID of the input stream.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * The user-defined key for the input attachment.
   *
   * @generated from field: string input_attachment = 2;
   */
  inputAttachment: string;

  /**
   * Properties of the input stream.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.InputStreamProperty input_stream_property = 3;
   */
  inputStreamProperty?: InputStreamProperty;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.InputAccept.
 * Use `create(InputAcceptSchema)` to create a new message.
 */
export const InputAcceptSchema: GenMessage<InputAccept> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 3);

/**
 * InputError records when an error happens with the input stream.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.InputError
 */
export type InputError = Message<"google.cloud.video.livestream.logging.v1.InputError"> & {
  /**
   * ID of the input stream.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * The user-defined key for the input attachment. If the stream doesn’t belong
   * to any input attachment, this field is empty.
   *
   * @generated from field: string input_attachment = 2;
   */
  inputAttachment: string;

  /**
   * Properties of the input stream.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.InputStreamProperty input_stream_property = 3;
   */
  inputStreamProperty?: InputStreamProperty;

  /**
   * A description of the reason for the error with the input stream.
   *
   * @generated from field: google.rpc.Status error = 4;
   */
  error?: Status;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.InputError.
 * Use `create(InputErrorSchema)` to create a new message.
 */
export const InputErrorSchema: GenMessage<InputError> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 4);

/**
 * Properties of the input stream.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.InputStreamProperty
 */
export type InputStreamProperty = Message<"google.cloud.video.livestream.logging.v1.InputStreamProperty"> & {
  /**
   * Properties of the video streams.
   *
   * @generated from field: repeated google.cloud.video.livestream.logging.v1.VideoStream video_streams = 1;
   */
  videoStreams: VideoStream[];

  /**
   * Properties of the audio streams.
   *
   * @generated from field: repeated google.cloud.video.livestream.logging.v1.AudioStream audio_streams = 2;
   */
  audioStreams: AudioStream[];
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.InputStreamProperty.
 * Use `create(InputStreamPropertySchema)` to create a new message.
 */
export const InputStreamPropertySchema: GenMessage<InputStreamProperty> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 5);

/**
 * Properties of the video stream.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.VideoStream
 */
export type VideoStream = Message<"google.cloud.video.livestream.logging.v1.VideoStream"> & {
  /**
   * Index of this video stream.
   *
   * @generated from field: int32 index = 1;
   */
  index: number;

  /**
   * Properties of the video format.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.VideoFormat video_format = 2;
   */
  videoFormat?: VideoFormat;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.VideoStream.
 * Use `create(VideoStreamSchema)` to create a new message.
 */
export const VideoStreamSchema: GenMessage<VideoStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 6);

/**
 * Properties of the video format.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.VideoFormat
 */
export type VideoFormat = Message<"google.cloud.video.livestream.logging.v1.VideoFormat"> & {
  /**
   * Video codec used in this video stream.
   *
   * @generated from field: string codec = 1;
   */
  codec: string;

  /**
   * The width of the video stream in pixels.
   *
   * @generated from field: int32 width_pixels = 2;
   */
  widthPixels: number;

  /**
   * The height of the video stream in pixels.
   *
   * @generated from field: int32 height_pixels = 3;
   */
  heightPixels: number;

  /**
   * The frame rate of the input video stream.
   *
   * @generated from field: double frame_rate = 4;
   */
  frameRate: number;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.VideoFormat.
 * Use `create(VideoFormatSchema)` to create a new message.
 */
export const VideoFormatSchema: GenMessage<VideoFormat> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 7);

/**
 * Properties of the audio stream.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.AudioStream
 */
export type AudioStream = Message<"google.cloud.video.livestream.logging.v1.AudioStream"> & {
  /**
   * Index of this audio stream.
   *
   * @generated from field: int32 index = 1;
   */
  index: number;

  /**
   * Properties of the audio format.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.AudioFormat audio_format = 2;
   */
  audioFormat?: AudioFormat;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.AudioStream.
 * Use `create(AudioStreamSchema)` to create a new message.
 */
export const AudioStreamSchema: GenMessage<AudioStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 8);

/**
 * Properties of the audio format.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.AudioFormat
 */
export type AudioFormat = Message<"google.cloud.video.livestream.logging.v1.AudioFormat"> & {
  /**
   * Audio codec used in this audio stream.
   *
   * @generated from field: string codec = 1;
   */
  codec: string;

  /**
   * The number of audio channels.
   *
   * @generated from field: int32 channel_count = 2;
   */
  channelCount: number;

  /**
   * A list of channel names specifying the layout of the audio channels.
   *
   * @generated from field: repeated string channel_layout = 3;
   */
  channelLayout: string[];
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.AudioFormat.
 * Use `create(AudioFormatSchema)` to create a new message.
 */
export const AudioFormatSchema: GenMessage<AudioFormat> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 9);

/**
 * InputDisconnect records when an input stream disconnects.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.InputDisconnect
 */
export type InputDisconnect = Message<"google.cloud.video.livestream.logging.v1.InputDisconnect"> & {
  /**
   * ID of the input stream.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;

  /**
   * The user-defined key for the input attachment.
   *
   * @generated from field: string input_attachment = 2;
   */
  inputAttachment: string;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.InputDisconnect.
 * Use `create(InputDisconnectSchema)` to create a new message.
 */
export const InputDisconnectSchema: GenMessage<InputDisconnect> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 10);

/**
 * EventStateChange records when an Event state changes.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.EventStateChange
 */
export type EventStateChange = Message<"google.cloud.video.livestream.logging.v1.EventStateChange"> & {
  /**
   * Resource name of the event.
   *
   * @generated from field: string event_id = 1;
   */
  eventId: string;

  /**
   * New state of the event.
   *
   * @generated from field: google.cloud.video.livestream.v1.Event.State new_state = 2;
   */
  newState: Event_State;

  /**
   * Previous state of the event.
   *
   * @generated from field: google.cloud.video.livestream.v1.Event.State previous_state = 3;
   */
  previousState: Event_State;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.EventStateChange.
 * Use `create(EventStateChangeSchema)` to create a new message.
 */
export const EventStateChangeSchema: GenMessage<EventStateChange> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 11);

/**
 * Scte35Command includes details of a received SCTE35 command.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command
 */
export type Scte35Command = Message<"google.cloud.video.livestream.logging.v1.Scte35Command"> & {
  /**
   * Information about the splice insert.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInfoSection splice_info_section = 1;
   */
  spliceInfoSection?: Scte35Command_SpliceInfoSection;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.
 * Use `create(Scte35CommandSchema)` to create a new message.
 */
export const Scte35CommandSchema: GenMessage<Scte35Command> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12);

/**
 * SpliceTime contains information about the execution time of the splice
 * insert.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceTime
 */
export type Scte35Command_SpliceTime = Message<"google.cloud.video.livestream.logging.v1.Scte35Command.SpliceTime"> & {
  /**
   * If true, the execution time of the splice insert is specified.
   *
   * @generated from field: bool time_specified_flag = 1;
   */
  timeSpecifiedFlag: boolean;

  /**
   * The time of the splice insert.
   *
   * @generated from field: int64 pts_time = 2;
   */
  ptsTime: bigint;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceTime.
 * Use `create(Scte35Command_SpliceTimeSchema)` to create a new message.
 */
export const Scte35Command_SpliceTimeSchema: GenMessage<Scte35Command_SpliceTime> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12, 0);

/**
 * BreakDuration contains information about the duration of the splice
 * insert.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command.BreakDuration
 */
export type Scte35Command_BreakDuration = Message<"google.cloud.video.livestream.logging.v1.Scte35Command.BreakDuration"> & {
  /**
   * If true, the splice insert will automatically return upon finishing.
   *
   * @generated from field: bool auto_return = 1;
   */
  autoReturn: boolean;

  /**
   * Duration of the splice insert.
   *
   * @generated from field: int64 duration = 2;
   */
  duration: bigint;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.BreakDuration.
 * Use `create(Scte35Command_BreakDurationSchema)` to create a new message.
 */
export const Scte35Command_BreakDurationSchema: GenMessage<Scte35Command_BreakDuration> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12, 1);

/**
 * Fine grained control on the scte command insertion for a specific
 * elementary stream. This is ignored if program_splice_flag is true.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command.Component
 */
export type Scte35Command_Component = Message<"google.cloud.video.livestream.logging.v1.Scte35Command.Component"> & {
  /**
   * Elementary stream PID that the scte command should be inserted into.
   *
   * @generated from field: int32 component_tag = 1;
   */
  componentTag: number;

  /**
   * The time of the insert.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command.SpliceTime splice_time = 2;
   */
  spliceTime?: Scte35Command_SpliceTime;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.Component.
 * Use `create(Scte35Command_ComponentSchema)` to create a new message.
 */
export const Scte35Command_ComponentSchema: GenMessage<Scte35Command_Component> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12, 2);

/**
 * SpliceInsert contains information about the splice insert.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInsert
 */
export type Scte35Command_SpliceInsert = Message<"google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInsert"> & {
  /**
   * Event ID of the scte command.
   *
   * @generated from field: int32 splice_event_id = 1;
   */
  spliceEventId: number;

  /**
   * Whether this scte command is to cancel another scheduled scte command.
   *
   * @generated from field: bool splice_event_cancel_indicator = 2;
   */
  spliceEventCancelIndicator: boolean;

  /**
   * Whether this scte command is cueing out the current program.
   *
   * @generated from field: bool out_of_network_indicator = 3;
   */
  outOfNetworkIndicator: boolean;

  /**
   * If true, send splice insert to all streams.
   *
   * @generated from field: bool program_splice_flag = 4;
   */
  programSpliceFlag: boolean;

  /**
   * If true, the duration of the event is specified.
   *
   * @generated from field: bool duration_flag = 5;
   */
  durationFlag: boolean;

  /**
   * If true, the event should be executed immediately.
   *
   * @generated from field: bool splice_immediate_flag = 6;
   */
  spliceImmediateFlag: boolean;

  /**
   * Information about the execution time of the splice insert.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command.SpliceTime splice_time = 7;
   */
  spliceTime?: Scte35Command_SpliceTime;

  /**
   * Information about the duration of the splice insert.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command.BreakDuration break_duration = 8;
   */
  breakDuration?: Scte35Command_BreakDuration;

  /**
   * Unique ID for a viewing event.
   *
   * @generated from field: int32 unique_program_id = 9;
   */
  uniqueProgramId: number;

  /**
   * ID for an avail within one unique_program_id.
   *
   * @generated from field: int32 avail_num = 10;
   */
  availNum: number;

  /**
   * The number of avails within the current viewing event.
   *
   * @generated from field: int32 avails_expected = 11;
   */
  availsExpected: number;

  /**
   * Number of components.
   *
   * @generated from field: int32 component_count = 12;
   */
  componentCount: number;

  /**
   * Components of the program.
   *
   * @generated from field: repeated google.cloud.video.livestream.logging.v1.Scte35Command.Component components = 13;
   */
  components: Scte35Command_Component[];
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInsert.
 * Use `create(Scte35Command_SpliceInsertSchema)` to create a new message.
 */
export const Scte35Command_SpliceInsertSchema: GenMessage<Scte35Command_SpliceInsert> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12, 3);

/**
 * SpliceInfoSection contains information about the splice insert.
 *
 * @generated from message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInfoSection
 */
export type Scte35Command_SpliceInfoSection = Message<"google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInfoSection"> & {
  /**
   * Overflow of pts_time, when pts_time doesn't have enough bits
   * to represent the time.
   *
   * @generated from field: int64 pts_adjustment = 1;
   */
  ptsAdjustment: bigint;

  /**
   * Information about the splice insert.
   *
   * @generated from field: google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInsert splice_insert = 2;
   */
  spliceInsert?: Scte35Command_SpliceInsert;
};

/**
 * Describes the message google.cloud.video.livestream.logging.v1.Scte35Command.SpliceInfoSection.
 * Use `create(Scte35Command_SpliceInfoSectionSchema)` to create a new message.
 */
export const Scte35Command_SpliceInfoSectionSchema: GenMessage<Scte35Command_SpliceInfoSection> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_logging_v1_logs, 12, 4);

