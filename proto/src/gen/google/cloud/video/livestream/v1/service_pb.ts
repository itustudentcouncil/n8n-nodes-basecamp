// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/video/livestream/v1/service.proto (package google.cloud.video.livestream.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../../api/field_info_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Asset, AssetSchema, Channel, ChannelSchema, Clip, ClipSchema, Event, EventSchema, Input, InputSchema, Pool, PoolSchema } from "./resources_pb";
import { file_google_cloud_video_livestream_v1_resources } from "./resources_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/video/livestream/v1/service.proto.
 */
export const file_google_cloud_video_livestream_v1_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_cloud_video_livestream_v1_resources, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Request message for "LivestreamService.CreateAsset".
 *
 * @generated from message google.cloud.video.livestream.v1.CreateAssetRequest
 */
export type CreateAssetRequest = Message<"google.cloud.video.livestream.v1.CreateAssetRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The asset resource to be created.
   *
   * @generated from field: google.cloud.video.livestream.v1.Asset asset = 2;
   */
  asset?: Asset;

  /**
   * Required. The ID of the asset resource to be created.
   * This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   * could contain dashes (-) in between.
   *
   * @generated from field: string asset_id = 3;
   */
  assetId: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.CreateAssetRequest.
 * Use `create(CreateAssetRequestSchema)` to create a new message.
 */
export const CreateAssetRequestSchema: GenMessage<CreateAssetRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 0);

/**
 * Request message for "LivestreamService.DeleteAsset".
 *
 * @generated from message google.cloud.video.livestream.v1.DeleteAssetRequest
 */
export type DeleteAssetRequest = Message<"google.cloud.video.livestream.v1.DeleteAssetRequest"> & {
  /**
   * Required. The name of the asset resource, in the form of:
   * `projects/{project}/locations/{location}/assets/{assetId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.DeleteAssetRequest.
 * Use `create(DeleteAssetRequestSchema)` to create a new message.
 */
export const DeleteAssetRequestSchema: GenMessage<DeleteAssetRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 1);

/**
 * Request message for "LivestreamService.ListAssets".
 *
 * @generated from message google.cloud.video.livestream.v1.ListAssetsRequest
 */
export type ListAssetsRequest = Message<"google.cloud.video.livestream.v1.ListAssetsRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListAssetsRequest.
 * Use `create(ListAssetsRequestSchema)` to create a new message.
 */
export const ListAssetsRequestSchema: GenMessage<ListAssetsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 2);

/**
 * Response message for "LivestreamService.ListAssets".
 *
 * @generated from message google.cloud.video.livestream.v1.ListAssetsResponse
 */
export type ListAssetsResponse = Message<"google.cloud.video.livestream.v1.ListAssetsResponse"> & {
  /**
   * The list of Assets
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.Asset assets = 1;
   */
  assets: Asset[];

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListAssetsResponse.
 * Use `create(ListAssetsResponseSchema)` to create a new message.
 */
export const ListAssetsResponseSchema: GenMessage<ListAssetsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 3);

/**
 * Request message for "LivestreamService.GetAsset".
 *
 * @generated from message google.cloud.video.livestream.v1.GetAssetRequest
 */
export type GetAssetRequest = Message<"google.cloud.video.livestream.v1.GetAssetRequest"> & {
  /**
   * Required. Name of the resource, in the following form:
   * `projects/{project}/locations/{location}/assets/{asset}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetAssetRequest.
 * Use `create(GetAssetRequestSchema)` to create a new message.
 */
export const GetAssetRequestSchema: GenMessage<GetAssetRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 4);

/**
 * Request message for "LivestreamService.CreateChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.CreateChannelRequest
 */
export type CreateChannelRequest = Message<"google.cloud.video.livestream.v1.CreateChannelRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The channel resource to be created.
   *
   * @generated from field: google.cloud.video.livestream.v1.Channel channel = 2;
   */
  channel?: Channel;

  /**
   * Required. The ID of the channel resource to be created.
   * This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   * could contain dashes (-) in between.
   *
   * @generated from field: string channel_id = 3;
   */
  channelId: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.CreateChannelRequest.
 * Use `create(CreateChannelRequestSchema)` to create a new message.
 */
export const CreateChannelRequestSchema: GenMessage<CreateChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 5);

/**
 * Request message for "LivestreamService.ListChannels".
 *
 * @generated from message google.cloud.video.livestream.v1.ListChannelsRequest
 */
export type ListChannelsRequest = Message<"google.cloud.video.livestream.v1.ListChannelsRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return. If unspecified, server
   * will pick an appropriate default. Server may return fewer items than
   * requested. A caller should only rely on response's
   * [next_page_token][google.cloud.video.livestream.v1.ListChannelsResponse.next_page_token]
   * to determine if there are more items left to be queried.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The filter to apply to list results.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Specifies the ordering of results following syntax at
   * https://cloud.google.com/apis/design/design_patterns#sorting_order.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListChannelsRequest.
 * Use `create(ListChannelsRequestSchema)` to create a new message.
 */
export const ListChannelsRequestSchema: GenMessage<ListChannelsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 6);

/**
 * Response message for "LivestreamService.ListChannels".
 *
 * @generated from message google.cloud.video.livestream.v1.ListChannelsResponse
 */
export type ListChannelsResponse = Message<"google.cloud.video.livestream.v1.ListChannelsResponse"> & {
  /**
   * A list of channels.
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.Channel channels = 1;
   */
  channels: Channel[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListChannelsResponse.
 * Use `create(ListChannelsResponseSchema)` to create a new message.
 */
export const ListChannelsResponseSchema: GenMessage<ListChannelsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 7);

/**
 * Request message for "LivestreamService.GetChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.GetChannelRequest
 */
export type GetChannelRequest = Message<"google.cloud.video.livestream.v1.GetChannelRequest"> & {
  /**
   * Required. The name of the channel resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetChannelRequest.
 * Use `create(GetChannelRequestSchema)` to create a new message.
 */
export const GetChannelRequestSchema: GenMessage<GetChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 8);

/**
 * Request message for "LivestreamService.DeleteChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.DeleteChannelRequest
 */
export type DeleteChannelRequest = Message<"google.cloud.video.livestream.v1.DeleteChannelRequest"> & {
  /**
   * Required. The name of the channel resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * If the `force` field is set to the default value of `false`, you must
   * delete all of a channel's events before you can delete the channel itself.
   * If the field is set to `true`, requests to delete a channel also delete
   * associated channel events.
   *
   * @generated from field: bool force = 3;
   */
  force: boolean;
};

/**
 * Describes the message google.cloud.video.livestream.v1.DeleteChannelRequest.
 * Use `create(DeleteChannelRequestSchema)` to create a new message.
 */
export const DeleteChannelRequestSchema: GenMessage<DeleteChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 9);

/**
 * Request message for "LivestreamService.UpdateChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.UpdateChannelRequest
 */
export type UpdateChannelRequest = Message<"google.cloud.video.livestream.v1.UpdateChannelRequest"> & {
  /**
   * Field mask is used to specify the fields to be overwritten in the Channel
   * resource by the update. You can only update the following fields:
   *
   * * [`inputAttachments`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#inputattachment)
   * * [`inputConfig`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#inputconfig)
   * * [`output`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#output)
   * * [`elementaryStreams`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#elementarystream)
   * * [`muxStreams`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#muxstream)
   * * [`manifests`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#manifest)
   * * [`spriteSheets`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#spritesheet)
   * * [`logConfig`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#logconfig)
   * * [`timecodeConfig`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#timecodeconfig)
   * * [`encryptions`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.channels#encryption)
   *
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask.
   *
   * If the mask is not present, then each field from the list above is updated
   * if the field appears in the request payload. To unset a field, add the
   * field to the update mask and remove it from the request payload.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. The channel resource to be updated.
   *
   * @generated from field: google.cloud.video.livestream.v1.Channel channel = 2;
   */
  channel?: Channel;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.UpdateChannelRequest.
 * Use `create(UpdateChannelRequestSchema)` to create a new message.
 */
export const UpdateChannelRequestSchema: GenMessage<UpdateChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 10);

/**
 * Request message for "LivestreamService.StartChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.StartChannelRequest
 */
export type StartChannelRequest = Message<"google.cloud.video.livestream.v1.StartChannelRequest"> & {
  /**
   * Required. The name of the channel resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.StartChannelRequest.
 * Use `create(StartChannelRequestSchema)` to create a new message.
 */
export const StartChannelRequestSchema: GenMessage<StartChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 11);

/**
 * Request message for "LivestreamService.StopChannel".
 *
 * @generated from message google.cloud.video.livestream.v1.StopChannelRequest
 */
export type StopChannelRequest = Message<"google.cloud.video.livestream.v1.StopChannelRequest"> & {
  /**
   * Required. The name of the channel resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.StopChannelRequest.
 * Use `create(StopChannelRequestSchema)` to create a new message.
 */
export const StopChannelRequestSchema: GenMessage<StopChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 12);

/**
 * Request message for "LivestreamService.CreateInput".
 *
 * @generated from message google.cloud.video.livestream.v1.CreateInputRequest
 */
export type CreateInputRequest = Message<"google.cloud.video.livestream.v1.CreateInputRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The input resource to be created.
   *
   * @generated from field: google.cloud.video.livestream.v1.Input input = 2;
   */
  input?: Input;

  /**
   * Required. The ID of the input resource to be created.
   * This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   * could contain dashes (-) in between.
   *
   * @generated from field: string input_id = 3;
   */
  inputId: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.CreateInputRequest.
 * Use `create(CreateInputRequestSchema)` to create a new message.
 */
export const CreateInputRequestSchema: GenMessage<CreateInputRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 13);

/**
 * Request message for "LivestreamService.ListInputs".
 *
 * @generated from message google.cloud.video.livestream.v1.ListInputsRequest
 */
export type ListInputsRequest = Message<"google.cloud.video.livestream.v1.ListInputsRequest"> & {
  /**
   * Required. The parent location for the resource, in the form of:
   * `projects/{project}/locations/{location}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return. If unspecified, server
   * will pick an appropriate default. Server may return fewer items than
   * requested. A caller should only rely on response's
   * [next_page_token][google.cloud.video.livestream.v1.ListInputsResponse.next_page_token]
   * to determine if there are more items left to be queried.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The filter to apply to list results.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Specifies the ordering of results following syntax at [Sorting
   * Order](https://cloud.google.com/apis/design/design_patterns#sorting_order).
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListInputsRequest.
 * Use `create(ListInputsRequestSchema)` to create a new message.
 */
export const ListInputsRequestSchema: GenMessage<ListInputsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 14);

/**
 * Response message for "LivestreamService.ListInputs".
 *
 * @generated from message google.cloud.video.livestream.v1.ListInputsResponse
 */
export type ListInputsResponse = Message<"google.cloud.video.livestream.v1.ListInputsResponse"> & {
  /**
   * A list of inputs.
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.Input inputs = 1;
   */
  inputs: Input[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListInputsResponse.
 * Use `create(ListInputsResponseSchema)` to create a new message.
 */
export const ListInputsResponseSchema: GenMessage<ListInputsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 15);

/**
 * Request message for "LivestreamService.GetInput".
 *
 * @generated from message google.cloud.video.livestream.v1.GetInputRequest
 */
export type GetInputRequest = Message<"google.cloud.video.livestream.v1.GetInputRequest"> & {
  /**
   * Required. The name of the input resource, in the form of:
   * `projects/{project}/locations/{location}/inputs/{inputId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetInputRequest.
 * Use `create(GetInputRequestSchema)` to create a new message.
 */
export const GetInputRequestSchema: GenMessage<GetInputRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 16);

/**
 * Request message for "LivestreamService.DeleteInput".
 *
 * @generated from message google.cloud.video.livestream.v1.DeleteInputRequest
 */
export type DeleteInputRequest = Message<"google.cloud.video.livestream.v1.DeleteInputRequest"> & {
  /**
   * Required. The name of the input resource, in the form of:
   * `projects/{project}/locations/{location}/inputs/{inputId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.DeleteInputRequest.
 * Use `create(DeleteInputRequestSchema)` to create a new message.
 */
export const DeleteInputRequestSchema: GenMessage<DeleteInputRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 17);

/**
 * Request message for "LivestreamService.UpdateInput".
 *
 * @generated from message google.cloud.video.livestream.v1.UpdateInputRequest
 */
export type UpdateInputRequest = Message<"google.cloud.video.livestream.v1.UpdateInputRequest"> & {
  /**
   * Field mask is used to specify the fields to be overwritten in the Input
   * resource by the update. You can only update the following fields:
   *
   * * [`preprocessingConfig`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs#PreprocessingConfig)
   * * [`securityRules`](https://cloud.google.com/livestream/docs/reference/rest/v1/projects.locations.inputs#SecurityRule)
   *
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask.
   *
   * If the mask is not present, then each field from the list above is updated
   * if the field appears in the request payload. To unset a field, add the
   * field to the update mask and remove it from the request payload.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. The input resource to be updated.
   *
   * @generated from field: google.cloud.video.livestream.v1.Input input = 2;
   */
  input?: Input;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.UpdateInputRequest.
 * Use `create(UpdateInputRequestSchema)` to create a new message.
 */
export const UpdateInputRequestSchema: GenMessage<UpdateInputRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 18);

/**
 * Request message for "LivestreamService.CreateEvent".
 *
 * @generated from message google.cloud.video.livestream.v1.CreateEventRequest
 */
export type CreateEventRequest = Message<"google.cloud.video.livestream.v1.CreateEventRequest"> & {
  /**
   * Required. The parent channel for the resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The event resource to be created.
   *
   * @generated from field: google.cloud.video.livestream.v1.Event event = 2;
   */
  event?: Event;

  /**
   * Required. The ID of the event resource to be created.
   * This value must be 1-63 characters, begin and end with `[a-z0-9]`,
   * could contain dashes (-) in between.
   *
   * @generated from field: string event_id = 3;
   */
  eventId: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.CreateEventRequest.
 * Use `create(CreateEventRequestSchema)` to create a new message.
 */
export const CreateEventRequestSchema: GenMessage<CreateEventRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 19);

/**
 * Request message for "LivestreamService.ListEvents".
 *
 * @generated from message google.cloud.video.livestream.v1.ListEventsRequest
 */
export type ListEventsRequest = Message<"google.cloud.video.livestream.v1.ListEventsRequest"> & {
  /**
   * Required. The parent channel for the resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return. If unspecified, server
   * will pick an appropriate default. Server may return fewer items than
   * requested. A caller should only rely on response's
   * [next_page_token][google.cloud.video.livestream.v1.ListEventsResponse.next_page_token]
   * to determine if there are more items left to be queried.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The filter to apply to list results.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Specifies the ordering of results following syntax at
   * https://cloud.google.com/apis/design/design_patterns#sorting_order.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListEventsRequest.
 * Use `create(ListEventsRequestSchema)` to create a new message.
 */
export const ListEventsRequestSchema: GenMessage<ListEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 20);

/**
 * Response message for "LivestreamService.ListEvents".
 *
 * @generated from message google.cloud.video.livestream.v1.ListEventsResponse
 */
export type ListEventsResponse = Message<"google.cloud.video.livestream.v1.ListEventsResponse"> & {
  /**
   * A list of events.
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.Event events = 1;
   */
  events: Event[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListEventsResponse.
 * Use `create(ListEventsResponseSchema)` to create a new message.
 */
export const ListEventsResponseSchema: GenMessage<ListEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 21);

/**
 * Request message for "LivestreamService.GetEvent".
 *
 * @generated from message google.cloud.video.livestream.v1.GetEventRequest
 */
export type GetEventRequest = Message<"google.cloud.video.livestream.v1.GetEventRequest"> & {
  /**
   * Required. The name of the event resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}/events/{eventId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetEventRequest.
 * Use `create(GetEventRequestSchema)` to create a new message.
 */
export const GetEventRequestSchema: GenMessage<GetEventRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 22);

/**
 * Request message for "LivestreamService.DeleteEvent".
 *
 * @generated from message google.cloud.video.livestream.v1.DeleteEventRequest
 */
export type DeleteEventRequest = Message<"google.cloud.video.livestream.v1.DeleteEventRequest"> & {
  /**
   * Required. The name of the event resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}/events/{eventId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.DeleteEventRequest.
 * Use `create(DeleteEventRequestSchema)` to create a new message.
 */
export const DeleteEventRequestSchema: GenMessage<DeleteEventRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 23);

/**
 * Response message for Start/Stop Channel long-running operations.
 *
 * @generated from message google.cloud.video.livestream.v1.ChannelOperationResponse
 */
export type ChannelOperationResponse = Message<"google.cloud.video.livestream.v1.ChannelOperationResponse"> & {
};

/**
 * Describes the message google.cloud.video.livestream.v1.ChannelOperationResponse.
 * Use `create(ChannelOperationResponseSchema)` to create a new message.
 */
export const ChannelOperationResponseSchema: GenMessage<ChannelOperationResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 24);

/**
 * Request message for "LivestreamService.ListClips".
 *
 * @generated from message google.cloud.video.livestream.v1.ListClipsRequest
 */
export type ListClipsRequest = Message<"google.cloud.video.livestream.v1.ListClipsRequest"> & {
  /**
   * Required. Parent value for ListClipsRequest
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Requested page size. Server may return fewer items than requested.
   * If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListClipsRequest.
 * Use `create(ListClipsRequestSchema)` to create a new message.
 */
export const ListClipsRequestSchema: GenMessage<ListClipsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 25);

/**
 * Response message for "LivestreamService.ListClips".
 *
 * @generated from message google.cloud.video.livestream.v1.ListClipsResponse
 */
export type ListClipsResponse = Message<"google.cloud.video.livestream.v1.ListClipsResponse"> & {
  /**
   * The list of Clip
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.Clip clips = 1;
   */
  clips: Clip[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.video.livestream.v1.ListClipsResponse.
 * Use `create(ListClipsResponseSchema)` to create a new message.
 */
export const ListClipsResponseSchema: GenMessage<ListClipsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 26);

/**
 * Request message for "LivestreamService.GetClip".
 *
 * @generated from message google.cloud.video.livestream.v1.GetClipRequest
 */
export type GetClipRequest = Message<"google.cloud.video.livestream.v1.GetClipRequest"> & {
  /**
   * Required. Name of the resource, in the following form:
   * `projects/{project}/locations/{location}/channels/{channel}/clips/{clip}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetClipRequest.
 * Use `create(GetClipRequestSchema)` to create a new message.
 */
export const GetClipRequestSchema: GenMessage<GetClipRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 27);

/**
 * Request message for "LivestreamService.CreateClip".
 *
 * @generated from message google.cloud.video.livestream.v1.CreateClipRequest
 */
export type CreateClipRequest = Message<"google.cloud.video.livestream.v1.CreateClipRequest"> & {
  /**
   * Required. The parent resource name, in the following form:
   * `projects/{project}/locations/{location}/channels/{channel}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Id of the requesting object in the following form:
   *
   * 1. 1 character minimum, 63 characters maximum
   * 2. Only contains letters, digits, underscores, and hyphens
   *
   * @generated from field: string clip_id = 2;
   */
  clipId: string;

  /**
   * Required. The resource being created
   *
   * @generated from field: google.cloud.video.livestream.v1.Clip clip = 3;
   */
  clip?: Clip;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.CreateClipRequest.
 * Use `create(CreateClipRequestSchema)` to create a new message.
 */
export const CreateClipRequestSchema: GenMessage<CreateClipRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 28);

/**
 * Request message for "LivestreamService.DeleteClip".
 *
 * @generated from message google.cloud.video.livestream.v1.DeleteClipRequest
 */
export type DeleteClipRequest = Message<"google.cloud.video.livestream.v1.DeleteClipRequest"> & {
  /**
   * Required. The name of the clip resource, in the form of:
   * `projects/{project}/locations/{location}/channels/{channelId}/clips/{clipId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.DeleteClipRequest.
 * Use `create(DeleteClipRequestSchema)` to create a new message.
 */
export const DeleteClipRequestSchema: GenMessage<DeleteClipRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 29);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.video.livestream.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.video.livestream.v1.OperationMetadata"> & {
  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 5;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 6;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 30);

/**
 * Request message for "LivestreamService.GetPool".
 *
 * @generated from message google.cloud.video.livestream.v1.GetPoolRequest
 */
export type GetPoolRequest = Message<"google.cloud.video.livestream.v1.GetPoolRequest"> & {
  /**
   * Required. The name of the pool resource, in the form of:
   * `projects/{project}/locations/{location}/pools/{poolId}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.GetPoolRequest.
 * Use `create(GetPoolRequestSchema)` to create a new message.
 */
export const GetPoolRequestSchema: GenMessage<GetPoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 31);

/**
 * Request message for "LivestreamService.UpdatePool".
 *
 * @generated from message google.cloud.video.livestream.v1.UpdatePoolRequest
 */
export type UpdatePoolRequest = Message<"google.cloud.video.livestream.v1.UpdatePoolRequest"> & {
  /**
   * Field mask is used to specify the fields to be overwritten in the Pool
   * resource by the update. You can only update the following fields:
   *
   * * `networkConfig`
   *
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. The pool resource to be updated.
   *
   * @generated from field: google.cloud.video.livestream.v1.Pool pool = 2;
   */
  pool?: Pool;

  /**
   * A request ID to identify requests. Specify a unique request ID
   * so that if you must retry your request, the server will know to ignore
   * the request if it has already been completed. The server will guarantee
   * that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request ID,
   * the server can check if original operation with the same request ID was
   * received, and if so, will ignore the second request. This prevents clients
   * from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported `(00000000-0000-0000-0000-000000000000)`.
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.UpdatePoolRequest.
 * Use `create(UpdatePoolRequestSchema)` to create a new message.
 */
export const UpdatePoolRequestSchema: GenMessage<UpdatePoolRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_service, 32);

/**
 * Using Live Stream API, you can generate live streams in the various
 * renditions and streaming formats. The streaming format include HTTP Live
 * Streaming (HLS) and Dynamic Adaptive Streaming over HTTP (DASH). You can send
 * a source stream in the various ways, including Real-Time Messaging
 * Protocol (RTMP) and Secure Reliable Transport (SRT).
 *
 * @generated from service google.cloud.video.livestream.v1.LivestreamService
 */
export const LivestreamService: GenService<{
  /**
   * Creates a channel with the provided unique ID in the specified
   * region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.CreateChannel
   */
  createChannel: {
    methodKind: "unary";
    input: typeof CreateChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Returns a list of all channels in the specified region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.ListChannels
   */
  listChannels: {
    methodKind: "unary";
    input: typeof ListChannelsRequestSchema;
    output: typeof ListChannelsResponseSchema;
  },
  /**
   * Returns the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetChannel
   */
  getChannel: {
    methodKind: "unary";
    input: typeof GetChannelRequestSchema;
    output: typeof ChannelSchema;
  },
  /**
   * Deletes the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.DeleteChannel
   */
  deleteChannel: {
    methodKind: "unary";
    input: typeof DeleteChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.UpdateChannel
   */
  updateChannel: {
    methodKind: "unary";
    input: typeof UpdateChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Starts the specified channel. Part of the video pipeline will be created
   * only when the StartChannel request is received by the server.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.StartChannel
   */
  startChannel: {
    methodKind: "unary";
    input: typeof StartChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Stops the specified channel. Part of the video pipeline will be released
   * when the StopChannel request is received by the server.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.StopChannel
   */
  stopChannel: {
    methodKind: "unary";
    input: typeof StopChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates an input with the provided unique ID in the specified region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.CreateInput
   */
  createInput: {
    methodKind: "unary";
    input: typeof CreateInputRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Returns a list of all inputs in the specified region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.ListInputs
   */
  listInputs: {
    methodKind: "unary";
    input: typeof ListInputsRequestSchema;
    output: typeof ListInputsResponseSchema;
  },
  /**
   * Returns the specified input.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetInput
   */
  getInput: {
    methodKind: "unary";
    input: typeof GetInputRequestSchema;
    output: typeof InputSchema;
  },
  /**
   * Deletes the specified input.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.DeleteInput
   */
  deleteInput: {
    methodKind: "unary";
    input: typeof DeleteInputRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the specified input.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.UpdateInput
   */
  updateInput: {
    methodKind: "unary";
    input: typeof UpdateInputRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates an event with the provided unique ID in the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.CreateEvent
   */
  createEvent: {
    methodKind: "unary";
    input: typeof CreateEventRequestSchema;
    output: typeof EventSchema;
  },
  /**
   * Returns a list of all events in the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.ListEvents
   */
  listEvents: {
    methodKind: "unary";
    input: typeof ListEventsRequestSchema;
    output: typeof ListEventsResponseSchema;
  },
  /**
   * Returns the specified event.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetEvent
   */
  getEvent: {
    methodKind: "unary";
    input: typeof GetEventRequestSchema;
    output: typeof EventSchema;
  },
  /**
   * Deletes the specified event.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.DeleteEvent
   */
  deleteEvent: {
    methodKind: "unary";
    input: typeof DeleteEventRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Returns a list of all clips in the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.ListClips
   */
  listClips: {
    methodKind: "unary";
    input: typeof ListClipsRequestSchema;
    output: typeof ListClipsResponseSchema;
  },
  /**
   * Returns the specified clip.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetClip
   */
  getClip: {
    methodKind: "unary";
    input: typeof GetClipRequestSchema;
    output: typeof ClipSchema;
  },
  /**
   * Creates a clip with the provided clip ID in the specified channel.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.CreateClip
   */
  createClip: {
    methodKind: "unary";
    input: typeof CreateClipRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes the specified clip job resource. This method only deletes the clip
   * job and does not delete the VOD clip stored in the GCS.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.DeleteClip
   */
  deleteClip: {
    methodKind: "unary";
    input: typeof DeleteClipRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a Asset with the provided unique ID in the specified
   * region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.CreateAsset
   */
  createAsset: {
    methodKind: "unary";
    input: typeof CreateAssetRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes the specified asset if it is not used.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.DeleteAsset
   */
  deleteAsset: {
    methodKind: "unary";
    input: typeof DeleteAssetRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Returns the specified asset.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetAsset
   */
  getAsset: {
    methodKind: "unary";
    input: typeof GetAssetRequestSchema;
    output: typeof AssetSchema;
  },
  /**
   * Returns a list of all assets in the specified region.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.ListAssets
   */
  listAssets: {
    methodKind: "unary";
    input: typeof ListAssetsRequestSchema;
    output: typeof ListAssetsResponseSchema;
  },
  /**
   * Returns the specified pool.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.GetPool
   */
  getPool: {
    methodKind: "unary";
    input: typeof GetPoolRequestSchema;
    output: typeof PoolSchema;
  },
  /**
   * Updates the specified pool.
   *
   * @generated from rpc google.cloud.video.livestream.v1.LivestreamService.UpdatePool
   */
  updatePool: {
    methodKind: "unary";
    input: typeof UpdatePoolRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_video_livestream_v1_service, 0);

