// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/video/livestream/v1/outputs.proto (package google.cloud.video.livestream.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { TimeZone } from "../../../../type/datetime_pb";
import { file_google_type_datetime } from "../../../../type/datetime_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/video/livestream/v1/outputs.proto.
 */
export const file_google_cloud_video_livestream_v1_outputs: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvY2xvdWQvdmlkZW8vbGl2ZXN0cmVhbS92MS9vdXRwdXRzLnByb3RvEiBnb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS52MSKHAgoQRWxlbWVudGFyeVN0cmVhbRILCgNrZXkYBCABKAkSRQoMdmlkZW9fc3RyZWFtGAEgASgLMi0uZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuVmlkZW9TdHJlYW1IABJFCgxhdWRpb19zdHJlYW0YAiABKAsyLS5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS52MS5BdWRpb1N0cmVhbUgAEkMKC3RleHRfc3RyZWFtGAMgASgLMiwuZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuVGV4dFN0cmVhbUgAQhMKEWVsZW1lbnRhcnlfc3RyZWFtIqsBCglNdXhTdHJlYW0SCwoDa2V5GAEgASgJEhEKCWNvbnRhaW5lchgDIAEoCRIaChJlbGVtZW50YXJ5X3N0cmVhbXMYBCADKAkSSwoQc2VnbWVudF9zZXR0aW5ncxgFIAEoCzIxLmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLnYxLlNlZ21lbnRTZXR0aW5ncxIVCg1lbmNyeXB0aW9uX2lkGAYgASgJIs4CCghNYW5pZmVzdBIRCglmaWxlX25hbWUYASABKAkSSgoEdHlwZRgCIAEoDjI3Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLnYxLk1hbmlmZXN0Lk1hbmlmZXN0VHlwZUID4EECEhgKC211eF9zdHJlYW1zGAMgAygJQgPgQQISGQoRbWF4X3NlZ21lbnRfY291bnQYBCABKAUSOAoVc2VnbWVudF9rZWVwX2R1cmF0aW9uGAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEiAKGHVzZV90aW1lY29kZV9hc190aW1lbGluZRgGIAEoCBIQCgNrZXkYByABKAlCA+BBASJACgxNYW5pZmVzdFR5cGUSHQoZTUFOSUZFU1RfVFlQRV9VTlNQRUNJRklFRBAAEgcKA0hMUxABEggKBERBU0gQAiLjAQoLU3ByaXRlU2hlZXQSDgoGZm9ybWF0GAEgASgJEhgKC2ZpbGVfcHJlZml4GAIgASgJQgPgQQISIAoTc3ByaXRlX3dpZHRoX3BpeGVscxgDIAEoBUID4EECEiEKFHNwcml0ZV9oZWlnaHRfcGl4ZWxzGAQgASgFQgPgQQISFAoMY29sdW1uX2NvdW50GAUgASgFEhEKCXJvd19jb3VudBgGIAEoBRIrCghpbnRlcnZhbBgHIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIPCgdxdWFsaXR5GAggASgFIsUDChNQcmVwcm9jZXNzaW5nQ29uZmlnEkoKBWF1ZGlvGAEgASgLMjsuZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuUHJlcHJvY2Vzc2luZ0NvbmZpZy5BdWRpbxJICgRjcm9wGAIgASgLMjouZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuUHJlcHJvY2Vzc2luZ0NvbmZpZy5Dcm9wEkYKA3BhZBgDIAEoCzI5Lmdvb2dsZS5jbG91ZC52aWRlby5saXZlc3RyZWFtLnYxLlByZXByb2Nlc3NpbmdDb25maWcuUGFkGhUKBUF1ZGlvEgwKBGx1ZnMYASABKAEaXAoEQ3JvcBISCgp0b3BfcGl4ZWxzGAEgASgFEhUKDWJvdHRvbV9waXhlbHMYAiABKAUSEwoLbGVmdF9waXhlbHMYAyABKAUSFAoMcmlnaHRfcGl4ZWxzGAQgASgFGlsKA1BhZBISCgp0b3BfcGl4ZWxzGAEgASgFEhUKDWJvdHRvbV9waXhlbHMYAiABKAUSEwoLbGVmdF9waXhlbHMYAyABKAUSFAoMcmlnaHRfcGl4ZWxzGAQgASgFIv8DCgtWaWRlb1N0cmVhbRJPCgRoMjY0GBQgASgLMj8uZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjEuVmlkZW9TdHJlYW0uSDI2NENvZGVjU2V0dGluZ3NIABqMAwoRSDI2NENvZGVjU2V0dGluZ3MSFAoMd2lkdGhfcGl4ZWxzGAEgASgFEhUKDWhlaWdodF9waXhlbHMYAiABKAUSFwoKZnJhbWVfcmF0ZRgDIAEoAUID4EECEhgKC2JpdHJhdGVfYnBzGAQgASgFQgPgQQISFgoOYWxsb3dfb3Blbl9nb3AYBiABKAgSGQoPZ29wX2ZyYW1lX2NvdW50GAcgASgFSAASMQoMZ29wX2R1cmF0aW9uGAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSAASFQoNdmJ2X3NpemVfYml0cxgJIAEoBRIZChF2YnZfZnVsbG5lc3NfYml0cxgKIAEoBRIVCg1lbnRyb3B5X2NvZGVyGAsgASgJEhEKCWJfcHlyYW1pZBgMIAEoCBIVCg1iX2ZyYW1lX2NvdW50GA0gASgFEhMKC2FxX3N0cmVuZ3RoGA4gASgBEg8KB3Byb2ZpbGUYDyABKAkSDAoEdHVuZRgQIAEoCUIKCghnb3BfbW9kZUIQCg5jb2RlY19zZXR0aW5ncyLsAgoLQXVkaW9TdHJlYW0SEAoIdHJhbnNtdXgYCCABKAgSDQoFY29kZWMYASABKAkSGAoLYml0cmF0ZV9icHMYAiABKAVCA+BBAhIVCg1jaGFubmVsX2NvdW50GAMgASgFEhYKDmNoYW5uZWxfbGF5b3V0GAQgAygJEksKB21hcHBpbmcYBSADKAsyOi5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS52MS5BdWRpb1N0cmVhbS5BdWRpb01hcHBpbmcSGQoRc2FtcGxlX3JhdGVfaGVydHoYBiABKAUaigEKDEF1ZGlvTWFwcGluZxIWCglpbnB1dF9rZXkYBiABKAlCA+BBAhIYCgtpbnB1dF90cmFjaxgCIAEoBUID4EECEhoKDWlucHV0X2NoYW5uZWwYAyABKAVCA+BBAhIbCg5vdXRwdXRfY2hhbm5lbBgEIAEoBUID4EECEg8KB2dhaW5fZGIYBSABKAEiIAoKVGV4dFN0cmVhbRISCgVjb2RlYxgBIAEoCUID4EECIkYKD1NlZ21lbnRTZXR0aW5ncxIzChBzZWdtZW50X2R1cmF0aW9uGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIqwCCg5UaW1lY29kZUNvbmZpZxJPCgZzb3VyY2UYASABKA4yPy5nb29nbGUuY2xvdWQudmlkZW8ubGl2ZXN0cmVhbS52MS5UaW1lY29kZUNvbmZpZy5UaW1lY29kZVNvdXJjZRIvCgp1dGNfb2Zmc2V0GAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSAASKgoJdGltZV96b25lGAMgASgLMhUuZ29vZ2xlLnR5cGUuVGltZVpvbmVIACJdCg5UaW1lY29kZVNvdXJjZRIfChtUSU1FQ09ERV9TT1VSQ0VfVU5TUEVDSUZJRUQQABITCg9NRURJQV9USU1FU1RBTVAQARIVChFFTUJFRERFRF9USU1FQ09ERRACQg0KC3RpbWVfb2Zmc2V0QukBCiRjb20uZ29vZ2xlLmNsb3VkLnZpZGVvLmxpdmVzdHJlYW0udjFCDE91dHB1dHNQcm90b1ABWkRjbG91ZC5nb29nbGUuY29tL2dvL3ZpZGVvL2xpdmVzdHJlYW0vYXBpdjEvbGl2ZXN0cmVhbXBiO2xpdmVzdHJlYW1wYqoCIEdvb2dsZS5DbG91ZC5WaWRlby5MaXZlU3RyZWFtLlYxygIgR29vZ2xlXENsb3VkXFZpZGVvXExpdmVTdHJlYW1cVjHqAiRHb29nbGU6OkNsb3VkOjpWaWRlbzo6TGl2ZVN0cmVhbTo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_protobuf_duration, file_google_type_datetime]);

/**
 * Encoding of an input element such as an audio, video, or text track.
 * Elementary streams must be packaged before mapping and sharing between
 * different output formats.
 *
 * @generated from message google.cloud.video.livestream.v1.ElementaryStream
 */
export type ElementaryStream = Message<"google.cloud.video.livestream.v1.ElementaryStream"> & {
  /**
   * A unique key for this elementary stream. The key must be 1-63
   * characters in length. The key must begin and end with a letter (regardless
   * of case) or a number, but can contain dashes or underscores in between.
   *
   * @generated from field: string key = 4;
   */
  key: string;

  /**
   * Required. Encoding of an audio, video, or text track.
   *
   * @generated from oneof google.cloud.video.livestream.v1.ElementaryStream.elementary_stream
   */
  elementaryStream: {
    /**
     * Encoding of a video stream.
     *
     * @generated from field: google.cloud.video.livestream.v1.VideoStream video_stream = 1;
     */
    value: VideoStream;
    case: "videoStream";
  } | {
    /**
     * Encoding of an audio stream.
     *
     * @generated from field: google.cloud.video.livestream.v1.AudioStream audio_stream = 2;
     */
    value: AudioStream;
    case: "audioStream";
  } | {
    /**
     * Encoding of a text stream. For example, closed captions or subtitles.
     *
     * @generated from field: google.cloud.video.livestream.v1.TextStream text_stream = 3;
     */
    value: TextStream;
    case: "textStream";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.video.livestream.v1.ElementaryStream.
 * Use `create(ElementaryStreamSchema)` to create a new message.
 */
export const ElementaryStreamSchema: GenMessage<ElementaryStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 0);

/**
 * Multiplexing settings for output stream.
 *
 * @generated from message google.cloud.video.livestream.v1.MuxStream
 */
export type MuxStream = Message<"google.cloud.video.livestream.v1.MuxStream"> & {
  /**
   * A unique key for this multiplexed stream. The key must be 1-63
   * characters in length. The key must begin and end with a letter (regardless
   * of case) or a number, but can contain dashes or underscores in between.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The container format. The default is `fmp4`.
   *
   * Supported container formats:
   *
   * - `fmp4` - the corresponding file extension is `.m4s`
   * - `ts` - the corresponding file extension is `.ts`
   *
   * @generated from field: string container = 3;
   */
  container: string;

  /**
   * List of `ElementaryStream`
   * [key][google.cloud.video.livestream.v1.ElementaryStream.key]s multiplexed
   * in this stream.
   *
   * - For `fmp4` container, must contain either one video or one audio stream.
   * - For `ts` container, must contain exactly one audio stream and up to one
   * video stream.
   *
   * @generated from field: repeated string elementary_streams = 4;
   */
  elementaryStreams: string[];

  /**
   * Segment settings for `fmp4` and `ts`.
   *
   * @generated from field: google.cloud.video.livestream.v1.SegmentSettings segment_settings = 5;
   */
  segmentSettings?: SegmentSettings;

  /**
   * Identifier of the encryption configuration to use. If omitted, output
   * will be unencrypted.
   *
   * @generated from field: string encryption_id = 6;
   */
  encryptionId: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.MuxStream.
 * Use `create(MuxStreamSchema)` to create a new message.
 */
export const MuxStreamSchema: GenMessage<MuxStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 1);

/**
 * Manifest configuration.
 *
 * @generated from message google.cloud.video.livestream.v1.Manifest
 */
export type Manifest = Message<"google.cloud.video.livestream.v1.Manifest"> & {
  /**
   * The name of the generated file. The default is `manifest` with the
   * extension suffix corresponding to the `Manifest`
   * [type][google.cloud.video.livestream.v1.Manifest.type]. If multiple
   * manifests are added to the channel, each must have a unique file name.
   *
   * @generated from field: string file_name = 1;
   */
  fileName: string;

  /**
   * Required. Type of the manifest, can be `HLS` or `DASH`.
   *
   * @generated from field: google.cloud.video.livestream.v1.Manifest.ManifestType type = 2;
   */
  type: Manifest_ManifestType;

  /**
   * Required. List of `MuxStream`
   * [key][google.cloud.video.livestream.v1.MuxStream.key]s that should appear
   * in this manifest.
   *
   * - For HLS, either `fmp4` or `ts` mux streams can be specified but not
   * mixed.
   * - For DASH, only `fmp4` mux streams can be specified.
   *
   * @generated from field: repeated string mux_streams = 3;
   */
  muxStreams: string[];

  /**
   * Maximum number of segments that this manifest holds. Once the manifest
   * reaches this maximum number of segments, whenever a new segment is added to
   * the manifest, the oldest segment will be removed from the manifest.
   * The minimum value is 3 and the default value is 5.
   *
   * @generated from field: int32 max_segment_count = 4;
   */
  maxSegmentCount: number;

  /**
   * How long to keep a segment on the output Google Cloud Storage bucket after
   * it is removed from the manifest. This field should be large enough to cover
   * the manifest propagation delay. Otherwise, a player could receive 404
   * errors while accessing segments which are listed in the manifest that the
   * player has, but were already deleted from the output Google Cloud Storage
   * bucket. Default value is `60s`.
   *
   * If both segment_keep_duration and
   * [RetentionConfig.retention_window_duration][google.cloud.video.livestream.v1.RetentionConfig.retention_window_duration]
   * are set,
   * [RetentionConfig.retention_window_duration][google.cloud.video.livestream.v1.RetentionConfig.retention_window_duration]
   * is used and segment_keep_duration is ignored.
   *
   * @generated from field: google.protobuf.Duration segment_keep_duration = 5;
   */
  segmentKeepDuration?: Duration;

  /**
   * Whether to use the timecode, as specified in timecode config, when setting:
   *
   * - `availabilityStartTime` attribute in DASH manifests.
   * - `#EXT-X-PROGRAM-DATE-TIME` tag in HLS manifests.
   *
   * If false, ignore the input timecode and use the time from system clock
   * when the manifest is first generated. This is the default behavior.
   *
   * @generated from field: bool use_timecode_as_timeline = 6;
   */
  useTimecodeAsTimeline: boolean;

  /**
   * Optional. A unique key for this manifest.
   *
   * @generated from field: string key = 7;
   */
  key: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.Manifest.
 * Use `create(ManifestSchema)` to create a new message.
 */
export const ManifestSchema: GenMessage<Manifest> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 2);

/**
 * The manifest type can be either `HLS` or `DASH`.
 *
 * @generated from enum google.cloud.video.livestream.v1.Manifest.ManifestType
 */
export enum Manifest_ManifestType {
  /**
   * The manifest type is not specified.
   *
   * @generated from enum value: MANIFEST_TYPE_UNSPECIFIED = 0;
   */
  MANIFEST_TYPE_UNSPECIFIED = 0,

  /**
   * Create an `HLS` manifest. The corresponding file extension is `.m3u8`.
   *
   * @generated from enum value: HLS = 1;
   */
  HLS = 1,

  /**
   * Create a `DASH` manifest. The corresponding file extension is `.mpd`.
   *
   * @generated from enum value: DASH = 2;
   */
  DASH = 2,
}

/**
 * Describes the enum google.cloud.video.livestream.v1.Manifest.ManifestType.
 */
export const Manifest_ManifestTypeSchema: GenEnum<Manifest_ManifestType> = /*@__PURE__*/
  enumDesc(file_google_cloud_video_livestream_v1_outputs, 2, 0);

/**
 * Sprite sheet configuration.
 *
 * @generated from message google.cloud.video.livestream.v1.SpriteSheet
 */
export type SpriteSheet = Message<"google.cloud.video.livestream.v1.SpriteSheet"> & {
  /**
   * Format type. The default is `jpeg`.
   *
   * Supported formats:
   *
   * - `jpeg`
   *
   * @generated from field: string format = 1;
   */
  format: string;

  /**
   * Required. File name prefix for the generated sprite sheets. If multiple
   * sprite sheets are added to the channel, each must have a unique file
   * prefix.
   * Each sprite sheet has an incremental 10-digit zero-padded suffix starting
   * from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
   *
   * @generated from field: string file_prefix = 2;
   */
  filePrefix: string;

  /**
   * Required. The width of the sprite in pixels. Must be an even integer.
   *
   * @generated from field: int32 sprite_width_pixels = 3;
   */
  spriteWidthPixels: number;

  /**
   * Required. The height of the sprite in pixels. Must be an even integer.
   *
   * @generated from field: int32 sprite_height_pixels = 4;
   */
  spriteHeightPixels: number;

  /**
   * The maximum number of sprites per row in a sprite sheet. Valid range is
   * [1, 10] and the default value is 1.
   *
   * @generated from field: int32 column_count = 5;
   */
  columnCount: number;

  /**
   * The maximum number of rows per sprite sheet. When the sprite sheet is full,
   * a new sprite sheet is created. Valid range is [1, 10] and the default value
   * is 1.
   *
   * @generated from field: int32 row_count = 6;
   */
  rowCount: number;

  /**
   * Create sprites at regular intervals. Valid range is [1 second, 1 hour] and
   * the default value is `10s`.
   *
   * @generated from field: google.protobuf.Duration interval = 7;
   */
  interval?: Duration;

  /**
   * The quality of the generated sprite sheet. Enter a value between 1
   * and 100, where 1 is the lowest quality and 100 is the highest quality.
   * The default is 100. A high quality value corresponds to a low image data
   * compression ratio.
   *
   * @generated from field: int32 quality = 8;
   */
  quality: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.SpriteSheet.
 * Use `create(SpriteSheetSchema)` to create a new message.
 */
export const SpriteSheetSchema: GenMessage<SpriteSheet> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 3);

/**
 * Preprocessing configurations.
 *
 * @generated from message google.cloud.video.livestream.v1.PreprocessingConfig
 */
export type PreprocessingConfig = Message<"google.cloud.video.livestream.v1.PreprocessingConfig"> & {
  /**
   * Audio preprocessing configuration.
   *
   * @generated from field: google.cloud.video.livestream.v1.PreprocessingConfig.Audio audio = 1;
   */
  audio?: PreprocessingConfig_Audio;

  /**
   * Specify the video cropping configuration.
   *
   * @generated from field: google.cloud.video.livestream.v1.PreprocessingConfig.Crop crop = 2;
   */
  crop?: PreprocessingConfig_Crop;

  /**
   * Specify the video pad filter configuration.
   *
   * @generated from field: google.cloud.video.livestream.v1.PreprocessingConfig.Pad pad = 3;
   */
  pad?: PreprocessingConfig_Pad;
};

/**
 * Describes the message google.cloud.video.livestream.v1.PreprocessingConfig.
 * Use `create(PreprocessingConfigSchema)` to create a new message.
 */
export const PreprocessingConfigSchema: GenMessage<PreprocessingConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 4);

/**
 * Audio preprocessing configuration.
 *
 * @generated from message google.cloud.video.livestream.v1.PreprocessingConfig.Audio
 */
export type PreprocessingConfig_Audio = Message<"google.cloud.video.livestream.v1.PreprocessingConfig.Audio"> & {
  /**
   * Specify audio loudness normalization in loudness units relative to full
   * scale (LUFS). Enter a value between -24 and 0 according to the following:
   *
   * - -24 is the Advanced Television Systems Committee (ATSC A/85)
   * - -23 is the EU R128 broadcast standard
   * - -19 is the prior standard for online mono audio
   * - -18 is the ReplayGain standard
   * - -16 is the prior standard for stereo audio
   * - -14 is the new online audio standard recommended by Spotify, as well as
   * Amazon Echo
   * - 0 disables normalization. The default is 0.
   *
   * @generated from field: double lufs = 1;
   */
  lufs: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.PreprocessingConfig.Audio.
 * Use `create(PreprocessingConfig_AudioSchema)` to create a new message.
 */
export const PreprocessingConfig_AudioSchema: GenMessage<PreprocessingConfig_Audio> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 4, 0);

/**
 * Video cropping configuration for the input video. The cropped input video
 * is scaled to match the output resolution.
 *
 * @generated from message google.cloud.video.livestream.v1.PreprocessingConfig.Crop
 */
export type PreprocessingConfig_Crop = Message<"google.cloud.video.livestream.v1.PreprocessingConfig.Crop"> & {
  /**
   * The number of pixels to crop from the top. The default is 0.
   *
   * @generated from field: int32 top_pixels = 1;
   */
  topPixels: number;

  /**
   * The number of pixels to crop from the bottom. The default is 0.
   *
   * @generated from field: int32 bottom_pixels = 2;
   */
  bottomPixels: number;

  /**
   * The number of pixels to crop from the left. The default is 0.
   *
   * @generated from field: int32 left_pixels = 3;
   */
  leftPixels: number;

  /**
   * The number of pixels to crop from the right. The default is 0.
   *
   * @generated from field: int32 right_pixels = 4;
   */
  rightPixels: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.PreprocessingConfig.Crop.
 * Use `create(PreprocessingConfig_CropSchema)` to create a new message.
 */
export const PreprocessingConfig_CropSchema: GenMessage<PreprocessingConfig_Crop> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 4, 1);

/**
 * Pad filter configuration for the input video. The padded input video
 * is scaled after padding with black to match the output resolution.
 *
 * @generated from message google.cloud.video.livestream.v1.PreprocessingConfig.Pad
 */
export type PreprocessingConfig_Pad = Message<"google.cloud.video.livestream.v1.PreprocessingConfig.Pad"> & {
  /**
   * The number of pixels to add to the top. The default is 0.
   *
   * @generated from field: int32 top_pixels = 1;
   */
  topPixels: number;

  /**
   * The number of pixels to add to the bottom. The default is 0.
   *
   * @generated from field: int32 bottom_pixels = 2;
   */
  bottomPixels: number;

  /**
   * The number of pixels to add to the left. The default is 0.
   *
   * @generated from field: int32 left_pixels = 3;
   */
  leftPixels: number;

  /**
   * The number of pixels to add to the right. The default is 0.
   *
   * @generated from field: int32 right_pixels = 4;
   */
  rightPixels: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.PreprocessingConfig.Pad.
 * Use `create(PreprocessingConfig_PadSchema)` to create a new message.
 */
export const PreprocessingConfig_PadSchema: GenMessage<PreprocessingConfig_Pad> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 4, 2);

/**
 * Video stream resource.
 *
 * @generated from message google.cloud.video.livestream.v1.VideoStream
 */
export type VideoStream = Message<"google.cloud.video.livestream.v1.VideoStream"> & {
  /**
   * Codec settings.
   *
   * @generated from oneof google.cloud.video.livestream.v1.VideoStream.codec_settings
   */
  codecSettings: {
    /**
     * H264 codec settings.
     *
     * @generated from field: google.cloud.video.livestream.v1.VideoStream.H264CodecSettings h264 = 20;
     */
    value: VideoStream_H264CodecSettings;
    case: "h264";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.video.livestream.v1.VideoStream.
 * Use `create(VideoStreamSchema)` to create a new message.
 */
export const VideoStreamSchema: GenMessage<VideoStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 5);

/**
 * H264 codec settings.
 *
 * @generated from message google.cloud.video.livestream.v1.VideoStream.H264CodecSettings
 */
export type VideoStream_H264CodecSettings = Message<"google.cloud.video.livestream.v1.VideoStream.H264CodecSettings"> & {
  /**
   * Required. The width of the video in pixels. Must be an even integer.
   * Valid range is [320, 1920].
   *
   * @generated from field: int32 width_pixels = 1;
   */
  widthPixels: number;

  /**
   * Required. The height of the video in pixels. Must be an even integer.
   * Valid range is [180, 1080].
   *
   * @generated from field: int32 height_pixels = 2;
   */
  heightPixels: number;

  /**
   * Required. The target video frame rate in frames per second (FPS). Must be
   * less than or equal to 60. Will default to the input frame rate if larger
   * than the input frame rate. The API will generate an output FPS that is
   * divisible by the input FPS, and smaller or equal to the target FPS. See
   * [Calculating frame
   * rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
   * more information.
   *
   * @generated from field: double frame_rate = 3;
   */
  frameRate: number;

  /**
   * Required. The video bitrate in bits per second. Minimum value is 10,000.
   *
   * - For SD resolution (< 720p), must be <= 3,000,000 (3 Mbps).
   * - For HD resolution (<= 1080p), must be <= 15,000,000 (15 Mbps).
   *
   * @generated from field: int32 bitrate_bps = 4;
   */
  bitrateBps: number;

  /**
   * Specifies whether an open Group of Pictures (GOP) structure should be
   * allowed or not. The default is `false`.
   *
   * @generated from field: bool allow_open_gop = 6;
   */
  allowOpenGop: boolean;

  /**
   * GOP mode can be either by frame count or duration.
   *
   * @generated from oneof google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.gop_mode
   */
  gopMode: {
    /**
     * Select the GOP size based on the specified frame count.
     * If GOP frame count is set instead of GOP duration, GOP duration will be
     * calculated by `gopFrameCount`/`frameRate`. The calculated GOP duration
     * must satisfy the limitations on `gopDuration` as well.
     * Valid range is [60, 600].
     *
     * @generated from field: int32 gop_frame_count = 7;
     */
    value: number;
    case: "gopFrameCount";
  } | {
    /**
     * Select the GOP size based on the specified duration. The default is
     * `2s`. Note that `gopDuration` must be less than or equal to
     * [segment_duration][google.cloud.video.livestream.v1.SegmentSettings.segment_duration],
     * and
     * [segment_duration][google.cloud.video.livestream.v1.SegmentSettings.segment_duration]
     * must be divisible by `gopDuration`. Valid range is [2s, 20s].
     *
     * All video streams in the same channel must have the same GOP size.
     *
     * @generated from field: google.protobuf.Duration gop_duration = 8;
     */
    value: Duration;
    case: "gopDuration";
  } | { case: undefined; value?: undefined };

  /**
   * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be
   * greater than zero. The default is equal to
   * [bitrate_bps][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.bitrate_bps].
   *
   * @generated from field: int32 vbv_size_bits = 9;
   */
  vbvSizeBits: number;

  /**
   * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
   * Must be greater than zero. The default is equal to 90% of
   * [vbv_size_bits][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.vbv_size_bits].
   *
   * @generated from field: int32 vbv_fullness_bits = 10;
   */
  vbvFullnessBits: number;

  /**
   * The entropy coder to use. The default is `cabac`.
   *
   * Supported entropy coders:
   *
   * - `cavlc`
   * - `cabac`
   *
   * @generated from field: string entropy_coder = 11;
   */
  entropyCoder: string;

  /**
   * Allow B-pyramid for reference frame selection. This may not be supported
   * on all decoders. The default is `false`.
   *
   * @generated from field: bool b_pyramid = 12;
   */
  bPyramid: boolean;

  /**
   * The number of consecutive B-frames. Must be greater than or equal to
   * zero. Must be less than
   * [gop_frame_count][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.gop_frame_count]
   * if set. The default is 0.
   *
   * @generated from field: int32 b_frame_count = 13;
   */
  bFrameCount: number;

  /**
   * Specify the intensity of the adaptive quantizer (AQ). Must be between 0
   * and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A
   * higher value equals a lower bitrate but smoother image. The default is 0.
   *
   * @generated from field: double aq_strength = 14;
   */
  aqStrength: number;

  /**
   * Enforces the specified codec profile. The following profiles are
   * supported:
   *
   * *   `baseline`
   * *   `main` (default)
   * *   `high`
   *
   * The available options are [FFmpeg-compatible Profile
   * Options](https://trac.ffmpeg.org/wiki/Encode/H.264#Profile).
   * Note that certain values for this field may cause the
   * transcoder to override other fields you set in the
   * [H264CodecSettings][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings]
   * message.
   *
   * @generated from field: string profile = 15;
   */
  profile: string;

  /**
   * Enforces the specified codec tune. The available options are
   * [FFmpeg-compatible Encode
   * Options](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune)
   * Note that certain values for this field may cause the transcoder to
   * override other fields you set in the
   * [H264CodecSettings][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings]
   * message.
   *
   * @generated from field: string tune = 16;
   */
  tune: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.
 * Use `create(VideoStream_H264CodecSettingsSchema)` to create a new message.
 */
export const VideoStream_H264CodecSettingsSchema: GenMessage<VideoStream_H264CodecSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 5, 0);

/**
 * Audio stream resource.
 *
 * @generated from message google.cloud.video.livestream.v1.AudioStream
 */
export type AudioStream = Message<"google.cloud.video.livestream.v1.AudioStream"> & {
  /**
   * Specifies whether pass through (transmuxing) is enabled or not.
   * If set to `true`, the rest of the settings, other than `mapping`, will be
   * ignored. The default is `false`.
   *
   * @generated from field: bool transmux = 8;
   */
  transmux: boolean;

  /**
   * The codec for this audio stream. The default is `aac`.
   *
   * Supported audio codecs:
   *
   * - `aac`
   *
   * @generated from field: string codec = 1;
   */
  codec: string;

  /**
   * Required. Audio bitrate in bits per second. Must be between 1 and
   * 10,000,000.
   *
   * @generated from field: int32 bitrate_bps = 2;
   */
  bitrateBps: number;

  /**
   * Number of audio channels. Must be between 1 and 6. The default is 2.
   *
   * @generated from field: int32 channel_count = 3;
   */
  channelCount: number;

  /**
   * A list of channel names specifying layout of the audio channels.
   * This only affects the metadata embedded in the container headers, if
   * supported by the specified format. The default is `[fl, fr]`.
   *
   * Supported channel names:
   *
   * - `fl` - Front left channel
   * - `fr` - Front right channel
   * - `sl` - Side left channel
   * - `sr` - Side right channel
   * - `fc` - Front center channel
   * - `lfe` - Low frequency
   *
   * @generated from field: repeated string channel_layout = 4;
   */
  channelLayout: string[];

  /**
   * The mapping for the input streams and audio channels.
   *
   * @generated from field: repeated google.cloud.video.livestream.v1.AudioStream.AudioMapping mapping = 5;
   */
  mapping: AudioStream_AudioMapping[];

  /**
   * The audio sample rate in Hertz. The default is 48000 Hertz.
   *
   * @generated from field: int32 sample_rate_hertz = 6;
   */
  sampleRateHertz: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.AudioStream.
 * Use `create(AudioStreamSchema)` to create a new message.
 */
export const AudioStreamSchema: GenMessage<AudioStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 6);

/**
 * The mapping for the input streams and audio channels.
 *
 * @generated from message google.cloud.video.livestream.v1.AudioStream.AudioMapping
 */
export type AudioStream_AudioMapping = Message<"google.cloud.video.livestream.v1.AudioStream.AudioMapping"> & {
  /**
   * Required. The `Channel`
   * [InputAttachment.key][google.cloud.video.livestream.v1.InputAttachment.key]
   * that identifies the input that this audio mapping applies to. If an
   * active input doesn't have an audio mapping, the primary audio track in
   * the input stream will be selected.
   *
   * @generated from field: string input_key = 6;
   */
  inputKey: string;

  /**
   * Required. The zero-based index of the track in the input stream.
   * All [mapping][google.cloud.video.livestream.v1.AudioStream.mapping]s in
   * the same [AudioStream][google.cloud.video.livestream.v1.AudioStream] must
   * have the same input track.
   *
   * @generated from field: int32 input_track = 2;
   */
  inputTrack: number;

  /**
   * Required. The zero-based index of the channel in the input stream.
   *
   * @generated from field: int32 input_channel = 3;
   */
  inputChannel: number;

  /**
   * Required. The zero-based index of the channel in the output audio stream.
   * Must be consistent with the
   * [input_channel][google.cloud.video.livestream.v1.AudioStream.AudioMapping.input_channel].
   *
   * @generated from field: int32 output_channel = 4;
   */
  outputChannel: number;

  /**
   * Audio volume control in dB. Negative values decrease volume,
   * positive values increase. The default is 0.
   *
   * @generated from field: double gain_db = 5;
   */
  gainDb: number;
};

/**
 * Describes the message google.cloud.video.livestream.v1.AudioStream.AudioMapping.
 * Use `create(AudioStream_AudioMappingSchema)` to create a new message.
 */
export const AudioStream_AudioMappingSchema: GenMessage<AudioStream_AudioMapping> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 6, 0);

/**
 * Encoding of a text stream. For example, closed captions or subtitles.
 *
 * @generated from message google.cloud.video.livestream.v1.TextStream
 */
export type TextStream = Message<"google.cloud.video.livestream.v1.TextStream"> & {
  /**
   * Required. The codec for this text stream.
   *
   * Supported text codecs:
   *
   * - `cea608`
   * - `cea708`
   *
   * @generated from field: string codec = 1;
   */
  codec: string;
};

/**
 * Describes the message google.cloud.video.livestream.v1.TextStream.
 * Use `create(TextStreamSchema)` to create a new message.
 */
export const TextStreamSchema: GenMessage<TextStream> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 7);

/**
 * Segment settings for `fmp4` and `ts`.
 *
 * @generated from message google.cloud.video.livestream.v1.SegmentSettings
 */
export type SegmentSettings = Message<"google.cloud.video.livestream.v1.SegmentSettings"> & {
  /**
   * Duration of the segments in seconds. The default is `6s`. Note that
   * `segmentDuration` must be greater than or equal to
   * [gop_duration][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.gop_duration],
   * and `segmentDuration` must be divisible by
   * [gop_duration][google.cloud.video.livestream.v1.VideoStream.H264CodecSettings.gop_duration].
   * Valid range is [2s, 20s].
   *
   * All [mux_streams][google.cloud.video.livestream.v1.Manifest.mux_streams] in
   * the same manifest must have the same segment duration.
   *
   * @generated from field: google.protobuf.Duration segment_duration = 1;
   */
  segmentDuration?: Duration;
};

/**
 * Describes the message google.cloud.video.livestream.v1.SegmentSettings.
 * Use `create(SegmentSettingsSchema)` to create a new message.
 */
export const SegmentSettingsSchema: GenMessage<SegmentSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 8);

/**
 * Timecode configuration.
 *
 * @generated from message google.cloud.video.livestream.v1.TimecodeConfig
 */
export type TimecodeConfig = Message<"google.cloud.video.livestream.v1.TimecodeConfig"> & {
  /**
   * The source of the timecode that will later be used in outputs/manifests.
   * It determines the initial timecode/timestamp (first frame) of output
   * streams.
   *
   * @generated from field: google.cloud.video.livestream.v1.TimecodeConfig.TimecodeSource source = 1;
   */
  source: TimecodeConfig_TimecodeSource;

  /**
   * For EMBEDDED_TIMECODE source only.
   * Used to interpret the embedded timecode (which contains only the time part
   * and no date). We assume all inputs are live.
   *
   * @generated from oneof google.cloud.video.livestream.v1.TimecodeConfig.time_offset
   */
  timeOffset: {
    /**
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     *
     * @generated from field: google.protobuf.Duration utc_offset = 2;
     */
    value: Duration;
    case: "utcOffset";
  } | {
    /**
     * Time zone e.g. "America/Los_Angeles".
     *
     * @generated from field: google.type.TimeZone time_zone = 3;
     */
    value: TimeZone;
    case: "timeZone";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.video.livestream.v1.TimecodeConfig.
 * Use `create(TimecodeConfigSchema)` to create a new message.
 */
export const TimecodeConfigSchema: GenMessage<TimecodeConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_video_livestream_v1_outputs, 9);

/**
 * The source of timecode.
 *
 * @generated from enum google.cloud.video.livestream.v1.TimecodeConfig.TimecodeSource
 */
export enum TimecodeConfig_TimecodeSource {
  /**
   * The timecode source is not specified.
   *
   * @generated from enum value: TIMECODE_SOURCE_UNSPECIFIED = 0;
   */
  TIMECODE_SOURCE_UNSPECIFIED = 0,

  /**
   * Use input media timestamp.
   *
   * @generated from enum value: MEDIA_TIMESTAMP = 1;
   */
  MEDIA_TIMESTAMP = 1,

  /**
   * Use input embedded timecode e.g. picture timing SEI message.
   *
   * @generated from enum value: EMBEDDED_TIMECODE = 2;
   */
  EMBEDDED_TIMECODE = 2,
}

/**
 * Describes the enum google.cloud.video.livestream.v1.TimecodeConfig.TimecodeSource.
 */
export const TimecodeConfig_TimecodeSourceSchema: GenEnum<TimecodeConfig_TimecodeSource> = /*@__PURE__*/
  enumDesc(file_google_cloud_video_livestream_v1_outputs, 9, 0);

