// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/tasks/v2beta3/queue.proto (package google.cloud.tasks.v2beta3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { AppEngineHttpQueue, HttpTarget } from "./target_pb";
import { file_google_cloud_tasks_v2beta3_target } from "./target_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/tasks/v2beta3/queue.proto.
 */
export const file_google_cloud_tasks_v2beta3_queue: GenFile = /*@__PURE__*/
  fileDesc("CiZnb29nbGUvY2xvdWQvdGFza3MvdjJiZXRhMy9xdWV1ZS5wcm90bxIaZ29vZ2xlLmNsb3VkLnRhc2tzLnYyYmV0YTMinAcKBVF1ZXVlEgwKBG5hbWUYASABKAkSTwoVYXBwX2VuZ2luZV9odHRwX3F1ZXVlGAMgASgLMi4uZ29vZ2xlLmNsb3VkLnRhc2tzLnYyYmV0YTMuQXBwRW5naW5lSHR0cFF1ZXVlSAASOwoLaHR0cF90YXJnZXQYDSABKAsyJi5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhMy5IdHRwVGFyZ2V0EjsKC3JhdGVfbGltaXRzGAQgASgLMiYuZ29vZ2xlLmNsb3VkLnRhc2tzLnYyYmV0YTMuUmF0ZUxpbWl0cxI9CgxyZXRyeV9jb25maWcYBSABKAsyJy5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhMy5SZXRyeUNvbmZpZxI2CgVzdGF0ZRgGIAEoDjInLmdvb2dsZS5jbG91ZC50YXNrcy52MmJldGEzLlF1ZXVlLlN0YXRlEi4KCnB1cmdlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisKCHRhc2tfdHRsGAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjAKDXRvbWJzdG9uZV90dGwYCSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SWAoac3RhY2tkcml2ZXJfbG9nZ2luZ19jb25maWcYCiABKAsyNC5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhMy5TdGFja2RyaXZlckxvZ2dpbmdDb25maWcSOQoEdHlwZRgLIAEoDjImLmdvb2dsZS5jbG91ZC50YXNrcy52MmJldGEzLlF1ZXVlLlR5cGVCA+BBBRI6CgVzdGF0cxgMIAEoCzImLmdvb2dsZS5jbG91ZC50YXNrcy52MmJldGEzLlF1ZXVlU3RhdHNCA+BBAyJFCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgsKB1JVTk5JTkcQARIKCgZQQVVTRUQQAhIMCghESVNBQkxFRBADIjAKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEggKBFBVTEwQARIICgRQVVNIEAI6XOpBWQofY2xvdWR0YXNrcy5nb29nbGVhcGlzLmNvbS9RdWV1ZRI2cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3F1ZXVlcy97cXVldWV9QgwKCnF1ZXVlX3R5cGUiagoKUmF0ZUxpbWl0cxIhChltYXhfZGlzcGF0Y2hlc19wZXJfc2Vjb25kGAEgASgBEhYKDm1heF9idXJzdF9zaXplGAIgASgFEiEKGW1heF9jb25jdXJyZW50X2Rpc3BhdGNoZXMYAyABKAUi0QEKC1JldHJ5Q29uZmlnEhQKDG1heF9hdHRlbXB0cxgBIAEoBRI1ChJtYXhfcmV0cnlfZHVyYXRpb24YAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SLgoLbWluX2JhY2tvZmYYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SLgoLbWF4X2JhY2tvZmYYBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SFQoNbWF4X2RvdWJsaW5ncxgFIAEoBSIyChhTdGFja2RyaXZlckxvZ2dpbmdDb25maWcSFgoOc2FtcGxpbmdfcmF0aW8YASABKAEi6AEKClF1ZXVlU3RhdHMSGAoLdGFza3NfY291bnQYASABKANCA+BBAxJGCh1vbGRlc3RfZXN0aW1hdGVkX2Fycml2YWxfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxInChpleGVjdXRlZF9sYXN0X21pbnV0ZV9jb3VudBgDIAEoA0ID4EEDEigKG2NvbmN1cnJlbnRfZGlzcGF0Y2hlc19jb3VudBgEIAEoA0ID4EEDEiUKGGVmZmVjdGl2ZV9leGVjdXRpb25fcmF0ZRgFIAEoAUID4EEDQnMKHmNvbS5nb29nbGUuY2xvdWQudGFza3MudjJiZXRhM0IKUXVldWVQcm90b1ABWkNjbG91ZC5nb29nbGUuY29tL2dvL2Nsb3VkdGFza3MvYXBpdjJiZXRhMy9jbG91ZHRhc2tzcGI7Y2xvdWR0YXNrc3BiYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_tasks_v2beta3_target, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * A queue is a container of related tasks. Queues are configured to manage
 * how those tasks are dispatched. Configurable properties include rate limits,
 * retry options, queue types, and others.
 *
 * @generated from message google.cloud.tasks.v2beta3.Queue
 */
export type Queue = Message<"google.cloud.tasks.v2beta3.Queue"> & {
  /**
   * Caller-specified and required in
   * [CreateQueue][google.cloud.tasks.v2beta3.CloudTasks.CreateQueue], after
   * which it becomes output only.
   *
   * The queue name.
   *
   * The queue name must have the following format:
   * `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID`
   *
   * * `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]),
   *    hyphens (-), colons (:), or periods (.).
   *    For more information, see
   *    [Identifying
   *    projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
   * * `LOCATION_ID` is the canonical ID for the queue's location.
   *    The list of available locations can be obtained by calling
   *    [ListLocations][google.cloud.location.Locations.ListLocations].
   *    For more information, see https://cloud.google.com/about/locations/.
   * * `QUEUE_ID` can contain letters ([A-Za-z]), numbers ([0-9]), or
   *   hyphens (-). The maximum length is 100 characters.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof google.cloud.tasks.v2beta3.Queue.queue_type
   */
  queueType: {
    /**
     * [AppEngineHttpQueue][google.cloud.tasks.v2beta3.AppEngineHttpQueue]
     * settings apply only to [App Engine
     * tasks][google.cloud.tasks.v2beta3.AppEngineHttpRequest] in this queue.
     * [Http tasks][google.cloud.tasks.v2beta3.HttpRequest] are not affected by
     * this proto.
     *
     * @generated from field: google.cloud.tasks.v2beta3.AppEngineHttpQueue app_engine_http_queue = 3;
     */
    value: AppEngineHttpQueue;
    case: "appEngineHttpQueue";
  } | { case: undefined; value?: undefined };

  /**
   * Modifies HTTP target for HTTP tasks.
   *
   * @generated from field: google.cloud.tasks.v2beta3.HttpTarget http_target = 13;
   */
  httpTarget?: HttpTarget;

  /**
   * Rate limits for task dispatches.
   *
   * [rate_limits][google.cloud.tasks.v2beta3.Queue.rate_limits] and
   * [retry_config][google.cloud.tasks.v2beta3.Queue.retry_config] are related
   * because they both control task attempts. However they control task attempts
   * in different ways:
   *
   * * [rate_limits][google.cloud.tasks.v2beta3.Queue.rate_limits] controls the
   * total rate of
   *   dispatches from a queue (i.e. all traffic dispatched from the
   *   queue, regardless of whether the dispatch is from a first
   *   attempt or a retry).
   * * [retry_config][google.cloud.tasks.v2beta3.Queue.retry_config] controls
   * what happens to
   *   particular a task after its first attempt fails. That is,
   *   [retry_config][google.cloud.tasks.v2beta3.Queue.retry_config] controls
   *   task retries (the second attempt, third attempt, etc).
   *
   * The queue's actual dispatch rate is the result of:
   *
   * * Number of tasks in the queue
   * * User-specified throttling:
   * [rate_limits][google.cloud.tasks.v2beta3.Queue.rate_limits],
   *   [retry_config][google.cloud.tasks.v2beta3.Queue.retry_config], and the
   *   [queue's state][google.cloud.tasks.v2beta3.Queue.state].
   * * System throttling due to `429` (Too Many Requests) or `503` (Service
   *   Unavailable) responses from the worker, high error rates, or to smooth
   *   sudden large traffic spikes.
   *
   * @generated from field: google.cloud.tasks.v2beta3.RateLimits rate_limits = 4;
   */
  rateLimits?: RateLimits;

  /**
   * Settings that determine the retry behavior.
   *
   * * For tasks created using Cloud Tasks: the queue-level retry settings
   *   apply to all tasks in the queue that were created using Cloud Tasks.
   *   Retry settings cannot be set on individual tasks.
   * * For tasks created using the App Engine SDK: the queue-level retry
   *   settings apply to all tasks in the queue which do not have retry settings
   *   explicitly set on the task and were created by the App Engine SDK. See
   *   [App Engine
   *   documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
   *
   * @generated from field: google.cloud.tasks.v2beta3.RetryConfig retry_config = 5;
   */
  retryConfig?: RetryConfig;

  /**
   * Output only. The state of the queue.
   *
   * `state` can only be changed by called
   * [PauseQueue][google.cloud.tasks.v2beta3.CloudTasks.PauseQueue],
   * [ResumeQueue][google.cloud.tasks.v2beta3.CloudTasks.ResumeQueue], or
   * uploading
   * [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref).
   * [UpdateQueue][google.cloud.tasks.v2beta3.CloudTasks.UpdateQueue] cannot be
   * used to change `state`.
   *
   * @generated from field: google.cloud.tasks.v2beta3.Queue.State state = 6;
   */
  state: Queue_State;

  /**
   * Output only. The last time this queue was purged.
   *
   * All tasks that were [created][google.cloud.tasks.v2beta3.Task.create_time]
   * before this time were purged.
   *
   * A queue can be purged using
   * [PurgeQueue][google.cloud.tasks.v2beta3.CloudTasks.PurgeQueue], the [App
   * Engine Task Queue SDK, or the Cloud
   * Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
   *
   * Purge time will be truncated to the nearest microsecond. Purge
   * time will be unset if the queue has never been purged.
   *
   * @generated from field: google.protobuf.Timestamp purge_time = 7;
   */
  purgeTime?: Timestamp;

  /**
   * The maximum amount of time that a task will be retained in
   * this queue.
   *
   * Queues created by Cloud Tasks have a default `task_ttl` of 31 days.
   * After a task has lived for `task_ttl`, the task will be deleted
   * regardless of whether it was dispatched or not.
   *
   * The `task_ttl` for queues created via queue.yaml/xml is equal to the
   * maximum duration because there is a
   * [storage quota](https://cloud.google.com/appengine/quotas#Task_Queue) for
   * these queues. To view the maximum valid duration, see the documentation for
   * [Duration][google.protobuf.Duration].
   *
   * @generated from field: google.protobuf.Duration task_ttl = 8;
   */
  taskTtl?: Duration;

  /**
   * The task tombstone time to live (TTL).
   *
   * After a task is deleted or executed, the task's tombstone is
   * retained for the length of time specified by `tombstone_ttl`.
   * The tombstone is used by task de-duplication; another task with the same
   * name can't be created until the tombstone has expired. For more information
   * about task de-duplication, see the documentation for
   * [CreateTaskRequest][google.cloud.tasks.v2beta3.CreateTaskRequest.task].
   *
   * Queues created by Cloud Tasks have a default `tombstone_ttl` of 1 hour.
   *
   * @generated from field: google.protobuf.Duration tombstone_ttl = 9;
   */
  tombstoneTtl?: Duration;

  /**
   * Configuration options for writing logs to
   * [Stackdriver Logging](https://cloud.google.com/logging/docs/). If this
   * field is unset, then no logs are written.
   *
   * @generated from field: google.cloud.tasks.v2beta3.StackdriverLoggingConfig stackdriver_logging_config = 10;
   */
  stackdriverLoggingConfig?: StackdriverLoggingConfig;

  /**
   * Immutable. The type of a queue (push or pull).
   *
   * `Queue.type` is an immutable property of the queue that is set at the queue
   * creation time. When left unspecified, the default value of `PUSH` is
   * selected.
   *
   * @generated from field: google.cloud.tasks.v2beta3.Queue.Type type = 11;
   */
  type: Queue_Type;

  /**
   * Output only. The realtime, informational statistics for a queue. In order
   * to receive the statistics the caller should include this field in the
   * FieldMask.
   *
   * @generated from field: google.cloud.tasks.v2beta3.QueueStats stats = 12;
   */
  stats?: QueueStats;
};

/**
 * Describes the message google.cloud.tasks.v2beta3.Queue.
 * Use `create(QueueSchema)` to create a new message.
 */
export const QueueSchema: GenMessage<Queue> = /*@__PURE__*/
  messageDesc(file_google_cloud_tasks_v2beta3_queue, 0);

/**
 * State of the queue.
 *
 * @generated from enum google.cloud.tasks.v2beta3.Queue.State
 */
export enum Queue_State {
  /**
   * Unspecified state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The queue is running. Tasks can be dispatched.
   *
   * If the queue was created using Cloud Tasks and the queue has
   * had no activity (method calls or task dispatches) for 30 days,
   * the queue may take a few minutes to re-activate. Some method
   * calls may return [NOT_FOUND][google.rpc.Code.NOT_FOUND] and
   * tasks may not be dispatched for a few minutes until the queue
   * has been re-activated.
   *
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * Tasks are paused by the user. If the queue is paused then Cloud
   * Tasks will stop delivering tasks from it, but more tasks can
   * still be added to it by the user.
   *
   * @generated from enum value: PAUSED = 2;
   */
  PAUSED = 2,

  /**
   * The queue is disabled.
   *
   * A queue becomes `DISABLED` when
   * [queue.yaml](https://cloud.google.com/appengine/docs/python/config/queueref)
   * or
   * [queue.xml](https://cloud.google.com/appengine/docs/standard/java/config/queueref)
   * is uploaded which does not contain the queue. You cannot directly disable
   * a queue.
   *
   * When a queue is disabled, tasks can still be added to a queue
   * but the tasks are not dispatched.
   *
   * To permanently delete this queue and all of its tasks, call
   * [DeleteQueue][google.cloud.tasks.v2beta3.CloudTasks.DeleteQueue].
   *
   * @generated from enum value: DISABLED = 3;
   */
  DISABLED = 3,
}

/**
 * Describes the enum google.cloud.tasks.v2beta3.Queue.State.
 */
export const Queue_StateSchema: GenEnum<Queue_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_tasks_v2beta3_queue, 0, 0);

/**
 * The type of the queue.
 *
 * @generated from enum google.cloud.tasks.v2beta3.Queue.Type
 */
export enum Queue_Type {
  /**
   * Default value.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * A pull queue.
   *
   * @generated from enum value: PULL = 1;
   */
  PULL = 1,

  /**
   * A push queue.
   *
   * @generated from enum value: PUSH = 2;
   */
  PUSH = 2,
}

/**
 * Describes the enum google.cloud.tasks.v2beta3.Queue.Type.
 */
export const Queue_TypeSchema: GenEnum<Queue_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_tasks_v2beta3_queue, 0, 1);

/**
 * Rate limits.
 *
 * This message determines the maximum rate that tasks can be dispatched by a
 * queue, regardless of whether the dispatch is a first task attempt or a retry.
 *
 * Note: The debugging command,
 * [RunTask][google.cloud.tasks.v2beta3.CloudTasks.RunTask], will run a task
 * even if the queue has reached its
 * [RateLimits][google.cloud.tasks.v2beta3.RateLimits].
 *
 * @generated from message google.cloud.tasks.v2beta3.RateLimits
 */
export type RateLimits = Message<"google.cloud.tasks.v2beta3.RateLimits"> & {
  /**
   * The maximum rate at which tasks are dispatched from this queue.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   * * For [App Engine queues][google.cloud.tasks.v2beta3.AppEngineHttpQueue],
   * the maximum allowed value
   *   is 500.
   *
   *
   * This field has the same meaning as
   * [rate in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
   *
   * @generated from field: double max_dispatches_per_second = 1;
   */
  maxDispatchesPerSecond: number;

  /**
   * The max burst size.
   *
   * Max burst size limits how fast tasks in queue are processed when
   * many tasks are in the queue and the rate is high. This field
   * allows the queue to have a high rate so processing starts shortly
   * after a task is enqueued, but still limits resource usage when
   * many tasks are enqueued in a short period of time.
   *
   * The [token bucket](https://wikipedia.org/wiki/Token_Bucket)
   * algorithm is used to control the rate of task dispatches. Each
   * queue has a token bucket that holds tokens, up to the maximum
   * specified by `max_burst_size`. Each time a task is dispatched, a
   * token is removed from the bucket. Tasks will be dispatched until
   * the queue's bucket runs out of tokens. The bucket will be
   * continuously refilled with new tokens based on
   * [max_dispatches_per_second][google.cloud.tasks.v2beta3.RateLimits.max_dispatches_per_second].
   *
   * The default value of `max_burst_size` is picked by Cloud Tasks
   * based on the value of
   * [max_dispatches_per_second][google.cloud.tasks.v2beta3.RateLimits.max_dispatches_per_second].
   *
   * The maximum value of `max_burst_size` is 500.
   *
   * For App Engine queues that were created or updated using
   * `queue.yaml/xml`, `max_burst_size` is equal to
   * [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size).
   * If
   * [UpdateQueue][google.cloud.tasks.v2beta3.CloudTasks.UpdateQueue] is called
   * on a queue without explicitly setting a value for `max_burst_size`,
   * `max_burst_size` value will get updated if
   * [UpdateQueue][google.cloud.tasks.v2beta3.CloudTasks.UpdateQueue] is
   * updating
   * [max_dispatches_per_second][google.cloud.tasks.v2beta3.RateLimits.max_dispatches_per_second].
   *
   *
   * @generated from field: int32 max_burst_size = 2;
   */
  maxBurstSize: number;

  /**
   * The maximum number of concurrent tasks that Cloud Tasks allows
   * to be dispatched for this queue. After this threshold has been
   * reached, Cloud Tasks stops dispatching tasks until the number of
   * concurrent requests decreases.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   *
   * The maximum allowed value is 5,000.
   *
   *
   * This field has the same meaning as
   * [max_concurrent_requests in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
   *
   * @generated from field: int32 max_concurrent_dispatches = 3;
   */
  maxConcurrentDispatches: number;
};

/**
 * Describes the message google.cloud.tasks.v2beta3.RateLimits.
 * Use `create(RateLimitsSchema)` to create a new message.
 */
export const RateLimitsSchema: GenMessage<RateLimits> = /*@__PURE__*/
  messageDesc(file_google_cloud_tasks_v2beta3_queue, 1);

/**
 * Retry config.
 *
 * These settings determine when a failed task attempt is retried.
 *
 * @generated from message google.cloud.tasks.v2beta3.RetryConfig
 */
export type RetryConfig = Message<"google.cloud.tasks.v2beta3.RetryConfig"> & {
  /**
   * Number of attempts per task.
   *
   * Cloud Tasks will attempt the task `max_attempts` times (that is, if the
   * first attempt fails, then there will be `max_attempts - 1` retries). Must
   * be >= -1.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   * -1 indicates unlimited attempts.
   *
   * This field has the same meaning as
   * [task_retry_limit in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
   *
   * @generated from field: int32 max_attempts = 1;
   */
  maxAttempts: number;

  /**
   * If positive, `max_retry_duration` specifies the time limit for
   * retrying a failed task, measured from when the task was first
   * attempted. Once `max_retry_duration` time has passed *and* the
   * task has been attempted
   * [max_attempts][google.cloud.tasks.v2beta3.RetryConfig.max_attempts] times,
   * no further attempts will be made and the task will be deleted.
   *
   * If zero, then the task age is unlimited.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   *
   * `max_retry_duration` will be truncated to the nearest second.
   *
   * This field has the same meaning as
   * [task_age_limit in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
   *
   * @generated from field: google.protobuf.Duration max_retry_duration = 2;
   */
  maxRetryDuration?: Duration;

  /**
   * A task will be [scheduled][google.cloud.tasks.v2beta3.Task.schedule_time]
   * for retry between
   * [min_backoff][google.cloud.tasks.v2beta3.RetryConfig.min_backoff] and
   * [max_backoff][google.cloud.tasks.v2beta3.RetryConfig.max_backoff] duration
   * after it fails, if the queue's
   * [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig] specifies that the
   * task should be retried.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   *
   * `min_backoff` will be truncated to the nearest second.
   *
   * This field has the same meaning as
   * [min_backoff_seconds in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
   *
   * @generated from field: google.protobuf.Duration min_backoff = 3;
   */
  minBackoff?: Duration;

  /**
   * A task will be [scheduled][google.cloud.tasks.v2beta3.Task.schedule_time]
   * for retry between
   * [min_backoff][google.cloud.tasks.v2beta3.RetryConfig.min_backoff] and
   * [max_backoff][google.cloud.tasks.v2beta3.RetryConfig.max_backoff] duration
   * after it fails, if the queue's
   * [RetryConfig][google.cloud.tasks.v2beta3.RetryConfig] specifies that the
   * task should be retried.
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   *
   * `max_backoff` will be truncated to the nearest second.
   *
   * This field has the same meaning as
   * [max_backoff_seconds in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
   *
   * @generated from field: google.protobuf.Duration max_backoff = 4;
   */
  maxBackoff?: Duration;

  /**
   * The time between retries will double `max_doublings` times.
   *
   * A task's retry interval starts at
   * [min_backoff][google.cloud.tasks.v2beta3.RetryConfig.min_backoff], then
   * doubles `max_doublings` times, then increases linearly, and finally retries
   * at intervals of
   * [max_backoff][google.cloud.tasks.v2beta3.RetryConfig.max_backoff] up to
   * [max_attempts][google.cloud.tasks.v2beta3.RetryConfig.max_attempts] times.
   *
   * For example, if
   * [min_backoff][google.cloud.tasks.v2beta3.RetryConfig.min_backoff] is 10s,
   * [max_backoff][google.cloud.tasks.v2beta3.RetryConfig.max_backoff] is 300s,
   * and `max_doublings` is 3, then the a task will first be retried in 10s. The
   * retry interval will double three times, and then increase linearly by 2^3 *
   * 10s.  Finally, the task will retry at intervals of
   * [max_backoff][google.cloud.tasks.v2beta3.RetryConfig.max_backoff] until the
   * task has been attempted
   * [max_attempts][google.cloud.tasks.v2beta3.RetryConfig.max_attempts] times.
   * Thus, the requests will retry at 10s, 20s, 40s, 80s, 160s, 240s, 300s,
   * 300s, ....
   *
   * If unspecified when the queue is created, Cloud Tasks will pick the
   * default.
   *
   *
   * This field has the same meaning as
   * [max_doublings in
   * queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
   *
   * @generated from field: int32 max_doublings = 5;
   */
  maxDoublings: number;
};

/**
 * Describes the message google.cloud.tasks.v2beta3.RetryConfig.
 * Use `create(RetryConfigSchema)` to create a new message.
 */
export const RetryConfigSchema: GenMessage<RetryConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_tasks_v2beta3_queue, 2);

/**
 * Configuration options for writing logs to
 * [Stackdriver Logging](https://cloud.google.com/logging/docs/).
 *
 * @generated from message google.cloud.tasks.v2beta3.StackdriverLoggingConfig
 */
export type StackdriverLoggingConfig = Message<"google.cloud.tasks.v2beta3.StackdriverLoggingConfig"> & {
  /**
   * Specifies the fraction of operations to write to
   * [Stackdriver Logging](https://cloud.google.com/logging/docs/).
   * This field may contain any value between 0.0 and 1.0, inclusive.
   * 0.0 is the default and means that no operations are logged.
   *
   * @generated from field: double sampling_ratio = 1;
   */
  samplingRatio: number;
};

/**
 * Describes the message google.cloud.tasks.v2beta3.StackdriverLoggingConfig.
 * Use `create(StackdriverLoggingConfigSchema)` to create a new message.
 */
export const StackdriverLoggingConfigSchema: GenMessage<StackdriverLoggingConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_tasks_v2beta3_queue, 3);

/**
 * Statistics for a queue.
 *
 * @generated from message google.cloud.tasks.v2beta3.QueueStats
 */
export type QueueStats = Message<"google.cloud.tasks.v2beta3.QueueStats"> & {
  /**
   * Output only. An estimation of the number of tasks in the queue, that is,
   * the tasks in the queue that haven't been executed, the tasks in the queue
   * which the queue has dispatched but has not yet received a reply for, and
   * the failed tasks that the queue is retrying.
   *
   * @generated from field: int64 tasks_count = 1;
   */
  tasksCount: bigint;

  /**
   * Output only. An estimation of the nearest time in the future where a task
   * in the queue is scheduled to be executed.
   *
   * @generated from field: google.protobuf.Timestamp oldest_estimated_arrival_time = 2;
   */
  oldestEstimatedArrivalTime?: Timestamp;

  /**
   * Output only. The number of tasks that the queue has dispatched and received
   * a reply for during the last minute. This variable counts both successful
   * and non-successful executions.
   *
   * @generated from field: int64 executed_last_minute_count = 3;
   */
  executedLastMinuteCount: bigint;

  /**
   * Output only. The number of requests that the queue has dispatched but has
   * not received a reply for yet.
   *
   * @generated from field: int64 concurrent_dispatches_count = 4;
   */
  concurrentDispatchesCount: bigint;

  /**
   * Output only. The current maximum number of tasks per second executed by the
   * queue. The maximum value of this variable is controlled by the RateLimits
   * of the Queue. However, this value could be less to avoid overloading the
   * endpoints tasks in the queue are targeting.
   *
   * @generated from field: double effective_execution_rate = 5;
   */
  effectiveExecutionRate: number;
};

/**
 * Describes the message google.cloud.tasks.v2beta3.QueueStats.
 * Use `create(QueueStatsSchema)` to create a new message.
 */
export const QueueStatsSchema: GenMessage<QueueStats> = /*@__PURE__*/
  messageDesc(file_google_cloud_tasks_v2beta3_queue, 4);

