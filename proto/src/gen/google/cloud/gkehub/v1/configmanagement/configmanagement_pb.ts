// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/gkehub/v1/configmanagement/configmanagement.proto (package google.cloud.gkehub.configmanagement.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/gkehub/v1/configmanagement/configmanagement.proto.
 */
export const file_google_cloud_gkehub_v1_configmanagement_configmanagement: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_timestamp]);

/**
 * **Anthos Config Management**: State for a single cluster.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.MembershipState
 */
export type MembershipState = Message<"google.cloud.gkehub.configmanagement.v1.MembershipState"> & {
  /**
   * This field is set to the `cluster_name` field of the Membership Spec if it
   * is not empty. Otherwise, it is set to the cluster's fleet membership name.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Membership configuration in the cluster. This represents the actual state
   * in the cluster, while the MembershipSpec in the FeatureSpec represents
   * the intended state
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.MembershipSpec membership_spec = 2;
   */
  membershipSpec?: MembershipSpec;

  /**
   * Current install status of ACM's Operator
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.OperatorState operator_state = 3;
   */
  operatorState?: OperatorState;

  /**
   * Current sync status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncState config_sync_state = 4;
   */
  configSyncState?: ConfigSyncState;

  /**
   * PolicyController status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.PolicyControllerState policy_controller_state = 5;
   */
  policyControllerState?: PolicyControllerState;

  /**
   * Hierarchy Controller status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.HierarchyControllerState hierarchy_controller_state = 7;
   */
  hierarchyControllerState?: HierarchyControllerState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.MembershipState.
 * Use `create(MembershipStateSchema)` to create a new message.
 */
export const MembershipStateSchema: GenMessage<MembershipState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 0);

/**
 * **Anthos Config Management**: Configuration for a single cluster.
 * Intended to parallel the ConfigManagement CR.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.MembershipSpec
 */
export type MembershipSpec = Message<"google.cloud.gkehub.configmanagement.v1.MembershipSpec"> & {
  /**
   * Config Sync configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSync config_sync = 1;
   */
  configSync?: ConfigSync;

  /**
   * Policy Controller configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.PolicyController policy_controller = 2;
   */
  policyController?: PolicyController;

  /**
   * Hierarchy Controller configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.HierarchyControllerConfig hierarchy_controller = 4;
   */
  hierarchyController?: HierarchyControllerConfig;

  /**
   * Version of ACM installed.
   *
   * @generated from field: string version = 10;
   */
  version: string;

  /**
   * The user-specified cluster name used by Config Sync cluster-name-selector
   * annotation or ClusterSelector, for applying configs to only a subset
   * of clusters.
   * Omit this field if the cluster's fleet membership name is used by Config
   * Sync cluster-name-selector annotation or ClusterSelector.
   * Set this field if a name different from the cluster's fleet membership name
   * is used by Config Sync cluster-name-selector annotation or ClusterSelector.
   *
   * @generated from field: string cluster = 11;
   */
  cluster: string;

  /**
   * Enables automatic Feature management.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.MembershipSpec.Management management = 12;
   */
  management: MembershipSpec_Management;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.MembershipSpec.
 * Use `create(MembershipSpecSchema)` to create a new message.
 */
export const MembershipSpecSchema: GenMessage<MembershipSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 1);

/**
 * Whether to automatically manage the Feature.
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1.MembershipSpec.Management
 */
export enum MembershipSpec_Management {
  /**
   * Unspecified
   *
   * @generated from enum value: MANAGEMENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Google will manage the Feature for the cluster.
   *
   * @generated from enum value: MANAGEMENT_AUTOMATIC = 1;
   */
  AUTOMATIC = 1,

  /**
   * User will manually manage the Feature for the cluster.
   *
   * @generated from enum value: MANAGEMENT_MANUAL = 2;
   */
  MANUAL = 2,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1.MembershipSpec.Management.
 */
export const MembershipSpec_ManagementSchema: GenEnum<MembershipSpec_Management> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 1, 0);

/**
 * Configuration for Config Sync
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ConfigSync
 */
export type ConfigSync = Message<"google.cloud.gkehub.configmanagement.v1.ConfigSync"> & {
  /**
   * Git repo configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.GitConfig git = 7;
   */
  git?: GitConfig;

  /**
   * Specifies whether the Config Sync Repo is
   * in "hierarchical" or "unstructured" mode.
   *
   * @generated from field: string source_format = 8;
   */
  sourceFormat: string;

  /**
   * Enables the installation of ConfigSync.
   * If set to true, ConfigSync resources will be created and the other
   * ConfigSync fields will be applied if exist.
   * If set to false, all other ConfigSync fields will be ignored, ConfigSync
   * resources will be deleted.
   * If omitted, ConfigSync resources will be managed depends on the presence
   * of the git or oci field.
   *
   * @generated from field: optional bool enabled = 10;
   */
  enabled?: boolean;

  /**
   * Set to true to enable the Config Sync admission webhook to prevent drifts.
   * If set to `false`, disables the Config Sync admission webhook and does not
   * prevent drifts.
   *
   * @generated from field: bool prevent_drift = 11;
   */
  preventDrift: boolean;

  /**
   * OCI repo configuration for the cluster
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.OciConfig oci = 12;
   */
  oci?: OciConfig;

  /**
   * The Email of the Google Cloud Service Account (GSA) used for exporting
   * Config Sync metrics to Cloud Monitoring when Workload Identity is enabled.
   * The GSA should have the Monitoring Metric Writer
   * (roles/monitoring.metricWriter) IAM role.
   * The Kubernetes ServiceAccount `default` in the namespace
   * `config-management-monitoring` should be bound to the GSA.
   *
   * @generated from field: string metrics_gcp_service_account_email = 15;
   */
  metricsGcpServiceAccountEmail: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ConfigSync.
 * Use `create(ConfigSyncSchema)` to create a new message.
 */
export const ConfigSyncSchema: GenMessage<ConfigSync> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 2);

/**
 * Git repo configuration for a single cluster.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.GitConfig
 */
export type GitConfig = Message<"google.cloud.gkehub.configmanagement.v1.GitConfig"> & {
  /**
   * The URL of the Git repository to use as the source of truth.
   *
   * @generated from field: string sync_repo = 1;
   */
  syncRepo: string;

  /**
   * The branch of the repository to sync from. Default: master.
   *
   * @generated from field: string sync_branch = 2;
   */
  syncBranch: string;

  /**
   * The path within the Git repository that represents the top level of the
   * repo to sync. Default: the root directory of the repository.
   *
   * @generated from field: string policy_dir = 3;
   */
  policyDir: string;

  /**
   * Period in seconds between consecutive syncs. Default: 15.
   *
   * @generated from field: int64 sync_wait_secs = 4;
   */
  syncWaitSecs: bigint;

  /**
   * Git revision (tag or hash) to check out. Default HEAD.
   *
   * @generated from field: string sync_rev = 5;
   */
  syncRev: string;

  /**
   * Type of secret configured for access to the Git repo. Must be one of ssh,
   * cookiefile, gcenode, token, gcpserviceaccount or none. The
   * validation of this is case-sensitive. Required.
   *
   * @generated from field: string secret_type = 6;
   */
  secretType: string;

  /**
   * URL for the HTTPS proxy to be used when communicating with the Git repo.
   *
   * @generated from field: string https_proxy = 7;
   */
  httpsProxy: string;

  /**
   * The Google Cloud Service Account Email used for auth when secret_type is
   * gcpServiceAccount.
   *
   * @generated from field: string gcp_service_account_email = 8;
   */
  gcpServiceAccountEmail: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.GitConfig.
 * Use `create(GitConfigSchema)` to create a new message.
 */
export const GitConfigSchema: GenMessage<GitConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 3);

/**
 * OCI repo configuration for a single cluster
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.OciConfig
 */
export type OciConfig = Message<"google.cloud.gkehub.configmanagement.v1.OciConfig"> & {
  /**
   * The OCI image repository URL for the package to sync from.
   * e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.
   *
   * @generated from field: string sync_repo = 1;
   */
  syncRepo: string;

  /**
   * The absolute path of the directory that contains
   * the local resources.  Default: the root directory of the image.
   *
   * @generated from field: string policy_dir = 2;
   */
  policyDir: string;

  /**
   * Period in seconds between consecutive syncs. Default: 15.
   *
   * @generated from field: int64 sync_wait_secs = 3;
   */
  syncWaitSecs: bigint;

  /**
   * Type of secret configured for access to the Git repo.
   *
   * @generated from field: string secret_type = 4;
   */
  secretType: string;

  /**
   * The Google Cloud Service Account Email used for auth when secret_type is
   * gcpServiceAccount.
   *
   * @generated from field: string gcp_service_account_email = 5;
   */
  gcpServiceAccountEmail: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.OciConfig.
 * Use `create(OciConfigSchema)` to create a new message.
 */
export const OciConfigSchema: GenMessage<OciConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 4);

/**
 * Configuration for Policy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.PolicyController
 */
export type PolicyController = Message<"google.cloud.gkehub.configmanagement.v1.PolicyController"> & {
  /**
   * Enables the installation of Policy Controller.
   * If false, the rest of PolicyController fields take no
   * effect.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Installs the default template library along with Policy Controller.
   *
   * @generated from field: optional bool template_library_installed = 2;
   */
  templateLibraryInstalled?: boolean;

  /**
   * Sets the interval for Policy Controller Audit Scans (in seconds).
   * When set to 0, this disables audit functionality altogether.
   *
   * @generated from field: optional int64 audit_interval_seconds = 3;
   */
  auditIntervalSeconds?: bigint;

  /**
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   *
   * @generated from field: repeated string exemptable_namespaces = 4;
   */
  exemptableNamespaces: string[];

  /**
   * Enables the ability to use Constraint Templates that reference to objects
   * other than the object currently being evaluated.
   *
   * @generated from field: bool referential_rules_enabled = 5;
   */
  referentialRulesEnabled: boolean;

  /**
   * Logs all denies and dry run failures.
   *
   * @generated from field: bool log_denies_enabled = 6;
   */
  logDeniesEnabled: boolean;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.PolicyController.
 * Use `create(PolicyControllerSchema)` to create a new message.
 */
export const PolicyControllerSchema: GenMessage<PolicyController> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 5);

/**
 * Configuration for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.HierarchyControllerConfig
 */
export type HierarchyControllerConfig = Message<"google.cloud.gkehub.configmanagement.v1.HierarchyControllerConfig"> & {
  /**
   * Whether Hierarchy Controller is enabled in this cluster.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Whether pod tree labels are enabled in this cluster.
   *
   * @generated from field: bool enable_pod_tree_labels = 2;
   */
  enablePodTreeLabels: boolean;

  /**
   * Whether hierarchical resource quota is enabled in this cluster.
   *
   * @generated from field: bool enable_hierarchical_resource_quota = 3;
   */
  enableHierarchicalResourceQuota: boolean;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.HierarchyControllerConfig.
 * Use `create(HierarchyControllerConfigSchema)` to create a new message.
 */
export const HierarchyControllerConfigSchema: GenMessage<HierarchyControllerConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 6);

/**
 * Deployment state for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.HierarchyControllerDeploymentState
 */
export type HierarchyControllerDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1.HierarchyControllerDeploymentState"> & {
  /**
   * The deployment state for open source HNC (e.g. v0.7.0-hc.0)
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState hnc = 1;
   */
  hnc: DeploymentState;

  /**
   * The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState extension = 2;
   */
  extension: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.HierarchyControllerDeploymentState.
 * Use `create(HierarchyControllerDeploymentStateSchema)` to create a new message.
 */
export const HierarchyControllerDeploymentStateSchema: GenMessage<HierarchyControllerDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 7);

/**
 * Version for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.HierarchyControllerVersion
 */
export type HierarchyControllerVersion = Message<"google.cloud.gkehub.configmanagement.v1.HierarchyControllerVersion"> & {
  /**
   * Version for open source HNC
   *
   * @generated from field: string hnc = 1;
   */
  hnc: string;

  /**
   * Version for Hierarchy Controller extension
   *
   * @generated from field: string extension = 2;
   */
  extension: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.HierarchyControllerVersion.
 * Use `create(HierarchyControllerVersionSchema)` to create a new message.
 */
export const HierarchyControllerVersionSchema: GenMessage<HierarchyControllerVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 8);

/**
 * State for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.HierarchyControllerState
 */
export type HierarchyControllerState = Message<"google.cloud.gkehub.configmanagement.v1.HierarchyControllerState"> & {
  /**
   * The version for Hierarchy Controller
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.HierarchyControllerVersion version = 1;
   */
  version?: HierarchyControllerVersion;

  /**
   * The deployment state for Hierarchy Controller
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.HierarchyControllerDeploymentState state = 2;
   */
  state?: HierarchyControllerDeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.HierarchyControllerState.
 * Use `create(HierarchyControllerStateSchema)` to create a new message.
 */
export const HierarchyControllerStateSchema: GenMessage<HierarchyControllerState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 9);

/**
 * State information for an ACM's Operator
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.OperatorState
 */
export type OperatorState = Message<"google.cloud.gkehub.configmanagement.v1.OperatorState"> & {
  /**
   * The semenatic version number of the operator
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The state of the Operator's deployment
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState deployment_state = 2;
   */
  deploymentState: DeploymentState;

  /**
   * Install errors.
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1.InstallError errors = 3;
   */
  errors: InstallError[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.OperatorState.
 * Use `create(OperatorStateSchema)` to create a new message.
 */
export const OperatorStateSchema: GenMessage<OperatorState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 10);

/**
 * Errors pertaining to the installation of ACM
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.InstallError
 */
export type InstallError = Message<"google.cloud.gkehub.configmanagement.v1.InstallError"> & {
  /**
   * A string representing the user facing error message
   *
   * @generated from field: string error_message = 1;
   */
  errorMessage: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.InstallError.
 * Use `create(InstallErrorSchema)` to create a new message.
 */
export const InstallErrorSchema: GenMessage<InstallError> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 11);

/**
 * State information for ConfigSync
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ConfigSyncState
 */
export type ConfigSyncState = Message<"google.cloud.gkehub.configmanagement.v1.ConfigSyncState"> & {
  /**
   * The version of ConfigSync deployed
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncVersion version = 1;
   */
  version?: ConfigSyncVersion;

  /**
   * Information about the deployment of ConfigSync, including the version
   * of the various Pods deployed
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncDeploymentState deployment_state = 2;
   */
  deploymentState?: ConfigSyncDeploymentState;

  /**
   * The state of ConfigSync's process to sync configs to a cluster
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.SyncState sync_state = 3;
   */
  syncState?: SyncState;

  /**
   * Errors pertaining to the installation of Config Sync.
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1.ConfigSyncError errors = 4;
   */
  errors: ConfigSyncError[];

  /**
   * The state of the RootSync CRD
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncState.CRDState rootsync_crd = 5;
   */
  rootsyncCrd: ConfigSyncState_CRDState;

  /**
   * The state of the Reposync CRD
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncState.CRDState reposync_crd = 6;
   */
  reposyncCrd: ConfigSyncState_CRDState;

  /**
   * The state of CS
   * This field summarizes the other fields in this message.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.ConfigSyncState.State state = 7;
   */
  state: ConfigSyncState_State;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ConfigSyncState.
 * Use `create(ConfigSyncStateSchema)` to create a new message.
 */
export const ConfigSyncStateSchema: GenMessage<ConfigSyncState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 12);

/**
 * CRDState representing the state of a CRD
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1.ConfigSyncState.CRDState
 */
export enum ConfigSyncState_CRDState {
  /**
   * CRD's state cannot be determined
   *
   * @generated from enum value: CRD_STATE_UNSPECIFIED = 0;
   */
  CRD_STATE_UNSPECIFIED = 0,

  /**
   * CRD is not installed
   *
   * @generated from enum value: NOT_INSTALLED = 1;
   */
  NOT_INSTALLED = 1,

  /**
   * CRD is installed
   *
   * @generated from enum value: INSTALLED = 2;
   */
  INSTALLED = 2,

  /**
   * CRD is terminating (i.e., it has been deleted and is cleaning up)
   *
   * @generated from enum value: TERMINATING = 3;
   */
  TERMINATING = 3,

  /**
   * CRD is installing
   *
   * @generated from enum value: INSTALLING = 4;
   */
  INSTALLING = 4,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1.ConfigSyncState.CRDState.
 */
export const ConfigSyncState_CRDStateSchema: GenEnum<ConfigSyncState_CRDState> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 12, 0);

/**
 * @generated from enum google.cloud.gkehub.configmanagement.v1.ConfigSyncState.State
 */
export enum ConfigSyncState_State {
  /**
   * CS's state cannot be determined.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * CS is not installed.
   *
   * @generated from enum value: CONFIG_SYNC_NOT_INSTALLED = 1;
   */
  CONFIG_SYNC_NOT_INSTALLED = 1,

  /**
   * The expected CS version is installed successfully.
   *
   * @generated from enum value: CONFIG_SYNC_INSTALLED = 2;
   */
  CONFIG_SYNC_INSTALLED = 2,

  /**
   * CS encounters errors.
   *
   * @generated from enum value: CONFIG_SYNC_ERROR = 3;
   */
  CONFIG_SYNC_ERROR = 3,

  /**
   * CS is installing or terminating.
   *
   * @generated from enum value: CONFIG_SYNC_PENDING = 4;
   */
  CONFIG_SYNC_PENDING = 4,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1.ConfigSyncState.State.
 */
export const ConfigSyncState_StateSchema: GenEnum<ConfigSyncState_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 12, 1);

/**
 * Errors pertaining to the installation of Config Sync
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ConfigSyncError
 */
export type ConfigSyncError = Message<"google.cloud.gkehub.configmanagement.v1.ConfigSyncError"> & {
  /**
   * A string representing the user facing error message
   *
   * @generated from field: string error_message = 1;
   */
  errorMessage: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ConfigSyncError.
 * Use `create(ConfigSyncErrorSchema)` to create a new message.
 */
export const ConfigSyncErrorSchema: GenMessage<ConfigSyncError> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 13);

/**
 * Specific versioning information pertaining to ConfigSync's Pods
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ConfigSyncVersion
 */
export type ConfigSyncVersion = Message<"google.cloud.gkehub.configmanagement.v1.ConfigSyncVersion"> & {
  /**
   * Version of the deployed importer pod
   *
   * @generated from field: string importer = 1;
   */
  importer: string;

  /**
   * Version of the deployed syncer pod
   *
   * @generated from field: string syncer = 2;
   */
  syncer: string;

  /**
   * Version of the deployed git-sync pod
   *
   * @generated from field: string git_sync = 3;
   */
  gitSync: string;

  /**
   * Version of the deployed monitor pod
   *
   * @generated from field: string monitor = 4;
   */
  monitor: string;

  /**
   * Version of the deployed reconciler-manager pod
   *
   * @generated from field: string reconciler_manager = 5;
   */
  reconcilerManager: string;

  /**
   * Version of the deployed reconciler container in root-reconciler pod
   *
   * @generated from field: string root_reconciler = 6;
   */
  rootReconciler: string;

  /**
   * Version of the deployed admission_webhook pod
   *
   * @generated from field: string admission_webhook = 7;
   */
  admissionWebhook: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ConfigSyncVersion.
 * Use `create(ConfigSyncVersionSchema)` to create a new message.
 */
export const ConfigSyncVersionSchema: GenMessage<ConfigSyncVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 14);

/**
 * The state of ConfigSync's deployment on a cluster
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ConfigSyncDeploymentState
 */
export type ConfigSyncDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1.ConfigSyncDeploymentState"> & {
  /**
   * Deployment state of the importer pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState importer = 1;
   */
  importer: DeploymentState;

  /**
   * Deployment state of the syncer pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState syncer = 2;
   */
  syncer: DeploymentState;

  /**
   * Deployment state of the git-sync pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState git_sync = 3;
   */
  gitSync: DeploymentState;

  /**
   * Deployment state of the monitor pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState monitor = 4;
   */
  monitor: DeploymentState;

  /**
   * Deployment state of reconciler-manager pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState reconciler_manager = 5;
   */
  reconcilerManager: DeploymentState;

  /**
   * Deployment state of root-reconciler
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState root_reconciler = 6;
   */
  rootReconciler: DeploymentState;

  /**
   * Deployment state of admission-webhook
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState admission_webhook = 7;
   */
  admissionWebhook: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ConfigSyncDeploymentState.
 * Use `create(ConfigSyncDeploymentStateSchema)` to create a new message.
 */
export const ConfigSyncDeploymentStateSchema: GenMessage<ConfigSyncDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 15);

/**
 * State indicating an ACM's progress syncing configurations to a cluster
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.SyncState
 */
export type SyncState = Message<"google.cloud.gkehub.configmanagement.v1.SyncState"> & {
  /**
   * Token indicating the state of the repo.
   *
   * @generated from field: string source_token = 1;
   */
  sourceToken: string;

  /**
   * Token indicating the state of the importer.
   *
   * @generated from field: string import_token = 2;
   */
  importToken: string;

  /**
   * Token indicating the state of the syncer.
   *
   * @generated from field: string sync_token = 3;
   */
  syncToken: string;

  /**
   * Deprecated: use last_sync_time instead.
   * Timestamp of when ACM last successfully synced the repo
   * The time format is specified in https://golang.org/pkg/time/#Time.String
   *
   * @generated from field: string last_sync = 4 [deprecated = true];
   * @deprecated
   */
  lastSync: string;

  /**
   * Timestamp type of when ACM last successfully synced the repo
   *
   * @generated from field: google.protobuf.Timestamp last_sync_time = 7;
   */
  lastSyncTime?: Timestamp;

  /**
   * Sync status code
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.SyncState.SyncCode code = 5;
   */
  code: SyncState_SyncCode;

  /**
   * A list of errors resulting from problematic configs.
   * This list will be truncated after 100 errors, although it is
   * unlikely for that many errors to simultaneously exist.
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1.SyncError errors = 6;
   */
  errors: SyncError[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.SyncState.
 * Use `create(SyncStateSchema)` to create a new message.
 */
export const SyncStateSchema: GenMessage<SyncState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 16);

/**
 * An enum representing Config Sync's status of syncing configs to a cluster.
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1.SyncState.SyncCode
 */
export enum SyncState_SyncCode {
  /**
   * Config Sync cannot determine a sync code
   *
   * @generated from enum value: SYNC_CODE_UNSPECIFIED = 0;
   */
  SYNC_CODE_UNSPECIFIED = 0,

  /**
   * Config Sync successfully synced the git Repo with the cluster
   *
   * @generated from enum value: SYNCED = 1;
   */
  SYNCED = 1,

  /**
   * Config Sync is in the progress of syncing a new change
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * Indicates an error configuring Config Sync, and user action is required
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,

  /**
   * Config Sync has been installed but not configured
   *
   * @generated from enum value: NOT_CONFIGURED = 4;
   */
  NOT_CONFIGURED = 4,

  /**
   * Config Sync has not been installed
   *
   * @generated from enum value: NOT_INSTALLED = 5;
   */
  NOT_INSTALLED = 5,

  /**
   * Error authorizing with the cluster
   *
   * @generated from enum value: UNAUTHORIZED = 6;
   */
  UNAUTHORIZED = 6,

  /**
   * Cluster could not be reached
   *
   * @generated from enum value: UNREACHABLE = 7;
   */
  UNREACHABLE = 7,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1.SyncState.SyncCode.
 */
export const SyncState_SyncCodeSchema: GenEnum<SyncState_SyncCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 16, 0);

/**
 * An ACM created error representing a problem syncing configurations
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.SyncError
 */
export type SyncError = Message<"google.cloud.gkehub.configmanagement.v1.SyncError"> & {
  /**
   * An ACM defined error code
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * A description of the error
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * A list of config(s) associated with the error, if any
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1.ErrorResource error_resources = 3;
   */
  errorResources: ErrorResource[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.SyncError.
 * Use `create(SyncErrorSchema)` to create a new message.
 */
export const SyncErrorSchema: GenMessage<SyncError> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 17);

/**
 * Model for a config file in the git repo with an associated Sync error
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.ErrorResource
 */
export type ErrorResource = Message<"google.cloud.gkehub.configmanagement.v1.ErrorResource"> & {
  /**
   * Path in the git repo of the erroneous config
   *
   * @generated from field: string source_path = 1;
   */
  sourcePath: string;

  /**
   * Metadata name of the resource that is causing an error
   *
   * @generated from field: string resource_name = 2;
   */
  resourceName: string;

  /**
   * Namespace of the resource that is causing an error
   *
   * @generated from field: string resource_namespace = 3;
   */
  resourceNamespace: string;

  /**
   * Group/version/kind of the resource that is causing an error
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.GroupVersionKind resource_gvk = 4;
   */
  resourceGvk?: GroupVersionKind;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.ErrorResource.
 * Use `create(ErrorResourceSchema)` to create a new message.
 */
export const ErrorResourceSchema: GenMessage<ErrorResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 18);

/**
 * A Kubernetes object's GVK
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.GroupVersionKind
 */
export type GroupVersionKind = Message<"google.cloud.gkehub.configmanagement.v1.GroupVersionKind"> & {
  /**
   * Kubernetes Group
   *
   * @generated from field: string group = 1;
   */
  group: string;

  /**
   * Kubernetes Version
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Kubernetes Kind
   *
   * @generated from field: string kind = 3;
   */
  kind: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.GroupVersionKind.
 * Use `create(GroupVersionKindSchema)` to create a new message.
 */
export const GroupVersionKindSchema: GenMessage<GroupVersionKind> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 19);

/**
 * State for PolicyControllerState.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.PolicyControllerState
 */
export type PolicyControllerState = Message<"google.cloud.gkehub.configmanagement.v1.PolicyControllerState"> & {
  /**
   * The version of Gatekeeper Policy Controller deployed.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.PolicyControllerVersion version = 1;
   */
  version?: PolicyControllerVersion;

  /**
   * The state about the policy controller installation.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.GatekeeperDeploymentState deployment_state = 2;
   */
  deploymentState?: GatekeeperDeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.PolicyControllerState.
 * Use `create(PolicyControllerStateSchema)` to create a new message.
 */
export const PolicyControllerStateSchema: GenMessage<PolicyControllerState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 20);

/**
 * The build version of Gatekeeper Policy Controller is using.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.PolicyControllerVersion
 */
export type PolicyControllerVersion = Message<"google.cloud.gkehub.configmanagement.v1.PolicyControllerVersion"> & {
  /**
   * The gatekeeper image tag that is composed of ACM version, git tag, build
   * number.
   *
   * @generated from field: string version = 1;
   */
  version: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.PolicyControllerVersion.
 * Use `create(PolicyControllerVersionSchema)` to create a new message.
 */
export const PolicyControllerVersionSchema: GenMessage<PolicyControllerVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 21);

/**
 * State of Policy Controller installation.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1.GatekeeperDeploymentState
 */
export type GatekeeperDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1.GatekeeperDeploymentState"> & {
  /**
   * Status of gatekeeper-controller-manager pod.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState gatekeeper_controller_manager_state = 1;
   */
  gatekeeperControllerManagerState: DeploymentState;

  /**
   * Status of gatekeeper-audit deployment.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1.DeploymentState gatekeeper_audit = 2;
   */
  gatekeeperAudit: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1.GatekeeperDeploymentState.
 * Use `create(GatekeeperDeploymentStateSchema)` to create a new message.
 */
export const GatekeeperDeploymentStateSchema: GenMessage<GatekeeperDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 22);

/**
 * Enum representing the state of an ACM's deployment on a cluster
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1.DeploymentState
 */
export enum DeploymentState {
  /**
   * Deployment's state cannot be determined
   *
   * @generated from enum value: DEPLOYMENT_STATE_UNSPECIFIED = 0;
   */
  DEPLOYMENT_STATE_UNSPECIFIED = 0,

  /**
   * Deployment is not installed
   *
   * @generated from enum value: NOT_INSTALLED = 1;
   */
  NOT_INSTALLED = 1,

  /**
   * Deployment is installed
   *
   * @generated from enum value: INSTALLED = 2;
   */
  INSTALLED = 2,

  /**
   * Deployment was attempted to be installed, but has errors
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,

  /**
   * Deployment is installing or terminating
   *
   * @generated from enum value: PENDING = 4;
   */
  PENDING = 4,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1.DeploymentState.
 */
export const DeploymentStateSchema: GenEnum<DeploymentState> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1_configmanagement_configmanagement, 0);

