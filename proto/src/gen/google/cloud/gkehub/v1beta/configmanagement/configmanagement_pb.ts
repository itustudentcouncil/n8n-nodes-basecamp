// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/gkehub/v1beta/configmanagement/configmanagement.proto (package google.cloud.gkehub.configmanagement.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/gkehub/v1beta/configmanagement/configmanagement.proto.
 */
export const file_google_cloud_gkehub_v1beta_configmanagement_configmanagement: GenFile = /*@__PURE__*/
  fileDesc("CkJnb29nbGUvY2xvdWQvZ2tlaHViL3YxYmV0YS9jb25maWdtYW5hZ2VtZW50L2NvbmZpZ21hbmFnZW1lbnQucHJvdG8SK2dvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEizgQKD01lbWJlcnNoaXBTdGF0ZRIUCgxjbHVzdGVyX25hbWUYASABKAkSVAoPbWVtYmVyc2hpcF9zcGVjGAIgASgLMjsuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5NZW1iZXJzaGlwU3BlYxJSCg5vcGVyYXRvcl9zdGF0ZRgDIAEoCzI6Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuT3BlcmF0b3JTdGF0ZRJXChFjb25maWdfc3luY19zdGF0ZRgEIAEoCzI8Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuQ29uZmlnU3luY1N0YXRlEmMKF3BvbGljeV9jb250cm9sbGVyX3N0YXRlGAUgASgLMkIuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5Qb2xpY3lDb250cm9sbGVyU3RhdGUSUgoOYmluYXV0aHpfc3RhdGUYBiABKAsyOi5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkJpbmF1dGh6U3RhdGUSaQoaaGllcmFyY2h5X2NvbnRyb2xsZXJfc3RhdGUYByABKAsyRS5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkhpZXJhcmNoeUNvbnRyb2xsZXJTdGF0ZSL+AgoOTWVtYmVyc2hpcFNwZWMSTAoLY29uZmlnX3N5bmMYASABKAsyNy5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkNvbmZpZ1N5bmMSWAoRcG9saWN5X2NvbnRyb2xsZXIYAiABKAsyPS5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLlBvbGljeUNvbnRyb2xsZXISTQoIYmluYXV0aHoYAyABKAsyOy5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkJpbmF1dGh6Q29uZmlnEmQKFGhpZXJhcmNoeV9jb250cm9sbGVyGAQgASgLMkYuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5IaWVyYXJjaHlDb250cm9sbGVyQ29uZmlnEg8KB3ZlcnNpb24YCiABKAkiaAoKQ29uZmlnU3luYxJDCgNnaXQYByABKAsyNi5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkdpdENvbmZpZxIVCg1zb3VyY2VfZm9ybWF0GAggASgJIr4BCglHaXRDb25maWcSEQoJc3luY19yZXBvGAEgASgJEhMKC3N5bmNfYnJhbmNoGAIgASgJEhIKCnBvbGljeV9kaXIYAyABKAkSFgoOc3luY193YWl0X3NlY3MYBCABKAMSEAoIc3luY19yZXYYBSABKAkSEwoLc2VjcmV0X3R5cGUYBiABKAkSEwoLaHR0cHNfcHJveHkYByABKAkSIQoZZ2NwX3NlcnZpY2VfYWNjb3VudF9lbWFpbBgIIAEoCSKJAgoQUG9saWN5Q29udHJvbGxlchIPCgdlbmFibGVkGAEgASgIEicKGnRlbXBsYXRlX2xpYnJhcnlfaW5zdGFsbGVkGAIgASgISACIAQESIwoWYXVkaXRfaW50ZXJ2YWxfc2Vjb25kcxgDIAEoA0gBiAEBEh0KFWV4ZW1wdGFibGVfbmFtZXNwYWNlcxgEIAMoCRIhChlyZWZlcmVudGlhbF9ydWxlc19lbmFibGVkGAUgASgIEhoKEmxvZ19kZW5pZXNfZW5hYmxlZBgGIAEoCEIdChtfdGVtcGxhdGVfbGlicmFyeV9pbnN0YWxsZWRCGQoXX2F1ZGl0X2ludGVydmFsX3NlY29uZHMiIQoOQmluYXV0aHpDb25maWcSDwoHZW5hYmxlZBgBIAEoCCJ4ChlIaWVyYXJjaHlDb250cm9sbGVyQ29uZmlnEg8KB2VuYWJsZWQYASABKAgSHgoWZW5hYmxlX3BvZF90cmVlX2xhYmVscxgCIAEoCBIqCiJlbmFibGVfaGllcmFyY2hpY2FsX3Jlc291cmNlX3F1b3RhGAMgASgIIsABCiJIaWVyYXJjaHlDb250cm9sbGVyRGVwbG95bWVudFN0YXRlEkkKA2huYxgBIAEoDjI8Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuRGVwbG95bWVudFN0YXRlEk8KCWV4dGVuc2lvbhgCIAEoDjI8Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuRGVwbG95bWVudFN0YXRlIjwKGkhpZXJhcmNoeUNvbnRyb2xsZXJWZXJzaW9uEgsKA2huYxgBIAEoCRIRCglleHRlbnNpb24YAiABKAki1AEKGEhpZXJhcmNoeUNvbnRyb2xsZXJTdGF0ZRJYCgd2ZXJzaW9uGAEgASgLMkcuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5IaWVyYXJjaHlDb250cm9sbGVyVmVyc2lvbhJeCgVzdGF0ZRgCIAEoCzJPLmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuSGllcmFyY2h5Q29udHJvbGxlckRlcGxveW1lbnRTdGF0ZSLDAQoNT3BlcmF0b3JTdGF0ZRIPCgd2ZXJzaW9uGAEgASgJElYKEGRlcGxveW1lbnRfc3RhdGUYAiABKA4yPC5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkRlcGxveW1lbnRTdGF0ZRJJCgZlcnJvcnMYAyADKAsyOS5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkluc3RhbGxFcnJvciIlCgxJbnN0YWxsRXJyb3ISFQoNZXJyb3JfbWVzc2FnZRgBIAEoCSKQAgoPQ29uZmlnU3luY1N0YXRlEk8KB3ZlcnNpb24YASABKAsyPi5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkNvbmZpZ1N5bmNWZXJzaW9uEmAKEGRlcGxveW1lbnRfc3RhdGUYAiABKAsyRi5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkNvbmZpZ1N5bmNEZXBsb3ltZW50U3RhdGUSSgoKc3luY19zdGF0ZRgDIAEoCzI2Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuU3luY1N0YXRlIo0BChFDb25maWdTeW5jVmVyc2lvbhIQCghpbXBvcnRlchgBIAEoCRIOCgZzeW5jZXIYAiABKAkSEAoIZ2l0X3N5bmMYAyABKAkSDwoHbW9uaXRvchgEIAEoCRIaChJyZWNvbmNpbGVyX21hbmFnZXIYBSABKAkSFwoPcm9vdF9yZWNvbmNpbGVyGAYgASgJIokEChlDb25maWdTeW5jRGVwbG95bWVudFN0YXRlEk4KCGltcG9ydGVyGAEgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUSTAoGc3luY2VyGAIgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUSTgoIZ2l0X3N5bmMYAyABKA4yPC5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkRlcGxveW1lbnRTdGF0ZRJNCgdtb25pdG9yGAQgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUSWAoScmVjb25jaWxlcl9tYW5hZ2VyGAUgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUSVQoPcm9vdF9yZWNvbmNpbGVyGAYgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUiwwMKCVN5bmNTdGF0ZRIUCgxzb3VyY2VfdG9rZW4YASABKAkSFAoMaW1wb3J0X3Rva2VuGAIgASgJEhIKCnN5bmNfdG9rZW4YAyABKAkSFQoJbGFzdF9zeW5jGAQgASgJQgIYARIyCg5sYXN0X3N5bmNfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASTQoEY29kZRgFIAEoDjI/Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuU3luY1N0YXRlLlN5bmNDb2RlEkYKBmVycm9ycxgGIAMoCzI2Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuU3luY0Vycm9yIpMBCghTeW5jQ29kZRIZChVTWU5DX0NPREVfVU5TUEVDSUZJRUQQABIKCgZTWU5DRUQQARILCgdQRU5ESU5HEAISCQoFRVJST1IQAxISCg5OT1RfQ09ORklHVVJFRBAEEhEKDU5PVF9JTlNUQUxMRUQQBRIQCgxVTkFVVEhPUklaRUQQBhIPCgtVTlJFQUNIQUJMRRAHIoUBCglTeW5jRXJyb3ISDAoEY29kZRgBIAEoCRIVCg1lcnJvcl9tZXNzYWdlGAIgASgJElMKD2Vycm9yX3Jlc291cmNlcxgDIAMoCzI6Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuRXJyb3JSZXNvdXJjZSKsAQoNRXJyb3JSZXNvdXJjZRITCgtzb3VyY2VfcGF0aBgBIAEoCRIVCg1yZXNvdXJjZV9uYW1lGAIgASgJEhoKEnJlc291cmNlX25hbWVzcGFjZRgDIAEoCRJTCgxyZXNvdXJjZV9ndmsYBCABKAsyPS5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkdyb3VwVmVyc2lvbktpbmQiQAoQR3JvdXBWZXJzaW9uS2luZBINCgVncm91cBgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEgwKBGtpbmQYAyABKAki0AEKFVBvbGljeUNvbnRyb2xsZXJTdGF0ZRJVCgd2ZXJzaW9uGAEgASgLMkQuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5Qb2xpY3lDb250cm9sbGVyVmVyc2lvbhJgChBkZXBsb3ltZW50X3N0YXRlGAIgASgLMkYuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5HYXRla2VlcGVyRGVwbG95bWVudFN0YXRlIioKF1BvbGljeUNvbnRyb2xsZXJWZXJzaW9uEg8KB3ZlcnNpb24YASABKAkirQEKDUJpbmF1dGh6U3RhdGUSTQoHd2ViaG9vaxgBIAEoDjI8Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuRGVwbG95bWVudFN0YXRlEk0KB3ZlcnNpb24YAiABKAsyPC5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhLkJpbmF1dGh6VmVyc2lvbiIqCg9CaW5hdXRoelZlcnNpb24SFwoPd2ViaG9va192ZXJzaW9uGAEgASgJIt4BChlHYXRla2VlcGVyRGVwbG95bWVudFN0YXRlEmkKI2dhdGVrZWVwZXJfY29udHJvbGxlcl9tYW5hZ2VyX3N0YXRlGAEgASgOMjwuZ29vZ2xlLmNsb3VkLmdrZWh1Yi5jb25maWdtYW5hZ2VtZW50LnYxYmV0YS5EZXBsb3ltZW50U3RhdGUSVgoQZ2F0ZWtlZXBlcl9hdWRpdBgCIAEoDjI8Lmdvb2dsZS5jbG91ZC5na2VodWIuY29uZmlnbWFuYWdlbWVudC52MWJldGEuRGVwbG95bWVudFN0YXRlKmAKD0RlcGxveW1lbnRTdGF0ZRIgChxERVBMT1lNRU5UX1NUQVRFX1VOU1BFQ0lGSUVEEAASEQoNTk9UX0lOU1RBTExFRBABEg0KCUlOU1RBTExFRBACEgkKBUVSUk9SEANCtQIKL2NvbS5nb29nbGUuY2xvdWQuZ2tlaHViLmNvbmZpZ21hbmFnZW1lbnQudjFiZXRhQhVDb25maWdNYW5hZ2VtZW50UHJvdG9QAVpbY2xvdWQuZ29vZ2xlLmNvbS9nby9na2VodWIvY29uZmlnbWFuYWdlbWVudC9hcGl2MWJldGEvY29uZmlnbWFuYWdlbWVudHBiO2NvbmZpZ21hbmFnZW1lbnRwYqoCK0dvb2dsZS5DbG91ZC5Ha2VIdWIuQ29uZmlnTWFuYWdlbWVudC5WMUJldGHKAitHb29nbGVcQ2xvdWRcR2tlSHViXENvbmZpZ01hbmFnZW1lbnRcVjFiZXRh6gIvR29vZ2xlOjpDbG91ZDo6R2tlSHViOjpDb25maWdNYW5hZ2VtZW50OjpWMWJldGFiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * **Anthos Config Management**: State for a single cluster.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.MembershipState
 */
export type MembershipState = Message<"google.cloud.gkehub.configmanagement.v1beta.MembershipState"> & {
  /**
   * The user-defined name for the cluster used by ClusterSelectors to group
   * clusters together. This should match Membership's membership_name,
   * unless the user installed ACM on the cluster manually prior to enabling
   * the ACM hub feature.
   * Unique within a Anthos Config Management installation.
   *
   * @generated from field: string cluster_name = 1;
   */
  clusterName: string;

  /**
   * Membership configuration in the cluster. This represents the actual state
   * in the cluster, while the MembershipSpec in the FeatureSpec represents
   * the intended state
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.MembershipSpec membership_spec = 2;
   */
  membershipSpec?: MembershipSpec;

  /**
   * Current install status of ACM's Operator
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.OperatorState operator_state = 3;
   */
  operatorState?: OperatorState;

  /**
   * Current sync status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.ConfigSyncState config_sync_state = 4;
   */
  configSyncState?: ConfigSyncState;

  /**
   * PolicyController status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.PolicyControllerState policy_controller_state = 5;
   */
  policyControllerState?: PolicyControllerState;

  /**
   * Binauthz status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.BinauthzState binauthz_state = 6;
   */
  binauthzState?: BinauthzState;

  /**
   * Hierarchy Controller status
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerState hierarchy_controller_state = 7;
   */
  hierarchyControllerState?: HierarchyControllerState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.MembershipState.
 * Use `create(MembershipStateSchema)` to create a new message.
 */
export const MembershipStateSchema: GenMessage<MembershipState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 0);

/**
 * **Anthos Config Management**: Configuration for a single cluster.
 * Intended to parallel the ConfigManagement CR.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.MembershipSpec
 */
export type MembershipSpec = Message<"google.cloud.gkehub.configmanagement.v1beta.MembershipSpec"> & {
  /**
   * Config Sync configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.ConfigSync config_sync = 1;
   */
  configSync?: ConfigSync;

  /**
   * Policy Controller configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.PolicyController policy_controller = 2;
   */
  policyController?: PolicyController;

  /**
   * Binauthz conifguration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.BinauthzConfig binauthz = 3;
   */
  binauthz?: BinauthzConfig;

  /**
   * Hierarchy Controller configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerConfig hierarchy_controller = 4;
   */
  hierarchyController?: HierarchyControllerConfig;

  /**
   * Version of ACM installed.
   *
   * @generated from field: string version = 10;
   */
  version: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.MembershipSpec.
 * Use `create(MembershipSpecSchema)` to create a new message.
 */
export const MembershipSpecSchema: GenMessage<MembershipSpec> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 1);

/**
 * Configuration for Config Sync
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.ConfigSync
 */
export type ConfigSync = Message<"google.cloud.gkehub.configmanagement.v1beta.ConfigSync"> & {
  /**
   * Git repo configuration for the cluster.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.GitConfig git = 7;
   */
  git?: GitConfig;

  /**
   * Specifies whether the Config Sync Repo is
   * in “hierarchical” or “unstructured” mode.
   *
   * @generated from field: string source_format = 8;
   */
  sourceFormat: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.ConfigSync.
 * Use `create(ConfigSyncSchema)` to create a new message.
 */
export const ConfigSyncSchema: GenMessage<ConfigSync> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 2);

/**
 * Git repo configuration for a single cluster.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.GitConfig
 */
export type GitConfig = Message<"google.cloud.gkehub.configmanagement.v1beta.GitConfig"> & {
  /**
   * The URL of the Git repository to use as the source of truth.
   *
   * @generated from field: string sync_repo = 1;
   */
  syncRepo: string;

  /**
   * The branch of the repository to sync from. Default: master.
   *
   * @generated from field: string sync_branch = 2;
   */
  syncBranch: string;

  /**
   * The path within the Git repository that represents the top level of the
   * repo to sync. Default: the root directory of the repository.
   *
   * @generated from field: string policy_dir = 3;
   */
  policyDir: string;

  /**
   * Period in seconds between consecutive syncs. Default: 15.
   *
   * @generated from field: int64 sync_wait_secs = 4;
   */
  syncWaitSecs: bigint;

  /**
   * Git revision (tag or hash) to check out. Default HEAD.
   *
   * @generated from field: string sync_rev = 5;
   */
  syncRev: string;

  /**
   * Type of secret configured for access to the Git repo.
   *
   * @generated from field: string secret_type = 6;
   */
  secretType: string;

  /**
   * URL for the HTTPS proxy to be used when communicating with the Git repo.
   *
   * @generated from field: string https_proxy = 7;
   */
  httpsProxy: string;

  /**
   * The GCP Service Account Email used for auth when secret_type is
   * gcpServiceAccount.
   *
   * @generated from field: string gcp_service_account_email = 8;
   */
  gcpServiceAccountEmail: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.GitConfig.
 * Use `create(GitConfigSchema)` to create a new message.
 */
export const GitConfigSchema: GenMessage<GitConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 3);

/**
 * Configuration for Policy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.PolicyController
 */
export type PolicyController = Message<"google.cloud.gkehub.configmanagement.v1beta.PolicyController"> & {
  /**
   * Enables the installation of Policy Controller.
   * If false, the rest of PolicyController fields take no
   * effect.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Installs the default template library along with Policy Controller.
   *
   * @generated from field: optional bool template_library_installed = 2;
   */
  templateLibraryInstalled?: boolean;

  /**
   * Sets the interval for Policy Controller Audit Scans (in seconds).
   * When set to 0, this disables audit functionality altogether.
   *
   * @generated from field: optional int64 audit_interval_seconds = 3;
   */
  auditIntervalSeconds?: bigint;

  /**
   * The set of namespaces that are excluded from Policy Controller checks.
   * Namespaces do not need to currently exist on the cluster.
   *
   * @generated from field: repeated string exemptable_namespaces = 4;
   */
  exemptableNamespaces: string[];

  /**
   * Enables the ability to use Constraint Templates that reference to objects
   * other than the object currently being evaluated.
   *
   * @generated from field: bool referential_rules_enabled = 5;
   */
  referentialRulesEnabled: boolean;

  /**
   * Logs all denies and dry run failures.
   *
   * @generated from field: bool log_denies_enabled = 6;
   */
  logDeniesEnabled: boolean;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.PolicyController.
 * Use `create(PolicyControllerSchema)` to create a new message.
 */
export const PolicyControllerSchema: GenMessage<PolicyController> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 4);

/**
 * Configuration for Binauthz
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.BinauthzConfig
 */
export type BinauthzConfig = Message<"google.cloud.gkehub.configmanagement.v1beta.BinauthzConfig"> & {
  /**
   * Whether binauthz is enabled in this cluster.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.BinauthzConfig.
 * Use `create(BinauthzConfigSchema)` to create a new message.
 */
export const BinauthzConfigSchema: GenMessage<BinauthzConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 5);

/**
 * Configuration for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerConfig
 */
export type HierarchyControllerConfig = Message<"google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerConfig"> & {
  /**
   * Whether Hierarchy Controller is enabled in this cluster.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Whether pod tree labels are enabled in this cluster.
   *
   * @generated from field: bool enable_pod_tree_labels = 2;
   */
  enablePodTreeLabels: boolean;

  /**
   * Whether hierarchical resource quota is enabled in this cluster.
   *
   * @generated from field: bool enable_hierarchical_resource_quota = 3;
   */
  enableHierarchicalResourceQuota: boolean;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerConfig.
 * Use `create(HierarchyControllerConfigSchema)` to create a new message.
 */
export const HierarchyControllerConfigSchema: GenMessage<HierarchyControllerConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 6);

/**
 * Deployment state for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerDeploymentState
 */
export type HierarchyControllerDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerDeploymentState"> & {
  /**
   * The deployment state for open source HNC (e.g. v0.7.0-hc.0)
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState hnc = 1;
   */
  hnc: DeploymentState;

  /**
   * The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState extension = 2;
   */
  extension: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerDeploymentState.
 * Use `create(HierarchyControllerDeploymentStateSchema)` to create a new message.
 */
export const HierarchyControllerDeploymentStateSchema: GenMessage<HierarchyControllerDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 7);

/**
 * Version for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerVersion
 */
export type HierarchyControllerVersion = Message<"google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerVersion"> & {
  /**
   * Version for open source HNC
   *
   * @generated from field: string hnc = 1;
   */
  hnc: string;

  /**
   * Version for Hierarchy Controller extension
   *
   * @generated from field: string extension = 2;
   */
  extension: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerVersion.
 * Use `create(HierarchyControllerVersionSchema)` to create a new message.
 */
export const HierarchyControllerVersionSchema: GenMessage<HierarchyControllerVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 8);

/**
 * State for Hierarchy Controller
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerState
 */
export type HierarchyControllerState = Message<"google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerState"> & {
  /**
   * The version for Hierarchy Controller
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerVersion version = 1;
   */
  version?: HierarchyControllerVersion;

  /**
   * The deployment state for Hierarchy Controller
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerDeploymentState state = 2;
   */
  state?: HierarchyControllerDeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.HierarchyControllerState.
 * Use `create(HierarchyControllerStateSchema)` to create a new message.
 */
export const HierarchyControllerStateSchema: GenMessage<HierarchyControllerState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 9);

/**
 * State information for an ACM's Operator
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.OperatorState
 */
export type OperatorState = Message<"google.cloud.gkehub.configmanagement.v1beta.OperatorState"> & {
  /**
   * The semenatic version number of the operator
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The state of the Operator's deployment
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState deployment_state = 2;
   */
  deploymentState: DeploymentState;

  /**
   * Install errors.
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1beta.InstallError errors = 3;
   */
  errors: InstallError[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.OperatorState.
 * Use `create(OperatorStateSchema)` to create a new message.
 */
export const OperatorStateSchema: GenMessage<OperatorState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 10);

/**
 * Errors pertaining to the installation of ACM
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.InstallError
 */
export type InstallError = Message<"google.cloud.gkehub.configmanagement.v1beta.InstallError"> & {
  /**
   * A string representing the user facing error message
   *
   * @generated from field: string error_message = 1;
   */
  errorMessage: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.InstallError.
 * Use `create(InstallErrorSchema)` to create a new message.
 */
export const InstallErrorSchema: GenMessage<InstallError> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 11);

/**
 * State information for ConfigSync
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncState
 */
export type ConfigSyncState = Message<"google.cloud.gkehub.configmanagement.v1beta.ConfigSyncState"> & {
  /**
   * The version of ConfigSync deployed
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.ConfigSyncVersion version = 1;
   */
  version?: ConfigSyncVersion;

  /**
   * Information about the deployment of ConfigSync, including the version
   * of the various Pods deployed
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.ConfigSyncDeploymentState deployment_state = 2;
   */
  deploymentState?: ConfigSyncDeploymentState;

  /**
   * The state of ConfigSync's process to sync configs to a cluster
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.SyncState sync_state = 3;
   */
  syncState?: SyncState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncState.
 * Use `create(ConfigSyncStateSchema)` to create a new message.
 */
export const ConfigSyncStateSchema: GenMessage<ConfigSyncState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 12);

/**
 * Specific versioning information pertaining to ConfigSync's Pods
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncVersion
 */
export type ConfigSyncVersion = Message<"google.cloud.gkehub.configmanagement.v1beta.ConfigSyncVersion"> & {
  /**
   * Version of the deployed importer pod
   *
   * @generated from field: string importer = 1;
   */
  importer: string;

  /**
   * Version of the deployed syncer pod
   *
   * @generated from field: string syncer = 2;
   */
  syncer: string;

  /**
   * Version of the deployed git-sync pod
   *
   * @generated from field: string git_sync = 3;
   */
  gitSync: string;

  /**
   * Version of the deployed monitor pod
   *
   * @generated from field: string monitor = 4;
   */
  monitor: string;

  /**
   * Version of the deployed reconciler-manager pod
   *
   * @generated from field: string reconciler_manager = 5;
   */
  reconcilerManager: string;

  /**
   * Version of the deployed reconciler container in root-reconciler pod
   *
   * @generated from field: string root_reconciler = 6;
   */
  rootReconciler: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncVersion.
 * Use `create(ConfigSyncVersionSchema)` to create a new message.
 */
export const ConfigSyncVersionSchema: GenMessage<ConfigSyncVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 13);

/**
 * The state of ConfigSync's deployment on a cluster
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncDeploymentState
 */
export type ConfigSyncDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1beta.ConfigSyncDeploymentState"> & {
  /**
   * Deployment state of the importer pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState importer = 1;
   */
  importer: DeploymentState;

  /**
   * Deployment state of the syncer pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState syncer = 2;
   */
  syncer: DeploymentState;

  /**
   * Deployment state of the git-sync pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState git_sync = 3;
   */
  gitSync: DeploymentState;

  /**
   * Deployment state of the monitor pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState monitor = 4;
   */
  monitor: DeploymentState;

  /**
   * Deployment state of reconciler-manager pod
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState reconciler_manager = 5;
   */
  reconcilerManager: DeploymentState;

  /**
   * Deployment state of root-reconciler
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState root_reconciler = 6;
   */
  rootReconciler: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.ConfigSyncDeploymentState.
 * Use `create(ConfigSyncDeploymentStateSchema)` to create a new message.
 */
export const ConfigSyncDeploymentStateSchema: GenMessage<ConfigSyncDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 14);

/**
 * State indicating an ACM's progress syncing configurations to a cluster
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.SyncState
 */
export type SyncState = Message<"google.cloud.gkehub.configmanagement.v1beta.SyncState"> & {
  /**
   * Token indicating the state of the repo.
   *
   * @generated from field: string source_token = 1;
   */
  sourceToken: string;

  /**
   * Token indicating the state of the importer.
   *
   * @generated from field: string import_token = 2;
   */
  importToken: string;

  /**
   * Token indicating the state of the syncer.
   *
   * @generated from field: string sync_token = 3;
   */
  syncToken: string;

  /**
   * Deprecated: use last_sync_time instead.
   * Timestamp of when ACM last successfully synced the repo
   * The time format is specified in https://golang.org/pkg/time/#Time.String
   *
   * @generated from field: string last_sync = 4 [deprecated = true];
   * @deprecated
   */
  lastSync: string;

  /**
   * Timestamp type of when ACM last successfully synced the repo
   *
   * @generated from field: google.protobuf.Timestamp last_sync_time = 7;
   */
  lastSyncTime?: Timestamp;

  /**
   * Sync status code
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.SyncState.SyncCode code = 5;
   */
  code: SyncState_SyncCode;

  /**
   * A list of errors resulting from problematic configs.
   * This list will be truncated after 100 errors, although it is
   * unlikely for that many errors to simultaneously exist.
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1beta.SyncError errors = 6;
   */
  errors: SyncError[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.SyncState.
 * Use `create(SyncStateSchema)` to create a new message.
 */
export const SyncStateSchema: GenMessage<SyncState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 15);

/**
 * An enum representing an ACM's status syncing configs to a cluster
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1beta.SyncState.SyncCode
 */
export enum SyncState_SyncCode {
  /**
   * ACM cannot determine a sync code
   *
   * @generated from enum value: SYNC_CODE_UNSPECIFIED = 0;
   */
  SYNC_CODE_UNSPECIFIED = 0,

  /**
   * ACM successfully synced the git Repo with the cluster
   *
   * @generated from enum value: SYNCED = 1;
   */
  SYNCED = 1,

  /**
   * ACM is in the progress of syncing a new change
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * Indicates an error configuring ACM, and user action is required
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,

  /**
   * ACM has been installed (operator manifest deployed),
   * but not configured.
   *
   * @generated from enum value: NOT_CONFIGURED = 4;
   */
  NOT_CONFIGURED = 4,

  /**
   * ACM has not been installed (no operator pod found)
   *
   * @generated from enum value: NOT_INSTALLED = 5;
   */
  NOT_INSTALLED = 5,

  /**
   * Error authorizing with the cluster
   *
   * @generated from enum value: UNAUTHORIZED = 6;
   */
  UNAUTHORIZED = 6,

  /**
   * Cluster could not be reached
   *
   * @generated from enum value: UNREACHABLE = 7;
   */
  UNREACHABLE = 7,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1beta.SyncState.SyncCode.
 */
export const SyncState_SyncCodeSchema: GenEnum<SyncState_SyncCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 15, 0);

/**
 * An ACM created error representing a problem syncing configurations
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.SyncError
 */
export type SyncError = Message<"google.cloud.gkehub.configmanagement.v1beta.SyncError"> & {
  /**
   * An ACM defined error code
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * A description of the error
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * A list of config(s) associated with the error, if any
   *
   * @generated from field: repeated google.cloud.gkehub.configmanagement.v1beta.ErrorResource error_resources = 3;
   */
  errorResources: ErrorResource[];
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.SyncError.
 * Use `create(SyncErrorSchema)` to create a new message.
 */
export const SyncErrorSchema: GenMessage<SyncError> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 16);

/**
 * Model for a config file in the git repo with an associated Sync error
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.ErrorResource
 */
export type ErrorResource = Message<"google.cloud.gkehub.configmanagement.v1beta.ErrorResource"> & {
  /**
   * Path in the git repo of the erroneous config
   *
   * @generated from field: string source_path = 1;
   */
  sourcePath: string;

  /**
   * Metadata name of the resource that is causing an error
   *
   * @generated from field: string resource_name = 2;
   */
  resourceName: string;

  /**
   * Namespace of the resource that is causing an error
   *
   * @generated from field: string resource_namespace = 3;
   */
  resourceNamespace: string;

  /**
   * Group/version/kind of the resource that is causing an error
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.GroupVersionKind resource_gvk = 4;
   */
  resourceGvk?: GroupVersionKind;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.ErrorResource.
 * Use `create(ErrorResourceSchema)` to create a new message.
 */
export const ErrorResourceSchema: GenMessage<ErrorResource> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 17);

/**
 * A Kubernetes object's GVK
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.GroupVersionKind
 */
export type GroupVersionKind = Message<"google.cloud.gkehub.configmanagement.v1beta.GroupVersionKind"> & {
  /**
   * Kubernetes Group
   *
   * @generated from field: string group = 1;
   */
  group: string;

  /**
   * Kubernetes Version
   *
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Kubernetes Kind
   *
   * @generated from field: string kind = 3;
   */
  kind: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.GroupVersionKind.
 * Use `create(GroupVersionKindSchema)` to create a new message.
 */
export const GroupVersionKindSchema: GenMessage<GroupVersionKind> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 18);

/**
 * State for PolicyControllerState.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.PolicyControllerState
 */
export type PolicyControllerState = Message<"google.cloud.gkehub.configmanagement.v1beta.PolicyControllerState"> & {
  /**
   * The version of Gatekeeper Policy Controller deployed.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.PolicyControllerVersion version = 1;
   */
  version?: PolicyControllerVersion;

  /**
   * The state about the policy controller installation.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.GatekeeperDeploymentState deployment_state = 2;
   */
  deploymentState?: GatekeeperDeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.PolicyControllerState.
 * Use `create(PolicyControllerStateSchema)` to create a new message.
 */
export const PolicyControllerStateSchema: GenMessage<PolicyControllerState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 19);

/**
 * The build version of Gatekeeper Policy Controller is using.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.PolicyControllerVersion
 */
export type PolicyControllerVersion = Message<"google.cloud.gkehub.configmanagement.v1beta.PolicyControllerVersion"> & {
  /**
   * The gatekeeper image tag that is composed of ACM version, git tag, build
   * number.
   *
   * @generated from field: string version = 1;
   */
  version: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.PolicyControllerVersion.
 * Use `create(PolicyControllerVersionSchema)` to create a new message.
 */
export const PolicyControllerVersionSchema: GenMessage<PolicyControllerVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 20);

/**
 * State for Binauthz
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.BinauthzState
 */
export type BinauthzState = Message<"google.cloud.gkehub.configmanagement.v1beta.BinauthzState"> & {
  /**
   * The state of the binauthz webhook.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState webhook = 1;
   */
  webhook: DeploymentState;

  /**
   * The version of binauthz that is installed.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.BinauthzVersion version = 2;
   */
  version?: BinauthzVersion;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.BinauthzState.
 * Use `create(BinauthzStateSchema)` to create a new message.
 */
export const BinauthzStateSchema: GenMessage<BinauthzState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 21);

/**
 * The version of binauthz.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.BinauthzVersion
 */
export type BinauthzVersion = Message<"google.cloud.gkehub.configmanagement.v1beta.BinauthzVersion"> & {
  /**
   * The version of the binauthz webhook.
   *
   * @generated from field: string webhook_version = 1;
   */
  webhookVersion: string;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.BinauthzVersion.
 * Use `create(BinauthzVersionSchema)` to create a new message.
 */
export const BinauthzVersionSchema: GenMessage<BinauthzVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 22);

/**
 * State of Policy Controller installation.
 *
 * @generated from message google.cloud.gkehub.configmanagement.v1beta.GatekeeperDeploymentState
 */
export type GatekeeperDeploymentState = Message<"google.cloud.gkehub.configmanagement.v1beta.GatekeeperDeploymentState"> & {
  /**
   * Status of gatekeeper-controller-manager pod.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState gatekeeper_controller_manager_state = 1;
   */
  gatekeeperControllerManagerState: DeploymentState;

  /**
   * Status of gatekeeper-audit deployment.
   *
   * @generated from field: google.cloud.gkehub.configmanagement.v1beta.DeploymentState gatekeeper_audit = 2;
   */
  gatekeeperAudit: DeploymentState;
};

/**
 * Describes the message google.cloud.gkehub.configmanagement.v1beta.GatekeeperDeploymentState.
 * Use `create(GatekeeperDeploymentStateSchema)` to create a new message.
 */
export const GatekeeperDeploymentStateSchema: GenMessage<GatekeeperDeploymentState> = /*@__PURE__*/
  messageDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 23);

/**
 * Enum representing the state of an ACM's deployment on a cluster
 *
 * @generated from enum google.cloud.gkehub.configmanagement.v1beta.DeploymentState
 */
export enum DeploymentState {
  /**
   * Deployment's state cannot be determined
   *
   * @generated from enum value: DEPLOYMENT_STATE_UNSPECIFIED = 0;
   */
  DEPLOYMENT_STATE_UNSPECIFIED = 0,

  /**
   * Deployment is not installed
   *
   * @generated from enum value: NOT_INSTALLED = 1;
   */
  NOT_INSTALLED = 1,

  /**
   * Deployment is installed
   *
   * @generated from enum value: INSTALLED = 2;
   */
  INSTALLED = 2,

  /**
   * Deployment was attempted to be installed, but has errors
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}

/**
 * Describes the enum google.cloud.gkehub.configmanagement.v1beta.DeploymentState.
 */
export const DeploymentStateSchema: GenEnum<DeploymentState> = /*@__PURE__*/
  enumDesc(file_google_cloud_gkehub_v1beta_configmanagement_configmanagement, 0);

