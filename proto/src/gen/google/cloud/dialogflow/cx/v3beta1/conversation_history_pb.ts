// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dialogflow/cx/v3beta1/conversation_history.proto (package google.cloud.dialogflow.cx.v3beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Environment } from "./environment_pb";
import { file_google_cloud_dialogflow_cx_v3beta1_environment } from "./environment_pb";
import type { Flow } from "./flow_pb";
import { file_google_cloud_dialogflow_cx_v3beta1_flow } from "./flow_pb";
import type { Intent } from "./intent_pb";
import { file_google_cloud_dialogflow_cx_v3beta1_intent } from "./intent_pb";
import type { Page } from "./page_pb";
import { file_google_cloud_dialogflow_cx_v3beta1_page } from "./page_pb";
import type { DetectIntentRequest, DetectIntentResponse } from "./session_pb";
import { file_google_cloud_dialogflow_cx_v3beta1_session } from "./session_pb";
import type { Duration, EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dialogflow/cx/v3beta1/conversation_history.proto.
 */
export const file_google_cloud_dialogflow_cx_v3beta1_conversation_history: GenFile = /*@__PURE__*/
  fileDesc("Cj1nb29nbGUvY2xvdWQvZGlhbG9nZmxvdy9jeC92M2JldGExL2NvbnZlcnNhdGlvbl9oaXN0b3J5LnByb3RvEiJnb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExIlYKFkdldENvbnZlcnNhdGlvblJlcXVlc3QSPAoEbmFtZRgBIAEoCUIu4EEC+kEoCiZkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0NvbnZlcnNhdGlvbiJZChlEZWxldGVDb252ZXJzYXRpb25SZXF1ZXN0EjwKBG5hbWUYASABKAlCLuBBAvpBKAomZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9Db252ZXJzYXRpb24ioAEKGExpc3RDb252ZXJzYXRpb25zUmVxdWVzdBI+CgZwYXJlbnQYASABKAlCLuBBAvpBKBImZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9Db252ZXJzYXRpb24SEwoGZmlsdGVyGAIgASgJQgPgQQESFgoJcGFnZV9zaXplGAMgASgFQgPgQQESFwoKcGFnZV90b2tlbhgEIAEoCUID4EEBIn0KGUxpc3RDb252ZXJzYXRpb25zUmVzcG9uc2USRwoNY29udmVyc2F0aW9ucxgBIAMoCzIwLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzYmV0YTEuQ29udmVyc2F0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKxEgoMQ29udmVyc2F0aW9uEhEKBG5hbWUYASABKAlCA+BBCBJDCgR0eXBlGAIgASgOMjUuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMS5Db252ZXJzYXRpb24uVHlwZRIVCg1sYW5ndWFnZV9jb2RlGAMgASgJEi4KCnN0YXJ0X3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEisKCGR1cmF0aW9uGAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkkKB21ldHJpY3MYBiABKAsyOC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkNvbnZlcnNhdGlvbi5NZXRyaWNzEjsKB2ludGVudHMYByADKAsyKi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkludGVudBI3CgVmbG93cxgIIAMoCzIoLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzYmV0YTEuRmxvdxI3CgVwYWdlcxgJIAMoCzIoLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzYmV0YTEuUGFnZRJSCgxpbnRlcmFjdGlvbnMYCiADKAsyPC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkNvbnZlcnNhdGlvbi5JbnRlcmFjdGlvbhJECgtlbnZpcm9ubWVudBgLIAEoCzIvLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzYmV0YTEuRW52aXJvbm1lbnQSWQoNZmxvd192ZXJzaW9ucxgMIAMoCzJCLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzYmV0YTEuQ29udmVyc2F0aW9uLkZsb3dWZXJzaW9uc0VudHJ5GrgGCgdNZXRyaWNzEhkKEWludGVyYWN0aW9uX2NvdW50GAEgASgFEjcKFGlucHV0X2F1ZGlvX2R1cmF0aW9uGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEjgKFW91dHB1dF9hdWRpb19kdXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI2ChNtYXhfd2ViaG9va19sYXRlbmN5GAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhsKE2hhc19lbmRfaW50ZXJhY3Rpb24YBSABKAgSHgoWaGFzX2xpdmVfYWdlbnRfaGFuZG9mZhgGIAEoCBIgChhhdmVyYWdlX21hdGNoX2NvbmZpZGVuY2UYByABKAISYwoRcXVlcnlfaW5wdXRfY291bnQYCCABKAsySC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkNvbnZlcnNhdGlvbi5NZXRyaWNzLlF1ZXJ5SW5wdXRDb3VudBJhChBtYXRjaF90eXBlX2NvdW50GAkgASgLMkcuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMS5Db252ZXJzYXRpb24uTWV0cmljcy5NYXRjaFR5cGVDb3VudBp5Cg9RdWVyeUlucHV0Q291bnQSEgoKdGV4dF9jb3VudBgBIAEoBRIUCgxpbnRlbnRfY291bnQYAiABKAUSEwoLYXVkaW9fY291bnQYAyABKAUSEwoLZXZlbnRfY291bnQYBCABKAUSEgoKZHRtZl9jb3VudBgFIAEoBRrEAQoOTWF0Y2hUeXBlQ291bnQSGQoRdW5zcGVjaWZpZWRfY291bnQYASABKAUSFAoMaW50ZW50X2NvdW50GAIgASgFEhsKE2RpcmVjdF9pbnRlbnRfY291bnQYAyABKAUSHwoXcGFyYW1ldGVyX2ZpbGxpbmdfY291bnQYBCABKAUSFgoObm9fbWF0Y2hfY291bnQYBSABKAUSFgoObm9faW5wdXRfY291bnQYBiABKAUSEwoLZXZlbnRfY291bnQYByABKAUajwQKC0ludGVyYWN0aW9uEkgKB3JlcXVlc3QYASABKAsyNy5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkRldGVjdEludGVudFJlcXVlc3QSSgoIcmVzcG9uc2UYAiABKAsyOC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkRldGVjdEludGVudFJlc3BvbnNlElMKEXBhcnRpYWxfcmVzcG9uc2VzGAMgAygLMjguZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMS5EZXRlY3RJbnRlbnRSZXNwb25zZRIaChJyZXF1ZXN0X3V0dGVyYW5jZXMYBCABKAkSGwoTcmVzcG9uc2VfdXR0ZXJhbmNlcxgFIAEoCRIvCgtjcmVhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASagoSbWlzc2luZ190cmFuc2l0aW9uGAggASgLMk4uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMS5Db252ZXJzYXRpb24uSW50ZXJhY3Rpb24uTWlzc2luZ1RyYW5zaXRpb24aPwoRTWlzc2luZ1RyYW5zaXRpb24SGwoTaW50ZW50X2Rpc3BsYXlfbmFtZRgBIAEoCRINCgVzY29yZRgCIAEoAhozChFGbG93VmVyc2lvbnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIkMKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgkKBUFVRElPEAESCAoEVEVYVBACEhAKDFVOREVURVJNSU5FRBADOp4B6kGaAQomZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9Db252ZXJzYXRpb24SU3Byb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9hZ2VudHMve2FnZW50fS9jb252ZXJzYXRpb25zL3tjb252ZXJzYXRpb259Kg1jb252ZXJzYXRpb25zMgxjb252ZXJzYXRpb24yhAYKE0NvbnZlcnNhdGlvbkhpc3RvcnkS4gEKEUxpc3RDb252ZXJzYXRpb25zEjwuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMS5MaXN0Q29udmVyc2F0aW9uc1JlcXVlc3QaPS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkxpc3RDb252ZXJzYXRpb25zUmVzcG9uc2UiUNpBBnBhcmVudILT5JMCQRI/L3YzYmV0YTEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qfS9jb252ZXJzYXRpb25zEs8BCg9HZXRDb252ZXJzYXRpb24SOi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkdldENvbnZlcnNhdGlvblJlcXVlc3QaMC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkNvbnZlcnNhdGlvbiJO2kEEbmFtZYLT5JMCQRI/L3YzYmV0YTEve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKi9jb252ZXJzYXRpb25zLyp9ErsBChJEZWxldGVDb252ZXJzYXRpb24SPS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M2JldGExLkRlbGV0ZUNvbnZlcnNhdGlvblJlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiTtpBBG5hbWWC0+STAkEqPy92M2JldGExL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovYWdlbnRzLyovY29udmVyc2F0aW9ucy8qfRp4ykEZZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbdJBWWh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kaWFsb2dmbG93QtIBCiZjb20uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNiZXRhMUIYQ29udmVyc2F0aW9uSGlzdG9yeVByb3RvUAFaNmNsb3VkLmdvb2dsZS5jb20vZ28vZGlhbG9nZmxvdy9jeC9hcGl2M2JldGExL2N4cGI7Y3hwYvgBAaICAkRGqgIiR29vZ2xlLkNsb3VkLkRpYWxvZ2Zsb3cuQ3guVjNCZXRhMeoCJkdvb2dsZTo6Q2xvdWQ6OkRpYWxvZ2Zsb3c6OkNYOjpWM2JldGExYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dialogflow_cx_v3beta1_environment, file_google_cloud_dialogflow_cx_v3beta1_flow, file_google_cloud_dialogflow_cx_v3beta1_intent, file_google_cloud_dialogflow_cx_v3beta1_page, file_google_cloud_dialogflow_cx_v3beta1_session, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp]);

/**
 * The request message for [Conversations.GetConversation][].
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.GetConversationRequest
 */
export type GetConversationRequest = Message<"google.cloud.dialogflow.cx.v3beta1.GetConversationRequest"> & {
  /**
   * Required. The name of the conversation.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/conversations/<Conversation ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.GetConversationRequest.
 * Use `create(GetConversationRequestSchema)` to create a new message.
 */
export const GetConversationRequestSchema: GenMessage<GetConversationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 0);

/**
 * The request message for [Conversations.DeleteConversation][].
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.DeleteConversationRequest
 */
export type DeleteConversationRequest = Message<"google.cloud.dialogflow.cx.v3beta1.DeleteConversationRequest"> & {
  /**
   * Required. The name of the conversation.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/conversations/<Conversation ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.DeleteConversationRequest.
 * Use `create(DeleteConversationRequestSchema)` to create a new message.
 */
export const DeleteConversationRequestSchema: GenMessage<DeleteConversationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 1);

/**
 * The request message for [Conversations.ListConversations][].
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.ListConversationsRequest
 */
export type ListConversationsRequest = Message<"google.cloud.dialogflow.cx.v3beta1.ListConversationsRequest"> & {
  /**
   * Required. The agent to list all conversations for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The filter string. Supports filter by create_time,
   * metrics.has_end_interaction, metrics.has_live_agent_handoff,
   * intents.display_name, pages.display_name and flows.display_name. Timestamps
   * expect an [RFC-3339][https://datatracker.ietf.org/doc/html/rfc3339]
   * formatted string (e.g. 2012-04-21T11:30:00-04:00). UTC offsets are
   * supported. Some examples:
   *   1. By create time:
   *        create_time > "2022-04-21T11:30:00-04:00"
   *   2. By intent display name:
   *        intents.display_name : "billing"
   *   3. By end interaction signal:
   *        metrics.has_end_interaction = true
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Optional. The maximum number of items to return in a single page. By
   * default 100 and at most 1000.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Optional. The next_page_token value returned from a previous list request.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.ListConversationsRequest.
 * Use `create(ListConversationsRequestSchema)` to create a new message.
 */
export const ListConversationsRequestSchema: GenMessage<ListConversationsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 2);

/**
 * The response message for [Conversations.ListConversations][].
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.ListConversationsResponse
 */
export type ListConversationsResponse = Message<"google.cloud.dialogflow.cx.v3beta1.ListConversationsResponse"> & {
  /**
   * The list of conversations. There will be a maximum number of items returned
   * based on the
   * [page_size][google.cloud.dialogflow.cx.v3beta1.ListConversationsRequest.page_size]
   * field. The returned conversations will be sorted by start_time in
   * descending order (newest conversation first).
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.Conversation conversations = 1;
   */
  conversations: Conversation[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.ListConversationsResponse.
 * Use `create(ListConversationsResponseSchema)` to create a new message.
 */
export const ListConversationsResponseSchema: GenMessage<ListConversationsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 3);

/**
 * Represents a conversation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation
 */
export type Conversation = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation"> & {
  /**
   * Identifier. The identifier of the conversation.
   * If conversation ID is reused, interactions happened later than 48 hours of
   * the conversation's create time will be ignored. Format:
   * `projects/<ProjectID>/locations/<Location ID>/agents/<Agent
   * ID>/conversations/<Conversation ID>`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The type of the conversation.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Conversation.Type type = 2;
   */
  type: Conversation_Type;

  /**
   * The language of the conversation, which is the language of the first
   * request in the conversation.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;

  /**
   * Start time of the conversation, which is the time of the first request of
   * the conversation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * Duration of the conversation.
   *
   * @generated from field: google.protobuf.Duration duration = 5;
   */
  duration?: Duration;

  /**
   * Conversation metrics.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics metrics = 6;
   */
  metrics?: Conversation_Metrics;

  /**
   * All the matched [Intent][google.cloud.dialogflow.cx.v3beta1.Intent] in the
   * conversation. Only `name` and `display_name` are filled in this message.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.Intent intents = 7;
   */
  intents: Intent[];

  /**
   * All the [Flow][google.cloud.dialogflow.cx.v3beta1.Flow] the conversation
   * has went through. Only `name` and `display_name` are filled in this
   * message.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.Flow flows = 8;
   */
  flows: Flow[];

  /**
   * All the [Page][google.cloud.dialogflow.cx.v3beta1.Page] the conversation
   * has went through. Only `name` and `display_name` are filled in this
   * message.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.Page pages = 9;
   */
  pages: Page[];

  /**
   * Interactions of the conversation.
   * Only populated for `GetConversation` and empty for `ListConversations`.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction interactions = 10;
   */
  interactions: Conversation_Interaction[];

  /**
   * Environment of the conversation.
   * Only `name` and `display_name` are filled in this message.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Environment environment = 11;
   */
  environment?: Environment;

  /**
   * Flow versions used in the conversation.
   *
   * @generated from field: map<string, int64> flow_versions = 12;
   */
  flowVersions: { [key: string]: bigint };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.
 * Use `create(ConversationSchema)` to create a new message.
 */
export const ConversationSchema: GenMessage<Conversation> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4);

/**
 * Represents metrics for the conversation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics
 */
export type Conversation_Metrics = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics"> & {
  /**
   * The number of interactions in the conversation.
   *
   * @generated from field: int32 interaction_count = 1;
   */
  interactionCount: number;

  /**
   * Duration of all the input's audio in the conversation.
   *
   * @generated from field: google.protobuf.Duration input_audio_duration = 2;
   */
  inputAudioDuration?: Duration;

  /**
   * Duration of all the output's audio in the conversation.
   *
   * @generated from field: google.protobuf.Duration output_audio_duration = 3;
   */
  outputAudioDuration?: Duration;

  /**
   * Maximum latency of the
   * [Webhook][google.cloud.dialogflow.cx.v3beta1.Webhook] calls in the
   * conversation.
   *
   * @generated from field: google.protobuf.Duration max_webhook_latency = 4;
   */
  maxWebhookLatency?: Duration;

  /**
   * A signal that indicates the interaction with the Dialogflow agent has
   * ended.
   * If any response has the
   * [ResponseMessage.end_interaction][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.end_interaction]
   * signal, this is set to true.
   *
   * @generated from field: bool has_end_interaction = 5;
   */
  hasEndInteraction: boolean;

  /**
   * Hands off conversation to a human agent.
   * If any response has the
   * [ResponseMessage.live_agent_handoff][google.cloud.dialogflow.cx.v3beta1.ResponseMessage.live_agent_handoff]signal,
   * this is set to true.
   *
   * @generated from field: bool has_live_agent_handoff = 6;
   */
  hasLiveAgentHandoff: boolean;

  /**
   * The average confidence all of the
   * [Match][google.cloud.dialogflow.cx.v3beta1.Match] in the conversation.
   * Values range from 0.0 (completely uncertain) to 1.0 (completely certain).
   *
   * @generated from field: float average_match_confidence = 7;
   */
  averageMatchConfidence: number;

  /**
   * Query input counts.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.QueryInputCount query_input_count = 8;
   */
  queryInputCount?: Conversation_Metrics_QueryInputCount;

  /**
   * Match type counts.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.MatchTypeCount match_type_count = 9;
   */
  matchTypeCount?: Conversation_Metrics_MatchTypeCount;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.
 * Use `create(Conversation_MetricsSchema)` to create a new message.
 */
export const Conversation_MetricsSchema: GenMessage<Conversation_Metrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 0);

/**
 * Count by types of
 * [QueryInput][google.cloud.dialogflow.cx.v3beta1.QueryInput] of the
 * requests in the conversation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.QueryInputCount
 */
export type Conversation_Metrics_QueryInputCount = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.QueryInputCount"> & {
  /**
   * The number of [TextInput][google.cloud.dialogflow.cx.v3beta1.TextInput]
   * in the conversation.
   *
   * @generated from field: int32 text_count = 1;
   */
  textCount: number;

  /**
   * The number of
   * [IntentInput][google.cloud.dialogflow.cx.v3beta1.IntentInput] in the
   * conversation.
   *
   * @generated from field: int32 intent_count = 2;
   */
  intentCount: number;

  /**
   * The number of
   * [AudioInput][google.cloud.dialogflow.cx.v3beta1.AudioInput] in the
   * conversation.
   *
   * @generated from field: int32 audio_count = 3;
   */
  audioCount: number;

  /**
   * The number of
   * [EventInput][google.cloud.dialogflow.cx.v3beta1.EventInput] in the
   * conversation.
   *
   * @generated from field: int32 event_count = 4;
   */
  eventCount: number;

  /**
   * The number of [DtmfInput][google.cloud.dialogflow.cx.v3beta1.DtmfInput]
   * in the conversation.
   *
   * @generated from field: int32 dtmf_count = 5;
   */
  dtmfCount: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.QueryInputCount.
 * Use `create(Conversation_Metrics_QueryInputCountSchema)` to create a new message.
 */
export const Conversation_Metrics_QueryInputCountSchema: GenMessage<Conversation_Metrics_QueryInputCount> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 0, 0);

/**
 * Count by
 * [Match.MatchType][google.cloud.dialogflow.cx.v3beta1.Match.MatchType] of
 * the matches in the conversation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.MatchTypeCount
 */
export type Conversation_Metrics_MatchTypeCount = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.MatchTypeCount"> & {
  /**
   * The number of matches with type
   * [Match.MatchType.MATCH_TYPE_UNSPECIFIED][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.MATCH_TYPE_UNSPECIFIED].
   *
   * @generated from field: int32 unspecified_count = 1;
   */
  unspecifiedCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.INTENT][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.INTENT].
   *
   * @generated from field: int32 intent_count = 2;
   */
  intentCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.DIRECT_INTENT][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.DIRECT_INTENT].
   *
   * @generated from field: int32 direct_intent_count = 3;
   */
  directIntentCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.PARAMETER_FILLING][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.PARAMETER_FILLING].
   *
   * @generated from field: int32 parameter_filling_count = 4;
   */
  parameterFillingCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.NO_MATCH][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.NO_MATCH].
   *
   * @generated from field: int32 no_match_count = 5;
   */
  noMatchCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.NO_INPUT][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.NO_INPUT].
   *
   * @generated from field: int32 no_input_count = 6;
   */
  noInputCount: number;

  /**
   * The number of matches with type
   * [Match.MatchType.EVENT][google.cloud.dialogflow.cx.v3beta1.Match.MatchType.EVENT].
   *
   * @generated from field: int32 event_count = 7;
   */
  eventCount: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.Metrics.MatchTypeCount.
 * Use `create(Conversation_Metrics_MatchTypeCountSchema)` to create a new message.
 */
export const Conversation_Metrics_MatchTypeCountSchema: GenMessage<Conversation_Metrics_MatchTypeCount> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 0, 1);

/**
 * Represents an interaction between an end user and a Dialogflow CX agent
 * using V3 (Streaming)DetectIntent API, or an interaction between an end user
 * and a Dialogflow CX agent using V2 (Streaming)AnalyzeContent API.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction
 */
export type Conversation_Interaction = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction"> & {
  /**
   * The request of the interaction.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.DetectIntentRequest request = 1;
   */
  request?: DetectIntentRequest;

  /**
   * The final response of the interaction.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.DetectIntentResponse response = 2;
   */
  response?: DetectIntentResponse;

  /**
   * The partial responses of the interaction. Empty if there is no partial
   * response in the interaction.
   * See the
   * [partial response
   * documentation][https://cloud.google.com/dialogflow/cx/docs/concept/fulfillment#queue].
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3beta1.DetectIntentResponse partial_responses = 3;
   */
  partialResponses: DetectIntentResponse[];

  /**
   * The input text or the transcript of the input audio in the request.
   *
   * @generated from field: string request_utterances = 4;
   */
  requestUtterances: string;

  /**
   * The output text or the transcript of the output audio in the responses.
   * If multiple output messages are returned, they will be concatenated into
   * one.
   *
   * @generated from field: string response_utterances = 5;
   */
  responseUtterances: string;

  /**
   * The time that the interaction was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Missing transition predicted for the interaction. This field is set only
   * if the interaction match type was no-match.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction.MissingTransition missing_transition = 8;
   */
  missingTransition?: Conversation_Interaction_MissingTransition;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction.
 * Use `create(Conversation_InteractionSchema)` to create a new message.
 */
export const Conversation_InteractionSchema: GenMessage<Conversation_Interaction> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 1);

/**
 * Information collected for DF CX agents in case NLU predicted an intent
 * that was filtered out as being inactive which may indicate a missing
 * transition and/or absent functionality.
 *
 * @generated from message google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction.MissingTransition
 */
export type Conversation_Interaction_MissingTransition = Message<"google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction.MissingTransition"> & {
  /**
   * Name of the intent that could have triggered.
   *
   * @generated from field: string intent_display_name = 1;
   */
  intentDisplayName: string;

  /**
   * Score of the above intent. The higher it is the more likely a
   * transition was missed on a given page.
   *
   * @generated from field: float score = 2;
   */
  score: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3beta1.Conversation.Interaction.MissingTransition.
 * Use `create(Conversation_Interaction_MissingTransitionSchema)` to create a new message.
 */
export const Conversation_Interaction_MissingTransitionSchema: GenMessage<Conversation_Interaction_MissingTransition> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 1, 0);

/**
 * Represents the type of a conversation.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3beta1.Conversation.Type
 */
export enum Conversation_Type {
  /**
   * Not specified. This value should never be used.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Audio conversation. A conversation is classified as an audio conversation
   * if any request has STT input audio or any response has TTS output audio.
   *
   * @generated from enum value: AUDIO = 1;
   */
  AUDIO = 1,

  /**
   * Text conversation. A conversation is classified as a text conversation
   * if any request has text input and no request has STT input audio and no
   * response has TTS output audio.
   *
   * @generated from enum value: TEXT = 2;
   */
  TEXT = 2,

  /**
   * Default conversation type for a conversation. A conversation is
   * classified as undetermined if none of the requests contain text or audio
   * input (eg. event or intent input).
   *
   * @generated from enum value: UNDETERMINED = 3;
   */
  UNDETERMINED = 3,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3beta1.Conversation.Type.
 */
export const Conversation_TypeSchema: GenEnum<Conversation_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 4, 0);

/**
 * Service for managing conversation history.
 *
 * @generated from service google.cloud.dialogflow.cx.v3beta1.ConversationHistory
 */
export const ConversationHistory: GenService<{
  /**
   * Returns the list of all conversations.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3beta1.ConversationHistory.ListConversations
   */
  listConversations: {
    methodKind: "unary";
    input: typeof ListConversationsRequestSchema;
    output: typeof ListConversationsResponseSchema;
  },
  /**
   * Retrieves the specified conversation.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3beta1.ConversationHistory.GetConversation
   */
  getConversation: {
    methodKind: "unary";
    input: typeof GetConversationRequestSchema;
    output: typeof ConversationSchema;
  },
  /**
   * Deletes the specified conversation.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3beta1.ConversationHistory.DeleteConversation
   */
  deleteConversation: {
    methodKind: "unary";
    input: typeof DeleteConversationRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dialogflow_cx_v3beta1_conversation_history, 0);

