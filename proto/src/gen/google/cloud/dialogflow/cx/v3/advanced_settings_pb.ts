// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dialogflow/cx/v3/advanced_settings.proto (package google.cloud.dialogflow.cx.v3, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { GcsDestination } from "./gcs_pb";
import { file_google_cloud_dialogflow_cx_v3_gcs } from "./gcs_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dialogflow/cx/v3/advanced_settings.proto.
 */
export const file_google_cloud_dialogflow_cx_v3_advanced_settings: GenFile = /*@__PURE__*/
  fileDesc("CjVnb29nbGUvY2xvdWQvZGlhbG9nZmxvdy9jeC92My9hZHZhbmNlZF9zZXR0aW5ncy5wcm90bxIdZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMi3AcKEEFkdmFuY2VkU2V0dGluZ3MSUwocYXVkaW9fZXhwb3J0X2djc19kZXN0aW5hdGlvbhgCIAEoCzItLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkdjc0Rlc3RpbmF0aW9uElcKD3NwZWVjaF9zZXR0aW5ncxgDIAEoCzI+Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkFkdmFuY2VkU2V0dGluZ3MuU3BlZWNoU2V0dGluZ3MSUwoNZHRtZl9zZXR0aW5ncxgFIAEoCzI8Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkFkdmFuY2VkU2V0dGluZ3MuRHRtZlNldHRpbmdzElkKEGxvZ2dpbmdfc2V0dGluZ3MYBiABKAsyPy5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5BZHZhbmNlZFNldHRpbmdzLkxvZ2dpbmdTZXR0aW5ncxqYAgoOU3BlZWNoU2V0dGluZ3MSHgoWZW5kcG9pbnRlcl9zZW5zaXRpdml0eRgBIAEoBRI0ChFub19zcGVlY2hfdGltZW91dBgCIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIlCh11c2VfdGltZW91dF9iYXNlZF9lbmRwb2ludGluZxgDIAEoCBJaCgZtb2RlbHMYBSADKAsySi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5BZHZhbmNlZFNldHRpbmdzLlNwZWVjaFNldHRpbmdzLk1vZGVsc0VudHJ5Gi0KC01vZGVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaygEKDER0bWZTZXR0aW5ncxIPCgdlbmFibGVkGAEgASgIEhIKCm1heF9kaWdpdHMYAiABKAUSFAoMZmluaXNoX2RpZ2l0GAMgASgJEj4KG2ludGVyZGlnaXRfdGltZW91dF9kdXJhdGlvbhgGIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI/ChxlbmRwb2ludGluZ190aW1lb3V0X2R1cmF0aW9uGAcgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uGoEBCg9Mb2dnaW5nU2V0dGluZ3MSIgoaZW5hYmxlX3N0YWNrZHJpdmVyX2xvZ2dpbmcYAiABKAgSIgoaZW5hYmxlX2ludGVyYWN0aW9uX2xvZ2dpbmcYAyABKAgSJgoeZW5hYmxlX2NvbnNlbnRfYmFzZWRfcmVkYWN0aW9uGAQgASgIQrsBCiFjb20uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjNCFUFkdmFuY2VkU2V0dGluZ3NQcm90b1ABWjFjbG91ZC5nb29nbGUuY29tL2dvL2RpYWxvZ2Zsb3cvY3gvYXBpdjMvY3hwYjtjeHBi+AEBogICREaqAh1Hb29nbGUuQ2xvdWQuRGlhbG9nZmxvdy5DeC5WM+oCIUdvb2dsZTo6Q2xvdWQ6OkRpYWxvZ2Zsb3c6OkNYOjpWM2IGcHJvdG8z", [file_google_api_field_behavior, file_google_cloud_dialogflow_cx_v3_gcs, file_google_protobuf_duration]);

/**
 * Hierarchical advanced settings for agent/flow/page/fulfillment/parameter.
 * Settings exposed at lower level overrides the settings exposed at higher
 * level. Overriding occurs at the sub-setting level. For example, the
 * playback_interruption_settings at fulfillment level only overrides the
 * playback_interruption_settings at the agent level, leaving other settings
 * at the agent level unchanged.
 *
 * DTMF settings does not override each other. DTMF settings set at different
 * levels define DTMF detections running in parallel.
 *
 * Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.AdvancedSettings
 */
export type AdvancedSettings = Message<"google.cloud.dialogflow.cx.v3.AdvancedSettings"> & {
  /**
   * If present, incoming audio is exported by Dialogflow to the configured
   * Google Cloud Storage destination.
   * Exposed at the following levels:
   * - Agent level
   * - Flow level
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.GcsDestination audio_export_gcs_destination = 2;
   */
  audioExportGcsDestination?: GcsDestination;

  /**
   * Settings for speech to text detection.
   * Exposed at the following levels:
   * - Agent level
   * - Flow level
   * - Page level
   * - Parameter level
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.AdvancedSettings.SpeechSettings speech_settings = 3;
   */
  speechSettings?: AdvancedSettings_SpeechSettings;

  /**
   * Settings for DTMF.
   * Exposed at the following levels:
   * - Agent level
   * - Flow level
   * - Page level
   * - Parameter level.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.AdvancedSettings.DtmfSettings dtmf_settings = 5;
   */
  dtmfSettings?: AdvancedSettings_DtmfSettings;

  /**
   * Settings for logging.
   * Settings for Dialogflow History, Contact Center messages, StackDriver logs,
   * and speech logging.
   * Exposed at the following levels:
   * - Agent level.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings logging_settings = 6;
   */
  loggingSettings?: AdvancedSettings_LoggingSettings;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.AdvancedSettings.
 * Use `create(AdvancedSettingsSchema)` to create a new message.
 */
export const AdvancedSettingsSchema: GenMessage<AdvancedSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_advanced_settings, 0);

/**
 * Define behaviors of speech to text detection.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.AdvancedSettings.SpeechSettings
 */
export type AdvancedSettings_SpeechSettings = Message<"google.cloud.dialogflow.cx.v3.AdvancedSettings.SpeechSettings"> & {
  /**
   * Sensitivity of the speech model that detects the end of speech.
   * Scale from 0 to 100.
   *
   * @generated from field: int32 endpointer_sensitivity = 1;
   */
  endpointerSensitivity: number;

  /**
   * Timeout before detecting no speech.
   *
   * @generated from field: google.protobuf.Duration no_speech_timeout = 2;
   */
  noSpeechTimeout?: Duration;

  /**
   * Use timeout based endpointing, interpreting endpointer sensitivy as
   * seconds of timeout value.
   *
   * @generated from field: bool use_timeout_based_endpointing = 3;
   */
  useTimeoutBasedEndpointing: boolean;

  /**
   * Mapping from language to Speech-to-Text model. The mapped Speech-to-Text
   * model will be selected for requests from its corresponding language.
   * For more information, see
   * [Speech
   * models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
   *
   * @generated from field: map<string, string> models = 5;
   */
  models: { [key: string]: string };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.AdvancedSettings.SpeechSettings.
 * Use `create(AdvancedSettings_SpeechSettingsSchema)` to create a new message.
 */
export const AdvancedSettings_SpeechSettingsSchema: GenMessage<AdvancedSettings_SpeechSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_advanced_settings, 0, 0);

/**
 * Define behaviors for DTMF (dual tone multi frequency).
 *
 * @generated from message google.cloud.dialogflow.cx.v3.AdvancedSettings.DtmfSettings
 */
export type AdvancedSettings_DtmfSettings = Message<"google.cloud.dialogflow.cx.v3.AdvancedSettings.DtmfSettings"> & {
  /**
   * If true, incoming audio is processed for DTMF (dual tone multi frequency)
   * events. For example, if the caller presses a button on their telephone
   * keypad and DTMF processing is enabled, Dialogflow will detect the
   * event (e.g. a "3" was pressed) in the incoming audio and pass the event
   * to the bot to drive business logic (e.g. when 3 is pressed, return the
   * account balance).
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Max length of DTMF digits.
   *
   * @generated from field: int32 max_digits = 2;
   */
  maxDigits: number;

  /**
   * The digit that terminates a DTMF digit sequence.
   *
   * @generated from field: string finish_digit = 3;
   */
  finishDigit: string;

  /**
   * Interdigit timeout setting for matching dtmf input to regex.
   *
   * @generated from field: google.protobuf.Duration interdigit_timeout_duration = 6;
   */
  interdigitTimeoutDuration?: Duration;

  /**
   * Endpoint timeout setting for matching dtmf input to regex.
   *
   * @generated from field: google.protobuf.Duration endpointing_timeout_duration = 7;
   */
  endpointingTimeoutDuration?: Duration;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.AdvancedSettings.DtmfSettings.
 * Use `create(AdvancedSettings_DtmfSettingsSchema)` to create a new message.
 */
export const AdvancedSettings_DtmfSettingsSchema: GenMessage<AdvancedSettings_DtmfSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_advanced_settings, 0, 1);

/**
 * Define behaviors on logging.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings
 */
export type AdvancedSettings_LoggingSettings = Message<"google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings"> & {
  /**
   * Enables StackDriver logging.
   *
   * @generated from field: bool enable_stackdriver_logging = 2;
   */
  enableStackdriverLogging: boolean;

  /**
   * Enables DF Interaction logging.
   *
   * @generated from field: bool enable_interaction_logging = 3;
   */
  enableInteractionLogging: boolean;

  /**
   * Enables consent-based end-user input redaction, if true, a pre-defined
   * session parameter `$session.params.conversation-redaction` will be
   * used to determine if the utterance should be redacted.
   *
   * @generated from field: bool enable_consent_based_redaction = 4;
   */
  enableConsentBasedRedaction: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings.
 * Use `create(AdvancedSettings_LoggingSettingsSchema)` to create a new message.
 */
export const AdvancedSettings_LoggingSettingsSchema: GenMessage<AdvancedSettings_LoggingSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_advanced_settings, 0, 2);

