// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dialogflow/cx/v3/entity_type.proto (package google.cloud.dialogflow.cx.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { InlineDestination, InlineSource } from "./inline_pb";
import { file_google_cloud_dialogflow_cx_v3_inline } from "./inline_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dialogflow/cx/v3/entity_type.proto.
 */
export const file_google_cloud_dialogflow_cx_v3_entity_type: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvY2xvdWQvZGlhbG9nZmxvdy9jeC92My9lbnRpdHlfdHlwZS5wcm90bxIdZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMimgYKCkVudGl0eVR5cGUSDAoEbmFtZRgBIAEoCRIZCgxkaXNwbGF5X25hbWUYAiABKAlCA+BBAhJBCgRraW5kGAMgASgOMi4uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRW50aXR5VHlwZS5LaW5kQgPgQQISWAoTYXV0b19leHBhbnNpb25fbW9kZRgEIAEoDjI7Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkVudGl0eVR5cGUuQXV0b0V4cGFuc2lvbk1vZGUSQgoIZW50aXRpZXMYBSADKAsyMC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5FbnRpdHlUeXBlLkVudGl0eRJSChBleGNsdWRlZF9waHJhc2VzGAYgAygLMjguZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRW50aXR5VHlwZS5FeGNsdWRlZFBocmFzZRIfChdlbmFibGVfZnV6enlfZXh0cmFjdGlvbhgHIAEoCBIOCgZyZWRhY3QYCSABKAgaMwoGRW50aXR5EhIKBXZhbHVlGAEgASgJQgPgQQISFQoIc3lub255bXMYAiADKAlCA+BBAhokCg5FeGNsdWRlZFBocmFzZRISCgV2YWx1ZRgBIAEoCUID4EECIkoKBEtpbmQSFAoQS0lORF9VTlNQRUNJRklFRBAAEgwKCEtJTkRfTUFQEAESDQoJS0lORF9MSVNUEAISDwoLS0lORF9SRUdFWFAQAyJZChFBdXRvRXhwYW5zaW9uTW9kZRIjCh9BVVRPX0VYUEFOU0lPTl9NT0RFX1VOU1BFQ0lGSUVEEAASHwobQVVUT19FWFBBTlNJT05fTU9ERV9ERUZBVUxUEAE6e+pBeAokZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9FbnRpdHlUeXBlElBwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vYWdlbnRzL3thZ2VudH0vZW50aXR5VHlwZXMve2VudGl0eV90eXBlfSKQAwoYRXhwb3J0RW50aXR5VHlwZXNSZXF1ZXN0EjwKBnBhcmVudBgBIAEoCUIs4EEC+kEmEiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0VudGl0eVR5cGUSGQoMZW50aXR5X3R5cGVzGAIgAygJQgPgQQISHwoQZW50aXR5X3R5cGVzX3VyaRgDIAEoCUID4EEBSAASKgobZW50aXR5X3R5cGVzX2NvbnRlbnRfaW5saW5lGAQgASgIQgPgQQFIABJcCgtkYXRhX2Zvcm1hdBgFIAEoDjJCLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cG9ydEVudGl0eVR5cGVzUmVxdWVzdC5EYXRhRm9ybWF0QgPgQQESGgoNbGFuZ3VhZ2VfY29kZRgGIAEoCUID4EEBIkUKCkRhdGFGb3JtYXQSGwoXREFUQV9GT1JNQVRfVU5TUEVDSUZJRUQQABIICgRCTE9CEAESEAoMSlNPTl9QQUNLQUdFEAVCDQoLZGVzdGluYXRpb24iogEKGUV4cG9ydEVudGl0eVR5cGVzUmVzcG9uc2USGgoQZW50aXR5X3R5cGVzX3VyaRgBIAEoCUgAElAKFGVudGl0eV90eXBlc19jb250ZW50GAIgASgLMjAuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuSW5saW5lRGVzdGluYXRpb25IAEIXChVleHBvcnRlZF9lbnRpdHlfdHlwZXMiGwoZRXhwb3J0RW50aXR5VHlwZXNNZXRhZGF0YSLrAwoYSW1wb3J0RW50aXR5VHlwZXNSZXF1ZXN0EjwKBnBhcmVudBgBIAEoCUIs4EEC+kEmEiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0VudGl0eVR5cGUSGgoQZW50aXR5X3R5cGVzX3VyaRgCIAEoCUgAEksKFGVudGl0eV90eXBlc19jb250ZW50GAMgASgLMisuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuSW5saW5lU291cmNlSAASXgoMbWVyZ2Vfb3B0aW9uGAQgASgOMkMuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuSW1wb3J0RW50aXR5VHlwZXNSZXF1ZXN0Lk1lcmdlT3B0aW9uQgPgQQISSAoSdGFyZ2V0X2VudGl0eV90eXBlGAUgASgJQizgQQH6QSYKJGRpYWxvZ2Zsb3cuZ29vZ2xlYXBpcy5jb20vRW50aXR5VHlwZSJuCgtNZXJnZU9wdGlvbhIcChhNRVJHRV9PUFRJT05fVU5TUEVDSUZJRUQQABILCgdSRVBMQUNFEAESCQoFTUVSR0UQAhIKCgZSRU5BTUUQAxITCg9SRVBPUlRfQ09ORkxJQ1QQBBIICgRLRUVQEAVCDgoMZW50aXR5X3R5cGVzIqMCChlJbXBvcnRFbnRpdHlUeXBlc1Jlc3BvbnNlEj8KDGVudGl0eV90eXBlcxgBIAMoCUIp+kEmCiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0VudGl0eVR5cGUSbAoVY29uZmxpY3RpbmdfcmVzb3VyY2VzGAIgASgLMk0uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuSW1wb3J0RW50aXR5VHlwZXNSZXNwb25zZS5Db25mbGljdGluZ1Jlc291cmNlcxpXChRDb25mbGljdGluZ1Jlc291cmNlcxIhChllbnRpdHlfdHlwZV9kaXNwbGF5X25hbWVzGAEgAygJEhwKFGVudGl0eV9kaXNwbGF5X25hbWVzGAIgAygJIhsKGUltcG9ydEVudGl0eVR5cGVzTWV0YWRhdGEilAEKFkxpc3RFbnRpdHlUeXBlc1JlcXVlc3QSPAoGcGFyZW50GAEgASgJQizgQQL6QSYSJGRpYWxvZ2Zsb3cuZ29vZ2xlYXBpcy5jb20vRW50aXR5VHlwZRIVCg1sYW5ndWFnZV9jb2RlGAIgASgJEhEKCXBhZ2Vfc2l6ZRgDIAEoBRISCgpwYWdlX3Rva2VuGAQgASgJInMKF0xpc3RFbnRpdHlUeXBlc1Jlc3BvbnNlEj8KDGVudGl0eV90eXBlcxgBIAMoCzIpLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkVudGl0eVR5cGUSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJImkKFEdldEVudGl0eVR5cGVSZXF1ZXN0EjoKBG5hbWUYASABKAlCLOBBAvpBJgokZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9FbnRpdHlUeXBlEhUKDWxhbmd1YWdlX2NvZGUYAiABKAkiswEKF0NyZWF0ZUVudGl0eVR5cGVSZXF1ZXN0EjwKBnBhcmVudBgBIAEoCUIs4EEC+kEmEiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0VudGl0eVR5cGUSQwoLZW50aXR5X3R5cGUYAiABKAsyKS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5FbnRpdHlUeXBlQgPgQQISFQoNbGFuZ3VhZ2VfY29kZRgDIAEoCSKmAQoXVXBkYXRlRW50aXR5VHlwZVJlcXVlc3QSQwoLZW50aXR5X3R5cGUYASABKAsyKS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5FbnRpdHlUeXBlQgPgQQISFQoNbGFuZ3VhZ2VfY29kZRgCIAEoCRIvCgt1cGRhdGVfbWFzaxgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siZAoXRGVsZXRlRW50aXR5VHlwZVJlcXVlc3QSOgoEbmFtZRgBIAEoCUIs4EEC+kEmCiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0VudGl0eVR5cGUSDQoFZm9yY2UYAiABKAgy7wwKC0VudGl0eVR5cGVzErgBCg1HZXRFbnRpdHlUeXBlEjMuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuR2V0RW50aXR5VHlwZVJlcXVlc3QaKS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5FbnRpdHlUeXBlIkfaQQRuYW1lgtPkkwI6EjgvdjMve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKi9lbnRpdHlUeXBlcy8qfRLZAQoQQ3JlYXRlRW50aXR5VHlwZRI2Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkNyZWF0ZUVudGl0eVR5cGVSZXF1ZXN0GikuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRW50aXR5VHlwZSJi2kEScGFyZW50LGVudGl0eV90eXBlgtPkkwJHOgtlbnRpdHlfdHlwZSI4L3YzL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKn0vZW50aXR5VHlwZXMS6gEKEFVwZGF0ZUVudGl0eVR5cGUSNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5VcGRhdGVFbnRpdHlUeXBlUmVxdWVzdBopLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkVudGl0eVR5cGUic9pBF2VudGl0eV90eXBlLHVwZGF0ZV9tYXNrgtPkkwJTOgtlbnRpdHlfdHlwZTJEL3YzL3tlbnRpdHlfdHlwZS5uYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovYWdlbnRzLyovZW50aXR5VHlwZXMvKn0SqwEKEERlbGV0ZUVudGl0eVR5cGUSNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5EZWxldGVFbnRpdHlUeXBlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSJH2kEEbmFtZYLT5JMCOio4L3YzL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovYWdlbnRzLyovZW50aXR5VHlwZXMvKn0SywEKD0xpc3RFbnRpdHlUeXBlcxI1Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkxpc3RFbnRpdHlUeXBlc1JlcXVlc3QaNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5MaXN0RW50aXR5VHlwZXNSZXNwb25zZSJJ2kEGcGFyZW50gtPkkwI6EjgvdjMve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qfS9lbnRpdHlUeXBlcxLxAQoRRXhwb3J0RW50aXR5VHlwZXMSNy5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5FeHBvcnRFbnRpdHlUeXBlc1JlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIoMBykE2ChlFeHBvcnRFbnRpdHlUeXBlc1Jlc3BvbnNlEhlFeHBvcnRFbnRpdHlUeXBlc01ldGFkYXRhgtPkkwJEOgEqIj8vdjMve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qfS9lbnRpdHlUeXBlczpleHBvcnQS8QEKEUltcG9ydEVudGl0eVR5cGVzEjcuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuSW1wb3J0RW50aXR5VHlwZXNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiKDAcpBNgoZSW1wb3J0RW50aXR5VHlwZXNSZXNwb25zZRIZSW1wb3J0RW50aXR5VHlwZXNNZXRhZGF0YYLT5JMCRDoBKiI/L3YzL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKn0vZW50aXR5VHlwZXM6aW1wb3J0GnjKQRlkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29t0kFZaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RpYWxvZ2Zsb3dCtQEKIWNvbS5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52M0IPRW50aXR5VHlwZVByb3RvUAFaMWNsb3VkLmdvb2dsZS5jb20vZ28vZGlhbG9nZmxvdy9jeC9hcGl2My9jeHBiO2N4cGL4AQGiAgJERqoCHUdvb2dsZS5DbG91ZC5EaWFsb2dmbG93LkN4LlYz6gIhR29vZ2xlOjpDbG91ZDo6RGlhbG9nZmxvdzo6Q1g6OlYzYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dialogflow_cx_v3_inline, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask]);

/**
 * Entities are extracted from user input and represent parameters that are
 * meaningful to your application. For example, a date range, a proper name
 * such as a geographic location or landmark, and so on. Entities represent
 * actionable data for your application.
 *
 * When you define an entity, you can also include synonyms that all map to
 * that entity. For example, "soft drink", "soda", "pop", and so on.
 *
 * There are three types of entities:
 *
 * *   **System** - entities that are defined by the Dialogflow API for common
 *     data types such as date, time, currency, and so on. A system entity is
 *     represented by the `EntityType` type.
 *
 * *   **Custom** - entities that are defined by you that represent
 *     actionable data that is meaningful to your application. For example,
 *     you could define a `pizza.sauce` entity for red or white pizza sauce,
 *     a `pizza.cheese` entity for the different types of cheese on a pizza,
 *     a `pizza.topping` entity for different toppings, and so on. A custom
 *     entity is represented by the `EntityType` type.
 *
 * *   **User** - entities that are built for an individual user such as
 *     favorites, preferences, playlists, and so on. A user entity is
 *     represented by the
 *     [SessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityType]
 *     type.
 *
 * For more information about entity types, see the [Dialogflow
 * documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
 *
 * @generated from message google.cloud.dialogflow.cx.v3.EntityType
 */
export type EntityType = Message<"google.cloud.dialogflow.cx.v3.EntityType"> & {
  /**
   * The unique identifier of the entity type.
   * Required for
   * [EntityTypes.UpdateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType].
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entityTypes/<Entity Type ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The human-readable name of the entity type, unique within the
   * agent.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Required. Indicates the kind of entity type.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.EntityType.Kind kind = 3;
   */
  kind: EntityType_Kind;

  /**
   * Indicates whether the entity type can be automatically expanded.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.EntityType.AutoExpansionMode auto_expansion_mode = 4;
   */
  autoExpansionMode: EntityType_AutoExpansionMode;

  /**
   * The collection of entity entries associated with the entity type.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.EntityType.Entity entities = 5;
   */
  entities: EntityType_Entity[];

  /**
   * Collection of exceptional words and phrases that shouldn't be matched.
   * For example, if you have a size entity type with entry `giant`(an
   * adjective), you might consider adding `giants`(a noun) as an exclusion.
   * If the kind of entity type is `KIND_MAP`, then the phrases specified by
   * entities and excluded phrases should be mutually exclusive.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.EntityType.ExcludedPhrase excluded_phrases = 6;
   */
  excludedPhrases: EntityType_ExcludedPhrase[];

  /**
   * Enables fuzzy entity extraction during classification.
   *
   * @generated from field: bool enable_fuzzy_extraction = 7;
   */
  enableFuzzyExtraction: boolean;

  /**
   * Indicates whether parameters of the entity type should be redacted in log.
   * If redaction is enabled, page parameters and intent parameters referring to
   * the entity type will be replaced by parameter name when logging.
   *
   * @generated from field: bool redact = 9;
   */
  redact: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.EntityType.
 * Use `create(EntityTypeSchema)` to create a new message.
 */
export const EntityTypeSchema: GenMessage<EntityType> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0);

/**
 * An **entity entry** for an associated entity type.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.EntityType.Entity
 */
export type EntityType_Entity = Message<"google.cloud.dialogflow.cx.v3.EntityType.Entity"> & {
  /**
   * Required. The primary value associated with this entity entry.
   * For example, if the entity type is *vegetable*, the value could be
   * *scallions*.
   *
   * For `KIND_MAP` entity types:
   *
   * *   A canonical value to be used in place of synonyms.
   *
   * For `KIND_LIST` entity types:
   *
   * *   A string that can contain references to other entity types (with or
   *     without aliases).
   *
   * @generated from field: string value = 1;
   */
  value: string;

  /**
   * Required. A collection of value synonyms. For example, if the entity type
   * is *vegetable*, and `value` is *scallions*, a synonym could be *green
   * onions*.
   *
   * For `KIND_LIST` entity types:
   *
   * *   This collection must contain exactly one synonym equal to `value`.
   *
   * @generated from field: repeated string synonyms = 2;
   */
  synonyms: string[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.EntityType.Entity.
 * Use `create(EntityType_EntitySchema)` to create a new message.
 */
export const EntityType_EntitySchema: GenMessage<EntityType_Entity> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0, 0);

/**
 * An excluded entity phrase that should not be matched.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.EntityType.ExcludedPhrase
 */
export type EntityType_ExcludedPhrase = Message<"google.cloud.dialogflow.cx.v3.EntityType.ExcludedPhrase"> & {
  /**
   * Required. The word or phrase to be excluded.
   *
   * @generated from field: string value = 1;
   */
  value: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.EntityType.ExcludedPhrase.
 * Use `create(EntityType_ExcludedPhraseSchema)` to create a new message.
 */
export const EntityType_ExcludedPhraseSchema: GenMessage<EntityType_ExcludedPhrase> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0, 1);

/**
 * Represents kinds of entities.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.EntityType.Kind
 */
export enum EntityType_Kind {
  /**
   * Not specified. This value should be never used.
   *
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Map entity types allow mapping of a group of synonyms to a canonical
   * value.
   *
   * @generated from enum value: KIND_MAP = 1;
   */
  MAP = 1,

  /**
   * List entity types contain a set of entries that do not map to canonical
   * values. However, list entity types can contain references to other entity
   * types (with or without aliases).
   *
   * @generated from enum value: KIND_LIST = 2;
   */
  LIST = 2,

  /**
   * Regexp entity types allow to specify regular expressions in entries
   * values.
   *
   * @generated from enum value: KIND_REGEXP = 3;
   */
  REGEXP = 3,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.EntityType.Kind.
 */
export const EntityType_KindSchema: GenEnum<EntityType_Kind> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0, 0);

/**
 * Represents different entity type expansion modes. Automated expansion
 * allows an agent to recognize values that have not been explicitly listed in
 * the entity (for example, new kinds of shopping list items).
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.EntityType.AutoExpansionMode
 */
export enum EntityType_AutoExpansionMode {
  /**
   * Auto expansion disabled for the entity.
   *
   * @generated from enum value: AUTO_EXPANSION_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Allows an agent to recognize values that have not been explicitly
   * listed in the entity.
   *
   * @generated from enum value: AUTO_EXPANSION_MODE_DEFAULT = 1;
   */
  DEFAULT = 1,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.EntityType.AutoExpansionMode.
 */
export const EntityType_AutoExpansionModeSchema: GenEnum<EntityType_AutoExpansionMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0, 1);

/**
 * The request message for
 * [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest
 */
export type ExportEntityTypesRequest = Message<"google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest"> & {
  /**
   * Required. The name of the parent agent to export entity types.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The name of the entity types to export.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entityTypes/<EntityType ID>`.
   *
   * @generated from field: repeated string entity_types = 2;
   */
  entityTypes: string[];

  /**
   * The destination to export.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.destination
   */
  destination: {
    /**
     * Optional. The [Google Cloud
     * Storage](https://cloud.google.com/storage/docs/) URI to export the entity
     * types to. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`.
     *
     * Dialogflow performs a write operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have write permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * @generated from field: string entity_types_uri = 3;
     */
    value: string;
    case: "entityTypesUri";
  } | {
    /**
     * Optional. The option to return the serialized entity types inline.
     *
     * @generated from field: bool entity_types_content_inline = 4;
     */
    value: boolean;
    case: "entityTypesContentInline";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. The data format of the exported entity types. If not specified,
   * `BLOB` is assumed.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.DataFormat data_format = 5;
   */
  dataFormat: ExportEntityTypesRequest_DataFormat;

  /**
   * Optional. The language to retrieve the entity type for. The following
   * fields are language dependent:
   *
   * *   `EntityType.entities.value`
   * *   `EntityType.entities.synonyms`
   * *   `EntityType.excluded_phrases.value`
   *
   * If not specified, all language dependent fields will be retrieved.
   * [Many
   * languages](https://cloud.google.com/dialogflow/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   *
   * @generated from field: string language_code = 6;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.
 * Use `create(ExportEntityTypesRequestSchema)` to create a new message.
 */
export const ExportEntityTypesRequestSchema: GenMessage<ExportEntityTypesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 1);

/**
 * Data format of the exported entity types.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.DataFormat
 */
export enum ExportEntityTypesRequest_DataFormat {
  /**
   * Unspecified format. Treated as `BLOB`.
   *
   * @generated from enum value: DATA_FORMAT_UNSPECIFIED = 0;
   */
  DATA_FORMAT_UNSPECIFIED = 0,

  /**
   * EntityTypes will be exported as raw bytes.
   *
   * @generated from enum value: BLOB = 1;
   */
  BLOB = 1,

  /**
   * EntityTypes will be exported in JSON Package format.
   *
   * @generated from enum value: JSON_PACKAGE = 5;
   */
  JSON_PACKAGE = 5,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.DataFormat.
 */
export const ExportEntityTypesRequest_DataFormatSchema: GenEnum<ExportEntityTypesRequest_DataFormat> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 1, 0);

/**
 * The response message for
 * [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportEntityTypesResponse
 */
export type ExportEntityTypesResponse = Message<"google.cloud.dialogflow.cx.v3.ExportEntityTypesResponse"> & {
  /**
   * Exported entity types can be either in cloud storage or local download.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ExportEntityTypesResponse.exported_entity_types
   */
  exportedEntityTypes: {
    /**
     * The URI to a file containing the exported entity types. This field is
     * populated only if `entity_types_uri` is specified in
     * [ExportEntityTypesRequest][google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest].
     *
     * @generated from field: string entity_types_uri = 1;
     */
    value: string;
    case: "entityTypesUri";
  } | {
    /**
     * Uncompressed byte content for entity types. This field is populated only
     * if `entity_types_content_inline` is set to true in
     * [ExportEntityTypesRequest][google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest].
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.InlineDestination entity_types_content = 2;
     */
    value: InlineDestination;
    case: "entityTypesContent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportEntityTypesResponse.
 * Use `create(ExportEntityTypesResponseSchema)` to create a new message.
 */
export const ExportEntityTypesResponseSchema: GenMessage<ExportEntityTypesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 2);

/**
 * Metadata returned for the
 * [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes]
 * long running operation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportEntityTypesMetadata
 */
export type ExportEntityTypesMetadata = Message<"google.cloud.dialogflow.cx.v3.ExportEntityTypesMetadata"> & {
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportEntityTypesMetadata.
 * Use `create(ExportEntityTypesMetadataSchema)` to create a new message.
 */
export const ExportEntityTypesMetadataSchema: GenMessage<ExportEntityTypesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 3);

/**
 * The request message for
 * [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest
 */
export type ImportEntityTypesRequest = Message<"google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest"> & {
  /**
   * Required. The agent to import the entity types into.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The entity types to import.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.entity_types
   */
  entityTypes: {
    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
     * to import entity types from. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`.
     *
     * Dialogflow performs a read operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have read permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * @generated from field: string entity_types_uri = 2;
     */
    value: string;
    case: "entityTypesUri";
  } | {
    /**
     * Uncompressed byte content of entity types.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.InlineSource entity_types_content = 3;
     */
    value: InlineSource;
    case: "entityTypesContent";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Merge option for importing entity types.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.MergeOption merge_option = 4;
   */
  mergeOption: ImportEntityTypesRequest_MergeOption;

  /**
   * Optional. The target entity type to import into.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entity_types/<EntityType ID>`.
   * If set, there should be only one entity type included in
   * [entity_types][google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.entity_types],
   * of which the type should match the type of the target entity type. All
   * [entities][google.cloud.dialogflow.cx.v3.EntityType.entities] in the
   * imported entity type will be added to the target entity type.
   *
   * @generated from field: string target_entity_type = 5;
   */
  targetEntityType: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.
 * Use `create(ImportEntityTypesRequestSchema)` to create a new message.
 */
export const ImportEntityTypesRequestSchema: GenMessage<ImportEntityTypesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 4);

/**
 * Merge option when display name conflicts exist during import.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.MergeOption
 */
export enum ImportEntityTypesRequest_MergeOption {
  /**
   * Unspecified. If used, system uses REPORT_CONFLICT as default.
   *
   * @generated from enum value: MERGE_OPTION_UNSPECIFIED = 0;
   */
  MERGE_OPTION_UNSPECIFIED = 0,

  /**
   * Replace the original entity type in the agent with the new entity type
   * when display name conflicts exist.
   *
   * @generated from enum value: REPLACE = 1;
   */
  REPLACE = 1,

  /**
   * Merge the original entity type with the new entity type when display name
   * conflicts exist.
   *
   * @generated from enum value: MERGE = 2;
   */
  MERGE = 2,

  /**
   * Create new entity types with new display names to differentiate them from
   * the existing entity types when display name conflicts exist.
   *
   * @generated from enum value: RENAME = 3;
   */
  RENAME = 3,

  /**
   * Report conflict information if display names conflict is detected.
   * Otherwise, import entity types.
   *
   * @generated from enum value: REPORT_CONFLICT = 4;
   */
  REPORT_CONFLICT = 4,

  /**
   * Keep the original entity type and discard the conflicting new entity type
   * when display name conflicts exist.
   *
   * @generated from enum value: KEEP = 5;
   */
  KEEP = 5,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.MergeOption.
 */
export const ImportEntityTypesRequest_MergeOptionSchema: GenEnum<ImportEntityTypesRequest_MergeOption> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 4, 0);

/**
 * The response message for
 * [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse
 */
export type ImportEntityTypesResponse = Message<"google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse"> & {
  /**
   * The unique identifier of the imported entity types.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entity_types/<EntityType ID>`.
   *
   * @generated from field: repeated string entity_types = 1;
   */
  entityTypes: string[];

  /**
   * Info which resources have conflicts when
   * [REPORT_CONFLICT][ImportEntityTypesResponse.REPORT_CONFLICT] merge_option
   * is set in ImportEntityTypesRequest.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.ConflictingResources conflicting_resources = 2;
   */
  conflictingResources?: ImportEntityTypesResponse_ConflictingResources;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.
 * Use `create(ImportEntityTypesResponseSchema)` to create a new message.
 */
export const ImportEntityTypesResponseSchema: GenMessage<ImportEntityTypesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 5);

/**
 * Conflicting resources detected during the import process. Only filled when
 * [REPORT_CONFLICT][ImportEntityTypesResponse.REPORT_CONFLICT] is set in the
 * request and there are conflicts in the display names.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.ConflictingResources
 */
export type ImportEntityTypesResponse_ConflictingResources = Message<"google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.ConflictingResources"> & {
  /**
   * Display names of conflicting entity types.
   *
   * @generated from field: repeated string entity_type_display_names = 1;
   */
  entityTypeDisplayNames: string[];

  /**
   * Display names of conflicting entities.
   *
   * @generated from field: repeated string entity_display_names = 2;
   */
  entityDisplayNames: string[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.ConflictingResources.
 * Use `create(ImportEntityTypesResponse_ConflictingResourcesSchema)` to create a new message.
 */
export const ImportEntityTypesResponse_ConflictingResourcesSchema: GenMessage<ImportEntityTypesResponse_ConflictingResources> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 5, 0);

/**
 * Metadata returned for the
 * [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes]
 * long running operation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportEntityTypesMetadata
 */
export type ImportEntityTypesMetadata = Message<"google.cloud.dialogflow.cx.v3.ImportEntityTypesMetadata"> & {
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportEntityTypesMetadata.
 * Use `create(ImportEntityTypesMetadataSchema)` to create a new message.
 */
export const ImportEntityTypesMetadataSchema: GenMessage<ImportEntityTypesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 6);

/**
 * The request message for
 * [EntityTypes.ListEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListEntityTypesRequest
 */
export type ListEntityTypesRequest = Message<"google.cloud.dialogflow.cx.v3.ListEntityTypesRequest"> & {
  /**
   * Required. The agent to list all entity types for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The language to list entity types for. The following fields are language
   * dependent:
   *
   * *   `EntityType.entities.value`
   * *   `EntityType.entities.synonyms`
   * *   `EntityType.excluded_phrases.value`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous list request.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListEntityTypesRequest.
 * Use `create(ListEntityTypesRequestSchema)` to create a new message.
 */
export const ListEntityTypesRequestSchema: GenMessage<ListEntityTypesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 7);

/**
 * The response message for
 * [EntityTypes.ListEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListEntityTypesResponse
 */
export type ListEntityTypesResponse = Message<"google.cloud.dialogflow.cx.v3.ListEntityTypesResponse"> & {
  /**
   * The list of entity types. There will be a maximum number of items returned
   * based on the page_size field in the request.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.EntityType entity_types = 1;
   */
  entityTypes: EntityType[];

  /**
   * Token to retrieve the next page of results, or empty if there are no
   * more results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListEntityTypesResponse.
 * Use `create(ListEntityTypesResponseSchema)` to create a new message.
 */
export const ListEntityTypesResponseSchema: GenMessage<ListEntityTypesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 8);

/**
 * The request message for
 * [EntityTypes.GetEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.GetEntityTypeRequest
 */
export type GetEntityTypeRequest = Message<"google.cloud.dialogflow.cx.v3.GetEntityTypeRequest"> & {
  /**
   * Required. The name of the entity type.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entityTypes/<Entity Type ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The language to retrieve the entity type for. The following fields are
   * language dependent:
   *
   * *   `EntityType.entities.value`
   * *   `EntityType.entities.synonyms`
   * *   `EntityType.excluded_phrases.value`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.GetEntityTypeRequest.
 * Use `create(GetEntityTypeRequestSchema)` to create a new message.
 */
export const GetEntityTypeRequestSchema: GenMessage<GetEntityTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 9);

/**
 * The request message for
 * [EntityTypes.CreateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.CreateEntityType].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.CreateEntityTypeRequest
 */
export type CreateEntityTypeRequest = Message<"google.cloud.dialogflow.cx.v3.CreateEntityTypeRequest"> & {
  /**
   * Required. The agent to create a entity type for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The entity type to create.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.EntityType entity_type = 2;
   */
  entityType?: EntityType;

  /**
   * The language of the following fields in `entity_type`:
   *
   * *   `EntityType.entities.value`
   * *   `EntityType.entities.synonyms`
   * *   `EntityType.excluded_phrases.value`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.CreateEntityTypeRequest.
 * Use `create(CreateEntityTypeRequestSchema)` to create a new message.
 */
export const CreateEntityTypeRequestSchema: GenMessage<CreateEntityTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 10);

/**
 * The request message for
 * [EntityTypes.UpdateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.UpdateEntityTypeRequest
 */
export type UpdateEntityTypeRequest = Message<"google.cloud.dialogflow.cx.v3.UpdateEntityTypeRequest"> & {
  /**
   * Required. The entity type to update.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.EntityType entity_type = 1;
   */
  entityType?: EntityType;

  /**
   * The language of the following fields in `entity_type`:
   *
   * *   `EntityType.entities.value`
   * *   `EntityType.entities.synonyms`
   * *   `EntityType.excluded_phrases.value`
   *
   * If not specified, the agent's default language is used.
   * [Many
   * languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
   * are supported.
   * Note: languages must be enabled in the agent before they can be used.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * The mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.UpdateEntityTypeRequest.
 * Use `create(UpdateEntityTypeRequestSchema)` to create a new message.
 */
export const UpdateEntityTypeRequestSchema: GenMessage<UpdateEntityTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 11);

/**
 * The request message for
 * [EntityTypes.DeleteEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.DeleteEntityType].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.DeleteEntityTypeRequest
 */
export type DeleteEntityTypeRequest = Message<"google.cloud.dialogflow.cx.v3.DeleteEntityTypeRequest"> & {
  /**
   * Required. The name of the entity type to delete.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/entityTypes/<Entity Type ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This field has no effect for entity type not being used.
   * For entity types that are used by intents or pages:
   *
   * *  If `force` is set to false, an error will be returned with message
   *    indicating the referencing resources.
   * *  If `force` is set to true, Dialogflow will remove the entity type, as
   *    well as any references to the entity type (i.e. Page
   *    [parameter][google.cloud.dialogflow.cx.v3.Form.Parameter] of the entity
   *    type will be changed to
   *    '@sys.any' and intent
   *    [parameter][google.cloud.dialogflow.cx.v3.Intent.Parameter] of the
   *    entity type will be removed).
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.DeleteEntityTypeRequest.
 * Use `create(DeleteEntityTypeRequestSchema)` to create a new message.
 */
export const DeleteEntityTypeRequestSchema: GenMessage<DeleteEntityTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 12);

/**
 * Service for managing [EntityTypes][google.cloud.dialogflow.cx.v3.EntityType].
 *
 * @generated from service google.cloud.dialogflow.cx.v3.EntityTypes
 */
export const EntityTypes: GenService<{
  /**
   * Retrieves the specified entity type.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType
   */
  getEntityType: {
    methodKind: "unary";
    input: typeof GetEntityTypeRequestSchema;
    output: typeof EntityTypeSchema;
  },
  /**
   * Creates an entity type in the specified agent.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.CreateEntityType
   */
  createEntityType: {
    methodKind: "unary";
    input: typeof CreateEntityTypeRequestSchema;
    output: typeof EntityTypeSchema;
  },
  /**
   * Updates the specified entity type.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType
   */
  updateEntityType: {
    methodKind: "unary";
    input: typeof UpdateEntityTypeRequestSchema;
    output: typeof EntityTypeSchema;
  },
  /**
   * Deletes the specified entity type.
   *
   * Note: You should always train a flow prior to sending it queries. See the
   * [training
   * documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.DeleteEntityType
   */
  deleteEntityType: {
    methodKind: "unary";
    input: typeof DeleteEntityTypeRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Returns the list of all entity types in the specified agent.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes
   */
  listEntityTypes: {
    methodKind: "unary";
    input: typeof ListEntityTypesRequestSchema;
    output: typeof ListEntityTypesResponseSchema;
  },
  /**
   * Exports the selected entity types.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes
   */
  exportEntityTypes: {
    methodKind: "unary";
    input: typeof ExportEntityTypesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports the specified entitytypes into the agent.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes
   */
  importEntityTypes: {
    methodKind: "unary";
    input: typeof ImportEntityTypesRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dialogflow_cx_v3_entity_type, 0);

