// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dialogflow/cx/v3/experiment.proto (package google.cloud.dialogflow.cx.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Duration, EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dialogflow/cx/v3/experiment.proto.
 */
export const file_google_cloud_dialogflow_cx_v3_experiment: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvY2xvdWQvZGlhbG9nZmxvdy9jeC92My9leHBlcmltZW50LnByb3RvEh1nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52MyL7EAoKRXhwZXJpbWVudBIMCgRuYW1lGAEgASgJEhkKDGRpc3BsYXlfbmFtZRgCIAEoCUID4EECEhMKC2Rlc2NyaXB0aW9uGAMgASgJEj4KBXN0YXRlGAQgASgOMi8uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudC5TdGF0ZRJICgpkZWZpbml0aW9uGAUgASgLMjQuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudC5EZWZpbml0aW9uEkQKDnJvbGxvdXRfY29uZmlnGA4gASgLMiwuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuUm9sbG91dENvbmZpZxJCCg1yb2xsb3V0X3N0YXRlGA8gASgLMisuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuUm9sbG91dFN0YXRlEh4KFnJvbGxvdXRfZmFpbHVyZV9yZWFzb24YECABKAkSQAoGcmVzdWx0GAYgASgLMjAuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudC5SZXN1bHQSLwoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnN0YXJ0X3RpbWUYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI0ChBsYXN0X3VwZGF0ZV90aW1lGAogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI0ChFleHBlcmltZW50X2xlbmd0aBgLIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhJIChB2YXJpYW50c19oaXN0b3J5GAwgAygLMi4uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuVmFyaWFudHNIaXN0b3J5GncKCkRlZmluaXRpb24SEQoJY29uZGl0aW9uGAEgASgJEkoKEHZlcnNpb25fdmFyaWFudHMYAiABKAsyLi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5WZXJzaW9uVmFyaWFudHNIAEIKCgh2YXJpYW50cxqLCAoGUmVzdWx0ElgKD3ZlcnNpb25fbWV0cmljcxgBIAMoCzI/Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQuUmVzdWx0LlZlcnNpb25NZXRyaWNzEjQKEGxhc3RfdXBkYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wGmcKEkNvbmZpZGVuY2VJbnRlcnZhbBIYChBjb25maWRlbmNlX2xldmVsGAEgASgBEg0KBXJhdGlvGAIgASgBEhMKC2xvd2VyX2JvdW5kGAMgASgBEhMKC3VwcGVyX2JvdW5kGAQgASgBGrACCgZNZXRyaWMSSQoEdHlwZRgBIAEoDjI7Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQuUmVzdWx0Lk1ldHJpY1R5cGUSTgoKY291bnRfdHlwZRgFIAEoDjI6Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQuUmVzdWx0LkNvdW50VHlwZRIPCgVyYXRpbxgCIAEoAUgAEg8KBWNvdW50GAQgASgBSAASYAoTY29uZmlkZW5jZV9pbnRlcnZhbBgDIAEoCzJDLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQuUmVzdWx0LkNvbmZpZGVuY2VJbnRlcnZhbEIHCgV2YWx1ZRqqAQoOVmVyc2lvbk1ldHJpY3MSNwoHdmVyc2lvbhgBIAEoCUIm+kEjCiFkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL1ZlcnNpb24SSAoHbWV0cmljcxgCIAMoCzI3Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQuUmVzdWx0Lk1ldHJpYxIVCg1zZXNzaW9uX2NvdW50GAMgASgFIrYBCgpNZXRyaWNUeXBlEhYKEk1FVFJJQ19VTlNQRUNJRklFRBAAEiYKIkNPTlRBSU5FRF9TRVNTSU9OX05PX0NBTExCQUNLX1JBVEUQARIbChdMSVZFX0FHRU5UX0hBTkRPRkZfUkFURRACEhkKFUNBTExCQUNLX1NFU1NJT05fUkFURRADEhoKFkFCQU5ET05FRF9TRVNTSU9OX1JBVEUQBBIUChBTRVNTSU9OX0VORF9SQVRFEAUibwoJQ291bnRUeXBlEhoKFkNPVU5UX1RZUEVfVU5TUEVDSUZJRUQQABIYChRUT1RBTF9OT19NQVRDSF9DT1VOVBABEhQKEFRPVEFMX1RVUk5fQ09VTlQQAhIWChJBVkVSQUdFX1RVUk5fQ09VTlQQAyJUCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEgkKBURSQUZUEAESCwoHUlVOTklORxACEggKBERPTkUQAxISCg5ST0xMT1VUX0ZBSUxFRBAEOpYB6kGSAQokZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9FeHBlcmltZW50Empwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vYWdlbnRzL3thZ2VudH0vZW52aXJvbm1lbnRzL3tlbnZpcm9ubWVudH0vZXhwZXJpbWVudHMve2V4cGVyaW1lbnR9Iq0BCg9WZXJzaW9uVmFyaWFudHMSSAoIdmFyaWFudHMYASADKAsyNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5WZXJzaW9uVmFyaWFudHMuVmFyaWFudBpQCgdWYXJpYW50Eg8KB3ZlcnNpb24YASABKAkSGgoSdHJhZmZpY19hbGxvY2F0aW9uGAIgASgCEhgKEGlzX2NvbnRyb2xfZ3JvdXAYAyABKAgimgEKD1ZhcmlhbnRzSGlzdG9yeRJKChB2ZXJzaW9uX3ZhcmlhbnRzGAEgASgLMi4uZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuVmVyc2lvblZhcmlhbnRzSAASLwoLdXBkYXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgoKCHZhcmlhbnRzIoUCCg1Sb2xsb3V0Q29uZmlnEk8KDXJvbGxvdXRfc3RlcHMYASADKAsyOC5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5Sb2xsb3V0Q29uZmlnLlJvbGxvdXRTdGVwEhkKEXJvbGxvdXRfY29uZGl0aW9uGAIgASgJEhkKEWZhaWx1cmVfY29uZGl0aW9uGAMgASgJGm0KC1JvbGxvdXRTdGVwEhQKDGRpc3BsYXlfbmFtZRgBIAEoCRIXCg90cmFmZmljX3BlcmNlbnQYAiABKAUSLwoMbWluX2R1cmF0aW9uGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uImAKDFJvbGxvdXRTdGF0ZRIMCgRzdGVwGAEgASgJEhIKCnN0ZXBfaW5kZXgYAyABKAUSLgoKc3RhcnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAifQoWTGlzdEV4cGVyaW1lbnRzUmVxdWVzdBI8CgZwYXJlbnQYASABKAlCLOBBAvpBJhIkZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9FeHBlcmltZW50EhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJInIKF0xpc3RFeHBlcmltZW50c1Jlc3BvbnNlEj4KC2V4cGVyaW1lbnRzGAEgAygLMikuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiUgoUR2V0RXhwZXJpbWVudFJlcXVlc3QSOgoEbmFtZRgBIAEoCUIs4EEC+kEmCiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0V4cGVyaW1lbnQimwEKF0NyZWF0ZUV4cGVyaW1lbnRSZXF1ZXN0EjwKBnBhcmVudBgBIAEoCUIs4EEC+kEmEiRkaWFsb2dmbG93Lmdvb2dsZWFwaXMuY29tL0V4cGVyaW1lbnQSQgoKZXhwZXJpbWVudBgCIAEoCzIpLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnRCA+BBAiKTAQoXVXBkYXRlRXhwZXJpbWVudFJlcXVlc3QSQgoKZXhwZXJpbWVudBgBIAEoCzIpLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnRCA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAiJVChdEZWxldGVFeHBlcmltZW50UmVxdWVzdBI6CgRuYW1lGAEgASgJQizgQQL6QSYKJGRpYWxvZ2Zsb3cuZ29vZ2xlYXBpcy5jb20vRXhwZXJpbWVudCJUChZTdGFydEV4cGVyaW1lbnRSZXF1ZXN0EjoKBG5hbWUYASABKAlCLOBBAvpBJgokZGlhbG9nZmxvdy5nb29nbGVhcGlzLmNvbS9FeHBlcmltZW50IlMKFVN0b3BFeHBlcmltZW50UmVxdWVzdBI6CgRuYW1lGAEgASgJQizgQQL6QSYKJGRpYWxvZ2Zsb3cuZ29vZ2xlYXBpcy5jb20vRXhwZXJpbWVudDL4DAoLRXhwZXJpbWVudHMS2gEKD0xpc3RFeHBlcmltZW50cxI1Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkxpc3RFeHBlcmltZW50c1JlcXVlc3QaNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5MaXN0RXhwZXJpbWVudHNSZXNwb25zZSJY2kEGcGFyZW50gtPkkwJJEkcvdjMve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qL2Vudmlyb25tZW50cy8qfS9leHBlcmltZW50cxLHAQoNR2V0RXhwZXJpbWVudBIzLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkdldEV4cGVyaW1lbnRSZXF1ZXN0GikuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudCJW2kEEbmFtZYLT5JMCSRJHL3YzL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovYWdlbnRzLyovZW52aXJvbm1lbnRzLyovZXhwZXJpbWVudHMvKn0S5gEKEENyZWF0ZUV4cGVyaW1lbnQSNi5nb29nbGUuY2xvdWQuZGlhbG9nZmxvdy5jeC52My5DcmVhdGVFeHBlcmltZW50UmVxdWVzdBopLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQib9pBEXBhcmVudCxleHBlcmltZW50gtPkkwJVOgpleHBlcmltZW50IkcvdjMve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qL2Vudmlyb25tZW50cy8qfS9leHBlcmltZW50cxL2AQoQVXBkYXRlRXhwZXJpbWVudBI2Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLlVwZGF0ZUV4cGVyaW1lbnRSZXF1ZXN0GikuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuRXhwZXJpbWVudCJ/2kEWZXhwZXJpbWVudCx1cGRhdGVfbWFza4LT5JMCYDoKZXhwZXJpbWVudDJSL3YzL3tleHBlcmltZW50Lm5hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKi9lbnZpcm9ubWVudHMvKi9leHBlcmltZW50cy8qfRK6AQoQRGVsZXRlRXhwZXJpbWVudBI2Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkRlbGV0ZUV4cGVyaW1lbnRSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IlbaQQRuYW1lgtPkkwJJKkcvdjMve25hbWU9cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9hZ2VudHMvKi9lbnZpcm9ubWVudHMvKi9leHBlcmltZW50cy8qfRLUAQoPU3RhcnRFeHBlcmltZW50EjUuZ29vZ2xlLmNsb3VkLmRpYWxvZ2Zsb3cuY3gudjMuU3RhcnRFeHBlcmltZW50UmVxdWVzdBopLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQiX9pBBG5hbWWC0+STAlI6ASoiTS92My97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qL2Vudmlyb25tZW50cy8qL2V4cGVyaW1lbnRzLyp9OnN0YXJ0EtEBCg5TdG9wRXhwZXJpbWVudBI0Lmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLlN0b3BFeHBlcmltZW50UmVxdWVzdBopLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzLkV4cGVyaW1lbnQiXtpBBG5hbWWC0+STAlE6ASoiTC92My97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2FnZW50cy8qL2Vudmlyb25tZW50cy8qL2V4cGVyaW1lbnRzLyp9OnN0b3AaeMpBGWRpYWxvZ2Zsb3cuZ29vZ2xlYXBpcy5jb23SQVlodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZGlhbG9nZmxvd0K1AQohY29tLmdvb2dsZS5jbG91ZC5kaWFsb2dmbG93LmN4LnYzQg9FeHBlcmltZW50UHJvdG9QAVoxY2xvdWQuZ29vZ2xlLmNvbS9nby9kaWFsb2dmbG93L2N4L2FwaXYzL2N4cGI7Y3hwYvgBAaICAkRGqgIdR29vZ2xlLkNsb3VkLkRpYWxvZ2Zsb3cuQ3guVjPqAiFHb29nbGU6OkNsb3VkOjpEaWFsb2dmbG93OjpDWDo6VjNiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Represents an experiment in an environment.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment
 */
export type Experiment = Message<"google.cloud.dialogflow.cx.v3.Experiment"> & {
  /**
   * The name of the experiment.
   * Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>..
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The human-readable name of the experiment (unique in an
   * environment). Limit of 64 characters.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * The human-readable description of the experiment.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * The current state of the experiment.
   * Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING.
   * Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or
   * RUNNING->DONE.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.State state = 4;
   */
  state: Experiment_State;

  /**
   * The definition of the experiment.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.Definition definition = 5;
   */
  definition?: Experiment_Definition;

  /**
   * The configuration for auto rollout. If set, there should be exactly two
   * variants in the experiment (control variant being the default version of
   * the flow), the traffic allocation for the non-control variant will
   * gradually increase to 100% when conditions are met, and eventually
   * replace the control variant to become the default version of the flow.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.RolloutConfig rollout_config = 14;
   */
  rolloutConfig?: RolloutConfig;

  /**
   * State of the auto rollout process.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.RolloutState rollout_state = 15;
   */
  rolloutState?: RolloutState;

  /**
   * The reason why rollout has failed. Should only be set when state is
   * ROLLOUT_FAILED.
   *
   * @generated from field: string rollout_failure_reason = 16;
   */
  rolloutFailureReason: string;

  /**
   * Inference result of the experiment.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.Result result = 6;
   */
  result?: Experiment_Result;

  /**
   * Creation time of this experiment.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Start time of this experiment.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 8;
   */
  startTime?: Timestamp;

  /**
   * End time of this experiment.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 9;
   */
  endTime?: Timestamp;

  /**
   * Last update time of this experiment.
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 10;
   */
  lastUpdateTime?: Timestamp;

  /**
   * Maximum number of days to run the experiment/rollout. If auto-rollout is
   * not enabled, default value and maximum will be 30 days. If auto-rollout is
   * enabled, default value and maximum will be 6 days.
   *
   * @generated from field: google.protobuf.Duration experiment_length = 11;
   */
  experimentLength?: Duration;

  /**
   * The history of updates to the experiment variants.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.VariantsHistory variants_history = 12;
   */
  variantsHistory: VariantsHistory[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.
 * Use `create(ExperimentSchema)` to create a new message.
 */
export const ExperimentSchema: GenMessage<Experiment> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0);

/**
 * Definition of the experiment.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment.Definition
 */
export type Experiment_Definition = Message<"google.cloud.dialogflow.cx.v3.Experiment.Definition"> & {
  /**
   * The condition defines which subset of sessions are selected for
   * this experiment. If not specified, all sessions are eligible. E.g.
   * "query_input.language_code=en" See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   *
   * @generated from field: string condition = 1;
   */
  condition: string;

  /**
   * The variants of the experiment. We currently only support single variant
   * experiment.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.Experiment.Definition.variants
   */
  variants: {
    /**
     * The flow versions as the variants of this experiment.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.VersionVariants version_variants = 2;
     */
    value: VersionVariants;
    case: "versionVariants";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.Definition.
 * Use `create(Experiment_DefinitionSchema)` to create a new message.
 */
export const Experiment_DefinitionSchema: GenMessage<Experiment_Definition> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 0);

/**
 * The inference result which includes an objective metric to optimize and the
 * confidence interval.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment.Result
 */
export type Experiment_Result = Message<"google.cloud.dialogflow.cx.v3.Experiment.Result"> & {
  /**
   * Version variants and metrics.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.Experiment.Result.VersionMetrics version_metrics = 1;
   */
  versionMetrics: Experiment_Result_VersionMetrics[];

  /**
   * The last time the experiment's stats data was updated. Will have default
   * value if stats have never been computed for this experiment.
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 2;
   */
  lastUpdateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.Result.
 * Use `create(Experiment_ResultSchema)` to create a new message.
 */
export const Experiment_ResultSchema: GenMessage<Experiment_Result> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1);

/**
 * A confidence interval is a range of possible values for the experiment
 * objective you are trying to measure.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment.Result.ConfidenceInterval
 */
export type Experiment_Result_ConfidenceInterval = Message<"google.cloud.dialogflow.cx.v3.Experiment.Result.ConfidenceInterval"> & {
  /**
   * The confidence level used to construct the interval, i.e. there is X%
   * chance that the true value is within this interval.
   *
   * @generated from field: double confidence_level = 1;
   */
  confidenceLevel: number;

  /**
   * The percent change between an experiment metric's value and the value
   * for its control.
   *
   * @generated from field: double ratio = 2;
   */
  ratio: number;

  /**
   * Lower bound of the interval.
   *
   * @generated from field: double lower_bound = 3;
   */
  lowerBound: number;

  /**
   * Upper bound of the interval.
   *
   * @generated from field: double upper_bound = 4;
   */
  upperBound: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.Result.ConfidenceInterval.
 * Use `create(Experiment_Result_ConfidenceIntervalSchema)` to create a new message.
 */
export const Experiment_Result_ConfidenceIntervalSchema: GenMessage<Experiment_Result_ConfidenceInterval> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1, 0);

/**
 * Metric and corresponding confidence intervals.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment.Result.Metric
 */
export type Experiment_Result_Metric = Message<"google.cloud.dialogflow.cx.v3.Experiment.Result.Metric"> & {
  /**
   * Ratio-based metric type. Only one of type or count_type is specified in
   * each Metric.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.Result.MetricType type = 1;
   */
  type: Experiment_Result_MetricType;

  /**
   * Count-based metric type. Only one of type or count_type is specified in
   * each Metric.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.Result.CountType count_type = 5;
   */
  countType: Experiment_Result_CountType;

  /**
   * The actual value of the metric.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.Experiment.Result.Metric.value
   */
  value: {
    /**
     * Ratio value of a metric.
     *
     * @generated from field: double ratio = 2;
     */
    value: number;
    case: "ratio";
  } | {
    /**
     * Count value of a metric.
     *
     * @generated from field: double count = 4;
     */
    value: number;
    case: "count";
  } | { case: undefined; value?: undefined };

  /**
   * The probability that the treatment is better than all other treatments
   * in the experiment
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment.Result.ConfidenceInterval confidence_interval = 3;
   */
  confidenceInterval?: Experiment_Result_ConfidenceInterval;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.Result.Metric.
 * Use `create(Experiment_Result_MetricSchema)` to create a new message.
 */
export const Experiment_Result_MetricSchema: GenMessage<Experiment_Result_Metric> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1, 1);

/**
 * Version variant and associated metrics.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.Experiment.Result.VersionMetrics
 */
export type Experiment_Result_VersionMetrics = Message<"google.cloud.dialogflow.cx.v3.Experiment.Result.VersionMetrics"> & {
  /**
   * The name of the flow [Version][google.cloud.dialogflow.cx.v3.Version].
   * Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/flows/<Flow ID>/versions/<Version ID>`.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The metrics and corresponding confidence intervals in the inference
   * result.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.Experiment.Result.Metric metrics = 2;
   */
  metrics: Experiment_Result_Metric[];

  /**
   * Number of sessions that were allocated to this version.
   *
   * @generated from field: int32 session_count = 3;
   */
  sessionCount: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.Experiment.Result.VersionMetrics.
 * Use `create(Experiment_Result_VersionMetricsSchema)` to create a new message.
 */
export const Experiment_Result_VersionMetricsSchema: GenMessage<Experiment_Result_VersionMetrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1, 2);

/**
 * Types of ratio-based metric for Dialogflow experiment.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.Experiment.Result.MetricType
 */
export enum Experiment_Result_MetricType {
  /**
   * Metric unspecified.
   *
   * @generated from enum value: METRIC_UNSPECIFIED = 0;
   */
  METRIC_UNSPECIFIED = 0,

  /**
   * Percentage of contained sessions without user calling back in 24 hours.
   *
   * @generated from enum value: CONTAINED_SESSION_NO_CALLBACK_RATE = 1;
   */
  CONTAINED_SESSION_NO_CALLBACK_RATE = 1,

  /**
   * Percentage of sessions that were handed to a human agent.
   *
   * @generated from enum value: LIVE_AGENT_HANDOFF_RATE = 2;
   */
  LIVE_AGENT_HANDOFF_RATE = 2,

  /**
   * Percentage of sessions with the same user calling back.
   *
   * @generated from enum value: CALLBACK_SESSION_RATE = 3;
   */
  CALLBACK_SESSION_RATE = 3,

  /**
   * Percentage of sessions where user hung up.
   *
   * @generated from enum value: ABANDONED_SESSION_RATE = 4;
   */
  ABANDONED_SESSION_RATE = 4,

  /**
   * Percentage of sessions reached Dialogflow 'END_PAGE' or
   * 'END_SESSION'.
   *
   * @generated from enum value: SESSION_END_RATE = 5;
   */
  SESSION_END_RATE = 5,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.Experiment.Result.MetricType.
 */
export const Experiment_Result_MetricTypeSchema: GenEnum<Experiment_Result_MetricType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1, 0);

/**
 * Types of count-based metric for Dialogflow experiment.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.Experiment.Result.CountType
 */
export enum Experiment_Result_CountType {
  /**
   * Count type unspecified.
   *
   * @generated from enum value: COUNT_TYPE_UNSPECIFIED = 0;
   */
  COUNT_TYPE_UNSPECIFIED = 0,

  /**
   * Total number of occurrences of a 'NO_MATCH'.
   *
   * @generated from enum value: TOTAL_NO_MATCH_COUNT = 1;
   */
  TOTAL_NO_MATCH_COUNT = 1,

  /**
   * Total number of turn counts.
   *
   * @generated from enum value: TOTAL_TURN_COUNT = 2;
   */
  TOTAL_TURN_COUNT = 2,

  /**
   * Average turn count in a session.
   *
   * @generated from enum value: AVERAGE_TURN_COUNT = 3;
   */
  AVERAGE_TURN_COUNT = 3,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.Experiment.Result.CountType.
 */
export const Experiment_Result_CountTypeSchema: GenEnum<Experiment_Result_CountType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 1, 1);

/**
 * The state of the experiment.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.Experiment.State
 */
export enum Experiment_State {
  /**
   * State unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The experiment is created but not started yet.
   *
   * @generated from enum value: DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * The experiment is running.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The experiment is done.
   *
   * @generated from enum value: DONE = 3;
   */
  DONE = 3,

  /**
   * The experiment with auto-rollout enabled has failed.
   *
   * @generated from enum value: ROLLOUT_FAILED = 4;
   */
  ROLLOUT_FAILED = 4,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.Experiment.State.
 */
export const Experiment_StateSchema: GenEnum<Experiment_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0, 0);

/**
 * A list of flow version variants.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.VersionVariants
 */
export type VersionVariants = Message<"google.cloud.dialogflow.cx.v3.VersionVariants"> & {
  /**
   * A list of flow version variants.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.VersionVariants.Variant variants = 1;
   */
  variants: VersionVariants_Variant[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.VersionVariants.
 * Use `create(VersionVariantsSchema)` to create a new message.
 */
export const VersionVariantsSchema: GenMessage<VersionVariants> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 1);

/**
 * A single flow version with specified traffic allocation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.VersionVariants.Variant
 */
export type VersionVariants_Variant = Message<"google.cloud.dialogflow.cx.v3.VersionVariants.Variant"> & {
  /**
   * The name of the flow version.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/versions/<Version ID>`.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * Percentage of the traffic which should be routed to this
   * version of flow. Traffic allocation for a single flow must sum up to 1.0.
   *
   * @generated from field: float traffic_allocation = 2;
   */
  trafficAllocation: number;

  /**
   * Whether the variant is for the control group.
   *
   * @generated from field: bool is_control_group = 3;
   */
  isControlGroup: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.VersionVariants.Variant.
 * Use `create(VersionVariants_VariantSchema)` to create a new message.
 */
export const VersionVariants_VariantSchema: GenMessage<VersionVariants_Variant> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 1, 0);

/**
 * The history of variants update.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.VariantsHistory
 */
export type VariantsHistory = Message<"google.cloud.dialogflow.cx.v3.VariantsHistory"> & {
  /**
   * The variants updated. We currently only support single variant
   * experiment.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.VariantsHistory.variants
   */
  variants: {
    /**
     * The flow versions as the variants.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.VersionVariants version_variants = 1;
     */
    value: VersionVariants;
    case: "versionVariants";
  } | { case: undefined; value?: undefined };

  /**
   * Update time of the variants.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 2;
   */
  updateTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.VariantsHistory.
 * Use `create(VariantsHistorySchema)` to create a new message.
 */
export const VariantsHistorySchema: GenMessage<VariantsHistory> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 2);

/**
 * The configuration for auto rollout.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RolloutConfig
 */
export type RolloutConfig = Message<"google.cloud.dialogflow.cx.v3.RolloutConfig"> & {
  /**
   * Steps to roll out a flow version. Steps should be sorted by percentage in
   * ascending order.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.RolloutConfig.RolloutStep rollout_steps = 1;
   */
  rolloutSteps: RolloutConfig_RolloutStep[];

  /**
   * The conditions that are used to evaluate the success of a rollout
   * step. If not specified, all rollout steps will proceed to the next one
   * unless failure conditions are met. E.g. "containment_rate > 60% AND
   * callback_rate < 20%". See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   *
   * @generated from field: string rollout_condition = 2;
   */
  rolloutCondition: string;

  /**
   * The conditions that are used to evaluate the failure of a rollout
   * step. If not specified, no rollout steps will fail. E.g. "containment_rate
   * < 10% OR average_turn_count < 3". See the [conditions
   * reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
   *
   * @generated from field: string failure_condition = 3;
   */
  failureCondition: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RolloutConfig.
 * Use `create(RolloutConfigSchema)` to create a new message.
 */
export const RolloutConfigSchema: GenMessage<RolloutConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 3);

/**
 * A single rollout step with specified traffic allocation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RolloutConfig.RolloutStep
 */
export type RolloutConfig_RolloutStep = Message<"google.cloud.dialogflow.cx.v3.RolloutConfig.RolloutStep"> & {
  /**
   * The name of the rollout step;
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * The percentage of traffic allocated to the flow version of this rollout
   * step. (0%, 100%].
   *
   * @generated from field: int32 traffic_percent = 2;
   */
  trafficPercent: number;

  /**
   * The minimum time that this step should last. Should be longer than 1
   * hour. If not set, the default minimum duration for each step will be 1
   * hour.
   *
   * @generated from field: google.protobuf.Duration min_duration = 3;
   */
  minDuration?: Duration;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RolloutConfig.RolloutStep.
 * Use `create(RolloutConfig_RolloutStepSchema)` to create a new message.
 */
export const RolloutConfig_RolloutStepSchema: GenMessage<RolloutConfig_RolloutStep> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 3, 0);

/**
 * State of the auto-rollout process.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RolloutState
 */
export type RolloutState = Message<"google.cloud.dialogflow.cx.v3.RolloutState"> & {
  /**
   * Display name of the current auto rollout step.
   *
   * @generated from field: string step = 1;
   */
  step: string;

  /**
   * Index of the current step in the auto rollout steps list.
   *
   * @generated from field: int32 step_index = 3;
   */
  stepIndex: number;

  /**
   * Start time of the current step.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RolloutState.
 * Use `create(RolloutStateSchema)` to create a new message.
 */
export const RolloutStateSchema: GenMessage<RolloutState> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 4);

/**
 * The request message for
 * [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListExperimentsRequest
 */
export type ListExperimentsRequest = Message<"google.cloud.dialogflow.cx.v3.ListExperimentsRequest"> & {
  /**
   * Required. The [Environment][google.cloud.dialogflow.cx.v3.Environment] to
   * list all environments for. Format: `projects/<Project
   * ID>/locations/<Location ID>/agents/<Agent ID>/environments/<Environment
   * ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return in a single page. By default 20 and
   * at most 100.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous list request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListExperimentsRequest.
 * Use `create(ListExperimentsRequestSchema)` to create a new message.
 */
export const ListExperimentsRequestSchema: GenMessage<ListExperimentsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 5);

/**
 * The response message for
 * [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListExperimentsResponse
 */
export type ListExperimentsResponse = Message<"google.cloud.dialogflow.cx.v3.ListExperimentsResponse"> & {
  /**
   * The list of experiments. There will be a maximum number of items
   * returned based on the page_size field in the request. The list may in some
   * cases be empty or contain fewer entries than page_size even if this isn't
   * the last page.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.Experiment experiments = 1;
   */
  experiments: Experiment[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListExperimentsResponse.
 * Use `create(ListExperimentsResponseSchema)` to create a new message.
 */
export const ListExperimentsResponseSchema: GenMessage<ListExperimentsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 6);

/**
 * The request message for
 * [Experiments.GetExperiment][google.cloud.dialogflow.cx.v3.Experiments.GetExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.GetExperimentRequest
 */
export type GetExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.GetExperimentRequest"> & {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3.Environment]. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.GetExperimentRequest.
 * Use `create(GetExperimentRequestSchema)` to create a new message.
 */
export const GetExperimentRequestSchema: GenMessage<GetExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 7);

/**
 * The request message for
 * [Experiments.CreateExperiment][google.cloud.dialogflow.cx.v3.Experiments.CreateExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.CreateExperimentRequest
 */
export type CreateExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.CreateExperimentRequest"> & {
  /**
   * Required. The [Agent][google.cloud.dialogflow.cx.v3.Agent] to create an
   * [Environment][google.cloud.dialogflow.cx.v3.Environment] for. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The experiment to create.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment experiment = 2;
   */
  experiment?: Experiment;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.CreateExperimentRequest.
 * Use `create(CreateExperimentRequestSchema)` to create a new message.
 */
export const CreateExperimentRequestSchema: GenMessage<CreateExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 8);

/**
 * The request message for
 * [Experiments.UpdateExperiment][google.cloud.dialogflow.cx.v3.Experiments.UpdateExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.UpdateExperimentRequest
 */
export type UpdateExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.UpdateExperimentRequest"> & {
  /**
   * Required. The experiment to update.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Experiment experiment = 1;
   */
  experiment?: Experiment;

  /**
   * Required. The mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.UpdateExperimentRequest.
 * Use `create(UpdateExperimentRequestSchema)` to create a new message.
 */
export const UpdateExperimentRequestSchema: GenMessage<UpdateExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 9);

/**
 * The request message for
 * [Experiments.DeleteExperiment][google.cloud.dialogflow.cx.v3.Experiments.DeleteExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.DeleteExperimentRequest
 */
export type DeleteExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.DeleteExperimentRequest"> & {
  /**
   * Required. The name of the
   * [Environment][google.cloud.dialogflow.cx.v3.Environment] to delete. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.DeleteExperimentRequest.
 * Use `create(DeleteExperimentRequestSchema)` to create a new message.
 */
export const DeleteExperimentRequestSchema: GenMessage<DeleteExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 10);

/**
 * The request message for
 * [Experiments.StartExperiment][google.cloud.dialogflow.cx.v3.Experiments.StartExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.StartExperimentRequest
 */
export type StartExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.StartExperimentRequest"> & {
  /**
   * Required. Resource name of the experiment to start.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.StartExperimentRequest.
 * Use `create(StartExperimentRequestSchema)` to create a new message.
 */
export const StartExperimentRequestSchema: GenMessage<StartExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 11);

/**
 * The request message for
 * [Experiments.StopExperiment][google.cloud.dialogflow.cx.v3.Experiments.StopExperiment].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.StopExperimentRequest
 */
export type StopExperimentRequest = Message<"google.cloud.dialogflow.cx.v3.StopExperimentRequest"> & {
  /**
   * Required. Resource name of the experiment to stop.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>/experiments/<Experiment ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.StopExperimentRequest.
 * Use `create(StopExperimentRequestSchema)` to create a new message.
 */
export const StopExperimentRequestSchema: GenMessage<StopExperimentRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_experiment, 12);

/**
 * Service for managing [Experiments][google.cloud.dialogflow.cx.v3.Experiment].
 *
 * @generated from service google.cloud.dialogflow.cx.v3.Experiments
 */
export const Experiments: GenService<{
  /**
   * Returns the list of all experiments in the specified
   * [Environment][google.cloud.dialogflow.cx.v3.Environment].
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.ListExperiments
   */
  listExperiments: {
    methodKind: "unary";
    input: typeof ListExperimentsRequestSchema;
    output: typeof ListExperimentsResponseSchema;
  },
  /**
   * Retrieves the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.GetExperiment
   */
  getExperiment: {
    methodKind: "unary";
    input: typeof GetExperimentRequestSchema;
    output: typeof ExperimentSchema;
  },
  /**
   * Creates an [Experiment][google.cloud.dialogflow.cx.v3.Experiment] in the
   * specified [Environment][google.cloud.dialogflow.cx.v3.Environment].
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.CreateExperiment
   */
  createExperiment: {
    methodKind: "unary";
    input: typeof CreateExperimentRequestSchema;
    output: typeof ExperimentSchema;
  },
  /**
   * Updates the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.UpdateExperiment
   */
  updateExperiment: {
    methodKind: "unary";
    input: typeof UpdateExperimentRequestSchema;
    output: typeof ExperimentSchema;
  },
  /**
   * Deletes the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.DeleteExperiment
   */
  deleteExperiment: {
    methodKind: "unary";
    input: typeof DeleteExperimentRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Starts the specified
   * [Experiment][google.cloud.dialogflow.cx.v3.Experiment]. This rpc only
   * changes the state of experiment from PENDING to RUNNING.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.StartExperiment
   */
  startExperiment: {
    methodKind: "unary";
    input: typeof StartExperimentRequestSchema;
    output: typeof ExperimentSchema;
  },
  /**
   * Stops the specified [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
   * This rpc only changes the state of experiment from RUNNING to DONE.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.Experiments.StopExperiment
   */
  stopExperiment: {
    methodKind: "unary";
    input: typeof StopExperimentRequestSchema;
    output: typeof ExperimentSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dialogflow_cx_v3_experiment, 0);

