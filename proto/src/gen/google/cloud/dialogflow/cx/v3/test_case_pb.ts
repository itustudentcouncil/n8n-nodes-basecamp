// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dialogflow/cx/v3/test_case.proto (package google.cloud.dialogflow.cx.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Flow } from "./flow_pb";
import { file_google_cloud_dialogflow_cx_v3_flow } from "./flow_pb";
import type { Intent } from "./intent_pb";
import { file_google_cloud_dialogflow_cx_v3_intent } from "./intent_pb";
import type { EventHandler, Page, TransitionRoute } from "./page_pb";
import { file_google_cloud_dialogflow_cx_v3_page } from "./page_pb";
import type { ResponseMessage_Text } from "./response_message_pb";
import { file_google_cloud_dialogflow_cx_v3_response_message } from "./response_message_pb";
import type { QueryInput } from "./session_pb";
import { file_google_cloud_dialogflow_cx_v3_session } from "./session_pb";
import type { TransitionRouteGroup } from "./transition_route_group_pb";
import { file_google_cloud_dialogflow_cx_v3_transition_route_group } from "./transition_route_group_pb";
import type { OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../../rpc/status_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dialogflow/cx/v3/test_case.proto.
 */
export const file_google_cloud_dialogflow_cx_v3_test_case: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dialogflow_cx_v3_flow, file_google_cloud_dialogflow_cx_v3_intent, file_google_cloud_dialogflow_cx_v3_page, file_google_cloud_dialogflow_cx_v3_response_message, file_google_cloud_dialogflow_cx_v3_session, file_google_cloud_dialogflow_cx_v3_transition_route_group, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * Represents a test case.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestCase
 */
export type TestCase = Message<"google.cloud.dialogflow.cx.v3.TestCase"> & {
  /**
   * The unique identifier of the test case.
   * [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase]
   * will populate the name automatically. Otherwise use format:
   * `projects/<Project ID>/locations/<LocationID>/agents/
   * <AgentID>/testCases/<TestCase ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Tags are short descriptions that users may apply to test cases for
   * organizational and filtering purposes. Each tag should start with "#" and
   * has a limit of 30 characters.
   *
   * @generated from field: repeated string tags = 2;
   */
  tags: string[];

  /**
   * Required. The human-readable name of the test case, unique within the
   * agent. Limit of 200 characters.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Additional freeform notes about the test case. Limit of 400 characters.
   *
   * @generated from field: string notes = 4;
   */
  notes: string;

  /**
   * Config for the test case.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestConfig test_config = 13;
   */
  testConfig?: TestConfig;

  /**
   * The conversation turns uttered when the test case was created, in
   * chronological order. These include the canonical set of agent utterances
   * that should occur when the agent is working properly.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.ConversationTurn test_case_conversation_turns = 5;
   */
  testCaseConversationTurns: ConversationTurn[];

  /**
   * Output only. When the test was created.
   *
   * @generated from field: google.protobuf.Timestamp creation_time = 10;
   */
  creationTime?: Timestamp;

  /**
   * The latest test result.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestCaseResult last_test_result = 12;
   */
  lastTestResult?: TestCaseResult;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestCase.
 * Use `create(TestCaseSchema)` to create a new message.
 */
export const TestCaseSchema: GenMessage<TestCase> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 0);

/**
 * Represents a result from running a test case in an agent environment.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestCaseResult
 */
export type TestCaseResult = Message<"google.cloud.dialogflow.cx.v3.TestCaseResult"> & {
  /**
   * The resource name for the test case result. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/testCases/
   * <TestCase ID>/results/<TestCaseResult ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Environment where the test was run. If not set, it indicates the draft
   * environment.
   *
   * @generated from field: string environment = 2;
   */
  environment: string;

  /**
   * The conversation turns uttered during the test case replay in chronological
   * order.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.ConversationTurn conversation_turns = 3;
   */
  conversationTurns: ConversationTurn[];

  /**
   * Whether the test case passed in the agent environment.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestResult test_result = 4;
   */
  testResult: TestResult;

  /**
   * The time that the test was run.
   *
   * @generated from field: google.protobuf.Timestamp test_time = 5;
   */
  testTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestCaseResult.
 * Use `create(TestCaseResultSchema)` to create a new message.
 */
export const TestCaseResultSchema: GenMessage<TestCaseResult> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 1);

/**
 * Represents configurations for a test case.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestConfig
 */
export type TestConfig = Message<"google.cloud.dialogflow.cx.v3.TestConfig"> & {
  /**
   * Session parameters to be compared when calculating differences.
   *
   * @generated from field: repeated string tracking_parameters = 1;
   */
  trackingParameters: string[];

  /**
   * Flow name to start the test case with.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>`.
   *
   * Only one of `flow` and `page` should be set to indicate the starting point
   * of the test case. If neither is set, the test case will start with start
   * page on the default start flow.
   *
   * @generated from field: string flow = 2;
   */
  flow: string;

  /**
   * The [page][google.cloud.dialogflow.cx.v3.Page] to start the test case with.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/flows/<Flow ID>/pages/<Page ID>`.
   *
   * Only one of `flow` and `page` should be set to indicate the starting point
   * of the test case. If neither is set, the test case will start with start
   * page on the default start flow.
   *
   * @generated from field: string page = 3;
   */
  page: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestConfig.
 * Use `create(TestConfigSchema)` to create a new message.
 */
export const TestConfigSchema: GenMessage<TestConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 2);

/**
 * One interaction between a human and virtual agent. The human provides some
 * input and the virtual agent provides a response.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ConversationTurn
 */
export type ConversationTurn = Message<"google.cloud.dialogflow.cx.v3.ConversationTurn"> & {
  /**
   * The user input.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ConversationTurn.UserInput user_input = 1;
   */
  userInput?: ConversationTurn_UserInput;

  /**
   * The virtual agent output.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ConversationTurn.VirtualAgentOutput virtual_agent_output = 2;
   */
  virtualAgentOutput?: ConversationTurn_VirtualAgentOutput;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ConversationTurn.
 * Use `create(ConversationTurnSchema)` to create a new message.
 */
export const ConversationTurnSchema: GenMessage<ConversationTurn> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 3);

/**
 * The input from the human user.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ConversationTurn.UserInput
 */
export type ConversationTurn_UserInput = Message<"google.cloud.dialogflow.cx.v3.ConversationTurn.UserInput"> & {
  /**
   * Supports [text input][google.cloud.dialogflow.cx.v3.QueryInput.text],
   * [event input][google.cloud.dialogflow.cx.v3.QueryInput.event], [dtmf
   * input][google.cloud.dialogflow.cx.v3.QueryInput.dtmf] in the test case.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.QueryInput input = 5;
   */
  input?: QueryInput;

  /**
   * Parameters that need to be injected into the conversation during intent
   * detection.
   *
   * @generated from field: google.protobuf.Struct injected_parameters = 2;
   */
  injectedParameters?: JsonObject;

  /**
   * If webhooks should be allowed to trigger in response to the user
   * utterance. Often if parameters are injected, webhooks should not be
   * enabled.
   *
   * @generated from field: bool is_webhook_enabled = 3;
   */
  isWebhookEnabled: boolean;

  /**
   * Whether sentiment analysis is enabled.
   *
   * @generated from field: bool enable_sentiment_analysis = 7;
   */
  enableSentimentAnalysis: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ConversationTurn.UserInput.
 * Use `create(ConversationTurn_UserInputSchema)` to create a new message.
 */
export const ConversationTurn_UserInputSchema: GenMessage<ConversationTurn_UserInput> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 3, 0);

/**
 * The output from the virtual agent.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ConversationTurn.VirtualAgentOutput
 */
export type ConversationTurn_VirtualAgentOutput = Message<"google.cloud.dialogflow.cx.v3.ConversationTurn.VirtualAgentOutput"> & {
  /**
   * The session parameters available to the bot at this point.
   *
   * @generated from field: google.protobuf.Struct session_parameters = 4;
   */
  sessionParameters?: JsonObject;

  /**
   * Output only. If this is part of a [result conversation
   * turn][TestCaseResult.conversation_turns], the list of differences
   * between the original run and the replay for this output, if any.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestRunDifference differences = 5;
   */
  differences: TestRunDifference[];

  /**
   * Required. Input only. The diagnostic
   * [info][Session.DetectIntentResponse.QueryResult.diagnostic_info]
   * output for the turn. Required to calculate the testing coverage.
   *
   * @generated from field: google.protobuf.Struct diagnostic_info = 6;
   */
  diagnosticInfo?: JsonObject;

  /**
   * The [Intent][google.cloud.dialogflow.cx.v3.Intent] that triggered the
   * response. Only name and displayName will be set.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Intent triggered_intent = 7;
   */
  triggeredIntent?: Intent;

  /**
   * The [Page][google.cloud.dialogflow.cx.v3.Page] on which the utterance was
   * spoken. Only name and displayName will be set.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.Page current_page = 8;
   */
  currentPage?: Page;

  /**
   * The [text][google.cloud.dialogflow.cx.v3.ResponseMessage.Text] responses
   * from the agent for the turn.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.ResponseMessage.Text text_responses = 9;
   */
  textResponses: ResponseMessage_Text[];

  /**
   * Response error from the agent in the test result. If set, other output
   * is empty.
   *
   * @generated from field: google.rpc.Status status = 10;
   */
  status?: Status;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ConversationTurn.VirtualAgentOutput.
 * Use `create(ConversationTurn_VirtualAgentOutputSchema)` to create a new message.
 */
export const ConversationTurn_VirtualAgentOutputSchema: GenMessage<ConversationTurn_VirtualAgentOutput> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 3, 1);

/**
 * The description of differences between original and replayed agent output.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestRunDifference
 */
export type TestRunDifference = Message<"google.cloud.dialogflow.cx.v3.TestRunDifference"> & {
  /**
   * The type of diff.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestRunDifference.DiffType type = 1;
   */
  type: TestRunDifference_DiffType;

  /**
   * A human readable description of the diff, showing the actual output vs
   * expected output.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestRunDifference.
 * Use `create(TestRunDifferenceSchema)` to create a new message.
 */
export const TestRunDifferenceSchema: GenMessage<TestRunDifference> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 4);

/**
 * What part of the message replay differs from the test case.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.TestRunDifference.DiffType
 */
export enum TestRunDifference_DiffType {
  /**
   * Should never be used.
   *
   * @generated from enum value: DIFF_TYPE_UNSPECIFIED = 0;
   */
  DIFF_TYPE_UNSPECIFIED = 0,

  /**
   * The intent.
   *
   * @generated from enum value: INTENT = 1;
   */
  INTENT = 1,

  /**
   * The page.
   *
   * @generated from enum value: PAGE = 2;
   */
  PAGE = 2,

  /**
   * The parameters.
   *
   * @generated from enum value: PARAMETERS = 3;
   */
  PARAMETERS = 3,

  /**
   * The message utterance.
   *
   * @generated from enum value: UTTERANCE = 4;
   */
  UTTERANCE = 4,

  /**
   * The flow.
   *
   * @generated from enum value: FLOW = 5;
   */
  FLOW = 5,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.TestRunDifference.DiffType.
 */
export const TestRunDifference_DiffTypeSchema: GenEnum<TestRunDifference_DiffType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_test_case, 4, 0);

/**
 * Transition coverage represents the percentage of all possible page
 * transitions (page-level transition routes and event handlers, excluding
 * transition route groups) present within any of a parent's test cases.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionCoverage
 */
export type TransitionCoverage = Message<"google.cloud.dialogflow.cx.v3.TransitionCoverage"> & {
  /**
   * The list of Transitions present in the agent.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition transitions = 1;
   */
  transitions: TransitionCoverage_Transition[];

  /**
   * The percent of transitions in the agent that are covered.
   *
   * @generated from field: float coverage_score = 2;
   */
  coverageScore: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionCoverage.
 * Use `create(TransitionCoverageSchema)` to create a new message.
 */
export const TransitionCoverageSchema: GenMessage<TransitionCoverage> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 5);

/**
 * The source or target of a transition.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode
 */
export type TransitionCoverage_TransitionNode = Message<"google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode"> & {
  /**
   * A TransitionNode can be either a page or a flow.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode.kind
   */
  kind: {
    /**
     * Indicates a transition to a [Page][google.cloud.dialogflow.cx.v3.Page].
     * Only some fields such as name and displayname will be set.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.Page page = 1;
     */
    value: Page;
    case: "page";
  } | {
    /**
     * Indicates a transition to a [Flow][google.cloud.dialogflow.cx.v3.Flow].
     * Only some fields such as name and displayname will be set.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.Flow flow = 2;
     */
    value: Flow;
    case: "flow";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode.
 * Use `create(TransitionCoverage_TransitionNodeSchema)` to create a new message.
 */
export const TransitionCoverage_TransitionNodeSchema: GenMessage<TransitionCoverage_TransitionNode> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 5, 0);

/**
 * A transition in a page.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition
 */
export type TransitionCoverage_Transition = Message<"google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition"> & {
  /**
   * The start node of a transition.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode source = 1;
   */
  source?: TransitionCoverage_TransitionNode;

  /**
   * The index of a transition in the transition list. Starting from 0.
   *
   * @generated from field: int32 index = 4;
   */
  index: number;

  /**
   * The end node of a transition.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode target = 2;
   */
  target?: TransitionCoverage_TransitionNode;

  /**
   * Whether the transition is covered by at least one of the
   * agent's test cases.
   *
   * @generated from field: bool covered = 3;
   */
  covered: boolean;

  /**
   * The detailed transition.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition.detail
   */
  detail: {
    /**
     * Intent route or condition route.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.TransitionRoute transition_route = 5;
     */
    value: TransitionRoute;
    case: "transitionRoute";
  } | {
    /**
     * Event handler.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.EventHandler event_handler = 6;
     */
    value: EventHandler;
    case: "eventHandler";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition.
 * Use `create(TransitionCoverage_TransitionSchema)` to create a new message.
 */
export const TransitionCoverage_TransitionSchema: GenMessage<TransitionCoverage_Transition> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 5, 1);

/**
 * Transition route group coverage represents the percentage of all possible
 * transition routes present within any of a parent's test cases. The results
 * are grouped by the transition route group.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage
 */
export type TransitionRouteGroupCoverage = Message<"google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage"> & {
  /**
   * Transition route group coverages.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage coverages = 1;
   */
  coverages: TransitionRouteGroupCoverage_Coverage[];

  /**
   * The percent of transition routes in all the transition route groups that
   * are covered.
   *
   * @generated from field: float coverage_score = 2;
   */
  coverageScore: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.
 * Use `create(TransitionRouteGroupCoverageSchema)` to create a new message.
 */
export const TransitionRouteGroupCoverageSchema: GenMessage<TransitionRouteGroupCoverage> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 6);

/**
 * Coverage result message for one transition route group.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage
 */
export type TransitionRouteGroupCoverage_Coverage = Message<"google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage"> & {
  /**
   * Transition route group metadata. Only name and displayName will be set.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TransitionRouteGroup route_group = 1;
   */
  routeGroup?: TransitionRouteGroup;

  /**
   * The list of transition routes and coverage in the transition route group.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.Transition transitions = 2;
   */
  transitions: TransitionRouteGroupCoverage_Coverage_Transition[];

  /**
   * The percent of transition routes in the transition route group that are
   * covered.
   *
   * @generated from field: float coverage_score = 3;
   */
  coverageScore: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.
 * Use `create(TransitionRouteGroupCoverage_CoverageSchema)` to create a new message.
 */
export const TransitionRouteGroupCoverage_CoverageSchema: GenMessage<TransitionRouteGroupCoverage_Coverage> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 6, 0);

/**
 * A transition coverage in a transition route group.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.Transition
 */
export type TransitionRouteGroupCoverage_Coverage_Transition = Message<"google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.Transition"> & {
  /**
   * Intent route or condition route.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TransitionRoute transition_route = 1;
   */
  transitionRoute?: TransitionRoute;

  /**
   * Whether the transition route is covered by at least one of the
   * agent's test cases.
   *
   * @generated from field: bool covered = 2;
   */
  covered: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.Transition.
 * Use `create(TransitionRouteGroupCoverage_Coverage_TransitionSchema)` to create a new message.
 */
export const TransitionRouteGroupCoverage_Coverage_TransitionSchema: GenMessage<TransitionRouteGroupCoverage_Coverage_Transition> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 6, 0, 0);

/**
 * Intent coverage represents the percentage of all possible intents in the
 * agent that are triggered in any of a parent's test cases.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.IntentCoverage
 */
export type IntentCoverage = Message<"google.cloud.dialogflow.cx.v3.IntentCoverage"> & {
  /**
   * The list of Intents present in the agent
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.IntentCoverage.Intent intents = 1;
   */
  intents: IntentCoverage_Intent[];

  /**
   * The percent of intents in the agent that are covered.
   *
   * @generated from field: float coverage_score = 2;
   */
  coverageScore: number;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.IntentCoverage.
 * Use `create(IntentCoverageSchema)` to create a new message.
 */
export const IntentCoverageSchema: GenMessage<IntentCoverage> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 7);

/**
 * The agent's intent.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.IntentCoverage.Intent
 */
export type IntentCoverage_Intent = Message<"google.cloud.dialogflow.cx.v3.IntentCoverage.Intent"> & {
  /**
   * The intent full resource name
   *
   * @generated from field: string intent = 1;
   */
  intent: string;

  /**
   * Whether the intent is covered by at least one of the agent's
   * test cases.
   *
   * @generated from field: bool covered = 2;
   */
  covered: boolean;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.IntentCoverage.Intent.
 * Use `create(IntentCoverage_IntentSchema)` to create a new message.
 */
export const IntentCoverage_IntentSchema: GenMessage<IntentCoverage_Intent> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 7, 0);

/**
 * The request message for
 * [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.CalculateCoverageRequest
 */
export type CalculateCoverageRequest = Message<"google.cloud.dialogflow.cx.v3.CalculateCoverageRequest"> & {
  /**
   * Required. The agent to calculate coverage for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string agent = 3;
   */
  agent: string;

  /**
   * Required. The type of coverage requested.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.CoverageType type = 2;
   */
  type: CalculateCoverageRequest_CoverageType;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.
 * Use `create(CalculateCoverageRequestSchema)` to create a new message.
 */
export const CalculateCoverageRequestSchema: GenMessage<CalculateCoverageRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 8);

/**
 * The type of coverage score requested.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.CoverageType
 */
export enum CalculateCoverageRequest_CoverageType {
  /**
   * Should never be used.
   *
   * @generated from enum value: COVERAGE_TYPE_UNSPECIFIED = 0;
   */
  COVERAGE_TYPE_UNSPECIFIED = 0,

  /**
   * Intent coverage.
   *
   * @generated from enum value: INTENT = 1;
   */
  INTENT = 1,

  /**
   * Page transition coverage.
   *
   * @generated from enum value: PAGE_TRANSITION = 2;
   */
  PAGE_TRANSITION = 2,

  /**
   * Transition route group coverage.
   *
   * @generated from enum value: TRANSITION_ROUTE_GROUP = 3;
   */
  TRANSITION_ROUTE_GROUP = 3,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.CoverageType.
 */
export const CalculateCoverageRequest_CoverageTypeSchema: GenEnum<CalculateCoverageRequest_CoverageType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_test_case, 8, 0);

/**
 * The response message for
 * [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.CalculateCoverageResponse
 */
export type CalculateCoverageResponse = Message<"google.cloud.dialogflow.cx.v3.CalculateCoverageResponse"> & {
  /**
   * The agent to calculate coverage for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string agent = 5;
   */
  agent: string;

  /**
   * The type of coverage requested.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.CalculateCoverageResponse.coverage_type
   */
  coverageType: {
    /**
     * Intent coverage.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.IntentCoverage intent_coverage = 2;
     */
    value: IntentCoverage;
    case: "intentCoverage";
  } | {
    /**
     * Transition (excluding transition route groups) coverage.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.TransitionCoverage transition_coverage = 4;
     */
    value: TransitionCoverage;
    case: "transitionCoverage";
  } | {
    /**
     * Transition route group coverage.
     *
     * @generated from field: google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage route_group_coverage = 6;
     */
    value: TransitionRouteGroupCoverage;
    case: "routeGroupCoverage";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.CalculateCoverageResponse.
 * Use `create(CalculateCoverageResponseSchema)` to create a new message.
 */
export const CalculateCoverageResponseSchema: GenMessage<CalculateCoverageResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 9);

/**
 * The request message for
 * [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3.TestCases.ListTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListTestCasesRequest
 */
export type ListTestCasesRequest = Message<"google.cloud.dialogflow.cx.v3.ListTestCasesRequest"> & {
  /**
   * Required. The agent to list all pages for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return in a single page. By default 20.
   * Note that when TestCaseView = FULL, the maximum page size allowed is 20.
   * When TestCaseView = BASIC, the maximum page size allowed is 500.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous list request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Specifies whether response should include all fields or just the metadata.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView view = 4;
   */
  view: ListTestCasesRequest_TestCaseView;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListTestCasesRequest.
 * Use `create(ListTestCasesRequestSchema)` to create a new message.
 */
export const ListTestCasesRequestSchema: GenMessage<ListTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 10);

/**
 * Specifies how much test case information to include in the response.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView
 */
export enum ListTestCasesRequest_TestCaseView {
  /**
   * The default / unset value.
   * The API will default to the BASIC view.
   *
   * @generated from enum value: TEST_CASE_VIEW_UNSPECIFIED = 0;
   */
  TEST_CASE_VIEW_UNSPECIFIED = 0,

  /**
   * Include basic metadata about the test case, but not the conversation
   * turns. This is the default value.
   *
   * @generated from enum value: BASIC = 1;
   */
  BASIC = 1,

  /**
   * Include everything.
   *
   * @generated from enum value: FULL = 2;
   */
  FULL = 2,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView.
 */
export const ListTestCasesRequest_TestCaseViewSchema: GenEnum<ListTestCasesRequest_TestCaseView> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_test_case, 10, 0);

/**
 * The response message for
 * [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3.TestCases.ListTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListTestCasesResponse
 */
export type ListTestCasesResponse = Message<"google.cloud.dialogflow.cx.v3.ListTestCasesResponse"> & {
  /**
   * The list of test cases. There will be a maximum number of items returned
   * based on the page_size field in the request.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestCase test_cases = 1;
   */
  testCases: TestCase[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListTestCasesResponse.
 * Use `create(ListTestCasesResponseSchema)` to create a new message.
 */
export const ListTestCasesResponseSchema: GenMessage<ListTestCasesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 11);

/**
 * The request message for
 * [TestCases.BatchDeleteTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchDeleteTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.BatchDeleteTestCasesRequest
 */
export type BatchDeleteTestCasesRequest = Message<"google.cloud.dialogflow.cx.v3.BatchDeleteTestCasesRequest"> & {
  /**
   * Required. The agent to delete test cases from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Format of test case names: `projects/<Project ID>/locations/
   * <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
   *
   * @generated from field: repeated string names = 3;
   */
  names: string[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.BatchDeleteTestCasesRequest.
 * Use `create(BatchDeleteTestCasesRequestSchema)` to create a new message.
 */
export const BatchDeleteTestCasesRequestSchema: GenMessage<BatchDeleteTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 12);

/**
 * The request message for
 * [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.CreateTestCaseRequest
 */
export type CreateTestCaseRequest = Message<"google.cloud.dialogflow.cx.v3.CreateTestCaseRequest"> & {
  /**
   * Required. The agent to create the test case for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The test case to create.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestCase test_case = 2;
   */
  testCase?: TestCase;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.CreateTestCaseRequest.
 * Use `create(CreateTestCaseRequestSchema)` to create a new message.
 */
export const CreateTestCaseRequestSchema: GenMessage<CreateTestCaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 13);

/**
 * The request message for
 * [TestCases.UpdateTestCase][google.cloud.dialogflow.cx.v3.TestCases.UpdateTestCase].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.UpdateTestCaseRequest
 */
export type UpdateTestCaseRequest = Message<"google.cloud.dialogflow.cx.v3.UpdateTestCaseRequest"> & {
  /**
   * Required. The test case to update.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestCase test_case = 1;
   */
  testCase?: TestCase;

  /**
   * Required. The mask to specify which fields should be updated. The
   * [`creationTime`][google.cloud.dialogflow.cx.v3.TestCase.creation_time] and
   * [`lastTestResult`][google.cloud.dialogflow.cx.v3.TestCase.last_test_result]
   * cannot be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.UpdateTestCaseRequest.
 * Use `create(UpdateTestCaseRequestSchema)` to create a new message.
 */
export const UpdateTestCaseRequestSchema: GenMessage<UpdateTestCaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 14);

/**
 * The request message for
 * [TestCases.GetTestCase][google.cloud.dialogflow.cx.v3.TestCases.GetTestCase].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.GetTestCaseRequest
 */
export type GetTestCaseRequest = Message<"google.cloud.dialogflow.cx.v3.GetTestCaseRequest"> & {
  /**
   * Required. The name of the testcase.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/testCases/<TestCase ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.GetTestCaseRequest.
 * Use `create(GetTestCaseRequestSchema)` to create a new message.
 */
export const GetTestCaseRequestSchema: GenMessage<GetTestCaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 15);

/**
 * The request message for
 * [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RunTestCaseRequest
 */
export type RunTestCaseRequest = Message<"google.cloud.dialogflow.cx.v3.RunTestCaseRequest"> & {
  /**
   * Required. Format of test case name to run: `projects/<Project
   * ID>/locations/ <Location ID>/agents/<AgentID>/testCases/<TestCase ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Environment name. If not set, draft environment is assumed.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   *
   * @generated from field: string environment = 2;
   */
  environment: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RunTestCaseRequest.
 * Use `create(RunTestCaseRequestSchema)` to create a new message.
 */
export const RunTestCaseRequestSchema: GenMessage<RunTestCaseRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 16);

/**
 * The response message for
 * [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RunTestCaseResponse
 */
export type RunTestCaseResponse = Message<"google.cloud.dialogflow.cx.v3.RunTestCaseResponse"> & {
  /**
   * The result.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestCaseResult result = 2;
   */
  result?: TestCaseResult;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RunTestCaseResponse.
 * Use `create(RunTestCaseResponseSchema)` to create a new message.
 */
export const RunTestCaseResponseSchema: GenMessage<RunTestCaseResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 17);

/**
 * Metadata returned for the
 * [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase]
 * long running operation. This message currently has no fields.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.RunTestCaseMetadata
 */
export type RunTestCaseMetadata = Message<"google.cloud.dialogflow.cx.v3.RunTestCaseMetadata"> & {
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.RunTestCaseMetadata.
 * Use `create(RunTestCaseMetadataSchema)` to create a new message.
 */
export const RunTestCaseMetadataSchema: GenMessage<RunTestCaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 18);

/**
 * The request message for
 * [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.BatchRunTestCasesRequest
 */
export type BatchRunTestCasesRequest = Message<"google.cloud.dialogflow.cx.v3.BatchRunTestCasesRequest"> & {
  /**
   * Required. Agent name. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/ <AgentID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. If not set, draft environment is assumed. Format:
   * `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/environments/<Environment ID>`.
   *
   * @generated from field: string environment = 2;
   */
  environment: string;

  /**
   * Required. Format: `projects/<Project ID>/locations/<Location
   * ID>/agents/<Agent ID>/testCases/<TestCase ID>`.
   *
   * @generated from field: repeated string test_cases = 3;
   */
  testCases: string[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.BatchRunTestCasesRequest.
 * Use `create(BatchRunTestCasesRequestSchema)` to create a new message.
 */
export const BatchRunTestCasesRequestSchema: GenMessage<BatchRunTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 19);

/**
 * The response message for
 * [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse
 */
export type BatchRunTestCasesResponse = Message<"google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse"> & {
  /**
   * The test case results. The detailed
   * [conversation
   * turns][google.cloud.dialogflow.cx.v3.TestCaseResult.conversation_turns] are
   * empty in this response.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestCaseResult results = 1;
   */
  results: TestCaseResult[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse.
 * Use `create(BatchRunTestCasesResponseSchema)` to create a new message.
 */
export const BatchRunTestCasesResponseSchema: GenMessage<BatchRunTestCasesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 20);

/**
 * Metadata returned for the
 * [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases]
 * long running operation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata
 */
export type BatchRunTestCasesMetadata = Message<"google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata"> & {
  /**
   * The test errors.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestError errors = 1;
   */
  errors: TestError[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata.
 * Use `create(BatchRunTestCasesMetadataSchema)` to create a new message.
 */
export const BatchRunTestCasesMetadataSchema: GenMessage<BatchRunTestCasesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 21);

/**
 * Error info for running a test.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestError
 */
export type TestError = Message<"google.cloud.dialogflow.cx.v3.TestError"> & {
  /**
   * The test case resource name.
   *
   * @generated from field: string test_case = 1;
   */
  testCase: string;

  /**
   * The status associated with the test.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;

  /**
   * The timestamp when the test was completed.
   *
   * @generated from field: google.protobuf.Timestamp test_time = 3;
   */
  testTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestError.
 * Use `create(TestErrorSchema)` to create a new message.
 */
export const TestErrorSchema: GenMessage<TestError> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 22);

/**
 * The request message for
 * [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportTestCasesRequest
 */
export type ImportTestCasesRequest = Message<"google.cloud.dialogflow.cx.v3.ImportTestCasesRequest"> & {
  /**
   * Required. The agent to import test cases to.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The source to import.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ImportTestCasesRequest.source
   */
  source: {
    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
     * to import test cases from. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`.
     *
     * Dialogflow performs a read operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have read permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * @generated from field: string gcs_uri = 2;
     */
    value: string;
    case: "gcsUri";
  } | {
    /**
     * Uncompressed raw byte content for test cases.
     *
     * @generated from field: bytes content = 3;
     */
    value: Uint8Array;
    case: "content";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportTestCasesRequest.
 * Use `create(ImportTestCasesRequestSchema)` to create a new message.
 */
export const ImportTestCasesRequestSchema: GenMessage<ImportTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 23);

/**
 * The response message for
 * [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportTestCasesResponse
 */
export type ImportTestCasesResponse = Message<"google.cloud.dialogflow.cx.v3.ImportTestCasesResponse"> & {
  /**
   * The unique identifiers of the new test cases.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/testCases/<TestCase ID>`.
   *
   * @generated from field: repeated string names = 1;
   */
  names: string[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportTestCasesResponse.
 * Use `create(ImportTestCasesResponseSchema)` to create a new message.
 */
export const ImportTestCasesResponseSchema: GenMessage<ImportTestCasesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 24);

/**
 * Metadata returned for the
 * [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases]
 * long running operation.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata
 */
export type ImportTestCasesMetadata = Message<"google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata"> & {
  /**
   * Errors for failed test cases.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestCaseError errors = 1;
   */
  errors: TestCaseError[];
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata.
 * Use `create(ImportTestCasesMetadataSchema)` to create a new message.
 */
export const ImportTestCasesMetadataSchema: GenMessage<ImportTestCasesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 25);

/**
 * Error info for importing a test.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.TestCaseError
 */
export type TestCaseError = Message<"google.cloud.dialogflow.cx.v3.TestCaseError"> & {
  /**
   * The test case.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.TestCase test_case = 1;
   */
  testCase?: TestCase;

  /**
   * The status associated with the test case.
   *
   * @generated from field: google.rpc.Status status = 2;
   */
  status?: Status;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.TestCaseError.
 * Use `create(TestCaseErrorSchema)` to create a new message.
 */
export const TestCaseErrorSchema: GenMessage<TestCaseError> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 26);

/**
 * The request message for
 * [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportTestCasesRequest
 */
export type ExportTestCasesRequest = Message<"google.cloud.dialogflow.cx.v3.ExportTestCasesRequest"> & {
  /**
   * Required. The agent where to export test cases from.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The destination to export.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.destination
   */
  destination: {
    /**
     * The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
     * export the test cases to. The format of this URI must be
     * `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
     * cases is returned inline.
     *
     * Dialogflow performs a write operation for the Cloud Storage object
     * on the caller's behalf, so your request authentication must
     * have write permissions for the object. For more information, see
     * [Dialogflow access
     * control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
     *
     * @generated from field: string gcs_uri = 2;
     */
    value: string;
    case: "gcsUri";
  } | { case: undefined; value?: undefined };

  /**
   * The data format of the exported test cases. If not specified, `BLOB` is
   * assumed.
   *
   * @generated from field: google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat data_format = 3;
   */
  dataFormat: ExportTestCasesRequest_DataFormat;

  /**
   * The filter expression used to filter exported test cases, see
   * [API Filtering](https://aip.dev/160). The expression is case insensitive
   * and supports the following syntax:
   *
   *   name = <value> [OR name = <value>] ...
   *
   * For example:
   *
   * *   "name = t1 OR name = t2" matches the test case with the exact resource
   *     name "t1" or "t2".
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.
 * Use `create(ExportTestCasesRequestSchema)` to create a new message.
 */
export const ExportTestCasesRequestSchema: GenMessage<ExportTestCasesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 27);

/**
 * Data format of the exported test cases.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat
 */
export enum ExportTestCasesRequest_DataFormat {
  /**
   * Unspecified format.
   *
   * @generated from enum value: DATA_FORMAT_UNSPECIFIED = 0;
   */
  DATA_FORMAT_UNSPECIFIED = 0,

  /**
   * Raw bytes.
   *
   * @generated from enum value: BLOB = 1;
   */
  BLOB = 1,

  /**
   * JSON format.
   *
   * @generated from enum value: JSON = 2;
   */
  JSON = 2,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat.
 */
export const ExportTestCasesRequest_DataFormatSchema: GenEnum<ExportTestCasesRequest_DataFormat> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_test_case, 27, 0);

/**
 * The response message for
 * [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportTestCasesResponse
 */
export type ExportTestCasesResponse = Message<"google.cloud.dialogflow.cx.v3.ExportTestCasesResponse"> & {
  /**
   * The exported test cases.
   *
   * @generated from oneof google.cloud.dialogflow.cx.v3.ExportTestCasesResponse.destination
   */
  destination: {
    /**
     * The URI to a file containing the exported test cases. This field is
     * populated only if `gcs_uri` is specified in
     * [ExportTestCasesRequest][google.cloud.dialogflow.cx.v3.ExportTestCasesRequest].
     *
     * @generated from field: string gcs_uri = 1;
     */
    value: string;
    case: "gcsUri";
  } | {
    /**
     * Uncompressed raw byte content for test cases.
     *
     * @generated from field: bytes content = 2;
     */
    value: Uint8Array;
    case: "content";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportTestCasesResponse.
 * Use `create(ExportTestCasesResponseSchema)` to create a new message.
 */
export const ExportTestCasesResponseSchema: GenMessage<ExportTestCasesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 28);

/**
 * Metadata returned for the
 * [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases]
 * long running operation. This message currently has no fields.
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata
 */
export type ExportTestCasesMetadata = Message<"google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata"> & {
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata.
 * Use `create(ExportTestCasesMetadataSchema)` to create a new message.
 */
export const ExportTestCasesMetadataSchema: GenMessage<ExportTestCasesMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 29);

/**
 * The request message for
 * [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListTestCaseResultsRequest
 */
export type ListTestCaseResultsRequest = Message<"google.cloud.dialogflow.cx.v3.ListTestCaseResultsRequest"> & {
  /**
   * Required. The test case to list results for.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/
   * testCases/<TestCase ID>`. Specify a `-` as a wildcard for TestCase ID to
   * list results across multiple test cases.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of items to return in a single page. By default 100 and
   * at most 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous list request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The filter expression used to filter test case results. See
   * [API Filtering](https://aip.dev/160).
   *
   * The expression is case insensitive. Only 'AND' is supported for logical
   * operators. The supported syntax is listed below in detail:
   *
   *   <field> <operator> <value> [AND <field> <operator> <value>] ...
   *   [AND latest]
   *
   * The supported fields and operators are:
   * field                 operator
   * `environment`         `=`, `IN`  (Use value `draft` for draft environment)
   * `test_time`           `>`, `<`
   *
   * `latest` only returns the latest test result in all results for each test
   * case.
   *
   * Examples:
   * *   "environment=draft AND latest" matches the latest test result for each
   *     test case in the draft environment.
   * *   "environment IN (e1,e2)" matches any test case results with an
   *     environment resource name of either "e1" or "e2".
   * *   "test_time > 1602540713" matches any test case results with test time
   *     later than a unix timestamp in seconds 1602540713.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListTestCaseResultsRequest.
 * Use `create(ListTestCaseResultsRequestSchema)` to create a new message.
 */
export const ListTestCaseResultsRequestSchema: GenMessage<ListTestCaseResultsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 30);

/**
 * The response message for
 * [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.ListTestCaseResultsResponse
 */
export type ListTestCaseResultsResponse = Message<"google.cloud.dialogflow.cx.v3.ListTestCaseResultsResponse"> & {
  /**
   * The list of test case results.
   *
   * @generated from field: repeated google.cloud.dialogflow.cx.v3.TestCaseResult test_case_results = 1;
   */
  testCaseResults: TestCaseResult[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.ListTestCaseResultsResponse.
 * Use `create(ListTestCaseResultsResponseSchema)` to create a new message.
 */
export const ListTestCaseResultsResponseSchema: GenMessage<ListTestCaseResultsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 31);

/**
 * The request message for
 * [TestCases.GetTestCaseResult][google.cloud.dialogflow.cx.v3.TestCases.GetTestCaseResult].
 *
 * @generated from message google.cloud.dialogflow.cx.v3.GetTestCaseResultRequest
 */
export type GetTestCaseResultRequest = Message<"google.cloud.dialogflow.cx.v3.GetTestCaseResultRequest"> & {
  /**
   * Required. The name of the testcase.
   * Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
   * ID>/testCases/<TestCase ID>/results/<TestCaseResult ID>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dialogflow.cx.v3.GetTestCaseResultRequest.
 * Use `create(GetTestCaseResultRequestSchema)` to create a new message.
 */
export const GetTestCaseResultRequestSchema: GenMessage<GetTestCaseResultRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dialogflow_cx_v3_test_case, 32);

/**
 * The test result for a test case and an agent environment.
 *
 * @generated from enum google.cloud.dialogflow.cx.v3.TestResult
 */
export enum TestResult {
  /**
   * Not specified. Should never be used.
   *
   * @generated from enum value: TEST_RESULT_UNSPECIFIED = 0;
   */
  TEST_RESULT_UNSPECIFIED = 0,

  /**
   * The test passed.
   *
   * @generated from enum value: PASSED = 1;
   */
  PASSED = 1,

  /**
   * The test did not pass.
   *
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,
}

/**
 * Describes the enum google.cloud.dialogflow.cx.v3.TestResult.
 */
export const TestResultSchema: GenEnum<TestResult> = /*@__PURE__*/
  enumDesc(file_google_cloud_dialogflow_cx_v3_test_case, 0);

/**
 * Service for managing [Test Cases][google.cloud.dialogflow.cx.v3.TestCase] and
 * [Test Case Results][google.cloud.dialogflow.cx.v3.TestCaseResult].
 *
 * @generated from service google.cloud.dialogflow.cx.v3.TestCases
 */
export const TestCases: GenService<{
  /**
   * Fetches a list of test cases for a given agent.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.ListTestCases
   */
  listTestCases: {
    methodKind: "unary";
    input: typeof ListTestCasesRequestSchema;
    output: typeof ListTestCasesResponseSchema;
  },
  /**
   * Batch deletes test cases.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.BatchDeleteTestCases
   */
  batchDeleteTestCases: {
    methodKind: "unary";
    input: typeof BatchDeleteTestCasesRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets a test case.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.GetTestCase
   */
  getTestCase: {
    methodKind: "unary";
    input: typeof GetTestCaseRequestSchema;
    output: typeof TestCaseSchema;
  },
  /**
   * Creates a test case for the given agent.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase
   */
  createTestCase: {
    methodKind: "unary";
    input: typeof CreateTestCaseRequestSchema;
    output: typeof TestCaseSchema;
  },
  /**
   * Updates the specified test case.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.UpdateTestCase
   */
  updateTestCase: {
    methodKind: "unary";
    input: typeof UpdateTestCaseRequestSchema;
    output: typeof TestCaseSchema;
  },
  /**
   * Kicks off a test case run.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [RunTestCaseMetadata][google.cloud.dialogflow.cx.v3.RunTestCaseMetadata]
   * - `response`:
   * [RunTestCaseResponse][google.cloud.dialogflow.cx.v3.RunTestCaseResponse]
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.RunTestCase
   */
  runTestCase: {
    methodKind: "unary";
    input: typeof RunTestCaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Kicks off a batch run of test cases.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [BatchRunTestCasesMetadata][google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata]
   * - `response`:
   * [BatchRunTestCasesResponse][google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse]
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases
   */
  batchRunTestCases: {
    methodKind: "unary";
    input: typeof BatchRunTestCasesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Calculates the test coverage for an agent.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage
   */
  calculateCoverage: {
    methodKind: "unary";
    input: typeof CalculateCoverageRequestSchema;
    output: typeof CalculateCoverageResponseSchema;
  },
  /**
   * Imports the test cases from a Cloud Storage bucket or a local file. It
   * always creates new test cases and won't overwrite any existing ones. The
   * provided ID in the imported test case is neglected.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [ImportTestCasesMetadata][google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata]
   * - `response`:
   * [ImportTestCasesResponse][google.cloud.dialogflow.cx.v3.ImportTestCasesResponse]
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases
   */
  importTestCases: {
    methodKind: "unary";
    input: typeof ImportTestCasesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Exports the test cases under the agent to a Cloud Storage bucket or a local
   * file. Filter can be applied to export a subset of test cases.
   *
   * This method is a [long-running
   * operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
   * The returned `Operation` type has the following method-specific fields:
   *
   * - `metadata`:
   * [ExportTestCasesMetadata][google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata]
   * - `response`:
   * [ExportTestCasesResponse][google.cloud.dialogflow.cx.v3.ExportTestCasesResponse]
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases
   */
  exportTestCases: {
    methodKind: "unary";
    input: typeof ExportTestCasesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Fetches the list of run results for the given test case. A maximum of 100
   * results are kept for each test case.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults
   */
  listTestCaseResults: {
    methodKind: "unary";
    input: typeof ListTestCaseResultsRequestSchema;
    output: typeof ListTestCaseResultsResponseSchema;
  },
  /**
   * Gets a test case result.
   *
   * @generated from rpc google.cloud.dialogflow.cx.v3.TestCases.GetTestCaseResult
   */
  getTestCaseResult: {
    methodKind: "unary";
    input: typeof GetTestCaseResultRequestSchema;
    output: typeof TestCaseResultSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dialogflow_cx_v3_test_case, 0);

