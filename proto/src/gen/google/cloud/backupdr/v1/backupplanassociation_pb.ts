// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/backupdr/v1/backupplanassociation.proto (package google.cloud.backupdr.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../api/field_info_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/backupdr/v1/backupplanassociation.proto.
 */
export const file_google_cloud_backupdr_v1_backupplanassociation: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvY2xvdWQvYmFja3VwZHIvdjEvYmFja3VwcGxhbmFzc29jaWF0aW9uLnByb3RvEhhnb29nbGUuY2xvdWQuYmFja3VwZHIudjEi1AUKFUJhY2t1cFBsYW5Bc3NvY2lhdGlvbhIUCgRuYW1lGAEgASgJQgbgQQjgQQMSGgoNcmVzb3VyY2VfdHlwZRgCIAEoCUID4EEBEhgKCHJlc291cmNlGAMgASgJQgbgQQXgQQISPwoLYmFja3VwX3BsYW4YBCABKAlCKuBBAvpBJAoiYmFja3VwZHIuZ29vZ2xlYXBpcy5jb20vQmFja3VwUGxhbhI0CgtjcmVhdGVfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxJJCgVzdGF0ZRgHIAEoDjI1Lmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5CYWNrdXBQbGFuQXNzb2NpYXRpb24uU3RhdGVCA+BBAxJIChFydWxlc19jb25maWdfaW5mbxgIIAMoCzIoLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5SdWxlQ29uZmlnSW5mb0ID4EEDEhgKC2RhdGFfc291cmNlGAkgASgJQgPgQQMiVAoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIMCghDUkVBVElORxABEgoKBkFDVElWRRACEgwKCERFTEVUSU5HEAMSDAoISU5BQ1RJVkUQBDq8AepBuAEKLWJhY2t1cGRyLmdvb2dsZWFwaXMuY29tL0JhY2t1cFBsYW5Bc3NvY2lhdGlvbhJYcHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L2JhY2t1cFBsYW5Bc3NvY2lhdGlvbnMve2JhY2t1cF9wbGFuX2Fzc29jaWF0aW9ufSoWYmFja3VwUGxhbkFzc29jaWF0aW9uczIVYmFja3VwUGxhbkFzc29jaWF0aW9uIokDCg5SdWxlQ29uZmlnSW5mbxIUCgdydWxlX2lkGAEgASgJQgPgQQMSWAoRbGFzdF9iYWNrdXBfc3RhdGUYAyABKA4yOC5nb29nbGUuY2xvdWQuYmFja3VwZHIudjEuUnVsZUNvbmZpZ0luZm8uTGFzdEJhY2t1cFN0YXRlQgPgQQMSMgoRbGFzdF9iYWNrdXBfZXJyb3IYBCABKAsyEi5nb29nbGUucnBjLlN0YXR1c0ID4EEDElAKJ2xhc3Rfc3VjY2Vzc2Z1bF9iYWNrdXBfY29uc2lzdGVuY3lfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAyKAAQoPTGFzdEJhY2t1cFN0YXRlEiEKHUxBU1RfQkFDS1VQX1NUQVRFX1VOU1BFQ0lGSUVEEAASGAoURklSU1RfQkFDS1VQX1BFTkRJTkcQARIVChFQRVJNSVNTSU9OX0RFTklFRBACEg0KCVNVQ0NFRURFRBADEgoKBkZBSUxFRBAEIowCCiJDcmVhdGVCYWNrdXBQbGFuQXNzb2NpYXRpb25SZXF1ZXN0EkUKBnBhcmVudBgBIAEoCUI14EEC+kEvEi1iYWNrdXBkci5nb29nbGVhcGlzLmNvbS9CYWNrdXBQbGFuQXNzb2NpYXRpb24SJwoaYmFja3VwX3BsYW5fYXNzb2NpYXRpb25faWQYAiABKAlCA+BBAhJVChdiYWNrdXBfcGxhbl9hc3NvY2lhdGlvbhgDIAEoCzIvLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5CYWNrdXBQbGFuQXNzb2NpYXRpb25CA+BBAhIfCgpyZXF1ZXN0X2lkGAQgASgJQgvgQQHijM/XCAIIASKwAQohTGlzdEJhY2t1cFBsYW5Bc3NvY2lhdGlvbnNSZXF1ZXN0EkUKBnBhcmVudBgBIAEoCUI14EEC+kEvEi1iYWNrdXBkci5nb29nbGVhcGlzLmNvbS9CYWNrdXBQbGFuQXNzb2NpYXRpb24SFgoJcGFnZV9zaXplGAIgASgFQgPgQQESFwoKcGFnZV90b2tlbhgDIAEoCUID4EEBEhMKBmZpbHRlchgEIAEoCUID4EEBIqUBCiJMaXN0QmFja3VwUGxhbkFzc29jaWF0aW9uc1Jlc3BvbnNlElEKGGJhY2t1cF9wbGFuX2Fzc29jaWF0aW9ucxgBIAMoCzIvLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MS5CYWNrdXBQbGFuQXNzb2NpYXRpb24SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJEhMKC3VucmVhY2hhYmxlGAMgAygJImYKH0dldEJhY2t1cFBsYW5Bc3NvY2lhdGlvblJlcXVlc3QSQwoEbmFtZRgBIAEoCUI14EEC+kEvCi1iYWNrdXBkci5nb29nbGVhcGlzLmNvbS9CYWNrdXBQbGFuQXNzb2NpYXRpb24iigEKIkRlbGV0ZUJhY2t1cFBsYW5Bc3NvY2lhdGlvblJlcXVlc3QSQwoEbmFtZRgBIAEoCUI14EEC+kEvCi1iYWNrdXBkci5nb29nbGVhcGlzLmNvbS9CYWNrdXBQbGFuQXNzb2NpYXRpb24SHwoKcmVxdWVzdF9pZBgCIAEoCUIL4EEB4ozP1wgCCAEikgEKFFRyaWdnZXJCYWNrdXBSZXF1ZXN0EkMKBG5hbWUYASABKAlCNeBBAvpBLwotYmFja3VwZHIuZ29vZ2xlYXBpcy5jb20vQmFja3VwUGxhbkFzc29jaWF0aW9uEhQKB3J1bGVfaWQYAiABKAlCA+BBAhIfCgpyZXF1ZXN0X2lkGAMgASgJQgvgQQHijM/XCAIIAULKAQocY29tLmdvb2dsZS5jbG91ZC5iYWNrdXBkci52MUIaQmFja3VwUGxhbkFzc29jaWF0aW9uUHJvdG9QAVo4Y2xvdWQuZ29vZ2xlLmNvbS9nby9iYWNrdXBkci9hcGl2MS9iYWNrdXBkcnBiO2JhY2t1cGRycGKqAhhHb29nbGUuQ2xvdWQuQmFja3VwRFIuVjHKAhhHb29nbGVcQ2xvdWRcQmFja3VwRFJcVjHqAhtHb29nbGU6OkNsb3VkOjpCYWNrdXBEUjo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * A BackupPlanAssociation represents a single BackupPlanAssociation which
 * contains details like workload, backup plan etc
 *
 * @generated from message google.cloud.backupdr.v1.BackupPlanAssociation
 */
export type BackupPlanAssociation = Message<"google.cloud.backupdr.v1.BackupPlanAssociation"> & {
  /**
   * Output only. Identifier. The resource name of BackupPlanAssociation in
   * below format Format :
   * projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Resource type of workload on which backupplan is applied
   *
   * @generated from field: string resource_type = 2;
   */
  resourceType: string;

  /**
   * Required. Immutable. Resource name of workload on which backupplan is
   * applied
   *
   * @generated from field: string resource = 3;
   */
  resource: string;

  /**
   * Required. Resource name of backup plan which needs to be applied on
   * workload. Format:
   * projects/{project}/locations/{location}/backupPlans/{backupPlanId}
   *
   * @generated from field: string backup_plan = 4;
   */
  backupPlan: string;

  /**
   * Output only. The time when the instance was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time when the instance was updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The BackupPlanAssociation resource state.
   *
   * @generated from field: google.cloud.backupdr.v1.BackupPlanAssociation.State state = 7;
   */
  state: BackupPlanAssociation_State;

  /**
   * Output only. The config info related to backup rules.
   *
   * @generated from field: repeated google.cloud.backupdr.v1.RuleConfigInfo rules_config_info = 8;
   */
  rulesConfigInfo: RuleConfigInfo[];

  /**
   * Output only. Output Only.
   *
   * Resource name of data source which will be used as storage location for
   * backups taken.
   * Format :
   * projects/{project}/locations/{location}/backupVaults/{backupvault}/dataSources/{datasource}
   *
   * @generated from field: string data_source = 9;
   */
  dataSource: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.BackupPlanAssociation.
 * Use `create(BackupPlanAssociationSchema)` to create a new message.
 */
export const BackupPlanAssociationSchema: GenMessage<BackupPlanAssociation> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 0);

/**
 * Enum for State of BackupPlan Association
 *
 * @generated from enum google.cloud.backupdr.v1.BackupPlanAssociation.State
 */
export enum BackupPlanAssociation_State {
  /**
   * State not set.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The resource is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The resource has been created and is fully usable.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The resource is being deleted.
   *
   * @generated from enum value: DELETING = 3;
   */
  DELETING = 3,

  /**
   * The resource has been created but is not usable.
   *
   * @generated from enum value: INACTIVE = 4;
   */
  INACTIVE = 4,
}

/**
 * Describes the enum google.cloud.backupdr.v1.BackupPlanAssociation.State.
 */
export const BackupPlanAssociation_StateSchema: GenEnum<BackupPlanAssociation_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_backupdr_v1_backupplanassociation, 0, 0);

/**
 * Message for rules config info.
 *
 * @generated from message google.cloud.backupdr.v1.RuleConfigInfo
 */
export type RuleConfigInfo = Message<"google.cloud.backupdr.v1.RuleConfigInfo"> & {
  /**
   * Output only. Output Only.
   *
   * Backup Rule id fetched from backup plan.
   *
   * @generated from field: string rule_id = 1;
   */
  ruleId: string;

  /**
   * Output only. The last backup state for rule.
   *
   * @generated from field: google.cloud.backupdr.v1.RuleConfigInfo.LastBackupState last_backup_state = 3;
   */
  lastBackupState: RuleConfigInfo_LastBackupState;

  /**
   * Output only. Output Only.
   *
   * google.rpc.Status object to store the last backup error.
   *
   * @generated from field: google.rpc.Status last_backup_error = 4;
   */
  lastBackupError?: Status;

  /**
   * Output only. The point in time when the last successful backup was captured
   * from the source.
   *
   * @generated from field: google.protobuf.Timestamp last_successful_backup_consistency_time = 5;
   */
  lastSuccessfulBackupConsistencyTime?: Timestamp;
};

/**
 * Describes the message google.cloud.backupdr.v1.RuleConfigInfo.
 * Use `create(RuleConfigInfoSchema)` to create a new message.
 */
export const RuleConfigInfoSchema: GenMessage<RuleConfigInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 1);

/**
 * Enum for LastBackupState
 *
 * @generated from enum google.cloud.backupdr.v1.RuleConfigInfo.LastBackupState
 */
export enum RuleConfigInfo_LastBackupState {
  /**
   * State not set.
   *
   * @generated from enum value: LAST_BACKUP_STATE_UNSPECIFIED = 0;
   */
  LAST_BACKUP_STATE_UNSPECIFIED = 0,

  /**
   * The first backup is pending.
   *
   * @generated from enum value: FIRST_BACKUP_PENDING = 1;
   */
  FIRST_BACKUP_PENDING = 1,

  /**
   * The most recent backup could not be run/failed because of the lack of
   * permissions.
   *
   * @generated from enum value: PERMISSION_DENIED = 2;
   */
  PERMISSION_DENIED = 2,

  /**
   * The last backup operation succeeded.
   *
   * @generated from enum value: SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * The last backup operation failed.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,
}

/**
 * Describes the enum google.cloud.backupdr.v1.RuleConfigInfo.LastBackupState.
 */
export const RuleConfigInfo_LastBackupStateSchema: GenEnum<RuleConfigInfo_LastBackupState> = /*@__PURE__*/
  enumDesc(file_google_cloud_backupdr_v1_backupplanassociation, 1, 0);

/**
 * Request message for creating a backup plan.
 *
 * @generated from message google.cloud.backupdr.v1.CreateBackupPlanAssociationRequest
 */
export type CreateBackupPlanAssociationRequest = Message<"google.cloud.backupdr.v1.CreateBackupPlanAssociationRequest"> & {
  /**
   * Required. The backup plan association project and location in the format
   * `projects/{project_id}/locations/{location}`. In Cloud BackupDR locations
   * map to GCP regions, for example **us-central1**.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The name of the backup plan association to create. The name must
   * be unique for the specified project and location.
   *
   * @generated from field: string backup_plan_association_id = 2;
   */
  backupPlanAssociationId: string;

  /**
   * Required. The resource being created
   *
   * @generated from field: google.cloud.backupdr.v1.BackupPlanAssociation backup_plan_association = 3;
   */
  backupPlanAssociation?: BackupPlanAssociation;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and t
   * he request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.CreateBackupPlanAssociationRequest.
 * Use `create(CreateBackupPlanAssociationRequestSchema)` to create a new message.
 */
export const CreateBackupPlanAssociationRequestSchema: GenMessage<CreateBackupPlanAssociationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 2);

/**
 * Request message for List BackupPlanAssociation
 *
 * @generated from message google.cloud.backupdr.v1.ListBackupPlanAssociationsRequest
 */
export type ListBackupPlanAssociationsRequest = Message<"google.cloud.backupdr.v1.ListBackupPlanAssociationsRequest"> & {
  /**
   * Required. The project and location for which to retrieve backup Plan
   * Associations information, in the format
   * `projects/{project_id}/locations/{location}`. In Cloud BackupDR, locations
   * map to GCP regions, for example **us-central1**. To retrieve backup plan
   * associations for all locations, use "-" for the
   * `{location}` value.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.ListBackupPlanAssociationsRequest.
 * Use `create(ListBackupPlanAssociationsRequestSchema)` to create a new message.
 */
export const ListBackupPlanAssociationsRequestSchema: GenMessage<ListBackupPlanAssociationsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 3);

/**
 * Response message for List BackupPlanAssociation
 *
 * @generated from message google.cloud.backupdr.v1.ListBackupPlanAssociationsResponse
 */
export type ListBackupPlanAssociationsResponse = Message<"google.cloud.backupdr.v1.ListBackupPlanAssociationsResponse"> & {
  /**
   * The list of Backup Plan Associations in the project for the specified
   * location.
   *
   * If the `{location}` value in the request is "-", the response contains a
   * list of instances from all locations. In case any location is unreachable,
   * the response will only return backup plan associations in reachable
   * locations and the 'unreachable' field will be populated with a list of
   * unreachable locations.
   *
   * @generated from field: repeated google.cloud.backupdr.v1.BackupPlanAssociation backup_plan_associations = 1;
   */
  backupPlanAssociations: BackupPlanAssociation[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.backupdr.v1.ListBackupPlanAssociationsResponse.
 * Use `create(ListBackupPlanAssociationsResponseSchema)` to create a new message.
 */
export const ListBackupPlanAssociationsResponseSchema: GenMessage<ListBackupPlanAssociationsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 4);

/**
 * Request message for getting a BackupPlanAssociation resource.
 *
 * @generated from message google.cloud.backupdr.v1.GetBackupPlanAssociationRequest
 */
export type GetBackupPlanAssociationRequest = Message<"google.cloud.backupdr.v1.GetBackupPlanAssociationRequest"> & {
  /**
   * Required. Name of the backup plan association resource, in the format
   * `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.GetBackupPlanAssociationRequest.
 * Use `create(GetBackupPlanAssociationRequestSchema)` to create a new message.
 */
export const GetBackupPlanAssociationRequestSchema: GenMessage<GetBackupPlanAssociationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 5);

/**
 * Request message for deleting a backup plan association.
 *
 * @generated from message google.cloud.backupdr.v1.DeleteBackupPlanAssociationRequest
 */
export type DeleteBackupPlanAssociationRequest = Message<"google.cloud.backupdr.v1.DeleteBackupPlanAssociationRequest"> & {
  /**
   * Required. Name of the backup plan association resource, in the format
   * `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.DeleteBackupPlanAssociationRequest.
 * Use `create(DeleteBackupPlanAssociationRequestSchema)` to create a new message.
 */
export const DeleteBackupPlanAssociationRequestSchema: GenMessage<DeleteBackupPlanAssociationRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 6);

/**
 * Request message for triggering a backup.
 *
 * @generated from message google.cloud.backupdr.v1.TriggerBackupRequest
 */
export type TriggerBackupRequest = Message<"google.cloud.backupdr.v1.TriggerBackupRequest"> & {
  /**
   * Required. Name of the backup plan association resource, in the format
   * `projects/{project}/locations/{location}/backupPlanAssociations/{backupPlanAssociationId}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. backup rule_id for which a backup needs to be triggered.
   *
   * @generated from field: string rule_id = 2;
   */
  ruleId: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and
   * the request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.backupdr.v1.TriggerBackupRequest.
 * Use `create(TriggerBackupRequestSchema)` to create a new message.
 */
export const TriggerBackupRequestSchema: GenMessage<TriggerBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_backupdr_v1_backupplanassociation, 7);

