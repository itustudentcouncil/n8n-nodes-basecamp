// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/eventarc/v1/eventarc.proto (package google.cloud.eventarc.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Channel, ChannelSchema } from "./channel_pb";
import { file_google_cloud_eventarc_v1_channel } from "./channel_pb";
import type { ChannelConnection, ChannelConnectionSchema } from "./channel_connection_pb";
import { file_google_cloud_eventarc_v1_channel_connection } from "./channel_connection_pb";
import type { Provider, ProviderSchema } from "./discovery_pb";
import { file_google_cloud_eventarc_v1_discovery } from "./discovery_pb";
import type { GoogleChannelConfig, GoogleChannelConfigSchema } from "./google_channel_config_pb";
import { file_google_cloud_eventarc_v1_google_channel_config } from "./google_channel_config_pb";
import type { Trigger, TriggerSchema } from "./trigger_pb";
import { file_google_cloud_eventarc_v1_trigger } from "./trigger_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/eventarc/v1/eventarc.proto.
 */
export const file_google_cloud_eventarc_v1_eventarc: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_eventarc_v1_channel, file_google_cloud_eventarc_v1_channel_connection, file_google_cloud_eventarc_v1_discovery, file_google_cloud_eventarc_v1_google_channel_config, file_google_cloud_eventarc_v1_trigger, file_google_longrunning_operations, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * The request message for the GetTrigger method.
 *
 * @generated from message google.cloud.eventarc.v1.GetTriggerRequest
 */
export type GetTriggerRequest = Message<"google.cloud.eventarc.v1.GetTriggerRequest"> & {
  /**
   * Required. The name of the trigger to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GetTriggerRequest.
 * Use `create(GetTriggerRequestSchema)` to create a new message.
 */
export const GetTriggerRequestSchema: GenMessage<GetTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 0);

/**
 * The request message for the ListTriggers method.
 *
 * @generated from message google.cloud.eventarc.v1.ListTriggersRequest
 */
export type ListTriggersRequest = Message<"google.cloud.eventarc.v1.ListTriggersRequest"> & {
  /**
   * Required. The parent collection to list triggers on.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of triggers to return on each page.
   *
   * Note: The service may send fewer.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListTriggers` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListTriggers` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting order is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, trigger_id`.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Filter field. Used to filter the Triggers to be listed. Possible filters
   * are described in https://google.aip.dev/160. For example, using
   * "?filter=destination:gke" would list only Triggers with a gke destination.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.ListTriggersRequest.
 * Use `create(ListTriggersRequestSchema)` to create a new message.
 */
export const ListTriggersRequestSchema: GenMessage<ListTriggersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 1);

/**
 * The response message for the `ListTriggers` method.
 *
 * @generated from message google.cloud.eventarc.v1.ListTriggersResponse
 */
export type ListTriggersResponse = Message<"google.cloud.eventarc.v1.ListTriggersResponse"> & {
  /**
   * The requested triggers, up to the number specified in `page_size`.
   *
   * @generated from field: repeated google.cloud.eventarc.v1.Trigger triggers = 1;
   */
  triggers: Trigger[];

  /**
   * A page token that can be sent to `ListTriggers` to request the next page.
   * If this is empty, then there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Unreachable resources, if any.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.eventarc.v1.ListTriggersResponse.
 * Use `create(ListTriggersResponseSchema)` to create a new message.
 */
export const ListTriggersResponseSchema: GenMessage<ListTriggersResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 2);

/**
 * The request message for the CreateTrigger method.
 *
 * @generated from message google.cloud.eventarc.v1.CreateTriggerRequest
 */
export type CreateTriggerRequest = Message<"google.cloud.eventarc.v1.CreateTriggerRequest"> & {
  /**
   * Required. The parent collection in which to add this trigger.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The trigger to create.
   *
   * @generated from field: google.cloud.eventarc.v1.Trigger trigger = 2;
   */
  trigger?: Trigger;

  /**
   * Required. The user-provided ID to be assigned to the trigger.
   *
   * @generated from field: string trigger_id = 3;
   */
  triggerId: string;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.CreateTriggerRequest.
 * Use `create(CreateTriggerRequestSchema)` to create a new message.
 */
export const CreateTriggerRequestSchema: GenMessage<CreateTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 3);

/**
 * The request message for the UpdateTrigger method.
 *
 * @generated from message google.cloud.eventarc.v1.UpdateTriggerRequest
 */
export type UpdateTriggerRequest = Message<"google.cloud.eventarc.v1.UpdateTriggerRequest"> & {
  /**
   * The trigger to be updated.
   *
   * @generated from field: google.cloud.eventarc.v1.Trigger trigger = 1;
   */
  trigger?: Trigger;

  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * If set to true, and the trigger is not found, a new trigger will be
   * created. In this situation, `update_mask` is ignored.
   *
   * @generated from field: bool allow_missing = 3;
   */
  allowMissing: boolean;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.UpdateTriggerRequest.
 * Use `create(UpdateTriggerRequestSchema)` to create a new message.
 */
export const UpdateTriggerRequestSchema: GenMessage<UpdateTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 4);

/**
 * The request message for the DeleteTrigger method.
 *
 * @generated from message google.cloud.eventarc.v1.DeleteTriggerRequest
 */
export type DeleteTriggerRequest = Message<"google.cloud.eventarc.v1.DeleteTriggerRequest"> & {
  /**
   * Required. The name of the trigger to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * If provided, the trigger will only be deleted if the etag matches the
   * current etag on the resource.
   *
   * @generated from field: string etag = 2;
   */
  etag: string;

  /**
   * If set to true, and the trigger is not found, the request will succeed
   * but no action will be taken on the server.
   *
   * @generated from field: bool allow_missing = 3;
   */
  allowMissing: boolean;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.DeleteTriggerRequest.
 * Use `create(DeleteTriggerRequestSchema)` to create a new message.
 */
export const DeleteTriggerRequestSchema: GenMessage<DeleteTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 5);

/**
 * The request message for the GetChannel method.
 *
 * @generated from message google.cloud.eventarc.v1.GetChannelRequest
 */
export type GetChannelRequest = Message<"google.cloud.eventarc.v1.GetChannelRequest"> & {
  /**
   * Required. The name of the channel to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GetChannelRequest.
 * Use `create(GetChannelRequestSchema)` to create a new message.
 */
export const GetChannelRequestSchema: GenMessage<GetChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 6);

/**
 * The request message for the ListChannels method.
 *
 * @generated from message google.cloud.eventarc.v1.ListChannelsRequest
 */
export type ListChannelsRequest = Message<"google.cloud.eventarc.v1.ListChannelsRequest"> & {
  /**
   * Required. The parent collection to list channels on.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of channels to return on each page.
   *
   * Note: The service may send fewer.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListChannels` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListChannels` must
   * match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting order is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, channel_id`.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.ListChannelsRequest.
 * Use `create(ListChannelsRequestSchema)` to create a new message.
 */
export const ListChannelsRequestSchema: GenMessage<ListChannelsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 7);

/**
 * The response message for the `ListChannels` method.
 *
 * @generated from message google.cloud.eventarc.v1.ListChannelsResponse
 */
export type ListChannelsResponse = Message<"google.cloud.eventarc.v1.ListChannelsResponse"> & {
  /**
   * The requested channels, up to the number specified in `page_size`.
   *
   * @generated from field: repeated google.cloud.eventarc.v1.Channel channels = 1;
   */
  channels: Channel[];

  /**
   * A page token that can be sent to `ListChannels` to request the next page.
   * If this is empty, then there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Unreachable resources, if any.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.eventarc.v1.ListChannelsResponse.
 * Use `create(ListChannelsResponseSchema)` to create a new message.
 */
export const ListChannelsResponseSchema: GenMessage<ListChannelsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 8);

/**
 * The request message for the CreateChannel method.
 *
 * @generated from message google.cloud.eventarc.v1.CreateChannelRequest
 */
export type CreateChannelRequest = Message<"google.cloud.eventarc.v1.CreateChannelRequest"> & {
  /**
   * Required. The parent collection in which to add this channel.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The channel to create.
   *
   * @generated from field: google.cloud.eventarc.v1.Channel channel = 2;
   */
  channel?: Channel;

  /**
   * Required. The user-provided ID to be assigned to the channel.
   *
   * @generated from field: string channel_id = 3;
   */
  channelId: string;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.CreateChannelRequest.
 * Use `create(CreateChannelRequestSchema)` to create a new message.
 */
export const CreateChannelRequestSchema: GenMessage<CreateChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 9);

/**
 * The request message for the UpdateChannel method.
 *
 * @generated from message google.cloud.eventarc.v1.UpdateChannelRequest
 */
export type UpdateChannelRequest = Message<"google.cloud.eventarc.v1.UpdateChannelRequest"> & {
  /**
   * The channel to be updated.
   *
   * @generated from field: google.cloud.eventarc.v1.Channel channel = 1;
   */
  channel?: Channel;

  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.UpdateChannelRequest.
 * Use `create(UpdateChannelRequestSchema)` to create a new message.
 */
export const UpdateChannelRequestSchema: GenMessage<UpdateChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 10);

/**
 * The request message for the DeleteChannel method.
 *
 * @generated from message google.cloud.eventarc.v1.DeleteChannelRequest
 */
export type DeleteChannelRequest = Message<"google.cloud.eventarc.v1.DeleteChannelRequest"> & {
  /**
   * Required. The name of the channel to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. If set, validate the request and preview the review, but do not
   * post it.
   *
   * @generated from field: bool validate_only = 2;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.eventarc.v1.DeleteChannelRequest.
 * Use `create(DeleteChannelRequestSchema)` to create a new message.
 */
export const DeleteChannelRequestSchema: GenMessage<DeleteChannelRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 11);

/**
 * The request message for the GetProvider method.
 *
 * @generated from message google.cloud.eventarc.v1.GetProviderRequest
 */
export type GetProviderRequest = Message<"google.cloud.eventarc.v1.GetProviderRequest"> & {
  /**
   * Required. The name of the provider to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GetProviderRequest.
 * Use `create(GetProviderRequestSchema)` to create a new message.
 */
export const GetProviderRequestSchema: GenMessage<GetProviderRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 12);

/**
 * The request message for the ListProviders method.
 *
 * @generated from message google.cloud.eventarc.v1.ListProvidersRequest
 */
export type ListProvidersRequest = Message<"google.cloud.eventarc.v1.ListProvidersRequest"> & {
  /**
   * Required. The parent of the provider to get.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of providers to return on each page.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListProviders` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListProviders` must
   * match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The sorting order of the resources returned. Value should be a
   * comma-separated list of fields. The default sorting oder is ascending. To
   * specify descending order for a field, append a `desc` suffix; for example:
   * `name desc, _id`.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * The filter field that the list request will filter on.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.ListProvidersRequest.
 * Use `create(ListProvidersRequestSchema)` to create a new message.
 */
export const ListProvidersRequestSchema: GenMessage<ListProvidersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 13);

/**
 * The response message for the `ListProviders` method.
 *
 * @generated from message google.cloud.eventarc.v1.ListProvidersResponse
 */
export type ListProvidersResponse = Message<"google.cloud.eventarc.v1.ListProvidersResponse"> & {
  /**
   * The requested providers, up to the number specified in `page_size`.
   *
   * @generated from field: repeated google.cloud.eventarc.v1.Provider providers = 1;
   */
  providers: Provider[];

  /**
   * A page token that can be sent to `ListProviders` to request the next page.
   * If this is empty, then there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Unreachable resources, if any.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.eventarc.v1.ListProvidersResponse.
 * Use `create(ListProvidersResponseSchema)` to create a new message.
 */
export const ListProvidersResponseSchema: GenMessage<ListProvidersResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 14);

/**
 * The request message for the GetChannelConnection method.
 *
 * @generated from message google.cloud.eventarc.v1.GetChannelConnectionRequest
 */
export type GetChannelConnectionRequest = Message<"google.cloud.eventarc.v1.GetChannelConnectionRequest"> & {
  /**
   * Required. The name of the channel connection to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GetChannelConnectionRequest.
 * Use `create(GetChannelConnectionRequestSchema)` to create a new message.
 */
export const GetChannelConnectionRequestSchema: GenMessage<GetChannelConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 15);

/**
 * The request message for the ListChannelConnections method.
 *
 * @generated from message google.cloud.eventarc.v1.ListChannelConnectionsRequest
 */
export type ListChannelConnectionsRequest = Message<"google.cloud.eventarc.v1.ListChannelConnectionsRequest"> & {
  /**
   * Required. The parent collection from which to list channel connections.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of channel connections to return on each page.
   *
   * Note: The service may send fewer responses.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The page token; provide the value from the `next_page_token` field in a
   * previous `ListChannelConnections` call to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListChannelConnetions`
   * match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.ListChannelConnectionsRequest.
 * Use `create(ListChannelConnectionsRequestSchema)` to create a new message.
 */
export const ListChannelConnectionsRequestSchema: GenMessage<ListChannelConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 16);

/**
 * The response message for the `ListChannelConnections` method.
 *
 * @generated from message google.cloud.eventarc.v1.ListChannelConnectionsResponse
 */
export type ListChannelConnectionsResponse = Message<"google.cloud.eventarc.v1.ListChannelConnectionsResponse"> & {
  /**
   * The requested channel connections, up to the number specified in
   * `page_size`.
   *
   * @generated from field: repeated google.cloud.eventarc.v1.ChannelConnection channel_connections = 1;
   */
  channelConnections: ChannelConnection[];

  /**
   * A page token that can be sent to `ListChannelConnections` to request the
   * next page.
   * If this is empty, then there are no more pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Unreachable resources, if any.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.eventarc.v1.ListChannelConnectionsResponse.
 * Use `create(ListChannelConnectionsResponseSchema)` to create a new message.
 */
export const ListChannelConnectionsResponseSchema: GenMessage<ListChannelConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 17);

/**
 * The request message for the CreateChannelConnection method.
 *
 * @generated from message google.cloud.eventarc.v1.CreateChannelConnectionRequest
 */
export type CreateChannelConnectionRequest = Message<"google.cloud.eventarc.v1.CreateChannelConnectionRequest"> & {
  /**
   * Required. The parent collection in which to add this channel connection.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Channel connection to create.
   *
   * @generated from field: google.cloud.eventarc.v1.ChannelConnection channel_connection = 2;
   */
  channelConnection?: ChannelConnection;

  /**
   * Required. The user-provided ID to be assigned to the channel connection.
   *
   * @generated from field: string channel_connection_id = 3;
   */
  channelConnectionId: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.CreateChannelConnectionRequest.
 * Use `create(CreateChannelConnectionRequestSchema)` to create a new message.
 */
export const CreateChannelConnectionRequestSchema: GenMessage<CreateChannelConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 18);

/**
 * The request message for the DeleteChannelConnection method.
 *
 * @generated from message google.cloud.eventarc.v1.DeleteChannelConnectionRequest
 */
export type DeleteChannelConnectionRequest = Message<"google.cloud.eventarc.v1.DeleteChannelConnectionRequest"> & {
  /**
   * Required. The name of the channel connection to delete.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.DeleteChannelConnectionRequest.
 * Use `create(DeleteChannelConnectionRequestSchema)` to create a new message.
 */
export const DeleteChannelConnectionRequestSchema: GenMessage<DeleteChannelConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 19);

/**
 * The request message for the UpdateGoogleChannelConfig method.
 *
 * @generated from message google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest
 */
export type UpdateGoogleChannelConfigRequest = Message<"google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest"> & {
  /**
   * Required. The config to be updated.
   *
   * @generated from field: google.cloud.eventarc.v1.GoogleChannelConfig google_channel_config = 1;
   */
  googleChannelConfig?: GoogleChannelConfig;

  /**
   * The fields to be updated; only fields explicitly provided are updated.
   * If no field mask is provided, all provided fields in the request are
   * updated. To update all fields, provide a field mask of "*".
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.eventarc.v1.UpdateGoogleChannelConfigRequest.
 * Use `create(UpdateGoogleChannelConfigRequestSchema)` to create a new message.
 */
export const UpdateGoogleChannelConfigRequestSchema: GenMessage<UpdateGoogleChannelConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 20);

/**
 * The request message for the GetGoogleChannelConfig method.
 *
 * @generated from message google.cloud.eventarc.v1.GetGoogleChannelConfigRequest
 */
export type GetGoogleChannelConfigRequest = Message<"google.cloud.eventarc.v1.GetGoogleChannelConfigRequest"> & {
  /**
   * Required. The name of the config to get.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GetGoogleChannelConfigRequest.
 * Use `create(GetGoogleChannelConfigRequestSchema)` to create a new message.
 */
export const GetGoogleChannelConfigRequestSchema: GenMessage<GetGoogleChannelConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 21);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.eventarc.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.eventarc.v1.OperationMetadata"> & {
  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have successfully been cancelled
   * have [Operation.error][] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_eventarc, 22);

/**
 * Eventarc allows users to subscribe to various events that are provided by
 * Google Cloud services and forward them to supported destinations.
 *
 * @generated from service google.cloud.eventarc.v1.Eventarc
 */
export const Eventarc: GenService<{
  /**
   * Get a single trigger.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.GetTrigger
   */
  getTrigger: {
    methodKind: "unary";
    input: typeof GetTriggerRequestSchema;
    output: typeof TriggerSchema;
  },
  /**
   * List triggers.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.ListTriggers
   */
  listTriggers: {
    methodKind: "unary";
    input: typeof ListTriggersRequestSchema;
    output: typeof ListTriggersResponseSchema;
  },
  /**
   * Create a new trigger in a particular project and location.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.CreateTrigger
   */
  createTrigger: {
    methodKind: "unary";
    input: typeof CreateTriggerRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Update a single trigger.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.UpdateTrigger
   */
  updateTrigger: {
    methodKind: "unary";
    input: typeof UpdateTriggerRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Delete a single trigger.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.DeleteTrigger
   */
  deleteTrigger: {
    methodKind: "unary";
    input: typeof DeleteTriggerRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Get a single Channel.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.GetChannel
   */
  getChannel: {
    methodKind: "unary";
    input: typeof GetChannelRequestSchema;
    output: typeof ChannelSchema;
  },
  /**
   * List channels.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.ListChannels
   */
  listChannels: {
    methodKind: "unary";
    input: typeof ListChannelsRequestSchema;
    output: typeof ListChannelsResponseSchema;
  },
  /**
   * Create a new channel in a particular project and location.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.CreateChannel
   */
  createChannel: {
    methodKind: "unary";
    input: typeof CreateChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Update a single channel.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.UpdateChannel
   */
  updateChannel: {
    methodKind: "unary";
    input: typeof UpdateChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Delete a single channel.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.DeleteChannel
   */
  deleteChannel: {
    methodKind: "unary";
    input: typeof DeleteChannelRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Get a single Provider.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.GetProvider
   */
  getProvider: {
    methodKind: "unary";
    input: typeof GetProviderRequestSchema;
    output: typeof ProviderSchema;
  },
  /**
   * List providers.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.ListProviders
   */
  listProviders: {
    methodKind: "unary";
    input: typeof ListProvidersRequestSchema;
    output: typeof ListProvidersResponseSchema;
  },
  /**
   * Get a single ChannelConnection.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.GetChannelConnection
   */
  getChannelConnection: {
    methodKind: "unary";
    input: typeof GetChannelConnectionRequestSchema;
    output: typeof ChannelConnectionSchema;
  },
  /**
   * List channel connections.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.ListChannelConnections
   */
  listChannelConnections: {
    methodKind: "unary";
    input: typeof ListChannelConnectionsRequestSchema;
    output: typeof ListChannelConnectionsResponseSchema;
  },
  /**
   * Create a new ChannelConnection in a particular project and location.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.CreateChannelConnection
   */
  createChannelConnection: {
    methodKind: "unary";
    input: typeof CreateChannelConnectionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Delete a single ChannelConnection.
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.DeleteChannelConnection
   */
  deleteChannelConnection: {
    methodKind: "unary";
    input: typeof DeleteChannelConnectionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Get a GoogleChannelConfig
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.GetGoogleChannelConfig
   */
  getGoogleChannelConfig: {
    methodKind: "unary";
    input: typeof GetGoogleChannelConfigRequestSchema;
    output: typeof GoogleChannelConfigSchema;
  },
  /**
   * Update a single GoogleChannelConfig
   *
   * @generated from rpc google.cloud.eventarc.v1.Eventarc.UpdateGoogleChannelConfig
   */
  updateGoogleChannelConfig: {
    methodKind: "unary";
    input: typeof UpdateGoogleChannelConfigRequestSchema;
    output: typeof GoogleChannelConfigSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_eventarc_v1_eventarc, 0);

