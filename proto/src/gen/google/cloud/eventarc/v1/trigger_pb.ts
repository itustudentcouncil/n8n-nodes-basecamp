// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/eventarc/v1/trigger.proto (package google.cloud.eventarc.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Code } from "../../../rpc/code_pb";
import { file_google_rpc_code } from "../../../rpc/code_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/eventarc/v1/trigger.proto.
 */
export const file_google_cloud_eventarc_v1_trigger: GenFile = /*@__PURE__*/
  fileDesc("CiZnb29nbGUvY2xvdWQvZXZlbnRhcmMvdjEvdHJpZ2dlci5wcm90bxIYZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnYxItwGCgdUcmlnZ2VyEhEKBG5hbWUYASABKAlCA+BBAhIQCgN1aWQYAiABKAlCA+BBAxI0CgtjcmVhdGVfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI0Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxJECg1ldmVudF9maWx0ZXJzGAggAygLMiUuZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnYxLkV2ZW50RmlsdGVyQgbgQQbgQQISQgoPc2VydmljZV9hY2NvdW50GAkgASgJQingQQH6QSMKIWlhbS5nb29nbGVhcGlzLmNvbS9TZXJ2aWNlQWNjb3VudBI/CgtkZXN0aW5hdGlvbhgKIAEoCzIlLmdvb2dsZS5jbG91ZC5ldmVudGFyYy52MS5EZXN0aW5hdGlvbkID4EECEjsKCXRyYW5zcG9ydBgLIAEoCzIjLmdvb2dsZS5jbG91ZC5ldmVudGFyYy52MS5UcmFuc3BvcnRCA+BBARJCCgZsYWJlbHMYDCADKAsyLS5nb29nbGUuY2xvdWQuZXZlbnRhcmMudjEuVHJpZ2dlci5MYWJlbHNFbnRyeUID4EEBEhQKB2NoYW5uZWwYDSABKAlCA+BBARJKCgpjb25kaXRpb25zGA8gAygLMjEuZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnYxLlRyaWdnZXIuQ29uZGl0aW9uc0VudHJ5QgPgQQMSEQoEZXRhZxhjIAEoCUID4EEDGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaWwoPQ29uZGl0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRI3CgV2YWx1ZRgCIAEoCzIoLmdvb2dsZS5jbG91ZC5ldmVudGFyYy52MS5TdGF0ZUNvbmRpdGlvbjoCOAE6c+pBcAofZXZlbnRhcmMuZ29vZ2xlYXBpcy5jb20vVHJpZ2dlchI6cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3RyaWdnZXJzL3t0cmlnZ2VyfSoIdHJpZ2dlcnMyB3RyaWdnZXIiUAoLRXZlbnRGaWx0ZXISFgoJYXR0cmlidXRlGAEgASgJQgPgQQISEgoFdmFsdWUYAiABKAlCA+BBAhIVCghvcGVyYXRvchgDIAEoCUID4EEBIkEKDlN0YXRlQ29uZGl0aW9uEh4KBGNvZGUYASABKA4yEC5nb29nbGUucnBjLkNvZGUSDwoHbWVzc2FnZRgCIAEoCSKKAgoLRGVzdGluYXRpb24SNwoJY2xvdWRfcnVuGAEgASgLMiIuZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnYxLkNsb3VkUnVuSAASSgoOY2xvdWRfZnVuY3Rpb24YAiABKAlCMPpBLQorY2xvdWRmdW5jdGlvbnMuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGdW5jdGlvbkgAEiwKA2drZRgDIAEoCzIdLmdvb2dsZS5jbG91ZC5ldmVudGFyYy52MS5HS0VIABI6Cgh3b3JrZmxvdxgEIAEoCUIm+kEjCiF3b3JrZmxvd3MuZ29vZ2xlYXBpcy5jb20vV29ya2Zsb3dIAEIMCgpkZXNjcmlwdG9yIk8KCVRyYW5zcG9ydBIyCgZwdWJzdWIYASABKAsyIC5nb29nbGUuY2xvdWQuZXZlbnRhcmMudjEuUHVic3ViSABCDgoMaW50ZXJtZWRpYXJ5ImcKCENsb3VkUnVuEjMKB3NlcnZpY2UYASABKAlCIuBBAvpBHAoacnVuLmdvb2dsZWFwaXMuY29tL1NlcnZpY2USEQoEcGF0aBgCIAEoCUID4EEBEhMKBnJlZ2lvbhgDIAEoCUID4EECInMKA0dLRRIUCgdjbHVzdGVyGAEgASgJQgPgQQISFQoIbG9jYXRpb24YAiABKAlCA+BBAhIWCgluYW1lc3BhY2UYAyABKAlCA+BBAhIUCgdzZXJ2aWNlGAQgASgJQgPgQQISEQoEcGF0aBgFIAEoCUID4EEBIjcKBlB1YnN1YhISCgV0b3BpYxgBIAEoCUID4EEBEhkKDHN1YnNjcmlwdGlvbhgCIAEoCUID4EEDQrgDChxjb20uZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnYxQgxUcmlnZ2VyUHJvdG9QAVo4Y2xvdWQuZ29vZ2xlLmNvbS9nby9ldmVudGFyYy9hcGl2MS9ldmVudGFyY3BiO2V2ZW50YXJjcGLqQWsKK2Nsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnVuY3Rpb24SPHByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9mdW5jdGlvbnMve2Z1bmN0aW9ufepBWQohaWFtLmdvb2dsZWFwaXMuY29tL1NlcnZpY2VBY2NvdW50EjRwcm9qZWN0cy97cHJvamVjdH0vc2VydmljZUFjY291bnRzL3tzZXJ2aWNlX2FjY291bnR96kEfChpydW4uZ29vZ2xlYXBpcy5jb20vU2VydmljZRIBKupBYQohd29ya2Zsb3dzLmdvb2dsZWFwaXMuY29tL1dvcmtmbG93Ejxwcm9qZWN0cy97cHJvamVjdH0vbG9jYXRpb25zL3tsb2NhdGlvbn0vd29ya2Zsb3dzL3t3b3JrZmxvd31iBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp, file_google_rpc_code]);

/**
 * A representation of the trigger resource.
 *
 * @generated from message google.cloud.eventarc.v1.Trigger
 */
export type Trigger = Message<"google.cloud.eventarc.v1.Trigger"> & {
  /**
   * Required. The resource name of the trigger. Must be unique within the location of the
   * project and must be in
   * `projects/{project}/locations/{location}/triggers/{trigger}` format.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Server-assigned unique identifier for the trigger. The value is a UUID4
   * string and guaranteed to remain unchanged until the resource is deleted.
   *
   * @generated from field: string uid = 2;
   */
  uid: string;

  /**
   * Output only. The creation time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last-modified time.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Required. Unordered list. The list of filters that applies to event attributes. Only events that
   * match all the provided filters are sent to the destination.
   *
   * @generated from field: repeated google.cloud.eventarc.v1.EventFilter event_filters = 8;
   */
  eventFilters: EventFilter[];

  /**
   * Optional. The IAM service account email associated with the trigger. The
   * service account represents the identity of the trigger.
   *
   * The principal who calls this API must have the `iam.serviceAccounts.actAs`
   * permission in the service account. See
   * https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common
   * for more information.
   *
   * For Cloud Run destinations, this service account is used to generate
   * identity tokens when invoking the service. See
   * https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account
   * for information on how to invoke authenticated Cloud Run services.
   * To create Audit Log triggers, the service account should also
   * have the `roles/eventarc.eventReceiver` IAM role.
   *
   * @generated from field: string service_account = 9;
   */
  serviceAccount: string;

  /**
   * Required. Destination specifies where the events should be sent to.
   *
   * @generated from field: google.cloud.eventarc.v1.Destination destination = 10;
   */
  destination?: Destination;

  /**
   * Optional. To deliver messages, Eventarc might use other GCP
   * products as a transport intermediary. This field contains a reference to
   * that transport intermediary. This information can be used for debugging
   * purposes.
   *
   * @generated from field: google.cloud.eventarc.v1.Transport transport = 11;
   */
  transport?: Transport;

  /**
   * Optional. User labels attached to the triggers that can be used to group resources.
   *
   * @generated from field: map<string, string> labels = 12;
   */
  labels: { [key: string]: string };

  /**
   * Optional. The name of the channel associated with the trigger in
   * `projects/{project}/locations/{location}/channels/{channel}` format.
   * You must provide a channel to receive events from Eventarc SaaS partners.
   *
   * @generated from field: string channel = 13;
   */
  channel: string;

  /**
   * Output only. The reason(s) why a trigger is in FAILED state.
   *
   * @generated from field: map<string, google.cloud.eventarc.v1.StateCondition> conditions = 15;
   */
  conditions: { [key: string]: StateCondition };

  /**
   * Output only. This checksum is computed by the server based on the value of other
   * fields, and might be sent only on create requests to ensure that the
   * client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 99;
   */
  etag: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.Trigger.
 * Use `create(TriggerSchema)` to create a new message.
 */
export const TriggerSchema: GenMessage<Trigger> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 0);

/**
 * Filters events based on exact matches on the CloudEvents attributes.
 *
 * @generated from message google.cloud.eventarc.v1.EventFilter
 */
export type EventFilter = Message<"google.cloud.eventarc.v1.EventFilter"> & {
  /**
   * Required. The name of a CloudEvents attribute. Currently, only a subset of attributes
   * are supported for filtering.
   *
   * All triggers MUST provide a filter for the 'type' attribute.
   *
   * @generated from field: string attribute = 1;
   */
  attribute: string;

  /**
   * Required. The value for the attribute.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * Optional. The operator used for matching the events with the value of the
   * filter. If not specified, only events that have an exact key-value pair
   * specified in the filter are matched. The only allowed value is
   * `match-path-pattern`.
   *
   * @generated from field: string operator = 3;
   */
  operator: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.EventFilter.
 * Use `create(EventFilterSchema)` to create a new message.
 */
export const EventFilterSchema: GenMessage<EventFilter> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 1);

/**
 * A condition that is part of the trigger state computation.
 *
 * @generated from message google.cloud.eventarc.v1.StateCondition
 */
export type StateCondition = Message<"google.cloud.eventarc.v1.StateCondition"> & {
  /**
   * The canonical code of the condition.
   *
   * @generated from field: google.rpc.Code code = 1;
   */
  code: Code;

  /**
   * Human-readable message.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.StateCondition.
 * Use `create(StateConditionSchema)` to create a new message.
 */
export const StateConditionSchema: GenMessage<StateCondition> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 2);

/**
 * Represents a target of an invocation over HTTP.
 *
 * @generated from message google.cloud.eventarc.v1.Destination
 */
export type Destination = Message<"google.cloud.eventarc.v1.Destination"> & {
  /**
   * @generated from oneof google.cloud.eventarc.v1.Destination.descriptor
   */
  descriptor: {
    /**
     * Cloud Run fully-managed resource that receives the events. The resource
     * should be in the same project as the trigger.
     *
     * @generated from field: google.cloud.eventarc.v1.CloudRun cloud_run = 1;
     */
    value: CloudRun;
    case: "cloudRun";
  } | {
    /**
     * The Cloud Function resource name. Only Cloud Functions V2 is supported.
     * Format: `projects/{project}/locations/{location}/functions/{function}`
     *
     * @generated from field: string cloud_function = 2;
     */
    value: string;
    case: "cloudFunction";
  } | {
    /**
     * A GKE service capable of receiving events. The service should be running
     * in the same project as the trigger.
     *
     * @generated from field: google.cloud.eventarc.v1.GKE gke = 3;
     */
    value: GKE;
    case: "gke";
  } | {
    /**
     * The resource name of the Workflow whose Executions are triggered by
     * the events. The Workflow resource should be deployed in the same project
     * as the trigger.
     * Format: `projects/{project}/locations/{location}/workflows/{workflow}`
     *
     * @generated from field: string workflow = 4;
     */
    value: string;
    case: "workflow";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.eventarc.v1.Destination.
 * Use `create(DestinationSchema)` to create a new message.
 */
export const DestinationSchema: GenMessage<Destination> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 3);

/**
 * Represents the transport intermediaries created for the trigger to
 * deliver events.
 *
 * @generated from message google.cloud.eventarc.v1.Transport
 */
export type Transport = Message<"google.cloud.eventarc.v1.Transport"> & {
  /**
   * @generated from oneof google.cloud.eventarc.v1.Transport.intermediary
   */
  intermediary: {
    /**
     * The Pub/Sub topic and subscription used by Eventarc as a transport
     * intermediary.
     *
     * @generated from field: google.cloud.eventarc.v1.Pubsub pubsub = 1;
     */
    value: Pubsub;
    case: "pubsub";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.eventarc.v1.Transport.
 * Use `create(TransportSchema)` to create a new message.
 */
export const TransportSchema: GenMessage<Transport> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 4);

/**
 * Represents a Cloud Run destination.
 *
 * @generated from message google.cloud.eventarc.v1.CloudRun
 */
export type CloudRun = Message<"google.cloud.eventarc.v1.CloudRun"> & {
  /**
   * Required. The name of the Cloud Run service being addressed. See
   * https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services.
   *
   * Only services located in the same project as the trigger object
   * can be addressed.
   *
   * @generated from field: string service = 1;
   */
  service: string;

  /**
   * Optional. The relative path on the Cloud Run service the events should be sent to.
   *
   * The value must conform to the definition of a URI path segment (section 3.3
   * of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * Required. The region the Cloud Run service is deployed in.
   *
   * @generated from field: string region = 3;
   */
  region: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.CloudRun.
 * Use `create(CloudRunSchema)` to create a new message.
 */
export const CloudRunSchema: GenMessage<CloudRun> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 5);

/**
 * Represents a GKE destination.
 *
 * @generated from message google.cloud.eventarc.v1.GKE
 */
export type GKE = Message<"google.cloud.eventarc.v1.GKE"> & {
  /**
   * Required. The name of the cluster the GKE service is running in. The cluster must be
   * running in the same project as the trigger being created.
   *
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * Required. The name of the Google Compute Engine in which the cluster resides, which
   * can either be compute zone (for example, us-central1-a) for the zonal
   * clusters or region (for example, us-central1) for regional clusters.
   *
   * @generated from field: string location = 2;
   */
  location: string;

  /**
   * Required. The namespace the GKE service is running in.
   *
   * @generated from field: string namespace = 3;
   */
  namespace: string;

  /**
   * Required. Name of the GKE service.
   *
   * @generated from field: string service = 4;
   */
  service: string;

  /**
   * Optional. The relative path on the GKE service the events should be sent to.
   *
   * The value must conform to the definition of a URI path segment (section 3.3
   * of RFC2396). Examples: "/route", "route", "route/subroute".
   *
   * @generated from field: string path = 5;
   */
  path: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.GKE.
 * Use `create(GKESchema)` to create a new message.
 */
export const GKESchema: GenMessage<GKE> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 6);

/**
 * Represents a Pub/Sub transport.
 *
 * @generated from message google.cloud.eventarc.v1.Pubsub
 */
export type Pubsub = Message<"google.cloud.eventarc.v1.Pubsub"> & {
  /**
   * Optional. The name of the Pub/Sub topic created and managed by Eventarc as
   * a transport for the event delivery. Format:
   * `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`.
   *
   * You can set an existing topic for triggers of the type
   * `google.cloud.pubsub.topic.v1.messagePublished`. The topic you provide
   * here is not deleted by Eventarc at trigger deletion.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * Output only. The name of the Pub/Sub subscription created and managed by Eventarc
   * as a transport for the event delivery. Format:
   * `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
   *
   * @generated from field: string subscription = 2;
   */
  subscription: string;
};

/**
 * Describes the message google.cloud.eventarc.v1.Pubsub.
 * Use `create(PubsubSchema)` to create a new message.
 */
export const PubsubSchema: GenMessage<Pubsub> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_v1_trigger, 7);

