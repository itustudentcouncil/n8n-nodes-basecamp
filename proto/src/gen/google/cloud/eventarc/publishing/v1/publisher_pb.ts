// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/eventarc/publishing/v1/publisher.proto (package google.cloud.eventarc.publishing.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/eventarc/publishing/v1/publisher.proto.
 */
export const file_google_cloud_eventarc_publishing_v1_publisher: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvY2xvdWQvZXZlbnRhcmMvcHVibGlzaGluZy92MS9wdWJsaXNoZXIucHJvdG8SI2dvb2dsZS5jbG91ZC5ldmVudGFyYy5wdWJsaXNoaW5nLnYxIn4KJVB1Ymxpc2hDaGFubmVsQ29ubmVjdGlvbkV2ZW50c1JlcXVlc3QSGgoSY2hhbm5lbF9jb25uZWN0aW9uGAEgASgJEiQKBmV2ZW50cxgCIAMoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSEwoLdGV4dF9ldmVudHMYAyADKAkiKAomUHVibGlzaENoYW5uZWxDb25uZWN0aW9uRXZlbnRzUmVzcG9uc2UiYgoUUHVibGlzaEV2ZW50c1JlcXVlc3QSDwoHY2hhbm5lbBgBIAEoCRIkCgZldmVudHMYAiADKAsyFC5nb29nbGUucHJvdG9idWYuQW55EhMKC3RleHRfZXZlbnRzGAMgAygJIhcKFVB1Ymxpc2hFdmVudHNSZXNwb25zZTLQBAoJUHVibGlzaGVyEpgCCh5QdWJsaXNoQ2hhbm5lbENvbm5lY3Rpb25FdmVudHMSSi5nb29nbGUuY2xvdWQuZXZlbnRhcmMucHVibGlzaGluZy52MS5QdWJsaXNoQ2hhbm5lbENvbm5lY3Rpb25FdmVudHNSZXF1ZXN0GksuZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnB1Ymxpc2hpbmcudjEuUHVibGlzaENoYW5uZWxDb25uZWN0aW9uRXZlbnRzUmVzcG9uc2UiXYLT5JMCVzoBKiJSL3YxL3tjaGFubmVsX2Nvbm5lY3Rpb249cHJvamVjdHMvKi9sb2NhdGlvbnMvKi9jaGFubmVsQ29ubmVjdGlvbnMvKn06cHVibGlzaEV2ZW50cxLQAQoNUHVibGlzaEV2ZW50cxI5Lmdvb2dsZS5jbG91ZC5ldmVudGFyYy5wdWJsaXNoaW5nLnYxLlB1Ymxpc2hFdmVudHNSZXF1ZXN0GjouZ29vZ2xlLmNsb3VkLmV2ZW50YXJjLnB1Ymxpc2hpbmcudjEuUHVibGlzaEV2ZW50c1Jlc3BvbnNlIkiC0+STAkI6ASoiPS92MS97Y2hhbm5lbD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL2NoYW5uZWxzLyp9OnB1Ymxpc2hFdmVudHMaVcpBIWV2ZW50YXJjcHVibGlzaGluZy5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1C+gEKJ2NvbS5nb29nbGUuY2xvdWQuZXZlbnRhcmMucHVibGlzaGluZy52MUIOUHVibGlzaGVyUHJvdG9QAVpHY2xvdWQuZ29vZ2xlLmNvbS9nby9ldmVudGFyYy9wdWJsaXNoaW5nL2FwaXYxL3B1Ymxpc2hpbmdwYjtwdWJsaXNoaW5ncGKqAiNHb29nbGUuQ2xvdWQuRXZlbnRhcmMuUHVibGlzaGluZy5WMcoCI0dvb2dsZVxDbG91ZFxFdmVudGFyY1xQdWJsaXNoaW5nXFYx6gInR29vZ2xlOjpDbG91ZDo6RXZlbnRhcmM6OlB1Ymxpc2hpbmc6OlYxYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_protobuf_any]);

/**
 * The request message for the PublishChannelConnectionEvents method.
 *
 * @generated from message google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsRequest
 */
export type PublishChannelConnectionEventsRequest = Message<"google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsRequest"> & {
  /**
   * The channel_connection that the events are published from. For example:
   * `projects/{partner_project_id}/locations/{location}/channelConnections/{channel_connection_id}`.
   *
   * @generated from field: string channel_connection = 1;
   */
  channelConnection: string;

  /**
   * The CloudEvents v1.0 events to publish. No other types are allowed.
   * If this field is set, then the `text_events` fields must not be set.
   *
   * @generated from field: repeated google.protobuf.Any events = 2;
   */
  events: Any[];

  /**
   * The text representation of events to publish.
   * CloudEvent v1.0 in JSON format is the only allowed type. Refer to
   * https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md
   * for specification.
   * If this field is set, then the `events` fields must not be set.
   *
   * @generated from field: repeated string text_events = 3;
   */
  textEvents: string[];
};

/**
 * Describes the message google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsRequest.
 * Use `create(PublishChannelConnectionEventsRequestSchema)` to create a new message.
 */
export const PublishChannelConnectionEventsRequestSchema: GenMessage<PublishChannelConnectionEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_publishing_v1_publisher, 0);

/**
 * The response message for the PublishChannelConnectionEvents method.
 *
 * @generated from message google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsResponse
 */
export type PublishChannelConnectionEventsResponse = Message<"google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsResponse"> & {
};

/**
 * Describes the message google.cloud.eventarc.publishing.v1.PublishChannelConnectionEventsResponse.
 * Use `create(PublishChannelConnectionEventsResponseSchema)` to create a new message.
 */
export const PublishChannelConnectionEventsResponseSchema: GenMessage<PublishChannelConnectionEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_publishing_v1_publisher, 1);

/**
 * The request message for the PublishEvents method.
 *
 * @generated from message google.cloud.eventarc.publishing.v1.PublishEventsRequest
 */
export type PublishEventsRequest = Message<"google.cloud.eventarc.publishing.v1.PublishEventsRequest"> & {
  /**
   * The full name of the channel to publish to. For example:
   * `projects/{project}/locations/{location}/channels/{channel-id}`.
   *
   * @generated from field: string channel = 1;
   */
  channel: string;

  /**
   * The CloudEvents v1.0 events to publish. No other types are allowed.
   * If this field is set, then the `text_events` fields must not be set.
   *
   * @generated from field: repeated google.protobuf.Any events = 2;
   */
  events: Any[];

  /**
   * The text representation of events to publish.
   * CloudEvent v1.0 in JSON format is the only allowed type. Refer to
   * https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md
   * for specification.
   * If this field is set, then the `events` fields must not be set.
   *
   * @generated from field: repeated string text_events = 3;
   */
  textEvents: string[];
};

/**
 * Describes the message google.cloud.eventarc.publishing.v1.PublishEventsRequest.
 * Use `create(PublishEventsRequestSchema)` to create a new message.
 */
export const PublishEventsRequestSchema: GenMessage<PublishEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_publishing_v1_publisher, 2);

/**
 * The response message for the PublishEvents method.
 *
 * @generated from message google.cloud.eventarc.publishing.v1.PublishEventsResponse
 */
export type PublishEventsResponse = Message<"google.cloud.eventarc.publishing.v1.PublishEventsResponse"> & {
};

/**
 * Describes the message google.cloud.eventarc.publishing.v1.PublishEventsResponse.
 * Use `create(PublishEventsResponseSchema)` to create a new message.
 */
export const PublishEventsResponseSchema: GenMessage<PublishEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_eventarc_publishing_v1_publisher, 3);

/**
 * Eventarc processes events generated by an event provider and delivers them to
 * a subscriber.
 *
 * An event provider is a software-as-a-service (SaaS) system or
 * product that can generate and deliver events through Eventarc.
 *
 * A third-party event provider is an event provider from outside of Google.
 *
 * A partner is a third-party event provider that is integrated with Eventarc.
 *
 * A subscriber is a GCP customer interested in receiving events.
 *
 * Channel is a first-class Eventarc resource that is created and managed
 * by the subscriber in their GCP project. A Channel represents a subscriber's
 * intent to receive events from an event provider. A Channel is associated with
 * exactly one event provider.
 *
 * ChannelConnection is a first-class Eventarc resource that
 * is created and managed by the partner in their GCP project. A
 * ChannelConnection represents a connection between a partner and a
 * subscriber's Channel. A ChannelConnection has a one-to-one mapping with a
 * Channel.
 *
 * Publisher allows an event provider to publish events to Eventarc.
 *
 * @generated from service google.cloud.eventarc.publishing.v1.Publisher
 */
export const Publisher: GenService<{
  /**
   * Publish events to a ChannelConnection in a partner's project.
   *
   * @generated from rpc google.cloud.eventarc.publishing.v1.Publisher.PublishChannelConnectionEvents
   */
  publishChannelConnectionEvents: {
    methodKind: "unary";
    input: typeof PublishChannelConnectionEventsRequestSchema;
    output: typeof PublishChannelConnectionEventsResponseSchema;
  },
  /**
   * Publish events to a subscriber's channel.
   *
   * @generated from rpc google.cloud.eventarc.publishing.v1.Publisher.PublishEvents
   */
  publishEvents: {
    methodKind: "unary";
    input: typeof PublishEventsRequestSchema;
    output: typeof PublishEventsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_eventarc_publishing_v1_publisher, 0);

