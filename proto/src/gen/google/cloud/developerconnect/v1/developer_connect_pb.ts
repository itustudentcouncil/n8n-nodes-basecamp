// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/developerconnect/v1/developer_connect.proto (package google.cloud.developerconnect.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../api/field_info_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/developerconnect/v1/developer_connect.proto.
 */
export const file_google_cloud_developerconnect_v1_developer_connect: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Message describing Connection object
 *
 * @generated from message google.cloud.developerconnect.v1.Connection
 */
export type Connection = Message<"google.cloud.developerconnect.v1.Connection"> & {
  /**
   * Configuration for the connection depending on the type of provider.
   *
   * @generated from oneof google.cloud.developerconnect.v1.Connection.connection_config
   */
  connectionConfig: {
    /**
     * Configuration for connections to github.com.
     *
     * @generated from field: google.cloud.developerconnect.v1.GitHubConfig github_config = 5;
     */
    value: GitHubConfig;
    case: "githubConfig";
  } | { case: undefined; value?: undefined };

  /**
   * Identifier. The resource name of the connection, in the format
   * `projects/{project}/locations/{location}/connections/{connection_id}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. [Output only] Create timestamp
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. [Output only] Update timestamp
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Output only. [Output only] Delete timestamp
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 11;
   */
  deleteTime?: Timestamp;

  /**
   * Optional. Labels as key value pairs
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * Output only. Installation state of the Connection.
   *
   * @generated from field: google.cloud.developerconnect.v1.InstallationState installation_state = 6;
   */
  installationState?: InstallationState;

  /**
   * Optional. If disabled is set to true, functionality is disabled for this
   * connection. Repository based API methods and webhooks processing for
   * repositories in this connection will be disabled.
   *
   * @generated from field: bool disabled = 7;
   */
  disabled: boolean;

  /**
   * Output only. Set to true when the connection is being set up or updated in
   * the background.
   *
   * @generated from field: bool reconciling = 8;
   */
  reconciling: boolean;

  /**
   * Optional. Allows clients to store small amounts of arbitrary data.
   *
   * @generated from field: map<string, string> annotations = 9;
   */
  annotations: { [key: string]: string };

  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 10;
   */
  etag: string;

  /**
   * Output only. A system-assigned unique identifier for a the
   * GitRepositoryLink.
   *
   * @generated from field: string uid = 12;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.Connection.
 * Use `create(ConnectionSchema)` to create a new message.
 */
export const ConnectionSchema: GenMessage<Connection> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 0);

/**
 * Describes stage and necessary actions to be taken by the
 * user to complete the installation. Used for GitHub and GitHub Enterprise
 * based connections.
 *
 * @generated from message google.cloud.developerconnect.v1.InstallationState
 */
export type InstallationState = Message<"google.cloud.developerconnect.v1.InstallationState"> & {
  /**
   * Output only. Current step of the installation process.
   *
   * @generated from field: google.cloud.developerconnect.v1.InstallationState.Stage stage = 1;
   */
  stage: InstallationState_Stage;

  /**
   * Output only. Message of what the user should do next to continue the
   * installation. Empty string if the installation is already complete.
   *
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * Output only. Link to follow for next action. Empty string if the
   * installation is already complete.
   *
   * @generated from field: string action_uri = 3;
   */
  actionUri: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.InstallationState.
 * Use `create(InstallationStateSchema)` to create a new message.
 */
export const InstallationStateSchema: GenMessage<InstallationState> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 1);

/**
 * Stage of the installation process.
 *
 * @generated from enum google.cloud.developerconnect.v1.InstallationState.Stage
 */
export enum InstallationState_Stage {
  /**
   * No stage specified.
   *
   * @generated from enum value: STAGE_UNSPECIFIED = 0;
   */
  STAGE_UNSPECIFIED = 0,

  /**
   * Only for GitHub Enterprise. An App creation has been requested.
   * The user needs to confirm the creation in their GitHub enterprise host.
   *
   * @generated from enum value: PENDING_CREATE_APP = 1;
   */
  PENDING_CREATE_APP = 1,

  /**
   * User needs to authorize the GitHub (or Enterprise) App via OAuth.
   *
   * @generated from enum value: PENDING_USER_OAUTH = 2;
   */
  PENDING_USER_OAUTH = 2,

  /**
   * User needs to follow the link to install the GitHub (or Enterprise) App.
   *
   * @generated from enum value: PENDING_INSTALL_APP = 3;
   */
  PENDING_INSTALL_APP = 3,

  /**
   * Installation process has been completed.
   *
   * @generated from enum value: COMPLETE = 10;
   */
  COMPLETE = 10,
}

/**
 * Describes the enum google.cloud.developerconnect.v1.InstallationState.Stage.
 */
export const InstallationState_StageSchema: GenEnum<InstallationState_Stage> = /*@__PURE__*/
  enumDesc(file_google_cloud_developerconnect_v1_developer_connect, 1, 0);

/**
 * Configuration for connections to github.com.
 *
 * @generated from message google.cloud.developerconnect.v1.GitHubConfig
 */
export type GitHubConfig = Message<"google.cloud.developerconnect.v1.GitHubConfig"> & {
  /**
   * Required. Immutable. The GitHub Application that was installed to the
   * GitHub user or organization.
   *
   * @generated from field: google.cloud.developerconnect.v1.GitHubConfig.GitHubApp github_app = 1;
   */
  githubApp: GitHubConfig_GitHubApp;

  /**
   * Optional. OAuth credential of the account that authorized the GitHub App.
   * It is recommended to use a robot account instead of a human user account.
   * The OAuth token must be tied to the GitHub App of this config.
   *
   * @generated from field: google.cloud.developerconnect.v1.OAuthCredential authorizer_credential = 2;
   */
  authorizerCredential?: OAuthCredential;

  /**
   * Optional. GitHub App installation id.
   *
   * @generated from field: int64 app_installation_id = 3;
   */
  appInstallationId: bigint;

  /**
   * Output only. The URI to navigate to in order to manage the installation
   * associated with this GitHubConfig.
   *
   * @generated from field: string installation_uri = 4;
   */
  installationUri: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.GitHubConfig.
 * Use `create(GitHubConfigSchema)` to create a new message.
 */
export const GitHubConfigSchema: GenMessage<GitHubConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 2);

/**
 * Represents the various GitHub Applications that can be installed to a
 * GitHub user or organization and used with Developer Connect.
 *
 * @generated from enum google.cloud.developerconnect.v1.GitHubConfig.GitHubApp
 */
export enum GitHubConfig_GitHubApp {
  /**
   * GitHub App not specified.
   *
   * @generated from enum value: GIT_HUB_APP_UNSPECIFIED = 0;
   */
  GIT_HUB_APP_UNSPECIFIED = 0,

  /**
   * The Developer Connect GitHub Application.
   *
   * @generated from enum value: DEVELOPER_CONNECT = 1;
   */
  DEVELOPER_CONNECT = 1,

  /**
   * The Firebase GitHub Application.
   *
   * @generated from enum value: FIREBASE = 2;
   */
  FIREBASE = 2,
}

/**
 * Describes the enum google.cloud.developerconnect.v1.GitHubConfig.GitHubApp.
 */
export const GitHubConfig_GitHubAppSchema: GenEnum<GitHubConfig_GitHubApp> = /*@__PURE__*/
  enumDesc(file_google_cloud_developerconnect_v1_developer_connect, 2, 0);

/**
 * Represents an OAuth token of the account that authorized the Connection,
 * and associated metadata.
 *
 * @generated from message google.cloud.developerconnect.v1.OAuthCredential
 */
export type OAuthCredential = Message<"google.cloud.developerconnect.v1.OAuthCredential"> & {
  /**
   * Required. A SecretManager resource containing the OAuth token that
   * authorizes the connection. Format: `projects/*\/secrets/*\/versions/*`.
   *
   * @generated from field: string oauth_token_secret_version = 1;
   */
  oauthTokenSecretVersion: string;

  /**
   * Output only. The username associated with this token.
   *
   * @generated from field: string username = 2;
   */
  username: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.OAuthCredential.
 * Use `create(OAuthCredentialSchema)` to create a new message.
 */
export const OAuthCredentialSchema: GenMessage<OAuthCredential> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 3);

/**
 * Message for requesting list of Connections
 *
 * @generated from message google.cloud.developerconnect.v1.ListConnectionsRequest
 */
export type ListConnectionsRequest = Message<"google.cloud.developerconnect.v1.ListConnectionsRequest"> & {
  /**
   * Required. Parent value for ListConnectionsRequest
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.ListConnectionsRequest.
 * Use `create(ListConnectionsRequestSchema)` to create a new message.
 */
export const ListConnectionsRequestSchema: GenMessage<ListConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 4);

/**
 * Message for response to listing Connections
 *
 * @generated from message google.cloud.developerconnect.v1.ListConnectionsResponse
 */
export type ListConnectionsResponse = Message<"google.cloud.developerconnect.v1.ListConnectionsResponse"> & {
  /**
   * The list of Connection
   *
   * @generated from field: repeated google.cloud.developerconnect.v1.Connection connections = 1;
   */
  connections: Connection[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.developerconnect.v1.ListConnectionsResponse.
 * Use `create(ListConnectionsResponseSchema)` to create a new message.
 */
export const ListConnectionsResponseSchema: GenMessage<ListConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 5);

/**
 * Message for getting a Connection
 *
 * @generated from message google.cloud.developerconnect.v1.GetConnectionRequest
 */
export type GetConnectionRequest = Message<"google.cloud.developerconnect.v1.GetConnectionRequest"> & {
  /**
   * Required. Name of the resource
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.GetConnectionRequest.
 * Use `create(GetConnectionRequestSchema)` to create a new message.
 */
export const GetConnectionRequestSchema: GenMessage<GetConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 6);

/**
 * Message for creating a Connection
 *
 * @generated from message google.cloud.developerconnect.v1.CreateConnectionRequest
 */
export type CreateConnectionRequest = Message<"google.cloud.developerconnect.v1.CreateConnectionRequest"> & {
  /**
   * Required. Value for parent.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Id of the requesting object
   * If auto-generating Id server-side, remove this field and
   * connection_id from the method_signature of Create RPC
   *
   * @generated from field: string connection_id = 2;
   */
  connectionId: string;

  /**
   * Required. The resource being created
   *
   * @generated from field: google.cloud.developerconnect.v1.Connection connection = 3;
   */
  connection?: Connection;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. If set, validate the request, but do not actually post it.
   *
   * @generated from field: bool validate_only = 5;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.developerconnect.v1.CreateConnectionRequest.
 * Use `create(CreateConnectionRequestSchema)` to create a new message.
 */
export const CreateConnectionRequestSchema: GenMessage<CreateConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 7);

/**
 * Message for updating a Connection
 *
 * @generated from message google.cloud.developerconnect.v1.UpdateConnectionRequest
 */
export type UpdateConnectionRequest = Message<"google.cloud.developerconnect.v1.UpdateConnectionRequest"> & {
  /**
   * Required. Field mask is used to specify the fields to be overwritten in the
   * Connection resource by the update.
   * The fields specified in the update_mask are relative to the resource, not
   * the full request. A field will be overwritten if it is in the mask. If the
   * user does not provide a mask then all fields will be overwritten.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 1;
   */
  updateMask?: FieldMask;

  /**
   * Required. The resource being updated
   *
   * @generated from field: google.cloud.developerconnect.v1.Connection connection = 2;
   */
  connection?: Connection;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;

  /**
   * Optional. If set to true, and the connection is not found a new connection
   * will be created. In this situation `update_mask` is ignored.
   * The creation will succeed only if the input connection has all the
   * necessary information (e.g a github_config with both  user_oauth_token and
   * installation_id properties).
   *
   * @generated from field: bool allow_missing = 4;
   */
  allowMissing: boolean;

  /**
   * Optional. If set, validate the request, but do not actually post it.
   *
   * @generated from field: bool validate_only = 5;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.developerconnect.v1.UpdateConnectionRequest.
 * Use `create(UpdateConnectionRequestSchema)` to create a new message.
 */
export const UpdateConnectionRequestSchema: GenMessage<UpdateConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 8);

/**
 * Message for deleting a Connection
 *
 * @generated from message google.cloud.developerconnect.v1.DeleteConnectionRequest
 */
export type DeleteConnectionRequest = Message<"google.cloud.developerconnect.v1.DeleteConnectionRequest"> & {
  /**
   * Required. Name of the resource
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. If set, validate the request, but do not actually post it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;

  /**
   * Optional. The current etag of the Connection.
   * If an etag is provided and does not match the current etag of the
   * Connection, deletion will be blocked and an ABORTED error will be returned.
   *
   * @generated from field: string etag = 4;
   */
  etag: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.DeleteConnectionRequest.
 * Use `create(DeleteConnectionRequestSchema)` to create a new message.
 */
export const DeleteConnectionRequestSchema: GenMessage<DeleteConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 9);

/**
 * Represents the metadata of the long-running operation.
 *
 * @generated from message google.cloud.developerconnect.v1.OperationMetadata
 */
export type OperationMetadata = Message<"google.cloud.developerconnect.v1.OperationMetadata"> & {
  /**
   * Output only. The time the operation was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 1;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time the operation finished running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Output only. Server-defined resource path for the target of the operation.
   *
   * @generated from field: string target = 3;
   */
  target: string;

  /**
   * Output only. Name of the verb executed by the operation.
   *
   * @generated from field: string verb = 4;
   */
  verb: string;

  /**
   * Output only. Human-readable status of the operation, if any.
   *
   * @generated from field: string status_message = 5;
   */
  statusMessage: string;

  /**
   * Output only. Identifies whether the user has requested cancellation
   * of the operation. Operations that have been cancelled successfully
   * have [Operation.error][] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: bool requested_cancellation = 6;
   */
  requestedCancellation: boolean;

  /**
   * Output only. API version used to start the operation.
   *
   * @generated from field: string api_version = 7;
   */
  apiVersion: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.OperationMetadata.
 * Use `create(OperationMetadataSchema)` to create a new message.
 */
export const OperationMetadataSchema: GenMessage<OperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 10);

/**
 * Message describing the GitRepositoryLink object
 *
 * @generated from message google.cloud.developerconnect.v1.GitRepositoryLink
 */
export type GitRepositoryLink = Message<"google.cloud.developerconnect.v1.GitRepositoryLink"> & {
  /**
   * Identifier. Resource name of the repository, in the format
   * `projects/*\/locations/*\/connections/*\/gitRepositoryLinks/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Git Clone URI.
   *
   * @generated from field: string clone_uri = 2;
   */
  cloneUri: string;

  /**
   * Output only. [Output only] Create timestamp
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. [Output only] Update timestamp
   *
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * Output only. [Output only] Delete timestamp
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 5;
   */
  deleteTime?: Timestamp;

  /**
   * Optional. Labels as key value pairs
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };

  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 7;
   */
  etag: string;

  /**
   * Output only. Set to true when the connection is being set up or updated in
   * the background.
   *
   * @generated from field: bool reconciling = 8;
   */
  reconciling: boolean;

  /**
   * Optional. Allows clients to store small amounts of arbitrary data.
   *
   * @generated from field: map<string, string> annotations = 9;
   */
  annotations: { [key: string]: string };

  /**
   * Output only. A system-assigned unique identifier for a the
   * GitRepositoryLink.
   *
   * @generated from field: string uid = 10;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.GitRepositoryLink.
 * Use `create(GitRepositoryLinkSchema)` to create a new message.
 */
export const GitRepositoryLinkSchema: GenMessage<GitRepositoryLink> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 11);

/**
 * Message for creating a GitRepositoryLink
 *
 * @generated from message google.cloud.developerconnect.v1.CreateGitRepositoryLinkRequest
 */
export type CreateGitRepositoryLinkRequest = Message<"google.cloud.developerconnect.v1.CreateGitRepositoryLinkRequest"> & {
  /**
   * Required. Value for parent.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The resource being created
   *
   * @generated from field: google.cloud.developerconnect.v1.GitRepositoryLink git_repository_link = 2;
   */
  gitRepositoryLink?: GitRepositoryLink;

  /**
   * Required. The ID to use for the repository, which will become the final
   * component of the repository's resource name. This ID should be unique in
   * the connection. Allows alphanumeric characters and any of
   * -._~%!$&'()*+,;=@.
   *
   * @generated from field: string git_repository_link_id = 3;
   */
  gitRepositoryLinkId: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes since the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. If set, validate the request, but do not actually post it.
   *
   * @generated from field: bool validate_only = 5;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.cloud.developerconnect.v1.CreateGitRepositoryLinkRequest.
 * Use `create(CreateGitRepositoryLinkRequestSchema)` to create a new message.
 */
export const CreateGitRepositoryLinkRequestSchema: GenMessage<CreateGitRepositoryLinkRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 12);

/**
 * Message for deleting a GitRepositoryLink
 *
 * @generated from message google.cloud.developerconnect.v1.DeleteGitRepositoryLinkRequest
 */
export type DeleteGitRepositoryLinkRequest = Message<"google.cloud.developerconnect.v1.DeleteGitRepositoryLinkRequest"> & {
  /**
   * Required. Name of the resource
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. An optional request ID to identify requests. Specify a unique
   * request ID so that if you must retry your request, the server will know to
   * ignore the request if it has already been completed. The server will
   * guarantee that for at least 60 minutes after the first request.
   *
   * For example, consider a situation where you make an initial request and the
   * request times out. If you make the request again with the same request
   * ID, the server can check if original operation with the same request ID
   * was received, and if so, will ignore the second request. This prevents
   * clients from accidentally creating duplicate commitments.
   *
   * The request ID must be a valid UUID with the exception that zero UUID is
   * not supported (00000000-0000-0000-0000-000000000000).
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. If set, validate the request, but do not actually post it.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;

  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and may be sent on update and delete requests to ensure the
   * client has an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 4;
   */
  etag: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.DeleteGitRepositoryLinkRequest.
 * Use `create(DeleteGitRepositoryLinkRequestSchema)` to create a new message.
 */
export const DeleteGitRepositoryLinkRequestSchema: GenMessage<DeleteGitRepositoryLinkRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 13);

/**
 * Message for requesting a list of GitRepositoryLinks
 *
 * @generated from message google.cloud.developerconnect.v1.ListGitRepositoryLinksRequest
 */
export type ListGitRepositoryLinksRequest = Message<"google.cloud.developerconnect.v1.ListGitRepositoryLinksRequest"> & {
  /**
   * Required. Parent value for ListGitRepositoryLinksRequest
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Requested page size. Server may return fewer items than
   * requested. If unspecified, server will pick an appropriate default.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A token identifying a page of results the server should return.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Filtering results
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. Hint for how to order the results
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.ListGitRepositoryLinksRequest.
 * Use `create(ListGitRepositoryLinksRequestSchema)` to create a new message.
 */
export const ListGitRepositoryLinksRequestSchema: GenMessage<ListGitRepositoryLinksRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 14);

/**
 * Message for response to listing GitRepositoryLinks
 *
 * @generated from message google.cloud.developerconnect.v1.ListGitRepositoryLinksResponse
 */
export type ListGitRepositoryLinksResponse = Message<"google.cloud.developerconnect.v1.ListGitRepositoryLinksResponse"> & {
  /**
   * The list of GitRepositoryLinks
   *
   * @generated from field: repeated google.cloud.developerconnect.v1.GitRepositoryLink git_repository_links = 1;
   */
  gitRepositoryLinks: GitRepositoryLink[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Locations that could not be reached.
   *
   * @generated from field: repeated string unreachable = 3;
   */
  unreachable: string[];
};

/**
 * Describes the message google.cloud.developerconnect.v1.ListGitRepositoryLinksResponse.
 * Use `create(ListGitRepositoryLinksResponseSchema)` to create a new message.
 */
export const ListGitRepositoryLinksResponseSchema: GenMessage<ListGitRepositoryLinksResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 15);

/**
 * Message for getting a GitRepositoryLink
 *
 * @generated from message google.cloud.developerconnect.v1.GetGitRepositoryLinkRequest
 */
export type GetGitRepositoryLinkRequest = Message<"google.cloud.developerconnect.v1.GetGitRepositoryLinkRequest"> & {
  /**
   * Required. Name of the resource
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.GetGitRepositoryLinkRequest.
 * Use `create(GetGitRepositoryLinkRequestSchema)` to create a new message.
 */
export const GetGitRepositoryLinkRequestSchema: GenMessage<GetGitRepositoryLinkRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 16);

/**
 * Message for fetching SCM read/write token.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchReadWriteTokenRequest
 */
export type FetchReadWriteTokenRequest = Message<"google.cloud.developerconnect.v1.FetchReadWriteTokenRequest"> & {
  /**
   * Required. The resource name of the gitRepositoryLink in the format
   * `projects/*\/locations/*\/connections/*\/gitRepositoryLinks/*`.
   *
   * @generated from field: string git_repository_link = 1;
   */
  gitRepositoryLink: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchReadWriteTokenRequest.
 * Use `create(FetchReadWriteTokenRequestSchema)` to create a new message.
 */
export const FetchReadWriteTokenRequestSchema: GenMessage<FetchReadWriteTokenRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 17);

/**
 * Message for fetching SCM read token.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchReadTokenRequest
 */
export type FetchReadTokenRequest = Message<"google.cloud.developerconnect.v1.FetchReadTokenRequest"> & {
  /**
   * Required. The resource name of the gitRepositoryLink in the format
   * `projects/*\/locations/*\/connections/*\/gitRepositoryLinks/*`.
   *
   * @generated from field: string git_repository_link = 1;
   */
  gitRepositoryLink: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchReadTokenRequest.
 * Use `create(FetchReadTokenRequestSchema)` to create a new message.
 */
export const FetchReadTokenRequestSchema: GenMessage<FetchReadTokenRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 18);

/**
 * Message for responding to get read token.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchReadTokenResponse
 */
export type FetchReadTokenResponse = Message<"google.cloud.developerconnect.v1.FetchReadTokenResponse"> & {
  /**
   * The token content.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Expiration timestamp. Can be empty if unknown or non-expiring.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 2;
   */
  expirationTime?: Timestamp;

  /**
   * The git_username to specify when making a git clone with the
   * token. For example, for GitHub GitRepositoryLinks, this would be
   * "x-access-token"
   *
   * @generated from field: string git_username = 3;
   */
  gitUsername: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchReadTokenResponse.
 * Use `create(FetchReadTokenResponseSchema)` to create a new message.
 */
export const FetchReadTokenResponseSchema: GenMessage<FetchReadTokenResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 19);

/**
 * Message for responding to get read/write token.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchReadWriteTokenResponse
 */
export type FetchReadWriteTokenResponse = Message<"google.cloud.developerconnect.v1.FetchReadWriteTokenResponse"> & {
  /**
   * The token content.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Expiration timestamp. Can be empty if unknown or non-expiring.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 2;
   */
  expirationTime?: Timestamp;

  /**
   * The git_username to specify when making a git clone with the
   * token. For example, for GitHub GitRepositoryLinks, this would be
   * "x-access-token"
   *
   * @generated from field: string git_username = 3;
   */
  gitUsername: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchReadWriteTokenResponse.
 * Use `create(FetchReadWriteTokenResponseSchema)` to create a new message.
 */
export const FetchReadWriteTokenResponseSchema: GenMessage<FetchReadWriteTokenResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 20);

/**
 * Request message for FetchLinkableGitRepositoriesRequest.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesRequest
 */
export type FetchLinkableGitRepositoriesRequest = Message<"google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesRequest"> & {
  /**
   * Required. The name of the Connection.
   * Format: `projects/*\/locations/*\/connections/*`.
   *
   * @generated from field: string connection = 1;
   */
  connection: string;

  /**
   * Optional. Number of results to return in the list. Defaults to 20.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Page start.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesRequest.
 * Use `create(FetchLinkableGitRepositoriesRequestSchema)` to create a new message.
 */
export const FetchLinkableGitRepositoriesRequestSchema: GenMessage<FetchLinkableGitRepositoriesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 21);

/**
 * Response message for FetchLinkableGitRepositories.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesResponse
 */
export type FetchLinkableGitRepositoriesResponse = Message<"google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesResponse"> & {
  /**
   * The git repositories that can be linked to the connection.
   *
   * @generated from field: repeated google.cloud.developerconnect.v1.LinkableGitRepository linkable_git_repositories = 1;
   */
  linkableGitRepositories: LinkableGitRepository[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchLinkableGitRepositoriesResponse.
 * Use `create(FetchLinkableGitRepositoriesResponseSchema)` to create a new message.
 */
export const FetchLinkableGitRepositoriesResponseSchema: GenMessage<FetchLinkableGitRepositoriesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 22);

/**
 * LinkableGitRepository represents a git repository that can be linked to a
 * connection.
 *
 * @generated from message google.cloud.developerconnect.v1.LinkableGitRepository
 */
export type LinkableGitRepository = Message<"google.cloud.developerconnect.v1.LinkableGitRepository"> & {
  /**
   * The clone uri of the repository.
   *
   * @generated from field: string clone_uri = 1;
   */
  cloneUri: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.LinkableGitRepository.
 * Use `create(LinkableGitRepositorySchema)` to create a new message.
 */
export const LinkableGitRepositorySchema: GenMessage<LinkableGitRepository> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 23);

/**
 * Request for fetching github installations.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchGitHubInstallationsRequest
 */
export type FetchGitHubInstallationsRequest = Message<"google.cloud.developerconnect.v1.FetchGitHubInstallationsRequest"> & {
  /**
   * Required. The resource name of the connection in the format
   * `projects/*\/locations/*\/connections/*`.
   *
   * @generated from field: string connection = 1;
   */
  connection: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchGitHubInstallationsRequest.
 * Use `create(FetchGitHubInstallationsRequestSchema)` to create a new message.
 */
export const FetchGitHubInstallationsRequestSchema: GenMessage<FetchGitHubInstallationsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 24);

/**
 * Response of fetching github installations.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse
 */
export type FetchGitHubInstallationsResponse = Message<"google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse"> & {
  /**
   * List of installations available to the OAuth user (for github.com)
   * or all the installations (for GitHub enterprise).
   *
   * @generated from field: repeated google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse.Installation installations = 1;
   */
  installations: FetchGitHubInstallationsResponse_Installation[];
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse.
 * Use `create(FetchGitHubInstallationsResponseSchema)` to create a new message.
 */
export const FetchGitHubInstallationsResponseSchema: GenMessage<FetchGitHubInstallationsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 25);

/**
 * Represents an installation of the GitHub App.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse.Installation
 */
export type FetchGitHubInstallationsResponse_Installation = Message<"google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse.Installation"> & {
  /**
   * ID of the installation in GitHub.
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * Name of the GitHub user or organization that owns this installation.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Either "user" or "organization".
   *
   * @generated from field: string type = 3;
   */
  type: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchGitHubInstallationsResponse.Installation.
 * Use `create(FetchGitHubInstallationsResponse_InstallationSchema)` to create a new message.
 */
export const FetchGitHubInstallationsResponse_InstallationSchema: GenMessage<FetchGitHubInstallationsResponse_Installation> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 25, 0);

/**
 * Request for fetching git refs.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchGitRefsRequest
 */
export type FetchGitRefsRequest = Message<"google.cloud.developerconnect.v1.FetchGitRefsRequest"> & {
  /**
   * Required. The resource name of GitRepositoryLink in the format
   * `projects/*\/locations/*\/connections/*\/gitRepositoryLinks/*`.
   *
   * @generated from field: string git_repository_link = 1;
   */
  gitRepositoryLink: string;

  /**
   * Required. Type of refs to fetch.
   *
   * @generated from field: google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType ref_type = 2;
   */
  refType: FetchGitRefsRequest_RefType;

  /**
   * Optional. Number of results to return in the list. Default to 20.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * Optional. Page start.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchGitRefsRequest.
 * Use `create(FetchGitRefsRequestSchema)` to create a new message.
 */
export const FetchGitRefsRequestSchema: GenMessage<FetchGitRefsRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 26);

/**
 * Type of refs.
 *
 * @generated from enum google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType
 */
export enum FetchGitRefsRequest_RefType {
  /**
   * No type specified.
   *
   * @generated from enum value: REF_TYPE_UNSPECIFIED = 0;
   */
  REF_TYPE_UNSPECIFIED = 0,

  /**
   * To fetch tags.
   *
   * @generated from enum value: TAG = 1;
   */
  TAG = 1,

  /**
   * To fetch branches.
   *
   * @generated from enum value: BRANCH = 2;
   */
  BRANCH = 2,
}

/**
 * Describes the enum google.cloud.developerconnect.v1.FetchGitRefsRequest.RefType.
 */
export const FetchGitRefsRequest_RefTypeSchema: GenEnum<FetchGitRefsRequest_RefType> = /*@__PURE__*/
  enumDesc(file_google_cloud_developerconnect_v1_developer_connect, 26, 0);

/**
 * Response for fetching git refs.
 *
 * @generated from message google.cloud.developerconnect.v1.FetchGitRefsResponse
 */
export type FetchGitRefsResponse = Message<"google.cloud.developerconnect.v1.FetchGitRefsResponse"> & {
  /**
   * Name of the refs fetched.
   *
   * @generated from field: repeated string ref_names = 1;
   */
  refNames: string[];

  /**
   * A token identifying a page of results the server should return.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.developerconnect.v1.FetchGitRefsResponse.
 * Use `create(FetchGitRefsResponseSchema)` to create a new message.
 */
export const FetchGitRefsResponseSchema: GenMessage<FetchGitRefsResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_developerconnect_v1_developer_connect, 27);

/**
 * Service describing handlers for resources
 *
 * @generated from service google.cloud.developerconnect.v1.DeveloperConnect
 */
export const DeveloperConnect: GenService<{
  /**
   * Lists Connections in a given project and location.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.ListConnections
   */
  listConnections: {
    methodKind: "unary";
    input: typeof ListConnectionsRequestSchema;
    output: typeof ListConnectionsResponseSchema;
  },
  /**
   * Gets details of a single Connection.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.GetConnection
   */
  getConnection: {
    methodKind: "unary";
    input: typeof GetConnectionRequestSchema;
    output: typeof ConnectionSchema;
  },
  /**
   * Creates a new Connection in a given project and location.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.CreateConnection
   */
  createConnection: {
    methodKind: "unary";
    input: typeof CreateConnectionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the parameters of a single Connection.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.UpdateConnection
   */
  updateConnection: {
    methodKind: "unary";
    input: typeof UpdateConnectionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single Connection.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.DeleteConnection
   */
  deleteConnection: {
    methodKind: "unary";
    input: typeof DeleteConnectionRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
   * Connect will configure the Git Repository to send webhook events to
   * Developer Connect. Connections that use Firebase GitHub Application will
   * have events forwarded to the Firebase service. All other Connections will
   * have events forwarded to Cloud Build.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.CreateGitRepositoryLink
   */
  createGitRepositoryLink: {
    methodKind: "unary";
    input: typeof CreateGitRepositoryLinkRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a single GitRepositoryLink.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.DeleteGitRepositoryLink
   */
  deleteGitRepositoryLink: {
    methodKind: "unary";
    input: typeof DeleteGitRepositoryLinkRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists GitRepositoryLinks in a given project, location, and connection.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.ListGitRepositoryLinks
   */
  listGitRepositoryLinks: {
    methodKind: "unary";
    input: typeof ListGitRepositoryLinksRequestSchema;
    output: typeof ListGitRepositoryLinksResponseSchema;
  },
  /**
   * Gets details of a single GitRepositoryLink.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.GetGitRepositoryLink
   */
  getGitRepositoryLink: {
    methodKind: "unary";
    input: typeof GetGitRepositoryLinkRequestSchema;
    output: typeof GitRepositoryLinkSchema;
  },
  /**
   * Fetches read/write token of a given gitRepositoryLink.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.FetchReadWriteToken
   */
  fetchReadWriteToken: {
    methodKind: "unary";
    input: typeof FetchReadWriteTokenRequestSchema;
    output: typeof FetchReadWriteTokenResponseSchema;
  },
  /**
   * Fetches read token of a given gitRepositoryLink.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.FetchReadToken
   */
  fetchReadToken: {
    methodKind: "unary";
    input: typeof FetchReadTokenRequestSchema;
    output: typeof FetchReadTokenResponseSchema;
  },
  /**
   * FetchLinkableGitRepositories returns a list of git repositories from an SCM
   * that are available to be added to a Connection.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.FetchLinkableGitRepositories
   */
  fetchLinkableGitRepositories: {
    methodKind: "unary";
    input: typeof FetchLinkableGitRepositoriesRequestSchema;
    output: typeof FetchLinkableGitRepositoriesResponseSchema;
  },
  /**
   * FetchGitHubInstallations returns the list of GitHub Installations that
   * are available to be added to a Connection.
   * For github.com, only installations accessible to the authorizer token
   * are returned. For GitHub Enterprise, all installations are returned.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.FetchGitHubInstallations
   */
  fetchGitHubInstallations: {
    methodKind: "unary";
    input: typeof FetchGitHubInstallationsRequestSchema;
    output: typeof FetchGitHubInstallationsResponseSchema;
  },
  /**
   * Fetch the list of branches or tags for a given repository.
   *
   * @generated from rpc google.cloud.developerconnect.v1.DeveloperConnect.FetchGitRefs
   */
  fetchGitRefs: {
    methodKind: "unary";
    input: typeof FetchGitRefsRequestSchema;
    output: typeof FetchGitRefsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_developerconnect_v1_developer_connect, 0);

