// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/lifesciences/v2beta/workflows.proto (package google.cloud.lifesciences.v2beta, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Code } from "../../../rpc/code_pb";
import { file_google_rpc_code } from "../../../rpc/code_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/lifesciences/v2beta/workflows.proto.
 */
export const file_google_cloud_lifesciences_v2beta_workflows: GenFile = /*@__PURE__*/
  fileDesc("CjBnb29nbGUvY2xvdWQvbGlmZXNjaWVuY2VzL3YyYmV0YS93b3JrZmxvd3MucHJvdG8SIGdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhIv8BChJSdW5QaXBlbGluZVJlcXVlc3QSDgoGcGFyZW50GAQgASgJEkEKCHBpcGVsaW5lGAEgASgLMiouZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuUGlwZWxpbmVCA+BBAhJQCgZsYWJlbHMYAiADKAsyQC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5SdW5QaXBlbGluZVJlcXVlc3QuTGFiZWxzRW50cnkSFQoNcHViX3N1Yl90b3BpYxgDIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIhUKE1J1blBpcGVsaW5lUmVzcG9uc2UigAMKCFBpcGVsaW5lEjkKB2FjdGlvbnMYASADKAsyKC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5BY3Rpb24SPgoJcmVzb3VyY2VzGAIgASgLMisuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuUmVzb3VyY2VzElAKC2Vudmlyb25tZW50GAMgAygLMjsuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuUGlwZWxpbmUuRW52aXJvbm1lbnRFbnRyeRJHChVlbmNyeXB0ZWRfZW52aXJvbm1lbnQYBSABKAsyKC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5TZWNyZXQSKgoHdGltZW91dBgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhoyChBFbnZpcm9ubWVudEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiygcKBkFjdGlvbhIWCg5jb250YWluZXJfbmFtZRgBIAEoCRIWCglpbWFnZV91cmkYAiABKAlCA+BBAhIQCghjb21tYW5kcxgDIAMoCRISCgplbnRyeXBvaW50GAQgASgJEk4KC2Vudmlyb25tZW50GAUgAygLMjkuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuQWN0aW9uLkVudmlyb25tZW50RW50cnkSRwoVZW5jcnlwdGVkX2Vudmlyb25tZW50GBUgASgLMiguZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuU2VjcmV0EhUKDXBpZF9uYW1lc3BhY2UYBiABKAkSUQoNcG9ydF9tYXBwaW5ncxgIIAMoCzI6Lmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLkFjdGlvbi5Qb3J0TWFwcGluZ3NFbnRyeRI3CgZtb3VudHMYCSADKAsyJy5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5Nb3VudBJECgZsYWJlbHMYCiADKAsyNC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5BY3Rpb24uTGFiZWxzRW50cnkSPQoLY3JlZGVudGlhbHMYCyABKAsyKC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5TZWNyZXQSKgoHdGltZW91dBgMIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIaChJpZ25vcmVfZXhpdF9zdGF0dXMYDSABKAgSGQoRcnVuX2luX2JhY2tncm91bmQYDiABKAgSEgoKYWx3YXlzX3J1bhgPIAEoCBITCgtlbmFibGVfZnVzZRgQIAEoCBIdChVwdWJsaXNoX2V4cG9zZWRfcG9ydHMYESABKAgSHgoWZGlzYWJsZV9pbWFnZV9wcmVmZXRjaBgSIAEoCBImCh5kaXNhYmxlX3N0YW5kYXJkX2Vycm9yX2NhcHR1cmUYEyABKAgSHgoWYmxvY2tfZXh0ZXJuYWxfbmV0d29yaxgUIAEoCBoyChBFbnZpcm9ubWVudEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMwoRUG9ydE1hcHBpbmdzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ARotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIi8KBlNlY3JldBIQCghrZXlfbmFtZRgBIAEoCRITCgtjaXBoZXJfdGV4dBgCIAEoCSI2CgVNb3VudBIMCgRkaXNrGAEgASgJEgwKBHBhdGgYAiABKAkSEQoJcmVhZF9vbmx5GAMgASgIInYKCVJlc291cmNlcxIPCgdyZWdpb25zGAIgAygJEg0KBXpvbmVzGAMgAygJEkkKD3ZpcnR1YWxfbWFjaGluZRgEIAEoCzIwLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLlZpcnR1YWxNYWNoaW5lIrwFCg5WaXJ0dWFsTWFjaGluZRIZCgxtYWNoaW5lX3R5cGUYASABKAlCA+BBAhITCgtwcmVlbXB0aWJsZRgCIAEoCBJMCgZsYWJlbHMYAyADKAsyPC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5WaXJ0dWFsTWFjaGluZS5MYWJlbHNFbnRyeRI1CgVkaXNrcxgEIAMoCzImLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLkRpc2sSOgoHbmV0d29yaxgFIAEoCzIpLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLk5ldHdvcmsSQwoMYWNjZWxlcmF0b3JzGAYgAygLMi0uZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuQWNjZWxlcmF0b3ISSQoPc2VydmljZV9hY2NvdW50GAcgASgLMjAuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuU2VydmljZUFjY291bnQSGQoRYm9vdF9kaXNrX3NpemVfZ2IYCCABKAUSFAoMY3B1X3BsYXRmb3JtGAkgASgJEhIKCmJvb3RfaW1hZ2UYCiABKAkSIQoVbnZpZGlhX2RyaXZlcl92ZXJzaW9uGAsgASgJQgIYARIlCh1lbmFibGVfc3RhY2tkcml2ZXJfbW9uaXRvcmluZxgMIAEoCBIbChNkb2NrZXJfY2FjaGVfaW1hZ2VzGA0gAygJEjkKB3ZvbHVtZXMYDiADKAsyKC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5Wb2x1bWUSEwoLcmVzZXJ2YXRpb24YDyABKAkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIvCg5TZXJ2aWNlQWNjb3VudBINCgVlbWFpbBgBIAEoCRIOCgZzY29wZXMYAiADKAkiKgoLQWNjZWxlcmF0b3ISDAoEdHlwZRgBIAEoCRINCgVjb3VudBgCIAEoAyJLCgdOZXR3b3JrEg8KB25ldHdvcmsYASABKAkSGwoTdXNlX3ByaXZhdGVfYWRkcmVzcxgCIAEoCBISCgpzdWJuZXR3b3JrGAMgASgJIkkKBERpc2sSDAoEbmFtZRgBIAEoCRIPCgdzaXplX2diGAIgASgFEgwKBHR5cGUYAyABKAkSFAoMc291cmNlX2ltYWdlGAQgASgJIvoBCgZWb2x1bWUSDgoGdm9sdW1lGAEgASgJEksKD3BlcnNpc3RlbnRfZGlzaxgCIAEoCzIwLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLlBlcnNpc3RlbnREaXNrSAASRwoNZXhpc3RpbmdfZGlzaxgDIAEoCzIuLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLkV4aXN0aW5nRGlza0gAEj8KCW5mc19tb3VudBgEIAEoCzIqLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLk5GU01vdW50SABCCQoHc3RvcmFnZSJFCg5QZXJzaXN0ZW50RGlzaxIPCgdzaXplX2diGAEgASgFEgwKBHR5cGUYAiABKAkSFAoMc291cmNlX2ltYWdlGAMgASgJIhwKDEV4aXN0aW5nRGlzaxIMCgRkaXNrGAEgASgJIhoKCE5GU01vdW50Eg4KBnRhcmdldBgBIAEoCSKeAwoITWV0YWRhdGESPAoIcGlwZWxpbmUYASABKAsyKi5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5QaXBlbGluZRJGCgZsYWJlbHMYAiADKAsyNi5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5NZXRhZGF0YS5MYWJlbHNFbnRyeRI3CgZldmVudHMYAyADKAsyJy5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5FdmVudBIvCgtjcmVhdGVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKc3RhcnRfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhUKDXB1Yl9zdWJfdG9waWMYByABKAkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL1BgoFRXZlbnQSLQoJdGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBITCgtkZXNjcmlwdGlvbhgCIAEoCRJBCgdkZWxheWVkGBEgASgLMi4uZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuRGVsYXllZEV2ZW50SAASUAoPd29ya2VyX2Fzc2lnbmVkGBIgASgLMjUuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuV29ya2VyQXNzaWduZWRFdmVudEgAElAKD3dvcmtlcl9yZWxlYXNlZBgTIAEoCzI1Lmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLldvcmtlclJlbGVhc2VkRXZlbnRIABJKCgxwdWxsX3N0YXJ0ZWQYFCABKAsyMi5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5QdWxsU3RhcnRlZEV2ZW50SAASSgoMcHVsbF9zdG9wcGVkGBUgASgLMjIuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuUHVsbFN0b3BwZWRFdmVudEgAElQKEWNvbnRhaW5lcl9zdGFydGVkGBYgASgLMjcuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuQ29udGFpbmVyU3RhcnRlZEV2ZW50SAASVAoRY29udGFpbmVyX3N0b3BwZWQYFyABKAsyNy5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5Db250YWluZXJTdG9wcGVkRXZlbnRIABJSChBjb250YWluZXJfa2lsbGVkGBggASgLMjYuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuQ29udGFpbmVyS2lsbGVkRXZlbnRIABJdChZ1bmV4cGVjdGVkX2V4aXRfc3RhdHVzGBkgASgLMjsuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuVW5leHBlY3RlZEV4aXRTdGF0dXNFdmVudEgAEj8KBmZhaWxlZBgaIAEoCzItLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhLkZhaWxlZEV2ZW50SABCCQoHZGV0YWlscyIuCgxEZWxheWVkRXZlbnQSDQoFY2F1c2UYASABKAkSDwoHbWV0cmljcxgCIAMoCSJLChNXb3JrZXJBc3NpZ25lZEV2ZW50EgwKBHpvbmUYASABKAkSEAoIaW5zdGFuY2UYAiABKAkSFAoMbWFjaGluZV90eXBlGAMgASgJIjUKE1dvcmtlclJlbGVhc2VkRXZlbnQSDAoEem9uZRgBIAEoCRIQCghpbnN0YW5jZRgCIAEoCSIlChBQdWxsU3RhcnRlZEV2ZW50EhEKCWltYWdlX3VyaRgBIAEoCSIlChBQdWxsU3RvcHBlZEV2ZW50EhEKCWltYWdlX3VyaRgBIAEoCSLVAQoVQ29udGFpbmVyU3RhcnRlZEV2ZW50EhEKCWFjdGlvbl9pZBgBIAEoBRJgCg1wb3J0X21hcHBpbmdzGAIgAygLMkkuZ29vZ2xlLmNsb3VkLmxpZmVzY2llbmNlcy52MmJldGEuQ29udGFpbmVyU3RhcnRlZEV2ZW50LlBvcnRNYXBwaW5nc0VudHJ5EhIKCmlwX2FkZHJlc3MYAyABKAkaMwoRUG9ydE1hcHBpbmdzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASJPChVDb250YWluZXJTdG9wcGVkRXZlbnQSEQoJYWN0aW9uX2lkGAEgASgFEhMKC2V4aXRfc3RhdHVzGAIgASgFEg4KBnN0ZGVychgDIAEoCSJDChlVbmV4cGVjdGVkRXhpdFN0YXR1c0V2ZW50EhEKCWFjdGlvbl9pZBgBIAEoBRITCgtleGl0X3N0YXR1cxgCIAEoBSIpChRDb250YWluZXJLaWxsZWRFdmVudBIRCglhY3Rpb25faWQYASABKAUiPAoLRmFpbGVkRXZlbnQSHgoEY29kZRgBIAEoDjIQLmdvb2dsZS5ycGMuQ29kZRINCgVjYXVzZRgCIAEoCTKyAgoWV29ya2Zsb3dzU2VydmljZVYyQmV0YRLGAQoLUnVuUGlwZWxpbmUSNC5nb29nbGUuY2xvdWQubGlmZXNjaWVuY2VzLnYyYmV0YS5SdW5QaXBlbGluZVJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uImLKQR8KE1J1blBpcGVsaW5lUmVzcG9uc2USCE1ldGFkYXRhgtPkkwI6OgEqIjUvdjJiZXRhL3twYXJlbnQ9cHJvamVjdHMvKi9sb2NhdGlvbnMvKn0vcGlwZWxpbmVzOnJ1bhpPykEbbGlmZXNjaWVuY2VzLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybUL1AQokY29tLmdvb2dsZS5jbG91ZC5saWZlc2NpZW5jZXMudjJiZXRhQg5Xb3JrZmxvd3NQcm90b1ABWkhjbG91ZC5nb29nbGUuY29tL2dvL2xpZmVzY2llbmNlcy9hcGl2MmJldGEvbGlmZXNjaWVuY2VzcGI7bGlmZXNjaWVuY2VzcGKiAgRDTFNXqgIgR29vZ2xlLkNsb3VkLkxpZmVTY2llbmNlcy5WMkJldGHKAiBHb29nbGVcQ2xvdWRcTGlmZVNjaWVuY2VzXFYyYmV0YeoCI0dvb2dsZTo6Q2xvdWQ6OkxpZmVTY2llbmNlczo6VjJiZXRhYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_timestamp, file_google_rpc_code]);

/**
 * The arguments to the `RunPipeline` method. The requesting user must have
 * the `iam.serviceAccounts.actAs` permission for the Cloud Life Sciences
 * service account or the request will fail.
 *
 * @generated from message google.cloud.lifesciences.v2beta.RunPipelineRequest
 */
export type RunPipelineRequest = Message<"google.cloud.lifesciences.v2beta.RunPipelineRequest"> & {
  /**
   * The project and location that this request should be executed against.
   *
   * @generated from field: string parent = 4;
   */
  parent: string;

  /**
   * Required. The description of the pipeline to run.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  /**
   * User-defined labels to associate with the returned operation. These
   * labels are not propagated to any Google Cloud Platform resources used by
   * the operation, and can be modified at any time.
   *
   * To associate labels with resources created while executing the operation,
   * see the appropriate resource message (for example, `VirtualMachine`).
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * The name of an existing Pub/Sub topic.  The server will publish
   * messages to this topic whenever the status of the operation changes.
   * The Life Sciences Service Agent account must have publisher permissions to
   * the specified topic or notifications will not be sent.
   *
   * @generated from field: string pub_sub_topic = 3;
   */
  pubSubTopic: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.RunPipelineRequest.
 * Use `create(RunPipelineRequestSchema)` to create a new message.
 */
export const RunPipelineRequestSchema: GenMessage<RunPipelineRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 0);

/**
 * The response to the RunPipeline method, returned in the operation's result
 * field on success.
 *
 * @generated from message google.cloud.lifesciences.v2beta.RunPipelineResponse
 */
export type RunPipelineResponse = Message<"google.cloud.lifesciences.v2beta.RunPipelineResponse"> & {
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.RunPipelineResponse.
 * Use `create(RunPipelineResponseSchema)` to create a new message.
 */
export const RunPipelineResponseSchema: GenMessage<RunPipelineResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 1);

/**
 * Specifies a series of actions to execute, expressed as Docker containers.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Pipeline
 */
export type Pipeline = Message<"google.cloud.lifesciences.v2beta.Pipeline"> & {
  /**
   * The list of actions to execute, in the order they are specified.
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Action actions = 1;
   */
  actions: Action[];

  /**
   * The resources required for execution.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Resources resources = 2;
   */
  resources?: Resources;

  /**
   * The environment to pass into every action. Each action can also specify
   * additional environment variables but cannot delete an entry from this map
   * (though they can overwrite it with a different value).
   *
   * @generated from field: map<string, string> environment = 3;
   */
  environment: { [key: string]: string };

  /**
   * The encrypted environment to pass into every action. Each action can also
   * specify its own encrypted environment.
   *
   * The secret must decrypt to a JSON-encoded dictionary where key-value pairs
   * serve as environment variable names and their values. The decoded
   * environment variables can overwrite the values specified by the
   * `environment` field.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Secret encrypted_environment = 5;
   */
  encryptedEnvironment?: Secret;

  /**
   * The maximum amount of time to give the pipeline to complete.  This includes
   * the time spent waiting for a worker to be allocated.  If the pipeline fails
   * to complete before the timeout, it will be cancelled and the error code
   * will be set to DEADLINE_EXCEEDED.
   *
   * If unspecified, it will default to 7 days.
   *
   * @generated from field: google.protobuf.Duration timeout = 4;
   */
  timeout?: Duration;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Pipeline.
 * Use `create(PipelineSchema)` to create a new message.
 */
export const PipelineSchema: GenMessage<Pipeline> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 2);

/**
 * Specifies a single action that runs a Docker container.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Action
 */
export type Action = Message<"google.cloud.lifesciences.v2beta.Action"> & {
  /**
   * An optional name for the container. The container hostname will be set to
   * this name, making it useful for inter-container communication. The name
   * must contain only upper and lowercase alphanumeric characters and hyphens
   * and cannot start with a hyphen.
   *
   * @generated from field: string container_name = 1;
   */
  containerName: string;

  /**
   * Required. The URI to pull the container image from. Note that all images
   * referenced by actions in the pipeline are pulled before the first action
   * runs. If multiple actions reference the same image, it is only pulled once,
   * ensuring that the same image is used for all actions in a single pipeline.
   *
   * The image URI can be either a complete host and image specification (e.g.,
   * quay.io/biocontainers/samtools), a library and image name (e.g.,
   * google/cloud-sdk) or a bare image name ('bash') to pull from the default
   * library.  No schema is required in any of these cases.
   *
   * If the specified image is not public, the service account specified for
   * the Virtual Machine must have access to pull the images from GCR, or
   * appropriate credentials must be specified in the
   * [google.cloud.lifesciences.v2beta.Action.credentials][google.cloud.lifesciences.v2beta.Action.credentials]
   * field.
   *
   * @generated from field: string image_uri = 2;
   */
  imageUri: string;

  /**
   * If specified, overrides the `CMD` specified in the container. If the
   * container also has an `ENTRYPOINT` the values are used as entrypoint
   * arguments. Otherwise, they are used as a command and arguments to run
   * inside the container.
   *
   * @generated from field: repeated string commands = 3;
   */
  commands: string[];

  /**
   * If specified, overrides the `ENTRYPOINT` specified in the container.
   *
   * @generated from field: string entrypoint = 4;
   */
  entrypoint: string;

  /**
   * The environment to pass into the container. This environment is merged
   * with values specified in the
   * [google.cloud.lifesciences.v2beta.Pipeline][google.cloud.lifesciences.v2beta.Pipeline]
   * message, overwriting any duplicate values.
   *
   * In addition to the values passed here, a few other values are
   * automatically injected into the environment. These cannot be hidden or
   * overwritten.
   *
   * `GOOGLE_PIPELINE_FAILED` will be set to "1" if the pipeline failed
   * because an action has exited with a non-zero status (and did not have the
   * `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional
   * debug or logging actions should execute.
   *
   * `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last
   * non-background action that executed. This can be used by workflow engine
   * authors to determine whether an individual action has succeeded or failed.
   *
   * @generated from field: map<string, string> environment = 5;
   */
  environment: { [key: string]: string };

  /**
   * The encrypted environment to pass into the container. This environment is
   * merged with values specified in the
   * [google.cloud.lifesciences.v2beta.Pipeline][google.cloud.lifesciences.v2beta.Pipeline]
   * message, overwriting any duplicate values.
   *
   * The secret must decrypt to a JSON-encoded dictionary where key-value pairs
   * serve as environment variable names and their values. The decoded
   * environment variables can overwrite the values specified by the
   * `environment` field.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Secret encrypted_environment = 21;
   */
  encryptedEnvironment?: Secret;

  /**
   * An optional identifier for a PID namespace to run the action inside.
   * Multiple actions should use the same string to share a namespace.  If
   * unspecified, a separate isolated namespace is used.
   *
   * @generated from field: string pid_namespace = 6;
   */
  pidNamespace: string;

  /**
   * A map of containers to host port mappings for this container. If the
   * container already specifies exposed ports, use the
   * `PUBLISH_EXPOSED_PORTS` flag instead.
   *
   * The host port number must be less than 65536. If it is zero, an unused
   * random port is assigned. To determine the resulting port number, consult
   * the `ContainerStartedEvent` in the operation metadata.
   *
   * @generated from field: map<int32, int32> port_mappings = 8;
   */
  portMappings: { [key: number]: number };

  /**
   * A list of mounts to make available to the action.
   *
   * In addition to the values specified here, every action has a special
   * virtual disk mounted under `/google` that contains log files and other
   * operational components.
   *
   * <ul>
   *   <li><code>/google/logs</code> All logs written during the pipeline
   *   execution.</li>
   *   <li><code>/google/logs/output</code> The combined standard output and
   *   standard error of all actions run as part of the pipeline
   *   execution.</li>
   *   <li><code>/google/logs/action/*\/stdout</code> The complete contents of
   *   each individual action's standard output.</li>
   *   <li><code>/google/logs/action/*\/stderr</code> The complete contents of
   *   each individual action's standard error output.</li>
   * </ul>
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Mount mounts = 9;
   */
  mounts: Mount[];

  /**
   * Labels to associate with the action. This field is provided to assist
   * workflow engine authors in identifying actions (for example, to indicate
   * what sort of action they perform, such as localization or debugging).
   * They are returned in the operation metadata, but are otherwise ignored.
   *
   * @generated from field: map<string, string> labels = 10;
   */
  labels: { [key: string]: string };

  /**
   * If the specified image is hosted on a private registry other than Google
   * Container Registry, the credentials required to pull the image must be
   * specified here as an encrypted secret.
   *
   * The secret must decrypt to a JSON-encoded dictionary containing both
   * `username` and `password` keys.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Secret credentials = 11;
   */
  credentials?: Secret;

  /**
   * The maximum amount of time to give the action to complete. If the action
   * fails to complete before the timeout, it will be terminated and the exit
   * status will be non-zero. The pipeline will continue or terminate based
   * on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.
   *
   * @generated from field: google.protobuf.Duration timeout = 12;
   */
  timeout?: Duration;

  /**
   * Normally, a non-zero exit status causes the pipeline to fail. This flag
   * allows execution of other actions to continue instead.
   *
   * @generated from field: bool ignore_exit_status = 13;
   */
  ignoreExitStatus: boolean;

  /**
   * This flag allows an action to continue running in the background while
   * executing subsequent actions. This is useful to provide services to
   * other actions (or to provide debugging support tools like SSH servers).
   *
   * @generated from field: bool run_in_background = 14;
   */
  runInBackground: boolean;

  /**
   * By default, after an action fails, no further actions are run. This flag
   * indicates that this action must be run even if the pipeline has already
   * failed. This is useful for actions that copy output files off of the VM
   * or for debugging. Note that no actions will be run if image prefetching
   * fails.
   *
   * @generated from field: bool always_run = 15;
   */
  alwaysRun: boolean;

  /**
   * Enable access to the FUSE device for this action. Filesystems can then
   * be mounted into disks shared with other actions. The other actions do
   * not need the `enable_fuse` flag to access the mounted filesystem.
   *
   * This has the effect of causing the container to be executed with
   * `CAP_SYS_ADMIN` and exposes `/dev/fuse` to the container, so use it only
   * for containers you trust.
   *
   * @generated from field: bool enable_fuse = 16;
   */
  enableFuse: boolean;

  /**
   * Exposes all ports specified by `EXPOSE` statements in the container. To
   * discover the host side port numbers, consult the `ACTION_STARTED` event
   * in the operation metadata.
   *
   * @generated from field: bool publish_exposed_ports = 17;
   */
  publishExposedPorts: boolean;

  /**
   * All container images are typically downloaded before any actions are
   * executed. This helps prevent typos in URIs or issues like lack of disk
   * space from wasting large amounts of compute resources.
   *
   * If set, this flag prevents the worker from downloading the image until
   * just before the action is executed.
   *
   * @generated from field: bool disable_image_prefetch = 18;
   */
  disableImagePrefetch: boolean;

  /**
   * A small portion of the container's standard error stream is typically
   * captured and returned inside the `ContainerStoppedEvent`. Setting this
   * flag disables this functionality.
   *
   * @generated from field: bool disable_standard_error_capture = 19;
   */
  disableStandardErrorCapture: boolean;

  /**
   * Prevents the container from accessing the external network.
   *
   * @generated from field: bool block_external_network = 20;
   */
  blockExternalNetwork: boolean;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 3);

/**
 * Holds encrypted information that is only decrypted and stored in RAM
 * by the worker VM when running the pipeline.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Secret
 */
export type Secret = Message<"google.cloud.lifesciences.v2beta.Secret"> & {
  /**
   * The name of the Cloud KMS key that will be used to decrypt the secret
   * value. The VM service account must have the required permissions and
   * authentication scopes to invoke the `decrypt` method on the specified key.
   *
   * @generated from field: string key_name = 1;
   */
  keyName: string;

  /**
   * The value of the cipherText response from the `encrypt` method. This field
   * is intentionally unaudited.
   *
   * @generated from field: string cipher_text = 2;
   */
  cipherText: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Secret.
 * Use `create(SecretSchema)` to create a new message.
 */
export const SecretSchema: GenMessage<Secret> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 4);

/**
 * Carries information about a particular disk mount inside a container.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Mount
 */
export type Mount = Message<"google.cloud.lifesciences.v2beta.Mount"> & {
  /**
   * The name of the disk to mount, as specified in the resources section.
   *
   * @generated from field: string disk = 1;
   */
  disk: string;

  /**
   * The path to mount the disk inside the container.
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * If true, the disk is mounted read-only inside the container.
   *
   * @generated from field: bool read_only = 3;
   */
  readOnly: boolean;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Mount.
 * Use `create(MountSchema)` to create a new message.
 */
export const MountSchema: GenMessage<Mount> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 5);

/**
 * The system resources for the pipeline run.
 *
 * At least one zone or region must be specified or the pipeline run will fail.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Resources
 */
export type Resources = Message<"google.cloud.lifesciences.v2beta.Resources"> & {
  /**
   * The list of regions allowed for VM allocation. If set, the `zones` field
   * must not be set.
   *
   * @generated from field: repeated string regions = 2;
   */
  regions: string[];

  /**
   * The list of zones allowed for VM allocation. If set, the `regions` field
   * must not be set.
   *
   * @generated from field: repeated string zones = 3;
   */
  zones: string[];

  /**
   * The virtual machine specification.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.VirtualMachine virtual_machine = 4;
   */
  virtualMachine?: VirtualMachine;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Resources.
 * Use `create(ResourcesSchema)` to create a new message.
 */
export const ResourcesSchema: GenMessage<Resources> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 6);

/**
 * Carries information about a Compute Engine VM resource.
 *
 * @generated from message google.cloud.lifesciences.v2beta.VirtualMachine
 */
export type VirtualMachine = Message<"google.cloud.lifesciences.v2beta.VirtualMachine"> & {
  /**
   * Required. The machine type of the virtual machine to create. Must be the
   * short name of a standard machine type (such as "n1-standard-1") or a custom
   * machine type (such as "custom-1-4096", where "1" indicates the number of
   * vCPUs and "4096" indicates the memory in MB). See [Creating an instance
   * with a custom machine
   * type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create)
   * for more specifications on creating a custom machine type.
   *
   * @generated from field: string machine_type = 1;
   */
  machineType: string;

  /**
   * If true, allocate a preemptible VM.
   *
   * @generated from field: bool preemptible = 2;
   */
  preemptible: boolean;

  /**
   * Optional set of labels to apply to the VM and any attached disk resources.
   * These labels must adhere to the [name and value
   * restrictions](https://cloud.google.com/compute/docs/labeling-resources) on
   * VM labels imposed by Compute Engine.
   *
   * Labels keys with the prefix 'google-' are reserved for use by Google.
   *
   * Labels applied at creation time to the VM. Applied on a best-effort basis
   * to attached disk resources shortly after VM creation.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The list of disks to create and attach to the VM.
   *
   * Specify either the `volumes[]` field or the `disks[]` field, but not both.
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Disk disks = 4;
   */
  disks: Disk[];

  /**
   * The VM network configuration.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Network network = 5;
   */
  network?: Network;

  /**
   * The list of accelerators to attach to the VM.
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Accelerator accelerators = 6;
   */
  accelerators: Accelerator[];

  /**
   * The service account to install on the VM. This account does not need
   * any permissions other than those required by the pipeline.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.ServiceAccount service_account = 7;
   */
  serviceAccount?: ServiceAccount;

  /**
   * The size of the boot disk, in GB. The boot disk must be large
   * enough to accommodate all of the Docker images from each action in the
   * pipeline at the same time. If not specified, a small but reasonable
   * default value is used.
   *
   * @generated from field: int32 boot_disk_size_gb = 8;
   */
  bootDiskSizeGb: number;

  /**
   * The CPU platform to request. An instance based on a newer platform can be
   * allocated, but never one with fewer capabilities. The value of this
   * parameter must be a valid Compute Engine CPU platform name (such as "Intel
   * Skylake"). This parameter is only useful for carefully optimized work
   * loads where the CPU platform has a significant impact.
   *
   * For more information about the effect of this parameter, see
   * https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
   *
   * @generated from field: string cpu_platform = 9;
   */
  cpuPlatform: string;

  /**
   * The host operating system image to use.
   *
   * Currently, only Container-Optimized OS images can be used.
   *
   * The default value is `projects/cos-cloud/global/images/family/cos-stable`,
   * which selects the latest stable release of Container-Optimized OS.
   *
   * This option is provided to allow testing against the beta release of the
   * operating system to ensure that the new version does not interact
   * negatively with production pipelines.
   *
   * To test a pipeline against the beta release of Container-Optimized OS,
   * use the value `projects/cos-cloud/global/images/family/cos-beta`.
   *
   * @generated from field: string boot_image = 10;
   */
  bootImage: string;

  /**
   * The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator.
   * The version specified here must be compatible with the GPU libraries
   * contained in the container being executed, and must be one of the drivers
   * hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.
   *
   * @generated from field: string nvidia_driver_version = 11 [deprecated = true];
   * @deprecated
   */
  nvidiaDriverVersion: string;

  /**
   * Whether Stackdriver monitoring should be enabled on the VM.
   *
   * @generated from field: bool enable_stackdriver_monitoring = 12;
   */
  enableStackdriverMonitoring: boolean;

  /**
   * The Compute Engine Disk Images to use as a Docker cache. The disks will be
   * mounted into the Docker folder in a way that the images present in the
   * cache will not need to be pulled. The digests of the cached images must
   * match those of the tags used or the latest version will still be pulled.
   * The root directory of the ext4 image must contain `image` and `overlay2`
   * directories copied from the Docker directory of a VM where the desired
   * Docker images have already been pulled. Any images pulled that are not
   * cached will be stored on the first cache disk instead of the boot disk.
   * Only a single image is supported.
   *
   * @generated from field: repeated string docker_cache_images = 13;
   */
  dockerCacheImages: string[];

  /**
   * The list of disks and other storage to create or attach to the VM.
   *
   * Specify either the `volumes[]` field or the `disks[]` field, but not both.
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Volume volumes = 14;
   */
  volumes: Volume[];

  /**
   * If specified, the VM will only be allocated inside the matching
   * reservation. It will fail if the VM parameters don't match the reservation.
   *
   * @generated from field: string reservation = 15;
   */
  reservation: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.VirtualMachine.
 * Use `create(VirtualMachineSchema)` to create a new message.
 */
export const VirtualMachineSchema: GenMessage<VirtualMachine> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 7);

/**
 * Carries information about a Google Cloud service account.
 *
 * @generated from message google.cloud.lifesciences.v2beta.ServiceAccount
 */
export type ServiceAccount = Message<"google.cloud.lifesciences.v2beta.ServiceAccount"> & {
  /**
   * Email address of the service account. If not specified, the default
   * Compute Engine service account for the project will be used.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * List of scopes to be enabled for this service account on the VM, in
   * addition to the cloud-platform API scope that will be added by default.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.ServiceAccount.
 * Use `create(ServiceAccountSchema)` to create a new message.
 */
export const ServiceAccountSchema: GenMessage<ServiceAccount> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 8);

/**
 * Carries information about an accelerator that can be attached to a VM.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Accelerator
 */
export type Accelerator = Message<"google.cloud.lifesciences.v2beta.Accelerator"> & {
  /**
   * The accelerator type string (for example, "nvidia-tesla-t4").
   *
   * Only NVIDIA GPU accelerators are currently supported. If an NVIDIA GPU is
   * attached, the required runtime libraries will be made available to all
   * containers under `/usr/local/nvidia`. The driver version to install must
   * be specified using the NVIDIA driver version parameter on the virtual
   * machine specification. Note that attaching a GPU increases the worker VM
   * startup time by a few minutes.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * How many accelerators of this type to attach.
   *
   * @generated from field: int64 count = 2;
   */
  count: bigint;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Accelerator.
 * Use `create(AcceleratorSchema)` to create a new message.
 */
export const AcceleratorSchema: GenMessage<Accelerator> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 9);

/**
 * VM networking options.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Network
 */
export type Network = Message<"google.cloud.lifesciences.v2beta.Network"> & {
  /**
   * The network name to attach the VM's network interface to. The value will
   * be prefixed with `global/networks/` unless it contains a `/`, in which
   * case it is assumed to be a fully specified network resource URL.
   *
   * If unspecified, the global default network is used.
   *
   * @generated from field: string network = 1;
   */
  network: string;

  /**
   * If set to true, do not attach a public IP address to the VM. Note that
   * without a public IP address, additional configuration is required to
   * allow the VM to access Google services.
   *
   * See https://cloud.google.com/vpc/docs/configure-private-google-access
   * for more information.
   *
   * @generated from field: bool use_private_address = 2;
   */
  usePrivateAddress: boolean;

  /**
   * If the specified network is configured for custom subnet creation, the
   * name of the subnetwork to attach the instance to must be specified here.
   *
   * The value is prefixed with `regions/*\/subnetworks/` unless it contains a
   * `/`, in which case it is assumed to be a fully specified subnetwork
   * resource URL.
   *
   * If the `*` character appears in the value, it is replaced with the region
   * that the virtual machine has been allocated in.
   *
   * @generated from field: string subnetwork = 3;
   */
  subnetwork: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Network.
 * Use `create(NetworkSchema)` to create a new message.
 */
export const NetworkSchema: GenMessage<Network> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 10);

/**
 * Carries information about a disk that can be attached to a VM.
 *
 * See https://cloud.google.com/compute/docs/disks/performance for more
 * information about disk type, size, and performance considerations.
 *
 * Specify either [`Volume`][google.cloud.lifesciences.v2beta.Volume] or
 * [`Disk`][google.cloud.lifesciences.v2beta.Disk], but not both.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Disk
 */
export type Disk = Message<"google.cloud.lifesciences.v2beta.Disk"> & {
  /**
   * A user-supplied name for the disk. Used when mounting the disk into
   * actions. The name must contain only upper and lowercase alphanumeric
   * characters and hyphens and cannot start with a hyphen.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The size, in GB, of the disk to attach. If the size is not
   * specified, a default is chosen to ensure reasonable I/O performance.
   *
   * If the disk type is specified as `local-ssd`, multiple local drives are
   * automatically combined to provide the requested size. Note, however, that
   * each physical SSD is 375GB in size, and no more than 8 drives can be
   * attached to a single instance.
   *
   * @generated from field: int32 size_gb = 2;
   */
  sizeGb: number;

  /**
   * The Compute Engine disk type. If unspecified, `pd-standard` is used.
   *
   * @generated from field: string type = 3;
   */
  type: string;

  /**
   * An optional image to put on the disk before attaching it to the VM.
   *
   * @generated from field: string source_image = 4;
   */
  sourceImage: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Disk.
 * Use `create(DiskSchema)` to create a new message.
 */
export const DiskSchema: GenMessage<Disk> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 11);

/**
 * Carries information about storage that can be attached to a VM.
 *
 * Specify either [`Volume`][google.cloud.lifesciences.v2beta.Volume] or
 * [`Disk`][google.cloud.lifesciences.v2beta.Disk], but not both.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Volume
 */
export type Volume = Message<"google.cloud.lifesciences.v2beta.Volume"> & {
  /**
   * A user-supplied name for the volume. Used when mounting the volume into
   * [`Actions`][google.cloud.lifesciences.v2beta.Action]. The name must contain
   * only upper and lowercase alphanumeric characters and hyphens and cannot
   * start with a hyphen.
   *
   * @generated from field: string volume = 1;
   */
  volume: string;

  /**
   * @generated from oneof google.cloud.lifesciences.v2beta.Volume.storage
   */
  storage: {
    /**
     * Configuration for a persistent disk.
     *
     * @generated from field: google.cloud.lifesciences.v2beta.PersistentDisk persistent_disk = 2;
     */
    value: PersistentDisk;
    case: "persistentDisk";
  } | {
    /**
     * Configuration for a existing disk.
     *
     * @generated from field: google.cloud.lifesciences.v2beta.ExistingDisk existing_disk = 3;
     */
    value: ExistingDisk;
    case: "existingDisk";
  } | {
    /**
     * Configuration for an NFS mount.
     *
     * @generated from field: google.cloud.lifesciences.v2beta.NFSMount nfs_mount = 4;
     */
    value: NFSMount;
    case: "nfsMount";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Volume.
 * Use `create(VolumeSchema)` to create a new message.
 */
export const VolumeSchema: GenMessage<Volume> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 12);

/**
 * Configuration for a persistent disk to be attached to the VM.
 *
 * See https://cloud.google.com/compute/docs/disks/performance for more
 * information about disk type, size, and performance considerations.
 *
 * @generated from message google.cloud.lifesciences.v2beta.PersistentDisk
 */
export type PersistentDisk = Message<"google.cloud.lifesciences.v2beta.PersistentDisk"> & {
  /**
   * The size, in GB, of the disk to attach. If the size is not
   * specified, a default is chosen to ensure reasonable I/O performance.
   *
   * If the disk type is specified as `local-ssd`, multiple local drives are
   * automatically combined to provide the requested size. Note, however, that
   * each physical SSD is 375GB in size, and no more than 8 drives can be
   * attached to a single instance.
   *
   * @generated from field: int32 size_gb = 1;
   */
  sizeGb: number;

  /**
   * The Compute Engine disk type. If unspecified, `pd-standard` is used.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * An image to put on the disk before attaching it to the VM.
   *
   * @generated from field: string source_image = 3;
   */
  sourceImage: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.PersistentDisk.
 * Use `create(PersistentDiskSchema)` to create a new message.
 */
export const PersistentDiskSchema: GenMessage<PersistentDisk> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 13);

/**
 * Configuration for an existing disk to be attached to the VM.
 *
 * @generated from message google.cloud.lifesciences.v2beta.ExistingDisk
 */
export type ExistingDisk = Message<"google.cloud.lifesciences.v2beta.ExistingDisk"> & {
  /**
   * If `disk` contains slashes, the Cloud Life Sciences API assumes that it is
   * a complete URL for the disk.  If `disk` does not contain slashes, the Cloud
   * Life Sciences API assumes that the disk is a zonal disk and a URL will be
   * generated of the form `zones/<zone>/disks/<disk>`, where `<zone>` is the
   * zone in which the instance is allocated. The disk must be ext4 formatted.
   *
   * If all `Mount` references to this disk have the `read_only` flag set to
   * true, the disk will be attached in `read-only` mode and can be shared with
   * other instances. Otherwise, the disk will be available for writing but
   * cannot be shared.
   *
   * @generated from field: string disk = 1;
   */
  disk: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.ExistingDisk.
 * Use `create(ExistingDiskSchema)` to create a new message.
 */
export const ExistingDiskSchema: GenMessage<ExistingDisk> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 14);

/**
 * Configuration for an `NFSMount` to be attached to the VM.
 *
 * @generated from message google.cloud.lifesciences.v2beta.NFSMount
 */
export type NFSMount = Message<"google.cloud.lifesciences.v2beta.NFSMount"> & {
  /**
   * A target NFS mount. The target must be specified as `address:/mount".
   *
   * @generated from field: string target = 1;
   */
  target: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.NFSMount.
 * Use `create(NFSMountSchema)` to create a new message.
 */
export const NFSMountSchema: GenMessage<NFSMount> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 15);

/**
 * Carries information about the pipeline execution that is returned
 * in the long running operation's metadata field.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Metadata
 */
export type Metadata = Message<"google.cloud.lifesciences.v2beta.Metadata"> & {
  /**
   * The pipeline this operation represents.
   *
   * @generated from field: google.cloud.lifesciences.v2beta.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;

  /**
   * The user-defined labels associated with this operation.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * The list of events that have happened so far during the execution of this
   * operation.
   *
   * @generated from field: repeated google.cloud.lifesciences.v2beta.Event events = 3;
   */
  events: Event[];

  /**
   * The time at which the operation was created by the API.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * The first time at which resources were allocated to execute the pipeline.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * The time at which execution was completed and resources were cleaned up.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * The name of the Cloud Pub/Sub topic where notifications of operation status
   * changes are sent.
   *
   * @generated from field: string pub_sub_topic = 7;
   */
  pubSubTopic: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export const MetadataSchema: GenMessage<Metadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 16);

/**
 * Carries information about events that occur during pipeline execution.
 *
 * @generated from message google.cloud.lifesciences.v2beta.Event
 */
export type Event = Message<"google.cloud.lifesciences.v2beta.Event"> & {
  /**
   * The time at which the event occurred.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * A human-readable description of the event. Note that these strings can
   * change at any time without notice. Any application logic must use the
   * information in the `details` field.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Machine-readable details about the event.
   *
   * @generated from oneof google.cloud.lifesciences.v2beta.Event.details
   */
  details: {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.DelayedEvent][google.cloud.lifesciences.v2beta.DelayedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.DelayedEvent delayed = 17;
     */
    value: DelayedEvent;
    case: "delayed";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.WorkerAssignedEvent][google.cloud.lifesciences.v2beta.WorkerAssignedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.WorkerAssignedEvent worker_assigned = 18;
     */
    value: WorkerAssignedEvent;
    case: "workerAssigned";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.WorkerReleasedEvent][google.cloud.lifesciences.v2beta.WorkerReleasedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.WorkerReleasedEvent worker_released = 19;
     */
    value: WorkerReleasedEvent;
    case: "workerReleased";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.PullStartedEvent][google.cloud.lifesciences.v2beta.PullStartedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.PullStartedEvent pull_started = 20;
     */
    value: PullStartedEvent;
    case: "pullStarted";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.PullStoppedEvent][google.cloud.lifesciences.v2beta.PullStoppedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.PullStoppedEvent pull_stopped = 21;
     */
    value: PullStoppedEvent;
    case: "pullStopped";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.ContainerStartedEvent][google.cloud.lifesciences.v2beta.ContainerStartedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.ContainerStartedEvent container_started = 22;
     */
    value: ContainerStartedEvent;
    case: "containerStarted";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.ContainerStoppedEvent][google.cloud.lifesciences.v2beta.ContainerStoppedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.ContainerStoppedEvent container_stopped = 23;
     */
    value: ContainerStoppedEvent;
    case: "containerStopped";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.ContainerKilledEvent][google.cloud.lifesciences.v2beta.ContainerKilledEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.ContainerKilledEvent container_killed = 24;
     */
    value: ContainerKilledEvent;
    case: "containerKilled";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent][google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent unexpected_exit_status = 25;
     */
    value: UnexpectedExitStatusEvent;
    case: "unexpectedExitStatus";
  } | {
    /**
     * See
     * [google.cloud.lifesciences.v2beta.FailedEvent][google.cloud.lifesciences.v2beta.FailedEvent].
     *
     * @generated from field: google.cloud.lifesciences.v2beta.FailedEvent failed = 26;
     */
    value: FailedEvent;
    case: "failed";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export const EventSchema: GenMessage<Event> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 17);

/**
 * An event generated whenever a resource limitation or transient error
 * delays execution of a pipeline that was otherwise ready to run.
 *
 * @generated from message google.cloud.lifesciences.v2beta.DelayedEvent
 */
export type DelayedEvent = Message<"google.cloud.lifesciences.v2beta.DelayedEvent"> & {
  /**
   * A textual description of the cause of the delay. The string can change
   * without notice because it is often generated by another service (such as
   * Compute Engine).
   *
   * @generated from field: string cause = 1;
   */
  cause: string;

  /**
   * If the delay was caused by a resource shortage, this field lists the
   * Compute Engine metrics that are preventing this operation from running
   * (for example, `CPUS` or `INSTANCES`). If the particular metric is not
   * known, a single `UNKNOWN` metric will be present.
   *
   * @generated from field: repeated string metrics = 2;
   */
  metrics: string[];
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.DelayedEvent.
 * Use `create(DelayedEventSchema)` to create a new message.
 */
export const DelayedEventSchema: GenMessage<DelayedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 18);

/**
 * An event generated after a worker VM has been assigned to run the
 * pipeline.
 *
 * @generated from message google.cloud.lifesciences.v2beta.WorkerAssignedEvent
 */
export type WorkerAssignedEvent = Message<"google.cloud.lifesciences.v2beta.WorkerAssignedEvent"> & {
  /**
   * The zone the worker is running in.
   *
   * @generated from field: string zone = 1;
   */
  zone: string;

  /**
   * The worker's instance name.
   *
   * @generated from field: string instance = 2;
   */
  instance: string;

  /**
   * The machine type that was assigned for the worker.
   *
   * @generated from field: string machine_type = 3;
   */
  machineType: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.WorkerAssignedEvent.
 * Use `create(WorkerAssignedEventSchema)` to create a new message.
 */
export const WorkerAssignedEventSchema: GenMessage<WorkerAssignedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 19);

/**
 * An event generated when the worker VM that was assigned to the pipeline
 * has been released (deleted).
 *
 * @generated from message google.cloud.lifesciences.v2beta.WorkerReleasedEvent
 */
export type WorkerReleasedEvent = Message<"google.cloud.lifesciences.v2beta.WorkerReleasedEvent"> & {
  /**
   * The zone the worker was running in.
   *
   * @generated from field: string zone = 1;
   */
  zone: string;

  /**
   * The worker's instance name.
   *
   * @generated from field: string instance = 2;
   */
  instance: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.WorkerReleasedEvent.
 * Use `create(WorkerReleasedEventSchema)` to create a new message.
 */
export const WorkerReleasedEventSchema: GenMessage<WorkerReleasedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 20);

/**
 * An event generated when the worker starts pulling an image.
 *
 * @generated from message google.cloud.lifesciences.v2beta.PullStartedEvent
 */
export type PullStartedEvent = Message<"google.cloud.lifesciences.v2beta.PullStartedEvent"> & {
  /**
   * The URI of the image that was pulled.
   *
   * @generated from field: string image_uri = 1;
   */
  imageUri: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.PullStartedEvent.
 * Use `create(PullStartedEventSchema)` to create a new message.
 */
export const PullStartedEventSchema: GenMessage<PullStartedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 21);

/**
 * An event generated when the worker stops pulling an image.
 *
 * @generated from message google.cloud.lifesciences.v2beta.PullStoppedEvent
 */
export type PullStoppedEvent = Message<"google.cloud.lifesciences.v2beta.PullStoppedEvent"> & {
  /**
   * The URI of the image that was pulled.
   *
   * @generated from field: string image_uri = 1;
   */
  imageUri: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.PullStoppedEvent.
 * Use `create(PullStoppedEventSchema)` to create a new message.
 */
export const PullStoppedEventSchema: GenMessage<PullStoppedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 22);

/**
 * An event generated when a container starts.
 *
 * @generated from message google.cloud.lifesciences.v2beta.ContainerStartedEvent
 */
export type ContainerStartedEvent = Message<"google.cloud.lifesciences.v2beta.ContainerStartedEvent"> & {
  /**
   * The numeric ID of the action that started this container.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;

  /**
   * The container-to-host port mappings installed for this container. This
   * set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag
   * as well as any specified in the `Action` definition.
   *
   * @generated from field: map<int32, int32> port_mappings = 2;
   */
  portMappings: { [key: number]: number };

  /**
   * The public IP address that can be used to connect to the container. This
   * field is only populated when at least one port mapping is present. If the
   * instance was created with a private address, this field will be empty even
   * if port mappings exist.
   *
   * @generated from field: string ip_address = 3;
   */
  ipAddress: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.ContainerStartedEvent.
 * Use `create(ContainerStartedEventSchema)` to create a new message.
 */
export const ContainerStartedEventSchema: GenMessage<ContainerStartedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 23);

/**
 * An event generated when a container exits.
 *
 * @generated from message google.cloud.lifesciences.v2beta.ContainerStoppedEvent
 */
export type ContainerStoppedEvent = Message<"google.cloud.lifesciences.v2beta.ContainerStoppedEvent"> & {
  /**
   * The numeric ID of the action that started this container.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;

  /**
   * The exit status of the container.
   *
   * @generated from field: int32 exit_status = 2;
   */
  exitStatus: number;

  /**
   * The tail end of any content written to standard error by the container.
   * If the content emits large amounts of debugging noise or contains
   * sensitive information, you can prevent the content from being printed by
   * setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag.
   *
   * Note that only a small amount of the end of the stream is captured here.
   * The entire stream is stored in the `/google/logs` directory mounted into
   * each action, and can be copied off the machine as described elsewhere.
   *
   * @generated from field: string stderr = 3;
   */
  stderr: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.ContainerStoppedEvent.
 * Use `create(ContainerStoppedEventSchema)` to create a new message.
 */
export const ContainerStoppedEventSchema: GenMessage<ContainerStoppedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 24);

/**
 * An event generated when the execution of a container results in a
 * non-zero exit status that was not otherwise ignored. Execution will
 * continue, but only actions that are flagged as `ALWAYS_RUN` will be
 * executed. Other actions will be skipped.
 *
 * @generated from message google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent
 */
export type UnexpectedExitStatusEvent = Message<"google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent"> & {
  /**
   * The numeric ID of the action that started the container.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;

  /**
   * The exit status of the container.
   *
   * @generated from field: int32 exit_status = 2;
   */
  exitStatus: number;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent.
 * Use `create(UnexpectedExitStatusEventSchema)` to create a new message.
 */
export const UnexpectedExitStatusEventSchema: GenMessage<UnexpectedExitStatusEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 25);

/**
 * An event generated when a container is forcibly terminated by the
 * worker. Currently, this only occurs when the container outlives the
 * timeout specified by the user.
 *
 * @generated from message google.cloud.lifesciences.v2beta.ContainerKilledEvent
 */
export type ContainerKilledEvent = Message<"google.cloud.lifesciences.v2beta.ContainerKilledEvent"> & {
  /**
   * The numeric ID of the action that started the container.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.ContainerKilledEvent.
 * Use `create(ContainerKilledEventSchema)` to create a new message.
 */
export const ContainerKilledEventSchema: GenMessage<ContainerKilledEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 26);

/**
 * An event generated when the execution of a pipeline has failed. Note
 * that other events can continue to occur after this event.
 *
 * @generated from message google.cloud.lifesciences.v2beta.FailedEvent
 */
export type FailedEvent = Message<"google.cloud.lifesciences.v2beta.FailedEvent"> & {
  /**
   * The Google standard error code that best describes this failure.
   *
   * @generated from field: google.rpc.Code code = 1;
   */
  code: Code;

  /**
   * The human-readable description of the cause of the failure.
   *
   * @generated from field: string cause = 2;
   */
  cause: string;
};

/**
 * Describes the message google.cloud.lifesciences.v2beta.FailedEvent.
 * Use `create(FailedEventSchema)` to create a new message.
 */
export const FailedEventSchema: GenMessage<FailedEvent> = /*@__PURE__*/
  messageDesc(file_google_cloud_lifesciences_v2beta_workflows, 27);

/**
 * A service for running workflows, such as pipelines consisting of Docker
 * containers.
 *
 * @generated from service google.cloud.lifesciences.v2beta.WorkflowsServiceV2Beta
 */
export const WorkflowsServiceV2Beta: GenService<{
  /**
   * Runs a pipeline.  The returned Operation's [metadata]
   * [google.longrunning.Operation.metadata] field will contain a
   * [google.cloud.lifesciences.v2beta.Metadata][google.cloud.lifesciences.v2beta.Metadata]
   * object describing the status of the pipeline execution. The
   * [response][google.longrunning.Operation.response] field will contain a
   * [google.cloud.lifesciences.v2beta.RunPipelineResponse][google.cloud.lifesciences.v2beta.RunPipelineResponse]
   * object if the pipeline completes successfully.
   *
   * **Note:** Before you can use this method, the *Life Sciences Service Agent*
   * must have access to your project. This is done automatically when the
   * Cloud Life Sciences API is first enabled, but if you delete this permission
   * you must disable and re-enable the API to grant the Life Sciences
   * Service Agent the required permissions.
   * Authorization requires the following [Google
   * IAM](https://cloud.google.com/iam/) permission:
   *
   * * `lifesciences.workflows.run`
   *
   * @generated from rpc google.cloud.lifesciences.v2beta.WorkflowsServiceV2Beta.RunPipeline
   */
  runPipeline: {
    methodKind: "unary";
    input: typeof RunPipelineRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_lifesciences_v2beta_workflows, 0);

