// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dataqna/v1alpha/question.proto (package google.cloud.dataqna.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { AnnotatedString } from "./annotated_string_pb";
import { file_google_cloud_dataqna_v1alpha_annotated_string } from "./annotated_string_pb";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dataqna/v1alpha/question.proto.
 */
export const file_google_cloud_dataqna_v1alpha_question: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvY2xvdWQvZGF0YXFuYS92MWFscGhhL3F1ZXN0aW9uLnByb3RvEhxnb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhIp0ECghRdWVzdGlvbhIUCgRuYW1lGAEgASgJQgbgQQPgQQUSFgoGc2NvcGVzGAIgAygJQgbgQQLgQQUSFQoFcXVlcnkYAyABKAlCBuBBAuBBBRIfChdkYXRhX3NvdXJjZV9hbm5vdGF0aW9ucxgEIAMoCRJFCg9pbnRlcnByZXRfZXJyb3IYBSABKAsyLC5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkludGVycHJldEVycm9yEkUKD2ludGVycHJldGF0aW9ucxgGIAMoCzIsLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0YXRpb24SLwoLY3JlYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhcKCnVzZXJfZW1haWwYCCABKAlCA+BBAxJFCgtkZWJ1Z19mbGFncxgJIAEoCzIoLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuRGVidWdGbGFnc0IG4EEF4EEEEigKCmRlYnVnX2luZm8YCiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OmLqQV8KH2RhdGFxbmEuZ29vZ2xlYXBpcy5jb20vUXVlc3Rpb24SPHByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9xdWVzdGlvbnMve3F1ZXN0aW9ufSLbBgoOSW50ZXJwcmV0RXJyb3ISDwoHbWVzc2FnZRgBIAEoCRJNCgRjb2RlGAIgASgOMj8uZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5JbnRlcnByZXRFcnJvci5JbnRlcnByZXRFcnJvckNvZGUSUwoHZGV0YWlscxgDIAEoCzJCLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0RXJyb3IuSW50ZXJwcmV0RXJyb3JEZXRhaWxzGtECChVJbnRlcnByZXRFcnJvckRldGFpbHMSZQoTdW5zdXBwb3J0ZWRfZGV0YWlscxgBIAEoCzJILmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0RXJyb3IuSW50ZXJwcmV0VW5zdXBwb3J0ZWREZXRhaWxzEm4KGGluY29tcGxldGVfcXVlcnlfZGV0YWlscxgCIAEoCzJMLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0RXJyb3IuSW50ZXJwcmV0SW5jb21wbGV0ZVF1ZXJ5RGV0YWlscxJhChFhbWJpZ3VpdHlfZGV0YWlscxgDIAEoCzJGLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0RXJyb3IuSW50ZXJwcmV0QW1iaWd1aXR5RGV0YWlscxpAChtJbnRlcnByZXRVbnN1cHBvcnRlZERldGFpbHMSEQoJb3BlcmF0b3JzGAEgAygJEg4KBmludGVudBgCIAMoCRpiCh9JbnRlcnByZXRJbmNvbXBsZXRlUXVlcnlEZXRhaWxzEj8KCGVudGl0aWVzGAEgAygOMi0uZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5JbnRlcnByZXRFbnRpdHkaGwoZSW50ZXJwcmV0QW1iaWd1aXR5RGV0YWlscyJ9ChJJbnRlcnByZXRFcnJvckNvZGUSJAogSU5URVJQUkVUX0VSUk9SX0NPREVfVU5TUEVDSUZJRUQQABIRCg1JTlZBTElEX1FVRVJZEAESGAoURkFJTEVEX1RPX1VOREVSU1RBTkQQAhIUChBGQUlMRURfVE9fQU5TV0VSEAMiggMKDUV4ZWN1dGlvbkluZm8SLwoTam9iX2NyZWF0aW9uX3N0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzEloKE2pvYl9leGVjdXRpb25fc3RhdGUYAiABKA4yPS5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkV4ZWN1dGlvbkluZm8uSm9iRXhlY3V0aW9uU3RhdGUSLwoLY3JlYXRlX3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEj8KDGJpZ3F1ZXJ5X2pvYhgEIAEoCzIpLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuQmlnUXVlcnlKb2IicgoRSm9iRXhlY3V0aW9uU3RhdGUSIwofSk9CX0VYRUNVVElPTl9TVEFURV9VTlNQRUNJRklFRBAAEhAKDE5PVF9FWEVDVVRFRBABEgsKB1JVTk5JTkcQAhINCglTVUNDRUVERUQQAxIKCgZGQUlMRUQQBCJDCgtCaWdRdWVyeUpvYhIOCgZqb2JfaWQYASABKAkSEgoKcHJvamVjdF9pZBgCIAEoCRIQCghsb2NhdGlvbhgDIAEoCSLyAgoOSW50ZXJwcmV0YXRpb24SFAoMZGF0YV9zb3VyY2VzGAEgAygJEhIKCmNvbmZpZGVuY2UYAiABKAESFgoOdW51c2VkX3BocmFzZXMYAyADKAkSQwoOaHVtYW5fcmVhZGFibGUYBCABKAsyKy5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkh1bWFuUmVhZGFibGUSVwoYaW50ZXJwcmV0YXRpb25fc3RydWN0dXJlGAUgASgLMjUuZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5JbnRlcnByZXRhdGlvblN0cnVjdHVyZRI7CgpkYXRhX3F1ZXJ5GAYgASgLMicuZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5EYXRhUXVlcnkSQwoOZXhlY3V0aW9uX2luZm8YByABKAsyKy5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkV4ZWN1dGlvbkluZm8iGAoJRGF0YVF1ZXJ5EgsKA3NxbBgBIAEoCSKqAQoNSHVtYW5SZWFkYWJsZRJPChhnZW5lcmF0ZWRfaW50ZXJwcmV0YXRpb24YASABKAsyLS5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkFubm90YXRlZFN0cmluZxJIChFvcmlnaW5hbF9xdWVzdGlvbhgCIAEoCzItLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuQW5ub3RhdGVkU3RyaW5nIpIEChdJbnRlcnByZXRhdGlvblN0cnVjdHVyZRJkChN2aXN1YWxpemF0aW9uX3R5cGVzGAEgAygOMkcuZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5JbnRlcnByZXRhdGlvblN0cnVjdHVyZS5WaXN1YWxpemF0aW9uVHlwZRJVCgtjb2x1bW5faW5mbxgCIAMoCzJALmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuSW50ZXJwcmV0YXRpb25TdHJ1Y3R1cmUuQ29sdW1uSW5mbxo4CgpDb2x1bW5JbmZvEhQKDG91dHB1dF9hbGlhcxgBIAEoCRIUCgxkaXNwbGF5X25hbWUYAiABKAki/wEKEVZpc3VhbGl6YXRpb25UeXBlEiIKHlZJU1VBTElaQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEgkKBVRBQkxFEAESDQoJQkFSX0NIQVJUEAISEAoMQ09MVU1OX0NIQVJUEAMSDAoIVElNRUxJTkUQBBIQCgxTQ0FUVEVSX1BMT1QQBRINCglQSUVfQ0hBUlQQBhIOCgpMSU5FX0NIQVJUEAcSDgoKQVJFQV9DSEFSVBAIEg8KC0NPTUJPX0NIQVJUEAkSDQoJSElTVE9HUkFNEAoSEQoNR0VORVJJQ19DSEFSVBALEhgKFENIQVJUX05PVF9VTkRFUlNUT09EEAwilQMKCkRlYnVnRmxhZ3MSGAoQaW5jbHVkZV92YV9xdWVyeRgBIAEoCBIfChdpbmNsdWRlX25lc3RlZF92YV9xdWVyeRgCIAEoCBIkChxpbmNsdWRlX2h1bWFuX2ludGVycHJldGF0aW9uGAMgASgIEiMKG2luY2x1ZGVfYXF1YV9kZWJ1Z19yZXNwb25zZRgEIAEoCBIVCg10aW1lX292ZXJyaWRlGAUgASgDEh8KF2lzX2ludGVybmFsX2dvb2dsZV91c2VyGAYgASgIEhQKDGlnbm9yZV9jYWNoZRgHIAEoCBIjChtpbmNsdWRlX3NlYXJjaF9lbnRpdGllc19ycGMYCCABKAgSKwojaW5jbHVkZV9saXN0X2NvbHVtbl9hbm5vdGF0aW9uc19ycGMYCSABKAgSKAogaW5jbHVkZV92aXJ0dWFsX2FuYWx5c3RfZW50aXRpZXMYCiABKAgSGgoSaW5jbHVkZV90YWJsZV9saXN0GAsgASgIEhsKE2luY2x1ZGVfZG9tYWluX2xpc3QYDCABKAgqTgoPSW50ZXJwcmV0RW50aXR5EiAKHElOVEVSUFJFVF9FTlRJVFlfVU5TUEVDSUZJRUQQABINCglESU1FTlNJT04QARIKCgZNRVRSSUMQAkLPAQogY29tLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGFCDVF1ZXN0aW9uUHJvdG9QAVo6Y2xvdWQuZ29vZ2xlLmNvbS9nby9kYXRhcW5hL2FwaXYxYWxwaGEvZGF0YXFuYXBiO2RhdGFxbmFwYqoCHEdvb2dsZS5DbG91ZC5EYXRhUW5BLlYxQWxwaGHKAhxHb29nbGVcQ2xvdWRcRGF0YVFuQVxWMWFscGhh6gIfR29vZ2xlOjpDbG91ZDo6RGF0YVFuQTo6VjFhbHBoYWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dataqna_v1alpha_annotated_string, file_google_protobuf_any, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * The question resource represents a natural language query, its settings,
 * understanding generated by the system, and answer retrieval status.
 * A question cannot be modified.
 *
 * @generated from message google.cloud.dataqna.v1alpha.Question
 */
export type Question = Message<"google.cloud.dataqna.v1alpha.Question"> & {
  /**
   * Output only. Immutable. The unique identifier for the Question. The ID is server-generated.
   * Example: `projects/foo/locations/bar/questions/123`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Immutable. Scopes to be used for the question. A scope defines the relevant data set
   * scope. It can be a reference to a specific data source or a collection of
   * data sources. Currently, support is limited to a single BigQuery table.
   * There must be exactly one `scopes` element.
   *
   * Example:
   * `//bigquery.googleapis.com/projects/test-project/datasets/foo/tables/bar`
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];

  /**
   * Required. Immutable. The query in natural language.
   *
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * A list of annotations to use instead of the default annotation of a data
   * source (set in the data source reference resource). There must not be
   * more than one annotation with the same data source reference.
   *
   * @generated from field: repeated string data_source_annotations = 4;
   */
  dataSourceAnnotations: string[];

  /**
   * An error field explaining why interpretation failed. This is only populated
   * if the interpretation failed.
   *
   * Note: This is different from getting a status error on the request itself.
   * This is not a client or server error and the Question resource is still
   * persisted, but the service could not interpret the question. Clients should
   * present the error to the user so the user can rephrase the question.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError interpret_error = 5;
   */
  interpretError?: InterpretError;

  /**
   * A list of interpretations for this question.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.Interpretation interpretations = 6;
   */
  interpretations: Interpretation[];

  /**
   * Time when the question was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. The e-mail address of the user that created this question.
   *
   * @generated from field: string user_email = 8;
   */
  userEmail: string;

  /**
   * Input only. Immutable. Flags to request additional information for debugging purposes.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.DebugFlags debug_flags = 9;
   */
  debugFlags?: DebugFlags;

  /**
   * Top level debug information.
   * This will be stored as the type DebugInformation.
   * Using Any so clients don't need to pull in anything
   * inside the debug message.
   *
   * @generated from field: google.protobuf.Any debug_info = 10;
   */
  debugInfo?: Any;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.Question.
 * Use `create(QuestionSchema)` to create a new message.
 */
export const QuestionSchema: GenMessage<Question> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 0);

/**
 * Details on the failure to interpret the question.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretError
 */
export type InterpretError = Message<"google.cloud.dataqna.v1alpha.InterpretError"> & {
  /**
   * Error message explaining why this question could not be interpreted.
   *
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * The code for the error category why the interpretation failed.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorCode code = 2;
   */
  code: InterpretError_InterpretErrorCode;

  /**
   * Details on interpretation failure.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorDetails details = 3;
   */
  details?: InterpretError_InterpretErrorDetails;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretError.
 * Use `create(InterpretErrorSchema)` to create a new message.
 */
export const InterpretErrorSchema: GenMessage<InterpretError> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 1);

/**
 * Details on interpretation failure.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorDetails
 */
export type InterpretError_InterpretErrorDetails = Message<"google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorDetails"> & {
  /**
   * Populated if parts of the query are unsupported.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError.InterpretUnsupportedDetails unsupported_details = 1;
   */
  unsupportedDetails?: InterpretError_InterpretUnsupportedDetails;

  /**
   * Populated if the query is incomplete.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError.InterpretIncompleteQueryDetails incomplete_query_details = 2;
   */
  incompleteQueryDetails?: InterpretError_InterpretIncompleteQueryDetails;

  /**
   * Populated if the query was too ambiguous.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretError.InterpretAmbiguityDetails ambiguity_details = 3;
   */
  ambiguityDetails?: InterpretError_InterpretAmbiguityDetails;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorDetails.
 * Use `create(InterpretError_InterpretErrorDetailsSchema)` to create a new message.
 */
export const InterpretError_InterpretErrorDetailsSchema: GenMessage<InterpretError_InterpretErrorDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 1, 0);

/**
 * Details about unsupported parts in a query.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretError.InterpretUnsupportedDetails
 */
export type InterpretError_InterpretUnsupportedDetails = Message<"google.cloud.dataqna.v1alpha.InterpretError.InterpretUnsupportedDetails"> & {
  /**
   * Unsupported operators. For example: median.
   *
   * @generated from field: repeated string operators = 1;
   */
  operators: string[];

  /**
   * Unsupported intents.
   *
   * @generated from field: repeated string intent = 2;
   */
  intent: string[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretError.InterpretUnsupportedDetails.
 * Use `create(InterpretError_InterpretUnsupportedDetailsSchema)` to create a new message.
 */
export const InterpretError_InterpretUnsupportedDetailsSchema: GenMessage<InterpretError_InterpretUnsupportedDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 1, 1);

/**
 * Details about an incomplete query.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretError.InterpretIncompleteQueryDetails
 */
export type InterpretError_InterpretIncompleteQueryDetails = Message<"google.cloud.dataqna.v1alpha.InterpretError.InterpretIncompleteQueryDetails"> & {
  /**
   * List of missing interpret entities.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.InterpretEntity entities = 1;
   */
  entities: InterpretEntity[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretError.InterpretIncompleteQueryDetails.
 * Use `create(InterpretError_InterpretIncompleteQueryDetailsSchema)` to create a new message.
 */
export const InterpretError_InterpretIncompleteQueryDetailsSchema: GenMessage<InterpretError_InterpretIncompleteQueryDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 1, 2);

/**
 * Details about a query that was too ambiguous. Currently, the message
 * has no fields and its presence signals that there was ambiguity.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretError.InterpretAmbiguityDetails
 */
export type InterpretError_InterpretAmbiguityDetails = Message<"google.cloud.dataqna.v1alpha.InterpretError.InterpretAmbiguityDetails"> & {
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretError.InterpretAmbiguityDetails.
 * Use `create(InterpretError_InterpretAmbiguityDetailsSchema)` to create a new message.
 */
export const InterpretError_InterpretAmbiguityDetailsSchema: GenMessage<InterpretError_InterpretAmbiguityDetails> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 1, 3);

/**
 * The interpret error code provides an error category why the interpretation
 * failed.
 *
 * @generated from enum google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorCode
 */
export enum InterpretError_InterpretErrorCode {
  /**
   * No interpret error code was specified.
   *
   * @generated from enum value: INTERPRET_ERROR_CODE_UNSPECIFIED = 0;
   */
  INTERPRET_ERROR_CODE_UNSPECIFIED = 0,

  /**
   * The query is not valid.
   *
   * @generated from enum value: INVALID_QUERY = 1;
   */
  INVALID_QUERY = 1,

  /**
   * The interpreter failed to understand the question. For example, because
   * it was too ambiguous.
   *
   * @generated from enum value: FAILED_TO_UNDERSTAND = 2;
   */
  FAILED_TO_UNDERSTAND = 2,

  /**
   * The interpreter could understand the question, but was not able to arrive
   * at an answer. For example, because a requested operation is not
   * supported.
   *
   * @generated from enum value: FAILED_TO_ANSWER = 3;
   */
  FAILED_TO_ANSWER = 3,
}

/**
 * Describes the enum google.cloud.dataqna.v1alpha.InterpretError.InterpretErrorCode.
 */
export const InterpretError_InterpretErrorCodeSchema: GenEnum<InterpretError_InterpretErrorCode> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataqna_v1alpha_question, 1, 0);

/**
 * Information about the backend status (such as BigQuery) of the execution.
 *
 * @generated from message google.cloud.dataqna.v1alpha.ExecutionInfo
 */
export type ExecutionInfo = Message<"google.cloud.dataqna.v1alpha.ExecutionInfo"> & {
  /**
   * Status returned by the backend when the job was created.
   *
   * @generated from field: google.rpc.Status job_creation_status = 1;
   */
  jobCreationStatus?: Status;

  /**
   * Status of the job execution.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.ExecutionInfo.JobExecutionState job_execution_state = 2;
   */
  jobExecutionState: ExecutionInfo_JobExecutionState;

  /**
   * Time when the execution was triggered.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * BigQuery job information.
   * Future versions will have different backends. Hence, clients must make sure
   * they can handle it when this field is not populated.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.BigQueryJob bigquery_job = 4;
   */
  bigqueryJob?: BigQueryJob;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.ExecutionInfo.
 * Use `create(ExecutionInfoSchema)` to create a new message.
 */
export const ExecutionInfoSchema: GenMessage<ExecutionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 2);

/**
 * Enum of possible job execution statuses.
 *
 * @generated from enum google.cloud.dataqna.v1alpha.ExecutionInfo.JobExecutionState
 */
export enum ExecutionInfo_JobExecutionState {
  /**
   * No job execution was specified.
   *
   * @generated from enum value: JOB_EXECUTION_STATE_UNSPECIFIED = 0;
   */
  JOB_EXECUTION_STATE_UNSPECIFIED = 0,

  /**
   * No job execution was requested, yet.
   *
   * @generated from enum value: NOT_EXECUTED = 1;
   */
  NOT_EXECUTED = 1,

  /**
   * The job is running.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The job completed successfully.
   *
   * @generated from enum value: SUCCEEDED = 3;
   */
  SUCCEEDED = 3,

  /**
   * The job completed unsuccessfully.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,
}

/**
 * Describes the enum google.cloud.dataqna.v1alpha.ExecutionInfo.JobExecutionState.
 */
export const ExecutionInfo_JobExecutionStateSchema: GenEnum<ExecutionInfo_JobExecutionState> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataqna_v1alpha_question, 2, 0);

/**
 * BigQuery job information. This can be used to query the BigQuery API and
 * retrieve the current job's status (using
 * [jobs.get](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/get)).
 *
 * @generated from message google.cloud.dataqna.v1alpha.BigQueryJob
 */
export type BigQueryJob = Message<"google.cloud.dataqna.v1alpha.BigQueryJob"> & {
  /**
   * The job ID.
   *
   * @generated from field: string job_id = 1;
   */
  jobId: string;

  /**
   * The project ID of the job.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * The location where the job is running.
   *
   * @generated from field: string location = 3;
   */
  location: string;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.BigQueryJob.
 * Use `create(BigQueryJobSchema)` to create a new message.
 */
export const BigQueryJobSchema: GenMessage<BigQueryJob> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 3);

/**
 * An interpretation of a natural language query.
 *
 * @generated from message google.cloud.dataqna.v1alpha.Interpretation
 */
export type Interpretation = Message<"google.cloud.dataqna.v1alpha.Interpretation"> & {
  /**
   * List of data sources used in the current understanding.
   *
   * @generated from field: repeated string data_sources = 1;
   */
  dataSources: string[];

  /**
   * The level of confidence that one of the interpretations is correct. This is
   * a value in the range [0, 1] where a value of 0.5 or below is to be
   * considered a low confidence.
   *
   * @generated from field: double confidence = 2;
   */
  confidence: number;

  /**
   * A list of unused phrases. Clients should display a Did You Mean (DYM)
   *  dialog if this is non-empty, even if this is the only interpretation.
   *
   * @generated from field: repeated string unused_phrases = 3;
   */
  unusedPhrases: string[];

  /**
   * Human readable representation of the query.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.HumanReadable human_readable = 4;
   */
  humanReadable?: HumanReadable;

  /**
   * Information about the interpretation structure that helps to understand and
   * visualize the response.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.InterpretationStructure interpretation_structure = 5;
   */
  interpretationStructure?: InterpretationStructure;

  /**
   * Representation of the data query to be sent to the backend.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.DataQuery data_query = 6;
   */
  dataQuery?: DataQuery;

  /**
   * Information about the backend response. This is populated only if execution
   * of an interpretation was requested.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.ExecutionInfo execution_info = 7;
   */
  executionInfo?: ExecutionInfo;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.Interpretation.
 * Use `create(InterpretationSchema)` to create a new message.
 */
export const InterpretationSchema: GenMessage<Interpretation> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 4);

/**
 * Representation of the data query for the backend.
 * This is provided for informational purposes only. Clients should not use
 * it to send it to the backend directly, but rather use the `execute` RPC
 * to trigger the execution. Using the `execute` RPC is needed in order to
 * track the state of a question and report on it correctly to the data
 * administrators.
 *
 * @generated from message google.cloud.dataqna.v1alpha.DataQuery
 */
export type DataQuery = Message<"google.cloud.dataqna.v1alpha.DataQuery"> & {
  /**
   * The generated SQL query to be sent to the backend.
   *
   * @generated from field: string sql = 1;
   */
  sql: string;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.DataQuery.
 * Use `create(DataQuerySchema)` to create a new message.
 */
export const DataQuerySchema: GenMessage<DataQuery> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 5);

/**
 * Human readable interpretation.
 *
 * @generated from message google.cloud.dataqna.v1alpha.HumanReadable
 */
export type HumanReadable = Message<"google.cloud.dataqna.v1alpha.HumanReadable"> & {
  /**
   * Generated query explaining the interpretation.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.AnnotatedString generated_interpretation = 1;
   */
  generatedInterpretation?: AnnotatedString;

  /**
   * Annotations on the original query.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.AnnotatedString original_question = 2;
   */
  originalQuestion?: AnnotatedString;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.HumanReadable.
 * Use `create(HumanReadableSchema)` to create a new message.
 */
export const HumanReadableSchema: GenMessage<HumanReadable> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 6);

/**
 * Information about the interpretation structure that helps to understand and
 * visualize the response.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretationStructure
 */
export type InterpretationStructure = Message<"google.cloud.dataqna.v1alpha.InterpretationStructure"> & {
  /**
   * List of possible visualization types to apply for this interpretation. The
   * order has no relevance.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.InterpretationStructure.VisualizationType visualization_types = 1;
   */
  visualizationTypes: InterpretationStructure_VisualizationType[];

  /**
   * Information about the output columns, that is, the columns that will be
   * returned by the backend.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.InterpretationStructure.ColumnInfo column_info = 2;
   */
  columnInfo: InterpretationStructure_ColumnInfo[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretationStructure.
 * Use `create(InterpretationStructureSchema)` to create a new message.
 */
export const InterpretationStructureSchema: GenMessage<InterpretationStructure> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 7);

/**
 * Information about a column.
 *
 * @generated from message google.cloud.dataqna.v1alpha.InterpretationStructure.ColumnInfo
 */
export type InterpretationStructure_ColumnInfo = Message<"google.cloud.dataqna.v1alpha.InterpretationStructure.ColumnInfo"> & {
  /**
   * The alias of the output column as used by the backend. For example, the
   * field name in the schema provided in the query response in BigQuery.
   *
   * @generated from field: string output_alias = 1;
   */
  outputAlias: string;

  /**
   * Human readable name of the output column.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.InterpretationStructure.ColumnInfo.
 * Use `create(InterpretationStructure_ColumnInfoSchema)` to create a new message.
 */
export const InterpretationStructure_ColumnInfoSchema: GenMessage<InterpretationStructure_ColumnInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 7, 0);

/**
 * Enumeration of visualzation types to use for query response data.
 *
 * @generated from enum google.cloud.dataqna.v1alpha.InterpretationStructure.VisualizationType
 */
export enum InterpretationStructure_VisualizationType {
  /**
   * No visualization type was specified.
   *
   * @generated from enum value: VISUALIZATION_TYPE_UNSPECIFIED = 0;
   */
  VISUALIZATION_TYPE_UNSPECIFIED = 0,

  /**
   * Show a table.
   *
   * @generated from enum value: TABLE = 1;
   */
  TABLE = 1,

  /**
   * Show a [bar
   * chart](https://developers.google.com/chart/interactive/docs/gallery/barchart).
   *
   * @generated from enum value: BAR_CHART = 2;
   */
  BAR_CHART = 2,

  /**
   * Show a [column
   * chart](https://developers.google.com/chart/interactive/docs/gallery/columnchart).
   *
   * @generated from enum value: COLUMN_CHART = 3;
   */
  COLUMN_CHART = 3,

  /**
   * Show a
   * [timeline](https://developers.google.com/chart/interactive/docs/gallery/timeline).
   *
   * @generated from enum value: TIMELINE = 4;
   */
  TIMELINE = 4,

  /**
   * Show a [scatter
   * plot](https://developers.google.com/chart/interactive/docs/gallery/scatterchart).
   *
   * @generated from enum value: SCATTER_PLOT = 5;
   */
  SCATTER_PLOT = 5,

  /**
   * Show a [pie
   * chart](https://developers.google.com/chart/interactive/docs/gallery/piechart).
   *
   * @generated from enum value: PIE_CHART = 6;
   */
  PIE_CHART = 6,

  /**
   * Show a [line
   * chart](https://developers.google.com/chart/interactive/docs/gallery/linechart).
   *
   * @generated from enum value: LINE_CHART = 7;
   */
  LINE_CHART = 7,

  /**
   * Show an [area
   * chart](https://developers.google.com/chart/interactive/docs/gallery/areachart).
   *
   * @generated from enum value: AREA_CHART = 8;
   */
  AREA_CHART = 8,

  /**
   * Show a [combo
   * chart](https://developers.google.com/chart/interactive/docs/gallery/combochart).
   *
   * @generated from enum value: COMBO_CHART = 9;
   */
  COMBO_CHART = 9,

  /**
   * Show a
   * [histogram](https://developers.google.com/chart/interactive/docs/gallery/histogram).
   *
   * @generated from enum value: HISTOGRAM = 10;
   */
  HISTOGRAM = 10,

  /**
   * This denotes queries when the user has not specified the particular type
   * of chart and has mentioned only a generic chart name such as "Chart",
   * "Plot", "Graph", etc. This will differentiate it from specific charting
   * terms such as "Bar chart", "Pie chart", etc.
   *
   * @generated from enum value: GENERIC_CHART = 11;
   */
  GENERIC_CHART = 11,

  /**
   * The user tried to specify a chart type, but the interpreter could not
   * understand the type. The client should display a generic chart and may
   * give a hint to the user that the requested type was not understood.
   *
   * @generated from enum value: CHART_NOT_UNDERSTOOD = 12;
   */
  CHART_NOT_UNDERSTOOD = 12,
}

/**
 * Describes the enum google.cloud.dataqna.v1alpha.InterpretationStructure.VisualizationType.
 */
export const InterpretationStructure_VisualizationTypeSchema: GenEnum<InterpretationStructure_VisualizationType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataqna_v1alpha_question, 7, 0);

/**
 * Configuriation of debug flags.
 *
 * @generated from message google.cloud.dataqna.v1alpha.DebugFlags
 */
export type DebugFlags = Message<"google.cloud.dataqna.v1alpha.DebugFlags"> & {
  /**
   * Whether to include the original VAQuery.
   *
   * @generated from field: bool include_va_query = 1;
   */
  includeVaQuery: boolean;

  /**
   * Whether to include the original nested VAQuery.
   *
   * @generated from field: bool include_nested_va_query = 2;
   */
  includeNestedVaQuery: boolean;

  /**
   * Whether to include the original human interpretation strings generated
   * by Analyza.
   *
   * @generated from field: bool include_human_interpretation = 3;
   */
  includeHumanInterpretation: boolean;

  /**
   * Whether to include the Aqua debug response.
   *
   * @generated from field: bool include_aqua_debug_response = 4;
   */
  includeAquaDebugResponse: boolean;

  /**
   * The time in milliseconds from Unix epoch to be used
   * to process the query. This is useful for testing
   * the queries at different time period.
   * If not set or time_override <= 0, then the current
   * time is used.
   *
   * @generated from field: int64 time_override = 5;
   */
  timeOverride: bigint;

  /**
   * Set to true if request is initiated by an internal Google user.
   *
   * @generated from field: bool is_internal_google_user = 6;
   */
  isInternalGoogleUser: boolean;

  /**
   * Determines whether cache needs to be ignored. If set to
   * true, cache won't be queried and updated.
   *
   * @generated from field: bool ignore_cache = 7;
   */
  ignoreCache: boolean;

  /**
   * Whether to include the request/response pair from the call to the
   * EntityIndex for SearchEntities.
   *
   * @generated from field: bool include_search_entities_rpc = 8;
   */
  includeSearchEntitiesRpc: boolean;

  /**
   * Whether to include the request/response pair from the call to the
   * Annotations service for ListColumnAnnotations.
   *
   * @generated from field: bool include_list_column_annotations_rpc = 9;
   */
  includeListColumnAnnotationsRpc: boolean;

  /**
   * Whether to include the entity list passed to Analyza.
   *
   * @generated from field: bool include_virtual_analyst_entities = 10;
   */
  includeVirtualAnalystEntities: boolean;

  /**
   * Whether to include the table list.
   *
   * @generated from field: bool include_table_list = 11;
   */
  includeTableList: boolean;

  /**
   * Whether to include the domain list.
   *
   * @generated from field: bool include_domain_list = 12;
   */
  includeDomainList: boolean;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.DebugFlags.
 * Use `create(DebugFlagsSchema)` to create a new message.
 */
export const DebugFlagsSchema: GenMessage<DebugFlags> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question, 8);

/**
 * Query entities of an interpretation.
 *
 * @generated from enum google.cloud.dataqna.v1alpha.InterpretEntity
 */
export enum InterpretEntity {
  /**
   * No interpret entity was specified.
   *
   * @generated from enum value: INTERPRET_ENTITY_UNSPECIFIED = 0;
   */
  INTERPRET_ENTITY_UNSPECIFIED = 0,

  /**
   * A dimenstion entity.
   *
   * @generated from enum value: DIMENSION = 1;
   */
  DIMENSION = 1,

  /**
   * A metric entity.
   *
   * @generated from enum value: METRIC = 2;
   */
  METRIC = 2,
}

/**
 * Describes the enum google.cloud.dataqna.v1alpha.InterpretEntity.
 */
export const InterpretEntitySchema: GenEnum<InterpretEntity> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataqna_v1alpha_question, 0);

