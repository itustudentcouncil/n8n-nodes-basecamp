// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dataqna/v1alpha/auto_suggestion_service.proto (package google.cloud.dataqna.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { AnnotatedString } from "./annotated_string_pb";
import { file_google_cloud_dataqna_v1alpha_annotated_string } from "./annotated_string_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dataqna/v1alpha/auto_suggestion_service.proto.
 */
export const file_google_cloud_dataqna_v1alpha_auto_suggestion_service: GenFile = /*@__PURE__*/
  fileDesc("Cjpnb29nbGUvY2xvdWQvZGF0YXFuYS92MWFscGhhL2F1dG9fc3VnZ2VzdGlvbl9zZXJ2aWNlLnByb3RvEhxnb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhIrkBChVTdWdnZXN0UXVlcmllc1JlcXVlc3QSOQoGcGFyZW50GAEgASgJQingQQL6QSMKIWxvY2F0aW9ucy5nb29nbGVhcGlzLmNvbS9Mb2NhdGlvbhIOCgZzY29wZXMYAiADKAkSDQoFcXVlcnkYAyABKAkSRgoQc3VnZ2VzdGlvbl90eXBlcxgEIAMoDjIsLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuU3VnZ2VzdGlvblR5cGUisQEKClN1Z2dlc3Rpb24SRQoPc3VnZ2VzdGlvbl9pbmZvGAEgASgLMiwuZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5TdWdnZXN0aW9uSW5mbxIVCg1yYW5raW5nX3Njb3JlGAIgASgBEkUKD3N1Z2dlc3Rpb25fdHlwZRgDIAEoDjIsLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuU3VnZ2VzdGlvblR5cGUi4wEKDlN1Z2dlc3Rpb25JbmZvEksKFGFubm90YXRlZF9zdWdnZXN0aW9uGAEgASgLMi0uZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5Bbm5vdGF0ZWRTdHJpbmcSTQoNcXVlcnlfbWF0Y2hlcxgCIAMoCzI2Lmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuU3VnZ2VzdGlvbkluZm8uTWF0Y2hJbmZvGjUKCU1hdGNoSW5mbxIYChBzdGFydF9jaGFyX2luZGV4GAEgASgFEg4KBmxlbmd0aBgCIAEoBSJXChZTdWdnZXN0UXVlcmllc1Jlc3BvbnNlEj0KC3N1Z2dlc3Rpb25zGAEgAygLMiguZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5TdWdnZXN0aW9uKksKDlN1Z2dlc3Rpb25UeXBlEh8KG1NVR0dFU1RJT05fVFlQRV9VTlNQRUNJRklFRBAAEgoKBkVOVElUWRABEgwKCFRFTVBMQVRFEAIypQIKFUF1dG9TdWdnZXN0aW9uU2VydmljZRK/AQoOU3VnZ2VzdFF1ZXJpZXMSMy5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLlN1Z2dlc3RRdWVyaWVzUmVxdWVzdBo0Lmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuU3VnZ2VzdFF1ZXJpZXNSZXNwb25zZSJCgtPkkwI8OgEqIjcvdjFhbHBoYS97cGFyZW50PXByb2plY3RzLyovbG9jYXRpb25zLyp9OnN1Z2dlc3RRdWVyaWVzGkrKQRZkYXRhcW5hLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybULcAQogY29tLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGFCGkF1dG9TdWdnZXN0aW9uU2VydmljZVByb3RvUAFaOmNsb3VkLmdvb2dsZS5jb20vZ28vZGF0YXFuYS9hcGl2MWFscGhhL2RhdGFxbmFwYjtkYXRhcW5hcGKqAhxHb29nbGUuQ2xvdWQuRGF0YVFuQS5WMUFscGhhygIcR29vZ2xlXENsb3VkXERhdGFRbkFcVjFhbHBoYeoCH0dvb2dsZTo6Q2xvdWQ6OkRhdGFRbkE6OlYxYWxwaGFiBnByb3RvMw", [file_google_api_annotations, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dataqna_v1alpha_annotated_string, file_google_api_client]);

/**
 * Request for query suggestions.
 *
 * @generated from message google.cloud.dataqna.v1alpha.SuggestQueriesRequest
 */
export type SuggestQueriesRequest = Message<"google.cloud.dataqna.v1alpha.SuggestQueriesRequest"> & {
  /**
   * Required. The parent of the suggestion query is the resource denoting the project and
   * location.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The scopes to which this search is restricted. The only supported scope
   * pattern is
   * `//bigquery.googleapis.com/projects/{GCP-PROJECT-ID}/datasets/{DATASET-ID}/tables/{TABLE-ID}`.
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];

  /**
   * User query for which to generate suggestions. If the query is empty, zero
   * state suggestions are returned. This allows UIs to display suggestions
   * right away, helping the user to get a sense of what a query might look
   * like.
   *
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * The requested suggestion type. Multiple suggestion types can be
   * requested, but there is no guarantee that the service will return
   * suggestions for each type. Suggestions for a requested type might rank
   * lower than suggestions for other types and the service may decide to cut
   * these suggestions off.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.SuggestionType suggestion_types = 4;
   */
  suggestionTypes: SuggestionType[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.SuggestQueriesRequest.
 * Use `create(SuggestQueriesRequestSchema)` to create a new message.
 */
export const SuggestQueriesRequestSchema: GenMessage<SuggestQueriesRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 0);

/**
 * A suggestion for a query with a ranking score.
 *
 * @generated from message google.cloud.dataqna.v1alpha.Suggestion
 */
export type Suggestion = Message<"google.cloud.dataqna.v1alpha.Suggestion"> & {
  /**
   * Detailed information about the suggestion.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.SuggestionInfo suggestion_info = 1;
   */
  suggestionInfo?: SuggestionInfo;

  /**
   * The score of the suggestion. This can be used to define ordering in UI.
   * The score represents confidence in the suggestion where higher is better.
   * All score values must be in the range [0, 1).
   *
   * @generated from field: double ranking_score = 2;
   */
  rankingScore: number;

  /**
   * The type of the suggestion.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.SuggestionType suggestion_type = 3;
   */
  suggestionType: SuggestionType;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.Suggestion.
 * Use `create(SuggestionSchema)` to create a new message.
 */
export const SuggestionSchema: GenMessage<Suggestion> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 1);

/**
 * Detailed information about the suggestion.
 *
 * @generated from message google.cloud.dataqna.v1alpha.SuggestionInfo
 */
export type SuggestionInfo = Message<"google.cloud.dataqna.v1alpha.SuggestionInfo"> & {
  /**
   * Annotations for the suggestion. This provides information about which part
   * of the suggestion corresponds to what semantic meaning (e.g. a metric).
   *
   * @generated from field: google.cloud.dataqna.v1alpha.AnnotatedString annotated_suggestion = 1;
   */
  annotatedSuggestion?: AnnotatedString;

  /**
   * Matches between user query and the annotated string.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.SuggestionInfo.MatchInfo query_matches = 2;
   */
  queryMatches: SuggestionInfo_MatchInfo[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.SuggestionInfo.
 * Use `create(SuggestionInfoSchema)` to create a new message.
 */
export const SuggestionInfoSchema: GenMessage<SuggestionInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 2);

/**
 * MatchInfo describes which part of suggestion matched with data in user
 * typed query. This can be used to highlight matching parts in the UI. This
 * is different from the annotations provided in annotated_suggestion. The
 * annotated_suggestion provides information about the semantic meaning, while
 * this provides information about how it relates to the input.
 *
 * Example:
 * user query: `top products`
 *
 * ```
 * annotated_suggestion {
 *  text_formatted = "top product_group"
 *  html_formatted = "top <b>product_group</b>"
 *  markups {
 *   {type: TEXT, start_char_index: 0, length: 3}
 *   {type: DIMENSION, start_char_index: 4, length: 13}
 *  }
 * }
 *
 * query_matches {
 *  { start_char_index: 0, length: 3 }
 *  { start_char_index: 4, length: 7}
 * }
 * ```
 *
 * @generated from message google.cloud.dataqna.v1alpha.SuggestionInfo.MatchInfo
 */
export type SuggestionInfo_MatchInfo = Message<"google.cloud.dataqna.v1alpha.SuggestionInfo.MatchInfo"> & {
  /**
   * Unicode character index of the string annotation.
   *
   * @generated from field: int32 start_char_index = 1;
   */
  startCharIndex: number;

  /**
   * Count of unicode characters of this substring.
   *
   * @generated from field: int32 length = 2;
   */
  length: number;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.SuggestionInfo.MatchInfo.
 * Use `create(SuggestionInfo_MatchInfoSchema)` to create a new message.
 */
export const SuggestionInfo_MatchInfoSchema: GenMessage<SuggestionInfo_MatchInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 2, 0);

/**
 * Response to SuggestQueries.
 *
 * @generated from message google.cloud.dataqna.v1alpha.SuggestQueriesResponse
 */
export type SuggestQueriesResponse = Message<"google.cloud.dataqna.v1alpha.SuggestQueriesResponse"> & {
  /**
   * A list of suggestions.
   *
   * @generated from field: repeated google.cloud.dataqna.v1alpha.Suggestion suggestions = 1;
   */
  suggestions: Suggestion[];
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.SuggestQueriesResponse.
 * Use `create(SuggestQueriesResponseSchema)` to create a new message.
 */
export const SuggestQueriesResponseSchema: GenMessage<SuggestQueriesResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 3);

/**
 * The type of suggestion.
 *
 * @generated from enum google.cloud.dataqna.v1alpha.SuggestionType
 */
export enum SuggestionType {
  /**
   * No suggestiont type is specified.
   *
   * @generated from enum value: SUGGESTION_TYPE_UNSPECIFIED = 0;
   */
  SUGGESTION_TYPE_UNSPECIFIED = 0,

  /**
   * Entity suggestion type. Suggestions are for single entities.
   *
   * @generated from enum value: ENTITY = 1;
   */
  ENTITY = 1,

  /**
   * Template suggestion type. Suggestions are for full sentences.
   *
   * @generated from enum value: TEMPLATE = 2;
   */
  TEMPLATE = 2,
}

/**
 * Describes the enum google.cloud.dataqna.v1alpha.SuggestionType.
 */
export const SuggestionTypeSchema: GenEnum<SuggestionType> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 0);

/**
 * This stateless API provides automatic suggestions for natural language
 * queries for the data sources in the provided project and location.
 *
 * The service provides a resourceless operation `suggestQueries` that can be
 * called to get a list of suggestions for a given incomplete query and scope
 * (or list of scopes) under which the query is to be interpreted.
 *
 * There are two types of suggestions, ENTITY for single entity suggestions
 * and TEMPLATE for full sentences. By default, both types are returned.
 *
 * Example Request:
 * ```
 * GetSuggestions({
 *   parent: "locations/us/projects/my-project"
 *   scopes:
 *   "//bigquery.googleapis.com/projects/my-project/datasets/my-dataset/tables/my-table"
 *   query: "top it"
 * })
 * ```
 *
 * The service will retrieve information based on the given scope(s) and give
 * suggestions based on that (e.g. "top item" for "top it" if "item" is a known
 * dimension for the provided scope).
 * ```
 * suggestions {
 *   suggestion_info {
 *     annotated_suggestion {
 *       text_formatted: "top item by sum of usd_revenue_net"
 *       markups {
 *         type: DIMENSION
 *         start_char_index: 4
 *         length: 4
 *       }
 *       markups {
 *         type: METRIC
 *         start_char_index: 19
 *         length: 15
 *       }
 *     }
 *     query_matches {
 *       start_char_index: 0
 *       length: 6
 *     }
 *   }
 *   suggestion_type: TEMPLATE
 *   ranking_score: 0.9
 * }
 * suggestions {
 *   suggestion_info {
 *     annotated_suggestion {
 *       text_formatted: "item"
 *       markups {
 *         type: DIMENSION
 *         start_char_index: 4
 *         length: 2
 *       }
 *     }
 *     query_matches {
 *       start_char_index: 0
 *       length: 6
 *     }
 *   }
 *   suggestion_type: ENTITY
 *   ranking_score: 0.8
 * }
 * ```
 *
 * @generated from service google.cloud.dataqna.v1alpha.AutoSuggestionService
 */
export const AutoSuggestionService: GenService<{
  /**
   * Gets a list of suggestions based on a prefix string.
   * AutoSuggestion tolerance should be less than 1 second.
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.AutoSuggestionService.SuggestQueries
   */
  suggestQueries: {
    methodKind: "unary";
    input: typeof SuggestQueriesRequestSchema;
    output: typeof SuggestQueriesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dataqna_v1alpha_auto_suggestion_service, 0);

