// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dataqna/v1alpha/question_service.proto (package google.cloud.dataqna.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Question, QuestionSchema } from "./question_pb";
import { file_google_cloud_dataqna_v1alpha_question } from "./question_pb";
import type { UserFeedback, UserFeedbackSchema } from "./user_feedback_pb";
import { file_google_cloud_dataqna_v1alpha_user_feedback } from "./user_feedback_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dataqna/v1alpha/question_service.proto.
 */
export const file_google_cloud_dataqna_v1alpha_question_service: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvY2xvdWQvZGF0YXFuYS92MWFscGhhL3F1ZXN0aW9uX3NlcnZpY2UucHJvdG8SHGdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEiegoSR2V0UXVlc3Rpb25SZXF1ZXN0EjUKBG5hbWUYASABKAlCJ+BBAvpBIQofZGF0YXFuYS5nb29nbGVhcGlzLmNvbS9RdWVzdGlvbhItCglyZWFkX21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrIpEBChVDcmVhdGVRdWVzdGlvblJlcXVlc3QSOQoGcGFyZW50GAEgASgJQingQQL6QSMKIWxvY2F0aW9ucy5nb29nbGVhcGlzLmNvbS9Mb2NhdGlvbhI9CghxdWVzdGlvbhgCIAEoCzImLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuUXVlc3Rpb25CA+BBAiJOChZFeGVjdXRlUXVlc3Rpb25SZXF1ZXN0EhEKBG5hbWUYASABKAlCA+BBAhIhChRpbnRlcnByZXRhdGlvbl9pbmRleBgCIAEoBUID4EECIlMKFkdldFVzZXJGZWVkYmFja1JlcXVlc3QSOQoEbmFtZRgBIAEoCUIr4EEC+kElCiNkYXRhcW5hLmdvb2dsZWFwaXMuY29tL1VzZXJGZWVkYmFjayKUAQoZVXBkYXRlVXNlckZlZWRiYWNrUmVxdWVzdBJGCg11c2VyX2ZlZWRiYWNrGAEgASgLMiouZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5Vc2VyRmVlZGJhY2tCA+BBAhIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sy7AgKD1F1ZXN0aW9uU2VydmljZRKqAQoLR2V0UXVlc3Rpb24SMC5nb29nbGUuY2xvdWQuZGF0YXFuYS52MWFscGhhLkdldFF1ZXN0aW9uUmVxdWVzdBomLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuUXVlc3Rpb24iQdpBBG5hbWWC0+STAjQSMi92MWFscGhhL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovcXVlc3Rpb25zLyp9EsUBCg5DcmVhdGVRdWVzdGlvbhIzLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuQ3JlYXRlUXVlc3Rpb25SZXF1ZXN0GiYuZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYS5RdWVzdGlvbiJW2kEPcGFyZW50LHF1ZXN0aW9ugtPkkwI+OghxdWVzdGlvbiIyL3YxYWxwaGEve3BhcmVudD1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qfS9xdWVzdGlvbnMS0gEKD0V4ZWN1dGVRdWVzdGlvbhI0Lmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuRXhlY3V0ZVF1ZXN0aW9uUmVxdWVzdBomLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuUXVlc3Rpb24iYdpBGW5hbWUsaW50ZXJwcmV0YXRpb25faW5kZXiC0+STAj86ASoiOi92MWFscGhhL3tuYW1lPXByb2plY3RzLyovbG9jYXRpb25zLyovcXVlc3Rpb25zLyp9OmV4ZWN1dGUSwwEKD0dldFVzZXJGZWVkYmFjaxI0Lmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuR2V0VXNlckZlZWRiYWNrUmVxdWVzdBoqLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuVXNlckZlZWRiYWNrIk7aQQRuYW1lgtPkkwJBEj8vdjFhbHBoYS97bmFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3F1ZXN0aW9ucy8qL3VzZXJGZWVkYmFja30S/AEKElVwZGF0ZVVzZXJGZWVkYmFjaxI3Lmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuVXBkYXRlVXNlckZlZWRiYWNrUmVxdWVzdBoqLmdvb2dsZS5jbG91ZC5kYXRhcW5hLnYxYWxwaGEuVXNlckZlZWRiYWNrIoAB2kEZdXNlcl9mZWVkYmFjayx1cGRhdGVfbWFza4LT5JMCXjoNdXNlcl9mZWVkYmFjazJNL3YxYWxwaGEve3VzZXJfZmVlZGJhY2submFtZT1wcm9qZWN0cy8qL2xvY2F0aW9ucy8qL3F1ZXN0aW9ucy8qL3VzZXJGZWVkYmFja30aSspBFmRhdGFxbmEuZ29vZ2xlYXBpcy5jb23SQS5odHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQtYBCiBjb20uZ29vZ2xlLmNsb3VkLmRhdGFxbmEudjFhbHBoYUIUUXVlc3Rpb25TZXJ2aWNlUHJvdG9QAVo6Y2xvdWQuZ29vZ2xlLmNvbS9nby9kYXRhcW5hL2FwaXYxYWxwaGEvZGF0YXFuYXBiO2RhdGFxbmFwYqoCHEdvb2dsZS5DbG91ZC5EYXRhUW5BLlYxQWxwaGHKAhxHb29nbGVcQ2xvdWRcRGF0YVFuQVxWMWFscGhh6gIfR29vZ2xlOjpDbG91ZDo6RGF0YVFuQTo6VjFhbHBoYWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dataqna_v1alpha_question, file_google_cloud_dataqna_v1alpha_user_feedback, file_google_protobuf_field_mask]);

/**
 * A request to get a previously created question.
 *
 * @generated from message google.cloud.dataqna.v1alpha.GetQuestionRequest
 */
export type GetQuestionRequest = Message<"google.cloud.dataqna.v1alpha.GetQuestionRequest"> & {
  /**
   * Required. The unique identifier for the question.
   * Example: `projects/foo/locations/bar/questions/1234`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of fields to be retrieved.
   *
   * @generated from field: google.protobuf.FieldMask read_mask = 2;
   */
  readMask?: FieldMask;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.GetQuestionRequest.
 * Use `create(GetQuestionRequestSchema)` to create a new message.
 */
export const GetQuestionRequestSchema: GenMessage<GetQuestionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question_service, 0);

/**
 * Request to create a question resource.
 *
 * @generated from message google.cloud.dataqna.v1alpha.CreateQuestionRequest
 */
export type CreateQuestionRequest = Message<"google.cloud.dataqna.v1alpha.CreateQuestionRequest"> & {
  /**
   * Required. The name of the project this data source reference belongs to.
   * Example: `projects/foo/locations/bar`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The question to create.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.Question question = 2;
   */
  question?: Question;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.CreateQuestionRequest.
 * Use `create(CreateQuestionRequestSchema)` to create a new message.
 */
export const CreateQuestionRequestSchema: GenMessage<CreateQuestionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question_service, 1);

/**
 * Request to execute an interpretation.
 *
 * @generated from message google.cloud.dataqna.v1alpha.ExecuteQuestionRequest
 */
export type ExecuteQuestionRequest = Message<"google.cloud.dataqna.v1alpha.ExecuteQuestionRequest"> & {
  /**
   * Required. The unique identifier for the question.
   * Example: `projects/foo/locations/bar/questions/1234`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Index of the interpretation to execute.
   *
   * @generated from field: int32 interpretation_index = 2;
   */
  interpretationIndex: number;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.ExecuteQuestionRequest.
 * Use `create(ExecuteQuestionRequestSchema)` to create a new message.
 */
export const ExecuteQuestionRequestSchema: GenMessage<ExecuteQuestionRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question_service, 2);

/**
 * Request to get user feedback.
 *
 * @generated from message google.cloud.dataqna.v1alpha.GetUserFeedbackRequest
 */
export type GetUserFeedbackRequest = Message<"google.cloud.dataqna.v1alpha.GetUserFeedbackRequest"> & {
  /**
   * Required. The unique identifier for the user feedback.
   * User feedback is a singleton resource on a Question.
   * Example: `projects/foo/locations/bar/questions/1234/userFeedback`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.GetUserFeedbackRequest.
 * Use `create(GetUserFeedbackRequestSchema)` to create a new message.
 */
export const GetUserFeedbackRequestSchema: GenMessage<GetUserFeedbackRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question_service, 3);

/**
 * Request to updates user feedback.
 *
 * @generated from message google.cloud.dataqna.v1alpha.UpdateUserFeedbackRequest
 */
export type UpdateUserFeedbackRequest = Message<"google.cloud.dataqna.v1alpha.UpdateUserFeedbackRequest"> & {
  /**
   * Required. The user feedback to update. This can be called even if there is no
   * user feedback so far.
   * The feedback's name field is used to identify the user feedback (and the
   * corresponding question) to update.
   *
   * @generated from field: google.cloud.dataqna.v1alpha.UserFeedback user_feedback = 1;
   */
  userFeedback?: UserFeedback;

  /**
   * The list of fields to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.cloud.dataqna.v1alpha.UpdateUserFeedbackRequest.
 * Use `create(UpdateUserFeedbackRequestSchema)` to create a new message.
 */
export const UpdateUserFeedbackRequestSchema: GenMessage<UpdateUserFeedbackRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataqna_v1alpha_question_service, 4);

/**
 * Service to interpret natural language queries.
 * The service allows to create `Question` resources that are interpreted and
 * are filled with one or more interpretations if the question could be
 * interpreted. Once a `Question` resource is created and has at least one
 * interpretation, an interpretation can be chosen for execution, which
 * triggers a query to the backend (for BigQuery, it will create a job).
 * Upon successful execution of that interpretation, backend specific
 * information will be returned so that the client can retrieve the results
 * from the backend.
 *
 * The `Question` resources are named `projects/*\/locations/*\/questions/*`.
 *
 * The `Question` resource has a singletion sub-resource `UserFeedback` named
 * `projects/*\/locations/*\/questions/*\/userFeedback`, which allows access to
 * user feedback.
 *
 * @generated from service google.cloud.dataqna.v1alpha.QuestionService
 */
export const QuestionService: GenService<{
  /**
   * Gets a previously created question.
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.QuestionService.GetQuestion
   */
  getQuestion: {
    methodKind: "unary";
    input: typeof GetQuestionRequestSchema;
    output: typeof QuestionSchema;
  },
  /**
   * Creates a question.
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.QuestionService.CreateQuestion
   */
  createQuestion: {
    methodKind: "unary";
    input: typeof CreateQuestionRequestSchema;
    output: typeof QuestionSchema;
  },
  /**
   * Executes an interpretation.
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.QuestionService.ExecuteQuestion
   */
  executeQuestion: {
    methodKind: "unary";
    input: typeof ExecuteQuestionRequestSchema;
    output: typeof QuestionSchema;
  },
  /**
   * Gets previously created user feedback.
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.QuestionService.GetUserFeedback
   */
  getUserFeedback: {
    methodKind: "unary";
    input: typeof GetUserFeedbackRequestSchema;
    output: typeof UserFeedbackSchema;
  },
  /**
   * Updates user feedback. This creates user feedback if there was none before
   * (upsert).
   *
   * @generated from rpc google.cloud.dataqna.v1alpha.QuestionService.UpdateUserFeedback
   */
  updateUserFeedback: {
    methodKind: "unary";
    input: typeof UpdateUserFeedbackRequestSchema;
    output: typeof UserFeedbackSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dataqna_v1alpha_question_service, 0);

