// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/dataproc/v1/clusters.proto (package google.cloud.dataproc.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import { file_google_cloud_dataproc_v1_operations } from "./operations_pb";
import type { Component, FailureAction, KubernetesClusterConfig, SparkHistoryServerConfig } from "./shared_pb";
import { file_google_cloud_dataproc_v1_shared } from "./shared_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Interval } from "../../../type/interval_pb";
import { file_google_type_interval } from "../../../type/interval_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/dataproc/v1/clusters.proto.
 */
export const file_google_cloud_dataproc_v1_clusters: GenFile = /*@__PURE__*/
  fileDesc("Cidnb29nbGUvY2xvdWQvZGF0YXByb2MvdjEvY2x1c3RlcnMucHJvdG8SGGdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MSKiBAoHQ2x1c3RlchIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISGQoMY2x1c3Rlcl9uYW1lGAIgASgJQgPgQQISPAoGY29uZmlnGAMgASgLMicuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJDb25maWdCA+BBARJTChZ2aXJ0dWFsX2NsdXN0ZXJfY29uZmlnGAogASgLMi4uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLlZpcnR1YWxDbHVzdGVyQ29uZmlnQgPgQQESQgoGbGFiZWxzGAggAygLMi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXIuTGFiZWxzRW50cnlCA+BBARI8CgZzdGF0dXMYBCABKAsyJy5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3RlclN0YXR1c0ID4EEDEkQKDnN0YXR1c19oaXN0b3J5GAcgAygLMicuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJTdGF0dXNCA+BBAxIZCgxjbHVzdGVyX3V1aWQYBiABKAlCA+BBAxI+CgdtZXRyaWNzGAkgASgLMiguZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJNZXRyaWNzQgPgQQMaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKDCQoNQ2x1c3RlckNvbmZpZxIaCg1jb25maWdfYnVja2V0GAEgASgJQgPgQQESGAoLdGVtcF9idWNrZXQYAiABKAlCA+BBARJLChJnY2VfY2x1c3Rlcl9jb25maWcYCCABKAsyKi5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuR2NlQ2x1c3RlckNvbmZpZ0ID4EEBEkkKDW1hc3Rlcl9jb25maWcYCSABKAsyLS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuSW5zdGFuY2VHcm91cENvbmZpZ0ID4EEBEkkKDXdvcmtlcl9jb25maWcYCiABKAsyLS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuSW5zdGFuY2VHcm91cENvbmZpZ0ID4EEBElMKF3NlY29uZGFyeV93b3JrZXJfY29uZmlnGAwgASgLMi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkluc3RhbmNlR3JvdXBDb25maWdCA+BBARJGCg9zb2Z0d2FyZV9jb25maWcYDSABKAsyKC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuU29mdHdhcmVDb25maWdCA+BBARJXChZpbml0aWFsaXphdGlvbl9hY3Rpb25zGAsgAygLMjIuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLk5vZGVJbml0aWFsaXphdGlvbkFjdGlvbkID4EEBEkoKEWVuY3J5cHRpb25fY29uZmlnGA8gASgLMiouZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkVuY3J5cHRpb25Db25maWdCA+BBARJMChJhdXRvc2NhbGluZ19jb25maWcYEiABKAsyKy5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQXV0b3NjYWxpbmdDb25maWdCA+BBARJGCg9zZWN1cml0eV9jb25maWcYECABKAsyKC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuU2VjdXJpdHlDb25maWdCA+BBARJIChBsaWZlY3ljbGVfY29uZmlnGBEgASgLMikuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkxpZmVjeWNsZUNvbmZpZ0ID4EEBEkYKD2VuZHBvaW50X2NvbmZpZxgTIAEoCzIoLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5FbmRwb2ludENvbmZpZ0ID4EEBEkgKEG1ldGFzdG9yZV9jb25maWcYFCABKAsyKS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuTWV0YXN0b3JlQ29uZmlnQgPgQQESUwoWZGF0YXByb2NfbWV0cmljX2NvbmZpZxgXIAEoCzIuLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5EYXRhcHJvY01ldHJpY0NvbmZpZ0ID4EEBElAKFWF1eGlsaWFyeV9ub2RlX2dyb3VwcxgZIAMoCzIsLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5BdXhpbGlhcnlOb2RlR3JvdXBCA+BBASKEAgoUVmlydHVhbENsdXN0ZXJDb25maWcSGwoOc3RhZ2luZ19idWNrZXQYASABKAlCA+BBARJbChlrdWJlcm5ldGVzX2NsdXN0ZXJfY29uZmlnGAYgASgLMjEuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkt1YmVybmV0ZXNDbHVzdGVyQ29uZmlnQgPgQQJIABJZChlhdXhpbGlhcnlfc2VydmljZXNfY29uZmlnGAcgASgLMjEuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkF1eGlsaWFyeVNlcnZpY2VzQ29uZmlnQgPgQQFCFwoVaW5mcmFzdHJ1Y3R1cmVfY29uZmlnIsEBChdBdXhpbGlhcnlTZXJ2aWNlc0NvbmZpZxJIChBtZXRhc3RvcmVfY29uZmlnGAEgASgLMikuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLk1ldGFzdG9yZUNvbmZpZ0ID4EEBElwKG3NwYXJrX2hpc3Rvcnlfc2VydmVyX2NvbmZpZxgCIAEoCzIyLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5TcGFya0hpc3RvcnlTZXJ2ZXJDb25maWdCA+BBASK6AQoORW5kcG9pbnRDb25maWcSUAoKaHR0cF9wb3J0cxgBIAMoCzI3Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5FbmRwb2ludENvbmZpZy5IdHRwUG9ydHNFbnRyeUID4EEDEiQKF2VuYWJsZV9odHRwX3BvcnRfYWNjZXNzGAIgASgIQgPgQQEaMAoOSHR0cFBvcnRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIsChFBdXRvc2NhbGluZ0NvbmZpZxIXCgpwb2xpY3lfdXJpGAEgASgJQgPgQQEicAoQRW5jcnlwdGlvbkNvbmZpZxIgChNnY2VfcGRfa21zX2tleV9uYW1lGAEgASgJQgPgQQESOgoHa21zX2tleRgCIAEoCUIp4EEB+kEjCiFjbG91ZGttcy5nb29nbGVhcGlzLmNvbS9DcnlwdG9LZXkiugcKEEdjZUNsdXN0ZXJDb25maWcSFQoIem9uZV91cmkYASABKAlCA+BBARIYCgtuZXR3b3JrX3VyaRgCIAEoCUID4EEBEhsKDnN1Ym5ldHdvcmtfdXJpGAYgASgJQgPgQQESIgoQaW50ZXJuYWxfaXBfb25seRgHIAEoCEID4EEBSACIAQESawoacHJpdmF0ZV9pcHY2X2dvb2dsZV9hY2Nlc3MYDCABKA4yQi5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuR2NlQ2x1c3RlckNvbmZpZy5Qcml2YXRlSXB2Nkdvb2dsZUFjY2Vzc0ID4EEBEhwKD3NlcnZpY2VfYWNjb3VudBgIIAEoCUID4EEBEiMKFnNlcnZpY2VfYWNjb3VudF9zY29wZXMYAyADKAlCA+BBARIMCgR0YWdzGAQgAygJEk8KCG1ldGFkYXRhGAUgAygLMjguZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkdjZUNsdXN0ZXJDb25maWcuTWV0YWRhdGFFbnRyeUID4EEBElAKFHJlc2VydmF0aW9uX2FmZmluaXR5GAsgASgLMi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLlJlc2VydmF0aW9uQWZmaW5pdHlCA+BBARJNChNub2RlX2dyb3VwX2FmZmluaXR5GA0gASgLMisuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLk5vZGVHcm91cEFmZmluaXR5QgPgQQESVwoYc2hpZWxkZWRfaW5zdGFuY2VfY29uZmlnGA4gASgLMjAuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLlNoaWVsZGVkSW5zdGFuY2VDb25maWdCA+BBARJfChxjb25maWRlbnRpYWxfaW5zdGFuY2VfY29uZmlnGA8gASgLMjQuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNvbmZpZGVudGlhbEluc3RhbmNlQ29uZmlnQgPgQQEaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIoMBChdQcml2YXRlSXB2Nkdvb2dsZUFjY2VzcxIqCiZQUklWQVRFX0lQVjZfR09PR0xFX0FDQ0VTU19VTlNQRUNJRklFRBAAEhsKF0lOSEVSSVRfRlJPTV9TVUJORVRXT1JLEAESDAoIT1VUQk9VTkQQAhIRCg1CSURJUkVDVElPTkFMEANCEwoRX2ludGVybmFsX2lwX29ubHkiMAoRTm9kZUdyb3VwQWZmaW5pdHkSGwoObm9kZV9ncm91cF91cmkYASABKAlCA+BBAiLTAQoWU2hpZWxkZWRJbnN0YW5jZUNvbmZpZxIkChJlbmFibGVfc2VjdXJlX2Jvb3QYASABKAhCA+BBAUgAiAEBEh0KC2VuYWJsZV92dHBtGAIgASgIQgPgQQFIAYgBARItChtlbmFibGVfaW50ZWdyaXR5X21vbml0b3JpbmcYAyABKAhCA+BBAUgCiAEBQhUKE19lbmFibGVfc2VjdXJlX2Jvb3RCDgoMX2VuYWJsZV92dHBtQh4KHF9lbmFibGVfaW50ZWdyaXR5X21vbml0b3JpbmciRgoaQ29uZmlkZW50aWFsSW5zdGFuY2VDb25maWcSKAobZW5hYmxlX2NvbmZpZGVudGlhbF9jb21wdXRlGAEgASgIQgPgQQEi6wYKE0luc3RhbmNlR3JvdXBDb25maWcSGgoNbnVtX2luc3RhbmNlcxgBIAEoBUID4EEBEhsKDmluc3RhbmNlX25hbWVzGAIgAygJQgPgQQMSTQoTaW5zdGFuY2VfcmVmZXJlbmNlcxgLIAMoCzIrLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5JbnN0YW5jZVJlZmVyZW5jZUID4EEDEhYKCWltYWdlX3VyaRgDIAEoCUID4EEBEh0KEG1hY2hpbmVfdHlwZV91cmkYBCABKAlCA+BBARI+CgtkaXNrX2NvbmZpZxgFIAEoCzIkLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5EaXNrQ29uZmlnQgPgQQESGwoOaXNfcHJlZW1wdGlibGUYBiABKAhCA+BBAxJZCg5wcmVlbXB0aWJpbGl0eRgKIAEoDjI8Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5JbnN0YW5jZUdyb3VwQ29uZmlnLlByZWVtcHRpYmlsaXR5QgPgQQESTwoUbWFuYWdlZF9ncm91cF9jb25maWcYByABKAsyLC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuTWFuYWdlZEdyb3VwQ29uZmlnQgPgQQMSRgoMYWNjZWxlcmF0b3JzGAggAygLMisuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkFjY2VsZXJhdG9yQ29uZmlnQgPgQQESHQoQbWluX2NwdV9wbGF0Zm9ybRgJIAEoCUID4EEBEh4KEW1pbl9udW1faW5zdGFuY2VzGAwgASgFQgPgQQESXQobaW5zdGFuY2VfZmxleGliaWxpdHlfcG9saWN5GA0gASgLMjMuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkluc3RhbmNlRmxleGliaWxpdHlQb2xpY3lCA+BBARJECg5zdGFydHVwX2NvbmZpZxgOIAEoCzInLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5TdGFydHVwQ29uZmlnQgPgQQEiYAoOUHJlZW1wdGliaWxpdHkSHgoaUFJFRU1QVElCSUxJVFlfVU5TUEVDSUZJRUQQABITCg9OT05fUFJFRU1QVElCTEUQARIPCgtQUkVFTVBUSUJMRRACEggKBFNQT1QQAyJkCg1TdGFydHVwQ29uZmlnEjAKHnJlcXVpcmVkX3JlZ2lzdHJhdGlvbl9mcmFjdGlvbhgBIAEoAUID4EEBSACIAQFCIQofX3JlcXVpcmVkX3JlZ2lzdHJhdGlvbl9mcmFjdGlvbiJtChFJbnN0YW5jZVJlZmVyZW5jZRIVCg1pbnN0YW5jZV9uYW1lGAEgASgJEhMKC2luc3RhbmNlX2lkGAIgASgJEhIKCnB1YmxpY19rZXkYAyABKAkSGAoQcHVibGljX2VjaWVzX2tleRgEIAEoCSKMAQoSTWFuYWdlZEdyb3VwQ29uZmlnEiMKFmluc3RhbmNlX3RlbXBsYXRlX25hbWUYASABKAlCA+BBAxIoChtpbnN0YW5jZV9ncm91cF9tYW5hZ2VyX25hbWUYAiABKAlCA+BBAxInChppbnN0YW5jZV9ncm91cF9tYW5hZ2VyX3VyaRgDIAEoCUID4EEDIrcDChlJbnN0YW5jZUZsZXhpYmlsaXR5UG9saWN5EmsKF2luc3RhbmNlX3NlbGVjdGlvbl9saXN0GAIgAygLMkUuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkluc3RhbmNlRmxleGliaWxpdHlQb2xpY3kuSW5zdGFuY2VTZWxlY3Rpb25CA+BBARJ0ChppbnN0YW5jZV9zZWxlY3Rpb25fcmVzdWx0cxgDIAMoCzJLLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5JbnN0YW5jZUZsZXhpYmlsaXR5UG9saWN5Lkluc3RhbmNlU2VsZWN0aW9uUmVzdWx0QgPgQQMaQgoRSW5zdGFuY2VTZWxlY3Rpb24SGgoNbWFjaGluZV90eXBlcxgBIAMoCUID4EEBEhEKBHJhbmsYAiABKAVCA+BBARpzChdJbnN0YW5jZVNlbGVjdGlvblJlc3VsdBIeCgxtYWNoaW5lX3R5cGUYASABKAlCA+BBA0gAiAEBEhoKCHZtX2NvdW50GAIgASgFQgPgQQNIAYgBAUIPCg1fbWFjaGluZV90eXBlQgsKCV92bV9jb3VudCJMChFBY2NlbGVyYXRvckNvbmZpZxIcChRhY2NlbGVyYXRvcl90eXBlX3VyaRgBIAEoCRIZChFhY2NlbGVyYXRvcl9jb3VudBgCIAEoBSKIAQoKRGlza0NvbmZpZxIbCg5ib290X2Rpc2tfdHlwZRgDIAEoCUID4EEBEh4KEWJvb3RfZGlza19zaXplX2diGAEgASgFQgPgQQESGwoObnVtX2xvY2FsX3NzZHMYAiABKAVCA+BBARIgChNsb2NhbF9zc2RfaW50ZXJmYWNlGAQgASgJQgPgQQEibgoSQXV4aWxpYXJ5Tm9kZUdyb3VwEjwKCm5vZGVfZ3JvdXAYASABKAsyIy5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuTm9kZUdyb3VwQgPgQQISGgoNbm9kZV9ncm91cF9pZBgCIAEoCUID4EEBIr0DCglOb2RlR3JvdXASDAoEbmFtZRgBIAEoCRI8CgVyb2xlcxgCIAMoDjIoLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5Ob2RlR3JvdXAuUm9sZUID4EECEk0KEW5vZGVfZ3JvdXBfY29uZmlnGAMgASgLMi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkluc3RhbmNlR3JvdXBDb25maWdCA+BBARJECgZsYWJlbHMYBCADKAsyLy5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuTm9kZUdyb3VwLkxhYmVsc0VudHJ5QgPgQQEaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIoCgRSb2xlEhQKEFJPTEVfVU5TUEVDSUZJRUQQABIKCgZEUklWRVIQATp26kFzCiFkYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9Ob2RlR3JvdXASTnByb2plY3RzL3twcm9qZWN0fS9yZWdpb25zL3tyZWdpb259L2NsdXN0ZXJzL3tjbHVzdGVyfS9ub2RlR3JvdXBzL3tub2RlX2dyb3VwfSJzChhOb2RlSW5pdGlhbGl6YXRpb25BY3Rpb24SHAoPZXhlY3V0YWJsZV9maWxlGAEgASgJQgPgQQISOQoRZXhlY3V0aW9uX3RpbWVvdXQYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBASLWAwoNQ2x1c3RlclN0YXR1cxJBCgVzdGF0ZRgBIAEoDjItLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyU3RhdHVzLlN0YXRlQgPgQQMSFgoGZGV0YWlsGAIgASgJQgbgQQPgQQESOQoQc3RhdGVfc3RhcnRfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxJHCghzdWJzdGF0ZRgEIAEoDjIwLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyU3RhdHVzLlN1YnN0YXRlQgPgQQMipwEKBVN0YXRlEgsKB1VOS05PV04QABIMCghDUkVBVElORxABEgsKB1JVTk5JTkcQAhIJCgVFUlJPUhADEhcKE0VSUk9SX0RVRV9UT19VUERBVEUQCRIMCghERUxFVElORxAEEgwKCFVQREFUSU5HEAUSDAoIU1RPUFBJTkcQBhILCgdTVE9QUEVEEAcSDAoIU1RBUlRJTkcQCBINCglSRVBBSVJJTkcQCiI8CghTdWJzdGF0ZRIPCgtVTlNQRUNJRklFRBAAEg0KCVVOSEVBTFRIWRABEhAKDFNUQUxFX1NUQVRVUxACIqABCg5TZWN1cml0eUNvbmZpZxJGCg9rZXJiZXJvc19jb25maWcYASABKAsyKC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuS2VyYmVyb3NDb25maWdCA+BBARJGCg9pZGVudGl0eV9jb25maWcYAiABKAsyKC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuSWRlbnRpdHlDb25maWdCA+BBASKQBAoOS2VyYmVyb3NDb25maWcSHAoPZW5hYmxlX2tlcmJlcm9zGAEgASgIQgPgQQESKAobcm9vdF9wcmluY2lwYWxfcGFzc3dvcmRfdXJpGAIgASgJQgPgQQESGAoLa21zX2tleV91cmkYAyABKAlCA+BBARIZCgxrZXlzdG9yZV91cmkYBCABKAlCA+BBARIbCg50cnVzdHN0b3JlX3VyaRgFIAEoCUID4EEBEiIKFWtleXN0b3JlX3Bhc3N3b3JkX3VyaRgGIAEoCUID4EEBEh0KEGtleV9wYXNzd29yZF91cmkYByABKAlCA+BBARIkChd0cnVzdHN0b3JlX3Bhc3N3b3JkX3VyaRgIIAEoCUID4EEBEiQKF2Nyb3NzX3JlYWxtX3RydXN0X3JlYWxtGAkgASgJQgPgQQESIgoVY3Jvc3NfcmVhbG1fdHJ1c3Rfa2RjGAogASgJQgPgQQESKwoeY3Jvc3NfcmVhbG1fdHJ1c3RfYWRtaW5fc2VydmVyGAsgASgJQgPgQQESMgolY3Jvc3NfcmVhbG1fdHJ1c3Rfc2hhcmVkX3Bhc3N3b3JkX3VyaRgMIAEoCUID4EEBEhsKDmtkY19kYl9rZXlfdXJpGA0gASgJQgPgQQESHwoSdGd0X2xpZmV0aW1lX2hvdXJzGA4gASgFQgPgQQESEgoFcmVhbG0YDyABKAlCA+BBASLGAQoOSWRlbnRpdHlDb25maWcScgocdXNlcl9zZXJ2aWNlX2FjY291bnRfbWFwcGluZxgBIAMoCzJHLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5JZGVudGl0eUNvbmZpZy5Vc2VyU2VydmljZUFjY291bnRNYXBwaW5nRW50cnlCA+BBAhpACh5Vc2VyU2VydmljZUFjY291bnRNYXBwaW5nRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASL5AQoOU29mdHdhcmVDb25maWcSGgoNaW1hZ2VfdmVyc2lvbhgBIAEoCUID4EEBElEKCnByb3BlcnRpZXMYAiADKAsyOC5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuU29mdHdhcmVDb25maWcuUHJvcGVydGllc0VudHJ5QgPgQQESRQoTb3B0aW9uYWxfY29tcG9uZW50cxgDIAMoDjIjLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5Db21wb25lbnRCA+BBARoxCg9Qcm9wZXJ0aWVzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKDAgoPTGlmZWN5Y2xlQ29uZmlnEjcKD2lkbGVfZGVsZXRlX3R0bBgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkID4EEBEjsKEGF1dG9fZGVsZXRlX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQFIABI5Cg9hdXRvX2RlbGV0ZV90dGwYAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBAUgAEjgKD2lkbGVfc3RhcnRfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBA0IFCgN0dGwiXwoPTWV0YXN0b3JlQ29uZmlnEkwKGmRhdGFwcm9jX21ldGFzdG9yZV9zZXJ2aWNlGAEgASgJQijgQQL6QSIKIG1ldGFzdG9yZS5nb29nbGVhcGlzLmNvbS9TZXJ2aWNlIpoCCg5DbHVzdGVyTWV0cmljcxJPCgxoZGZzX21ldHJpY3MYASADKAsyOS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3Rlck1ldHJpY3MuSGRmc01ldHJpY3NFbnRyeRJPCgx5YXJuX21ldHJpY3MYAiADKAsyOS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3Rlck1ldHJpY3MuWWFybk1ldHJpY3NFbnRyeRoyChBIZGZzTWV0cmljc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEaMgoQWWFybk1ldHJpY3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIp0DChREYXRhcHJvY01ldHJpY0NvbmZpZxJLCgdtZXRyaWNzGAEgAygLMjUuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkRhdGFwcm9jTWV0cmljQ29uZmlnLk1ldHJpY0ID4EECGoABCgZNZXRyaWMSVwoNbWV0cmljX3NvdXJjZRgBIAEoDjI7Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5EYXRhcHJvY01ldHJpY0NvbmZpZy5NZXRyaWNTb3VyY2VCA+BBAhIdChBtZXRyaWNfb3ZlcnJpZGVzGAIgAygJQgPgQQEitAEKDE1ldHJpY1NvdXJjZRIdChlNRVRSSUNfU09VUkNFX1VOU1BFQ0lGSUVEEAASHQoZTU9OSVRPUklOR19BR0VOVF9ERUZBVUxUUxABEggKBEhERlMQAhIJCgVTUEFSSxADEggKBFlBUk4QBBIYChRTUEFSS19ISVNUT1JZX1NFUlZFUhAFEg8KC0hJVkVTRVJWRVIyEAYSEQoNSElWRU1FVEFTVE9SRRAHEgkKBUZMSU5LEAgi7gEKFENyZWF0ZUNsdXN0ZXJSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhITCgZyZWdpb24YAyABKAlCA+BBAhI3CgdjbHVzdGVyGAIgASgLMiEuZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJCA+BBAhIXCgpyZXF1ZXN0X2lkGAQgASgJQgPgQQESVgogYWN0aW9uX29uX2ZhaWxlZF9wcmltYXJ5X3dvcmtlcnMYBSABKA4yJy5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuRmFpbHVyZUFjdGlvbkID4EEBIq4CChRVcGRhdGVDbHVzdGVyUmVxdWVzdBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISEwoGcmVnaW9uGAUgASgJQgPgQQISGQoMY2x1c3Rlcl9uYW1lGAIgASgJQgPgQQISNwoHY2x1c3RlchgDIAEoCzIhLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyQgPgQQISRQodZ3JhY2VmdWxfZGVjb21taXNzaW9uX3RpbWVvdXQYBiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBARI0Cgt1cGRhdGVfbWFzaxgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAhIXCgpyZXF1ZXN0X2lkGAcgASgJQgPgQQEikQEKElN0b3BDbHVzdGVyUmVxdWVzdBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISEwoGcmVnaW9uGAIgASgJQgPgQQISGQoMY2x1c3Rlcl9uYW1lGAMgASgJQgPgQQISGQoMY2x1c3Rlcl91dWlkGAQgASgJQgPgQQESFwoKcmVxdWVzdF9pZBgFIAEoCUID4EEBIpIBChNTdGFydENsdXN0ZXJSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhITCgZyZWdpb24YAiABKAlCA+BBAhIZCgxjbHVzdGVyX25hbWUYAyABKAlCA+BBAhIZCgxjbHVzdGVyX3V1aWQYBCABKAlCA+BBARIXCgpyZXF1ZXN0X2lkGAUgASgJQgPgQQEikwEKFERlbGV0ZUNsdXN0ZXJSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhITCgZyZWdpb24YAyABKAlCA+BBAhIZCgxjbHVzdGVyX25hbWUYAiABKAlCA+BBAhIZCgxjbHVzdGVyX3V1aWQYBCABKAlCA+BBARIXCgpyZXF1ZXN0X2lkGAUgASgJQgPgQQEiXAoRR2V0Q2x1c3RlclJlcXVlc3QSFwoKcHJvamVjdF9pZBgBIAEoCUID4EECEhMKBnJlZ2lvbhgDIAEoCUID4EECEhkKDGNsdXN0ZXJfbmFtZRgCIAEoCUID4EECIokBChNMaXN0Q2x1c3RlcnNSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhITCgZyZWdpb24YBCABKAlCA+BBAhITCgZmaWx0ZXIYBSABKAlCA+BBARIWCglwYWdlX3NpemUYAiABKAVCA+BBARIXCgpwYWdlX3Rva2VuGAMgASgJQgPgQQEibgoUTGlzdENsdXN0ZXJzUmVzcG9uc2USOAoIY2x1c3RlcnMYASADKAsyIS5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3RlckID4EEDEhwKD25leHRfcGFnZV90b2tlbhgCIAEoCUID4EEDIrMDChZEaWFnbm9zZUNsdXN0ZXJSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhITCgZyZWdpb24YAyABKAlCA+BBAhIZCgxjbHVzdGVyX25hbWUYAiABKAlCA+BBAhIcCg90YXJiYWxsX2djc19kaXIYBCABKAlCA+BBARJbCg50YXJiYWxsX2FjY2VzcxgFIAEoDjI+Lmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5EaWFnbm9zZUNsdXN0ZXJSZXF1ZXN0LlRhcmJhbGxBY2Nlc3NCA+BBARI2ChJkaWFnbm9zaXNfaW50ZXJ2YWwYBiABKAsyFS5nb29nbGUudHlwZS5JbnRlcnZhbEID4EEBEhEKBGpvYnMYCiADKAlCA+BBARIhChR5YXJuX2FwcGxpY2F0aW9uX2lkcxgLIAMoCUID4EEBImcKDVRhcmJhbGxBY2Nlc3MSHgoaVEFSQkFMTF9BQ0NFU1NfVU5TUEVDSUZJRUQQABIYChRHT09HTEVfQ0xPVURfU1VQUE9SVBABEhwKGEdPT0dMRV9EQVRBUFJPQ19ESUFHTk9TRRACIjEKFkRpYWdub3NlQ2x1c3RlclJlc3VsdHMSFwoKb3V0cHV0X3VyaRgBIAEoCUID4EEDIvgBChNSZXNlcnZhdGlvbkFmZmluaXR5ElkKGGNvbnN1bWVfcmVzZXJ2YXRpb25fdHlwZRgBIAEoDjIyLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5SZXNlcnZhdGlvbkFmZmluaXR5LlR5cGVCA+BBARIQCgNrZXkYAiABKAlCA+BBARITCgZ2YWx1ZXMYAyADKAlCA+BBASJfCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABISCg5OT19SRVNFUlZBVElPThABEhMKD0FOWV9SRVNFUlZBVElPThACEhgKFFNQRUNJRklDX1JFU0VSVkFUSU9OEAMy5BAKEUNsdXN0ZXJDb250cm9sbGVyEoACCg1DcmVhdGVDbHVzdGVyEi4uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNyZWF0ZUNsdXN0ZXJSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiKfAcpBPAoHQ2x1c3RlchIxZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJPcGVyYXRpb25NZXRhZGF0YdpBGXByb2plY3RfaWQscmVnaW9uLGNsdXN0ZXKC0+STAj46B2NsdXN0ZXIiMy92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vcmVnaW9ucy97cmVnaW9ufS9jbHVzdGVycxKoAgoNVXBkYXRlQ2x1c3RlchIuLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5VcGRhdGVDbHVzdGVyUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24ixwHKQTwKB0NsdXN0ZXISMWdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyT3BlcmF0aW9uTWV0YWRhdGHaQTJwcm9qZWN0X2lkLHJlZ2lvbixjbHVzdGVyX25hbWUsY2x1c3Rlcix1cGRhdGVfbWFza4LT5JMCTToHY2x1c3RlcjJCL3YxL3Byb2plY3RzL3twcm9qZWN0X2lkfS9yZWdpb25zL3tyZWdpb259L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9Eu4BCgtTdG9wQ2x1c3RlchIsLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5TdG9wQ2x1c3RlclJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIpEBykE8CgdDbHVzdGVyEjFnb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3Rlck9wZXJhdGlvbk1ldGFkYXRhgtPkkwJMOgEqIkcvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L3JlZ2lvbnMve3JlZ2lvbn0vY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX06c3RvcBLxAQoMU3RhcnRDbHVzdGVyEi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLlN0YXJ0Q2x1c3RlclJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIpIBykE8CgdDbHVzdGVyEjFnb29nbGUuY2xvdWQuZGF0YXByb2MudjEuQ2x1c3Rlck9wZXJhdGlvbk1ldGFkYXRhgtPkkwJNOgEqIkgvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L3JlZ2lvbnMve3JlZ2lvbn0vY2x1c3RlcnMve2NsdXN0ZXJfbmFtZX06c3RhcnQSmQIKDURlbGV0ZUNsdXN0ZXISLi5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuRGVsZXRlQ2x1c3RlclJlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIrgBykFKChVnb29nbGUucHJvdG9idWYuRW1wdHkSMWdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyT3BlcmF0aW9uTWV0YWRhdGHaQR5wcm9qZWN0X2lkLHJlZ2lvbixjbHVzdGVyX25hbWWC0+STAkQqQi92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vcmVnaW9ucy97cmVnaW9ufS9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfRLJAQoKR2V0Q2x1c3RlchIrLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5HZXRDbHVzdGVyUmVxdWVzdBohLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5DbHVzdGVyImvaQR5wcm9qZWN0X2lkLHJlZ2lvbixjbHVzdGVyX25hbWWC0+STAkQSQi92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vcmVnaW9ucy97cmVnaW9ufS9jbHVzdGVycy97Y2x1c3Rlcl9uYW1lfRLZAQoMTGlzdENsdXN0ZXJzEi0uZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkxpc3RDbHVzdGVyc1JlcXVlc3QaLi5nb29nbGUuY2xvdWQuZGF0YXByb2MudjEuTGlzdENsdXN0ZXJzUmVzcG9uc2UiatpBEXByb2plY3RfaWQscmVnaW9u2kEYcHJvamVjdF9pZCxyZWdpb24sZmlsdGVygtPkkwI1EjMvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L3JlZ2lvbnMve3JlZ2lvbn0vY2x1c3RlcnMSqgIKD0RpYWdub3NlQ2x1c3RlchIwLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MS5EaWFnbm9zZUNsdXN0ZXJSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiLFAcpBSwoWRGlhZ25vc2VDbHVzdGVyUmVzdWx0cxIxZ29vZ2xlLmNsb3VkLmRhdGFwcm9jLnYxLkNsdXN0ZXJPcGVyYXRpb25NZXRhZGF0YdpBHnByb2plY3RfaWQscmVnaW9uLGNsdXN0ZXJfbmFtZYLT5JMCUDoBKiJLL3YxL3Byb2plY3RzL3twcm9qZWN0X2lkfS9yZWdpb25zL3tyZWdpb259L2NsdXN0ZXJzL3tjbHVzdGVyX25hbWV9OmRpYWdub3NlGkvKQRdkYXRhcHJvYy5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1CbAocY29tLmdvb2dsZS5jbG91ZC5kYXRhcHJvYy52MUINQ2x1c3RlcnNQcm90b1ABWjtjbG91ZC5nb29nbGUuY29tL2dvL2RhdGFwcm9jL3YyL2FwaXYxL2RhdGFwcm9jcGI7ZGF0YXByb2NwYmIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_cloud_dataproc_v1_operations, file_google_cloud_dataproc_v1_shared, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_google_type_interval]);

/**
 * Describes the identifying information, config, and status of
 * a Dataproc cluster
 *
 * @generated from message google.cloud.dataproc.v1.Cluster
 */
export type Cluster = Message<"google.cloud.dataproc.v1.Cluster"> & {
  /**
   * Required. The Google Cloud Platform project ID that the cluster belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The cluster name, which must be unique within a project.
   * The name must start with a lowercase letter, and can contain
   * up to 51 lowercase letters, numbers, and hyphens. It cannot end
   * with a hyphen. The name of a deleted cluster can be reused.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;

  /**
   * Optional. The cluster config for a cluster of Compute Engine Instances.
   * Note that Dataproc may set default values, and values may change
   * when clusters are updated.
   *
   * Exactly one of ClusterConfig or VirtualClusterConfig must be specified.
   *
   * @generated from field: google.cloud.dataproc.v1.ClusterConfig config = 3;
   */
  config?: ClusterConfig;

  /**
   * Optional. The virtual cluster config is used when creating a Dataproc
   * cluster that does not directly control the underlying compute resources,
   * for example, when creating a [Dataproc-on-GKE
   * cluster](https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
   * Dataproc may set default values, and values may change when
   * clusters are updated. Exactly one of
   * [config][google.cloud.dataproc.v1.Cluster.config] or
   * [virtual_cluster_config][google.cloud.dataproc.v1.Cluster.virtual_cluster_config]
   * must be specified.
   *
   * @generated from field: google.cloud.dataproc.v1.VirtualClusterConfig virtual_cluster_config = 10;
   */
  virtualClusterConfig?: VirtualClusterConfig;

  /**
   * Optional. The labels to associate with this cluster.
   * Label **keys** must contain 1 to 63 characters, and must conform to
   * [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * Label **values** may be empty, but, if present, must contain 1 to 63
   * characters, and must conform to [RFC
   * 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be
   * associated with a cluster.
   *
   * @generated from field: map<string, string> labels = 8;
   */
  labels: { [key: string]: string };

  /**
   * Output only. Cluster status.
   *
   * @generated from field: google.cloud.dataproc.v1.ClusterStatus status = 4;
   */
  status?: ClusterStatus;

  /**
   * Output only. The previous cluster status.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.ClusterStatus status_history = 7;
   */
  statusHistory: ClusterStatus[];

  /**
   * Output only. A cluster UUID (Unique Universal Identifier). Dataproc
   * generates this value when it creates the cluster.
   *
   * @generated from field: string cluster_uuid = 6;
   */
  clusterUuid: string;

  /**
   * Output only. Contains cluster daemon metrics such as HDFS and YARN stats.
   *
   * **Beta Feature**: This report is available for testing purposes only. It
   * may be changed before final release.
   *
   * @generated from field: google.cloud.dataproc.v1.ClusterMetrics metrics = 9;
   */
  metrics?: ClusterMetrics;
};

/**
 * Describes the message google.cloud.dataproc.v1.Cluster.
 * Use `create(ClusterSchema)` to create a new message.
 */
export const ClusterSchema: GenMessage<Cluster> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 0);

/**
 * The cluster config.
 *
 * @generated from message google.cloud.dataproc.v1.ClusterConfig
 */
export type ClusterConfig = Message<"google.cloud.dataproc.v1.ClusterConfig"> & {
  /**
   * Optional. A Cloud Storage bucket used to stage job
   * dependencies, config files, and job driver console output.
   * If you do not specify a staging bucket, Cloud
   * Dataproc will determine a Cloud Storage location (US,
   * ASIA, or EU) for your cluster's staging bucket according to the
   * Compute Engine zone where your cluster is deployed, and then create
   * and manage this project-level, per-location bucket (see
   * [Dataproc staging and temp
   * buckets](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
   * **This field requires a Cloud Storage bucket name, not a `gs://...` URI to
   * a Cloud Storage bucket.**
   *
   * @generated from field: string config_bucket = 1;
   */
  configBucket: string;

  /**
   * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs
   * data, such as Spark and MapReduce history files. If you do not specify a
   * temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or
   * EU) for your cluster's temp bucket according to the Compute Engine zone
   * where your cluster is deployed, and then create and manage this
   * project-level, per-location bucket. The default bucket has a TTL of 90
   * days, but you can use any TTL (or none) if you specify a bucket (see
   * [Dataproc staging and temp
   * buckets](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
   * **This field requires a Cloud Storage bucket name, not a `gs://...` URI to
   * a Cloud Storage bucket.**
   *
   * @generated from field: string temp_bucket = 2;
   */
  tempBucket: string;

  /**
   * Optional. The shared Compute Engine config settings for
   * all instances in a cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.GceClusterConfig gce_cluster_config = 8;
   */
  gceClusterConfig?: GceClusterConfig;

  /**
   * Optional. The Compute Engine config settings for
   * the cluster's master instance.
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceGroupConfig master_config = 9;
   */
  masterConfig?: InstanceGroupConfig;

  /**
   * Optional. The Compute Engine config settings for
   * the cluster's worker instances.
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceGroupConfig worker_config = 10;
   */
  workerConfig?: InstanceGroupConfig;

  /**
   * Optional. The Compute Engine config settings for
   * a cluster's secondary worker instances
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceGroupConfig secondary_worker_config = 12;
   */
  secondaryWorkerConfig?: InstanceGroupConfig;

  /**
   * Optional. The config settings for cluster software.
   *
   * @generated from field: google.cloud.dataproc.v1.SoftwareConfig software_config = 13;
   */
  softwareConfig?: SoftwareConfig;

  /**
   * Optional. Commands to execute on each node after config is
   * completed. By default, executables are run on master and all worker nodes.
   * You can test a node's `role` metadata to run an executable on
   * a master or worker node, as shown below using `curl` (you can also use
   * `wget`):
   *
   *     ROLE=$(curl -H Metadata-Flavor:Google
   *     http://metadata/computeMetadata/v1/instance/attributes/dataproc-role)
   *     if [[ "${ROLE}" == 'Master' ]]; then
   *       ... master specific actions ...
   *     else
   *       ... worker specific actions ...
   *     fi
   *
   * @generated from field: repeated google.cloud.dataproc.v1.NodeInitializationAction initialization_actions = 11;
   */
  initializationActions: NodeInitializationAction[];

  /**
   * Optional. Encryption settings for the cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.EncryptionConfig encryption_config = 15;
   */
  encryptionConfig?: EncryptionConfig;

  /**
   * Optional. Autoscaling config for the policy associated with the cluster.
   * Cluster does not autoscale if this field is unset.
   *
   * @generated from field: google.cloud.dataproc.v1.AutoscalingConfig autoscaling_config = 18;
   */
  autoscalingConfig?: AutoscalingConfig;

  /**
   * Optional. Security settings for the cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.SecurityConfig security_config = 16;
   */
  securityConfig?: SecurityConfig;

  /**
   * Optional. Lifecycle setting for the cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.LifecycleConfig lifecycle_config = 17;
   */
  lifecycleConfig?: LifecycleConfig;

  /**
   * Optional. Port/endpoint configuration for this cluster
   *
   * @generated from field: google.cloud.dataproc.v1.EndpointConfig endpoint_config = 19;
   */
  endpointConfig?: EndpointConfig;

  /**
   * Optional. Metastore configuration.
   *
   * @generated from field: google.cloud.dataproc.v1.MetastoreConfig metastore_config = 20;
   */
  metastoreConfig?: MetastoreConfig;

  /**
   * Optional. The config for Dataproc metrics.
   *
   * @generated from field: google.cloud.dataproc.v1.DataprocMetricConfig dataproc_metric_config = 23;
   */
  dataprocMetricConfig?: DataprocMetricConfig;

  /**
   * Optional. The node group settings.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.AuxiliaryNodeGroup auxiliary_node_groups = 25;
   */
  auxiliaryNodeGroups: AuxiliaryNodeGroup[];
};

/**
 * Describes the message google.cloud.dataproc.v1.ClusterConfig.
 * Use `create(ClusterConfigSchema)` to create a new message.
 */
export const ClusterConfigSchema: GenMessage<ClusterConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 1);

/**
 * The Dataproc cluster config for a cluster that does not directly control the
 * underlying compute resources, such as a [Dataproc-on-GKE
 * cluster](https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke-overview).
 *
 * @generated from message google.cloud.dataproc.v1.VirtualClusterConfig
 */
export type VirtualClusterConfig = Message<"google.cloud.dataproc.v1.VirtualClusterConfig"> & {
  /**
   * Optional. A Cloud Storage bucket used to stage job
   * dependencies, config files, and job driver console output.
   * If you do not specify a staging bucket, Cloud
   * Dataproc will determine a Cloud Storage location (US,
   * ASIA, or EU) for your cluster's staging bucket according to the
   * Compute Engine zone where your cluster is deployed, and then create
   * and manage this project-level, per-location bucket (see
   * [Dataproc staging and temp
   * buckets](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)).
   * **This field requires a Cloud Storage bucket name, not a `gs://...` URI to
   * a Cloud Storage bucket.**
   *
   * @generated from field: string staging_bucket = 1;
   */
  stagingBucket: string;

  /**
   * @generated from oneof google.cloud.dataproc.v1.VirtualClusterConfig.infrastructure_config
   */
  infrastructureConfig: {
    /**
     * Required. The configuration for running the Dataproc cluster on
     * Kubernetes.
     *
     * @generated from field: google.cloud.dataproc.v1.KubernetesClusterConfig kubernetes_cluster_config = 6;
     */
    value: KubernetesClusterConfig;
    case: "kubernetesClusterConfig";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Configuration of auxiliary services used by this cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.AuxiliaryServicesConfig auxiliary_services_config = 7;
   */
  auxiliaryServicesConfig?: AuxiliaryServicesConfig;
};

/**
 * Describes the message google.cloud.dataproc.v1.VirtualClusterConfig.
 * Use `create(VirtualClusterConfigSchema)` to create a new message.
 */
export const VirtualClusterConfigSchema: GenMessage<VirtualClusterConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 2);

/**
 * Auxiliary services configuration for a Cluster.
 *
 * @generated from message google.cloud.dataproc.v1.AuxiliaryServicesConfig
 */
export type AuxiliaryServicesConfig = Message<"google.cloud.dataproc.v1.AuxiliaryServicesConfig"> & {
  /**
   * Optional. The Hive Metastore configuration for this workload.
   *
   * @generated from field: google.cloud.dataproc.v1.MetastoreConfig metastore_config = 1;
   */
  metastoreConfig?: MetastoreConfig;

  /**
   * Optional. The Spark History Server configuration for the workload.
   *
   * @generated from field: google.cloud.dataproc.v1.SparkHistoryServerConfig spark_history_server_config = 2;
   */
  sparkHistoryServerConfig?: SparkHistoryServerConfig;
};

/**
 * Describes the message google.cloud.dataproc.v1.AuxiliaryServicesConfig.
 * Use `create(AuxiliaryServicesConfigSchema)` to create a new message.
 */
export const AuxiliaryServicesConfigSchema: GenMessage<AuxiliaryServicesConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 3);

/**
 * Endpoint config for this cluster
 *
 * @generated from message google.cloud.dataproc.v1.EndpointConfig
 */
export type EndpointConfig = Message<"google.cloud.dataproc.v1.EndpointConfig"> & {
  /**
   * Output only. The map of port descriptions to URLs. Will only be populated
   * if enable_http_port_access is true.
   *
   * @generated from field: map<string, string> http_ports = 1;
   */
  httpPorts: { [key: string]: string };

  /**
   * Optional. If true, enable http access to specific ports on the cluster
   * from external sources. Defaults to false.
   *
   * @generated from field: bool enable_http_port_access = 2;
   */
  enableHttpPortAccess: boolean;
};

/**
 * Describes the message google.cloud.dataproc.v1.EndpointConfig.
 * Use `create(EndpointConfigSchema)` to create a new message.
 */
export const EndpointConfigSchema: GenMessage<EndpointConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 4);

/**
 * Autoscaling Policy config associated with the cluster.
 *
 * @generated from message google.cloud.dataproc.v1.AutoscalingConfig
 */
export type AutoscalingConfig = Message<"google.cloud.dataproc.v1.AutoscalingConfig"> & {
  /**
   * Optional. The autoscaling policy used by the cluster.
   *
   * Only resource names including projectid and location (region) are valid.
   * Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]`
   * * `projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]`
   *
   * Note that the policy must be in the same project and Dataproc region.
   *
   * @generated from field: string policy_uri = 1;
   */
  policyUri: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.AutoscalingConfig.
 * Use `create(AutoscalingConfigSchema)` to create a new message.
 */
export const AutoscalingConfigSchema: GenMessage<AutoscalingConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 5);

/**
 * Encryption settings for the cluster.
 *
 * @generated from message google.cloud.dataproc.v1.EncryptionConfig
 */
export type EncryptionConfig = Message<"google.cloud.dataproc.v1.EncryptionConfig"> & {
  /**
   * Optional. The Cloud KMS key resource name to use for persistent disk
   * encryption for all instances in the cluster. See [Use CMEK with cluster
   * data]
   * (https://cloud.google.com//dataproc/docs/concepts/configuring-clusters/customer-managed-encryption#use_cmek_with_cluster_data)
   * for more information.
   *
   * @generated from field: string gce_pd_kms_key_name = 1;
   */
  gcePdKmsKeyName: string;

  /**
   * Optional. The Cloud KMS key resource name to use for cluster persistent
   * disk and job argument encryption. See [Use CMEK with cluster data]
   * (https://cloud.google.com//dataproc/docs/concepts/configuring-clusters/customer-managed-encryption#use_cmek_with_cluster_data)
   * for more information.
   *
   * When this key resource name is provided, the following job arguments of
   * the following job types submitted to the cluster are encrypted using CMEK:
   *
   * * [FlinkJob
   * args](https://cloud.google.com/dataproc/docs/reference/rest/v1/FlinkJob)
   * * [HadoopJob
   * args](https://cloud.google.com/dataproc/docs/reference/rest/v1/HadoopJob)
   * * [SparkJob
   * args](https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkJob)
   * * [SparkRJob
   * args](https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkRJob)
   * * [PySparkJob
   * args](https://cloud.google.com/dataproc/docs/reference/rest/v1/PySparkJob)
   * * [SparkSqlJob](https://cloud.google.com/dataproc/docs/reference/rest/v1/SparkSqlJob)
   *   scriptVariables and queryList.queries
   * * [HiveJob](https://cloud.google.com/dataproc/docs/reference/rest/v1/HiveJob)
   *   scriptVariables and queryList.queries
   * * [PigJob](https://cloud.google.com/dataproc/docs/reference/rest/v1/PigJob)
   *   scriptVariables and queryList.queries
   * * [PrestoJob](https://cloud.google.com/dataproc/docs/reference/rest/v1/PrestoJob)
   *   scriptVariables and queryList.queries
   *
   * @generated from field: string kms_key = 2;
   */
  kmsKey: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.EncryptionConfig.
 * Use `create(EncryptionConfigSchema)` to create a new message.
 */
export const EncryptionConfigSchema: GenMessage<EncryptionConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 6);

/**
 * Common config settings for resources of Compute Engine cluster
 * instances, applicable to all instances in the cluster.
 *
 * @generated from message google.cloud.dataproc.v1.GceClusterConfig
 */
export type GceClusterConfig = Message<"google.cloud.dataproc.v1.GceClusterConfig"> & {
  /**
   * Optional. The Compute Engine zone where the Dataproc cluster will be
   * located. If omitted, the service will pick a zone in the cluster's Compute
   * Engine region. On a get request, zone will always be present.
   *
   * A full URL, partial URI, or short name are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]`
   * * `projects/[project_id]/zones/[zone]`
   * * `[zone]`
   *
   * @generated from field: string zone_uri = 1;
   */
  zoneUri: string;

  /**
   * Optional. The Compute Engine network to be used for machine
   * communications. Cannot be specified with subnetwork_uri. If neither
   * `network_uri` nor `subnetwork_uri` is specified, the "default" network of
   * the project is used, if it exists. Cannot be a "Custom Subnet Network" (see
   * [Using Subnetworks](https://cloud.google.com/compute/docs/subnetworks) for
   * more information).
   *
   * A full URL, partial URI, or short name are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default`
   * * `projects/[project_id]/global/networks/default`
   * * `default`
   *
   * @generated from field: string network_uri = 2;
   */
  networkUri: string;

  /**
   * Optional. The Compute Engine subnetwork to be used for machine
   * communications. Cannot be specified with network_uri.
   *
   * A full URL, partial URI, or short name are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/[region]/subnetworks/sub0`
   * * `projects/[project_id]/regions/[region]/subnetworks/sub0`
   * * `sub0`
   *
   * @generated from field: string subnetwork_uri = 6;
   */
  subnetworkUri: string;

  /**
   * Optional. This setting applies to subnetwork-enabled networks. It is set to
   * `true` by default in clusters created with image versions 2.2.x.
   *
   * When set to `true`:
   *
   * * All cluster VMs have internal IP addresses.
   * * [Google Private Access]
   * (https://cloud.google.com/vpc/docs/private-google-access)
   * must be enabled to access Dataproc and other Google Cloud APIs.
   * * Off-cluster dependencies must be configured to be accessible
   * without external IP addresses.
   *
   * When set to `false`:
   *
   * * Cluster VMs are not restricted to internal IP addresses.
   * * Ephemeral external IP addresses are assigned to each cluster VM.
   *
   * @generated from field: optional bool internal_ip_only = 7;
   */
  internalIpOnly?: boolean;

  /**
   * Optional. The type of IPv6 access for a cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.GceClusterConfig.PrivateIpv6GoogleAccess private_ipv6_google_access = 12;
   */
  privateIpv6GoogleAccess: GceClusterConfig_PrivateIpv6GoogleAccess;

  /**
   * Optional. The [Dataproc service
   * account](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc)
   * (also see [VM Data Plane
   * identity](https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity))
   * used by Dataproc cluster VM instances to access Google Cloud Platform
   * services.
   *
   * If not specified, the
   * [Compute Engine default service
   * account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account)
   * is used.
   *
   * @generated from field: string service_account = 8;
   */
  serviceAccount: string;

  /**
   * Optional. The URIs of service account scopes to be included in
   * Compute Engine instances. The following base set of scopes is always
   * included:
   *
   * * https://www.googleapis.com/auth/cloud.useraccounts.readonly
   * * https://www.googleapis.com/auth/devstorage.read_write
   * * https://www.googleapis.com/auth/logging.write
   *
   * If no scopes are specified, the following defaults are also provided:
   *
   * * https://www.googleapis.com/auth/bigquery
   * * https://www.googleapis.com/auth/bigtable.admin.table
   * * https://www.googleapis.com/auth/bigtable.data
   * * https://www.googleapis.com/auth/devstorage.full_control
   *
   * @generated from field: repeated string service_account_scopes = 3;
   */
  serviceAccountScopes: string[];

  /**
   * The Compute Engine network tags to add to all instances (see [Tagging
   * instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[];

  /**
   * Optional. The Compute Engine metadata entries to add to all instances (see
   * [Project and instance
   * metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
   *
   * @generated from field: map<string, string> metadata = 5;
   */
  metadata: { [key: string]: string };

  /**
   * Optional. Reservation Affinity for consuming Zonal reservation.
   *
   * @generated from field: google.cloud.dataproc.v1.ReservationAffinity reservation_affinity = 11;
   */
  reservationAffinity?: ReservationAffinity;

  /**
   * Optional. Node Group Affinity for sole-tenant clusters.
   *
   * @generated from field: google.cloud.dataproc.v1.NodeGroupAffinity node_group_affinity = 13;
   */
  nodeGroupAffinity?: NodeGroupAffinity;

  /**
   * Optional. Shielded Instance Config for clusters using [Compute Engine
   * Shielded
   * VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm).
   *
   * @generated from field: google.cloud.dataproc.v1.ShieldedInstanceConfig shielded_instance_config = 14;
   */
  shieldedInstanceConfig?: ShieldedInstanceConfig;

  /**
   * Optional. Confidential Instance Config for clusters using [Confidential
   * VMs](https://cloud.google.com/compute/confidential-vm/docs).
   *
   * @generated from field: google.cloud.dataproc.v1.ConfidentialInstanceConfig confidential_instance_config = 15;
   */
  confidentialInstanceConfig?: ConfidentialInstanceConfig;
};

/**
 * Describes the message google.cloud.dataproc.v1.GceClusterConfig.
 * Use `create(GceClusterConfigSchema)` to create a new message.
 */
export const GceClusterConfigSchema: GenMessage<GceClusterConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 7);

/**
 * `PrivateIpv6GoogleAccess` controls whether and how Dataproc cluster nodes
 * can communicate with Google Services through gRPC over IPv6.
 * These values are directly mapped to corresponding values in the
 * [Compute Engine Instance
 * fields](https://cloud.google.com/compute/docs/reference/rest/v1/instances).
 *
 * @generated from enum google.cloud.dataproc.v1.GceClusterConfig.PrivateIpv6GoogleAccess
 */
export enum GceClusterConfig_PrivateIpv6GoogleAccess {
  /**
   * If unspecified, Compute Engine default behavior will apply, which
   * is the same as
   * [INHERIT_FROM_SUBNETWORK][google.cloud.dataproc.v1.GceClusterConfig.PrivateIpv6GoogleAccess.INHERIT_FROM_SUBNETWORK].
   *
   * @generated from enum value: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED = 0;
   */
  PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED = 0,

  /**
   * Private access to and from Google Services configuration
   * inherited from the subnetwork configuration. This is the
   * default Compute Engine behavior.
   *
   * @generated from enum value: INHERIT_FROM_SUBNETWORK = 1;
   */
  INHERIT_FROM_SUBNETWORK = 1,

  /**
   * Enables outbound private IPv6 access to Google Services from the Dataproc
   * cluster.
   *
   * @generated from enum value: OUTBOUND = 2;
   */
  OUTBOUND = 2,

  /**
   * Enables bidirectional private IPv6 access between Google Services and the
   * Dataproc cluster.
   *
   * @generated from enum value: BIDIRECTIONAL = 3;
   */
  BIDIRECTIONAL = 3,
}

/**
 * Describes the enum google.cloud.dataproc.v1.GceClusterConfig.PrivateIpv6GoogleAccess.
 */
export const GceClusterConfig_PrivateIpv6GoogleAccessSchema: GenEnum<GceClusterConfig_PrivateIpv6GoogleAccess> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 7, 0);

/**
 * Node Group Affinity for clusters using sole-tenant node groups.
 * **The Dataproc `NodeGroupAffinity` resource is not related to the
 * Dataproc [NodeGroup][google.cloud.dataproc.v1.NodeGroup] resource.**
 *
 * @generated from message google.cloud.dataproc.v1.NodeGroupAffinity
 */
export type NodeGroupAffinity = Message<"google.cloud.dataproc.v1.NodeGroupAffinity"> & {
  /**
   * Required. The URI of a
   * sole-tenant [node group
   * resource](https://cloud.google.com/compute/docs/reference/rest/v1/nodeGroups)
   * that the cluster will be created on.
   *
   * A full URL, partial URI, or node group name are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/nodeGroups/node-group-1`
   * * `projects/[project_id]/zones/[zone]/nodeGroups/node-group-1`
   * * `node-group-1`
   *
   * @generated from field: string node_group_uri = 1;
   */
  nodeGroupUri: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.NodeGroupAffinity.
 * Use `create(NodeGroupAffinitySchema)` to create a new message.
 */
export const NodeGroupAffinitySchema: GenMessage<NodeGroupAffinity> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 8);

/**
 * Shielded Instance Config for clusters using [Compute Engine Shielded
 * VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm).
 *
 * @generated from message google.cloud.dataproc.v1.ShieldedInstanceConfig
 */
export type ShieldedInstanceConfig = Message<"google.cloud.dataproc.v1.ShieldedInstanceConfig"> & {
  /**
   * Optional. Defines whether instances have Secure Boot enabled.
   *
   * @generated from field: optional bool enable_secure_boot = 1;
   */
  enableSecureBoot?: boolean;

  /**
   * Optional. Defines whether instances have the vTPM enabled.
   *
   * @generated from field: optional bool enable_vtpm = 2;
   */
  enableVtpm?: boolean;

  /**
   * Optional. Defines whether instances have integrity monitoring enabled.
   *
   * @generated from field: optional bool enable_integrity_monitoring = 3;
   */
  enableIntegrityMonitoring?: boolean;
};

/**
 * Describes the message google.cloud.dataproc.v1.ShieldedInstanceConfig.
 * Use `create(ShieldedInstanceConfigSchema)` to create a new message.
 */
export const ShieldedInstanceConfigSchema: GenMessage<ShieldedInstanceConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 9);

/**
 * Confidential Instance Config for clusters using [Confidential
 * VMs](https://cloud.google.com/compute/confidential-vm/docs)
 *
 * @generated from message google.cloud.dataproc.v1.ConfidentialInstanceConfig
 */
export type ConfidentialInstanceConfig = Message<"google.cloud.dataproc.v1.ConfidentialInstanceConfig"> & {
  /**
   * Optional. Defines whether the instance should have confidential compute
   * enabled.
   *
   * @generated from field: bool enable_confidential_compute = 1;
   */
  enableConfidentialCompute: boolean;
};

/**
 * Describes the message google.cloud.dataproc.v1.ConfidentialInstanceConfig.
 * Use `create(ConfidentialInstanceConfigSchema)` to create a new message.
 */
export const ConfidentialInstanceConfigSchema: GenMessage<ConfidentialInstanceConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 10);

/**
 * The config settings for Compute Engine resources in
 * an instance group, such as a master or worker group.
 *
 * @generated from message google.cloud.dataproc.v1.InstanceGroupConfig
 */
export type InstanceGroupConfig = Message<"google.cloud.dataproc.v1.InstanceGroupConfig"> & {
  /**
   * Optional. The number of VM instances in the instance group.
   * For [HA
   * cluster](/dataproc/docs/concepts/configuring-clusters/high-availability)
   * [master_config](#FIELDS.master_config) groups, **must be set to 3**.
   * For standard cluster [master_config](#FIELDS.master_config) groups,
   * **must be set to 1**.
   *
   * @generated from field: int32 num_instances = 1;
   */
  numInstances: number;

  /**
   * Output only. The list of instance names. Dataproc derives the names
   * from `cluster_name`, `num_instances`, and the instance group.
   *
   * @generated from field: repeated string instance_names = 2;
   */
  instanceNames: string[];

  /**
   * Output only. List of references to Compute Engine instances.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.InstanceReference instance_references = 11;
   */
  instanceReferences: InstanceReference[];

  /**
   * Optional. The Compute Engine image resource used for cluster instances.
   *
   * The URI can represent an image or image family.
   *
   * Image examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/[image-id]`
   * * `projects/[project_id]/global/images/[image-id]`
   * * `image-id`
   *
   * Image family examples. Dataproc will use the most recent
   * image from the family:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/images/family/[custom-image-family-name]`
   * * `projects/[project_id]/global/images/family/[custom-image-family-name]`
   *
   * If the URI is unspecified, it will be inferred from
   * `SoftwareConfig.image_version` or the system default.
   *
   * @generated from field: string image_uri = 3;
   */
  imageUri: string;

  /**
   * Optional. The Compute Engine machine type used for cluster instances.
   *
   * A full URL, partial URI, or short name are valid. Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2`
   * * `projects/[project_id]/zones/[zone]/machineTypes/n1-standard-2`
   * * `n1-standard-2`
   *
   * **Auto Zone Exception**: If you are using the Dataproc
   * [Auto Zone
   * Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement)
   * feature, you must use the short name of the machine type
   * resource, for example, `n1-standard-2`.
   *
   * @generated from field: string machine_type_uri = 4;
   */
  machineTypeUri: string;

  /**
   * Optional. Disk option config settings.
   *
   * @generated from field: google.cloud.dataproc.v1.DiskConfig disk_config = 5;
   */
  diskConfig?: DiskConfig;

  /**
   * Output only. Specifies that this instance group contains preemptible
   * instances.
   *
   * @generated from field: bool is_preemptible = 6;
   */
  isPreemptible: boolean;

  /**
   * Optional. Specifies the preemptibility of the instance group.
   *
   * The default value for master and worker groups is
   * `NON_PREEMPTIBLE`. This default cannot be changed.
   *
   * The default value for secondary instances is
   * `PREEMPTIBLE`.
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceGroupConfig.Preemptibility preemptibility = 10;
   */
  preemptibility: InstanceGroupConfig_Preemptibility;

  /**
   * Output only. The config for Compute Engine Instance Group
   * Manager that manages this group.
   * This is only used for preemptible instance groups.
   *
   * @generated from field: google.cloud.dataproc.v1.ManagedGroupConfig managed_group_config = 7;
   */
  managedGroupConfig?: ManagedGroupConfig;

  /**
   * Optional. The Compute Engine accelerator configuration for these
   * instances.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.AcceleratorConfig accelerators = 8;
   */
  accelerators: AcceleratorConfig[];

  /**
   * Optional. Specifies the minimum cpu platform for the Instance Group.
   * See [Dataproc -> Minimum CPU
   * Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).
   *
   * @generated from field: string min_cpu_platform = 9;
   */
  minCpuPlatform: string;

  /**
   * Optional. The minimum number of primary worker instances to create.
   * If `min_num_instances` is set, cluster creation will succeed if
   * the number of primary workers created is at least equal to the
   * `min_num_instances` number.
   *
   * Example: Cluster creation request with `num_instances` = `5` and
   * `min_num_instances` = `3`:
   *
   * *  If 4 VMs are created and 1 instance fails,
   *    the failed VM is deleted. The cluster is
   *    resized to 4 instances and placed in a `RUNNING` state.
   * *  If 2 instances are created and 3 instances fail,
   *    the cluster in placed in an `ERROR` state. The failed VMs
   *    are not deleted.
   *
   * @generated from field: int32 min_num_instances = 12;
   */
  minNumInstances: number;

  /**
   * Optional. Instance flexibility Policy allowing a mixture of VM shapes and
   * provisioning models.
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceFlexibilityPolicy instance_flexibility_policy = 13;
   */
  instanceFlexibilityPolicy?: InstanceFlexibilityPolicy;

  /**
   * Optional. Configuration to handle the startup of instances during cluster
   * create and update process.
   *
   * @generated from field: google.cloud.dataproc.v1.StartupConfig startup_config = 14;
   */
  startupConfig?: StartupConfig;
};

/**
 * Describes the message google.cloud.dataproc.v1.InstanceGroupConfig.
 * Use `create(InstanceGroupConfigSchema)` to create a new message.
 */
export const InstanceGroupConfigSchema: GenMessage<InstanceGroupConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 11);

/**
 * Controls the use of preemptible instances within the group.
 *
 * @generated from enum google.cloud.dataproc.v1.InstanceGroupConfig.Preemptibility
 */
export enum InstanceGroupConfig_Preemptibility {
  /**
   * Preemptibility is unspecified, the system will choose the
   * appropriate setting for each instance group.
   *
   * @generated from enum value: PREEMPTIBILITY_UNSPECIFIED = 0;
   */
  PREEMPTIBILITY_UNSPECIFIED = 0,

  /**
   * Instances are non-preemptible.
   *
   * This option is allowed for all instance groups and is the only valid
   * value for Master and Worker instance groups.
   *
   * @generated from enum value: NON_PREEMPTIBLE = 1;
   */
  NON_PREEMPTIBLE = 1,

  /**
   * Instances are [preemptible]
   * (https://cloud.google.com/compute/docs/instances/preemptible).
   *
   * This option is allowed only for [secondary worker]
   * (https://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms)
   * groups.
   *
   * @generated from enum value: PREEMPTIBLE = 2;
   */
  PREEMPTIBLE = 2,

  /**
   * Instances are [Spot VMs]
   * (https://cloud.google.com/compute/docs/instances/spot).
   *
   * This option is allowed only for [secondary worker]
   * (https://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms)
   * groups. Spot VMs are the latest version of [preemptible VMs]
   * (https://cloud.google.com/compute/docs/instances/preemptible), and
   * provide additional features.
   *
   * @generated from enum value: SPOT = 3;
   */
  SPOT = 3,
}

/**
 * Describes the enum google.cloud.dataproc.v1.InstanceGroupConfig.Preemptibility.
 */
export const InstanceGroupConfig_PreemptibilitySchema: GenEnum<InstanceGroupConfig_Preemptibility> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 11, 0);

/**
 * Configuration to handle the startup of instances during cluster create and
 * update process.
 *
 * @generated from message google.cloud.dataproc.v1.StartupConfig
 */
export type StartupConfig = Message<"google.cloud.dataproc.v1.StartupConfig"> & {
  /**
   * Optional. The config setting to enable cluster creation/ updation to be
   * successful only after required_registration_fraction of instances are up
   * and running. This configuration is applicable to only secondary workers for
   * now. The cluster will fail if required_registration_fraction of instances
   * are not available. This will include instance creation, agent registration,
   * and service registration (if enabled).
   *
   * @generated from field: optional double required_registration_fraction = 1;
   */
  requiredRegistrationFraction?: number;
};

/**
 * Describes the message google.cloud.dataproc.v1.StartupConfig.
 * Use `create(StartupConfigSchema)` to create a new message.
 */
export const StartupConfigSchema: GenMessage<StartupConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 12);

/**
 * A reference to a Compute Engine instance.
 *
 * @generated from message google.cloud.dataproc.v1.InstanceReference
 */
export type InstanceReference = Message<"google.cloud.dataproc.v1.InstanceReference"> & {
  /**
   * The user-friendly name of the Compute Engine instance.
   *
   * @generated from field: string instance_name = 1;
   */
  instanceName: string;

  /**
   * The unique identifier of the Compute Engine instance.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The public RSA key used for sharing data with this instance.
   *
   * @generated from field: string public_key = 3;
   */
  publicKey: string;

  /**
   * The public ECIES key used for sharing data with this instance.
   *
   * @generated from field: string public_ecies_key = 4;
   */
  publicEciesKey: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.InstanceReference.
 * Use `create(InstanceReferenceSchema)` to create a new message.
 */
export const InstanceReferenceSchema: GenMessage<InstanceReference> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 13);

/**
 * Specifies the resources used to actively manage an instance group.
 *
 * @generated from message google.cloud.dataproc.v1.ManagedGroupConfig
 */
export type ManagedGroupConfig = Message<"google.cloud.dataproc.v1.ManagedGroupConfig"> & {
  /**
   * Output only. The name of the Instance Template used for the Managed
   * Instance Group.
   *
   * @generated from field: string instance_template_name = 1;
   */
  instanceTemplateName: string;

  /**
   * Output only. The name of the Instance Group Manager for this group.
   *
   * @generated from field: string instance_group_manager_name = 2;
   */
  instanceGroupManagerName: string;

  /**
   * Output only. The partial URI to the instance group manager for this group.
   * E.g. projects/my-project/regions/us-central1/instanceGroupManagers/my-igm.
   *
   * @generated from field: string instance_group_manager_uri = 3;
   */
  instanceGroupManagerUri: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.ManagedGroupConfig.
 * Use `create(ManagedGroupConfigSchema)` to create a new message.
 */
export const ManagedGroupConfigSchema: GenMessage<ManagedGroupConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 14);

/**
 * Instance flexibility Policy allowing a mixture of VM shapes and provisioning
 * models.
 *
 * @generated from message google.cloud.dataproc.v1.InstanceFlexibilityPolicy
 */
export type InstanceFlexibilityPolicy = Message<"google.cloud.dataproc.v1.InstanceFlexibilityPolicy"> & {
  /**
   * Optional. List of instance selection options that the group will use when
   * creating new VMs.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelection instance_selection_list = 2;
   */
  instanceSelectionList: InstanceFlexibilityPolicy_InstanceSelection[];

  /**
   * Output only. A list of instance selection results in the group.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelectionResult instance_selection_results = 3;
   */
  instanceSelectionResults: InstanceFlexibilityPolicy_InstanceSelectionResult[];
};

/**
 * Describes the message google.cloud.dataproc.v1.InstanceFlexibilityPolicy.
 * Use `create(InstanceFlexibilityPolicySchema)` to create a new message.
 */
export const InstanceFlexibilityPolicySchema: GenMessage<InstanceFlexibilityPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 15);

/**
 * Defines machines types and a rank to which the machines types belong.
 *
 * @generated from message google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelection
 */
export type InstanceFlexibilityPolicy_InstanceSelection = Message<"google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelection"> & {
  /**
   * Optional. Full machine-type names, e.g. "n1-standard-16".
   *
   * @generated from field: repeated string machine_types = 1;
   */
  machineTypes: string[];

  /**
   * Optional. Preference of this instance selection. Lower number means
   * higher preference. Dataproc will first try to create a VM based on the
   * machine-type with priority rank and fallback to next rank based on
   * availability. Machine types and instance selections with the same
   * priority have the same preference.
   *
   * @generated from field: int32 rank = 2;
   */
  rank: number;
};

/**
 * Describes the message google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelection.
 * Use `create(InstanceFlexibilityPolicy_InstanceSelectionSchema)` to create a new message.
 */
export const InstanceFlexibilityPolicy_InstanceSelectionSchema: GenMessage<InstanceFlexibilityPolicy_InstanceSelection> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 15, 0);

/**
 * Defines a mapping from machine types to the number of VMs that are created
 * with each machine type.
 *
 * @generated from message google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelectionResult
 */
export type InstanceFlexibilityPolicy_InstanceSelectionResult = Message<"google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelectionResult"> & {
  /**
   * Output only. Full machine-type names, e.g. "n1-standard-16".
   *
   * @generated from field: optional string machine_type = 1;
   */
  machineType?: string;

  /**
   * Output only. Number of VM provisioned with the machine_type.
   *
   * @generated from field: optional int32 vm_count = 2;
   */
  vmCount?: number;
};

/**
 * Describes the message google.cloud.dataproc.v1.InstanceFlexibilityPolicy.InstanceSelectionResult.
 * Use `create(InstanceFlexibilityPolicy_InstanceSelectionResultSchema)` to create a new message.
 */
export const InstanceFlexibilityPolicy_InstanceSelectionResultSchema: GenMessage<InstanceFlexibilityPolicy_InstanceSelectionResult> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 15, 1);

/**
 * Specifies the type and number of accelerator cards attached to the instances
 * of an instance. See [GPUs on Compute
 * Engine](https://cloud.google.com/compute/docs/gpus/).
 *
 * @generated from message google.cloud.dataproc.v1.AcceleratorConfig
 */
export type AcceleratorConfig = Message<"google.cloud.dataproc.v1.AcceleratorConfig"> & {
  /**
   * Full URL, partial URI, or short name of the accelerator type resource to
   * expose to this instance. See
   * [Compute Engine
   * AcceleratorTypes](https://cloud.google.com/compute/docs/reference/v1/acceleratorTypes).
   *
   * Examples:
   *
   * * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]/acceleratorTypes/nvidia-tesla-t4`
   * * `projects/[project_id]/zones/[zone]/acceleratorTypes/nvidia-tesla-t4`
   * * `nvidia-tesla-t4`
   *
   * **Auto Zone Exception**: If you are using the Dataproc
   * [Auto Zone
   * Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement)
   * feature, you must use the short name of the accelerator type
   * resource, for example, `nvidia-tesla-t4`.
   *
   * @generated from field: string accelerator_type_uri = 1;
   */
  acceleratorTypeUri: string;

  /**
   * The number of the accelerator cards of this type exposed to this instance.
   *
   * @generated from field: int32 accelerator_count = 2;
   */
  acceleratorCount: number;
};

/**
 * Describes the message google.cloud.dataproc.v1.AcceleratorConfig.
 * Use `create(AcceleratorConfigSchema)` to create a new message.
 */
export const AcceleratorConfigSchema: GenMessage<AcceleratorConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 16);

/**
 * Specifies the config of disk options for a group of VM instances.
 *
 * @generated from message google.cloud.dataproc.v1.DiskConfig
 */
export type DiskConfig = Message<"google.cloud.dataproc.v1.DiskConfig"> & {
  /**
   * Optional. Type of the boot disk (default is "pd-standard").
   * Valid values: "pd-balanced" (Persistent Disk Balanced Solid State Drive),
   * "pd-ssd" (Persistent Disk Solid State Drive),
   * or "pd-standard" (Persistent Disk Hard Disk Drive).
   * See [Disk types](https://cloud.google.com/compute/docs/disks#disk-types).
   *
   * @generated from field: string boot_disk_type = 3;
   */
  bootDiskType: string;

  /**
   * Optional. Size in GB of the boot disk (default is 500GB).
   *
   * @generated from field: int32 boot_disk_size_gb = 1;
   */
  bootDiskSizeGb: number;

  /**
   * Optional. Number of attached SSDs, from 0 to 8 (default is 0).
   * If SSDs are not attached, the boot disk is used to store runtime logs and
   * [HDFS](https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data.
   * If one or more SSDs are attached, this runtime bulk
   * data is spread across them, and the boot disk contains only basic
   * config and installed binaries.
   *
   * Note: Local SSD options may vary by machine type and number of vCPUs
   * selected.
   *
   * @generated from field: int32 num_local_ssds = 2;
   */
  numLocalSsds: number;

  /**
   * Optional. Interface type of local SSDs (default is "scsi").
   * Valid values: "scsi" (Small Computer System Interface),
   * "nvme" (Non-Volatile Memory Express).
   * See [local SSD
   * performance](https://cloud.google.com/compute/docs/disks/local-ssd#performance).
   *
   * @generated from field: string local_ssd_interface = 4;
   */
  localSsdInterface: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.DiskConfig.
 * Use `create(DiskConfigSchema)` to create a new message.
 */
export const DiskConfigSchema: GenMessage<DiskConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 17);

/**
 * Node group identification and configuration information.
 *
 * @generated from message google.cloud.dataproc.v1.AuxiliaryNodeGroup
 */
export type AuxiliaryNodeGroup = Message<"google.cloud.dataproc.v1.AuxiliaryNodeGroup"> & {
  /**
   * Required. Node group configuration.
   *
   * @generated from field: google.cloud.dataproc.v1.NodeGroup node_group = 1;
   */
  nodeGroup?: NodeGroup;

  /**
   * Optional. A node group ID. Generated if not specified.
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). Cannot begin or end with underscore
   * or hyphen. Must consist of from 3 to 33 characters.
   *
   * @generated from field: string node_group_id = 2;
   */
  nodeGroupId: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.AuxiliaryNodeGroup.
 * Use `create(AuxiliaryNodeGroupSchema)` to create a new message.
 */
export const AuxiliaryNodeGroupSchema: GenMessage<AuxiliaryNodeGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 18);

/**
 * Dataproc Node Group.
 * **The Dataproc `NodeGroup` resource is not related to the
 * Dataproc [NodeGroupAffinity][google.cloud.dataproc.v1.NodeGroupAffinity]
 * resource.**
 *
 * @generated from message google.cloud.dataproc.v1.NodeGroup
 */
export type NodeGroup = Message<"google.cloud.dataproc.v1.NodeGroup"> & {
  /**
   * The Node group [resource name](https://aip.dev/122).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Node group roles.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.NodeGroup.Role roles = 2;
   */
  roles: NodeGroup_Role[];

  /**
   * Optional. The node group instance group configuration.
   *
   * @generated from field: google.cloud.dataproc.v1.InstanceGroupConfig node_group_config = 3;
   */
  nodeGroupConfig?: InstanceGroupConfig;

  /**
   * Optional. Node group labels.
   *
   * * Label **keys** must consist of from 1 to 63 characters and conform to
   *   [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).
   * * Label **values** can be empty. If specified, they must consist of from
   *   1 to 63 characters and conform to [RFC 1035]
   *   (https://www.ietf.org/rfc/rfc1035.txt).
   * * The node group must have no more than 32 labels.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.cloud.dataproc.v1.NodeGroup.
 * Use `create(NodeGroupSchema)` to create a new message.
 */
export const NodeGroupSchema: GenMessage<NodeGroup> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 19);

/**
 * Node pool roles.
 *
 * @generated from enum google.cloud.dataproc.v1.NodeGroup.Role
 */
export enum NodeGroup_Role {
  /**
   * Required unspecified role.
   *
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  ROLE_UNSPECIFIED = 0,

  /**
   * Job drivers run on the node pool.
   *
   * @generated from enum value: DRIVER = 1;
   */
  DRIVER = 1,
}

/**
 * Describes the enum google.cloud.dataproc.v1.NodeGroup.Role.
 */
export const NodeGroup_RoleSchema: GenEnum<NodeGroup_Role> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 19, 0);

/**
 * Specifies an executable to run on a fully configured node and a
 * timeout period for executable completion.
 *
 * @generated from message google.cloud.dataproc.v1.NodeInitializationAction
 */
export type NodeInitializationAction = Message<"google.cloud.dataproc.v1.NodeInitializationAction"> & {
  /**
   * Required. Cloud Storage URI of executable file.
   *
   * @generated from field: string executable_file = 1;
   */
  executableFile: string;

  /**
   * Optional. Amount of time executable has to complete. Default is
   * 10 minutes (see JSON representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *
   * Cluster creation fails with an explanatory error message (the
   * name of the executable that caused the error and the exceeded timeout
   * period) if the executable is not completed at end of the timeout period.
   *
   * @generated from field: google.protobuf.Duration execution_timeout = 2;
   */
  executionTimeout?: Duration;
};

/**
 * Describes the message google.cloud.dataproc.v1.NodeInitializationAction.
 * Use `create(NodeInitializationActionSchema)` to create a new message.
 */
export const NodeInitializationActionSchema: GenMessage<NodeInitializationAction> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 20);

/**
 * The status of a cluster and its instances.
 *
 * @generated from message google.cloud.dataproc.v1.ClusterStatus
 */
export type ClusterStatus = Message<"google.cloud.dataproc.v1.ClusterStatus"> & {
  /**
   * Output only. The cluster's state.
   *
   * @generated from field: google.cloud.dataproc.v1.ClusterStatus.State state = 1;
   */
  state: ClusterStatus_State;

  /**
   * Optional. Output only. Details of cluster's state.
   *
   * @generated from field: string detail = 2;
   */
  detail: string;

  /**
   * Output only. Time when this state was entered (see JSON representation of
   * [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *
   * @generated from field: google.protobuf.Timestamp state_start_time = 3;
   */
  stateStartTime?: Timestamp;

  /**
   * Output only. Additional state information that includes
   * status reported by the agent.
   *
   * @generated from field: google.cloud.dataproc.v1.ClusterStatus.Substate substate = 4;
   */
  substate: ClusterStatus_Substate;
};

/**
 * Describes the message google.cloud.dataproc.v1.ClusterStatus.
 * Use `create(ClusterStatusSchema)` to create a new message.
 */
export const ClusterStatusSchema: GenMessage<ClusterStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 21);

/**
 * The cluster state.
 *
 * @generated from enum google.cloud.dataproc.v1.ClusterStatus.State
 */
export enum ClusterStatus_State {
  /**
   * The cluster state is unknown.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * The cluster is being created and set up. It is not ready for use.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The cluster is currently running and healthy. It is ready for use.
   *
   * **Note:** The cluster state changes from "creating" to "running" status
   * after the master node(s), first two primary worker nodes (and the last
   * primary worker node if primary workers > 2) are running.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The cluster encountered an error. It is not ready for use.
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,

  /**
   * The cluster has encountered an error while being updated. Jobs can
   * be submitted to the cluster, but the cluster cannot be updated.
   *
   * @generated from enum value: ERROR_DUE_TO_UPDATE = 9;
   */
  ERROR_DUE_TO_UPDATE = 9,

  /**
   * The cluster is being deleted. It cannot be used.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * The cluster is being updated. It continues to accept and process jobs.
   *
   * @generated from enum value: UPDATING = 5;
   */
  UPDATING = 5,

  /**
   * The cluster is being stopped. It cannot be used.
   *
   * @generated from enum value: STOPPING = 6;
   */
  STOPPING = 6,

  /**
   * The cluster is currently stopped. It is not ready for use.
   *
   * @generated from enum value: STOPPED = 7;
   */
  STOPPED = 7,

  /**
   * The cluster is being started. It is not ready for use.
   *
   * @generated from enum value: STARTING = 8;
   */
  STARTING = 8,

  /**
   * The cluster is being repaired. It is not ready for use.
   *
   * @generated from enum value: REPAIRING = 10;
   */
  REPAIRING = 10,
}

/**
 * Describes the enum google.cloud.dataproc.v1.ClusterStatus.State.
 */
export const ClusterStatus_StateSchema: GenEnum<ClusterStatus_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 21, 0);

/**
 * The cluster substate.
 *
 * @generated from enum google.cloud.dataproc.v1.ClusterStatus.Substate
 */
export enum ClusterStatus_Substate {
  /**
   * The cluster substate is unknown.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The cluster is known to be in an unhealthy state
   * (for example, critical daemons are not running or HDFS capacity is
   * exhausted).
   *
   * Applies to RUNNING state.
   *
   * @generated from enum value: UNHEALTHY = 1;
   */
  UNHEALTHY = 1,

  /**
   * The agent-reported status is out of date (may occur if
   * Dataproc loses communication with Agent).
   *
   * Applies to RUNNING state.
   *
   * @generated from enum value: STALE_STATUS = 2;
   */
  STALE_STATUS = 2,
}

/**
 * Describes the enum google.cloud.dataproc.v1.ClusterStatus.Substate.
 */
export const ClusterStatus_SubstateSchema: GenEnum<ClusterStatus_Substate> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 21, 1);

/**
 * Security related configuration, including encryption, Kerberos, etc.
 *
 * @generated from message google.cloud.dataproc.v1.SecurityConfig
 */
export type SecurityConfig = Message<"google.cloud.dataproc.v1.SecurityConfig"> & {
  /**
   * Optional. Kerberos related configuration.
   *
   * @generated from field: google.cloud.dataproc.v1.KerberosConfig kerberos_config = 1;
   */
  kerberosConfig?: KerberosConfig;

  /**
   * Optional. Identity related configuration, including service account based
   * secure multi-tenancy user mappings.
   *
   * @generated from field: google.cloud.dataproc.v1.IdentityConfig identity_config = 2;
   */
  identityConfig?: IdentityConfig;
};

/**
 * Describes the message google.cloud.dataproc.v1.SecurityConfig.
 * Use `create(SecurityConfigSchema)` to create a new message.
 */
export const SecurityConfigSchema: GenMessage<SecurityConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 22);

/**
 * Specifies Kerberos related configuration.
 *
 * @generated from message google.cloud.dataproc.v1.KerberosConfig
 */
export type KerberosConfig = Message<"google.cloud.dataproc.v1.KerberosConfig"> & {
  /**
   * Optional. Flag to indicate whether to Kerberize the cluster (default:
   * false). Set this field to true to enable Kerberos on a cluster.
   *
   * @generated from field: bool enable_kerberos = 1;
   */
  enableKerberos: boolean;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the root
   * principal password.
   *
   * @generated from field: string root_principal_password_uri = 2;
   */
  rootPrincipalPasswordUri: string;

  /**
   * Optional. The URI of the KMS key used to encrypt sensitive
   * files.
   *
   * @generated from field: string kms_key_uri = 3;
   */
  kmsKeyUri: string;

  /**
   * Optional. The Cloud Storage URI of the keystore file used for SSL
   * encryption. If not provided, Dataproc will provide a self-signed
   * certificate.
   *
   * @generated from field: string keystore_uri = 4;
   */
  keystoreUri: string;

  /**
   * Optional. The Cloud Storage URI of the truststore file used for SSL
   * encryption. If not provided, Dataproc will provide a self-signed
   * certificate.
   *
   * @generated from field: string truststore_uri = 5;
   */
  truststoreUri: string;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the
   * password to the user provided keystore. For the self-signed certificate,
   * this password is generated by Dataproc.
   *
   * @generated from field: string keystore_password_uri = 6;
   */
  keystorePasswordUri: string;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the
   * password to the user provided key. For the self-signed certificate, this
   * password is generated by Dataproc.
   *
   * @generated from field: string key_password_uri = 7;
   */
  keyPasswordUri: string;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the
   * password to the user provided truststore. For the self-signed certificate,
   * this password is generated by Dataproc.
   *
   * @generated from field: string truststore_password_uri = 8;
   */
  truststorePasswordUri: string;

  /**
   * Optional. The remote realm the Dataproc on-cluster KDC will trust, should
   * the user enable cross realm trust.
   *
   * @generated from field: string cross_realm_trust_realm = 9;
   */
  crossRealmTrustRealm: string;

  /**
   * Optional. The KDC (IP or hostname) for the remote trusted realm in a cross
   * realm trust relationship.
   *
   * @generated from field: string cross_realm_trust_kdc = 10;
   */
  crossRealmTrustKdc: string;

  /**
   * Optional. The admin server (IP or hostname) for the remote trusted realm in
   * a cross realm trust relationship.
   *
   * @generated from field: string cross_realm_trust_admin_server = 11;
   */
  crossRealmTrustAdminServer: string;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the
   * shared password between the on-cluster Kerberos realm and the remote
   * trusted realm, in a cross realm trust relationship.
   *
   * @generated from field: string cross_realm_trust_shared_password_uri = 12;
   */
  crossRealmTrustSharedPasswordUri: string;

  /**
   * Optional. The Cloud Storage URI of a KMS encrypted file containing the
   * master key of the KDC database.
   *
   * @generated from field: string kdc_db_key_uri = 13;
   */
  kdcDbKeyUri: string;

  /**
   * Optional. The lifetime of the ticket granting ticket, in hours.
   * If not specified, or user specifies 0, then default value 10
   * will be used.
   *
   * @generated from field: int32 tgt_lifetime_hours = 14;
   */
  tgtLifetimeHours: number;

  /**
   * Optional. The name of the on-cluster Kerberos realm.
   * If not specified, the uppercased domain of hostnames will be the realm.
   *
   * @generated from field: string realm = 15;
   */
  realm: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.KerberosConfig.
 * Use `create(KerberosConfigSchema)` to create a new message.
 */
export const KerberosConfigSchema: GenMessage<KerberosConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 23);

/**
 * Identity related configuration, including service account based
 * secure multi-tenancy user mappings.
 *
 * @generated from message google.cloud.dataproc.v1.IdentityConfig
 */
export type IdentityConfig = Message<"google.cloud.dataproc.v1.IdentityConfig"> & {
  /**
   * Required. Map of user to service account.
   *
   * @generated from field: map<string, string> user_service_account_mapping = 1;
   */
  userServiceAccountMapping: { [key: string]: string };
};

/**
 * Describes the message google.cloud.dataproc.v1.IdentityConfig.
 * Use `create(IdentityConfigSchema)` to create a new message.
 */
export const IdentityConfigSchema: GenMessage<IdentityConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 24);

/**
 * Specifies the selection and config of software inside the cluster.
 *
 * @generated from message google.cloud.dataproc.v1.SoftwareConfig
 */
export type SoftwareConfig = Message<"google.cloud.dataproc.v1.SoftwareConfig"> & {
  /**
   * Optional. The version of software inside the cluster. It must be one of the
   * supported [Dataproc
   * Versions](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported-dataproc-image-versions),
   * such as "1.2" (including a subminor version, such as "1.2.29"), or the
   * ["preview"
   * version](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions).
   * If unspecified, it defaults to the latest Debian version.
   *
   * @generated from field: string image_version = 1;
   */
  imageVersion: string;

  /**
   * Optional. The properties to set on daemon config files.
   *
   * Property keys are specified in `prefix:property` format, for example
   * `core:hadoop.tmp.dir`. The following are supported prefixes
   * and their mappings:
   *
   * * capacity-scheduler: `capacity-scheduler.xml`
   * * core:   `core-site.xml`
   * * distcp: `distcp-default.xml`
   * * hdfs:   `hdfs-site.xml`
   * * hive:   `hive-site.xml`
   * * mapred: `mapred-site.xml`
   * * pig:    `pig.properties`
   * * spark:  `spark-defaults.conf`
   * * yarn:   `yarn-site.xml`
   *
   * For more information, see [Cluster
   * properties](https://cloud.google.com/dataproc/docs/concepts/cluster-properties).
   *
   * @generated from field: map<string, string> properties = 2;
   */
  properties: { [key: string]: string };

  /**
   * Optional. The set of components to activate on the cluster.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.Component optional_components = 3;
   */
  optionalComponents: Component[];
};

/**
 * Describes the message google.cloud.dataproc.v1.SoftwareConfig.
 * Use `create(SoftwareConfigSchema)` to create a new message.
 */
export const SoftwareConfigSchema: GenMessage<SoftwareConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 25);

/**
 * Specifies the cluster auto-delete schedule configuration.
 *
 * @generated from message google.cloud.dataproc.v1.LifecycleConfig
 */
export type LifecycleConfig = Message<"google.cloud.dataproc.v1.LifecycleConfig"> & {
  /**
   * Optional. The duration to keep the cluster alive while idling (when no jobs
   * are running). Passing this threshold will cause the cluster to be
   * deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON
   * representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *
   * @generated from field: google.protobuf.Duration idle_delete_ttl = 1;
   */
  idleDeleteTtl?: Duration;

  /**
   * Either the exact time the cluster should be deleted at or
   * the cluster maximum age.
   *
   * @generated from oneof google.cloud.dataproc.v1.LifecycleConfig.ttl
   */
  ttl: {
    /**
     * Optional. The time when cluster will be auto-deleted (see JSON
     * representation of
     * [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).
     *
     * @generated from field: google.protobuf.Timestamp auto_delete_time = 2;
     */
    value: Timestamp;
    case: "autoDeleteTime";
  } | {
    /**
     * Optional. The lifetime duration of cluster. The cluster will be
     * auto-deleted at the end of this period. Minimum value is 10 minutes;
     * maximum value is 14 days (see JSON representation of
     * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).
     *
     * @generated from field: google.protobuf.Duration auto_delete_ttl = 3;
     */
    value: Duration;
    case: "autoDeleteTtl";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. The time when cluster became idle (most recent job finished)
   * and became eligible for deletion due to idleness (see JSON representation
   * of
   * [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *
   * @generated from field: google.protobuf.Timestamp idle_start_time = 4;
   */
  idleStartTime?: Timestamp;
};

/**
 * Describes the message google.cloud.dataproc.v1.LifecycleConfig.
 * Use `create(LifecycleConfigSchema)` to create a new message.
 */
export const LifecycleConfigSchema: GenMessage<LifecycleConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 26);

/**
 * Specifies a Metastore configuration.
 *
 * @generated from message google.cloud.dataproc.v1.MetastoreConfig
 */
export type MetastoreConfig = Message<"google.cloud.dataproc.v1.MetastoreConfig"> & {
  /**
   * Required. Resource name of an existing Dataproc Metastore service.
   *
   * Example:
   *
   * * `projects/[project_id]/locations/[dataproc_region]/services/[service-name]`
   *
   * @generated from field: string dataproc_metastore_service = 1;
   */
  dataprocMetastoreService: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.MetastoreConfig.
 * Use `create(MetastoreConfigSchema)` to create a new message.
 */
export const MetastoreConfigSchema: GenMessage<MetastoreConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 27);

/**
 * Contains cluster daemon metrics, such as HDFS and YARN stats.
 *
 * **Beta Feature**: This report is available for testing purposes only. It may
 * be changed before final release.
 *
 * @generated from message google.cloud.dataproc.v1.ClusterMetrics
 */
export type ClusterMetrics = Message<"google.cloud.dataproc.v1.ClusterMetrics"> & {
  /**
   * The HDFS metrics.
   *
   * @generated from field: map<string, int64> hdfs_metrics = 1;
   */
  hdfsMetrics: { [key: string]: bigint };

  /**
   * YARN metrics.
   *
   * @generated from field: map<string, int64> yarn_metrics = 2;
   */
  yarnMetrics: { [key: string]: bigint };
};

/**
 * Describes the message google.cloud.dataproc.v1.ClusterMetrics.
 * Use `create(ClusterMetricsSchema)` to create a new message.
 */
export const ClusterMetricsSchema: GenMessage<ClusterMetrics> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 28);

/**
 * Dataproc metric config.
 *
 * @generated from message google.cloud.dataproc.v1.DataprocMetricConfig
 */
export type DataprocMetricConfig = Message<"google.cloud.dataproc.v1.DataprocMetricConfig"> & {
  /**
   * Required. Metrics sources to enable.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.DataprocMetricConfig.Metric metrics = 1;
   */
  metrics: DataprocMetricConfig_Metric[];
};

/**
 * Describes the message google.cloud.dataproc.v1.DataprocMetricConfig.
 * Use `create(DataprocMetricConfigSchema)` to create a new message.
 */
export const DataprocMetricConfigSchema: GenMessage<DataprocMetricConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 29);

/**
 * A Dataproc custom metric.
 *
 * @generated from message google.cloud.dataproc.v1.DataprocMetricConfig.Metric
 */
export type DataprocMetricConfig_Metric = Message<"google.cloud.dataproc.v1.DataprocMetricConfig.Metric"> & {
  /**
   * Required. A standard set of metrics is collected unless `metricOverrides`
   * are specified for the metric source (see [Custom metrics]
   * (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics)
   * for more information).
   *
   * @generated from field: google.cloud.dataproc.v1.DataprocMetricConfig.MetricSource metric_source = 1;
   */
  metricSource: DataprocMetricConfig_MetricSource;

  /**
   * Optional. Specify one or more [Custom metrics]
   * (https://cloud.google.com/dataproc/docs/guides/dataproc-metrics#custom_metrics)
   * to collect for the metric course (for the `SPARK` metric source (any
   * [Spark metric]
   * (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be
   * specified).
   *
   * Provide metrics in the following format:
   * <code><var>METRIC_SOURCE</var>:<var>INSTANCE</var>:<var>GROUP</var>:<var>METRIC</var></code>
   * Use camelcase as appropriate.
   *
   * Examples:
   *
   * ```
   * yarn:ResourceManager:QueueMetrics:AppsCompleted
   * spark:driver:DAGScheduler:job.allJobs
   * sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed
   * hiveserver2:JVM:Memory:NonHeapMemoryUsage.used
   * ```
   *
   * Notes:
   *
   * * Only the specified overridden metrics are collected for the
   *   metric source. For example, if one or more `spark:executive` metrics
   *   are listed as metric overrides, other `SPARK` metrics are not
   *   collected. The collection of the metrics for other enabled custom
   *   metric sources is unaffected. For example, if both `SPARK` andd `YARN`
   *   metric sources are enabled, and overrides are provided for Spark
   *   metrics only, all YARN metrics are collected.
   *
   * @generated from field: repeated string metric_overrides = 2;
   */
  metricOverrides: string[];
};

/**
 * Describes the message google.cloud.dataproc.v1.DataprocMetricConfig.Metric.
 * Use `create(DataprocMetricConfig_MetricSchema)` to create a new message.
 */
export const DataprocMetricConfig_MetricSchema: GenMessage<DataprocMetricConfig_Metric> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 29, 0);

/**
 * A source for the collection of Dataproc custom metrics (see [Custom
 * metrics]
 * (https://cloud.google.com//dataproc/docs/guides/dataproc-metrics#custom_metrics)).
 *
 * @generated from enum google.cloud.dataproc.v1.DataprocMetricConfig.MetricSource
 */
export enum DataprocMetricConfig_MetricSource {
  /**
   * Required unspecified metric source.
   *
   * @generated from enum value: METRIC_SOURCE_UNSPECIFIED = 0;
   */
  METRIC_SOURCE_UNSPECIFIED = 0,

  /**
   * Monitoring agent metrics. If this source is enabled,
   * Dataproc enables the monitoring agent in Compute Engine,
   * and collects monitoring agent metrics, which are published
   * with an `agent.googleapis.com` prefix.
   *
   * @generated from enum value: MONITORING_AGENT_DEFAULTS = 1;
   */
  MONITORING_AGENT_DEFAULTS = 1,

  /**
   * HDFS metric source.
   *
   * @generated from enum value: HDFS = 2;
   */
  HDFS = 2,

  /**
   * Spark metric source.
   *
   * @generated from enum value: SPARK = 3;
   */
  SPARK = 3,

  /**
   * YARN metric source.
   *
   * @generated from enum value: YARN = 4;
   */
  YARN = 4,

  /**
   * Spark History Server metric source.
   *
   * @generated from enum value: SPARK_HISTORY_SERVER = 5;
   */
  SPARK_HISTORY_SERVER = 5,

  /**
   * Hiveserver2 metric source.
   *
   * @generated from enum value: HIVESERVER2 = 6;
   */
  HIVESERVER2 = 6,

  /**
   * hivemetastore metric source
   *
   * @generated from enum value: HIVEMETASTORE = 7;
   */
  HIVEMETASTORE = 7,

  /**
   * flink metric source
   *
   * @generated from enum value: FLINK = 8;
   */
  FLINK = 8,
}

/**
 * Describes the enum google.cloud.dataproc.v1.DataprocMetricConfig.MetricSource.
 */
export const DataprocMetricConfig_MetricSourceSchema: GenEnum<DataprocMetricConfig_MetricSource> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 29, 0);

/**
 * A request to create a cluster.
 *
 * @generated from message google.cloud.dataproc.v1.CreateClusterRequest
 */
export type CreateClusterRequest = Message<"google.cloud.dataproc.v1.CreateClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project that the cluster
   * belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * Required. The cluster to create.
   *
   * @generated from field: google.cloud.dataproc.v1.Cluster cluster = 2;
   */
  cluster?: Cluster;

  /**
   * Optional. A unique ID used to identify the request. If the server receives
   * two
   * [CreateClusterRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.CreateClusterRequest)s
   * with the same id, then the second request will be ignored and the
   * first [google.longrunning.Operation][google.longrunning.Operation] created
   * and stored in the backend is returned.
   *
   * It is recommended to always set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   *
   * @generated from field: string request_id = 4;
   */
  requestId: string;

  /**
   * Optional. Failure action when primary worker creation fails.
   *
   * @generated from field: google.cloud.dataproc.v1.FailureAction action_on_failed_primary_workers = 5;
   */
  actionOnFailedPrimaryWorkers: FailureAction;
};

/**
 * Describes the message google.cloud.dataproc.v1.CreateClusterRequest.
 * Use `create(CreateClusterRequestSchema)` to create a new message.
 */
export const CreateClusterRequestSchema: GenMessage<CreateClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 30);

/**
 * A request to update a cluster.
 *
 * @generated from message google.cloud.dataproc.v1.UpdateClusterRequest
 */
export type UpdateClusterRequest = Message<"google.cloud.dataproc.v1.UpdateClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project the
   * cluster belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 5;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;

  /**
   * Required. The changes to the cluster.
   *
   * @generated from field: google.cloud.dataproc.v1.Cluster cluster = 3;
   */
  cluster?: Cluster;

  /**
   * Optional. Timeout for graceful YARN decommissioning. Graceful
   * decommissioning allows removing nodes from the cluster without
   * interrupting jobs in progress. Timeout specifies how long to wait for jobs
   * in progress to finish before forcefully removing nodes (and potentially
   * interrupting jobs). Default timeout is 0 (for forceful decommission), and
   * the maximum allowed timeout is 1 day. (see JSON representation of
   * [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).
   *
   * Only supported on Dataproc image versions 1.2 and higher.
   *
   * @generated from field: google.protobuf.Duration graceful_decommission_timeout = 6;
   */
  gracefulDecommissionTimeout?: Duration;

  /**
   * Required. Specifies the path, relative to `Cluster`, of
   * the field to update. For example, to change the number of workers
   * in a cluster to 5, the `update_mask` parameter would be
   * specified as `config.worker_config.num_instances`,
   * and the `PATCH` request body would specify the new value, as follows:
   *
   *     {
   *       "config":{
   *         "workerConfig":{
   *           "numInstances":"5"
   *         }
   *       }
   *     }
   * Similarly, to change the number of preemptible workers in a cluster to 5,
   * the `update_mask` parameter would be
   * `config.secondary_worker_config.num_instances`, and the `PATCH` request
   * body would be set as follows:
   *
   *     {
   *       "config":{
   *         "secondaryWorkerConfig":{
   *           "numInstances":"5"
   *         }
   *       }
   *     }
   * <strong>Note:</strong> Currently, only the following fields can be updated:
   *
   *  <table>
   *  <tbody>
   *  <tr>
   *  <td><strong>Mask</strong></td>
   *  <td><strong>Purpose</strong></td>
   *  </tr>
   *  <tr>
   *  <td><strong><em>labels</em></strong></td>
   *  <td>Update labels</td>
   *  </tr>
   *  <tr>
   *  <td><strong><em>config.worker_config.num_instances</em></strong></td>
   *  <td>Resize primary worker group</td>
   *  </tr>
   *  <tr>
   *  <td><strong><em>config.secondary_worker_config.num_instances</em></strong></td>
   *  <td>Resize secondary worker group</td>
   *  </tr>
   *  <tr>
   *  <td>config.autoscaling_config.policy_uri</td><td>Use, stop using, or
   *  change autoscaling policies</td>
   *  </tr>
   *  </tbody>
   *  </table>
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * Optional. A unique ID used to identify the request. If the server
   * receives two
   * [UpdateClusterRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.UpdateClusterRequest)s
   * with the same id, then the second request will be ignored and the
   * first [google.longrunning.Operation][google.longrunning.Operation] created
   * and stored in the backend is returned.
   *
   * It is recommended to always set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   *
   * @generated from field: string request_id = 7;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.UpdateClusterRequest.
 * Use `create(UpdateClusterRequestSchema)` to create a new message.
 */
export const UpdateClusterRequestSchema: GenMessage<UpdateClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 31);

/**
 * A request to stop a cluster.
 *
 * @generated from message google.cloud.dataproc.v1.StopClusterRequest
 */
export type StopClusterRequest = Message<"google.cloud.dataproc.v1.StopClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project the
   * cluster belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * Optional. Specifying the `cluster_uuid` means the RPC will fail
   * (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
   *
   * @generated from field: string cluster_uuid = 4;
   */
  clusterUuid: string;

  /**
   * Optional. A unique ID used to identify the request. If the server
   * receives two
   * [StopClusterRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StopClusterRequest)s
   * with the same id, then the second request will be ignored and the
   * first [google.longrunning.Operation][google.longrunning.Operation] created
   * and stored in the backend is returned.
   *
   * Recommendation: Set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   *
   * @generated from field: string request_id = 5;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.StopClusterRequest.
 * Use `create(StopClusterRequestSchema)` to create a new message.
 */
export const StopClusterRequestSchema: GenMessage<StopClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 32);

/**
 * A request to start a cluster.
 *
 * @generated from message google.cloud.dataproc.v1.StartClusterRequest
 */
export type StartClusterRequest = Message<"google.cloud.dataproc.v1.StartClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project the
   * cluster belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 2;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 3;
   */
  clusterName: string;

  /**
   * Optional. Specifying the `cluster_uuid` means the RPC will fail
   * (with error NOT_FOUND) if a cluster with the specified UUID does not exist.
   *
   * @generated from field: string cluster_uuid = 4;
   */
  clusterUuid: string;

  /**
   * Optional. A unique ID used to identify the request. If the server
   * receives two
   * [StartClusterRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.StartClusterRequest)s
   * with the same id, then the second request will be ignored and the
   * first [google.longrunning.Operation][google.longrunning.Operation] created
   * and stored in the backend is returned.
   *
   * Recommendation: Set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   *
   * @generated from field: string request_id = 5;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.StartClusterRequest.
 * Use `create(StartClusterRequestSchema)` to create a new message.
 */
export const StartClusterRequestSchema: GenMessage<StartClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 33);

/**
 * A request to delete a cluster.
 *
 * @generated from message google.cloud.dataproc.v1.DeleteClusterRequest
 */
export type DeleteClusterRequest = Message<"google.cloud.dataproc.v1.DeleteClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project that the cluster
   * belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;

  /**
   * Optional. Specifying the `cluster_uuid` means the RPC should fail
   * (with error NOT_FOUND) if cluster with specified UUID does not exist.
   *
   * @generated from field: string cluster_uuid = 4;
   */
  clusterUuid: string;

  /**
   * Optional. A unique ID used to identify the request. If the server
   * receives two
   * [DeleteClusterRequest](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#google.cloud.dataproc.v1.DeleteClusterRequest)s
   * with the same id, then the second request will be ignored and the
   * first [google.longrunning.Operation][google.longrunning.Operation] created
   * and stored in the backend is returned.
   *
   * It is recommended to always set this value to a
   * [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).
   *
   * The ID must contain only letters (a-z, A-Z), numbers (0-9),
   * underscores (_), and hyphens (-). The maximum length is 40 characters.
   *
   * @generated from field: string request_id = 5;
   */
  requestId: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.DeleteClusterRequest.
 * Use `create(DeleteClusterRequestSchema)` to create a new message.
 */
export const DeleteClusterRequestSchema: GenMessage<DeleteClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 34);

/**
 * Request to get the resource representation for a cluster in a project.
 *
 * @generated from message google.cloud.dataproc.v1.GetClusterRequest
 */
export type GetClusterRequest = Message<"google.cloud.dataproc.v1.GetClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project that the cluster
   * belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.GetClusterRequest.
 * Use `create(GetClusterRequestSchema)` to create a new message.
 */
export const GetClusterRequestSchema: GenMessage<GetClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 35);

/**
 * A request to list the clusters in a project.
 *
 * @generated from message google.cloud.dataproc.v1.ListClustersRequest
 */
export type ListClustersRequest = Message<"google.cloud.dataproc.v1.ListClustersRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project that the cluster
   * belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 4;
   */
  region: string;

  /**
   * Optional. A filter constraining the clusters to list. Filters are
   * case-sensitive and have the following syntax:
   *
   * field = value [AND [field = value]] ...
   *
   * where **field** is one of `status.state`, `clusterName`, or `labels.[KEY]`,
   * and `[KEY]` is a label key. **value** can be `*` to match all values.
   * `status.state` can be one of the following: `ACTIVE`, `INACTIVE`,
   * `CREATING`, `RUNNING`, `ERROR`, `DELETING`, `UPDATING`, `STOPPING`, or
   * `STOPPED`. `ACTIVE` contains the `CREATING`, `UPDATING`, and `RUNNING`
   * states. `INACTIVE` contains the `DELETING`, `ERROR`, `STOPPING`, and
   * `STOPPED` states. `clusterName` is the name of the cluster provided at
   * creation time. Only the logical `AND` operator is supported;
   * space-separated items are treated as having an implicit `AND` operator.
   *
   * Example filter:
   *
   * status.state = ACTIVE AND clusterName = mycluster
   * AND labels.env = staging AND labels.starred = *
   *
   * @generated from field: string filter = 5;
   */
  filter: string;

  /**
   * Optional. The standard List page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The standard List page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.ListClustersRequest.
 * Use `create(ListClustersRequestSchema)` to create a new message.
 */
export const ListClustersRequestSchema: GenMessage<ListClustersRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 36);

/**
 * The list of all clusters in a project.
 *
 * @generated from message google.cloud.dataproc.v1.ListClustersResponse
 */
export type ListClustersResponse = Message<"google.cloud.dataproc.v1.ListClustersResponse"> & {
  /**
   * Output only. The clusters in the project.
   *
   * @generated from field: repeated google.cloud.dataproc.v1.Cluster clusters = 1;
   */
  clusters: Cluster[];

  /**
   * Output only. This token is included in the response if there are more
   * results to fetch. To fetch additional results, provide this value as the
   * `page_token` in a subsequent `ListClustersRequest`.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.ListClustersResponse.
 * Use `create(ListClustersResponseSchema)` to create a new message.
 */
export const ListClustersResponseSchema: GenMessage<ListClustersResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 37);

/**
 * A request to collect cluster diagnostic information.
 *
 * @generated from message google.cloud.dataproc.v1.DiagnoseClusterRequest
 */
export type DiagnoseClusterRequest = Message<"google.cloud.dataproc.v1.DiagnoseClusterRequest"> & {
  /**
   * Required. The ID of the Google Cloud Platform project that the cluster
   * belongs to.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The Dataproc region in which to handle the request.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * Required. The cluster name.
   *
   * @generated from field: string cluster_name = 2;
   */
  clusterName: string;

  /**
   * Optional. (Optional) The output Cloud Storage directory for the diagnostic
   * tarball. If not specified, a task-specific directory in the cluster's
   * staging bucket will be used.
   *
   * @generated from field: string tarball_gcs_dir = 4;
   */
  tarballGcsDir: string;

  /**
   * Optional. (Optional) The access type to the diagnostic tarball. If not
   * specified, falls back to default access of the bucket
   *
   * @generated from field: google.cloud.dataproc.v1.DiagnoseClusterRequest.TarballAccess tarball_access = 5;
   */
  tarballAccess: DiagnoseClusterRequest_TarballAccess;

  /**
   * Optional. Time interval in which diagnosis should be carried out on the
   * cluster.
   *
   * @generated from field: google.type.Interval diagnosis_interval = 6;
   */
  diagnosisInterval?: Interval;

  /**
   * Optional. Specifies a list of jobs on which diagnosis is to be performed.
   * Format: projects/{project}/regions/{region}/jobs/{job}
   *
   * @generated from field: repeated string jobs = 10;
   */
  jobs: string[];

  /**
   * Optional. Specifies a list of yarn applications on which diagnosis is to be
   * performed.
   *
   * @generated from field: repeated string yarn_application_ids = 11;
   */
  yarnApplicationIds: string[];
};

/**
 * Describes the message google.cloud.dataproc.v1.DiagnoseClusterRequest.
 * Use `create(DiagnoseClusterRequestSchema)` to create a new message.
 */
export const DiagnoseClusterRequestSchema: GenMessage<DiagnoseClusterRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 38);

/**
 * Defines who has access to the diagnostic tarball
 *
 * @generated from enum google.cloud.dataproc.v1.DiagnoseClusterRequest.TarballAccess
 */
export enum DiagnoseClusterRequest_TarballAccess {
  /**
   * Tarball Access unspecified. Falls back to default access of the bucket
   *
   * @generated from enum value: TARBALL_ACCESS_UNSPECIFIED = 0;
   */
  TARBALL_ACCESS_UNSPECIFIED = 0,

  /**
   * Google Cloud Support group has read access to the
   * diagnostic tarball
   *
   * @generated from enum value: GOOGLE_CLOUD_SUPPORT = 1;
   */
  GOOGLE_CLOUD_SUPPORT = 1,

  /**
   * Google Cloud Dataproc Diagnose service account has read access to the
   * diagnostic tarball
   *
   * @generated from enum value: GOOGLE_DATAPROC_DIAGNOSE = 2;
   */
  GOOGLE_DATAPROC_DIAGNOSE = 2,
}

/**
 * Describes the enum google.cloud.dataproc.v1.DiagnoseClusterRequest.TarballAccess.
 */
export const DiagnoseClusterRequest_TarballAccessSchema: GenEnum<DiagnoseClusterRequest_TarballAccess> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 38, 0);

/**
 * The location of diagnostic output.
 *
 * @generated from message google.cloud.dataproc.v1.DiagnoseClusterResults
 */
export type DiagnoseClusterResults = Message<"google.cloud.dataproc.v1.DiagnoseClusterResults"> & {
  /**
   * Output only. The Cloud Storage URI of the diagnostic output.
   * The output report is a plain text file with a summary of collected
   * diagnostics.
   *
   * @generated from field: string output_uri = 1;
   */
  outputUri: string;
};

/**
 * Describes the message google.cloud.dataproc.v1.DiagnoseClusterResults.
 * Use `create(DiagnoseClusterResultsSchema)` to create a new message.
 */
export const DiagnoseClusterResultsSchema: GenMessage<DiagnoseClusterResults> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 39);

/**
 * Reservation Affinity for consuming Zonal reservation.
 *
 * @generated from message google.cloud.dataproc.v1.ReservationAffinity
 */
export type ReservationAffinity = Message<"google.cloud.dataproc.v1.ReservationAffinity"> & {
  /**
   * Optional. Type of reservation to consume
   *
   * @generated from field: google.cloud.dataproc.v1.ReservationAffinity.Type consume_reservation_type = 1;
   */
  consumeReservationType: ReservationAffinity_Type;

  /**
   * Optional. Corresponds to the label key of reservation resource.
   *
   * @generated from field: string key = 2;
   */
  key: string;

  /**
   * Optional. Corresponds to the label values of reservation resource.
   *
   * @generated from field: repeated string values = 3;
   */
  values: string[];
};

/**
 * Describes the message google.cloud.dataproc.v1.ReservationAffinity.
 * Use `create(ReservationAffinitySchema)` to create a new message.
 */
export const ReservationAffinitySchema: GenMessage<ReservationAffinity> = /*@__PURE__*/
  messageDesc(file_google_cloud_dataproc_v1_clusters, 40);

/**
 * Indicates whether to consume capacity from an reservation or not.
 *
 * @generated from enum google.cloud.dataproc.v1.ReservationAffinity.Type
 */
export enum ReservationAffinity_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Do not consume from any allocated capacity.
   *
   * @generated from enum value: NO_RESERVATION = 1;
   */
  NO_RESERVATION = 1,

  /**
   * Consume any reservation available.
   *
   * @generated from enum value: ANY_RESERVATION = 2;
   */
  ANY_RESERVATION = 2,

  /**
   * Must consume from a specific reservation. Must specify key value fields
   * for specifying the reservations.
   *
   * @generated from enum value: SPECIFIC_RESERVATION = 3;
   */
  SPECIFIC_RESERVATION = 3,
}

/**
 * Describes the enum google.cloud.dataproc.v1.ReservationAffinity.Type.
 */
export const ReservationAffinity_TypeSchema: GenEnum<ReservationAffinity_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_dataproc_v1_clusters, 40, 0);

/**
 * The ClusterControllerService provides methods to manage clusters
 * of Compute Engine instances.
 *
 * @generated from service google.cloud.dataproc.v1.ClusterController
 */
export const ClusterController: GenService<{
  /**
   * Creates a cluster in a project. The returned
   * [Operation.metadata][google.longrunning.Operation.metadata] will be
   * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.CreateCluster
   */
  createCluster: {
    methodKind: "unary";
    input: typeof CreateClusterRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates a cluster in a project. The returned
   * [Operation.metadata][google.longrunning.Operation.metadata] will be
   * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
   * The cluster must be in a
   * [`RUNNING`][google.cloud.dataproc.v1.ClusterStatus.State] state or an error
   * is returned.
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.UpdateCluster
   */
  updateCluster: {
    methodKind: "unary";
    input: typeof UpdateClusterRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Stops a cluster in a project.
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.StopCluster
   */
  stopCluster: {
    methodKind: "unary";
    input: typeof StopClusterRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Starts a cluster in a project.
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.StartCluster
   */
  startCluster: {
    methodKind: "unary";
    input: typeof StartClusterRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes a cluster in a project. The returned
   * [Operation.metadata][google.longrunning.Operation.metadata] will be
   * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.DeleteCluster
   */
  deleteCluster: {
    methodKind: "unary";
    input: typeof DeleteClusterRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the resource representation for a cluster in a project.
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.GetCluster
   */
  getCluster: {
    methodKind: "unary";
    input: typeof GetClusterRequestSchema;
    output: typeof ClusterSchema;
  },
  /**
   * Lists all regions/{region}/clusters in a project alphabetically.
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.ListClusters
   */
  listClusters: {
    methodKind: "unary";
    input: typeof ListClustersRequestSchema;
    output: typeof ListClustersResponseSchema;
  },
  /**
   * Gets cluster diagnostic information. The returned
   * [Operation.metadata][google.longrunning.Operation.metadata] will be
   * [ClusterOperationMetadata](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).
   * After the operation completes,
   * [Operation.response][google.longrunning.Operation.response]
   * contains
   * [DiagnoseClusterResults](https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).
   *
   * @generated from rpc google.cloud.dataproc.v1.ClusterController.DiagnoseCluster
   */
  diagnoseCluster: {
    methodKind: "unary";
    input: typeof DiagnoseClusterRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_dataproc_v1_clusters, 0);

