// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/secretmanager/v1beta2/resources.proto (package google.cloud.secretmanager.v1beta2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/secretmanager/v1beta2/resources.proto.
 */
export const file_google_cloud_secretmanager_v1beta2_resources: GenFile = /*@__PURE__*/
  fileDesc("CjJnb29nbGUvY2xvdWQvc2VjcmV0bWFuYWdlci92MWJldGEyL3Jlc291cmNlcy5wcm90bxIiZ29vZ2xlLmNsb3VkLnNlY3JldG1hbmFnZXIudjFiZXRhMiKFCQoGU2VjcmV0EhEKBG5hbWUYASABKAlCA+BBAxJMCgtyZXBsaWNhdGlvbhgCIAEoCzIvLmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuUmVwbGljYXRpb25CBuBBBeBBARI0CgtjcmVhdGVfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxJGCgZsYWJlbHMYBCADKAsyNi5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlNlY3JldC5MYWJlbHNFbnRyeRI+CgZ0b3BpY3MYBSADKAsyKS5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlRvcGljQgPgQQESNgoLZXhwaXJlX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQFIABItCgN0dGwYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBBEgAEhEKBGV0YWcYCCABKAlCA+BBARJDCghyb3RhdGlvbhgJIAEoCzIsLmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuUm90YXRpb25CA+BBARJcCg92ZXJzaW9uX2FsaWFzZXMYCyADKAsyPi5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlNlY3JldC5WZXJzaW9uQWxpYXNlc0VudHJ5QgPgQQESVQoLYW5ub3RhdGlvbnMYDSADKAsyOy5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlNlY3JldC5Bbm5vdGF0aW9uc0VudHJ5QgPgQQESOwoTdmVyc2lvbl9kZXN0cm95X3R0bBgOIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkID4EEBEmcKG2N1c3RvbWVyX21hbmFnZWRfZW5jcnlwdGlvbhgPIAEoCzI9Lmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuQ3VzdG9tZXJNYW5hZ2VkRW5jcnlwdGlvbkID4EEBGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaNQoTVmVyc2lvbkFsaWFzZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBGjIKEEFubm90YXRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ATqZAepBlQEKI3NlY3JldG1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vU2VjcmV0EiNwcm9qZWN0cy97cHJvamVjdH0vc2VjcmV0cy97c2VjcmV0fRI4cHJvamVjdHMve3Byb2plY3R9L2xvY2F0aW9ucy97bG9jYXRpb259L3NlY3JldHMve3NlY3JldH0qB3NlY3JldHMyBnNlY3JldEIMCgpleHBpcmF0aW9uItEGCg1TZWNyZXRWZXJzaW9uEhEKBG5hbWUYASABKAlCA+BBAxI0CgtjcmVhdGVfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI1CgxkZXN0cm95X3RpbWUYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSSwoFc3RhdGUYBCABKA4yNy5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlNlY3JldFZlcnNpb24uU3RhdGVCA+BBAxJRChJyZXBsaWNhdGlvbl9zdGF0dXMYBSABKAsyNS5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlJlcGxpY2F0aW9uU3RhdHVzEhEKBGV0YWcYBiABKAlCA+BBAxIuCiFjbGllbnRfc3BlY2lmaWVkX3BheWxvYWRfY2hlY2tzdW0YByABKAhCA+BBAxI/ChZzY2hlZHVsZWRfZGVzdHJveV90aW1lGAggASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEm0KG2N1c3RvbWVyX21hbmFnZWRfZW5jcnlwdGlvbhgJIAEoCzJDLmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuQ3VzdG9tZXJNYW5hZ2VkRW5jcnlwdGlvblN0YXR1c0ID4EEDIkgKBVN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASCwoHRU5BQkxFRBABEgwKCERJU0FCTEVEEAISDQoJREVTVFJPWUVEEAM64gHqQd4BCipzZWNyZXRtYW5hZ2VyLmdvb2dsZWFwaXMuY29tL1NlY3JldFZlcnNpb24SPXByb2plY3RzL3twcm9qZWN0fS9zZWNyZXRzL3tzZWNyZXR9L3ZlcnNpb25zL3tzZWNyZXRfdmVyc2lvbn0SUnByb2plY3RzL3twcm9qZWN0fS9sb2NhdGlvbnMve2xvY2F0aW9ufS9zZWNyZXRzL3tzZWNyZXR9L3ZlcnNpb25zL3tzZWNyZXRfdmVyc2lvbn0qDnNlY3JldFZlcnNpb25zMg1zZWNyZXRWZXJzaW9uIqoECgtSZXBsaWNhdGlvbhJOCglhdXRvbWF0aWMYASABKAsyOS5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlJlcGxpY2F0aW9uLkF1dG9tYXRpY0gAElMKDHVzZXJfbWFuYWdlZBgCIAEoCzI7Lmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuUmVwbGljYXRpb24uVXNlck1hbmFnZWRIABp0CglBdXRvbWF0aWMSZwobY3VzdG9tZXJfbWFuYWdlZF9lbmNyeXB0aW9uGAEgASgLMj0uZ29vZ2xlLmNsb3VkLnNlY3JldG1hbmFnZXIudjFiZXRhMi5DdXN0b21lck1hbmFnZWRFbmNyeXB0aW9uQgPgQQEa8AEKC1VzZXJNYW5hZ2VkEloKCHJlcGxpY2FzGAEgAygLMkMuZ29vZ2xlLmNsb3VkLnNlY3JldG1hbmFnZXIudjFiZXRhMi5SZXBsaWNhdGlvbi5Vc2VyTWFuYWdlZC5SZXBsaWNhQgPgQQIahAEKB1JlcGxpY2ESEAoIbG9jYXRpb24YASABKAkSZwobY3VzdG9tZXJfbWFuYWdlZF9lbmNyeXB0aW9uGAIgASgLMj0uZ29vZ2xlLmNsb3VkLnNlY3JldG1hbmFnZXIudjFiZXRhMi5DdXN0b21lck1hbmFnZWRFbmNyeXB0aW9uQgPgQQFCDQoLcmVwbGljYXRpb24iNgoZQ3VzdG9tZXJNYW5hZ2VkRW5jcnlwdGlvbhIZCgxrbXNfa2V5X25hbWUYASABKAlCA+BBAiKFBQoRUmVwbGljYXRpb25TdGF0dXMSWgoJYXV0b21hdGljGAEgASgLMkUuZ29vZ2xlLmNsb3VkLnNlY3JldG1hbmFnZXIudjFiZXRhMi5SZXBsaWNhdGlvblN0YXR1cy5BdXRvbWF0aWNTdGF0dXNIABJfCgx1c2VyX21hbmFnZWQYAiABKAsyRy5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlJlcGxpY2F0aW9uU3RhdHVzLlVzZXJNYW5hZ2VkU3RhdHVzSAAagAEKD0F1dG9tYXRpY1N0YXR1cxJtChtjdXN0b21lcl9tYW5hZ2VkX2VuY3J5cHRpb24YASABKAsyQy5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLkN1c3RvbWVyTWFuYWdlZEVuY3J5cHRpb25TdGF0dXNCA+BBAxqZAgoRVXNlck1hbmFnZWRTdGF0dXMSbAoIcmVwbGljYXMYASADKAsyVS5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyLlJlcGxpY2F0aW9uU3RhdHVzLlVzZXJNYW5hZ2VkU3RhdHVzLlJlcGxpY2FTdGF0dXNCA+BBAxqVAQoNUmVwbGljYVN0YXR1cxIVCghsb2NhdGlvbhgBIAEoCUID4EEDEm0KG2N1c3RvbWVyX21hbmFnZWRfZW5jcnlwdGlvbhgCIAEoCzJDLmdvb2dsZS5jbG91ZC5zZWNyZXRtYW5hZ2VyLnYxYmV0YTIuQ3VzdG9tZXJNYW5hZ2VkRW5jcnlwdGlvblN0YXR1c0ID4EEDQhQKEnJlcGxpY2F0aW9uX3N0YXR1cyJECh9DdXN0b21lck1hbmFnZWRFbmNyeXB0aW9uU3RhdHVzEiEKFGttc19rZXlfdmVyc2lvbl9uYW1lGAEgASgJQgPgQQIiXwoFVG9waWMSEQoEbmFtZRgBIAEoCUID4EECOkPqQUAKG3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9Ub3BpYxIhcHJvamVjdHMve3Byb2plY3R9L3RvcGljcy97dG9waWN9IoABCghSb3RhdGlvbhI7ChJuZXh0X3JvdGF0aW9uX3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQESNwoPcm90YXRpb25fcGVyaW9kGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQQiTAoNU2VjcmV0UGF5bG9hZBIMCgRkYXRhGAEgASgMEh0KC2RhdGFfY3JjMzJjGAIgASgDQgPgQQFIAIgBAUIOCgxfZGF0YV9jcmMzMmNCgwIKJmNvbS5nb29nbGUuY2xvdWQuc2VjcmV0bWFuYWdlci52MWJldGEyQg5SZXNvdXJjZXNQcm90b1ABWkxjbG91ZC5nb29nbGUuY29tL2dvL3NlY3JldG1hbmFnZXIvYXBpdjFiZXRhMi9zZWNyZXRtYW5hZ2VycGI7c2VjcmV0bWFuYWdlcnBi+AEBogIDR1NNqgIiR29vZ2xlLkNsb3VkLlNlY3JldE1hbmFnZXIuVjFCZXRhMsoCIkdvb2dsZVxDbG91ZFxTZWNyZXRNYW5hZ2VyXFYxYmV0YTLqAiVHb29nbGU6OkNsb3VkOjpTZWNyZXRNYW5hZ2VyOjpWMWJldGEyYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * A [Secret][google.cloud.secretmanager.v1beta2.Secret] is a logical secret
 * whose value and versions can be accessed.
 *
 * A [Secret][google.cloud.secretmanager.v1beta2.Secret] is made up of zero or
 * more [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion] that
 * represent the secret data.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Secret
 */
export type Secret = Message<"google.cloud.secretmanager.v1beta2.Secret"> & {
  /**
   * Output only. The resource name of the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] in the format
   * `projects/*\/secrets/*`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Immutable. The replication policy of the secret data attached to
   * the [Secret][google.cloud.secretmanager.v1beta2.Secret].
   *
   * The replication policy cannot be changed after the Secret has been created.
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.Replication replication = 2;
   */
  replication?: Replication;

  /**
   * Output only. The time at which the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * The labels assigned to this Secret.
   *
   * Label keys must be between 1 and 63 characters long, have a UTF-8 encoding
   * of maximum 128 bytes, and must conform to the following PCRE regular
   * expression: `[\p{Ll}\p{Lo}][\p{Ll}\p{Lo}\p{N}_-]{0,62}`
   *
   * Label values must be between 0 and 63 characters long, have a UTF-8
   * encoding of maximum 128 bytes, and must conform to the following PCRE
   * regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}`
   *
   * No more than 64 labels can be assigned to a given resource.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * Optional. A list of up to 10 Pub/Sub topics to which messages are published
   * when control plane operations are called on the secret or its versions.
   *
   * @generated from field: repeated google.cloud.secretmanager.v1beta2.Topic topics = 5;
   */
  topics: Topic[];

  /**
   * Expiration policy attached to the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret]. If specified the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] and all
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion] will be
   * automatically deleted at expiration. Expired secrets are irreversibly
   * deleted.
   *
   * Expiration is *not* the recommended way to set time-based permissions. [IAM
   * Conditions](https://cloud.google.com/secret-manager/docs/access-control#conditions)
   * is recommended for granting time-based permissions because the operation
   * can be reversed.
   *
   * @generated from oneof google.cloud.secretmanager.v1beta2.Secret.expiration
   */
  expiration: {
    /**
     * Optional. Timestamp in UTC when the
     * [Secret][google.cloud.secretmanager.v1beta2.Secret] is scheduled to
     * expire. This is always provided on output, regardless of what was sent on
     * input.
     *
     * @generated from field: google.protobuf.Timestamp expire_time = 6;
     */
    value: Timestamp;
    case: "expireTime";
  } | {
    /**
     * Input only. The TTL for the
     * [Secret][google.cloud.secretmanager.v1beta2.Secret].
     *
     * @generated from field: google.protobuf.Duration ttl = 7;
     */
    value: Duration;
    case: "ttl";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Etag of the currently stored
   * [Secret][google.cloud.secretmanager.v1beta2.Secret].
   *
   * @generated from field: string etag = 8;
   */
  etag: string;

  /**
   * Optional. Rotation policy attached to the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret]. May be excluded if
   * there is no rotation policy.
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.Rotation rotation = 9;
   */
  rotation?: Rotation;

  /**
   * Optional. Mapping from version alias to version name.
   *
   * A version alias is a string with a maximum length of 63 characters and can
   * contain uppercase and lowercase letters, numerals, and the hyphen (`-`)
   * and underscore ('_') characters. An alias string must start with a
   * letter and cannot be the string 'latest' or 'NEW'.
   * No more than 50 aliases can be assigned to a given secret.
   *
   * Version-Alias pairs will be viewable via GetSecret and modifiable via
   * UpdateSecret. Access by alias is only supported for
   * GetSecretVersion and AccessSecretVersion.
   *
   * @generated from field: map<string, int64> version_aliases = 11;
   */
  versionAliases: { [key: string]: bigint };

  /**
   * Optional. Custom metadata about the secret.
   *
   * Annotations are distinct from various forms of labels.
   * Annotations exist to allow client tools to store their own state
   * information without requiring a database.
   *
   * Annotation keys must be between 1 and 63 characters long, have a UTF-8
   * encoding of maximum 128 bytes, begin and end with an alphanumeric character
   * ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and
   * alphanumerics in between these symbols.
   *
   * The total size of annotation keys and values must be less than 16KiB.
   *
   * @generated from field: map<string, string> annotations = 13;
   */
  annotations: { [key: string]: string };

  /**
   * Optional. Secret Version TTL after destruction request
   *
   * This is a part of the Delayed secret version destroy feature.
   * For secret with TTL>0, version destruction doesn't happen immediately
   * on calling destroy instead the version goes to a disabled state and
   * destruction happens after the TTL expires.
   *
   * @generated from field: google.protobuf.Duration version_destroy_ttl = 14;
   */
  versionDestroyTtl?: Duration;

  /**
   * Optional. The customer-managed encryption configuration of the Regionalised
   * Secrets. If no configuration is provided, Google-managed default encryption
   * is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1beta2.Secret]
   * encryption configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion] added
   * afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryption customer_managed_encryption = 15;
   */
  customerManagedEncryption?: CustomerManagedEncryption;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Secret.
 * Use `create(SecretSchema)` to create a new message.
 */
export const SecretSchema: GenMessage<Secret> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 0);

/**
 * A secret version resource in the Secret Manager API.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.SecretVersion
 */
export type SecretVersion = Message<"google.cloud.secretmanager.v1beta2.SecretVersion"> & {
  /**
   * Output only. The resource name of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] in the
   * format `projects/*\/secrets/*\/versions/*`.
   *
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] IDs in a
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] start at 1 and are
   * incremented for each subsequent version of the secret.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The time at which the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] was
   * created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time this
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] was
   * destroyed. Only present if
   * [state][google.cloud.secretmanager.v1beta2.SecretVersion.state] is
   * [DESTROYED][google.cloud.secretmanager.v1beta2.SecretVersion.State.DESTROYED].
   *
   * @generated from field: google.protobuf.Timestamp destroy_time = 3;
   */
  destroyTime?: Timestamp;

  /**
   * Output only. The current state of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.SecretVersion.State state = 4;
   */
  state: SecretVersion_State;

  /**
   * The replication status of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.ReplicationStatus replication_status = 5;
   */
  replicationStatus?: ReplicationStatus;

  /**
   * Output only. Etag of the currently stored
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: string etag = 6;
   */
  etag: string;

  /**
   * Output only. True if payload checksum specified in
   * [SecretPayload][google.cloud.secretmanager.v1beta2.SecretPayload] object
   * has been received by
   * [SecretManagerService][google.cloud.secretmanager.v1beta2.SecretManagerService]
   * on
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1beta2.SecretManagerService.AddSecretVersion].
   *
   * @generated from field: bool client_specified_payload_checksum = 7;
   */
  clientSpecifiedPayloadChecksum: boolean;

  /**
   * Optional. Output only. Scheduled destroy time for secret version.
   * This is a part of the Delayed secret version destroy feature. For a
   * Secret with a valid version destroy TTL, when a secert version is
   * destroyed, version is moved to disabled state and it is scheduled for
   * destruction Version is destroyed only after the scheduled_destroy_time.
   *
   * @generated from field: google.protobuf.Timestamp scheduled_destroy_time = 8;
   */
  scheduledDestroyTime?: Timestamp;

  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion]. Only
   * populated if customer-managed encryption is used and
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] is a Regionalised
   * Secret.
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus customer_managed_encryption = 9;
   */
  customerManagedEncryption?: CustomerManagedEncryptionStatus;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.SecretVersion.
 * Use `create(SecretVersionSchema)` to create a new message.
 */
export const SecretVersionSchema: GenMessage<SecretVersion> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 1);

/**
 * The state of a
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion],
 * indicating if it can be accessed.
 *
 * @generated from enum google.cloud.secretmanager.v1beta2.SecretVersion.State
 */
export enum SecretVersion_State {
  /**
   * Not specified. This value is unused and invalid.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] may
   * be accessed.
   *
   * @generated from enum value: ENABLED = 1;
   */
  ENABLED = 1,

  /**
   * The [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] may
   * not be accessed, but the secret data is still available and can be placed
   * back into the
   * [ENABLED][google.cloud.secretmanager.v1beta2.SecretVersion.State.ENABLED]
   * state.
   *
   * @generated from enum value: DISABLED = 2;
   */
  DISABLED = 2,

  /**
   * The [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] is
   * destroyed and the secret data is no longer stored. A version may not
   * leave this state once entered.
   *
   * @generated from enum value: DESTROYED = 3;
   */
  DESTROYED = 3,
}

/**
 * Describes the enum google.cloud.secretmanager.v1beta2.SecretVersion.State.
 */
export const SecretVersion_StateSchema: GenEnum<SecretVersion_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_secretmanager_v1beta2_resources, 1, 0);

/**
 * A policy that defines the replication and encryption configuration of data.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Replication
 */
export type Replication = Message<"google.cloud.secretmanager.v1beta2.Replication"> & {
  /**
   * The replication policy for this secret.
   *
   * @generated from oneof google.cloud.secretmanager.v1beta2.Replication.replication
   */
  replication: {
    /**
     * The [Secret][google.cloud.secretmanager.v1beta2.Secret] will
     * automatically be replicated without any restrictions.
     *
     * @generated from field: google.cloud.secretmanager.v1beta2.Replication.Automatic automatic = 1;
     */
    value: Replication_Automatic;
    case: "automatic";
  } | {
    /**
     * The [Secret][google.cloud.secretmanager.v1beta2.Secret] will only be
     * replicated into the locations specified.
     *
     * @generated from field: google.cloud.secretmanager.v1beta2.Replication.UserManaged user_managed = 2;
     */
    value: Replication_UserManaged;
    case: "userManaged";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Replication.
 * Use `create(ReplicationSchema)` to create a new message.
 */
export const ReplicationSchema: GenMessage<Replication> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 2);

/**
 * A replication policy that replicates the
 * [Secret][google.cloud.secretmanager.v1beta2.Secret] payload without any
 * restrictions.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Replication.Automatic
 */
export type Replication_Automatic = Message<"google.cloud.secretmanager.v1beta2.Replication.Automatic"> & {
  /**
   * Optional. The customer-managed encryption configuration of the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret]. If no configuration
   * is provided, Google-managed default encryption is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1beta2.Secret]
   * encryption configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion] added
   * afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryption customer_managed_encryption = 1;
   */
  customerManagedEncryption?: CustomerManagedEncryption;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Replication.Automatic.
 * Use `create(Replication_AutomaticSchema)` to create a new message.
 */
export const Replication_AutomaticSchema: GenMessage<Replication_Automatic> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 2, 0);

/**
 * A replication policy that replicates the
 * [Secret][google.cloud.secretmanager.v1beta2.Secret] payload into the
 * locations specified in [Secret.replication.user_managed.replicas][]
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Replication.UserManaged
 */
export type Replication_UserManaged = Message<"google.cloud.secretmanager.v1beta2.Replication.UserManaged"> & {
  /**
   * Required. The list of Replicas for this
   * [Secret][google.cloud.secretmanager.v1beta2.Secret].
   *
   * Cannot be empty.
   *
   * @generated from field: repeated google.cloud.secretmanager.v1beta2.Replication.UserManaged.Replica replicas = 1;
   */
  replicas: Replication_UserManaged_Replica[];
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Replication.UserManaged.
 * Use `create(Replication_UserManagedSchema)` to create a new message.
 */
export const Replication_UserManagedSchema: GenMessage<Replication_UserManaged> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 2, 1);

/**
 * Represents a Replica for this
 * [Secret][google.cloud.secretmanager.v1beta2.Secret].
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Replication.UserManaged.Replica
 */
export type Replication_UserManaged_Replica = Message<"google.cloud.secretmanager.v1beta2.Replication.UserManaged.Replica"> & {
  /**
   * The canonical IDs of the location to replicate data.
   * For example: `"us-east1"`.
   *
   * @generated from field: string location = 1;
   */
  location: string;

  /**
   * Optional. The customer-managed encryption configuration of the
   * [User-Managed Replica][Replication.UserManaged.Replica]. If no
   * configuration is provided, Google-managed default encryption is used.
   *
   * Updates to the [Secret][google.cloud.secretmanager.v1beta2.Secret]
   * encryption configuration only apply to
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion]
   * added afterwards. They do not apply retroactively to existing
   * [SecretVersions][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryption customer_managed_encryption = 2;
   */
  customerManagedEncryption?: CustomerManagedEncryption;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Replication.UserManaged.Replica.
 * Use `create(Replication_UserManaged_ReplicaSchema)` to create a new message.
 */
export const Replication_UserManaged_ReplicaSchema: GenMessage<Replication_UserManaged_Replica> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 2, 1, 0);

/**
 * Configuration for encrypting secret payloads using customer-managed
 * encryption keys (CMEK).
 *
 * @generated from message google.cloud.secretmanager.v1beta2.CustomerManagedEncryption
 */
export type CustomerManagedEncryption = Message<"google.cloud.secretmanager.v1beta2.CustomerManagedEncryption"> & {
  /**
   * Required. The resource name of the Cloud KMS CryptoKey used to encrypt
   * secret payloads.
   *
   * For secrets using the
   * [UserManaged][google.cloud.secretmanager.v1beta2.Replication.UserManaged]
   * replication policy type, Cloud KMS CryptoKeys must reside in the same
   * location as the [replica location][Secret.UserManaged.Replica.location].
   *
   * For secrets using the
   * [Automatic][google.cloud.secretmanager.v1beta2.Replication.Automatic]
   * replication policy type, Cloud KMS CryptoKeys must reside in `global`.
   *
   * The expected format is `projects/*\/locations/*\/keyRings/*\/cryptoKeys/*`.
   *
   * @generated from field: string kms_key_name = 1;
   */
  kmsKeyName: string;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.CustomerManagedEncryption.
 * Use `create(CustomerManagedEncryptionSchema)` to create a new message.
 */
export const CustomerManagedEncryptionSchema: GenMessage<CustomerManagedEncryption> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 3);

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
 *
 * @generated from message google.cloud.secretmanager.v1beta2.ReplicationStatus
 */
export type ReplicationStatus = Message<"google.cloud.secretmanager.v1beta2.ReplicationStatus"> & {
  /**
   * The replication status of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from oneof google.cloud.secretmanager.v1beta2.ReplicationStatus.replication_status
   */
  replicationStatus: {
    /**
     * Describes the replication status of a
     * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] with
     * automatic replication.
     *
     * Only populated if the parent
     * [Secret][google.cloud.secretmanager.v1beta2.Secret] has an automatic
     * replication policy.
     *
     * @generated from field: google.cloud.secretmanager.v1beta2.ReplicationStatus.AutomaticStatus automatic = 1;
     */
    value: ReplicationStatus_AutomaticStatus;
    case: "automatic";
  } | {
    /**
     * Describes the replication status of a
     * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] with
     * user-managed replication.
     *
     * Only populated if the parent
     * [Secret][google.cloud.secretmanager.v1beta2.Secret] has a user-managed
     * replication policy.
     *
     * @generated from field: google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus user_managed = 2;
     */
    value: ReplicationStatus_UserManagedStatus;
    case: "userManaged";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.ReplicationStatus.
 * Use `create(ReplicationStatusSchema)` to create a new message.
 */
export const ReplicationStatusSchema: GenMessage<ReplicationStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 4);

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] using
 * automatic replication.
 *
 * Only populated if the parent
 * [Secret][google.cloud.secretmanager.v1beta2.Secret] has an automatic
 * replication policy.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.ReplicationStatus.AutomaticStatus
 */
export type ReplicationStatus_AutomaticStatus = Message<"google.cloud.secretmanager.v1beta2.ReplicationStatus.AutomaticStatus"> & {
  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion]. Only
   * populated if customer-managed encryption is used.
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus customer_managed_encryption = 1;
   */
  customerManagedEncryption?: CustomerManagedEncryptionStatus;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.ReplicationStatus.AutomaticStatus.
 * Use `create(ReplicationStatus_AutomaticStatusSchema)` to create a new message.
 */
export const ReplicationStatus_AutomaticStatusSchema: GenMessage<ReplicationStatus_AutomaticStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 4, 0);

/**
 * The replication status of a
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion] using
 * user-managed replication.
 *
 * Only populated if the parent
 * [Secret][google.cloud.secretmanager.v1beta2.Secret] has a user-managed
 * replication policy.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus
 */
export type ReplicationStatus_UserManagedStatus = Message<"google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus"> & {
  /**
   * Output only. The list of replica statuses for the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
   *
   * @generated from field: repeated google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus.ReplicaStatus replicas = 1;
   */
  replicas: ReplicationStatus_UserManagedStatus_ReplicaStatus[];
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus.
 * Use `create(ReplicationStatus_UserManagedStatusSchema)` to create a new message.
 */
export const ReplicationStatus_UserManagedStatusSchema: GenMessage<ReplicationStatus_UserManagedStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 4, 1);

/**
 * Describes the status of a user-managed replica for the
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
 *
 * @generated from message google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus.ReplicaStatus
 */
export type ReplicationStatus_UserManagedStatus_ReplicaStatus = Message<"google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus.ReplicaStatus"> & {
  /**
   * Output only. The canonical ID of the replica location.
   * For example: `"us-east1"`.
   *
   * @generated from field: string location = 1;
   */
  location: string;

  /**
   * Output only. The customer-managed encryption status of the
   * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion]. Only
   * populated if customer-managed encryption is used.
   *
   * @generated from field: google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus customer_managed_encryption = 2;
   */
  customerManagedEncryption?: CustomerManagedEncryptionStatus;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.ReplicationStatus.UserManagedStatus.ReplicaStatus.
 * Use `create(ReplicationStatus_UserManagedStatus_ReplicaStatusSchema)` to create a new message.
 */
export const ReplicationStatus_UserManagedStatus_ReplicaStatusSchema: GenMessage<ReplicationStatus_UserManagedStatus_ReplicaStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 4, 1, 0);

/**
 * Describes the status of customer-managed encryption.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus
 */
export type CustomerManagedEncryptionStatus = Message<"google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus"> & {
  /**
   * Required. The resource name of the Cloud KMS CryptoKeyVersion used to
   * encrypt the secret payload, in the following format:
   * `projects/*\/locations/*\/keyRings/*\/cryptoKeys/*\/versions/*`.
   *
   * @generated from field: string kms_key_version_name = 1;
   */
  kmsKeyVersionName: string;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.CustomerManagedEncryptionStatus.
 * Use `create(CustomerManagedEncryptionStatusSchema)` to create a new message.
 */
export const CustomerManagedEncryptionStatusSchema: GenMessage<CustomerManagedEncryptionStatus> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 5);

/**
 * A Pub/Sub topic which Secret Manager will publish to when control plane
 * events occur on this secret.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Topic
 */
export type Topic = Message<"google.cloud.secretmanager.v1beta2.Topic"> & {
  /**
   * Required. The resource name of the Pub/Sub topic that will be published to,
   * in the following format: `projects/*\/topics/*`. For publication to succeed,
   * the Secret Manager service agent must have the `pubsub.topic.publish`
   * permission on the topic. The Pub/Sub Publisher role
   * (`roles/pubsub.publisher`) includes this permission.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Topic.
 * Use `create(TopicSchema)` to create a new message.
 */
export const TopicSchema: GenMessage<Topic> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 6);

/**
 * The rotation time and period for a
 * [Secret][google.cloud.secretmanager.v1beta2.Secret]. At next_rotation_time,
 * Secret Manager will send a Pub/Sub notification to the topics configured on
 * the Secret. [Secret.topics][google.cloud.secretmanager.v1beta2.Secret.topics]
 * must be set to configure rotation.
 *
 * @generated from message google.cloud.secretmanager.v1beta2.Rotation
 */
export type Rotation = Message<"google.cloud.secretmanager.v1beta2.Rotation"> & {
  /**
   * Optional. Timestamp in UTC at which the
   * [Secret][google.cloud.secretmanager.v1beta2.Secret] is scheduled to rotate.
   * Cannot be set to less than 300s (5 min) in the future and at most
   * 3153600000s (100 years).
   *
   * [next_rotation_time][google.cloud.secretmanager.v1beta2.Rotation.next_rotation_time]
   * MUST  be set if
   * [rotation_period][google.cloud.secretmanager.v1beta2.Rotation.rotation_period]
   * is set.
   *
   * @generated from field: google.protobuf.Timestamp next_rotation_time = 1;
   */
  nextRotationTime?: Timestamp;

  /**
   * Input only. The Duration between rotation notifications. Must be in seconds
   * and at least 3600s (1h) and at most 3153600000s (100 years).
   *
   * If
   * [rotation_period][google.cloud.secretmanager.v1beta2.Rotation.rotation_period]
   * is set,
   * [next_rotation_time][google.cloud.secretmanager.v1beta2.Rotation.next_rotation_time]
   * must be set.
   * [next_rotation_time][google.cloud.secretmanager.v1beta2.Rotation.next_rotation_time]
   * will be advanced by this period when the service automatically sends
   * rotation notifications.
   *
   * @generated from field: google.protobuf.Duration rotation_period = 2;
   */
  rotationPeriod?: Duration;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.Rotation.
 * Use `create(RotationSchema)` to create a new message.
 */
export const RotationSchema: GenMessage<Rotation> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 7);

/**
 * A secret payload resource in the Secret Manager API. This contains the
 * sensitive secret payload that is associated with a
 * [SecretVersion][google.cloud.secretmanager.v1beta2.SecretVersion].
 *
 * @generated from message google.cloud.secretmanager.v1beta2.SecretPayload
 */
export type SecretPayload = Message<"google.cloud.secretmanager.v1beta2.SecretPayload"> & {
  /**
   * The secret data. Must be no larger than 64KiB.
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;

  /**
   * Optional. If specified,
   * [SecretManagerService][google.cloud.secretmanager.v1beta2.SecretManagerService]
   * will verify the integrity of the received
   * [data][google.cloud.secretmanager.v1beta2.SecretPayload.data] on
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1beta2.SecretManagerService.AddSecretVersion]
   * calls using the crc32c checksum and store it to include in future
   * [SecretManagerService.AccessSecretVersion][google.cloud.secretmanager.v1beta2.SecretManagerService.AccessSecretVersion]
   * responses. If a checksum is not provided in the
   * [SecretManagerService.AddSecretVersion][google.cloud.secretmanager.v1beta2.SecretManagerService.AddSecretVersion]
   * request, the
   * [SecretManagerService][google.cloud.secretmanager.v1beta2.SecretManagerService]
   * will generate and store one for you.
   *
   * The CRC32C value is encoded as a Int64 for compatibility, and can be
   * safely downconverted to uint32 in languages that support this type.
   * https://cloud.google.com/apis/design/design_patterns#integer_types
   *
   * @generated from field: optional int64 data_crc32c = 2;
   */
  dataCrc32c?: bigint;
};

/**
 * Describes the message google.cloud.secretmanager.v1beta2.SecretPayload.
 * Use `create(SecretPayloadSchema)` to create a new message.
 */
export const SecretPayloadSchema: GenMessage<SecretPayload> = /*@__PURE__*/
  messageDesc(file_google_cloud_secretmanager_v1beta2_resources, 8);

