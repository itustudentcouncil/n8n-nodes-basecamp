// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/vmwareengine/v1/vmwareengine_resources.proto (package google.cloud.vmwareengine.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_field_info } from "../../../api/field_info_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/vmwareengine/v1/vmwareengine_resources.proto.
 */
export const file_google_cloud_vmwareengine_v1_vmwareengine_resources: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_field_behavior, file_google_api_field_info, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * Network configuration in the consumer project
 * with which the peering has to be done.
 *
 * @generated from message google.cloud.vmwareengine.v1.NetworkConfig
 */
export type NetworkConfig = Message<"google.cloud.vmwareengine.v1.NetworkConfig"> & {
  /**
   * Required. Management CIDR used by VMware management appliances.
   *
   * @generated from field: string management_cidr = 4;
   */
  managementCidr: string;

  /**
   * Optional. The relative resource name of the VMware Engine network attached
   * to the private cloud. Specify the name in the following form:
   * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   * where `{project}` can either be a project number or a project ID.
   *
   * @generated from field: string vmware_engine_network = 5;
   */
  vmwareEngineNetwork: string;

  /**
   * Output only. The canonical name of the VMware Engine network in the form:
   * `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   *
   * @generated from field: string vmware_engine_network_canonical = 6;
   */
  vmwareEngineNetworkCanonical: string;

  /**
   * Output only. The IP address layout version of the management IP address
   * range. Possible versions include:
   * * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address
   * layout used by some existing private clouds. This is no longer supported
   * for new private clouds as it does not support all features.
   * * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address
   * layout used by all newly created private clouds. This version supports all
   * current features.
   *
   * @generated from field: int32 management_ip_address_layout_version = 8;
   */
  managementIpAddressLayoutVersion: number;

  /**
   * Output only. DNS Server IP of the Private Cloud.
   * All DNS queries can be forwarded to this address for name resolution of
   * Private Cloud's management entities like vCenter, NSX-T Manager and
   * ESXi hosts.
   *
   * @generated from field: string dns_server_ip = 9;
   */
  dnsServerIp: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NetworkConfig.
 * Use `create(NetworkConfigSchema)` to create a new message.
 */
export const NetworkConfigSchema: GenMessage<NetworkConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 0);

/**
 * Information about the type and number of nodes associated with the cluster.
 *
 * @generated from message google.cloud.vmwareengine.v1.NodeTypeConfig
 */
export type NodeTypeConfig = Message<"google.cloud.vmwareengine.v1.NodeTypeConfig"> & {
  /**
   * Required. The number of nodes of this type in the cluster
   *
   * @generated from field: int32 node_count = 1;
   */
  nodeCount: number;

  /**
   * Optional. Customized number of cores available to each node of the type.
   * This number must always be one of `nodeType.availableCustomCoreCounts`.
   * If zero is provided max value from `nodeType.availableCustomCoreCounts`
   * will be used.
   *
   * @generated from field: int32 custom_core_count = 2;
   */
  customCoreCount: number;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NodeTypeConfig.
 * Use `create(NodeTypeConfigSchema)` to create a new message.
 */
export const NodeTypeConfigSchema: GenMessage<NodeTypeConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 1);

/**
 * Configuration of a stretched cluster.
 *
 * @generated from message google.cloud.vmwareengine.v1.StretchedClusterConfig
 */
export type StretchedClusterConfig = Message<"google.cloud.vmwareengine.v1.StretchedClusterConfig"> & {
  /**
   * Required. Zone that will remain operational when connection between the two
   * zones is lost. Specify the resource name of a zone that belongs to the
   * region of the private cloud. For example:
   * `projects/{project}/locations/europe-west3-a` where `{project}` can either
   * be a project number or a project ID.
   *
   * @generated from field: string preferred_location = 1;
   */
  preferredLocation: string;

  /**
   * Required. Additional zone for a higher level of availability and load
   * balancing. Specify the resource name of a zone that belongs to the region
   * of the private cloud. For example:
   * `projects/{project}/locations/europe-west3-b` where `{project}` can either
   * be a project number or a project ID.
   *
   * @generated from field: string secondary_location = 2;
   */
  secondaryLocation: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.StretchedClusterConfig.
 * Use `create(StretchedClusterConfigSchema)` to create a new message.
 */
export const StretchedClusterConfigSchema: GenMessage<StretchedClusterConfig> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 2);

/**
 * Represents a private cloud resource. Private clouds of type `STANDARD` and
 * `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are
 * regional.
 *
 * @generated from message google.cloud.vmwareengine.v1.PrivateCloud
 */
export type PrivateCloud = Message<"google.cloud.vmwareengine.v1.PrivateCloud"> & {
  /**
   * Output only. The resource name of this private cloud.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Output only. Time when the resource was scheduled for deletion.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 4;
   */
  deleteTime?: Timestamp;

  /**
   * Output only. Time when the resource will be irreversibly deleted.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * Output only. State of the resource. New values may be added to this enum
   * when appropriate.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateCloud.State state = 8;
   */
  state: PrivateCloud_State;

  /**
   * Required. Network configuration of the private cloud.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkConfig network_config = 9;
   */
  networkConfig?: NetworkConfig;

  /**
   * Required. Input only. The management cluster for this private cloud.
   * This field is required during creation of the private cloud to provide
   * details for the default cluster.
   *
   * The following fields can't be changed after private cloud creation:
   * `ManagementCluster.clusterId`, `ManagementCluster.nodeTypeId`.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateCloud.ManagementCluster management_cluster = 10;
   */
  managementCluster?: PrivateCloud_ManagementCluster;

  /**
   * User-provided description for this private cloud.
   *
   * @generated from field: string description = 11;
   */
  description: string;

  /**
   * Output only. HCX appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Hcx hcx = 17;
   */
  hcx?: Hcx;

  /**
   * Output only. NSX appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Nsx nsx = 18;
   */
  nsx?: Nsx;

  /**
   * Output only. Vcenter appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Vcenter vcenter = 19;
   */
  vcenter?: Vcenter;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 20;
   */
  uid: string;

  /**
   * Optional. Type of the private cloud. Defaults to STANDARD.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateCloud.Type type = 22;
   */
  type: PrivateCloud_Type;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.PrivateCloud.
 * Use `create(PrivateCloudSchema)` to create a new message.
 */
export const PrivateCloudSchema: GenMessage<PrivateCloud> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 3);

/**
 * Management cluster configuration.
 *
 * @generated from message google.cloud.vmwareengine.v1.PrivateCloud.ManagementCluster
 */
export type PrivateCloud_ManagementCluster = Message<"google.cloud.vmwareengine.v1.PrivateCloud.ManagementCluster"> & {
  /**
   * Required. The user-provided identifier of the new `Cluster`.
   * The identifier must meet the following requirements:
   *
   * * Only contains 1-63 alphanumeric characters and hyphens
   * * Begins with an alphabetical character
   * * Ends with a non-hyphen character
   * * Not formatted as a UUID
   * * Complies with [RFC
   * 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
   *
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * Required. The map of cluster node types in this cluster, where the key is
   * canonical identifier of the node type (corresponds to the `NodeType`).
   *
   * @generated from field: map<string, google.cloud.vmwareengine.v1.NodeTypeConfig> node_type_configs = 7;
   */
  nodeTypeConfigs: { [key: string]: NodeTypeConfig };

  /**
   * Optional. Configuration of a stretched cluster. Required for STRETCHED
   * private clouds.
   *
   * @generated from field: google.cloud.vmwareengine.v1.StretchedClusterConfig stretched_cluster_config = 8;
   */
  stretchedClusterConfig?: StretchedClusterConfig;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.PrivateCloud.ManagementCluster.
 * Use `create(PrivateCloud_ManagementClusterSchema)` to create a new message.
 */
export const PrivateCloud_ManagementClusterSchema: GenMessage<PrivateCloud_ManagementCluster> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 3, 0);

/**
 * Enum State defines possible states of private clouds.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateCloud.State
 */
export enum PrivateCloud_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The private cloud is ready.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The private cloud is being created.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The private cloud is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The private cloud is in failed state.
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * The private cloud is scheduled for deletion. The deletion process can be
   * cancelled by using the corresponding undelete method.
   *
   * @generated from enum value: DELETED = 6;
   */
  DELETED = 6,

  /**
   * The private cloud is irreversibly deleted and is being removed from the
   * system.
   *
   * @generated from enum value: PURGING = 7;
   */
  PURGING = 7,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateCloud.State.
 */
export const PrivateCloud_StateSchema: GenEnum<PrivateCloud_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 3, 0);

/**
 * Enum Type defines private cloud type.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateCloud.Type
 */
export enum PrivateCloud_Type {
  /**
   * Standard private is a zonal resource, with 3+ nodes. Default type.
   *
   * @generated from enum value: STANDARD = 0;
   */
  STANDARD = 0,

  /**
   * Time limited private cloud is a zonal resource, can have only 1 node and
   * has limited life span. Will be deleted after defined period of time,
   * can be converted into standard private cloud by expanding it up to 3
   * or more nodes.
   *
   * @generated from enum value: TIME_LIMITED = 1;
   */
  TIME_LIMITED = 1,

  /**
   * Stretched private cloud is a regional resource with redundancy,
   * with a minimum of 6 nodes, nodes count has to be even.
   *
   * @generated from enum value: STRETCHED = 2;
   */
  STRETCHED = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateCloud.Type.
 */
export const PrivateCloud_TypeSchema: GenEnum<PrivateCloud_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 3, 1);

/**
 * A cluster in a private cloud.
 *
 * @generated from message google.cloud.vmwareengine.v1.Cluster
 */
export type Cluster = Message<"google.cloud.vmwareengine.v1.Cluster"> & {
  /**
   * Output only. The resource name of this cluster.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Output only. State of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Cluster.State state = 6;
   */
  state: Cluster_State;

  /**
   * Output only. True if the cluster is a management cluster; false otherwise.
   * There can only be one management cluster in a private cloud
   * and it has to be the first one.
   *
   * @generated from field: bool management = 7;
   */
  management: boolean;

  /**
   * Optional. Configuration of the autoscaling applied to this cluster.
   *
   * @generated from field: google.cloud.vmwareengine.v1.AutoscalingSettings autoscaling_settings = 18;
   */
  autoscalingSettings?: AutoscalingSettings;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 14;
   */
  uid: string;

  /**
   * Required. The map of cluster node types in this cluster, where the key is
   * canonical identifier of the node type (corresponds to the `NodeType`).
   *
   * @generated from field: map<string, google.cloud.vmwareengine.v1.NodeTypeConfig> node_type_configs = 16;
   */
  nodeTypeConfigs: { [key: string]: NodeTypeConfig };

  /**
   * Optional. Configuration of a stretched cluster. Required for clusters that
   * belong to a STRETCHED private cloud.
   *
   * @generated from field: google.cloud.vmwareengine.v1.StretchedClusterConfig stretched_cluster_config = 17;
   */
  stretchedClusterConfig?: StretchedClusterConfig;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Cluster.
 * Use `create(ClusterSchema)` to create a new message.
 */
export const ClusterSchema: GenMessage<Cluster> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 4);

/**
 * Enum State defines possible states of private cloud clusters.
 *
 * @generated from enum google.cloud.vmwareengine.v1.Cluster.State
 */
export enum Cluster_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The Cluster is operational and can be used by the user.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The Cluster is being deployed.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * Adding or removing of a node to the cluster, any other cluster specific
   * updates.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The Cluster is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * The Cluster is undergoing maintenance, for example: a failed node is
   * getting replaced.
   *
   * @generated from enum value: REPAIRING = 5;
   */
  REPAIRING = 5,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Cluster.State.
 */
export const Cluster_StateSchema: GenEnum<Cluster_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 4, 0);

/**
 * Node in a cluster.
 *
 * @generated from message google.cloud.vmwareengine.v1.Node
 */
export type Node = Message<"google.cloud.vmwareengine.v1.Node"> & {
  /**
   * Output only. The resource name of this node.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * projects/my-project/locations/us-central1-a/privateClouds/my-cloud/clusters/my-cluster/nodes/my-node
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Fully qualified domain name of the node.
   *
   * @generated from field: string fqdn = 2;
   */
  fqdn: string;

  /**
   * Output only. Internal IP address of the node.
   *
   * @generated from field: string internal_ip = 3;
   */
  internalIp: string;

  /**
   * Output only. The canonical identifier of the node type (corresponds to the
   * `NodeType`).
   * For example: standard-72.
   *
   * @generated from field: string node_type_id = 4;
   */
  nodeTypeId: string;

  /**
   * Output only. The version number of the VMware ESXi
   * management component in this cluster.
   *
   * @generated from field: string version = 5;
   */
  version: string;

  /**
   * Output only. Customized number of cores
   *
   * @generated from field: int64 custom_core_count = 6;
   */
  customCoreCount: bigint;

  /**
   * Output only. The state of the appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Node.State state = 7;
   */
  state: Node_State;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Node.
 * Use `create(NodeSchema)` to create a new message.
 */
export const NodeSchema: GenMessage<Node> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 5);

/**
 * Enum State defines possible states of a node in a cluster.
 *
 * @generated from enum google.cloud.vmwareengine.v1.Node.State
 */
export enum Node_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Node is operational and can be used by the user.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Node is being provisioned.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * Node is in a failed state.
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,

  /**
   * Node is undergoing maintenance, e.g.: during private cloud upgrade.
   *
   * @generated from enum value: UPGRADING = 4;
   */
  UPGRADING = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Node.State.
 */
export const Node_StateSchema: GenEnum<Node_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 5, 0);

/**
 * Represents an allocated external IP address and its corresponding internal IP
 * address in a private cloud.
 *
 * @generated from message google.cloud.vmwareengine.v1.ExternalAddress
 */
export type ExternalAddress = Message<"google.cloud.vmwareengine.v1.ExternalAddress"> & {
  /**
   * Output only. The resource name of this external IP address.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * The internal IP address of a workload VM.
   *
   * @generated from field: string internal_ip = 6;
   */
  internalIp: string;

  /**
   * Output only. The external IP address of a workload VM.
   *
   * @generated from field: string external_ip = 7;
   */
  externalIp: string;

  /**
   * Output only. The state of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.ExternalAddress.State state = 8;
   */
  state: ExternalAddress_State;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 9;
   */
  uid: string;

  /**
   * User-provided description for this resource.
   *
   * @generated from field: string description = 11;
   */
  description: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.ExternalAddress.
 * Use `create(ExternalAddressSchema)` to create a new message.
 */
export const ExternalAddressSchema: GenMessage<ExternalAddress> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 6);

/**
 * Enum State defines possible states of external addresses.
 *
 * @generated from enum google.cloud.vmwareengine.v1.ExternalAddress.State
 */
export enum ExternalAddress_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The address is ready.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The address is being created.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The address is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The address is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.ExternalAddress.State.
 */
export const ExternalAddress_StateSchema: GenEnum<ExternalAddress_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 6, 0);

/**
 * Subnet in a private cloud. Either `management` subnets (such as vMotion) that
 * are read-only, or `userDefined`, which can also be updated.
 *
 * @generated from message google.cloud.vmwareengine.v1.Subnet
 */
export type Subnet = Message<"google.cloud.vmwareengine.v1.Subnet"> & {
  /**
   * Output only. The resource name of this subnet.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/subnets/my-subnet`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The IP address range of the subnet in CIDR format '10.0.0.0/24'.
   *
   * @generated from field: string ip_cidr_range = 7;
   */
  ipCidrRange: string;

  /**
   * The IP address of the gateway of this subnet.
   * Must fall within the IP prefix defined above.
   *
   * @generated from field: string gateway_ip = 8;
   */
  gatewayIp: string;

  /**
   * Output only. The type of the subnet. For example "management" or
   * "userDefined".
   *
   * @generated from field: string type = 11;
   */
  type: string;

  /**
   * Output only. The state of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Subnet.State state = 13;
   */
  state: Subnet_State;

  /**
   * Output only. VLAN ID of the VLAN on which the subnet is configured
   *
   * @generated from field: int32 vlan_id = 16;
   */
  vlanId: number;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Subnet.
 * Use `create(SubnetSchema)` to create a new message.
 */
export const SubnetSchema: GenMessage<Subnet> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 7);

/**
 * Defines possible states of subnets.
 *
 * @generated from enum google.cloud.vmwareengine.v1.Subnet.State
 */
export enum Subnet_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The subnet is ready.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The subnet is being created.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The subnet is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The subnet is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * Changes requested in the last operation are being propagated.
   *
   * @generated from enum value: RECONCILING = 5;
   */
  RECONCILING = 5,

  /**
   * Last operation on the subnet did not succeed. Subnet's payload is
   * reverted back to its most recent working state.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Subnet.State.
 */
export const Subnet_StateSchema: GenEnum<Subnet_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 7, 0);

/**
 * External access firewall rules for filtering incoming traffic destined to
 * `ExternalAddress` resources.
 *
 * @generated from message google.cloud.vmwareengine.v1.ExternalAccessRule
 */
export type ExternalAccessRule = Message<"google.cloud.vmwareengine.v1.ExternalAccessRule"> & {
  /**
   * Output only. The resource name of this external access rule.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * User-provided description for this external access rule.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * External access rule priority, which determines the external access rule to
   * use when multiple rules apply. If multiple rules have the same priority,
   * their ordering is non-deterministic. If specific ordering is required,
   * assign unique priorities to enforce such ordering. The external access rule
   * priority is an integer from 100 to 4096, both inclusive. Lower integers
   * indicate higher precedence. For example, a rule with priority `100` has
   * higher precedence than a rule with priority `101`.
   *
   * @generated from field: int32 priority = 6;
   */
  priority: number;

  /**
   * The action that the external access rule performs.
   *
   * @generated from field: google.cloud.vmwareengine.v1.ExternalAccessRule.Action action = 7;
   */
  action: ExternalAccessRule_Action;

  /**
   * The IP protocol to which the external access rule applies. This value can
   * be one of the following three protocol strings (not case-sensitive):
   * `tcp`, `udp`, or `icmp`.
   *
   * @generated from field: string ip_protocol = 8;
   */
  ipProtocol: string;

  /**
   * If source ranges are specified, the external access rule applies only to
   * traffic that has a source IP address in these ranges. These ranges can
   * either be expressed in the CIDR format or as an IP address. As only inbound
   * rules are supported, `ExternalAddress` resources cannot be the source IP
   * addresses of an external access rule. To match all source addresses,
   * specify `0.0.0.0/0`.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange source_ip_ranges = 9;
   */
  sourceIpRanges: ExternalAccessRule_IpRange[];

  /**
   * A list of source ports to which the external access rule applies. This
   * field is only applicable for the UDP or TCP protocol.
   * Each entry must be either an integer or a range. For example: `["22"]`,
   * `["80","443"]`, or `["12345-12349"]`. To match all source ports, specify
   * `["0-65535"]`.
   *
   * @generated from field: repeated string source_ports = 10;
   */
  sourcePorts: string[];

  /**
   * If destination ranges are specified, the external access rule applies only
   * to the traffic that has a destination IP address in these ranges. The
   * specified IP addresses must have reserved external IP addresses in the
   * scope of the parent network policy. To match all external IP addresses in
   * the scope of the parent network policy, specify `0.0.0.0/0`. To match a
   * specific external IP address, specify it using the
   * `IpRange.external_address` property.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange destination_ip_ranges = 11;
   */
  destinationIpRanges: ExternalAccessRule_IpRange[];

  /**
   * A list of destination ports to which the external access rule applies. This
   * field is only applicable for the UDP or TCP protocol.
   * Each entry must be either an integer or a range. For example: `["22"]`,
   * `["80","443"]`, or `["12345-12349"]`. To match all destination ports,
   * specify `["0-65535"]`.
   *
   * @generated from field: repeated string destination_ports = 12;
   */
  destinationPorts: string[];

  /**
   * Output only. The state of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.ExternalAccessRule.State state = 13;
   */
  state: ExternalAccessRule_State;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 14;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.ExternalAccessRule.
 * Use `create(ExternalAccessRuleSchema)` to create a new message.
 */
export const ExternalAccessRuleSchema: GenMessage<ExternalAccessRule> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 8);

/**
 * An IP range provided in any one of the supported formats.
 *
 * @generated from message google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange
 */
export type ExternalAccessRule_IpRange = Message<"google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange"> & {
  /**
   * @generated from oneof google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange.ip_range
   */
  ipRange: {
    /**
     * A single IP address. For example: `10.0.0.5`.
     *
     * @generated from field: string ip_address = 1;
     */
    value: string;
    case: "ipAddress";
  } | {
    /**
     * An IP address range in the CIDR format. For example: `10.0.0.0/24`.
     *
     * @generated from field: string ip_address_range = 2;
     */
    value: string;
    case: "ipAddressRange";
  } | {
    /**
     * The name of an `ExternalAddress` resource. The external address must
     * have been reserved in the scope of this external access rule's parent
     * network policy.  Provide the external address name in the form of
     * `projects/{project}/locations/{location}/privateClouds/{private_cloud}/externalAddresses/{external_address}`.
     * For example:
     * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/externalAddresses/my-address`.
     *
     * @generated from field: string external_address = 3;
     */
    value: string;
    case: "externalAddress";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.vmwareengine.v1.ExternalAccessRule.IpRange.
 * Use `create(ExternalAccessRule_IpRangeSchema)` to create a new message.
 */
export const ExternalAccessRule_IpRangeSchema: GenMessage<ExternalAccessRule_IpRange> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 8, 0);

/**
 * Action determines whether the external access rule permits or blocks
 * traffic, subject to the other components of the rule matching the traffic.
 *
 * @generated from enum google.cloud.vmwareengine.v1.ExternalAccessRule.Action
 */
export enum ExternalAccessRule_Action {
  /**
   * Defaults to allow.
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  ACTION_UNSPECIFIED = 0,

  /**
   * Allows connections that match the other specified components.
   *
   * @generated from enum value: ALLOW = 1;
   */
  ALLOW = 1,

  /**
   * Blocks connections that match the other specified components.
   *
   * @generated from enum value: DENY = 2;
   */
  DENY = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.ExternalAccessRule.Action.
 */
export const ExternalAccessRule_ActionSchema: GenEnum<ExternalAccessRule_Action> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 8, 0);

/**
 * Defines possible states of external access firewall rules.
 *
 * @generated from enum google.cloud.vmwareengine.v1.ExternalAccessRule.State
 */
export enum ExternalAccessRule_State {
  /**
   * The default value. This value is used if the state is omitted.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The rule is ready.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The rule is being created.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The rule is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The rule is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.ExternalAccessRule.State.
 */
export const ExternalAccessRule_StateSchema: GenEnum<ExternalAccessRule_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 8, 1);

/**
 * Logging server to receive vCenter or ESXi logs.
 *
 * @generated from message google.cloud.vmwareengine.v1.LoggingServer
 */
export type LoggingServer = Message<"google.cloud.vmwareengine.v1.LoggingServer"> & {
  /**
   * Output only. The resource name of this logging server.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/loggingServers/my-logging-server`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Required. Fully-qualified domain name (FQDN) or IP Address of the logging
   * server.
   *
   * @generated from field: string hostname = 5;
   */
  hostname: string;

  /**
   * Required. Port number at which the logging server receives logs.
   *
   * @generated from field: int32 port = 7;
   */
  port: number;

  /**
   * Required. Protocol used by vCenter to send logs to a logging server.
   *
   * @generated from field: google.cloud.vmwareengine.v1.LoggingServer.Protocol protocol = 6;
   */
  protocol: LoggingServer_Protocol;

  /**
   * Required. The type of component that produces logs that will be forwarded
   * to this logging server.
   *
   * @generated from field: google.cloud.vmwareengine.v1.LoggingServer.SourceType source_type = 10;
   */
  sourceType: LoggingServer_SourceType;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 8;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.LoggingServer.
 * Use `create(LoggingServerSchema)` to create a new message.
 */
export const LoggingServerSchema: GenMessage<LoggingServer> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 9);

/**
 * Defines possible protocols used to send logs to
 * a logging server.
 *
 * @generated from enum google.cloud.vmwareengine.v1.LoggingServer.Protocol
 */
export enum LoggingServer_Protocol {
  /**
   * Unspecified communications protocol. This is the default value.
   *
   * @generated from enum value: PROTOCOL_UNSPECIFIED = 0;
   */
  PROTOCOL_UNSPECIFIED = 0,

  /**
   * UDP
   *
   * @generated from enum value: UDP = 1;
   */
  UDP = 1,

  /**
   * TCP
   *
   * @generated from enum value: TCP = 2;
   */
  TCP = 2,

  /**
   * TLS
   *
   * @generated from enum value: TLS = 3;
   */
  TLS = 3,

  /**
   * SSL
   *
   * @generated from enum value: SSL = 4;
   */
  SSL = 4,

  /**
   * RELP
   *
   * @generated from enum value: RELP = 5;
   */
  RELP = 5,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.LoggingServer.Protocol.
 */
export const LoggingServer_ProtocolSchema: GenEnum<LoggingServer_Protocol> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 9, 0);

/**
 * Defines possible types of component that produces logs.
 *
 * @generated from enum google.cloud.vmwareengine.v1.LoggingServer.SourceType
 */
export enum LoggingServer_SourceType {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: SOURCE_TYPE_UNSPECIFIED = 0;
   */
  SOURCE_TYPE_UNSPECIFIED = 0,

  /**
   * Logs produced by ESXI hosts
   *
   * @generated from enum value: ESXI = 1;
   */
  ESXI = 1,

  /**
   * Logs produced by vCenter server
   *
   * @generated from enum value: VCSA = 2;
   */
  VCSA = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.LoggingServer.SourceType.
 */
export const LoggingServer_SourceTypeSchema: GenEnum<LoggingServer_SourceType> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 9, 1);

/**
 * Describes node type.
 *
 * @generated from message google.cloud.vmwareengine.v1.NodeType
 */
export type NodeType = Message<"google.cloud.vmwareengine.v1.NodeType"> & {
  /**
   * Output only. The resource name of this node type.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The canonical identifier of the node type
   * (corresponds to the `NodeType`). For example: standard-72.
   *
   * @generated from field: string node_type_id = 2;
   */
  nodeTypeId: string;

  /**
   * Output only. The friendly name for this node type.
   * For example: ve1-standard-72
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Output only. The total number of virtual CPUs in a single node.
   *
   * @generated from field: int32 virtual_cpu_count = 4;
   */
  virtualCpuCount: number;

  /**
   * Output only. The total number of CPU cores in a single node.
   *
   * @generated from field: int32 total_core_count = 5;
   */
  totalCoreCount: number;

  /**
   * Output only. The amount of physical memory available, defined in GB.
   *
   * @generated from field: int32 memory_gb = 7;
   */
  memoryGb: number;

  /**
   * Output only. The amount of storage available, defined in GB.
   *
   * @generated from field: int32 disk_size_gb = 8;
   */
  diskSizeGb: number;

  /**
   * Output only. List of possible values of custom core count.
   *
   * @generated from field: repeated int32 available_custom_core_counts = 11;
   */
  availableCustomCoreCounts: number[];

  /**
   * Output only. The type of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NodeType.Kind kind = 12;
   */
  kind: NodeType_Kind;

  /**
   * Output only. Families of the node type.
   * For node types to be in the same cluster
   * they must share at least one element in the `families`.
   *
   * @generated from field: repeated string families = 13;
   */
  families: string[];

  /**
   * Output only. Capabilities of this node type.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.NodeType.Capability capabilities = 14;
   */
  capabilities: NodeType_Capability[];
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NodeType.
 * Use `create(NodeTypeSchema)` to create a new message.
 */
export const NodeTypeSchema: GenMessage<NodeType> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 10);

/**
 * Enum Kind defines possible types of a NodeType.
 *
 * @generated from enum google.cloud.vmwareengine.v1.NodeType.Kind
 */
export enum NodeType_Kind {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * Standard HCI node.
   *
   * @generated from enum value: STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * Storage only Node.
   *
   * @generated from enum value: STORAGE_ONLY = 2;
   */
  STORAGE_ONLY = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.NodeType.Kind.
 */
export const NodeType_KindSchema: GenEnum<NodeType_Kind> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 10, 0);

/**
 * Capability of a node type.
 *
 * @generated from enum google.cloud.vmwareengine.v1.NodeType.Capability
 */
export enum NodeType_Capability {
  /**
   * The default value. This value is used if the capability is omitted or
   * unknown.
   *
   * @generated from enum value: CAPABILITY_UNSPECIFIED = 0;
   */
  CAPABILITY_UNSPECIFIED = 0,

  /**
   * This node type supports stretch clusters.
   *
   * @generated from enum value: STRETCHED_CLUSTERS = 1;
   */
  STRETCHED_CLUSTERS = 1,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.NodeType.Capability.
 */
export const NodeType_CapabilitySchema: GenEnum<NodeType_Capability> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 10, 1);

/**
 * Credentials for a private cloud.
 *
 * @generated from message google.cloud.vmwareengine.v1.Credentials
 */
export type Credentials = Message<"google.cloud.vmwareengine.v1.Credentials"> & {
  /**
   * Initial username.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Initial password.
   *
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Credentials.
 * Use `create(CredentialsSchema)` to create a new message.
 */
export const CredentialsSchema: GenMessage<Credentials> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 11);

/**
 * HCX activation key. A default key is created during
 * private cloud provisioning, but this behavior is subject to change
 * and you should always verify active keys.
 * Use
 * [VmwareEngine.ListHcxActivationKeys][google.cloud.vmwareengine.v1.VmwareEngine.ListHcxActivationKeys]
 * to retrieve existing keys and
 * [VmwareEngine.CreateHcxActivationKey][google.cloud.vmwareengine.v1.VmwareEngine.CreateHcxActivationKey]
 * to create new ones.
 *
 * @generated from message google.cloud.vmwareengine.v1.HcxActivationKey
 */
export type HcxActivationKey = Message<"google.cloud.vmwareengine.v1.HcxActivationKey"> & {
  /**
   * Output only. The resource name of this HcxActivationKey.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1/privateClouds/my-cloud/hcxActivationKeys/my-key`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of HCX activation key.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. State of HCX activation key.
   *
   * @generated from field: google.cloud.vmwareengine.v1.HcxActivationKey.State state = 3;
   */
  state: HcxActivationKey_State;

  /**
   * Output only. HCX activation key.
   *
   * @generated from field: string activation_key = 4;
   */
  activationKey: string;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 5;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.HcxActivationKey.
 * Use `create(HcxActivationKeySchema)` to create a new message.
 */
export const HcxActivationKeySchema: GenMessage<HcxActivationKey> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 12);

/**
 * State of HCX activation key
 *
 * @generated from enum google.cloud.vmwareengine.v1.HcxActivationKey.State
 */
export enum HcxActivationKey_State {
  /**
   * Unspecified state.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * State of a newly generated activation key.
   *
   * @generated from enum value: AVAILABLE = 1;
   */
  AVAILABLE = 1,

  /**
   * State of key when it has been used to activate HCX appliance.
   *
   * @generated from enum value: CONSUMED = 2;
   */
  CONSUMED = 2,

  /**
   * State of key when it is being created.
   *
   * @generated from enum value: CREATING = 3;
   */
  CREATING = 3,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.HcxActivationKey.State.
 */
export const HcxActivationKey_StateSchema: GenEnum<HcxActivationKey_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 12, 0);

/**
 * Details about a HCX Cloud Manager appliance.
 *
 * @generated from message google.cloud.vmwareengine.v1.Hcx
 */
export type Hcx = Message<"google.cloud.vmwareengine.v1.Hcx"> & {
  /**
   * Internal IP address of the appliance.
   *
   * @generated from field: string internal_ip = 2;
   */
  internalIp: string;

  /**
   * Version of the appliance.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * Output only. The state of the appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Hcx.State state = 5;
   */
  state: Hcx_State;

  /**
   * Fully qualified domain name of the appliance.
   *
   * @generated from field: string fqdn = 6;
   */
  fqdn: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Hcx.
 * Use `create(HcxSchema)` to create a new message.
 */
export const HcxSchema: GenMessage<Hcx> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 13);

/**
 * State of the appliance
 *
 * @generated from enum google.cloud.vmwareengine.v1.Hcx.State
 */
export enum Hcx_State {
  /**
   * Unspecified appliance state. This is the default value.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The appliance is operational and can be used.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The appliance is being deployed.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The appliance is being activated.
   *
   * @generated from enum value: ACTIVATING = 3;
   */
  ACTIVATING = 3,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Hcx.State.
 */
export const Hcx_StateSchema: GenEnum<Hcx_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 13, 0);

/**
 * Details about a NSX Manager appliance.
 *
 * @generated from message google.cloud.vmwareengine.v1.Nsx
 */
export type Nsx = Message<"google.cloud.vmwareengine.v1.Nsx"> & {
  /**
   * Internal IP address of the appliance.
   *
   * @generated from field: string internal_ip = 2;
   */
  internalIp: string;

  /**
   * Version of the appliance.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * Output only. The state of the appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Nsx.State state = 5;
   */
  state: Nsx_State;

  /**
   * Fully qualified domain name of the appliance.
   *
   * @generated from field: string fqdn = 6;
   */
  fqdn: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Nsx.
 * Use `create(NsxSchema)` to create a new message.
 */
export const NsxSchema: GenMessage<Nsx> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 14);

/**
 * State of the appliance
 *
 * @generated from enum google.cloud.vmwareengine.v1.Nsx.State
 */
export enum Nsx_State {
  /**
   * Unspecified appliance state. This is the default value.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The appliance is operational and can be used.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The appliance is being deployed.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Nsx.State.
 */
export const Nsx_StateSchema: GenEnum<Nsx_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 14, 0);

/**
 * Details about a vCenter Server management appliance.
 *
 * @generated from message google.cloud.vmwareengine.v1.Vcenter
 */
export type Vcenter = Message<"google.cloud.vmwareengine.v1.Vcenter"> & {
  /**
   * Internal IP address of the appliance.
   *
   * @generated from field: string internal_ip = 2;
   */
  internalIp: string;

  /**
   * Version of the appliance.
   *
   * @generated from field: string version = 4;
   */
  version: string;

  /**
   * Output only. The state of the appliance.
   *
   * @generated from field: google.cloud.vmwareengine.v1.Vcenter.State state = 5;
   */
  state: Vcenter_State;

  /**
   * Fully qualified domain name of the appliance.
   *
   * @generated from field: string fqdn = 6;
   */
  fqdn: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Vcenter.
 * Use `create(VcenterSchema)` to create a new message.
 */
export const VcenterSchema: GenMessage<Vcenter> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 15);

/**
 * State of the appliance
 *
 * @generated from enum google.cloud.vmwareengine.v1.Vcenter.State
 */
export enum Vcenter_State {
  /**
   * Unspecified appliance state. This is the default value.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The appliance is operational and can be used.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The appliance is being deployed.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.Vcenter.State.
 */
export const Vcenter_StateSchema: GenEnum<Vcenter_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 15, 0);

/**
 * Autoscaling settings define the rules used by VMware Engine to
 * automatically scale-out and scale-in the clusters in a private cloud.
 *
 * @generated from message google.cloud.vmwareengine.v1.AutoscalingSettings
 */
export type AutoscalingSettings = Message<"google.cloud.vmwareengine.v1.AutoscalingSettings"> & {
  /**
   * Required. The map with autoscaling policies applied to the cluster.
   * The key is the identifier of the policy.
   * It must meet the following requirements:
   *
   * * Only contains 1-63 alphanumeric characters and hyphens
   * * Begins with an alphabetical character
   * * Ends with a non-hyphen character
   * * Not formatted as a UUID
   * * Complies with [RFC
   * 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)
   *
   * Currently there map must contain only one element
   * that describes the autoscaling policy for compute nodes.
   *
   * @generated from field: map<string, google.cloud.vmwareengine.v1.AutoscalingSettings.AutoscalingPolicy> autoscaling_policies = 1;
   */
  autoscalingPolicies: { [key: string]: AutoscalingSettings_AutoscalingPolicy };

  /**
   * Optional. Minimum number of nodes of any type in a cluster.
   * If not specified the default limits apply.
   *
   * @generated from field: int32 min_cluster_node_count = 2;
   */
  minClusterNodeCount: number;

  /**
   * Optional. Maximum number of nodes of any type in a cluster.
   * If not specified the default limits apply.
   *
   * @generated from field: int32 max_cluster_node_count = 3;
   */
  maxClusterNodeCount: number;

  /**
   * Optional. The minimum duration between consecutive autoscale operations.
   * It starts once addition or removal of nodes is fully completed.
   * Defaults to 30 minutes if not specified. Cool down period must be in whole
   * minutes (for example, 30, 31, 50, 180 minutes).
   *
   * @generated from field: google.protobuf.Duration cool_down_period = 4;
   */
  coolDownPeriod?: Duration;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.AutoscalingSettings.
 * Use `create(AutoscalingSettingsSchema)` to create a new message.
 */
export const AutoscalingSettingsSchema: GenMessage<AutoscalingSettings> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 16);

/**
 * Thresholds define the utilization of resources triggering
 * scale-out and scale-in operations.
 *
 * @generated from message google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds
 */
export type AutoscalingSettings_Thresholds = Message<"google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds"> & {
  /**
   * Required. The utilization triggering the scale-out operation in percent.
   *
   * @generated from field: int32 scale_out = 1;
   */
  scaleOut: number;

  /**
   * Required. The utilization triggering the scale-in operation in percent.
   *
   * @generated from field: int32 scale_in = 2;
   */
  scaleIn: number;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds.
 * Use `create(AutoscalingSettings_ThresholdsSchema)` to create a new message.
 */
export const AutoscalingSettings_ThresholdsSchema: GenMessage<AutoscalingSettings_Thresholds> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 16, 0);

/**
 * Autoscaling policy describes the behavior of the autoscaling
 * with respect to the resource utilization.
 * The scale-out operation is initiated if the utilization
 * exceeds ANY of the respective thresholds.
 * The scale-in operation is initiated if the utilization
 * is below ALL of the respective thresholds.
 *
 * @generated from message google.cloud.vmwareengine.v1.AutoscalingSettings.AutoscalingPolicy
 */
export type AutoscalingSettings_AutoscalingPolicy = Message<"google.cloud.vmwareengine.v1.AutoscalingSettings.AutoscalingPolicy"> & {
  /**
   * Required. The canonical identifier of the node type to add or remove.
   * Corresponds to the `NodeType`.
   *
   * @generated from field: string node_type_id = 1;
   */
  nodeTypeId: string;

  /**
   * Required. Number of nodes to add to a cluster during a scale-out
   * operation. Must be divisible by 2 for stretched clusters. During a
   * scale-in operation only one node (or 2 for stretched clusters) are
   * removed in a single iteration.
   *
   * @generated from field: int32 scale_out_size = 2;
   */
  scaleOutSize: number;

  /**
   * Optional. Utilization thresholds pertaining to CPU utilization.
   *
   * @generated from field: google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds cpu_thresholds = 11;
   */
  cpuThresholds?: AutoscalingSettings_Thresholds;

  /**
   * Optional. Utilization thresholds pertaining to amount of granted memory.
   *
   * @generated from field: google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds granted_memory_thresholds = 12;
   */
  grantedMemoryThresholds?: AutoscalingSettings_Thresholds;

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed memory.
   *
   * @generated from field: google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds consumed_memory_thresholds = 13;
   */
  consumedMemoryThresholds?: AutoscalingSettings_Thresholds;

  /**
   * Optional. Utilization thresholds pertaining to amount of consumed
   * storage.
   *
   * @generated from field: google.cloud.vmwareengine.v1.AutoscalingSettings.Thresholds storage_thresholds = 14;
   */
  storageThresholds?: AutoscalingSettings_Thresholds;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.AutoscalingSettings.AutoscalingPolicy.
 * Use `create(AutoscalingSettings_AutoscalingPolicySchema)` to create a new message.
 */
export const AutoscalingSettings_AutoscalingPolicySchema: GenMessage<AutoscalingSettings_AutoscalingPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 16, 1);

/**
 * DNS forwarding config.
 * This config defines a list of domain to name server mappings,
 * and is attached to the private cloud for custom domain resolution.
 *
 * @generated from message google.cloud.vmwareengine.v1.DnsForwarding
 */
export type DnsForwarding = Message<"google.cloud.vmwareengine.v1.DnsForwarding"> & {
  /**
   * Output only. The resource name of this DNS profile.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/dnsForwarding`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Required. List of domain mappings to configure
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.DnsForwarding.ForwardingRule forwarding_rules = 4;
   */
  forwardingRules: DnsForwarding_ForwardingRule[];
};

/**
 * Describes the message google.cloud.vmwareengine.v1.DnsForwarding.
 * Use `create(DnsForwardingSchema)` to create a new message.
 */
export const DnsForwardingSchema: GenMessage<DnsForwarding> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 17);

/**
 * A forwarding rule is a mapping of a `domain` to `name_servers`.
 * This mapping allows VMware Engine to resolve domains for attached private
 * clouds by forwarding DNS requests for a given domain to the specified
 * nameservers.
 *
 * @generated from message google.cloud.vmwareengine.v1.DnsForwarding.ForwardingRule
 */
export type DnsForwarding_ForwardingRule = Message<"google.cloud.vmwareengine.v1.DnsForwarding.ForwardingRule"> & {
  /**
   * Required. Domain used to resolve a `name_servers` list.
   *
   * @generated from field: string domain = 1;
   */
  domain: string;

  /**
   * Required. List of DNS servers to use for domain resolution
   *
   * @generated from field: repeated string name_servers = 2;
   */
  nameServers: string[];
};

/**
 * Describes the message google.cloud.vmwareengine.v1.DnsForwarding.ForwardingRule.
 * Use `create(DnsForwarding_ForwardingRuleSchema)` to create a new message.
 */
export const DnsForwarding_ForwardingRuleSchema: GenMessage<DnsForwarding_ForwardingRule> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 17, 0);

/**
 * Details of a network peering.
 *
 * @generated from message google.cloud.vmwareengine.v1.NetworkPeering
 */
export type NetworkPeering = Message<"google.cloud.vmwareengine.v1.NetworkPeering"> & {
  /**
   * Output only. The resource name of the network peering. NetworkPeering is a
   * global resource and location can only be global. Resource names are
   * scheme-less URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/global/networkPeerings/my-peering`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Required. The relative resource name of the network to peer with
   * a standard VMware Engine network. The provided network can be a
   * consumer VPC network or another standard VMware Engine network. If the
   * `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form:
   * `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
   * Otherwise specify the name in the form:
   * `projects/{project}/global/networks/{network_id}`, where
   * `{project}` can either be a project number or a project ID.
   *
   * @generated from field: string peer_network = 5;
   */
  peerNetwork: string;

  /**
   * Optional. True if custom routes are exported to the peered network;
   * false otherwise. The default value is true.
   *
   * @generated from field: optional bool export_custom_routes = 8;
   */
  exportCustomRoutes?: boolean;

  /**
   * Optional. True if custom routes are imported from the peered network;
   * false otherwise. The default value is true.
   *
   * @generated from field: optional bool import_custom_routes = 9;
   */
  importCustomRoutes?: boolean;

  /**
   * Optional. True if full mesh connectivity is created and managed
   * automatically between peered networks; false otherwise. Currently this
   * field is always true because Google Compute Engine automatically creates
   * and manages subnetwork routes between two VPC networks when peering state
   * is 'ACTIVE'.
   *
   * @generated from field: optional bool exchange_subnet_routes = 10;
   */
  exchangeSubnetRoutes?: boolean;

  /**
   * Optional. True if all subnet routes with a public IP address range are
   * exported; false otherwise. The default value is true. IPv4 special-use
   * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
   * exported to peers and are not controlled by this field.
   *
   * @generated from field: optional bool export_custom_routes_with_public_ip = 11;
   */
  exportCustomRoutesWithPublicIp?: boolean;

  /**
   * Optional. True if all subnet routes with public IP address range are
   * imported; false otherwise. The default value is true. IPv4 special-use
   * ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always
   * imported to peers and are not controlled by this field.
   *
   * @generated from field: optional bool import_custom_routes_with_public_ip = 12;
   */
  importCustomRoutesWithPublicIp?: boolean;

  /**
   * Output only. State of the network peering. This field
   * has a value of 'ACTIVE' when there's a matching configuration in the peer
   * network. New values may be added to this enum when appropriate.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkPeering.State state = 13;
   */
  state: NetworkPeering_State;

  /**
   * Output only. Output Only. Details about the current state of the network
   * peering.
   *
   * @generated from field: string state_details = 7;
   */
  stateDetails: string;

  /**
   * Optional. Maximum transmission unit (MTU) in bytes.
   * The default value is `1500`. If a value of `0` is provided for this field,
   * VMware Engine uses the default value instead.
   *
   * @generated from field: int32 peer_mtu = 14;
   */
  peerMtu: number;

  /**
   * Required. The type of the network to peer with the VMware Engine network.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType peer_network_type = 16;
   */
  peerNetworkType: NetworkPeering_PeerNetworkType;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 17;
   */
  uid: string;

  /**
   * Required. The relative resource name of the VMware Engine network.
   * Specify the name in the following form:
   * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   * where `{project}` can either be a project number or a project ID.
   *
   * @generated from field: string vmware_engine_network = 20;
   */
  vmwareEngineNetwork: string;

  /**
   * Optional. User-provided description for this network peering.
   *
   * @generated from field: string description = 21;
   */
  description: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NetworkPeering.
 * Use `create(NetworkPeeringSchema)` to create a new message.
 */
export const NetworkPeeringSchema: GenMessage<NetworkPeering> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 18);

/**
 * Possible states of a network peering.
 *
 * @generated from enum google.cloud.vmwareengine.v1.NetworkPeering.State
 */
export enum NetworkPeering_State {
  /**
   * Unspecified network peering state. This is the default value.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The peering is not active.
   *
   * @generated from enum value: INACTIVE = 1;
   */
  INACTIVE = 1,

  /**
   * The peering is active.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The peering is being created.
   *
   * @generated from enum value: CREATING = 3;
   */
  CREATING = 3,

  /**
   * The peering is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.NetworkPeering.State.
 */
export const NetworkPeering_StateSchema: GenEnum<NetworkPeering_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 18, 0);

/**
 * Type or purpose of the network peering connection.
 *
 * @generated from enum google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType
 */
export enum NetworkPeering_PeerNetworkType {
  /**
   * Unspecified
   *
   * @generated from enum value: PEER_NETWORK_TYPE_UNSPECIFIED = 0;
   */
  PEER_NETWORK_TYPE_UNSPECIFIED = 0,

  /**
   * Peering connection used for connecting to another VPC network established
   * by the same user. For example, a peering connection to another VPC
   * network in the same project or to an on-premises network.
   *
   * @generated from enum value: STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * Peering connection used for connecting to another VMware Engine network.
   *
   * @generated from enum value: VMWARE_ENGINE_NETWORK = 2;
   */
  VMWARE_ENGINE_NETWORK = 2,

  /**
   * Peering connection used for establishing [private services
   * access](https://cloud.google.com/vpc/docs/private-services-access).
   *
   * @generated from enum value: PRIVATE_SERVICES_ACCESS = 3;
   */
  PRIVATE_SERVICES_ACCESS = 3,

  /**
   * Peering connection used for connecting to NetApp Cloud Volumes.
   *
   * @generated from enum value: NETAPP_CLOUD_VOLUMES = 4;
   */
  NETAPP_CLOUD_VOLUMES = 4,

  /**
   * Peering connection used for connecting to third-party services. Most
   * third-party services require manual setup of reverse peering on the VPC
   * network associated with the third-party service.
   *
   * @generated from enum value: THIRD_PARTY_SERVICE = 5;
   */
  THIRD_PARTY_SERVICE = 5,

  /**
   * Peering connection used for connecting to Dell PowerScale Filers
   *
   * @generated from enum value: DELL_POWERSCALE = 6;
   */
  DELL_POWERSCALE = 6,

  /**
   * Peering connection used for connecting to Google Cloud NetApp Volumes.
   *
   * @generated from enum value: GOOGLE_CLOUD_NETAPP_VOLUMES = 7;
   */
  GOOGLE_CLOUD_NETAPP_VOLUMES = 7,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.NetworkPeering.PeerNetworkType.
 */
export const NetworkPeering_PeerNetworkTypeSchema: GenEnum<NetworkPeering_PeerNetworkType> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 18, 1);

/**
 * Exchanged network peering route.
 *
 * @generated from message google.cloud.vmwareengine.v1.PeeringRoute
 */
export type PeeringRoute = Message<"google.cloud.vmwareengine.v1.PeeringRoute"> & {
  /**
   * Output only. Destination range of the peering route in CIDR notation.
   *
   * @generated from field: string dest_range = 1;
   */
  destRange: string;

  /**
   * Output only. Type of the route in the peer VPC network.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PeeringRoute.Type type = 2;
   */
  type: PeeringRoute_Type;

  /**
   * Output only. Region containing the next hop of the peering route. This
   * field only applies to dynamic routes in the peer VPC network.
   *
   * @generated from field: string next_hop_region = 3;
   */
  nextHopRegion: string;

  /**
   * Output only. The priority of the peering route.
   *
   * @generated from field: int64 priority = 4;
   */
  priority: bigint;

  /**
   * Output only. True if the peering route has been imported from a peered
   * VPC network; false otherwise. The import happens if the field
   * `NetworkPeering.importCustomRoutes` is true for this network,
   * `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and
   * the import does not result in a route conflict.
   *
   * @generated from field: bool imported = 5;
   */
  imported: boolean;

  /**
   * Output only. Direction of the routes exchanged with the peer network, from
   * the VMware Engine network perspective:
   *
   * * Routes of direction `INCOMING` are imported from the peer network.
   * * Routes of direction `OUTGOING` are exported from the intranet VPC network
   * of the VMware Engine network.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PeeringRoute.Direction direction = 6;
   */
  direction: PeeringRoute_Direction;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.PeeringRoute.
 * Use `create(PeeringRouteSchema)` to create a new message.
 */
export const PeeringRouteSchema: GenMessage<PeeringRoute> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 19);

/**
 * The type of the peering route.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PeeringRoute.Type
 */
export enum PeeringRoute_Type {
  /**
   * Unspecified peering route type. This is the default value.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Dynamic routes in the peer network.
   *
   * @generated from enum value: DYNAMIC_PEERING_ROUTE = 1;
   */
  DYNAMIC_PEERING_ROUTE = 1,

  /**
   * Static routes in the peer network.
   *
   * @generated from enum value: STATIC_PEERING_ROUTE = 2;
   */
  STATIC_PEERING_ROUTE = 2,

  /**
   * Created, updated, and removed automatically by Google Cloud when subnets
   * are created, modified, or deleted in the peer network.
   *
   * @generated from enum value: SUBNET_PEERING_ROUTE = 3;
   */
  SUBNET_PEERING_ROUTE = 3,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PeeringRoute.Type.
 */
export const PeeringRoute_TypeSchema: GenEnum<PeeringRoute_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 19, 0);

/**
 * The direction of the exchanged routes.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PeeringRoute.Direction
 */
export enum PeeringRoute_Direction {
  /**
   * Unspecified exchanged routes direction. This is default.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Routes imported from the peer network.
   *
   * @generated from enum value: INCOMING = 1;
   */
  INCOMING = 1,

  /**
   * Routes exported to the peer network.
   *
   * @generated from enum value: OUTGOING = 2;
   */
  OUTGOING = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PeeringRoute.Direction.
 */
export const PeeringRoute_DirectionSchema: GenEnum<PeeringRoute_Direction> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 19, 1);

/**
 * Represents a network policy resource. Network policies are regional
 * resources. You can use a network policy to enable or disable internet access
 * and external IP access. Network policies are associated with a VMware Engine
 * network, which might span across regions. For a given region, a network
 * policy applies to all private clouds in the VMware Engine network associated
 * with the policy.
 *
 * @generated from message google.cloud.vmwareengine.v1.NetworkPolicy
 */
export type NetworkPolicy = Message<"google.cloud.vmwareengine.v1.NetworkPolicy"> & {
  /**
   * Output only. The resource name of this network policy.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Network service that allows VMware workloads to access the internet.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService internet_access = 6;
   */
  internetAccess?: NetworkPolicy_NetworkService;

  /**
   * Network service that allows External IP addresses to be assigned to VMware
   * workloads. This service can only be enabled when `internet_access` is also
   * enabled.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService external_ip = 7;
   */
  externalIp?: NetworkPolicy_NetworkService;

  /**
   * Required. IP address range in CIDR notation used to create internet access
   * and external IP access. An RFC 1918 CIDR block, with a "/26" prefix, is
   * required. The range cannot overlap with any prefixes either in the consumer
   * VPC network or in use by the private clouds attached to that VPC network.
   *
   * @generated from field: string edge_services_cidr = 9;
   */
  edgeServicesCidr: string;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 10;
   */
  uid: string;

  /**
   * Optional. The relative resource name of the VMware Engine network.
   * Specify the name in the following form:
   * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   * where `{project}` can either be a project number or a project ID.
   *
   * @generated from field: string vmware_engine_network = 12;
   */
  vmwareEngineNetwork: string;

  /**
   * Optional. User-provided description for this network policy.
   *
   * @generated from field: string description = 13;
   */
  description: string;

  /**
   * Output only. The canonical name of the VMware Engine network in the form:
   * `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   *
   * @generated from field: string vmware_engine_network_canonical = 14;
   */
  vmwareEngineNetworkCanonical: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NetworkPolicy.
 * Use `create(NetworkPolicySchema)` to create a new message.
 */
export const NetworkPolicySchema: GenMessage<NetworkPolicy> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 20);

/**
 * Represents a network service that is managed by a `NetworkPolicy` resource.
 * A network service provides a way to control an aspect of external access to
 * VMware workloads. For example, whether the VMware workloads in the
 * private clouds governed by a network policy can access or be accessed from
 * the internet.
 *
 * @generated from message google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService
 */
export type NetworkPolicy_NetworkService = Message<"google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService"> & {
  /**
   * True if the service is enabled; false otherwise.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * Output only. State of the service. New values may be added to this enum
   * when appropriate.
   *
   * @generated from field: google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService.State state = 2;
   */
  state: NetworkPolicy_NetworkService_State;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService.
 * Use `create(NetworkPolicy_NetworkServiceSchema)` to create a new message.
 */
export const NetworkPolicy_NetworkServiceSchema: GenMessage<NetworkPolicy_NetworkService> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 20, 0);

/**
 * Enum State defines possible states of a network policy controlled
 * service.
 *
 * @generated from enum google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService.State
 */
export enum NetworkPolicy_NetworkService_State {
  /**
   * Unspecified service state. This is the default value.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Service is not provisioned.
   *
   * @generated from enum value: UNPROVISIONED = 1;
   */
  UNPROVISIONED = 1,

  /**
   * Service is in the process of being provisioned/deprovisioned.
   *
   * @generated from enum value: RECONCILING = 2;
   */
  RECONCILING = 2,

  /**
   * Service is active.
   *
   * @generated from enum value: ACTIVE = 3;
   */
  ACTIVE = 3,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.NetworkPolicy.NetworkService.State.
 */
export const NetworkPolicy_NetworkService_StateSchema: GenEnum<NetworkPolicy_NetworkService_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 20, 0, 0);

/**
 * Represents a binding between a network and the management DNS zone.
 * A management DNS zone is the Cloud DNS cross-project binding zone that
 * VMware Engine creates for each private cloud. It contains FQDNs and
 * corresponding IP addresses for the private cloud's ESXi hosts and management
 * VM appliances like vCenter and NSX Manager.
 *
 * @generated from message google.cloud.vmwareengine.v1.ManagementDnsZoneBinding
 */
export type ManagementDnsZoneBinding = Message<"google.cloud.vmwareengine.v1.ManagementDnsZoneBinding"> & {
  /**
   * Output only. The resource name of this binding.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/managementDnsZoneBindings/my-management-dns-zone-binding`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The state of the resource.
   *
   * @generated from field: google.cloud.vmwareengine.v1.ManagementDnsZoneBinding.State state = 8;
   */
  state: ManagementDnsZoneBinding_State;

  /**
   * User-provided description for this resource.
   *
   * @generated from field: string description = 13;
   */
  description: string;

  /**
   * Required. The relative resource name of the network to bind to the
   * management DNS zone. This network can be a consumer VPC network or a
   * VMware engine network.
   *
   * @generated from oneof google.cloud.vmwareengine.v1.ManagementDnsZoneBinding.bind_network
   */
  bindNetwork: {
    /**
     * Network to bind is a standard consumer VPC.
     * Specify the name in the following form for consumer
     * VPC network: `projects/{project}/global/networks/{network_id}`.
     * `{project}` can either be a project number or a project ID.
     *
     * @generated from field: string vpc_network = 14;
     */
    value: string;
    case: "vpcNetwork";
  } | {
    /**
     * Network to bind is a VMware Engine network.
     * Specify the name in the following form for VMware engine network:
     * `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`.
     * `{project}` can either be a project number or a project ID.
     *
     * @generated from field: string vmware_engine_network = 15;
     */
    value: string;
    case: "vmwareEngineNetwork";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 9;
   */
  uid: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.ManagementDnsZoneBinding.
 * Use `create(ManagementDnsZoneBindingSchema)` to create a new message.
 */
export const ManagementDnsZoneBindingSchema: GenMessage<ManagementDnsZoneBinding> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 21);

/**
 * Enum State defines possible states of binding between the consumer VPC
 * network and the management DNS zone.
 *
 * @generated from enum google.cloud.vmwareengine.v1.ManagementDnsZoneBinding.State
 */
export enum ManagementDnsZoneBinding_State {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The binding is ready.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The binding is being created.
   *
   * @generated from enum value: CREATING = 2;
   */
  CREATING = 2,

  /**
   * The binding is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The binding is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * The binding has failed.
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.ManagementDnsZoneBinding.State.
 */
export const ManagementDnsZoneBinding_StateSchema: GenEnum<ManagementDnsZoneBinding_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 21, 0);

/**
 * VMware Engine network resource that provides connectivity for VMware Engine
 * private clouds.
 *
 * @generated from message google.cloud.vmwareengine.v1.VmwareEngineNetwork
 */
export type VmwareEngineNetwork = Message<"google.cloud.vmwareengine.v1.VmwareEngineNetwork"> & {
  /**
   * Output only. The resource name of the VMware Engine network.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/global/vmwareEngineNetworks/my-network`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * User-provided description for this VMware Engine network.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Output only. VMware Engine service VPC networks that provide connectivity
   * from a private cloud to customer projects, the internet, and other Google
   * Cloud services.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork vpc_networks = 6;
   */
  vpcNetworks: VmwareEngineNetwork_VpcNetwork[];

  /**
   * Output only. State of the VMware Engine network.
   *
   * @generated from field: google.cloud.vmwareengine.v1.VmwareEngineNetwork.State state = 7;
   */
  state: VmwareEngineNetwork_State;

  /**
   * Required. VMware Engine network type.
   *
   * @generated from field: google.cloud.vmwareengine.v1.VmwareEngineNetwork.Type type = 8;
   */
  type: VmwareEngineNetwork_Type;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 9;
   */
  uid: string;

  /**
   * Checksum that may be sent on update and delete requests to ensure that the
   * user-provided value is up to date before the server processes a request.
   * The server computes checksums based on the value of other fields in the
   * request.
   *
   * @generated from field: string etag = 10;
   */
  etag: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.VmwareEngineNetwork.
 * Use `create(VmwareEngineNetworkSchema)` to create a new message.
 */
export const VmwareEngineNetworkSchema: GenMessage<VmwareEngineNetwork> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 22);

/**
 * Represents a VMware Engine VPC network that is managed by a
 * VMware Engine network resource.
 *
 * @generated from message google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork
 */
export type VmwareEngineNetwork_VpcNetwork = Message<"google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork"> & {
  /**
   * Output only. Type of VPC network (INTRANET, INTERNET, or
   * GOOGLE_CLOUD)
   *
   * @generated from field: google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork.Type type = 1;
   */
  type: VmwareEngineNetwork_VpcNetwork_Type;

  /**
   * Output only. The relative resource name of the service VPC network this
   * VMware Engine network is attached to. For example:
   * `projects/123123/global/networks/my-network`
   *
   * @generated from field: string network = 2;
   */
  network: string;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork.
 * Use `create(VmwareEngineNetwork_VpcNetworkSchema)` to create a new message.
 */
export const VmwareEngineNetwork_VpcNetworkSchema: GenMessage<VmwareEngineNetwork_VpcNetwork> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 22, 0);

/**
 * Enum Type defines possible types of a VMware Engine network controlled
 * service.
 *
 * @generated from enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork.Type
 */
export enum VmwareEngineNetwork_VpcNetwork_Type {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * VPC network that will be peered with a consumer VPC network or the
   * intranet VPC of another VMware Engine network. Access a private cloud
   * through Compute Engine VMs on a peered VPC network or an on-premises
   * resource connected to a peered consumer VPC network.
   *
   * @generated from enum value: INTRANET = 1;
   */
  INTRANET = 1,

  /**
   * VPC network used for internet access to and from a private cloud.
   *
   * @generated from enum value: INTERNET = 2;
   */
  INTERNET = 2,

  /**
   * VPC network used for access to Google Cloud services like
   * Cloud Storage.
   *
   * @generated from enum value: GOOGLE_CLOUD = 3;
   */
  GOOGLE_CLOUD = 3,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.VpcNetwork.Type.
 */
export const VmwareEngineNetwork_VpcNetwork_TypeSchema: GenEnum<VmwareEngineNetwork_VpcNetwork_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 22, 0, 0);

/**
 * Enum State defines possible states of VMware Engine network.
 *
 * @generated from enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.State
 */
export enum VmwareEngineNetwork_State {
  /**
   * The default value. This value is used if the state is omitted.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The VMware Engine network is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The VMware Engine network is ready.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The VMware Engine network is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The VMware Engine network is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.State.
 */
export const VmwareEngineNetwork_StateSchema: GenEnum<VmwareEngineNetwork_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 22, 0);

/**
 * Enum Type defines possible types of VMware Engine network.
 *
 * @generated from enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.Type
 */
export enum VmwareEngineNetwork_Type {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Network type used by private clouds created in projects without a network
   * of type `STANDARD`. This network type is no longer used for new VMware
   * Engine private cloud deployments.
   *
   * @generated from enum value: LEGACY = 1;
   */
  LEGACY = 1,

  /**
   * Standard network type used for private cloud connectivity.
   *
   * @generated from enum value: STANDARD = 2;
   */
  STANDARD = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.VmwareEngineNetwork.Type.
 */
export const VmwareEngineNetwork_TypeSchema: GenEnum<VmwareEngineNetwork_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 22, 1);

/**
 * Private connection resource that provides connectivity for VMware Engine
 * private clouds.
 *
 * @generated from message google.cloud.vmwareengine.v1.PrivateConnection
 */
export type PrivateConnection = Message<"google.cloud.vmwareengine.v1.PrivateConnection"> & {
  /**
   * Output only. The resource name of the private connection.
   * Resource names are schemeless URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names.
   * For example:
   * `projects/my-project/locations/us-central1/privateConnections/my-connection`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Creation time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Output only. Last update time of this resource.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 3;
   */
  updateTime?: Timestamp;

  /**
   * Optional. User-provided description for this private connection.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * Output only. State of the private connection.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateConnection.State state = 5;
   */
  state: PrivateConnection_State;

  /**
   * Required. The relative resource name of Legacy VMware Engine network.
   * Specify the name in the following form:
   * `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   * where `{project}`, `{location}` will be same as specified in private
   * connection resource name and `{vmware_engine_network_id}` will be in the
   * form of `{location}`-default e.g.
   * projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.
   *
   * @generated from field: string vmware_engine_network = 8;
   */
  vmwareEngineNetwork: string;

  /**
   * Output only. The canonical name of the VMware Engine network in the form:
   * `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`
   *
   * @generated from field: string vmware_engine_network_canonical = 9;
   */
  vmwareEngineNetworkCanonical: string;

  /**
   * Required. Private connection type.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateConnection.Type type = 10;
   */
  type: PrivateConnection_Type;

  /**
   * Output only. VPC network peering id between given network VPC and
   * VMwareEngineNetwork.
   *
   * @generated from field: string peering_id = 12;
   */
  peeringId: string;

  /**
   * Optional. Routing Mode.
   * Default value is set to GLOBAL.
   * For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or
   * REGIONAL, for other types only GLOBAL is supported.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateConnection.RoutingMode routing_mode = 13;
   */
  routingMode: PrivateConnection_RoutingMode;

  /**
   * Output only. System-generated unique identifier for the resource.
   *
   * @generated from field: string uid = 14;
   */
  uid: string;

  /**
   * Required. Service network to create private connection.
   * Specify the name in the following form:
   * `projects/{project}/global/networks/{network_id}`
   * For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking
   * VPC, e.g. projects/project-tp/global/networks/servicenetworking.
   * For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC,
   * e.g. projects/project-tp/global/networks/netapp-tenant-vpc.
   * For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g.
   * projects/project-tp/global/networks/dell-tenant-vpc.
   * For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or
   * any other producer VPC to which the VMware Engine Network needs to be
   * connected, e.g. projects/project/global/networks/vpc.
   *
   * @generated from field: string service_network = 16;
   */
  serviceNetwork: string;

  /**
   * Output only. Peering state between service network and VMware Engine
   * network.
   *
   * @generated from field: google.cloud.vmwareengine.v1.PrivateConnection.PeeringState peering_state = 17;
   */
  peeringState: PrivateConnection_PeeringState;
};

/**
 * Describes the message google.cloud.vmwareengine.v1.PrivateConnection.
 * Use `create(PrivateConnectionSchema)` to create a new message.
 */
export const PrivateConnectionSchema: GenMessage<PrivateConnection> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 23);

/**
 * Enum State defines possible states of private connection.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateConnection.State
 */
export enum PrivateConnection_State {
  /**
   * The default value. This value is used if the state is omitted.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The private connection is being created.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The private connection is ready.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The private connection is being updated.
   *
   * @generated from enum value: UPDATING = 3;
   */
  UPDATING = 3,

  /**
   * The private connection is being deleted.
   *
   * @generated from enum value: DELETING = 4;
   */
  DELETING = 4,

  /**
   * The private connection is not provisioned, since no private cloud is
   * present for which this private connection is needed.
   *
   * @generated from enum value: UNPROVISIONED = 5;
   */
  UNPROVISIONED = 5,

  /**
   * The private connection is in failed state.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateConnection.State.
 */
export const PrivateConnection_StateSchema: GenEnum<PrivateConnection_State> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 23, 0);

/**
 * Enum Type defines possible types of private connection.
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateConnection.Type
 */
export enum PrivateConnection_Type {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Connection used for establishing [private services
   * access](https://cloud.google.com/vpc/docs/private-services-access).
   *
   * @generated from enum value: PRIVATE_SERVICE_ACCESS = 1;
   */
  PRIVATE_SERVICE_ACCESS = 1,

  /**
   * Connection used for connecting to NetApp Cloud Volumes.
   *
   * @generated from enum value: NETAPP_CLOUD_VOLUMES = 2;
   */
  NETAPP_CLOUD_VOLUMES = 2,

  /**
   * Connection used for connecting to Dell PowerScale.
   *
   * @generated from enum value: DELL_POWERSCALE = 3;
   */
  DELL_POWERSCALE = 3,

  /**
   * Connection used for connecting to third-party services.
   *
   * @generated from enum value: THIRD_PARTY_SERVICE = 4;
   */
  THIRD_PARTY_SERVICE = 4,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateConnection.Type.
 */
export const PrivateConnection_TypeSchema: GenEnum<PrivateConnection_Type> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 23, 1);

/**
 * Possible types for RoutingMode
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateConnection.RoutingMode
 */
export enum PrivateConnection_RoutingMode {
  /**
   * The default value. This value should never be used.
   *
   * @generated from enum value: ROUTING_MODE_UNSPECIFIED = 0;
   */
  ROUTING_MODE_UNSPECIFIED = 0,

  /**
   * Global Routing Mode
   *
   * @generated from enum value: GLOBAL = 1;
   */
  GLOBAL = 1,

  /**
   * Regional Routing Mode
   *
   * @generated from enum value: REGIONAL = 2;
   */
  REGIONAL = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateConnection.RoutingMode.
 */
export const PrivateConnection_RoutingModeSchema: GenEnum<PrivateConnection_RoutingMode> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 23, 2);

/**
 * Enum PeeringState defines the possible states of peering between service
 * network and the vpc network peered to service network
 *
 * @generated from enum google.cloud.vmwareengine.v1.PrivateConnection.PeeringState
 */
export enum PrivateConnection_PeeringState {
  /**
   * The default value. This value is used if the peering state is omitted or
   * unknown.
   *
   * @generated from enum value: PEERING_STATE_UNSPECIFIED = 0;
   */
  PEERING_STATE_UNSPECIFIED = 0,

  /**
   * The peering is in active state.
   *
   * @generated from enum value: PEERING_ACTIVE = 1;
   */
  PEERING_ACTIVE = 1,

  /**
   * The peering is in inactive state.
   *
   * @generated from enum value: PEERING_INACTIVE = 2;
   */
  PEERING_INACTIVE = 2,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.PrivateConnection.PeeringState.
 */
export const PrivateConnection_PeeringStateSchema: GenEnum<PrivateConnection_PeeringState> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 23, 3);

/**
 * VmwareEngine specific metadata for the given
 * [google.cloud.location.Location][google.cloud.location.Location]. It is
 * returned as a content of the `google.cloud.location.Location.metadata` field.
 *
 * @generated from message google.cloud.vmwareengine.v1.LocationMetadata
 */
export type LocationMetadata = Message<"google.cloud.vmwareengine.v1.LocationMetadata"> & {
  /**
   * Output only. Capabilities of this location.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.LocationMetadata.Capability capabilities = 1;
   */
  capabilities: LocationMetadata_Capability[];
};

/**
 * Describes the message google.cloud.vmwareengine.v1.LocationMetadata.
 * Use `create(LocationMetadataSchema)` to create a new message.
 */
export const LocationMetadataSchema: GenMessage<LocationMetadata> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 24);

/**
 * Capability of a location.
 *
 * @generated from enum google.cloud.vmwareengine.v1.LocationMetadata.Capability
 */
export enum LocationMetadata_Capability {
  /**
   * The default value. This value is used if the capability is omitted or
   * unknown.
   *
   * @generated from enum value: CAPABILITY_UNSPECIFIED = 0;
   */
  CAPABILITY_UNSPECIFIED = 0,

  /**
   * Stretch clusters are supported in this location.
   *
   * @generated from enum value: STRETCHED_CLUSTERS = 1;
   */
  STRETCHED_CLUSTERS = 1,
}

/**
 * Describes the enum google.cloud.vmwareengine.v1.LocationMetadata.Capability.
 */
export const LocationMetadata_CapabilitySchema: GenEnum<LocationMetadata_Capability> = /*@__PURE__*/
  enumDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 24, 0);

/**
 * DnsBindPermission resource that contains the accounts having the consumer DNS
 * bind permission on the corresponding intranet VPC of the consumer project.
 *
 * @generated from message google.cloud.vmwareengine.v1.DnsBindPermission
 */
export type DnsBindPermission = Message<"google.cloud.vmwareengine.v1.DnsBindPermission"> & {
  /**
   * Required. Output only. The name of the resource which stores the
   * users/service accounts having the permission to bind to the corresponding
   * intranet VPC of the consumer project. DnsBindPermission is a global
   * resource and location can only be global. Resource names are schemeless
   * URIs that follow the conventions in
   * https://cloud.google.com/apis/design/resource_names. For example:
   * `projects/my-project/locations/global/dnsBindPermission`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Users/Service accounts which have access for binding on the
   * intranet VPC project corresponding to the consumer project.
   *
   * @generated from field: repeated google.cloud.vmwareengine.v1.Principal principals = 2;
   */
  principals: Principal[];
};

/**
 * Describes the message google.cloud.vmwareengine.v1.DnsBindPermission.
 * Use `create(DnsBindPermissionSchema)` to create a new message.
 */
export const DnsBindPermissionSchema: GenMessage<DnsBindPermission> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 25);

/**
 * Users/Service accounts which have access for DNS binding on the intranet
 * VPC corresponding to the consumer project.
 *
 * @generated from message google.cloud.vmwareengine.v1.Principal
 */
export type Principal = Message<"google.cloud.vmwareengine.v1.Principal"> & {
  /**
   * The consumer provided user/service account which needs to be
   * granted permission to DNS bind with the intranet VPC corresponding to the
   * consumer project.
   *
   * @generated from oneof google.cloud.vmwareengine.v1.Principal.principal
   */
  principal: {
    /**
     * The user who needs to be granted permission.
     *
     * @generated from field: string user = 1;
     */
    value: string;
    case: "user";
  } | {
    /**
     * The service account which needs to be granted the permission.
     *
     * @generated from field: string service_account = 2;
     */
    value: string;
    case: "serviceAccount";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.vmwareengine.v1.Principal.
 * Use `create(PrincipalSchema)` to create a new message.
 */
export const PrincipalSchema: GenMessage<Principal> = /*@__PURE__*/
  messageDesc(file_google_cloud_vmwareengine_v1_vmwareengine_resources, 26);

