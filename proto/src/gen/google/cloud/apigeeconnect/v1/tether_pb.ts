// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/cloud/apigeeconnect/v1/tether.proto (package google.cloud.apigeeconnect.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/cloud/apigeeconnect/v1/tether.proto.
 */
export const file_google_cloud_apigeeconnect_v1_tether: GenFile = /*@__PURE__*/
  fileDesc("Cipnb29nbGUvY2xvdWQvYXBpZ2VlY29ubmVjdC92MS90ZXRoZXIucHJvdG8SHWdvb2dsZS5jbG91ZC5hcGlnZWVjb25uZWN0LnYxIuQBCg1FZ3Jlc3NSZXF1ZXN0EgoKAmlkGAEgASgJEjcKB3BheWxvYWQYAiABKAsyJi5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MS5QYXlsb2FkEj8KCGVuZHBvaW50GAMgASgOMi0uZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuVGV0aGVyRW5kcG9pbnQSDwoHcHJvamVjdBgEIAEoCRIQCgh0cmFjZV9pZBgFIAEoCRIqCgd0aW1lb3V0GAYgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uItABCgdQYXlsb2FkEkIKDGh0dHBfcmVxdWVzdBgBIAEoCzIqLmdvb2dsZS5jbG91ZC5hcGlnZWVjb25uZWN0LnYxLkh0dHBSZXF1ZXN0SAASQAoLc3RyZWFtX2luZm8YAiABKAsyKS5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MS5TdHJlYW1JbmZvSAASNwoGYWN0aW9uGAMgASgOMiUuZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuQWN0aW9uSABCBgoEa2luZCIYCgpTdHJlYW1JbmZvEgoKAmlkGAEgASgJIvYBCg5FZ3Jlc3NSZXNwb25zZRIKCgJpZBgBIAEoCRJCCg1odHRwX3Jlc3BvbnNlGAIgASgLMisuZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuSHR0cFJlc3BvbnNlEiIKBnN0YXR1cxgDIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzEg8KB3Byb2plY3QYBCABKAkSEAoIdHJhY2VfaWQYBSABKAkSPwoIZW5kcG9pbnQYBiABKA4yLS5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MS5UZXRoZXJFbmRwb2ludBIMCgRuYW1lGAcgASgJIqABCgtIdHRwUmVxdWVzdBIKCgJpZBgBIAEoCRIOCgZtZXRob2QYAiABKAkSLwoDdXJsGAMgASgLMiIuZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuVXJsEjYKB2hlYWRlcnMYBCADKAsyJS5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MS5IZWFkZXISDAoEYm9keRgFIAEoDCJYCgNVcmwSNQoGc2NoZW1lGAEgASgOMiUuZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuU2NoZW1lEgwKBGhvc3QYAiABKAkSDAoEcGF0aBgDIAEoCSIlCgZIZWFkZXISCwoDa2V5GAEgASgJEg4KBnZhbHVlcxgCIAMoCSKdAQoMSHR0cFJlc3BvbnNlEgoKAmlkGAEgASgJEg4KBnN0YXR1cxgCIAEoCRITCgtzdGF0dXNfY29kZRgDIAEoBRIMCgRib2R5GAQgASgMEjYKB2hlYWRlcnMYBSADKAsyJS5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MS5IZWFkZXISFgoOY29udGVudF9sZW5ndGgYBiABKAMqNQoGQWN0aW9uEhYKEkFDVElPTl9VTlNQRUNJRklFRBAAEhMKD09QRU5fTkVXX1NUUkVBTRABKm4KDlRldGhlckVuZHBvaW50Eh8KG1RFVEhFUl9FTkRQT0lOVF9VTlNQRUNJRklFRBAAEg8KC0FQSUdFRV9NQVJUEAESEgoOQVBJR0VFX1JVTlRJTUUQAhIWChJBUElHRUVfTUlOVF9SQVRJTkcQAyorCgZTY2hlbWUSFgoSU0NIRU1FX1VOU1BFQ0lGSUVEEAASCQoFSFRUUFMQATLHAQoGVGV0aGVyEmsKBkVncmVzcxItLmdvb2dsZS5jbG91ZC5hcGlnZWVjb25uZWN0LnYxLkVncmVzc1Jlc3BvbnNlGiwuZ29vZ2xlLmNsb3VkLmFwaWdlZWNvbm5lY3QudjEuRWdyZXNzUmVxdWVzdCIAKAEwARpQykEcYXBpZ2VlY29ubmVjdC5nb29nbGVhcGlzLmNvbdJBLmh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm1C3gEKIWNvbS5nb29nbGUuY2xvdWQuYXBpZ2VlY29ubmVjdC52MUILVGV0aGVyUHJvdG9QAVpHY2xvdWQuZ29vZ2xlLmNvbS9nby9hcGlnZWVjb25uZWN0L2FwaXYxL2FwaWdlZWNvbm5lY3RwYjthcGlnZWVjb25uZWN0cGKqAh1Hb29nbGUuQ2xvdWQuQXBpZ2VlQ29ubmVjdC5WMcoCHUdvb2dsZVxDbG91ZFxBcGlnZWVDb25uZWN0XFYx6gIgR29vZ2xlOjpDbG91ZDo6QXBpZ2VlQ29ubmVjdDo6VjFiBnByb3RvMw", [file_google_protobuf_duration, file_google_rpc_status, file_google_api_client]);

/**
 * gRPC request payload for tether.
 *
 * @generated from message google.cloud.apigeeconnect.v1.EgressRequest
 */
export type EgressRequest = Message<"google.cloud.apigeeconnect.v1.EgressRequest"> & {
  /**
   * Unique identifier for the request.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Actual payload to send to agent.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.Payload payload = 2;
   */
  payload?: Payload;

  /**
   * Tether Endpoint.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.TetherEndpoint endpoint = 3;
   */
  endpoint: TetherEndpoint;

  /**
   * GCP Project.
   * Format: `projects/{project_number}`.
   *
   * @generated from field: string project = 4;
   */
  project: string;

  /**
   * Unique identifier for clients to trace their request/response.
   *
   * @generated from field: string trace_id = 5;
   */
  traceId: string;

  /**
   * Timeout for the HTTP request.
   *
   * @generated from field: google.protobuf.Duration timeout = 6;
   */
  timeout?: Duration;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.EgressRequest.
 * Use `create(EgressRequestSchema)` to create a new message.
 */
export const EgressRequestSchema: GenMessage<EgressRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 0);

/**
 * Payload for EgressRequest.
 *
 * @generated from message google.cloud.apigeeconnect.v1.Payload
 */
export type Payload = Message<"google.cloud.apigeeconnect.v1.Payload"> & {
  /**
   * The kind of payload.
   *
   * @generated from oneof google.cloud.apigeeconnect.v1.Payload.kind
   */
  kind: {
    /**
     * The HttpRequest proto.
     *
     * @generated from field: google.cloud.apigeeconnect.v1.HttpRequest http_request = 1;
     */
    value: HttpRequest;
    case: "httpRequest";
  } | {
    /**
     * The information of stream.
     *
     * @generated from field: google.cloud.apigeeconnect.v1.StreamInfo stream_info = 2;
     */
    value: StreamInfo;
    case: "streamInfo";
  } | {
    /**
     * The action taken by agent.
     *
     * @generated from field: google.cloud.apigeeconnect.v1.Action action = 3;
     */
    value: Action;
    case: "action";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.Payload.
 * Use `create(PayloadSchema)` to create a new message.
 */
export const PayloadSchema: GenMessage<Payload> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 1);

/**
 * The Information of bi-directional stream.
 *
 * @generated from message google.cloud.apigeeconnect.v1.StreamInfo
 */
export type StreamInfo = Message<"google.cloud.apigeeconnect.v1.StreamInfo"> & {
  /**
   * Unique identifier for the stream.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.StreamInfo.
 * Use `create(StreamInfoSchema)` to create a new message.
 */
export const StreamInfoSchema: GenMessage<StreamInfo> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 2);

/**
 * gRPC response payload for tether.
 *
 * @generated from message google.cloud.apigeeconnect.v1.EgressResponse
 */
export type EgressResponse = Message<"google.cloud.apigeeconnect.v1.EgressResponse"> & {
  /**
   * Unique identifier for the response. Matches the EgressRequest's id.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * HttpResponse.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.HttpResponse http_response = 2;
   */
  httpResponse?: HttpResponse;

  /**
   * Errors from application when handling the http request.
   *
   * @generated from field: google.rpc.Status status = 3;
   */
  status?: Status;

  /**
   * GCP Project.
   * Format: `projects/{project_number}`.
   *
   * @generated from field: string project = 4;
   */
  project: string;

  /**
   * Unique identifier for clients to trace their request/response. Matches the
   * EgressRequest's trace id
   *
   * @generated from field: string trace_id = 5;
   */
  traceId: string;

  /**
   * Tether Endpoint.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.TetherEndpoint endpoint = 6;
   */
  endpoint: TetherEndpoint;

  /**
   * Name is the full resource path of endpoint.
   * Format: `projects/{project_number or project_id}/endpoints/{endpoint}`
   *
   * @generated from field: string name = 7;
   */
  name: string;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.EgressResponse.
 * Use `create(EgressResponseSchema)` to create a new message.
 */
export const EgressResponseSchema: GenMessage<EgressResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 3);

/**
 * The proto definition of http request.
 *
 * @generated from message google.cloud.apigeeconnect.v1.HttpRequest
 */
export type HttpRequest = Message<"google.cloud.apigeeconnect.v1.HttpRequest"> & {
  /**
   * A unique identifier for the request.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The HTTP request method.
   * Valid methods: "GET", "HEAD", "POST", "PUT", "PATCH","DELETE".
   *
   * @generated from field: string method = 2;
   */
  method: string;

  /**
   * The HTTP request URL.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.Url url = 3;
   */
  url?: Url;

  /**
   * The HTTP request headers.
   *
   * @generated from field: repeated google.cloud.apigeeconnect.v1.Header headers = 4;
   */
  headers: Header[];

  /**
   * HTTP request body.
   *
   * @generated from field: bytes body = 5;
   */
  body: Uint8Array;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.HttpRequest.
 * Use `create(HttpRequestSchema)` to create a new message.
 */
export const HttpRequestSchema: GenMessage<HttpRequest> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 4);

/**
 * The proto definition of url.
 * A url represents a URL and the general form represented is:
 *
 *  `[scheme://][google.cloud.apigeeconnect.v1.Url.host][path]`
 *
 * @generated from message google.cloud.apigeeconnect.v1.Url
 */
export type Url = Message<"google.cloud.apigeeconnect.v1.Url"> & {
  /**
   * Scheme.
   *
   * @generated from field: google.cloud.apigeeconnect.v1.Scheme scheme = 1;
   */
  scheme: Scheme;

  /**
   * Host or Host:Port.
   *
   * @generated from field: string host = 2;
   */
  host: string;

  /**
   * Path starts with `/`.
   *
   * @generated from field: string path = 3;
   */
  path: string;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.Url.
 * Use `create(UrlSchema)` to create a new message.
 */
export const UrlSchema: GenMessage<Url> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 5);

/**
 * The http headers.
 *
 * @generated from message google.cloud.apigeeconnect.v1.Header
 */
export type Header = Message<"google.cloud.apigeeconnect.v1.Header"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: repeated string values = 2;
   */
  values: string[];
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.Header.
 * Use `create(HeaderSchema)` to create a new message.
 */
export const HeaderSchema: GenMessage<Header> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 6);

/**
 * The proto definition of http response.
 *
 * @generated from message google.cloud.apigeeconnect.v1.HttpResponse
 */
export type HttpResponse = Message<"google.cloud.apigeeconnect.v1.HttpResponse"> & {
  /**
   * A unique identifier that matches the request ID.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Status of http response, e.g. "200 OK".
   *
   * @generated from field: string status = 2;
   */
  status: string;

  /**
   * Status code of http response, e.g. 200.
   *
   * @generated from field: int32 status_code = 3;
   */
  statusCode: number;

  /**
   * The HTTP 1.1 response body.
   *
   * @generated from field: bytes body = 4;
   */
  body: Uint8Array;

  /**
   * The HTTP response headers.
   *
   * @generated from field: repeated google.cloud.apigeeconnect.v1.Header headers = 5;
   */
  headers: Header[];

  /**
   * Content length records the length of the associated content. The
   * value -1 indicates that the length is unknown. Unless http method
   * is "HEAD", values >= 0 indicate that the given number of bytes may
   * be read from Body.
   *
   * @generated from field: int64 content_length = 6;
   */
  contentLength: bigint;
};

/**
 * Describes the message google.cloud.apigeeconnect.v1.HttpResponse.
 * Use `create(HttpResponseSchema)` to create a new message.
 */
export const HttpResponseSchema: GenMessage<HttpResponse> = /*@__PURE__*/
  messageDesc(file_google_cloud_apigeeconnect_v1_tether, 7);

/**
 * The action taken by agent.
 *
 * @generated from enum google.cloud.apigeeconnect.v1.Action
 */
export enum Action {
  /**
   * Unspecified Action.
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  ACTION_UNSPECIFIED = 0,

  /**
   * Indicates that agent should open a new stream.
   *
   * @generated from enum value: OPEN_NEW_STREAM = 1;
   */
  OPEN_NEW_STREAM = 1,
}

/**
 * Describes the enum google.cloud.apigeeconnect.v1.Action.
 */
export const ActionSchema: GenEnum<Action> = /*@__PURE__*/
  enumDesc(file_google_cloud_apigeeconnect_v1_tether, 0);

/**
 * Endpoint indicates where the messages will be delivered.
 *
 * @generated from enum google.cloud.apigeeconnect.v1.TetherEndpoint
 */
export enum TetherEndpoint {
  /**
   * Unspecified tether endpoint.
   *
   * @generated from enum value: TETHER_ENDPOINT_UNSPECIFIED = 0;
   */
  TETHER_ENDPOINT_UNSPECIFIED = 0,

  /**
   * Apigee MART endpoint.
   *
   * @generated from enum value: APIGEE_MART = 1;
   */
  APIGEE_MART = 1,

  /**
   * Apigee Runtime endpoint.
   *
   * @generated from enum value: APIGEE_RUNTIME = 2;
   */
  APIGEE_RUNTIME = 2,

  /**
   * Apigee Mint Rating endpoint.
   *
   * @generated from enum value: APIGEE_MINT_RATING = 3;
   */
  APIGEE_MINT_RATING = 3,
}

/**
 * Describes the enum google.cloud.apigeeconnect.v1.TetherEndpoint.
 */
export const TetherEndpointSchema: GenEnum<TetherEndpoint> = /*@__PURE__*/
  enumDesc(file_google_cloud_apigeeconnect_v1_tether, 1);

/**
 * HTTP Scheme.
 *
 * @generated from enum google.cloud.apigeeconnect.v1.Scheme
 */
export enum Scheme {
  /**
   * Unspecified scheme.
   *
   * @generated from enum value: SCHEME_UNSPECIFIED = 0;
   */
  SCHEME_UNSPECIFIED = 0,

  /**
   * HTTPS protocol.
   *
   * @generated from enum value: HTTPS = 1;
   */
  HTTPS = 1,
}

/**
 * Describes the enum google.cloud.apigeeconnect.v1.Scheme.
 */
export const SchemeSchema: GenEnum<Scheme> = /*@__PURE__*/
  enumDesc(file_google_cloud_apigeeconnect_v1_tether, 2);

/**
 * Tether provides a way for the control plane to send HTTP API requests to
 * services in data planes that runs in a remote datacenter without
 * requiring customers to open firewalls on their runtime plane.
 *
 * @generated from service google.cloud.apigeeconnect.v1.Tether
 */
export const Tether: GenService<{
  /**
   * Egress streams egress requests and responses. Logically, this is not
   * actually a streaming request, but uses streaming as a mechanism to flip
   * the client-server relationship of gRPC so that the server can act as a
   * client.
   * The listener, the RPC server, accepts connections from the dialer,
   * the RPC client.
   * The listener streams http requests and the dialer streams http responses.
   *
   * @generated from rpc google.cloud.apigeeconnect.v1.Tether.Egress
   */
  egress: {
    methodKind: "bidi_streaming";
    input: typeof EgressResponseSchema;
    output: typeof EgressRequestSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_cloud_apigeeconnect_v1_tether, 0);

