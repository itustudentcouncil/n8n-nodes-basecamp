// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/analytics/data/v1beta/data.proto (package google.analytics.data.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/analytics/data/v1beta/data.proto.
 */
export const file_google_analytics_data_v1beta_data: GenFile = /*@__PURE__*/
  fileDesc("");

/**
 * A contiguous set of days: `startDate`, `startDate + 1`, ..., `endDate`.
 * Requests are allowed up to 4 date ranges.
 *
 * @generated from message google.analytics.data.v1beta.DateRange
 */
export type DateRange = Message<"google.analytics.data.v1beta.DateRange"> & {
  /**
   * The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot
   * be after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also
   * accepted, and in that case, the date is inferred based on the property's
   * reporting time zone.
   *
   * @generated from field: string start_date = 1;
   */
  startDate: string;

  /**
   * The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot
   * be before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is
   * also accepted, and in that case, the date is inferred based on the
   * property's reporting time zone.
   *
   * @generated from field: string end_date = 2;
   */
  endDate: string;

  /**
   * Assigns a name to this date range. The dimension `dateRange` is valued to
   * this name in a report response. If set, cannot begin with `date_range_` or
   * `RESERVED_`. If not set, date ranges are named by their zero based index in
   * the request: `date_range_0`, `date_range_1`, etc.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1beta.DateRange.
 * Use `create(DateRangeSchema)` to create a new message.
 */
export const DateRangeSchema: GenMessage<DateRange> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 0);

/**
 * A contiguous set of minutes: `startMinutesAgo`, `startMinutesAgo + 1`, ...,
 * `endMinutesAgo`. Requests are allowed up to 2 minute ranges.
 *
 * @generated from message google.analytics.data.v1beta.MinuteRange
 */
export type MinuteRange = Message<"google.analytics.data.v1beta.MinuteRange"> & {
  /**
   * The inclusive start minute for the query as a number of minutes before now.
   * For example, `"startMinutesAgo": 29` specifies the report should include
   * event data from 29 minutes ago and after. Cannot be after `endMinutesAgo`.
   *
   * If unspecified, `startMinutesAgo` is defaulted to 29. Standard Analytics
   * properties can request up to the last 30 minutes of event data
   * (`startMinutesAgo <= 29`), and 360 Analytics properties can request up to
   * the last 60 minutes of event data (`startMinutesAgo <= 59`).
   *
   * @generated from field: optional int32 start_minutes_ago = 1;
   */
  startMinutesAgo?: number;

  /**
   * The inclusive end minute for the query as a number of minutes before now.
   * Cannot be before `startMinutesAgo`. For example, `"endMinutesAgo": 15`
   * specifies the report should include event data from prior to 15 minutes
   * ago.
   *
   * If unspecified, `endMinutesAgo` is defaulted to 0. Standard Analytics
   * properties can request any minute in the last 30 minutes of event data
   * (`endMinutesAgo <= 29`), and 360 Analytics properties can request any
   * minute in the last 60 minutes of event data (`endMinutesAgo <= 59`).
   *
   * @generated from field: optional int32 end_minutes_ago = 2;
   */
  endMinutesAgo?: number;

  /**
   * Assigns a name to this minute range. The dimension `dateRange` is valued to
   * this name in a report response. If set, cannot begin with `date_range_` or
   * `RESERVED_`. If not set, minute ranges are named by their zero based index
   * in the request: `date_range_0`, `date_range_1`, etc.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1beta.MinuteRange.
 * Use `create(MinuteRangeSchema)` to create a new message.
 */
export const MinuteRangeSchema: GenMessage<MinuteRange> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 1);

/**
 * Dimensions are attributes of your data. For example, the dimension city
 * indicates the city from which an event originates. Dimension values in report
 * responses are strings; for example, the city could be "Paris" or "New York".
 * Requests are allowed up to 9 dimensions.
 *
 * @generated from message google.analytics.data.v1beta.Dimension
 */
export type Dimension = Message<"google.analytics.data.v1beta.Dimension"> & {
  /**
   * The name of the dimension. See the [API
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions)
   * for the list of dimension names supported by core reporting methods such
   * as `runReport` and `batchRunReports`. See
   * [Realtime
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#dimensions)
   * for the list of dimension names supported by the `runRealtimeReport`
   * method. See
   * [Funnel
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#dimensions)
   * for the list of dimension names supported by the `runFunnelReport`
   * method.
   *
   * If `dimensionExpression` is specified, `name` can be any string that you
   * would like within the allowed character set. For example if a
   * `dimensionExpression` concatenates `country` and `city`, you could call
   * that dimension `countryAndCity`. Dimension names that you choose must match
   * the regular expression `^[a-zA-Z0-9_]$`.
   *
   * Dimensions are referenced by `name` in `dimensionFilter`, `orderBys`,
   * `dimensionExpression`, and `pivots`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * One dimension can be the result of an expression of multiple dimensions.
   * For example, dimension "country, city": concatenate(country, ", ", city).
   *
   * @generated from field: google.analytics.data.v1beta.DimensionExpression dimension_expression = 2;
   */
  dimensionExpression?: DimensionExpression;
};

/**
 * Describes the message google.analytics.data.v1beta.Dimension.
 * Use `create(DimensionSchema)` to create a new message.
 */
export const DimensionSchema: GenMessage<Dimension> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 2);

/**
 * Used to express a dimension which is the result of a formula of multiple
 * dimensions. Example usages:
 * 1) lower_case(dimension)
 * 2) concatenate(dimension1, symbol, dimension2).
 *
 * @generated from message google.analytics.data.v1beta.DimensionExpression
 */
export type DimensionExpression = Message<"google.analytics.data.v1beta.DimensionExpression"> & {
  /**
   * Specify one type of dimension expression for `DimensionExpression`.
   *
   * @generated from oneof google.analytics.data.v1beta.DimensionExpression.one_expression
   */
  oneExpression: {
    /**
     * Used to convert a dimension value to lower case.
     *
     * @generated from field: google.analytics.data.v1beta.DimensionExpression.CaseExpression lower_case = 4;
     */
    value: DimensionExpression_CaseExpression;
    case: "lowerCase";
  } | {
    /**
     * Used to convert a dimension value to upper case.
     *
     * @generated from field: google.analytics.data.v1beta.DimensionExpression.CaseExpression upper_case = 5;
     */
    value: DimensionExpression_CaseExpression;
    case: "upperCase";
  } | {
    /**
     * Used to combine dimension values to a single dimension.
     * For example, dimension "country, city": concatenate(country, ", ", city).
     *
     * @generated from field: google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression concatenate = 6;
     */
    value: DimensionExpression_ConcatenateExpression;
    case: "concatenate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionExpression.
 * Use `create(DimensionExpressionSchema)` to create a new message.
 */
export const DimensionExpressionSchema: GenMessage<DimensionExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 3);

/**
 * Used to convert a dimension value to a single case.
 *
 * @generated from message google.analytics.data.v1beta.DimensionExpression.CaseExpression
 */
export type DimensionExpression_CaseExpression = Message<"google.analytics.data.v1beta.DimensionExpression.CaseExpression"> & {
  /**
   * Name of a dimension. The name must refer back to a name in dimensions
   * field of the request.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionExpression.CaseExpression.
 * Use `create(DimensionExpression_CaseExpressionSchema)` to create a new message.
 */
export const DimensionExpression_CaseExpressionSchema: GenMessage<DimensionExpression_CaseExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 3, 0);

/**
 * Used to combine dimension values to a single dimension.
 *
 * @generated from message google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression
 */
export type DimensionExpression_ConcatenateExpression = Message<"google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression"> & {
  /**
   * Names of dimensions. The names must refer back to names in the dimensions
   * field of the request.
   *
   * @generated from field: repeated string dimension_names = 1;
   */
  dimensionNames: string[];

  /**
   * The delimiter placed between dimension names.
   *
   * Delimiters are often single characters such as "|" or "," but can be
   * longer strings. If a dimension value contains the delimiter, both will be
   * present in response with no distinction. For example if dimension 1 value
   * = "US,FR", dimension 2 value = "JP", and delimiter = ",", then the
   * response will contain "US,FR,JP".
   *
   * @generated from field: string delimiter = 2;
   */
  delimiter: string;
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionExpression.ConcatenateExpression.
 * Use `create(DimensionExpression_ConcatenateExpressionSchema)` to create a new message.
 */
export const DimensionExpression_ConcatenateExpressionSchema: GenMessage<DimensionExpression_ConcatenateExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 3, 1);

/**
 * The quantitative measurements of a report. For example, the metric
 * `eventCount` is the total number of events. Requests are allowed up to 10
 * metrics.
 *
 * @generated from message google.analytics.data.v1beta.Metric
 */
export type Metric = Message<"google.analytics.data.v1beta.Metric"> & {
  /**
   * The name of the metric. See the [API
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics)
   * for the list of metric names supported by core reporting methods such
   * as `runReport` and `batchRunReports`. See
   * [Realtime
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#metrics)
   * for the list of metric names supported by the `runRealtimeReport`
   * method. See
   * [Funnel
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#metrics)
   * for the list of metric names supported by the `runFunnelReport`
   * method.
   *
   * If `expression` is specified, `name` can be any string that you would like
   * within the allowed character set. For example if `expression` is
   * `screenPageViews/sessions`, you could call that metric's name =
   * `viewsPerSession`. Metric names that you choose must match the regular
   * expression `^[a-zA-Z0-9_]$`.
   *
   * Metrics are referenced by `name` in `metricFilter`, `orderBys`, and metric
   * `expression`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A mathematical expression for derived metrics. For example, the metric
   * Event count per user is `eventCount/totalUsers`.
   *
   * @generated from field: string expression = 2;
   */
  expression: string;

  /**
   * Indicates if a metric is invisible in the report response. If a metric is
   * invisible, the metric will not produce a column in the response, but can be
   * used in `metricFilter`, `orderBys`, or a metric `expression`.
   *
   * @generated from field: bool invisible = 3;
   */
  invisible: boolean;
};

/**
 * Describes the message google.analytics.data.v1beta.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export const MetricSchema: GenMessage<Metric> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 4);

/**
 * Defines an individual comparison. Most requests will include multiple
 * comparisons so that the report compares between the comparisons.
 *
 * @generated from message google.analytics.data.v1beta.Comparison
 */
export type Comparison = Message<"google.analytics.data.v1beta.Comparison"> & {
  /**
   * Each comparison produces separate rows in the response. In the response,
   * this comparison is identified by this name. If name is unspecified, we will
   * use the saved comparisons display name.
   *
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * One kind of comparison value
   *
   * @generated from oneof google.analytics.data.v1beta.Comparison.one_comparison
   */
  oneComparison: {
    /**
     * A basic comparison.
     *
     * @generated from field: google.analytics.data.v1beta.FilterExpression dimension_filter = 2;
     */
    value: FilterExpression;
    case: "dimensionFilter";
  } | {
    /**
     * A saved comparison identified by the comparison's resource name.
     * For example, 'comparisons/1234'.
     *
     * @generated from field: string comparison = 3;
     */
    value: string;
    case: "comparison";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.Comparison.
 * Use `create(ComparisonSchema)` to create a new message.
 */
export const ComparisonSchema: GenMessage<Comparison> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 5);

/**
 * To express dimension or metric filters. The fields in the same
 * FilterExpression need to be either all dimensions or all metrics.
 *
 * @generated from message google.analytics.data.v1beta.FilterExpression
 */
export type FilterExpression = Message<"google.analytics.data.v1beta.FilterExpression"> & {
  /**
   * Specify one type of filter expression for `FilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1beta.FilterExpression.expr
   */
  expr: {
    /**
     * The FilterExpressions in and_group have an AND relationship.
     *
     * @generated from field: google.analytics.data.v1beta.FilterExpressionList and_group = 1;
     */
    value: FilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The FilterExpressions in or_group have an OR relationship.
     *
     * @generated from field: google.analytics.data.v1beta.FilterExpressionList or_group = 2;
     */
    value: FilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The FilterExpression is NOT of not_expression.
     *
     * @generated from field: google.analytics.data.v1beta.FilterExpression not_expression = 3;
     */
    value: FilterExpression;
    case: "notExpression";
  } | {
    /**
     * A primitive filter. In the same FilterExpression, all of the filter's
     * field names need to be either all dimensions or all metrics.
     *
     * @generated from field: google.analytics.data.v1beta.Filter filter = 4;
     */
    value: Filter;
    case: "filter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.FilterExpression.
 * Use `create(FilterExpressionSchema)` to create a new message.
 */
export const FilterExpressionSchema: GenMessage<FilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 6);

/**
 * A list of filter expressions.
 *
 * @generated from message google.analytics.data.v1beta.FilterExpressionList
 */
export type FilterExpressionList = Message<"google.analytics.data.v1beta.FilterExpressionList"> & {
  /**
   * A list of filter expressions.
   *
   * @generated from field: repeated google.analytics.data.v1beta.FilterExpression expressions = 1;
   */
  expressions: FilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1beta.FilterExpressionList.
 * Use `create(FilterExpressionListSchema)` to create a new message.
 */
export const FilterExpressionListSchema: GenMessage<FilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 7);

/**
 * An expression to filter dimension or metric values.
 *
 * @generated from message google.analytics.data.v1beta.Filter
 */
export type Filter = Message<"google.analytics.data.v1beta.Filter"> & {
  /**
   * The dimension name or metric name.
   *
   * In most methods, dimensions & metrics can be used for the first time in
   * this field. However in a RunPivotReportRequest, this field must be
   * additionally specified by name in the RunPivotReportRequest's dimensions or
   * metrics.
   *
   * @generated from field: string field_name = 1;
   */
  fieldName: string;

  /**
   * Specify one type of filter for `Filter`.
   *
   * @generated from oneof google.analytics.data.v1beta.Filter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1beta.Filter.StringFilter string_filter = 3;
     */
    value: Filter_StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1beta.Filter.InListFilter in_list_filter = 4;
     */
    value: Filter_InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1beta.Filter.NumericFilter numeric_filter = 5;
     */
    value: Filter_NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for two values.
     *
     * @generated from field: google.analytics.data.v1beta.Filter.BetweenFilter between_filter = 6;
     */
    value: Filter_BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export const FilterSchema: GenMessage<Filter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 8);

/**
 * The filter for string
 *
 * @generated from message google.analytics.data.v1beta.Filter.StringFilter
 */
export type Filter_StringFilter = Message<"google.analytics.data.v1beta.Filter.StringFilter"> & {
  /**
   * The match type for this filter.
   *
   * @generated from field: google.analytics.data.v1beta.Filter.StringFilter.MatchType match_type = 1;
   */
  matchType: Filter_StringFilter_MatchType;

  /**
   * The string value used for the matching.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * If true, the string value is case sensitive.
   *
   * @generated from field: bool case_sensitive = 3;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message google.analytics.data.v1beta.Filter.StringFilter.
 * Use `create(Filter_StringFilterSchema)` to create a new message.
 */
export const Filter_StringFilterSchema: GenMessage<Filter_StringFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 8, 0);

/**
 * The match type of a string filter
 *
 * @generated from enum google.analytics.data.v1beta.Filter.StringFilter.MatchType
 */
export enum Filter_StringFilter_MatchType {
  /**
   * Unspecified
   *
   * @generated from enum value: MATCH_TYPE_UNSPECIFIED = 0;
   */
  MATCH_TYPE_UNSPECIFIED = 0,

  /**
   * Exact match of the string value.
   *
   * @generated from enum value: EXACT = 1;
   */
  EXACT = 1,

  /**
   * Begins with the string value.
   *
   * @generated from enum value: BEGINS_WITH = 2;
   */
  BEGINS_WITH = 2,

  /**
   * Ends with the string value.
   *
   * @generated from enum value: ENDS_WITH = 3;
   */
  ENDS_WITH = 3,

  /**
   * Contains the string value.
   *
   * @generated from enum value: CONTAINS = 4;
   */
  CONTAINS = 4,

  /**
   * Full match for the regular expression with the string value.
   *
   * @generated from enum value: FULL_REGEXP = 5;
   */
  FULL_REGEXP = 5,

  /**
   * Partial match for the regular expression with the string value.
   *
   * @generated from enum value: PARTIAL_REGEXP = 6;
   */
  PARTIAL_REGEXP = 6,
}

/**
 * Describes the enum google.analytics.data.v1beta.Filter.StringFilter.MatchType.
 */
export const Filter_StringFilter_MatchTypeSchema: GenEnum<Filter_StringFilter_MatchType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 8, 0, 0);

/**
 * The result needs to be in a list of string values.
 *
 * @generated from message google.analytics.data.v1beta.Filter.InListFilter
 */
export type Filter_InListFilter = Message<"google.analytics.data.v1beta.Filter.InListFilter"> & {
  /**
   * The list of string values.
   * Must be non-empty.
   *
   * @generated from field: repeated string values = 1;
   */
  values: string[];

  /**
   * If true, the string value is case sensitive.
   *
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message google.analytics.data.v1beta.Filter.InListFilter.
 * Use `create(Filter_InListFilterSchema)` to create a new message.
 */
export const Filter_InListFilterSchema: GenMessage<Filter_InListFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 8, 1);

/**
 * Filters for numeric or date values.
 *
 * @generated from message google.analytics.data.v1beta.Filter.NumericFilter
 */
export type Filter_NumericFilter = Message<"google.analytics.data.v1beta.Filter.NumericFilter"> & {
  /**
   * The operation type for this filter.
   *
   * @generated from field: google.analytics.data.v1beta.Filter.NumericFilter.Operation operation = 1;
   */
  operation: Filter_NumericFilter_Operation;

  /**
   * A numeric value or a date value.
   *
   * @generated from field: google.analytics.data.v1beta.NumericValue value = 2;
   */
  value?: NumericValue;
};

/**
 * Describes the message google.analytics.data.v1beta.Filter.NumericFilter.
 * Use `create(Filter_NumericFilterSchema)` to create a new message.
 */
export const Filter_NumericFilterSchema: GenMessage<Filter_NumericFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 8, 2);

/**
 * The operation applied to a numeric filter
 *
 * @generated from enum google.analytics.data.v1beta.Filter.NumericFilter.Operation
 */
export enum Filter_NumericFilter_Operation {
  /**
   * Unspecified.
   *
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  OPERATION_UNSPECIFIED = 0,

  /**
   * Equal
   *
   * @generated from enum value: EQUAL = 1;
   */
  EQUAL = 1,

  /**
   * Less than
   *
   * @generated from enum value: LESS_THAN = 2;
   */
  LESS_THAN = 2,

  /**
   * Less than or equal
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 3;
   */
  LESS_THAN_OR_EQUAL = 3,

  /**
   * Greater than
   *
   * @generated from enum value: GREATER_THAN = 4;
   */
  GREATER_THAN = 4,

  /**
   * Greater than or equal
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 5;
   */
  GREATER_THAN_OR_EQUAL = 5,
}

/**
 * Describes the enum google.analytics.data.v1beta.Filter.NumericFilter.Operation.
 */
export const Filter_NumericFilter_OperationSchema: GenEnum<Filter_NumericFilter_Operation> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 8, 2, 0);

/**
 * To express that the result needs to be between two numbers (inclusive).
 *
 * @generated from message google.analytics.data.v1beta.Filter.BetweenFilter
 */
export type Filter_BetweenFilter = Message<"google.analytics.data.v1beta.Filter.BetweenFilter"> & {
  /**
   * Begins with this number.
   *
   * @generated from field: google.analytics.data.v1beta.NumericValue from_value = 1;
   */
  fromValue?: NumericValue;

  /**
   * Ends with this number.
   *
   * @generated from field: google.analytics.data.v1beta.NumericValue to_value = 2;
   */
  toValue?: NumericValue;
};

/**
 * Describes the message google.analytics.data.v1beta.Filter.BetweenFilter.
 * Use `create(Filter_BetweenFilterSchema)` to create a new message.
 */
export const Filter_BetweenFilterSchema: GenMessage<Filter_BetweenFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 8, 3);

/**
 * Order bys define how rows will be sorted in the response. For example,
 * ordering rows by descending event count is one ordering, and ordering rows by
 * the event name string is a different ordering.
 *
 * @generated from message google.analytics.data.v1beta.OrderBy
 */
export type OrderBy = Message<"google.analytics.data.v1beta.OrderBy"> & {
  /**
   * Specify one type of order by for `OrderBy`.
   *
   * @generated from oneof google.analytics.data.v1beta.OrderBy.one_order_by
   */
  oneOrderBy: {
    /**
     * Sorts results by a metric's values.
     *
     * @generated from field: google.analytics.data.v1beta.OrderBy.MetricOrderBy metric = 1;
     */
    value: OrderBy_MetricOrderBy;
    case: "metric";
  } | {
    /**
     * Sorts results by a dimension's values.
     *
     * @generated from field: google.analytics.data.v1beta.OrderBy.DimensionOrderBy dimension = 2;
     */
    value: OrderBy_DimensionOrderBy;
    case: "dimension";
  } | {
    /**
     * Sorts results by a metric's values within a pivot column group.
     *
     * @generated from field: google.analytics.data.v1beta.OrderBy.PivotOrderBy pivot = 3;
     */
    value: OrderBy_PivotOrderBy;
    case: "pivot";
  } | { case: undefined; value?: undefined };

  /**
   * If true, sorts by descending order.
   *
   * @generated from field: bool desc = 4;
   */
  desc: boolean;
};

/**
 * Describes the message google.analytics.data.v1beta.OrderBy.
 * Use `create(OrderBySchema)` to create a new message.
 */
export const OrderBySchema: GenMessage<OrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 9);

/**
 * Sorts by metric values.
 *
 * @generated from message google.analytics.data.v1beta.OrderBy.MetricOrderBy
 */
export type OrderBy_MetricOrderBy = Message<"google.analytics.data.v1beta.OrderBy.MetricOrderBy"> & {
  /**
   * A metric name in the request to order by.
   *
   * @generated from field: string metric_name = 1;
   */
  metricName: string;
};

/**
 * Describes the message google.analytics.data.v1beta.OrderBy.MetricOrderBy.
 * Use `create(OrderBy_MetricOrderBySchema)` to create a new message.
 */
export const OrderBy_MetricOrderBySchema: GenMessage<OrderBy_MetricOrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 9, 0);

/**
 * Sorts by dimension values.
 *
 * @generated from message google.analytics.data.v1beta.OrderBy.DimensionOrderBy
 */
export type OrderBy_DimensionOrderBy = Message<"google.analytics.data.v1beta.OrderBy.DimensionOrderBy"> & {
  /**
   * A dimension name in the request to order by.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;

  /**
   * Controls the rule for dimension value ordering.
   *
   * @generated from field: google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType order_type = 2;
   */
  orderType: OrderBy_DimensionOrderBy_OrderType;
};

/**
 * Describes the message google.analytics.data.v1beta.OrderBy.DimensionOrderBy.
 * Use `create(OrderBy_DimensionOrderBySchema)` to create a new message.
 */
export const OrderBy_DimensionOrderBySchema: GenMessage<OrderBy_DimensionOrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 9, 1);

/**
 * Rule to order the string dimension values by.
 *
 * @generated from enum google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType
 */
export enum OrderBy_DimensionOrderBy_OrderType {
  /**
   * Unspecified.
   *
   * @generated from enum value: ORDER_TYPE_UNSPECIFIED = 0;
   */
  ORDER_TYPE_UNSPECIFIED = 0,

  /**
   * Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X" <
   * "b" < "z".
   *
   * @generated from enum value: ALPHANUMERIC = 1;
   */
  ALPHANUMERIC = 1,

  /**
   * Case insensitive alphanumeric sort by lower case Unicode code point.
   * For example, "2" < "A" < "b" < "X" < "z".
   *
   * @generated from enum value: CASE_INSENSITIVE_ALPHANUMERIC = 2;
   */
  CASE_INSENSITIVE_ALPHANUMERIC = 2,

  /**
   * Dimension values are converted to numbers before sorting. For example
   * in NUMERIC sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" <
   * "25". Non-numeric dimension values all have equal ordering value below
   * all numeric values.
   *
   * @generated from enum value: NUMERIC = 3;
   */
  NUMERIC = 3,
}

/**
 * Describes the enum google.analytics.data.v1beta.OrderBy.DimensionOrderBy.OrderType.
 */
export const OrderBy_DimensionOrderBy_OrderTypeSchema: GenEnum<OrderBy_DimensionOrderBy_OrderType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 9, 1, 0);

/**
 * Sorts by a pivot column group.
 *
 * @generated from message google.analytics.data.v1beta.OrderBy.PivotOrderBy
 */
export type OrderBy_PivotOrderBy = Message<"google.analytics.data.v1beta.OrderBy.PivotOrderBy"> & {
  /**
   * In the response to order by, order rows by this column. Must be a metric
   * name from the request.
   *
   * @generated from field: string metric_name = 1;
   */
  metricName: string;

  /**
   * Used to select a dimension name and value pivot. If multiple pivot
   * selections are given, the sort occurs on rows where all pivot selection
   * dimension name and value pairs match the row's dimension name and value
   * pair.
   *
   * @generated from field: repeated google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection pivot_selections = 2;
   */
  pivotSelections: OrderBy_PivotOrderBy_PivotSelection[];
};

/**
 * Describes the message google.analytics.data.v1beta.OrderBy.PivotOrderBy.
 * Use `create(OrderBy_PivotOrderBySchema)` to create a new message.
 */
export const OrderBy_PivotOrderBySchema: GenMessage<OrderBy_PivotOrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 9, 2);

/**
 * A pair of dimension names and values. Rows with this dimension pivot pair
 * are ordered by the metric's value.
 *
 * For example if pivots = {{"browser", "Chrome"}} and
 * metric_name = "Sessions",
 * then the rows will be sorted based on Sessions in Chrome.
 *
 *     ---------|----------|----------------|----------|----------------
 *              |  Chrome  |    Chrome      |  Safari  |     Safari
 *     ---------|----------|----------------|----------|----------------
 *      Country | Sessions | Pages/Sessions | Sessions | Pages/Sessions
 *     ---------|----------|----------------|----------|----------------
 *         US   |    2     |       2        |     3    |        1
 *     ---------|----------|----------------|----------|----------------
 *       Canada |    3     |       1        |     4    |        1
 *     ---------|----------|----------------|----------|----------------
 *
 * @generated from message google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection
 */
export type OrderBy_PivotOrderBy_PivotSelection = Message<"google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection"> & {
  /**
   * Must be a dimension name from the request.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;

  /**
   * Order by only when the named dimension is this value.
   *
   * @generated from field: string dimension_value = 2;
   */
  dimensionValue: string;
};

/**
 * Describes the message google.analytics.data.v1beta.OrderBy.PivotOrderBy.PivotSelection.
 * Use `create(OrderBy_PivotOrderBy_PivotSelectionSchema)` to create a new message.
 */
export const OrderBy_PivotOrderBy_PivotSelectionSchema: GenMessage<OrderBy_PivotOrderBy_PivotSelection> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 9, 2, 0);

/**
 * Describes the visible dimension columns and rows in the report response.
 *
 * @generated from message google.analytics.data.v1beta.Pivot
 */
export type Pivot = Message<"google.analytics.data.v1beta.Pivot"> & {
  /**
   * Dimension names for visible columns in the report response. Including
   * "dateRange" produces a date range column; for each row in the response,
   * dimension values in the date range column will indicate the corresponding
   * date range from the request.
   *
   * @generated from field: repeated string field_names = 1;
   */
  fieldNames: string[];

  /**
   * Specifies how dimensions are ordered in the pivot. In the first Pivot, the
   * OrderBys determine Row and PivotDimensionHeader ordering; in subsequent
   * Pivots, the OrderBys determine only PivotDimensionHeader ordering.
   * Dimensions specified in these OrderBys must be a subset of
   * Pivot.field_names.
   *
   * @generated from field: repeated google.analytics.data.v1beta.OrderBy order_bys = 2;
   */
  orderBys: OrderBy[];

  /**
   * The row count of the start row. The first row is counted as row 0.
   *
   * @generated from field: int64 offset = 3;
   */
  offset: bigint;

  /**
   * The number of unique combinations of dimension values to return in this
   * pivot. The `limit` parameter is required. A `limit` of 10,000 is common for
   * single pivot requests.
   *
   * The product of the `limit` for each `pivot` in a `RunPivotReportRequest`
   * must not exceed 250,000. For example, a two pivot request with `limit:
   * 1000` in each pivot will fail because the product is `1,000,000`.
   *
   * @generated from field: int64 limit = 4;
   */
  limit: bigint;

  /**
   * Aggregate the metrics by dimensions in this pivot using the specified
   * metric_aggregations.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricAggregation metric_aggregations = 5;
   */
  metricAggregations: MetricAggregation[];
};

/**
 * Describes the message google.analytics.data.v1beta.Pivot.
 * Use `create(PivotSchema)` to create a new message.
 */
export const PivotSchema: GenMessage<Pivot> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 10);

/**
 * The specification of cohorts for a cohort report.
 *
 * Cohort reports create a time series of user retention for the cohort. For
 * example, you could select the cohort of users that were acquired in the first
 * week of September and follow that cohort for the next six weeks. Selecting
 * the users acquired in the first week of September cohort is specified in the
 * `cohort` object. Following that cohort for the next six weeks is specified in
 * the `cohortsRange` object.
 *
 * For examples, see [Cohort Report
 * Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples).
 *
 * The report response could show a weekly time series where say your app has
 * retained 60% of this cohort after three weeks and 25% of this cohort after
 * six weeks. These two percentages can be calculated by the metric
 * `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
 *
 * @generated from message google.analytics.data.v1beta.CohortSpec
 */
export type CohortSpec = Message<"google.analytics.data.v1beta.CohortSpec"> & {
  /**
   * Defines the selection criteria to group users into cohorts.
   *
   * Most cohort reports define only a single cohort. If multiple cohorts are
   * specified, each cohort can be recognized in the report by their name.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Cohort cohorts = 1;
   */
  cohorts: Cohort[];

  /**
   * Cohort reports follow cohorts over an extended reporting date range. This
   * range specifies an offset duration to follow the cohorts over.
   *
   * @generated from field: google.analytics.data.v1beta.CohortsRange cohorts_range = 2;
   */
  cohortsRange?: CohortsRange;

  /**
   * Optional settings for a cohort report.
   *
   * @generated from field: google.analytics.data.v1beta.CohortReportSettings cohort_report_settings = 3;
   */
  cohortReportSettings?: CohortReportSettings;
};

/**
 * Describes the message google.analytics.data.v1beta.CohortSpec.
 * Use `create(CohortSpecSchema)` to create a new message.
 */
export const CohortSpecSchema: GenMessage<CohortSpec> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 11);

/**
 * Defines a cohort selection criteria. A cohort is a group of users who share
 * a common characteristic. For example, users with the same `firstSessionDate`
 * belong to the same cohort.
 *
 * @generated from message google.analytics.data.v1beta.Cohort
 */
export type Cohort = Message<"google.analytics.data.v1beta.Cohort"> & {
  /**
   * Assigns a name to this cohort. The dimension `cohort` is valued to this
   * name in a report response. If set, cannot begin with `cohort_` or
   * `RESERVED_`. If not set, cohorts are named by their zero based index
   * `cohort_0`, `cohort_1`, etc.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Dimension used by the cohort. Required and only supports
   * `firstSessionDate`.
   *
   * @generated from field: string dimension = 2;
   */
  dimension: string;

  /**
   * The cohort selects users whose first touch date is between start date and
   * end date defined in the `dateRange`. This `dateRange` does not specify the
   * full date range of event data that is present in a cohort report. In a
   * cohort report, this `dateRange` is extended by the granularity and offset
   * present in the `cohortsRange`; event data for the extended reporting date
   * range is present in a cohort report.
   *
   * In a cohort request, this `dateRange` is required and the `dateRanges` in
   * the `RunReportRequest` or `RunPivotReportRequest` must be unspecified.
   *
   * This `dateRange` should generally be aligned with the cohort's granularity.
   * If `CohortsRange` uses daily granularity, this `dateRange` can be a single
   * day. If `CohortsRange` uses weekly granularity, this `dateRange` can be
   * aligned to a week boundary, starting at Sunday and ending Saturday. If
   * `CohortsRange` uses monthly granularity, this `dateRange` can be aligned to
   * a month, starting at the first and ending on the last day of the month.
   *
   * @generated from field: google.analytics.data.v1beta.DateRange date_range = 3;
   */
  dateRange?: DateRange;
};

/**
 * Describes the message google.analytics.data.v1beta.Cohort.
 * Use `create(CohortSchema)` to create a new message.
 */
export const CohortSchema: GenMessage<Cohort> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 12);

/**
 * Configures the extended reporting date range for a cohort report. Specifies
 * an offset duration to follow the cohorts over.
 *
 * @generated from message google.analytics.data.v1beta.CohortsRange
 */
export type CohortsRange = Message<"google.analytics.data.v1beta.CohortsRange"> & {
  /**
   * Required. The granularity used to interpret the `startOffset` and
   * `endOffset` for the extended reporting date range for a cohort report.
   *
   * @generated from field: google.analytics.data.v1beta.CohortsRange.Granularity granularity = 1;
   */
  granularity: CohortsRange_Granularity;

  /**
   * `startOffset` specifies the start date of the extended reporting date range
   * for a cohort report. `startOffset` is commonly set to 0 so that reports
   * contain data from the acquisition of the cohort forward.
   *
   * If `granularity` is `DAILY`, the `startDate` of the extended reporting date
   * range is `startDate` of the cohort plus `startOffset` days.
   *
   * If `granularity` is `WEEKLY`, the `startDate` of the extended reporting
   * date range is `startDate` of the cohort plus `startOffset * 7` days.
   *
   * If `granularity` is `MONTHLY`, the `startDate` of the extended reporting
   * date range is `startDate` of the cohort plus `startOffset * 30` days.
   *
   * @generated from field: int32 start_offset = 2;
   */
  startOffset: number;

  /**
   * Required. `endOffset` specifies the end date of the extended reporting date
   * range for a cohort report. `endOffset` can be any positive integer but is
   * commonly set to 5 to 10 so that reports contain data on the cohort for the
   * next several granularity time periods.
   *
   * If `granularity` is `DAILY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset` days.
   *
   * If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset * 7` days.
   *
   * If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset * 30` days.
   *
   * @generated from field: int32 end_offset = 3;
   */
  endOffset: number;
};

/**
 * Describes the message google.analytics.data.v1beta.CohortsRange.
 * Use `create(CohortsRangeSchema)` to create a new message.
 */
export const CohortsRangeSchema: GenMessage<CohortsRange> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 13);

/**
 * The granularity used to interpret the `startOffset` and `endOffset` for the
 * extended reporting date range for a cohort report.
 *
 * @generated from enum google.analytics.data.v1beta.CohortsRange.Granularity
 */
export enum CohortsRange_Granularity {
  /**
   * Should never be specified.
   *
   * @generated from enum value: GRANULARITY_UNSPECIFIED = 0;
   */
  GRANULARITY_UNSPECIFIED = 0,

  /**
   * Daily granularity. Commonly used if the cohort's `dateRange` is a single
   * day and the request contains `cohortNthDay`.
   *
   * @generated from enum value: DAILY = 1;
   */
  DAILY = 1,

  /**
   * Weekly granularity. Commonly used if the cohort's `dateRange` is a week
   * in duration (starting on Sunday and ending on Saturday) and the request
   * contains `cohortNthWeek`.
   *
   * @generated from enum value: WEEKLY = 2;
   */
  WEEKLY = 2,

  /**
   * Monthly granularity. Commonly used if the cohort's `dateRange` is a month
   * in duration and the request contains `cohortNthMonth`.
   *
   * @generated from enum value: MONTHLY = 3;
   */
  MONTHLY = 3,
}

/**
 * Describes the enum google.analytics.data.v1beta.CohortsRange.Granularity.
 */
export const CohortsRange_GranularitySchema: GenEnum<CohortsRange_Granularity> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 13, 0);

/**
 * Optional settings of a cohort report.
 *
 * @generated from message google.analytics.data.v1beta.CohortReportSettings
 */
export type CohortReportSettings = Message<"google.analytics.data.v1beta.CohortReportSettings"> & {
  /**
   * If true, accumulates the result from first touch day to the end day. Not
   * supported in `RunReportRequest`.
   *
   * @generated from field: bool accumulate = 1;
   */
  accumulate: boolean;
};

/**
 * Describes the message google.analytics.data.v1beta.CohortReportSettings.
 * Use `create(CohortReportSettingsSchema)` to create a new message.
 */
export const CohortReportSettingsSchema: GenMessage<CohortReportSettings> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 14);

/**
 * Response's metadata carrying additional information about the report content.
 *
 * @generated from message google.analytics.data.v1beta.ResponseMetaData
 */
export type ResponseMetaData = Message<"google.analytics.data.v1beta.ResponseMetaData"> & {
  /**
   * If true, indicates some buckets of dimension combinations are rolled into
   * "(other)" row. This can happen for high cardinality reports.
   *
   * The metadata parameter dataLossFromOtherRow is populated based on the
   * aggregated data table used in the report. The parameter will be accurately
   * populated regardless of the filters and limits in the report.
   *
   * For example, the (other) row could be dropped from the report because the
   * request contains a filter on sessionSource = google. This parameter will
   * still be populated if data loss from other row was present in the input
   * aggregate data used to generate this report.
   *
   * To learn more, see [About the (other) row and data
   * sampling](https://support.google.com/analytics/answer/13208658#reports).
   *
   * @generated from field: bool data_loss_from_other_row = 3;
   */
  dataLossFromOtherRow: boolean;

  /**
   * Describes the schema restrictions actively enforced in creating this
   * report. To learn more, see [Access and data-restriction
   * management](https://support.google.com/analytics/answer/10851388).
   *
   * @generated from field: optional google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse schema_restriction_response = 4;
   */
  schemaRestrictionResponse?: ResponseMetaData_SchemaRestrictionResponse;

  /**
   * The currency code used in this report. Intended to be used in formatting
   * currency metrics like `purchaseRevenue` for visualization. If currency_code
   * was specified in the request, this response parameter will echo the request
   * parameter; otherwise, this response parameter is the property's current
   * currency_code.
   *
   * Currency codes are string encodings of currency types from the ISO 4217
   * standard (https://en.wikipedia.org/wiki/ISO_4217); for example "USD",
   * "EUR", "JPY". To learn more, see
   * https://support.google.com/analytics/answer/9796179.
   *
   * @generated from field: optional string currency_code = 5;
   */
  currencyCode?: string;

  /**
   * The property's current timezone. Intended to be used to interpret
   * time-based dimensions like `hour` and `minute`. Formatted as strings from
   * the IANA Time Zone database (https://www.iana.org/time-zones); for example
   * "America/New_York" or "Asia/Tokyo".
   *
   * @generated from field: optional string time_zone = 6;
   */
  timeZone?: string;

  /**
   * If empty reason is specified, the report is empty for this reason.
   *
   * @generated from field: optional string empty_reason = 7;
   */
  emptyReason?: string;

  /**
   * If `subjectToThresholding` is true, this report is subject to thresholding
   * and only returns data that meets the minimum aggregation thresholds. It is
   * possible for a request to be subject to thresholding thresholding and no
   * data is absent from the report, and this happens when all data is above the
   * thresholds. To learn more, see [Data
   * thresholds](https://support.google.com/analytics/answer/9383630).
   *
   * @generated from field: optional bool subject_to_thresholding = 8;
   */
  subjectToThresholding?: boolean;

  /**
   * If this report results is
   * [sampled](https://support.google.com/analytics/answer/13331292), this
   * describes the percentage of events used in this report. One
   * `samplingMetadatas` is populated for each date range. Each
   * `samplingMetadatas` corresponds to a date range in order that date ranges
   * were specified in the request.
   *
   * However if the results are not sampled, this field will not be defined.
   *
   * @generated from field: repeated google.analytics.data.v1beta.SamplingMetadata sampling_metadatas = 9;
   */
  samplingMetadatas: SamplingMetadata[];
};

/**
 * Describes the message google.analytics.data.v1beta.ResponseMetaData.
 * Use `create(ResponseMetaDataSchema)` to create a new message.
 */
export const ResponseMetaDataSchema: GenMessage<ResponseMetaData> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 15);

/**
 * The schema restrictions actively enforced in creating this report. To learn
 * more, see [Access and data-restriction
 * management](https://support.google.com/analytics/answer/10851388).
 *
 * @generated from message google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse
 */
export type ResponseMetaData_SchemaRestrictionResponse = Message<"google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse"> & {
  /**
   * All restrictions actively enforced in creating the report. For example,
   * `purchaseRevenue` always has the restriction type `REVENUE_DATA`.
   * However, this active response restriction is only populated if the user's
   * custom role disallows access to `REVENUE_DATA`.
   *
   * @generated from field: repeated google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction active_metric_restrictions = 1;
   */
  activeMetricRestrictions: ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction[];
};

/**
 * Describes the message google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse.
 * Use `create(ResponseMetaData_SchemaRestrictionResponseSchema)` to create a new message.
 */
export const ResponseMetaData_SchemaRestrictionResponseSchema: GenMessage<ResponseMetaData_SchemaRestrictionResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 15, 0);

/**
 * A metric actively restricted in creating the report.
 *
 * @generated from message google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction
 */
export type ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction = Message<"google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction"> & {
  /**
   * The name of the restricted metric.
   *
   * @generated from field: optional string metric_name = 1;
   */
  metricName?: string;

  /**
   * The reason for this metric's restriction.
   *
   * @generated from field: repeated google.analytics.data.v1beta.RestrictedMetricType restricted_metric_types = 2;
   */
  restrictedMetricTypes: RestrictedMetricType[];
};

/**
 * Describes the message google.analytics.data.v1beta.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction.
 * Use `create(ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestrictionSchema)` to create a new message.
 */
export const ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestrictionSchema: GenMessage<ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 15, 0, 0);

/**
 * If this report results is
 * [sampled](https://support.google.com/analytics/answer/13331292), this
 * describes the percentage of events used in this report. Sampling is the
 * practice of analyzing a subset of all data in order to uncover the meaningful
 * information in the larger data set.
 *
 * @generated from message google.analytics.data.v1beta.SamplingMetadata
 */
export type SamplingMetadata = Message<"google.analytics.data.v1beta.SamplingMetadata"> & {
  /**
   * The total number of events read in this sampled report for a date range.
   * This is the size of the subset this property's data that was analyzed in
   * this report.
   *
   * @generated from field: int64 samples_read_count = 1;
   */
  samplesReadCount: bigint;

  /**
   * The total number of events present in this property's data that could
   * have been analyzed in this report for a date range. Sampling
   * uncovers the meaningful information about the larger data set, and this
   * is the size of the larger data set.
   *
   * To calculate the percentage of available data that was used in this
   * report, compute `samplesReadCount/samplingSpaceSize`.
   *
   * @generated from field: int64 sampling_space_size = 2;
   */
  samplingSpaceSize: bigint;
};

/**
 * Describes the message google.analytics.data.v1beta.SamplingMetadata.
 * Use `create(SamplingMetadataSchema)` to create a new message.
 */
export const SamplingMetadataSchema: GenMessage<SamplingMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 16);

/**
 * Describes a dimension column in the report. Dimensions requested in a report
 * produce column entries within rows and DimensionHeaders. However, dimensions
 * used exclusively within filters or expressions do not produce columns in a
 * report; correspondingly, those dimensions do not produce headers.
 *
 * @generated from message google.analytics.data.v1beta.DimensionHeader
 */
export type DimensionHeader = Message<"google.analytics.data.v1beta.DimensionHeader"> & {
  /**
   * The dimension's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionHeader.
 * Use `create(DimensionHeaderSchema)` to create a new message.
 */
export const DimensionHeaderSchema: GenMessage<DimensionHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 17);

/**
 * Describes a metric column in the report. Visible metrics requested in a
 * report produce column entries within rows and MetricHeaders. However,
 * metrics used exclusively within filters or expressions do not produce columns
 * in a report; correspondingly, those metrics do not produce headers.
 *
 * @generated from message google.analytics.data.v1beta.MetricHeader
 */
export type MetricHeader = Message<"google.analytics.data.v1beta.MetricHeader"> & {
  /**
   * The metric's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The metric's data type.
   *
   * @generated from field: google.analytics.data.v1beta.MetricType type = 2;
   */
  type: MetricType;
};

/**
 * Describes the message google.analytics.data.v1beta.MetricHeader.
 * Use `create(MetricHeaderSchema)` to create a new message.
 */
export const MetricHeaderSchema: GenMessage<MetricHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 18);

/**
 * Dimensions' values in a single pivot.
 *
 * @generated from message google.analytics.data.v1beta.PivotHeader
 */
export type PivotHeader = Message<"google.analytics.data.v1beta.PivotHeader"> & {
  /**
   * The size is the same as the cardinality of the corresponding dimension
   * combinations.
   *
   * @generated from field: repeated google.analytics.data.v1beta.PivotDimensionHeader pivot_dimension_headers = 1;
   */
  pivotDimensionHeaders: PivotDimensionHeader[];

  /**
   * The cardinality of the pivot. The total number of rows for this pivot's
   * fields regardless of how the parameters `offset` and `limit` are specified
   * in the request.
   *
   * @generated from field: int32 row_count = 2;
   */
  rowCount: number;
};

/**
 * Describes the message google.analytics.data.v1beta.PivotHeader.
 * Use `create(PivotHeaderSchema)` to create a new message.
 */
export const PivotHeaderSchema: GenMessage<PivotHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 19);

/**
 * Summarizes dimension values from a row for this pivot.
 *
 * @generated from message google.analytics.data.v1beta.PivotDimensionHeader
 */
export type PivotDimensionHeader = Message<"google.analytics.data.v1beta.PivotDimensionHeader"> & {
  /**
   * Values of multiple dimensions in a pivot.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionValue dimension_values = 1;
   */
  dimensionValues: DimensionValue[];
};

/**
 * Describes the message google.analytics.data.v1beta.PivotDimensionHeader.
 * Use `create(PivotDimensionHeaderSchema)` to create a new message.
 */
export const PivotDimensionHeaderSchema: GenMessage<PivotDimensionHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 20);

/**
 * Report data for each row.
 * For example if RunReportRequest contains:
 *
 * ```none
 * "dimensions": [
 *   {
 *     "name": "eventName"
 *   },
 *   {
 *     "name": "countryId"
 *   }
 * ],
 * "metrics": [
 *   {
 *     "name": "eventCount"
 *   }
 * ]
 * ```
 *
 * One row with 'in_app_purchase' as the eventName, 'JP' as the countryId, and
 * 15 as the eventCount, would be:
 *
 * ```none
 * "dimensionValues": [
 *   {
 *     "value": "in_app_purchase"
 *   },
 *   {
 *     "value": "JP"
 *   }
 * ],
 * "metricValues": [
 *   {
 *     "value": "15"
 *   }
 * ]
 * ```
 *
 * @generated from message google.analytics.data.v1beta.Row
 */
export type Row = Message<"google.analytics.data.v1beta.Row"> & {
  /**
   * List of requested dimension values. In a PivotReport, dimension_values
   * are only listed for dimensions included in a pivot.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionValue dimension_values = 1;
   */
  dimensionValues: DimensionValue[];

  /**
   * List of requested visible metric values.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricValue metric_values = 2;
   */
  metricValues: MetricValue[];
};

/**
 * Describes the message google.analytics.data.v1beta.Row.
 * Use `create(RowSchema)` to create a new message.
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 21);

/**
 * The value of a dimension.
 *
 * @generated from message google.analytics.data.v1beta.DimensionValue
 */
export type DimensionValue = Message<"google.analytics.data.v1beta.DimensionValue"> & {
  /**
   * One kind of dimension value
   *
   * @generated from oneof google.analytics.data.v1beta.DimensionValue.one_value
   */
  oneValue: {
    /**
     * Value as a string if the dimension type is a string.
     *
     * @generated from field: string value = 1;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionValue.
 * Use `create(DimensionValueSchema)` to create a new message.
 */
export const DimensionValueSchema: GenMessage<DimensionValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 22);

/**
 * The value of a metric.
 *
 * @generated from message google.analytics.data.v1beta.MetricValue
 */
export type MetricValue = Message<"google.analytics.data.v1beta.MetricValue"> & {
  /**
   * One of metric value
   *
   * @generated from oneof google.analytics.data.v1beta.MetricValue.one_value
   */
  oneValue: {
    /**
     * Measurement value. See MetricHeader for type.
     *
     * @generated from field: string value = 4;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.MetricValue.
 * Use `create(MetricValueSchema)` to create a new message.
 */
export const MetricValueSchema: GenMessage<MetricValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 23);

/**
 * To represent a number.
 *
 * @generated from message google.analytics.data.v1beta.NumericValue
 */
export type NumericValue = Message<"google.analytics.data.v1beta.NumericValue"> & {
  /**
   * One of a numeric value
   *
   * @generated from oneof google.analytics.data.v1beta.NumericValue.one_value
   */
  oneValue: {
    /**
     * Integer value
     *
     * @generated from field: int64 int64_value = 1;
     */
    value: bigint;
    case: "int64Value";
  } | {
    /**
     * Double value
     *
     * @generated from field: double double_value = 2;
     */
    value: number;
    case: "doubleValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.NumericValue.
 * Use `create(NumericValueSchema)` to create a new message.
 */
export const NumericValueSchema: GenMessage<NumericValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 24);

/**
 * Current state of all quotas for this Analytics Property. If any quota for a
 * property is exhausted, all requests to that property will return Resource
 * Exhausted errors.
 *
 * @generated from message google.analytics.data.v1beta.PropertyQuota
 */
export type PropertyQuota = Message<"google.analytics.data.v1beta.PropertyQuota"> & {
  /**
   * Standard Analytics Properties can use up to 200,000 tokens per day;
   * Analytics 360 Properties can use 2,000,000 tokens per day. Most requests
   * consume fewer than 10 tokens.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus tokens_per_day = 1;
   */
  tokensPerDay?: QuotaStatus;

  /**
   * Standard Analytics Properties can use up to 40,000 tokens per hour;
   * Analytics 360 Properties can use 400,000 tokens per hour. An API request
   * consumes a single number of tokens, and that number is deducted from all of
   * the hourly, daily, and per project hourly quotas.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus tokens_per_hour = 2;
   */
  tokensPerHour?: QuotaStatus;

  /**
   * Standard Analytics Properties can send up to 10 concurrent requests;
   * Analytics 360 Properties can use up to 50 concurrent requests.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus concurrent_requests = 3;
   */
  concurrentRequests?: QuotaStatus;

  /**
   * Standard Analytics Properties and cloud project pairs can have up to 10
   * server errors per hour; Analytics 360 Properties and cloud project pairs
   * can have up to 50 server errors per hour.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus server_errors_per_project_per_hour = 4;
   */
  serverErrorsPerProjectPerHour?: QuotaStatus;

  /**
   * Analytics Properties can send up to 120 requests with potentially
   * thresholded dimensions per hour. In a batch request, each report request
   * is individually counted for this quota if the request contains potentially
   * thresholded dimensions.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus potentially_thresholded_requests_per_hour = 5;
   */
  potentiallyThresholdedRequestsPerHour?: QuotaStatus;

  /**
   * Analytics Properties can use up to 35% of their tokens per project per
   * hour. This amounts to standard Analytics Properties can use up to 14,000
   * tokens per project per hour, and Analytics 360 Properties can use 140,000
   * tokens per project per hour. An API request consumes a single number of
   * tokens, and that number is deducted from all of the hourly, daily, and per
   * project hourly quotas.
   *
   * @generated from field: google.analytics.data.v1beta.QuotaStatus tokens_per_project_per_hour = 6;
   */
  tokensPerProjectPerHour?: QuotaStatus;
};

/**
 * Describes the message google.analytics.data.v1beta.PropertyQuota.
 * Use `create(PropertyQuotaSchema)` to create a new message.
 */
export const PropertyQuotaSchema: GenMessage<PropertyQuota> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 25);

/**
 * Current state for a particular quota group.
 *
 * @generated from message google.analytics.data.v1beta.QuotaStatus
 */
export type QuotaStatus = Message<"google.analytics.data.v1beta.QuotaStatus"> & {
  /**
   * Quota consumed by this request.
   *
   * @generated from field: optional int32 consumed = 1;
   */
  consumed?: number;

  /**
   * Quota remaining after this request.
   *
   * @generated from field: optional int32 remaining = 2;
   */
  remaining?: number;
};

/**
 * Describes the message google.analytics.data.v1beta.QuotaStatus.
 * Use `create(QuotaStatusSchema)` to create a new message.
 */
export const QuotaStatusSchema: GenMessage<QuotaStatus> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 26);

/**
 * Explains a dimension.
 *
 * @generated from message google.analytics.data.v1beta.DimensionMetadata
 */
export type DimensionMetadata = Message<"google.analytics.data.v1beta.DimensionMetadata"> & {
  /**
   * This dimension's name. Useable in [Dimension](#Dimension)'s `name`. For
   * example, `eventName`.
   *
   * @generated from field: string api_name = 1;
   */
  apiName: string;

  /**
   * This dimension's name within the Google Analytics user interface. For
   * example, `Event name`.
   *
   * @generated from field: string ui_name = 2;
   */
  uiName: string;

  /**
   * Description of how this dimension is used and calculated.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Still usable but deprecated names for this dimension. If populated, this
   * dimension is available by either `apiName` or one of `deprecatedApiNames`
   * for a period of time. After the deprecation period, the dimension will be
   * available only by `apiName`.
   *
   * @generated from field: repeated string deprecated_api_names = 4;
   */
  deprecatedApiNames: string[];

  /**
   * True if the dimension is custom to this property. This includes user,
   * event, & item scoped custom dimensions; to learn more about custom
   * dimensions, see https://support.google.com/analytics/answer/14240153. This
   * also include custom channel groups; to learn more about custom channel
   * groups, see https://support.google.com/analytics/answer/13051316.
   *
   * @generated from field: bool custom_definition = 5;
   */
  customDefinition: boolean;

  /**
   * The display name of the category that this dimension belongs to. Similar
   * dimensions and metrics are categorized together.
   *
   * @generated from field: string category = 7;
   */
  category: string;
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionMetadata.
 * Use `create(DimensionMetadataSchema)` to create a new message.
 */
export const DimensionMetadataSchema: GenMessage<DimensionMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 27);

/**
 * Explains a metric.
 *
 * @generated from message google.analytics.data.v1beta.MetricMetadata
 */
export type MetricMetadata = Message<"google.analytics.data.v1beta.MetricMetadata"> & {
  /**
   * A metric name. Useable in [Metric](#Metric)'s `name`. For example,
   * `eventCount`.
   *
   * @generated from field: string api_name = 1;
   */
  apiName: string;

  /**
   * This metric's name within the Google Analytics user interface. For example,
   * `Event count`.
   *
   * @generated from field: string ui_name = 2;
   */
  uiName: string;

  /**
   * Description of how this metric is used and calculated.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Still usable but deprecated names for this metric. If populated, this
   * metric is available by either `apiName` or one of `deprecatedApiNames`
   * for a period of time. After the deprecation period, the metric will be
   * available only by `apiName`.
   *
   * @generated from field: repeated string deprecated_api_names = 4;
   */
  deprecatedApiNames: string[];

  /**
   * The type of this metric.
   *
   * @generated from field: google.analytics.data.v1beta.MetricType type = 5;
   */
  type: MetricType;

  /**
   * The mathematical expression for this derived metric. Can be used in
   * [Metric](#Metric)'s `expression` field for equivalent reports. Most metrics
   * are not expressions, and for non-expressions, this field is empty.
   *
   * @generated from field: string expression = 6;
   */
  expression: string;

  /**
   * True if the metric is a custom metric for this property.
   *
   * @generated from field: bool custom_definition = 7;
   */
  customDefinition: boolean;

  /**
   * If reasons are specified, your access is blocked to this metric for this
   * property. API requests from you to this property for this metric will
   * succeed; however, the report will contain only zeros for this metric. API
   * requests with metric filters on blocked metrics will fail. If reasons are
   * empty, you have access to this metric.
   *
   * To learn more, see [Access and data-restriction
   * management](https://support.google.com/analytics/answer/10851388).
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricMetadata.BlockedReason blocked_reasons = 8;
   */
  blockedReasons: MetricMetadata_BlockedReason[];

  /**
   * The display name of the category that this metrics belongs to. Similar
   * dimensions and metrics are categorized together.
   *
   * @generated from field: string category = 10;
   */
  category: string;
};

/**
 * Describes the message google.analytics.data.v1beta.MetricMetadata.
 * Use `create(MetricMetadataSchema)` to create a new message.
 */
export const MetricMetadataSchema: GenMessage<MetricMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 28);

/**
 * Justifications for why this metric is blocked.
 *
 * @generated from enum google.analytics.data.v1beta.MetricMetadata.BlockedReason
 */
export enum MetricMetadata_BlockedReason {
  /**
   * Will never be specified in API response.
   *
   * @generated from enum value: BLOCKED_REASON_UNSPECIFIED = 0;
   */
  BLOCKED_REASON_UNSPECIFIED = 0,

  /**
   * If present, your access is blocked to revenue related metrics for this
   * property, and this metric is revenue related.
   *
   * @generated from enum value: NO_REVENUE_METRICS = 1;
   */
  NO_REVENUE_METRICS = 1,

  /**
   * If present, your access is blocked to cost related metrics for this
   * property, and this metric is cost related.
   *
   * @generated from enum value: NO_COST_METRICS = 2;
   */
  NO_COST_METRICS = 2,
}

/**
 * Describes the enum google.analytics.data.v1beta.MetricMetadata.BlockedReason.
 */
export const MetricMetadata_BlockedReasonSchema: GenEnum<MetricMetadata_BlockedReason> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 28, 0);

/**
 * The metadata for a single comparison.
 *
 * @generated from message google.analytics.data.v1beta.ComparisonMetadata
 */
export type ComparisonMetadata = Message<"google.analytics.data.v1beta.ComparisonMetadata"> & {
  /**
   * This comparison's resource name. Useable in [Comparison](#Comparison)'s
   * `comparison` field. For example, 'comparisons/1234'.
   *
   * @generated from field: string api_name = 1;
   */
  apiName: string;

  /**
   * This comparison's name within the Google Analytics user interface.
   *
   * @generated from field: string ui_name = 2;
   */
  uiName: string;

  /**
   * This comparison's description.
   *
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message google.analytics.data.v1beta.ComparisonMetadata.
 * Use `create(ComparisonMetadataSchema)` to create a new message.
 */
export const ComparisonMetadataSchema: GenMessage<ComparisonMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 29);

/**
 * The compatibility for a single dimension.
 *
 * @generated from message google.analytics.data.v1beta.DimensionCompatibility
 */
export type DimensionCompatibility = Message<"google.analytics.data.v1beta.DimensionCompatibility"> & {
  /**
   * The dimension metadata contains the API name for this compatibility
   * information. The dimension metadata also contains other helpful information
   * like the UI name and description.
   *
   * @generated from field: optional google.analytics.data.v1beta.DimensionMetadata dimension_metadata = 1;
   */
  dimensionMetadata?: DimensionMetadata;

  /**
   * The compatibility of this dimension. If the compatibility is COMPATIBLE,
   * this dimension can be successfully added to the report.
   *
   * @generated from field: optional google.analytics.data.v1beta.Compatibility compatibility = 2;
   */
  compatibility?: Compatibility;
};

/**
 * Describes the message google.analytics.data.v1beta.DimensionCompatibility.
 * Use `create(DimensionCompatibilitySchema)` to create a new message.
 */
export const DimensionCompatibilitySchema: GenMessage<DimensionCompatibility> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 30);

/**
 * The compatibility for a single metric.
 *
 * @generated from message google.analytics.data.v1beta.MetricCompatibility
 */
export type MetricCompatibility = Message<"google.analytics.data.v1beta.MetricCompatibility"> & {
  /**
   * The metric metadata contains the API name for this compatibility
   * information. The metric metadata also contains other helpful information
   * like the UI name and description.
   *
   * @generated from field: optional google.analytics.data.v1beta.MetricMetadata metric_metadata = 1;
   */
  metricMetadata?: MetricMetadata;

  /**
   * The compatibility of this metric. If the compatibility is COMPATIBLE,
   * this metric can be successfully added to the report.
   *
   * @generated from field: optional google.analytics.data.v1beta.Compatibility compatibility = 2;
   */
  compatibility?: Compatibility;
};

/**
 * Describes the message google.analytics.data.v1beta.MetricCompatibility.
 * Use `create(MetricCompatibilitySchema)` to create a new message.
 */
export const MetricCompatibilitySchema: GenMessage<MetricCompatibility> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_data, 31);

/**
 * Represents aggregation of metrics.
 *
 * @generated from enum google.analytics.data.v1beta.MetricAggregation
 */
export enum MetricAggregation {
  /**
   * Unspecified operator.
   *
   * @generated from enum value: METRIC_AGGREGATION_UNSPECIFIED = 0;
   */
  METRIC_AGGREGATION_UNSPECIFIED = 0,

  /**
   * SUM operator.
   *
   * @generated from enum value: TOTAL = 1;
   */
  TOTAL = 1,

  /**
   * Minimum operator.
   *
   * @generated from enum value: MINIMUM = 5;
   */
  MINIMUM = 5,

  /**
   * Maximum operator.
   *
   * @generated from enum value: MAXIMUM = 6;
   */
  MAXIMUM = 6,

  /**
   * Count operator.
   *
   * @generated from enum value: COUNT = 4;
   */
  COUNT = 4,
}

/**
 * Describes the enum google.analytics.data.v1beta.MetricAggregation.
 */
export const MetricAggregationSchema: GenEnum<MetricAggregation> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 0);

/**
 * A metric's value type.
 *
 * @generated from enum google.analytics.data.v1beta.MetricType
 */
export enum MetricType {
  /**
   * Unspecified type.
   *
   * @generated from enum value: METRIC_TYPE_UNSPECIFIED = 0;
   */
  METRIC_TYPE_UNSPECIFIED = 0,

  /**
   * Integer type.
   *
   * @generated from enum value: TYPE_INTEGER = 1;
   */
  TYPE_INTEGER = 1,

  /**
   * Floating point type.
   *
   * @generated from enum value: TYPE_FLOAT = 2;
   */
  TYPE_FLOAT = 2,

  /**
   * A duration of seconds; a special floating point type.
   *
   * @generated from enum value: TYPE_SECONDS = 4;
   */
  TYPE_SECONDS = 4,

  /**
   * A duration in milliseconds; a special floating point type.
   *
   * @generated from enum value: TYPE_MILLISECONDS = 5;
   */
  TYPE_MILLISECONDS = 5,

  /**
   * A duration in minutes; a special floating point type.
   *
   * @generated from enum value: TYPE_MINUTES = 6;
   */
  TYPE_MINUTES = 6,

  /**
   * A duration in hours; a special floating point type.
   *
   * @generated from enum value: TYPE_HOURS = 7;
   */
  TYPE_HOURS = 7,

  /**
   * A custom metric of standard type; a special floating point type.
   *
   * @generated from enum value: TYPE_STANDARD = 8;
   */
  TYPE_STANDARD = 8,

  /**
   * An amount of money; a special floating point type.
   *
   * @generated from enum value: TYPE_CURRENCY = 9;
   */
  TYPE_CURRENCY = 9,

  /**
   * A length in feet; a special floating point type.
   *
   * @generated from enum value: TYPE_FEET = 10;
   */
  TYPE_FEET = 10,

  /**
   * A length in miles; a special floating point type.
   *
   * @generated from enum value: TYPE_MILES = 11;
   */
  TYPE_MILES = 11,

  /**
   * A length in meters; a special floating point type.
   *
   * @generated from enum value: TYPE_METERS = 12;
   */
  TYPE_METERS = 12,

  /**
   * A length in kilometers; a special floating point type.
   *
   * @generated from enum value: TYPE_KILOMETERS = 13;
   */
  TYPE_KILOMETERS = 13,
}

/**
 * Describes the enum google.analytics.data.v1beta.MetricType.
 */
export const MetricTypeSchema: GenEnum<MetricType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 1);

/**
 * Categories of data that you may be restricted from viewing on certain GA4
 * properties.
 *
 * @generated from enum google.analytics.data.v1beta.RestrictedMetricType
 */
export enum RestrictedMetricType {
  /**
   * Unspecified type.
   *
   * @generated from enum value: RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0;
   */
  RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0,

  /**
   * Cost metrics such as `adCost`.
   *
   * @generated from enum value: COST_DATA = 1;
   */
  COST_DATA = 1,

  /**
   * Revenue metrics such as `purchaseRevenue`.
   *
   * @generated from enum value: REVENUE_DATA = 2;
   */
  REVENUE_DATA = 2,
}

/**
 * Describes the enum google.analytics.data.v1beta.RestrictedMetricType.
 */
export const RestrictedMetricTypeSchema: GenEnum<RestrictedMetricType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 2);

/**
 * The compatibility types for a single dimension or metric.
 *
 * @generated from enum google.analytics.data.v1beta.Compatibility
 */
export enum Compatibility {
  /**
   * Unspecified compatibility.
   *
   * @generated from enum value: COMPATIBILITY_UNSPECIFIED = 0;
   */
  COMPATIBILITY_UNSPECIFIED = 0,

  /**
   * The dimension or metric is compatible. This dimension or metric can be
   * successfully added to a report.
   *
   * @generated from enum value: COMPATIBLE = 1;
   */
  COMPATIBLE = 1,

  /**
   * The dimension or metric is incompatible. This dimension or metric cannot be
   * successfully added to a report.
   *
   * @generated from enum value: INCOMPATIBLE = 2;
   */
  INCOMPATIBLE = 2,
}

/**
 * Describes the enum google.analytics.data.v1beta.Compatibility.
 */
export const CompatibilitySchema: GenEnum<Compatibility> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_data, 3);

