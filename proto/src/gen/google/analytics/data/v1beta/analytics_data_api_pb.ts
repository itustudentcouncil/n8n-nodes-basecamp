// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/analytics/data/v1beta/analytics_data_api.proto (package google.analytics.data.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { CohortSpec, Comparison, ComparisonMetadata, Compatibility, DateRange, Dimension, DimensionCompatibility, DimensionHeader, DimensionMetadata, FilterExpression, Metric, MetricAggregation, MetricCompatibility, MetricHeader, MetricMetadata, MinuteRange, OrderBy, Pivot, PivotHeader, PropertyQuota, ResponseMetaData, Row } from "./data_pb";
import { file_google_analytics_data_v1beta_data } from "./data_pb";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/analytics/data/v1beta/analytics_data_api.proto.
 */
export const file_google_analytics_data_v1beta_analytics_data_api: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_analytics_data_v1beta_data, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * The request for compatibility information for a report's dimensions and
 * metrics. Check compatibility provides a preview of the compatibility of a
 * report; fields shared with the `runReport` request should be the same values
 * as in your `runReport` request.
 *
 * @generated from message google.analytics.data.v1beta.CheckCompatibilityRequest
 */
export type CheckCompatibilityRequest = Message<"google.analytics.data.v1beta.CheckCompatibilityRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked. To
   * learn more, see [where to find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * `property` should be the same value as in your `runReport` request.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * The dimensions in this report. `dimensions` should be the same value as in
   * your `runReport` request.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Dimension dimensions = 2;
   */
  dimensions: Dimension[];

  /**
   * The metrics in this report. `metrics` should be the same value as in your
   * `runReport` request.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Metric metrics = 3;
   */
  metrics: Metric[];

  /**
   * The filter clause of dimensions. `dimensionFilter` should be the same value
   * as in your `runReport` request.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
   */
  dimensionFilter?: FilterExpression;

  /**
   * The filter clause of metrics. `metricFilter` should be the same value as in
   * your `runReport` request
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression metric_filter = 5;
   */
  metricFilter?: FilterExpression;

  /**
   * Filters the dimensions and metrics in the response to just this
   * compatibility. Commonly used as `”compatibilityFilter”: “COMPATIBLE”`
   * to only return compatible dimensions & metrics.
   *
   * @generated from field: google.analytics.data.v1beta.Compatibility compatibility_filter = 6;
   */
  compatibilityFilter: Compatibility;
};

/**
 * Describes the message google.analytics.data.v1beta.CheckCompatibilityRequest.
 * Use `create(CheckCompatibilityRequestSchema)` to create a new message.
 */
export const CheckCompatibilityRequestSchema: GenMessage<CheckCompatibilityRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 0);

/**
 * The compatibility response with the compatibility of each dimension & metric.
 *
 * @generated from message google.analytics.data.v1beta.CheckCompatibilityResponse
 */
export type CheckCompatibilityResponse = Message<"google.analytics.data.v1beta.CheckCompatibilityResponse"> & {
  /**
   * The compatibility of each dimension.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionCompatibility dimension_compatibilities = 1;
   */
  dimensionCompatibilities: DimensionCompatibility[];

  /**
   * The compatibility of each metric.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricCompatibility metric_compatibilities = 2;
   */
  metricCompatibilities: MetricCompatibility[];
};

/**
 * Describes the message google.analytics.data.v1beta.CheckCompatibilityResponse.
 * Use `create(CheckCompatibilityResponseSchema)` to create a new message.
 */
export const CheckCompatibilityResponseSchema: GenMessage<CheckCompatibilityResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 1);

/**
 * The dimensions, metrics and comparisons currently accepted in reporting
 * methods.
 *
 * @generated from message google.analytics.data.v1beta.Metadata
 */
export type Metadata = Message<"google.analytics.data.v1beta.Metadata"> & {
  /**
   * Resource name of this metadata.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The dimension descriptions.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionMetadata dimensions = 1;
   */
  dimensions: DimensionMetadata[];

  /**
   * The metric descriptions.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricMetadata metrics = 2;
   */
  metrics: MetricMetadata[];

  /**
   * The comparison descriptions.
   *
   * @generated from field: repeated google.analytics.data.v1beta.ComparisonMetadata comparisons = 4;
   */
  comparisons: ComparisonMetadata[];
};

/**
 * Describes the message google.analytics.data.v1beta.Metadata.
 * Use `create(MetadataSchema)` to create a new message.
 */
export const MetadataSchema: GenMessage<Metadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 2);

/**
 * The request to generate a report.
 *
 * @generated from message google.analytics.data.v1beta.RunReportRequest
 */
export type RunReportRequest = Message<"google.analytics.data.v1beta.RunReportRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * Within a batch request, this property should either be unspecified or
   * consistent with the batch-level property.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * The dimensions requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Dimension dimensions = 2;
   */
  dimensions: Dimension[];

  /**
   * The metrics requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Metric metrics = 3;
   */
  metrics: Metric[];

  /**
   * Date ranges of data to read. If multiple date ranges are requested, each
   * response row will contain a zero based date range index. If two date
   * ranges overlap, the event data for the overlapping days is included in the
   * response rows for both date ranges. In a cohort request, this `dateRanges`
   * must be unspecified.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DateRange date_ranges = 4;
   */
  dateRanges: DateRange[];

  /**
   * Dimension filters let you ask for only specific dimension values in
   * the report. To learn more, see [Fundamentals of Dimension
   * Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   * for examples. Metrics cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression dimension_filter = 5;
   */
  dimensionFilter?: FilterExpression;

  /**
   * The filter clause of metrics. Applied after aggregating the report's rows,
   * similar to SQL having-clause. Dimensions cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression metric_filter = 6;
   */
  metricFilter?: FilterExpression;

  /**
   * The row count of the start row. The first row is counted as row 0.
   *
   * When paging, the first request does not specify offset; or equivalently,
   * sets offset to 0; the first request returns the first `limit` of rows. The
   * second request sets offset to the `limit` of the first request; the second
   * request returns the second `limit` of rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 offset = 7;
   */
  offset: bigint;

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The
   * API returns a maximum of 250,000 rows per request, no matter how many you
   * ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`. For instance, there are
   * fewer than 300 possible values for the dimension `country`, so when
   * reporting on only `country`, you can't get more than 300 rows, even if you
   * set `limit` to a higher value.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 limit = 8;
   */
  limit: bigint;

  /**
   * Aggregation of metrics. Aggregated metric values will be shown in rows
   * where the dimension_values are set to "RESERVED_(MetricAggregation)".
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricAggregation metric_aggregations = 9;
   */
  metricAggregations: MetricAggregation[];

  /**
   * Specifies how rows are ordered in the response.
   *
   * @generated from field: repeated google.analytics.data.v1beta.OrderBy order_bys = 10;
   */
  orderBys: OrderBy[];

  /**
   * A currency code in ISO4217 format, such as "AED", "USD", "JPY".
   * If the field is empty, the report uses the property's default currency.
   *
   * @generated from field: string currency_code = 11;
   */
  currencyCode: string;

  /**
   * Cohort group associated with this request. If there is a cohort group
   * in the request the 'cohort' dimension must be present.
   *
   * @generated from field: google.analytics.data.v1beta.CohortSpec cohort_spec = 12;
   */
  cohortSpec?: CohortSpec;

  /**
   * If false or unspecified, each row with all metrics equal to 0 will not be
   * returned. If true, these rows will be returned if they are not separately
   * removed by a filter.
   *
   * Regardless of this `keep_empty_rows` setting, only data recorded by the
   * Google Analytics (GA4) property can be displayed in a report.
   *
   * For example if a property never logs a `purchase` event, then a query for
   * the `eventName` dimension and  `eventCount` metric will not have a row
   * eventName: "purchase" and eventCount: 0.
   *
   * @generated from field: bool keep_empty_rows = 13;
   */
  keepEmptyRows: boolean;

  /**
   * Toggles whether to return the current state of this Analytics Property's
   * quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   *
   * @generated from field: bool return_property_quota = 14;
   */
  returnPropertyQuota: boolean;

  /**
   * Optional. The configuration of comparisons requested and displayed. The
   * request only requires a comparisons field in order to receive a comparison
   * column in the response.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Comparison comparisons = 15;
   */
  comparisons: Comparison[];
};

/**
 * Describes the message google.analytics.data.v1beta.RunReportRequest.
 * Use `create(RunReportRequestSchema)` to create a new message.
 */
export const RunReportRequestSchema: GenMessage<RunReportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 3);

/**
 * The response report table corresponding to a request.
 *
 * @generated from message google.analytics.data.v1beta.RunReportResponse
 */
export type RunReportResponse = Message<"google.analytics.data.v1beta.RunReportResponse"> & {
  /**
   * Describes dimension columns. The number of DimensionHeaders and ordering of
   * DimensionHeaders matches the dimensions present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
   */
  dimensionHeaders: DimensionHeader[];

  /**
   * Describes metric columns. The number of MetricHeaders and ordering of
   * MetricHeaders matches the metrics present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricHeader metric_headers = 2;
   */
  metricHeaders: MetricHeader[];

  /**
   * Rows of dimension value combinations and metric values in the report.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row rows = 3;
   */
  rows: Row[];

  /**
   * If requested, the totaled values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row totals = 4;
   */
  totals: Row[];

  /**
   * If requested, the maximum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row maximums = 5;
   */
  maximums: Row[];

  /**
   * If requested, the minimum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row minimums = 6;
   */
  minimums: Row[];

  /**
   * The total number of rows in the query result. `rowCount` is independent of
   * the number of rows returned in the response, the `limit` request
   * parameter, and the `offset` request parameter. For example if a query
   * returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int32 row_count = 7;
   */
  rowCount: number;

  /**
   * Metadata for the report.
   *
   * @generated from field: google.analytics.data.v1beta.ResponseMetaData metadata = 8;
   */
  metadata?: ResponseMetaData;

  /**
   * This Analytics Property's quota state including this request.
   *
   * @generated from field: google.analytics.data.v1beta.PropertyQuota property_quota = 9;
   */
  propertyQuota?: PropertyQuota;

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#runReport". Useful to distinguish between
   * response types in JSON.
   *
   * @generated from field: string kind = 10;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1beta.RunReportResponse.
 * Use `create(RunReportResponseSchema)` to create a new message.
 */
export const RunReportResponseSchema: GenMessage<RunReportResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 4);

/**
 * The request to generate a pivot report.
 *
 * @generated from message google.analytics.data.v1beta.RunPivotReportRequest
 */
export type RunPivotReportRequest = Message<"google.analytics.data.v1beta.RunPivotReportRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * Within a batch request, this property should either be unspecified or
   * consistent with the batch-level property.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * The dimensions requested. All defined dimensions must be used by one of the
   * following: dimension_expression, dimension_filter, pivots, order_bys.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Dimension dimensions = 2;
   */
  dimensions: Dimension[];

  /**
   * The metrics requested, at least one metric needs to be specified. All
   * defined metrics must be used by one of the following: metric_expression,
   * metric_filter, order_bys.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Metric metrics = 3;
   */
  metrics: Metric[];

  /**
   * The date range to retrieve event data for the report. If multiple date
   * ranges are specified, event data from each date range is used in the
   * report. A special dimension with field name "dateRange" can be included in
   * a Pivot's field names; if included, the report compares between date
   * ranges. In a cohort request, this `dateRanges` must be unspecified.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DateRange date_ranges = 4;
   */
  dateRanges: DateRange[];

  /**
   * Describes the visual format of the report's dimensions in columns or rows.
   * The union of the fieldNames (dimension names) in all pivots must be a
   * subset of dimension names defined in Dimensions. No two pivots can share a
   * dimension. A dimension is only visible if it appears in a pivot.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Pivot pivots = 5;
   */
  pivots: Pivot[];

  /**
   * The filter clause of dimensions. Dimensions must be requested to be used in
   * this filter. Metrics cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression dimension_filter = 6;
   */
  dimensionFilter?: FilterExpression;

  /**
   * The filter clause of metrics. Applied at post aggregation phase, similar to
   * SQL having-clause. Metrics must be requested to be used in this filter.
   * Dimensions cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression metric_filter = 7;
   */
  metricFilter?: FilterExpression;

  /**
   * A currency code in ISO4217 format, such as "AED", "USD", "JPY".
   * If the field is empty, the report uses the property's default currency.
   *
   * @generated from field: string currency_code = 8;
   */
  currencyCode: string;

  /**
   * Cohort group associated with this request. If there is a cohort group
   * in the request the 'cohort' dimension must be present.
   *
   * @generated from field: google.analytics.data.v1beta.CohortSpec cohort_spec = 9;
   */
  cohortSpec?: CohortSpec;

  /**
   * If false or unspecified, each row with all metrics equal to 0 will not be
   * returned. If true, these rows will be returned if they are not separately
   * removed by a filter.
   *
   * Regardless of this `keep_empty_rows` setting, only data recorded by the
   * Google Analytics (GA4) property can be displayed in a report.
   *
   * For example if a property never logs a `purchase` event, then a query for
   * the `eventName` dimension and  `eventCount` metric will not have a row
   * eventName: "purchase" and eventCount: 0.
   *
   * @generated from field: bool keep_empty_rows = 10;
   */
  keepEmptyRows: boolean;

  /**
   * Toggles whether to return the current state of this Analytics Property's
   * quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   *
   * @generated from field: bool return_property_quota = 11;
   */
  returnPropertyQuota: boolean;

  /**
   * Optional. The configuration of comparisons requested and displayed. The
   * request requires both a comparisons field and a comparisons dimension to
   * receive a comparison column in the response.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Comparison comparisons = 12;
   */
  comparisons: Comparison[];
};

/**
 * Describes the message google.analytics.data.v1beta.RunPivotReportRequest.
 * Use `create(RunPivotReportRequestSchema)` to create a new message.
 */
export const RunPivotReportRequestSchema: GenMessage<RunPivotReportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 5);

/**
 * The response pivot report table corresponding to a pivot request.
 *
 * @generated from message google.analytics.data.v1beta.RunPivotReportResponse
 */
export type RunPivotReportResponse = Message<"google.analytics.data.v1beta.RunPivotReportResponse"> & {
  /**
   * Summarizes the columns and rows created by a pivot. Each pivot in the
   * request produces one header in the response. If we have a request like
   * this:
   *
   *     "pivots": [{
   *       "fieldNames": ["country",
   *         "city"]
   *     },
   *     {
   *       "fieldNames": "eventName"
   *     }]
   *
   * We will have the following `pivotHeaders` in the response:
   *
   *     "pivotHeaders" : [{
   *       "dimensionHeaders": [{
   *         "dimensionValues": [
   *            { "value": "United Kingdom" },
   *            { "value": "London" }
   *          ]
   *       },
   *       {
   *         "dimensionValues": [
   *         { "value": "Japan" },
   *         { "value": "Osaka" }
   *         ]
   *       }]
   *     },
   *     {
   *       "dimensionHeaders": [{
   *         "dimensionValues": [{ "value": "session_start" }]
   *       },
   *       {
   *         "dimensionValues": [{ "value": "scroll" }]
   *       }]
   *     }]
   *
   * @generated from field: repeated google.analytics.data.v1beta.PivotHeader pivot_headers = 1;
   */
  pivotHeaders: PivotHeader[];

  /**
   * Describes dimension columns. The number of DimensionHeaders and ordering of
   * DimensionHeaders matches the dimensions present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionHeader dimension_headers = 2;
   */
  dimensionHeaders: DimensionHeader[];

  /**
   * Describes metric columns. The number of MetricHeaders and ordering of
   * MetricHeaders matches the metrics present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricHeader metric_headers = 3;
   */
  metricHeaders: MetricHeader[];

  /**
   * Rows of dimension value combinations and metric values in the report.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row rows = 4;
   */
  rows: Row[];

  /**
   * Aggregation of metric values. Can be totals, minimums, or maximums. The
   * returned aggregations are controlled by the metric_aggregations in the
   * pivot. The type of aggregation returned in each row is shown by the
   * dimension_values which are set to "RESERVED_<MetricAggregation>".
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row aggregates = 5;
   */
  aggregates: Row[];

  /**
   * Metadata for the report.
   *
   * @generated from field: google.analytics.data.v1beta.ResponseMetaData metadata = 6;
   */
  metadata?: ResponseMetaData;

  /**
   * This Analytics Property's quota state including this request.
   *
   * @generated from field: google.analytics.data.v1beta.PropertyQuota property_quota = 7;
   */
  propertyQuota?: PropertyQuota;

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#runPivotReport". Useful to distinguish between
   * response types in JSON.
   *
   * @generated from field: string kind = 8;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1beta.RunPivotReportResponse.
 * Use `create(RunPivotReportResponseSchema)` to create a new message.
 */
export const RunPivotReportResponseSchema: GenMessage<RunPivotReportResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 6);

/**
 * The batch request containing multiple report requests.
 *
 * @generated from message google.analytics.data.v1beta.BatchRunReportsRequest
 */
export type BatchRunReportsRequest = Message<"google.analytics.data.v1beta.BatchRunReportsRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * This property must be specified for the batch. The property within
   * RunReportRequest may either be unspecified or consistent with this
   * property.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * Individual requests. Each request has a separate report response. Each
   * batch request is allowed up to 5 requests.
   *
   * @generated from field: repeated google.analytics.data.v1beta.RunReportRequest requests = 2;
   */
  requests: RunReportRequest[];
};

/**
 * Describes the message google.analytics.data.v1beta.BatchRunReportsRequest.
 * Use `create(BatchRunReportsRequestSchema)` to create a new message.
 */
export const BatchRunReportsRequestSchema: GenMessage<BatchRunReportsRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 7);

/**
 * The batch response containing multiple reports.
 *
 * @generated from message google.analytics.data.v1beta.BatchRunReportsResponse
 */
export type BatchRunReportsResponse = Message<"google.analytics.data.v1beta.BatchRunReportsResponse"> & {
  /**
   * Individual responses. Each response has a separate report request.
   *
   * @generated from field: repeated google.analytics.data.v1beta.RunReportResponse reports = 1;
   */
  reports: RunReportResponse[];

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#batchRunReports". Useful to distinguish between
   * response types in JSON.
   *
   * @generated from field: string kind = 2;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1beta.BatchRunReportsResponse.
 * Use `create(BatchRunReportsResponseSchema)` to create a new message.
 */
export const BatchRunReportsResponseSchema: GenMessage<BatchRunReportsResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 8);

/**
 * The batch request containing multiple pivot report requests.
 *
 * @generated from message google.analytics.data.v1beta.BatchRunPivotReportsRequest
 */
export type BatchRunPivotReportsRequest = Message<"google.analytics.data.v1beta.BatchRunPivotReportsRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * This property must be specified for the batch. The property within
   * RunPivotReportRequest may either be unspecified or consistent with this
   * property.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * Individual requests. Each request has a separate pivot report response.
   * Each batch request is allowed up to 5 requests.
   *
   * @generated from field: repeated google.analytics.data.v1beta.RunPivotReportRequest requests = 2;
   */
  requests: RunPivotReportRequest[];
};

/**
 * Describes the message google.analytics.data.v1beta.BatchRunPivotReportsRequest.
 * Use `create(BatchRunPivotReportsRequestSchema)` to create a new message.
 */
export const BatchRunPivotReportsRequestSchema: GenMessage<BatchRunPivotReportsRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 9);

/**
 * The batch response containing multiple pivot reports.
 *
 * @generated from message google.analytics.data.v1beta.BatchRunPivotReportsResponse
 */
export type BatchRunPivotReportsResponse = Message<"google.analytics.data.v1beta.BatchRunPivotReportsResponse"> & {
  /**
   * Individual responses. Each response has a separate pivot report request.
   *
   * @generated from field: repeated google.analytics.data.v1beta.RunPivotReportResponse pivot_reports = 1;
   */
  pivotReports: RunPivotReportResponse[];

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#batchRunPivotReports". Useful to distinguish
   * between response types in JSON.
   *
   * @generated from field: string kind = 2;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1beta.BatchRunPivotReportsResponse.
 * Use `create(BatchRunPivotReportsResponseSchema)` to create a new message.
 */
export const BatchRunPivotReportsResponseSchema: GenMessage<BatchRunPivotReportsResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 10);

/**
 * Request for a property's dimension and metric metadata.
 *
 * @generated from message google.analytics.data.v1beta.GetMetadataRequest
 */
export type GetMetadataRequest = Message<"google.analytics.data.v1beta.GetMetadataRequest"> & {
  /**
   * Required. The resource name of the metadata to retrieve. This name field is
   * specified in the URL path and not URL parameters. Property is a numeric
   * Google Analytics GA4 Property identifier. To learn more, see [where to find
   * your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   *
   * Example: properties/1234/metadata
   *
   * Set the Property ID to 0 for dimensions and metrics common to all
   * properties. In this special mode, this method will not return custom
   * dimensions and metrics.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1beta.GetMetadataRequest.
 * Use `create(GetMetadataRequestSchema)` to create a new message.
 */
export const GetMetadataRequestSchema: GenMessage<GetMetadataRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 11);

/**
 * The request to generate a realtime report.
 *
 * @generated from message google.analytics.data.v1beta.RunRealtimeReportRequest
 */
export type RunRealtimeReportRequest = Message<"google.analytics.data.v1beta.RunRealtimeReportRequest"> & {
  /**
   * A Google Analytics GA4 property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * The dimensions requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Dimension dimensions = 2;
   */
  dimensions: Dimension[];

  /**
   * The metrics requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Metric metrics = 3;
   */
  metrics: Metric[];

  /**
   * The filter clause of dimensions. Metrics cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression dimension_filter = 4;
   */
  dimensionFilter?: FilterExpression;

  /**
   * The filter clause of metrics. Applied at post aggregation phase, similar to
   * SQL having-clause. Dimensions cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1beta.FilterExpression metric_filter = 5;
   */
  metricFilter?: FilterExpression;

  /**
   * The number of rows to return. If unspecified, 10,000 rows are returned. The
   * API returns a maximum of 250,000 rows per request, no matter how many you
   * ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`. For instance, there are
   * fewer than 300 possible values for the dimension `country`, so when
   * reporting on only `country`, you can't get more than 300 rows, even if you
   * set `limit` to a higher value.
   *
   * @generated from field: int64 limit = 6;
   */
  limit: bigint;

  /**
   * Aggregation of metrics. Aggregated metric values will be shown in rows
   * where the dimension_values are set to "RESERVED_(MetricAggregation)".
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricAggregation metric_aggregations = 7;
   */
  metricAggregations: MetricAggregation[];

  /**
   * Specifies how rows are ordered in the response.
   *
   * @generated from field: repeated google.analytics.data.v1beta.OrderBy order_bys = 8;
   */
  orderBys: OrderBy[];

  /**
   * Toggles whether to return the current state of this Analytics Property's
   * Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   *
   * @generated from field: bool return_property_quota = 9;
   */
  returnPropertyQuota: boolean;

  /**
   * The minute ranges of event data to read. If unspecified, one minute range
   * for the last 30 minutes will be used. If multiple minute ranges are
   * requested, each response row will contain a zero based minute range index.
   * If two minute ranges overlap, the event data for the overlapping minutes is
   * included in the response rows for both minute ranges.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MinuteRange minute_ranges = 10;
   */
  minuteRanges: MinuteRange[];
};

/**
 * Describes the message google.analytics.data.v1beta.RunRealtimeReportRequest.
 * Use `create(RunRealtimeReportRequestSchema)` to create a new message.
 */
export const RunRealtimeReportRequestSchema: GenMessage<RunRealtimeReportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 12);

/**
 * The response realtime report table corresponding to a request.
 *
 * @generated from message google.analytics.data.v1beta.RunRealtimeReportResponse
 */
export type RunRealtimeReportResponse = Message<"google.analytics.data.v1beta.RunRealtimeReportResponse"> & {
  /**
   * Describes dimension columns. The number of DimensionHeaders and ordering of
   * DimensionHeaders matches the dimensions present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.DimensionHeader dimension_headers = 1;
   */
  dimensionHeaders: DimensionHeader[];

  /**
   * Describes metric columns. The number of MetricHeaders and ordering of
   * MetricHeaders matches the metrics present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1beta.MetricHeader metric_headers = 2;
   */
  metricHeaders: MetricHeader[];

  /**
   * Rows of dimension value combinations and metric values in the report.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row rows = 3;
   */
  rows: Row[];

  /**
   * If requested, the totaled values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row totals = 4;
   */
  totals: Row[];

  /**
   * If requested, the maximum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row maximums = 5;
   */
  maximums: Row[];

  /**
   * If requested, the minimum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1beta.Row minimums = 6;
   */
  minimums: Row[];

  /**
   * The total number of rows in the query result. `rowCount` is independent of
   * the number of rows returned in the response and the `limit` request
   * parameter. For example if a query returns 175 rows and includes `limit`
   * of 50 in the API request, the response will contain `rowCount` of 175 but
   * only 50 rows.
   *
   * @generated from field: int32 row_count = 7;
   */
  rowCount: number;

  /**
   * This Analytics Property's Realtime quota state including this request.
   *
   * @generated from field: google.analytics.data.v1beta.PropertyQuota property_quota = 8;
   */
  propertyQuota?: PropertyQuota;

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#runRealtimeReport". Useful to distinguish
   * between response types in JSON.
   *
   * @generated from field: string kind = 9;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1beta.RunRealtimeReportResponse.
 * Use `create(RunRealtimeReportResponseSchema)` to create a new message.
 */
export const RunRealtimeReportResponseSchema: GenMessage<RunRealtimeReportResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 13);

/**
 * A request to retrieve configuration metadata about a specific audience
 * export.
 *
 * @generated from message google.analytics.data.v1beta.GetAudienceExportRequest
 */
export type GetAudienceExportRequest = Message<"google.analytics.data.v1beta.GetAudienceExportRequest"> & {
  /**
   * Required. The audience export resource name.
   * Format: `properties/{property}/audienceExports/{audience_export}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1beta.GetAudienceExportRequest.
 * Use `create(GetAudienceExportRequestSchema)` to create a new message.
 */
export const GetAudienceExportRequestSchema: GenMessage<GetAudienceExportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 14);

/**
 * A request to list all audience exports for a property.
 *
 * @generated from message google.analytics.data.v1beta.ListAudienceExportsRequest
 */
export type ListAudienceExportsRequest = Message<"google.analytics.data.v1beta.ListAudienceExportsRequest"> & {
  /**
   * Required. All audience exports for this property will be listed in the
   * response. Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of audience exports to return. The service may
   * return fewer than this value. If unspecified, at most 200 audience exports
   * will be returned. The maximum value is 1000 (higher values will be coerced
   * to the maximum).
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListAudienceExports`
   * call. Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAudienceExports`
   * must match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.analytics.data.v1beta.ListAudienceExportsRequest.
 * Use `create(ListAudienceExportsRequestSchema)` to create a new message.
 */
export const ListAudienceExportsRequestSchema: GenMessage<ListAudienceExportsRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 15);

/**
 * A list of all audience exports for a property.
 *
 * @generated from message google.analytics.data.v1beta.ListAudienceExportsResponse
 */
export type ListAudienceExportsResponse = Message<"google.analytics.data.v1beta.ListAudienceExportsResponse"> & {
  /**
   * Each audience export for a property.
   *
   * @generated from field: repeated google.analytics.data.v1beta.AudienceExport audience_exports = 1;
   */
  audienceExports: AudienceExport[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message google.analytics.data.v1beta.ListAudienceExportsResponse.
 * Use `create(ListAudienceExportsResponseSchema)` to create a new message.
 */
export const ListAudienceExportsResponseSchema: GenMessage<ListAudienceExportsResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 16);

/**
 * A request to create a new audience export.
 *
 * @generated from message google.analytics.data.v1beta.CreateAudienceExportRequest
 */
export type CreateAudienceExportRequest = Message<"google.analytics.data.v1beta.CreateAudienceExportRequest"> & {
  /**
   * Required. The parent resource where this audience export will be created.
   * Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The audience export to create.
   *
   * @generated from field: google.analytics.data.v1beta.AudienceExport audience_export = 2;
   */
  audienceExport?: AudienceExport;
};

/**
 * Describes the message google.analytics.data.v1beta.CreateAudienceExportRequest.
 * Use `create(CreateAudienceExportRequestSchema)` to create a new message.
 */
export const CreateAudienceExportRequestSchema: GenMessage<CreateAudienceExportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 17);

/**
 * An audience export is a list of users in an audience at the time of the
 * list's creation. One audience may have multiple audience exports created for
 * different days.
 *
 * @generated from message google.analytics.data.v1beta.AudienceExport
 */
export type AudienceExport = Message<"google.analytics.data.v1beta.AudienceExport"> & {
  /**
   * Output only. Identifier. The audience export resource name assigned during
   * creation. This resource name identifies this `AudienceExport`.
   *
   * Format: `properties/{property}/audienceExports/{audience_export}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The audience resource name. This resource name identifies the
   * audience being listed and is shared between the Analytics Data & Admin
   * APIs.
   *
   * Format: `properties/{property}/audiences/{audience}`
   *
   * @generated from field: string audience = 2;
   */
  audience: string;

  /**
   * Output only. The descriptive display name for this audience. For example,
   * "Purchasers".
   *
   * @generated from field: string audience_display_name = 3;
   */
  audienceDisplayName: string;

  /**
   * Required. The dimensions requested and displayed in the query response.
   *
   * @generated from field: repeated google.analytics.data.v1beta.AudienceDimension dimensions = 4;
   */
  dimensions: AudienceDimension[];

  /**
   * Output only. The current state for this AudienceExport.
   *
   * @generated from field: optional google.analytics.data.v1beta.AudienceExport.State state = 5;
   */
  state?: AudienceExport_State;

  /**
   * Output only. The time when CreateAudienceExport was called and the
   * AudienceExport began the `CREATING` state.
   *
   * @generated from field: optional google.protobuf.Timestamp begin_creating_time = 6;
   */
  beginCreatingTime?: Timestamp;

  /**
   * Output only. The total quota tokens charged during creation of the
   * AudienceExport. Because this token count is based on activity from the
   * `CREATING` state, this tokens charged will be fixed once an AudienceExport
   * enters the `ACTIVE` or `FAILED` states.
   *
   * @generated from field: int32 creation_quota_tokens_charged = 7;
   */
  creationQuotaTokensCharged: number;

  /**
   * Output only. The total number of rows in the AudienceExport result.
   *
   * @generated from field: optional int32 row_count = 8;
   */
  rowCount?: number;

  /**
   * Output only. Error message is populated when an audience export fails
   * during creation. A common reason for such a failure is quota exhaustion.
   *
   * @generated from field: optional string error_message = 9;
   */
  errorMessage?: string;

  /**
   * Output only. The percentage completed for this audience export ranging
   * between 0 to 100.
   *
   * @generated from field: optional double percentage_completed = 10;
   */
  percentageCompleted?: number;
};

/**
 * Describes the message google.analytics.data.v1beta.AudienceExport.
 * Use `create(AudienceExportSchema)` to create a new message.
 */
export const AudienceExportSchema: GenMessage<AudienceExport> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 18);

/**
 * The AudienceExport currently exists in this state.
 *
 * @generated from enum google.analytics.data.v1beta.AudienceExport.State
 */
export enum AudienceExport_State {
  /**
   * Unspecified state will never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The AudienceExport is currently creating and will be available in the
   * future. Creating occurs immediately after the CreateAudienceExport call.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The AudienceExport is fully created and ready for querying. An
   * AudienceExport is updated to active asynchronously from a request; this
   * occurs some time (for example 15 minutes) after the initial create call.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The AudienceExport failed to be created. It is possible that
   * re-requesting this audience export will succeed.
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,
}

/**
 * Describes the enum google.analytics.data.v1beta.AudienceExport.State.
 */
export const AudienceExport_StateSchema: GenEnum<AudienceExport_State> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1beta_analytics_data_api, 18, 0);

/**
 * This metadata is currently blank.
 *
 * @generated from message google.analytics.data.v1beta.AudienceExportMetadata
 */
export type AudienceExportMetadata = Message<"google.analytics.data.v1beta.AudienceExportMetadata"> & {
};

/**
 * Describes the message google.analytics.data.v1beta.AudienceExportMetadata.
 * Use `create(AudienceExportMetadataSchema)` to create a new message.
 */
export const AudienceExportMetadataSchema: GenMessage<AudienceExportMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 19);

/**
 * A request to list users in an audience export.
 *
 * @generated from message google.analytics.data.v1beta.QueryAudienceExportRequest
 */
export type QueryAudienceExportRequest = Message<"google.analytics.data.v1beta.QueryAudienceExportRequest"> & {
  /**
   * Required. The name of the audience export to retrieve users from.
   * Format: `properties/{property}/audienceExports/{audience_export}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The row count of the start row. The first row is counted as row
   * 0.
   *
   * When paging, the first request does not specify offset; or equivalently,
   * sets offset to 0; the first request returns the first `limit` of rows. The
   * second request sets offset to the `limit` of the first request; the second
   * request returns the second `limit` of rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 offset = 2;
   */
  offset: bigint;

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are
   * returned. The API returns a maximum of 250,000 rows per request, no matter
   * how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 limit = 3;
   */
  limit: bigint;
};

/**
 * Describes the message google.analytics.data.v1beta.QueryAudienceExportRequest.
 * Use `create(QueryAudienceExportRequestSchema)` to create a new message.
 */
export const QueryAudienceExportRequestSchema: GenMessage<QueryAudienceExportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 20);

/**
 * A list of users in an audience export.
 *
 * @generated from message google.analytics.data.v1beta.QueryAudienceExportResponse
 */
export type QueryAudienceExportResponse = Message<"google.analytics.data.v1beta.QueryAudienceExportResponse"> & {
  /**
   * Configuration data about AudienceExport being queried. Returned to help
   * interpret the audience rows in this response. For example, the dimensions
   * in this AudienceExport correspond to the columns in the AudienceRows.
   *
   * @generated from field: optional google.analytics.data.v1beta.AudienceExport audience_export = 1;
   */
  audienceExport?: AudienceExport;

  /**
   * Rows for each user in an audience export. The number of rows in this
   * response will be less than or equal to request's page size.
   *
   * @generated from field: repeated google.analytics.data.v1beta.AudienceRow audience_rows = 2;
   */
  audienceRows: AudienceRow[];

  /**
   * The total number of rows in the AudienceExport result. `rowCount` is
   * independent of the number of rows returned in the response, the `limit`
   * request parameter, and the `offset` request parameter. For example if a
   * query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: optional int32 row_count = 3;
   */
  rowCount?: number;
};

/**
 * Describes the message google.analytics.data.v1beta.QueryAudienceExportResponse.
 * Use `create(QueryAudienceExportResponseSchema)` to create a new message.
 */
export const QueryAudienceExportResponseSchema: GenMessage<QueryAudienceExportResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 21);

/**
 * Dimension value attributes for the audience user row.
 *
 * @generated from message google.analytics.data.v1beta.AudienceRow
 */
export type AudienceRow = Message<"google.analytics.data.v1beta.AudienceRow"> & {
  /**
   * Each dimension value attribute for an audience user. One dimension value
   * will be added for each dimension column requested.
   *
   * @generated from field: repeated google.analytics.data.v1beta.AudienceDimensionValue dimension_values = 1;
   */
  dimensionValues: AudienceDimensionValue[];
};

/**
 * Describes the message google.analytics.data.v1beta.AudienceRow.
 * Use `create(AudienceRowSchema)` to create a new message.
 */
export const AudienceRowSchema: GenMessage<AudienceRow> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 22);

/**
 * An audience dimension is a user attribute. Specific user attributed are
 * requested and then later returned in the `QueryAudienceExportResponse`.
 *
 * @generated from message google.analytics.data.v1beta.AudienceDimension
 */
export type AudienceDimension = Message<"google.analytics.data.v1beta.AudienceDimension"> & {
  /**
   * Optional. The API name of the dimension. See the [API
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-api-schema#dimensions)
   * for the list of dimension names.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;
};

/**
 * Describes the message google.analytics.data.v1beta.AudienceDimension.
 * Use `create(AudienceDimensionSchema)` to create a new message.
 */
export const AudienceDimensionSchema: GenMessage<AudienceDimension> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 23);

/**
 * The value of a dimension.
 *
 * @generated from message google.analytics.data.v1beta.AudienceDimensionValue
 */
export type AudienceDimensionValue = Message<"google.analytics.data.v1beta.AudienceDimensionValue"> & {
  /**
   * One kind of dimension value.
   *
   * @generated from oneof google.analytics.data.v1beta.AudienceDimensionValue.one_value
   */
  oneValue: {
    /**
     * Value as a string if the dimension type is a string.
     *
     * @generated from field: string value = 1;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1beta.AudienceDimensionValue.
 * Use `create(AudienceDimensionValueSchema)` to create a new message.
 */
export const AudienceDimensionValueSchema: GenMessage<AudienceDimensionValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1beta_analytics_data_api, 24);

/**
 * Google Analytics reporting data service.
 *
 * @generated from service google.analytics.data.v1beta.BetaAnalyticsData
 */
export const BetaAnalyticsData: GenService<{
  /**
   * Returns a customized report of your Google Analytics event data. Reports
   * contain statistics derived from data collected by the Google Analytics
   * tracking code. The data returned from the API is as a table with columns
   * for the requested dimensions and metrics. Metrics are individual
   * measurements of user activity on your property, such as active users or
   * event count. Dimensions break down metrics across some common criteria,
   * such as country or event name.
   *
   * For a guide to constructing requests & understanding responses, see
   * [Creating a
   * Report](https://developers.google.com/analytics/devguides/reporting/data/v1/basics).
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.RunReport
   */
  runReport: {
    methodKind: "unary";
    input: typeof RunReportRequestSchema;
    output: typeof RunReportResponseSchema;
  },
  /**
   * Returns a customized pivot report of your Google Analytics event data.
   * Pivot reports are more advanced and expressive formats than regular
   * reports. In a pivot report, dimensions are only visible if they are
   * included in a pivot. Multiple pivots can be specified to further dissect
   * your data.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.RunPivotReport
   */
  runPivotReport: {
    methodKind: "unary";
    input: typeof RunPivotReportRequestSchema;
    output: typeof RunPivotReportResponseSchema;
  },
  /**
   * Returns multiple reports in a batch. All reports must be for the same
   * GA4 Property.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.BatchRunReports
   */
  batchRunReports: {
    methodKind: "unary";
    input: typeof BatchRunReportsRequestSchema;
    output: typeof BatchRunReportsResponseSchema;
  },
  /**
   * Returns multiple pivot reports in a batch. All reports must be for the same
   * GA4 Property.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.BatchRunPivotReports
   */
  batchRunPivotReports: {
    methodKind: "unary";
    input: typeof BatchRunPivotReportsRequestSchema;
    output: typeof BatchRunPivotReportsResponseSchema;
  },
  /**
   * Returns metadata for dimensions and metrics available in reporting methods.
   * Used to explore the dimensions and metrics. In this method, a Google
   * Analytics GA4 Property Identifier is specified in the request, and
   * the metadata response includes Custom dimensions and metrics as well as
   * Universal metadata.
   *
   * For example if a custom metric with parameter name `levels_unlocked` is
   * registered to a property, the Metadata response will contain
   * `customEvent:levels_unlocked`. Universal metadata are dimensions and
   * metrics applicable to any property such as `country` and `totalUsers`.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.GetMetadata
   */
  getMetadata: {
    methodKind: "unary";
    input: typeof GetMetadataRequestSchema;
    output: typeof MetadataSchema;
  },
  /**
   * Returns a customized report of realtime event data for your property.
   * Events appear in realtime reports seconds after they have been sent to
   * the Google Analytics. Realtime reports show events and usage data for the
   * periods of time ranging from the present moment to 30 minutes ago (up to
   * 60 minutes for Google Analytics 360 properties).
   *
   * For a guide to constructing realtime requests & understanding responses,
   * see [Creating a Realtime
   * Report](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-basics).
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.RunRealtimeReport
   */
  runRealtimeReport: {
    methodKind: "unary";
    input: typeof RunRealtimeReportRequestSchema;
    output: typeof RunRealtimeReportResponseSchema;
  },
  /**
   * This compatibility method lists dimensions and metrics that can be added to
   * a report request and maintain compatibility. This method fails if the
   * request's dimensions and metrics are incompatible.
   *
   * In Google Analytics, reports fail if they request incompatible dimensions
   * and/or metrics; in that case, you will need to remove dimensions and/or
   * metrics from the incompatible report until the report is compatible.
   *
   * The Realtime and Core reports have different compatibility rules. This
   * method checks compatibility for Core reports.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.CheckCompatibility
   */
  checkCompatibility: {
    methodKind: "unary";
    input: typeof CheckCompatibilityRequestSchema;
    output: typeof CheckCompatibilityResponseSchema;
  },
  /**
   * Creates an audience export for later retrieval. This method quickly returns
   * the audience export's resource name and initiates a long running
   * asynchronous request to form an audience export. To export the users in an
   * audience export, first create the audience export through this method and
   * then send the audience resource name to the `QueryAudienceExport` method.
   *
   * See [Creating an Audience
   * Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Exports with examples.
   *
   * An audience export is a snapshot of the users currently in the audience at
   * the time of audience export creation. Creating audience exports for one
   * audience on different days will return different results as users enter and
   * exit the audience.
   *
   * Audiences in Google Analytics 4 allow you to segment your users in the ways
   * that are important to your business. To learn more, see
   * https://support.google.com/analytics/answer/9267572. Audience exports
   * contain the users in each audience.
   *
   * Audience Export APIs have some methods at alpha and other methods at beta
   * stability. The intention is to advance methods to beta stability after some
   * feedback and adoption. To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.CreateAudienceExport
   */
  createAudienceExport: {
    methodKind: "unary";
    input: typeof CreateAudienceExportRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Retrieves an audience export of users. After creating an audience, the
   * users are not immediately available for exporting. First, a request to
   * `CreateAudienceExport` is necessary to create an audience export of users,
   * and then second, this method is used to retrieve the users in the audience
   * export.
   *
   * See [Creating an Audience
   * Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Exports with examples.
   *
   * Audiences in Google Analytics 4 allow you to segment your users in the ways
   * that are important to your business. To learn more, see
   * https://support.google.com/analytics/answer/9267572.
   *
   * Audience Export APIs have some methods at alpha and other methods at beta
   * stability. The intention is to advance methods to beta stability after some
   * feedback and adoption. To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.QueryAudienceExport
   */
  queryAudienceExport: {
    methodKind: "unary";
    input: typeof QueryAudienceExportRequestSchema;
    output: typeof QueryAudienceExportResponseSchema;
  },
  /**
   * Gets configuration metadata about a specific audience export. This method
   * can be used to understand an audience export after it has been created.
   *
   * See [Creating an Audience
   * Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Exports with examples.
   *
   * Audience Export APIs have some methods at alpha and other methods at beta
   * stability. The intention is to advance methods to beta stability after some
   * feedback and adoption. To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.GetAudienceExport
   */
  getAudienceExport: {
    methodKind: "unary";
    input: typeof GetAudienceExportRequestSchema;
    output: typeof AudienceExportSchema;
  },
  /**
   * Lists all audience exports for a property. This method can be used for you
   * to find and reuse existing audience exports rather than creating
   * unnecessary new audience exports. The same audience can have multiple
   * audience exports that represent the export of users that were in an
   * audience on different days.
   *
   * See [Creating an Audience
   * Export](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Exports with examples.
   *
   * Audience Export APIs have some methods at alpha and other methods at beta
   * stability. The intention is to advance methods to beta stability after some
   * feedback and adoption. To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1beta.BetaAnalyticsData.ListAudienceExports
   */
  listAudienceExports: {
    methodKind: "unary";
    input: typeof ListAudienceExportsRequestSchema;
    output: typeof ListAudienceExportsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_analytics_data_v1beta_analytics_data_api, 0);

