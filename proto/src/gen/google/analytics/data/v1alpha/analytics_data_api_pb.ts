// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/analytics/data/v1alpha/analytics_data_api.proto (package google.analytics.data.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { CohortSpec, DateRange, Dimension, DimensionHeader, FilterExpression, Funnel, FunnelBreakdown, FunnelNextAction, FunnelSubReport, Metric, MetricAggregation, MetricHeader, OrderBy, PropertyQuota, ResponseMetaData, Row, Segment } from "./data_pb";
import { file_google_analytics_data_v1alpha_data } from "./data_pb";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/analytics/data/v1alpha/analytics_data_api.proto.
 */
export const file_google_analytics_data_v1alpha_analytics_data_api: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_analytics_data_v1alpha_data, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * A request to create a new recurring audience list.
 *
 * @generated from message google.analytics.data.v1alpha.CreateRecurringAudienceListRequest
 */
export type CreateRecurringAudienceListRequest = Message<"google.analytics.data.v1alpha.CreateRecurringAudienceListRequest"> & {
  /**
   * Required. The parent resource where this recurring audience list will be
   * created. Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The recurring audience list to create.
   *
   * @generated from field: google.analytics.data.v1alpha.RecurringAudienceList recurring_audience_list = 2;
   */
  recurringAudienceList?: RecurringAudienceList;
};

/**
 * Describes the message google.analytics.data.v1alpha.CreateRecurringAudienceListRequest.
 * Use `create(CreateRecurringAudienceListRequestSchema)` to create a new message.
 */
export const CreateRecurringAudienceListRequestSchema: GenMessage<CreateRecurringAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 0);

/**
 * A recurring audience list produces new audience lists each day. Audience
 * lists are users in an audience at the time of the list's creation. A
 * recurring audience list ensures that you have audience list based on the most
 * recent data available for use each day.
 *
 * @generated from message google.analytics.data.v1alpha.RecurringAudienceList
 */
export type RecurringAudienceList = Message<"google.analytics.data.v1alpha.RecurringAudienceList"> & {
  /**
   * Output only. Identifier. The recurring audience list resource name assigned
   * during creation. This resource name identifies this
   * `RecurringAudienceList`.
   *
   * Format:
   * `properties/{property}/recurringAudienceLists/{recurring_audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The audience resource name. This resource name identifies the
   * audience being listed and is shared between the Analytics Data & Admin
   * APIs.
   *
   * Format: `properties/{property}/audiences/{audience}`
   *
   * @generated from field: string audience = 2;
   */
  audience: string;

  /**
   * Output only. The descriptive display name for this audience. For example,
   * "Purchasers".
   *
   * @generated from field: string audience_display_name = 3;
   */
  audienceDisplayName: string;

  /**
   * Required. The dimensions requested and displayed in the audience list
   * response.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.AudienceDimension dimensions = 4;
   */
  dimensions: AudienceDimension[];

  /**
   * Optional. The number of remaining days that a recurring audience export
   * will produce an audience list instance. This counter decreases by one each
   * day, and when it reaches zero, no new audience lists will be created.
   *
   * Recurring audience list request for Analytics 360 properties default to 180
   * days and have a maximum of 365 days. Requests for standard Analytics
   * properties default to 14 days and have a maximum of 30 days.
   *
   * The minimum value allowed during creation is 1. Requests above their
   * respective maximum will be coerced to their maximum.
   *
   * @generated from field: optional int32 active_days_remaining = 5;
   */
  activeDaysRemaining?: number;

  /**
   * Output only. Audience list resource names for audience list instances
   * created for this recurring audience list. One audience list is created for
   * each day, and the audience list will be listed here.
   *
   * This list is ordered with the most recently created audience list first.
   *
   * @generated from field: repeated string audience_lists = 6;
   */
  audienceLists: string[];

  /**
   * Optional. Configures webhook notifications to be sent from the Google
   * Analytics Data API to your webhook server. Use of webhooks is optional. If
   * unused, you'll need to poll this API to determine when a recurring audience
   * list creates new audience lists. Webhooks allow a notification to be sent
   * to your servers & avoid the need for polling.
   *
   * Two POST requests will be sent each time a recurring audience list creates
   * an audience list. This happens once per day until a recurring audience list
   * reaches 0 active days remaining. The first request will be sent showing a
   * newly created audience list in its CREATING state. The second request will
   * be sent after the audience list completes creation (either the ACTIVE or
   * FAILED state).
   *
   * @generated from field: optional google.analytics.data.v1alpha.WebhookNotification webhook_notification = 8;
   */
  webhookNotification?: WebhookNotification;
};

/**
 * Describes the message google.analytics.data.v1alpha.RecurringAudienceList.
 * Use `create(RecurringAudienceListSchema)` to create a new message.
 */
export const RecurringAudienceListSchema: GenMessage<RecurringAudienceList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 1);

/**
 * Configures a long-running operation resource to send a webhook notification
 * from the Google Analytics Data API to your webhook server when the resource
 * updates.
 *
 * Notification configurations contain private values & are only visible to your
 * GCP project. Different GCP projects may attach different webhook
 * notifications to the same long-running operation resource.
 *
 * @generated from message google.analytics.data.v1alpha.WebhookNotification
 */
export type WebhookNotification = Message<"google.analytics.data.v1alpha.WebhookNotification"> & {
  /**
   * Optional. The web address that will receive the webhook notification. This
   * address will receive POST requests as the state of the long running
   * operation resource changes. The POST request will contain both a JSON
   * version of the long running operation resource in the body and a
   * `sentTimestamp` field. The sent timestamp will specify the unix
   * microseconds since the epoch that the request was sent; this lets you
   * identify replayed notifications.
   *
   * An example URI is
   * `https://us-central1-example-project-id.cloudfunctions.net/example-function-1`.
   *
   * The URI must use HTTPS and point to a site with a valid SSL certificate on
   * the web server. The URI must have a maximum string length of 128 characters
   * & use only the allowlisted characters from [RFC
   * 1738](https://www.rfc-editor.org/rfc/rfc1738).
   *
   * When your webhook server receives a notification, it is expected to reply
   * with an HTTP response status code of 200 within 5 seconds.
   *
   * A URI is required to use webhook notifications.
   *
   * Requests to this webhook server will contain an ID token authenticating the
   * service account
   * `google-analytics-audience-export@system.gserviceaccount.com`. To learn
   * more about ID tokens, see
   * https://cloud.google.com/docs/authentication/token-types#id. For Google
   * Cloud Functions, this lets you configure your function to require
   * authentication. In Cloud IAM, you will need to grant the service account
   * permissions to the Cloud Run Invoker (`roles/run.invoker`) & Cloud
   * Functions Invoker (`roles/cloudfunctions.invoker`) roles for the webhook
   * post request to pass Google Cloud Functions authentication. This API can
   * send webhook notifications to arbitrary URIs; for webhook servers other
   * than Google Cloud Functions, this ID token in the authorization bearer
   * header should be ignored if it is not needed.
   *
   * @generated from field: optional string uri = 1;
   */
  uri?: string;

  /**
   * Optional. The channel token is an arbitrary string value and must have a
   * maximum string length of 64 characters. Channel tokens allow you to verify
   * the source of a webhook notification. This guards against the message being
   * spoofed. The channel token will be specified in the `X-Goog-Channel-Token`
   * HTTP header of the webhook POST request.
   *
   * A channel token is not required to use webhook notifications.
   *
   * @generated from field: optional string channel_token = 2;
   */
  channelToken?: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.WebhookNotification.
 * Use `create(WebhookNotificationSchema)` to create a new message.
 */
export const WebhookNotificationSchema: GenMessage<WebhookNotification> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 2);

/**
 * A request to retrieve configuration metadata about a specific recurring
 * audience list.
 *
 * @generated from message google.analytics.data.v1alpha.GetRecurringAudienceListRequest
 */
export type GetRecurringAudienceListRequest = Message<"google.analytics.data.v1alpha.GetRecurringAudienceListRequest"> & {
  /**
   * Required. The recurring audience list resource name.
   * Format:
   * `properties/{property}/recurringAudienceLists/{recurring_audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.GetRecurringAudienceListRequest.
 * Use `create(GetRecurringAudienceListRequestSchema)` to create a new message.
 */
export const GetRecurringAudienceListRequestSchema: GenMessage<GetRecurringAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 3);

/**
 * A request to list all recurring audience lists for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListRecurringAudienceListsRequest
 */
export type ListRecurringAudienceListsRequest = Message<"google.analytics.data.v1alpha.ListRecurringAudienceListsRequest"> & {
  /**
   * Required. All recurring audience lists for this property will be listed in
   * the response. Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of recurring audience lists to return. The
   * service may return fewer than this value. If unspecified, at most 200
   * recurring audience lists will be returned. The maximum value is 1000
   * (higher values will be coerced to the maximum).
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous
   * `ListRecurringAudienceLists` call. Provide this to retrieve the subsequent
   * page.
   *
   * When paginating, all other parameters provided to
   * `ListRecurringAudienceLists` must match the call that provided the page
   * token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListRecurringAudienceListsRequest.
 * Use `create(ListRecurringAudienceListsRequestSchema)` to create a new message.
 */
export const ListRecurringAudienceListsRequestSchema: GenMessage<ListRecurringAudienceListsRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 4);

/**
 * A list of all recurring audience lists for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListRecurringAudienceListsResponse
 */
export type ListRecurringAudienceListsResponse = Message<"google.analytics.data.v1alpha.ListRecurringAudienceListsResponse"> & {
  /**
   * Each recurring audience list for a property.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.RecurringAudienceList recurring_audience_lists = 1;
   */
  recurringAudienceLists: RecurringAudienceList[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListRecurringAudienceListsResponse.
 * Use `create(ListRecurringAudienceListsResponseSchema)` to create a new message.
 */
export const ListRecurringAudienceListsResponseSchema: GenMessage<ListRecurringAudienceListsResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 5);

/**
 * A request to return the PropertyQuotasSnapshot for a given category.
 *
 * @generated from message google.analytics.data.v1alpha.GetPropertyQuotasSnapshotRequest
 */
export type GetPropertyQuotasSnapshotRequest = Message<"google.analytics.data.v1alpha.GetPropertyQuotasSnapshotRequest"> & {
  /**
   * Required. Quotas from this property will be listed in the response.
   * Format: `properties/{property}/propertyQuotasSnapshot`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.GetPropertyQuotasSnapshotRequest.
 * Use `create(GetPropertyQuotasSnapshotRequestSchema)` to create a new message.
 */
export const GetPropertyQuotasSnapshotRequestSchema: GenMessage<GetPropertyQuotasSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 6);

/**
 * Current state of all Property Quotas organized by quota category.
 *
 * @generated from message google.analytics.data.v1alpha.PropertyQuotasSnapshot
 */
export type PropertyQuotasSnapshot = Message<"google.analytics.data.v1alpha.PropertyQuotasSnapshot"> & {
  /**
   * Identifier. The property quota snapshot resource name.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * Property Quota for core property tokens
   *
   * @generated from field: google.analytics.data.v1alpha.PropertyQuota core_property_quota = 1;
   */
  corePropertyQuota?: PropertyQuota;

  /**
   * Property Quota for realtime property tokens
   *
   * @generated from field: google.analytics.data.v1alpha.PropertyQuota realtime_property_quota = 2;
   */
  realtimePropertyQuota?: PropertyQuota;

  /**
   * Property Quota for funnel property tokens
   *
   * @generated from field: google.analytics.data.v1alpha.PropertyQuota funnel_property_quota = 3;
   */
  funnelPropertyQuota?: PropertyQuota;
};

/**
 * Describes the message google.analytics.data.v1alpha.PropertyQuotasSnapshot.
 * Use `create(PropertyQuotasSnapshotSchema)` to create a new message.
 */
export const PropertyQuotasSnapshotSchema: GenMessage<PropertyQuotasSnapshot> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 7);

/**
 * A request to retrieve configuration metadata about a specific audience list.
 *
 * @generated from message google.analytics.data.v1alpha.GetAudienceListRequest
 */
export type GetAudienceListRequest = Message<"google.analytics.data.v1alpha.GetAudienceListRequest"> & {
  /**
   * Required. The audience list resource name.
   * Format: `properties/{property}/audienceLists/{audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.GetAudienceListRequest.
 * Use `create(GetAudienceListRequestSchema)` to create a new message.
 */
export const GetAudienceListRequestSchema: GenMessage<GetAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 8);

/**
 * A request to list all audience lists for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListAudienceListsRequest
 */
export type ListAudienceListsRequest = Message<"google.analytics.data.v1alpha.ListAudienceListsRequest"> & {
  /**
   * Required. All audience lists for this property will be listed in the
   * response. Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of audience lists to return. The service may
   * return fewer than this value. If unspecified, at most 200 audience lists
   * will be returned. The maximum value is 1000 (higher values will be coerced
   * to the maximum).
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListAudienceLists` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAudienceLists` must
   * match the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListAudienceListsRequest.
 * Use `create(ListAudienceListsRequestSchema)` to create a new message.
 */
export const ListAudienceListsRequestSchema: GenMessage<ListAudienceListsRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 9);

/**
 * A list of all audience lists for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListAudienceListsResponse
 */
export type ListAudienceListsResponse = Message<"google.analytics.data.v1alpha.ListAudienceListsResponse"> & {
  /**
   * Each audience list for a property.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.AudienceList audience_lists = 1;
   */
  audienceLists: AudienceList[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListAudienceListsResponse.
 * Use `create(ListAudienceListsResponseSchema)` to create a new message.
 */
export const ListAudienceListsResponseSchema: GenMessage<ListAudienceListsResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 10);

/**
 * A request to create a new audience list.
 *
 * @generated from message google.analytics.data.v1alpha.CreateAudienceListRequest
 */
export type CreateAudienceListRequest = Message<"google.analytics.data.v1alpha.CreateAudienceListRequest"> & {
  /**
   * Required. The parent resource where this audience list will be created.
   * Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The audience list to create.
   *
   * @generated from field: google.analytics.data.v1alpha.AudienceList audience_list = 2;
   */
  audienceList?: AudienceList;
};

/**
 * Describes the message google.analytics.data.v1alpha.CreateAudienceListRequest.
 * Use `create(CreateAudienceListRequestSchema)` to create a new message.
 */
export const CreateAudienceListRequestSchema: GenMessage<CreateAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 11);

/**
 * An audience list is a list of users in an audience at the time of the list's
 * creation. One audience may have multiple audience lists created for different
 * days.
 *
 * @generated from message google.analytics.data.v1alpha.AudienceList
 */
export type AudienceList = Message<"google.analytics.data.v1alpha.AudienceList"> & {
  /**
   * Output only. Identifier. The audience list resource name assigned during
   * creation. This resource name identifies this `AudienceList`.
   *
   * Format: `properties/{property}/audienceLists/{audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The audience resource name. This resource name identifies the
   * audience being listed and is shared between the Analytics Data & Admin
   * APIs.
   *
   * Format: `properties/{property}/audiences/{audience}`
   *
   * @generated from field: string audience = 2;
   */
  audience: string;

  /**
   * Output only. The descriptive display name for this audience. For example,
   * "Purchasers".
   *
   * @generated from field: string audience_display_name = 3;
   */
  audienceDisplayName: string;

  /**
   * Required. The dimensions requested and displayed in the query response.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.AudienceDimension dimensions = 4;
   */
  dimensions: AudienceDimension[];

  /**
   * Output only. The current state for this AudienceList.
   *
   * @generated from field: optional google.analytics.data.v1alpha.AudienceList.State state = 5;
   */
  state?: AudienceList_State;

  /**
   * Output only. The time when CreateAudienceList was called and the
   * AudienceList began the `CREATING` state.
   *
   * @generated from field: optional google.protobuf.Timestamp begin_creating_time = 6;
   */
  beginCreatingTime?: Timestamp;

  /**
   * Output only. The total quota tokens charged during creation of the
   * AudienceList. Because this token count is based on activity from the
   * `CREATING` state, this tokens charged will be fixed once an AudienceList
   * enters the `ACTIVE` or `FAILED` states.
   *
   * @generated from field: int32 creation_quota_tokens_charged = 7;
   */
  creationQuotaTokensCharged: number;

  /**
   * Output only. The total number of rows in the AudienceList result.
   *
   * @generated from field: optional int32 row_count = 8;
   */
  rowCount?: number;

  /**
   * Output only. Error message is populated when an audience list fails during
   * creation. A common reason for such a failure is quota exhaustion.
   *
   * @generated from field: optional string error_message = 9;
   */
  errorMessage?: string;

  /**
   * Output only. The percentage completed for this audience export ranging
   * between 0 to 100.
   *
   * @generated from field: optional double percentage_completed = 11;
   */
  percentageCompleted?: number;

  /**
   * Output only. The recurring audience list that created this audience list.
   * Recurring audience lists create audience lists daily.
   *
   * If audience lists are created directly, they will have no associated
   * recurring audience list, and this field will be blank.
   *
   * @generated from field: optional string recurring_audience_list = 12;
   */
  recurringAudienceList?: string;

  /**
   * Optional. Configures webhook notifications to be sent from the Google
   * Analytics Data API to your webhook server. Use of webhooks is optional. If
   * unused, you'll need to poll this API to determine when an audience list is
   * ready to be used. Webhooks allow a notification to be sent to your servers
   * & avoid the need for polling.
   *
   * Either one or two POST requests will be sent to the webhook. The first POST
   * request will be sent immediately showing the newly created audience list in
   * its CREATING state. The second POST request will be sent after the audience
   * list completes creation (either the ACTIVE or FAILED state).
   *
   * If identical audience lists are requested in quick succession, the second &
   * subsequent audience lists can be served from cache. In that case, the
   * audience list create method can return an audience list is already ACTIVE.
   * In this scenario, only one POST request will be sent to the webhook.
   *
   * @generated from field: optional google.analytics.data.v1alpha.WebhookNotification webhook_notification = 13;
   */
  webhookNotification?: WebhookNotification;
};

/**
 * Describes the message google.analytics.data.v1alpha.AudienceList.
 * Use `create(AudienceListSchema)` to create a new message.
 */
export const AudienceListSchema: GenMessage<AudienceList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 12);

/**
 * The AudienceList currently exists in this state.
 *
 * @generated from enum google.analytics.data.v1alpha.AudienceList.State
 */
export enum AudienceList_State {
  /**
   * Unspecified state will never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The AudienceList is currently creating and will be available in the
   * future. Creating occurs immediately after the CreateAudienceList call.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The AudienceList is fully created and ready for querying. An AudienceList
   * is updated to active asynchronously from a request; this occurs some
   * time (for example 15 minutes) after the initial create call.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The AudienceList failed to be created. It is possible that re-requesting
   * this audience list will succeed.
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,
}

/**
 * Describes the enum google.analytics.data.v1alpha.AudienceList.State.
 */
export const AudienceList_StateSchema: GenEnum<AudienceList_State> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_analytics_data_api, 12, 0);

/**
 * This metadata is currently blank.
 *
 * @generated from message google.analytics.data.v1alpha.AudienceListMetadata
 */
export type AudienceListMetadata = Message<"google.analytics.data.v1alpha.AudienceListMetadata"> & {
};

/**
 * Describes the message google.analytics.data.v1alpha.AudienceListMetadata.
 * Use `create(AudienceListMetadataSchema)` to create a new message.
 */
export const AudienceListMetadataSchema: GenMessage<AudienceListMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 13);

/**
 * A request to list users in an audience list.
 *
 * @generated from message google.analytics.data.v1alpha.QueryAudienceListRequest
 */
export type QueryAudienceListRequest = Message<"google.analytics.data.v1alpha.QueryAudienceListRequest"> & {
  /**
   * Required. The name of the audience list to retrieve users from.
   * Format: `properties/{property}/audienceLists/{audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The row count of the start row. The first row is counted as row
   * 0.
   *
   * When paging, the first request does not specify offset; or equivalently,
   * sets offset to 0; the first request returns the first `limit` of rows. The
   * second request sets offset to the `limit` of the first request; the second
   * request returns the second `limit` of rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 offset = 2;
   */
  offset: bigint;

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are
   * returned. The API returns a maximum of 250,000 rows per request, no matter
   * how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 limit = 3;
   */
  limit: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.QueryAudienceListRequest.
 * Use `create(QueryAudienceListRequestSchema)` to create a new message.
 */
export const QueryAudienceListRequestSchema: GenMessage<QueryAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 14);

/**
 * A list of users in an audience list.
 *
 * @generated from message google.analytics.data.v1alpha.QueryAudienceListResponse
 */
export type QueryAudienceListResponse = Message<"google.analytics.data.v1alpha.QueryAudienceListResponse"> & {
  /**
   * Configuration data about AudienceList being queried. Returned to help
   * interpret the audience rows in this response. For example, the dimensions
   * in this AudienceList correspond to the columns in the AudienceRows.
   *
   * @generated from field: optional google.analytics.data.v1alpha.AudienceList audience_list = 1;
   */
  audienceList?: AudienceList;

  /**
   * Rows for each user in an audience list. The number of rows in this
   * response will be less than or equal to request's page size.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.AudienceRow audience_rows = 2;
   */
  audienceRows: AudienceRow[];

  /**
   * The total number of rows in the AudienceList result. `rowCount` is
   * independent of the number of rows returned in the response, the `limit`
   * request parameter, and the `offset` request parameter. For example if a
   * query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: optional int32 row_count = 3;
   */
  rowCount?: number;
};

/**
 * Describes the message google.analytics.data.v1alpha.QueryAudienceListResponse.
 * Use `create(QueryAudienceListResponseSchema)` to create a new message.
 */
export const QueryAudienceListResponseSchema: GenMessage<QueryAudienceListResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 15);

/**
 * A request to export users in an audience list to a Google Sheet.
 *
 * @generated from message google.analytics.data.v1alpha.SheetExportAudienceListRequest
 */
export type SheetExportAudienceListRequest = Message<"google.analytics.data.v1alpha.SheetExportAudienceListRequest"> & {
  /**
   * Required. The name of the audience list to retrieve users from.
   * Format: `properties/{property}/audienceLists/{audience_list}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The row count of the start row. The first row is counted as row
   * 0.
   *
   * When paging, the first request does not specify offset; or equivalently,
   * sets offset to 0; the first request returns the first `limit` of rows. The
   * second request sets offset to the `limit` of the first request; the second
   * request returns the second `limit` of rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 offset = 2;
   */
  offset: bigint;

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are
   * returned. The API returns a maximum of 250,000 rows per request, no matter
   * how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 limit = 3;
   */
  limit: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.SheetExportAudienceListRequest.
 * Use `create(SheetExportAudienceListRequestSchema)` to create a new message.
 */
export const SheetExportAudienceListRequestSchema: GenMessage<SheetExportAudienceListRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 16);

/**
 * The created Google Sheet with the list of users in an audience list.
 *
 * @generated from message google.analytics.data.v1alpha.SheetExportAudienceListResponse
 */
export type SheetExportAudienceListResponse = Message<"google.analytics.data.v1alpha.SheetExportAudienceListResponse"> & {
  /**
   * A uri for you to visit in your browser to view the Google Sheet.
   *
   * @generated from field: optional string spreadsheet_uri = 1;
   */
  spreadsheetUri?: string;

  /**
   * An ID that identifies the created Google Sheet resource.
   *
   * @generated from field: optional string spreadsheet_id = 2;
   */
  spreadsheetId?: string;

  /**
   * The total number of rows in the AudienceList result. `rowCount` is
   * independent of the number of rows returned in the response, the `limit`
   * request parameter, and the `offset` request parameter. For example if a
   * query returns 175 rows and includes `limit` of 50 in the API request, the
   * response will contain `rowCount` of 175 but only 50 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: optional int32 row_count = 3;
   */
  rowCount?: number;

  /**
   * Configuration data about AudienceList being exported. Returned to help
   * interpret the AudienceList in the Google Sheet of this response.
   *
   * For example, the AudienceList may have more rows than are present in the
   * Google Sheet, and in that case, you may want to send an additional sheet
   * export request with a different `offset` value to retrieve the next page of
   * rows in an additional Google Sheet.
   *
   * @generated from field: optional google.analytics.data.v1alpha.AudienceList audience_list = 4;
   */
  audienceList?: AudienceList;
};

/**
 * Describes the message google.analytics.data.v1alpha.SheetExportAudienceListResponse.
 * Use `create(SheetExportAudienceListResponseSchema)` to create a new message.
 */
export const SheetExportAudienceListResponseSchema: GenMessage<SheetExportAudienceListResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 17);

/**
 * Dimension value attributes for the audience user row.
 *
 * @generated from message google.analytics.data.v1alpha.AudienceRow
 */
export type AudienceRow = Message<"google.analytics.data.v1alpha.AudienceRow"> & {
  /**
   * Each dimension value attribute for an audience user. One dimension value
   * will be added for each dimension column requested.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.AudienceDimensionValue dimension_values = 1;
   */
  dimensionValues: AudienceDimensionValue[];
};

/**
 * Describes the message google.analytics.data.v1alpha.AudienceRow.
 * Use `create(AudienceRowSchema)` to create a new message.
 */
export const AudienceRowSchema: GenMessage<AudienceRow> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 18);

/**
 * An audience dimension is a user attribute. Specific user attributed are
 * requested and then later returned in the `QueryAudienceListResponse`.
 *
 * @generated from message google.analytics.data.v1alpha.AudienceDimension
 */
export type AudienceDimension = Message<"google.analytics.data.v1alpha.AudienceDimension"> & {
  /**
   * Optional. The API name of the dimension. See the [API
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-api-schema#dimensions)
   * for the list of dimension names.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.AudienceDimension.
 * Use `create(AudienceDimensionSchema)` to create a new message.
 */
export const AudienceDimensionSchema: GenMessage<AudienceDimension> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 19);

/**
 * The value of a dimension.
 *
 * @generated from message google.analytics.data.v1alpha.AudienceDimensionValue
 */
export type AudienceDimensionValue = Message<"google.analytics.data.v1alpha.AudienceDimensionValue"> & {
  /**
   * One kind of dimension value.
   *
   * @generated from oneof google.analytics.data.v1alpha.AudienceDimensionValue.one_value
   */
  oneValue: {
    /**
     * Value as a string if the dimension type is a string.
     *
     * @generated from field: string value = 1;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.AudienceDimensionValue.
 * Use `create(AudienceDimensionValueSchema)` to create a new message.
 */
export const AudienceDimensionValueSchema: GenMessage<AudienceDimensionValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 20);

/**
 * The request for a funnel report.
 *
 * @generated from message google.analytics.data.v1alpha.RunFunnelReportRequest
 */
export type RunFunnelReportRequest = Message<"google.analytics.data.v1alpha.RunFunnelReportRequest"> & {
  /**
   * Optional. A Google Analytics property identifier whose events are tracked.
   * Specified in the URL path and not the body. To learn more, see [where to
   * find your Property
   * ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
   * Within a batch request, this property should either be unspecified or
   * consistent with the batch-level property.
   *
   * Example: properties/1234
   *
   * @generated from field: string property = 1;
   */
  property: string;

  /**
   * Optional. Date ranges of data to read. If multiple date ranges are
   * requested, each response row will contain a zero based date range index. If
   * two date ranges overlap, the event data for the overlapping days is
   * included in the response rows for both date ranges.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.DateRange date_ranges = 2;
   */
  dateRanges: DateRange[];

  /**
   * Optional. The configuration of this request's funnel. This funnel
   * configuration is required.
   *
   * @generated from field: google.analytics.data.v1alpha.Funnel funnel = 3;
   */
  funnel?: Funnel;

  /**
   * Optional. If specified, this breakdown adds a dimension to the funnel table
   * sub report response. This breakdown dimension expands each funnel step to
   * the unique values of the breakdown dimension. For example, a breakdown by
   * the `deviceCategory` dimension will create rows for `mobile`, `tablet`,
   * `desktop`, and the total.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelBreakdown funnel_breakdown = 4;
   */
  funnelBreakdown?: FunnelBreakdown;

  /**
   * Optional. If specified, next action adds a dimension to the funnel
   * visualization sub report response. This next action dimension expands each
   * funnel step to the unique values of the next action. For example a next
   * action of the `eventName` dimension will create rows for several events
   * (for example `session_start` & `click`) and the total.
   *
   * Next action only supports `eventName` and most Page / Screen dimensions
   * like `pageTitle` and `pagePath`.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelNextAction funnel_next_action = 5;
   */
  funnelNextAction?: FunnelNextAction;

  /**
   * Optional. The funnel visualization type controls the dimensions present in
   * the funnel visualization sub report response. If not specified,
   * `STANDARD_FUNNEL` is used.
   *
   * @generated from field: google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType funnel_visualization_type = 6;
   */
  funnelVisualizationType: RunFunnelReportRequest_FunnelVisualizationType;

  /**
   * Optional. The configurations of segments. Segments are subsets of a
   * property's data. In a funnel report with segments, the funnel is evaluated
   * in each segment.
   *
   * Each segment specified in this request
   * produces a separate row in the response; in the response, each segment
   * identified by its name.
   *
   * The segments parameter is optional. Requests are limited to 4 segments.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Segment segments = 7;
   */
  segments: Segment[];

  /**
   * Optional. The number of rows to return. If unspecified, 10,000 rows are
   * returned. The API returns a maximum of 250,000 rows per request, no matter
   * how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`.
   *
   * @generated from field: int64 limit = 9;
   */
  limit: bigint;

  /**
   * Optional. Dimension filters allow you to ask for only specific dimension
   * values in the report. To learn more, see [Creating a Report: Dimension
   * Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   * for examples. Metrics cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1alpha.FilterExpression dimension_filter = 10;
   */
  dimensionFilter?: FilterExpression;

  /**
   * Optional. Toggles whether to return the current state of this Analytics
   * Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
   *
   * @generated from field: bool return_property_quota = 12;
   */
  returnPropertyQuota: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.RunFunnelReportRequest.
 * Use `create(RunFunnelReportRequestSchema)` to create a new message.
 */
export const RunFunnelReportRequestSchema: GenMessage<RunFunnelReportRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 21);

/**
 * Controls the dimensions present in the funnel visualization sub report
 * response.
 *
 * @generated from enum google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType
 */
export enum RunFunnelReportRequest_FunnelVisualizationType {
  /**
   * Unspecified type.
   *
   * @generated from enum value: FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED = 0;
   */
  FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED = 0,

  /**
   * A standard (stepped) funnel. The funnel visualization sub report in the
   * response will not contain date.
   *
   * @generated from enum value: STANDARD_FUNNEL = 1;
   */
  STANDARD_FUNNEL = 1,

  /**
   * A trended (line chart) funnel. The funnel visualization sub report in the
   * response will contain the date dimension.
   *
   * @generated from enum value: TRENDED_FUNNEL = 2;
   */
  TRENDED_FUNNEL = 2,
}

/**
 * Describes the enum google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType.
 */
export const RunFunnelReportRequest_FunnelVisualizationTypeSchema: GenEnum<RunFunnelReportRequest_FunnelVisualizationType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_analytics_data_api, 21, 0);

/**
 * The funnel report response contains two sub reports. The two sub reports are
 * different combinations of dimensions and metrics.
 *
 * @generated from message google.analytics.data.v1alpha.RunFunnelReportResponse
 */
export type RunFunnelReportResponse = Message<"google.analytics.data.v1alpha.RunFunnelReportResponse"> & {
  /**
   * The funnel table is a report with the funnel step, segment, breakdown
   * dimension, active users, completion rate, abandonments, and abandonments
   * rate.
   *
   * The segment dimension is only present in this response if a segment was
   * requested. The breakdown dimension is only present in this response if it
   * was requested.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelSubReport funnel_table = 1;
   */
  funnelTable?: FunnelSubReport;

  /**
   * The funnel visualization is a report with the funnel step, segment, date,
   * next action dimension, and active users.
   *
   * The segment dimension is only present in this response if a segment was
   * requested. The date dimension is only present in this response if it was
   * requested through the `TRENDED_FUNNEL` funnel type. The next action
   * dimension is only present in the response if it was requested.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelSubReport funnel_visualization = 2;
   */
  funnelVisualization?: FunnelSubReport;

  /**
   * This Analytics Property's quota state including this request.
   *
   * @generated from field: google.analytics.data.v1alpha.PropertyQuota property_quota = 3;
   */
  propertyQuota?: PropertyQuota;

  /**
   * Identifies what kind of resource this message is. This `kind` is always the
   * fixed string "analyticsData#runFunnelReport". Useful to distinguish between
   * response types in JSON.
   *
   * @generated from field: string kind = 4;
   */
  kind: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.RunFunnelReportResponse.
 * Use `create(RunFunnelReportResponseSchema)` to create a new message.
 */
export const RunFunnelReportResponseSchema: GenMessage<RunFunnelReportResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 22);

/**
 * A specific report task configuration.
 *
 * @generated from message google.analytics.data.v1alpha.ReportTask
 */
export type ReportTask = Message<"google.analytics.data.v1alpha.ReportTask"> & {
  /**
   * Output only. Identifier. The report task resource name assigned during
   * creation. Format: "properties/{property}/reportTasks/{report_task}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. A report definition to fetch report data, which describes the
   * structure of a report. It typically includes the fields that will be
   * included in the report and the criteria that will be used to filter the
   * data.
   *
   * @generated from field: google.analytics.data.v1alpha.ReportTask.ReportDefinition report_definition = 2;
   */
  reportDefinition?: ReportTask_ReportDefinition;

  /**
   * Output only. The report metadata for a specific report task, which provides
   * information about a report.  It typically includes the following
   * information: the resource name of the report, the state of the report, the
   * timestamp the report was created, etc,
   *
   * @generated from field: google.analytics.data.v1alpha.ReportTask.ReportMetadata report_metadata = 3;
   */
  reportMetadata?: ReportTask_ReportMetadata;
};

/**
 * Describes the message google.analytics.data.v1alpha.ReportTask.
 * Use `create(ReportTaskSchema)` to create a new message.
 */
export const ReportTaskSchema: GenMessage<ReportTask> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 23);

/**
 * The definition of how a report should be run.
 *
 * @generated from message google.analytics.data.v1alpha.ReportTask.ReportDefinition
 */
export type ReportTask_ReportDefinition = Message<"google.analytics.data.v1alpha.ReportTask.ReportDefinition"> & {
  /**
   * Optional. The dimensions requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Dimension dimensions = 2;
   */
  dimensions: Dimension[];

  /**
   * Optional. The metrics requested and displayed.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Metric metrics = 3;
   */
  metrics: Metric[];

  /**
   * Optional. Date ranges of data to read. If multiple date ranges are
   * requested, each response row will contain a zero based date range index.
   * If two date ranges overlap, the event data for the overlapping days is
   * included in the response rows for both date ranges. In a cohort request,
   * this `dateRanges` must be unspecified.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.DateRange date_ranges = 4;
   */
  dateRanges: DateRange[];

  /**
   * Optional. Dimension filters let you ask for only specific dimension
   * values in the report. To learn more, see [Fundamentals of Dimension
   * Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
   * for examples. Metrics cannot be used in this filter.
   *
   * @generated from field: google.analytics.data.v1alpha.FilterExpression dimension_filter = 5;
   */
  dimensionFilter?: FilterExpression;

  /**
   * Optional. The filter clause of metrics. Applied after aggregating the
   * report's rows, similar to SQL having-clause. Dimensions cannot be used in
   * this filter.
   *
   * @generated from field: google.analytics.data.v1alpha.FilterExpression metric_filter = 6;
   */
  metricFilter?: FilterExpression;

  /**
   * Optional. The row count of the start row from Google Analytics Storage.
   * The first row is counted as row 0.
   *
   * When creating a report task, the `offset` and `limit` parameters define
   * the subset of data rows from Google Analytics storage to be included in
   * the generated report. For example, if there are a total of 300,000 rows
   * in Google Analytics storage, the initial report task may have the
   * first 10,000 rows with a limit of 10,000 and an offset of 0.
   * Subsequently, another report task could cover the next 10,000 rows with a
   * limit of 10,000 and an offset of 10,000.
   *
   * @generated from field: int64 offset = 7;
   */
  offset: bigint;

  /**
   * Optional. The number of rows to return in the Report. If unspecified,
   * 10,000 rows are returned. The API returns a maximum of 250,000 rows per
   * request, no matter how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`. For instance, there are
   * fewer than 300 possible values for the dimension `country`, so when
   * reporting on only `country`, you can't get more than 300 rows, even if
   * you set `limit` to a higher value.
   *
   * @generated from field: int64 limit = 8;
   */
  limit: bigint;

  /**
   * Optional. Aggregation of metrics. Aggregated metric values will be shown
   * in rows where the dimension_values are set to
   * "RESERVED_(MetricAggregation)".
   *
   * @generated from field: repeated google.analytics.data.v1alpha.MetricAggregation metric_aggregations = 9;
   */
  metricAggregations: MetricAggregation[];

  /**
   * Optional. Specifies how rows are ordered in the response.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.OrderBy order_bys = 10;
   */
  orderBys: OrderBy[];

  /**
   * Optional. A currency code in ISO4217 format, such as "AED", "USD", "JPY".
   * If the field is empty, the report uses the property's default currency.
   *
   * @generated from field: string currency_code = 11;
   */
  currencyCode: string;

  /**
   * Optional. Cohort group associated with this request. If there is a cohort
   * group in the request the 'cohort' dimension must be present.
   *
   * @generated from field: google.analytics.data.v1alpha.CohortSpec cohort_spec = 12;
   */
  cohortSpec?: CohortSpec;

  /**
   * Optional. If false or unspecified, each row with all metrics equal to 0
   * will not be returned. If true, these rows will be returned if they are
   * not separately removed by a filter.
   *
   * Regardless of this `keep_empty_rows` setting, only data recorded by the
   * Google Analytics property can be displayed in a report.
   *
   * For example if a property never logs a `purchase` event, then a query for
   * the `eventName` dimension and  `eventCount` metric will not have a row
   * containing eventName: "purchase" and eventCount: 0.
   *
   * @generated from field: bool keep_empty_rows = 13;
   */
  keepEmptyRows: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.ReportTask.ReportDefinition.
 * Use `create(ReportTask_ReportDefinitionSchema)` to create a new message.
 */
export const ReportTask_ReportDefinitionSchema: GenMessage<ReportTask_ReportDefinition> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 23, 0);

/**
 * The report metadata for a specific report task.
 *
 * @generated from message google.analytics.data.v1alpha.ReportTask.ReportMetadata
 */
export type ReportTask_ReportMetadata = Message<"google.analytics.data.v1alpha.ReportTask.ReportMetadata"> & {
  /**
   * Output only. The current state for this report task.
   *
   * @generated from field: optional google.analytics.data.v1alpha.ReportTask.ReportMetadata.State state = 1;
   */
  state?: ReportTask_ReportMetadata_State;

  /**
   * Output only. The time when `CreateReportTask` was called and the report
   * began the `CREATING` state.
   *
   * @generated from field: optional google.protobuf.Timestamp begin_creating_time = 2;
   */
  beginCreatingTime?: Timestamp;

  /**
   * Output only. The total quota tokens charged during creation of the
   * report. Because this token count is based on activity from the `CREATING`
   * state, this tokens charge will be fixed once a report task enters the
   * `ACTIVE` or `FAILED` state.
   *
   * @generated from field: int32 creation_quota_tokens_charged = 3;
   */
  creationQuotaTokensCharged: number;

  /**
   * Output only. The total number of rows in the report result. This field
   * will be populated when the state is active. You can utilize
   * `task_row_count` for pagination within the confines of their existing
   * report.
   *
   * @generated from field: optional int32 task_row_count = 4;
   */
  taskRowCount?: number;

  /**
   * Output only. Error message is populated if a report task fails during
   * creation.
   *
   * @generated from field: optional string error_message = 5;
   */
  errorMessage?: string;

  /**
   * Output only. The total number of rows in Google Analytics storage. If you
   * want to query additional data rows beyond the current report, they can
   * initiate a new report task based on the `total_row_count`.
   *
   * The `task_row_count` represents the number of rows specifically
   * pertaining to the current report, whereas `total_row_count` encompasses
   * the total count of rows across all data retrieved from Google
   * Analytics storage.
   *
   * For example, suppose the current report's `task_row_count` is 20,
   * displaying the data from the first 20 rows. Simultaneously, the
   * `total_row_count` is 30, indicating the presence of data for all 30 rows.
   * The `task_row_count` can be utilizated to paginate through the initial 20
   * rows. To expand the report and include data from all 30 rows, a new
   * report task can be created using the total_row_count to access the full
   * set of 30 rows' worth of data.
   *
   * @generated from field: optional int32 total_row_count = 6;
   */
  totalRowCount?: number;
};

/**
 * Describes the message google.analytics.data.v1alpha.ReportTask.ReportMetadata.
 * Use `create(ReportTask_ReportMetadataSchema)` to create a new message.
 */
export const ReportTask_ReportMetadataSchema: GenMessage<ReportTask_ReportMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 23, 1);

/**
 * The processing state.
 *
 * @generated from enum google.analytics.data.v1alpha.ReportTask.ReportMetadata.State
 */
export enum ReportTask_ReportMetadata_State {
  /**
   * Unspecified state will never be used.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The report is currently creating and will be available in the
   * future. Creating occurs immediately after the CreateReport call.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The report is fully created and ready for querying.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * The report failed to be created.
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,
}

/**
 * Describes the enum google.analytics.data.v1alpha.ReportTask.ReportMetadata.State.
 */
export const ReportTask_ReportMetadata_StateSchema: GenEnum<ReportTask_ReportMetadata_State> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_analytics_data_api, 23, 1, 0);

/**
 * A request to create a report task.
 *
 * @generated from message google.analytics.data.v1alpha.CreateReportTaskRequest
 */
export type CreateReportTaskRequest = Message<"google.analytics.data.v1alpha.CreateReportTaskRequest"> & {
  /**
   * Required. The parent resource where this report task will be created.
   * Format: `properties/{propertyId}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The report task configuration to create.
   *
   * @generated from field: google.analytics.data.v1alpha.ReportTask report_task = 2;
   */
  reportTask?: ReportTask;
};

/**
 * Describes the message google.analytics.data.v1alpha.CreateReportTaskRequest.
 * Use `create(CreateReportTaskRequestSchema)` to create a new message.
 */
export const CreateReportTaskRequestSchema: GenMessage<CreateReportTaskRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 24);

/**
 * Represents the metadata of a long-running operation. Currently, this metadata
 * is blank.
 *
 * @generated from message google.analytics.data.v1alpha.ReportTaskMetadata
 */
export type ReportTaskMetadata = Message<"google.analytics.data.v1alpha.ReportTaskMetadata"> & {
};

/**
 * Describes the message google.analytics.data.v1alpha.ReportTaskMetadata.
 * Use `create(ReportTaskMetadataSchema)` to create a new message.
 */
export const ReportTaskMetadataSchema: GenMessage<ReportTaskMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 25);

/**
 * A request to fetch the report content for a report task.
 *
 * @generated from message google.analytics.data.v1alpha.QueryReportTaskRequest
 */
export type QueryReportTaskRequest = Message<"google.analytics.data.v1alpha.QueryReportTaskRequest"> & {
  /**
   * Required. The report source name.
   * Format: `properties/{property}/reportTasks/{report}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The row count of the start row in the report. The first row is
   * counted as row 0.
   *
   * When paging, the first request does not specify offset; or equivalently,
   * sets offset to 0; the first request returns the first `limit` of rows. The
   * second request sets offset to the `limit` of the first request; the second
   * request returns the second `limit` of rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 offset = 2;
   */
  offset: bigint;

  /**
   * Optional. The number of rows to return from the report. If unspecified,
   * 10,000 rows are returned. The API returns a maximum of 250,000 rows per
   * request, no matter how many you ask for. `limit` must be positive.
   *
   * The API can also return fewer rows than the requested `limit`, if there
   * aren't as many dimension values as the `limit`. The number of rows
   * available to a QueryReportTaskRequest is further limited by the limit of
   * the associated ReportTask. A query can retrieve at most ReportTask.limit
   * rows. For example, if the ReportTask has a limit of 1,000, then a
   * QueryReportTask request with offset=900 and limit=500 will return at most
   * 100 rows.
   *
   * To learn more about this pagination parameter, see
   * [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
   *
   * @generated from field: int64 limit = 3;
   */
  limit: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.QueryReportTaskRequest.
 * Use `create(QueryReportTaskRequestSchema)` to create a new message.
 */
export const QueryReportTaskRequestSchema: GenMessage<QueryReportTaskRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 26);

/**
 * The report content corresponding to a report task.
 *
 * @generated from message google.analytics.data.v1alpha.QueryReportTaskResponse
 */
export type QueryReportTaskResponse = Message<"google.analytics.data.v1alpha.QueryReportTaskResponse"> & {
  /**
   * Describes dimension columns. The number of DimensionHeaders and ordering of
   * DimensionHeaders matches the dimensions present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.DimensionHeader dimension_headers = 1;
   */
  dimensionHeaders: DimensionHeader[];

  /**
   * Describes metric columns. The number of MetricHeaders and ordering of
   * MetricHeaders matches the metrics present in rows.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.MetricHeader metric_headers = 2;
   */
  metricHeaders: MetricHeader[];

  /**
   * Rows of dimension value combinations and metric values in the report.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Row rows = 3;
   */
  rows: Row[];

  /**
   * If requested, the totaled values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Row totals = 4;
   */
  totals: Row[];

  /**
   * If requested, the maximum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Row maximums = 5;
   */
  maximums: Row[];

  /**
   * If requested, the minimum values of metrics.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Row minimums = 6;
   */
  minimums: Row[];

  /**
   * The total number of rows in the query result.
   *
   * @generated from field: int32 row_count = 7;
   */
  rowCount: number;

  /**
   * Metadata for the report.
   *
   * @generated from field: google.analytics.data.v1alpha.ResponseMetaData metadata = 8;
   */
  metadata?: ResponseMetaData;
};

/**
 * Describes the message google.analytics.data.v1alpha.QueryReportTaskResponse.
 * Use `create(QueryReportTaskResponseSchema)` to create a new message.
 */
export const QueryReportTaskResponseSchema: GenMessage<QueryReportTaskResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 27);

/**
 * A request to retrieve configuration metadata about a specific report task.
 *
 * @generated from message google.analytics.data.v1alpha.GetReportTaskRequest
 */
export type GetReportTaskRequest = Message<"google.analytics.data.v1alpha.GetReportTaskRequest"> & {
  /**
   * Required. The report task resource name.
   * Format: `properties/{property}/reportTasks/{report_task}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.GetReportTaskRequest.
 * Use `create(GetReportTaskRequestSchema)` to create a new message.
 */
export const GetReportTaskRequestSchema: GenMessage<GetReportTaskRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 28);

/**
 * A request to list all report tasks for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListReportTasksRequest
 */
export type ListReportTasksRequest = Message<"google.analytics.data.v1alpha.ListReportTasksRequest"> & {
  /**
   * Required. All report tasks for this property will be listed in the
   * response. Format: `properties/{property}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of report tasks to return.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous `ListReportTasks` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListReportTasksRequest.
 * Use `create(ListReportTasksRequestSchema)` to create a new message.
 */
export const ListReportTasksRequestSchema: GenMessage<ListReportTasksRequest> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 29);

/**
 * A list of all report tasks for a property.
 *
 * @generated from message google.analytics.data.v1alpha.ListReportTasksResponse
 */
export type ListReportTasksResponse = Message<"google.analytics.data.v1alpha.ListReportTasksResponse"> & {
  /**
   * Each report task for a property.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.ReportTask report_tasks = 1;
   */
  reportTasks: ReportTask[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: optional string next_page_token = 2;
   */
  nextPageToken?: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.ListReportTasksResponse.
 * Use `create(ListReportTasksResponseSchema)` to create a new message.
 */
export const ListReportTasksResponseSchema: GenMessage<ListReportTasksResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_analytics_data_api, 30);

/**
 * Google Analytics reporting data service.
 *
 * @generated from service google.analytics.data.v1alpha.AlphaAnalyticsData
 */
export const AlphaAnalyticsData: GenService<{
  /**
   * Returns a customized funnel report of your Google Analytics event data. The
   * data returned from the API is as a table with columns for the requested
   * dimensions and metrics.
   *
   * Funnel exploration lets you visualize the steps your users take to complete
   * a task and quickly see how well they are succeeding or failing at each
   * step. For example, how do prospects become shoppers and then become buyers?
   * How do one time buyers become repeat buyers? With this information, you can
   * improve inefficient or abandoned customer journeys. To learn more, see [GA4
   * Funnel Explorations](https://support.google.com/analytics/answer/9327974).
   *
   * This method is introduced at alpha stability with the intention of
   * gathering feedback on syntax and capabilities before entering beta. To give
   * your feedback on this API, complete the [Google Analytics Data API Funnel
   * Reporting
   * Feedback](https://docs.google.com/forms/d/e/1FAIpQLSdwOlQDJAUoBiIgUZZ3S_Lwi8gr7Bb0k1jhvc-DEg7Rol3UjA/viewform).
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.RunFunnelReport
   */
  runFunnelReport: {
    methodKind: "unary";
    input: typeof RunFunnelReportRequestSchema;
    output: typeof RunFunnelReportResponseSchema;
  },
  /**
   * Creates an audience list for later retrieval. This method quickly returns
   * the audience list's resource name and initiates a long running asynchronous
   * request to form an audience list. To list the users in an audience list,
   * first create the audience list through this method and then send the
   * audience resource name to the `QueryAudienceList` method.
   *
   * See [Creating an Audience
   * List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Lists with examples.
   *
   * An audience list is a snapshot of the users currently in the audience at
   * the time of audience list creation. Creating audience lists for one
   * audience on different days will return different results as users enter and
   * exit the audience.
   *
   * Audiences in Google Analytics 4 allow you to segment your users in the ways
   * that are important to your business. To learn more, see
   * https://support.google.com/analytics/answer/9267572. Audience lists contain
   * the users in each audience.
   *
   * This method is available at beta stability at
   * [audienceExports.create](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/create).
   * To give your feedback on this API, complete the [Google Analytics Audience
   * Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.CreateAudienceList
   */
  createAudienceList: {
    methodKind: "unary";
    input: typeof CreateAudienceListRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Retrieves an audience list of users. After creating an audience, the users
   * are not immediately available for listing. First, a request to
   * `CreateAudienceList` is necessary to create an audience list of users, and
   * then second, this method is used to retrieve the users in the audience
   * list.
   *
   * See [Creating an Audience
   * List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Lists with examples.
   *
   * Audiences in Google Analytics 4 allow you to segment your users in the ways
   * that are important to your business. To learn more, see
   * https://support.google.com/analytics/answer/9267572.
   *
   * This method is available at beta stability at
   * [audienceExports.query](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/query).
   * To give your feedback on this API, complete the [Google Analytics Audience
   * Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.QueryAudienceList
   */
  queryAudienceList: {
    methodKind: "unary";
    input: typeof QueryAudienceListRequestSchema;
    output: typeof QueryAudienceListResponseSchema;
  },
  /**
   * Exports an audience list of users to a Google Sheet. After creating an
   * audience, the users are not immediately available for listing. First, a
   * request to `CreateAudienceList` is necessary to create an audience list of
   * users, and then second, this method is used to export those users in the
   * audience list to a Google Sheet.
   *
   * See [Creating an Audience
   * List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Lists with examples.
   *
   * Audiences in Google Analytics 4 allow you to segment your users in the ways
   * that are important to your business. To learn more, see
   * https://support.google.com/analytics/answer/9267572.
   *
   * This method is introduced at alpha stability with the intention of
   * gathering feedback on syntax and capabilities before entering beta. To give
   * your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.SheetExportAudienceList
   */
  sheetExportAudienceList: {
    methodKind: "unary";
    input: typeof SheetExportAudienceListRequestSchema;
    output: typeof SheetExportAudienceListResponseSchema;
  },
  /**
   * Gets configuration metadata about a specific audience list. This method
   * can be used to understand an audience list after it has been created.
   *
   * See [Creating an Audience
   * List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Lists with examples.
   *
   * This method is available at beta stability at
   * [audienceExports.get](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/get).
   * To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.GetAudienceList
   */
  getAudienceList: {
    methodKind: "unary";
    input: typeof GetAudienceListRequestSchema;
    output: typeof AudienceListSchema;
  },
  /**
   * Lists all audience lists for a property. This method can be used for you to
   * find and reuse existing audience lists rather than creating unnecessary new
   * audience lists. The same audience can have multiple audience lists that
   * represent the list of users that were in an audience on different days.
   *
   * See [Creating an Audience
   * List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
   * for an introduction to Audience Lists with examples.
   *
   * This method is available at beta stability at
   * [audienceExports.list](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/list).
   * To give your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.ListAudienceLists
   */
  listAudienceLists: {
    methodKind: "unary";
    input: typeof ListAudienceListsRequestSchema;
    output: typeof ListAudienceListsResponseSchema;
  },
  /**
   * Creates a recurring audience list. Recurring audience lists produces new
   * audience lists each day. Audience lists are users in an audience at the
   * time of the list's creation.
   *
   * A recurring audience list ensures that you have audience list based on the
   * most recent data available for use each day. If you manually create
   * audience list, you don't know when an audience list based on an additional
   * day's data is available. This recurring audience list automates the
   * creation of an audience list when an additional day's data is available.
   * You will consume fewer quota tokens by using recurring audience list versus
   * manually creating audience list at various times of day trying to guess
   * when an additional day's data is ready.
   *
   * This method is introduced at alpha stability with the intention of
   * gathering feedback on syntax and capabilities before entering beta. To give
   * your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.CreateRecurringAudienceList
   */
  createRecurringAudienceList: {
    methodKind: "unary";
    input: typeof CreateRecurringAudienceListRequestSchema;
    output: typeof RecurringAudienceListSchema;
  },
  /**
   * Gets configuration metadata about a specific recurring audience list. This
   * method can be used to understand a recurring audience list's state after it
   * has been created. For example, a recurring audience list resource will
   * generate audience list instances for each day, and this method can be used
   * to get the resource name of the most recent audience list instance.
   *
   * This method is introduced at alpha stability with the intention of
   * gathering feedback on syntax and capabilities before entering beta. To give
   * your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.GetRecurringAudienceList
   */
  getRecurringAudienceList: {
    methodKind: "unary";
    input: typeof GetRecurringAudienceListRequestSchema;
    output: typeof RecurringAudienceListSchema;
  },
  /**
   * Lists all recurring audience lists for a property. This method can be used
   * for you to find and reuse existing recurring audience lists rather than
   * creating unnecessary new recurring audience lists. The same audience can
   * have multiple recurring audience lists that represent different dimension
   * combinations; for example, just the dimension `deviceId` or both the
   * dimensions `deviceId` and `userId`.
   *
   * This method is introduced at alpha stability with the intention of
   * gathering feedback on syntax and capabilities before entering beta. To give
   * your feedback on this API, complete the
   * [Google Analytics Audience Export API
   * Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.ListRecurringAudienceLists
   */
  listRecurringAudienceLists: {
    methodKind: "unary";
    input: typeof ListRecurringAudienceListsRequestSchema;
    output: typeof ListRecurringAudienceListsResponseSchema;
  },
  /**
   * Get all property quotas organized by quota category for a given property.
   * This will charge 1 property quota from the category with the most quota.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.GetPropertyQuotasSnapshot
   */
  getPropertyQuotasSnapshot: {
    methodKind: "unary";
    input: typeof GetPropertyQuotasSnapshotRequestSchema;
    output: typeof PropertyQuotasSnapshotSchema;
  },
  /**
   * Initiates the creation of a report task. This method quickly
   * returns a report task and initiates a long running
   * asynchronous request to form a customized report of your Google Analytics
   * event data.
   *
   * A report task will be retained and available for querying for 72 hours
   * after it has been created.
   *
   * A report task created by one user can be listed and queried by all users
   * who have access to the property.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.CreateReportTask
   */
  createReportTask: {
    methodKind: "unary";
    input: typeof CreateReportTaskRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Retrieves a report task's content. After requesting the `CreateReportTask`,
   * you are able to retrieve the report content once the report is
   * ACTIVE. This method will return an error if the report task's state is not
   * `ACTIVE`. A query response will return the tabular row & column values of
   * the report.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.QueryReportTask
   */
  queryReportTask: {
    methodKind: "unary";
    input: typeof QueryReportTaskRequestSchema;
    output: typeof QueryReportTaskResponseSchema;
  },
  /**
   * Gets report metadata about a specific report task. After creating a report
   * task, use this method to check its processing state or inspect its
   * report definition.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.GetReportTask
   */
  getReportTask: {
    methodKind: "unary";
    input: typeof GetReportTaskRequestSchema;
    output: typeof ReportTaskSchema;
  },
  /**
   * Lists all report tasks for a property.
   *
   * @generated from rpc google.analytics.data.v1alpha.AlphaAnalyticsData.ListReportTasks
   */
  listReportTasks: {
    methodKind: "unary";
    input: typeof ListReportTasksRequestSchema;
    output: typeof ListReportTasksResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_analytics_data_v1alpha_analytics_data_api, 0);

