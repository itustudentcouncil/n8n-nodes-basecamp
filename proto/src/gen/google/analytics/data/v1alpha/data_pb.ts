// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/analytics/data/v1alpha/data.proto (package google.analytics.data.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/analytics/data/v1alpha/data.proto.
 */
export const file_google_analytics_data_v1alpha_data: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_duration]);

/**
 * A contiguous set of days: `startDate`, `startDate + 1`, ..., `endDate`.
 * Requests are allowed up to 4 date ranges.
 *
 * @generated from message google.analytics.data.v1alpha.DateRange
 */
export type DateRange = Message<"google.analytics.data.v1alpha.DateRange"> & {
  /**
   * The inclusive start date for the query in the format `YYYY-MM-DD`. Cannot
   * be after `end_date`. The format `NdaysAgo`, `yesterday`, or `today` is also
   * accepted, and in that case, the date is inferred based on the property's
   * reporting time zone.
   *
   * @generated from field: string start_date = 1;
   */
  startDate: string;

  /**
   * The inclusive end date for the query in the format `YYYY-MM-DD`. Cannot
   * be before `start_date`. The format `NdaysAgo`, `yesterday`, or `today` is
   * also accepted, and in that case, the date is inferred based on the
   * property's reporting time zone.
   *
   * @generated from field: string end_date = 2;
   */
  endDate: string;

  /**
   * Assigns a name to this date range. The dimension `dateRange` is valued to
   * this name in a report response. If set, cannot begin with `date_range_` or
   * `RESERVED_`. If not set, date ranges are named by their zero based index in
   * the request: `date_range_0`, `date_range_1`, etc.
   *
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.DateRange.
 * Use `create(DateRangeSchema)` to create a new message.
 */
export const DateRangeSchema: GenMessage<DateRange> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 0);

/**
 * Dimensions are attributes of your data. For example, the dimension city
 * indicates the city from which an event originates. Dimension values in report
 * responses are strings; for example, the city could be "Paris" or "New York".
 *
 * @generated from message google.analytics.data.v1alpha.Dimension
 */
export type Dimension = Message<"google.analytics.data.v1alpha.Dimension"> & {
  /**
   * The name of the dimension. See the [API
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#dimensions)
   * for the list of dimension names supported by core reporting methods such
   * as `runReport` and `batchRunReports`. See
   * [Realtime
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#dimensions)
   * for the list of dimension names supported by the `runRealtimeReport`
   * method. See
   * [Funnel
   * Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#dimensions)
   * for the list of dimension names supported by the `runFunnelReport`
   * method.
   *
   * If `dimensionExpression` is specified, `name` can be any string that you
   * would like within the allowed character set. For example if a
   * `dimensionExpression` concatenates `country` and `city`, you could call
   * that dimension `countryAndCity`. Dimension names that you choose must match
   * the regular expression `^[a-zA-Z0-9_]$`.
   *
   * Dimensions are referenced by `name` in `dimensionFilter`, `orderBys`,
   * `dimensionExpression`, and `pivots`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * One dimension can be the result of an expression of multiple dimensions.
   * For example, dimension "country, city": concatenate(country, ", ", city).
   *
   * @generated from field: google.analytics.data.v1alpha.DimensionExpression dimension_expression = 2;
   */
  dimensionExpression?: DimensionExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.Dimension.
 * Use `create(DimensionSchema)` to create a new message.
 */
export const DimensionSchema: GenMessage<Dimension> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 1);

/**
 * Used to express a dimension which is the result of a formula of multiple
 * dimensions. Example usages:
 * 1) lower_case(dimension)
 * 2) concatenate(dimension1, symbol, dimension2).
 *
 * @generated from message google.analytics.data.v1alpha.DimensionExpression
 */
export type DimensionExpression = Message<"google.analytics.data.v1alpha.DimensionExpression"> & {
  /**
   * Specify one type of dimension expression for `DimensionExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.DimensionExpression.one_expression
   */
  oneExpression: {
    /**
     * Used to convert a dimension value to lower case.
     *
     * @generated from field: google.analytics.data.v1alpha.DimensionExpression.CaseExpression lower_case = 4;
     */
    value: DimensionExpression_CaseExpression;
    case: "lowerCase";
  } | {
    /**
     * Used to convert a dimension value to upper case.
     *
     * @generated from field: google.analytics.data.v1alpha.DimensionExpression.CaseExpression upper_case = 5;
     */
    value: DimensionExpression_CaseExpression;
    case: "upperCase";
  } | {
    /**
     * Used to combine dimension values to a single dimension.
     * For example, dimension "country, city": concatenate(country, ", ", city).
     *
     * @generated from field: google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression concatenate = 6;
     */
    value: DimensionExpression_ConcatenateExpression;
    case: "concatenate";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.DimensionExpression.
 * Use `create(DimensionExpressionSchema)` to create a new message.
 */
export const DimensionExpressionSchema: GenMessage<DimensionExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 2);

/**
 * Used to convert a dimension value to a single case.
 *
 * @generated from message google.analytics.data.v1alpha.DimensionExpression.CaseExpression
 */
export type DimensionExpression_CaseExpression = Message<"google.analytics.data.v1alpha.DimensionExpression.CaseExpression"> & {
  /**
   * Name of a dimension. The name must refer back to a name in dimensions
   * field of the request.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.DimensionExpression.CaseExpression.
 * Use `create(DimensionExpression_CaseExpressionSchema)` to create a new message.
 */
export const DimensionExpression_CaseExpressionSchema: GenMessage<DimensionExpression_CaseExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 2, 0);

/**
 * Used to combine dimension values to a single dimension.
 *
 * @generated from message google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression
 */
export type DimensionExpression_ConcatenateExpression = Message<"google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression"> & {
  /**
   * Names of dimensions. The names must refer back to names in the dimensions
   * field of the request.
   *
   * @generated from field: repeated string dimension_names = 1;
   */
  dimensionNames: string[];

  /**
   * The delimiter placed between dimension names.
   *
   * Delimiters are often single characters such as "|" or "," but can be
   * longer strings. If a dimension value contains the delimiter, both will be
   * present in response with no distinction. For example if dimension 1 value
   * = "US,FR", dimension 2 value = "JP", and delimiter = ",", then the
   * response will contain "US,FR,JP".
   *
   * @generated from field: string delimiter = 2;
   */
  delimiter: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.DimensionExpression.ConcatenateExpression.
 * Use `create(DimensionExpression_ConcatenateExpressionSchema)` to create a new message.
 */
export const DimensionExpression_ConcatenateExpressionSchema: GenMessage<DimensionExpression_ConcatenateExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 2, 1);

/**
 * The quantitative measurements of a report. For example, the metric
 * `eventCount` is the total number of events. Requests are allowed up to 10
 * metrics.
 *
 * @generated from message google.analytics.data.v1alpha.Metric
 */
export type Metric = Message<"google.analytics.data.v1alpha.Metric"> & {
  /**
   * The name of the metric. See the [API
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/api-schema#metrics)
   * for the list of metric names supported by core reporting methods such
   * as `runReport` and `batchRunReports`. See
   * [Realtime
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/realtime-api-schema#metrics)
   * for the list of metric names supported by the `runRealtimeReport`
   * method. See
   * [Funnel
   * Metrics](https://developers.google.com/analytics/devguides/reporting/data/v1/exploration-api-schema#metrics)
   * for the list of metric names supported by the `runFunnelReport`
   * method.
   *
   * If `expression` is specified, `name` can be any string that you would like
   * within the allowed character set. For example if `expression` is
   * `screenPageViews/sessions`, you could call that metric's name =
   * `viewsPerSession`. Metric names that you choose must match the regular
   * expression `^[a-zA-Z0-9_]$`.
   *
   * Metrics are referenced by `name` in `metricFilter`, `orderBys`, and metric
   * `expression`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A mathematical expression for derived metrics. For example, the metric
   * Event count per user is `eventCount/totalUsers`.
   *
   * @generated from field: string expression = 2;
   */
  expression: string;

  /**
   * Indicates if a metric is invisible in the report response. If a metric is
   * invisible, the metric will not produce a column in the response, but can be
   * used in `metricFilter`, `orderBys`, or a metric `expression`.
   *
   * @generated from field: bool invisible = 3;
   */
  invisible: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.Metric.
 * Use `create(MetricSchema)` to create a new message.
 */
export const MetricSchema: GenMessage<Metric> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 3);

/**
 * To express dimension or metric filters. The fields in the same
 * FilterExpression need to be either all dimensions or all metrics.
 *
 * @generated from message google.analytics.data.v1alpha.FilterExpression
 */
export type FilterExpression = Message<"google.analytics.data.v1alpha.FilterExpression"> & {
  /**
   * Specify one type of filter expression for `FilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.FilterExpression.expr
   */
  expr: {
    /**
     * The FilterExpressions in and_group have an AND relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FilterExpressionList and_group = 1;
     */
    value: FilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The FilterExpressions in or_group have an OR relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FilterExpressionList or_group = 2;
     */
    value: FilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The FilterExpression is NOT of not_expression.
     *
     * @generated from field: google.analytics.data.v1alpha.FilterExpression not_expression = 3;
     */
    value: FilterExpression;
    case: "notExpression";
  } | {
    /**
     * A primitive filter. In the same FilterExpression, all of the filter's
     * field names need to be either all dimensions or all metrics.
     *
     * @generated from field: google.analytics.data.v1alpha.Filter filter = 4;
     */
    value: Filter;
    case: "filter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.FilterExpression.
 * Use `create(FilterExpressionSchema)` to create a new message.
 */
export const FilterExpressionSchema: GenMessage<FilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 4);

/**
 * A list of filter expressions.
 *
 * @generated from message google.analytics.data.v1alpha.FilterExpressionList
 */
export type FilterExpressionList = Message<"google.analytics.data.v1alpha.FilterExpressionList"> & {
  /**
   * A list of filter expressions.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.FilterExpression expressions = 1;
   */
  expressions: FilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1alpha.FilterExpressionList.
 * Use `create(FilterExpressionListSchema)` to create a new message.
 */
export const FilterExpressionListSchema: GenMessage<FilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 5);

/**
 * An expression to filter dimension or metric values.
 *
 * @generated from message google.analytics.data.v1alpha.Filter
 */
export type Filter = Message<"google.analytics.data.v1alpha.Filter"> & {
  /**
   * The dimension name or metric name. Must be a name defined in dimensions
   * or metrics.
   *
   * @generated from field: string field_name = 1;
   */
  fieldName: string;

  /**
   * Specify one type of filter for `Filter`.
   *
   * @generated from oneof google.analytics.data.v1alpha.Filter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1alpha.StringFilter string_filter = 2;
     */
    value: StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1alpha.InListFilter in_list_filter = 3;
     */
    value: InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1alpha.NumericFilter numeric_filter = 4;
     */
    value: NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for between two values.
     *
     * @generated from field: google.analytics.data.v1alpha.BetweenFilter between_filter = 5;
     */
    value: BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export const FilterSchema: GenMessage<Filter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 6);

/**
 * The filter for string
 *
 * @generated from message google.analytics.data.v1alpha.StringFilter
 */
export type StringFilter = Message<"google.analytics.data.v1alpha.StringFilter"> & {
  /**
   * The match type for this filter.
   *
   * @generated from field: google.analytics.data.v1alpha.StringFilter.MatchType match_type = 1;
   */
  matchType: StringFilter_MatchType;

  /**
   * The string value used for the matching.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * If true, the string value is case sensitive.
   *
   * @generated from field: bool case_sensitive = 3;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.StringFilter.
 * Use `create(StringFilterSchema)` to create a new message.
 */
export const StringFilterSchema: GenMessage<StringFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 7);

/**
 * The match type of a string filter
 *
 * @generated from enum google.analytics.data.v1alpha.StringFilter.MatchType
 */
export enum StringFilter_MatchType {
  /**
   * Unspecified
   *
   * @generated from enum value: MATCH_TYPE_UNSPECIFIED = 0;
   */
  MATCH_TYPE_UNSPECIFIED = 0,

  /**
   * Exact match of the string value.
   *
   * @generated from enum value: EXACT = 1;
   */
  EXACT = 1,

  /**
   * Begins with the string value.
   *
   * @generated from enum value: BEGINS_WITH = 2;
   */
  BEGINS_WITH = 2,

  /**
   * Ends with the string value.
   *
   * @generated from enum value: ENDS_WITH = 3;
   */
  ENDS_WITH = 3,

  /**
   * Contains the string value.
   *
   * @generated from enum value: CONTAINS = 4;
   */
  CONTAINS = 4,

  /**
   * Full match for the regular expression with the string value.
   *
   * @generated from enum value: FULL_REGEXP = 5;
   */
  FULL_REGEXP = 5,

  /**
   * Partial match for the regular expression with the string value.
   *
   * @generated from enum value: PARTIAL_REGEXP = 6;
   */
  PARTIAL_REGEXP = 6,
}

/**
 * Describes the enum google.analytics.data.v1alpha.StringFilter.MatchType.
 */
export const StringFilter_MatchTypeSchema: GenEnum<StringFilter_MatchType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 7, 0);

/**
 * The result needs to be in a list of string values.
 *
 * @generated from message google.analytics.data.v1alpha.InListFilter
 */
export type InListFilter = Message<"google.analytics.data.v1alpha.InListFilter"> & {
  /**
   * The list of string values.
   * Must be non-empty.
   *
   * @generated from field: repeated string values = 1;
   */
  values: string[];

  /**
   * If true, the string value is case sensitive.
   *
   * @generated from field: bool case_sensitive = 2;
   */
  caseSensitive: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.InListFilter.
 * Use `create(InListFilterSchema)` to create a new message.
 */
export const InListFilterSchema: GenMessage<InListFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 8);

/**
 * Filters for numeric or date values.
 *
 * @generated from message google.analytics.data.v1alpha.NumericFilter
 */
export type NumericFilter = Message<"google.analytics.data.v1alpha.NumericFilter"> & {
  /**
   * The operation type for this filter.
   *
   * @generated from field: google.analytics.data.v1alpha.NumericFilter.Operation operation = 1;
   */
  operation: NumericFilter_Operation;

  /**
   * A numeric value or a date value.
   *
   * @generated from field: google.analytics.data.v1alpha.NumericValue value = 2;
   */
  value?: NumericValue;
};

/**
 * Describes the message google.analytics.data.v1alpha.NumericFilter.
 * Use `create(NumericFilterSchema)` to create a new message.
 */
export const NumericFilterSchema: GenMessage<NumericFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 9);

/**
 * The operation applied to a numeric filter
 *
 * @generated from enum google.analytics.data.v1alpha.NumericFilter.Operation
 */
export enum NumericFilter_Operation {
  /**
   * Unspecified.
   *
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  OPERATION_UNSPECIFIED = 0,

  /**
   * Equal
   *
   * @generated from enum value: EQUAL = 1;
   */
  EQUAL = 1,

  /**
   * Less than
   *
   * @generated from enum value: LESS_THAN = 2;
   */
  LESS_THAN = 2,

  /**
   * Less than or equal
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 3;
   */
  LESS_THAN_OR_EQUAL = 3,

  /**
   * Greater than
   *
   * @generated from enum value: GREATER_THAN = 4;
   */
  GREATER_THAN = 4,

  /**
   * Greater than or equal
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 5;
   */
  GREATER_THAN_OR_EQUAL = 5,
}

/**
 * Describes the enum google.analytics.data.v1alpha.NumericFilter.Operation.
 */
export const NumericFilter_OperationSchema: GenEnum<NumericFilter_Operation> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 9, 0);

/**
 * Order bys define how rows will be sorted in the response. For example,
 * ordering rows by descending event count is one ordering, and ordering rows by
 * the event name string is a different ordering.
 *
 * @generated from message google.analytics.data.v1alpha.OrderBy
 */
export type OrderBy = Message<"google.analytics.data.v1alpha.OrderBy"> & {
  /**
   * Specify one type of order by for `OrderBy`.
   *
   * @generated from oneof google.analytics.data.v1alpha.OrderBy.one_order_by
   */
  oneOrderBy: {
    /**
     * Sorts results by a metric's values.
     *
     * @generated from field: google.analytics.data.v1alpha.OrderBy.MetricOrderBy metric = 1;
     */
    value: OrderBy_MetricOrderBy;
    case: "metric";
  } | {
    /**
     * Sorts results by a dimension's values.
     *
     * @generated from field: google.analytics.data.v1alpha.OrderBy.DimensionOrderBy dimension = 2;
     */
    value: OrderBy_DimensionOrderBy;
    case: "dimension";
  } | { case: undefined; value?: undefined };

  /**
   * If true, sorts by descending order.
   *
   * @generated from field: bool desc = 4;
   */
  desc: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.OrderBy.
 * Use `create(OrderBySchema)` to create a new message.
 */
export const OrderBySchema: GenMessage<OrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 10);

/**
 * Sorts by metric values.
 *
 * @generated from message google.analytics.data.v1alpha.OrderBy.MetricOrderBy
 */
export type OrderBy_MetricOrderBy = Message<"google.analytics.data.v1alpha.OrderBy.MetricOrderBy"> & {
  /**
   * A metric name in the request to order by.
   *
   * @generated from field: string metric_name = 1;
   */
  metricName: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.OrderBy.MetricOrderBy.
 * Use `create(OrderBy_MetricOrderBySchema)` to create a new message.
 */
export const OrderBy_MetricOrderBySchema: GenMessage<OrderBy_MetricOrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 10, 0);

/**
 * Sorts by dimension values.
 *
 * @generated from message google.analytics.data.v1alpha.OrderBy.DimensionOrderBy
 */
export type OrderBy_DimensionOrderBy = Message<"google.analytics.data.v1alpha.OrderBy.DimensionOrderBy"> & {
  /**
   * A dimension name in the request to order by.
   *
   * @generated from field: string dimension_name = 1;
   */
  dimensionName: string;

  /**
   * Controls the rule for dimension value ordering.
   *
   * @generated from field: google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.OrderType order_type = 2;
   */
  orderType: OrderBy_DimensionOrderBy_OrderType;
};

/**
 * Describes the message google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.
 * Use `create(OrderBy_DimensionOrderBySchema)` to create a new message.
 */
export const OrderBy_DimensionOrderBySchema: GenMessage<OrderBy_DimensionOrderBy> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 10, 1);

/**
 * Rule to order the string dimension values by.
 *
 * @generated from enum google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.OrderType
 */
export enum OrderBy_DimensionOrderBy_OrderType {
  /**
   * Unspecified.
   *
   * @generated from enum value: ORDER_TYPE_UNSPECIFIED = 0;
   */
  ORDER_TYPE_UNSPECIFIED = 0,

  /**
   * Alphanumeric sort by Unicode code point. For example, "2" < "A" < "X" <
   * "b" < "z".
   *
   * @generated from enum value: ALPHANUMERIC = 1;
   */
  ALPHANUMERIC = 1,

  /**
   * Case insensitive alphanumeric sort by lower case Unicode code point.
   * For example, "2" < "A" < "b" < "X" < "z".
   *
   * @generated from enum value: CASE_INSENSITIVE_ALPHANUMERIC = 2;
   */
  CASE_INSENSITIVE_ALPHANUMERIC = 2,

  /**
   * Dimension values are converted to numbers before sorting. For example
   * in NUMERIC sort, "25" < "100", and in `ALPHANUMERIC` sort, "100" <
   * "25". Non-numeric dimension values all have equal ordering value below
   * all numeric values.
   *
   * @generated from enum value: NUMERIC = 3;
   */
  NUMERIC = 3,
}

/**
 * Describes the enum google.analytics.data.v1alpha.OrderBy.DimensionOrderBy.OrderType.
 */
export const OrderBy_DimensionOrderBy_OrderTypeSchema: GenEnum<OrderBy_DimensionOrderBy_OrderType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 10, 1, 0);

/**
 * To express that the result needs to be between two numbers (inclusive).
 *
 * @generated from message google.analytics.data.v1alpha.BetweenFilter
 */
export type BetweenFilter = Message<"google.analytics.data.v1alpha.BetweenFilter"> & {
  /**
   * Begins with this number.
   *
   * @generated from field: google.analytics.data.v1alpha.NumericValue from_value = 1;
   */
  fromValue?: NumericValue;

  /**
   * Ends with this number.
   *
   * @generated from field: google.analytics.data.v1alpha.NumericValue to_value = 2;
   */
  toValue?: NumericValue;
};

/**
 * Describes the message google.analytics.data.v1alpha.BetweenFilter.
 * Use `create(BetweenFilterSchema)` to create a new message.
 */
export const BetweenFilterSchema: GenMessage<BetweenFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 11);

/**
 * To represent a number.
 *
 * @generated from message google.analytics.data.v1alpha.NumericValue
 */
export type NumericValue = Message<"google.analytics.data.v1alpha.NumericValue"> & {
  /**
   * One of a numeric value
   *
   * @generated from oneof google.analytics.data.v1alpha.NumericValue.one_value
   */
  oneValue: {
    /**
     * Integer value
     *
     * @generated from field: int64 int64_value = 1;
     */
    value: bigint;
    case: "int64Value";
  } | {
    /**
     * Double value
     *
     * @generated from field: double double_value = 2;
     */
    value: number;
    case: "doubleValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.NumericValue.
 * Use `create(NumericValueSchema)` to create a new message.
 */
export const NumericValueSchema: GenMessage<NumericValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 12);

/**
 * The specification of cohorts for a cohort report.
 *
 * Cohort reports create a time series of user retention for the cohort. For
 * example, you could select the cohort of users that were acquired in the first
 * week of September and follow that cohort for the next six weeks. Selecting
 * the users acquired in the first week of September cohort is specified in the
 * `cohort` object. Following that cohort for the next six weeks is specified in
 * the `cohortsRange` object.
 *
 * For examples, see [Cohort Report
 * Examples](https://developers.google.com/analytics/devguides/reporting/data/v1/advanced#cohort_report_examples).
 *
 * The report response could show a weekly time series where say your app has
 * retained 60% of this cohort after three weeks and 25% of this cohort after
 * six weeks. These two percentages can be calculated by the metric
 * `cohortActiveUsers/cohortTotalUsers` and will be separate rows in the report.
 *
 * @generated from message google.analytics.data.v1alpha.CohortSpec
 */
export type CohortSpec = Message<"google.analytics.data.v1alpha.CohortSpec"> & {
  /**
   * Defines the selection criteria to group users into cohorts.
   *
   * Most cohort reports define only a single cohort. If multiple cohorts are
   * specified, each cohort can be recognized in the report by their name.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Cohort cohorts = 1;
   */
  cohorts: Cohort[];

  /**
   * Cohort reports follow cohorts over an extended reporting date range. This
   * range specifies an offset duration to follow the cohorts over.
   *
   * @generated from field: google.analytics.data.v1alpha.CohortsRange cohorts_range = 2;
   */
  cohortsRange?: CohortsRange;

  /**
   * Optional settings for a cohort report.
   *
   * @generated from field: google.analytics.data.v1alpha.CohortReportSettings cohort_report_settings = 3;
   */
  cohortReportSettings?: CohortReportSettings;
};

/**
 * Describes the message google.analytics.data.v1alpha.CohortSpec.
 * Use `create(CohortSpecSchema)` to create a new message.
 */
export const CohortSpecSchema: GenMessage<CohortSpec> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 13);

/**
 * Defines a cohort selection criteria. A cohort is a group of users who share
 * a common characteristic. For example, users with the same `firstSessionDate`
 * belong to the same cohort.
 *
 * @generated from message google.analytics.data.v1alpha.Cohort
 */
export type Cohort = Message<"google.analytics.data.v1alpha.Cohort"> & {
  /**
   * Assigns a name to this cohort. The dimension `cohort` is valued to this
   * name in a report response. If set, cannot begin with `cohort_` or
   * `RESERVED_`. If not set, cohorts are named by their zero based index
   * `cohort_0`, `cohort_1`, etc.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Dimension used by the cohort. Required and only supports
   * `firstSessionDate`.
   *
   * @generated from field: string dimension = 2;
   */
  dimension: string;

  /**
   * The cohort selects users whose first touch date is between start date and
   * end date defined in the `dateRange`. This `dateRange` does not specify the
   * full date range of event data that is present in a cohort report. In a
   * cohort report, this `dateRange` is extended by the granularity and offset
   * present in the `cohortsRange`; event data for the extended reporting date
   * range is present in a cohort report.
   *
   * In a cohort request, this `dateRange` is required and the `dateRanges` in
   * the `RunReportRequest` or `RunPivotReportRequest` must be unspecified.
   *
   * This `dateRange` should generally be aligned with the cohort's granularity.
   * If `CohortsRange` uses daily granularity, this `dateRange` can be a single
   * day. If `CohortsRange` uses weekly granularity, this `dateRange` can be
   * aligned to a week boundary, starting at Sunday and ending Saturday. If
   * `CohortsRange` uses monthly granularity, this `dateRange` can be aligned to
   * a month, starting at the first and ending on the last day of the month.
   *
   * @generated from field: google.analytics.data.v1alpha.DateRange date_range = 3;
   */
  dateRange?: DateRange;
};

/**
 * Describes the message google.analytics.data.v1alpha.Cohort.
 * Use `create(CohortSchema)` to create a new message.
 */
export const CohortSchema: GenMessage<Cohort> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 14);

/**
 * Configures the extended reporting date range for a cohort report. Specifies
 * an offset duration to follow the cohorts over.
 *
 * @generated from message google.analytics.data.v1alpha.CohortsRange
 */
export type CohortsRange = Message<"google.analytics.data.v1alpha.CohortsRange"> & {
  /**
   * Required. The granularity used to interpret the `startOffset` and
   * `endOffset` for the extended reporting date range for a cohort report.
   *
   * @generated from field: google.analytics.data.v1alpha.CohortsRange.Granularity granularity = 1;
   */
  granularity: CohortsRange_Granularity;

  /**
   * `startOffset` specifies the start date of the extended reporting date range
   * for a cohort report. `startOffset` is commonly set to 0 so that reports
   * contain data from the acquisition of the cohort forward.
   *
   * If `granularity` is `DAILY`, the `startDate` of the extended reporting date
   * range is `startDate` of the cohort plus `startOffset` days.
   *
   * If `granularity` is `WEEKLY`, the `startDate` of the extended reporting
   * date range is `startDate` of the cohort plus `startOffset * 7` days.
   *
   * If `granularity` is `MONTHLY`, the `startDate` of the extended reporting
   * date range is `startDate` of the cohort plus `startOffset * 30` days.
   *
   * @generated from field: int32 start_offset = 2;
   */
  startOffset: number;

  /**
   * Required. `endOffset` specifies the end date of the extended reporting date
   * range for a cohort report. `endOffset` can be any positive integer but is
   * commonly set to 5 to 10 so that reports contain data on the cohort for the
   * next several granularity time periods.
   *
   * If `granularity` is `DAILY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset` days.
   *
   * If `granularity` is `WEEKLY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset * 7` days.
   *
   * If `granularity` is `MONTHLY`, the `endDate` of the extended reporting date
   * range is `endDate` of the cohort plus `endOffset * 30` days.
   *
   * @generated from field: int32 end_offset = 3;
   */
  endOffset: number;
};

/**
 * Describes the message google.analytics.data.v1alpha.CohortsRange.
 * Use `create(CohortsRangeSchema)` to create a new message.
 */
export const CohortsRangeSchema: GenMessage<CohortsRange> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 15);

/**
 * The granularity used to interpret the `startOffset` and `endOffset` for the
 * extended reporting date range for a cohort report.
 *
 * @generated from enum google.analytics.data.v1alpha.CohortsRange.Granularity
 */
export enum CohortsRange_Granularity {
  /**
   * Should never be specified.
   *
   * @generated from enum value: GRANULARITY_UNSPECIFIED = 0;
   */
  GRANULARITY_UNSPECIFIED = 0,

  /**
   * Daily granularity. Commonly used if the cohort's `dateRange` is a single
   * day and the request contains `cohortNthDay`.
   *
   * @generated from enum value: DAILY = 1;
   */
  DAILY = 1,

  /**
   * Weekly granularity. Commonly used if the cohort's `dateRange` is a week
   * in duration (starting on Sunday and ending on Saturday) and the request
   * contains `cohortNthWeek`.
   *
   * @generated from enum value: WEEKLY = 2;
   */
  WEEKLY = 2,

  /**
   * Monthly granularity. Commonly used if the cohort's `dateRange` is a month
   * in duration and the request contains `cohortNthMonth`.
   *
   * @generated from enum value: MONTHLY = 3;
   */
  MONTHLY = 3,
}

/**
 * Describes the enum google.analytics.data.v1alpha.CohortsRange.Granularity.
 */
export const CohortsRange_GranularitySchema: GenEnum<CohortsRange_Granularity> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 15, 0);

/**
 * Optional settings of a cohort report.
 *
 * @generated from message google.analytics.data.v1alpha.CohortReportSettings
 */
export type CohortReportSettings = Message<"google.analytics.data.v1alpha.CohortReportSettings"> & {
  /**
   * If true, accumulates the result from first touch day to the end day. Not
   * supported in `RunReportRequest`.
   *
   * @generated from field: bool accumulate = 1;
   */
  accumulate: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.CohortReportSettings.
 * Use `create(CohortReportSettingsSchema)` to create a new message.
 */
export const CohortReportSettingsSchema: GenMessage<CohortReportSettings> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 16);

/**
 * Response's metadata carrying additional information about the report content.
 *
 * @generated from message google.analytics.data.v1alpha.ResponseMetaData
 */
export type ResponseMetaData = Message<"google.analytics.data.v1alpha.ResponseMetaData"> & {
  /**
   * If true, indicates some buckets of dimension combinations are rolled into
   * "(other)" row. This can happen for high cardinality reports.
   *
   * The metadata parameter dataLossFromOtherRow is populated based on the
   * aggregated data table used in the report. The parameter will be accurately
   * populated regardless of the filters and limits in the report.
   *
   * For example, the (other) row could be dropped from the report because the
   * request contains a filter on sessionSource = google. This parameter will
   * still be populated if data loss from other row was present in the input
   * aggregate data used to generate this report.
   *
   * To learn more, see [About the (other) row and data
   * sampling](https://support.google.com/analytics/answer/13208658#reports).
   *
   * @generated from field: bool data_loss_from_other_row = 3;
   */
  dataLossFromOtherRow: boolean;

  /**
   * Describes the schema restrictions actively enforced in creating this
   * report. To learn more, see [Access and data-restriction
   * management](https://support.google.com/analytics/answer/10851388).
   *
   * @generated from field: optional google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse schema_restriction_response = 4;
   */
  schemaRestrictionResponse?: ResponseMetaData_SchemaRestrictionResponse;

  /**
   * The currency code used in this report. Intended to be used in formatting
   * currency metrics like `purchaseRevenue` for visualization. If currency_code
   * was specified in the request, this response parameter will echo the request
   * parameter; otherwise, this response parameter is the property's current
   * currency_code.
   *
   * Currency codes are string encodings of currency types from the ISO 4217
   * standard (https://en.wikipedia.org/wiki/ISO_4217); for example "USD",
   * "EUR", "JPY". To learn more, see
   * https://support.google.com/analytics/answer/9796179.
   *
   * @generated from field: optional string currency_code = 5;
   */
  currencyCode?: string;

  /**
   * The property's current timezone. Intended to be used to interpret
   * time-based dimensions like `hour` and `minute`. Formatted as strings from
   * the IANA Time Zone database (https://www.iana.org/time-zones); for example
   * "America/New_York" or "Asia/Tokyo".
   *
   * @generated from field: optional string time_zone = 6;
   */
  timeZone?: string;

  /**
   * If empty reason is specified, the report is empty for this reason.
   *
   * @generated from field: optional string empty_reason = 7;
   */
  emptyReason?: string;

  /**
   * If `subjectToThresholding` is true, this report is subject to thresholding
   * and only returns data that meets the minimum aggregation thresholds. It is
   * possible for a request to be subject to thresholding thresholding and no
   * data is absent from the report, and this happens when all data is above the
   * thresholds. To learn more, see [Data
   * thresholds](https://support.google.com/analytics/answer/9383630) and [About
   * Demographics and
   * Interests](https://support.google.com/analytics/answer/2799357).
   *
   * @generated from field: optional bool subject_to_thresholding = 8;
   */
  subjectToThresholding?: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.ResponseMetaData.
 * Use `create(ResponseMetaDataSchema)` to create a new message.
 */
export const ResponseMetaDataSchema: GenMessage<ResponseMetaData> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 17);

/**
 * The schema restrictions actively enforced in creating this report. To learn
 * more, see [Access and data-restriction
 * management](https://support.google.com/analytics/answer/10851388).
 *
 * @generated from message google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse
 */
export type ResponseMetaData_SchemaRestrictionResponse = Message<"google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse"> & {
  /**
   * All restrictions actively enforced in creating the report. For example,
   * `purchaseRevenue` always has the restriction type `REVENUE_DATA`.
   * However, this active response restriction is only populated if the user's
   * custom role disallows access to `REVENUE_DATA`.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction active_metric_restrictions = 1;
   */
  activeMetricRestrictions: ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction[];
};

/**
 * Describes the message google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse.
 * Use `create(ResponseMetaData_SchemaRestrictionResponseSchema)` to create a new message.
 */
export const ResponseMetaData_SchemaRestrictionResponseSchema: GenMessage<ResponseMetaData_SchemaRestrictionResponse> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 17, 0);

/**
 * A metric actively restricted in creating the report.
 *
 * @generated from message google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction
 */
export type ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction = Message<"google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction"> & {
  /**
   * The name of the restricted metric.
   *
   * @generated from field: optional string metric_name = 1;
   */
  metricName?: string;

  /**
   * The reason for this metric's restriction.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.RestrictedMetricType restricted_metric_types = 2;
   */
  restrictedMetricTypes: RestrictedMetricType[];
};

/**
 * Describes the message google.analytics.data.v1alpha.ResponseMetaData.SchemaRestrictionResponse.ActiveMetricRestriction.
 * Use `create(ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestrictionSchema)` to create a new message.
 */
export const ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestrictionSchema: GenMessage<ResponseMetaData_SchemaRestrictionResponse_ActiveMetricRestriction> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 17, 0, 0);

/**
 * Describes a dimension column in the report. Dimensions requested in a report
 * produce column entries within rows and DimensionHeaders. However, dimensions
 * used exclusively within filters or expressions do not produce columns in a
 * report; correspondingly, those dimensions do not produce headers.
 *
 * @generated from message google.analytics.data.v1alpha.DimensionHeader
 */
export type DimensionHeader = Message<"google.analytics.data.v1alpha.DimensionHeader"> & {
  /**
   * The dimension's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.analytics.data.v1alpha.DimensionHeader.
 * Use `create(DimensionHeaderSchema)` to create a new message.
 */
export const DimensionHeaderSchema: GenMessage<DimensionHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 18);

/**
 * Describes a metric column in the report. Visible metrics requested in a
 * report produce column entries within rows and MetricHeaders. However,
 * metrics used exclusively within filters or expressions do not produce columns
 * in a report; correspondingly, those metrics do not produce headers.
 *
 * @generated from message google.analytics.data.v1alpha.MetricHeader
 */
export type MetricHeader = Message<"google.analytics.data.v1alpha.MetricHeader"> & {
  /**
   * The metric's name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The metric's data type.
   *
   * @generated from field: google.analytics.data.v1alpha.MetricType type = 2;
   */
  type: MetricType;
};

/**
 * Describes the message google.analytics.data.v1alpha.MetricHeader.
 * Use `create(MetricHeaderSchema)` to create a new message.
 */
export const MetricHeaderSchema: GenMessage<MetricHeader> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 19);

/**
 * Report data for each row.
 * For example if RunReportRequest contains:
 *
 * ```none
 * "dimensions": [
 *   {
 *     "name": "eventName"
 *   },
 *   {
 *     "name": "countryId"
 *   }
 * ],
 * "metrics": [
 *   {
 *     "name": "eventCount"
 *   }
 * ]
 * ```
 *
 * One row with 'in_app_purchase' as the eventName, 'JP' as the countryId, and
 * 15 as the eventCount, would be:
 *
 * ```none
 * "dimensionValues": [
 *   {
 *     "value": "in_app_purchase"
 *   },
 *   {
 *     "value": "JP"
 *   }
 * ],
 * "metricValues": [
 *   {
 *     "value": "15"
 *   }
 * ]
 * ```
 *
 * @generated from message google.analytics.data.v1alpha.Row
 */
export type Row = Message<"google.analytics.data.v1alpha.Row"> & {
  /**
   * List of requested dimension values. In a PivotReport, dimension_values
   * are only listed for dimensions included in a pivot.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.DimensionValue dimension_values = 1;
   */
  dimensionValues: DimensionValue[];

  /**
   * List of requested visible metric values.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.MetricValue metric_values = 2;
   */
  metricValues: MetricValue[];
};

/**
 * Describes the message google.analytics.data.v1alpha.Row.
 * Use `create(RowSchema)` to create a new message.
 */
export const RowSchema: GenMessage<Row> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 20);

/**
 * The value of a dimension.
 *
 * @generated from message google.analytics.data.v1alpha.DimensionValue
 */
export type DimensionValue = Message<"google.analytics.data.v1alpha.DimensionValue"> & {
  /**
   * One kind of dimension value
   *
   * @generated from oneof google.analytics.data.v1alpha.DimensionValue.one_value
   */
  oneValue: {
    /**
     * Value as a string if the dimension type is a string.
     *
     * @generated from field: string value = 1;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.DimensionValue.
 * Use `create(DimensionValueSchema)` to create a new message.
 */
export const DimensionValueSchema: GenMessage<DimensionValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 21);

/**
 * The value of a metric.
 *
 * @generated from message google.analytics.data.v1alpha.MetricValue
 */
export type MetricValue = Message<"google.analytics.data.v1alpha.MetricValue"> & {
  /**
   * One of metric value
   *
   * @generated from oneof google.analytics.data.v1alpha.MetricValue.one_value
   */
  oneValue: {
    /**
     * Measurement value. See MetricHeader for type.
     *
     * @generated from field: string value = 4;
     */
    value: string;
    case: "value";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.MetricValue.
 * Use `create(MetricValueSchema)` to create a new message.
 */
export const MetricValueSchema: GenMessage<MetricValue> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 22);

/**
 * Current state of all quotas for this Analytics Property. If any quota for a
 * property is exhausted, all requests to that property will return Resource
 * Exhausted errors.
 *
 * @generated from message google.analytics.data.v1alpha.PropertyQuota
 */
export type PropertyQuota = Message<"google.analytics.data.v1alpha.PropertyQuota"> & {
  /**
   * Standard Analytics Properties can use up to 200,000 tokens per day;
   * Analytics 360 Properties can use 2,000,000 tokens per day. Most requests
   * consume fewer than 10 tokens.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus tokens_per_day = 1;
   */
  tokensPerDay?: QuotaStatus;

  /**
   * Standard Analytics Properties can use up to 40,000 tokens per hour;
   * Analytics 360 Properties can use 400,000 tokens per hour. An API request
   * consumes a single number of tokens, and that number is deducted from all of
   * the hourly, daily, and per project hourly quotas.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus tokens_per_hour = 2;
   */
  tokensPerHour?: QuotaStatus;

  /**
   * Standard Analytics Properties can send up to 10 concurrent requests;
   * Analytics 360 Properties can use up to 50 concurrent requests.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus concurrent_requests = 3;
   */
  concurrentRequests?: QuotaStatus;

  /**
   * Standard Analytics Properties and cloud project pairs can have up to 10
   * server errors per hour; Analytics 360 Properties and cloud project pairs
   * can have up to 50 server errors per hour.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus server_errors_per_project_per_hour = 4;
   */
  serverErrorsPerProjectPerHour?: QuotaStatus;

  /**
   * Analytics Properties can send up to 120 requests with potentially
   * thresholded dimensions per hour. In a batch request, each report request
   * is individually counted for this quota if the request contains potentially
   * thresholded dimensions.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus potentially_thresholded_requests_per_hour = 5;
   */
  potentiallyThresholdedRequestsPerHour?: QuotaStatus;

  /**
   * Analytics Properties can use up to 35% of their tokens per project per
   * hour. This amounts to standard Analytics Properties can use up to 14,000
   * tokens per project per hour, and Analytics 360 Properties can use 140,000
   * tokens per project per hour. An API request consumes a single number of
   * tokens, and that number is deducted from all of the hourly, daily, and per
   * project hourly quotas.
   *
   * @generated from field: google.analytics.data.v1alpha.QuotaStatus tokens_per_project_per_hour = 6;
   */
  tokensPerProjectPerHour?: QuotaStatus;
};

/**
 * Describes the message google.analytics.data.v1alpha.PropertyQuota.
 * Use `create(PropertyQuotaSchema)` to create a new message.
 */
export const PropertyQuotaSchema: GenMessage<PropertyQuota> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 23);

/**
 * Current state for a particular quota group.
 *
 * @generated from message google.analytics.data.v1alpha.QuotaStatus
 */
export type QuotaStatus = Message<"google.analytics.data.v1alpha.QuotaStatus"> & {
  /**
   * Quota consumed by this request.
   *
   * @generated from field: int32 consumed = 1;
   */
  consumed: number;

  /**
   * Quota remaining after this request.
   *
   * @generated from field: int32 remaining = 2;
   */
  remaining: number;
};

/**
 * Describes the message google.analytics.data.v1alpha.QuotaStatus.
 * Use `create(QuotaStatusSchema)` to create a new message.
 */
export const QuotaStatusSchema: GenMessage<QuotaStatus> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 24);

/**
 * Breakdowns add a dimension to the funnel table sub report response.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelBreakdown
 */
export type FunnelBreakdown = Message<"google.analytics.data.v1alpha.FunnelBreakdown"> & {
  /**
   * The dimension column added to the funnel table sub report response. The
   * breakdown dimension breaks down each funnel step. A valid
   * `breakdownDimension` is required if `funnelBreakdown` is specified.
   *
   * @generated from field: google.analytics.data.v1alpha.Dimension breakdown_dimension = 1;
   */
  breakdownDimension?: Dimension;

  /**
   * The maximum number of distinct values of the breakdown dimension to return
   * in the response. A `limit` of `5` is used if limit is not specified. Limit
   * must exceed zero and cannot exceed 15.
   *
   * @generated from field: optional int64 limit = 2;
   */
  limit?: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelBreakdown.
 * Use `create(FunnelBreakdownSchema)` to create a new message.
 */
export const FunnelBreakdownSchema: GenMessage<FunnelBreakdown> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 25);

/**
 * Next actions state the value for a dimension after the user has achieved
 * a step but before the same user has achieved the next step. For example if
 * the `nextActionDimension` is `eventName`, then `nextActionDimension` in the
 * `i`th funnel step row will return first event after the event that qualified
 * the user into the `i`th funnel step but before the user achieved the `i+1`th
 * funnel step.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelNextAction
 */
export type FunnelNextAction = Message<"google.analytics.data.v1alpha.FunnelNextAction"> & {
  /**
   * The dimension column added to the funnel visualization sub report response.
   * The next action dimension returns the next dimension value of this
   * dimension after the user has attained the `i`th funnel step.
   *
   * `nextActionDimension` currently only supports `eventName` and most Page /
   * Screen dimensions like `pageTitle` and `pagePath`. `nextActionDimension`
   * cannot be a dimension expression.
   *
   * @generated from field: google.analytics.data.v1alpha.Dimension next_action_dimension = 1;
   */
  nextActionDimension?: Dimension;

  /**
   * The maximum number of distinct values of the breakdown dimension to return
   * in the response. A `limit` of `5` is used if limit is not specified. Limit
   * must exceed zero and cannot exceed 5.
   *
   * @generated from field: optional int64 limit = 2;
   */
  limit?: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelNextAction.
 * Use `create(FunnelNextActionSchema)` to create a new message.
 */
export const FunnelNextActionSchema: GenMessage<FunnelNextAction> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 26);

/**
 * Configures the funnel in a funnel report request. A funnel reports on users
 * as they pass through a sequence of steps.
 *
 * Funnel exploration lets you visualize the steps your users take to complete a
 * task and quickly see how well they are succeeding or failing at each step.
 * For example, how do prospects become shoppers and then become buyers? How do
 * one time buyers become repeat buyers? With this information, you can improve
 * inefficient or abandoned customer journeys.
 *
 * @generated from message google.analytics.data.v1alpha.Funnel
 */
export type Funnel = Message<"google.analytics.data.v1alpha.Funnel"> & {
  /**
   * In an open funnel, users can enter the funnel in any step, and in a closed
   * funnel, users must enter the funnel in the first step. Optional. If
   * unspecified, a closed funnel is used.
   *
   * @generated from field: bool is_open_funnel = 1;
   */
  isOpenFunnel: boolean;

  /**
   * The sequential steps of this funnel.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.FunnelStep steps = 2;
   */
  steps: FunnelStep[];
};

/**
 * Describes the message google.analytics.data.v1alpha.Funnel.
 * Use `create(FunnelSchema)` to create a new message.
 */
export const FunnelSchema: GenMessage<Funnel> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 27);

/**
 * Steps define the user journey you want to measure. Steps contain one or
 * more conditions that your users must meet to be included in that step of
 * the funnel journey.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelStep
 */
export type FunnelStep = Message<"google.analytics.data.v1alpha.FunnelStep"> & {
  /**
   * The distinctive name for this step. If unspecified, steps will be named
   * by a 1 based indexed name (for example "0. ", "1. ", etc.). This name
   * defines string value returned by the `funnelStepName` dimension. For
   * example, specifying `name = Purchase` in the request's third funnel step
   * will produce `3. Purchase` in the funnel report response.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * If true, this step must directly follow the previous step. If false,
   * there can be events between the previous step and this step. If
   * unspecified, `isDirectlyFollowedBy` is treated as false.
   *
   * @generated from field: bool is_directly_followed_by = 2;
   */
  isDirectlyFollowedBy: boolean;

  /**
   * If specified, this step must complete within this duration of the
   * completion of the prior step. `withinDurationFromPriorStep` is inclusive
   * of the endpoint at the microsecond granularity. For example a duration of
   * 5 seconds can be completed at 4.9 or 5.0 seconds, but not 5 seconds and 1
   * microsecond.
   *
   * `withinDurationFromPriorStep` is optional, and if unspecified, steps may
   * be separated by any time duration.
   *
   * @generated from field: optional google.protobuf.Duration within_duration_from_prior_step = 3;
   */
  withinDurationFromPriorStep?: Duration;

  /**
   * The condition that your users must meet to be included in this step of
   * the funnel journey.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelFilterExpression filter_expression = 4;
   */
  filterExpression?: FunnelFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelStep.
 * Use `create(FunnelStepSchema)` to create a new message.
 */
export const FunnelStepSchema: GenMessage<FunnelStep> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 28);

/**
 * Funnel sub reports contain the dimension and metric data values. For example,
 * 12 users reached the second step of the funnel.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelSubReport
 */
export type FunnelSubReport = Message<"google.analytics.data.v1alpha.FunnelSubReport"> & {
  /**
   * Describes dimension columns. Funnel reports always include the funnel step
   * dimension in sub report responses. Additional dimensions like breakdowns,
   * dates, and next actions may be present in the response if requested.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.DimensionHeader dimension_headers = 1;
   */
  dimensionHeaders: DimensionHeader[];

  /**
   * Describes metric columns. Funnel reports always include active users in sub
   * report responses. The funnel table includes additional metrics like
   * completion rate, abandonments, and abandonments rate.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.MetricHeader metric_headers = 2;
   */
  metricHeaders: MetricHeader[];

  /**
   * Rows of dimension value combinations and metric values in the report.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.Row rows = 3;
   */
  rows: Row[];

  /**
   * Metadata for the funnel report.
   *
   * @generated from field: google.analytics.data.v1alpha.FunnelResponseMetadata metadata = 4;
   */
  metadata?: FunnelResponseMetadata;
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelSubReport.
 * Use `create(FunnelSubReportSchema)` to create a new message.
 */
export const FunnelSubReportSchema: GenMessage<FunnelSubReport> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 29);

/**
 * User segments are subsets of users who engaged with your site or app. For
 * example, users who have previously purchased; users who added items to their
 * shopping carts, but didn’t complete a purchase.
 *
 * @generated from message google.analytics.data.v1alpha.UserSegment
 */
export type UserSegment = Message<"google.analytics.data.v1alpha.UserSegment"> & {
  /**
   * Defines which users are included in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.UserSegmentCriteria user_inclusion_criteria = 1;
   */
  userInclusionCriteria?: UserSegmentCriteria;

  /**
   * Defines which users are excluded in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.UserSegmentExclusion exclusion = 2;
   */
  exclusion?: UserSegmentExclusion;
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSegment.
 * Use `create(UserSegmentSchema)` to create a new message.
 */
export const UserSegmentSchema: GenMessage<UserSegment> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 30);

/**
 * A user matches a criteria if the user's events meet the conditions in the
 * criteria.
 *
 * @generated from message google.analytics.data.v1alpha.UserSegmentCriteria
 */
export type UserSegmentCriteria = Message<"google.analytics.data.v1alpha.UserSegmentCriteria"> & {
  /**
   * A user matches this criteria if the user matches each of these
   * `andConditionGroups` and each of the `andSequenceGroups`.
   * `andConditionGroups` may be empty if `andSequenceGroups` are specified.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.UserSegmentConditionGroup and_condition_groups = 1;
   */
  andConditionGroups: UserSegmentConditionGroup[];

  /**
   * A user matches this criteria if the user matches each of these
   * `andSequenceGroups` and each of the `andConditionGroups`.
   * `andSequenceGroups` may be empty if `andConditionGroups` are specified.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.UserSegmentSequenceGroup and_sequence_groups = 2;
   */
  andSequenceGroups: UserSegmentSequenceGroup[];
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSegmentCriteria.
 * Use `create(UserSegmentCriteriaSchema)` to create a new message.
 */
export const UserSegmentCriteriaSchema: GenMessage<UserSegmentCriteria> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 31);

/**
 * Conditions tell Analytics what data to include in or exclude from the
 * segment.
 *
 * @generated from message google.analytics.data.v1alpha.UserSegmentConditionGroup
 */
export type UserSegmentConditionGroup = Message<"google.analytics.data.v1alpha.UserSegmentConditionGroup"> & {
  /**
   * Data is included or excluded from the segment based on if it matches
   * the condition group. This scoping defines how many events the
   * `segmentFilterExpression` is evaluated on before the condition group
   * is determined to be matched or not. For example if `conditionScoping =
   * USER_CRITERIA_WITHIN_SAME_SESSION`, the expression is evaluated on all
   * events in a session, and then, the condition group is determined to be
   * matched or not for this user. For example if `conditionScoping =
   * USER_CRITERIA_WITHIN_SAME_EVENT`, the expression is evaluated on a single
   * event, and then, the condition group is determined to be matched or not for
   * this user.
   *
   * Optional. If unspecified, `conditionScoping = ACROSS_ALL_SESSIONS` is
   * used.
   *
   * @generated from field: google.analytics.data.v1alpha.UserCriteriaScoping condition_scoping = 1;
   */
  conditionScoping: UserCriteriaScoping;

  /**
   * Data is included or excluded from the segment based on if it matches
   * this expression. Expressions express criteria on dimension, metrics,
   * and/or parameters.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpression segment_filter_expression = 2;
   */
  segmentFilterExpression?: SegmentFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSegmentConditionGroup.
 * Use `create(UserSegmentConditionGroupSchema)` to create a new message.
 */
export const UserSegmentConditionGroupSchema: GenMessage<UserSegmentConditionGroup> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 32);

/**
 * Define conditions that must occur in a specific order for the user to be
 * a member of the segment.
 *
 * @generated from message google.analytics.data.v1alpha.UserSegmentSequenceGroup
 */
export type UserSegmentSequenceGroup = Message<"google.analytics.data.v1alpha.UserSegmentSequenceGroup"> & {
  /**
   * All sequence steps must be satisfied in the scoping for the user to
   * match the sequence. For example if `sequenceScoping =
   * USER_CRITERIA_WITHIN_SAME_SESSION`, all sequence steps must complete within
   * one session for the user to match the sequence. `sequenceScoping =
   * USER_CRITERIA_WITHIN_SAME_EVENT` is not supported.
   *
   * Optional. If unspecified, `conditionScoping = ACROSS_ALL_SESSIONS` is
   * used.
   *
   * @generated from field: google.analytics.data.v1alpha.UserCriteriaScoping sequence_scoping = 1;
   */
  sequenceScoping: UserCriteriaScoping;

  /**
   * Defines the time period in which the whole sequence must occur; for
   * example, 30 Minutes. `sequenceMaximumDuration` is inclusive
   * of the endpoint at the microsecond granularity. For example a sequence
   * with a maximum duration of 5 seconds can be completed at 4.9 or 5.0
   * seconds, but not 5 seconds and 1 microsecond.
   *
   * `sequenceMaximumDuration` is optional, and if unspecified, sequences can
   * be completed in any time duration.
   *
   * @generated from field: google.protobuf.Duration sequence_maximum_duration = 2;
   */
  sequenceMaximumDuration?: Duration;

  /**
   * An ordered sequence of condition steps. A user's events must complete
   * each step in order for the user to match the
   * `UserSegmentSequenceGroup`.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.UserSequenceStep user_sequence_steps = 3;
   */
  userSequenceSteps: UserSequenceStep[];
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSegmentSequenceGroup.
 * Use `create(UserSegmentSequenceGroupSchema)` to create a new message.
 */
export const UserSegmentSequenceGroupSchema: GenMessage<UserSegmentSequenceGroup> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 33);

/**
 * A condition that must occur in the specified step order for this user
 * to match the sequence.
 *
 * @generated from message google.analytics.data.v1alpha.UserSequenceStep
 */
export type UserSequenceStep = Message<"google.analytics.data.v1alpha.UserSequenceStep"> & {
  /**
   * If true, the event satisfying this step must be the very next event
   * after the event satifying the last step. If false, this step indirectly
   * follows the prior step; for example, there may be events between the
   * prior step and this step. `isDirectlyFollowedBy` must be false for
   * the first step.
   *
   * @generated from field: bool is_directly_followed_by = 1;
   */
  isDirectlyFollowedBy: boolean;

  /**
   * This sequence step must be satisfied in the scoping for the user to
   * match the sequence. For example if `sequenceScoping =
   * WITHIN_SAME_SESSION`, this sequence steps must complete within one
   * session for the user to match the sequence. `stepScoping =
   * ACROSS_ALL_SESSIONS` is only allowed if the `sequenceScoping =
   * ACROSS_ALL_SESSIONS`.
   *
   * Optional. If unspecified, `stepScoping` uses the same
   * `UserCriteriaScoping` as the `sequenceScoping`.
   *
   * @generated from field: google.analytics.data.v1alpha.UserCriteriaScoping step_scoping = 2;
   */
  stepScoping: UserCriteriaScoping;

  /**
   * A user matches this sequence step if their events match this
   * expression. Expressions express criteria on dimension, metrics,
   * and/or parameters.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpression segment_filter_expression = 3;
   */
  segmentFilterExpression?: SegmentFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSequenceStep.
 * Use `create(UserSequenceStepSchema)` to create a new message.
 */
export const UserSequenceStepSchema: GenMessage<UserSequenceStep> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 34);

/**
 * Specifies which users are excluded in this segment.
 *
 * @generated from message google.analytics.data.v1alpha.UserSegmentExclusion
 */
export type UserSegmentExclusion = Message<"google.analytics.data.v1alpha.UserSegmentExclusion"> & {
  /**
   * Specifies how long an exclusion will last if a user matches the
   * `userExclusionCriteria`.
   *
   * Optional. If unspecified, `userExclusionDuration` of
   * `USER_EXCLUSION_TEMPORARY` is used.
   *
   * @generated from field: google.analytics.data.v1alpha.UserExclusionDuration user_exclusion_duration = 1;
   */
  userExclusionDuration: UserExclusionDuration;

  /**
   * If a user meets this condition, the user is excluded from membership in
   * the segment for the `userExclusionDuration`.
   *
   * @generated from field: google.analytics.data.v1alpha.UserSegmentCriteria user_exclusion_criteria = 2;
   */
  userExclusionCriteria?: UserSegmentCriteria;
};

/**
 * Describes the message google.analytics.data.v1alpha.UserSegmentExclusion.
 * Use `create(UserSegmentExclusionSchema)` to create a new message.
 */
export const UserSegmentExclusionSchema: GenMessage<UserSegmentExclusion> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 35);

/**
 * Session segments are subsets of the sessions that occurred on your site or
 * app: for example, all the sessions that originated from a particular
 * advertising campaign.
 *
 * @generated from message google.analytics.data.v1alpha.SessionSegment
 */
export type SessionSegment = Message<"google.analytics.data.v1alpha.SessionSegment"> & {
  /**
   * Defines which sessions are included in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.SessionSegmentCriteria session_inclusion_criteria = 1;
   */
  sessionInclusionCriteria?: SessionSegmentCriteria;

  /**
   * Defines which sessions are excluded in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.SessionSegmentExclusion exclusion = 2;
   */
  exclusion?: SessionSegmentExclusion;
};

/**
 * Describes the message google.analytics.data.v1alpha.SessionSegment.
 * Use `create(SessionSegmentSchema)` to create a new message.
 */
export const SessionSegmentSchema: GenMessage<SessionSegment> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 36);

/**
 * A session matches a criteria if the session's events meet the conditions in
 * the criteria.
 *
 * @generated from message google.analytics.data.v1alpha.SessionSegmentCriteria
 */
export type SessionSegmentCriteria = Message<"google.analytics.data.v1alpha.SessionSegmentCriteria"> & {
  /**
   * A session matches this criteria if the session matches each of these
   * `andConditionGroups`.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.SessionSegmentConditionGroup and_condition_groups = 1;
   */
  andConditionGroups: SessionSegmentConditionGroup[];
};

/**
 * Describes the message google.analytics.data.v1alpha.SessionSegmentCriteria.
 * Use `create(SessionSegmentCriteriaSchema)` to create a new message.
 */
export const SessionSegmentCriteriaSchema: GenMessage<SessionSegmentCriteria> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 37);

/**
 * Conditions tell Analytics what data to include in or exclude from the
 * segment.
 *
 * @generated from message google.analytics.data.v1alpha.SessionSegmentConditionGroup
 */
export type SessionSegmentConditionGroup = Message<"google.analytics.data.v1alpha.SessionSegmentConditionGroup"> & {
  /**
   * Data is included or excluded from the segment based on if it matches
   * the condition group. This scoping defines how many events the
   * `segmentFilterExpression` is evaluated on before the condition group
   * is determined to be matched or not. For example if `conditionScoping =
   * SESSION_CRITERIA_WITHIN_SAME_SESSION`, the expression is evaluated on all
   * events in a session, and then, the condition group is determined to be
   * matched or not for this session. For example if `conditionScoping =
   * SESSION_CRITERIA_WITHIN_SAME_EVENT`, the expression is evaluated on a
   * single event, and then, the condition group is determined to be matched or
   * not for this session.
   *
   * Optional. If unspecified, a `conditionScoping` of `WITHIN_SAME_SESSION`
   * is used.
   *
   * @generated from field: google.analytics.data.v1alpha.SessionCriteriaScoping condition_scoping = 1;
   */
  conditionScoping: SessionCriteriaScoping;

  /**
   * Data is included or excluded from the segment based on if it matches
   * this expression. Expressions express criteria on dimension, metrics,
   * and/or parameters.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpression segment_filter_expression = 2;
   */
  segmentFilterExpression?: SegmentFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.SessionSegmentConditionGroup.
 * Use `create(SessionSegmentConditionGroupSchema)` to create a new message.
 */
export const SessionSegmentConditionGroupSchema: GenMessage<SessionSegmentConditionGroup> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 38);

/**
 * Specifies which sessions are excluded in this segment.
 *
 * @generated from message google.analytics.data.v1alpha.SessionSegmentExclusion
 */
export type SessionSegmentExclusion = Message<"google.analytics.data.v1alpha.SessionSegmentExclusion"> & {
  /**
   * Specifies how long an exclusion will last if a session matches the
   * `sessionExclusionCriteria`.
   *
   * Optional. If unspecified, a `sessionExclusionDuration` of
   * `SESSION_EXCLUSION_TEMPORARY` is used.
   *
   * @generated from field: google.analytics.data.v1alpha.SessionExclusionDuration session_exclusion_duration = 1;
   */
  sessionExclusionDuration: SessionExclusionDuration;

  /**
   * If a session meets this condition, the session is excluded from
   * membership in the segment for the `sessionExclusionDuration`.
   *
   * @generated from field: google.analytics.data.v1alpha.SessionSegmentCriteria session_exclusion_criteria = 2;
   */
  sessionExclusionCriteria?: SessionSegmentCriteria;
};

/**
 * Describes the message google.analytics.data.v1alpha.SessionSegmentExclusion.
 * Use `create(SessionSegmentExclusionSchema)` to create a new message.
 */
export const SessionSegmentExclusionSchema: GenMessage<SessionSegmentExclusion> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 39);

/**
 * Event segments are subsets of events that were triggered on your site or app.
 * for example, all purchase events made in a particular location; app_exception
 * events that occurred on a specific operating system.
 *
 * @generated from message google.analytics.data.v1alpha.EventSegment
 */
export type EventSegment = Message<"google.analytics.data.v1alpha.EventSegment"> & {
  /**
   * Defines which events are included in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.EventSegmentCriteria event_inclusion_criteria = 1;
   */
  eventInclusionCriteria?: EventSegmentCriteria;

  /**
   * Defines which events are excluded in this segment. Optional.
   *
   * @generated from field: google.analytics.data.v1alpha.EventSegmentExclusion exclusion = 2;
   */
  exclusion?: EventSegmentExclusion;
};

/**
 * Describes the message google.analytics.data.v1alpha.EventSegment.
 * Use `create(EventSegmentSchema)` to create a new message.
 */
export const EventSegmentSchema: GenMessage<EventSegment> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 40);

/**
 * An event matches a criteria if the event meet the conditions in the
 * criteria.
 *
 * @generated from message google.analytics.data.v1alpha.EventSegmentCriteria
 */
export type EventSegmentCriteria = Message<"google.analytics.data.v1alpha.EventSegmentCriteria"> & {
  /**
   * An event matches this criteria if the event matches each of these
   * `andConditionGroups`.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.EventSegmentConditionGroup and_condition_groups = 1;
   */
  andConditionGroups: EventSegmentConditionGroup[];
};

/**
 * Describes the message google.analytics.data.v1alpha.EventSegmentCriteria.
 * Use `create(EventSegmentCriteriaSchema)` to create a new message.
 */
export const EventSegmentCriteriaSchema: GenMessage<EventSegmentCriteria> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 41);

/**
 * Conditions tell Analytics what data to include in or exclude from the
 * segment.
 *
 * @generated from message google.analytics.data.v1alpha.EventSegmentConditionGroup
 */
export type EventSegmentConditionGroup = Message<"google.analytics.data.v1alpha.EventSegmentConditionGroup"> & {
  /**
   * `conditionScoping` should always be `EVENT_CRITERIA_WITHIN_SAME_EVENT`.
   *
   * Optional. If unspecified, a `conditionScoping` of
   * `EVENT_CRITERIA_WITHIN_SAME_EVENT` is used.
   *
   * @generated from field: google.analytics.data.v1alpha.EventCriteriaScoping condition_scoping = 1;
   */
  conditionScoping: EventCriteriaScoping;

  /**
   * Data is included or excluded from the segment based on if it matches
   * this expression. Expressions express criteria on dimension, metrics,
   * and/or parameters.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpression segment_filter_expression = 2;
   */
  segmentFilterExpression?: SegmentFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.EventSegmentConditionGroup.
 * Use `create(EventSegmentConditionGroupSchema)` to create a new message.
 */
export const EventSegmentConditionGroupSchema: GenMessage<EventSegmentConditionGroup> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 42);

/**
 * Specifies which events are excluded in this segment.
 *
 * @generated from message google.analytics.data.v1alpha.EventSegmentExclusion
 */
export type EventSegmentExclusion = Message<"google.analytics.data.v1alpha.EventSegmentExclusion"> & {
  /**
   * `eventExclusionDuration` should always be `PERMANENTLY_EXCLUDE`.
   *
   * Optional. If unspecified, an `eventExclusionDuration` of
   * `EVENT_EXCLUSION_PERMANENT` is used.
   *
   * @generated from field: google.analytics.data.v1alpha.EventExclusionDuration event_exclusion_duration = 1;
   */
  eventExclusionDuration: EventExclusionDuration;

  /**
   * If an event meets this condition, the event is excluded from membership
   * in the segment for the `eventExclusionDuration`.
   *
   * @generated from field: google.analytics.data.v1alpha.EventSegmentCriteria event_exclusion_criteria = 2;
   */
  eventExclusionCriteria?: EventSegmentCriteria;
};

/**
 * Describes the message google.analytics.data.v1alpha.EventSegmentExclusion.
 * Use `create(EventSegmentExclusionSchema)` to create a new message.
 */
export const EventSegmentExclusionSchema: GenMessage<EventSegmentExclusion> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 43);

/**
 * A segment is a subset of your Analytics data. For example, of your entire set
 * of users, one segment might be users from a particular country or city.
 * Another segment might be users who purchase a particular line of products or
 * who visit a specific part of your site or trigger certain events in your app.
 *
 * To learn more, see [Segment
 * Builder](https://support.google.com/analytics/answer/9304353).
 *
 * @generated from message google.analytics.data.v1alpha.Segment
 */
export type Segment = Message<"google.analytics.data.v1alpha.Segment"> & {
  /**
   * The name for this segment. If unspecified, segments are named "Segment".
   * This name defines string value returned by the `segment` dimension. The
   * `segment` dimension prefixes segment names by the 1-based index number of
   * the segment in the request (for example "1. Segment", "2. Segment", etc.).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A segment is specified in one scope.
   *
   * @generated from oneof google.analytics.data.v1alpha.Segment.one_segment_scope
   */
  oneSegmentScope: {
    /**
     * User segments are subsets of users who engaged with your site or app.
     *
     * @generated from field: google.analytics.data.v1alpha.UserSegment user_segment = 2;
     */
    value: UserSegment;
    case: "userSegment";
  } | {
    /**
     * Session segments are subsets of the sessions that occurred on your site
     * or app.
     *
     * @generated from field: google.analytics.data.v1alpha.SessionSegment session_segment = 3;
     */
    value: SessionSegment;
    case: "sessionSegment";
  } | {
    /**
     * Event segments are subsets of events that were triggered on your site or
     * app.
     *
     * @generated from field: google.analytics.data.v1alpha.EventSegment event_segment = 4;
     */
    value: EventSegment;
    case: "eventSegment";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.Segment.
 * Use `create(SegmentSchema)` to create a new message.
 */
export const SegmentSchema: GenMessage<Segment> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 44);

/**
 * Expresses combinations of segment filters.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentFilterExpression
 */
export type SegmentFilterExpression = Message<"google.analytics.data.v1alpha.SegmentFilterExpression"> & {
  /**
   * Specify one type of filter for `SegmentFilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.SegmentFilterExpression.expr
   */
  expr: {
    /**
     * The SegmentFilterExpression in `andGroup` have an AND relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpressionList and_group = 1;
     */
    value: SegmentFilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The SegmentFilterExpression in `orGroup` have an OR relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpressionList or_group = 2;
     */
    value: SegmentFilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The SegmentFilterExpression is NOT of `notExpression`.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentFilterExpression not_expression = 3;
     */
    value: SegmentFilterExpression;
    case: "notExpression";
  } | {
    /**
     * A primitive segment filter.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentFilter segment_filter = 4;
     */
    value: SegmentFilter;
    case: "segmentFilter";
  } | {
    /**
     * Creates a filter that matches events of a single event name. If a
     * parameter filter expression is specified, only the subset of events that
     * match both the single event name and the parameter filter expressions
     * match this event filter.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentEventFilter segment_event_filter = 5;
     */
    value: SegmentEventFilter;
    case: "segmentEventFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentFilterExpression.
 * Use `create(SegmentFilterExpressionSchema)` to create a new message.
 */
export const SegmentFilterExpressionSchema: GenMessage<SegmentFilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 45);

/**
 * A list of segment filter expressions.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentFilterExpressionList
 */
export type SegmentFilterExpressionList = Message<"google.analytics.data.v1alpha.SegmentFilterExpressionList"> & {
  /**
   * The list of segment filter expressions
   *
   * @generated from field: repeated google.analytics.data.v1alpha.SegmentFilterExpression expressions = 1;
   */
  expressions: SegmentFilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentFilterExpressionList.
 * Use `create(SegmentFilterExpressionListSchema)` to create a new message.
 */
export const SegmentFilterExpressionListSchema: GenMessage<SegmentFilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 46);

/**
 * An expression to filter dimension or metric values.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentFilter
 */
export type SegmentFilter = Message<"google.analytics.data.v1alpha.SegmentFilter"> & {
  /**
   * The dimension name or metric name.
   *
   * @generated from field: string field_name = 1;
   */
  fieldName: string;

  /**
   * Specify one type of filter for `Filter`.
   *
   * @generated from oneof google.analytics.data.v1alpha.SegmentFilter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1alpha.StringFilter string_filter = 4;
     */
    value: StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1alpha.InListFilter in_list_filter = 5;
     */
    value: InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1alpha.NumericFilter numeric_filter = 6;
     */
    value: NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for between two values.
     *
     * @generated from field: google.analytics.data.v1alpha.BetweenFilter between_filter = 7;
     */
    value: BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };

  /**
   * Specifies the scope for the filter.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentFilterScoping filter_scoping = 8;
   */
  filterScoping?: SegmentFilterScoping;
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentFilter.
 * Use `create(SegmentFilterSchema)` to create a new message.
 */
export const SegmentFilterSchema: GenMessage<SegmentFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 47);

/**
 * Scopings specify how the dimensions & metrics of multiple events
 * should be considered when evaluating a segment filter.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentFilterScoping
 */
export type SegmentFilterScoping = Message<"google.analytics.data.v1alpha.SegmentFilterScoping"> & {
  /**
   * If `atAnyPointInTime` is true, this filter evaluates to true for all
   * events if it evaluates to true for any event in the date range of the
   * request.
   *
   * This `atAnyPointInTime` parameter does not extend the date range of
   * events in the report. If `atAnyPointInTime` is true, only events within
   * the report's date range are considered when evaluating this filter.
   *
   * This `atAnyPointInTime` is only able to be specified if the criteria
   * scoping is `ACROSS_ALL_SESSIONS` and is not able to be specified in
   * sequences.
   *
   * If the criteria scoping is `ACROSS_ALL_SESSIONS`, `atAnyPointInTime` =
   * false is used if unspecified.
   *
   * @generated from field: optional bool at_any_point_in_time = 1;
   */
  atAnyPointInTime?: boolean;
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentFilterScoping.
 * Use `create(SegmentFilterScopingSchema)` to create a new message.
 */
export const SegmentFilterScopingSchema: GenMessage<SegmentFilterScoping> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 48);

/**
 * Creates a filter that matches events of a single event name. If a parameter
 * filter expression is specified, only the subset of events that match both the
 * single event name and the parameter filter expressions match this event
 * filter.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentEventFilter
 */
export type SegmentEventFilter = Message<"google.analytics.data.v1alpha.SegmentEventFilter"> & {
  /**
   * This filter matches events of this single event name. Event name is
   * required.
   *
   * @generated from field: optional string event_name = 1;
   */
  eventName?: string;

  /**
   * If specified, this filter matches events that match both the single event
   * name and the parameter filter expressions.
   *
   * Inside the parameter filter expression, only parameter filters are
   * available.
   *
   * @generated from field: optional google.analytics.data.v1alpha.SegmentParameterFilterExpression segment_parameter_filter_expression = 2;
   */
  segmentParameterFilterExpression?: SegmentParameterFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentEventFilter.
 * Use `create(SegmentEventFilterSchema)` to create a new message.
 */
export const SegmentEventFilterSchema: GenMessage<SegmentEventFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 49);

/**
 * Expresses combinations of segment filter on parameters.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentParameterFilterExpression
 */
export type SegmentParameterFilterExpression = Message<"google.analytics.data.v1alpha.SegmentParameterFilterExpression"> & {
  /**
   * Specify one type of filter for `SegmentParameterFilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.SegmentParameterFilterExpression.expr
   */
  expr: {
    /**
     * The SegmentParameterFilterExpression in `andGroup` have an AND
     * relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentParameterFilterExpressionList and_group = 1;
     */
    value: SegmentParameterFilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The SegmentParameterFilterExpression in `orGroup` have an OR
     * relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentParameterFilterExpressionList or_group = 2;
     */
    value: SegmentParameterFilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The SegmentParameterFilterExpression is NOT of `notExpression`.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentParameterFilterExpression not_expression = 3;
     */
    value: SegmentParameterFilterExpression;
    case: "notExpression";
  } | {
    /**
     * A primitive segment parameter filter.
     *
     * @generated from field: google.analytics.data.v1alpha.SegmentParameterFilter segment_parameter_filter = 4;
     */
    value: SegmentParameterFilter;
    case: "segmentParameterFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentParameterFilterExpression.
 * Use `create(SegmentParameterFilterExpressionSchema)` to create a new message.
 */
export const SegmentParameterFilterExpressionSchema: GenMessage<SegmentParameterFilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 50);

/**
 * A list of segment parameter filter expressions.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentParameterFilterExpressionList
 */
export type SegmentParameterFilterExpressionList = Message<"google.analytics.data.v1alpha.SegmentParameterFilterExpressionList"> & {
  /**
   * The list of segment parameter filter expressions.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.SegmentParameterFilterExpression expressions = 1;
   */
  expressions: SegmentParameterFilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentParameterFilterExpressionList.
 * Use `create(SegmentParameterFilterExpressionListSchema)` to create a new message.
 */
export const SegmentParameterFilterExpressionListSchema: GenMessage<SegmentParameterFilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 51);

/**
 * An expression to filter parameter values in a segment.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentParameterFilter
 */
export type SegmentParameterFilter = Message<"google.analytics.data.v1alpha.SegmentParameterFilter"> & {
  /**
   * The field that is being filtered.
   *
   * @generated from oneof google.analytics.data.v1alpha.SegmentParameterFilter.one_parameter
   */
  oneParameter: {
    /**
     * This filter will be evaluated on the specified event parameter. Event
     * parameters are logged as parameters of the event. Event parameters
     * include fields like "firebase_screen" & "currency".
     *
     * Event parameters can only be used in segments & funnels and can only be
     * used in a descendent filter from an EventFilter. In a descendent filter
     * from an EventFilter either event or item parameters should be used.
     *
     * @generated from field: string event_parameter_name = 1;
     */
    value: string;
    case: "eventParameterName";
  } | {
    /**
     * This filter will be evaluated on the specified item parameter. Item
     * parameters are logged as parameters in the item array. Item parameters
     * include fields like "item_name" & "item_category".
     *
     * Item parameters can only be used in segments & funnels and can only be
     * used in a descendent filter from an EventFilter. In a descendent filter
     * from an EventFilter either event or item parameters should be used.
     *
     * Item parameters are only available in ecommerce events. To learn more
     * about ecommerce events, see the [Measure ecommerce]
     * (https://developers.google.com/analytics/devguides/collection/ga4/ecommerce)
     * guide.
     *
     * @generated from field: string item_parameter_name = 2;
     */
    value: string;
    case: "itemParameterName";
  } | { case: undefined; value?: undefined };

  /**
   * Specify one type of filter.
   *
   * @generated from oneof google.analytics.data.v1alpha.SegmentParameterFilter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1alpha.StringFilter string_filter = 4;
     */
    value: StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1alpha.InListFilter in_list_filter = 5;
     */
    value: InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1alpha.NumericFilter numeric_filter = 6;
     */
    value: NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for between two values.
     *
     * @generated from field: google.analytics.data.v1alpha.BetweenFilter between_filter = 7;
     */
    value: BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };

  /**
   * Specifies the scope for the filter.
   *
   * @generated from field: google.analytics.data.v1alpha.SegmentParameterFilterScoping filter_scoping = 8;
   */
  filterScoping?: SegmentParameterFilterScoping;
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentParameterFilter.
 * Use `create(SegmentParameterFilterSchema)` to create a new message.
 */
export const SegmentParameterFilterSchema: GenMessage<SegmentParameterFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 52);

/**
 * Scopings specify how multiple events should be considered when evaluating a
 * segment parameter filter.
 *
 * @generated from message google.analytics.data.v1alpha.SegmentParameterFilterScoping
 */
export type SegmentParameterFilterScoping = Message<"google.analytics.data.v1alpha.SegmentParameterFilterScoping"> & {
  /**
   * Accumulates the parameter over the specified period of days before
   * applying the filter. Only supported if criteria scoping is
   * `ACROSS_ALL_SESSIONS` or `WITHIN_SAME_SESSION`. Only supported if the
   * parameter is `event_count`.
   *
   * For example if `inAnyNDayPeriod` is 3, the event_name is "purchase",
   * the event parameter is "event_count", and the Filter's criteria is
   * greater than 5, this filter will accumulate the event count of purchase
   * events over every 3 consecutive day period in the report's date range; a
   * user will pass this Filter's criteria to be included in this segment if
   * their count of purchase events exceeds 5 in any 3 consecutive day period.
   * For example, the periods 2021-11-01 to 2021-11-03, 2021-11-02 to
   * 2021-11-04, 2021-11-03 to 2021-11-05, and etc. will be considered.
   *
   * The date range is not extended for the purpose of having a full N day
   * window near the start of the date range. For example if a report is for
   * 2021-11-01 to 2021-11-10 and `inAnyNDayPeriod` = 3, the first two day
   * period will be effectively shortened because no event data outside the
   * report's date range will be read. For example, the first four periods
   * will effectively be: 2021-11-01 to 2021-11-01, 2021-11-01 to 2021-11-02,
   * 2021-11-01 to 2021-11-03, and 2021-11-02 to 2021-11-04.
   *
   * `inAnyNDayPeriod` is optional. If not specified, the
   * `segmentParameterFilter` is applied to each event individually.
   *
   * @generated from field: optional int64 in_any_n_day_period = 1;
   */
  inAnyNDayPeriod?: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.SegmentParameterFilterScoping.
 * Use `create(SegmentParameterFilterScopingSchema)` to create a new message.
 */
export const SegmentParameterFilterScopingSchema: GenMessage<SegmentParameterFilterScoping> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 53);

/**
 * Expresses combinations of funnel filters.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelFilterExpression
 */
export type FunnelFilterExpression = Message<"google.analytics.data.v1alpha.FunnelFilterExpression"> & {
  /**
   * Specify one type of filter for `FunnelFilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.FunnelFilterExpression.expr
   */
  expr: {
    /**
     * The FunnelFilterExpression in `andGroup` have an AND relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelFilterExpressionList and_group = 1;
     */
    value: FunnelFilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The FunnelFilterExpression in `orGroup` have an OR relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelFilterExpressionList or_group = 2;
     */
    value: FunnelFilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The FunnelFilterExpression is NOT of `notExpression`.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelFilterExpression not_expression = 3;
     */
    value: FunnelFilterExpression;
    case: "notExpression";
  } | {
    /**
     * A funnel filter for a dimension or metric.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelFieldFilter funnel_field_filter = 4;
     */
    value: FunnelFieldFilter;
    case: "funnelFieldFilter";
  } | {
    /**
     * Creates a filter that matches events of a single event name. If a
     * parameter filter expression is specified, only the subset of events that
     * match both the single event name and the parameter filter expressions
     * match this event filter.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelEventFilter funnel_event_filter = 5;
     */
    value: FunnelEventFilter;
    case: "funnelEventFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelFilterExpression.
 * Use `create(FunnelFilterExpressionSchema)` to create a new message.
 */
export const FunnelFilterExpressionSchema: GenMessage<FunnelFilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 54);

/**
 * A list of funnel filter expressions.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelFilterExpressionList
 */
export type FunnelFilterExpressionList = Message<"google.analytics.data.v1alpha.FunnelFilterExpressionList"> & {
  /**
   * The list of funnel filter expressions.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.FunnelFilterExpression expressions = 1;
   */
  expressions: FunnelFilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelFilterExpressionList.
 * Use `create(FunnelFilterExpressionListSchema)` to create a new message.
 */
export const FunnelFilterExpressionListSchema: GenMessage<FunnelFilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 55);

/**
 * An expression to filter dimension or metric values.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelFieldFilter
 */
export type FunnelFieldFilter = Message<"google.analytics.data.v1alpha.FunnelFieldFilter"> & {
  /**
   * The dimension name or metric name.
   *
   * @generated from field: string field_name = 1;
   */
  fieldName: string;

  /**
   * Specify one type of filter.
   *
   * @generated from oneof google.analytics.data.v1alpha.FunnelFieldFilter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1alpha.StringFilter string_filter = 4;
     */
    value: StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1alpha.InListFilter in_list_filter = 5;
     */
    value: InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1alpha.NumericFilter numeric_filter = 6;
     */
    value: NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for between two values.
     *
     * @generated from field: google.analytics.data.v1alpha.BetweenFilter between_filter = 7;
     */
    value: BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelFieldFilter.
 * Use `create(FunnelFieldFilterSchema)` to create a new message.
 */
export const FunnelFieldFilterSchema: GenMessage<FunnelFieldFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 56);

/**
 * Creates a filter that matches events of a single event name. If a parameter
 * filter expression is specified, only the subset of events that match both the
 * single event name and the parameter filter expressions match this event
 * filter.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelEventFilter
 */
export type FunnelEventFilter = Message<"google.analytics.data.v1alpha.FunnelEventFilter"> & {
  /**
   * This filter matches events of this single event name. Event name is
   * required.
   *
   * @generated from field: optional string event_name = 1;
   */
  eventName?: string;

  /**
   * If specified, this filter matches events that match both the single event
   * name and the parameter filter expressions.
   *
   * Inside the parameter filter expression, only parameter filters are
   * available.
   *
   * @generated from field: optional google.analytics.data.v1alpha.FunnelParameterFilterExpression funnel_parameter_filter_expression = 2;
   */
  funnelParameterFilterExpression?: FunnelParameterFilterExpression;
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelEventFilter.
 * Use `create(FunnelEventFilterSchema)` to create a new message.
 */
export const FunnelEventFilterSchema: GenMessage<FunnelEventFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 57);

/**
 * Expresses combinations of funnel filters on parameters.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelParameterFilterExpression
 */
export type FunnelParameterFilterExpression = Message<"google.analytics.data.v1alpha.FunnelParameterFilterExpression"> & {
  /**
   * Specify one type of filter for `FunnelParameterFilterExpression`.
   *
   * @generated from oneof google.analytics.data.v1alpha.FunnelParameterFilterExpression.expr
   */
  expr: {
    /**
     * The FunnelParameterFilterExpression in `andGroup` have an AND
     * relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelParameterFilterExpressionList and_group = 1;
     */
    value: FunnelParameterFilterExpressionList;
    case: "andGroup";
  } | {
    /**
     * The FunnelParameterFilterExpression in `orGroup` have an OR
     * relationship.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelParameterFilterExpressionList or_group = 2;
     */
    value: FunnelParameterFilterExpressionList;
    case: "orGroup";
  } | {
    /**
     * The FunnelParameterFilterExpression is NOT of `notExpression`.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelParameterFilterExpression not_expression = 3;
     */
    value: FunnelParameterFilterExpression;
    case: "notExpression";
  } | {
    /**
     * A primitive funnel parameter filter.
     *
     * @generated from field: google.analytics.data.v1alpha.FunnelParameterFilter funnel_parameter_filter = 4;
     */
    value: FunnelParameterFilter;
    case: "funnelParameterFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelParameterFilterExpression.
 * Use `create(FunnelParameterFilterExpressionSchema)` to create a new message.
 */
export const FunnelParameterFilterExpressionSchema: GenMessage<FunnelParameterFilterExpression> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 58);

/**
 * A list of funnel parameter filter expressions.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelParameterFilterExpressionList
 */
export type FunnelParameterFilterExpressionList = Message<"google.analytics.data.v1alpha.FunnelParameterFilterExpressionList"> & {
  /**
   * The list of funnel parameter filter expressions.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.FunnelParameterFilterExpression expressions = 1;
   */
  expressions: FunnelParameterFilterExpression[];
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelParameterFilterExpressionList.
 * Use `create(FunnelParameterFilterExpressionListSchema)` to create a new message.
 */
export const FunnelParameterFilterExpressionListSchema: GenMessage<FunnelParameterFilterExpressionList> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 59);

/**
 * An expression to filter parameter values in a funnel.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelParameterFilter
 */
export type FunnelParameterFilter = Message<"google.analytics.data.v1alpha.FunnelParameterFilter"> & {
  /**
   * The field that is being filtered.
   *
   * @generated from oneof google.analytics.data.v1alpha.FunnelParameterFilter.one_parameter
   */
  oneParameter: {
    /**
     * This filter will be evaluated on the specified event parameter. Event
     * parameters are logged as parameters of the event. Event parameters
     * include fields like "firebase_screen" & "currency".
     *
     * Event parameters can only be used in segments & funnels and can only be
     * used in a descendent filter from an EventFilter. In a descendent filter
     * from an EventFilter either event or item parameters should be used.
     *
     * @generated from field: string event_parameter_name = 1;
     */
    value: string;
    case: "eventParameterName";
  } | {
    /**
     * This filter will be evaluated on the specified item parameter. Item
     * parameters are logged as parameters in the item array. Item parameters
     * include fields like "item_name" & "item_category".
     *
     * Item parameters can only be used in segments & funnels and can only be
     * used in a descendent filter from an EventFilter. In a descendent filter
     * from an EventFilter either event or item parameters should be used.
     *
     * Item parameters are only available in ecommerce events. To learn more
     * about ecommerce events, see the [Measure ecommerce]
     * (https://developers.google.com/analytics/devguides/collection/ga4/ecommerce)
     * guide.
     *
     * @generated from field: string item_parameter_name = 2;
     */
    value: string;
    case: "itemParameterName";
  } | { case: undefined; value?: undefined };

  /**
   * Specify one type of filter.
   *
   * @generated from oneof google.analytics.data.v1alpha.FunnelParameterFilter.one_filter
   */
  oneFilter: {
    /**
     * Strings related filter.
     *
     * @generated from field: google.analytics.data.v1alpha.StringFilter string_filter = 4;
     */
    value: StringFilter;
    case: "stringFilter";
  } | {
    /**
     * A filter for in list values.
     *
     * @generated from field: google.analytics.data.v1alpha.InListFilter in_list_filter = 5;
     */
    value: InListFilter;
    case: "inListFilter";
  } | {
    /**
     * A filter for numeric or date values.
     *
     * @generated from field: google.analytics.data.v1alpha.NumericFilter numeric_filter = 6;
     */
    value: NumericFilter;
    case: "numericFilter";
  } | {
    /**
     * A filter for between two values.
     *
     * @generated from field: google.analytics.data.v1alpha.BetweenFilter between_filter = 7;
     */
    value: BetweenFilter;
    case: "betweenFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelParameterFilter.
 * Use `create(FunnelParameterFilterSchema)` to create a new message.
 */
export const FunnelParameterFilterSchema: GenMessage<FunnelParameterFilter> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 60);

/**
 * The funnel report's response metadata carries additional information about
 * the funnel report.
 *
 * @generated from message google.analytics.data.v1alpha.FunnelResponseMetadata
 */
export type FunnelResponseMetadata = Message<"google.analytics.data.v1alpha.FunnelResponseMetadata"> & {
  /**
   * If funnel report results are
   * [sampled](https://support.google.com/analytics/answer/13331292), this
   * describes what percentage of events were used in this funnel report. One
   * `samplingMetadatas` is populated for each date range. Each
   * `samplingMetadatas` corresponds to a date range in order that date ranges
   * were specified in the request.
   *
   * However if the results are not sampled, this field will not be defined.
   *
   * @generated from field: repeated google.analytics.data.v1alpha.SamplingMetadata sampling_metadatas = 1;
   */
  samplingMetadatas: SamplingMetadata[];
};

/**
 * Describes the message google.analytics.data.v1alpha.FunnelResponseMetadata.
 * Use `create(FunnelResponseMetadataSchema)` to create a new message.
 */
export const FunnelResponseMetadataSchema: GenMessage<FunnelResponseMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 61);

/**
 * If funnel report results are
 * [sampled](https://support.google.com/analytics/answer/13331292), this
 * metadata describes what percentage of events were used in this funnel
 * report for a date range. Sampling is the practice of analyzing a subset of
 * all data in order to uncover the meaningful information in the larger data
 * set.
 *
 * @generated from message google.analytics.data.v1alpha.SamplingMetadata
 */
export type SamplingMetadata = Message<"google.analytics.data.v1alpha.SamplingMetadata"> & {
  /**
   * The total number of events read in this sampled report for a date range.
   * This is the size of the subset this property's data that was analyzed in
   * this funnel report.
   *
   * @generated from field: int64 samples_read_count = 1;
   */
  samplesReadCount: bigint;

  /**
   * The total number of events present in this property's data that could
   * have been analyzed in this funnel report for a date range. Sampling
   * uncovers the meaningful information about the larger data set, and this
   * is the size of the larger data set.
   *
   * To calculate the percentage of available data that was used in this
   * funnel report, compute `samplesReadCount/samplingSpaceSize`.
   *
   * @generated from field: int64 sampling_space_size = 2;
   */
  samplingSpaceSize: bigint;
};

/**
 * Describes the message google.analytics.data.v1alpha.SamplingMetadata.
 * Use `create(SamplingMetadataSchema)` to create a new message.
 */
export const SamplingMetadataSchema: GenMessage<SamplingMetadata> = /*@__PURE__*/
  messageDesc(file_google_analytics_data_v1alpha_data, 62);

/**
 * Scoping specifies which events are considered when evaluating if a user
 * meets a criteria.
 *
 * @generated from enum google.analytics.data.v1alpha.UserCriteriaScoping
 */
export enum UserCriteriaScoping {
  /**
   * Unspecified criteria scoping. Do not specify.
   *
   * @generated from enum value: USER_CRITERIA_SCOPING_UNSPECIFIED = 0;
   */
  USER_CRITERIA_SCOPING_UNSPECIFIED = 0,

  /**
   * If the criteria is satisfied within one event, the user matches the
   * criteria.
   *
   * @generated from enum value: USER_CRITERIA_WITHIN_SAME_EVENT = 1;
   */
  USER_CRITERIA_WITHIN_SAME_EVENT = 1,

  /**
   * If the criteria is satisfied within one session, the user matches the
   * criteria.
   *
   * @generated from enum value: USER_CRITERIA_WITHIN_SAME_SESSION = 2;
   */
  USER_CRITERIA_WITHIN_SAME_SESSION = 2,

  /**
   * If the criteria is satisfied by any events for the user, the user
   * matches the criteria.
   *
   * @generated from enum value: USER_CRITERIA_ACROSS_ALL_SESSIONS = 3;
   */
  USER_CRITERIA_ACROSS_ALL_SESSIONS = 3,
}

/**
 * Describes the enum google.analytics.data.v1alpha.UserCriteriaScoping.
 */
export const UserCriteriaScopingSchema: GenEnum<UserCriteriaScoping> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 0);

/**
 * Enumerates options for how long an exclusion will last if a user matches
 * the `userExclusionCriteria`.
 *
 * @generated from enum google.analytics.data.v1alpha.UserExclusionDuration
 */
export enum UserExclusionDuration {
  /**
   * Unspecified exclusion duration. Do not specify.
   *
   * @generated from enum value: USER_EXCLUSION_DURATION_UNSPECIFIED = 0;
   */
  USER_EXCLUSION_DURATION_UNSPECIFIED = 0,

  /**
   * Temporarily exclude users from the segment during periods when the
   * user meets the `userExclusionCriteria` condition.
   *
   * @generated from enum value: USER_EXCLUSION_TEMPORARY = 1;
   */
  USER_EXCLUSION_TEMPORARY = 1,

  /**
   * Permanently exclude users from the segment if the user ever meets the
   * `userExclusionCriteria` condition.
   *
   * @generated from enum value: USER_EXCLUSION_PERMANENT = 2;
   */
  USER_EXCLUSION_PERMANENT = 2,
}

/**
 * Describes the enum google.analytics.data.v1alpha.UserExclusionDuration.
 */
export const UserExclusionDurationSchema: GenEnum<UserExclusionDuration> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 1);

/**
 * Scoping specifies which events are considered when evaluating if a
 * session meets a criteria.
 *
 * @generated from enum google.analytics.data.v1alpha.SessionCriteriaScoping
 */
export enum SessionCriteriaScoping {
  /**
   * Unspecified criteria scoping. Do not specify.
   *
   * @generated from enum value: SESSION_CRITERIA_SCOPING_UNSPECIFIED = 0;
   */
  SESSION_CRITERIA_SCOPING_UNSPECIFIED = 0,

  /**
   * If the criteria is satisfied within one event, the session matches the
   * criteria.
   *
   * @generated from enum value: SESSION_CRITERIA_WITHIN_SAME_EVENT = 1;
   */
  SESSION_CRITERIA_WITHIN_SAME_EVENT = 1,

  /**
   * If the criteria is satisfied within one session, the session matches
   * the criteria.
   *
   * @generated from enum value: SESSION_CRITERIA_WITHIN_SAME_SESSION = 2;
   */
  SESSION_CRITERIA_WITHIN_SAME_SESSION = 2,
}

/**
 * Describes the enum google.analytics.data.v1alpha.SessionCriteriaScoping.
 */
export const SessionCriteriaScopingSchema: GenEnum<SessionCriteriaScoping> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 2);

/**
 * Enumerates options for how long an exclusion will last if a session
 * matches the `sessionExclusionCriteria`.
 *
 * @generated from enum google.analytics.data.v1alpha.SessionExclusionDuration
 */
export enum SessionExclusionDuration {
  /**
   * Unspecified exclusion duration. Do not specify.
   *
   * @generated from enum value: SESSION_EXCLUSION_DURATION_UNSPECIFIED = 0;
   */
  SESSION_EXCLUSION_DURATION_UNSPECIFIED = 0,

  /**
   * Temporarily exclude sessions from the segment during periods when the
   * session meets the `sessionExclusionCriteria` condition.
   *
   * @generated from enum value: SESSION_EXCLUSION_TEMPORARY = 1;
   */
  SESSION_EXCLUSION_TEMPORARY = 1,

  /**
   * Permanently exclude sessions from the segment if the session ever meets
   * the `sessionExclusionCriteria` condition.
   *
   * @generated from enum value: SESSION_EXCLUSION_PERMANENT = 2;
   */
  SESSION_EXCLUSION_PERMANENT = 2,
}

/**
 * Describes the enum google.analytics.data.v1alpha.SessionExclusionDuration.
 */
export const SessionExclusionDurationSchema: GenEnum<SessionExclusionDuration> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 3);

/**
 * Scoping specifies which events are considered when evaluating if an event
 * meets a criteria.
 *
 * @generated from enum google.analytics.data.v1alpha.EventCriteriaScoping
 */
export enum EventCriteriaScoping {
  /**
   * Unspecified criteria scoping. Do not specify.
   *
   * @generated from enum value: EVENT_CRITERIA_SCOPING_UNSPECIFIED = 0;
   */
  EVENT_CRITERIA_SCOPING_UNSPECIFIED = 0,

  /**
   * If the criteria is satisfied within one event, the event matches the
   * criteria.
   *
   * @generated from enum value: EVENT_CRITERIA_WITHIN_SAME_EVENT = 1;
   */
  EVENT_CRITERIA_WITHIN_SAME_EVENT = 1,
}

/**
 * Describes the enum google.analytics.data.v1alpha.EventCriteriaScoping.
 */
export const EventCriteriaScopingSchema: GenEnum<EventCriteriaScoping> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 4);

/**
 * Enumerates options for how long an exclusion will last if an event
 * matches the `eventExclusionCriteria`.
 *
 * @generated from enum google.analytics.data.v1alpha.EventExclusionDuration
 */
export enum EventExclusionDuration {
  /**
   * Unspecified exclusion duration. Do not specify.
   *
   * @generated from enum value: EVENT_EXCLUSION_DURATION_UNSPECIFIED = 0;
   */
  EVENT_EXCLUSION_DURATION_UNSPECIFIED = 0,

  /**
   * Permanently exclude events from the segment if the event ever meets
   * the `eventExclusionCriteria` condition.
   *
   * @generated from enum value: EVENT_EXCLUSION_PERMANENT = 1;
   */
  EVENT_EXCLUSION_PERMANENT = 1,
}

/**
 * Describes the enum google.analytics.data.v1alpha.EventExclusionDuration.
 */
export const EventExclusionDurationSchema: GenEnum<EventExclusionDuration> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 5);

/**
 * Represents aggregation of metrics.
 *
 * @generated from enum google.analytics.data.v1alpha.MetricAggregation
 */
export enum MetricAggregation {
  /**
   * Unspecified operator.
   *
   * @generated from enum value: METRIC_AGGREGATION_UNSPECIFIED = 0;
   */
  METRIC_AGGREGATION_UNSPECIFIED = 0,

  /**
   * SUM operator.
   *
   * @generated from enum value: TOTAL = 1;
   */
  TOTAL = 1,

  /**
   * Minimum operator.
   *
   * @generated from enum value: MINIMUM = 5;
   */
  MINIMUM = 5,

  /**
   * Maximum operator.
   *
   * @generated from enum value: MAXIMUM = 6;
   */
  MAXIMUM = 6,

  /**
   * Count operator.
   *
   * @generated from enum value: COUNT = 4;
   */
  COUNT = 4,
}

/**
 * Describes the enum google.analytics.data.v1alpha.MetricAggregation.
 */
export const MetricAggregationSchema: GenEnum<MetricAggregation> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 6);

/**
 * A metric's value type.
 *
 * @generated from enum google.analytics.data.v1alpha.MetricType
 */
export enum MetricType {
  /**
   * Unspecified type.
   *
   * @generated from enum value: METRIC_TYPE_UNSPECIFIED = 0;
   */
  METRIC_TYPE_UNSPECIFIED = 0,

  /**
   * Integer type.
   *
   * @generated from enum value: TYPE_INTEGER = 1;
   */
  TYPE_INTEGER = 1,

  /**
   * Floating point type.
   *
   * @generated from enum value: TYPE_FLOAT = 2;
   */
  TYPE_FLOAT = 2,

  /**
   * A duration of seconds; a special floating point type.
   *
   * @generated from enum value: TYPE_SECONDS = 4;
   */
  TYPE_SECONDS = 4,

  /**
   * A duration in milliseconds; a special floating point type.
   *
   * @generated from enum value: TYPE_MILLISECONDS = 5;
   */
  TYPE_MILLISECONDS = 5,

  /**
   * A duration in minutes; a special floating point type.
   *
   * @generated from enum value: TYPE_MINUTES = 6;
   */
  TYPE_MINUTES = 6,

  /**
   * A duration in hours; a special floating point type.
   *
   * @generated from enum value: TYPE_HOURS = 7;
   */
  TYPE_HOURS = 7,

  /**
   * A custom metric of standard type; a special floating point type.
   *
   * @generated from enum value: TYPE_STANDARD = 8;
   */
  TYPE_STANDARD = 8,

  /**
   * An amount of money; a special floating point type.
   *
   * @generated from enum value: TYPE_CURRENCY = 9;
   */
  TYPE_CURRENCY = 9,

  /**
   * A length in feet; a special floating point type.
   *
   * @generated from enum value: TYPE_FEET = 10;
   */
  TYPE_FEET = 10,

  /**
   * A length in miles; a special floating point type.
   *
   * @generated from enum value: TYPE_MILES = 11;
   */
  TYPE_MILES = 11,

  /**
   * A length in meters; a special floating point type.
   *
   * @generated from enum value: TYPE_METERS = 12;
   */
  TYPE_METERS = 12,

  /**
   * A length in kilometers; a special floating point type.
   *
   * @generated from enum value: TYPE_KILOMETERS = 13;
   */
  TYPE_KILOMETERS = 13,
}

/**
 * Describes the enum google.analytics.data.v1alpha.MetricType.
 */
export const MetricTypeSchema: GenEnum<MetricType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 7);

/**
 * Categories of data that you may be restricted from viewing on certain
 * Google Analytics properties.
 *
 * @generated from enum google.analytics.data.v1alpha.RestrictedMetricType
 */
export enum RestrictedMetricType {
  /**
   * Unspecified type.
   *
   * @generated from enum value: RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0;
   */
  RESTRICTED_METRIC_TYPE_UNSPECIFIED = 0,

  /**
   * Cost metrics such as `adCost`.
   *
   * @generated from enum value: COST_DATA = 1;
   */
  COST_DATA = 1,

  /**
   * Revenue metrics such as `purchaseRevenue`.
   *
   * @generated from enum value: REVENUE_DATA = 2;
   */
  REVENUE_DATA = 2,
}

/**
 * Describes the enum google.analytics.data.v1alpha.RestrictedMetricType.
 */
export const RestrictedMetricTypeSchema: GenEnum<RestrictedMetricType> = /*@__PURE__*/
  enumDesc(file_google_analytics_data_v1alpha_data, 8);

