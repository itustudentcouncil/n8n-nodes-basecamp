// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/datastore/v1/query.proto (package google.datastore.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { Entity, Value } from "./entity_pb";
import { file_google_datastore_v1_entity } from "./entity_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/datastore/v1/query.proto.
 */
export const file_google_datastore_v1_query: GenFile = /*@__PURE__*/
  fileDesc("Ch9nb29nbGUvZGF0YXN0b3JlL3YxL3F1ZXJ5LnByb3RvEhNnb29nbGUuZGF0YXN0b3JlLnYxIpECCgxFbnRpdHlSZXN1bHQSKwoGZW50aXR5GAEgASgLMhsuZ29vZ2xlLmRhdGFzdG9yZS52MS5FbnRpdHkSDwoHdmVyc2lvbhgEIAEoAxIvCgtjcmVhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLwoLdXBkYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg4KBmN1cnNvchgDIAEoDCJRCgpSZXN1bHRUeXBlEhsKF1JFU1VMVF9UWVBFX1VOU1BFQ0lGSUVEEAASCAoERlVMTBABEg4KClBST0pFQ1RJT04QAhIMCghLRVlfT05MWRADIvICCgVRdWVyeRIzCgpwcm9qZWN0aW9uGAIgAygLMh8uZ29vZ2xlLmRhdGFzdG9yZS52MS5Qcm9qZWN0aW9uEjEKBGtpbmQYAyADKAsyIy5nb29nbGUuZGF0YXN0b3JlLnYxLktpbmRFeHByZXNzaW9uEisKBmZpbHRlchgEIAEoCzIbLmdvb2dsZS5kYXRhc3RvcmUudjEuRmlsdGVyEjEKBW9yZGVyGAUgAygLMiIuZ29vZ2xlLmRhdGFzdG9yZS52MS5Qcm9wZXJ0eU9yZGVyEjsKC2Rpc3RpbmN0X29uGAYgAygLMiYuZ29vZ2xlLmRhdGFzdG9yZS52MS5Qcm9wZXJ0eVJlZmVyZW5jZRIUCgxzdGFydF9jdXJzb3IYByABKAwSEgoKZW5kX2N1cnNvchgIIAEoDBIOCgZvZmZzZXQYCiABKAUSKgoFbGltaXQYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZSLkBAoQQWdncmVnYXRpb25RdWVyeRIyCgxuZXN0ZWRfcXVlcnkYASABKAsyGi5nb29nbGUuZGF0YXN0b3JlLnYxLlF1ZXJ5SAASTAoMYWdncmVnYXRpb25zGAMgAygLMjEuZ29vZ2xlLmRhdGFzdG9yZS52MS5BZ2dyZWdhdGlvblF1ZXJ5LkFnZ3JlZ2F0aW9uQgPgQQEavwMKC0FnZ3JlZ2F0aW9uEkgKBWNvdW50GAEgASgLMjcuZ29vZ2xlLmRhdGFzdG9yZS52MS5BZ2dyZWdhdGlvblF1ZXJ5LkFnZ3JlZ2F0aW9uLkNvdW50SAASRAoDc3VtGAIgASgLMjUuZ29vZ2xlLmRhdGFzdG9yZS52MS5BZ2dyZWdhdGlvblF1ZXJ5LkFnZ3JlZ2F0aW9uLlN1bUgAEkQKA2F2ZxgDIAEoCzI1Lmdvb2dsZS5kYXRhc3RvcmUudjEuQWdncmVnYXRpb25RdWVyeS5BZ2dyZWdhdGlvbi5BdmdIABISCgVhbGlhcxgHIAEoCUID4EEBGjgKBUNvdW50Ei8KBXVwX3RvGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCA+BBARo/CgNTdW0SOAoIcHJvcGVydHkYASABKAsyJi5nb29nbGUuZGF0YXN0b3JlLnYxLlByb3BlcnR5UmVmZXJlbmNlGj8KA0F2ZxI4Cghwcm9wZXJ0eRgBIAEoCzImLmdvb2dsZS5kYXRhc3RvcmUudjEuUHJvcGVydHlSZWZlcmVuY2VCCgoIb3BlcmF0b3JCDAoKcXVlcnlfdHlwZSIeCg5LaW5kRXhwcmVzc2lvbhIMCgRuYW1lGAEgASgJIiEKEVByb3BlcnR5UmVmZXJlbmNlEgwKBG5hbWUYAiABKAkiRgoKUHJvamVjdGlvbhI4Cghwcm9wZXJ0eRgBIAEoCzImLmdvb2dsZS5kYXRhc3RvcmUudjEuUHJvcGVydHlSZWZlcmVuY2Ui0QEKDVByb3BlcnR5T3JkZXISOAoIcHJvcGVydHkYASABKAsyJi5nb29nbGUuZGF0YXN0b3JlLnYxLlByb3BlcnR5UmVmZXJlbmNlEj8KCWRpcmVjdGlvbhgCIAEoDjIsLmdvb2dsZS5kYXRhc3RvcmUudjEuUHJvcGVydHlPcmRlci5EaXJlY3Rpb24iRQoJRGlyZWN0aW9uEhkKFURJUkVDVElPTl9VTlNQRUNJRklFRBAAEg0KCUFTQ0VORElORxABEg4KCkRFU0NFTkRJTkcQAiKZAQoGRmlsdGVyEkAKEGNvbXBvc2l0ZV9maWx0ZXIYASABKAsyJC5nb29nbGUuZGF0YXN0b3JlLnYxLkNvbXBvc2l0ZUZpbHRlckgAEj4KD3Byb3BlcnR5X2ZpbHRlchgCIAEoCzIjLmdvb2dsZS5kYXRhc3RvcmUudjEuUHJvcGVydHlGaWx0ZXJIAEINCgtmaWx0ZXJfdHlwZSKxAQoPQ29tcG9zaXRlRmlsdGVyEjkKAm9wGAEgASgOMi0uZ29vZ2xlLmRhdGFzdG9yZS52MS5Db21wb3NpdGVGaWx0ZXIuT3BlcmF0b3ISLAoHZmlsdGVycxgCIAMoCzIbLmdvb2dsZS5kYXRhc3RvcmUudjEuRmlsdGVyIjUKCE9wZXJhdG9yEhgKFE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASBwoDQU5EEAESBgoCT1IQAiLqAgoOUHJvcGVydHlGaWx0ZXISOAoIcHJvcGVydHkYASABKAsyJi5nb29nbGUuZGF0YXN0b3JlLnYxLlByb3BlcnR5UmVmZXJlbmNlEjgKAm9wGAIgASgOMiwuZ29vZ2xlLmRhdGFzdG9yZS52MS5Qcm9wZXJ0eUZpbHRlci5PcGVyYXRvchIpCgV2YWx1ZRgDIAEoCzIaLmdvb2dsZS5kYXRhc3RvcmUudjEuVmFsdWUiuAEKCE9wZXJhdG9yEhgKFE9QRVJBVE9SX1VOU1BFQ0lGSUVEEAASDQoJTEVTU19USEFOEAESFgoSTEVTU19USEFOX09SX0VRVUFMEAISEAoMR1JFQVRFUl9USEFOEAMSGQoVR1JFQVRFUl9USEFOX09SX0VRVUFMEAQSCQoFRVFVQUwQBRIGCgJJThAGEg0KCU5PVF9FUVVBTBAJEhAKDEhBU19BTkNFU1RPUhALEgoKBk5PVF9JThANIqUCCghHcWxRdWVyeRIUCgxxdWVyeV9zdHJpbmcYASABKAkSFgoOYWxsb3dfbGl0ZXJhbHMYAiABKAgSSAoObmFtZWRfYmluZGluZ3MYBSADKAsyMC5nb29nbGUuZGF0YXN0b3JlLnYxLkdxbFF1ZXJ5Lk5hbWVkQmluZGluZ3NFbnRyeRJDChNwb3NpdGlvbmFsX2JpbmRpbmdzGAQgAygLMiYuZ29vZ2xlLmRhdGFzdG9yZS52MS5HcWxRdWVyeVBhcmFtZXRlchpcChJOYW1lZEJpbmRpbmdzRW50cnkSCwoDa2V5GAEgASgJEjUKBXZhbHVlGAIgASgLMiYuZ29vZ2xlLmRhdGFzdG9yZS52MS5HcWxRdWVyeVBhcmFtZXRlcjoCOAEiZAoRR3FsUXVlcnlQYXJhbWV0ZXISKwoFdmFsdWUYAiABKAsyGi5nb29nbGUuZGF0YXN0b3JlLnYxLlZhbHVlSAASEAoGY3Vyc29yGAMgASgMSABCEAoOcGFyYW1ldGVyX3R5cGUijQQKEFF1ZXJ5UmVzdWx0QmF0Y2gSFwoPc2tpcHBlZF9yZXN1bHRzGAYgASgFEhYKDnNraXBwZWRfY3Vyc29yGAMgASgMEkgKEmVudGl0eV9yZXN1bHRfdHlwZRgBIAEoDjIsLmdvb2dsZS5kYXRhc3RvcmUudjEuRW50aXR5UmVzdWx0LlJlc3VsdFR5cGUSOQoOZW50aXR5X3Jlc3VsdHMYAiADKAsyIS5nb29nbGUuZGF0YXN0b3JlLnYxLkVudGl0eVJlc3VsdBISCgplbmRfY3Vyc29yGAQgASgMEksKDG1vcmVfcmVzdWx0cxgFIAEoDjI1Lmdvb2dsZS5kYXRhc3RvcmUudjEuUXVlcnlSZXN1bHRCYXRjaC5Nb3JlUmVzdWx0c1R5cGUSGAoQc25hcHNob3RfdmVyc2lvbhgHIAEoAxItCglyZWFkX3RpbWUYCCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIpgBCg9Nb3JlUmVzdWx0c1R5cGUSIQodTU9SRV9SRVNVTFRTX1RZUEVfVU5TUEVDSUZJRUQQABIQCgxOT1RfRklOSVNIRUQQARIcChhNT1JFX1JFU1VMVFNfQUZURVJfTElNSVQQAhIdChlNT1JFX1JFU1VMVFNfQUZURVJfQ1VSU09SEAQSEwoPTk9fTU9SRV9SRVNVTFRTEANCuwEKF2NvbS5nb29nbGUuZGF0YXN0b3JlLnYxQgpRdWVyeVByb3RvUAFaO2Nsb3VkLmdvb2dsZS5jb20vZ28vZGF0YXN0b3JlL2FwaXYxL2RhdGFzdG9yZXBiO2RhdGFzdG9yZXBiqgIZR29vZ2xlLkNsb3VkLkRhdGFzdG9yZS5WMcoCGUdvb2dsZVxDbG91ZFxEYXRhc3RvcmVcVjHqAhxHb29nbGU6OkNsb3VkOjpEYXRhc3RvcmU6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_datastore_v1_entity, file_google_protobuf_timestamp, file_google_protobuf_wrappers]);

/**
 * The result of fetching an entity from Datastore.
 *
 * @generated from message google.datastore.v1.EntityResult
 */
export type EntityResult = Message<"google.datastore.v1.EntityResult"> & {
  /**
   * The resulting entity.
   *
   * @generated from field: google.datastore.v1.Entity entity = 1;
   */
  entity?: Entity;

  /**
   * The version of the entity, a strictly positive number that monotonically
   * increases with changes to the entity.
   *
   * This field is set for
   * [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
   *
   * For [missing][google.datastore.v1.LookupResponse.missing] entities in
   * `LookupResponse`, this is the version of the snapshot that was used to look
   * up the entity, and it is always set except for eventually consistent reads.
   *
   * @generated from field: int64 version = 4;
   */
  version: bigint;

  /**
   * The time at which the entity was created.
   * This field is set for
   * [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
   * If this entity is missing, this field will not be set.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * The time at which the entity was last changed.
   * This field is set for
   * [`FULL`][google.datastore.v1.EntityResult.ResultType.FULL] entity results.
   * If this entity is missing, this field will not be set.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * A cursor that points to the position after the result entity.
   * Set only when the `EntityResult` is part of a `QueryResultBatch` message.
   *
   * @generated from field: bytes cursor = 3;
   */
  cursor: Uint8Array;
};

/**
 * Describes the message google.datastore.v1.EntityResult.
 * Use `create(EntityResultSchema)` to create a new message.
 */
export const EntityResultSchema: GenMessage<EntityResult> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 0);

/**
 * Specifies what data the 'entity' field contains.
 * A `ResultType` is either implied (for example, in `LookupResponse.missing`
 * from `datastore.proto`, it is always `KEY_ONLY`) or specified by context
 * (for example, in message `QueryResultBatch`, field `entity_result_type`
 * specifies a `ResultType` for all the values in field `entity_results`).
 *
 * @generated from enum google.datastore.v1.EntityResult.ResultType
 */
export enum EntityResult_ResultType {
  /**
   * Unspecified. This value is never used.
   *
   * @generated from enum value: RESULT_TYPE_UNSPECIFIED = 0;
   */
  RESULT_TYPE_UNSPECIFIED = 0,

  /**
   * The key and properties.
   *
   * @generated from enum value: FULL = 1;
   */
  FULL = 1,

  /**
   * A projected subset of properties. The entity may have no key.
   *
   * @generated from enum value: PROJECTION = 2;
   */
  PROJECTION = 2,

  /**
   * Only the key.
   *
   * @generated from enum value: KEY_ONLY = 3;
   */
  KEY_ONLY = 3,
}

/**
 * Describes the enum google.datastore.v1.EntityResult.ResultType.
 */
export const EntityResult_ResultTypeSchema: GenEnum<EntityResult_ResultType> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1_query, 0, 0);

/**
 * A query for entities.
 *
 * @generated from message google.datastore.v1.Query
 */
export type Query = Message<"google.datastore.v1.Query"> & {
  /**
   * The projection to return. Defaults to returning all properties.
   *
   * @generated from field: repeated google.datastore.v1.Projection projection = 2;
   */
  projection: Projection[];

  /**
   * The kinds to query (if empty, returns entities of all kinds).
   * Currently at most 1 kind may be specified.
   *
   * @generated from field: repeated google.datastore.v1.KindExpression kind = 3;
   */
  kind: KindExpression[];

  /**
   * The filter to apply.
   *
   * @generated from field: google.datastore.v1.Filter filter = 4;
   */
  filter?: Filter;

  /**
   * The order to apply to the query results (if empty, order is unspecified).
   *
   * @generated from field: repeated google.datastore.v1.PropertyOrder order = 5;
   */
  order: PropertyOrder[];

  /**
   * The properties to make distinct. The query results will contain the first
   * result for each distinct combination of values for the given properties
   * (if empty, all results are returned).
   *
   * Requires:
   *
   * * If `order` is specified, the set of distinct on properties must appear
   * before the non-distinct on properties in `order`.
   *
   * @generated from field: repeated google.datastore.v1.PropertyReference distinct_on = 6;
   */
  distinctOn: PropertyReference[];

  /**
   * A starting point for the query results. Query cursors are
   * returned in query result batches and
   * [can only be used to continue the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   *
   * @generated from field: bytes start_cursor = 7;
   */
  startCursor: Uint8Array;

  /**
   * An ending point for the query results. Query cursors are
   * returned in query result batches and
   * [can only be used to limit the same
   * query](https://cloud.google.com/datastore/docs/concepts/queries#cursors_limits_and_offsets).
   *
   * @generated from field: bytes end_cursor = 8;
   */
  endCursor: Uint8Array;

  /**
   * The number of results to skip. Applies before limit, but after all other
   * constraints. Optional. Must be >= 0 if specified.
   *
   * @generated from field: int32 offset = 10;
   */
  offset: number;

  /**
   * The maximum number of results to return. Applies after all other
   * constraints. Optional.
   * Unspecified is interpreted as no limit.
   * Must be >= 0 if specified.
   *
   * @generated from field: google.protobuf.Int32Value limit = 12;
   */
  limit?: number;
};

/**
 * Describes the message google.datastore.v1.Query.
 * Use `create(QuerySchema)` to create a new message.
 */
export const QuerySchema: GenMessage<Query> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 1);

/**
 * Datastore query for running an aggregation over a
 * [Query][google.datastore.v1.Query].
 *
 * @generated from message google.datastore.v1.AggregationQuery
 */
export type AggregationQuery = Message<"google.datastore.v1.AggregationQuery"> & {
  /**
   * The base query to aggregate over.
   *
   * @generated from oneof google.datastore.v1.AggregationQuery.query_type
   */
  queryType: {
    /**
     * Nested query for aggregation
     *
     * @generated from field: google.datastore.v1.Query nested_query = 1;
     */
    value: Query;
    case: "nestedQuery";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Series of aggregations to apply over the results of the
   * `nested_query`.
   *
   * Requires:
   *
   * * A minimum of one and maximum of five aggregations per query.
   *
   * @generated from field: repeated google.datastore.v1.AggregationQuery.Aggregation aggregations = 3;
   */
  aggregations: AggregationQuery_Aggregation[];
};

/**
 * Describes the message google.datastore.v1.AggregationQuery.
 * Use `create(AggregationQuerySchema)` to create a new message.
 */
export const AggregationQuerySchema: GenMessage<AggregationQuery> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 2);

/**
 * Defines an aggregation that produces a single result.
 *
 * @generated from message google.datastore.v1.AggregationQuery.Aggregation
 */
export type AggregationQuery_Aggregation = Message<"google.datastore.v1.AggregationQuery.Aggregation"> & {
  /**
   * The type of aggregation to perform, required.
   *
   * @generated from oneof google.datastore.v1.AggregationQuery.Aggregation.operator
   */
  operator: {
    /**
     * Count aggregator.
     *
     * @generated from field: google.datastore.v1.AggregationQuery.Aggregation.Count count = 1;
     */
    value: AggregationQuery_Aggregation_Count;
    case: "count";
  } | {
    /**
     * Sum aggregator.
     *
     * @generated from field: google.datastore.v1.AggregationQuery.Aggregation.Sum sum = 2;
     */
    value: AggregationQuery_Aggregation_Sum;
    case: "sum";
  } | {
    /**
     * Average aggregator.
     *
     * @generated from field: google.datastore.v1.AggregationQuery.Aggregation.Avg avg = 3;
     */
    value: AggregationQuery_Aggregation_Avg;
    case: "avg";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Optional name of the property to store the result of the
   * aggregation.
   *
   * If not provided, Datastore will pick a default name following the format
   * `property_<incremental_id++>`. For example:
   *
   * ```
   * AGGREGATE
   *   COUNT_UP_TO(1) AS count_up_to_1,
   *   COUNT_UP_TO(2),
   *   COUNT_UP_TO(3) AS count_up_to_3,
   *   COUNT(*)
   * OVER (
   *   ...
   * );
   * ```
   *
   * becomes:
   *
   * ```
   * AGGREGATE
   *   COUNT_UP_TO(1) AS count_up_to_1,
   *   COUNT_UP_TO(2) AS property_1,
   *   COUNT_UP_TO(3) AS count_up_to_3,
   *   COUNT(*) AS property_2
   * OVER (
   *   ...
   * );
   * ```
   *
   * Requires:
   *
   * * Must be unique across all aggregation aliases.
   * * Conform to [entity property
   * name][google.datastore.v1.Entity.properties] limitations.
   *
   * @generated from field: string alias = 7;
   */
  alias: string;
};

/**
 * Describes the message google.datastore.v1.AggregationQuery.Aggregation.
 * Use `create(AggregationQuery_AggregationSchema)` to create a new message.
 */
export const AggregationQuery_AggregationSchema: GenMessage<AggregationQuery_Aggregation> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 2, 0);

/**
 * Count of entities that match the query.
 *
 * The `COUNT(*)` aggregation function operates on the entire entity
 * so it does not require a field reference.
 *
 * @generated from message google.datastore.v1.AggregationQuery.Aggregation.Count
 */
export type AggregationQuery_Aggregation_Count = Message<"google.datastore.v1.AggregationQuery.Aggregation.Count"> & {
  /**
   * Optional. Optional constraint on the maximum number of entities to
   * count.
   *
   * This provides a way to set an upper bound on the number of entities
   * to scan, limiting latency, and cost.
   *
   * Unspecified is interpreted as no bound.
   *
   * If a zero value is provided, a count result of zero should always be
   * expected.
   *
   * High-Level Example:
   *
   * ```
   * AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k );
   * ```
   *
   * Requires:
   *
   * * Must be non-negative when present.
   *
   * @generated from field: google.protobuf.Int64Value up_to = 1;
   */
  upTo?: bigint;
};

/**
 * Describes the message google.datastore.v1.AggregationQuery.Aggregation.Count.
 * Use `create(AggregationQuery_Aggregation_CountSchema)` to create a new message.
 */
export const AggregationQuery_Aggregation_CountSchema: GenMessage<AggregationQuery_Aggregation_Count> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 2, 0, 0);

/**
 * Sum of the values of the requested property.
 *
 * * Only numeric values will be aggregated. All non-numeric values
 * including `NULL` are skipped.
 *
 * * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
 * follows IEEE-754 standards.
 *
 * * If the aggregated value set is empty, returns 0.
 *
 * * Returns a 64-bit integer if all aggregated numbers are integers and the
 * sum result does not overflow. Otherwise, the result is returned as a
 * double. Note that even if all the aggregated values are integers, the
 * result is returned as a double if it cannot fit within a 64-bit signed
 * integer. When this occurs, the returned value will lose precision.
 *
 * * When underflow occurs, floating-point aggregation is non-deterministic.
 * This means that running the same query repeatedly without any changes to
 * the underlying values could produce slightly different results each
 * time. In those cases, values should be stored as integers over
 * floating-point numbers.
 *
 * @generated from message google.datastore.v1.AggregationQuery.Aggregation.Sum
 */
export type AggregationQuery_Aggregation_Sum = Message<"google.datastore.v1.AggregationQuery.Aggregation.Sum"> & {
  /**
   * The property to aggregate on.
   *
   * @generated from field: google.datastore.v1.PropertyReference property = 1;
   */
  property?: PropertyReference;
};

/**
 * Describes the message google.datastore.v1.AggregationQuery.Aggregation.Sum.
 * Use `create(AggregationQuery_Aggregation_SumSchema)` to create a new message.
 */
export const AggregationQuery_Aggregation_SumSchema: GenMessage<AggregationQuery_Aggregation_Sum> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 2, 0, 1);

/**
 * Average of the values of the requested property.
 *
 * * Only numeric values will be aggregated. All non-numeric values
 * including `NULL` are skipped.
 *
 * * If the aggregated values contain `NaN`, returns `NaN`. Infinity math
 * follows IEEE-754 standards.
 *
 * * If the aggregated value set is empty, returns `NULL`.
 *
 * * Always returns the result as a double.
 *
 * @generated from message google.datastore.v1.AggregationQuery.Aggregation.Avg
 */
export type AggregationQuery_Aggregation_Avg = Message<"google.datastore.v1.AggregationQuery.Aggregation.Avg"> & {
  /**
   * The property to aggregate on.
   *
   * @generated from field: google.datastore.v1.PropertyReference property = 1;
   */
  property?: PropertyReference;
};

/**
 * Describes the message google.datastore.v1.AggregationQuery.Aggregation.Avg.
 * Use `create(AggregationQuery_Aggregation_AvgSchema)` to create a new message.
 */
export const AggregationQuery_Aggregation_AvgSchema: GenMessage<AggregationQuery_Aggregation_Avg> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 2, 0, 2);

/**
 * A representation of a kind.
 *
 * @generated from message google.datastore.v1.KindExpression
 */
export type KindExpression = Message<"google.datastore.v1.KindExpression"> & {
  /**
   * The name of the kind.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.datastore.v1.KindExpression.
 * Use `create(KindExpressionSchema)` to create a new message.
 */
export const KindExpressionSchema: GenMessage<KindExpression> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 3);

/**
 * A reference to a property relative to the kind expressions.
 *
 * @generated from message google.datastore.v1.PropertyReference
 */
export type PropertyReference = Message<"google.datastore.v1.PropertyReference"> & {
  /**
   * A reference to a property.
   *
   * Requires:
   *
   * * MUST be a dot-delimited (`.`) string of segments, where each segment
   * conforms to [entity property name][google.datastore.v1.Entity.properties]
   * limitations.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message google.datastore.v1.PropertyReference.
 * Use `create(PropertyReferenceSchema)` to create a new message.
 */
export const PropertyReferenceSchema: GenMessage<PropertyReference> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 4);

/**
 * A representation of a property in a projection.
 *
 * @generated from message google.datastore.v1.Projection
 */
export type Projection = Message<"google.datastore.v1.Projection"> & {
  /**
   * The property to project.
   *
   * @generated from field: google.datastore.v1.PropertyReference property = 1;
   */
  property?: PropertyReference;
};

/**
 * Describes the message google.datastore.v1.Projection.
 * Use `create(ProjectionSchema)` to create a new message.
 */
export const ProjectionSchema: GenMessage<Projection> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 5);

/**
 * The desired order for a specific property.
 *
 * @generated from message google.datastore.v1.PropertyOrder
 */
export type PropertyOrder = Message<"google.datastore.v1.PropertyOrder"> & {
  /**
   * The property to order by.
   *
   * @generated from field: google.datastore.v1.PropertyReference property = 1;
   */
  property?: PropertyReference;

  /**
   * The direction to order by. Defaults to `ASCENDING`.
   *
   * @generated from field: google.datastore.v1.PropertyOrder.Direction direction = 2;
   */
  direction: PropertyOrder_Direction;
};

/**
 * Describes the message google.datastore.v1.PropertyOrder.
 * Use `create(PropertyOrderSchema)` to create a new message.
 */
export const PropertyOrderSchema: GenMessage<PropertyOrder> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 6);

/**
 * The sort direction.
 *
 * @generated from enum google.datastore.v1.PropertyOrder.Direction
 */
export enum PropertyOrder_Direction {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: DIRECTION_UNSPECIFIED = 0;
   */
  DIRECTION_UNSPECIFIED = 0,

  /**
   * Ascending.
   *
   * @generated from enum value: ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * Descending.
   *
   * @generated from enum value: DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum google.datastore.v1.PropertyOrder.Direction.
 */
export const PropertyOrder_DirectionSchema: GenEnum<PropertyOrder_Direction> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1_query, 6, 0);

/**
 * A holder for any type of filter.
 *
 * @generated from message google.datastore.v1.Filter
 */
export type Filter = Message<"google.datastore.v1.Filter"> & {
  /**
   * The type of filter.
   *
   * @generated from oneof google.datastore.v1.Filter.filter_type
   */
  filterType: {
    /**
     * A composite filter.
     *
     * @generated from field: google.datastore.v1.CompositeFilter composite_filter = 1;
     */
    value: CompositeFilter;
    case: "compositeFilter";
  } | {
    /**
     * A filter on a property.
     *
     * @generated from field: google.datastore.v1.PropertyFilter property_filter = 2;
     */
    value: PropertyFilter;
    case: "propertyFilter";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export const FilterSchema: GenMessage<Filter> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 7);

/**
 * A filter that merges multiple other filters using the given operator.
 *
 * @generated from message google.datastore.v1.CompositeFilter
 */
export type CompositeFilter = Message<"google.datastore.v1.CompositeFilter"> & {
  /**
   * The operator for combining multiple filters.
   *
   * @generated from field: google.datastore.v1.CompositeFilter.Operator op = 1;
   */
  op: CompositeFilter_Operator;

  /**
   * The list of filters to combine.
   *
   * Requires:
   *
   * * At least one filter is present.
   *
   * @generated from field: repeated google.datastore.v1.Filter filters = 2;
   */
  filters: Filter[];
};

/**
 * Describes the message google.datastore.v1.CompositeFilter.
 * Use `create(CompositeFilterSchema)` to create a new message.
 */
export const CompositeFilterSchema: GenMessage<CompositeFilter> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 8);

/**
 * A composite filter operator.
 *
 * @generated from enum google.datastore.v1.CompositeFilter.Operator
 */
export enum CompositeFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The results are required to satisfy each of the combined filters.
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,

  /**
   * Documents are required to satisfy at least one of the combined filters.
   *
   * @generated from enum value: OR = 2;
   */
  OR = 2,
}

/**
 * Describes the enum google.datastore.v1.CompositeFilter.Operator.
 */
export const CompositeFilter_OperatorSchema: GenEnum<CompositeFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1_query, 8, 0);

/**
 * A filter on a specific property.
 *
 * @generated from message google.datastore.v1.PropertyFilter
 */
export type PropertyFilter = Message<"google.datastore.v1.PropertyFilter"> & {
  /**
   * The property to filter by.
   *
   * @generated from field: google.datastore.v1.PropertyReference property = 1;
   */
  property?: PropertyReference;

  /**
   * The operator to filter by.
   *
   * @generated from field: google.datastore.v1.PropertyFilter.Operator op = 2;
   */
  op: PropertyFilter_Operator;

  /**
   * The value to compare the property to.
   *
   * @generated from field: google.datastore.v1.Value value = 3;
   */
  value?: Value;
};

/**
 * Describes the message google.datastore.v1.PropertyFilter.
 * Use `create(PropertyFilterSchema)` to create a new message.
 */
export const PropertyFilterSchema: GenMessage<PropertyFilter> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 9);

/**
 * A property filter operator.
 *
 * @generated from enum google.datastore.v1.PropertyFilter.Operator
 */
export enum PropertyFilter_Operator {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: OPERATOR_UNSPECIFIED = 0;
   */
  OPERATOR_UNSPECIFIED = 0,

  /**
   * The given `property` is less than the given `value`.
   *
   * Requires:
   *
   * * That `property` comes first in `order_by`.
   *
   * @generated from enum value: LESS_THAN = 1;
   */
  LESS_THAN = 1,

  /**
   * The given `property` is less than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `property` comes first in `order_by`.
   *
   * @generated from enum value: LESS_THAN_OR_EQUAL = 2;
   */
  LESS_THAN_OR_EQUAL = 2,

  /**
   * The given `property` is greater than the given `value`.
   *
   * Requires:
   *
   * * That `property` comes first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * The given `property` is greater than or equal to the given `value`.
   *
   * Requires:
   *
   * * That `property` comes first in `order_by`.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUAL = 4;
   */
  GREATER_THAN_OR_EQUAL = 4,

  /**
   * The given `property` is equal to the given `value`.
   *
   * @generated from enum value: EQUAL = 5;
   */
  EQUAL = 5,

  /**
   * The given `property` is equal to at least one value in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue`, subject to disjunction
   *   limits.
   * * No `NOT_IN` is in the same query.
   *
   * @generated from enum value: IN = 6;
   */
  IN = 6,

  /**
   * The given `property` is not equal to the given `value`.
   *
   * Requires:
   *
   * * No other `NOT_EQUAL` or `NOT_IN` is in the same query.
   * * That `property` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_EQUAL = 9;
   */
  NOT_EQUAL = 9,

  /**
   * Limit the result set to the given entity and its descendants.
   *
   * Requires:
   *
   * * That `value` is an entity key.
   * * All evaluated disjunctions must have the same `HAS_ANCESTOR` filter.
   *
   * @generated from enum value: HAS_ANCESTOR = 11;
   */
  HAS_ANCESTOR = 11,

  /**
   * The value of the `property` is not in the given array.
   *
   * Requires:
   *
   * * That `value` is a non-empty `ArrayValue` with at most 10 values.
   * * No other `OR`, `IN`, `NOT_IN`, `NOT_EQUAL` is in the same query.
   * * That `field` comes first in the `order_by`.
   *
   * @generated from enum value: NOT_IN = 13;
   */
  NOT_IN = 13,
}

/**
 * Describes the enum google.datastore.v1.PropertyFilter.Operator.
 */
export const PropertyFilter_OperatorSchema: GenEnum<PropertyFilter_Operator> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1_query, 9, 0);

/**
 * A [GQL
 * query](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
 *
 * @generated from message google.datastore.v1.GqlQuery
 */
export type GqlQuery = Message<"google.datastore.v1.GqlQuery"> & {
  /**
   * A string of the format described
   * [here](https://cloud.google.com/datastore/docs/apis/gql/gql_reference).
   *
   * @generated from field: string query_string = 1;
   */
  queryString: string;

  /**
   * When false, the query string must not contain any literals and instead must
   * bind all values. For example,
   * `SELECT * FROM Kind WHERE a = 'string literal'` is not allowed, while
   * `SELECT * FROM Kind WHERE a = @value` is.
   *
   * @generated from field: bool allow_literals = 2;
   */
  allowLiterals: boolean;

  /**
   * For each non-reserved named binding site in the query string, there must be
   * a named parameter with that name, but not necessarily the inverse.
   *
   * Key must match regex `[A-Za-z_$][A-Za-z_$0-9]*`, must not match regex
   * `__.*__`, and must not be `""`.
   *
   * @generated from field: map<string, google.datastore.v1.GqlQueryParameter> named_bindings = 5;
   */
  namedBindings: { [key: string]: GqlQueryParameter };

  /**
   * Numbered binding site @1 references the first numbered parameter,
   * effectively using 1-based indexing, rather than the usual 0.
   *
   * For each binding site numbered i in `query_string`, there must be an i-th
   * numbered parameter. The inverse must also be true.
   *
   * @generated from field: repeated google.datastore.v1.GqlQueryParameter positional_bindings = 4;
   */
  positionalBindings: GqlQueryParameter[];
};

/**
 * Describes the message google.datastore.v1.GqlQuery.
 * Use `create(GqlQuerySchema)` to create a new message.
 */
export const GqlQuerySchema: GenMessage<GqlQuery> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 10);

/**
 * A binding parameter for a GQL query.
 *
 * @generated from message google.datastore.v1.GqlQueryParameter
 */
export type GqlQueryParameter = Message<"google.datastore.v1.GqlQueryParameter"> & {
  /**
   * The type of parameter.
   *
   * @generated from oneof google.datastore.v1.GqlQueryParameter.parameter_type
   */
  parameterType: {
    /**
     * A value parameter.
     *
     * @generated from field: google.datastore.v1.Value value = 2;
     */
    value: Value;
    case: "value";
  } | {
    /**
     * A query cursor. Query cursors are returned in query
     * result batches.
     *
     * @generated from field: bytes cursor = 3;
     */
    value: Uint8Array;
    case: "cursor";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1.GqlQueryParameter.
 * Use `create(GqlQueryParameterSchema)` to create a new message.
 */
export const GqlQueryParameterSchema: GenMessage<GqlQueryParameter> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 11);

/**
 * A batch of results produced by a query.
 *
 * @generated from message google.datastore.v1.QueryResultBatch
 */
export type QueryResultBatch = Message<"google.datastore.v1.QueryResultBatch"> & {
  /**
   * The number of results skipped, typically because of an offset.
   *
   * @generated from field: int32 skipped_results = 6;
   */
  skippedResults: number;

  /**
   * A cursor that points to the position after the last skipped result.
   * Will be set when `skipped_results` != 0.
   *
   * @generated from field: bytes skipped_cursor = 3;
   */
  skippedCursor: Uint8Array;

  /**
   * The result type for every entity in `entity_results`.
   *
   * @generated from field: google.datastore.v1.EntityResult.ResultType entity_result_type = 1;
   */
  entityResultType: EntityResult_ResultType;

  /**
   * The results for this batch.
   *
   * @generated from field: repeated google.datastore.v1.EntityResult entity_results = 2;
   */
  entityResults: EntityResult[];

  /**
   * A cursor that points to the position after the last result in the batch.
   *
   * @generated from field: bytes end_cursor = 4;
   */
  endCursor: Uint8Array;

  /**
   * The state of the query after the current batch.
   *
   * @generated from field: google.datastore.v1.QueryResultBatch.MoreResultsType more_results = 5;
   */
  moreResults: QueryResultBatch_MoreResultsType;

  /**
   * The version number of the snapshot this batch was returned from.
   * This applies to the range of results from the query's `start_cursor` (or
   * the beginning of the query if no cursor was given) to this batch's
   * `end_cursor` (not the query's `end_cursor`).
   *
   * In a single transaction, subsequent query result batches for the same query
   * can have a greater snapshot version number. Each batch's snapshot version
   * is valid for all preceding batches.
   * The value will be zero for eventually consistent queries.
   *
   * @generated from field: int64 snapshot_version = 7;
   */
  snapshotVersion: bigint;

  /**
   * Read timestamp this batch was returned from.
   * This applies to the range of results from the query's `start_cursor` (or
   * the beginning of the query if no cursor was given) to this batch's
   * `end_cursor` (not the query's `end_cursor`).
   *
   * In a single transaction, subsequent query result batches for the same query
   * can have a greater timestamp. Each batch's read timestamp
   * is valid for all preceding batches.
   * This value will not be set for eventually consistent queries in Cloud
   * Datastore.
   *
   * @generated from field: google.protobuf.Timestamp read_time = 8;
   */
  readTime?: Timestamp;
};

/**
 * Describes the message google.datastore.v1.QueryResultBatch.
 * Use `create(QueryResultBatchSchema)` to create a new message.
 */
export const QueryResultBatchSchema: GenMessage<QueryResultBatch> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1_query, 12);

/**
 * The possible values for the `more_results` field.
 *
 * @generated from enum google.datastore.v1.QueryResultBatch.MoreResultsType
 */
export enum QueryResultBatch_MoreResultsType {
  /**
   * Unspecified. This value is never used.
   *
   * @generated from enum value: MORE_RESULTS_TYPE_UNSPECIFIED = 0;
   */
  MORE_RESULTS_TYPE_UNSPECIFIED = 0,

  /**
   * There may be additional batches to fetch from this query.
   *
   * @generated from enum value: NOT_FINISHED = 1;
   */
  NOT_FINISHED = 1,

  /**
   * The query is finished, but there may be more results after the limit.
   *
   * @generated from enum value: MORE_RESULTS_AFTER_LIMIT = 2;
   */
  MORE_RESULTS_AFTER_LIMIT = 2,

  /**
   * The query is finished, but there may be more results after the end
   * cursor.
   *
   * @generated from enum value: MORE_RESULTS_AFTER_CURSOR = 4;
   */
  MORE_RESULTS_AFTER_CURSOR = 4,

  /**
   * The query is finished, and there are no more results.
   *
   * @generated from enum value: NO_MORE_RESULTS = 3;
   */
  NO_MORE_RESULTS = 3,
}

/**
 * Describes the enum google.datastore.v1.QueryResultBatch.MoreResultsType.
 */
export const QueryResultBatch_MoreResultsTypeSchema: GenEnum<QueryResultBatch_MoreResultsType> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1_query, 12, 0);

