// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/datastore/v1beta3/datastore.proto (package google.datastore.v1beta3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import type { Entity, Key, PartitionId } from "./entity_pb";
import { file_google_datastore_v1beta3_entity } from "./entity_pb";
import type { EntityResult, GqlQuery, Query, QueryResultBatch } from "./query_pb";
import { file_google_datastore_v1beta3_query } from "./query_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/datastore/v1beta3/datastore.proto.
 */
export const file_google_datastore_v1beta3_datastore: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvZGF0YXN0b3JlL3YxYmV0YTMvZGF0YXN0b3JlLnByb3RvEhhnb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMijQEKDUxvb2t1cFJlcXVlc3QSEgoKcHJvamVjdF9pZBgIIAEoCRI7CgxyZWFkX29wdGlvbnMYASABKAsyJS5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuUmVhZE9wdGlvbnMSKwoEa2V5cxgDIAMoCzIdLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5LZXkisQEKDkxvb2t1cFJlc3BvbnNlEjUKBWZvdW5kGAEgAygLMiYuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkVudGl0eVJlc3VsdBI3CgdtaXNzaW5nGAIgAygLMiYuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkVudGl0eVJlc3VsdBIvCghkZWZlcnJlZBgDIAMoCzIdLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5LZXkimAIKD1J1blF1ZXJ5UmVxdWVzdBISCgpwcm9qZWN0X2lkGAggASgJEjsKDHBhcnRpdGlvbl9pZBgCIAEoCzIlLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5QYXJ0aXRpb25JZBI7CgxyZWFkX29wdGlvbnMYASABKAsyJS5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuUmVhZE9wdGlvbnMSMAoFcXVlcnkYAyABKAsyHy5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuUXVlcnlIABI3CglncWxfcXVlcnkYByABKAsyIi5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuR3FsUXVlcnlIAEIMCgpxdWVyeV90eXBlIn0KEFJ1blF1ZXJ5UmVzcG9uc2USOQoFYmF0Y2gYASABKAsyKi5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuUXVlcnlSZXN1bHRCYXRjaBIuCgVxdWVyeRgCIAEoCzIfLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5RdWVyeSJ4ChdCZWdpblRyYW5zYWN0aW9uUmVxdWVzdBISCgpwcm9qZWN0X2lkGAggASgJEkkKE3RyYW5zYWN0aW9uX29wdGlvbnMYCiABKAsyLC5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuVHJhbnNhY3Rpb25PcHRpb25zIi8KGEJlZ2luVHJhbnNhY3Rpb25SZXNwb25zZRITCgt0cmFuc2FjdGlvbhgBIAEoDCI6Cg9Sb2xsYmFja1JlcXVlc3QSEgoKcHJvamVjdF9pZBgIIAEoCRITCgt0cmFuc2FjdGlvbhgBIAEoDCISChBSb2xsYmFja1Jlc3BvbnNlIo0CCg1Db21taXRSZXF1ZXN0EhIKCnByb2plY3RfaWQYCCABKAkSOgoEbW9kZRgFIAEoDjIsLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Db21taXRSZXF1ZXN0Lk1vZGUSFQoLdHJhbnNhY3Rpb24YASABKAxIABI1CgltdXRhdGlvbnMYBiADKAsyIi5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuTXV0YXRpb24iRgoETW9kZRIUChBNT0RFX1VOU1BFQ0lGSUVEEAASEQoNVFJBTlNBQ1RJT05BTBABEhUKEU5PTl9UUkFOU0FDVElPTkFMEAJCFgoUdHJhbnNhY3Rpb25fc2VsZWN0b3IiawoOQ29tbWl0UmVzcG9uc2USQgoQbXV0YXRpb25fcmVzdWx0cxgDIAMoCzIoLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5NdXRhdGlvblJlc3VsdBIVCg1pbmRleF91cGRhdGVzGAQgASgFIlUKEkFsbG9jYXRlSWRzUmVxdWVzdBISCgpwcm9qZWN0X2lkGAggASgJEisKBGtleXMYASADKAsyHS5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuS2V5IkIKE0FsbG9jYXRlSWRzUmVzcG9uc2USKwoEa2V5cxgBIAMoCzIdLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5LZXkiaQoRUmVzZXJ2ZUlkc1JlcXVlc3QSEgoKcHJvamVjdF9pZBgIIAEoCRITCgtkYXRhYmFzZV9pZBgJIAEoCRIrCgRrZXlzGAEgAygLMh0uZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLktleSIUChJSZXNlcnZlSWRzUmVzcG9uc2UimwIKCE11dGF0aW9uEjIKBmluc2VydBgEIAEoCzIgLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5FbnRpdHlIABIyCgZ1cGRhdGUYBSABKAsyIC5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuRW50aXR5SAASMgoGdXBzZXJ0GAYgASgLMiAuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkVudGl0eUgAEi8KBmRlbGV0ZRgHIAEoCzIdLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5LZXlIABIWCgxiYXNlX3ZlcnNpb24YCCABKANIAUILCglvcGVyYXRpb25CHQobY29uZmxpY3RfZGV0ZWN0aW9uX3N0cmF0ZWd5ImgKDk11dGF0aW9uUmVzdWx0EioKA2tleRgDIAEoCzIdLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5LZXkSDwoHdmVyc2lvbhgEIAEoAxIZChFjb25mbGljdF9kZXRlY3RlZBgFIAEoCCLaAQoLUmVhZE9wdGlvbnMSUQoQcmVhZF9jb25zaXN0ZW5jeRgBIAEoDjI1Lmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5SZWFkT3B0aW9ucy5SZWFkQ29uc2lzdGVuY3lIABIVCgt0cmFuc2FjdGlvbhgCIAEoDEgAIk0KD1JlYWRDb25zaXN0ZW5jeRIgChxSRUFEX0NPTlNJU1RFTkNZX1VOU1BFQ0lGSUVEEAASCgoGU1RST05HEAESDAoIRVZFTlRVQUwQAkISChBjb25zaXN0ZW5jeV90eXBlIu0BChJUcmFuc2FjdGlvbk9wdGlvbnMSTAoKcmVhZF93cml0ZRgBIAEoCzI2Lmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5UcmFuc2FjdGlvbk9wdGlvbnMuUmVhZFdyaXRlSAASSgoJcmVhZF9vbmx5GAIgASgLMjUuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlRyYW5zYWN0aW9uT3B0aW9ucy5SZWFkT25seUgAGikKCVJlYWRXcml0ZRIcChRwcmV2aW91c190cmFuc2FjdGlvbhgBIAEoDBoKCghSZWFkT25seUIGCgRtb2RlMtcICglEYXRhc3RvcmUSjQEKBkxvb2t1cBInLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Mb29rdXBSZXF1ZXN0GiguZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkxvb2t1cFJlc3BvbnNlIjCC0+STAio6ASoiJS92MWJldGEzL3Byb2plY3RzL3twcm9qZWN0X2lkfTpsb29rdXASlQEKCFJ1blF1ZXJ5EikuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlJ1blF1ZXJ5UmVxdWVzdBoqLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5SdW5RdWVyeVJlc3BvbnNlIjKC0+STAiw6ASoiJy92MWJldGEzL3Byb2plY3RzL3twcm9qZWN0X2lkfTpydW5RdWVyeRK1AQoQQmVnaW5UcmFuc2FjdGlvbhIxLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5CZWdpblRyYW5zYWN0aW9uUmVxdWVzdBoyLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5CZWdpblRyYW5zYWN0aW9uUmVzcG9uc2UiOoLT5JMCNDoBKiIvL3YxYmV0YTMvcHJvamVjdHMve3Byb2plY3RfaWR9OmJlZ2luVHJhbnNhY3Rpb24SjQEKBkNvbW1pdBInLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Db21taXRSZXF1ZXN0GiguZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkNvbW1pdFJlc3BvbnNlIjCC0+STAio6ASoiJS92MWJldGEzL3Byb2plY3RzL3twcm9qZWN0X2lkfTpjb21taXQSlQEKCFJvbGxiYWNrEikuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlJvbGxiYWNrUmVxdWVzdBoqLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhMy5Sb2xsYmFja1Jlc3BvbnNlIjKC0+STAiw6ASoiJy92MWJldGEzL3Byb2plY3RzL3twcm9qZWN0X2lkfTpyb2xsYmFjaxKhAQoLQWxsb2NhdGVJZHMSLC5nb29nbGUuZGF0YXN0b3JlLnYxYmV0YTMuQWxsb2NhdGVJZHNSZXF1ZXN0Gi0uZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLkFsbG9jYXRlSWRzUmVzcG9uc2UiNYLT5JMCLzoBKiIqL3YxYmV0YTMvcHJvamVjdHMve3Byb2plY3RfaWR9OmFsbG9jYXRlSWRzEp0BCgpSZXNlcnZlSWRzEisuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlJlc2VydmVJZHNSZXF1ZXN0GiwuZ29vZ2xlLmRhdGFzdG9yZS52MWJldGEzLlJlc2VydmVJZHNSZXNwb25zZSI0gtPkkwIuOgEqIikvdjFiZXRhMy9wcm9qZWN0cy97cHJvamVjdF9pZH06cmVzZXJ2ZUlkc0LYAQocY29tLmdvb2dsZS5kYXRhc3RvcmUudjFiZXRhM0IORGF0YXN0b3JlUHJvdG9QAVpAY2xvdWQuZ29vZ2xlLmNvbS9nby9kYXRhc3RvcmUvYXBpdjFiZXRhMy9kYXRhc3RvcmVwYjtkYXRhc3RvcmVwYqoCHkdvb2dsZS5DbG91ZC5EYXRhc3RvcmUuVjFCZXRhM8oCHkdvb2dsZVxDbG91ZFxEYXRhc3RvcmVcVjFiZXRhM+oCIUdvb2dsZTo6Q2xvdWQ6OkRhdGFzdG9yZTo6VjFiZXRhM2IGcHJvdG8z", [file_google_api_annotations, file_google_datastore_v1beta3_entity, file_google_datastore_v1beta3_query]);

/**
 * The request for
 * [Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
 *
 * @generated from message google.datastore.v1beta3.LookupRequest
 */
export type LookupRequest = Message<"google.datastore.v1beta3.LookupRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * The options for this lookup request.
   *
   * @generated from field: google.datastore.v1beta3.ReadOptions read_options = 1;
   */
  readOptions?: ReadOptions;

  /**
   * Keys of entities to look up.
   *
   * @generated from field: repeated google.datastore.v1beta3.Key keys = 3;
   */
  keys: Key[];
};

/**
 * Describes the message google.datastore.v1beta3.LookupRequest.
 * Use `create(LookupRequestSchema)` to create a new message.
 */
export const LookupRequestSchema: GenMessage<LookupRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 0);

/**
 * The response for
 * [Datastore.Lookup][google.datastore.v1beta3.Datastore.Lookup].
 *
 * @generated from message google.datastore.v1beta3.LookupResponse
 */
export type LookupResponse = Message<"google.datastore.v1beta3.LookupResponse"> & {
  /**
   * Entities found as `ResultType.FULL` entities. The order of results in this
   * field is undefined and has no relation to the order of the keys in the
   * input.
   *
   * @generated from field: repeated google.datastore.v1beta3.EntityResult found = 1;
   */
  found: EntityResult[];

  /**
   * Entities not found as `ResultType.KEY_ONLY` entities. The order of results
   * in this field is undefined and has no relation to the order of the keys
   * in the input.
   *
   * @generated from field: repeated google.datastore.v1beta3.EntityResult missing = 2;
   */
  missing: EntityResult[];

  /**
   * A list of keys that were not looked up due to resource constraints. The
   * order of results in this field is undefined and has no relation to the
   * order of the keys in the input.
   *
   * @generated from field: repeated google.datastore.v1beta3.Key deferred = 3;
   */
  deferred: Key[];
};

/**
 * Describes the message google.datastore.v1beta3.LookupResponse.
 * Use `create(LookupResponseSchema)` to create a new message.
 */
export const LookupResponseSchema: GenMessage<LookupResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 1);

/**
 * The request for
 * [Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
 *
 * @generated from message google.datastore.v1beta3.RunQueryRequest
 */
export type RunQueryRequest = Message<"google.datastore.v1beta3.RunQueryRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * Entities are partitioned into subsets, identified by a partition ID.
   * Queries are scoped to a single partition.
   * This partition ID is normalized with the standard default context
   * partition ID.
   *
   * @generated from field: google.datastore.v1beta3.PartitionId partition_id = 2;
   */
  partitionId?: PartitionId;

  /**
   * The options for this query.
   *
   * @generated from field: google.datastore.v1beta3.ReadOptions read_options = 1;
   */
  readOptions?: ReadOptions;

  /**
   * The type of query.
   *
   * @generated from oneof google.datastore.v1beta3.RunQueryRequest.query_type
   */
  queryType: {
    /**
     * The query to run.
     *
     * @generated from field: google.datastore.v1beta3.Query query = 3;
     */
    value: Query;
    case: "query";
  } | {
    /**
     * The GQL query to run.
     *
     * @generated from field: google.datastore.v1beta3.GqlQuery gql_query = 7;
     */
    value: GqlQuery;
    case: "gqlQuery";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1beta3.RunQueryRequest.
 * Use `create(RunQueryRequestSchema)` to create a new message.
 */
export const RunQueryRequestSchema: GenMessage<RunQueryRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 2);

/**
 * The response for
 * [Datastore.RunQuery][google.datastore.v1beta3.Datastore.RunQuery].
 *
 * @generated from message google.datastore.v1beta3.RunQueryResponse
 */
export type RunQueryResponse = Message<"google.datastore.v1beta3.RunQueryResponse"> & {
  /**
   * A batch of query results (always present).
   *
   * @generated from field: google.datastore.v1beta3.QueryResultBatch batch = 1;
   */
  batch?: QueryResultBatch;

  /**
   * The parsed form of the `GqlQuery` from the request, if it was set.
   *
   * @generated from field: google.datastore.v1beta3.Query query = 2;
   */
  query?: Query;
};

/**
 * Describes the message google.datastore.v1beta3.RunQueryResponse.
 * Use `create(RunQueryResponseSchema)` to create a new message.
 */
export const RunQueryResponseSchema: GenMessage<RunQueryResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 3);

/**
 * The request for
 * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
 *
 * @generated from message google.datastore.v1beta3.BeginTransactionRequest
 */
export type BeginTransactionRequest = Message<"google.datastore.v1beta3.BeginTransactionRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * Options for a new transaction.
   *
   * @generated from field: google.datastore.v1beta3.TransactionOptions transaction_options = 10;
   */
  transactionOptions?: TransactionOptions;
};

/**
 * Describes the message google.datastore.v1beta3.BeginTransactionRequest.
 * Use `create(BeginTransactionRequestSchema)` to create a new message.
 */
export const BeginTransactionRequestSchema: GenMessage<BeginTransactionRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 4);

/**
 * The response for
 * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
 *
 * @generated from message google.datastore.v1beta3.BeginTransactionResponse
 */
export type BeginTransactionResponse = Message<"google.datastore.v1beta3.BeginTransactionResponse"> & {
  /**
   * The transaction identifier (always present).
   *
   * @generated from field: bytes transaction = 1;
   */
  transaction: Uint8Array;
};

/**
 * Describes the message google.datastore.v1beta3.BeginTransactionResponse.
 * Use `create(BeginTransactionResponseSchema)` to create a new message.
 */
export const BeginTransactionResponseSchema: GenMessage<BeginTransactionResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 5);

/**
 * The request for
 * [Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback].
 *
 * @generated from message google.datastore.v1beta3.RollbackRequest
 */
export type RollbackRequest = Message<"google.datastore.v1beta3.RollbackRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * The transaction identifier, returned by a call to
   * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
   *
   * @generated from field: bytes transaction = 1;
   */
  transaction: Uint8Array;
};

/**
 * Describes the message google.datastore.v1beta3.RollbackRequest.
 * Use `create(RollbackRequestSchema)` to create a new message.
 */
export const RollbackRequestSchema: GenMessage<RollbackRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 6);

/**
 * The response for
 * [Datastore.Rollback][google.datastore.v1beta3.Datastore.Rollback]. (an empty
 * message).
 *
 * @generated from message google.datastore.v1beta3.RollbackResponse
 */
export type RollbackResponse = Message<"google.datastore.v1beta3.RollbackResponse"> & {
};

/**
 * Describes the message google.datastore.v1beta3.RollbackResponse.
 * Use `create(RollbackResponseSchema)` to create a new message.
 */
export const RollbackResponseSchema: GenMessage<RollbackResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 7);

/**
 * The request for
 * [Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
 *
 * @generated from message google.datastore.v1beta3.CommitRequest
 */
export type CommitRequest = Message<"google.datastore.v1beta3.CommitRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * The type of commit to perform. Defaults to `TRANSACTIONAL`.
   *
   * @generated from field: google.datastore.v1beta3.CommitRequest.Mode mode = 5;
   */
  mode: CommitRequest_Mode;

  /**
   * Must be set when mode is `TRANSACTIONAL`.
   *
   * @generated from oneof google.datastore.v1beta3.CommitRequest.transaction_selector
   */
  transactionSelector: {
    /**
     * The identifier of the transaction associated with the commit. A
     * transaction identifier is returned by a call to
     * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
     *
     * @generated from field: bytes transaction = 1;
     */
    value: Uint8Array;
    case: "transaction";
  } | { case: undefined; value?: undefined };

  /**
   * The mutations to perform.
   *
   * When mode is `TRANSACTIONAL`, mutations affecting a single entity are
   * applied in order. The following sequences of mutations affecting a single
   * entity are not permitted in a single `Commit` request:
   *
   * - `insert` followed by `insert`
   * - `update` followed by `insert`
   * - `upsert` followed by `insert`
   * - `delete` followed by `update`
   *
   * When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single
   * entity.
   *
   * @generated from field: repeated google.datastore.v1beta3.Mutation mutations = 6;
   */
  mutations: Mutation[];
};

/**
 * Describes the message google.datastore.v1beta3.CommitRequest.
 * Use `create(CommitRequestSchema)` to create a new message.
 */
export const CommitRequestSchema: GenMessage<CommitRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 8);

/**
 * The modes available for commits.
 *
 * @generated from enum google.datastore.v1beta3.CommitRequest.Mode
 */
export enum CommitRequest_Mode {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  MODE_UNSPECIFIED = 0,

  /**
   * Transactional: The mutations are either all applied, or none are applied.
   * Learn about transactions
   * [here](https://cloud.google.com/datastore/docs/concepts/transactions).
   *
   * @generated from enum value: TRANSACTIONAL = 1;
   */
  TRANSACTIONAL = 1,

  /**
   * Non-transactional: The mutations may not apply as all or none.
   *
   * @generated from enum value: NON_TRANSACTIONAL = 2;
   */
  NON_TRANSACTIONAL = 2,
}

/**
 * Describes the enum google.datastore.v1beta3.CommitRequest.Mode.
 */
export const CommitRequest_ModeSchema: GenEnum<CommitRequest_Mode> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1beta3_datastore, 8, 0);

/**
 * The response for
 * [Datastore.Commit][google.datastore.v1beta3.Datastore.Commit].
 *
 * @generated from message google.datastore.v1beta3.CommitResponse
 */
export type CommitResponse = Message<"google.datastore.v1beta3.CommitResponse"> & {
  /**
   * The result of performing the mutations.
   * The i-th mutation result corresponds to the i-th mutation in the request.
   *
   * @generated from field: repeated google.datastore.v1beta3.MutationResult mutation_results = 3;
   */
  mutationResults: MutationResult[];

  /**
   * The number of index entries updated during the commit, or zero if none were
   * updated.
   *
   * @generated from field: int32 index_updates = 4;
   */
  indexUpdates: number;
};

/**
 * Describes the message google.datastore.v1beta3.CommitResponse.
 * Use `create(CommitResponseSchema)` to create a new message.
 */
export const CommitResponseSchema: GenMessage<CommitResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 9);

/**
 * The request for
 * [Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
 *
 * @generated from message google.datastore.v1beta3.AllocateIdsRequest
 */
export type AllocateIdsRequest = Message<"google.datastore.v1beta3.AllocateIdsRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * A list of keys with incomplete key paths for which to allocate IDs.
   * No key may be reserved/read-only.
   *
   * @generated from field: repeated google.datastore.v1beta3.Key keys = 1;
   */
  keys: Key[];
};

/**
 * Describes the message google.datastore.v1beta3.AllocateIdsRequest.
 * Use `create(AllocateIdsRequestSchema)` to create a new message.
 */
export const AllocateIdsRequestSchema: GenMessage<AllocateIdsRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 10);

/**
 * The response for
 * [Datastore.AllocateIds][google.datastore.v1beta3.Datastore.AllocateIds].
 *
 * @generated from message google.datastore.v1beta3.AllocateIdsResponse
 */
export type AllocateIdsResponse = Message<"google.datastore.v1beta3.AllocateIdsResponse"> & {
  /**
   * The keys specified in the request (in the same order), each with
   * its key path completed with a newly allocated ID.
   *
   * @generated from field: repeated google.datastore.v1beta3.Key keys = 1;
   */
  keys: Key[];
};

/**
 * Describes the message google.datastore.v1beta3.AllocateIdsResponse.
 * Use `create(AllocateIdsResponseSchema)` to create a new message.
 */
export const AllocateIdsResponseSchema: GenMessage<AllocateIdsResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 11);

/**
 * The request for
 * [Datastore.ReserveIds][google.datastore.v1beta3.Datastore.ReserveIds].
 *
 * @generated from message google.datastore.v1beta3.ReserveIdsRequest
 */
export type ReserveIdsRequest = Message<"google.datastore.v1beta3.ReserveIdsRequest"> & {
  /**
   * The ID of the project against which to make the request.
   *
   * @generated from field: string project_id = 8;
   */
  projectId: string;

  /**
   * If not empty, the ID of the database against which to make the request.
   *
   * @generated from field: string database_id = 9;
   */
  databaseId: string;

  /**
   * A list of keys with complete key paths whose numeric IDs should not be
   * auto-allocated.
   *
   * @generated from field: repeated google.datastore.v1beta3.Key keys = 1;
   */
  keys: Key[];
};

/**
 * Describes the message google.datastore.v1beta3.ReserveIdsRequest.
 * Use `create(ReserveIdsRequestSchema)` to create a new message.
 */
export const ReserveIdsRequestSchema: GenMessage<ReserveIdsRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 12);

/**
 * The response for
 * [Datastore.ReserveIds][google.datastore.v1beta3.Datastore.ReserveIds].
 *
 * @generated from message google.datastore.v1beta3.ReserveIdsResponse
 */
export type ReserveIdsResponse = Message<"google.datastore.v1beta3.ReserveIdsResponse"> & {
};

/**
 * Describes the message google.datastore.v1beta3.ReserveIdsResponse.
 * Use `create(ReserveIdsResponseSchema)` to create a new message.
 */
export const ReserveIdsResponseSchema: GenMessage<ReserveIdsResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 13);

/**
 * A mutation to apply to an entity.
 *
 * @generated from message google.datastore.v1beta3.Mutation
 */
export type Mutation = Message<"google.datastore.v1beta3.Mutation"> & {
  /**
   * The mutation operation.
   *
   * For `insert`, `update`, and `upsert`:
   * - The entity's key must not be reserved/read-only.
   * - No property in the entity may have a reserved name,
   *   not even a property in an entity in a value.
   * - No value in the entity may have meaning 18,
   *   not even a value in an entity in another value.
   *
   * @generated from oneof google.datastore.v1beta3.Mutation.operation
   */
  operation: {
    /**
     * The entity to insert. The entity must not already exist.
     * The entity key's final path element may be incomplete.
     *
     * @generated from field: google.datastore.v1beta3.Entity insert = 4;
     */
    value: Entity;
    case: "insert";
  } | {
    /**
     * The entity to update. The entity must already exist.
     * Must have a complete key path.
     *
     * @generated from field: google.datastore.v1beta3.Entity update = 5;
     */
    value: Entity;
    case: "update";
  } | {
    /**
     * The entity to upsert. The entity may or may not already exist.
     * The entity key's final path element may be incomplete.
     *
     * @generated from field: google.datastore.v1beta3.Entity upsert = 6;
     */
    value: Entity;
    case: "upsert";
  } | {
    /**
     * The key of the entity to delete. The entity may or may not already exist.
     * Must have a complete key path and must not be reserved/read-only.
     *
     * @generated from field: google.datastore.v1beta3.Key delete = 7;
     */
    value: Key;
    case: "delete";
  } | { case: undefined; value?: undefined };

  /**
   * When set, the server will detect whether or not this mutation conflicts
   * with the current version of the entity on the server. Conflicting mutations
   * are not applied, and are marked as such in MutationResult.
   *
   * @generated from oneof google.datastore.v1beta3.Mutation.conflict_detection_strategy
   */
  conflictDetectionStrategy: {
    /**
     * The version of the entity that this mutation is being applied to. If this
     * does not match the current version on the server, the mutation conflicts.
     *
     * @generated from field: int64 base_version = 8;
     */
    value: bigint;
    case: "baseVersion";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1beta3.Mutation.
 * Use `create(MutationSchema)` to create a new message.
 */
export const MutationSchema: GenMessage<Mutation> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 14);

/**
 * The result of applying a mutation.
 *
 * @generated from message google.datastore.v1beta3.MutationResult
 */
export type MutationResult = Message<"google.datastore.v1beta3.MutationResult"> & {
  /**
   * The automatically allocated key.
   * Set only when the mutation allocated a key.
   *
   * @generated from field: google.datastore.v1beta3.Key key = 3;
   */
  key?: Key;

  /**
   * The version of the entity on the server after processing the mutation. If
   * the mutation doesn't change anything on the server, then the version will
   * be the version of the current entity or, if no entity is present, a version
   * that is strictly greater than the version of any previous entity and less
   * than the version of any possible future entity.
   *
   * @generated from field: int64 version = 4;
   */
  version: bigint;

  /**
   * Whether a conflict was detected for this mutation. Always false when a
   * conflict detection strategy field is not set in the mutation.
   *
   * @generated from field: bool conflict_detected = 5;
   */
  conflictDetected: boolean;
};

/**
 * Describes the message google.datastore.v1beta3.MutationResult.
 * Use `create(MutationResultSchema)` to create a new message.
 */
export const MutationResultSchema: GenMessage<MutationResult> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 15);

/**
 * The options shared by read requests.
 *
 * @generated from message google.datastore.v1beta3.ReadOptions
 */
export type ReadOptions = Message<"google.datastore.v1beta3.ReadOptions"> & {
  /**
   * If not specified, lookups and ancestor queries default to
   * `read_consistency`=`STRONG`, global queries default to
   * `read_consistency`=`EVENTUAL`.
   *
   * @generated from oneof google.datastore.v1beta3.ReadOptions.consistency_type
   */
  consistencyType: {
    /**
     * The non-transactional read consistency to use.
     * Cannot be set to `STRONG` for global queries.
     *
     * @generated from field: google.datastore.v1beta3.ReadOptions.ReadConsistency read_consistency = 1;
     */
    value: ReadOptions_ReadConsistency;
    case: "readConsistency";
  } | {
    /**
     * The identifier of the transaction in which to read. A
     * transaction identifier is returned by a call to
     * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction].
     *
     * @generated from field: bytes transaction = 2;
     */
    value: Uint8Array;
    case: "transaction";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1beta3.ReadOptions.
 * Use `create(ReadOptionsSchema)` to create a new message.
 */
export const ReadOptionsSchema: GenMessage<ReadOptions> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 16);

/**
 * The possible values for read consistencies.
 *
 * @generated from enum google.datastore.v1beta3.ReadOptions.ReadConsistency
 */
export enum ReadOptions_ReadConsistency {
  /**
   * Unspecified. This value must not be used.
   *
   * @generated from enum value: READ_CONSISTENCY_UNSPECIFIED = 0;
   */
  READ_CONSISTENCY_UNSPECIFIED = 0,

  /**
   * Strong consistency.
   *
   * @generated from enum value: STRONG = 1;
   */
  STRONG = 1,

  /**
   * Eventual consistency.
   *
   * @generated from enum value: EVENTUAL = 2;
   */
  EVENTUAL = 2,
}

/**
 * Describes the enum google.datastore.v1beta3.ReadOptions.ReadConsistency.
 */
export const ReadOptions_ReadConsistencySchema: GenEnum<ReadOptions_ReadConsistency> = /*@__PURE__*/
  enumDesc(file_google_datastore_v1beta3_datastore, 16, 0);

/**
 * Options for beginning a new transaction.
 *
 * Transactions can be created explicitly with calls to
 * [Datastore.BeginTransaction][google.datastore.v1beta3.Datastore.BeginTransaction]
 * or implicitly by setting
 * [ReadOptions.new_transaction][google.datastore.v1beta3.ReadOptions.new_transaction]
 * in read requests.
 *
 * @generated from message google.datastore.v1beta3.TransactionOptions
 */
export type TransactionOptions = Message<"google.datastore.v1beta3.TransactionOptions"> & {
  /**
   * The `mode` of the transaction, indicating whether write operations are
   * supported.
   *
   * @generated from oneof google.datastore.v1beta3.TransactionOptions.mode
   */
  mode: {
    /**
     * The transaction should allow both reads and writes.
     *
     * @generated from field: google.datastore.v1beta3.TransactionOptions.ReadWrite read_write = 1;
     */
    value: TransactionOptions_ReadWrite;
    case: "readWrite";
  } | {
    /**
     * The transaction should only allow reads.
     *
     * @generated from field: google.datastore.v1beta3.TransactionOptions.ReadOnly read_only = 2;
     */
    value: TransactionOptions_ReadOnly;
    case: "readOnly";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.datastore.v1beta3.TransactionOptions.
 * Use `create(TransactionOptionsSchema)` to create a new message.
 */
export const TransactionOptionsSchema: GenMessage<TransactionOptions> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 17);

/**
 * Options specific to read / write transactions.
 *
 * @generated from message google.datastore.v1beta3.TransactionOptions.ReadWrite
 */
export type TransactionOptions_ReadWrite = Message<"google.datastore.v1beta3.TransactionOptions.ReadWrite"> & {
  /**
   * The transaction identifier of the transaction being retried.
   *
   * @generated from field: bytes previous_transaction = 1;
   */
  previousTransaction: Uint8Array;
};

/**
 * Describes the message google.datastore.v1beta3.TransactionOptions.ReadWrite.
 * Use `create(TransactionOptions_ReadWriteSchema)` to create a new message.
 */
export const TransactionOptions_ReadWriteSchema: GenMessage<TransactionOptions_ReadWrite> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 17, 0);

/**
 * Options specific to read-only transactions.
 *
 * @generated from message google.datastore.v1beta3.TransactionOptions.ReadOnly
 */
export type TransactionOptions_ReadOnly = Message<"google.datastore.v1beta3.TransactionOptions.ReadOnly"> & {
};

/**
 * Describes the message google.datastore.v1beta3.TransactionOptions.ReadOnly.
 * Use `create(TransactionOptions_ReadOnlySchema)` to create a new message.
 */
export const TransactionOptions_ReadOnlySchema: GenMessage<TransactionOptions_ReadOnly> = /*@__PURE__*/
  messageDesc(file_google_datastore_v1beta3_datastore, 17, 1);

/**
 * Each RPC normalizes the partition IDs of the keys in its input entities,
 * and always returns entities with keys with normalized partition IDs.
 * This applies to all keys and entities, including those in values, except keys
 * with both an empty path and an empty or unset partition ID. Normalization of
 * input keys sets the project ID (if not already set) to the project ID from
 * the request.
 *
 *
 * @generated from service google.datastore.v1beta3.Datastore
 */
export const Datastore: GenService<{
  /**
   * Looks up entities by key.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.Lookup
   */
  lookup: {
    methodKind: "unary";
    input: typeof LookupRequestSchema;
    output: typeof LookupResponseSchema;
  },
  /**
   * Queries for entities.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.RunQuery
   */
  runQuery: {
    methodKind: "unary";
    input: typeof RunQueryRequestSchema;
    output: typeof RunQueryResponseSchema;
  },
  /**
   * Begins a new transaction.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.BeginTransaction
   */
  beginTransaction: {
    methodKind: "unary";
    input: typeof BeginTransactionRequestSchema;
    output: typeof BeginTransactionResponseSchema;
  },
  /**
   * Commits a transaction, optionally creating, deleting or modifying some
   * entities.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.Commit
   */
  commit: {
    methodKind: "unary";
    input: typeof CommitRequestSchema;
    output: typeof CommitResponseSchema;
  },
  /**
   * Rolls back a transaction.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.Rollback
   */
  rollback: {
    methodKind: "unary";
    input: typeof RollbackRequestSchema;
    output: typeof RollbackResponseSchema;
  },
  /**
   * Allocates IDs for the given keys, which is useful for referencing an entity
   * before it is inserted.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.AllocateIds
   */
  allocateIds: {
    methodKind: "unary";
    input: typeof AllocateIdsRequestSchema;
    output: typeof AllocateIdsResponseSchema;
  },
  /**
   * Prevents the supplied keys' IDs from being auto-allocated by Cloud
   * Datastore.
   *
   * @generated from rpc google.datastore.v1beta3.Datastore.ReserveIds
   */
  reserveIds: {
    methodKind: "unary";
    input: typeof ReserveIdsRequestSchema;
    output: typeof ReserveIdsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_datastore_v1beta3_datastore, 0);

