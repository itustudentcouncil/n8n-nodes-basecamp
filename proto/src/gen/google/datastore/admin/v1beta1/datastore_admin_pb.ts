// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/datastore/admin/v1beta1/datastore_admin.proto (package google.datastore.admin.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/datastore/admin/v1beta1/datastore_admin.proto.
 */
export const file_google_datastore_admin_v1beta1_datastore_admin: GenFile = /*@__PURE__*/
  fileDesc("CjRnb29nbGUvZGF0YXN0b3JlL2FkbWluL3YxYmV0YTEvZGF0YXN0b3JlX2FkbWluLnByb3RvEh5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEigwQKDkNvbW1vbk1ldGFkYXRhEi4KCnN0YXJ0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJFCg5vcGVyYXRpb25fdHlwZRgDIAEoDjItLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMS5PcGVyYXRpb25UeXBlEkoKBmxhYmVscxgEIAMoCzI6Lmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMS5Db21tb25NZXRhZGF0YS5MYWJlbHNFbnRyeRJDCgVzdGF0ZRgFIAEoDjI0Lmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMS5Db21tb25NZXRhZGF0YS5TdGF0ZRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIosBCgVTdGF0ZRIVChFTVEFURV9VTlNQRUNJRklFRBAAEhAKDElOSVRJQUxJWklORxABEg4KClBST0NFU1NJTkcQAhIOCgpDQU5DRUxMSU5HEAMSDgoKRklOQUxJWklORxAEEg4KClNVQ0NFU1NGVUwQBRIKCgZGQUlMRUQQBhINCglDQU5DRUxMRUQQByI6CghQcm9ncmVzcxIWCg53b3JrX2NvbXBsZXRlZBgBIAEoAxIWCg53b3JrX2VzdGltYXRlZBgCIAEoAyKNAgoVRXhwb3J0RW50aXRpZXNSZXF1ZXN0EhIKCnByb2plY3RfaWQYASABKAkSUQoGbGFiZWxzGAIgAygLMkEuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLkV4cG9ydEVudGl0aWVzUmVxdWVzdC5MYWJlbHNFbnRyeRJDCg1lbnRpdHlfZmlsdGVyGAMgASgLMiwuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLkVudGl0eUZpbHRlchIZChFvdXRwdXRfdXJsX3ByZWZpeBgEIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIoUCChVJbXBvcnRFbnRpdGllc1JlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRJRCgZsYWJlbHMYAiADKAsyQS5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEuSW1wb3J0RW50aXRpZXNSZXF1ZXN0LkxhYmVsc0VudHJ5EhEKCWlucHV0X3VybBgDIAEoCRJDCg1lbnRpdHlfZmlsdGVyGAQgASgLMiwuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLkVudGl0eUZpbHRlchotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIiwKFkV4cG9ydEVudGl0aWVzUmVzcG9uc2USEgoKb3V0cHV0X3VybBgBIAEoCSK/AgoWRXhwb3J0RW50aXRpZXNNZXRhZGF0YRI+CgZjb21tb24YASABKAsyLi5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEuQ29tbW9uTWV0YWRhdGESQwoRcHJvZ3Jlc3NfZW50aXRpZXMYAiABKAsyKC5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEuUHJvZ3Jlc3MSQAoOcHJvZ3Jlc3NfYnl0ZXMYAyABKAsyKC5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEuUHJvZ3Jlc3MSQwoNZW50aXR5X2ZpbHRlchgEIAEoCzIsLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMS5FbnRpdHlGaWx0ZXISGQoRb3V0cHV0X3VybF9wcmVmaXgYBSABKAkitwIKFkltcG9ydEVudGl0aWVzTWV0YWRhdGESPgoGY29tbW9uGAEgASgLMi4uZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLkNvbW1vbk1ldGFkYXRhEkMKEXByb2dyZXNzX2VudGl0aWVzGAIgASgLMiguZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLlByb2dyZXNzEkAKDnByb2dyZXNzX2J5dGVzGAMgASgLMiguZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLlByb2dyZXNzEkMKDWVudGl0eV9maWx0ZXIYBCABKAsyLC5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxYmV0YTEuRW50aXR5RmlsdGVyEhEKCWlucHV0X3VybBgFIAEoCSI0CgxFbnRpdHlGaWx0ZXISDQoFa2luZHMYASADKAkSFQoNbmFtZXNwYWNlX2lkcxgCIAMoCSpZCg1PcGVyYXRpb25UeXBlEh4KGk9QRVJBVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASEwoPRVhQT1JUX0VOVElUSUVTEAESEwoPSU1QT1JUX0VOVElUSUVTEAIyxgIKDkRhdGFzdG9yZUFkbWluEpgBCg5FeHBvcnRFbnRpdGllcxI1Lmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMS5FeHBvcnRFbnRpdGllc1JlcXVlc3QaHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uIjCC0+STAio6ASoiJS92MWJldGExL3Byb2plY3RzL3twcm9qZWN0X2lkfTpleHBvcnQSmAEKDkltcG9ydEVudGl0aWVzEjUuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MWJldGExLkltcG9ydEVudGl0aWVzUmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iMILT5JMCKjoBKiIlL3YxYmV0YTEvcHJvamVjdHMve3Byb2plY3RfaWR9OmltcG9ydELNAQoiY29tLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjFiZXRhMUITRGF0YXN0b3JlQWRtaW5Qcm90b1ABWj5jbG91ZC5nb29nbGUuY29tL2dvL2RhdGFzdG9yZS9hZG1pbi9hcGl2MWJldGExL2FkbWlucGI7YWRtaW5wYqoCJEdvb2dsZS5DbG91ZC5EYXRhc3RvcmUuQWRtaW4uVjFCZXRhMeoCKEdvb2dsZTo6Q2xvdWQ6OkRhdGFzdG9yZTo6QWRtaW46OlYxYmV0YTFiBnByb3RvMw", [file_google_api_annotations, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * Metadata common to all Datastore Admin operations.
 *
 * @generated from message google.datastore.admin.v1beta1.CommonMetadata
 */
export type CommonMetadata = Message<"google.datastore.admin.v1beta1.CommonMetadata"> & {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The type of the operation. Can be used as a filter in
   * ListOperationsRequest.
   *
   * @generated from field: google.datastore.admin.v1beta1.OperationType operation_type = 3;
   */
  operationType: OperationType;

  /**
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * The current state of the Operation.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata.State state = 5;
   */
  state: CommonMetadata_State;
};

/**
 * Describes the message google.datastore.admin.v1beta1.CommonMetadata.
 * Use `create(CommonMetadataSchema)` to create a new message.
 */
export const CommonMetadataSchema: GenMessage<CommonMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 0);

/**
 * The various possible states for an ongoing Operation.
 *
 * @generated from enum google.datastore.admin.v1beta1.CommonMetadata.State
 */
export enum CommonMetadata_State {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Request is being prepared for processing.
   *
   * @generated from enum value: INITIALIZING = 1;
   */
  INITIALIZING = 1,

  /**
   * Request is actively being processed.
   *
   * @generated from enum value: PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Request is in the process of being cancelled after user called
   * google.longrunning.Operations.CancelOperation on the operation.
   *
   * @generated from enum value: CANCELLING = 3;
   */
  CANCELLING = 3,

  /**
   * Request has been processed and is in its finalization stage.
   *
   * @generated from enum value: FINALIZING = 4;
   */
  FINALIZING = 4,

  /**
   * Request has completed successfully.
   *
   * @generated from enum value: SUCCESSFUL = 5;
   */
  SUCCESSFUL = 5,

  /**
   * Request has finished being processed, but encountered an error.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * Request has finished being cancelled after user called
   * google.longrunning.Operations.CancelOperation.
   *
   * @generated from enum value: CANCELLED = 7;
   */
  CANCELLED = 7,
}

/**
 * Describes the enum google.datastore.admin.v1beta1.CommonMetadata.State.
 */
export const CommonMetadata_StateSchema: GenEnum<CommonMetadata_State> = /*@__PURE__*/
  enumDesc(file_google_datastore_admin_v1beta1_datastore_admin, 0, 0);

/**
 * Measures the progress of a particular metric.
 *
 * @generated from message google.datastore.admin.v1beta1.Progress
 */
export type Progress = Message<"google.datastore.admin.v1beta1.Progress"> & {
  /**
   * The amount of work that has been completed. Note that this may be greater
   * than work_estimated.
   *
   * @generated from field: int64 work_completed = 1;
   */
  workCompleted: bigint;

  /**
   * An estimate of how much work needs to be performed. May be zero if the
   * work estimate is unavailable.
   *
   * @generated from field: int64 work_estimated = 2;
   */
  workEstimated: bigint;
};

/**
 * Describes the message google.datastore.admin.v1beta1.Progress.
 * Use `create(ProgressSchema)` to create a new message.
 */
export const ProgressSchema: GenMessage<Progress> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 1);

/**
 * The request for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesRequest
 */
export type ExportEntitiesRequest = Message<"google.datastore.admin.v1beta1.ExportEntitiesRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Description of what data from the project is included in the export.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 3;
   */
  entityFilter?: EntityFilter;

  /**
   * Location for the export metadata and data files.
   *
   * The full resource URL of the external storage location. Currently, only
   * Google Cloud Storage is supported. So output_url_prefix should be of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
   * Storage namespace path (this is not a Cloud Datastore namespace). For more
   * information about Cloud Storage namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * The resulting files will be nested deeper than the specified URL prefix.
   * The final output URL will be provided in the
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
   * field. That value should be used for subsequent ImportEntities operations.
   *
   * By nesting the data files deeper, the same Cloud Storage bucket can be used
   * in multiple ExportEntities operations without conflict.
   *
   * @generated from field: string output_url_prefix = 4;
   */
  outputUrlPrefix: string;
};

/**
 * Describes the message google.datastore.admin.v1beta1.ExportEntitiesRequest.
 * Use `create(ExportEntitiesRequestSchema)` to create a new message.
 */
export const ExportEntitiesRequestSchema: GenMessage<ExportEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 2);

/**
 * The request for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ImportEntitiesRequest
 */
export type ImportEntitiesRequest = Message<"google.datastore.admin.v1beta1.ImportEntitiesRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * The full resource URL of the external storage location. Currently, only
   * Google Cloud Storage is supported. So input_url should be of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
   * `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
   * an optional Cloud Storage namespace path (this is not a Cloud Datastore
   * namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
   * by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * For more information, see
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string input_url = 3;
   */
  inputUrl: string;

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided,
   * the list must be a subset of the EntityFilter used in creating the export,
   * otherwise a FAILED_PRECONDITION error will be returned. If no filter is
   * specified then all entities from the export are imported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;
};

/**
 * Describes the message google.datastore.admin.v1beta1.ImportEntitiesRequest.
 * Use `create(ImportEntitiesRequestSchema)` to create a new message.
 */
export const ImportEntitiesRequestSchema: GenMessage<ImportEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 3);

/**
 * The response for
 * [google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesResponse
 */
export type ExportEntitiesResponse = Message<"google.datastore.admin.v1beta1.ExportEntitiesResponse"> & {
  /**
   * Location of the output metadata file. This can be used to begin an import
   * into Cloud Datastore (this project or another project). See
   * [google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url][google.datastore.admin.v1beta1.ImportEntitiesRequest.input_url].
   * Only present if the operation completed successfully.
   *
   * @generated from field: string output_url = 1;
   */
  outputUrl: string;
};

/**
 * Describes the message google.datastore.admin.v1beta1.ExportEntitiesResponse.
 * Use `create(ExportEntitiesResponseSchema)` to create a new message.
 */
export const ExportEntitiesResponseSchema: GenMessage<ExportEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 4);

/**
 * Metadata for ExportEntities operations.
 *
 * @generated from message google.datastore.admin.v1beta1.ExportEntitiesMetadata
 */
export type ExportEntitiesMetadata = Message<"google.datastore.admin.v1beta1.ExportEntitiesMetadata"> & {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being exported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * Location for the export metadata and data files. This will be the same
   * value as the
   * [google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix][google.datastore.admin.v1beta1.ExportEntitiesRequest.output_url_prefix]
   * field. The final output location is provided in
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string output_url_prefix = 5;
   */
  outputUrlPrefix: string;
};

/**
 * Describes the message google.datastore.admin.v1beta1.ExportEntitiesMetadata.
 * Use `create(ExportEntitiesMetadataSchema)` to create a new message.
 */
export const ExportEntitiesMetadataSchema: GenMessage<ExportEntitiesMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 5);

/**
 * Metadata for ImportEntities operations.
 *
 * @generated from message google.datastore.admin.v1beta1.ImportEntitiesMetadata
 */
export type ImportEntitiesMetadata = Message<"google.datastore.admin.v1beta1.ImportEntitiesMetadata"> & {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1beta1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1beta1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being imported.
   *
   * @generated from field: google.datastore.admin.v1beta1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * The location of the import metadata file. This will be the same value as
   * the
   * [google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url][google.datastore.admin.v1beta1.ExportEntitiesResponse.output_url]
   * field.
   *
   * @generated from field: string input_url = 5;
   */
  inputUrl: string;
};

/**
 * Describes the message google.datastore.admin.v1beta1.ImportEntitiesMetadata.
 * Use `create(ImportEntitiesMetadataSchema)` to create a new message.
 */
export const ImportEntitiesMetadataSchema: GenMessage<ImportEntitiesMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 6);

/**
 * Identifies a subset of entities in a project. This is specified as
 * combinations of kinds and namespaces (either or both of which may be all, as
 * described in the following examples).
 * Example usage:
 *
 * Entire project:
 *   kinds=[], namespace_ids=[]
 *
 * Kinds Foo and Bar in all namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=[]
 *
 * Kinds Foo and Bar only in the default namespace:
 *   kinds=['Foo', 'Bar'], namespace_ids=['']
 *
 * Kinds Foo and Bar in both the default and Baz namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
 *
 * The entire Baz namespace:
 *   kinds=[], namespace_ids=['Baz']
 *
 * @generated from message google.datastore.admin.v1beta1.EntityFilter
 */
export type EntityFilter = Message<"google.datastore.admin.v1beta1.EntityFilter"> & {
  /**
   * If empty, then this represents all kinds.
   *
   * @generated from field: repeated string kinds = 1;
   */
  kinds: string[];

  /**
   * An empty list represents all namespaces. This is the preferred
   * usage for projects that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the project has data in non-default namespaces, but doesn't want to
   * include them.
   * Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 2;
   */
  namespaceIds: string[];
};

/**
 * Describes the message google.datastore.admin.v1beta1.EntityFilter.
 * Use `create(EntityFilterSchema)` to create a new message.
 */
export const EntityFilterSchema: GenMessage<EntityFilter> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1beta1_datastore_admin, 7);

/**
 * Operation types.
 *
 * @generated from enum google.datastore.admin.v1beta1.OperationType
 */
export enum OperationType {
  /**
   * Unspecified.
   *
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  OPERATION_TYPE_UNSPECIFIED = 0,

  /**
   * ExportEntities.
   *
   * @generated from enum value: EXPORT_ENTITIES = 1;
   */
  EXPORT_ENTITIES = 1,

  /**
   * ImportEntities.
   *
   * @generated from enum value: IMPORT_ENTITIES = 2;
   */
  IMPORT_ENTITIES = 2,
}

/**
 * Describes the enum google.datastore.admin.v1beta1.OperationType.
 */
export const OperationTypeSchema: GenEnum<OperationType> = /*@__PURE__*/
  enumDesc(file_google_datastore_admin_v1beta1_datastore_admin, 0);

/**
 * Google Cloud Datastore Admin API
 *
 * The Datastore Admin API provides several admin services for Cloud Datastore.
 *
 * -----------------------------------------------------------------------------
 * ## Concepts
 *
 * Project, namespace, kind, and entity as defined in the Google Cloud Datastore
 * API.
 *
 * Operation: An Operation represents work being performed in the background.
 *
 * EntityFilter: Allows specifying a subset of entities in a project. This is
 * specified as a combination of kinds and namespaces (either or both of which
 * may be all).
 *
 * -----------------------------------------------------------------------------
 * ## Services
 *
 * # Export/Import
 *
 * The Export/Import service provides the ability to copy all or a subset of
 * entities to/from Google Cloud Storage.
 *
 * Exported data may be imported into Cloud Datastore for any Google Cloud
 * Platform project. It is not restricted to the export source project. It is
 * possible to export from one project and then import into another.
 *
 * Exported data can also be loaded into Google BigQuery for analysis.
 *
 * Exports and imports are performed asynchronously. An Operation resource is
 * created for each export/import. The state (including any errors encountered)
 * of the export/import may be queried via the Operation resource.
 *
 * # Operation
 *
 * The Operations collection provides a record of actions performed for the
 * specified project (including any operations in progress). Operations are not
 * created directly but through calls on other collections or resources.
 *
 * An operation that is not yet done may be cancelled. The request to cancel is
 * asynchronous and the operation may continue to run for some time after the
 * request to cancel is made.
 *
 * An operation that is done may be deleted so that it is no longer listed as
 * part of the Operation collection.
 *
 * ListOperations returns all pending operations, but not completed operations.
 *
 * Operations are created by service DatastoreAdmin,
 * but are accessed via service google.longrunning.Operations.
 *
 * @generated from service google.datastore.admin.v1beta1.DatastoreAdmin
 */
export const DatastoreAdmin: GenService<{
  /**
   * Exports a copy of all or a subset of entities from Google Cloud Datastore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * entities may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * @generated from rpc google.datastore.admin.v1beta1.DatastoreAdmin.ExportEntities
   */
  exportEntities: {
    methodKind: "unary";
    input: typeof ExportEntitiesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports entities into Google Cloud Datastore. Existing entities with the
   * same key are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportEntities operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Datastore.
   *
   * @generated from rpc google.datastore.admin.v1beta1.DatastoreAdmin.ImportEntities
   */
  importEntities: {
    methodKind: "unary";
    input: typeof ImportEntitiesRequestSchema;
    output: typeof OperationSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_datastore_admin_v1beta1_datastore_admin, 0);

