// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/datastore/admin/v1/datastore_admin.proto (package google.datastore.admin.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Index, IndexSchema } from "./index_pb";
import { file_google_datastore_admin_v1_index } from "./index_pb";
import type { MigrationState, MigrationStep } from "./migration_pb";
import { file_google_datastore_admin_v1_migration } from "./migration_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/datastore/admin/v1/datastore_admin.proto.
 */
export const file_google_datastore_admin_v1_datastore_admin: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvZGF0YXN0b3JlL2FkbWluL3YxL2RhdGFzdG9yZV9hZG1pbi5wcm90bxIZZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MSL0AwoOQ29tbW9uTWV0YWRhdGESLgoKc3RhcnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkAKDm9wZXJhdGlvbl90eXBlGAMgASgOMiguZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5PcGVyYXRpb25UeXBlEkUKBmxhYmVscxgEIAMoCzI1Lmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuQ29tbW9uTWV0YWRhdGEuTGFiZWxzRW50cnkSPgoFc3RhdGUYBSABKA4yLy5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkNvbW1vbk1ldGFkYXRhLlN0YXRlGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiiwEKBVN0YXRlEhUKEVNUQVRFX1VOU1BFQ0lGSUVEEAASEAoMSU5JVElBTElaSU5HEAESDgoKUFJPQ0VTU0lORxACEg4KCkNBTkNFTExJTkcQAxIOCgpGSU5BTElaSU5HEAQSDgoKU1VDQ0VTU0ZVTBAFEgoKBkZBSUxFRBAGEg0KCUNBTkNFTExFRBAHIjoKCFByb2dyZXNzEhYKDndvcmtfY29tcGxldGVkGAEgASgDEhYKDndvcmtfZXN0aW1hdGVkGAIgASgDIo0CChVFeHBvcnRFbnRpdGllc1JlcXVlc3QSFwoKcHJvamVjdF9pZBgBIAEoCUID4EECEkwKBmxhYmVscxgCIAMoCzI8Lmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuRXhwb3J0RW50aXRpZXNSZXF1ZXN0LkxhYmVsc0VudHJ5Ej4KDWVudGl0eV9maWx0ZXIYAyABKAsyJy5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkVudGl0eUZpbHRlchIeChFvdXRwdXRfdXJsX3ByZWZpeBgEIAEoCUID4EECGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEihQIKFUltcG9ydEVudGl0aWVzUmVxdWVzdBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISTAoGbGFiZWxzGAIgAygLMjwuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5JbXBvcnRFbnRpdGllc1JlcXVlc3QuTGFiZWxzRW50cnkSFgoJaW5wdXRfdXJsGAMgASgJQgPgQQISPgoNZW50aXR5X2ZpbHRlchgEIAEoCzInLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuRW50aXR5RmlsdGVyGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiLAoWRXhwb3J0RW50aXRpZXNSZXNwb25zZRISCgpvdXRwdXRfdXJsGAEgASgJIqsCChZFeHBvcnRFbnRpdGllc01ldGFkYXRhEjkKBmNvbW1vbhgBIAEoCzIpLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuQ29tbW9uTWV0YWRhdGESPgoRcHJvZ3Jlc3NfZW50aXRpZXMYAiABKAsyIy5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLlByb2dyZXNzEjsKDnByb2dyZXNzX2J5dGVzGAMgASgLMiMuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5Qcm9ncmVzcxI+Cg1lbnRpdHlfZmlsdGVyGAQgASgLMicuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5FbnRpdHlGaWx0ZXISGQoRb3V0cHV0X3VybF9wcmVmaXgYBSABKAkiowIKFkltcG9ydEVudGl0aWVzTWV0YWRhdGESOQoGY29tbW9uGAEgASgLMikuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5Db21tb25NZXRhZGF0YRI+ChFwcm9ncmVzc19lbnRpdGllcxgCIAEoCzIjLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuUHJvZ3Jlc3MSOwoOcHJvZ3Jlc3NfYnl0ZXMYAyABKAsyIy5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLlByb2dyZXNzEj4KDWVudGl0eV9maWx0ZXIYBCABKAsyJy5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkVudGl0eUZpbHRlchIRCglpbnB1dF91cmwYBSABKAkiNAoMRW50aXR5RmlsdGVyEg0KBWtpbmRzGAEgAygJEhUKDW5hbWVzcGFjZV9pZHMYAiADKAkiWQoSQ3JlYXRlSW5kZXhSZXF1ZXN0EhIKCnByb2plY3RfaWQYASABKAkSLwoFaW5kZXgYAyABKAsyIC5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkluZGV4IjoKEkRlbGV0ZUluZGV4UmVxdWVzdBISCgpwcm9qZWN0X2lkGAEgASgJEhAKCGluZGV4X2lkGAMgASgJIjcKD0dldEluZGV4UmVxdWVzdBISCgpwcm9qZWN0X2lkGAEgASgJEhAKCGluZGV4X2lkGAMgASgJIl8KEkxpc3RJbmRleGVzUmVxdWVzdBISCgpwcm9qZWN0X2lkGAEgASgJEg4KBmZpbHRlchgDIAEoCRIRCglwYWdlX3NpemUYBCABKAUSEgoKcGFnZV90b2tlbhgFIAEoCSJhChNMaXN0SW5kZXhlc1Jlc3BvbnNlEjEKB2luZGV4ZXMYASADKAsyIC5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkluZGV4EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKlAQoWSW5kZXhPcGVyYXRpb25NZXRhZGF0YRI5CgZjb21tb24YASABKAsyKS5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkNvbW1vbk1ldGFkYXRhEj4KEXByb2dyZXNzX2VudGl0aWVzGAIgASgLMiMuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5Qcm9ncmVzcxIQCghpbmRleF9pZBgDIAEoCSKrAQojRGF0YXN0b3JlRmlyZXN0b3JlTWlncmF0aW9uTWV0YWRhdGESQgoPbWlncmF0aW9uX3N0YXRlGAEgASgOMikuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5NaWdyYXRpb25TdGF0ZRJACg5taWdyYXRpb25fc3RlcBgCIAEoDjIoLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuTWlncmF0aW9uU3RlcCp9Cg1PcGVyYXRpb25UeXBlEh4KGk9QRVJBVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAASEwoPRVhQT1JUX0VOVElUSUVTEAESEwoPSU1QT1JUX0VOVElUSUVTEAISEAoMQ1JFQVRFX0lOREVYEAMSEAoMREVMRVRFX0lOREVYEAQyhAoKDkRhdGFzdG9yZUFkbWluEvYBCg5FeHBvcnRFbnRpdGllcxIwLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuRXhwb3J0RW50aXRpZXNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiKSAcpBMAoWRXhwb3J0RW50aXRpZXNSZXNwb25zZRIWRXhwb3J0RW50aXRpZXNNZXRhZGF0YdpBMXByb2plY3RfaWQsbGFiZWxzLGVudGl0eV9maWx0ZXIsb3V0cHV0X3VybF9wcmVmaXiC0+STAiU6ASoiIC92MS9wcm9qZWN0cy97cHJvamVjdF9pZH06ZXhwb3J0Eu0BCg5JbXBvcnRFbnRpdGllcxIwLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuSW1wb3J0RW50aXRpZXNSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiKJAcpBLwoVZ29vZ2xlLnByb3RvYnVmLkVtcHR5EhZJbXBvcnRFbnRpdGllc01ldGFkYXRh2kEpcHJvamVjdF9pZCxsYWJlbHMsaW5wdXRfdXJsLGVudGl0eV9maWx0ZXKC0+STAiU6ASoiIC92MS9wcm9qZWN0cy97cHJvamVjdF9pZH06aW1wb3J0Eq8BCgtDcmVhdGVJbmRleBItLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuQ3JlYXRlSW5kZXhSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJSykEfCgVJbmRleBIWSW5kZXhPcGVyYXRpb25NZXRhZGF0YYLT5JMCKjoFaW5kZXgiIS92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vaW5kZXhlcxKzAQoLRGVsZXRlSW5kZXgSLS5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkRlbGV0ZUluZGV4UmVxdWVzdBodLmdvb2dsZS5sb25ncnVubmluZy5PcGVyYXRpb24iVspBHwoFSW5kZXgSFkluZGV4T3BlcmF0aW9uTWV0YWRhdGGC0+STAi4qLC92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vaW5kZXhlcy97aW5kZXhfaWR9Eo4BCghHZXRJbmRleBIqLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuR2V0SW5kZXhSZXF1ZXN0GiAuZ29vZ2xlLmRhdGFzdG9yZS5hZG1pbi52MS5JbmRleCI0gtPkkwIuEiwvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L2luZGV4ZXMve2luZGV4X2lkfRKXAQoLTGlzdEluZGV4ZXMSLS5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxLkxpc3RJbmRleGVzUmVxdWVzdBouLmdvb2dsZS5kYXRhc3RvcmUuYWRtaW4udjEuTGlzdEluZGV4ZXNSZXNwb25zZSIpgtPkkwIjEiEvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L2luZGV4ZXMadspBGGRhdGFzdG9yZS5nb29nbGVhcGlzLmNvbdJBWGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kYXRhc3RvcmVC2wEKHWNvbS5nb29nbGUuZGF0YXN0b3JlLmFkbWluLnYxQhNEYXRhc3RvcmVBZG1pblByb3RvUAFaOWNsb3VkLmdvb2dsZS5jb20vZ28vZGF0YXN0b3JlL2FkbWluL2FwaXYxL2FkbWlucGI7YWRtaW5wYqoCH0dvb2dsZS5DbG91ZC5EYXRhc3RvcmUuQWRtaW4uVjHKAh9Hb29nbGVcQ2xvdWRcRGF0YXN0b3JlXEFkbWluXFYx6gIjR29vZ2xlOjpDbG91ZDo6RGF0YXN0b3JlOjpBZG1pbjo6VjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_datastore_admin_v1_index, file_google_datastore_admin_v1_migration, file_google_longrunning_operations, file_google_protobuf_timestamp]);

/**
 * Metadata common to all Datastore Admin operations.
 *
 * @generated from message google.datastore.admin.v1.CommonMetadata
 */
export type CommonMetadata = Message<"google.datastore.admin.v1.CommonMetadata"> & {
  /**
   * The time that work began on the operation.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * The time the operation ended, either successfully or otherwise.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The type of the operation. Can be used as a filter in
   * ListOperationsRequest.
   *
   * @generated from field: google.datastore.admin.v1.OperationType operation_type = 3;
   */
  operationType: OperationType;

  /**
   * The client-assigned labels which were provided when the operation was
   * created. May also include additional labels.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };

  /**
   * The current state of the Operation.
   *
   * @generated from field: google.datastore.admin.v1.CommonMetadata.State state = 5;
   */
  state: CommonMetadata_State;
};

/**
 * Describes the message google.datastore.admin.v1.CommonMetadata.
 * Use `create(CommonMetadataSchema)` to create a new message.
 */
export const CommonMetadataSchema: GenMessage<CommonMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 0);

/**
 * The various possible states for an ongoing Operation.
 *
 * @generated from enum google.datastore.admin.v1.CommonMetadata.State
 */
export enum CommonMetadata_State {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * Request is being prepared for processing.
   *
   * @generated from enum value: INITIALIZING = 1;
   */
  INITIALIZING = 1,

  /**
   * Request is actively being processed.
   *
   * @generated from enum value: PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * Request is in the process of being cancelled after user called
   * google.longrunning.Operations.CancelOperation on the operation.
   *
   * @generated from enum value: CANCELLING = 3;
   */
  CANCELLING = 3,

  /**
   * Request has been processed and is in its finalization stage.
   *
   * @generated from enum value: FINALIZING = 4;
   */
  FINALIZING = 4,

  /**
   * Request has completed successfully.
   *
   * @generated from enum value: SUCCESSFUL = 5;
   */
  SUCCESSFUL = 5,

  /**
   * Request has finished being processed, but encountered an error.
   *
   * @generated from enum value: FAILED = 6;
   */
  FAILED = 6,

  /**
   * Request has finished being cancelled after user called
   * google.longrunning.Operations.CancelOperation.
   *
   * @generated from enum value: CANCELLED = 7;
   */
  CANCELLED = 7,
}

/**
 * Describes the enum google.datastore.admin.v1.CommonMetadata.State.
 */
export const CommonMetadata_StateSchema: GenEnum<CommonMetadata_State> = /*@__PURE__*/
  enumDesc(file_google_datastore_admin_v1_datastore_admin, 0, 0);

/**
 * Measures the progress of a particular metric.
 *
 * @generated from message google.datastore.admin.v1.Progress
 */
export type Progress = Message<"google.datastore.admin.v1.Progress"> & {
  /**
   * The amount of work that has been completed. Note that this may be greater
   * than work_estimated.
   *
   * @generated from field: int64 work_completed = 1;
   */
  workCompleted: bigint;

  /**
   * An estimate of how much work needs to be performed. May be zero if the
   * work estimate is unavailable.
   *
   * @generated from field: int64 work_estimated = 2;
   */
  workEstimated: bigint;
};

/**
 * Describes the message google.datastore.admin.v1.Progress.
 * Use `create(ProgressSchema)` to create a new message.
 */
export const ProgressSchema: GenMessage<Progress> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 1);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1.ExportEntitiesRequest
 */
export type ExportEntitiesRequest = Message<"google.datastore.admin.v1.ExportEntitiesRequest"> & {
  /**
   * Required. Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Description of what data from the project is included in the export.
   *
   * @generated from field: google.datastore.admin.v1.EntityFilter entity_filter = 3;
   */
  entityFilter?: EntityFilter;

  /**
   * Required. Location for the export metadata and data files.
   *
   * The full resource URL of the external storage location. Currently, only
   * Google Cloud Storage is supported. So output_url_prefix should be of the
   * form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the
   * name of the Cloud Storage bucket and `NAMESPACE_PATH` is an optional Cloud
   * Storage namespace path (this is not a Cloud Datastore namespace). For more
   * information about Cloud Storage namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * The resulting files will be nested deeper than the specified URL prefix.
   * The final output URL will be provided in the
   * [google.datastore.admin.v1.ExportEntitiesResponse.output_url][google.datastore.admin.v1.ExportEntitiesResponse.output_url]
   * field. That value should be used for subsequent ImportEntities operations.
   *
   * By nesting the data files deeper, the same Cloud Storage bucket can be used
   * in multiple ExportEntities operations without conflict.
   *
   * @generated from field: string output_url_prefix = 4;
   */
  outputUrlPrefix: string;
};

/**
 * Describes the message google.datastore.admin.v1.ExportEntitiesRequest.
 * Use `create(ExportEntitiesRequestSchema)` to create a new message.
 */
export const ExportEntitiesRequestSchema: GenMessage<ExportEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 2);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.ImportEntities][google.datastore.admin.v1.DatastoreAdmin.ImportEntities].
 *
 * @generated from message google.datastore.admin.v1.ImportEntitiesRequest
 */
export type ImportEntitiesRequest = Message<"google.datastore.admin.v1.ImportEntitiesRequest"> & {
  /**
   * Required. Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Client-assigned labels.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };

  /**
   * Required. The full resource URL of the external storage location.
   * Currently, only Google Cloud Storage is supported. So input_url should be
   * of the form:
   * `gs://BUCKET_NAME[/NAMESPACE_PATH]/OVERALL_EXPORT_METADATA_FILE`, where
   * `BUCKET_NAME` is the name of the Cloud Storage bucket, `NAMESPACE_PATH` is
   * an optional Cloud Storage namespace path (this is not a Cloud Datastore
   * namespace), and `OVERALL_EXPORT_METADATA_FILE` is the metadata file written
   * by the ExportEntities operation. For more information about Cloud Storage
   * namespace paths, see
   * [Object name
   * considerations](https://cloud.google.com/storage/docs/naming#object-considerations).
   *
   * For more information, see
   * [google.datastore.admin.v1.ExportEntitiesResponse.output_url][google.datastore.admin.v1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string input_url = 3;
   */
  inputUrl: string;

  /**
   * Optionally specify which kinds/namespaces are to be imported. If provided,
   * the list must be a subset of the EntityFilter used in creating the export,
   * otherwise a FAILED_PRECONDITION error will be returned. If no filter is
   * specified then all entities from the export are imported.
   *
   * @generated from field: google.datastore.admin.v1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;
};

/**
 * Describes the message google.datastore.admin.v1.ImportEntitiesRequest.
 * Use `create(ImportEntitiesRequestSchema)` to create a new message.
 */
export const ImportEntitiesRequestSchema: GenMessage<ImportEntitiesRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 3);

/**
 * The response for
 * [google.datastore.admin.v1.DatastoreAdmin.ExportEntities][google.datastore.admin.v1.DatastoreAdmin.ExportEntities].
 *
 * @generated from message google.datastore.admin.v1.ExportEntitiesResponse
 */
export type ExportEntitiesResponse = Message<"google.datastore.admin.v1.ExportEntitiesResponse"> & {
  /**
   * Location of the output metadata file. This can be used to begin an import
   * into Cloud Datastore (this project or another project). See
   * [google.datastore.admin.v1.ImportEntitiesRequest.input_url][google.datastore.admin.v1.ImportEntitiesRequest.input_url].
   * Only present if the operation completed successfully.
   *
   * @generated from field: string output_url = 1;
   */
  outputUrl: string;
};

/**
 * Describes the message google.datastore.admin.v1.ExportEntitiesResponse.
 * Use `create(ExportEntitiesResponseSchema)` to create a new message.
 */
export const ExportEntitiesResponseSchema: GenMessage<ExportEntitiesResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 4);

/**
 * Metadata for ExportEntities operations.
 *
 * @generated from message google.datastore.admin.v1.ExportEntitiesMetadata
 */
export type ExportEntitiesMetadata = Message<"google.datastore.admin.v1.ExportEntitiesMetadata"> & {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being exported.
   *
   * @generated from field: google.datastore.admin.v1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * Location for the export metadata and data files. This will be the same
   * value as the
   * [google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix][google.datastore.admin.v1.ExportEntitiesRequest.output_url_prefix]
   * field. The final output location is provided in
   * [google.datastore.admin.v1.ExportEntitiesResponse.output_url][google.datastore.admin.v1.ExportEntitiesResponse.output_url].
   *
   * @generated from field: string output_url_prefix = 5;
   */
  outputUrlPrefix: string;
};

/**
 * Describes the message google.datastore.admin.v1.ExportEntitiesMetadata.
 * Use `create(ExportEntitiesMetadataSchema)` to create a new message.
 */
export const ExportEntitiesMetadataSchema: GenMessage<ExportEntitiesMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 5);

/**
 * Metadata for ImportEntities operations.
 *
 * @generated from message google.datastore.admin.v1.ImportEntitiesMetadata
 */
export type ImportEntitiesMetadata = Message<"google.datastore.admin.v1.ImportEntitiesMetadata"> & {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * An estimate of the number of bytes processed.
   *
   * @generated from field: google.datastore.admin.v1.Progress progress_bytes = 3;
   */
  progressBytes?: Progress;

  /**
   * Description of which entities are being imported.
   *
   * @generated from field: google.datastore.admin.v1.EntityFilter entity_filter = 4;
   */
  entityFilter?: EntityFilter;

  /**
   * The location of the import metadata file. This will be the same value as
   * the
   * [google.datastore.admin.v1.ExportEntitiesResponse.output_url][google.datastore.admin.v1.ExportEntitiesResponse.output_url]
   * field.
   *
   * @generated from field: string input_url = 5;
   */
  inputUrl: string;
};

/**
 * Describes the message google.datastore.admin.v1.ImportEntitiesMetadata.
 * Use `create(ImportEntitiesMetadataSchema)` to create a new message.
 */
export const ImportEntitiesMetadataSchema: GenMessage<ImportEntitiesMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 6);

/**
 * Identifies a subset of entities in a project. This is specified as
 * combinations of kinds and namespaces (either or both of which may be all, as
 * described in the following examples).
 * Example usage:
 *
 * Entire project:
 *   kinds=[], namespace_ids=[]
 *
 * Kinds Foo and Bar in all namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=[]
 *
 * Kinds Foo and Bar only in the default namespace:
 *   kinds=['Foo', 'Bar'], namespace_ids=['']
 *
 * Kinds Foo and Bar in both the default and Baz namespaces:
 *   kinds=['Foo', 'Bar'], namespace_ids=['', 'Baz']
 *
 * The entire Baz namespace:
 *   kinds=[], namespace_ids=['Baz']
 *
 * @generated from message google.datastore.admin.v1.EntityFilter
 */
export type EntityFilter = Message<"google.datastore.admin.v1.EntityFilter"> & {
  /**
   * If empty, then this represents all kinds.
   *
   * @generated from field: repeated string kinds = 1;
   */
  kinds: string[];

  /**
   * An empty list represents all namespaces. This is the preferred
   * usage for projects that don't use namespaces.
   *
   * An empty string element represents the default namespace. This should be
   * used if the project has data in non-default namespaces, but doesn't want to
   * include them.
   * Each namespace in this list must be unique.
   *
   * @generated from field: repeated string namespace_ids = 2;
   */
  namespaceIds: string[];
};

/**
 * Describes the message google.datastore.admin.v1.EntityFilter.
 * Use `create(EntityFilterSchema)` to create a new message.
 */
export const EntityFilterSchema: GenMessage<EntityFilter> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 7);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.CreateIndex][google.datastore.admin.v1.DatastoreAdmin.CreateIndex].
 *
 * @generated from message google.datastore.admin.v1.CreateIndexRequest
 */
export type CreateIndexRequest = Message<"google.datastore.admin.v1.CreateIndexRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The index to create. The name and state fields are output only and will be
   * ignored. Single property indexes cannot be created or deleted.
   *
   * @generated from field: google.datastore.admin.v1.Index index = 3;
   */
  index?: Index;
};

/**
 * Describes the message google.datastore.admin.v1.CreateIndexRequest.
 * Use `create(CreateIndexRequestSchema)` to create a new message.
 */
export const CreateIndexRequestSchema: GenMessage<CreateIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 8);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.DeleteIndex][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex].
 *
 * @generated from message google.datastore.admin.v1.DeleteIndexRequest
 */
export type DeleteIndexRequest = Message<"google.datastore.admin.v1.DeleteIndexRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The resource ID of the index to delete.
   *
   * @generated from field: string index_id = 3;
   */
  indexId: string;
};

/**
 * Describes the message google.datastore.admin.v1.DeleteIndexRequest.
 * Use `create(DeleteIndexRequestSchema)` to create a new message.
 */
export const DeleteIndexRequestSchema: GenMessage<DeleteIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 9);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.GetIndex][google.datastore.admin.v1.DatastoreAdmin.GetIndex].
 *
 * @generated from message google.datastore.admin.v1.GetIndexRequest
 */
export type GetIndexRequest = Message<"google.datastore.admin.v1.GetIndexRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The resource ID of the index to get.
   *
   * @generated from field: string index_id = 3;
   */
  indexId: string;
};

/**
 * Describes the message google.datastore.admin.v1.GetIndexRequest.
 * Use `create(GetIndexRequestSchema)` to create a new message.
 */
export const GetIndexRequestSchema: GenMessage<GetIndexRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 10);

/**
 * The request for
 * [google.datastore.admin.v1.DatastoreAdmin.ListIndexes][google.datastore.admin.v1.DatastoreAdmin.ListIndexes].
 *
 * @generated from message google.datastore.admin.v1.ListIndexesRequest
 */
export type ListIndexesRequest = Message<"google.datastore.admin.v1.ListIndexesRequest"> & {
  /**
   * Project ID against which to make the request.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * The maximum number of items to return.  If zero, then all results will be
   * returned.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * The next_page_token value returned from a previous List request, if any.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.datastore.admin.v1.ListIndexesRequest.
 * Use `create(ListIndexesRequestSchema)` to create a new message.
 */
export const ListIndexesRequestSchema: GenMessage<ListIndexesRequest> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 11);

/**
 * The response for
 * [google.datastore.admin.v1.DatastoreAdmin.ListIndexes][google.datastore.admin.v1.DatastoreAdmin.ListIndexes].
 *
 * @generated from message google.datastore.admin.v1.ListIndexesResponse
 */
export type ListIndexesResponse = Message<"google.datastore.admin.v1.ListIndexesResponse"> & {
  /**
   * The indexes.
   *
   * @generated from field: repeated google.datastore.admin.v1.Index indexes = 1;
   */
  indexes: Index[];

  /**
   * The standard List next-page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.datastore.admin.v1.ListIndexesResponse.
 * Use `create(ListIndexesResponseSchema)` to create a new message.
 */
export const ListIndexesResponseSchema: GenMessage<ListIndexesResponse> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 12);

/**
 * Metadata for Index operations.
 *
 * @generated from message google.datastore.admin.v1.IndexOperationMetadata
 */
export type IndexOperationMetadata = Message<"google.datastore.admin.v1.IndexOperationMetadata"> & {
  /**
   * Metadata common to all Datastore Admin operations.
   *
   * @generated from field: google.datastore.admin.v1.CommonMetadata common = 1;
   */
  common?: CommonMetadata;

  /**
   * An estimate of the number of entities processed.
   *
   * @generated from field: google.datastore.admin.v1.Progress progress_entities = 2;
   */
  progressEntities?: Progress;

  /**
   * The index resource ID that this operation is acting on.
   *
   * @generated from field: string index_id = 3;
   */
  indexId: string;
};

/**
 * Describes the message google.datastore.admin.v1.IndexOperationMetadata.
 * Use `create(IndexOperationMetadataSchema)` to create a new message.
 */
export const IndexOperationMetadataSchema: GenMessage<IndexOperationMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 13);

/**
 * Metadata for Datastore to Firestore migration operations.
 *
 * The DatastoreFirestoreMigration operation is not started by the end-user via
 * an explicit "creation" method. This is an intentional deviation from the LRO
 * design pattern.
 *
 * This singleton resource can be accessed at:
 * "projects/{project_id}/operations/datastore-firestore-migration"
 *
 * @generated from message google.datastore.admin.v1.DatastoreFirestoreMigrationMetadata
 */
export type DatastoreFirestoreMigrationMetadata = Message<"google.datastore.admin.v1.DatastoreFirestoreMigrationMetadata"> & {
  /**
   * The current state of migration from Cloud Datastore to Cloud Firestore in
   * Datastore mode.
   *
   * @generated from field: google.datastore.admin.v1.MigrationState migration_state = 1;
   */
  migrationState: MigrationState;

  /**
   * The current step of migration from Cloud Datastore to Cloud Firestore in
   * Datastore mode.
   *
   * @generated from field: google.datastore.admin.v1.MigrationStep migration_step = 2;
   */
  migrationStep: MigrationStep;
};

/**
 * Describes the message google.datastore.admin.v1.DatastoreFirestoreMigrationMetadata.
 * Use `create(DatastoreFirestoreMigrationMetadataSchema)` to create a new message.
 */
export const DatastoreFirestoreMigrationMetadataSchema: GenMessage<DatastoreFirestoreMigrationMetadata> = /*@__PURE__*/
  messageDesc(file_google_datastore_admin_v1_datastore_admin, 14);

/**
 * Operation types.
 *
 * @generated from enum google.datastore.admin.v1.OperationType
 */
export enum OperationType {
  /**
   * Unspecified.
   *
   * @generated from enum value: OPERATION_TYPE_UNSPECIFIED = 0;
   */
  OPERATION_TYPE_UNSPECIFIED = 0,

  /**
   * ExportEntities.
   *
   * @generated from enum value: EXPORT_ENTITIES = 1;
   */
  EXPORT_ENTITIES = 1,

  /**
   * ImportEntities.
   *
   * @generated from enum value: IMPORT_ENTITIES = 2;
   */
  IMPORT_ENTITIES = 2,

  /**
   * CreateIndex.
   *
   * @generated from enum value: CREATE_INDEX = 3;
   */
  CREATE_INDEX = 3,

  /**
   * DeleteIndex.
   *
   * @generated from enum value: DELETE_INDEX = 4;
   */
  DELETE_INDEX = 4,
}

/**
 * Describes the enum google.datastore.admin.v1.OperationType.
 */
export const OperationTypeSchema: GenEnum<OperationType> = /*@__PURE__*/
  enumDesc(file_google_datastore_admin_v1_datastore_admin, 0);

/**
 * Google Cloud Datastore Admin API
 *
 * The Datastore Admin API provides several admin services for Cloud Datastore.
 *
 * Concepts: Project, namespace, kind, and entity as defined in the Google Cloud
 * Datastore API.
 *
 * Operation: An Operation represents work being performed in the background.
 *
 * EntityFilter: Allows specifying a subset of entities in a project. This is
 * specified as a combination of kinds and namespaces (either or both of which
 * may be all).
 *
 * Export/Import Service:
 *
 * - The Export/Import service provides the ability to copy all or a subset of
 * entities to/from Google Cloud Storage.
 * - Exported data may be imported into Cloud Datastore for any Google Cloud
 * Platform project. It is not restricted to the export source project. It is
 * possible to export from one project and then import into another.
 * - Exported data can also be loaded into Google BigQuery for analysis.
 * - Exports and imports are performed asynchronously. An Operation resource is
 * created for each export/import. The state (including any errors encountered)
 * of the export/import may be queried via the Operation resource.
 *
 * Index Service:
 *
 * - The index service manages Cloud Datastore composite indexes.
 * - Index creation and deletion are performed asynchronously.
 * An Operation resource is created for each such asynchronous operation.
 * The state of the operation (including any errors encountered)
 * may be queried via the Operation resource.
 *
 * Operation Service:
 *
 * - The Operations collection provides a record of actions performed for the
 * specified project (including any operations in progress). Operations are not
 * created directly but through calls on other collections or resources.
 * - An operation that is not yet done may be cancelled. The request to cancel
 * is asynchronous and the operation may continue to run for some time after the
 * request to cancel is made.
 * - An operation that is done may be deleted so that it is no longer listed as
 * part of the Operation collection.
 * - ListOperations returns all pending operations, but not completed
 * operations.
 * - Operations are created by service DatastoreAdmin, but are accessed via
 * service google.longrunning.Operations.
 *
 * @generated from service google.datastore.admin.v1.DatastoreAdmin
 */
export const DatastoreAdmin: GenService<{
  /**
   * Exports a copy of all or a subset of entities from Google Cloud Datastore
   * to another storage system, such as Google Cloud Storage. Recent updates to
   * entities may not be reflected in the export. The export occurs in the
   * background and its progress can be monitored and managed via the
   * Operation resource that is created. The output of an export may only be
   * used once the associated operation is done. If an export operation is
   * cancelled before completion it may leave partial data behind in Google
   * Cloud Storage.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.ExportEntities
   */
  exportEntities: {
    methodKind: "unary";
    input: typeof ExportEntitiesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Imports entities into Google Cloud Datastore. Existing entities with the
   * same key are overwritten. The import occurs in the background and its
   * progress can be monitored and managed via the Operation resource that is
   * created. If an ImportEntities operation is cancelled, it is possible
   * that a subset of the data has already been imported to Cloud Datastore.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.ImportEntities
   */
  importEntities: {
    methodKind: "unary";
    input: typeof ImportEntitiesRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates the specified index.
   * A newly created index's initial state is `CREATING`. On completion of the
   * returned [google.longrunning.Operation][google.longrunning.Operation], the
   * state will be `READY`. If the index already exists, the call will return an
   * `ALREADY_EXISTS` status.
   *
   * During index creation, the process could result in an error, in which
   * case the index will move to the `ERROR` state. The process can be recovered
   * by fixing the data that caused the error, removing the index with
   * [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex], then
   * re-creating the index with [create]
   * [google.datastore.admin.v1.DatastoreAdmin.CreateIndex].
   *
   * Indexes with a single property cannot be created.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.CreateIndex
   */
  createIndex: {
    methodKind: "unary";
    input: typeof CreateIndexRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Deletes an existing index.
   * An index can only be deleted if it is in a `READY` or `ERROR` state. On
   * successful execution of the request, the index will be in a `DELETING`
   * [state][google.datastore.admin.v1.Index.State]. And on completion of the
   * returned [google.longrunning.Operation][google.longrunning.Operation], the
   * index will be removed.
   *
   * During index deletion, the process could result in an error, in which
   * case the index will move to the `ERROR` state. The process can be recovered
   * by fixing the data that caused the error, followed by calling
   * [delete][google.datastore.admin.v1.DatastoreAdmin.DeleteIndex] again.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.DeleteIndex
   */
  deleteIndex: {
    methodKind: "unary";
    input: typeof DeleteIndexRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets an index.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.GetIndex
   */
  getIndex: {
    methodKind: "unary";
    input: typeof GetIndexRequestSchema;
    output: typeof IndexSchema;
  },
  /**
   * Lists the indexes that match the specified filters.  Datastore uses an
   * eventually consistent query to fetch the list of indexes and may
   * occasionally return stale results.
   *
   * @generated from rpc google.datastore.admin.v1.DatastoreAdmin.ListIndexes
   */
  listIndexes: {
    methodKind: "unary";
    input: typeof ListIndexesRequestSchema;
    output: typeof ListIndexesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_datastore_admin_v1_datastore_admin, 0);

