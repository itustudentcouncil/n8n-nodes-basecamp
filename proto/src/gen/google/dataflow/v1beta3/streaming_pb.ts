// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/dataflow/v1beta3/streaming.proto (package google.dataflow.v1beta3, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/dataflow/v1beta3/streaming.proto.
 */
export const file_google_dataflow_v1beta3_streaming: GenFile = /*@__PURE__*/
  fileDesc("Cidnb29nbGUvZGF0YWZsb3cvdjFiZXRhMy9zdHJlYW1pbmcucHJvdG8SF2dvb2dsZS5kYXRhZmxvdy52MWJldGEzIp0DCg5Ub3BvbG9neUNvbmZpZxJCCgxjb21wdXRhdGlvbnMYASADKAsyLC5nb29nbGUuZGF0YWZsb3cudjFiZXRhMy5Db21wdXRhdGlvblRvcG9sb2d5EkoKFWRhdGFfZGlza19hc3NpZ25tZW50cxgCIAMoCzIrLmdvb2dsZS5kYXRhZmxvdy52MWJldGEzLkRhdGFEaXNrQXNzaWdubWVudBJ2CiJ1c2VyX3N0YWdlX3RvX2NvbXB1dGF0aW9uX25hbWVfbWFwGAMgAygLMkouZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuVG9wb2xvZ3lDb25maWcuVXNlclN0YWdlVG9Db21wdXRhdGlvbk5hbWVNYXBFbnRyeRIbChNmb3J3YXJkaW5nX2tleV9iaXRzGAQgASgFEiAKGHBlcnNpc3RlbnRfc3RhdGVfdmVyc2lvbhgFIAEoBRpECiJVc2VyU3RhZ2VUb0NvbXB1dGF0aW9uTmFtZU1hcEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEisAEKDlB1YnN1YkxvY2F0aW9uEg0KBXRvcGljGAEgASgJEhQKDHN1YnNjcmlwdGlvbhgCIAEoCRIXCg90aW1lc3RhbXBfbGFiZWwYAyABKAkSEAoIaWRfbGFiZWwYBCABKAkSFgoOZHJvcF9sYXRlX2RhdGEYBSABKAgSHQoVdHJhY2tpbmdfc3Vic2NyaXB0aW9uGAYgASgJEhcKD3dpdGhfYXR0cmlidXRlcxgHIAEoCCIrChZTdHJlYW1pbmdTdGFnZUxvY2F0aW9uEhEKCXN0cmVhbV9pZBgBIAEoCSI/ChpTdHJlYW1pbmdTaWRlSW5wdXRMb2NhdGlvbhILCgN0YWcYASABKAkSFAoMc3RhdGVfZmFtaWx5GAIgASgJIigKFEN1c3RvbVNvdXJjZUxvY2F0aW9uEhAKCHN0YXRlZnVsGAEgASgIItoCCg5TdHJlYW1Mb2NhdGlvbhJTChhzdHJlYW1pbmdfc3RhZ2VfbG9jYXRpb24YASABKAsyLy5nb29nbGUuZGF0YWZsb3cudjFiZXRhMy5TdHJlYW1pbmdTdGFnZUxvY2F0aW9uSAASQgoPcHVic3ViX2xvY2F0aW9uGAIgASgLMicuZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuUHVic3ViTG9jYXRpb25IABJSChNzaWRlX2lucHV0X2xvY2F0aW9uGAMgASgLMjMuZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuU3RyZWFtaW5nU2lkZUlucHV0TG9jYXRpb25IABJPChZjdXN0b21fc291cmNlX2xvY2F0aW9uGAQgASgLMi0uZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuQ3VzdG9tU291cmNlTG9jYXRpb25IAEIKCghsb2NhdGlvbiI6ChFTdGF0ZUZhbWlseUNvbmZpZxIUCgxzdGF0ZV9mYW1pbHkYASABKAkSDwoHaXNfcmVhZBgCIAEoCCK+AgoTQ29tcHV0YXRpb25Ub3BvbG9neRIZChFzeXN0ZW1fc3RhZ2VfbmFtZRgBIAEoCRIWCg5jb21wdXRhdGlvbl9pZBgFIAEoCRI9CgprZXlfcmFuZ2VzGAIgAygLMikuZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuS2V5UmFuZ2VMb2NhdGlvbhI3CgZpbnB1dHMYAyADKAsyJy5nb29nbGUuZGF0YWZsb3cudjFiZXRhMy5TdHJlYW1Mb2NhdGlvbhI4CgdvdXRwdXRzGAQgAygLMicuZ29vZ2xlLmRhdGFmbG93LnYxYmV0YTMuU3RyZWFtTG9jYXRpb24SQgoOc3RhdGVfZmFtaWxpZXMYByADKAsyKi5nb29nbGUuZGF0YWZsb3cudjFiZXRhMy5TdGF0ZUZhbWlseUNvbmZpZyKJAQoQS2V5UmFuZ2VMb2NhdGlvbhINCgVzdGFydBgBIAEoCRILCgNlbmQYAiABKAkSGQoRZGVsaXZlcnlfZW5kcG9pbnQYAyABKAkSEQoJZGF0YV9kaXNrGAUgASgJEisKH2RlcHJlY2F0ZWRfcGVyc2lzdGVudF9kaXJlY3RvcnkYBCABKAlCAhgBIiQKD01vdW50ZWREYXRhRGlzaxIRCglkYXRhX2Rpc2sYASABKAkiPQoSRGF0YURpc2tBc3NpZ25tZW50EhMKC3ZtX2luc3RhbmNlGAEgASgJEhIKCmRhdGFfZGlza3MYAiADKAkiSwoaS2V5UmFuZ2VEYXRhRGlza0Fzc2lnbm1lbnQSDQoFc3RhcnQYASABKAkSCwoDZW5kGAIgASgJEhEKCWRhdGFfZGlzaxgDIAEoCSKEAQoaU3RyZWFtaW5nQ29tcHV0YXRpb25SYW5nZXMSFgoOY29tcHV0YXRpb25faWQYASABKAkSTgoRcmFuZ2VfYXNzaWdubWVudHMYAiADKAsyMy5nb29nbGUuZGF0YWZsb3cudjFiZXRhMy5LZXlSYW5nZURhdGFEaXNrQXNzaWdubWVudCJWCiBTdHJlYW1pbmdBcHBsaWFuY2VTbmFwc2hvdENvbmZpZxITCgtzbmFwc2hvdF9pZBgBIAEoCRIdChVpbXBvcnRfc3RhdGVfZW5kcG9pbnQYAiABKAlC0QEKG2NvbS5nb29nbGUuZGF0YWZsb3cudjFiZXRhM0IOU3RyZWFtaW5nUHJvdG9QAVo9Y2xvdWQuZ29vZ2xlLmNvbS9nby9kYXRhZmxvdy9hcGl2MWJldGEzL2RhdGFmbG93cGI7ZGF0YWZsb3dwYqoCHUdvb2dsZS5DbG91ZC5EYXRhZmxvdy5WMUJldGEzygIdR29vZ2xlXENsb3VkXERhdGFmbG93XFYxYmV0YTPqAiBHb29nbGU6OkNsb3VkOjpEYXRhZmxvdzo6VjFiZXRhM2IGcHJvdG8z");

/**
 * Global topology of the streaming Dataflow job, including all
 * computations and their sharded locations.
 *
 * @generated from message google.dataflow.v1beta3.TopologyConfig
 */
export type TopologyConfig = Message<"google.dataflow.v1beta3.TopologyConfig"> & {
  /**
   * The computations associated with a streaming Dataflow job.
   *
   * @generated from field: repeated google.dataflow.v1beta3.ComputationTopology computations = 1;
   */
  computations: ComputationTopology[];

  /**
   * The disks assigned to a streaming Dataflow job.
   *
   * @generated from field: repeated google.dataflow.v1beta3.DataDiskAssignment data_disk_assignments = 2;
   */
  dataDiskAssignments: DataDiskAssignment[];

  /**
   * Maps user stage names to stable computation names.
   *
   * @generated from field: map<string, string> user_stage_to_computation_name_map = 3;
   */
  userStageToComputationNameMap: { [key: string]: string };

  /**
   * The size (in bits) of keys that will be assigned to source messages.
   *
   * @generated from field: int32 forwarding_key_bits = 4;
   */
  forwardingKeyBits: number;

  /**
   * Version number for persistent state.
   *
   * @generated from field: int32 persistent_state_version = 5;
   */
  persistentStateVersion: number;
};

/**
 * Describes the message google.dataflow.v1beta3.TopologyConfig.
 * Use `create(TopologyConfigSchema)` to create a new message.
 */
export const TopologyConfigSchema: GenMessage<TopologyConfig> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 0);

/**
 * Identifies a pubsub location to use for transferring data into or
 * out of a streaming Dataflow job.
 *
 * @generated from message google.dataflow.v1beta3.PubsubLocation
 */
export type PubsubLocation = Message<"google.dataflow.v1beta3.PubsubLocation"> & {
  /**
   * A pubsub topic, in the form of
   * "pubsub.googleapis.com/topics/<project-id>/<topic-name>"
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * A pubsub subscription, in the form of
   * "pubsub.googleapis.com/subscriptions/<project-id>/<subscription-name>"
   *
   * @generated from field: string subscription = 2;
   */
  subscription: string;

  /**
   * If set, contains a pubsub label from which to extract record timestamps.
   * If left empty, record timestamps will be generated upon arrival.
   *
   * @generated from field: string timestamp_label = 3;
   */
  timestampLabel: string;

  /**
   * If set, contains a pubsub label from which to extract record ids.
   * If left empty, record deduplication will be strictly best effort.
   *
   * @generated from field: string id_label = 4;
   */
  idLabel: string;

  /**
   * Indicates whether the pipeline allows late-arriving data.
   *
   * @generated from field: bool drop_late_data = 5;
   */
  dropLateData: boolean;

  /**
   * If set, specifies the pubsub subscription that will be used for tracking
   * custom time timestamps for watermark estimation.
   *
   * @generated from field: string tracking_subscription = 6;
   */
  trackingSubscription: string;

  /**
   * If true, then the client has requested to get pubsub attributes.
   *
   * @generated from field: bool with_attributes = 7;
   */
  withAttributes: boolean;
};

/**
 * Describes the message google.dataflow.v1beta3.PubsubLocation.
 * Use `create(PubsubLocationSchema)` to create a new message.
 */
export const PubsubLocationSchema: GenMessage<PubsubLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 1);

/**
 * Identifies the location of a streaming computation stage, for
 * stage-to-stage communication.
 *
 * @generated from message google.dataflow.v1beta3.StreamingStageLocation
 */
export type StreamingStageLocation = Message<"google.dataflow.v1beta3.StreamingStageLocation"> & {
  /**
   * Identifies the particular stream within the streaming Dataflow
   * job.
   *
   * @generated from field: string stream_id = 1;
   */
  streamId: string;
};

/**
 * Describes the message google.dataflow.v1beta3.StreamingStageLocation.
 * Use `create(StreamingStageLocationSchema)` to create a new message.
 */
export const StreamingStageLocationSchema: GenMessage<StreamingStageLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 2);

/**
 * Identifies the location of a streaming side input.
 *
 * @generated from message google.dataflow.v1beta3.StreamingSideInputLocation
 */
export type StreamingSideInputLocation = Message<"google.dataflow.v1beta3.StreamingSideInputLocation"> & {
  /**
   * Identifies the particular side input within the streaming Dataflow job.
   *
   * @generated from field: string tag = 1;
   */
  tag: string;

  /**
   * Identifies the state family where this side input is stored.
   *
   * @generated from field: string state_family = 2;
   */
  stateFamily: string;
};

/**
 * Describes the message google.dataflow.v1beta3.StreamingSideInputLocation.
 * Use `create(StreamingSideInputLocationSchema)` to create a new message.
 */
export const StreamingSideInputLocationSchema: GenMessage<StreamingSideInputLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 3);

/**
 * Identifies the location of a custom souce.
 *
 * @generated from message google.dataflow.v1beta3.CustomSourceLocation
 */
export type CustomSourceLocation = Message<"google.dataflow.v1beta3.CustomSourceLocation"> & {
  /**
   * Whether this source is stateful.
   *
   * @generated from field: bool stateful = 1;
   */
  stateful: boolean;
};

/**
 * Describes the message google.dataflow.v1beta3.CustomSourceLocation.
 * Use `create(CustomSourceLocationSchema)` to create a new message.
 */
export const CustomSourceLocationSchema: GenMessage<CustomSourceLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 4);

/**
 * Describes a stream of data, either as input to be processed or as
 * output of a streaming Dataflow job.
 *
 * @generated from message google.dataflow.v1beta3.StreamLocation
 */
export type StreamLocation = Message<"google.dataflow.v1beta3.StreamLocation"> & {
  /**
   * A specification of a stream's location.
   *
   * @generated from oneof google.dataflow.v1beta3.StreamLocation.location
   */
  location: {
    /**
     * The stream is part of another computation within the current
     * streaming Dataflow job.
     *
     * @generated from field: google.dataflow.v1beta3.StreamingStageLocation streaming_stage_location = 1;
     */
    value: StreamingStageLocation;
    case: "streamingStageLocation";
  } | {
    /**
     * The stream is a pubsub stream.
     *
     * @generated from field: google.dataflow.v1beta3.PubsubLocation pubsub_location = 2;
     */
    value: PubsubLocation;
    case: "pubsubLocation";
  } | {
    /**
     * The stream is a streaming side input.
     *
     * @generated from field: google.dataflow.v1beta3.StreamingSideInputLocation side_input_location = 3;
     */
    value: StreamingSideInputLocation;
    case: "sideInputLocation";
  } | {
    /**
     * The stream is a custom source.
     *
     * @generated from field: google.dataflow.v1beta3.CustomSourceLocation custom_source_location = 4;
     */
    value: CustomSourceLocation;
    case: "customSourceLocation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.dataflow.v1beta3.StreamLocation.
 * Use `create(StreamLocationSchema)` to create a new message.
 */
export const StreamLocationSchema: GenMessage<StreamLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 5);

/**
 * State family configuration.
 *
 * @generated from message google.dataflow.v1beta3.StateFamilyConfig
 */
export type StateFamilyConfig = Message<"google.dataflow.v1beta3.StateFamilyConfig"> & {
  /**
   * The state family value.
   *
   * @generated from field: string state_family = 1;
   */
  stateFamily: string;

  /**
   * If true, this family corresponds to a read operation.
   *
   * @generated from field: bool is_read = 2;
   */
  isRead: boolean;
};

/**
 * Describes the message google.dataflow.v1beta3.StateFamilyConfig.
 * Use `create(StateFamilyConfigSchema)` to create a new message.
 */
export const StateFamilyConfigSchema: GenMessage<StateFamilyConfig> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 6);

/**
 * All configuration data for a particular Computation.
 *
 * @generated from message google.dataflow.v1beta3.ComputationTopology
 */
export type ComputationTopology = Message<"google.dataflow.v1beta3.ComputationTopology"> & {
  /**
   * The system stage name.
   *
   * @generated from field: string system_stage_name = 1;
   */
  systemStageName: string;

  /**
   * The ID of the computation.
   *
   * @generated from field: string computation_id = 5;
   */
  computationId: string;

  /**
   * The key ranges processed by the computation.
   *
   * @generated from field: repeated google.dataflow.v1beta3.KeyRangeLocation key_ranges = 2;
   */
  keyRanges: KeyRangeLocation[];

  /**
   * The inputs to the computation.
   *
   * @generated from field: repeated google.dataflow.v1beta3.StreamLocation inputs = 3;
   */
  inputs: StreamLocation[];

  /**
   * The outputs from the computation.
   *
   * @generated from field: repeated google.dataflow.v1beta3.StreamLocation outputs = 4;
   */
  outputs: StreamLocation[];

  /**
   * The state family values.
   *
   * @generated from field: repeated google.dataflow.v1beta3.StateFamilyConfig state_families = 7;
   */
  stateFamilies: StateFamilyConfig[];
};

/**
 * Describes the message google.dataflow.v1beta3.ComputationTopology.
 * Use `create(ComputationTopologySchema)` to create a new message.
 */
export const ComputationTopologySchema: GenMessage<ComputationTopology> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 7);

/**
 * Location information for a specific key-range of a sharded computation.
 * Currently we only support UTF-8 character splits to simplify encoding into
 * JSON.
 *
 * @generated from message google.dataflow.v1beta3.KeyRangeLocation
 */
export type KeyRangeLocation = Message<"google.dataflow.v1beta3.KeyRangeLocation"> & {
  /**
   * The start (inclusive) of the key range.
   *
   * @generated from field: string start = 1;
   */
  start: string;

  /**
   * The end (exclusive) of the key range.
   *
   * @generated from field: string end = 2;
   */
  end: string;

  /**
   * The physical location of this range assignment to be used for
   * streaming computation cross-worker message delivery.
   *
   * @generated from field: string delivery_endpoint = 3;
   */
  deliveryEndpoint: string;

  /**
   * The name of the data disk where data for this range is stored.
   * This name is local to the Google Cloud Platform project and uniquely
   * identifies the disk within that project, for example
   * "myproject-1014-104817-4c2-harness-0-disk-1".
   *
   * @generated from field: string data_disk = 5;
   */
  dataDisk: string;

  /**
   * DEPRECATED. The location of the persistent state for this range, as a
   * persistent directory in the worker local filesystem.
   *
   * @generated from field: string deprecated_persistent_directory = 4 [deprecated = true];
   * @deprecated
   */
  deprecatedPersistentDirectory: string;
};

/**
 * Describes the message google.dataflow.v1beta3.KeyRangeLocation.
 * Use `create(KeyRangeLocationSchema)` to create a new message.
 */
export const KeyRangeLocationSchema: GenMessage<KeyRangeLocation> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 8);

/**
 * Describes mounted data disk.
 *
 * @generated from message google.dataflow.v1beta3.MountedDataDisk
 */
export type MountedDataDisk = Message<"google.dataflow.v1beta3.MountedDataDisk"> & {
  /**
   * The name of the data disk.
   * This name is local to the Google Cloud Platform project and uniquely
   * identifies the disk within that project, for example
   * "myproject-1014-104817-4c2-harness-0-disk-1".
   *
   * @generated from field: string data_disk = 1;
   */
  dataDisk: string;
};

/**
 * Describes the message google.dataflow.v1beta3.MountedDataDisk.
 * Use `create(MountedDataDiskSchema)` to create a new message.
 */
export const MountedDataDiskSchema: GenMessage<MountedDataDisk> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 9);

/**
 * Data disk assignment for a given VM instance.
 *
 * @generated from message google.dataflow.v1beta3.DataDiskAssignment
 */
export type DataDiskAssignment = Message<"google.dataflow.v1beta3.DataDiskAssignment"> & {
  /**
   * VM instance name the data disks mounted to, for example
   * "myproject-1014-104817-4c2-harness-0".
   *
   * @generated from field: string vm_instance = 1;
   */
  vmInstance: string;

  /**
   * Mounted data disks. The order is important a data disk's 0-based index in
   * this list defines which persistent directory the disk is mounted to, for
   * example the list of { "myproject-1014-104817-4c2-harness-0-disk-0" },
   * { "myproject-1014-104817-4c2-harness-0-disk-1" }.
   *
   * @generated from field: repeated string data_disks = 2;
   */
  dataDisks: string[];
};

/**
 * Describes the message google.dataflow.v1beta3.DataDiskAssignment.
 * Use `create(DataDiskAssignmentSchema)` to create a new message.
 */
export const DataDiskAssignmentSchema: GenMessage<DataDiskAssignment> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 10);

/**
 * Data disk assignment information for a specific key-range of a sharded
 * computation.
 * Currently we only support UTF-8 character splits to simplify encoding into
 * JSON.
 *
 * @generated from message google.dataflow.v1beta3.KeyRangeDataDiskAssignment
 */
export type KeyRangeDataDiskAssignment = Message<"google.dataflow.v1beta3.KeyRangeDataDiskAssignment"> & {
  /**
   * The start (inclusive) of the key range.
   *
   * @generated from field: string start = 1;
   */
  start: string;

  /**
   * The end (exclusive) of the key range.
   *
   * @generated from field: string end = 2;
   */
  end: string;

  /**
   * The name of the data disk where data for this range is stored.
   * This name is local to the Google Cloud Platform project and uniquely
   * identifies the disk within that project, for example
   * "myproject-1014-104817-4c2-harness-0-disk-1".
   *
   * @generated from field: string data_disk = 3;
   */
  dataDisk: string;
};

/**
 * Describes the message google.dataflow.v1beta3.KeyRangeDataDiskAssignment.
 * Use `create(KeyRangeDataDiskAssignmentSchema)` to create a new message.
 */
export const KeyRangeDataDiskAssignmentSchema: GenMessage<KeyRangeDataDiskAssignment> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 11);

/**
 * Describes full or partial data disk assignment information of the computation
 * ranges.
 *
 * @generated from message google.dataflow.v1beta3.StreamingComputationRanges
 */
export type StreamingComputationRanges = Message<"google.dataflow.v1beta3.StreamingComputationRanges"> & {
  /**
   * The ID of the computation.
   *
   * @generated from field: string computation_id = 1;
   */
  computationId: string;

  /**
   * Data disk assignments for ranges from this computation.
   *
   * @generated from field: repeated google.dataflow.v1beta3.KeyRangeDataDiskAssignment range_assignments = 2;
   */
  rangeAssignments: KeyRangeDataDiskAssignment[];
};

/**
 * Describes the message google.dataflow.v1beta3.StreamingComputationRanges.
 * Use `create(StreamingComputationRangesSchema)` to create a new message.
 */
export const StreamingComputationRangesSchema: GenMessage<StreamingComputationRanges> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 12);

/**
 * Streaming appliance snapshot configuration.
 *
 * @generated from message google.dataflow.v1beta3.StreamingApplianceSnapshotConfig
 */
export type StreamingApplianceSnapshotConfig = Message<"google.dataflow.v1beta3.StreamingApplianceSnapshotConfig"> & {
  /**
   * If set, indicates the snapshot id for the snapshot being performed.
   *
   * @generated from field: string snapshot_id = 1;
   */
  snapshotId: string;

  /**
   * Indicates which endpoint is used to import appliance state.
   *
   * @generated from field: string import_state_endpoint = 2;
   */
  importStateEndpoint: string;
};

/**
 * Describes the message google.dataflow.v1beta3.StreamingApplianceSnapshotConfig.
 * Use `create(StreamingApplianceSnapshotConfigSchema)` to create a new message.
 */
export const StreamingApplianceSnapshotConfigSchema: GenMessage<StreamingApplianceSnapshotConfig> = /*@__PURE__*/
  messageDesc(file_google_dataflow_v1beta3_streaming, 13);

