// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/roads/v1op/roads.proto (package google.maps.roads.v1op, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/roads/v1op/roads.proto.
 */
export const file_google_maps_roads_v1op_roads: GenFile = /*@__PURE__*/
  fileDesc("CiJnb29nbGUvbWFwcy9yb2Fkcy92MW9wL3JvYWRzLnByb3RvEhZnb29nbGUubWFwcy5yb2Fkcy52MW9wIoIBChJTbmFwVG9Sb2Fkc1JlcXVlc3QSDAoEcGF0aBgBIAEoCRITCgtpbnRlcnBvbGF0ZRgCIAEoCBIQCghhc3NldF9pZBgDIAEoCRI3Cgt0cmF2ZWxfbW9kZRgEIAEoDjIiLmdvb2dsZS5tYXBzLnJvYWRzLnYxb3AuVHJhdmVsTW9kZSJ9CgxTbmFwcGVkUG9pbnQSJQoIbG9jYXRpb24YASABKAsyEy5nb29nbGUudHlwZS5MYXRMbmcSNAoOb3JpZ2luYWxfaW5kZXgYAiABKAsyHC5nb29nbGUucHJvdG9idWYuVUludDMyVmFsdWUSEAoIcGxhY2VfaWQYAyABKAkibAoTU25hcFRvUm9hZHNSZXNwb25zZRI8Cg5zbmFwcGVkX3BvaW50cxgBIAMoCzIkLmdvb2dsZS5tYXBzLnJvYWRzLnYxb3AuU25hcHBlZFBvaW50EhcKD3dhcm5pbmdfbWVzc2FnZRgCIAEoCSJiChdMaXN0TmVhcmVzdFJvYWRzUmVxdWVzdBIOCgZwb2ludHMYASABKAkSNwoLdHJhdmVsX21vZGUYAiABKA4yIi5nb29nbGUubWFwcy5yb2Fkcy52MW9wLlRyYXZlbE1vZGUiWAoYTGlzdE5lYXJlc3RSb2Fkc1Jlc3BvbnNlEjwKDnNuYXBwZWRfcG9pbnRzGAEgAygLMiQuZ29vZ2xlLm1hcHMucm9hZHMudjFvcC5TbmFwcGVkUG9pbnQqUAoKVHJhdmVsTW9kZRIbChdUUkFWRUxfTU9ERV9VTlNQRUNJRklFRBAAEgsKB0RSSVZJTkcQARILCgdDWUNMSU5HEAISCwoHV0FMS0lORxADMpsCCgxSb2Fkc1NlcnZpY2USbwoLU25hcFRvUm9hZHMSKi5nb29nbGUubWFwcy5yb2Fkcy52MW9wLlNuYXBUb1JvYWRzUmVxdWVzdBorLmdvb2dsZS5tYXBzLnJvYWRzLnYxb3AuU25hcFRvUm9hZHNSZXNwb25zZSIH2kEEcGF0aBKAAQoQTGlzdE5lYXJlc3RSb2FkcxIvLmdvb2dsZS5tYXBzLnJvYWRzLnYxb3AuTGlzdE5lYXJlc3RSb2Fkc1JlcXVlc3QaMC5nb29nbGUubWFwcy5yb2Fkcy52MW9wLkxpc3ROZWFyZXN0Um9hZHNSZXNwb25zZSIJ2kEGcG9pbnRzGhfKQRRyb2Fkcy5nb29nbGVhcGlzLmNvbUJiChpjb20uZ29vZ2xlLm1hcHMucm9hZHMudjFvcEIKUm9hZHNQcm90b1ABWjZjbG91ZC5nb29nbGUuY29tL2dvL21hcHMvcm9hZHMvYXBpdjFvcC9yb2Fkc3BiO3JvYWRzcGJiBnByb3RvMw", [file_google_api_client, file_google_protobuf_wrappers, file_google_type_latlng]);

/**
 * A request to the SnapToRoads method, requesting that a sequence of points be
 * snapped to road segments.
 *
 * @generated from message google.maps.roads.v1op.SnapToRoadsRequest
 */
export type SnapToRoadsRequest = Message<"google.maps.roads.v1op.SnapToRoadsRequest"> & {
  /**
   * The path to be snapped as a series of lat, lng points. Specified as
   * a string of the format: lat,lng|lat,lng|...
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * Whether to interpolate the points to return full road geometry.
   *
   * @generated from field: bool interpolate = 2;
   */
  interpolate: boolean;

  /**
   * The asset ID of the asset to which this path relates. This is used for
   * abuse detection purposes for clients with asset-based SKUs.
   *
   * @generated from field: string asset_id = 3;
   */
  assetId: string;

  /**
   * The type of travel being tracked. This will constrain the paths we snap to.
   *
   * @generated from field: google.maps.roads.v1op.TravelMode travel_mode = 4;
   */
  travelMode: TravelMode;
};

/**
 * Describes the message google.maps.roads.v1op.SnapToRoadsRequest.
 * Use `create(SnapToRoadsRequestSchema)` to create a new message.
 */
export const SnapToRoadsRequestSchema: GenMessage<SnapToRoadsRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_roads_v1op_roads, 0);

/**
 * A snapped point object, representing the result of snapping.
 *
 * @generated from message google.maps.roads.v1op.SnappedPoint
 */
export type SnappedPoint = Message<"google.maps.roads.v1op.SnappedPoint"> & {
  /**
   * The lat,lng of the snapped location.
   *
   * @generated from field: google.type.LatLng location = 1;
   */
  location?: LatLng;

  /**
   * The index into the original path of the equivalent pre-snapped point.
   * This allows for identification of points which have been interpolated if
   * this index is missing.
   *
   * @generated from field: google.protobuf.UInt32Value original_index = 2;
   */
  originalIndex?: number;

  /**
   * The place ID for this snapped location (road segment). These are the same
   * as are currently used by the Places API.
   *
   * @generated from field: string place_id = 3;
   */
  placeId: string;
};

/**
 * Describes the message google.maps.roads.v1op.SnappedPoint.
 * Use `create(SnappedPointSchema)` to create a new message.
 */
export const SnappedPointSchema: GenMessage<SnappedPoint> = /*@__PURE__*/
  messageDesc(file_google_maps_roads_v1op_roads, 1);

/**
 * The response from the SnapToRoads method, returning a sequence of snapped
 * points.
 *
 * @generated from message google.maps.roads.v1op.SnapToRoadsResponse
 */
export type SnapToRoadsResponse = Message<"google.maps.roads.v1op.SnapToRoadsResponse"> & {
  /**
   * A list of snapped points.
   *
   * @generated from field: repeated google.maps.roads.v1op.SnappedPoint snapped_points = 1;
   */
  snappedPoints: SnappedPoint[];

  /**
   * User-visible warning message, if any, which can be shown alongside a valid
   * result.
   *
   * @generated from field: string warning_message = 2;
   */
  warningMessage: string;
};

/**
 * Describes the message google.maps.roads.v1op.SnapToRoadsResponse.
 * Use `create(SnapToRoadsResponseSchema)` to create a new message.
 */
export const SnapToRoadsResponseSchema: GenMessage<SnapToRoadsResponse> = /*@__PURE__*/
  messageDesc(file_google_maps_roads_v1op_roads, 2);

/**
 * A request to the ListNearestRoads method, requesting that a sequence of
 * points be snapped individually to the road segment that each is closest to.
 *
 * @generated from message google.maps.roads.v1op.ListNearestRoadsRequest
 */
export type ListNearestRoadsRequest = Message<"google.maps.roads.v1op.ListNearestRoadsRequest"> & {
  /**
   * The points to be snapped as a series of lat, lng points. Specified as
   * a string of the format: lat,lng|lat,lng|...
   *
   * @generated from field: string points = 1;
   */
  points: string;

  /**
   * The type of travel being tracked. This will constrain the roads we snap to.
   *
   * @generated from field: google.maps.roads.v1op.TravelMode travel_mode = 2;
   */
  travelMode: TravelMode;
};

/**
 * Describes the message google.maps.roads.v1op.ListNearestRoadsRequest.
 * Use `create(ListNearestRoadsRequestSchema)` to create a new message.
 */
export const ListNearestRoadsRequestSchema: GenMessage<ListNearestRoadsRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_roads_v1op_roads, 3);

/**
 * The response from the ListNearestRoads method, returning a list of snapped
 * points.
 *
 * @generated from message google.maps.roads.v1op.ListNearestRoadsResponse
 */
export type ListNearestRoadsResponse = Message<"google.maps.roads.v1op.ListNearestRoadsResponse"> & {
  /**
   * A list of snapped points.
   *
   * @generated from field: repeated google.maps.roads.v1op.SnappedPoint snapped_points = 1;
   */
  snappedPoints: SnappedPoint[];
};

/**
 * Describes the message google.maps.roads.v1op.ListNearestRoadsResponse.
 * Use `create(ListNearestRoadsResponseSchema)` to create a new message.
 */
export const ListNearestRoadsResponseSchema: GenMessage<ListNearestRoadsResponse> = /*@__PURE__*/
  messageDesc(file_google_maps_roads_v1op_roads, 4);

/**
 * An enum representing the mode of travel used for snapping.
 *
 * @generated from enum google.maps.roads.v1op.TravelMode
 */
export enum TravelMode {
  /**
   * @generated from enum value: TRAVEL_MODE_UNSPECIFIED = 0;
   */
  TRAVEL_MODE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DRIVING = 1;
   */
  DRIVING = 1,

  /**
   * @generated from enum value: CYCLING = 2;
   */
  CYCLING = 2,

  /**
   * @generated from enum value: WALKING = 3;
   */
  WALKING = 3,
}

/**
 * Describes the enum google.maps.roads.v1op.TravelMode.
 */
export const TravelModeSchema: GenEnum<TravelMode> = /*@__PURE__*/
  enumDesc(file_google_maps_roads_v1op_roads, 0);

/**
 * The Roads API maps one or more GPS coordinates to the geometry of the road
 * and determines the speed limit along road segments.
 *
 * @generated from service google.maps.roads.v1op.RoadsService
 */
export const RoadsService: GenService<{
  /**
   * This method takes a sequence of latitude,longitude points and snaps them to
   * the most likely road segments. Optionally returns additional points giving
   * the full road geometry. Also returns a place ID for each snapped point.
   *
   * @generated from rpc google.maps.roads.v1op.RoadsService.SnapToRoads
   */
  snapToRoads: {
    methodKind: "unary";
    input: typeof SnapToRoadsRequestSchema;
    output: typeof SnapToRoadsResponseSchema;
  },
  /**
   * This method takes a list of latitude,longitude points and snaps them each
   * to their nearest road. Also returns a place ID for each snapped point.
   *
   * @generated from rpc google.maps.roads.v1op.RoadsService.ListNearestRoads
   */
  listNearestRoads: {
    methodKind: "unary";
    input: typeof ListNearestRoadsRequestSchema;
    output: typeof ListNearestRoadsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_maps_roads_v1op_roads, 0);

