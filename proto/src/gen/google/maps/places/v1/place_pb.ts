// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/places/v1/place.proto (package google.maps.places.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Viewport } from "../../../geo/type/viewport_pb";
import { file_google_geo_type_viewport } from "../../../geo/type/viewport_pb";
import type { ContentBlock } from "./content_block_pb";
import { file_google_maps_places_v1_content_block } from "./content_block_pb";
import type { EVChargeOptions } from "./ev_charging_pb";
import { file_google_maps_places_v1_ev_charging } from "./ev_charging_pb";
import type { FuelOptions } from "./fuel_options_pb";
import { file_google_maps_places_v1_fuel_options } from "./fuel_options_pb";
import type { Photo } from "./photo_pb";
import { file_google_maps_places_v1_photo } from "./photo_pb";
import type { References } from "./reference_pb";
import { file_google_maps_places_v1_reference } from "./reference_pb";
import type { Review } from "./review_pb";
import { file_google_maps_places_v1_review } from "./review_pb";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { LocalizedText } from "../../../type/localized_text_pb";
import { file_google_type_localized_text } from "../../../type/localized_text_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/places/v1/place.proto.
 */
export const file_google_maps_places_v1_place: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_resource, file_google_geo_type_viewport, file_google_maps_places_v1_content_block, file_google_maps_places_v1_ev_charging, file_google_maps_places_v1_fuel_options, file_google_maps_places_v1_photo, file_google_maps_places_v1_reference, file_google_maps_places_v1_review, file_google_type_date, file_google_type_latlng, file_google_type_localized_text]);

/**
 * All the information representing a Place.
 *
 * @generated from message google.maps.places.v1.Place
 */
export type Place = Message<"google.maps.places.v1.Place"> & {
  /**
   * This Place's resource name, in `places/{place_id}` format.  Can be used to
   * look up the Place.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The unique identifier of a place.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The localized name of the place, suitable as a short human-readable
   * description. For example, "Google Sydney", "Starbucks", "Pyrmont", etc.
   *
   * @generated from field: google.type.LocalizedText display_name = 31;
   */
  displayName?: LocalizedText;

  /**
   * A set of type tags for this result. For example, "political" and
   * "locality". For the complete list of possible values, see Table A and Table
   * B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   *
   * @generated from field: repeated string types = 5;
   */
  types: string[];

  /**
   * The primary type of the given result. This type must one of the Places API
   * supported types. For example, "restaurant", "cafe", "airport", etc.  A
   * place can only have a single primary type.  For the complete list of
   * possible values, see Table A and Table B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   *
   * @generated from field: string primary_type = 50;
   */
  primaryType: string;

  /**
   * The display name of the primary type, localized to the request language if
   * applicable. For the complete list of possible values, see Table A and Table
   * B at
   * https://developers.google.com/maps/documentation/places/web-service/place-types
   *
   * @generated from field: google.type.LocalizedText primary_type_display_name = 32;
   */
  primaryTypeDisplayName?: LocalizedText;

  /**
   * A human-readable phone number for the place, in national format.
   *
   * @generated from field: string national_phone_number = 7;
   */
  nationalPhoneNumber: string;

  /**
   * A human-readable phone number for the place, in international format.
   *
   * @generated from field: string international_phone_number = 8;
   */
  internationalPhoneNumber: string;

  /**
   * A full, human-readable address for this place.
   *
   * @generated from field: string formatted_address = 9;
   */
  formattedAddress: string;

  /**
   * A short, human-readable address for this place.
   *
   * @generated from field: string short_formatted_address = 51;
   */
  shortFormattedAddress: string;

  /**
   * Repeated components for each locality level.
   * Note the following facts about the address_components[] array:
   * - The array of address components may contain more components than the
   * formatted_address.
   * - The array does not necessarily include all the political entities that
   * contain an address, apart from those included in the formatted_address. To
   * retrieve all the political entities that contain a specific address, you
   * should use reverse geocoding, passing the latitude/longitude of the address
   * as a parameter to the request.
   * - The format of the response is not guaranteed to remain the same between
   * requests. In particular, the number of address_components varies based on
   * the address requested and can change over time for the same address. A
   * component can change position in the array. The type of the component can
   * change. A particular component may be missing in a later response.
   *
   * @generated from field: repeated google.maps.places.v1.Place.AddressComponent address_components = 10;
   */
  addressComponents: Place_AddressComponent[];

  /**
   * Plus code of the place location lat/long.
   *
   * @generated from field: google.maps.places.v1.Place.PlusCode plus_code = 11;
   */
  plusCode?: Place_PlusCode;

  /**
   * The position of this place.
   *
   * @generated from field: google.type.LatLng location = 12;
   */
  location?: LatLng;

  /**
   * A viewport suitable for displaying the place on an average-sized map.
   *
   * @generated from field: google.geo.type.Viewport viewport = 13;
   */
  viewport?: Viewport;

  /**
   * A rating between 1.0 and 5.0, based on user reviews of this place.
   *
   * @generated from field: double rating = 14;
   */
  rating: number;

  /**
   * A URL providing more information about this place.
   *
   * @generated from field: string google_maps_uri = 15;
   */
  googleMapsUri: string;

  /**
   * The authoritative website for this place, e.g. a business' homepage.
   * Note that for places that are part of a chain (e.g. an IKEA store), this
   * will usually be the website for the individual store, not the overall
   * chain.
   *
   * @generated from field: string website_uri = 16;
   */
  websiteUri: string;

  /**
   * List of reviews about this place, sorted by relevance. A maximum of 5
   * reviews can be returned.
   *
   * @generated from field: repeated google.maps.places.v1.Review reviews = 53;
   */
  reviews: Review[];

  /**
   * The regular hours of operation.
   *
   * @generated from field: google.maps.places.v1.Place.OpeningHours regular_opening_hours = 21;
   */
  regularOpeningHours?: Place_OpeningHours;

  /**
   * Number of minutes this place's timezone is currently offset from UTC.
   * This is expressed in minutes to support timezones that are offset by
   * fractions of an hour, e.g. X hours and 15 minutes.
   *
   * @generated from field: optional int32 utc_offset_minutes = 22;
   */
  utcOffsetMinutes?: number;

  /**
   * Information (including references) about photos of this place. A maximum of
   * 10 photos can be returned.
   *
   * @generated from field: repeated google.maps.places.v1.Photo photos = 54;
   */
  photos: Photo[];

  /**
   * The place's address in adr microformat: http://microformats.org/wiki/adr.
   *
   * @generated from field: string adr_format_address = 24;
   */
  adrFormatAddress: string;

  /**
   * The business status for the place.
   *
   * @generated from field: google.maps.places.v1.Place.BusinessStatus business_status = 25;
   */
  businessStatus: Place_BusinessStatus;

  /**
   * Price level of the place.
   *
   * @generated from field: google.maps.places.v1.PriceLevel price_level = 26;
   */
  priceLevel: PriceLevel;

  /**
   * A set of data provider that must be shown with this result.
   *
   * @generated from field: repeated google.maps.places.v1.Place.Attribution attributions = 27;
   */
  attributions: Place_Attribution[];

  /**
   * The total number of reviews (with or without text) for this place.
   *
   * @generated from field: optional int32 user_rating_count = 28;
   */
  userRatingCount?: number;

  /**
   * A truncated URL to an icon mask. User can access different icon type by
   * appending type suffix to the end (eg, ".svg" or ".png").
   *
   * @generated from field: string icon_mask_base_uri = 29;
   */
  iconMaskBaseUri: string;

  /**
   * Background color for icon_mask in hex format, e.g. #909CE1.
   *
   * @generated from field: string icon_background_color = 30;
   */
  iconBackgroundColor: string;

  /**
   * Specifies if the business supports takeout.
   *
   * @generated from field: optional bool takeout = 33;
   */
  takeout?: boolean;

  /**
   * Specifies if the business supports delivery.
   *
   * @generated from field: optional bool delivery = 34;
   */
  delivery?: boolean;

  /**
   * Specifies if the business supports indoor or outdoor seating options.
   *
   * @generated from field: optional bool dine_in = 35;
   */
  dineIn?: boolean;

  /**
   * Specifies if the business supports curbside pickup.
   *
   * @generated from field: optional bool curbside_pickup = 36;
   */
  curbsidePickup?: boolean;

  /**
   * Specifies if the place supports reservations.
   *
   * @generated from field: optional bool reservable = 38;
   */
  reservable?: boolean;

  /**
   * Specifies if the place serves breakfast.
   *
   * @generated from field: optional bool serves_breakfast = 39;
   */
  servesBreakfast?: boolean;

  /**
   * Specifies if the place serves lunch.
   *
   * @generated from field: optional bool serves_lunch = 40;
   */
  servesLunch?: boolean;

  /**
   * Specifies if the place serves dinner.
   *
   * @generated from field: optional bool serves_dinner = 41;
   */
  servesDinner?: boolean;

  /**
   * Specifies if the place serves beer.
   *
   * @generated from field: optional bool serves_beer = 42;
   */
  servesBeer?: boolean;

  /**
   * Specifies if the place serves wine.
   *
   * @generated from field: optional bool serves_wine = 43;
   */
  servesWine?: boolean;

  /**
   * Specifies if the place serves brunch.
   *
   * @generated from field: optional bool serves_brunch = 44;
   */
  servesBrunch?: boolean;

  /**
   * Specifies if the place serves vegetarian food.
   *
   * @generated from field: optional bool serves_vegetarian_food = 45;
   */
  servesVegetarianFood?: boolean;

  /**
   * The hours of operation for the next seven days (including today). The time
   * period starts at midnight on the date of the request and ends at 11:59 pm
   * six days later. This field includes the special_days subfield of all hours,
   * set for dates that have exceptional hours.
   *
   * @generated from field: google.maps.places.v1.Place.OpeningHours current_opening_hours = 46;
   */
  currentOpeningHours?: Place_OpeningHours;

  /**
   * Contains an array of entries for the next seven days including information
   * about secondary hours of a business. Secondary hours are different from a
   * business's main hours. For example, a restaurant can specify drive through
   * hours or delivery hours as its secondary hours. This field populates the
   * type subfield, which draws from a predefined list of opening hours types
   * (such as DRIVE_THROUGH, PICKUP, or TAKEOUT) based on the types of the
   * place. This field includes the special_days subfield of all hours, set for
   * dates that have exceptional hours.
   *
   * @generated from field: repeated google.maps.places.v1.Place.OpeningHours current_secondary_opening_hours = 47;
   */
  currentSecondaryOpeningHours: Place_OpeningHours[];

  /**
   * Contains an array of entries for information about regular secondary hours
   * of a business. Secondary hours are different from a business's main hours.
   * For example, a restaurant can specify drive through hours or delivery hours
   * as its secondary hours. This field populates the type subfield, which draws
   * from a predefined list of opening hours types (such as DRIVE_THROUGH,
   * PICKUP, or TAKEOUT) based on the types of the place.
   *
   * @generated from field: repeated google.maps.places.v1.Place.OpeningHours regular_secondary_opening_hours = 49;
   */
  regularSecondaryOpeningHours: Place_OpeningHours[];

  /**
   * Contains a summary of the place. A summary is comprised of a textual
   * overview, and also includes the language code for these if applicable.
   * Summary text must be presented as-is and can not be modified or altered.
   *
   * @generated from field: google.type.LocalizedText editorial_summary = 52;
   */
  editorialSummary?: LocalizedText;

  /**
   * Place provides outdoor seating.
   *
   * @generated from field: optional bool outdoor_seating = 55;
   */
  outdoorSeating?: boolean;

  /**
   * Place provides live music.
   *
   * @generated from field: optional bool live_music = 56;
   */
  liveMusic?: boolean;

  /**
   * Place has a children's menu.
   *
   * @generated from field: optional bool menu_for_children = 57;
   */
  menuForChildren?: boolean;

  /**
   * Place serves cocktails.
   *
   * @generated from field: optional bool serves_cocktails = 58;
   */
  servesCocktails?: boolean;

  /**
   * Place serves dessert.
   *
   * @generated from field: optional bool serves_dessert = 59;
   */
  servesDessert?: boolean;

  /**
   * Place serves coffee.
   *
   * @generated from field: optional bool serves_coffee = 60;
   */
  servesCoffee?: boolean;

  /**
   * Place is good for children.
   *
   * @generated from field: optional bool good_for_children = 62;
   */
  goodForChildren?: boolean;

  /**
   * Place allows dogs.
   *
   * @generated from field: optional bool allows_dogs = 63;
   */
  allowsDogs?: boolean;

  /**
   * Place has restroom.
   *
   * @generated from field: optional bool restroom = 64;
   */
  restroom?: boolean;

  /**
   * Place accommodates groups.
   *
   * @generated from field: optional bool good_for_groups = 65;
   */
  goodForGroups?: boolean;

  /**
   * Place is suitable for watching sports.
   *
   * @generated from field: optional bool good_for_watching_sports = 66;
   */
  goodForWatchingSports?: boolean;

  /**
   * Payment options the place accepts. If a payment option data is not
   * available, the payment option field will be unset.
   *
   * @generated from field: google.maps.places.v1.Place.PaymentOptions payment_options = 67;
   */
  paymentOptions?: Place_PaymentOptions;

  /**
   * Options of parking provided by the place.
   *
   * @generated from field: google.maps.places.v1.Place.ParkingOptions parking_options = 70;
   */
  parkingOptions?: Place_ParkingOptions;

  /**
   * A list of sub destinations related to the place.
   *
   * @generated from field: repeated google.maps.places.v1.Place.SubDestination sub_destinations = 71;
   */
  subDestinations: Place_SubDestination[];

  /**
   * Information about the accessibility options a place offers.
   *
   * @generated from field: optional google.maps.places.v1.Place.AccessibilityOptions accessibility_options = 72;
   */
  accessibilityOptions?: Place_AccessibilityOptions;

  /**
   * The most recent information about fuel options in a gas station. This
   * information is updated regularly.
   *
   * @generated from field: google.maps.places.v1.FuelOptions fuel_options = 78;
   */
  fuelOptions?: FuelOptions;

  /**
   * Information of ev charging options.
   *
   * @generated from field: google.maps.places.v1.EVChargeOptions ev_charge_options = 79;
   */
  evChargeOptions?: EVChargeOptions;

  /**
   * Experimental: See
   * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
   * for more details.
   *
   * AI-generated summary of the place.
   *
   * @generated from field: google.maps.places.v1.Place.GenerativeSummary generative_summary = 80;
   */
  generativeSummary?: Place_GenerativeSummary;

  /**
   * Experimental: See
   * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
   * for more details.
   *
   * AI-generated summary of the area that the place is in.
   *
   * @generated from field: google.maps.places.v1.Place.AreaSummary area_summary = 81;
   */
  areaSummary?: Place_AreaSummary;
};

/**
 * Describes the message google.maps.places.v1.Place.
 * Use `create(PlaceSchema)` to create a new message.
 */
export const PlaceSchema: GenMessage<Place> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0);

/**
 * The structured components that form the formatted address, if this
 * information is available.
 *
 * @generated from message google.maps.places.v1.Place.AddressComponent
 */
export type Place_AddressComponent = Message<"google.maps.places.v1.Place.AddressComponent"> & {
  /**
   * The full text description or name of the address component. For example,
   * an address component for the country Australia may have a long_name of
   * "Australia".
   *
   * @generated from field: string long_text = 1;
   */
  longText: string;

  /**
   * An abbreviated textual name for the address component, if available. For
   * example, an address component for the country of Australia may have a
   * short_name of "AU".
   *
   * @generated from field: string short_text = 2;
   */
  shortText: string;

  /**
   * An array indicating the type(s) of the address component.
   *
   * @generated from field: repeated string types = 3;
   */
  types: string[];

  /**
   * The language used to format this components, in CLDR notation.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;
};

/**
 * Describes the message google.maps.places.v1.Place.AddressComponent.
 * Use `create(Place_AddressComponentSchema)` to create a new message.
 */
export const Place_AddressComponentSchema: GenMessage<Place_AddressComponent> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 0);

/**
 * Plus code (http://plus.codes) is a location reference with two formats:
 * global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle,
 * and compound code, replacing the prefix with a reference location.
 *
 * @generated from message google.maps.places.v1.Place.PlusCode
 */
export type Place_PlusCode = Message<"google.maps.places.v1.Place.PlusCode"> & {
  /**
   * Place's global (full) code, such as "9FWM33GV+HQ", representing an
   * 1/8000 by 1/8000 degree area (~14 by 14 meters).
   *
   * @generated from field: string global_code = 1;
   */
  globalCode: string;

  /**
   * Place's compound code, such as "33GV+HQ, Ramberg, Norway", containing
   * the suffix of the global code and replacing the prefix with a formatted
   * name of a reference entity.
   *
   * @generated from field: string compound_code = 2;
   */
  compoundCode: string;
};

/**
 * Describes the message google.maps.places.v1.Place.PlusCode.
 * Use `create(Place_PlusCodeSchema)` to create a new message.
 */
export const Place_PlusCodeSchema: GenMessage<Place_PlusCode> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 1);

/**
 * Information about business hour of the place.
 *
 * @generated from message google.maps.places.v1.Place.OpeningHours
 */
export type Place_OpeningHours = Message<"google.maps.places.v1.Place.OpeningHours"> & {
  /**
   * Whether the opening hours period is currently active. For regular opening
   * hours and current opening hours, this field means whether the place is
   * open. For secondary opening hours and current secondary opening hours,
   * this field means whether the secondary hours of this place is active.
   *
   * @generated from field: optional bool open_now = 1;
   */
  openNow?: boolean;

  /**
   * The periods that this place is open during the week. The periods are in
   * chronological order, starting with Sunday in the place-local timezone. An
   * empty (but not absent) value indicates a place that is never open, e.g.
   * because it is closed temporarily for renovations.
   *
   * @generated from field: repeated google.maps.places.v1.Place.OpeningHours.Period periods = 2;
   */
  periods: Place_OpeningHours_Period[];

  /**
   * Localized strings describing the opening hours of this place, one string
   * for each day of the week.  Will be empty if the hours are unknown or
   * could not be converted to localized text. Example: "Sun: 18:00–06:00"
   *
   * @generated from field: repeated string weekday_descriptions = 3;
   */
  weekdayDescriptions: string[];

  /**
   * A type string used to identify the type of secondary hours.
   *
   * @generated from field: google.maps.places.v1.Place.OpeningHours.SecondaryHoursType secondary_hours_type = 4;
   */
  secondaryHoursType: Place_OpeningHours_SecondaryHoursType;

  /**
   * Structured information for special days that fall within the period that
   * the returned opening hours cover. Special days are days that could impact
   * the business hours of a place, e.g. Christmas day. Set for
   * current_opening_hours and current_secondary_opening_hours if there are
   * exceptional hours.
   *
   * @generated from field: repeated google.maps.places.v1.Place.OpeningHours.SpecialDay special_days = 5;
   */
  specialDays: Place_OpeningHours_SpecialDay[];
};

/**
 * Describes the message google.maps.places.v1.Place.OpeningHours.
 * Use `create(Place_OpeningHoursSchema)` to create a new message.
 */
export const Place_OpeningHoursSchema: GenMessage<Place_OpeningHours> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 2);

/**
 * A period the place remains in open_now status.
 *
 * @generated from message google.maps.places.v1.Place.OpeningHours.Period
 */
export type Place_OpeningHours_Period = Message<"google.maps.places.v1.Place.OpeningHours.Period"> & {
  /**
   * The time that the place starts to be open.
   *
   * @generated from field: google.maps.places.v1.Place.OpeningHours.Period.Point open = 1;
   */
  open?: Place_OpeningHours_Period_Point;

  /**
   * The time that the place starts to be closed.
   *
   * @generated from field: google.maps.places.v1.Place.OpeningHours.Period.Point close = 2;
   */
  close?: Place_OpeningHours_Period_Point;
};

/**
 * Describes the message google.maps.places.v1.Place.OpeningHours.Period.
 * Use `create(Place_OpeningHours_PeriodSchema)` to create a new message.
 */
export const Place_OpeningHours_PeriodSchema: GenMessage<Place_OpeningHours_Period> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 2, 0);

/**
 * Status changing points.
 *
 * @generated from message google.maps.places.v1.Place.OpeningHours.Period.Point
 */
export type Place_OpeningHours_Period_Point = Message<"google.maps.places.v1.Place.OpeningHours.Period.Point"> & {
  /**
   * A day of the week, as an integer in the range 0-6.  0 is Sunday, 1 is
   * Monday, etc.
   *
   * @generated from field: optional int32 day = 1;
   */
  day?: number;

  /**
   * The hour in 2 digits. Ranges from 00 to 23.
   *
   * @generated from field: optional int32 hour = 2;
   */
  hour?: number;

  /**
   * The minute in 2 digits. Ranges from 00 to 59.
   *
   * @generated from field: optional int32 minute = 3;
   */
  minute?: number;

  /**
   * Date in the local timezone for the place.
   *
   * @generated from field: google.type.Date date = 6;
   */
  date?: Date;

  /**
   * Whether or not this endpoint was truncated. Truncation occurs when
   * the real hours are outside the times we are willing to return hours
   * between, so we truncate the hours back to these boundaries. This
   * ensures that at most 24 * 7 hours from midnight of the day of the
   * request are returned.
   *
   * @generated from field: bool truncated = 5;
   */
  truncated: boolean;
};

/**
 * Describes the message google.maps.places.v1.Place.OpeningHours.Period.Point.
 * Use `create(Place_OpeningHours_Period_PointSchema)` to create a new message.
 */
export const Place_OpeningHours_Period_PointSchema: GenMessage<Place_OpeningHours_Period_Point> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 2, 0, 0);

/**
 * Structured information for special days that fall within the period that
 * the returned opening hours cover. Special days are days that could impact
 * the business hours of a place, e.g. Christmas day.
 *
 * @generated from message google.maps.places.v1.Place.OpeningHours.SpecialDay
 */
export type Place_OpeningHours_SpecialDay = Message<"google.maps.places.v1.Place.OpeningHours.SpecialDay"> & {
  /**
   * The date of this special day.
   *
   * @generated from field: google.type.Date date = 1;
   */
  date?: Date;
};

/**
 * Describes the message google.maps.places.v1.Place.OpeningHours.SpecialDay.
 * Use `create(Place_OpeningHours_SpecialDaySchema)` to create a new message.
 */
export const Place_OpeningHours_SpecialDaySchema: GenMessage<Place_OpeningHours_SpecialDay> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 2, 1);

/**
 * A type used to identify the type of secondary hours.
 *
 * @generated from enum google.maps.places.v1.Place.OpeningHours.SecondaryHoursType
 */
export enum Place_OpeningHours_SecondaryHoursType {
  /**
   * Default value when secondary hour type is not specified.
   *
   * @generated from enum value: SECONDARY_HOURS_TYPE_UNSPECIFIED = 0;
   */
  SECONDARY_HOURS_TYPE_UNSPECIFIED = 0,

  /**
   * The drive-through hour for banks, restaurants, or pharmacies.
   *
   * @generated from enum value: DRIVE_THROUGH = 1;
   */
  DRIVE_THROUGH = 1,

  /**
   * The happy hour.
   *
   * @generated from enum value: HAPPY_HOUR = 2;
   */
  HAPPY_HOUR = 2,

  /**
   * The delivery hour.
   *
   * @generated from enum value: DELIVERY = 3;
   */
  DELIVERY = 3,

  /**
   * The takeout hour.
   *
   * @generated from enum value: TAKEOUT = 4;
   */
  TAKEOUT = 4,

  /**
   * The kitchen hour.
   *
   * @generated from enum value: KITCHEN = 5;
   */
  KITCHEN = 5,

  /**
   * The breakfast hour.
   *
   * @generated from enum value: BREAKFAST = 6;
   */
  BREAKFAST = 6,

  /**
   * The lunch hour.
   *
   * @generated from enum value: LUNCH = 7;
   */
  LUNCH = 7,

  /**
   * The dinner hour.
   *
   * @generated from enum value: DINNER = 8;
   */
  DINNER = 8,

  /**
   * The brunch hour.
   *
   * @generated from enum value: BRUNCH = 9;
   */
  BRUNCH = 9,

  /**
   * The pickup hour.
   *
   * @generated from enum value: PICKUP = 10;
   */
  PICKUP = 10,

  /**
   * The access hours for storage places.
   *
   * @generated from enum value: ACCESS = 11;
   */
  ACCESS = 11,

  /**
   * The special hours for seniors.
   *
   * @generated from enum value: SENIOR_HOURS = 12;
   */
  SENIOR_HOURS = 12,

  /**
   * The online service hours.
   *
   * @generated from enum value: ONLINE_SERVICE_HOURS = 13;
   */
  ONLINE_SERVICE_HOURS = 13,
}

/**
 * Describes the enum google.maps.places.v1.Place.OpeningHours.SecondaryHoursType.
 */
export const Place_OpeningHours_SecondaryHoursTypeSchema: GenEnum<Place_OpeningHours_SecondaryHoursType> = /*@__PURE__*/
  enumDesc(file_google_maps_places_v1_place, 0, 2, 0);

/**
 * Information about data providers of this place.
 *
 * @generated from message google.maps.places.v1.Place.Attribution
 */
export type Place_Attribution = Message<"google.maps.places.v1.Place.Attribution"> & {
  /**
   * Name of the Place's data provider.
   *
   * @generated from field: string provider = 1;
   */
  provider: string;

  /**
   * URI to the Place's data provider.
   *
   * @generated from field: string provider_uri = 2;
   */
  providerUri: string;
};

/**
 * Describes the message google.maps.places.v1.Place.Attribution.
 * Use `create(Place_AttributionSchema)` to create a new message.
 */
export const Place_AttributionSchema: GenMessage<Place_Attribution> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 3);

/**
 * Payment options the place accepts.
 *
 * @generated from message google.maps.places.v1.Place.PaymentOptions
 */
export type Place_PaymentOptions = Message<"google.maps.places.v1.Place.PaymentOptions"> & {
  /**
   * Place accepts credit cards as payment.
   *
   * @generated from field: optional bool accepts_credit_cards = 1;
   */
  acceptsCreditCards?: boolean;

  /**
   * Place accepts debit cards as payment.
   *
   * @generated from field: optional bool accepts_debit_cards = 2;
   */
  acceptsDebitCards?: boolean;

  /**
   * Place accepts cash only as payment. Places with this attribute may still
   * accept other payment methods.
   *
   * @generated from field: optional bool accepts_cash_only = 3;
   */
  acceptsCashOnly?: boolean;

  /**
   * Place accepts NFC payments.
   *
   * @generated from field: optional bool accepts_nfc = 4;
   */
  acceptsNfc?: boolean;
};

/**
 * Describes the message google.maps.places.v1.Place.PaymentOptions.
 * Use `create(Place_PaymentOptionsSchema)` to create a new message.
 */
export const Place_PaymentOptionsSchema: GenMessage<Place_PaymentOptions> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 4);

/**
 * Information about parking options for the place. A parking lot could
 * support more than one option at the same time.
 *
 * @generated from message google.maps.places.v1.Place.ParkingOptions
 */
export type Place_ParkingOptions = Message<"google.maps.places.v1.Place.ParkingOptions"> & {
  /**
   * Place offers free parking lots.
   *
   * @generated from field: optional bool free_parking_lot = 1;
   */
  freeParkingLot?: boolean;

  /**
   * Place offers paid parking lots.
   *
   * @generated from field: optional bool paid_parking_lot = 2;
   */
  paidParkingLot?: boolean;

  /**
   * Place offers free street parking.
   *
   * @generated from field: optional bool free_street_parking = 3;
   */
  freeStreetParking?: boolean;

  /**
   * Place offers paid street parking.
   *
   * @generated from field: optional bool paid_street_parking = 4;
   */
  paidStreetParking?: boolean;

  /**
   * Place offers valet parking.
   *
   * @generated from field: optional bool valet_parking = 5;
   */
  valetParking?: boolean;

  /**
   * Place offers free garage parking.
   *
   * @generated from field: optional bool free_garage_parking = 6;
   */
  freeGarageParking?: boolean;

  /**
   * Place offers paid garage parking.
   *
   * @generated from field: optional bool paid_garage_parking = 7;
   */
  paidGarageParking?: boolean;
};

/**
 * Describes the message google.maps.places.v1.Place.ParkingOptions.
 * Use `create(Place_ParkingOptionsSchema)` to create a new message.
 */
export const Place_ParkingOptionsSchema: GenMessage<Place_ParkingOptions> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 5);

/**
 * Place resource name and id of sub destinations that relate to the place.
 * For example, different terminals are different destinations of an airport.
 *
 * @generated from message google.maps.places.v1.Place.SubDestination
 */
export type Place_SubDestination = Message<"google.maps.places.v1.Place.SubDestination"> & {
  /**
   * The resource name of the sub destination.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The place id of the sub destination.
   *
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message google.maps.places.v1.Place.SubDestination.
 * Use `create(Place_SubDestinationSchema)` to create a new message.
 */
export const Place_SubDestinationSchema: GenMessage<Place_SubDestination> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 6);

/**
 * Information about the accessibility options a place offers.
 *
 * @generated from message google.maps.places.v1.Place.AccessibilityOptions
 */
export type Place_AccessibilityOptions = Message<"google.maps.places.v1.Place.AccessibilityOptions"> & {
  /**
   * Place offers wheelchair accessible parking.
   *
   * @generated from field: optional bool wheelchair_accessible_parking = 1;
   */
  wheelchairAccessibleParking?: boolean;

  /**
   * Places has wheelchair accessible entrance.
   *
   * @generated from field: optional bool wheelchair_accessible_entrance = 2;
   */
  wheelchairAccessibleEntrance?: boolean;

  /**
   * Place has wheelchair accessible restroom.
   *
   * @generated from field: optional bool wheelchair_accessible_restroom = 3;
   */
  wheelchairAccessibleRestroom?: boolean;

  /**
   * Place has wheelchair accessible seating.
   *
   * @generated from field: optional bool wheelchair_accessible_seating = 4;
   */
  wheelchairAccessibleSeating?: boolean;
};

/**
 * Describes the message google.maps.places.v1.Place.AccessibilityOptions.
 * Use `create(Place_AccessibilityOptionsSchema)` to create a new message.
 */
export const Place_AccessibilityOptionsSchema: GenMessage<Place_AccessibilityOptions> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 7);

/**
 * Experimental: See
 * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
 * for more details.
 *
 * AI-generated summary of the place.
 *
 * @generated from message google.maps.places.v1.Place.GenerativeSummary
 */
export type Place_GenerativeSummary = Message<"google.maps.places.v1.Place.GenerativeSummary"> & {
  /**
   * The overview of the place.
   *
   * @generated from field: google.type.LocalizedText overview = 1;
   */
  overview?: LocalizedText;

  /**
   * The detailed description of the place.
   *
   * @generated from field: google.type.LocalizedText description = 2;
   */
  description?: LocalizedText;

  /**
   * References that are used to generate the summary description.
   *
   * @generated from field: google.maps.places.v1.References references = 3;
   */
  references?: References;
};

/**
 * Describes the message google.maps.places.v1.Place.GenerativeSummary.
 * Use `create(Place_GenerativeSummarySchema)` to create a new message.
 */
export const Place_GenerativeSummarySchema: GenMessage<Place_GenerativeSummary> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 8);

/**
 * Experimental: See
 * https://developers.google.com/maps/documentation/places/web-service/experimental/places-generative
 * for more details.
 *
 * AI-generated summary of the area that the place is in.
 *
 * @generated from message google.maps.places.v1.Place.AreaSummary
 */
export type Place_AreaSummary = Message<"google.maps.places.v1.Place.AreaSummary"> & {
  /**
   * Content blocks that compose the area summary. Each block has a separate
   * topic about the area.
   *
   * @generated from field: repeated google.maps.places.v1.ContentBlock content_blocks = 4;
   */
  contentBlocks: ContentBlock[];
};

/**
 * Describes the message google.maps.places.v1.Place.AreaSummary.
 * Use `create(Place_AreaSummarySchema)` to create a new message.
 */
export const Place_AreaSummarySchema: GenMessage<Place_AreaSummary> = /*@__PURE__*/
  messageDesc(file_google_maps_places_v1_place, 0, 9);

/**
 * Business status for the place.
 *
 * @generated from enum google.maps.places.v1.Place.BusinessStatus
 */
export enum Place_BusinessStatus {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: BUSINESS_STATUS_UNSPECIFIED = 0;
   */
  BUSINESS_STATUS_UNSPECIFIED = 0,

  /**
   * The establishment is operational, not necessarily open now.
   *
   * @generated from enum value: OPERATIONAL = 1;
   */
  OPERATIONAL = 1,

  /**
   * The establishment is temporarily closed.
   *
   * @generated from enum value: CLOSED_TEMPORARILY = 2;
   */
  CLOSED_TEMPORARILY = 2,

  /**
   * The establishment is permanently closed.
   *
   * @generated from enum value: CLOSED_PERMANENTLY = 3;
   */
  CLOSED_PERMANENTLY = 3,
}

/**
 * Describes the enum google.maps.places.v1.Place.BusinessStatus.
 */
export const Place_BusinessStatusSchema: GenEnum<Place_BusinessStatus> = /*@__PURE__*/
  enumDesc(file_google_maps_places_v1_place, 0, 0);

/**
 * Price level of the place.
 *
 * @generated from enum google.maps.places.v1.PriceLevel
 */
export enum PriceLevel {
  /**
   * Place price level is unspecified or unknown.
   *
   * @generated from enum value: PRICE_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Place provides free services.
   *
   * @generated from enum value: PRICE_LEVEL_FREE = 1;
   */
  FREE = 1,

  /**
   * Place provides inexpensive services.
   *
   * @generated from enum value: PRICE_LEVEL_INEXPENSIVE = 2;
   */
  INEXPENSIVE = 2,

  /**
   * Place provides moderately priced services.
   *
   * @generated from enum value: PRICE_LEVEL_MODERATE = 3;
   */
  MODERATE = 3,

  /**
   * Place provides expensive services.
   *
   * @generated from enum value: PRICE_LEVEL_EXPENSIVE = 4;
   */
  EXPENSIVE = 4,

  /**
   * Place provides very expensive services.
   *
   * @generated from enum value: PRICE_LEVEL_VERY_EXPENSIVE = 5;
   */
  VERY_EXPENSIVE = 5,
}

/**
 * Describes the enum google.maps.places.v1.PriceLevel.
 */
export const PriceLevelSchema: GenEnum<PriceLevel> = /*@__PURE__*/
  enumDesc(file_google_maps_places_v1_place, 0);

