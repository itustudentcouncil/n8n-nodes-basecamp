// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/addressvalidation/v1/geocode.proto (package google.maps.addressvalidation.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Viewport } from "../../../geo/type/viewport_pb";
import { file_google_geo_type_viewport } from "../../../geo/type/viewport_pb";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/addressvalidation/v1/geocode.proto.
 */
export const file_google_maps_addressvalidation_v1_geocode: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvbWFwcy9hZGRyZXNzdmFsaWRhdGlvbi92MS9nZW9jb2RlLnByb3RvEiBnb29nbGUubWFwcy5hZGRyZXNzdmFsaWRhdGlvbi52MSLeAQoHR2VvY29kZRIlCghsb2NhdGlvbhgBIAEoCzITLmdvb2dsZS50eXBlLkxhdExuZxI9CglwbHVzX2NvZGUYAiABKAsyKi5nb29nbGUubWFwcy5hZGRyZXNzdmFsaWRhdGlvbi52MS5QbHVzQ29kZRIpCgZib3VuZHMYBCABKAsyGS5nb29nbGUuZ2VvLnR5cGUuVmlld3BvcnQSGwoTZmVhdHVyZV9zaXplX21ldGVycxgFIAEoAhIQCghwbGFjZV9pZBgGIAEoCRITCgtwbGFjZV90eXBlcxgHIAMoCSI2CghQbHVzQ29kZRITCgtnbG9iYWxfY29kZRgBIAEoCRIVCg1jb21wb3VuZF9jb2RlGAIgASgJQokCCiRjb20uZ29vZ2xlLm1hcHMuYWRkcmVzc3ZhbGlkYXRpb24udjFCDEdlb2NvZGVQcm90b1ABWlhjbG91ZC5nb29nbGUuY29tL2dvL21hcHMvYWRkcmVzc3ZhbGlkYXRpb24vYXBpdjEvYWRkcmVzc3ZhbGlkYXRpb25wYjthZGRyZXNzdmFsaWRhdGlvbnBi+AEBogIHR01QQVZWMaoCIEdvb2dsZS5NYXBzLkFkZHJlc3NWYWxpZGF0aW9uLlYxygIgR29vZ2xlXE1hcHNcQWRkcmVzc1ZhbGlkYXRpb25cVjHqAiNHb29nbGU6Ok1hcHM6OkFkZHJlc3NWYWxpZGF0aW9uOjpWMWIGcHJvdG8z", [file_google_geo_type_viewport, file_google_type_latlng]);

/**
 * Contains information about the place the input was geocoded to.
 *
 * @generated from message google.maps.addressvalidation.v1.Geocode
 */
export type Geocode = Message<"google.maps.addressvalidation.v1.Geocode"> & {
  /**
   * The geocoded location of the input.
   *
   * Using place IDs is preferred over using addresses,
   * latitude/longitude coordinates, or plus codes. Using coordinates when
   * routing or calculating driving directions will always result in the point
   * being snapped to the road nearest to those coordinates. This may not be a
   * road that will quickly or safely lead to the destination and may not be
   * near an access point to the property. Additionally, when a location is
   * reverse geocoded, there is no guarantee that the returned address will
   * match the original.
   *
   * @generated from field: google.type.LatLng location = 1;
   */
  location?: LatLng;

  /**
   * The plus code corresponding to the `location`.
   *
   * @generated from field: google.maps.addressvalidation.v1.PlusCode plus_code = 2;
   */
  plusCode?: PlusCode;

  /**
   * The bounds of the geocoded place.
   *
   * @generated from field: google.geo.type.Viewport bounds = 4;
   */
  bounds?: Viewport;

  /**
   * The size of the geocoded place, in meters. This is another measure of the
   * coarseness of the geocoded location, but in physical size rather than in
   * semantic meaning.
   *
   * @generated from field: float feature_size_meters = 5;
   */
  featureSizeMeters: number;

  /**
   * The PlaceID of the place this input geocodes to.
   *
   * For more information about Place IDs see
   * [here](https://developers.google.com/maps/documentation/places/web-service/place-id).
   *
   * @generated from field: string place_id = 6;
   */
  placeId: string;

  /**
   * The type(s) of place that the input geocoded to. For example,
   * `['locality', 'political']`. The full list of types can be found
   * [here](https://developers.google.com/maps/documentation/geocoding/requests-geocoding#Types).
   *
   * @generated from field: repeated string place_types = 7;
   */
  placeTypes: string[];
};

/**
 * Describes the message google.maps.addressvalidation.v1.Geocode.
 * Use `create(GeocodeSchema)` to create a new message.
 */
export const GeocodeSchema: GenMessage<Geocode> = /*@__PURE__*/
  messageDesc(file_google_maps_addressvalidation_v1_geocode, 0);

/**
 * Plus code (http://plus.codes) is a location reference with two formats:
 * global code defining a 14mx14m (1/8000th of a degree) or smaller rectangle,
 * and compound code, replacing the prefix with a reference location.
 *
 * @generated from message google.maps.addressvalidation.v1.PlusCode
 */
export type PlusCode = Message<"google.maps.addressvalidation.v1.PlusCode"> & {
  /**
   * Place's global (full) code, such as "9FWM33GV+HQ", representing an
   * 1/8000 by 1/8000 degree area (~14 by 14 meters).
   *
   * @generated from field: string global_code = 1;
   */
  globalCode: string;

  /**
   * Place's compound code, such as "33GV+HQ, Ramberg, Norway", containing
   * the suffix of the global code and replacing the prefix with a formatted
   * name of a reference entity.
   *
   * @generated from field: string compound_code = 2;
   */
  compoundCode: string;
};

/**
 * Describes the message google.maps.addressvalidation.v1.PlusCode.
 * Use `create(PlusCodeSchema)` to create a new message.
 */
export const PlusCodeSchema: GenMessage<PlusCode> = /*@__PURE__*/
  messageDesc(file_google_maps_addressvalidation_v1_geocode, 1);

