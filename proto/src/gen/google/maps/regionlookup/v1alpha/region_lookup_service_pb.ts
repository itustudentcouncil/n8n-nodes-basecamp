// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/regionlookup/v1alpha/region_lookup_service.proto (package google.maps.regionlookup.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { RegionIdentifier } from "./region_identifier_pb";
import { file_google_maps_regionlookup_v1alpha_region_identifier } from "./region_identifier_pb";
import type { RegionMatch } from "./region_match_pb";
import { file_google_maps_regionlookup_v1alpha_region_match } from "./region_match_pb";
import type { RegionSearchValue } from "./region_search_values_pb";
import { file_google_maps_regionlookup_v1alpha_region_search_values } from "./region_search_values_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/regionlookup/v1alpha/region_lookup_service.proto.
 */
export const file_google_maps_regionlookup_v1alpha_region_lookup_service: GenFile = /*@__PURE__*/
  fileDesc("Cjxnb29nbGUvbWFwcy9yZWdpb25sb29rdXAvdjFhbHBoYS9yZWdpb25fbG9va3VwX3NlcnZpY2UucHJvdG8SIGdvb2dsZS5tYXBzLnJlZ2lvbmxvb2t1cC52MWFscGhhIoUBChNMb29rdXBSZWdpb25SZXF1ZXN0EkcKC2lkZW50aWZpZXJzGAEgAygLMjIuZ29vZ2xlLm1hcHMucmVnaW9ubG9va3VwLnYxYWxwaGEuUmVnaW9uSWRlbnRpZmllchIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCSJvChRMb29rdXBSZWdpb25SZXNwb25zZRI+CgdtYXRjaGVzGAEgAygLMi0uZ29vZ2xlLm1hcHMucmVnaW9ubG9va3VwLnYxYWxwaGEuUmVnaW9uTWF0Y2gSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIogBChNTZWFyY2hSZWdpb25SZXF1ZXN0EkoKDXNlYXJjaF92YWx1ZXMYASADKAsyMy5nb29nbGUubWFwcy5yZWdpb25sb29rdXAudjFhbHBoYS5SZWdpb25TZWFyY2hWYWx1ZRIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCSJvChRTZWFyY2hSZWdpb25SZXNwb25zZRI+CgdtYXRjaGVzGAEgAygLMi0uZ29vZ2xlLm1hcHMucmVnaW9ubG9va3VwLnYxYWxwaGEuUmVnaW9uTWF0Y2gSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJMvICCgxSZWdpb25Mb29rdXASnwEKDExvb2t1cFJlZ2lvbhI1Lmdvb2dsZS5tYXBzLnJlZ2lvbmxvb2t1cC52MWFscGhhLkxvb2t1cFJlZ2lvblJlcXVlc3QaNi5nb29nbGUubWFwcy5yZWdpb25sb29rdXAudjFhbHBoYS5Mb29rdXBSZWdpb25SZXNwb25zZSIggtPkkwIaOgEqIhUvdjFhbHBoYTpsb29rdXBSZWdpb24SnwEKDFNlYXJjaFJlZ2lvbhI1Lmdvb2dsZS5tYXBzLnJlZ2lvbmxvb2t1cC52MWFscGhhLlNlYXJjaFJlZ2lvblJlcXVlc3QaNi5nb29nbGUubWFwcy5yZWdpb25sb29rdXAudjFhbHBoYS5TZWFyY2hSZWdpb25SZXNwb25zZSIggtPkkwIaOgEqIhUvdjFhbHBoYTpzZWFyY2hSZWdpb24aHspBG3JlZ2lvbmxvb2t1cC5nb29nbGVhcGlzLmNvbULkAQokY29tLmdvb2dsZS5tYXBzLnJlZ2lvbmxvb2t1cC52MWFscGhhQhhSZWdpb25Mb29rdXBTZXJ2aWNlUHJvdG9QAVpOY2xvdWQuZ29vZ2xlLmNvbS9nby9tYXBzL3JlZ2lvbmxvb2t1cC9hcGl2MWFscGhhL3JlZ2lvbmxvb2t1cHBiO3JlZ2lvbmxvb2t1cHBi+AEBogIGTVJMVjFBqgIgR29vZ2xlLk1hcHMuUmVnaW9uTG9va3VwLlYxQWxwaGHKAiBHb29nbGVcTWFwc1xSZWdpb25Mb29rdXBcVjFhbHBoYWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_maps_regionlookup_v1alpha_region_identifier, file_google_maps_regionlookup_v1alpha_region_match, file_google_maps_regionlookup_v1alpha_region_search_values]);

/**
 * Lookup Region Request.
 *
 * Next available tag: 4
 *
 * @generated from message google.maps.regionlookup.v1alpha.LookupRegionRequest
 */
export type LookupRegionRequest = Message<"google.maps.regionlookup.v1alpha.LookupRegionRequest"> & {
  /**
   * Each `RegionIdentifier` represents the desired fields used to lookup a
   * single region. See `RegionIdentifier` proto for more details and examples.
   *
   * @generated from field: repeated google.maps.regionlookup.v1alpha.RegionIdentifier identifiers = 1;
   */
  identifiers: RegionIdentifier[];

  /**
   * The maximum number of matches to return. The service may return fewer than
   * this value.
   *
   * If unspecified, at most 50 matches will be returned. The maximum value is
   * 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `LookupRegion` call. Provide this to
   * retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `LookupRegion` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.maps.regionlookup.v1alpha.LookupRegionRequest.
 * Use `create(LookupRegionRequestSchema)` to create a new message.
 */
export const LookupRegionRequestSchema: GenMessage<LookupRegionRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_regionlookup_v1alpha_region_lookup_service, 0);

/**
 * Lookup Region Response.
 *
 * Next available tag: 3
 *
 * @generated from message google.maps.regionlookup.v1alpha.LookupRegionResponse
 */
export type LookupRegionResponse = Message<"google.maps.regionlookup.v1alpha.LookupRegionResponse"> & {
  /**
   * Lookup region matches, one for each `RegionIdentifier` in
   * `LookupRegionRequest.identifiers`.
   *
   * @generated from field: repeated google.maps.regionlookup.v1alpha.RegionMatch matches = 1;
   */
  matches: RegionMatch[];

  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.maps.regionlookup.v1alpha.LookupRegionResponse.
 * Use `create(LookupRegionResponseSchema)` to create a new message.
 */
export const LookupRegionResponseSchema: GenMessage<LookupRegionResponse> = /*@__PURE__*/
  messageDesc(file_google_maps_regionlookup_v1alpha_region_lookup_service, 1);

/**
 * Search Region Request.
 *
 * Next available tag: 4
 *
 * @generated from message google.maps.regionlookup.v1alpha.SearchRegionRequest
 */
export type SearchRegionRequest = Message<"google.maps.regionlookup.v1alpha.SearchRegionRequest"> & {
  /**
   * Each value represents desired search values of a single region to match.
   * The API tries to match them to Place IDs. See `RegionSearchValue`
   * proto for more info and examples.
   *
   * @generated from field: repeated google.maps.regionlookup.v1alpha.RegionSearchValue search_values = 1;
   */
  searchValues: RegionSearchValue[];

  /**
   * The maximum number of matches to return. The service may return fewer than
   * this value.
   *
   * If unspecified, at most 50 matches will be returned. The maximum value is
   * 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `SearchRegion` call. Provide this to
   * retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `LookupRegion` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.maps.regionlookup.v1alpha.SearchRegionRequest.
 * Use `create(SearchRegionRequestSchema)` to create a new message.
 */
export const SearchRegionRequestSchema: GenMessage<SearchRegionRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_regionlookup_v1alpha_region_lookup_service, 2);

/**
 * Match Region Response.
 *
 * Next available tag: 3
 *
 * @generated from message google.maps.regionlookup.v1alpha.SearchRegionResponse
 */
export type SearchRegionResponse = Message<"google.maps.regionlookup.v1alpha.SearchRegionResponse"> & {
  /**
   * Search region matches, one for each `RegionSearchValue` in
   * `SearchRegionRequest.search_values`.
   *
   * @generated from field: repeated google.maps.regionlookup.v1alpha.RegionMatch matches = 1;
   */
  matches: RegionMatch[];

  /**
   * A token that can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.maps.regionlookup.v1alpha.SearchRegionResponse.
 * Use `create(SearchRegionResponseSchema)` to create a new message.
 */
export const SearchRegionResponseSchema: GenMessage<SearchRegionResponse> = /*@__PURE__*/
  messageDesc(file_google_maps_regionlookup_v1alpha_region_lookup_service, 3);

/**
 * Service definition for the Region Lookup API.
 *
 * @generated from service google.maps.regionlookup.v1alpha.RegionLookup
 */
export const RegionLookup: GenService<{
  /**
   * Lookup region RPC.
   *
   * Looks up a set of region Place IDs of types related to geographic
   * boundaries.
   *
   * The API looks up a region Place ID using the `RegionIdentifier` proto. See
   * `RegionIdentifier` for more details and examples.
   *
   * The following region place types are supported for look up: postal_code,
   * administrative_area_level_1, administrative_area_level_2, locality,
   * neighborhood, and country.
   *
   * @generated from rpc google.maps.regionlookup.v1alpha.RegionLookup.LookupRegion
   */
  lookupRegion: {
    methodKind: "unary";
    input: typeof LookupRegionRequestSchema;
    output: typeof LookupRegionResponseSchema;
  },
  /**
   * Search region RPC.
   *
   * Searches for a set of region Place IDs of types related to geographic
   * boundaries.
   *
   * Similar to `LookupRegion` RPC but instead of looking up Place IDs for the
   * given `RegionIdentifier`, the API searches for Region Place IDs by
   * considering all regions that are contained within a specified location. The
   * `RegionSearchValue` is used to specify the search values. See
   * `RegionSearchValue` for more details and examples.
   *
   * The following region place types are supported for searching: postal_code,
   * administrative_area_level_1, administrative_area_level_2, locality,
   * neighborhood, and country.
   *
   * @generated from rpc google.maps.regionlookup.v1alpha.RegionLookup.SearchRegion
   */
  searchRegion: {
    methodKind: "unary";
    input: typeof SearchRegionRequestSchema;
    output: typeof SearchRegionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_maps_regionlookup_v1alpha_region_lookup_service, 0);

