// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/regionlookup/v1alpha/region_search_values.proto (package google.maps.regionlookup.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/regionlookup/v1alpha/region_search_values.proto.
 */
export const file_google_maps_regionlookup_v1alpha_region_search_values: GenFile = /*@__PURE__*/
  fileDesc("Cjtnb29nbGUvbWFwcy9yZWdpb25sb29rdXAvdjFhbHBoYS9yZWdpb25fc2VhcmNoX3ZhbHVlcy5wcm90bxIgZ29vZ2xlLm1hcHMucmVnaW9ubG9va3VwLnYxYWxwaGEigwQKEVJlZ2lvblNlYXJjaFZhbHVlEhEKB2FkZHJlc3MYASABKAlIABIlCgZsYXRsbmcYAiABKAsyEy5nb29nbGUudHlwZS5MYXRMbmdIABISCghwbGFjZV9pZBgDIAEoCUgAElYKCnBsYWNlX3R5cGUYBiABKA4yPS5nb29nbGUubWFwcy5yZWdpb25sb29rdXAudjFhbHBoYS5SZWdpb25TZWFyY2hWYWx1ZS5QbGFjZVR5cGVCA+BBAhIVCg1sYW5ndWFnZV9jb2RlGAcgASgJEhMKC3JlZ2lvbl9jb2RlGAggASgJIo8CCglQbGFjZVR5cGUSGgoWUExBQ0VfVFlQRV9VTlNQRUNJRklFRBAAEg8KC1BPU1RBTF9DT0RFEAESHwobQURNSU5JU1RSQVRJVkVfQVJFQV9MRVZFTF8xEAISHwobQURNSU5JU1RSQVRJVkVfQVJFQV9MRVZFTF8yEAMSDAoITE9DQUxJVFkQBBIQCgxORUlHSEJPUkhPT0QQBRILCgdDT1VOVFJZEAYSDwoLU1VCTE9DQUxJVFkQBxIfChtBRE1JTklTVFJBVElWRV9BUkVBX0xFVkVMXzMQCBIfChtBRE1JTklTVFJBVElWRV9BUkVBX0xFVkVMXzQQCRITCg9TQ0hPT0xfRElTVFJJQ1QQCkIKCghsb2NhdGlvbkLjAQokY29tLmdvb2dsZS5tYXBzLnJlZ2lvbmxvb2t1cC52MWFscGhhQhdSZWdpb25TZWFyY2hWYWx1ZXNQcm90b1ABWk5jbG91ZC5nb29nbGUuY29tL2dvL21hcHMvcmVnaW9ubG9va3VwL2FwaXYxYWxwaGEvcmVnaW9ubG9va3VwcGI7cmVnaW9ubG9va3VwcGL4AQGiAgZNUkxWMUGqAiBHb29nbGUuTWFwcy5SZWdpb25Mb29rdXAuVjFBbHBoYcoCIEdvb2dsZVxNYXBzXFJlZ2lvbkxvb2t1cFxWMWFscGhhYgZwcm90bzM", [file_google_api_field_behavior, file_google_type_latlng]);

/**
 * Region Search Values.
 *
 * Desired search values of a single region.
 *
 * Location must be specified by one of the following: address, latlng or
 * place_id. If none is specified, an INVALID_ARGUMENT error is returned.
 * region_code must also be provided when address is specified.
 *
 * The fields address, latlng and place_id specify a location contained inside
 * the region to match. For example if address is "1600 Amphitheatre Pkwy,
 * Mountain View, CA 94043" the API returns the following matched_place_id
 * results when the following place_types are specified:
 *
 * place_type:                   matched_place_id results:
 * postal_code                   Place ID for "94043"
 * administrative_area_level_1   Place ID for The State of California
 * administrative_area_level_2   Place ID for Santa Clara County
 * etc.
 *
 * More Examples:
 *
 * If latlng is "latitude: 37.4220656 longitude: -122.0862784" and place_type
 * is "locality", the result contains the Place ID (of type "locality") for
 * that location (the Place ID of Mountain View, CA, in this case).
 *
 * If place_id is "ChIJj61dQgK6j4AR4GeTYWZsKWw" (Place ID for Google office in
 * Mountain view, CA) and place_type is "locality", the result contains the
 * Place ID (of type "locality") for that location (the Place ID of Mountain
 * View, CA, in this case).
 *
 * If no match is found, matched_place_id is not set.
 *
 * Candidates Place IDs are returned when a search finds multiple Place
 * IDs for the location specified. For example if the API is searching for
 * region Place IDs of type neighboorhood for a location that is contained
 * within multiple neighboords. The Place Ids will be returned as candidates in
 * the candidate_place_ids field.
 *
 * Next available tag: 10
 *
 * @generated from message google.maps.regionlookup.v1alpha.RegionSearchValue
 */
export type RegionSearchValue = Message<"google.maps.regionlookup.v1alpha.RegionSearchValue"> & {
  /**
   * The location must be specified by one of the following:
   *
   * @generated from oneof google.maps.regionlookup.v1alpha.RegionSearchValue.location
   */
  location: {
    /**
     * The unstructured street address that is contained inside a region to
     * match. region_code is required when address is specified.
     *
     * @generated from field: string address = 1;
     */
    value: string;
    case: "address";
  } | {
    /**
     * The latitude and longitude that is contained inside a region to match.
     *
     * @generated from field: google.type.LatLng latlng = 2;
     */
    value: LatLng;
    case: "latlng";
  } | {
    /**
     * The Place ID that is contained inside a region to match.
     *
     * @generated from field: string place_id = 3;
     */
    value: string;
    case: "placeId";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The type of the place to match.
   *
   * @generated from field: google.maps.regionlookup.v1alpha.RegionSearchValue.PlaceType place_type = 6;
   */
  placeType: RegionSearchValue_PlaceType;

  /**
   * The BCP-47 language code, such as "en-US" or "sr-Latn", corresponding to
   * the language in which the place name and address is requested. If none is
   * requested, then it defaults to English.
   *
   * @generated from field: string language_code = 7;
   */
  languageCode: string;

  /**
   * Two-letter ISO-3166 country/region code for the location you're trying to
   * match. region_code is required when address is specified.
   *
   * @generated from field: string region_code = 8;
   */
  regionCode: string;
};

/**
 * Describes the message google.maps.regionlookup.v1alpha.RegionSearchValue.
 * Use `create(RegionSearchValueSchema)` to create a new message.
 */
export const RegionSearchValueSchema: GenMessage<RegionSearchValue> = /*@__PURE__*/
  messageDesc(file_google_maps_regionlookup_v1alpha_region_search_values, 0);

/**
 * Possible place types to match to.
 *
 * @generated from enum google.maps.regionlookup.v1alpha.RegionSearchValue.PlaceType
 */
export enum RegionSearchValue_PlaceType {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: PLACE_TYPE_UNSPECIFIED = 0;
   */
  PLACE_TYPE_UNSPECIFIED = 0,

  /**
   * Postal code.
   *
   * @generated from enum value: POSTAL_CODE = 1;
   */
  POSTAL_CODE = 1,

  /**
   * Administrative area level 1 (State in the US).
   *
   * @generated from enum value: ADMINISTRATIVE_AREA_LEVEL_1 = 2;
   */
  ADMINISTRATIVE_AREA_LEVEL_1 = 2,

  /**
   * Administrative area level 2 (County in the US).
   *
   * @generated from enum value: ADMINISTRATIVE_AREA_LEVEL_2 = 3;
   */
  ADMINISTRATIVE_AREA_LEVEL_2 = 3,

  /**
   * Locality (City).
   *
   * @generated from enum value: LOCALITY = 4;
   */
  LOCALITY = 4,

  /**
   * Neighborhood.
   *
   * @generated from enum value: NEIGHBORHOOD = 5;
   */
  NEIGHBORHOOD = 5,

  /**
   * Country.
   *
   * @generated from enum value: COUNTRY = 6;
   */
  COUNTRY = 6,

  /**
   * Sublocality.
   *
   * @generated from enum value: SUBLOCALITY = 7;
   */
  SUBLOCALITY = 7,

  /**
   * Administrative area level 3.
   *
   * @generated from enum value: ADMINISTRATIVE_AREA_LEVEL_3 = 8;
   */
  ADMINISTRATIVE_AREA_LEVEL_3 = 8,

  /**
   * Administrative area level 4.
   *
   * @generated from enum value: ADMINISTRATIVE_AREA_LEVEL_4 = 9;
   */
  ADMINISTRATIVE_AREA_LEVEL_4 = 9,

  /**
   * School district.
   *
   * @generated from enum value: SCHOOL_DISTRICT = 10;
   */
  SCHOOL_DISTRICT = 10,
}

/**
 * Describes the enum google.maps.regionlookup.v1alpha.RegionSearchValue.PlaceType.
 */
export const RegionSearchValue_PlaceTypeSchema: GenEnum<RegionSearchValue_PlaceType> = /*@__PURE__*/
  enumDesc(file_google_maps_regionlookup_v1alpha_region_search_values, 0, 0);

