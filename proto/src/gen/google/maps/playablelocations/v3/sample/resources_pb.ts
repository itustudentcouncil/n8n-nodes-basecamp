// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/playablelocations/v3/sample/resources.proto (package google.maps.playablelocations.v3.sample, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { LatLng } from "../../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/playablelocations/v3/sample/resources.proto.
 */
export const file_google_maps_playablelocations_v3_sample_resources: GenFile = /*@__PURE__*/
  fileDesc("Cjdnb29nbGUvbWFwcy9wbGF5YWJsZWxvY2F0aW9ucy92My9zYW1wbGUvcmVzb3VyY2VzLnByb3RvEidnb29nbGUubWFwcy5wbGF5YWJsZWxvY2F0aW9ucy52My5zYW1wbGUivgEKEFBsYXlhYmxlTG9jYXRpb24SDAoEbmFtZRgBIAEoCRISCghwbGFjZV9pZBgCIAEoCUgAEhMKCXBsdXNfY29kZRgDIAEoCUgAEg0KBXR5cGVzGAQgAygJEikKDGNlbnRlcl9wb2ludBgFIAEoCzITLmdvb2dsZS50eXBlLkxhdExuZxIqCg1zbmFwcGVkX3BvaW50GAYgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nQg0KC2xvY2F0aW9uX2lkItYBCg5TcGFjaW5nT3B0aW9ucxIfChJtaW5fc3BhY2luZ19tZXRlcnMYASABKAFCA+BBAhJVCgpwb2ludF90eXBlGAIgASgOMkEuZ29vZ2xlLm1hcHMucGxheWFibGVsb2NhdGlvbnMudjMuc2FtcGxlLlNwYWNpbmdPcHRpb25zLlBvaW50VHlwZSJMCglQb2ludFR5cGUSGgoWUE9JTlRfVFlQRV9VTlNQRUNJRklFRBAAEhAKDENFTlRFUl9QT0lOVBABEhEKDVNOQVBQRURfUE9JTlQQAiKGAQoGRmlsdGVyEhoKEm1heF9sb2NhdGlvbl9jb3VudBgBIAEoBRJICgdzcGFjaW5nGAIgASgLMjcuZ29vZ2xlLm1hcHMucGxheWFibGVsb2NhdGlvbnMudjMuc2FtcGxlLlNwYWNpbmdPcHRpb25zEhYKDmluY2x1ZGVkX3R5cGVzGAMgAygJIqEBCglDcml0ZXJpb24SHQoQZ2FtZV9vYmplY3RfdHlwZRgBIAEoBUID4EECEj8KBmZpbHRlchgCIAEoCzIvLmdvb2dsZS5tYXBzLnBsYXlhYmxlbG9jYXRpb25zLnYzLnNhbXBsZS5GaWx0ZXISNAoQZmllbGRzX3RvX3JldHVybhgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2siJQoKQXJlYUZpbHRlchIXCgpzMl9jZWxsX2lkGAEgASgGQgPgQQIiZAoUUGxheWFibGVMb2NhdGlvbkxpc3QSTAoJbG9jYXRpb25zGAEgAygLMjkuZ29vZ2xlLm1hcHMucGxheWFibGVsb2NhdGlvbnMudjMuc2FtcGxlLlBsYXlhYmxlTG9jYXRpb25CuwEKK2NvbS5nb29nbGUubWFwcy5wbGF5YWJsZWxvY2F0aW9ucy52My5zYW1wbGVCDlJlc291cmNlc1Byb3RvUAFaSWNsb3VkLmdvb2dsZS5jb20vZ28vbWFwcy9wbGF5YWJsZWxvY2F0aW9ucy9hcGl2My9zYW1wbGUvc2FtcGxlcGI7c2FtcGxlcGKiAgRHTVBMqgInR29vZ2xlLk1hcHMuUGxheWFibGVMb2NhdGlvbnMuVjMuU2FtcGxlYgZwcm90bzM", [file_google_api_field_behavior, file_google_protobuf_field_mask, file_google_type_latlng]);

/**
 * A geographical point suitable for placing game objects in location-based
 * games.
 *
 * @generated from message google.maps.playablelocations.v3.sample.PlayableLocation
 */
export type PlayableLocation = Message<"google.maps.playablelocations.v3.sample.PlayableLocation"> & {
  /**
   * Required. The name of this playable location.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required.
   * Each location has one of the following identifiers:
   *
   * @generated from oneof google.maps.playablelocations.v3.sample.PlayableLocation.location_id
   */
  locationId: {
    /**
     * A [place ID] (https://developers.google.com/places/place-id)
     *
     * @generated from field: string place_id = 2;
     */
    value: string;
    case: "placeId";
  } | {
    /**
     * A [plus code] (http://openlocationcode.com)
     *
     * @generated from field: string plus_code = 3;
     */
    value: string;
    case: "plusCode";
  } | { case: undefined; value?: undefined };

  /**
   * A collection of [Playable Location Types](/maps/tt/games/types) for this
   * playable location. The first type in the collection is the primary type.
   *
   * Type information might not be available for all playable locations.
   *
   * @generated from field: repeated string types = 4;
   */
  types: string[];

  /**
   * Required. The latitude and longitude associated with the center of the
   * playable location.
   *
   * By default, the set of playable locations returned from
   * [SamplePlayableLocations][google.maps.playablelocations.v3.PlayableLocations.SamplePlayableLocations]
   * use center-point coordinates.
   *
   * @generated from field: google.type.LatLng center_point = 5;
   */
  centerPoint?: LatLng;

  /**
   * The playable location's coordinates, snapped to the sidewalk of the
   * nearest road, if a nearby road exists.
   *
   * @generated from field: google.type.LatLng snapped_point = 6;
   */
  snappedPoint?: LatLng;
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.PlayableLocation.
 * Use `create(PlayableLocationSchema)` to create a new message.
 */
export const PlayableLocationSchema: GenMessage<PlayableLocation> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 0);

/**
 * A set of options that specifies the separation between playable locations.
 *
 * @generated from message google.maps.playablelocations.v3.sample.SpacingOptions
 */
export type SpacingOptions = Message<"google.maps.playablelocations.v3.sample.SpacingOptions"> & {
  /**
   * Required. The minimum spacing between any two playable locations, measured
   * in meters. The minimum value is 30. The maximum value is 1000.
   *
   * Inputs will be rounded up to the next 10 meter interval.
   *
   * The default value is 200m.
   *
   * Set this field to remove tight clusters of playable locations.
   *
   * Note:
   *
   * The spacing is a greedy algorithm. It optimizes for selecting the highest
   * ranking locations first, not to maximize the number of locations selected.
   * Consider the following scenario:
   *
   *   * Rank: A: 2, B: 1, C: 3.
   *   * Distance: A--200m--B--200m--C
   *
   * If spacing=250, it will pick the highest ranked location [B], not [A, C].
   *
   *
   * Note:
   *
   * Spacing works within the game object type itself, as well as the previous
   * ones.
   * Suppose three game object types, each with the following spacing:
   *
   *   * X: 400m, Y: undefined, Z: 200m.
   *
   * 1. Add locations for X, within 400m of each other.
   * 2. Add locations for Y, without any spacing.
   * 3. Finally, add locations for Z within 200m of each other as well X and Y.
   *
   * The distance diagram between those locations end up as:
   *
   *   * From->To.
   *   * X->X: 400m
   *   * Y->X, Y->Y: unspecified.
   *   * Z->X, Z->Y, Z->Z: 200m.
   *
   * @generated from field: double min_spacing_meters = 1;
   */
  minSpacingMeters: number;

  /**
   * Specifies whether the minimum spacing constraint applies to the
   * center-point or to the snapped point of playable locations. The default
   * value is `CENTER_POINT`.
   *
   * If a snapped point is not available for a playable location, its
   * center-point is used instead.
   *
   * Set this to the point type used in your game.
   *
   * @generated from field: google.maps.playablelocations.v3.sample.SpacingOptions.PointType point_type = 2;
   */
  pointType: SpacingOptions_PointType;
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.SpacingOptions.
 * Use `create(SpacingOptionsSchema)` to create a new message.
 */
export const SpacingOptionsSchema: GenMessage<SpacingOptions> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 1);

/**
 * Specifies whether the playable location's geographic coordinates (latitude
 * and longitude) correspond to its center-point, or to its location snapped
 * to the sidewalk of the nearest road.
 *
 * @generated from enum google.maps.playablelocations.v3.sample.SpacingOptions.PointType
 */
export enum SpacingOptions_PointType {
  /**
   * Unspecified point type. Do not use this value.
   *
   * @generated from enum value: POINT_TYPE_UNSPECIFIED = 0;
   */
  POINT_TYPE_UNSPECIFIED = 0,

  /**
   * The geographic coordinates correspond to the center of the location.
   *
   * @generated from enum value: CENTER_POINT = 1;
   */
  CENTER_POINT = 1,

  /**
   * The geographic coordinates correspond to the location snapped to the
   * sidewalk of the nearest road (when a nearby road exists).
   *
   * @generated from enum value: SNAPPED_POINT = 2;
   */
  SNAPPED_POINT = 2,
}

/**
 * Describes the enum google.maps.playablelocations.v3.sample.SpacingOptions.PointType.
 */
export const SpacingOptions_PointTypeSchema: GenEnum<SpacingOptions_PointType> = /*@__PURE__*/
  enumDesc(file_google_maps_playablelocations_v3_sample_resources, 1, 0);

/**
 * Specifies the filters to use when searching for playable locations.
 *
 * @generated from message google.maps.playablelocations.v3.sample.Filter
 */
export type Filter = Message<"google.maps.playablelocations.v3.sample.Filter"> & {
  /**
   * Specifies the maximum number of playable locations to return. This value
   * must not be greater than 1000. The default value is 100.
   *
   * Only the top-ranking playable locations are returned.
   *
   * @generated from field: int32 max_location_count = 1;
   */
  maxLocationCount: number;

  /**
   * A set of options that control the spacing between playable locations. By
   * default the minimum distance between locations is 200m.
   *
   * @generated from field: google.maps.playablelocations.v3.sample.SpacingOptions spacing = 2;
   */
  spacing?: SpacingOptions;

  /**
   * Restricts the set of playable locations to just the
   * [types](/maps/tt/games/types) that you want.
   *
   * @generated from field: repeated string included_types = 3;
   */
  includedTypes: string[];
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export const FilterSchema: GenMessage<Filter> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 2);

/**
 * Encapsulates a filter criterion for searching for a set of playable
 * locations.
 *
 * @generated from message google.maps.playablelocations.v3.sample.Criterion
 */
export type Criterion = Message<"google.maps.playablelocations.v3.sample.Criterion"> & {
  /**
   * Required. An arbitrary, developer-defined identifier of the type of game
   * object that the playable location is used for. This field allows you to
   * specify criteria per game object type when searching for playable
   * locations.
   *
   * You should assign a unique `game_object_type` ID across all
   * `request_criteria` to represent a distinct type of game object. For
   * example, 1=monster location, 2=powerup location.
   *
   * The response contains a map<game_object_type, Response>.
   *
   * @generated from field: int32 game_object_type = 1;
   */
  gameObjectType: number;

  /**
   * Specifies filtering options, and specifies what will be included in the
   * result set.
   *
   * @generated from field: google.maps.playablelocations.v3.sample.Filter filter = 2;
   */
  filter?: Filter;

  /**
   * Specifies which `PlayableLocation` fields are returned.
   *
   * `name` (which is used for logging impressions), `center_point` and
   * `place_id` (or `plus_code`) are always returned.
   *
   * The following fields are omitted unless you specify them here:
   *
   *   * snapped_point
   *   * types
   *
   * Note: The more fields you include, the more expensive in terms of data and
   * associated latency your query will be.
   *
   * @generated from field: google.protobuf.FieldMask fields_to_return = 3;
   */
  fieldsToReturn?: FieldMask;
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.Criterion.
 * Use `create(CriterionSchema)` to create a new message.
 */
export const CriterionSchema: GenMessage<Criterion> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 3);

/**
 * Specifies the area to search for playable locations.
 *
 * @generated from message google.maps.playablelocations.v3.sample.AreaFilter
 */
export type AreaFilter = Message<"google.maps.playablelocations.v3.sample.AreaFilter"> & {
  /**
   * Required. The S2 cell ID of the area you want. This must be between cell
   * level 11 and 14 (inclusive).
   *
   * S2 cells are 64-bit integers that identify areas on the Earth. They are
   * hierarchical, and can therefore be used for spatial indexing.
   *
   * The S2 geometry library is available in a number of languages:
   *
   *   * [C++](https://github.com/google/s2geometry)
   *   * [Java](https://github.com/google/s2-geometry-library-java)
   *   * [Go](https://github.com/golang/geo)
   *   * [Python](https://github.com/google/s2geometry/tree/master/src/python)
   *
   * @generated from field: fixed64 s2_cell_id = 1;
   */
  s2CellId: bigint;
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.AreaFilter.
 * Use `create(AreaFilterSchema)` to create a new message.
 */
export const AreaFilterSchema: GenMessage<AreaFilter> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 4);

/**
 * A list of PlayableLocation objects that satisfies a single Criterion.
 *
 * @generated from message google.maps.playablelocations.v3.sample.PlayableLocationList
 */
export type PlayableLocationList = Message<"google.maps.playablelocations.v3.sample.PlayableLocationList"> & {
  /**
   * A list of playable locations for this game object type.
   *
   * @generated from field: repeated google.maps.playablelocations.v3.sample.PlayableLocation locations = 1;
   */
  locations: PlayableLocation[];
};

/**
 * Describes the message google.maps.playablelocations.v3.sample.PlayableLocationList.
 * Use `create(PlayableLocationListSchema)` to create a new message.
 */
export const PlayableLocationListSchema: GenMessage<PlayableLocationList> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_sample_resources, 5);

