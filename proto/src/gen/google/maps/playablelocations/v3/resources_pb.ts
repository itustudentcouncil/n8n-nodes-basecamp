// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/playablelocations/v3/resources.proto (package google.maps.playablelocations.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/playablelocations/v3/resources.proto.
 */
export const file_google_maps_playablelocations_v3_resources: GenFile = /*@__PURE__*/
  fileDesc("CjBnb29nbGUvbWFwcy9wbGF5YWJsZWxvY2F0aW9ucy92My9yZXNvdXJjZXMucHJvdG8SIGdvb2dsZS5tYXBzLnBsYXlhYmxlbG9jYXRpb25zLnYzIukCCgxQbGF5ZXJSZXBvcnQSGgoNbG9jYXRpb25fbmFtZRgBIAEoCUID4EECElYKB3JlYXNvbnMYAiADKA4yQC5nb29nbGUubWFwcy5wbGF5YWJsZWxvY2F0aW9ucy52My5QbGF5ZXJSZXBvcnQuQmFkTG9jYXRpb25SZWFzb25CA+BBAhIbCg5yZWFzb25fZGV0YWlscxgDIAEoCUID4EECEhUKDWxhbmd1YWdlX2NvZGUYBCABKAkisAEKEUJhZExvY2F0aW9uUmVhc29uEiMKH0JBRF9MT0NBVElPTl9SRUFTT05fVU5TUEVDSUZJRUQQABIJCgVPVEhFUhABEh0KGU5PVF9QRURFU1RSSUFOX0FDQ0VTU0lCTEUQAhIWChJOT1RfT1BFTl9UT19QVUJMSUMQBBIWChJQRVJNQU5FTlRMWV9DTE9TRUQQBRIcChhURU1QT1JBUklMWV9JTkFDQ0VTU0lCTEUQBiLvAQoKSW1wcmVzc2lvbhIaCg1sb2NhdGlvbl9uYW1lGAEgASgJQgPgQQISWQoPaW1wcmVzc2lvbl90eXBlGAIgASgOMjsuZ29vZ2xlLm1hcHMucGxheWFibGVsb2NhdGlvbnMudjMuSW1wcmVzc2lvbi5JbXByZXNzaW9uVHlwZUID4EECEhgKEGdhbWVfb2JqZWN0X3R5cGUYBCABKAUiUAoOSW1wcmVzc2lvblR5cGUSHwobSU1QUkVTU0lPTl9UWVBFX1VOU1BFQ0lGSUVEEAASDQoJUFJFU0VOVEVEEAESDgoKSU5URVJBQ1RFRBACQt8BCiRjb20uZ29vZ2xlLm1hcHMucGxheWFibGVsb2NhdGlvbnMudjNCDlJlc291cmNlc1Byb3RvUAFaWGNsb3VkLmdvb2dsZS5jb20vZ28vbWFwcy9wbGF5YWJsZWxvY2F0aW9ucy9hcGl2My9wbGF5YWJsZWxvY2F0aW9uc3BiO3BsYXlhYmxlbG9jYXRpb25zcGKiAgRHTVBMqgIgR29vZ2xlLk1hcHMuUGxheWFibGVMb2NhdGlvbnMuVjPKAiBHb29nbGVcTWFwc1xQbGF5YWJsZUxvY2F0aW9uc1xWM2IGcHJvdG8z", [file_google_api_field_behavior]);

/**
 * A report submitted by a player about a playable location that is considered
 * inappropriate for use in the game.
 *
 * @generated from message google.maps.playablelocations.v3.PlayerReport
 */
export type PlayerReport = Message<"google.maps.playablelocations.v3.PlayerReport"> & {
  /**
   * Required. The name of the playable location.
   *
   * @generated from field: string location_name = 1;
   */
  locationName: string;

  /**
   * Required. One or more reasons why this playable location is considered bad.
   *
   * @generated from field: repeated google.maps.playablelocations.v3.PlayerReport.BadLocationReason reasons = 2;
   */
  reasons: PlayerReport_BadLocationReason[];

  /**
   * Required. A free-form description detailing why the playable location is
   * considered bad.
   *
   * @generated from field: string reason_details = 3;
   */
  reasonDetails: string;

  /**
   * Language code (in BCP-47 format) indicating the language of the freeform
   * description provided in `reason_details`. Examples are "en", "en-US" or
   * "ja-Latn". For more information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   *
   * @generated from field: string language_code = 4;
   */
  languageCode: string;
};

/**
 * Describes the message google.maps.playablelocations.v3.PlayerReport.
 * Use `create(PlayerReportSchema)` to create a new message.
 */
export const PlayerReportSchema: GenMessage<PlayerReport> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_resources, 0);

/**
 * The reason why the playable location is considered bad.
 *
 * @generated from enum google.maps.playablelocations.v3.PlayerReport.BadLocationReason
 */
export enum PlayerReport_BadLocationReason {
  /**
   * Unspecified reason. Do not use.
   *
   * @generated from enum value: BAD_LOCATION_REASON_UNSPECIFIED = 0;
   */
  BAD_LOCATION_REASON_UNSPECIFIED = 0,

  /**
   * The reason isn't one of the reasons in this enumeration.
   *
   * @generated from enum value: OTHER = 1;
   */
  OTHER = 1,

  /**
   * The playable location isn't accessible to pedestrians. For example, if
   * it's in the middle of a highway.
   *
   * @generated from enum value: NOT_PEDESTRIAN_ACCESSIBLE = 2;
   */
  NOT_PEDESTRIAN_ACCESSIBLE = 2,

  /**
   * The playable location isn't open to the public. For example, a private
   * office building.
   *
   * @generated from enum value: NOT_OPEN_TO_PUBLIC = 4;
   */
  NOT_OPEN_TO_PUBLIC = 4,

  /**
   * The playable location is permanently closed. For example, when a business
   * has been shut down.
   *
   * @generated from enum value: PERMANENTLY_CLOSED = 5;
   */
  PERMANENTLY_CLOSED = 5,

  /**
   * The playable location is temporarily inaccessible. For example, when a
   * business has closed for renovations.
   *
   * @generated from enum value: TEMPORARILY_INACCESSIBLE = 6;
   */
  TEMPORARILY_INACCESSIBLE = 6,
}

/**
 * Describes the enum google.maps.playablelocations.v3.PlayerReport.BadLocationReason.
 */
export const PlayerReport_BadLocationReasonSchema: GenEnum<PlayerReport_BadLocationReason> = /*@__PURE__*/
  enumDesc(file_google_maps_playablelocations_v3_resources, 0, 0);

/**
 * Encapsulates impression event details.
 *
 * @generated from message google.maps.playablelocations.v3.Impression
 */
export type Impression = Message<"google.maps.playablelocations.v3.Impression"> & {
  /**
   * Required. The name of the playable location.
   *
   * @generated from field: string location_name = 1;
   */
  locationName: string;

  /**
   * Required. The type of impression event.
   *
   * @generated from field: google.maps.playablelocations.v3.Impression.ImpressionType impression_type = 2;
   */
  impressionType: Impression_ImpressionType;

  /**
   * An arbitrary, developer-defined type identifier for each type of game
   * object used in your game.
   *
   * Since players interact with differ types of game objects in different ways,
   * this field allows you to segregate impression data by type for analysis.
   *
   * You should assign a unique `game_object_type` ID to represent a distinct
   * type of game object in your game.
   *
   * For example, 1=monster location, 2=powerup location.
   *
   * @generated from field: int32 game_object_type = 4;
   */
  gameObjectType: number;
};

/**
 * Describes the message google.maps.playablelocations.v3.Impression.
 * Use `create(ImpressionSchema)` to create a new message.
 */
export const ImpressionSchema: GenMessage<Impression> = /*@__PURE__*/
  messageDesc(file_google_maps_playablelocations_v3_resources, 1);

/**
 * The type of impression event.
 *
 * @generated from enum google.maps.playablelocations.v3.Impression.ImpressionType
 */
export enum Impression_ImpressionType {
  /**
   * Unspecified type. Do not use.
   *
   * @generated from enum value: IMPRESSION_TYPE_UNSPECIFIED = 0;
   */
  IMPRESSION_TYPE_UNSPECIFIED = 0,

  /**
   * The playable location was presented to a player.
   *
   * @generated from enum value: PRESENTED = 1;
   */
  PRESENTED = 1,

  /**
   * A player interacted with the playable location.
   *
   * @generated from enum value: INTERACTED = 2;
   */
  INTERACTED = 2,
}

/**
 * Describes the enum google.maps.playablelocations.v3.Impression.ImpressionType.
 */
export const Impression_ImpressionTypeSchema: GenEnum<Impression_ImpressionType> = /*@__PURE__*/
  enumDesc(file_google_maps_playablelocations_v3_resources, 1, 0);

