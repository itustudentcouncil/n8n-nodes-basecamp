// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/routes/v1alpha/route_service.proto (package google.maps.routes.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import type { ComputeCustomRoutesRequestSchema } from "../v1/compute_custom_routes_request_pb";
import { file_google_maps_routes_v1_compute_custom_routes_request } from "../v1/compute_custom_routes_request_pb";
import type { ComputeCustomRoutesResponseSchema } from "../v1/compute_custom_routes_response_pb";
import { file_google_maps_routes_v1_compute_custom_routes_response } from "../v1/compute_custom_routes_response_pb";
import type { ComputeRouteMatrixRequestSchema } from "../v1/compute_route_matrix_request_pb";
import { file_google_maps_routes_v1_compute_route_matrix_request } from "../v1/compute_route_matrix_request_pb";
import type { ComputeRoutesRequestSchema } from "../v1/compute_routes_request_pb";
import { file_google_maps_routes_v1_compute_routes_request } from "../v1/compute_routes_request_pb";
import type { ComputeRoutesResponseSchema } from "../v1/compute_routes_response_pb";
import { file_google_maps_routes_v1_compute_routes_response } from "../v1/compute_routes_response_pb";
import type { RouteMatrixElementSchema } from "../v1/route_matrix_element_pb";
import { file_google_maps_routes_v1_route_matrix_element } from "../v1/route_matrix_element_pb";

/**
 * Describes the file google/maps/routes/v1alpha/route_service.proto.
 */
export const file_google_maps_routes_v1alpha_route_service: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvbWFwcy9yb3V0ZXMvdjFhbHBoYS9yb3V0ZV9zZXJ2aWNlLnByb3RvEhpnb29nbGUubWFwcy5yb3V0ZXMudjFhbHBoYTLGBAoLUm91dGVzQWxwaGESjQEKDUNvbXB1dGVSb3V0ZXMSKy5nb29nbGUubWFwcy5yb3V0ZXMudjEuQ29tcHV0ZVJvdXRlc1JlcXVlc3QaLC5nb29nbGUubWFwcy5yb3V0ZXMudjEuQ29tcHV0ZVJvdXRlc1Jlc3BvbnNlIiGC0+STAhs6ASoiFi92MWFscGhhOmNvbXB1dGVSb3V0ZXMSmwEKEkNvbXB1dGVSb3V0ZU1hdHJpeBIwLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5Db21wdXRlUm91dGVNYXRyaXhSZXF1ZXN0GikuZ29vZ2xlLm1hcHMucm91dGVzLnYxLlJvdXRlTWF0cml4RWxlbWVudCImgtPkkwIgOgEqIhsvdjFhbHBoYTpjb21wdXRlUm91dGVNYXRyaXgwARKlAQoTQ29tcHV0ZUN1c3RvbVJvdXRlcxIxLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5Db21wdXRlQ3VzdG9tUm91dGVzUmVxdWVzdBoyLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5Db21wdXRlQ3VzdG9tUm91dGVzUmVzcG9uc2UiJ4LT5JMCIToBKiIcL3YxYWxwaGE6Y29tcHV0ZUN1c3RvbVJvdXRlcxphykEecm91dGVzcHJlZmVycmVkLmdvb2dsZWFwaXMuY29t0kE9aHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9tYXBzLXBsYXRmb3JtLnJvdXRlc3ByZWZlcnJlZEK9AQoeY29tLmdvb2dsZS5tYXBzLnJvdXRlcy52MWFscGhhQhdSb3V0ZXNTZXJ2aWNlQWxwaGFQcm90b1ABWjxjbG91ZC5nb29nbGUuY29tL2dvL21hcHMvcm91dGVzL2FwaXYxYWxwaGEvcm91dGVzcGI7cm91dGVzcGL4AQGiAgRHTVJTqgIaR29vZ2xlLk1hcHMuUm91dGVzLlYxQWxwaGHKAhpHb29nbGVcTWFwc1xSb3V0ZXNcVjFhbHBoYWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_maps_routes_v1_compute_custom_routes_request, file_google_maps_routes_v1_compute_custom_routes_response, file_google_maps_routes_v1_compute_route_matrix_request, file_google_maps_routes_v1_compute_routes_request, file_google_maps_routes_v1_compute_routes_response, file_google_maps_routes_v1_route_matrix_element]);

/**
 * The Routes Preferred API.
 *
 * @generated from service google.maps.routes.v1alpha.RoutesAlpha
 */
export const RoutesAlpha: GenService<{
  /**
   * Returns the primary route along with optional alternate routes, given a set
   * of terminal and intermediate waypoints.
   *
   * **NOTE:** This method requires that you specify a response field mask in
   * the input. You can provide the response field mask by using the URL
   * parameter `$fields` or `fields`, or by using the HTTP/gRPC header
   * `X-Goog-FieldMask` (see the [available URL parameters and
   * headers](https://cloud.google.com/apis/docs/system-parameters). The value
   * is a comma separated list of field paths. See this detailed documentation
   * about [how to construct the field
   * paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
   *
   * For example, in this method:
   *
   * * Field mask of all available fields (for manual inspection):
   *   `X-Goog-FieldMask: *`
   * * Field mask of Route-level duration, distance, and polyline (an example
   * production setup):
   *   `X-Goog-FieldMask:
   *   routes.duration,routes.distanceMeters,routes.polyline.encodedPolyline`
   *
   * Google discourages the use of the wildcard (`*`) response field mask, or
   * specifying the field mask at the top level (`routes`), because:
   *
   * * Selecting only the fields that you need helps our server save computation
   * cycles, allowing us to return the result to you with a lower latency.
   * * Selecting only the fields that you need in your production job ensures
   * stable latency performance. We might add more response fields in the
   * future, and those new fields might require extra computation time. If you
   * select all fields, or if you select all fields at the top level, then you
   * might experience performance degradation because any new field we add will
   * be automatically included in the response.
   * * Selecting only the fields that you need results in a smaller response
   * size, and thus higher network throughput.
   *
   * @generated from rpc google.maps.routes.v1alpha.RoutesAlpha.ComputeRoutes
   */
  computeRoutes: {
    methodKind: "unary";
    input: typeof ComputeRoutesRequestSchema;
    output: typeof ComputeRoutesResponseSchema;
  },
  /**
   * Takes in a list of origins and destinations and returns a stream containing
   * route information for each combination of origin and destination.
   *
   * **NOTE:** This method requires that you specify a response field mask in
   * the input. You can provide the response field mask by using the URL
   * parameter `$fields` or `fields`, or by using the HTTP/gRPC header
   * `X-Goog-FieldMask` (see the [available URL parameters and
   * headers](https://cloud.google.com/apis/docs/system-parameters). The value
   * is a comma separated list of field paths. See this detailed documentation
   * about [how to construct the field
   * paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
   *
   * For example, in this method:
   *
   * * Field mask of all available fields (for manual inspection):
   *   `X-Goog-FieldMask: *`
   * * Field mask of route durations, distances, element status, condition, and
   *   element indices (an example production setup):
   *   `X-Goog-FieldMask:
   *   originIndex,destinationIndex,status,condition,distanceMeters,duration`
   *
   * It is critical that you include `status` in your field mask as otherwise
   * all messages will appear to be OK. Google discourages the use of the
   * wildcard (`*`) response field mask, because:
   *
   * * Selecting only the fields that you need helps our server save computation
   * cycles, allowing us to return the result to you with a lower latency.
   * * Selecting only the fields that you need in your production job ensures
   * stable latency performance. We might add more response fields in the
   * future, and those new fields might require extra computation time. If you
   * select all fields, or if you select all fields at the top level, then you
   * might experience performance degradation because any new field we add will
   * be automatically included in the response.
   * * Selecting only the fields that you need results in a smaller response
   * size, and thus higher network throughput.
   *
   * @generated from rpc google.maps.routes.v1alpha.RoutesAlpha.ComputeRouteMatrix
   */
  computeRouteMatrix: {
    methodKind: "server_streaming";
    input: typeof ComputeRouteMatrixRequestSchema;
    output: typeof RouteMatrixElementSchema;
  },
  /**
   * Given a set of terminal and intermediate waypoints, and a route objective,
   * computes the best route for the route objective. Also returns fastest route
   * and shortest route as reference routes.
   *
   * **NOTE:** This method requires that you specify a response field mask in
   * the input. You can provide the response field mask by using the URL
   * parameter `$fields` or `fields`, or by using the HTTP/gRPC header
   * `X-Goog-FieldMask` (see the [available URL parameters and
   * headers](https://cloud.google.com/apis/docs/system-parameters). The value
   * is a comma separated list of field paths. See this detailed documentation
   * about [how to construct the field
   * paths](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto).
   *
   * For example, in this method:
   *
   * * Field mask of all available fields (for manual inspection):
   *   `X-Goog-FieldMask: *`
   * * Field mask of route distances, durations, token and toll info:
   *   `X-Goog-FieldMask:
   *   routes.route.distanceMeters,routes.route.duration,routes.token,routes.route.travelAdvisory.tollInfo`
   *
   * Google discourages the use of the wildcard (`*`) response field mask, or
   * specifying the field mask at the top level (`routes`), because:
   *
   * * Selecting only the fields that you need helps our server save computation
   * cycles, allowing us to return the result to you with a lower latency.
   * * Selecting only the fields that you need in your production job ensures
   * stable latency performance. We might add more response fields in the
   * future, and those new fields might require extra computation time. If you
   * select all fields, or if you select all fields at the top level, then you
   * might experience performance degradation because any new field we add will
   * be automatically included in the response.
   * * Selecting only the fields that you need results in a smaller response
   * size, and thus higher network throughput.
   *
   * @generated from rpc google.maps.routes.v1alpha.RoutesAlpha.ComputeCustomRoutes
   */
  computeCustomRoutes: {
    methodKind: "unary";
    input: typeof ComputeCustomRoutesRequestSchema;
    output: typeof ComputeCustomRoutesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_maps_routes_v1alpha_route_service, 0);

