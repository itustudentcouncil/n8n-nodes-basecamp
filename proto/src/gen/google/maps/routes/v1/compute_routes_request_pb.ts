// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/routes/v1/compute_routes_request.proto (package google.maps.routes.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { PolylineEncoding, PolylineQuality } from "./polyline_pb";
import { file_google_maps_routes_v1_polyline } from "./polyline_pb";
import type { TollPass } from "./toll_passes_pb";
import { file_google_maps_routes_v1_toll_passes } from "./toll_passes_pb";
import type { VehicleEmissionType } from "./vehicle_emission_type_pb";
import { file_google_maps_routes_v1_vehicle_emission_type } from "./vehicle_emission_type_pb";
import type { Waypoint } from "./waypoint_pb";
import { file_google_maps_routes_v1_waypoint } from "./waypoint_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/routes/v1/compute_routes_request.proto.
 */
export const file_google_maps_routes_v1_compute_routes_request: GenFile = /*@__PURE__*/
  fileDesc("CjJnb29nbGUvbWFwcy9yb3V0ZXMvdjEvY29tcHV0ZV9yb3V0ZXNfcmVxdWVzdC5wcm90bxIVZ29vZ2xlLm1hcHMucm91dGVzLnYxIrsFChRDb21wdXRlUm91dGVzUmVxdWVzdBIvCgZvcmlnaW4YASABKAsyHy5nb29nbGUubWFwcy5yb3V0ZXMudjEuV2F5cG9pbnQSNAoLZGVzdGluYXRpb24YAiABKAsyHy5nb29nbGUubWFwcy5yb3V0ZXMudjEuV2F5cG9pbnQSNgoNaW50ZXJtZWRpYXRlcxgDIAMoCzIfLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5XYXlwb2ludBI7Cgt0cmF2ZWxfbW9kZRgEIAEoDjImLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5Sb3V0ZVRyYXZlbE1vZGUSRAoScm91dGluZ19wcmVmZXJlbmNlGAUgASgOMiguZ29vZ2xlLm1hcHMucm91dGVzLnYxLlJvdXRpbmdQcmVmZXJlbmNlEkAKEHBvbHlsaW5lX3F1YWxpdHkYBiABKA4yJi5nb29nbGUubWFwcy5yb3V0ZXMudjEuUG9seWxpbmVRdWFsaXR5EkIKEXBvbHlsaW5lX2VuY29kaW5nGAwgASgOMicuZ29vZ2xlLm1hcHMucm91dGVzLnYxLlBvbHlsaW5lRW5jb2RpbmcSMgoOZGVwYXJ0dXJlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiIKGmNvbXB1dGVfYWx0ZXJuYXRpdmVfcm91dGVzGAggASgIEj4KD3JvdXRlX21vZGlmaWVycxgJIAEoCzIlLmdvb2dsZS5tYXBzLnJvdXRlcy52MS5Sb3V0ZU1vZGlmaWVycxIVCg1sYW5ndWFnZV9jb2RlGAogASgJEisKBXVuaXRzGAsgASgOMhwuZ29vZ2xlLm1hcHMucm91dGVzLnYxLlVuaXRzEh8KF29wdGltaXplX3dheXBvaW50X29yZGVyGA0gASgIItoBCg5Sb3V0ZU1vZGlmaWVycxITCgthdm9pZF90b2xscxgBIAEoCBIWCg5hdm9pZF9oaWdod2F5cxgCIAEoCBIVCg1hdm9pZF9mZXJyaWVzGAMgASgIEhQKDGF2b2lkX2luZG9vchgEIAEoCBI4Cgx2ZWhpY2xlX2luZm8YBSABKAsyIi5nb29nbGUubWFwcy5yb3V0ZXMudjEuVmVoaWNsZUluZm8SNAoLdG9sbF9wYXNzZXMYBiADKA4yHy5nb29nbGUubWFwcy5yb3V0ZXMudjEuVG9sbFBhc3MidgoLVmVoaWNsZUluZm8SJAocbGljZW5zZV9wbGF0ZV9sYXN0X2NoYXJhY3RlchgBIAEoCRJBCg1lbWlzc2lvbl90eXBlGAIgASgOMiouZ29vZ2xlLm1hcHMucm91dGVzLnYxLlZlaGljbGVFbWlzc2lvblR5cGUqawoPUm91dGVUcmF2ZWxNb2RlEhsKF1RSQVZFTF9NT0RFX1VOU1BFQ0lGSUVEEAASCQoFRFJJVkUQARILCgdCSUNZQ0xFEAISCAoEV0FMSxADEg8KC1RXT19XSEVFTEVSEAQSCAoEVEFYSRAFKnoKEVJvdXRpbmdQcmVmZXJlbmNlEiIKHlJPVVRJTkdfUFJFRkVSRU5DRV9VTlNQRUNJRklFRBAAEhMKD1RSQUZGSUNfVU5BV0FSRRABEhEKDVRSQUZGSUNfQVdBUkUQAhIZChVUUkFGRklDX0FXQVJFX09QVElNQUwQAyo4CgVVbml0cxIVChFVTklUU19VTlNQRUNJRklFRBAAEgoKBk1FVFJJQxABEgwKCElNUEVSSUFMEAJCqwEKGWNvbS5nb29nbGUubWFwcy5yb3V0ZXMudjFCGUNvbXB1dGVSb3V0ZXNSZXF1ZXN0UHJvdG9QAVo3Y2xvdWQuZ29vZ2xlLmNvbS9nby9tYXBzL3JvdXRlcy9hcGl2MS9yb3V0ZXNwYjtyb3V0ZXNwYvgBAaICBEdNUlOqAhVHb29nbGUuTWFwcy5Sb3V0ZXMuVjHKAhVHb29nbGVcTWFwc1xSb3V0ZXNcVjFiBnByb3RvMw", [file_google_maps_routes_v1_polyline, file_google_maps_routes_v1_toll_passes, file_google_maps_routes_v1_vehicle_emission_type, file_google_maps_routes_v1_waypoint, file_google_protobuf_timestamp]);

/**
 * ComputeRoutes request message.
 *
 * @generated from message google.maps.routes.v1.ComputeRoutesRequest
 */
export type ComputeRoutesRequest = Message<"google.maps.routes.v1.ComputeRoutesRequest"> & {
  /**
   * Required. Origin waypoint.
   *
   * @generated from field: google.maps.routes.v1.Waypoint origin = 1;
   */
  origin?: Waypoint;

  /**
   * Required. Destination waypoint.
   *
   * @generated from field: google.maps.routes.v1.Waypoint destination = 2;
   */
  destination?: Waypoint;

  /**
   * Optional. A set of waypoints along the route (excluding terminal points),
   * for either stopping at or passing by. Up to 25 intermediate waypoints are
   * supported.
   *
   * @generated from field: repeated google.maps.routes.v1.Waypoint intermediates = 3;
   */
  intermediates: Waypoint[];

  /**
   * Optional. Specifies the mode of transportation.
   *
   * @generated from field: google.maps.routes.v1.RouteTravelMode travel_mode = 4;
   */
  travelMode: RouteTravelMode;

  /**
   * Optional. Specifies how to compute the route. The server
   * attempts to use the selected routing preference to compute the route. If
   *  the routing preference results in an error or an extra long latency, then
   * an error is returned. In the future, we might implement a fallback
   * mechanism to use a different option when the preferred option does not give
   * a valid result. You can specify this option only when the `travel_mode` is
   * `DRIVE` or `TWO_WHEELER`, otherwise the request fails.
   *
   * @generated from field: google.maps.routes.v1.RoutingPreference routing_preference = 5;
   */
  routingPreference: RoutingPreference;

  /**
   * Optional. Specifies your preference for the quality of the polyline.
   *
   * @generated from field: google.maps.routes.v1.PolylineQuality polyline_quality = 6;
   */
  polylineQuality: PolylineQuality;

  /**
   * Optional. Specifies the preferred encoding for the polyline.
   *
   * @generated from field: google.maps.routes.v1.PolylineEncoding polyline_encoding = 12;
   */
  polylineEncoding: PolylineEncoding;

  /**
   * Optional. The departure time. If you don't set this value, then this value
   * defaults to the time that you made the request. If you set this value to a
   * time that has already occurred, then the request fails.
   *
   * @generated from field: google.protobuf.Timestamp departure_time = 7;
   */
  departureTime?: Timestamp;

  /**
   * Specifies whether to calculate alternate routes in addition to the route.
   *
   * @generated from field: bool compute_alternative_routes = 8;
   */
  computeAlternativeRoutes: boolean;

  /**
   * Optional. A set of conditions to satisfy that affect the way routes are
   * calculated.
   *
   * @generated from field: google.maps.routes.v1.RouteModifiers route_modifiers = 9;
   */
  routeModifiers?: RouteModifiers;

  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. See
   * [Language Support](https://developers.google.com/maps/faq#languagesupport)
   * for the list of supported languages. When you don't provide this value, the
   * display language is inferred from the location of the route request.
   *
   * @generated from field: string language_code = 10;
   */
  languageCode: string;

  /**
   * Optional. Specifies the units of measure for the display fields. This
   * includes the `instruction` field in `NavigationInstruction`. The units of
   * measure used for the route, leg, step distance, and duration are not
   * affected by this value. If you don't provide this value, then the display
   * units are inferred from the location of the request.
   *
   * @generated from field: google.maps.routes.v1.Units units = 11;
   */
  units: Units;

  /**
   * If optimizeWaypointOrder is set to true, an attempt is made to re-order the
   * specified intermediate waypoints to minimize the overall cost of the route.
   * If any of the intermediate waypoints is via waypoint the request fails. Use
   * ComputeRoutesResponse.Routes.optimized_intermediate_waypoint_index to find
   * the new ordering. If routes.optimized_intermediate_waypoint_index is not
   * requested in the `X-Goog-FieldMask` header, the request fails. If
   * optimizeWaypointOrder is set to false,
   * ComputeRoutesResponse.optimized_intermediate_waypoint_index is empty.
   *
   * @generated from field: bool optimize_waypoint_order = 13;
   */
  optimizeWaypointOrder: boolean;
};

/**
 * Describes the message google.maps.routes.v1.ComputeRoutesRequest.
 * Use `create(ComputeRoutesRequestSchema)` to create a new message.
 */
export const ComputeRoutesRequestSchema: GenMessage<ComputeRoutesRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_routes_v1_compute_routes_request, 0);

/**
 * Encapsulates a set of optional conditions to satisfy when calculating the
 * routes.
 *
 * @generated from message google.maps.routes.v1.RouteModifiers
 */
export type RouteModifiers = Message<"google.maps.routes.v1.RouteModifiers"> & {
  /**
   * Specifies whether to avoid toll roads where reasonable. Preference will be
   * given to routes not containing toll roads. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   *
   * @generated from field: bool avoid_tolls = 1;
   */
  avoidTolls: boolean;

  /**
   * Specifies whether to avoid highways where reasonable. Preference will be
   * given to routes not containing highways. Applies only to the `DRIVE` and
   * `TWO_WHEELER` travel modes.
   *
   * @generated from field: bool avoid_highways = 2;
   */
  avoidHighways: boolean;

  /**
   * Specifies whether to avoid ferries where reasonable. Preference will be
   * given to routes not containing travel by ferries.
   * Applies only to the `DRIVE` and`TWO_WHEELER` travel modes.
   *
   * @generated from field: bool avoid_ferries = 3;
   */
  avoidFerries: boolean;

  /**
   * Specifies whether to avoid navigating indoors where reasonable. Preference
   * will be given to routes not containing indoor navigation.
   * Applies only to the `WALK` travel mode.
   *
   * @generated from field: bool avoid_indoor = 4;
   */
  avoidIndoor: boolean;

  /**
   * Specifies the vehicle information.
   *
   * @generated from field: google.maps.routes.v1.VehicleInfo vehicle_info = 5;
   */
  vehicleInfo?: VehicleInfo;

  /**
   * Encapsulates information about toll passes.
   * If toll passes are provided, the API tries to return the pass price. If
   * toll passes are not provided, the API treats the toll pass as unknown and
   * tries to return the cash price.
   * Applies only to the DRIVE and TWO_WHEELER travel modes.
   *
   * @generated from field: repeated google.maps.routes.v1.TollPass toll_passes = 6;
   */
  tollPasses: TollPass[];
};

/**
 * Describes the message google.maps.routes.v1.RouteModifiers.
 * Use `create(RouteModifiersSchema)` to create a new message.
 */
export const RouteModifiersSchema: GenMessage<RouteModifiers> = /*@__PURE__*/
  messageDesc(file_google_maps_routes_v1_compute_routes_request, 1);

/**
 * Encapsulates the vehicle information, such as the license plate last
 * character.
 *
 * @generated from message google.maps.routes.v1.VehicleInfo
 */
export type VehicleInfo = Message<"google.maps.routes.v1.VehicleInfo"> & {
  /**
   * Specifies the license plate last character. Could be a digit or a letter.
   *
   * @generated from field: string license_plate_last_character = 1;
   */
  licensePlateLastCharacter: string;

  /**
   * Describes the vehicle's emission type.
   * Applies only to the DRIVE travel mode.
   *
   * @generated from field: google.maps.routes.v1.VehicleEmissionType emission_type = 2;
   */
  emissionType: VehicleEmissionType;
};

/**
 * Describes the message google.maps.routes.v1.VehicleInfo.
 * Use `create(VehicleInfoSchema)` to create a new message.
 */
export const VehicleInfoSchema: GenMessage<VehicleInfo> = /*@__PURE__*/
  messageDesc(file_google_maps_routes_v1_compute_routes_request, 2);

/**
 * A set of values used to specify the mode of travel.
 *
 * @generated from enum google.maps.routes.v1.RouteTravelMode
 */
export enum RouteTravelMode {
  /**
   * No travel mode specified. Defaults to `DRIVE`.
   *
   * @generated from enum value: TRAVEL_MODE_UNSPECIFIED = 0;
   */
  TRAVEL_MODE_UNSPECIFIED = 0,

  /**
   * Travel by passenger car.
   *
   * @generated from enum value: DRIVE = 1;
   */
  DRIVE = 1,

  /**
   * Travel by bicycle.
   *
   * @generated from enum value: BICYCLE = 2;
   */
  BICYCLE = 2,

  /**
   * Travel by walking.
   *
   * @generated from enum value: WALK = 3;
   */
  WALK = 3,

  /**
   * Two-wheeled, motorized vehicle. For example, motorcycle. Note that this
   * differs from the `BICYCLE` travel mode which covers human-powered mode.
   *
   * @generated from enum value: TWO_WHEELER = 4;
   */
  TWO_WHEELER = 4,

  /**
   * Travel by licensed taxi, which may allow the vehicle to travel on
   * designated taxi lanes in some areas.
   *
   * @generated from enum value: TAXI = 5;
   */
  TAXI = 5,
}

/**
 * Describes the enum google.maps.routes.v1.RouteTravelMode.
 */
export const RouteTravelModeSchema: GenEnum<RouteTravelMode> = /*@__PURE__*/
  enumDesc(file_google_maps_routes_v1_compute_routes_request, 0);

/**
 * A set of values that specify factors to take into consideration when
 * calculating the route.
 *
 * @generated from enum google.maps.routes.v1.RoutingPreference
 */
export enum RoutingPreference {
  /**
   * No routing preference specified. Default to `TRAFFIC_AWARE`.
   *
   * @generated from enum value: ROUTING_PREFERENCE_UNSPECIFIED = 0;
   */
  ROUTING_PREFERENCE_UNSPECIFIED = 0,

  /**
   * Computes routes without taking traffic conditions into consideration.
   * Suitable when traffic conditions don't matter. Using this value produces
   * the lowest latency.
   *
   * @generated from enum value: TRAFFIC_UNAWARE = 1;
   */
  TRAFFIC_UNAWARE = 1,

  /**
   * Calculates routes taking traffic conditions into consideration. In contrast
   * to `TRAFFIC_AWARE_OPTIMAL`, some optimizations are applied to significantly
   * reduce latency.
   *
   * @generated from enum value: TRAFFIC_AWARE = 2;
   */
  TRAFFIC_AWARE = 2,

  /**
   * Calculates the routes taking traffic conditions into consideration,
   * without applying most performance optimizations. Using this value produces
   * the highest latency.
   *
   * @generated from enum value: TRAFFIC_AWARE_OPTIMAL = 3;
   */
  TRAFFIC_AWARE_OPTIMAL = 3,
}

/**
 * Describes the enum google.maps.routes.v1.RoutingPreference.
 */
export const RoutingPreferenceSchema: GenEnum<RoutingPreference> = /*@__PURE__*/
  enumDesc(file_google_maps_routes_v1_compute_routes_request, 1);

/**
 * A set of values that specify the unit of measure used in the display.
 *
 * @generated from enum google.maps.routes.v1.Units
 */
export enum Units {
  /**
   * Units of measure not specified. Defaults to the unit of measure inferred
   * from the request.
   *
   * @generated from enum value: UNITS_UNSPECIFIED = 0;
   */
  UNITS_UNSPECIFIED = 0,

  /**
   * Metric units of measure.
   *
   * @generated from enum value: METRIC = 1;
   */
  METRIC = 1,

  /**
   * Imperial (English) units of measure.
   *
   * @generated from enum value: IMPERIAL = 2;
   */
  IMPERIAL = 2,
}

/**
 * Describes the enum google.maps.routes.v1.Units.
 */
export const UnitsSchema: GenEnum<Units> = /*@__PURE__*/
  enumDesc(file_google_maps_routes_v1_compute_routes_request, 2);

