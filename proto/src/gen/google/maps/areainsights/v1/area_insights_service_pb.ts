// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/maps/areainsights/v1/area_insights_service.proto (package google.maps.areainsights.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/maps/areainsights/v1/area_insights_service.proto.
 */
export const file_google_maps_areainsights_v1_area_insights_service: GenFile = /*@__PURE__*/
  fileDesc("Cjdnb29nbGUvbWFwcy9hcmVhaW5zaWdodHMvdjEvYXJlYV9pbnNpZ2h0c19zZXJ2aWNlLnByb3RvEhtnb29nbGUubWFwcy5hcmVhaW5zaWdodHMudjEijwEKFkNvbXB1dGVJbnNpZ2h0c1JlcXVlc3QSOwoIaW5zaWdodHMYBCADKA4yJC5nb29nbGUubWFwcy5hcmVhaW5zaWdodHMudjEuSW5zaWdodEID4EECEjgKBmZpbHRlchgFIAEoCzIjLmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5GaWx0ZXJCA+BBAiJ6ChdDb21wdXRlSW5zaWdodHNSZXNwb25zZRISCgVjb3VudBgBIAEoA0gAiAEBEkEKDnBsYWNlX2luc2lnaHRzGAUgAygLMikuZ29vZ2xlLm1hcHMuYXJlYWluc2lnaHRzLnYxLlBsYWNlSW5zaWdodEIICgZfY291bnQiPwoMUGxhY2VJbnNpZ2h0Ei8KBXBsYWNlGAEgASgJQiD6QR0KG3BsYWNlcy5nb29nbGVhcGlzLmNvbS9QbGFjZSLuAgoGRmlsdGVyEkkKD2xvY2F0aW9uX2ZpbHRlchgBIAEoCzIrLmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5Mb2NhdGlvbkZpbHRlckID4EECEkEKC3R5cGVfZmlsdGVyGAIgASgLMicuZ29vZ2xlLm1hcHMuYXJlYWluc2lnaHRzLnYxLlR5cGVGaWx0ZXJCA+BBAhJLChBvcGVyYXRpbmdfc3RhdHVzGAMgAygOMiwuZ29vZ2xlLm1hcHMuYXJlYWluc2lnaHRzLnYxLk9wZXJhdGluZ1N0YXR1c0ID4EEBEkIKDHByaWNlX2xldmVscxgEIAMoDjInLmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5QcmljZUxldmVsQgPgQQESRQoNcmF0aW5nX2ZpbHRlchgFIAEoCzIpLmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5SYXRpbmdGaWx0ZXJCA+BBASLeBAoOTG9jYXRpb25GaWx0ZXISRAoGY2lyY2xlGAEgASgLMjIuZ29vZ2xlLm1hcHMuYXJlYWluc2lnaHRzLnYxLkxvY2F0aW9uRmlsdGVyLkNpcmNsZUgAEkQKBnJlZ2lvbhgCIAEoCzIyLmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5Mb2NhdGlvbkZpbHRlci5SZWdpb25IABJNCgtjdXN0b21fYXJlYRgDIAEoCzI2Lmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5Mb2NhdGlvbkZpbHRlci5DdXN0b21BcmVhSAAaggEKBkNpcmNsZRImCgdsYXRfbG5nGAEgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nSAASMQoFcGxhY2UYAiABKAlCIPpBHQobcGxhY2VzLmdvb2dsZWFwaXMuY29tL1BsYWNlSAASEwoGcmFkaXVzGAMgASgFQgPgQQFCCAoGY2VudGVyGkUKBlJlZ2lvbhIxCgVwbGFjZRgBIAEoCUIg+kEdChtwbGFjZXMuZ29vZ2xlYXBpcy5jb20vUGxhY2VIAEIICgZyZWdpb24anAEKCkN1c3RvbUFyZWESVAoHcG9seWdvbhgBIAEoCzI+Lmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5Mb2NhdGlvbkZpbHRlci5DdXN0b21BcmVhLlBvbHlnb25CA+BBAho4CgdQb2x5Z29uEi0KC2Nvb3JkaW5hdGVzGAEgAygLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nQgPgQQFCBgoEYXJlYSKQAQoKVHlwZUZpbHRlchIbCg5pbmNsdWRlZF90eXBlcxgBIAMoCUID4EEBEhsKDmV4Y2x1ZGVkX3R5cGVzGAIgAygJQgPgQQESIwoWaW5jbHVkZWRfcHJpbWFyeV90eXBlcxgDIAMoCUID4EEBEiMKFmV4Y2x1ZGVkX3ByaW1hcnlfdHlwZXMYBCADKAlCA+BBASJoCgxSYXRpbmdGaWx0ZXISHAoKbWluX3JhdGluZxgFIAEoAkID4EEBSACIAQESHAoKbWF4X3JhdGluZxgGIAEoAkID4EEBSAGIAQFCDQoLX21pbl9yYXRpbmdCDQoLX21heF9yYXRpbmcqSQoHSW5zaWdodBIXChNJTlNJR0hUX1VOU1BFQ0lGSUVEEAASEQoNSU5TSUdIVF9DT1VOVBABEhIKDklOU0lHSFRfUExBQ0VTEAIqpwEKD09wZXJhdGluZ1N0YXR1cxIgChxPUEVSQVRJTkdfU1RBVFVTX1VOU1BFQ0lGSUVEEAASIAocT1BFUkFUSU5HX1NUQVRVU19PUEVSQVRJT05BTBABEicKI09QRVJBVElOR19TVEFUVVNfUEVSTUFORU5UTFlfQ0xPU0VEEAMSJwojT1BFUkFUSU5HX1NUQVRVU19URU1QT1JBUklMWV9DTE9TRUQQBCqxAQoKUHJpY2VMZXZlbBIbChdQUklDRV9MRVZFTF9VTlNQRUNJRklFRBAAEhQKEFBSSUNFX0xFVkVMX0ZSRUUQARIbChdQUklDRV9MRVZFTF9JTkVYUEVOU0lWRRACEhgKFFBSSUNFX0xFVkVMX01PREVSQVRFEAMSGQoVUFJJQ0VfTEVWRUxfRVhQRU5TSVZFEAQSHgoaUFJJQ0VfTEVWRUxfVkVSWV9FWFBFTlNJVkUQBTL+AQoMQXJlYUluc2lnaHRzEpwBCg9Db21wdXRlSW5zaWdodHMSMy5nb29nbGUubWFwcy5hcmVhaW5zaWdodHMudjEuQ29tcHV0ZUluc2lnaHRzUmVxdWVzdBo0Lmdvb2dsZS5tYXBzLmFyZWFpbnNpZ2h0cy52MS5Db21wdXRlSW5zaWdodHNSZXNwb25zZSIegtPkkwIYOgEqIhMvdjE6Y29tcHV0ZUluc2lnaHRzGk/KQRthcmVhaW5zaWdodHMuZ29vZ2xlYXBpcy5jb23SQS5odHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtQv0BCh9jb20uZ29vZ2xlLm1hcHMuYXJlYWluc2lnaHRzLnYxQhhBcmVhSW5zaWdodHNTZXJ2aWNlUHJvdG9QAVpJY2xvdWQuZ29vZ2xlLmNvbS9nby9tYXBzL2FyZWFpbnNpZ2h0cy9hcGl2MS9hcmVhaW5zaWdodHNwYjthcmVhaW5zaWdodHNwYqICA01BSaoCG0dvb2dsZS5NYXBzLkFyZWFJbnNpZ2h0cy5WMcoCG0dvb2dsZVxNYXBzXEFyZWFJbnNpZ2h0c1xWMepBMAobcGxhY2VzLmdvb2dsZWFwaXMuY29tL1BsYWNlEhFwbGFjZXMve3BsYWNlX2lkfWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_type_latlng]);

/**
 * Request for the ComputeInsights RPC.
 *
 * @generated from message google.maps.areainsights.v1.ComputeInsightsRequest
 */
export type ComputeInsightsRequest = Message<"google.maps.areainsights.v1.ComputeInsightsRequest"> & {
  /**
   * Required. Insights to compute. Currently only INSIGHT_COUNT and
   * INSIGHT_PLACES are supported.
   *
   * @generated from field: repeated google.maps.areainsights.v1.Insight insights = 4;
   */
  insights: Insight[];

  /**
   * Required. Insight filter.
   *
   * @generated from field: google.maps.areainsights.v1.Filter filter = 5;
   */
  filter?: Filter;
};

/**
 * Describes the message google.maps.areainsights.v1.ComputeInsightsRequest.
 * Use `create(ComputeInsightsRequestSchema)` to create a new message.
 */
export const ComputeInsightsRequestSchema: GenMessage<ComputeInsightsRequest> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 0);

/**
 * Response for the ComputeInsights RPC.
 *
 * @generated from message google.maps.areainsights.v1.ComputeInsightsResponse
 */
export type ComputeInsightsResponse = Message<"google.maps.areainsights.v1.ComputeInsightsResponse"> & {
  /**
   * Result for Insights.INSIGHT_COUNT.
   *
   * @generated from field: optional int64 count = 1;
   */
  count?: bigint;

  /**
   * Result for Insights.INSIGHT_PLACES.
   *
   * @generated from field: repeated google.maps.areainsights.v1.PlaceInsight place_insights = 5;
   */
  placeInsights: PlaceInsight[];
};

/**
 * Describes the message google.maps.areainsights.v1.ComputeInsightsResponse.
 * Use `create(ComputeInsightsResponseSchema)` to create a new message.
 */
export const ComputeInsightsResponseSchema: GenMessage<ComputeInsightsResponse> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 1);

/**
 * Holds information about a place
 *
 * @generated from message google.maps.areainsights.v1.PlaceInsight
 */
export type PlaceInsight = Message<"google.maps.areainsights.v1.PlaceInsight"> & {
  /**
   * The resource name of a place. This resource name can be used to retrieve
   * details about the place using the [Places
   * API](https://developers.google.com/maps/documentation/places/web-service/reference/rest/v1/places/get).
   *
   * @generated from field: string place = 1;
   */
  place: string;
};

/**
 * Describes the message google.maps.areainsights.v1.PlaceInsight.
 * Use `create(PlaceInsightSchema)` to create a new message.
 */
export const PlaceInsightSchema: GenMessage<PlaceInsight> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 2);

/**
 * Filters for the ComputeInsights RPC.
 *
 * @generated from message google.maps.areainsights.v1.Filter
 */
export type Filter = Message<"google.maps.areainsights.v1.Filter"> & {
  /**
   * Required. Restricts results to places which are located in the area
   * specified by location filters.
   *
   * @generated from field: google.maps.areainsights.v1.LocationFilter location_filter = 1;
   */
  locationFilter?: LocationFilter;

  /**
   * Required. Place type filters.
   *
   * @generated from field: google.maps.areainsights.v1.TypeFilter type_filter = 2;
   */
  typeFilter?: TypeFilter;

  /**
   * Optional. Restricts results to places whose operating status is included on
   * this list. If operating_status is not set, OPERATING_STATUS_OPERATIONAL is
   * used as default.
   *
   * @generated from field: repeated google.maps.areainsights.v1.OperatingStatus operating_status = 3;
   */
  operatingStatus: OperatingStatus[];

  /**
   * Optional. Restricts results to places whose price level is included on this
   * list. If price_level is not set, all price levels are included in the
   * results.
   *
   * @generated from field: repeated google.maps.areainsights.v1.PriceLevel price_levels = 4;
   */
  priceLevels: PriceLevel[];

  /**
   * Optional. Restricts results to places whose average user ratings are in the
   * range specified by rating_filter. If rating_filter is not set, all ratings
   * are included in the result.
   *
   * @generated from field: google.maps.areainsights.v1.RatingFilter rating_filter = 5;
   */
  ratingFilter?: RatingFilter;
};

/**
 * Describes the message google.maps.areainsights.v1.Filter.
 * Use `create(FilterSchema)` to create a new message.
 */
export const FilterSchema: GenMessage<Filter> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 3);

/**
 * Location filters.
 *
 * Specifies the area of interest for the insight.
 *
 * @generated from message google.maps.areainsights.v1.LocationFilter
 */
export type LocationFilter = Message<"google.maps.areainsights.v1.LocationFilter"> & {
  /**
   * One of the following must be specified.
   *
   * @generated from oneof google.maps.areainsights.v1.LocationFilter.area
   */
  area: {
    /**
     * Area as a circle.
     *
     * @generated from field: google.maps.areainsights.v1.LocationFilter.Circle circle = 1;
     */
    value: LocationFilter_Circle;
    case: "circle";
  } | {
    /**
     * Area as region.
     *
     * @generated from field: google.maps.areainsights.v1.LocationFilter.Region region = 2;
     */
    value: LocationFilter_Region;
    case: "region";
  } | {
    /**
     * Custom area specified by a polygon.
     *
     * @generated from field: google.maps.areainsights.v1.LocationFilter.CustomArea custom_area = 3;
     */
    value: LocationFilter_CustomArea;
    case: "customArea";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.maps.areainsights.v1.LocationFilter.
 * Use `create(LocationFilterSchema)` to create a new message.
 */
export const LocationFilterSchema: GenMessage<LocationFilter> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 4);

/**
 * A circle is defined by a center point and radius in meters.
 *
 * @generated from message google.maps.areainsights.v1.LocationFilter.Circle
 */
export type LocationFilter_Circle = Message<"google.maps.areainsights.v1.LocationFilter.Circle"> & {
  /**
   * The center of the circle.
   *
   * @generated from oneof google.maps.areainsights.v1.LocationFilter.Circle.center
   */
  center: {
    /**
     * The latitude and longitude of the center of the circle.
     *
     * @generated from field: google.type.LatLng lat_lng = 1;
     */
    value: LatLng;
    case: "latLng";
  } | {
    /**
     * The Place resource name of the center of the circle. Only point places
     * are supported.
     *
     * @generated from field: string place = 2;
     */
    value: string;
    case: "place";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. The radius of the circle in meters
   *
   * @generated from field: int32 radius = 3;
   */
  radius: number;
};

/**
 * Describes the message google.maps.areainsights.v1.LocationFilter.Circle.
 * Use `create(LocationFilter_CircleSchema)` to create a new message.
 */
export const LocationFilter_CircleSchema: GenMessage<LocationFilter_Circle> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 4, 0);

/**
 * A region is a geographic boundary such as: cities, postal codes, counties,
 * states, etc.
 *
 * @generated from message google.maps.areainsights.v1.LocationFilter.Region
 */
export type LocationFilter_Region = Message<"google.maps.areainsights.v1.LocationFilter.Region"> & {
  /**
   * The resource name of a region.
   *
   * @generated from oneof google.maps.areainsights.v1.LocationFilter.Region.region
   */
  region: {
    /**
     * The Place resource name of a region.
     *
     * @generated from field: string place = 1;
     */
    value: string;
    case: "place";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.maps.areainsights.v1.LocationFilter.Region.
 * Use `create(LocationFilter_RegionSchema)` to create a new message.
 */
export const LocationFilter_RegionSchema: GenMessage<LocationFilter_Region> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 4, 1);

/**
 * Custom Area.
 *
 * @generated from message google.maps.areainsights.v1.LocationFilter.CustomArea
 */
export type LocationFilter_CustomArea = Message<"google.maps.areainsights.v1.LocationFilter.CustomArea"> & {
  /**
   * Required. The custom area represented as a polygon
   *
   * @generated from field: google.maps.areainsights.v1.LocationFilter.CustomArea.Polygon polygon = 1;
   */
  polygon?: LocationFilter_CustomArea_Polygon;
};

/**
 * Describes the message google.maps.areainsights.v1.LocationFilter.CustomArea.
 * Use `create(LocationFilter_CustomAreaSchema)` to create a new message.
 */
export const LocationFilter_CustomAreaSchema: GenMessage<LocationFilter_CustomArea> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 4, 2);

/**
 * A polygon is represented by a series of connected coordinates in an
 * counterclockwise ordered sequence. The coordinates form a closed loop and
 * define a filled region. The first and last coordinates are equivalent,
 * and they must contain identical values. The format is a simplified
 * version of GeoJSON polygons (we only support one counterclockwise
 * exterior ring).
 *
 * @generated from message google.maps.areainsights.v1.LocationFilter.CustomArea.Polygon
 */
export type LocationFilter_CustomArea_Polygon = Message<"google.maps.areainsights.v1.LocationFilter.CustomArea.Polygon"> & {
  /**
   * Optional. The coordinates that define the polygon.
   *
   * @generated from field: repeated google.type.LatLng coordinates = 1;
   */
  coordinates: LatLng[];
};

/**
 * Describes the message google.maps.areainsights.v1.LocationFilter.CustomArea.Polygon.
 * Use `create(LocationFilter_CustomArea_PolygonSchema)` to create a new message.
 */
export const LocationFilter_CustomArea_PolygonSchema: GenMessage<LocationFilter_CustomArea_Polygon> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 4, 2, 0);

/**
 * Place type filters.
 *
 * Only Place types from
 * [Table
 * a](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
 * are supported.
 *
 * A place can only have a single primary type associated with it. For example,
 * the primary type might be "mexican_restaurant" or "steak_house". Use
 * included_primary_types and excluded_primary_types to filter the results on a
 * place's primary type.
 *
 * A place can also have multiple type values associated with it. For example a
 * restaurant might have the following types: "seafood_restaurant",
 * "restaurant", "food", "point_of_interest", "establishment". Use
 * included_types and excluded_types to filter the results on the list of types
 * associated with a place.
 *
 * If a search is specified with multiple type restrictions, only places that
 * satisfy all of the restrictions are returned. For example, if you specify
 * {"included_types": ["restaurant"], "excluded_primary_types":
 * ["steak_house"]}, the returned places provide "restaurant" related services
 * but do not operate primarily as a "steak_house".
 *
 * If there are any conflicting types, i.e. a type appears in both
 * included_types and excluded_types types or included_primary_types and
 * excluded_primary_types, an INVALID_ARGUMENT error is returned.
 *
 * One of included_types or included_primary_types must be set.
 *
 * @generated from message google.maps.areainsights.v1.TypeFilter
 */
export type TypeFilter = Message<"google.maps.areainsights.v1.TypeFilter"> & {
  /**
   * Optional. Included Place types.
   *
   * @generated from field: repeated string included_types = 1;
   */
  includedTypes: string[];

  /**
   * Optional. Excluded Place types.
   *
   * @generated from field: repeated string excluded_types = 2;
   */
  excludedTypes: string[];

  /**
   * Optional. Included primary Place types.
   *
   * @generated from field: repeated string included_primary_types = 3;
   */
  includedPrimaryTypes: string[];

  /**
   * Optional. Excluded primary Place types.
   *
   * @generated from field: repeated string excluded_primary_types = 4;
   */
  excludedPrimaryTypes: string[];
};

/**
 * Describes the message google.maps.areainsights.v1.TypeFilter.
 * Use `create(TypeFilterSchema)` to create a new message.
 */
export const TypeFilterSchema: GenMessage<TypeFilter> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 5);

/**
 * Average user rating filters.
 *
 * @generated from message google.maps.areainsights.v1.RatingFilter
 */
export type RatingFilter = Message<"google.maps.areainsights.v1.RatingFilter"> & {
  /**
   * Optional. Restricts results to places whose average user rating is greater
   * than or equal to min_rating. Values must be between 1.0 and 5.0.
   *
   * @generated from field: optional float min_rating = 5;
   */
  minRating?: number;

  /**
   * Optional. Restricts results to places whose average user rating is strictly
   * less than or equal to max_rating. Values must be between 1.0 and 5.0.
   *
   * @generated from field: optional float max_rating = 6;
   */
  maxRating?: number;
};

/**
 * Describes the message google.maps.areainsights.v1.RatingFilter.
 * Use `create(RatingFilterSchema)` to create a new message.
 */
export const RatingFilterSchema: GenMessage<RatingFilter> = /*@__PURE__*/
  messageDesc(file_google_maps_areainsights_v1_area_insights_service, 6);

/**
 * Supported insights.
 *
 * @generated from enum google.maps.areainsights.v1.Insight
 */
export enum Insight {
  /**
   * Not Specified.
   *
   * @generated from enum value: INSIGHT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Count insight.
   *
   * When this insight is specified ComputeInsights returns the number of
   * places that match the specified filter criteria.
   * ```
   * For example if the request is:
   * ComputeInsightsRequest {
   *   insights: INSIGHT_COUNT
   *   filter {
   *     location_filter {region: <PlaceId of state of CA>}
   *     type_filter {included_types: "restaurant"}
   *     operating_status: OPERATING_STATUS_OPERATIONAL
   *     price_levels: PRICE_LEVEL_FREE
   *     price_levels: PRICE_LEVEL_INEXPENSIVE
   *     min_rating: 4.0
   *   }
   * }
   *
   * The method will return the count of restaurants in California that are
   * operational, with price level free or inexpensive and have an average
   * rating of at least 4 starts.
   *
   * Example response:
   * ComputeInsightsResponse {
   *   count: <number of places>
   * }
   * ```
   *
   * @generated from enum value: INSIGHT_COUNT = 1;
   */
  COUNT = 1,

  /**
   * Return Places
   *
   * When this insight is specified ComputeInsights returns Places
   * that match the specified filter criteria.
   * ```
   * For example if the request is:
   * ComputeInsightsRequest {
   *   insights: INSIGHT_PLACES
   *   filter {
   *     location_filter {region: <PlaceId of state of CA>}
   *     type_filter {included_types: "restaurant"}
   *     operating_status: OPERATING_STATUS_OPERATIONAL
   *     price_levels: PRICE_LEVEL_FREE
   *     price_levels: PRICE_LEVEL_INEXPENSIVE
   *     min_rating: 4.0
   *   }
   * }
   *
   * The method will return list of places of restaurants in
   * California that are operational, with price level free or inexpensive and
   * have an average rating of at least 4 stars.
   *
   * Example response:
   * ComputeInsightsResponse {
   *   place_insights { place: "places/ABC" }
   *   place_insights { place: "places/PQR" }
   *   place_insights { place: "places/XYZ" }
   * }
   * ```
   *
   * @generated from enum value: INSIGHT_PLACES = 2;
   */
  PLACES = 2,
}

/**
 * Describes the enum google.maps.areainsights.v1.Insight.
 */
export const InsightSchema: GenEnum<Insight> = /*@__PURE__*/
  enumDesc(file_google_maps_areainsights_v1_area_insights_service, 0);

/**
 * Operating status of the place.
 *
 * @generated from enum google.maps.areainsights.v1.OperatingStatus
 */
export enum OperatingStatus {
  /**
   * Not Specified.
   *
   * @generated from enum value: OPERATING_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The place is operational and its open during its defined hours.
   *
   * @generated from enum value: OPERATING_STATUS_OPERATIONAL = 1;
   */
  OPERATIONAL = 1,

  /**
   * The Place is no longer in business.
   *
   * @generated from enum value: OPERATING_STATUS_PERMANENTLY_CLOSED = 3;
   */
  PERMANENTLY_CLOSED = 3,

  /**
   * The Place is temporarily closed and expected to reopen in the future.
   *
   * @generated from enum value: OPERATING_STATUS_TEMPORARILY_CLOSED = 4;
   */
  TEMPORARILY_CLOSED = 4,
}

/**
 * Describes the enum google.maps.areainsights.v1.OperatingStatus.
 */
export const OperatingStatusSchema: GenEnum<OperatingStatus> = /*@__PURE__*/
  enumDesc(file_google_maps_areainsights_v1_area_insights_service, 1);

/**
 * Price level of the place.
 *
 * @generated from enum google.maps.areainsights.v1.PriceLevel
 */
export enum PriceLevel {
  /**
   * Place price level is unspecified or unknown.
   *
   * @generated from enum value: PRICE_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Place provides free services.
   *
   * @generated from enum value: PRICE_LEVEL_FREE = 1;
   */
  FREE = 1,

  /**
   * Place provides inexpensive services.
   *
   * @generated from enum value: PRICE_LEVEL_INEXPENSIVE = 2;
   */
  INEXPENSIVE = 2,

  /**
   * Place provides moderately priced services.
   *
   * @generated from enum value: PRICE_LEVEL_MODERATE = 3;
   */
  MODERATE = 3,

  /**
   * Place provides expensive services.
   *
   * @generated from enum value: PRICE_LEVEL_EXPENSIVE = 4;
   */
  EXPENSIVE = 4,

  /**
   * Place provides very expensive services.
   *
   * @generated from enum value: PRICE_LEVEL_VERY_EXPENSIVE = 5;
   */
  VERY_EXPENSIVE = 5,
}

/**
 * Describes the enum google.maps.areainsights.v1.PriceLevel.
 */
export const PriceLevelSchema: GenEnum<PriceLevel> = /*@__PURE__*/
  enumDesc(file_google_maps_areainsights_v1_area_insights_service, 2);

/**
 * Service definition for the Places Insights API.
 *
 * @generated from service google.maps.areainsights.v1.AreaInsights
 */
export const AreaInsights: GenService<{
  /**
   * Compute Insights RPC
   *
   * This method lets you retrieve insights about areas using a variaty of
   * filter such as: area, place type, operating status, price level
   * and ratings. Currently "count" and "places" insights are supported. With
   * "count" insights you can answer questions such as "How many restaurant are
   * located in California that are operational, are inexpensive and have an
   * average rating of at least 4 stars" (see `insight` enum for more details).
   * With "places" insights, you can determine which places match the
   * requested filter. Clients can then use those place resource names to fetch
   * more details about each individual place using the Places API.
   *
   * @generated from rpc google.maps.areainsights.v1.AreaInsights.ComputeInsights
   */
  computeInsights: {
    methodKind: "unary";
    input: typeof ComputeInsightsRequestSchema;
    output: typeof ComputeInsightsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_maps_areainsights_v1_area_insights_service, 0);

