// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/appengine/v1beta/certificate.proto (package google.appengine.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/appengine/v1beta/certificate.proto.
 */
export const file_google_appengine_v1beta_certificate: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvYXBwZW5naW5lL3YxYmV0YS9jZXJ0aWZpY2F0ZS5wcm90bxIXZ29vZ2xlLmFwcGVuZ2luZS52MWJldGEi4wIKFUF1dGhvcml6ZWRDZXJ0aWZpY2F0ZRIMCgRuYW1lGAEgASgJEgoKAmlkGAIgASgJEhQKDGRpc3BsYXlfbmFtZRgDIAEoCRIUCgxkb21haW5fbmFtZXMYBCADKAkSLwoLZXhwaXJlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkkKFGNlcnRpZmljYXRlX3Jhd19kYXRhGAYgASgLMisuZ29vZ2xlLmFwcGVuZ2luZS52MWJldGEuQ2VydGlmaWNhdGVSYXdEYXRhEkgKE21hbmFnZWRfY2VydGlmaWNhdGUYByABKAsyKy5nb29nbGUuYXBwZW5naW5lLnYxYmV0YS5NYW5hZ2VkQ2VydGlmaWNhdGUSHwoXdmlzaWJsZV9kb21haW5fbWFwcGluZ3MYCCADKAkSHQoVZG9tYWluX21hcHBpbmdzX2NvdW50GAkgASgFIkUKEkNlcnRpZmljYXRlUmF3RGF0YRIaChJwdWJsaWNfY2VydGlmaWNhdGUYASABKAkSEwoLcHJpdmF0ZV9rZXkYAiABKAkihgEKEk1hbmFnZWRDZXJ0aWZpY2F0ZRI1ChFsYXN0X3JlbmV3YWxfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASOQoGc3RhdHVzGAIgASgOMikuZ29vZ2xlLmFwcGVuZ2luZS52MWJldGEuTWFuYWdlbWVudFN0YXR1cyrGAQoQTWFuYWdlbWVudFN0YXR1cxIhCh1NQU5BR0VNRU5UX1NUQVRVU19VTlNQRUNJRklFRBAAEgYKAk9LEAESCwoHUEVORElORxACEh8KG0ZBSUxFRF9SRVRSWUlOR19OT1RfVklTSUJMRRAEEhQKEEZBSUxFRF9QRVJNQU5FTlQQBhIhCh1GQUlMRURfUkVUUllJTkdfQ0FBX0ZPUkJJRERFThAHEiAKHEZBSUxFRF9SRVRSWUlOR19DQUFfQ0hFQ0tJTkcQCELWAQobY29tLmdvb2dsZS5hcHBlbmdpbmUudjFiZXRhQhBDZXJ0aWZpY2F0ZVByb3RvUAFaQGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYXBwZW5naW5lL3YxYmV0YTthcHBlbmdpbmWqAh1Hb29nbGUuQ2xvdWQuQXBwRW5naW5lLlYxQmV0YcoCHUdvb2dsZVxDbG91ZFxBcHBFbmdpbmVcVjFiZXRh6gIgR29vZ2xlOjpDbG91ZDo6QXBwRW5naW5lOjpWMWJldGFiBnByb3RvMw", [file_google_protobuf_timestamp]);

/**
 * An SSL certificate that a user has been authorized to administer. A user
 * is authorized to administer any certificate that applies to one of their
 * authorized domains.
 *
 * @generated from message google.appengine.v1beta.AuthorizedCertificate
 */
export type AuthorizedCertificate = Message<"google.appengine.v1beta.AuthorizedCertificate"> & {
  /**
   * Full path to the `AuthorizedCertificate` resource in the API. Example:
   * `apps/myapp/authorizedCertificates/12345`.
   *
   * @OutputOnly
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Relative name of the certificate. This is a unique value autogenerated
   * on `AuthorizedCertificate` resource creation. Example: `12345`.
   *
   * @OutputOnly
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The user-specified display name of the certificate. This is not
   * guaranteed to be unique. Example: `My Certificate`.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Topmost applicable domains of this certificate. This certificate
   * applies to these domains and their subdomains. Example: `example.com`.
   *
   * @OutputOnly
   *
   * @generated from field: repeated string domain_names = 4;
   */
  domainNames: string[];

  /**
   * The time when this certificate expires. To update the renewal time on this
   * certificate, upload an SSL certificate with a different expiration time
   * using [`AuthorizedCertificates.UpdateAuthorizedCertificate`]().
   *
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * The SSL certificate serving the `AuthorizedCertificate` resource. This
   * must be obtained independently from a certificate authority.
   *
   * @generated from field: google.appengine.v1beta.CertificateRawData certificate_raw_data = 6;
   */
  certificateRawData?: CertificateRawData;

  /**
   * Only applicable if this certificate is managed by App Engine. Managed
   * certificates are tied to the lifecycle of a `DomainMapping` and cannot be
   * updated or deleted via the `AuthorizedCertificates` API. If this
   * certificate is manually administered by the user, this field will be empty.
   *
   * @OutputOnly
   *
   * @generated from field: google.appengine.v1beta.ManagedCertificate managed_certificate = 7;
   */
  managedCertificate?: ManagedCertificate;

  /**
   * The full paths to user visible Domain Mapping resources that have this
   * certificate mapped. Example: `apps/myapp/domainMappings/example.com`.
   *
   * This may not represent the full list of mapped domain mappings if the user
   * does not have `VIEWER` permissions on all of the applications that have
   * this certificate mapped. See `domain_mappings_count` for a complete count.
   *
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   *
   * @OutputOnly
   *
   * @generated from field: repeated string visible_domain_mappings = 8;
   */
  visibleDomainMappings: string[];

  /**
   * Aggregate count of the domain mappings with this certificate mapped. This
   * count includes domain mappings on applications for which the user does not
   * have `VIEWER` permissions.
   *
   * Only returned by `GET` or `LIST` requests when specifically requested by
   * the `view=FULL_CERTIFICATE` option.
   *
   * @OutputOnly
   *
   * @generated from field: int32 domain_mappings_count = 9;
   */
  domainMappingsCount: number;
};

/**
 * Describes the message google.appengine.v1beta.AuthorizedCertificate.
 * Use `create(AuthorizedCertificateSchema)` to create a new message.
 */
export const AuthorizedCertificateSchema: GenMessage<AuthorizedCertificate> = /*@__PURE__*/
  messageDesc(file_google_appengine_v1beta_certificate, 0);

/**
 * An SSL certificate obtained from a certificate authority.
 *
 * @generated from message google.appengine.v1beta.CertificateRawData
 */
export type CertificateRawData = Message<"google.appengine.v1beta.CertificateRawData"> & {
  /**
   * PEM encoded x.509 public key certificate. This field is set once on
   * certificate creation. Must include the header and footer. Example:
   * <pre>
   * -----BEGIN CERTIFICATE-----
   * <certificate_value>
   * -----END CERTIFICATE-----
   * </pre>
   *
   * @generated from field: string public_certificate = 1;
   */
  publicCertificate: string;

  /**
   * Unencrypted PEM encoded RSA private key. This field is set once on
   * certificate creation and then encrypted. The key size must be 2048
   * bits or fewer. Must include the header and footer. Example:
   * <pre>
   * -----BEGIN RSA PRIVATE KEY-----
   * <unencrypted_key_value>
   * -----END RSA PRIVATE KEY-----
   * </pre>
   * @InputOnly
   *
   * @generated from field: string private_key = 2;
   */
  privateKey: string;
};

/**
 * Describes the message google.appengine.v1beta.CertificateRawData.
 * Use `create(CertificateRawDataSchema)` to create a new message.
 */
export const CertificateRawDataSchema: GenMessage<CertificateRawData> = /*@__PURE__*/
  messageDesc(file_google_appengine_v1beta_certificate, 1);

/**
 * A certificate managed by App Engine.
 *
 * @generated from message google.appengine.v1beta.ManagedCertificate
 */
export type ManagedCertificate = Message<"google.appengine.v1beta.ManagedCertificate"> & {
  /**
   * Time at which the certificate was last renewed. The renewal process is
   * fully managed. Certificate renewal will automatically occur before the
   * certificate expires. Renewal errors can be tracked via `ManagementStatus`.
   *
   * @OutputOnly
   *
   * @generated from field: google.protobuf.Timestamp last_renewal_time = 1;
   */
  lastRenewalTime?: Timestamp;

  /**
   * Status of certificate management. Refers to the most recent certificate
   * acquisition or renewal attempt.
   *
   * @OutputOnly
   *
   * @generated from field: google.appengine.v1beta.ManagementStatus status = 2;
   */
  status: ManagementStatus;
};

/**
 * Describes the message google.appengine.v1beta.ManagedCertificate.
 * Use `create(ManagedCertificateSchema)` to create a new message.
 */
export const ManagedCertificateSchema: GenMessage<ManagedCertificate> = /*@__PURE__*/
  messageDesc(file_google_appengine_v1beta_certificate, 2);

/**
 * State of certificate management. Refers to the most recent certificate
 * acquisition or renewal attempt.
 *
 * @generated from enum google.appengine.v1beta.ManagementStatus
 */
export enum ManagementStatus {
  /**
   * @generated from enum value: MANAGEMENT_STATUS_UNSPECIFIED = 0;
   */
  MANAGEMENT_STATUS_UNSPECIFIED = 0,

  /**
   * Certificate was successfully obtained and inserted into the serving
   * system.
   *
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * Certificate is under active attempts to acquire or renew.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * Most recent renewal failed due to an invalid DNS setup and will be
   * retried. Renewal attempts will continue to fail until the certificate
   * domain's DNS configuration is fixed. The last successfully provisioned
   * certificate may still be serving.
   *
   * @generated from enum value: FAILED_RETRYING_NOT_VISIBLE = 4;
   */
  FAILED_RETRYING_NOT_VISIBLE = 4,

  /**
   * All renewal attempts have been exhausted, likely due to an invalid DNS
   * setup.
   *
   * @generated from enum value: FAILED_PERMANENT = 6;
   */
  FAILED_PERMANENT = 6,

  /**
   * Most recent renewal failed due to an explicit CAA record that does not
   * include one of the in-use CAs (Google CA and Let's Encrypt). Renewals will
   * continue to fail until the CAA is reconfigured. The last successfully
   * provisioned certificate may still be serving.
   *
   * @generated from enum value: FAILED_RETRYING_CAA_FORBIDDEN = 7;
   */
  FAILED_RETRYING_CAA_FORBIDDEN = 7,

  /**
   * Most recent renewal failed due to a CAA retrieval failure. This means that
   * the domain's DNS provider does not properly handle CAA records, failing
   * requests for CAA records when no CAA records are defined. Renewals will
   * continue to fail until the DNS provider is changed or a CAA record is
   * added for the given domain. The last successfully provisioned certificate
   * may still be serving.
   *
   * @generated from enum value: FAILED_RETRYING_CAA_CHECKING = 8;
   */
  FAILED_RETRYING_CAA_CHECKING = 8,
}

/**
 * Describes the enum google.appengine.v1beta.ManagementStatus.
 */
export const ManagementStatusSchema: GenEnum<ManagementStatus> = /*@__PURE__*/
  enumDesc(file_google_appengine_v1beta_certificate, 0);

