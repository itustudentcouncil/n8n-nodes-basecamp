// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/api/documentation.proto (package google.api, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/api/documentation.proto.
 */
export const file_google_api_documentation: GenFile = /*@__PURE__*/
  fileDesc("Ch5nb29nbGUvYXBpL2RvY3VtZW50YXRpb24ucHJvdG8SCmdvb2dsZS5hcGkiuwEKDURvY3VtZW50YXRpb24SDwoHc3VtbWFyeRgBIAEoCRIfCgVwYWdlcxgFIAMoCzIQLmdvb2dsZS5hcGkuUGFnZRIsCgVydWxlcxgDIAMoCzIdLmdvb2dsZS5hcGkuRG9jdW1lbnRhdGlvblJ1bGUSHgoWZG9jdW1lbnRhdGlvbl9yb290X3VybBgEIAEoCRIYChBzZXJ2aWNlX3Jvb3RfdXJsGAYgASgJEhAKCG92ZXJ2aWV3GAIgASgJIlsKEURvY3VtZW50YXRpb25SdWxlEhAKCHNlbGVjdG9yGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEh8KF2RlcHJlY2F0aW9uX2Rlc2NyaXB0aW9uGAMgASgJIkkKBFBhZ2USDAoEbmFtZRgBIAEoCRIPCgdjb250ZW50GAIgASgJEiIKCHN1YnBhZ2VzGAMgAygLMhAuZ29vZ2xlLmFwaS5QYWdlQnQKDmNvbS5nb29nbGUuYXBpQhJEb2N1bWVudGF0aW9uUHJvdG9QAVpFZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9hcGkvc2VydmljZWNvbmZpZztzZXJ2aWNlY29uZmlnogIER0FQSWIGcHJvdG8z");

/**
 * `Documentation` provides the information for describing a service.
 *
 * Example:
 * <pre><code>documentation:
 *   summary: >
 *     The Google Calendar API gives access
 *     to most calendar features.
 *   pages:
 *   - name: Overview
 *     content: &#40;== include google/foo/overview.md ==&#41;
 *   - name: Tutorial
 *     content: &#40;== include google/foo/tutorial.md ==&#41;
 *     subpages:
 *     - name: Java
 *       content: &#40;== include google/foo/tutorial_java.md ==&#41;
 *   rules:
 *   - selector: google.calendar.Calendar.Get
 *     description: >
 *       ...
 *   - selector: google.calendar.Calendar.Put
 *     description: >
 *       ...
 * </code></pre>
 * Documentation is provided in markdown syntax. In addition to
 * standard markdown features, definition lists, tables and fenced
 * code blocks are supported. Section headers can be provided and are
 * interpreted relative to the section nesting of the context where
 * a documentation fragment is embedded.
 *
 * Documentation from the IDL is merged with documentation defined
 * via the config at normalization time, where documentation provided
 * by config rules overrides IDL provided.
 *
 * A number of constructs specific to the API platform are supported
 * in documentation text.
 *
 * In order to reference a proto element, the following
 * notation can be used:
 * <pre><code>&#91;fully.qualified.proto.name]&#91;]</code></pre>
 * To override the display text used for the link, this can be used:
 * <pre><code>&#91;display text]&#91;fully.qualified.proto.name]</code></pre>
 * Text can be excluded from doc using the following notation:
 * <pre><code>&#40;-- internal comment --&#41;</code></pre>
 *
 * A few directives are available in documentation. Note that
 * directives must appear on a single line to be properly
 * identified. The `include` directive includes a markdown file from
 * an external source:
 * <pre><code>&#40;== include path/to/file ==&#41;</code></pre>
 * The `resource_for` directive marks a message to be the resource of
 * a collection in REST view. If it is not specified, tools attempt
 * to infer the resource from the operations in a collection:
 * <pre><code>&#40;== resource_for v1.shelves.books ==&#41;</code></pre>
 * The directive `suppress_warning` does not directly affect documentation
 * and is documented together with service config validation.
 *
 * @generated from message google.api.Documentation
 */
export type Documentation = Message<"google.api.Documentation"> & {
  /**
   * A short description of what the service does. The summary must be plain
   * text. It becomes the overview of the service displayed in Google Cloud
   * Console.
   * NOTE: This field is equivalent to the standard field `description`.
   *
   * @generated from field: string summary = 1;
   */
  summary: string;

  /**
   * The top level pages for the documentation set.
   *
   * @generated from field: repeated google.api.Page pages = 5;
   */
  pages: Page[];

  /**
   * A list of documentation rules that apply to individual API elements.
   *
   * **NOTE:** All service configuration rules follow "last one wins" order.
   *
   * @generated from field: repeated google.api.DocumentationRule rules = 3;
   */
  rules: DocumentationRule[];

  /**
   * The URL to the root of documentation.
   *
   * @generated from field: string documentation_root_url = 4;
   */
  documentationRootUrl: string;

  /**
   * Specifies the service root url if the default one (the service name
   * from the yaml file) is not suitable. This can be seen in any fully
   * specified service urls as well as sections that show a base that other
   * urls are relative to.
   *
   * @generated from field: string service_root_url = 6;
   */
  serviceRootUrl: string;

  /**
   * Declares a single overview page. For example:
   * <pre><code>documentation:
   *   summary: ...
   *   overview: &#40;== include overview.md ==&#41;
   * </code></pre>
   * This is a shortcut for the following declaration (using pages style):
   * <pre><code>documentation:
   *   summary: ...
   *   pages:
   *   - name: Overview
   *     content: &#40;== include overview.md ==&#41;
   * </code></pre>
   * Note: you cannot specify both `overview` field and `pages` field.
   *
   * @generated from field: string overview = 2;
   */
  overview: string;
};

/**
 * Describes the message google.api.Documentation.
 * Use `create(DocumentationSchema)` to create a new message.
 */
export const DocumentationSchema: GenMessage<Documentation> = /*@__PURE__*/
  messageDesc(file_google_api_documentation, 0);

/**
 * A documentation rule provides information about individual API elements.
 *
 * @generated from message google.api.DocumentationRule
 */
export type DocumentationRule = Message<"google.api.DocumentationRule"> & {
  /**
   * The selector is a comma-separated list of patterns for any element such as
   * a method, a field, an enum value. Each pattern is a qualified name of the
   * element which may end in "*", indicating a wildcard. Wildcards are only
   * allowed at the end and for a whole component of the qualified name,
   * i.e. "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match
   * one or more components. To specify a default for all applicable elements,
   * the whole pattern "*" is used.
   *
   * @generated from field: string selector = 1;
   */
  selector: string;

  /**
   * Description of the selected proto element (e.g. a message, a method, a
   * 'service' definition, or a field). Defaults to leading & trailing comments
   * taken from the proto source definition of the proto element.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Deprecation description of the selected element(s). It can be provided if
   * an element is marked as `deprecated`.
   *
   * @generated from field: string deprecation_description = 3;
   */
  deprecationDescription: string;
};

/**
 * Describes the message google.api.DocumentationRule.
 * Use `create(DocumentationRuleSchema)` to create a new message.
 */
export const DocumentationRuleSchema: GenMessage<DocumentationRule> = /*@__PURE__*/
  messageDesc(file_google_api_documentation, 1);

/**
 * Represents a documentation page. A page can contain subpages to represent
 * nested documentation set structure.
 *
 * @generated from message google.api.Page
 */
export type Page = Message<"google.api.Page"> & {
  /**
   * The name of the page. It will be used as an identity of the page to
   * generate URI of the page, text of the link to this page in navigation,
   * etc. The full page name (start from the root page name to this page
   * concatenated with `.`) can be used as reference to the page in your
   * documentation. For example:
   * <pre><code>pages:
   * - name: Tutorial
   *   content: &#40;== include tutorial.md ==&#41;
   *   subpages:
   *   - name: Java
   *     content: &#40;== include tutorial_java.md ==&#41;
   * </code></pre>
   * You can reference `Java` page using Markdown reference link syntax:
   * `[Java][Tutorial.Java]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The Markdown content of the page. You can use <code>&#40;== include {path}
   * ==&#41;</code> to include content from a Markdown file. The content can be
   * used to produce the documentation page such as HTML format page.
   *
   * @generated from field: string content = 2;
   */
  content: string;

  /**
   * Subpages of this page. The order of subpages specified here will be
   * honored in the generated docset.
   *
   * @generated from field: repeated google.api.Page subpages = 3;
   */
  subpages: Page[];
};

/**
 * Describes the message google.api.Page.
 * Use `create(PageSchema)` to create a new message.
 */
export const PageSchema: GenMessage<Page> = /*@__PURE__*/
  messageDesc(file_google_api_documentation, 2);

