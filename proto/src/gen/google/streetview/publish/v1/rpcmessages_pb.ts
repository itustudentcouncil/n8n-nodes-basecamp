// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/streetview/publish/v1/rpcmessages.proto (package google.streetview.publish.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Operation } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Photo, PhotoSequence } from "./resources_pb";
import { file_google_streetview_publish_v1_resources } from "./resources_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/streetview/publish/v1/rpcmessages.proto.
 */
export const file_google_streetview_publish_v1_rpcmessages: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvc3RyZWV0dmlldy9wdWJsaXNoL3YxL3JwY21lc3NhZ2VzLnByb3RvEhxnb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxIk0KEkNyZWF0ZVBob3RvUmVxdWVzdBI3CgVwaG90bxgBIAEoCzIjLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9CA+BBAiJ7Cg9HZXRQaG90b1JlcXVlc3QSFQoIcGhvdG9faWQYASABKAlCA+BBAhI6CgR2aWV3GAIgASgOMicuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90b1ZpZXdCA+BBAhIVCg1sYW5ndWFnZV9jb2RlGAMgASgJIocBChVCYXRjaEdldFBob3Rvc1JlcXVlc3QSFgoJcGhvdG9faWRzGAEgAygJQgPgQQISOgoEdmlldxgCIAEoDjInLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9WaWV3QgPgQQISGgoNbGFuZ3VhZ2VfY29kZRgDIAEoCUID4EEBIlYKFkJhdGNoR2V0UGhvdG9zUmVzcG9uc2USPAoHcmVzdWx0cxgBIAMoCzIrLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9SZXNwb25zZSJnCg1QaG90b1Jlc3BvbnNlEiIKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzEjIKBXBob3RvGAIgASgLMiMuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90byKxAQoRTGlzdFBob3Rvc1JlcXVlc3QSOgoEdmlldxgBIAEoDjInLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9WaWV3QgPgQQISFgoJcGFnZV9zaXplGAIgASgFQgPgQQESFwoKcGFnZV90b2tlbhgDIAEoCUID4EEBEhMKBmZpbHRlchgEIAEoCUID4EEBEhoKDWxhbmd1YWdlX2NvZGUYBSABKAlCA+BBASJiChJMaXN0UGhvdG9zUmVzcG9uc2USMwoGcGhvdG9zGAEgAygLMiMuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90bxIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkigwEKElVwZGF0ZVBob3RvUmVxdWVzdBI3CgVwaG90bxgBIAEoCzIjLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9CA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAiJwChhCYXRjaFVwZGF0ZVBob3Rvc1JlcXVlc3QSVAoVdXBkYXRlX3Bob3RvX3JlcXVlc3RzGAEgAygLMjAuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5VcGRhdGVQaG90b1JlcXVlc3RCA+BBAiJZChlCYXRjaFVwZGF0ZVBob3Rvc1Jlc3BvbnNlEjwKB3Jlc3VsdHMYASADKAsyKy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBob3RvUmVzcG9uc2UiKwoSRGVsZXRlUGhvdG9SZXF1ZXN0EhUKCHBob3RvX2lkGAEgASgJQgPgQQIiMgoYQmF0Y2hEZWxldGVQaG90b3NSZXF1ZXN0EhYKCXBob3RvX2lkcxgBIAMoCUID4EECIoACChpDcmVhdGVQaG90b1NlcXVlbmNlUmVxdWVzdBJICg5waG90b19zZXF1ZW5jZRgBIAEoCzIrLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9TZXF1ZW5jZUID4EECElsKCmlucHV0X3R5cGUYAiABKA4yQi5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkNyZWF0ZVBob3RvU2VxdWVuY2VSZXF1ZXN0LklucHV0VHlwZUID4EECIjsKCUlucHV0VHlwZRIaChZJTlBVVF9UWVBFX1VOU1BFQ0lGSUVEEAASCQoFVklERU8QARIHCgNYRE0QAiKDAQoXR2V0UGhvdG9TZXF1ZW5jZVJlcXVlc3QSGAoLc2VxdWVuY2VfaWQYASABKAlCA+BBAhI5CgR2aWV3GAIgASgOMicuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90b1ZpZXdCAhgBEhMKBmZpbHRlchgDIAEoCUID4EEBIjYKGkRlbGV0ZVBob3RvU2VxdWVuY2VSZXF1ZXN0EhgKC3NlcXVlbmNlX2lkGAEgASgJQgPgQQIiPwoZQmF0Y2hEZWxldGVQaG90b3NSZXNwb25zZRIiCgZzdGF0dXMYASADKAsyEi5nb29nbGUucnBjLlN0YXR1cyJhChlMaXN0UGhvdG9TZXF1ZW5jZXNSZXF1ZXN0EhYKCXBhZ2Vfc2l6ZRgBIAEoBUID4EEBEhcKCnBhZ2VfdG9rZW4YAiABKAlCA+BBARITCgZmaWx0ZXIYBCABKAlCA+BBASJtChpMaXN0UGhvdG9TZXF1ZW5jZXNSZXNwb25zZRI2Cg9waG90b19zZXF1ZW5jZXMYASADKAsyHS5nb29nbGUubG9uZ3J1bm5pbmcuT3BlcmF0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSowCglQaG90b1ZpZXcSCQoFQkFTSUMQABIYChRJTkNMVURFX0RPV05MT0FEX1VSTBABQooBCihjb20uZ29vZ2xlLmdlby51Z2Muc3RyZWV0dmlldy5wdWJsaXNoLnYxQhxTdHJlZXRWaWV3UHVibGlzaFJwY01lc3NhZ2VzWkBjbG91ZC5nb29nbGUuY29tL2dvL3N0cmVldHZpZXcvcHVibGlzaC9hcGl2MS9wdWJsaXNocGI7cHVibGlzaHBiYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_field_mask, file_google_rpc_status, file_google_streetview_publish_v1_resources]);

/**
 * Request to create a [Photo][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.CreatePhotoRequest
 */
export type CreatePhotoRequest = Message<"google.streetview.publish.v1.CreatePhotoRequest"> & {
  /**
   * Required. Photo to create.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 1;
   */
  photo?: Photo;
};

/**
 * Describes the message google.streetview.publish.v1.CreatePhotoRequest.
 * Use `create(CreatePhotoRequestSchema)` to create a new message.
 */
export const CreatePhotoRequestSchema: GenMessage<CreatePhotoRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 0);

/**
 * Request to get a [Photo][google.streetview.publish.v1.Photo].
 *
 * By default
 *
 * * does not return the download URL for the photo bytes.
 *
 * Parameters:
 *
 * * `view` controls if the download URL for the photo bytes is returned.
 *
 * @generated from message google.streetview.publish.v1.GetPhotoRequest
 */
export type GetPhotoRequest = Message<"google.streetview.publish.v1.GetPhotoRequest"> & {
  /**
   * Required. ID of the [Photo][google.streetview.publish.v1.Photo].
   *
   * @generated from field: string photo_id = 1;
   */
  photoId: string;

  /**
   * Required. Specifies if a download URL for the photo bytes should be
   * returned in the [Photo][google.streetview.publish.v1.Photo] response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 2;
   */
  view: PhotoView;

  /**
   * The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * If language_code is unspecified, the user's language preference for Google
   * services is used.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;
};

/**
 * Describes the message google.streetview.publish.v1.GetPhotoRequest.
 * Use `create(GetPhotoRequestSchema)` to create a new message.
 */
export const GetPhotoRequestSchema: GenMessage<GetPhotoRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 1);

/**
 * Request to get one or more [Photos][google.streetview.publish.v1.Photo].
 * By default
 *
 * * does not return the download URL for the photo bytes.
 *
 * Parameters:
 *
 * * `view` controls if the download URL for the photo bytes is returned.
 *
 * @generated from message google.streetview.publish.v1.BatchGetPhotosRequest
 */
export type BatchGetPhotosRequest = Message<"google.streetview.publish.v1.BatchGetPhotosRequest"> & {
  /**
   * Required. IDs of the [Photos][google.streetview.publish.v1.Photo]. For HTTP
   * GET requests, the URL query parameter should be
   * `photoIds=<id1>&photoIds=<id2>&...`.
   *
   * @generated from field: repeated string photo_ids = 1;
   */
  photoIds: string[];

  /**
   * Required. Specifies if a download URL for the photo bytes should be
   * returned in the Photo response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 2;
   */
  view: PhotoView;

  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * If language_code is unspecified, the user's language preference for Google
   * services is used.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;
};

/**
 * Describes the message google.streetview.publish.v1.BatchGetPhotosRequest.
 * Use `create(BatchGetPhotosRequestSchema)` to create a new message.
 */
export const BatchGetPhotosRequestSchema: GenMessage<BatchGetPhotosRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 2);

/**
 * Response to batch get of [Photos][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.BatchGetPhotosResponse
 */
export type BatchGetPhotosResponse = Message<"google.streetview.publish.v1.BatchGetPhotosResponse"> & {
  /**
   * List of results for each individual
   * [Photo][google.streetview.publish.v1.Photo] requested, in the same order as
   * the requests in
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos].
   *
   * @generated from field: repeated google.streetview.publish.v1.PhotoResponse results = 1;
   */
  results: PhotoResponse[];
};

/**
 * Describes the message google.streetview.publish.v1.BatchGetPhotosResponse.
 * Use `create(BatchGetPhotosResponseSchema)` to create a new message.
 */
export const BatchGetPhotosResponseSchema: GenMessage<BatchGetPhotosResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 3);

/**
 * Response payload for a single
 * [Photo][google.streetview.publish.v1.Photo]
 * in batch operations including
 * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
 * and
 * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos].
 *
 * @generated from message google.streetview.publish.v1.PhotoResponse
 */
export type PhotoResponse = Message<"google.streetview.publish.v1.PhotoResponse"> & {
  /**
   * The status for the operation to get or update a single photo in the batch
   * request.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * The [Photo][google.streetview.publish.v1.Photo] resource, if the request
   * was successful.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 2;
   */
  photo?: Photo;
};

/**
 * Describes the message google.streetview.publish.v1.PhotoResponse.
 * Use `create(PhotoResponseSchema)` to create a new message.
 */
export const PhotoResponseSchema: GenMessage<PhotoResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 4);

/**
 * Request to list all photos that belong to the user sending the request.
 *
 * By default
 *
 * * does not return the download URL for the photo bytes.
 *
 * Parameters:
 *
 * * `view` controls if the download URL for the photo bytes is returned.
 * * `pageSize` determines the maximum number of photos to return.
 * * `pageToken` is the next page token value returned from a previous
 * [ListPhotos][google.streetview.publish.v1.StreetViewPublishService.ListPhotos]
 *     request, if any.
 * * `filter` allows filtering by a given parameter. 'placeId' is the only
 * parameter supported at the moment.
 *
 * @generated from message google.streetview.publish.v1.ListPhotosRequest
 */
export type ListPhotosRequest = Message<"google.streetview.publish.v1.ListPhotosRequest"> & {
  /**
   * Required. Specifies if a download URL for the photos bytes should be
   * returned in the Photos response.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 1;
   */
  view: PhotoView;

  /**
   * Optional. The maximum number of photos to return.
   * `pageSize` must be non-negative. If `pageSize` is zero or is not provided,
   * the default page size of 100 is used.
   * The number of photos returned in the response may be less than `pageSize`
   * if the number of photos that belong to the user is less than `pageSize`.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The
   * [nextPageToken][google.streetview.publish.v1.ListPhotosResponse.next_page_token]
   * value returned from a previous
   * [ListPhotos][google.streetview.publish.v1.StreetViewPublishService.ListPhotos]
   * request, if any.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The filter expression. For example:
   * `placeId=ChIJj61dQgK6j4AR4GeTYWZsKWw`.
   *
   * The filters supported are: `placeId`, `min_latitude`, `max_latitude`,
   * `min_longitude`, `max_longitude`. See https://google.aip.dev/160 for more
   * information.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional. The BCP-47 language code, such as "en-US" or "sr-Latn". For more
   * information, see
   * http://www.unicode.org/reports/tr35/#Unicode_locale_identifier.
   * If language_code is unspecified, the user's language preference for Google
   * services is used.
   *
   * @generated from field: string language_code = 5;
   */
  languageCode: string;
};

/**
 * Describes the message google.streetview.publish.v1.ListPhotosRequest.
 * Use `create(ListPhotosRequestSchema)` to create a new message.
 */
export const ListPhotosRequestSchema: GenMessage<ListPhotosRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 5);

/**
 * Response to list all photos that belong to a user.
 *
 * @generated from message google.streetview.publish.v1.ListPhotosResponse
 */
export type ListPhotosResponse = Message<"google.streetview.publish.v1.ListPhotosResponse"> & {
  /**
   * List of photos. The
   * [pageSize][google.streetview.publish.v1.ListPhotosRequest.page_size] field
   * in the request determines the number of items returned.
   *
   * @generated from field: repeated google.streetview.publish.v1.Photo photos = 1;
   */
  photos: Photo[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.streetview.publish.v1.ListPhotosResponse.
 * Use `create(ListPhotosResponseSchema)` to create a new message.
 */
export const ListPhotosResponseSchema: GenMessage<ListPhotosResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 6);

/**
 * Request to update the metadata of a
 * [Photo][google.streetview.publish.v1.Photo]. Updating the pixels of a photo
 * is not supported.
 *
 * @generated from message google.streetview.publish.v1.UpdatePhotoRequest
 */
export type UpdatePhotoRequest = Message<"google.streetview.publish.v1.UpdatePhotoRequest"> & {
  /**
   * Required. [Photo][google.streetview.publish.v1.Photo] object containing the
   * new metadata.
   *
   * @generated from field: google.streetview.publish.v1.Photo photo = 1;
   */
  photo?: Photo;

  /**
   * Required. Mask that identifies fields on the photo metadata to update.
   * If not present, the old [Photo][google.streetview.publish.v1.Photo]
   * metadata is entirely replaced with the
   * new [Photo][google.streetview.publish.v1.Photo] metadata in this request.
   * The update fails if invalid fields are specified. Multiple fields can be
   * specified in a comma-delimited list.
   *
   * The following fields are valid:
   *
   * * `pose.heading`
   * * `pose.lat_lng_pair`
   * * `pose.pitch`
   * * `pose.roll`
   * * `pose.level`
   * * `pose.altitude`
   * * `connections`
   * * `places`
   *
   *
   * > Note: When
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * contains repeated fields, the entire set of repeated values get replaced
   * with the new contents. For example, if
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * contains `connections` and `UpdatePhotoRequest.photo.connections` is empty,
   * all connections are removed.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.streetview.publish.v1.UpdatePhotoRequest.
 * Use `create(UpdatePhotoRequestSchema)` to create a new message.
 */
export const UpdatePhotoRequestSchema: GenMessage<UpdatePhotoRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 7);

/**
 * Request to update the metadata of photos.
 * Updating the pixels of photos is not supported.
 *
 * @generated from message google.streetview.publish.v1.BatchUpdatePhotosRequest
 */
export type BatchUpdatePhotosRequest = Message<"google.streetview.publish.v1.BatchUpdatePhotosRequest"> & {
  /**
   * Required. List of
   * [UpdatePhotoRequests][google.streetview.publish.v1.UpdatePhotoRequest].
   *
   * @generated from field: repeated google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
   */
  updatePhotoRequests: UpdatePhotoRequest[];
};

/**
 * Describes the message google.streetview.publish.v1.BatchUpdatePhotosRequest.
 * Use `create(BatchUpdatePhotosRequestSchema)` to create a new message.
 */
export const BatchUpdatePhotosRequestSchema: GenMessage<BatchUpdatePhotosRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 8);

/**
 * Response to batch update of metadata of one or more
 * [Photos][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.BatchUpdatePhotosResponse
 */
export type BatchUpdatePhotosResponse = Message<"google.streetview.publish.v1.BatchUpdatePhotosResponse"> & {
  /**
   * List of results for each individual
   * [Photo][google.streetview.publish.v1.Photo] updated, in the same order as
   * the request.
   *
   * @generated from field: repeated google.streetview.publish.v1.PhotoResponse results = 1;
   */
  results: PhotoResponse[];
};

/**
 * Describes the message google.streetview.publish.v1.BatchUpdatePhotosResponse.
 * Use `create(BatchUpdatePhotosResponseSchema)` to create a new message.
 */
export const BatchUpdatePhotosResponseSchema: GenMessage<BatchUpdatePhotosResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 9);

/**
 * Request to delete a [Photo][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.DeletePhotoRequest
 */
export type DeletePhotoRequest = Message<"google.streetview.publish.v1.DeletePhotoRequest"> & {
  /**
   * Required. ID of the [Photo][google.streetview.publish.v1.Photo].
   *
   * @generated from field: string photo_id = 1;
   */
  photoId: string;
};

/**
 * Describes the message google.streetview.publish.v1.DeletePhotoRequest.
 * Use `create(DeletePhotoRequestSchema)` to create a new message.
 */
export const DeletePhotoRequestSchema: GenMessage<DeletePhotoRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 10);

/**
 * Request to delete multiple [Photos][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.BatchDeletePhotosRequest
 */
export type BatchDeletePhotosRequest = Message<"google.streetview.publish.v1.BatchDeletePhotosRequest"> & {
  /**
   * Required. IDs of the [Photos][google.streetview.publish.v1.Photo]. HTTP
   * GET requests require the following syntax for the URL query parameter:
   * `photoIds=<id1>&photoIds=<id2>&...`.
   *
   * @generated from field: repeated string photo_ids = 1;
   */
  photoIds: string[];
};

/**
 * Describes the message google.streetview.publish.v1.BatchDeletePhotosRequest.
 * Use `create(BatchDeletePhotosRequestSchema)` to create a new message.
 */
export const BatchDeletePhotosRequestSchema: GenMessage<BatchDeletePhotosRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 11);

/**
 * Request to create a
 * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] from a video.
 *
 * @generated from message google.streetview.publish.v1.CreatePhotoSequenceRequest
 */
export type CreatePhotoSequenceRequest = Message<"google.streetview.publish.v1.CreatePhotoSequenceRequest"> & {
  /**
   * Required. [PhotoSequence][google.streetview.publish.v1.PhotoSequence] to
   * create.
   *
   * @generated from field: google.streetview.publish.v1.PhotoSequence photo_sequence = 1;
   */
  photoSequence?: PhotoSequence;

  /**
   * Required. The input form of
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
   *
   * @generated from field: google.streetview.publish.v1.CreatePhotoSequenceRequest.InputType input_type = 2;
   */
  inputType: CreatePhotoSequenceRequest_InputType;
};

/**
 * Describes the message google.streetview.publish.v1.CreatePhotoSequenceRequest.
 * Use `create(CreatePhotoSequenceRequestSchema)` to create a new message.
 */
export const CreatePhotoSequenceRequestSchema: GenMessage<CreatePhotoSequenceRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 12);

/**
 * Input forms of [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
 *
 * @generated from enum google.streetview.publish.v1.CreatePhotoSequenceRequest.InputType
 */
export enum CreatePhotoSequenceRequest_InputType {
  /**
   * Not specified. Server will return
   * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
   *
   * @generated from enum value: INPUT_TYPE_UNSPECIFIED = 0;
   */
  INPUT_TYPE_UNSPECIFIED = 0,

  /**
   * 360 Video.
   *
   * @generated from enum value: VIDEO = 1;
   */
  VIDEO = 1,

  /**
   * Extensible Device Metadata, http://www.xdm.org
   *
   * @generated from enum value: XDM = 2;
   */
  XDM = 2,
}

/**
 * Describes the enum google.streetview.publish.v1.CreatePhotoSequenceRequest.InputType.
 */
export const CreatePhotoSequenceRequest_InputTypeSchema: GenEnum<CreatePhotoSequenceRequest_InputType> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_rpcmessages, 12, 0);

/**
 * Request to get a [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
 *
 * By default
 *
 * * does not return the download URL for the
 * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
 *
 * Parameters:
 *
 * * `view` controls if the download URL for the
 * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is
 *   returned.
 *
 * @generated from message google.streetview.publish.v1.GetPhotoSequenceRequest
 */
export type GetPhotoSequenceRequest = Message<"google.streetview.publish.v1.GetPhotoSequenceRequest"> & {
  /**
   * Required. ID of the photo sequence.
   *
   * @generated from field: string sequence_id = 1;
   */
  sequenceId: string;

  /**
   * Specifies if a download URL for the photo sequence should be returned in
   * `download_url` of individual photos in the
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] response.
   * > Note: Currently not implemented.
   *
   * @generated from field: google.streetview.publish.v1.PhotoView view = 2 [deprecated = true];
   * @deprecated
   */
  view: PhotoView;

  /**
   * Optional. The filter expression. For example: `published_status=PUBLISHED`.
   *
   * The filters supported are: `published_status`.  See
   * https://google.aip.dev/160 for more information.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;
};

/**
 * Describes the message google.streetview.publish.v1.GetPhotoSequenceRequest.
 * Use `create(GetPhotoSequenceRequestSchema)` to create a new message.
 */
export const GetPhotoSequenceRequestSchema: GenMessage<GetPhotoSequenceRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 13);

/**
 * Request to delete a
 * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
 *
 * @generated from message google.streetview.publish.v1.DeletePhotoSequenceRequest
 */
export type DeletePhotoSequenceRequest = Message<"google.streetview.publish.v1.DeletePhotoSequenceRequest"> & {
  /**
   * Required. ID of the
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
   *
   * @generated from field: string sequence_id = 1;
   */
  sequenceId: string;
};

/**
 * Describes the message google.streetview.publish.v1.DeletePhotoSequenceRequest.
 * Use `create(DeletePhotoSequenceRequestSchema)` to create a new message.
 */
export const DeletePhotoSequenceRequestSchema: GenMessage<DeletePhotoSequenceRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 14);

/**
 * Response to batch delete of one or more
 * [Photos][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.BatchDeletePhotosResponse
 */
export type BatchDeletePhotosResponse = Message<"google.streetview.publish.v1.BatchDeletePhotosResponse"> & {
  /**
   * The status for the operation to delete a single
   * [Photo][google.streetview.publish.v1.Photo] in the batch request.
   *
   * @generated from field: repeated google.rpc.Status status = 1;
   */
  status: Status[];
};

/**
 * Describes the message google.streetview.publish.v1.BatchDeletePhotosResponse.
 * Use `create(BatchDeletePhotosResponseSchema)` to create a new message.
 */
export const BatchDeletePhotosResponseSchema: GenMessage<BatchDeletePhotosResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 15);

/**
 * Request to list all photo sequences that belong to the user sending the
 * request.
 *
 * Parameters:
 *
 * * `pageSize` determines the maximum number of photo sequences to return.
 * * `pageToken` is the next page token value returned from a previous
 * [ListPhotoSequences][google.streetview.publish.v1.StreetViewPublishService.ListPhotoSequences]
 *   request, if any.
 *
 * @generated from message google.streetview.publish.v1.ListPhotoSequencesRequest
 */
export type ListPhotoSequencesRequest = Message<"google.streetview.publish.v1.ListPhotoSequencesRequest"> & {
  /**
   * Optional. The maximum number of photo sequences to return.
   * `pageSize` must be non-negative. If `pageSize` is zero or is not
   * provided, the default page size of 100 is used.
   * The number of photo sequences returned in the response may be less than
   * `pageSize` if the number of matches is less than `pageSize`.
   * This is currently unimplemented but is in process.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Optional. The
   * [nextPageToken][google.streetview.publish.v1.ListPhotosResponse.next_page_token]
   * value returned from a previous
   * [ListPhotoSequences][google.streetview.publish.v1.StreetViewPublishService.ListPhotoSequences]
   * request, if any.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. The filter expression. For example: `imagery_type=SPHERICAL`.
   *
   * The filters supported are: `imagery_type`, `processing_state`,
   * `min_latitude`, `max_latitude`, `min_longitude`, `max_longitude`,
   * `filename_query`, `min_capture_time_seconds`, `max_capture_time_seconds.
   * See https://google.aip.dev/160 for more information. Filename queries
   * should sent as a Phrase in order to support multiple words and special
   * characters by adding escaped quotes. Ex: filename_query="example of a
   * phrase.mp4"
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.streetview.publish.v1.ListPhotoSequencesRequest.
 * Use `create(ListPhotoSequencesRequestSchema)` to create a new message.
 */
export const ListPhotoSequencesRequestSchema: GenMessage<ListPhotoSequencesRequest> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 16);

/**
 * Response to list all photo sequences that belong to a user.
 *
 * @generated from message google.streetview.publish.v1.ListPhotoSequencesResponse
 */
export type ListPhotoSequencesResponse = Message<"google.streetview.publish.v1.ListPhotoSequencesResponse"> & {
  /**
   * List of photo sequences via [Operation][google.longrunning.Operation]
   * interface.
   *
   * The maximum number of items returned is based on the
   * [pageSize][google.streetview.publish.v1.ListPhotoSequencesRequest.page_size]
   * field in the request.
   *
   * Each item in the list can have three possible states,
   *
   * * `Operation.done` = false, if the processing of
   *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is not
   *   finished yet.
   * * `Operation.done` = true and `Operation.error` is populated, if there was
   *   an error in processing.
   * * `Operation.done` = true and `Operation.response` contains a
   *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] message,
   *   In each sequence, only
   *   [Id][google.streetview.publish.v1.PhotoSequence.id] is populated.
   *
   * @generated from field: repeated google.longrunning.Operation photo_sequences = 1;
   */
  photoSequences: Operation[];

  /**
   * Token to retrieve the next page of results, or empty if there are no more
   * results in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.streetview.publish.v1.ListPhotoSequencesResponse.
 * Use `create(ListPhotoSequencesResponseSchema)` to create a new message.
 */
export const ListPhotoSequencesResponseSchema: GenMessage<ListPhotoSequencesResponse> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_rpcmessages, 17);

/**
 * Specifies which view of the [Photo][google.streetview.publish.v1.Photo]
 * to include in the response.
 *
 * @generated from enum google.streetview.publish.v1.PhotoView
 */
export enum PhotoView {
  /**
   * Server responses do not include the download URL for the photo bytes.
   * The default value.
   *
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * Server responses include the download URL for the photo bytes.
   *
   * @generated from enum value: INCLUDE_DOWNLOAD_URL = 1;
   */
  INCLUDE_DOWNLOAD_URL = 1,
}

/**
 * Describes the enum google.streetview.publish.v1.PhotoView.
 */
export const PhotoViewSchema: GenEnum<PhotoView> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_rpcmessages, 0);

