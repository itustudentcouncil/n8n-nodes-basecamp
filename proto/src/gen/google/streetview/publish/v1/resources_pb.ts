// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/streetview/publish/v1/resources.proto (package google.streetview.publish.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/streetview/publish/v1/resources.proto.
 */
export const file_google_streetview_publish_v1_resources: GenFile = /*@__PURE__*/
  fileDesc("Cixnb29nbGUvc3RyZWV0dmlldy9wdWJsaXNoL3YxL3Jlc291cmNlcy5wcm90bxIcZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MSIwCglVcGxvYWRSZWYSFAoKdXBsb2FkX3VybBgBIAEoCUgAQg0KC2ZpbGVfc291cmNlIhUKB1Bob3RvSWQSCgoCaWQYASABKAkiLwoFTGV2ZWwSEwoGbnVtYmVyGAEgASgBQgPgQQESEQoEbmFtZRgCIAEoCUID4EECIoMCCgRQb3NlEikKDGxhdF9sbmdfcGFpchgBIAEoCzITLmdvb2dsZS50eXBlLkxhdExuZxIQCghhbHRpdHVkZRgCIAEoARIPCgdoZWFkaW5nGAMgASgBEg0KBXBpdGNoGAQgASgBEgwKBHJvbGwYBSABKAESQwofZ3BzX3JlY29yZF90aW1lc3RhbXBfdW5peF9lcG9jaBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMgoFbGV2ZWwYByABKAsyIy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkxldmVsEhcKD2FjY3VyYWN5X21ldGVycxgJIAEoAiKzAgoDSW11EkQKC2FjY2VsX21wc3BzGAEgAygLMi8uZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5JbXUuTWVhc3VyZW1lbnQzZBJBCghneXJvX3JwcxgCIAMoCzIvLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuSW11Lk1lYXN1cmVtZW50M2QSPwoGbWFnX3V0GAMgAygLMi8uZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5JbXUuTWVhc3VyZW1lbnQzZBpiCg1NZWFzdXJlbWVudDNkEjAKDGNhcHR1cmVfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASCQoBeBgCIAEoAhIJCgF5GAMgASgCEgkKAXoYBCABKAIiSAoFUGxhY2USEAoIcGxhY2VfaWQYASABKAkSEQoEbmFtZRgCIAEoCUID4EEDEhoKDWxhbmd1YWdlX2NvZGUYAyABKAlCA+BBAyJICgpDb25uZWN0aW9uEjoKBnRhcmdldBgBIAEoCzIlLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9JZEID4EECIs0HCgVQaG90bxI/CghwaG90b19pZBgBIAEoCzIlLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9JZEIG4EEC4EEDEkYKEHVwbG9hZF9yZWZlcmVuY2UYAiABKAsyJy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlVwbG9hZFJlZkID4EEEEhkKDGRvd25sb2FkX3VybBgDIAEoCUID4EEDEhoKDXRodW1ibmFpbF91cmwYCSABKAlCA+BBAxIXCgpzaGFyZV9saW5rGAsgASgJQgPgQQMSNQoEcG9zZRgEIAEoCzIiLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUG9zZUID4EEBEkIKC2Nvbm5lY3Rpb25zGAUgAygLMiguZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5Db25uZWN0aW9uQgPgQQESNQoMY2FwdHVyZV90aW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEBEjQKC3VwbG9hZF90aW1lGA4gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjgKBnBsYWNlcxgHIAMoCzIjLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGxhY2VCA+BBARIXCgp2aWV3X2NvdW50GAogASgDQgPgQQMSUAoPdHJhbnNmZXJfc3RhdHVzGAwgASgOMjIuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90by5UcmFuc2ZlclN0YXR1c0ID4EEDElcKE21hcHNfcHVibGlzaF9zdGF0dXMYDSABKA4yNS5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBob3RvLk1hcHNQdWJsaXNoU3RhdHVzQgPgQQMipQEKDlRyYW5zZmVyU3RhdHVzEhsKF1RSQU5TRkVSX1NUQVRVU19VTktOT1dOEAASFQoRTkVWRVJfVFJBTlNGRVJSRUQQARILCgdQRU5ESU5HEAISDQoJQ09NUExFVEVEEAMSDAoIUkVKRUNURUQQBBILCgdFWFBJUkVEEAUSDQoJQ0FOQ0VMTEVEEAYSGQoVUkVDRUlWRURfVklBX1RSQU5TRkVSEAciXQoRTWFwc1B1Ymxpc2hTdGF0dXMSIwofVU5TUEVDSUZJRURfTUFQU19QVUJMSVNIX1NUQVRVUxAAEg0KCVBVQkxJU0hFRBABEhQKEFJFSkVDVEVEX1VOS05PV04QAiKzBwoNUGhvdG9TZXF1ZW5jZRIPCgJpZBgBIAEoCUID4EEDEjgKBnBob3RvcxgCIAMoCzIjLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUGhvdG9CA+BBAxJGChB1cGxvYWRfcmVmZXJlbmNlGAMgASgLMicuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5VcGxvYWRSZWZCA+BBBBI+ChVjYXB0dXJlX3RpbWVfb3ZlcnJpZGUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQESNAoLdXBsb2FkX3RpbWUYEiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSQQoQcmF3X2dwc190aW1lbGluZRgHIAMoCzIiLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUG9zZUID4EEEEk4KCmdwc19zb3VyY2UYCCABKA4yNS5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBob3RvU2VxdWVuY2UuR3BzU291cmNlQgPgQQQSMwoDaW11GAsgASgLMiEuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5JbXVCA+BBBBJMChBwcm9jZXNzaW5nX3N0YXRlGAwgASgOMi0uZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5Qcm9jZXNzaW5nU3RhdGVCA+BBAxJSCg5mYWlsdXJlX3JlYXNvbhgNIAEoDjI1Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuUHJvY2Vzc2luZ0ZhaWx1cmVSZWFzb25CA+BBAxJUCg9mYWlsdXJlX2RldGFpbHMYFyABKAsyNi5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlByb2Nlc3NpbmdGYWlsdXJlRGV0YWlsc0ID4EEDEhwKD2Rpc3RhbmNlX21ldGVycxgQIAEoAUID4EEDEkgKD3NlcXVlbmNlX2JvdW5kcxgUIAEoCzIqLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuTGF0TG5nQm91bmRzQgPgQQMSFwoKdmlld19jb3VudBgVIAEoA0ID4EEDEhUKCGZpbGVuYW1lGBYgASgJQgPgQQMiQQoJR3BzU291cmNlEhIKDlBIT1RPX1NFUVVFTkNFEAASIAocQ0FNRVJBX01PVElPTl9NRVRBREFUQV9UUkFDSxABIl4KDExhdExuZ0JvdW5kcxImCglzb3V0aHdlc3QYASABKAsyEy5nb29nbGUudHlwZS5MYXRMbmcSJgoJbm9ydGhlYXN0GAIgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nIusDChhQcm9jZXNzaW5nRmFpbHVyZURldGFpbHMSXwoYaW5zdWZmaWNpZW50X2dwc19kZXRhaWxzGAEgASgLMjsuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5JbnN1ZmZpY2llbnRHcHNGYWlsdXJlRGV0YWlsc0gAElYKFGdwc19kYXRhX2dhcF9kZXRhaWxzGAIgASgLMjYuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5HcHNEYXRhR2FwRmFpbHVyZURldGFpbHNIABJWChRpbXVfZGF0YV9nYXBfZGV0YWlscxgDIAEoCzI2Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuSW11RGF0YUdhcEZhaWx1cmVEZXRhaWxzSAASVwoUbm90X291dGRvb3JzX2RldGFpbHMYBCABKAsyNy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLk5vdE91dGRvb3JzRmFpbHVyZURldGFpbHNIABJaChZub19vdmVybGFwX2dwc19kZXRhaWxzGAUgASgLMjguZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5Ob092ZXJsYXBHcHNGYWlsdXJlRGV0YWlsc0gAQgkKB2RldGFpbHMiUwodSW5zdWZmaWNpZW50R3BzRmFpbHVyZURldGFpbHMSHQoQZ3BzX3BvaW50c19mb3VuZBgBIAEoBUgAiAEBQhMKEV9ncHNfcG9pbnRzX2ZvdW5kIqwBChhHcHNEYXRhR2FwRmFpbHVyZURldGFpbHMSNAoMZ2FwX2R1cmF0aW9uGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSACIAQESNgoOZ2FwX3N0YXJ0X3RpbWUYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25IAYgBAUIPCg1fZ2FwX2R1cmF0aW9uQhEKD19nYXBfc3RhcnRfdGltZSKsAQoYSW11RGF0YUdhcEZhaWx1cmVEZXRhaWxzEjQKDGdhcF9kdXJhdGlvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkgAiAEBEjYKDmdhcF9zdGFydF90aW1lGAIgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSAGIAQFCDwoNX2dhcF9kdXJhdGlvbkIRCg9fZ2FwX3N0YXJ0X3RpbWUiXgoZTm90T3V0ZG9vcnNGYWlsdXJlRGV0YWlscxIyCgpzdGFydF90aW1lGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uSACIAQFCDQoLX3N0YXJ0X3RpbWUizAIKGk5vT3ZlcmxhcEdwc0ZhaWx1cmVEZXRhaWxzEjcKDmdwc19zdGFydF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAiAEBEjUKDGdwc19lbmRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBIAYgBARI5ChB2aWRlb19zdGFydF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgCiAEBEjcKDnZpZGVvX2VuZF90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgDiAEBQhEKD19ncHNfc3RhcnRfdGltZUIPCg1fZ3BzX2VuZF90aW1lQhMKEV92aWRlb19zdGFydF90aW1lQhEKD192aWRlb19lbmRfdGltZSprCg9Qcm9jZXNzaW5nU3RhdGUSIAocUFJPQ0VTU0lOR19TVEFURV9VTlNQRUNJRklFRBAAEgsKB1BFTkRJTkcQARIOCgpQUk9DRVNTSU5HEAISDQoJUFJPQ0VTU0VEEAMSCgoGRkFJTEVEEAQqygQKF1Byb2Nlc3NpbmdGYWlsdXJlUmVhc29uEikKJVBST0NFU1NJTkdfRkFJTFVSRV9SRUFTT05fVU5TUEVDSUZJRUQQABISCg5MT1dfUkVTT0xVVElPThABEg0KCURVUExJQ0FURRACEhQKEElOU1VGRklDSUVOVF9HUFMQAxISCg5OT19PVkVSTEFQX0dQUxAEEg8KC0lOVkFMSURfR1BTEAUSHgoaRkFJTEVEX1RPX1JFRklORV9QT1NJVElPTlMQBhIMCghUQUtFRE9XThAHEhEKDUNPUlJVUFRfVklERU8QCBIMCghJTlRFUk5BTBAJEhgKFElOVkFMSURfVklERU9fRk9STUFUEAoSHAoYSU5WQUxJRF9WSURFT19ESU1FTlNJT05TEAsSGAoUSU5WQUxJRF9DQVBUVVJFX1RJTUUQDBIQCgxHUFNfREFUQV9HQVAQDRINCglKVU1QWV9HUFMQDhIPCgtJTlZBTElEX0lNVRAPEhQKEElOU1VGRklDSUVOVF9JTVUQFRIkCiBJTlNVRkZJQ0lFTlRfT1ZFUkxBUF9USU1FX1NFUklFUxAWEhAKDElNVV9EQVRBX0dBUBAQEhYKElVOU1VQUE9SVEVEX0NBTUVSQRAREhAKDE5PVF9PVVRET09SUxASEh0KGUlOU1VGRklDSUVOVF9WSURFT19GUkFNRVMQExIZChVJTlNVRkZJQ0lFTlRfTU9WRU1FTlQQFBINCglNQVNUX0RPV04QGxISCg5DQU1FUkFfQ09WRVJFRBAcQogBCihjb20uZ29vZ2xlLmdlby51Z2Muc3RyZWV0dmlldy5wdWJsaXNoLnYxQhpTdHJlZXRWaWV3UHVibGlzaFJlc291cmNlc1pAY2xvdWQuZ29vZ2xlLmNvbS9nby9zdHJlZXR2aWV3L3B1Ymxpc2gvYXBpdjEvcHVibGlzaHBiO3B1Ymxpc2hwYmIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_timestamp, file_google_type_latlng]);

/**
 * Upload reference for media files.
 *
 * @generated from message google.streetview.publish.v1.UploadRef
 */
export type UploadRef = Message<"google.streetview.publish.v1.UploadRef"> & {
  /**
   * Required.
   *
   * @generated from oneof google.streetview.publish.v1.UploadRef.file_source
   */
  fileSource: {
    /**
     * An upload reference should be unique for each user. It follows
     * the form:
     * "https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}"
     *
     * @generated from field: string upload_url = 1;
     */
    value: string;
    case: "uploadUrl";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.streetview.publish.v1.UploadRef.
 * Use `create(UploadRefSchema)` to create a new message.
 */
export const UploadRefSchema: GenMessage<UploadRef> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 0);

/**
 * Identifier for a [Photo][google.streetview.publish.v1.Photo].
 *
 * @generated from message google.streetview.publish.v1.PhotoId
 */
export type PhotoId = Message<"google.streetview.publish.v1.PhotoId"> & {
  /**
   * A unique identifier for a photo.
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message google.streetview.publish.v1.PhotoId.
 * Use `create(PhotoIdSchema)` to create a new message.
 */
export const PhotoIdSchema: GenMessage<PhotoId> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 1);

/**
 * Level information containing level number and its corresponding name.
 *
 * @generated from message google.streetview.publish.v1.Level
 */
export type Level = Message<"google.streetview.publish.v1.Level"> & {
  /**
   * Optional. Floor number, used for ordering. 0 indicates the ground level, 1
   * indicates the first level above ground level, -1 indicates the first level
   * under ground level. Non-integer values are OK.
   *
   * @generated from field: double number = 1;
   */
  number: number;

  /**
   * Required. A name assigned to this Level, restricted to 3 characters.
   * Consider how the elevator buttons would be labeled for this level if there
   * was an elevator.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message google.streetview.publish.v1.Level.
 * Use `create(LevelSchema)` to create a new message.
 */
export const LevelSchema: GenMessage<Level> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 2);

/**
 * Raw pose measurement for an entity.
 *
 * @generated from message google.streetview.publish.v1.Pose
 */
export type Pose = Message<"google.streetview.publish.v1.Pose"> & {
  /**
   * Latitude and longitude pair of the pose, as explained here:
   * https://cloud.google.com/datastore/docs/reference/rest/Shared.Types/LatLng
   * When creating a [Photo][google.streetview.publish.v1.Photo], if the
   * latitude and longitude pair are not provided, the geolocation from the
   * exif header is used. A latitude and longitude pair not provided in the
   * photo or exif header causes the photo process to fail.
   *
   * @generated from field: google.type.LatLng lat_lng_pair = 1;
   */
  latLngPair?: LatLng;

  /**
   * Altitude of the pose in meters above WGS84 ellipsoid.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double altitude = 2;
   */
  altitude: number;

  /**
   * The following pose parameters pertain to the center of the photo. They
   * match https://developers.google.com/streetview/spherical-metadata.
   * Compass heading, measured at the center of the photo in degrees clockwise
   * from North. Value must be >=0 and <360. NaN indicates an unmeasured
   * quantity.
   *
   * @generated from field: double heading = 3;
   */
  heading: number;

  /**
   * Pitch, measured at the center of the photo in degrees. Value must be >=-90
   * and <= 90. A value of -90 means looking directly down, and a value of 90
   * means looking directly up.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double pitch = 4;
   */
  pitch: number;

  /**
   * Roll, measured in degrees. Value must be >= 0 and <360. A value of 0
   * means level with the horizon.
   * NaN indicates an unmeasured quantity.
   *
   * @generated from field: double roll = 5;
   */
  roll: number;

  /**
   * Time of the GPS record since UTC epoch.
   *
   * @generated from field: google.protobuf.Timestamp gps_record_timestamp_unix_epoch = 6;
   */
  gpsRecordTimestampUnixEpoch?: Timestamp;

  /**
   * Level (the floor in a building) used to configure vertical navigation.
   *
   * @generated from field: google.streetview.publish.v1.Level level = 7;
   */
  level?: Level;

  /**
   * The estimated horizontal accuracy of this pose in meters with 68%
   * confidence (one standard deviation). For example, on Android, this value is
   * available from this method:
   * https://developer.android.com/reference/android/location/Location#getAccuracy().
   * Other platforms have different methods of obtaining similar accuracy
   * estimations.
   *
   * @generated from field: float accuracy_meters = 9;
   */
  accuracyMeters: number;
};

/**
 * Describes the message google.streetview.publish.v1.Pose.
 * Use `create(PoseSchema)` to create a new message.
 */
export const PoseSchema: GenMessage<Pose> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 3);

/**
 * IMU data from the device sensors.
 *
 * @generated from message google.streetview.publish.v1.Imu
 */
export type Imu = Message<"google.streetview.publish.v1.Imu"> & {
  /**
   * The accelerometer measurements in meters/sec^2 with increasing timestamps
   * from devices.
   *
   * @generated from field: repeated google.streetview.publish.v1.Imu.Measurement3d accel_mpsps = 1;
   */
  accelMpsps: Imu_Measurement3d[];

  /**
   * The gyroscope measurements in radians/sec with increasing timestamps from
   * devices.
   *
   * @generated from field: repeated google.streetview.publish.v1.Imu.Measurement3d gyro_rps = 2;
   */
  gyroRps: Imu_Measurement3d[];

  /**
   * The magnetometer measurements of the magnetic field in microtesla (uT) with
   * increasing timestamps from devices.
   *
   * @generated from field: repeated google.streetview.publish.v1.Imu.Measurement3d mag_ut = 3;
   */
  magUt: Imu_Measurement3d[];
};

/**
 * Describes the message google.streetview.publish.v1.Imu.
 * Use `create(ImuSchema)` to create a new message.
 */
export const ImuSchema: GenMessage<Imu> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 4);

/**
 * A Generic 3d measurement sample.
 *
 * @generated from message google.streetview.publish.v1.Imu.Measurement3d
 */
export type Imu_Measurement3d = Message<"google.streetview.publish.v1.Imu.Measurement3d"> & {
  /**
   * The timestamp of the IMU measurement.
   *
   * @generated from field: google.protobuf.Timestamp capture_time = 1;
   */
  captureTime?: Timestamp;

  /**
   * The sensor measurement in the x axis.
   *
   * @generated from field: float x = 2;
   */
  x: number;

  /**
   * The sensor measurement in the y axis.
   *
   * @generated from field: float y = 3;
   */
  y: number;

  /**
   * The sensor measurement in the z axis.
   *
   * @generated from field: float z = 4;
   */
  z: number;
};

/**
 * Describes the message google.streetview.publish.v1.Imu.Measurement3d.
 * Use `create(Imu_Measurement3dSchema)` to create a new message.
 */
export const Imu_Measurement3dSchema: GenMessage<Imu_Measurement3d> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 4, 0);

/**
 * Place metadata for an entity.
 *
 * @generated from message google.streetview.publish.v1.Place
 */
export type Place = Message<"google.streetview.publish.v1.Place"> & {
  /**
   * Place identifier, as described in
   * https://developers.google.com/places/place-id.
   *
   * @generated from field: string place_id = 1;
   */
  placeId: string;

  /**
   * Output only. The name of the place, localized to the language_code.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Output only. The language_code that the name is localized with. This should
   * be the language_code specified in the request, but may be a fallback.
   *
   * @generated from field: string language_code = 3;
   */
  languageCode: string;
};

/**
 * Describes the message google.streetview.publish.v1.Place.
 * Use `create(PlaceSchema)` to create a new message.
 */
export const PlaceSchema: GenMessage<Place> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 5);

/**
 * A connection is the link from a source photo to a destination photo.
 *
 * @generated from message google.streetview.publish.v1.Connection
 */
export type Connection = Message<"google.streetview.publish.v1.Connection"> & {
  /**
   * Required. The destination of the connection from the containing photo to
   * another photo.
   *
   * @generated from field: google.streetview.publish.v1.PhotoId target = 1;
   */
  target?: PhotoId;
};

/**
 * Describes the message google.streetview.publish.v1.Connection.
 * Use `create(ConnectionSchema)` to create a new message.
 */
export const ConnectionSchema: GenMessage<Connection> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 6);

/**
 * Photo is used to store 360 photos along with photo metadata.
 *
 * @generated from message google.streetview.publish.v1.Photo
 */
export type Photo = Message<"google.streetview.publish.v1.Photo"> & {
  /**
   * Required. Output only. Required when updating a photo. Output only when
   * creating a photo. Identifier for the photo, which is unique among all
   * photos in Google.
   *
   * @generated from field: google.streetview.publish.v1.PhotoId photo_id = 1;
   */
  photoId?: PhotoId;

  /**
   * Input only. Required when creating a photo. Input only. The resource URL
   * where the photo bytes are uploaded to.
   *
   * @generated from field: google.streetview.publish.v1.UploadRef upload_reference = 2;
   */
  uploadReference?: UploadRef;

  /**
   * Output only. The download URL for the photo bytes. This field is set only
   * when
   * [GetPhotoRequest.view][google.streetview.publish.v1.GetPhotoRequest.view]
   * is set to
   * [PhotoView.INCLUDE_DOWNLOAD_URL][google.streetview.publish.v1.PhotoView.INCLUDE_DOWNLOAD_URL].
   *
   * @generated from field: string download_url = 3;
   */
  downloadUrl: string;

  /**
   * Output only. The thumbnail URL for showing a preview of the given photo.
   *
   * @generated from field: string thumbnail_url = 9;
   */
  thumbnailUrl: string;

  /**
   * Output only. The share link for the photo.
   *
   * @generated from field: string share_link = 11;
   */
  shareLink: string;

  /**
   * Optional. Pose of the photo.
   *
   * @generated from field: google.streetview.publish.v1.Pose pose = 4;
   */
  pose?: Pose;

  /**
   * Optional. Connections to other photos. A connection represents the link
   * from this photo to another photo.
   *
   * @generated from field: repeated google.streetview.publish.v1.Connection connections = 5;
   */
  connections: Connection[];

  /**
   * Optional. Absolute time when the photo was captured.
   * When the photo has no exif timestamp, this is used to set a timestamp in
   * the photo metadata.
   *
   * @generated from field: google.protobuf.Timestamp capture_time = 6;
   */
  captureTime?: Timestamp;

  /**
   * Output only. Time when the image was uploaded.
   *
   * @generated from field: google.protobuf.Timestamp upload_time = 14;
   */
  uploadTime?: Timestamp;

  /**
   * Optional. Places where this photo belongs.
   *
   * @generated from field: repeated google.streetview.publish.v1.Place places = 7;
   */
  places: Place[];

  /**
   * Output only. View count of the photo.
   *
   * @generated from field: int64 view_count = 10;
   */
  viewCount: bigint;

  /**
   * Output only. Status of rights transfer on this photo.
   *
   * @generated from field: google.streetview.publish.v1.Photo.TransferStatus transfer_status = 12;
   */
  transferStatus: Photo_TransferStatus;

  /**
   * Output only. Status in Google Maps, whether this photo was published or
   * rejected.
   *
   * @generated from field: google.streetview.publish.v1.Photo.MapsPublishStatus maps_publish_status = 13;
   */
  mapsPublishStatus: Photo_MapsPublishStatus;
};

/**
 * Describes the message google.streetview.publish.v1.Photo.
 * Use `create(PhotoSchema)` to create a new message.
 */
export const PhotoSchema: GenMessage<Photo> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 7);

/**
 * Status of rights transfer.
 *
 * @generated from enum google.streetview.publish.v1.Photo.TransferStatus
 */
export enum Photo_TransferStatus {
  /**
   * The status of this transfer is unspecified.
   *
   * @generated from enum value: TRANSFER_STATUS_UNKNOWN = 0;
   */
  TRANSFER_STATUS_UNKNOWN = 0,

  /**
   * This photo has never been in a transfer.
   *
   * @generated from enum value: NEVER_TRANSFERRED = 1;
   */
  NEVER_TRANSFERRED = 1,

  /**
   * This photo transfer has been initiated, but the receiver has not yet
   * responded.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * The photo transfer has been completed, and this photo has been
   * transferred to the recipient.
   *
   * @generated from enum value: COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * The recipient rejected this photo transfer.
   *
   * @generated from enum value: REJECTED = 4;
   */
  REJECTED = 4,

  /**
   * The photo transfer expired before the recipient took any action.
   *
   * @generated from enum value: EXPIRED = 5;
   */
  EXPIRED = 5,

  /**
   * The sender cancelled this photo transfer.
   *
   * @generated from enum value: CANCELLED = 6;
   */
  CANCELLED = 6,

  /**
   * The recipient owns this photo due to a rights transfer.
   *
   * @generated from enum value: RECEIVED_VIA_TRANSFER = 7;
   */
  RECEIVED_VIA_TRANSFER = 7,
}

/**
 * Describes the enum google.streetview.publish.v1.Photo.TransferStatus.
 */
export const Photo_TransferStatusSchema: GenEnum<Photo_TransferStatus> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_resources, 7, 0);

/**
 * Publication status of the photo in Google Maps.
 *
 * @generated from enum google.streetview.publish.v1.Photo.MapsPublishStatus
 */
export enum Photo_MapsPublishStatus {
  /**
   * The status of the photo is unknown.
   *
   * @generated from enum value: UNSPECIFIED_MAPS_PUBLISH_STATUS = 0;
   */
  UNSPECIFIED_MAPS_PUBLISH_STATUS = 0,

  /**
   * The photo is published to the public through Google Maps.
   *
   * @generated from enum value: PUBLISHED = 1;
   */
  PUBLISHED = 1,

  /**
   * The photo has been rejected for an unknown reason.
   *
   * @generated from enum value: REJECTED_UNKNOWN = 2;
   */
  REJECTED_UNKNOWN = 2,
}

/**
 * Describes the enum google.streetview.publish.v1.Photo.MapsPublishStatus.
 */
export const Photo_MapsPublishStatusSchema: GenEnum<Photo_MapsPublishStatus> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_resources, 7, 1);

/**
 * A sequence of 360 photos along with metadata.
 *
 * @generated from message google.streetview.publish.v1.PhotoSequence
 */
export type PhotoSequence = Message<"google.streetview.publish.v1.PhotoSequence"> & {
  /**
   * Output only. Unique identifier for the photo sequence.
   * This also acts as a long running operation ID if uploading is performed
   * asynchronously.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Output only. Photos with increasing timestamps.
   *
   * @generated from field: repeated google.streetview.publish.v1.Photo photos = 2;
   */
  photos: Photo[];

  /**
   * Input only. Required when creating photo sequence. The resource name
   * where the bytes of the photo sequence (in the form of video) are uploaded.
   *
   * @generated from field: google.streetview.publish.v1.UploadRef upload_reference = 3;
   */
  uploadReference?: UploadRef;

  /**
   * Optional. Absolute time when the photo sequence starts to be captured.
   * If the photo sequence is a video, this is the start time of the video.
   * If this field is populated in input, it overrides the capture time in the
   * video or XDM file.
   *
   * @generated from field: google.protobuf.Timestamp capture_time_override = 4;
   */
  captureTimeOverride?: Timestamp;

  /**
   * Output only. The time this photo sequence was created in uSV Store service.
   *
   * @generated from field: google.protobuf.Timestamp upload_time = 18;
   */
  uploadTime?: Timestamp;

  /**
   * Input only. Raw GPS measurements with increasing timestamps from the device
   * that aren't time synced with each photo. These raw measurements will be
   * used to infer the pose of each frame. Required in input when InputType is
   * VIDEO and raw GPS measurements are not in Camera Motion Metadata Track
   * (CAMM). User can indicate which takes precedence using gps_source if raw
   * GPS measurements are provided in both raw_gps_timeline and Camera Motion
   * Metadata Track (CAMM).
   *
   * @generated from field: repeated google.streetview.publish.v1.Pose raw_gps_timeline = 7;
   */
  rawGpsTimeline: Pose[];

  /**
   * Input only. If both raw_gps_timeline and
   * the Camera Motion Metadata Track (CAMM) contain GPS measurements,
   * indicate which takes precedence.
   *
   * @generated from field: google.streetview.publish.v1.PhotoSequence.GpsSource gps_source = 8;
   */
  gpsSource: PhotoSequence_GpsSource;

  /**
   * Input only. Three axis IMU data for the collection.
   * If this data is too large to put in the request, then it should be put in
   * the CAMM track for the video. This data always takes precedence over the
   * equivalent CAMM data, if it exists.
   *
   * @generated from field: google.streetview.publish.v1.Imu imu = 11;
   */
  imu?: Imu;

  /**
   * Output only. The processing state of this sequence.
   *
   * @generated from field: google.streetview.publish.v1.ProcessingState processing_state = 12;
   */
  processingState: ProcessingState;

  /**
   * Output only. If this sequence has processing_state = FAILED, this will
   * contain the reason why it failed. If the processing_state is any other
   * value, this field will be unset.
   *
   * @generated from field: google.streetview.publish.v1.ProcessingFailureReason failure_reason = 13;
   */
  failureReason: ProcessingFailureReason;

  /**
   * Output only. If this sequence has `failure_reason` set, this may contain
   * additional details about the failure.
   *
   * @generated from field: google.streetview.publish.v1.ProcessingFailureDetails failure_details = 23;
   */
  failureDetails?: ProcessingFailureDetails;

  /**
   * Output only. The computed distance of the photo sequence in meters.
   *
   * @generated from field: double distance_meters = 16;
   */
  distanceMeters: number;

  /**
   * Output only. A rectangular box that encapsulates every image in this photo
   * sequence.
   *
   * @generated from field: google.streetview.publish.v1.LatLngBounds sequence_bounds = 20;
   */
  sequenceBounds?: LatLngBounds;

  /**
   * Output only. The total number of views that all the published images in
   * this PhotoSequence have received.
   *
   * @generated from field: int64 view_count = 21;
   */
  viewCount: bigint;

  /**
   * Output only. The filename of the upload. Does not include the directory
   * path. Only available if the sequence was uploaded on a platform that
   * provides the filename.
   *
   * @generated from field: string filename = 22;
   */
  filename: string;
};

/**
 * Describes the message google.streetview.publish.v1.PhotoSequence.
 * Use `create(PhotoSequenceSchema)` to create a new message.
 */
export const PhotoSequenceSchema: GenMessage<PhotoSequence> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 8);

/**
 * Primary source of GPS measurements.
 *
 * @generated from enum google.streetview.publish.v1.PhotoSequence.GpsSource
 */
export enum PhotoSequence_GpsSource {
  /**
   * GPS in raw_gps_timeline takes precedence if it exists.
   *
   * @generated from enum value: PHOTO_SEQUENCE = 0;
   */
  PHOTO_SEQUENCE = 0,

  /**
   * GPS in Camera Motion Metadata Track (CAMM) takes precedence if it exists.
   *
   * @generated from enum value: CAMERA_MOTION_METADATA_TRACK = 1;
   */
  CAMERA_MOTION_METADATA_TRACK = 1,
}

/**
 * Describes the enum google.streetview.publish.v1.PhotoSequence.GpsSource.
 */
export const PhotoSequence_GpsSourceSchema: GenEnum<PhotoSequence_GpsSource> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_resources, 8, 0);

/**
 * A rectangle in geographical coordinates.
 *
 * @generated from message google.streetview.publish.v1.LatLngBounds
 */
export type LatLngBounds = Message<"google.streetview.publish.v1.LatLngBounds"> & {
  /**
   * The southwest corner of these bounds.
   *
   * @generated from field: google.type.LatLng southwest = 1;
   */
  southwest?: LatLng;

  /**
   * The northeast corner of these bounds.
   *
   * @generated from field: google.type.LatLng northeast = 2;
   */
  northeast?: LatLng;
};

/**
 * Describes the message google.streetview.publish.v1.LatLngBounds.
 * Use `create(LatLngBoundsSchema)` to create a new message.
 */
export const LatLngBoundsSchema: GenMessage<LatLngBounds> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 9);

/**
 * Additional details to accompany the ProcessingFailureReason enum.
 * This message is always expected to be used in conjunction with
 * ProcessingFailureReason, and the oneof value set in this message should match
 * the FailureReason.
 *
 * @generated from message google.streetview.publish.v1.ProcessingFailureDetails
 */
export type ProcessingFailureDetails = Message<"google.streetview.publish.v1.ProcessingFailureDetails"> & {
  /**
   * Only one set of details will be set, and must match the corresponding enum
   * in ProcessingFailureReason.
   *
   * @generated from oneof google.streetview.publish.v1.ProcessingFailureDetails.details
   */
  details: {
    /**
     * See InsufficientGpsFailureDetails.
     *
     * @generated from field: google.streetview.publish.v1.InsufficientGpsFailureDetails insufficient_gps_details = 1;
     */
    value: InsufficientGpsFailureDetails;
    case: "insufficientGpsDetails";
  } | {
    /**
     * See GpsDataGapFailureDetails.
     *
     * @generated from field: google.streetview.publish.v1.GpsDataGapFailureDetails gps_data_gap_details = 2;
     */
    value: GpsDataGapFailureDetails;
    case: "gpsDataGapDetails";
  } | {
    /**
     * See ImuDataGapFailureDetails.
     *
     * @generated from field: google.streetview.publish.v1.ImuDataGapFailureDetails imu_data_gap_details = 3;
     */
    value: ImuDataGapFailureDetails;
    case: "imuDataGapDetails";
  } | {
    /**
     * See NotOutdoorsFailureDetails.
     *
     * @generated from field: google.streetview.publish.v1.NotOutdoorsFailureDetails not_outdoors_details = 4;
     */
    value: NotOutdoorsFailureDetails;
    case: "notOutdoorsDetails";
  } | {
    /**
     * See NoOverlapGpsFailureDetails.
     *
     * @generated from field: google.streetview.publish.v1.NoOverlapGpsFailureDetails no_overlap_gps_details = 5;
     */
    value: NoOverlapGpsFailureDetails;
    case: "noOverlapGpsDetails";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.streetview.publish.v1.ProcessingFailureDetails.
 * Use `create(ProcessingFailureDetailsSchema)` to create a new message.
 */
export const ProcessingFailureDetailsSchema: GenMessage<ProcessingFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 10);

/**
 * Details related to ProcessingFailureReason#INSUFFICIENT_GPS.
 *
 * @generated from message google.streetview.publish.v1.InsufficientGpsFailureDetails
 */
export type InsufficientGpsFailureDetails = Message<"google.streetview.publish.v1.InsufficientGpsFailureDetails"> & {
  /**
   * The number of GPS points that were found in the video.
   *
   * @generated from field: optional int32 gps_points_found = 1;
   */
  gpsPointsFound?: number;
};

/**
 * Describes the message google.streetview.publish.v1.InsufficientGpsFailureDetails.
 * Use `create(InsufficientGpsFailureDetailsSchema)` to create a new message.
 */
export const InsufficientGpsFailureDetailsSchema: GenMessage<InsufficientGpsFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 11);

/**
 * Details related to ProcessingFailureReason#GPS_DATA_GAP.
 * If there are multiple GPS data gaps, only the one with the largest duration
 * is reported here.
 *
 * @generated from message google.streetview.publish.v1.GpsDataGapFailureDetails
 */
export type GpsDataGapFailureDetails = Message<"google.streetview.publish.v1.GpsDataGapFailureDetails"> & {
  /**
   * The duration of the gap in GPS data that was found.
   *
   * @generated from field: optional google.protobuf.Duration gap_duration = 1;
   */
  gapDuration?: Duration;

  /**
   * Relative time (from the start of the video stream) when the gap started.
   *
   * @generated from field: optional google.protobuf.Duration gap_start_time = 2;
   */
  gapStartTime?: Duration;
};

/**
 * Describes the message google.streetview.publish.v1.GpsDataGapFailureDetails.
 * Use `create(GpsDataGapFailureDetailsSchema)` to create a new message.
 */
export const GpsDataGapFailureDetailsSchema: GenMessage<GpsDataGapFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 12);

/**
 * Details related to ProcessingFailureReason#IMU_DATA_GAP.
 * If there are multiple IMU data gaps, only the one with the largest duration
 * is reported here.
 *
 * @generated from message google.streetview.publish.v1.ImuDataGapFailureDetails
 */
export type ImuDataGapFailureDetails = Message<"google.streetview.publish.v1.ImuDataGapFailureDetails"> & {
  /**
   * The duration of the gap in IMU data that was found.
   *
   * @generated from field: optional google.protobuf.Duration gap_duration = 1;
   */
  gapDuration?: Duration;

  /**
   * Relative time (from the start of the video stream) when the gap started.
   *
   * @generated from field: optional google.protobuf.Duration gap_start_time = 2;
   */
  gapStartTime?: Duration;
};

/**
 * Describes the message google.streetview.publish.v1.ImuDataGapFailureDetails.
 * Use `create(ImuDataGapFailureDetailsSchema)` to create a new message.
 */
export const ImuDataGapFailureDetailsSchema: GenMessage<ImuDataGapFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 13);

/**
 * Details related to ProcessingFailureReason#NOT_OUTDOORS.
 * If there are multiple indoor frames found, the first frame is recorded here.
 *
 * @generated from message google.streetview.publish.v1.NotOutdoorsFailureDetails
 */
export type NotOutdoorsFailureDetails = Message<"google.streetview.publish.v1.NotOutdoorsFailureDetails"> & {
  /**
   * Relative time (from the start of the video stream) when an indoor frame was
   * found.
   *
   * @generated from field: optional google.protobuf.Duration start_time = 1;
   */
  startTime?: Duration;
};

/**
 * Describes the message google.streetview.publish.v1.NotOutdoorsFailureDetails.
 * Use `create(NotOutdoorsFailureDetailsSchema)` to create a new message.
 */
export const NotOutdoorsFailureDetailsSchema: GenMessage<NotOutdoorsFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 14);

/**
 * Details related to PhotoSequenceProcessingFailureReason#NO_OVERLAP_GPS.
 *
 * @generated from message google.streetview.publish.v1.NoOverlapGpsFailureDetails
 */
export type NoOverlapGpsFailureDetails = Message<"google.streetview.publish.v1.NoOverlapGpsFailureDetails"> & {
  /**
   * Time of first recorded GPS point.
   *
   * @generated from field: optional google.protobuf.Timestamp gps_start_time = 1;
   */
  gpsStartTime?: Timestamp;

  /**
   * Time of last recorded GPS point.
   *
   * @generated from field: optional google.protobuf.Timestamp gps_end_time = 2;
   */
  gpsEndTime?: Timestamp;

  /**
   * Start time of video.
   *
   * @generated from field: optional google.protobuf.Timestamp video_start_time = 3;
   */
  videoStartTime?: Timestamp;

  /**
   * End time of video.
   *
   * @generated from field: optional google.protobuf.Timestamp video_end_time = 4;
   */
  videoEndTime?: Timestamp;
};

/**
 * Describes the message google.streetview.publish.v1.NoOverlapGpsFailureDetails.
 * Use `create(NoOverlapGpsFailureDetailsSchema)` to create a new message.
 */
export const NoOverlapGpsFailureDetailsSchema: GenMessage<NoOverlapGpsFailureDetails> = /*@__PURE__*/
  messageDesc(file_google_streetview_publish_v1_resources, 15);

/**
 * The processing state of the sequence. The states move as follows:
 *
 * ```
 *      +-------------------------+
 *      |                         |
 *  +---v---+  +----------+  +----+----+
 *  |PENDING+-->PROCESSING+-->PROCESSED|
 *  +---+---+  +----+-----+  +----+----+
 *      |           |             |
 *      |        +--v---+         |
 *      +-------->FAILED<---------+
 *               +------+
 * ```
 *
 * The sequence may move to FAILED from any state. Additionally, a processed
 * sequence may be re-processed at any time.
 *
 * @generated from enum google.streetview.publish.v1.ProcessingState
 */
export enum ProcessingState {
  /**
   * The state is unspecified, this is the default value.
   *
   * @generated from enum value: PROCESSING_STATE_UNSPECIFIED = 0;
   */
  PROCESSING_STATE_UNSPECIFIED = 0,

  /**
   * The sequence has not yet started processing.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * The sequence is currently in processing.
   *
   * @generated from enum value: PROCESSING = 2;
   */
  PROCESSING = 2,

  /**
   * The sequence has finished processing including refining position.
   *
   * @generated from enum value: PROCESSED = 3;
   */
  PROCESSED = 3,

  /**
   * The sequence failed processing. See FailureReason for more details.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,
}

/**
 * Describes the enum google.streetview.publish.v1.ProcessingState.
 */
export const ProcessingStateSchema: GenEnum<ProcessingState> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_resources, 0);

/**
 * The possible reasons this [PhotoSequence]
 * [google.streetview.publish.v1.PhotoSequence] failed to process.
 *
 * @generated from enum google.streetview.publish.v1.ProcessingFailureReason
 */
export enum ProcessingFailureReason {
  /**
   * The failure reason is unspecified, this is the default value.
   *
   * @generated from enum value: PROCESSING_FAILURE_REASON_UNSPECIFIED = 0;
   */
  PROCESSING_FAILURE_REASON_UNSPECIFIED = 0,

  /**
   * Video frame's resolution is too small.
   *
   * @generated from enum value: LOW_RESOLUTION = 1;
   */
  LOW_RESOLUTION = 1,

  /**
   * This video has been uploaded before.
   *
   * @generated from enum value: DUPLICATE = 2;
   */
  DUPLICATE = 2,

  /**
   * Too few GPS points.
   *
   * @generated from enum value: INSUFFICIENT_GPS = 3;
   */
  INSUFFICIENT_GPS = 3,

  /**
   * No overlap between the time frame of GPS track and the time frame of
   * video.
   *
   * @generated from enum value: NO_OVERLAP_GPS = 4;
   */
  NO_OVERLAP_GPS = 4,

  /**
   * GPS is invalid (e.x. all GPS points are at (0,0))
   *
   * @generated from enum value: INVALID_GPS = 5;
   */
  INVALID_GPS = 5,

  /**
   * The sequence of photos could not be accurately located in the world.
   *
   * @generated from enum value: FAILED_TO_REFINE_POSITIONS = 6;
   */
  FAILED_TO_REFINE_POSITIONS = 6,

  /**
   * The sequence was taken down for policy reasons.
   *
   * @generated from enum value: TAKEDOWN = 7;
   */
  TAKEDOWN = 7,

  /**
   * The video file was corrupt or could not be decoded.
   *
   * @generated from enum value: CORRUPT_VIDEO = 8;
   */
  CORRUPT_VIDEO = 8,

  /**
   * A permanent failure in the underlying system occurred.
   *
   * @generated from enum value: INTERNAL = 9;
   */
  INTERNAL = 9,

  /**
   * The video format is invalid or unsupported.
   *
   * @generated from enum value: INVALID_VIDEO_FORMAT = 10;
   */
  INVALID_VIDEO_FORMAT = 10,

  /**
   * Invalid image aspect ratio found.
   *
   * @generated from enum value: INVALID_VIDEO_DIMENSIONS = 11;
   */
  INVALID_VIDEO_DIMENSIONS = 11,

  /**
   * Invalid capture time. Timestamps were from the future.
   *
   * @generated from enum value: INVALID_CAPTURE_TIME = 12;
   */
  INVALID_CAPTURE_TIME = 12,

  /**
   * GPS data contains a gap greater than 5 seconds in duration.
   *
   * @generated from enum value: GPS_DATA_GAP = 13;
   */
  GPS_DATA_GAP = 13,

  /**
   * GPS data is too erratic to be processed.
   *
   * @generated from enum value: JUMPY_GPS = 14;
   */
  JUMPY_GPS = 14,

  /**
   * IMU (Accelerometer, Gyroscope, etc.) data are not valid. They may be
   * missing required fields (x, y, z or time), may not be formatted correctly,
   * or any other issue that prevents our systems from parsing it.
   *
   * @generated from enum value: INVALID_IMU = 15;
   */
  INVALID_IMU = 15,

  /**
   * Too few IMU points.
   *
   * @generated from enum value: INSUFFICIENT_IMU = 21;
   */
  INSUFFICIENT_IMU = 21,

  /**
   * Insufficient overlap in the time frame between GPS, IMU, and other time
   * series data.
   *
   * @generated from enum value: INSUFFICIENT_OVERLAP_TIME_SERIES = 22;
   */
  INSUFFICIENT_OVERLAP_TIME_SERIES = 22,

  /**
   * IMU (Accelerometer, Gyroscope, etc.) data contain gaps greater than 0.1
   * seconds in duration.
   *
   * @generated from enum value: IMU_DATA_GAP = 16;
   */
  IMU_DATA_GAP = 16,

  /**
   * The camera is not supported.
   *
   * @generated from enum value: UNSUPPORTED_CAMERA = 17;
   */
  UNSUPPORTED_CAMERA = 17,

  /**
   * Some frames were indoors, which is unsupported.
   *
   * @generated from enum value: NOT_OUTDOORS = 18;
   */
  NOT_OUTDOORS = 18,

  /**
   * Not enough video frames.
   *
   * @generated from enum value: INSUFFICIENT_VIDEO_FRAMES = 19;
   */
  INSUFFICIENT_VIDEO_FRAMES = 19,

  /**
   * Not enough moving data.
   *
   * @generated from enum value: INSUFFICIENT_MOVEMENT = 20;
   */
  INSUFFICIENT_MOVEMENT = 20,

  /**
   * Mast is down.
   *
   * @generated from enum value: MAST_DOWN = 27;
   */
  MAST_DOWN = 27,

  /**
   * Camera is covered.
   *
   * @generated from enum value: CAMERA_COVERED = 28;
   */
  CAMERA_COVERED = 28,
}

/**
 * Describes the enum google.streetview.publish.v1.ProcessingFailureReason.
 */
export const ProcessingFailureReasonSchema: GenEnum<ProcessingFailureReason> = /*@__PURE__*/
  enumDesc(file_google_streetview_publish_v1_resources, 1);

