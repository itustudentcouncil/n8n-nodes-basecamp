// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/streetview/publish/v1/streetview_publish.proto (package google.streetview.publish.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { PhotoSchema, UploadRefSchema } from "./resources_pb";
import { file_google_streetview_publish_v1_resources } from "./resources_pb";
import type { BatchDeletePhotosRequestSchema, BatchDeletePhotosResponseSchema, BatchGetPhotosRequestSchema, BatchGetPhotosResponseSchema, BatchUpdatePhotosRequestSchema, BatchUpdatePhotosResponseSchema, CreatePhotoRequestSchema, CreatePhotoSequenceRequestSchema, DeletePhotoRequestSchema, DeletePhotoSequenceRequestSchema, GetPhotoRequestSchema, GetPhotoSequenceRequestSchema, ListPhotoSequencesRequestSchema, ListPhotoSequencesResponseSchema, ListPhotosRequestSchema, ListPhotosResponseSchema, UpdatePhotoRequestSchema } from "./rpcmessages_pb";
import { file_google_streetview_publish_v1_rpcmessages } from "./rpcmessages_pb";

/**
 * Describes the file google/streetview/publish/v1/streetview_publish.proto.
 */
export const file_google_streetview_publish_v1_streetview_publish: GenFile = /*@__PURE__*/
  fileDesc("CjVnb29nbGUvc3RyZWV0dmlldy9wdWJsaXNoL3YxL3N0cmVldHZpZXdfcHVibGlzaC5wcm90bxIcZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MTLOEgoYU3RyZWV0Vmlld1B1Ymxpc2hTZXJ2aWNlEnAKC1N0YXJ0VXBsb2FkEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GicuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5VcGxvYWRSZWYiIILT5JMCGjoBKiIVL3YxL3Bob3RvOnN0YXJ0VXBsb2FkEoYBCgtDcmVhdGVQaG90bxIwLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuQ3JlYXRlUGhvdG9SZXF1ZXN0GiMuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90byIg2kEFcGhvdG+C0+STAhI6BXBob3RvIgkvdjEvcGhvdG8SjAEKCEdldFBob3RvEi0uZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5HZXRQaG90b1JlcXVlc3QaIy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLlBob3RvIizaQQ1waG90b19pZCx2aWV3gtPkkwIWEhQvdjEvcGhvdG8ve3Bob3RvX2lkfRKpAQoOQmF0Y2hHZXRQaG90b3MSMy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkJhdGNoR2V0UGhvdG9zUmVxdWVzdBo0Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuQmF0Y2hHZXRQaG90b3NSZXNwb25zZSIs2kEOdmlldyxwaG90b19pZHOC0+STAhUSEy92MS9waG90b3M6YmF0Y2hHZXQSkQEKCkxpc3RQaG90b3MSLy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkxpc3RQaG90b3NSZXF1ZXN0GjAuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5MaXN0UGhvdG9zUmVzcG9uc2UiINpBC3ZpZXcsZmlsdGVygtPkkwIMEgovdjEvcGhvdG9zEqYBCgtVcGRhdGVQaG90bxIwLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuVXBkYXRlUGhvdG9SZXF1ZXN0GiMuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5QaG90byJA2kERcGhvdG8sdXBkYXRlX21hc2uC0+STAiY6BXBob3RvGh0vdjEvcGhvdG8ve3Bob3RvLnBob3RvX2lkLmlkfRK/AQoRQmF0Y2hVcGRhdGVQaG90b3MSNi5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkJhdGNoVXBkYXRlUGhvdG9zUmVxdWVzdBo3Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuQmF0Y2hVcGRhdGVQaG90b3NSZXNwb25zZSI52kEVdXBkYXRlX3Bob3RvX3JlcXVlc3RzgtPkkwIbOgEqIhYvdjEvcGhvdG9zOmJhdGNoVXBkYXRlEoABCgtEZWxldGVQaG90bxIwLmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuRGVsZXRlUGhvdG9SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IifaQQhwaG90b19pZILT5JMCFioUL3YxL3Bob3RvL3twaG90b19pZH0SswEKEUJhdGNoRGVsZXRlUGhvdG9zEjYuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5CYXRjaERlbGV0ZVBob3Rvc1JlcXVlc3QaNy5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkJhdGNoRGVsZXRlUGhvdG9zUmVzcG9uc2UiLdpBCXBob3RvX2lkc4LT5JMCGzoBKiIWL3YxL3Bob3RvczpiYXRjaERlbGV0ZRKFAQoYU3RhcnRQaG90b1NlcXVlbmNlVXBsb2FkEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GicuZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5VcGxvYWRSZWYiKILT5JMCIjoBKiIdL3YxL3Bob3RvU2VxdWVuY2U6c3RhcnRVcGxvYWQS3gEKE0NyZWF0ZVBob3RvU2VxdWVuY2USOC5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkNyZWF0ZVBob3RvU2VxdWVuY2VSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJuykEmCg1QaG90b1NlcXVlbmNlEhVnb29nbGUucHJvdG9idWYuRW1wdHnaQRlwaG90b19zZXF1ZW5jZSxpbnB1dF90eXBlgtPkkwIjOg5waG90b19zZXF1ZW5jZSIRL3YxL3Bob3RvU2VxdWVuY2USugEKEEdldFBob3RvU2VxdWVuY2USNS5nb29nbGUuc3RyZWV0dmlldy5wdWJsaXNoLnYxLkdldFBob3RvU2VxdWVuY2VSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiJQykEmCg1QaG90b1NlcXVlbmNlEhVnb29nbGUucHJvdG9idWYuRW1wdHmC0+STAiESHy92MS9waG90b1NlcXVlbmNlL3tzZXF1ZW5jZV9pZH0SowEKEkxpc3RQaG90b1NlcXVlbmNlcxI3Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuTGlzdFBob3RvU2VxdWVuY2VzUmVxdWVzdBo4Lmdvb2dsZS5zdHJlZXR2aWV3LnB1Ymxpc2gudjEuTGlzdFBob3RvU2VxdWVuY2VzUmVzcG9uc2UiGoLT5JMCFBISL3YxL3Bob3RvU2VxdWVuY2VzEp4BChNEZWxldGVQaG90b1NlcXVlbmNlEjguZ29vZ2xlLnN0cmVldHZpZXcucHVibGlzaC52MS5EZWxldGVQaG90b1NlcXVlbmNlUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI12kELc2VxdWVuY2VfaWSC0+STAiEqHy92MS9waG90b1NlcXVlbmNlL3tzZXF1ZW5jZV9pZH0aV8pBIHN0cmVldHZpZXdwdWJsaXNoLmdvb2dsZWFwaXMuY29t0kExaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9zdHJlZXR2aWV3cHVibGlzaELDAQooY29tLmdvb2dsZS5nZW8udWdjLnN0cmVldHZpZXcucHVibGlzaC52MUIRU3RyZWV0Vmlld1B1Ymxpc2haQGNsb3VkLmdvb2dsZS5jb20vZ28vc3RyZWV0dmlldy9wdWJsaXNoL2FwaXYxL3B1Ymxpc2hwYjtwdWJsaXNocGLqQUEKKXN0cmVldHZpZXdwdWJsaXNoLmdvb2dsZWFwaXMuY29tL0NvbnRyYWN0EhRjb250cmFjdHMve2NvbnRyYWN0fWIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_resource, file_google_longrunning_operations, file_google_protobuf_empty, file_google_streetview_publish_v1_resources, file_google_streetview_publish_v1_rpcmessages]);

/**
 * Publishes and connects user-contributed photos on Street View.
 *
 * @generated from service google.streetview.publish.v1.StreetViewPublishService
 */
export const StreetViewPublishService: GenService<{
  /**
   * Creates an upload session to start uploading photo bytes.  The method uses
   * the upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] to upload the bytes for
   * the [Photo][google.streetview.publish.v1.Photo].
   *
   * In addition to the photo requirements shown in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604,
   * the photo must meet the following requirements:
   *
   * * Photo Sphere XMP metadata must be included in the photo metadata. See
   * https://developers.google.com/streetview/spherical-metadata for the
   * required fields.
   * * The pixel size of the photo must meet the size requirements listed in
   * https://support.google.com/maps/answer/7012050?ref_topic=6275604, and
   * the photo must be a full 360 horizontally.
   *
   * After the upload completes, the method uses
   * [UploadRef][google.streetview.publish.v1.UploadRef] with
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * to create the [Photo][google.streetview.publish.v1.Photo] object entry.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.StartUpload
   */
  startUpload: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof UploadRefSchema;
  },
  /**
   * After the client finishes uploading the photo with the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhoto][google.streetview.publish.v1.StreetViewPublishService.CreatePhoto]
   * publishes the uploaded [Photo][google.streetview.publish.v1.Photo] to
   * Street View on Google Maps.
   *
   * Currently, the only way to set heading, pitch, and roll in CreatePhoto is
   * through the [Photo Sphere XMP
   * metadata](https://developers.google.com/streetview/spherical-metadata) in
   * the photo bytes. CreatePhoto ignores the  `pose.heading`, `pose.pitch`,
   * `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed or if the uploaded photo is not a 360 photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   * * [google.rpc.Code.RESOURCE_EXHAUSTED][google.rpc.Code.RESOURCE_EXHAUSTED]
   * if the account has reached the storage limit.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.CreatePhoto
   */
  createPhoto: {
    methodKind: "unary";
    input: typeof CreatePhotoRequestSchema;
    output: typeof PhotoSchema;
  },
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo].
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [Photo][google.streetview.publish.v1.Photo].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [Photo][google.streetview.publish.v1.Photo] does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.GetPhoto
   */
  getPhoto: {
    methodKind: "unary";
    input: typeof GetPhotoRequestSchema;
    output: typeof PhotoSchema;
  },
  /**
   * Gets the metadata of the specified
   * [Photo][google.streetview.publish.v1.Photo] batch.
   *
   * Note that if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchGetPhotos][google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchGetPhotosResponse.results][google.streetview.publish.v1.BatchGetPhotosResponse.results].
   * See
   * [GetPhoto][google.streetview.publish.v1.StreetViewPublishService.GetPhoto]
   * for specific failures that can occur per photo.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.BatchGetPhotos
   */
  batchGetPhotos: {
    methodKind: "unary";
    input: typeof BatchGetPhotosRequestSchema;
    output: typeof BatchGetPhotosResponseSchema;
  },
  /**
   * Lists all the [Photos][google.streetview.publish.v1.Photo] that belong to
   * the user.
   *
   * > Note: Recently created photos that are still
   * being indexed are not returned in the response.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.ListPhotos
   */
  listPhotos: {
    methodKind: "unary";
    input: typeof ListPhotosRequestSchema;
    output: typeof ListPhotosResponseSchema;
  },
  /**
   * Updates the metadata of a [Photo][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of a
   * photo is not supported.
   *
   * Only the fields specified in the
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * photo does not exist.
   * * [google.rpc.Code.UNAVAILABLE][google.rpc.Code.UNAVAILABLE] if the
   * requested [Photo][google.streetview.publish.v1.Photo] is still being
   * indexed.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto
   */
  updatePhoto: {
    methodKind: "unary";
    input: typeof UpdatePhotoRequestSchema;
    output: typeof PhotoSchema;
  },
  /**
   * Updates the metadata of [Photos][google.streetview.publish.v1.Photo], such
   * as pose, place association, connections, etc. Changing the pixels of photos
   * is not supported.
   *
   * Note that if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchUpdatePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchUpdatePhotosResponse.results][google.streetview.publish.v1.BatchUpdatePhotosResponse.results].
   * See
   * [UpdatePhoto][google.streetview.publish.v1.StreetViewPublishService.UpdatePhoto]
   * for specific failures that can occur per photo.
   *
   * Only the fields specified in
   * [updateMask][google.streetview.publish.v1.UpdatePhotoRequest.update_mask]
   * field are used. If `updateMask` is not present, the update applies to all
   * fields.
   *
   * The number of
   * [UpdatePhotoRequest][google.streetview.publish.v1.UpdatePhotoRequest]
   * messages in a
   * [BatchUpdatePhotosRequest][google.streetview.publish.v1.BatchUpdatePhotosRequest]
   * must not exceed 20.
   *
   * > Note: To update
   * [Pose.altitude][google.streetview.publish.v1.Pose.altitude],
   * [Pose.latLngPair][google.streetview.publish.v1.Pose.lat_lng_pair] has to be
   * filled as well. Otherwise, the request will fail.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.BatchUpdatePhotos
   */
  batchUpdatePhotos: {
    methodKind: "unary";
    input: typeof BatchUpdatePhotosRequestSchema;
    output: typeof BatchUpdatePhotosResponseSchema;
  },
  /**
   * Deletes a [Photo][google.streetview.publish.v1.Photo] and its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo ID
   * does not exist.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.DeletePhoto
   */
  deletePhoto: {
    methodKind: "unary";
    input: typeof DeletePhotoRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Deletes a list of [Photos][google.streetview.publish.v1.Photo] and their
   * metadata.
   *
   * Note that if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * fails, either critical fields are missing or there is an authentication
   * error. Even if
   * [BatchDeletePhotos][google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos]
   * succeeds, individual photos in the batch may have failures.
   * These failures are specified in each
   * [PhotoResponse.status][google.streetview.publish.v1.PhotoResponse.status]
   * in
   * [BatchDeletePhotosResponse.results][google.streetview.publish.v1.BatchDeletePhotosResponse.status].
   * See
   * [DeletePhoto][google.streetview.publish.v1.StreetViewPublishService.DeletePhoto]
   * for specific failures that can occur per photo.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.BatchDeletePhotos
   */
  batchDeletePhotos: {
    methodKind: "unary";
    input: typeof BatchDeletePhotosRequestSchema;
    output: typeof BatchDeletePhotosResponseSchema;
  },
  /**
   * Creates an upload session to start uploading photo sequence data.
   * The upload URL of the returned
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used to upload the
   * data for the `photoSequence`.
   *
   * After the upload is complete, the
   * [UploadRef][google.streetview.publish.v1.UploadRef] is used with
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * to create the [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   * object entry.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.StartPhotoSequenceUpload
   */
  startPhotoSequenceUpload: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof UploadRefSchema;
  },
  /**
   * After the client finishes uploading the
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] with the
   * returned [UploadRef][google.streetview.publish.v1.UploadRef],
   * [CreatePhotoSequence][google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence]
   * extracts a sequence of 360 photos from a video or Extensible Device
   * Metadata (XDM, http://www.xdm.org/) to be published to Street View on
   * Google Maps.
   *
   * `CreatePhotoSequence` returns an [Operation][google.longrunning.Operation],
   * with the [PhotoSequence][google.streetview.publish.v1.PhotoSequence] Id set
   * in the `Operation.name` field.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT] if
   * the request is malformed.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the upload
   * reference does not exist.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.CreatePhotoSequence
   */
  createPhotoSequence: {
    methodKind: "unary";
    input: typeof CreatePhotoSequenceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the metadata of the specified
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] via the
   * [Operation][google.longrunning.Operation] interface.
   *
   * This method returns the following three types of responses:
   *
   * * `Operation.done` = false, if the processing of
   *   [PhotoSequence][google.streetview.publish.v1.PhotoSequence] is not
   *   finished yet.
   * * `Operation.done` = true and `Operation.error` is populated, if there was
   *   an error in processing.
   * * `Operation.done` = true and `Operation.response` is poulated, which
   *   contains a [PhotoSequence][google.streetview.publish.v1.PhotoSequence]
   *   message.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence].
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the requested
   * [PhotoSequence][google.streetview.publish.v1.PhotoSequence] does not exist.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.GetPhotoSequence
   */
  getPhotoSequence: {
    methodKind: "unary";
    input: typeof GetPhotoSequenceRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all the [PhotoSequences][google.streetview.publish.v1.PhotoSequence]
   * that belong to the user, in descending CreatePhotoSequence timestamp order.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.ListPhotoSequences
   */
  listPhotoSequences: {
    methodKind: "unary";
    input: typeof ListPhotoSequencesRequestSchema;
    output: typeof ListPhotoSequencesResponseSchema;
  },
  /**
   * Deletes a [PhotoSequence][google.streetview.publish.v1.PhotoSequence] and
   * its metadata.
   *
   * This method returns the following error codes:
   *
   * * [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED] if
   * the requesting user did not create the requested photo sequence.
   * * [google.rpc.Code.NOT_FOUND][google.rpc.Code.NOT_FOUND] if the photo
   * sequence ID does not exist.
   * * [google.rpc.Code.FAILED_PRECONDITION][google.rpc.Code.FAILED_PRECONDITION] if the photo sequence ID is not
   * yet finished processing.
   *
   * @generated from rpc google.streetview.publish.v1.StreetViewPublishService.DeletePhotoSequence
   */
  deletePhotoSequence: {
    methodKind: "unary";
    input: typeof DeletePhotoSequenceRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_streetview_publish_v1_streetview_publish, 0);

