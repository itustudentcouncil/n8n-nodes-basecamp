// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/build/v1/build_events.proto (package google.devtools.build.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { BuildStatus } from "./build_status_pb";
import { file_google_devtools_build_v1_build_status } from "./build_status_pb";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/build/v1/build_events.proto.
 */
export const file_google_devtools_build_v1_build_events: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvZGV2dG9vbHMvYnVpbGQvdjEvYnVpbGRfZXZlbnRzLnByb3RvEhhnb29nbGUuZGV2dG9vbHMuYnVpbGQudjEi0AsKCkJ1aWxkRXZlbnQSLgoKZXZlbnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASYwoaaW52b2NhdGlvbl9hdHRlbXB0X3N0YXJ0ZWQYMyABKAsyPS5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQnVpbGRFdmVudC5JbnZvY2F0aW9uQXR0ZW1wdFN0YXJ0ZWRIABJlChtpbnZvY2F0aW9uX2F0dGVtcHRfZmluaXNoZWQYNCABKAsyPi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQnVpbGRFdmVudC5JbnZvY2F0aW9uQXR0ZW1wdEZpbmlzaGVkSAASTAoOYnVpbGRfZW5xdWV1ZWQYNSABKAsyMi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQnVpbGRFdmVudC5CdWlsZEVucXVldWVkSAASTAoOYnVpbGRfZmluaXNoZWQYNyABKAsyMi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQnVpbGRFdmVudC5CdWlsZEZpbmlzaGVkSAASTAoOY29uc29sZV9vdXRwdXQYOCABKAsyMi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQnVpbGRFdmVudC5Db25zb2xlT3V0cHV0SAASZgoZY29tcG9uZW50X3N0cmVhbV9maW5pc2hlZBg7IAEoCzJBLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5CdWlsZEV2ZW50LkJ1aWxkQ29tcG9uZW50U3RyZWFtRmluaXNoZWRIABIrCgtiYXplbF9ldmVudBg8IAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlIABI1ChVidWlsZF9leGVjdXRpb25fZXZlbnQYPSABKAsyFC5nb29nbGUucHJvdG9idWYuQW55SAASMgoSc291cmNlX2ZldGNoX2V2ZW50GD4gASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAGlkKGEludm9jYXRpb25BdHRlbXB0U3RhcnRlZBIWCg5hdHRlbXB0X251bWJlchgBIAEoAxIlCgdkZXRhaWxzGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRqEAQoZSW52b2NhdGlvbkF0dGVtcHRGaW5pc2hlZBJAChFpbnZvY2F0aW9uX3N0YXR1cxgDIAEoCzIlLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5CdWlsZFN0YXR1cxIlCgdkZXRhaWxzGAQgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRo2Cg1CdWlsZEVucXVldWVkEiUKB2RldGFpbHMYASABKAsyFC5nb29nbGUucHJvdG9idWYuQW55Gm0KDUJ1aWxkRmluaXNoZWQSNQoGc3RhdHVzGAEgASgLMiUuZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLnYxLkJ1aWxkU3RhdHVzEiUKB2RldGFpbHMYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55GoYBCg1Db25zb2xlT3V0cHV0EjsKBHR5cGUYASABKA4yLS5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuQ29uc29sZU91dHB1dFN0cmVhbRIVCgt0ZXh0X291dHB1dBgCIAEoCUgAEhcKDWJpbmFyeV9vdXRwdXQYAyABKAxIAEIICgZvdXRwdXQawAEKHEJ1aWxkQ29tcG9uZW50U3RyZWFtRmluaXNoZWQSWgoEdHlwZRgBIAEoDjJMLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5CdWlsZEV2ZW50LkJ1aWxkQ29tcG9uZW50U3RyZWFtRmluaXNoZWQuRmluaXNoVHlwZSJECgpGaW5pc2hUeXBlEhsKF0ZJTklTSF9UWVBFX1VOU1BFQ0lGSUVEEAASDAoIRklOSVNIRUQQARILCgdFWFBJUkVEEAJCBwoFZXZlbnQiyAEKCFN0cmVhbUlkEhAKCGJ1aWxkX2lkGAEgASgJEhUKDWludm9jYXRpb25faWQYBiABKAkSRAoJY29tcG9uZW50GAMgASgOMjEuZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLnYxLlN0cmVhbUlkLkJ1aWxkQ29tcG9uZW50Ik0KDkJ1aWxkQ29tcG9uZW50EhUKEVVOS05PV05fQ09NUE9ORU5UEAASDgoKQ09OVFJPTExFUhABEgoKBldPUktFUhACEggKBFRPT0wQAyo6ChNDb25zb2xlT3V0cHV0U3RyZWFtEgsKB1VOS05PV04QABIKCgZTVERPVVQQARIKCgZTVERFUlIQAkKLAQocY29tLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MUIPQnVpbGRFdmVudFByb3RvUAFaPWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvYnVpbGQvdjE7YnVpbGT4AQHKAhVHb29nbGVcQ2xvdWRcQnVpbGRcVjFiBnByb3RvMw", [file_google_devtools_build_v1_build_status, file_google_protobuf_any, file_google_protobuf_timestamp]);

/**
 * An event representing some state change that occurred in the build. This
 * message does not include field for uniquely identifying an event.
 *
 * @generated from message google.devtools.build.v1.BuildEvent
 */
export type BuildEvent = Message<"google.devtools.build.v1.BuildEvent"> & {
  /**
   * This should be precisely the time when this event happened, and not when
   * the event proto was created or sent.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 1;
   */
  eventTime?: Timestamp;

  /**
   * //////////////////////////////////////////////////////////////////////////
   * Events that indicate a state change of a build request in the build
   * queue.
   *
   * @generated from oneof google.devtools.build.v1.BuildEvent.event
   */
  event: {
    /**
     * An invocation attempt has started.
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.InvocationAttemptStarted invocation_attempt_started = 51;
     */
    value: BuildEvent_InvocationAttemptStarted;
    case: "invocationAttemptStarted";
  } | {
    /**
     * An invocation attempt has finished.
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.InvocationAttemptFinished invocation_attempt_finished = 52;
     */
    value: BuildEvent_InvocationAttemptFinished;
    case: "invocationAttemptFinished";
  } | {
    /**
     * The build is enqueued.
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.BuildEnqueued build_enqueued = 53;
     */
    value: BuildEvent_BuildEnqueued;
    case: "buildEnqueued";
  } | {
    /**
     * The build has finished. Set when the build is terminated.
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.BuildFinished build_finished = 55;
     */
    value: BuildEvent_BuildFinished;
    case: "buildFinished";
  } | {
    /**
     * An event containing printed text.
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.ConsoleOutput console_output = 56;
     */
    value: BuildEvent_ConsoleOutput;
    case: "consoleOutput";
  } | {
    /**
     * Indicates the end of a build event stream (with the same StreamId) from
     * a build component executing the requested build task.
     * *** This field does not indicate the WatchBuild RPC is finished. ***
     *
     * @generated from field: google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished component_stream_finished = 59;
     */
    value: BuildEvent_BuildComponentStreamFinished;
    case: "componentStreamFinished";
  } | {
    /**
     * Structured build event generated by Bazel about its execution progress.
     *
     * @generated from field: google.protobuf.Any bazel_event = 60;
     */
    value: Any;
    case: "bazelEvent";
  } | {
    /**
     * An event that contains supplemental tool-specific information about
     * build execution.
     *
     * @generated from field: google.protobuf.Any build_execution_event = 61;
     */
    value: Any;
    case: "buildExecutionEvent";
  } | {
    /**
     * An event that contains supplemental tool-specific information about
     * source fetching.
     *
     * @generated from field: google.protobuf.Any source_fetch_event = 62;
     */
    value: Any;
    case: "sourceFetchEvent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.
 * Use `create(BuildEventSchema)` to create a new message.
 */
export const BuildEventSchema: GenMessage<BuildEvent> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0);

/**
 * Notification that the build system has attempted to run the build tool.
 *
 * @generated from message google.devtools.build.v1.BuildEvent.InvocationAttemptStarted
 */
export type BuildEvent_InvocationAttemptStarted = Message<"google.devtools.build.v1.BuildEvent.InvocationAttemptStarted"> & {
  /**
   * The number of the invocation attempt, starting at 1 and increasing by 1
   * for each new attempt. Can be used to determine if there is a later
   * invocation attempt replacing the current one a client is processing.
   *
   * @generated from field: int64 attempt_number = 1;
   */
  attemptNumber: bigint;

  /**
   * Arbitrary details about the invocation attempt.
   *
   * @generated from field: google.protobuf.Any details = 2;
   */
  details?: Any;
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.InvocationAttemptStarted.
 * Use `create(BuildEvent_InvocationAttemptStartedSchema)` to create a new message.
 */
export const BuildEvent_InvocationAttemptStartedSchema: GenMessage<BuildEvent_InvocationAttemptStarted> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 0);

/**
 * Notification that an invocation attempt has finished.
 *
 * @generated from message google.devtools.build.v1.BuildEvent.InvocationAttemptFinished
 */
export type BuildEvent_InvocationAttemptFinished = Message<"google.devtools.build.v1.BuildEvent.InvocationAttemptFinished"> & {
  /**
   * Final status of the invocation.
   *
   * @generated from field: google.devtools.build.v1.BuildStatus invocation_status = 3;
   */
  invocationStatus?: BuildStatus;

  /**
   * Arbitrary details about the invocation attempt.
   *
   * @generated from field: google.protobuf.Any details = 4;
   */
  details?: Any;
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.InvocationAttemptFinished.
 * Use `create(BuildEvent_InvocationAttemptFinishedSchema)` to create a new message.
 */
export const BuildEvent_InvocationAttemptFinishedSchema: GenMessage<BuildEvent_InvocationAttemptFinished> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 1);

/**
 * Notification that the build request is enqueued.
 *
 * @generated from message google.devtools.build.v1.BuildEvent.BuildEnqueued
 */
export type BuildEvent_BuildEnqueued = Message<"google.devtools.build.v1.BuildEvent.BuildEnqueued"> & {
  /**
   * Additional details about the Build.
   *
   * @generated from field: google.protobuf.Any details = 1;
   */
  details?: Any;
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.BuildEnqueued.
 * Use `create(BuildEvent_BuildEnqueuedSchema)` to create a new message.
 */
export const BuildEvent_BuildEnqueuedSchema: GenMessage<BuildEvent_BuildEnqueued> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 2);

/**
 * Notification that the build request has finished, and no further
 * invocations will occur.  Note that this applies to the entire Build.
 * Individual invocations trigger InvocationFinished when they finish.
 *
 * @generated from message google.devtools.build.v1.BuildEvent.BuildFinished
 */
export type BuildEvent_BuildFinished = Message<"google.devtools.build.v1.BuildEvent.BuildFinished"> & {
  /**
   * Final status of the build.
   *
   * @generated from field: google.devtools.build.v1.BuildStatus status = 1;
   */
  status?: BuildStatus;

  /**
   * Additional details about the Build.
   *
   * @generated from field: google.protobuf.Any details = 2;
   */
  details?: Any;
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.BuildFinished.
 * Use `create(BuildEvent_BuildFinishedSchema)` to create a new message.
 */
export const BuildEvent_BuildFinishedSchema: GenMessage<BuildEvent_BuildFinished> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 3);

/**
 * Textual output written to standard output or standard error.
 *
 * @generated from message google.devtools.build.v1.BuildEvent.ConsoleOutput
 */
export type BuildEvent_ConsoleOutput = Message<"google.devtools.build.v1.BuildEvent.ConsoleOutput"> & {
  /**
   * The output stream type.
   *
   * @generated from field: google.devtools.build.v1.ConsoleOutputStream type = 1;
   */
  type: ConsoleOutputStream;

  /**
   * The output stream content.
   *
   * @generated from oneof google.devtools.build.v1.BuildEvent.ConsoleOutput.output
   */
  output: {
    /**
     * Regular UTF-8 output; normal text.
     *
     * @generated from field: string text_output = 2;
     */
    value: string;
    case: "textOutput";
  } | {
    /**
     * Used if the output is not UTF-8 text (for example, a binary proto).
     *
     * @generated from field: bytes binary_output = 3;
     */
    value: Uint8Array;
    case: "binaryOutput";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.ConsoleOutput.
 * Use `create(BuildEvent_ConsoleOutputSchema)` to create a new message.
 */
export const BuildEvent_ConsoleOutputSchema: GenMessage<BuildEvent_ConsoleOutput> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 4);

/**
 * Notification of the end of a build event stream published by a build
 * component other than CONTROLLER (See StreamId.BuildComponents).
 *
 * @generated from message google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished
 */
export type BuildEvent_BuildComponentStreamFinished = Message<"google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished"> & {
  /**
   * How the event stream finished.
   *
   * @generated from field: google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished.FinishType type = 1;
   */
  type: BuildEvent_BuildComponentStreamFinished_FinishType;
};

/**
 * Describes the message google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished.
 * Use `create(BuildEvent_BuildComponentStreamFinishedSchema)` to create a new message.
 */
export const BuildEvent_BuildComponentStreamFinishedSchema: GenMessage<BuildEvent_BuildComponentStreamFinished> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 0, 5);

/**
 * How did the event stream finish.
 *
 * @generated from enum google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished.FinishType
 */
export enum BuildEvent_BuildComponentStreamFinished_FinishType {
  /**
   * Unknown or unspecified; callers should never set this value.
   *
   * @generated from enum value: FINISH_TYPE_UNSPECIFIED = 0;
   */
  FINISH_TYPE_UNSPECIFIED = 0,

  /**
   * Set by the event publisher to indicate a build event stream is
   * finished.
   *
   * @generated from enum value: FINISHED = 1;
   */
  FINISHED = 1,

  /**
   * Set by the WatchBuild RPC server when the publisher of a build event
   * stream stops publishing events without publishing a
   * BuildComponentStreamFinished event whose type equals FINISHED.
   *
   * @generated from enum value: EXPIRED = 2;
   */
  EXPIRED = 2,
}

/**
 * Describes the enum google.devtools.build.v1.BuildEvent.BuildComponentStreamFinished.FinishType.
 */
export const BuildEvent_BuildComponentStreamFinished_FinishTypeSchema: GenEnum<BuildEvent_BuildComponentStreamFinished_FinishType> = /*@__PURE__*/
  enumDesc(file_google_devtools_build_v1_build_events, 0, 5, 0);

/**
 * Unique identifier for a build event stream.
 *
 * @generated from message google.devtools.build.v1.StreamId
 */
export type StreamId = Message<"google.devtools.build.v1.StreamId"> & {
  /**
   * The id of a Build message.
   *
   * @generated from field: string build_id = 1;
   */
  buildId: string;

  /**
   * The unique invocation ID within this build.
   * It should be the same as {invocation} (below) during the migration.
   *
   * @generated from field: string invocation_id = 6;
   */
  invocationId: string;

  /**
   * The component that emitted this event.
   *
   * @generated from field: google.devtools.build.v1.StreamId.BuildComponent component = 3;
   */
  component: StreamId_BuildComponent;
};

/**
 * Describes the message google.devtools.build.v1.StreamId.
 * Use `create(StreamIdSchema)` to create a new message.
 */
export const StreamIdSchema: GenMessage<StreamId> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_build_events, 1);

/**
 * Which build component generates this event stream. Each build component
 * may generate one event stream.
 *
 * @generated from enum google.devtools.build.v1.StreamId.BuildComponent
 */
export enum StreamId_BuildComponent {
  /**
   * Unknown or unspecified; callers should never set this value.
   *
   * @generated from enum value: UNKNOWN_COMPONENT = 0;
   */
  UNKNOWN_COMPONENT = 0,

  /**
   * A component that coordinates builds.
   *
   * @generated from enum value: CONTROLLER = 1;
   */
  CONTROLLER = 1,

  /**
   * A component that runs executables needed to complete a build.
   *
   * @generated from enum value: WORKER = 2;
   */
  WORKER = 2,

  /**
   * A component that builds something.
   *
   * @generated from enum value: TOOL = 3;
   */
  TOOL = 3,
}

/**
 * Describes the enum google.devtools.build.v1.StreamId.BuildComponent.
 */
export const StreamId_BuildComponentSchema: GenEnum<StreamId_BuildComponent> = /*@__PURE__*/
  enumDesc(file_google_devtools_build_v1_build_events, 1, 0);

/**
 * The type of console output stream.
 *
 * @generated from enum google.devtools.build.v1.ConsoleOutputStream
 */
export enum ConsoleOutputStream {
  /**
   * Unspecified or unknown.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Normal output stream.
   *
   * @generated from enum value: STDOUT = 1;
   */
  STDOUT = 1,

  /**
   * Error output stream.
   *
   * @generated from enum value: STDERR = 2;
   */
  STDERR = 2,
}

/**
 * Describes the enum google.devtools.build.v1.ConsoleOutputStream.
 */
export const ConsoleOutputStreamSchema: GenEnum<ConsoleOutputStream> = /*@__PURE__*/
  enumDesc(file_google_devtools_build_v1_build_events, 0);

