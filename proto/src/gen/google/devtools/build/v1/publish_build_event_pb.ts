// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/build/v1/publish_build_event.proto (package google.devtools.build.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { BuildEvent, StreamId } from "./build_events_pb";
import { file_google_devtools_build_v1_build_events } from "./build_events_pb";
import type { Duration, EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/build/v1/publish_build_event.proto.
 */
export const file_google_devtools_build_v1_publish_build_event: GenFile = /*@__PURE__*/
  fileDesc("CjJnb29nbGUvZGV2dG9vbHMvYnVpbGQvdjEvcHVibGlzaF9idWlsZF9ldmVudC5wcm90bxIYZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLnYxIpMDChxQdWJsaXNoTGlmZWN5Y2xlRXZlbnRSZXF1ZXN0EloKDXNlcnZpY2VfbGV2ZWwYASABKA4yQy5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuUHVibGlzaExpZmVjeWNsZUV2ZW50UmVxdWVzdC5TZXJ2aWNlTGV2ZWwSRQoLYnVpbGRfZXZlbnQYAiABKAsyKy5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuT3JkZXJlZEJ1aWxkRXZlbnRCA+BBAhIxCg5zdHJlYW1fdGltZW91dBgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIdChVub3RpZmljYXRpb25fa2V5d29yZHMYBCADKAkSFwoKcHJvamVjdF9pZBgGIAEoCUID4EECEjAKKGNoZWNrX3ByZWNlZGluZ19saWZlY3ljbGVfZXZlbnRzX3ByZXNlbnQYByABKAgiMwoMU2VydmljZUxldmVsEhIKDk5PTklOVEVSQUNUSVZFEAASDwoLSU5URVJBQ1RJVkUQASJ1CiNQdWJsaXNoQnVpbGRUb29sRXZlbnRTdHJlYW1SZXNwb25zZRI1CglzdHJlYW1faWQYASABKAsyIi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuU3RyZWFtSWQSFwoPc2VxdWVuY2VfbnVtYmVyGAIgASgDIpgBChFPcmRlcmVkQnVpbGRFdmVudBI1CglzdHJlYW1faWQYASABKAsyIi5nb29nbGUuZGV2dG9vbHMuYnVpbGQudjEuU3RyZWFtSWQSFwoPc2VxdWVuY2VfbnVtYmVyGAIgASgDEjMKBWV2ZW50GAMgASgLMiQuZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLnYxLkJ1aWxkRXZlbnQi3QEKIlB1Ymxpc2hCdWlsZFRvb2xFdmVudFN0cmVhbVJlcXVlc3QSTQoTb3JkZXJlZF9idWlsZF9ldmVudBgEIAEoCzIrLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5PcmRlcmVkQnVpbGRFdmVudEID4EECEh0KFW5vdGlmaWNhdGlvbl9rZXl3b3JkcxgFIAMoCRIXCgpwcm9qZWN0X2lkGAYgASgJQgPgQQISMAooY2hlY2tfcHJlY2VkaW5nX2xpZmVjeWNsZV9ldmVudHNfcHJlc2VudBgHIAEoCDLeBAoRUHVibGlzaEJ1aWxkRXZlbnQSyQEKFVB1Ymxpc2hMaWZlY3ljbGVFdmVudBI2Lmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5QdWJsaXNoTGlmZWN5Y2xlRXZlbnRSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5ImCC0+STAlo6ASpaIDoBKiIbL3YxL2xpZmVjeWNsZUV2ZW50czpwdWJsaXNoIjMvdjEvcHJvamVjdHMve3Byb2plY3RfaWQ9Kn0vbGlmZWN5Y2xlRXZlbnRzOnB1Ymxpc2gSpgIKG1B1Ymxpc2hCdWlsZFRvb2xFdmVudFN0cmVhbRI8Lmdvb2dsZS5kZXZ0b29scy5idWlsZC52MS5QdWJsaXNoQnVpbGRUb29sRXZlbnRTdHJlYW1SZXF1ZXN0Gj0uZ29vZ2xlLmRldnRvb2xzLmJ1aWxkLnYxLlB1Ymxpc2hCdWlsZFRvb2xFdmVudFN0cmVhbVJlc3BvbnNlIoUB2kE0b3JkZXJlZF9idWlsZF9ldmVudCxub3RpZmljYXRpb25fa2V5d29yZHMscHJvamVjdF9pZILT5JMCSDoBKloXOgEqIhIvdjEvZXZlbnRzOnB1Ymxpc2giKi92MS9wcm9qZWN0cy97cHJvamVjdF9pZD0qfS9ldmVudHM6cHVibGlzaCgBMAEaVMpBIGJ1aWxkZXZlbnRzZXJ2aWNlLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybUKIAQocY29tLmdvb2dsZS5kZXZ0b29scy5idWlsZC52MUIMQmFja2VuZFByb3RvUAFaPWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvYnVpbGQvdjE7YnVpbGT4AQHKAhVHb29nbGVcQ2xvdWRcQnVpbGRcVjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_devtools_build_v1_build_events, file_google_protobuf_duration, file_google_protobuf_empty]);

/**
 * Publishes 'lifecycle events' that update the high-level state of a build:
 * - BuildEnqueued: When a build is scheduled.
 * - InvocationAttemptStarted: When work for a build starts; there can be
 *     multiple invocations for a build (e.g. retries).
 * - InvocationAttemptCompleted: When work for a build finishes.
 * - BuildFinished: When a build is finished.
 *
 * @generated from message google.devtools.build.v1.PublishLifecycleEventRequest
 */
export type PublishLifecycleEventRequest = Message<"google.devtools.build.v1.PublishLifecycleEventRequest"> & {
  /**
   * The interactivity of this build.
   *
   * @generated from field: google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel service_level = 1;
   */
  serviceLevel: PublishLifecycleEventRequest_ServiceLevel;

  /**
   * Required. The lifecycle build event. If this is a build tool event, the RPC
   * will fail with INVALID_REQUEST.
   *
   * @generated from field: google.devtools.build.v1.OrderedBuildEvent build_event = 2;
   */
  buildEvent?: OrderedBuildEvent;

  /**
   * If the next event for this build or invocation (depending on the event
   * type) hasn't been published after this duration from when {build_event}
   * is written to BES, consider this stream expired. If this field is not set,
   * BES backend will use its own default value.
   *
   * @generated from field: google.protobuf.Duration stream_timeout = 3;
   */
  streamTimeout?: Duration;

  /**
   * Additional information about a build request. These are define by the event
   * publishers, and the Build Event Service does not validate or interpret
   * them. They are used while notifying internal systems of new builds and
   * invocations if the OrderedBuildEvent.event type is
   * BuildEnqueued/InvocationAttemptStarted.
   *
   * @generated from field: repeated string notification_keywords = 4;
   */
  notificationKeywords: string[];

  /**
   * Required. The project this build is associated with.
   * This should match the project used for the initial call to
   * PublishLifecycleEvent (containing a BuildEnqueued message).
   *
   * @generated from field: string project_id = 6;
   */
  projectId: string;

  /**
   * Whether to require a previously received matching parent lifecycle event
   * for the current request's event before continuing processing.
   * - InvocationAttemptStarted and BuildFinished events require a BuildEnqueued
   *   parent event.
   * - InvocationAttemptFinished events require an InvocationAttemptStarted
   *   parent event.
   *
   * @generated from field: bool check_preceding_lifecycle_events_present = 7;
   */
  checkPrecedingLifecycleEventsPresent: boolean;
};

/**
 * Describes the message google.devtools.build.v1.PublishLifecycleEventRequest.
 * Use `create(PublishLifecycleEventRequestSchema)` to create a new message.
 */
export const PublishLifecycleEventRequestSchema: GenMessage<PublishLifecycleEventRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_publish_build_event, 0);

/**
 * The service level of the build request. Backends only uses this value when
 * the BuildEnqueued event is published to determine what level of service
 * this build should receive.
 *
 * @generated from enum google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel
 */
export enum PublishLifecycleEventRequest_ServiceLevel {
  /**
   * Non-interactive builds can tolerate longer event latencies. This is the
   * default ServiceLevel if callers do not specify one.
   *
   * @generated from enum value: NONINTERACTIVE = 0;
   */
  NONINTERACTIVE = 0,

  /**
   * The events of an interactive build should be delivered with low latency.
   *
   * @generated from enum value: INTERACTIVE = 1;
   */
  INTERACTIVE = 1,
}

/**
 * Describes the enum google.devtools.build.v1.PublishLifecycleEventRequest.ServiceLevel.
 */
export const PublishLifecycleEventRequest_ServiceLevelSchema: GenEnum<PublishLifecycleEventRequest_ServiceLevel> = /*@__PURE__*/
  enumDesc(file_google_devtools_build_v1_publish_build_event, 0, 0);

/**
 * States which event has been committed. Any failure to commit will cause
 * RPC errors, hence not recorded by this proto.
 *
 * @generated from message google.devtools.build.v1.PublishBuildToolEventStreamResponse
 */
export type PublishBuildToolEventStreamResponse = Message<"google.devtools.build.v1.PublishBuildToolEventStreamResponse"> & {
  /**
   * The stream that contains this event.
   *
   * @generated from field: google.devtools.build.v1.StreamId stream_id = 1;
   */
  streamId?: StreamId;

  /**
   * The sequence number of this event that has been committed.
   *
   * @generated from field: int64 sequence_number = 2;
   */
  sequenceNumber: bigint;
};

/**
 * Describes the message google.devtools.build.v1.PublishBuildToolEventStreamResponse.
 * Use `create(PublishBuildToolEventStreamResponseSchema)` to create a new message.
 */
export const PublishBuildToolEventStreamResponseSchema: GenMessage<PublishBuildToolEventStreamResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_publish_build_event, 1);

/**
 * Build event with contextual information about the stream it belongs to and
 * its position in that stream.
 *
 * @generated from message google.devtools.build.v1.OrderedBuildEvent
 */
export type OrderedBuildEvent = Message<"google.devtools.build.v1.OrderedBuildEvent"> & {
  /**
   * Which build event stream this event belongs to.
   *
   * @generated from field: google.devtools.build.v1.StreamId stream_id = 1;
   */
  streamId?: StreamId;

  /**
   * The position of this event in the stream. The sequence numbers for a build
   * event stream should be a sequence of consecutive natural numbers starting
   * from one. (1, 2, 3, ...)
   *
   * @generated from field: int64 sequence_number = 2;
   */
  sequenceNumber: bigint;

  /**
   * The actual event.
   *
   * @generated from field: google.devtools.build.v1.BuildEvent event = 3;
   */
  event?: BuildEvent;
};

/**
 * Describes the message google.devtools.build.v1.OrderedBuildEvent.
 * Use `create(OrderedBuildEventSchema)` to create a new message.
 */
export const OrderedBuildEventSchema: GenMessage<OrderedBuildEvent> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_publish_build_event, 2);

/**
 * Streaming request message for PublishBuildToolEventStream.
 *
 * @generated from message google.devtools.build.v1.PublishBuildToolEventStreamRequest
 */
export type PublishBuildToolEventStreamRequest = Message<"google.devtools.build.v1.PublishBuildToolEventStreamRequest"> & {
  /**
   * Required. The build event with position info.
   * New publishing clients should use this field rather than the 3 above.
   *
   * @generated from field: google.devtools.build.v1.OrderedBuildEvent ordered_build_event = 4;
   */
  orderedBuildEvent?: OrderedBuildEvent;

  /**
   * The keywords to be attached to the notification which notifies the start
   * of a new build event stream. BES only reads this field when sequence_number
   * or ordered_build_event.sequence_number is 1 in this message. If this field
   * is empty, BES will not publish notification messages for this stream.
   *
   * @generated from field: repeated string notification_keywords = 5;
   */
  notificationKeywords: string[];

  /**
   * Required. The project this build is associated with.
   * This should match the project used for the initial call to
   * PublishLifecycleEvent (containing a BuildEnqueued message).
   *
   * @generated from field: string project_id = 6;
   */
  projectId: string;

  /**
   * Whether to require a previously received matching InvocationAttemptStarted
   * event before continuing event processing for the event in the current
   * request. BES only performs this check for events with sequence_number 1
   * i.e. the first event in the stream.
   *
   * @generated from field: bool check_preceding_lifecycle_events_present = 7;
   */
  checkPrecedingLifecycleEventsPresent: boolean;
};

/**
 * Describes the message google.devtools.build.v1.PublishBuildToolEventStreamRequest.
 * Use `create(PublishBuildToolEventStreamRequestSchema)` to create a new message.
 */
export const PublishBuildToolEventStreamRequestSchema: GenMessage<PublishBuildToolEventStreamRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_build_v1_publish_build_event, 3);

/**
 * A service for publishing BuildEvents. BuildEvents are generated by Build
 * Systems to record actions taken during a Build. Events occur in streams,
 * are identified by a StreamId, and ordered by sequence number in a stream.
 *
 * A Build may contain several streams of BuildEvents, depending on the systems
 * that are involved in the Build. Some BuildEvents are used to declare the
 * beginning and end of major portions of a Build; these are called
 * LifecycleEvents, and are used (for example) to indicate the beginning or end
 * of a Build, and the beginning or end of an Invocation attempt (there can be
 * more than 1 Invocation in a Build if, for example, a failure occurs somewhere
 * and it needs to be retried).
 *
 * Other, build-tool events represent actions taken by the Build tool, such as
 * target objects produced via compilation, tests run, et cetera. There could be
 * more than one build tool stream for an invocation attempt of a build.
 *
 * @generated from service google.devtools.build.v1.PublishBuildEvent
 */
export const PublishBuildEvent: GenService<{
  /**
   * Publish a build event stating the new state of a build (typically from the
   * build queue). The BuildEnqueued event must be published before all other
   * events for the same build ID.
   *
   * The backend will persist the event and deliver it to registered frontend
   * jobs immediately without batching.
   *
   * The commit status of the request is reported by the RPC's util_status()
   * function. The error code is the canonical error code defined in
   * //util/task/codes.proto.
   *
   * @generated from rpc google.devtools.build.v1.PublishBuildEvent.PublishLifecycleEvent
   */
  publishLifecycleEvent: {
    methodKind: "unary";
    input: typeof PublishLifecycleEventRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Publish build tool events belonging to the same stream to a backend job
   * using bidirectional streaming.
   *
   * @generated from rpc google.devtools.build.v1.PublishBuildEvent.PublishBuildToolEventStream
   */
  publishBuildToolEventStream: {
    methodKind: "bidi_streaming";
    input: typeof PublishBuildToolEventStreamRequestSchema;
    output: typeof PublishBuildToolEventStreamResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_build_v1_publish_build_event, 0);

