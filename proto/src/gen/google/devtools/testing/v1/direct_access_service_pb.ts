// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/testing/v1/direct_access_service.proto (package google.devtools.testing.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { AdbMessageSchema, DeviceMessageSchema } from "./adb_service_pb";
import { file_google_devtools_testing_v1_adb_service } from "./adb_service_pb";
import type { AndroidDevice } from "./test_execution_pb";
import { file_google_devtools_testing_v1_test_execution } from "./test_execution_pb";
import type { Duration, EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/testing/v1/direct_access_service.proto.
 */
export const file_google_devtools_testing_v1_direct_access_service: GenFile = /*@__PURE__*/
  fileDesc("CjZnb29nbGUvZGV2dG9vbHMvdGVzdGluZy92MS9kaXJlY3RfYWNjZXNzX3NlcnZpY2UucHJvdG8SGmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxIqkBChpDcmVhdGVEZXZpY2VTZXNzaW9uUmVxdWVzdBJDCgZwYXJlbnQYASABKAlCM+BBAvpBLQorY2xvdWRyZXNvdXJjZW1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vUHJvamVjdBJGCg5kZXZpY2Vfc2Vzc2lvbhgCIAEoCzIpLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZVNlc3Npb25CA+BBAiKmAQoZTGlzdERldmljZVNlc3Npb25zUmVxdWVzdBJDCgZwYXJlbnQYBCABKAlCM+BBAvpBLQorY2xvdWRyZXNvdXJjZW1hbmFnZXIuZ29vZ2xlYXBpcy5jb20vUHJvamVjdBIWCglwYWdlX3NpemUYASABKAVCA+BBARIXCgpwYWdlX3Rva2VuGAIgASgJQgPgQQESEwoGZmlsdGVyGAMgASgJQgPgQQEieQoaTGlzdERldmljZVNlc3Npb25zUmVzcG9uc2USQgoPZGV2aWNlX3Nlc3Npb25zGAEgAygLMikuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlU2Vzc2lvbhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiVQoXR2V0RGV2aWNlU2Vzc2lvblJlcXVlc3QSOgoEbmFtZRgBIAEoCUIs4EEC+kEmCiR0ZXN0aW5nLmdvb2dsZWFwaXMuY29tL0RldmljZVNlc3Npb24iWAoaQ2FuY2VsRGV2aWNlU2Vzc2lvblJlcXVlc3QSOgoEbmFtZRgBIAEoCUIs4EEC+kEmCiR0ZXN0aW5nLmdvb2dsZWFwaXMuY29tL0RldmljZVNlc3Npb24imgEKGlVwZGF0ZURldmljZVNlc3Npb25SZXF1ZXN0EkYKDmRldmljZV9zZXNzaW9uGAEgASgLMikuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlU2Vzc2lvbkID4EECEjQKC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0ID4EECIvEHCg1EZXZpY2VTZXNzaW9uEhEKBG5hbWUYASABKAlCA+BBARIZCgxkaXNwbGF5X25hbWUYAiABKAlCA+BBAxJKCgVzdGF0ZRgDIAEoDjI2Lmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZVNlc3Npb24uU2Vzc2lvblN0YXRlQgPgQQMSWQoPc3RhdGVfaGlzdG9yaWVzGA4gAygLMjsuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlU2Vzc2lvbi5TZXNzaW9uU3RhdGVFdmVudEID4EEDEi0KA3R0bBgNIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkID4EEBSAASNgoLZXhwaXJlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQFIABI6ChJpbmFjdGl2aXR5X3RpbWVvdXQYByABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBAxI0CgtjcmVhdGVfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI6ChFhY3RpdmVfc3RhcnRfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxJGCg5hbmRyb2lkX2RldmljZRgPIAEoCzIpLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkFuZHJvaWREZXZpY2VCA+BBAhq4AQoRU2Vzc2lvblN0YXRlRXZlbnQSUgoNc2Vzc2lvbl9zdGF0ZRgBIAEoDjI2Lmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZVNlc3Npb24uU2Vzc2lvblN0YXRlQgPgQQMSMwoKZXZlbnRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIaCg1zdGF0ZV9tZXNzYWdlGAMgASgJQgPgQQMijAEKDFNlc3Npb25TdGF0ZRIdChlTRVNTSU9OX1NUQVRFX1VOU1BFQ0lGSUVEEAASDQoJUkVRVUVTVEVEEAESCwoHUEVORElORxACEgoKBkFDVElWRRADEgsKB0VYUElSRUQQBBIMCghGSU5JU0hFRBAFEg8KC1VOQVZBSUxBQkxFEAYSCQoFRVJST1IQBzpW6kFTCiR0ZXN0aW5nLmdvb2dsZWFwaXMuY29tL0RldmljZVNlc3Npb24SK3Byb2plY3RzL3twcm9qZWN0fS9kZXZpY2VTZXNzaW9ucy97c2Vzc2lvbn1CDAoKZXhwaXJhdGlvbjKPCQoTRGlyZWN0QWNjZXNzU2VydmljZRLQAQoTQ3JlYXRlRGV2aWNlU2Vzc2lvbhI2Lmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkNyZWF0ZURldmljZVNlc3Npb25SZXF1ZXN0GikuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlU2Vzc2lvbiJW2kEVcGFyZW50LGRldmljZV9zZXNzaW9ugtPkkwI4Og5kZXZpY2Vfc2Vzc2lvbiImL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vZGV2aWNlU2Vzc2lvbnMSvAEKEkxpc3REZXZpY2VTZXNzaW9ucxI1Lmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkxpc3REZXZpY2VTZXNzaW9uc1JlcXVlc3QaNi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5MaXN0RGV2aWNlU2Vzc2lvbnNSZXNwb25zZSI32kEGcGFyZW50gtPkkwIoEiYvdjEve3BhcmVudD1wcm9qZWN0cy8qfS9kZXZpY2VTZXNzaW9ucxKpAQoQR2V0RGV2aWNlU2Vzc2lvbhIzLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkdldERldmljZVNlc3Npb25SZXF1ZXN0GikuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlU2Vzc2lvbiI12kEEbmFtZYLT5JMCKBImL3YxL3tuYW1lPXByb2plY3RzLyovZGV2aWNlU2Vzc2lvbnMvKn0SnwEKE0NhbmNlbERldmljZVNlc3Npb24SNi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5DYW5jZWxEZXZpY2VTZXNzaW9uUmVxdWVzdBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSI4gtPkkwIyOgEqIi0vdjEve25hbWU9cHJvamVjdHMvKi9kZXZpY2VTZXNzaW9ucy8qfTpjYW5jZWwS5AEKE1VwZGF0ZURldmljZVNlc3Npb24SNi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5VcGRhdGVEZXZpY2VTZXNzaW9uUmVxdWVzdBopLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZVNlc3Npb24iatpBGmRldmljZV9zZXNzaW9uLHVwZGF0ZV9tYXNrgtPkkwJHOg5kZXZpY2Vfc2Vzc2lvbjI1L3YxL3tkZXZpY2Vfc2Vzc2lvbi5uYW1lPXByb2plY3RzLyovZGV2aWNlU2Vzc2lvbnMvKn0SZQoKQWRiQ29ubmVjdBImLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkFkYk1lc3NhZ2UaKS5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EZXZpY2VNZXNzYWdlIgAoATABGkrKQRZ0ZXN0aW5nLmdvb2dsZWFwaXMuY29t0kEuaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybUJ/Ch5jb20uZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjFCGERpcmVjdEFjY2Vzc1NlcnZpY2VQcm90b1ABWkFnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2RldnRvb2xzL3Rlc3RpbmcvdjE7dGVzdGluZ2IGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_devtools_testing_v1_adb_service, file_google_devtools_testing_v1_test_execution, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A Request for the device session from the session service.
 *
 * @generated from message google.devtools.testing.v1.CreateDeviceSessionRequest
 */
export type CreateDeviceSessionRequest = Message<"google.devtools.testing.v1.CreateDeviceSessionRequest"> & {
  /**
   * Required. The Compute Engine project under which this device will be
   * allocated. "projects/{project_id}"
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A device session to create.
   *
   * @generated from field: google.devtools.testing.v1.DeviceSession device_session = 2;
   */
  deviceSession?: DeviceSession;
};

/**
 * Describes the message google.devtools.testing.v1.CreateDeviceSessionRequest.
 * Use `create(CreateDeviceSessionRequestSchema)` to create a new message.
 */
export const CreateDeviceSessionRequestSchema: GenMessage<CreateDeviceSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 0);

/**
 * Request a list of device sessions in the provided parent matching the given
 * filter.
 *
 * @generated from message google.devtools.testing.v1.ListDeviceSessionsRequest
 */
export type ListDeviceSessionsRequest = Message<"google.devtools.testing.v1.ListDeviceSessionsRequest"> & {
  /**
   * Required. The name of the parent to request, e.g. "projects/{project_id}"
   *
   * @generated from field: string parent = 4;
   */
  parent: string;

  /**
   * Optional. The maximum number of DeviceSessions to return.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Optional. A continuation token for paging.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. If specified, responses will be filtered by the given filter.
   * Allowed fields are: session_state.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;
};

/**
 * Describes the message google.devtools.testing.v1.ListDeviceSessionsRequest.
 * Use `create(ListDeviceSessionsRequestSchema)` to create a new message.
 */
export const ListDeviceSessionsRequestSchema: GenMessage<ListDeviceSessionsRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 1);

/**
 * A list of device sessions.
 *
 * @generated from message google.devtools.testing.v1.ListDeviceSessionsResponse
 */
export type ListDeviceSessionsResponse = Message<"google.devtools.testing.v1.ListDeviceSessionsResponse"> & {
  /**
   * The sessions matching the specified filter in the given cloud project.
   *
   * @generated from field: repeated google.devtools.testing.v1.DeviceSession device_sessions = 1;
   */
  deviceSessions: DeviceSession[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.devtools.testing.v1.ListDeviceSessionsResponse.
 * Use `create(ListDeviceSessionsResponseSchema)` to create a new message.
 */
export const ListDeviceSessionsResponseSchema: GenMessage<ListDeviceSessionsResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 2);

/**
 * The request object for a Device Session.
 *
 * @generated from message google.devtools.testing.v1.GetDeviceSessionRequest
 */
export type GetDeviceSessionRequest = Message<"google.devtools.testing.v1.GetDeviceSessionRequest"> & {
  /**
   * Required. Name of the DeviceSession, e.g.
   * "projects/{project_id}/deviceSessions/{session_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.devtools.testing.v1.GetDeviceSessionRequest.
 * Use `create(GetDeviceSessionRequestSchema)` to create a new message.
 */
export const GetDeviceSessionRequestSchema: GenMessage<GetDeviceSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 3);

/**
 * The request object for cancelling a Device Session.
 *
 * @generated from message google.devtools.testing.v1.CancelDeviceSessionRequest
 */
export type CancelDeviceSessionRequest = Message<"google.devtools.testing.v1.CancelDeviceSessionRequest"> & {
  /**
   * Required. Name of the DeviceSession, e.g.
   * "projects/{project_id}/deviceSessions/{session_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.devtools.testing.v1.CancelDeviceSessionRequest.
 * Use `create(CancelDeviceSessionRequestSchema)` to create a new message.
 */
export const CancelDeviceSessionRequestSchema: GenMessage<CancelDeviceSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 4);

/**
 * The request object for the UpdateDeviceSession RPC.
 *
 * @generated from message google.devtools.testing.v1.UpdateDeviceSessionRequest
 */
export type UpdateDeviceSessionRequest = Message<"google.devtools.testing.v1.UpdateDeviceSessionRequest"> & {
  /**
   * Required. DeviceSession to update.
   * The device session's `name` field is used to identify the session to update
   * "projects/{project_id}/deviceSessions/{session_id}"
   *
   * @generated from field: google.devtools.testing.v1.DeviceSession device_session = 1;
   */
  deviceSession?: DeviceSession;

  /**
   * Required. The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.devtools.testing.v1.UpdateDeviceSessionRequest.
 * Use `create(UpdateDeviceSessionRequestSchema)` to create a new message.
 */
export const UpdateDeviceSessionRequestSchema: GenMessage<UpdateDeviceSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 5);

/**
 * Protobuf message describing the device message, used from several RPCs.
 *
 * @generated from message google.devtools.testing.v1.DeviceSession
 */
export type DeviceSession = Message<"google.devtools.testing.v1.DeviceSession"> & {
  /**
   * Optional. Name of the DeviceSession, e.g.
   * "projects/{project_id}/deviceSessions/{session_id}"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The title of the DeviceSession to be presented in the UI.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Output only. Current state of the DeviceSession.
   *
   * @generated from field: google.devtools.testing.v1.DeviceSession.SessionState state = 3;
   */
  state: DeviceSession_SessionState;

  /**
   * Output only. The historical state transitions of the session_state message
   * including the current session state.
   *
   * @generated from field: repeated google.devtools.testing.v1.DeviceSession.SessionStateEvent state_histories = 14;
   */
  stateHistories: DeviceSession_SessionStateEvent[];

  /**
   * @generated from oneof google.devtools.testing.v1.DeviceSession.expiration
   */
  expiration: {
    /**
     * Optional. The amount of time that a device will be initially allocated
     * for. This can eventually be extended with the UpdateDeviceSession RPC.
     * Default: 15 minutes.
     *
     * @generated from field: google.protobuf.Duration ttl = 13;
     */
    value: Duration;
    case: "ttl";
  } | {
    /**
     * Optional. If the device is still in use at this time, any connections
     * will be ended and the SessionState will transition from ACTIVE to
     * FINISHED.
     *
     * @generated from field: google.protobuf.Timestamp expire_time = 5;
     */
    value: Timestamp;
    case: "expireTime";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. The interval of time that this device must be interacted with
   * before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
   *
   * @generated from field: google.protobuf.Duration inactivity_timeout = 7;
   */
  inactivityTimeout?: Duration;

  /**
   * Output only. The time that the Session was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 8;
   */
  createTime?: Timestamp;

  /**
   * Output only. The timestamp that the session first became ACTIVE.
   *
   * @generated from field: google.protobuf.Timestamp active_start_time = 9;
   */
  activeStartTime?: Timestamp;

  /**
   * Required. The requested device
   *
   * @generated from field: google.devtools.testing.v1.AndroidDevice android_device = 15;
   */
  androidDevice?: AndroidDevice;
};

/**
 * Describes the message google.devtools.testing.v1.DeviceSession.
 * Use `create(DeviceSessionSchema)` to create a new message.
 */
export const DeviceSessionSchema: GenMessage<DeviceSession> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 6);

/**
 * A message encapsulating a series of Session states and the time that the
 * DeviceSession first entered those states.
 *
 * @generated from message google.devtools.testing.v1.DeviceSession.SessionStateEvent
 */
export type DeviceSession_SessionStateEvent = Message<"google.devtools.testing.v1.DeviceSession.SessionStateEvent"> & {
  /**
   * Output only. The session_state tracked by this event
   *
   * @generated from field: google.devtools.testing.v1.DeviceSession.SessionState session_state = 1;
   */
  sessionState: DeviceSession_SessionState;

  /**
   * Output only. The time that the session_state first encountered that
   * state.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 2;
   */
  eventTime?: Timestamp;

  /**
   * Output only. A human-readable message to explain the state.
   *
   * @generated from field: string state_message = 3;
   */
  stateMessage: string;
};

/**
 * Describes the message google.devtools.testing.v1.DeviceSession.SessionStateEvent.
 * Use `create(DeviceSession_SessionStateEventSchema)` to create a new message.
 */
export const DeviceSession_SessionStateEventSchema: GenMessage<DeviceSession_SessionStateEvent> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_direct_access_service, 6, 0);

/**
 * The state that the device session resides.
 *
 * @generated from enum google.devtools.testing.v1.DeviceSession.SessionState
 */
export enum DeviceSession_SessionState {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: SESSION_STATE_UNSPECIFIED = 0;
   */
  SESSION_STATE_UNSPECIFIED = 0,

  /**
   * Initial state of a session request. The session is being validated for
   * correctness and a device is not yet requested.
   *
   * @generated from enum value: REQUESTED = 1;
   */
  REQUESTED = 1,

  /**
   * The session has been validated and is in the queue for a device.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * The session has been granted and the device is accepting
   * connections.
   *
   * @generated from enum value: ACTIVE = 3;
   */
  ACTIVE = 3,

  /**
   * The session duration exceeded the device’s reservation time period and
   * timed out automatically.
   *
   * @generated from enum value: EXPIRED = 4;
   */
  EXPIRED = 4,

  /**
   * The user is finished with the session and it was canceled by the user
   * while the request was still getting allocated or after allocation and
   * during device usage period.
   *
   * @generated from enum value: FINISHED = 5;
   */
  FINISHED = 5,

  /**
   * Unable to complete the session because the device was unavailable and
   * it failed to allocate through the scheduler. For example, a device not
   * in the catalog was requested or the request expired in the allocation
   * queue.
   *
   * @generated from enum value: UNAVAILABLE = 6;
   */
  UNAVAILABLE = 6,

  /**
   * Unable to complete the session for an internal reason, such as an
   * infrastructure failure.
   *
   * @generated from enum value: ERROR = 7;
   */
  ERROR = 7,
}

/**
 * Describes the enum google.devtools.testing.v1.DeviceSession.SessionState.
 */
export const DeviceSession_SessionStateSchema: GenEnum<DeviceSession_SessionState> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_direct_access_service, 6, 0);

/**
 * A service for allocating devices and interacting with the live-allocated
 * devices.
 *
 * This service is part of Firebase Test Lab. To learn about how to use the
 * product, and how to integrate it with your system,
 * visit https://firebase.google.com/docs/test-lab.
 *
 * Each Session will wait for available capacity, at a higher
 * priority over Test Execution. When allocated, the session will be exposed
 * through a stream for integration.
 *
 * DirectAccessService is currently available as a preview to select developers.
 * You can register today on behalf of you and your team at
 * https://developer.android.com/studio/preview/android-device-streaming
 *
 * @generated from service google.devtools.testing.v1.DirectAccessService
 */
export const DirectAccessService: GenService<{
  /**
   * POST /v1/projects/{project_id}/deviceSessions
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.CreateDeviceSession
   */
  createDeviceSession: {
    methodKind: "unary";
    input: typeof CreateDeviceSessionRequestSchema;
    output: typeof DeviceSessionSchema;
  },
  /**
   * GET /v1/projects/{project_id}/deviceSessions
   * Lists device Sessions owned by the project user.
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.ListDeviceSessions
   */
  listDeviceSessions: {
    methodKind: "unary";
    input: typeof ListDeviceSessionsRequestSchema;
    output: typeof ListDeviceSessionsResponseSchema;
  },
  /**
   * GET /v1/projects/{project_id}/deviceSessions/{device_session_id}
   * Return a DeviceSession, which documents the allocation status and
   * whether the device is allocated. Clients making requests from this API
   * must poll GetDeviceSession.
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.GetDeviceSession
   */
  getDeviceSession: {
    methodKind: "unary";
    input: typeof GetDeviceSessionRequestSchema;
    output: typeof DeviceSessionSchema;
  },
  /**
   * POST
   * /v1/projects/{project_id}/deviceSessions/{device_session_id}:cancel
   * Changes the DeviceSession to state FINISHED and terminates all connections.
   * Canceled sessions are not deleted and can be retrieved or
   * listed by the user until they expire based on the 28 day deletion policy.
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.CancelDeviceSession
   */
  cancelDeviceSession: {
    methodKind: "unary";
    input: typeof CancelDeviceSessionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * PATCH
   * /v1/projects/{projectId}/deviceSessions/deviceSessionId}:updateDeviceSession
   * Updates the current device session to the fields described by the
   * update_mask.
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.UpdateDeviceSession
   */
  updateDeviceSession: {
    methodKind: "unary";
    input: typeof UpdateDeviceSessionRequestSchema;
    output: typeof DeviceSessionSchema;
  },
  /**
   * Exposes ADB connection for use with the Adb Device Forwarder project
   * if the reserved device supports ADB.
   * gRPC headers are used to authenticate the Connect RPC, as well as
   * associate to a particular device session.
   * In particular, the user must specify the "X-FTL-Session-Name" header.
   *
   * @generated from rpc google.devtools.testing.v1.DirectAccessService.AdbConnect
   */
  adbConnect: {
    methodKind: "bidi_streaming";
    input: typeof AdbMessageSchema;
    output: typeof DeviceMessageSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_testing_v1_direct_access_service, 0);

