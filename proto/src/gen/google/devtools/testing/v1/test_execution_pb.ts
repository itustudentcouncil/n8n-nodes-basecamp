// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/testing/v1/test_execution.proto (package google.devtools.testing.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/testing/v1/test_execution.proto.
 */
export const file_google_devtools_testing_v1_test_execution: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * TestMatrix captures all details about a test. It contains the environment
 * configuration, test specification, test executions and overall state and
 * outcome.
 *
 * @generated from message google.devtools.testing.v1.TestMatrix
 */
export type TestMatrix = Message<"google.devtools.testing.v1.TestMatrix"> & {
  /**
   * Output only. Unique id set by the service.
   *
   * @generated from field: string test_matrix_id = 1;
   */
  testMatrixId: string;

  /**
   * The cloud project that owns the test matrix.
   *
   * @generated from field: string project_id = 7;
   */
  projectId: string;

  /**
   * Information about the client which invoked the test.
   *
   * @generated from field: google.devtools.testing.v1.ClientInfo client_info = 10;
   */
  clientInfo?: ClientInfo;

  /**
   * Required. How to run the test.
   *
   * @generated from field: google.devtools.testing.v1.TestSpecification test_specification = 3;
   */
  testSpecification?: TestSpecification;

  /**
   * Required. The devices the tests are being executed on.
   *
   * @generated from field: google.devtools.testing.v1.EnvironmentMatrix environment_matrix = 4;
   */
  environmentMatrix?: EnvironmentMatrix;

  /**
   * Output only. The list of test executions that the service creates for
   * this matrix.
   *
   * @generated from field: repeated google.devtools.testing.v1.TestExecution test_executions = 5;
   */
  testExecutions: TestExecution[];

  /**
   * Required. Where the results for the matrix are written.
   *
   * @generated from field: google.devtools.testing.v1.ResultStorage result_storage = 6;
   */
  resultStorage?: ResultStorage;

  /**
   * Output only. Indicates the current progress of the test matrix.
   *
   * @generated from field: google.devtools.testing.v1.TestState state = 8;
   */
  state: TestState;

  /**
   * Output only. The time this test matrix was initially created.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 9;
   */
  timestamp?: Timestamp;

  /**
   * Output only. Describes why the matrix is considered invalid.
   * Only useful for matrices in the INVALID state.
   *
   * @generated from field: google.devtools.testing.v1.InvalidMatrixDetails invalid_matrix_details = 11;
   */
  invalidMatrixDetails: InvalidMatrixDetails;

  /**
   * Output only. Details about why a matrix was deemed invalid.
   * If multiple checks can be safely performed, they will be reported but no
   * assumptions should be made about the length of this list.
   *
   * @generated from field: repeated google.devtools.testing.v1.MatrixErrorDetail extended_invalid_matrix_details = 22;
   */
  extendedInvalidMatrixDetails: MatrixErrorDetail[];

  /**
   * The number of times a TestExecution should be re-attempted if one or more
   * of its test cases fail for any reason.
   * The maximum number of reruns allowed is 10.
   *
   * Default is 0, which implies no reruns.
   *
   * @generated from field: int32 flaky_test_attempts = 13;
   */
  flakyTestAttempts: number;

  /**
   * Output Only. The overall outcome of the test.
   * Only set when the test matrix state is FINISHED.
   *
   * @generated from field: google.devtools.testing.v1.OutcomeSummary outcome_summary = 14;
   */
  outcomeSummary: OutcomeSummary;

  /**
   * If true, only a single attempt at most will be made to run each
   * execution/shard in the matrix. Flaky test attempts are not affected.
   *
   * Normally, 2 or more attempts are made if a potential infrastructure issue
   * is detected.
   *
   * This feature is for latency sensitive workloads. The incidence of
   * execution failures may be significantly greater for fail-fast matrices
   * and support is more limited because of that expectation.
   *
   * @generated from field: bool fail_fast = 17;
   */
  failFast: boolean;
};

/**
 * Describes the message google.devtools.testing.v1.TestMatrix.
 * Use `create(TestMatrixSchema)` to create a new message.
 */
export const TestMatrixSchema: GenMessage<TestMatrix> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 0);

/**
 * Describes a single error or issue with a matrix.
 *
 * @generated from message google.devtools.testing.v1.MatrixErrorDetail
 */
export type MatrixErrorDetail = Message<"google.devtools.testing.v1.MatrixErrorDetail"> & {
  /**
   * Output only. The reason for the error. This is a constant value in
   * UPPER_SNAKE_CASE that identifies the cause of the error.
   *
   * @generated from field: string reason = 1;
   */
  reason: string;

  /**
   * Output only. A human-readable message about how the error in the
   * TestMatrix. Expands on the `reason` field with additional details and
   * possible options to fix the issue.
   *
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Describes the message google.devtools.testing.v1.MatrixErrorDetail.
 * Use `create(MatrixErrorDetailSchema)` to create a new message.
 */
export const MatrixErrorDetailSchema: GenMessage<MatrixErrorDetail> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 1);

/**
 * A single test executed in a single environment.
 *
 * @generated from message google.devtools.testing.v1.TestExecution
 */
export type TestExecution = Message<"google.devtools.testing.v1.TestExecution"> & {
  /**
   * Output only. Unique id set by the service.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Output only. Id of the containing TestMatrix.
   *
   * @generated from field: string matrix_id = 9;
   */
  matrixId: string;

  /**
   * Output only. The cloud project that owns the test execution.
   *
   * @generated from field: string project_id = 10;
   */
  projectId: string;

  /**
   * Output only. How to run the test.
   *
   * @generated from field: google.devtools.testing.v1.TestSpecification test_specification = 3;
   */
  testSpecification?: TestSpecification;

  /**
   * Output only. Details about the shard.
   *
   * @generated from field: google.devtools.testing.v1.Shard shard = 12;
   */
  shard?: Shard;

  /**
   * Output only. How the host machine(s) are configured.
   *
   * @generated from field: google.devtools.testing.v1.Environment environment = 4;
   */
  environment?: Environment;

  /**
   * Output only. Indicates the current progress of the test execution
   * (e.g., FINISHED).
   *
   * @generated from field: google.devtools.testing.v1.TestState state = 5;
   */
  state: TestState;

  /**
   * Output only. Where the results for this execution are written.
   *
   * @generated from field: google.devtools.testing.v1.ToolResultsStep tool_results_step = 11;
   */
  toolResultsStep?: ToolResultsStep;

  /**
   * Output only. The time this test execution was initially created.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 7;
   */
  timestamp?: Timestamp;

  /**
   * Output only. Additional details about the running test.
   *
   * @generated from field: google.devtools.testing.v1.TestDetails test_details = 8;
   */
  testDetails?: TestDetails;
};

/**
 * Describes the message google.devtools.testing.v1.TestExecution.
 * Use `create(TestExecutionSchema)` to create a new message.
 */
export const TestExecutionSchema: GenMessage<TestExecution> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 2);

/**
 * A description of how to run the test.
 *
 * @generated from message google.devtools.testing.v1.TestSpecification
 */
export type TestSpecification = Message<"google.devtools.testing.v1.TestSpecification"> & {
  /**
   * Max time a test execution is allowed to run before it is
   * automatically cancelled.
   * The default value is 5 min.
   *
   * @generated from field: google.protobuf.Duration test_timeout = 1;
   */
  testTimeout?: Duration;

  /**
   * Test setup requirements.
   *
   * @generated from oneof google.devtools.testing.v1.TestSpecification.setup
   */
  setup: {
    /**
     * Test setup requirements for Android e.g. files to install, bootstrap
     * scripts.
     *
     * @generated from field: google.devtools.testing.v1.TestSetup test_setup = 6;
     */
    value: TestSetup;
    case: "testSetup";
  } | {
    /**
     * Test setup requirements for iOS.
     *
     * @generated from field: google.devtools.testing.v1.IosTestSetup ios_test_setup = 14;
     */
    value: IosTestSetup;
    case: "iosTestSetup";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The type of test to run.
   *
   * @generated from oneof google.devtools.testing.v1.TestSpecification.test
   */
  test: {
    /**
     * An Android instrumentation test.
     *
     * @generated from field: google.devtools.testing.v1.AndroidInstrumentationTest android_instrumentation_test = 2;
     */
    value: AndroidInstrumentationTest;
    case: "androidInstrumentationTest";
  } | {
    /**
     * An Android robo test.
     *
     * @generated from field: google.devtools.testing.v1.AndroidRoboTest android_robo_test = 3;
     */
    value: AndroidRoboTest;
    case: "androidRoboTest";
  } | {
    /**
     * An Android Application with a Test Loop.
     *
     * @generated from field: google.devtools.testing.v1.AndroidTestLoop android_test_loop = 9;
     */
    value: AndroidTestLoop;
    case: "androidTestLoop";
  } | {
    /**
     * An iOS XCTest, via an .xctestrun file.
     *
     * @generated from field: google.devtools.testing.v1.IosXcTest ios_xc_test = 13;
     */
    value: IosXcTest;
    case: "iosXcTest";
  } | {
    /**
     * An iOS application with a test loop.
     *
     * @generated from field: google.devtools.testing.v1.IosTestLoop ios_test_loop = 15;
     */
    value: IosTestLoop;
    case: "iosTestLoop";
  } | {
    /**
     * An iOS Robo test.
     *
     * @generated from field: google.devtools.testing.v1.IosRoboTest ios_robo_test = 17;
     */
    value: IosRoboTest;
    case: "iosRoboTest";
  } | { case: undefined; value?: undefined };

  /**
   * Disables video recording. May reduce test latency.
   *
   * @generated from field: bool disable_video_recording = 10;
   */
  disableVideoRecording: boolean;

  /**
   * Disables performance metrics recording. May reduce test latency.
   *
   * @generated from field: bool disable_performance_metrics = 11;
   */
  disablePerformanceMetrics: boolean;
};

/**
 * Describes the message google.devtools.testing.v1.TestSpecification.
 * Use `create(TestSpecificationSchema)` to create a new message.
 */
export const TestSpecificationSchema: GenMessage<TestSpecification> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 3);

/**
 * @generated from message google.devtools.testing.v1.SystraceSetup
 */
export type SystraceSetup = Message<"google.devtools.testing.v1.SystraceSetup"> & {
  /**
   * Systrace duration in seconds.
   * Should be between 1 and 30 seconds. 0 disables systrace.
   *
   * @generated from field: int32 duration_seconds = 1 [deprecated = true];
   * @deprecated
   */
  durationSeconds: number;
};

/**
 * Describes the message google.devtools.testing.v1.SystraceSetup.
 * Use `create(SystraceSetupSchema)` to create a new message.
 */
export const SystraceSetupSchema: GenMessage<SystraceSetup> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 4);

/**
 * A description of how to set up the Android device prior to running the test.
 *
 * @generated from message google.devtools.testing.v1.TestSetup
 */
export type TestSetup = Message<"google.devtools.testing.v1.TestSetup"> & {
  /**
   * List of files to push to the device before starting the test.
   *
   * @generated from field: repeated google.devtools.testing.v1.DeviceFile files_to_push = 1;
   */
  filesToPush: DeviceFile[];

  /**
   * List of directories on the device to upload to GCS at the end of the test;
   * they must be absolute paths under /sdcard, /storage or /data/local/tmp.
   * Path names are restricted to characters a-z A-Z 0-9 _ - . + and /
   *
   * Note: The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device.
   *
   * @generated from field: repeated string directories_to_pull = 2;
   */
  directoriesToPull: string[];

  /**
   * Optional. Initial setup APKs to install before the app under test is
   * installed. Currently capped at 100.
   *
   * @generated from field: repeated google.devtools.testing.v1.Apk initial_setup_apks = 29;
   */
  initialSetupApks: Apk[];

  /**
   * APKs to install in addition to those being directly tested. These will be
   * installed after the app under test.
   * Currently capped at 100.
   *
   * @generated from field: repeated google.devtools.testing.v1.Apk additional_apks = 3;
   */
  additionalApks: Apk[];

  /**
   * The device will be logged in on this account for the duration of the test.
   *
   * @generated from field: google.devtools.testing.v1.Account account = 4;
   */
  account?: Account;

  /**
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   *
   * @generated from field: string network_profile = 5;
   */
  networkProfile: string;

  /**
   * Environment variables to set for the test (only applicable for
   * instrumentation tests).
   *
   * @generated from field: repeated google.devtools.testing.v1.EnvironmentVariable environment_variables = 6;
   */
  environmentVariables: EnvironmentVariable[];

  /**
   * Systrace configuration for the run.
   * Deprecated: Systrace used Python 2 which was sunsetted on 2020-01-01.
   * Systrace is no longer supported in the Cloud Testing API, and no Systrace
   * file will be provided in the results.
   *
   * @generated from field: google.devtools.testing.v1.SystraceSetup systrace = 9 [deprecated = true];
   * @deprecated
   */
  systrace?: SystraceSetup;

  /**
   * Whether to prevent all runtime permissions to be granted at app install
   *
   * @generated from field: bool dont_autogrant_permissions = 23;
   */
  dontAutograntPermissions: boolean;
};

/**
 * Describes the message google.devtools.testing.v1.TestSetup.
 * Use `create(TestSetupSchema)` to create a new message.
 */
export const TestSetupSchema: GenMessage<TestSetup> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 5);

/**
 * A description of how to set up an iOS device prior to running the test.
 *
 * @generated from message google.devtools.testing.v1.IosTestSetup
 */
export type IosTestSetup = Message<"google.devtools.testing.v1.IosTestSetup"> & {
  /**
   * The network traffic profile used for running the test.
   * Available network profiles can be queried by using the
   * NETWORK_CONFIGURATION environment type when calling
   * TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
   *
   * @generated from field: string network_profile = 1;
   */
  networkProfile: string;

  /**
   * iOS apps to install in addition to those being directly tested.
   *
   * @generated from field: repeated google.devtools.testing.v1.FileReference additional_ipas = 2;
   */
  additionalIpas: FileReference[];

  /**
   * List of files to push to the device before starting the test.
   *
   * @generated from field: repeated google.devtools.testing.v1.IosDeviceFile push_files = 3;
   */
  pushFiles: IosDeviceFile[];

  /**
   * List of directories on the device to upload to Cloud Storage at the end of
   * the test.
   *
   * Directories should either be in a shared directory (such as
   * /private/var/mobile/Media) or within an accessible directory inside the
   * app's filesystem (such as /Documents) by specifying the bundle ID.
   *
   * @generated from field: repeated google.devtools.testing.v1.IosDeviceFile pull_directories = 4;
   */
  pullDirectories: IosDeviceFile[];
};

/**
 * Describes the message google.devtools.testing.v1.IosTestSetup.
 * Use `create(IosTestSetupSchema)` to create a new message.
 */
export const IosTestSetupSchema: GenMessage<IosTestSetup> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 6);

/**
 * A key-value pair passed as an environment variable to the test.
 *
 * @generated from message google.devtools.testing.v1.EnvironmentVariable
 */
export type EnvironmentVariable = Message<"google.devtools.testing.v1.EnvironmentVariable"> & {
  /**
   * Key for the environment variable.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Value for the environment variable.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.devtools.testing.v1.EnvironmentVariable.
 * Use `create(EnvironmentVariableSchema)` to create a new message.
 */
export const EnvironmentVariableSchema: GenMessage<EnvironmentVariable> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 7);

/**
 * Identifies an account and how to log into it.
 *
 * @generated from message google.devtools.testing.v1.Account
 */
export type Account = Message<"google.devtools.testing.v1.Account"> & {
  /**
   * Required. The type of account, based what it's for (e.g. Google) and what
   * its login mechanism is (e.g. username and password).
   *
   * @generated from oneof google.devtools.testing.v1.Account.account_type
   */
  accountType: {
    /**
     * An automatic google login account.
     *
     * @generated from field: google.devtools.testing.v1.GoogleAuto google_auto = 1;
     */
    value: GoogleAuto;
    case: "googleAuto";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.Account.
 * Use `create(AccountSchema)` to create a new message.
 */
export const AccountSchema: GenMessage<Account> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 8);

/**
 * Enables automatic Google account login.
 * If set, the service automatically generates a Google test account and adds
 * it to the device, before executing the test. Note that test accounts might be
 * reused.
 * Many applications show their full set of functionalities when an account is
 * present on the device. Logging into the device with these generated accounts
 * allows testing more functionalities.
 *
 * @generated from message google.devtools.testing.v1.GoogleAuto
 */
export type GoogleAuto = Message<"google.devtools.testing.v1.GoogleAuto"> & {
};

/**
 * Describes the message google.devtools.testing.v1.GoogleAuto.
 * Use `create(GoogleAutoSchema)` to create a new message.
 */
export const GoogleAutoSchema: GenMessage<GoogleAuto> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 9);

/**
 * An Android package file to install.
 *
 * @generated from message google.devtools.testing.v1.Apk
 */
export type Apk = Message<"google.devtools.testing.v1.Apk"> & {
  /**
   * The path to an APK to be installed on the device before the test begins.
   *
   * @generated from field: google.devtools.testing.v1.FileReference location = 1;
   */
  location?: FileReference;

  /**
   * The java package for the APK to be installed.
   * Value is determined by examining the application's manifest.
   *
   * @generated from field: string package_name = 2;
   */
  packageName: string;
};

/**
 * Describes the message google.devtools.testing.v1.Apk.
 * Use `create(ApkSchema)` to create a new message.
 */
export const ApkSchema: GenMessage<Apk> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 10);

/**
 * An Android App Bundle file format, containing a BundleConfig.pb file,
 * a base module directory, zero or more dynamic feature module directories.
 * <p>See https://developer.android.com/guide/app-bundle/build for guidance on
 * building App Bundles.
 *
 * @generated from message google.devtools.testing.v1.AppBundle
 */
export type AppBundle = Message<"google.devtools.testing.v1.AppBundle"> & {
  /**
   * Required. Bundle location information.
   *
   * @generated from oneof google.devtools.testing.v1.AppBundle.bundle
   */
  bundle: {
    /**
     * .aab file representing the app bundle under test.
     *
     * @generated from field: google.devtools.testing.v1.FileReference bundle_location = 1;
     */
    value: FileReference;
    case: "bundleLocation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.AppBundle.
 * Use `create(AppBundleSchema)` to create a new message.
 */
export const AppBundleSchema: GenMessage<AppBundle> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 11);

/**
 * A single device file description.
 *
 * @generated from message google.devtools.testing.v1.DeviceFile
 */
export type DeviceFile = Message<"google.devtools.testing.v1.DeviceFile"> & {
  /**
   * Required.
   *
   * @generated from oneof google.devtools.testing.v1.DeviceFile.device_file
   */
  deviceFile: {
    /**
     * A reference to an opaque binary blob file.
     *
     * @generated from field: google.devtools.testing.v1.ObbFile obb_file = 1;
     */
    value: ObbFile;
    case: "obbFile";
  } | {
    /**
     * A reference to a regular file.
     *
     * @generated from field: google.devtools.testing.v1.RegularFile regular_file = 2;
     */
    value: RegularFile;
    case: "regularFile";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.DeviceFile.
 * Use `create(DeviceFileSchema)` to create a new message.
 */
export const DeviceFileSchema: GenMessage<DeviceFile> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 12);

/**
 * An opaque binary blob file to install on the device before the test starts.
 *
 * @generated from message google.devtools.testing.v1.ObbFile
 */
export type ObbFile = Message<"google.devtools.testing.v1.ObbFile"> & {
  /**
   * Required. OBB file name which must conform to the format as specified by
   * Android
   * e.g. [main|patch].0300110.com.example.android.obb
   * which will be installed into
   *   \<shared-storage\>/Android/obb/\<package-name\>/
   * on the device.
   *
   * @generated from field: string obb_file_name = 1;
   */
  obbFileName: string;

  /**
   * Required. Opaque Binary Blob (OBB) file(s) to install on the device.
   *
   * @generated from field: google.devtools.testing.v1.FileReference obb = 2;
   */
  obb?: FileReference;
};

/**
 * Describes the message google.devtools.testing.v1.ObbFile.
 * Use `create(ObbFileSchema)` to create a new message.
 */
export const ObbFileSchema: GenMessage<ObbFile> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 13);

/**
 * A file or directory to install on the device before the test starts.
 *
 * @generated from message google.devtools.testing.v1.RegularFile
 */
export type RegularFile = Message<"google.devtools.testing.v1.RegularFile"> & {
  /**
   * Required. The source file.
   *
   * @generated from field: google.devtools.testing.v1.FileReference content = 1;
   */
  content?: FileReference;

  /**
   * Required. Where to put the content on the device. Must be an absolute,
   * allowlisted path. If the file exists, it will be replaced.
   * The following device-side directories and any of their subdirectories are
   * allowlisted:
   * <p>${EXTERNAL_STORAGE}, /sdcard, or /storage</p>
   * <p>${ANDROID_DATA}/local/tmp, or /data/local/tmp</p>
   * <p>Specifying a path outside of these directory trees is invalid.
   *
   * <p> The paths /sdcard and /data will be made available and treated as
   * implicit path substitutions. E.g. if /sdcard on a particular device does
   * not map to external storage, the system will replace it with the external
   * storage path prefix for that device and copy the file there.
   *
   * <p> It is strongly advised to use the <a href=
   * "http://developer.android.com/reference/android/os/Environment.html">
   * Environment API</a> in app and test code to access files on the device in a
   * portable way.
   *
   * @generated from field: string device_path = 2;
   */
  devicePath: string;
};

/**
 * Describes the message google.devtools.testing.v1.RegularFile.
 * Use `create(RegularFileSchema)` to create a new message.
 */
export const RegularFileSchema: GenMessage<RegularFile> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 14);

/**
 * A file or directory to install on the device before the test starts.
 *
 * @generated from message google.devtools.testing.v1.IosDeviceFile
 */
export type IosDeviceFile = Message<"google.devtools.testing.v1.IosDeviceFile"> & {
  /**
   * The source file
   *
   * @generated from field: google.devtools.testing.v1.FileReference content = 1;
   */
  content?: FileReference;

  /**
   * The bundle id of the app where this file lives.
   *
   * iOS apps sandbox their own filesystem, so app files must specify which app
   * installed on the device.
   *
   * @generated from field: string bundle_id = 2;
   */
  bundleId: string;

  /**
   * Location of the file on the device, inside the app's sandboxed filesystem
   *
   * @generated from field: string device_path = 3;
   */
  devicePath: string;
};

/**
 * Describes the message google.devtools.testing.v1.IosDeviceFile.
 * Use `create(IosDeviceFileSchema)` to create a new message.
 */
export const IosDeviceFileSchema: GenMessage<IosDeviceFile> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 15);

/**
 * A test of an Android Application with a Test Loop.
 * The intent \<intent-name\> will be implicitly added, since Games is the only
 * user of this api, for the time being.
 *
 * @generated from message google.devtools.testing.v1.AndroidTestLoop
 */
export type AndroidTestLoop = Message<"google.devtools.testing.v1.AndroidTestLoop"> & {
  /**
   * Required. The Android package to test.
   *
   * @generated from oneof google.devtools.testing.v1.AndroidTestLoop.app_under_test
   */
  appUnderTest: {
    /**
     * The APK for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.FileReference app_apk = 1;
     */
    value: FileReference;
    case: "appApk";
  } | {
    /**
     * A multi-apk app bundle for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.AppBundle app_bundle = 5;
     */
    value: AppBundle;
    case: "appBundle";
  } | { case: undefined; value?: undefined };

  /**
   * The java package for the application under test.
   * The default is determined by examining the application's manifest.
   *
   * @generated from field: string app_package_id = 2;
   */
  appPackageId: string;

  /**
   * The list of scenarios that should be run during the test.
   * The default is all test loops, derived from the application's
   * manifest.
   *
   * @generated from field: repeated int32 scenarios = 3;
   */
  scenarios: number[];

  /**
   * The list of scenario labels that should be run during the test.
   * The scenario labels should map to labels defined in the application's
   * manifest. For example, player_experience and
   * com.google.test.loops.player_experience add all of the loops labeled in the
   * manifest with the com.google.test.loops.player_experience name to the
   * execution.
   * Scenarios can also be specified in the scenarios field.
   *
   * @generated from field: repeated string scenario_labels = 4;
   */
  scenarioLabels: string[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidTestLoop.
 * Use `create(AndroidTestLoopSchema)` to create a new message.
 */
export const AndroidTestLoopSchema: GenMessage<AndroidTestLoop> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 16);

/**
 * A test of an iOS application that uses the XCTest framework.
 * Xcode supports the option to "build for testing", which generates an
 * .xctestrun file that contains a test specification (arguments, test methods,
 * etc). This test type accepts a zip file containing the .xctestrun file and
 * the corresponding contents of the Build/Products directory that contains all
 * the binaries needed to run the tests.
 *
 * @generated from message google.devtools.testing.v1.IosXcTest
 */
export type IosXcTest = Message<"google.devtools.testing.v1.IosXcTest"> & {
  /**
   * Required. The .zip containing the .xctestrun file and the contents of the
   * DerivedData/Build/Products directory.
   * The .xctestrun file in this zip is ignored if the xctestrun field is
   * specified.
   *
   * @generated from field: google.devtools.testing.v1.FileReference tests_zip = 1;
   */
  testsZip?: FileReference;

  /**
   * An .xctestrun file that will override the .xctestrun file in the
   * tests zip. Because the .xctestrun file contains environment variables along
   * with test methods to run and/or ignore, this can be useful for sharding
   * tests. Default is taken from the tests zip.
   *
   * @generated from field: google.devtools.testing.v1.FileReference xctestrun = 2;
   */
  xctestrun?: FileReference;

  /**
   * The Xcode version that should be used for the test.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   * Defaults to the latest Xcode version Firebase Test Lab supports.
   *
   * @generated from field: string xcode_version = 3;
   */
  xcodeVersion: string;

  /**
   * Output only. The bundle id for the application under test.
   *
   * @generated from field: string app_bundle_id = 4;
   */
  appBundleId: string;

  /**
   * The option to test special app entitlements. Setting this would re-sign the
   * app having special entitlements with an explicit application-identifier.
   * Currently supports testing aps-environment entitlement.
   *
   * @generated from field: bool test_special_entitlements = 6;
   */
  testSpecialEntitlements: boolean;
};

/**
 * Describes the message google.devtools.testing.v1.IosXcTest.
 * Use `create(IosXcTestSchema)` to create a new message.
 */
export const IosXcTestSchema: GenMessage<IosXcTest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 17);

/**
 * A test of an iOS application that implements one or more game loop scenarios.
 * This test type accepts an archived application (.ipa file) and a list of
 * integer scenarios that will be executed on the app sequentially.
 *
 * @generated from message google.devtools.testing.v1.IosTestLoop
 */
export type IosTestLoop = Message<"google.devtools.testing.v1.IosTestLoop"> & {
  /**
   * Required. The .ipa of the application to test.
   *
   * @generated from field: google.devtools.testing.v1.FileReference app_ipa = 1;
   */
  appIpa?: FileReference;

  /**
   * The list of scenarios that should be run during the test. Defaults to the
   * single scenario 0 if unspecified.
   *
   * @generated from field: repeated int32 scenarios = 2;
   */
  scenarios: number[];

  /**
   * Output only. The bundle id for the application under test.
   *
   * @generated from field: string app_bundle_id = 3;
   */
  appBundleId: string;
};

/**
 * Describes the message google.devtools.testing.v1.IosTestLoop.
 * Use `create(IosTestLoopSchema)` to create a new message.
 */
export const IosTestLoopSchema: GenMessage<IosTestLoop> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 18);

/**
 * A test that explores an iOS application on an iOS device.
 *
 * @generated from message google.devtools.testing.v1.IosRoboTest
 */
export type IosRoboTest = Message<"google.devtools.testing.v1.IosRoboTest"> & {
  /**
   * Required. The ipa stored at this file should be used to run the test.
   *
   * @generated from field: google.devtools.testing.v1.FileReference app_ipa = 1;
   */
  appIpa?: FileReference;

  /**
   * The bundle ID for the app-under-test.
   * This is determined by examining the application's "Info.plist" file.
   *
   * @generated from field: string app_bundle_id = 4;
   */
  appBundleId: string;

  /**
   * An optional Roboscript to customize the crawl. See
   * https://firebase.google.com/docs/test-lab/android/robo-scripts-reference
   * for more information about Roboscripts.
   *
   * @generated from field: google.devtools.testing.v1.FileReference robo_script = 5;
   */
  roboScript?: FileReference;
};

/**
 * Describes the message google.devtools.testing.v1.IosRoboTest.
 * Use `create(IosRoboTestSchema)` to create a new message.
 */
export const IosRoboTestSchema: GenMessage<IosRoboTest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 19);

/**
 * A test of an Android application that can control an Android component
 * independently of its normal lifecycle.
 * Android instrumentation tests run an application APK and test APK inside the
 * same process on a virtual or physical AndroidDevice.  They also specify
 * a test runner class, such as com.google.GoogleTestRunner, which can vary
 * on the specific instrumentation framework chosen.
 *
 * See <https://developer.android.com/training/testing/fundamentals> for
 * more information on types of Android tests.
 *
 * @generated from message google.devtools.testing.v1.AndroidInstrumentationTest
 */
export type AndroidInstrumentationTest = Message<"google.devtools.testing.v1.AndroidInstrumentationTest"> & {
  /**
   * Required.
   *
   * @generated from oneof google.devtools.testing.v1.AndroidInstrumentationTest.app_under_test
   */
  appUnderTest: {
    /**
     * The APK for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.FileReference app_apk = 1;
     */
    value: FileReference;
    case: "appApk";
  } | {
    /**
     * A multi-apk app bundle for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.AppBundle app_bundle = 8;
     */
    value: AppBundle;
    case: "appBundle";
  } | { case: undefined; value?: undefined };

  /**
   * Required. The APK containing the test code to be executed.
   *
   * @generated from field: google.devtools.testing.v1.FileReference test_apk = 2;
   */
  testApk?: FileReference;

  /**
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   *
   * @generated from field: string app_package_id = 3;
   */
  appPackageId: string;

  /**
   * The java package for the test to be executed.
   * The default value is determined by examining the application's manifest.
   *
   * @generated from field: string test_package_id = 4;
   */
  testPackageId: string;

  /**
   * The InstrumentationTestRunner class.
   * The default value is determined by examining the application's manifest.
   *
   * @generated from field: string test_runner_class = 5;
   */
  testRunnerClass: string;

  /**
   * Each target must be fully qualified with the package name or class name,
   * in one of these formats:
   *
   *  - "package package_name"
   *  - "class package_name.class_name"
   *  - "class package_name.class_name#method_name"
   *
   * If empty, all targets in the module will be run.
   *
   * @generated from field: repeated string test_targets = 6;
   */
  testTargets: string[];

  /**
   * The option of whether running each test within its own invocation of
   * instrumentation with Android Test Orchestrator or not.
   * ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or
   * higher! **
   * Orchestrator offers the following benefits:
   *
   *  - No shared state
   *  - Crashes are isolated
   *  - Logs are scoped per test
   *
   * See
   * <https://developer.android.com/training/testing/junit-runner.html#using-android-test-orchestrator>
   * for more information about Android Test Orchestrator.
   *
   * If not set, the test will be run without the orchestrator.
   *
   * @generated from field: google.devtools.testing.v1.OrchestratorOption orchestrator_option = 7;
   */
  orchestratorOption: OrchestratorOption;

  /**
   * The option to run tests in multiple shards in parallel.
   *
   * @generated from field: google.devtools.testing.v1.ShardingOption sharding_option = 9;
   */
  shardingOption?: ShardingOption;
};

/**
 * Describes the message google.devtools.testing.v1.AndroidInstrumentationTest.
 * Use `create(AndroidInstrumentationTestSchema)` to create a new message.
 */
export const AndroidInstrumentationTestSchema: GenMessage<AndroidInstrumentationTest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 20);

/**
 * A test of an android application that explores the application on a virtual
 * or physical Android Device, finding culprits and crashes as it goes.
 *
 * @generated from message google.devtools.testing.v1.AndroidRoboTest
 */
export type AndroidRoboTest = Message<"google.devtools.testing.v1.AndroidRoboTest"> & {
  /**
   * Required.
   *
   * @generated from oneof google.devtools.testing.v1.AndroidRoboTest.app_under_test
   */
  appUnderTest: {
    /**
     * The APK for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.FileReference app_apk = 1;
     */
    value: FileReference;
    case: "appApk";
  } | {
    /**
     * A multi-apk app bundle for the application under test.
     *
     * @generated from field: google.devtools.testing.v1.AppBundle app_bundle = 16;
     */
    value: AppBundle;
    case: "appBundle";
  } | { case: undefined; value?: undefined };

  /**
   * The java package for the application under test.
   * The default value is determined by examining the application's manifest.
   *
   * @generated from field: string app_package_id = 2;
   */
  appPackageId: string;

  /**
   * The initial activity that should be used to start the app.
   *
   * @generated from field: string app_initial_activity = 3;
   */
  appInitialActivity: string;

  /**
   * The max depth of the traversal stack Robo can explore. Needs to be at least
   * 2 to make Robo explore the app beyond the first activity.
   * Default is 50.
   *
   * @generated from field: int32 max_depth = 7 [deprecated = true];
   * @deprecated
   */
  maxDepth: number;

  /**
   * The max number of steps Robo can execute.
   * Default is no limit.
   *
   * @generated from field: int32 max_steps = 8 [deprecated = true];
   * @deprecated
   */
  maxSteps: number;

  /**
   * A set of directives Robo should apply during the crawl.
   * This allows users to customize the crawl. For example, the username and
   * password for a test account can be provided.
   *
   * @generated from field: repeated google.devtools.testing.v1.RoboDirective robo_directives = 11;
   */
  roboDirectives: RoboDirective[];

  /**
   * The mode in which Robo should run. Most clients should allow the server to
   * populate this field automatically.
   *
   * @generated from field: google.devtools.testing.v1.RoboMode robo_mode = 14;
   */
  roboMode: RoboMode;

  /**
   * A JSON file with a sequence of actions Robo should perform as a prologue
   * for the crawl.
   *
   * @generated from field: google.devtools.testing.v1.FileReference robo_script = 13;
   */
  roboScript?: FileReference;

  /**
   * The intents used to launch the app for the crawl.
   * If none are provided, then the main launcher activity is launched.
   * If some are provided, then only those provided are launched (the main
   * launcher activity must be provided explicitly).
   *
   * @generated from field: repeated google.devtools.testing.v1.RoboStartingIntent starting_intents = 15;
   */
  startingIntents: RoboStartingIntent[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidRoboTest.
 * Use `create(AndroidRoboTestSchema)` to create a new message.
 */
export const AndroidRoboTestSchema: GenMessage<AndroidRoboTest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 21);

/**
 * Directs Robo to interact with a specific UI element if it is encountered
 * during the crawl. Currently, Robo can perform text entry or element click.
 *
 * @generated from message google.devtools.testing.v1.RoboDirective
 */
export type RoboDirective = Message<"google.devtools.testing.v1.RoboDirective"> & {
  /**
   * Required. The android resource name of the target UI element.
   * For example,
   *    in Java: R.string.foo
   *    in xml: @string/foo
   * Only the "foo" part is needed.
   * Reference doc:
   * https://developer.android.com/guide/topics/resources/accessing-resources.html
   *
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * The text that Robo is directed to set. If left empty, the directive will be
   * treated as a CLICK on the element matching the resource_name.
   *
   * @generated from field: string input_text = 2;
   */
  inputText: string;

  /**
   * Required. The type of action that Robo should perform on the specified
   * element.
   *
   * @generated from field: google.devtools.testing.v1.RoboActionType action_type = 3;
   */
  actionType: RoboActionType;
};

/**
 * Describes the message google.devtools.testing.v1.RoboDirective.
 * Use `create(RoboDirectiveSchema)` to create a new message.
 */
export const RoboDirectiveSchema: GenMessage<RoboDirective> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 22);

/**
 * Message for specifying the start activities to crawl.
 *
 * @generated from message google.devtools.testing.v1.RoboStartingIntent
 */
export type RoboStartingIntent = Message<"google.devtools.testing.v1.RoboStartingIntent"> & {
  /**
   * Required. Intent details to start an activity.
   *
   * @generated from oneof google.devtools.testing.v1.RoboStartingIntent.starting_intent
   */
  startingIntent: {
    /**
     * An intent that starts the main launcher activity.
     *
     * @generated from field: google.devtools.testing.v1.LauncherActivityIntent launcher_activity = 1;
     */
    value: LauncherActivityIntent;
    case: "launcherActivity";
  } | {
    /**
     * An intent that starts an activity with specific details.
     *
     * @generated from field: google.devtools.testing.v1.StartActivityIntent start_activity = 2;
     */
    value: StartActivityIntent;
    case: "startActivity";
  } | {
    /**
     * Skips the starting activity
     *
     * @generated from field: google.devtools.testing.v1.NoActivityIntent no_activity = 4;
     */
    value: NoActivityIntent;
    case: "noActivity";
  } | { case: undefined; value?: undefined };

  /**
   * Timeout in seconds for each intent.
   *
   * @generated from field: google.protobuf.Duration timeout = 3;
   */
  timeout?: Duration;
};

/**
 * Describes the message google.devtools.testing.v1.RoboStartingIntent.
 * Use `create(RoboStartingIntentSchema)` to create a new message.
 */
export const RoboStartingIntentSchema: GenMessage<RoboStartingIntent> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 23);

/**
 * Specifies an intent that starts the main launcher activity.
 *
 * @generated from message google.devtools.testing.v1.LauncherActivityIntent
 */
export type LauncherActivityIntent = Message<"google.devtools.testing.v1.LauncherActivityIntent"> & {
};

/**
 * Describes the message google.devtools.testing.v1.LauncherActivityIntent.
 * Use `create(LauncherActivityIntentSchema)` to create a new message.
 */
export const LauncherActivityIntentSchema: GenMessage<LauncherActivityIntent> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 24);

/**
 * A starting intent specified by an action, uri, and categories.
 *
 * @generated from message google.devtools.testing.v1.StartActivityIntent
 */
export type StartActivityIntent = Message<"google.devtools.testing.v1.StartActivityIntent"> & {
  /**
   * Action name.
   * Required for START_ACTIVITY.
   *
   * @generated from field: string action = 2;
   */
  action: string;

  /**
   * URI for the action.
   *
   * @generated from field: string uri = 3;
   */
  uri: string;

  /**
   * Intent categories to set on the intent.
   *
   * @generated from field: repeated string categories = 4;
   */
  categories: string[];
};

/**
 * Describes the message google.devtools.testing.v1.StartActivityIntent.
 * Use `create(StartActivityIntentSchema)` to create a new message.
 */
export const StartActivityIntentSchema: GenMessage<StartActivityIntent> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 25);

/**
 * Skips the starting activity
 *
 * @generated from message google.devtools.testing.v1.NoActivityIntent
 */
export type NoActivityIntent = Message<"google.devtools.testing.v1.NoActivityIntent"> & {
};

/**
 * Describes the message google.devtools.testing.v1.NoActivityIntent.
 * Use `create(NoActivityIntentSchema)` to create a new message.
 */
export const NoActivityIntentSchema: GenMessage<NoActivityIntent> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 26);

/**
 * The matrix of environments in which the test is to be executed.
 *
 * @generated from message google.devtools.testing.v1.EnvironmentMatrix
 */
export type EnvironmentMatrix = Message<"google.devtools.testing.v1.EnvironmentMatrix"> & {
  /**
   * Required. The environment matrix.
   *
   * @generated from oneof google.devtools.testing.v1.EnvironmentMatrix.environment_matrix
   */
  environmentMatrix: {
    /**
     * A matrix of Android devices.
     *
     * @generated from field: google.devtools.testing.v1.AndroidMatrix android_matrix = 1;
     */
    value: AndroidMatrix;
    case: "androidMatrix";
  } | {
    /**
     * A list of Android devices; the test will be run only on the specified
     * devices.
     *
     * @generated from field: google.devtools.testing.v1.AndroidDeviceList android_device_list = 2;
     */
    value: AndroidDeviceList;
    case: "androidDeviceList";
  } | {
    /**
     * A list of iOS devices.
     *
     * @generated from field: google.devtools.testing.v1.IosDeviceList ios_device_list = 3;
     */
    value: IosDeviceList;
    case: "iosDeviceList";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.EnvironmentMatrix.
 * Use `create(EnvironmentMatrixSchema)` to create a new message.
 */
export const EnvironmentMatrixSchema: GenMessage<EnvironmentMatrix> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 27);

/**
 * A list of Android device configurations in which the test is to be executed.
 *
 * @generated from message google.devtools.testing.v1.AndroidDeviceList
 */
export type AndroidDeviceList = Message<"google.devtools.testing.v1.AndroidDeviceList"> & {
  /**
   * Required. A list of Android devices.
   *
   * @generated from field: repeated google.devtools.testing.v1.AndroidDevice android_devices = 1;
   */
  androidDevices: AndroidDevice[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidDeviceList.
 * Use `create(AndroidDeviceListSchema)` to create a new message.
 */
export const AndroidDeviceListSchema: GenMessage<AndroidDeviceList> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 28);

/**
 * A list of iOS device configurations in which the test is to be executed.
 *
 * @generated from message google.devtools.testing.v1.IosDeviceList
 */
export type IosDeviceList = Message<"google.devtools.testing.v1.IosDeviceList"> & {
  /**
   * Required. A list of iOS devices.
   *
   * @generated from field: repeated google.devtools.testing.v1.IosDevice ios_devices = 1;
   */
  iosDevices: IosDevice[];
};

/**
 * Describes the message google.devtools.testing.v1.IosDeviceList.
 * Use `create(IosDeviceListSchema)` to create a new message.
 */
export const IosDeviceListSchema: GenMessage<IosDeviceList> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 29);

/**
 * A set of Android device configuration permutations is defined by the
 * the cross-product of the given axes. Internally, the given AndroidMatrix
 * will be expanded into a set of AndroidDevices.
 *
 * Only supported permutations will be instantiated.  Invalid permutations
 * (e.g., incompatible models/versions) are ignored.
 *
 * @generated from message google.devtools.testing.v1.AndroidMatrix
 */
export type AndroidMatrix = Message<"google.devtools.testing.v1.AndroidMatrix"> & {
  /**
   * Required. The ids of the set of Android device to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: repeated string android_model_ids = 1;
   */
  androidModelIds: string[];

  /**
   * Required. The ids of the set of Android OS version to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: repeated string android_version_ids = 2;
   */
  androidVersionIds: string[];

  /**
   * Required. The set of locales the test device will enable for testing.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: repeated string locales = 3;
   */
  locales: string[];

  /**
   * Required. The set of orientations to test with.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: repeated string orientations = 4;
   */
  orientations: string[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidMatrix.
 * Use `create(AndroidMatrixSchema)` to create a new message.
 */
export const AndroidMatrixSchema: GenMessage<AndroidMatrix> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 30);

/**
 * Information about the client which invoked the test.
 *
 * @generated from message google.devtools.testing.v1.ClientInfo
 */
export type ClientInfo = Message<"google.devtools.testing.v1.ClientInfo"> & {
  /**
   * Required. Client name, such as gcloud.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of detailed information about client.
   *
   * @generated from field: repeated google.devtools.testing.v1.ClientInfoDetail client_info_details = 2;
   */
  clientInfoDetails: ClientInfoDetail[];
};

/**
 * Describes the message google.devtools.testing.v1.ClientInfo.
 * Use `create(ClientInfoSchema)` to create a new message.
 */
export const ClientInfoSchema: GenMessage<ClientInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 31);

/**
 * Key-value pair of detailed information about the client which invoked the
 * test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
 *
 * @generated from message google.devtools.testing.v1.ClientInfoDetail
 */
export type ClientInfoDetail = Message<"google.devtools.testing.v1.ClientInfoDetail"> & {
  /**
   * Required. The key of detailed client information.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * Required. The value of detailed client information.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.devtools.testing.v1.ClientInfoDetail.
 * Use `create(ClientInfoDetailSchema)` to create a new message.
 */
export const ClientInfoDetailSchema: GenMessage<ClientInfoDetail> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 32);

/**
 * Locations where the results of running the test are stored.
 *
 * @generated from message google.devtools.testing.v1.ResultStorage
 */
export type ResultStorage = Message<"google.devtools.testing.v1.ResultStorage"> & {
  /**
   * Required.
   *
   * @generated from field: google.devtools.testing.v1.GoogleCloudStorage google_cloud_storage = 1;
   */
  googleCloudStorage?: GoogleCloudStorage;

  /**
   * The tool results history that contains the tool results execution that
   * results are written to.
   *
   * If not provided, the service will choose an appropriate value.
   *
   * @generated from field: google.devtools.testing.v1.ToolResultsHistory tool_results_history = 5;
   */
  toolResultsHistory?: ToolResultsHistory;

  /**
   * Output only. The tool results execution that results are written to.
   *
   * @generated from field: google.devtools.testing.v1.ToolResultsExecution tool_results_execution = 6;
   */
  toolResultsExecution?: ToolResultsExecution;

  /**
   * Output only. URL to the results in the Firebase Web Console.
   *
   * @generated from field: string results_url = 7;
   */
  resultsUrl: string;
};

/**
 * Describes the message google.devtools.testing.v1.ResultStorage.
 * Use `create(ResultStorageSchema)` to create a new message.
 */
export const ResultStorageSchema: GenMessage<ResultStorage> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 33);

/**
 * Represents a tool results history resource.
 *
 * @generated from message google.devtools.testing.v1.ToolResultsHistory
 */
export type ToolResultsHistory = Message<"google.devtools.testing.v1.ToolResultsHistory"> & {
  /**
   * Required. The cloud project that owns the tool results history.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. A tool results history ID.
   *
   * @generated from field: string history_id = 2;
   */
  historyId: string;
};

/**
 * Describes the message google.devtools.testing.v1.ToolResultsHistory.
 * Use `create(ToolResultsHistorySchema)` to create a new message.
 */
export const ToolResultsHistorySchema: GenMessage<ToolResultsHistory> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 34);

/**
 * Represents a tool results execution resource.
 *
 * This has the results of a TestMatrix.
 *
 * @generated from message google.devtools.testing.v1.ToolResultsExecution
 */
export type ToolResultsExecution = Message<"google.devtools.testing.v1.ToolResultsExecution"> & {
  /**
   * Output only. The cloud project that owns the tool results execution.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Output only. A tool results history ID.
   *
   * @generated from field: string history_id = 2;
   */
  historyId: string;

  /**
   * Output only. A tool results execution ID.
   *
   * @generated from field: string execution_id = 3;
   */
  executionId: string;
};

/**
 * Describes the message google.devtools.testing.v1.ToolResultsExecution.
 * Use `create(ToolResultsExecutionSchema)` to create a new message.
 */
export const ToolResultsExecutionSchema: GenMessage<ToolResultsExecution> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 35);

/**
 * Represents a tool results step resource.
 *
 * This has the results of a TestExecution.
 *
 * @generated from message google.devtools.testing.v1.ToolResultsStep
 */
export type ToolResultsStep = Message<"google.devtools.testing.v1.ToolResultsStep"> & {
  /**
   * Output only. The cloud project that owns the tool results step.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Output only. A tool results history ID.
   *
   * @generated from field: string history_id = 2;
   */
  historyId: string;

  /**
   * Output only. A tool results execution ID.
   *
   * @generated from field: string execution_id = 3;
   */
  executionId: string;

  /**
   * Output only. A tool results step ID.
   *
   * @generated from field: string step_id = 4;
   */
  stepId: string;
};

/**
 * Describes the message google.devtools.testing.v1.ToolResultsStep.
 * Use `create(ToolResultsStepSchema)` to create a new message.
 */
export const ToolResultsStepSchema: GenMessage<ToolResultsStep> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 36);

/**
 * A storage location within Google cloud storage (GCS).
 *
 * @generated from message google.devtools.testing.v1.GoogleCloudStorage
 */
export type GoogleCloudStorage = Message<"google.devtools.testing.v1.GoogleCloudStorage"> & {
  /**
   * Required. The path to a directory in GCS that will
   * eventually contain the results for this test.
   * The requesting user must have write access on the bucket in the supplied
   * path.
   *
   * @generated from field: string gcs_path = 1;
   */
  gcsPath: string;
};

/**
 * Describes the message google.devtools.testing.v1.GoogleCloudStorage.
 * Use `create(GoogleCloudStorageSchema)` to create a new message.
 */
export const GoogleCloudStorageSchema: GenMessage<GoogleCloudStorage> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 37);

/**
 * A reference to a file, used for user inputs.
 *
 * @generated from message google.devtools.testing.v1.FileReference
 */
export type FileReference = Message<"google.devtools.testing.v1.FileReference"> & {
  /**
   * Required. The file reference.
   *
   * @generated from oneof google.devtools.testing.v1.FileReference.file
   */
  file: {
    /**
     * A path to a file in Google Cloud Storage.
     * Example: gs://build-app-1414623860166/app%40debug-unaligned.apk
     * These paths are expected to be url encoded (percent encoding)
     *
     * @generated from field: string gcs_path = 1;
     */
    value: string;
    case: "gcsPath";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.FileReference.
 * Use `create(FileReferenceSchema)` to create a new message.
 */
export const FileReferenceSchema: GenMessage<FileReference> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 38);

/**
 * The environment in which the test is run.
 *
 * @generated from message google.devtools.testing.v1.Environment
 */
export type Environment = Message<"google.devtools.testing.v1.Environment"> & {
  /**
   * Required. The environment.
   *
   * @generated from oneof google.devtools.testing.v1.Environment.environment
   */
  environment: {
    /**
     * An Android device which must be used with an Android test.
     *
     * @generated from field: google.devtools.testing.v1.AndroidDevice android_device = 1;
     */
    value: AndroidDevice;
    case: "androidDevice";
  } | {
    /**
     * An iOS device which must be used with an iOS test.
     *
     * @generated from field: google.devtools.testing.v1.IosDevice ios_device = 2;
     */
    value: IosDevice;
    case: "iosDevice";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.Environment.
 * Use `create(EnvironmentSchema)` to create a new message.
 */
export const EnvironmentSchema: GenMessage<Environment> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 39);

/**
 * A single Android device.
 *
 * @generated from message google.devtools.testing.v1.AndroidDevice
 */
export type AndroidDevice = Message<"google.devtools.testing.v1.AndroidDevice"> & {
  /**
   * Required. The id of the Android device to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string android_model_id = 1;
   */
  androidModelId: string;

  /**
   * Required. The id of the Android OS version to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string android_version_id = 2;
   */
  androidVersionId: string;

  /**
   * Required. The locale the test device used for testing.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string locale = 3;
   */
  locale: string;

  /**
   * Required. How the device is oriented during the test.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string orientation = 4;
   */
  orientation: string;
};

/**
 * Describes the message google.devtools.testing.v1.AndroidDevice.
 * Use `create(AndroidDeviceSchema)` to create a new message.
 */
export const AndroidDeviceSchema: GenMessage<AndroidDevice> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 40);

/**
 * A single iOS device.
 *
 * @generated from message google.devtools.testing.v1.IosDevice
 */
export type IosDevice = Message<"google.devtools.testing.v1.IosDevice"> & {
  /**
   * Required. The id of the iOS device to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string ios_model_id = 1;
   */
  iosModelId: string;

  /**
   * Required. The id of the iOS major software version to be used.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string ios_version_id = 2;
   */
  iosVersionId: string;

  /**
   * Required. The locale the test device used for testing.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string locale = 3;
   */
  locale: string;

  /**
   * Required. How the device is oriented during the test.
   * Use the TestEnvironmentDiscoveryService to get supported options.
   *
   * @generated from field: string orientation = 4;
   */
  orientation: string;
};

/**
 * Describes the message google.devtools.testing.v1.IosDevice.
 * Use `create(IosDeviceSchema)` to create a new message.
 */
export const IosDeviceSchema: GenMessage<IosDevice> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 41);

/**
 * Additional details about the progress of the running test.
 *
 * @generated from message google.devtools.testing.v1.TestDetails
 */
export type TestDetails = Message<"google.devtools.testing.v1.TestDetails"> & {
  /**
   * Output only. Human-readable, detailed descriptions of the test's progress.
   * For example: "Provisioning a device", "Starting Test".
   *
   * During the course of execution new data may be appended
   * to the end of progress_messages.
   *
   * @generated from field: repeated string progress_messages = 3;
   */
  progressMessages: string[];

  /**
   * Output only. If the TestState is ERROR, then this string will contain
   * human-readable details about the error.
   *
   * @generated from field: string error_message = 4;
   */
  errorMessage: string;
};

/**
 * Describes the message google.devtools.testing.v1.TestDetails.
 * Use `create(TestDetailsSchema)` to create a new message.
 */
export const TestDetailsSchema: GenMessage<TestDetails> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 42);

/**
 * Details behind an invalid request.
 *
 * @generated from message google.devtools.testing.v1.InvalidRequestDetail
 */
export type InvalidRequestDetail = Message<"google.devtools.testing.v1.InvalidRequestDetail"> & {
  /**
   * The reason behind the error.
   *
   * @generated from field: google.devtools.testing.v1.InvalidRequestDetail.Reason reason = 1;
   */
  reason: InvalidRequestDetail_Reason;
};

/**
 * Describes the message google.devtools.testing.v1.InvalidRequestDetail.
 * Use `create(InvalidRequestDetailSchema)` to create a new message.
 */
export const InvalidRequestDetailSchema: GenMessage<InvalidRequestDetail> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 43);

/**
 * Possible invalid request reasons.
 *
 * @generated from enum google.devtools.testing.v1.InvalidRequestDetail.Reason
 */
export enum InvalidRequestDetail_Reason {
  /**
   * No reason has been specified - the default.
   *
   * @generated from enum value: REASON_UNSPECIFIED = 0;
   */
  REASON_UNSPECIFIED = 0,

  /**
   * The request is not valid.
   *
   * @generated from enum value: REQUEST_INVALID = 1;
   */
  REQUEST_INVALID = 1,

  /**
   * One or more of the resources specified in the request is too large.
   *
   * @generated from enum value: RESOURCE_TOO_BIG = 2;
   */
  RESOURCE_TOO_BIG = 2,

  /**
   * One or more resources specified in the request cannot be found.
   *
   * @generated from enum value: RESOURCE_NOT_FOUND = 3;
   */
  RESOURCE_NOT_FOUND = 3,

  /**
   * This request is not (currently) supported.
   *
   * @generated from enum value: UNSUPPORTED = 4;
   */
  UNSUPPORTED = 4,

  /**
   * This request is not currently implemented.
   *
   * @generated from enum value: NOT_IMPLEMENTED = 5;
   */
  NOT_IMPLEMENTED = 5,

  /**
   * The caller has no permission for storing the test results
   *
   * @generated from enum value: RESULT_STORAGE_PERMISSION_DENIED = 6;
   */
  RESULT_STORAGE_PERMISSION_DENIED = 6,
}

/**
 * Describes the enum google.devtools.testing.v1.InvalidRequestDetail.Reason.
 */
export const InvalidRequestDetail_ReasonSchema: GenEnum<InvalidRequestDetail_Reason> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 43, 0);

/**
 * Options for enabling sharding.
 *
 * @generated from message google.devtools.testing.v1.ShardingOption
 */
export type ShardingOption = Message<"google.devtools.testing.v1.ShardingOption"> & {
  /**
   * @generated from oneof google.devtools.testing.v1.ShardingOption.option
   */
  option: {
    /**
     * Uniformly shards test cases given a total number of shards.
     *
     * @generated from field: google.devtools.testing.v1.UniformSharding uniform_sharding = 1;
     */
    value: UniformSharding;
    case: "uniformSharding";
  } | {
    /**
     * Shards test cases into the specified groups of packages, classes, and/or
     * methods.
     *
     * @generated from field: google.devtools.testing.v1.ManualSharding manual_sharding = 2;
     */
    value: ManualSharding;
    case: "manualSharding";
  } | {
    /**
     * Shards test based on previous test case timing records.
     *
     * @generated from field: google.devtools.testing.v1.SmartSharding smart_sharding = 3;
     */
    value: SmartSharding;
    case: "smartSharding";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.ShardingOption.
 * Use `create(ShardingOptionSchema)` to create a new message.
 */
export const ShardingOptionSchema: GenMessage<ShardingOption> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 44);

/**
 * Uniformly shards test cases given a total number of shards.
 *
 * For instrumentation tests, it will be translated to "-e numShard" and "-e
 * shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled,
 * specifying either of these sharding arguments via `environment_variables` is
 * invalid.
 *
 * Based on the sharding mechanism AndroidJUnitRunner uses, there is no
 * guarantee that test cases will be distributed uniformly across all shards.
 *
 * @generated from message google.devtools.testing.v1.UniformSharding
 */
export type UniformSharding = Message<"google.devtools.testing.v1.UniformSharding"> & {
  /**
   * Required. The total number of shards to create. This must always be a
   * positive number that is no greater than the total number of test cases.
   * When you select one or more physical devices, the number of shards must be
   * <= 50. When you select one or more ARM virtual devices, it must be <= 200.
   * When you select only x86 virtual devices, it must be <= 500.
   *
   * @generated from field: int32 num_shards = 1;
   */
  numShards: number;
};

/**
 * Describes the message google.devtools.testing.v1.UniformSharding.
 * Use `create(UniformShardingSchema)` to create a new message.
 */
export const UniformShardingSchema: GenMessage<UniformSharding> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 45);

/**
 * Shards test cases into the specified groups of packages, classes, and/or
 * methods.
 *
 * With manual sharding enabled, specifying test targets via
 * environment_variables or in InstrumentationTest is invalid.
 *
 * @generated from message google.devtools.testing.v1.ManualSharding
 */
export type ManualSharding = Message<"google.devtools.testing.v1.ManualSharding"> & {
  /**
   * Required. Group of packages, classes, and/or test methods to be run for
   * each manually-created shard. You must specify at least one shard if this
   * field is present. When you select one or more physical devices, the number
   * of repeated test_targets_for_shard must be <= 50. When you select one or
   * more ARM virtual devices, it must be <= 200. When you select only x86
   * virtual devices, it must be <= 500.
   *
   * @generated from field: repeated google.devtools.testing.v1.TestTargetsForShard test_targets_for_shard = 1;
   */
  testTargetsForShard: TestTargetsForShard[];
};

/**
 * Describes the message google.devtools.testing.v1.ManualSharding.
 * Use `create(ManualShardingSchema)` to create a new message.
 */
export const ManualShardingSchema: GenMessage<ManualSharding> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 46);

/**
 * Test targets for a shard.
 *
 * @generated from message google.devtools.testing.v1.TestTargetsForShard
 */
export type TestTargetsForShard = Message<"google.devtools.testing.v1.TestTargetsForShard"> & {
  /**
   * Group of packages, classes, and/or test methods to be run for each shard.
   * The targets need to be specified in AndroidJUnitRunner argument format. For
   * example, "package com.my.packages" "class com.my.package.MyClass".
   *
   * The number of test_targets must be greater than 0.
   *
   * @generated from field: repeated string test_targets = 1;
   */
  testTargets: string[];
};

/**
 * Describes the message google.devtools.testing.v1.TestTargetsForShard.
 * Use `create(TestTargetsForShardSchema)` to create a new message.
 */
export const TestTargetsForShardSchema: GenMessage<TestTargetsForShard> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 47);

/**
 * Shards test based on previous test case timing records.
 *
 * @generated from message google.devtools.testing.v1.SmartSharding
 */
export type SmartSharding = Message<"google.devtools.testing.v1.SmartSharding"> & {
  /**
   * The amount of time tests within a shard should take.
   *
   * Default: 300 seconds (5 minutes).
   * The minimum allowed: 120 seconds (2 minutes).
   *
   * The shard count is dynamically set based on time, up to the maximum shard
   * limit (described below). To guarantee at least one test case for each
   * shard, the number of shards will not exceed the number of test cases. Shard
   * duration will be exceeded if:
   *
   * - The maximum shard limit is reached and there is more calculated test time
   * remaining to allocate into shards.
   * - Any individual test is estimated to be longer than the targeted shard
   * duration.
   *
   * Shard duration is not guaranteed because smart sharding uses test case
   * history and default durations which may not be accurate. The rules for
   * finding the test case timing records are:
   *
   * - If the service has processed a test case in the last 30 days, the record
   *  of the latest successful test case will be used.
   * - For new test cases, the average duration of other known test cases will
   *  be used.
   * - If there are no previous test case timing records available, the default
   *  test case duration is 15 seconds.
   *
   * Because the actual shard duration can exceed the targeted shard duration,
   * we recommend that you set the targeted value at least 5 minutes less than
   * the maximum allowed test timeout (45 minutes for physical devices and 60
   * minutes for virtual), or that you use the custom test timeout value that
   * you set. This approach avoids cancelling the shard before all tests can
   * finish.
   *
   * Note that there is a limit for maximum number of shards. When you select
   * one or more physical devices, the number of shards must be <= 50. When you
   * select one or more ARM virtual devices, it must be <= 200. When you select
   * only x86 virtual devices, it must be <= 500. To guarantee at least one test
   * case for per shard, the number of shards will not exceed the number of test
   * cases. Each shard created counts toward daily test quota.
   *
   * @generated from field: google.protobuf.Duration targeted_shard_duration = 1;
   */
  targetedShardDuration?: Duration;
};

/**
 * Describes the message google.devtools.testing.v1.SmartSharding.
 * Use `create(SmartShardingSchema)` to create a new message.
 */
export const SmartShardingSchema: GenMessage<SmartSharding> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 48);

/**
 * Output only. Details about the shard.
 *
 * @generated from message google.devtools.testing.v1.Shard
 */
export type Shard = Message<"google.devtools.testing.v1.Shard"> & {
  /**
   * Output only. The index of the shard among all the shards.
   *
   * @generated from field: int32 shard_index = 1;
   */
  shardIndex: number;

  /**
   * Output only. The total number of shards.
   *
   * @generated from field: int32 num_shards = 2;
   */
  numShards: number;

  /**
   * Output only. Test targets for each shard. Only set for manual sharding.
   *
   * @generated from field: google.devtools.testing.v1.TestTargetsForShard test_targets_for_shard = 3;
   */
  testTargetsForShard?: TestTargetsForShard;

  /**
   * Output only. The estimated shard duration based on previous test case
   * timing records, if available.
   *
   * @generated from field: google.protobuf.Duration estimated_shard_duration = 4;
   */
  estimatedShardDuration?: Duration;
};

/**
 * Describes the message google.devtools.testing.v1.Shard.
 * Use `create(ShardSchema)` to create a new message.
 */
export const ShardSchema: GenMessage<Shard> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 49);

/**
 * Request to submit a matrix of tests for execution.
 *
 * @generated from message google.devtools.testing.v1.CreateTestMatrixRequest
 */
export type CreateTestMatrixRequest = Message<"google.devtools.testing.v1.CreateTestMatrixRequest"> & {
  /**
   * The GCE project under which this job will run.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The matrix of tests that the user wants to run.
   *
   * @generated from field: google.devtools.testing.v1.TestMatrix test_matrix = 2;
   */
  testMatrix?: TestMatrix;

  /**
   * A string id used to detect duplicated requests.
   * Ids are automatically scoped to a project, so
   * users should ensure the ID is unique per-project.
   * A UUID is recommended.
   *
   * Optional, but strongly recommended.
   *
   * @generated from field: string request_id = 3;
   */
  requestId: string;
};

/**
 * Describes the message google.devtools.testing.v1.CreateTestMatrixRequest.
 * Use `create(CreateTestMatrixRequestSchema)` to create a new message.
 */
export const CreateTestMatrixRequestSchema: GenMessage<CreateTestMatrixRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 50);

/**
 * Request to get the Test Matrix with the given id.
 *
 * @generated from message google.devtools.testing.v1.GetTestMatrixRequest
 */
export type GetTestMatrixRequest = Message<"google.devtools.testing.v1.GetTestMatrixRequest"> & {
  /**
   * Cloud project that owns the test matrix.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Unique test matrix id which was assigned by the service.
   *
   * @generated from field: string test_matrix_id = 2;
   */
  testMatrixId: string;
};

/**
 * Describes the message google.devtools.testing.v1.GetTestMatrixRequest.
 * Use `create(GetTestMatrixRequestSchema)` to create a new message.
 */
export const GetTestMatrixRequestSchema: GenMessage<GetTestMatrixRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 51);

/**
 * Request to stop running all of the tests in the specified matrix.
 *
 * @generated from message google.devtools.testing.v1.CancelTestMatrixRequest
 */
export type CancelTestMatrixRequest = Message<"google.devtools.testing.v1.CancelTestMatrixRequest"> & {
  /**
   * Cloud project that owns the test.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Test matrix that will be canceled.
   *
   * @generated from field: string test_matrix_id = 2;
   */
  testMatrixId: string;
};

/**
 * Describes the message google.devtools.testing.v1.CancelTestMatrixRequest.
 * Use `create(CancelTestMatrixRequestSchema)` to create a new message.
 */
export const CancelTestMatrixRequestSchema: GenMessage<CancelTestMatrixRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 52);

/**
 * Response containing the current state of the specified test matrix.
 *
 * @generated from message google.devtools.testing.v1.CancelTestMatrixResponse
 */
export type CancelTestMatrixResponse = Message<"google.devtools.testing.v1.CancelTestMatrixResponse"> & {
  /**
   * The current rolled-up state of the test matrix.
   * If this state is already final, then the cancelation request will
   * have no effect.
   *
   * @generated from field: google.devtools.testing.v1.TestState test_state = 1;
   */
  testState: TestState;
};

/**
 * Describes the message google.devtools.testing.v1.CancelTestMatrixResponse.
 * Use `create(CancelTestMatrixResponseSchema)` to create a new message.
 */
export const CancelTestMatrixResponseSchema: GenMessage<CancelTestMatrixResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_execution, 53);

/**
 * Specifies how to execute the test.
 *
 * @generated from enum google.devtools.testing.v1.OrchestratorOption
 */
export enum OrchestratorOption {
  /**
   * Default value: the server will choose the mode. Currently implies that
   * the test will run without the orchestrator. In the future,
   * all instrumentation tests will be run with the orchestrator.
   * Using the orchestrator is highly encouraged because of all the benefits it
   * offers.
   *
   * @generated from enum value: ORCHESTRATOR_OPTION_UNSPECIFIED = 0;
   */
  ORCHESTRATOR_OPTION_UNSPECIFIED = 0,

  /**
   * Run test using orchestrator.
   * ** Only compatible with AndroidJUnitRunner version 1.1 or higher! **
   * Recommended.
   *
   * @generated from enum value: USE_ORCHESTRATOR = 1;
   */
  USE_ORCHESTRATOR = 1,

  /**
   * Run test without using orchestrator.
   *
   * @generated from enum value: DO_NOT_USE_ORCHESTRATOR = 2;
   */
  DO_NOT_USE_ORCHESTRATOR = 2,
}

/**
 * Describes the enum google.devtools.testing.v1.OrchestratorOption.
 */
export const OrchestratorOptionSchema: GenEnum<OrchestratorOption> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 0);

/**
 * The mode in which Robo should run.
 *
 * @generated from enum google.devtools.testing.v1.RoboMode
 */
export enum RoboMode {
  /**
   * This means that the server should choose the mode.
   * Recommended.
   *
   * @generated from enum value: ROBO_MODE_UNSPECIFIED = 0;
   */
  ROBO_MODE_UNSPECIFIED = 0,

  /**
   * Runs Robo in UIAutomator-only mode without app resigning
   *
   * @generated from enum value: ROBO_VERSION_1 = 1;
   */
  ROBO_VERSION_1 = 1,

  /**
   * Runs Robo in standard Espresso with UIAutomator fallback
   *
   * @generated from enum value: ROBO_VERSION_2 = 2;
   */
  ROBO_VERSION_2 = 2,
}

/**
 * Describes the enum google.devtools.testing.v1.RoboMode.
 */
export const RoboModeSchema: GenEnum<RoboMode> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 1);

/**
 * Actions which Robo can perform on UI elements.
 *
 * @generated from enum google.devtools.testing.v1.RoboActionType
 */
export enum RoboActionType {
  /**
   * DO NOT USE. For proto versioning only.
   *
   * @generated from enum value: ACTION_TYPE_UNSPECIFIED = 0;
   */
  ACTION_TYPE_UNSPECIFIED = 0,

  /**
   * Direct Robo to click on the specified element. No-op if specified element
   * is not clickable.
   *
   * @generated from enum value: SINGLE_CLICK = 1;
   */
  SINGLE_CLICK = 1,

  /**
   * Direct Robo to enter text on the specified element. No-op if specified
   * element is not enabled or does not allow text entry.
   *
   * @generated from enum value: ENTER_TEXT = 2;
   */
  ENTER_TEXT = 2,

  /**
   * Direct Robo to ignore interactions with a specific element.
   *
   * @generated from enum value: IGNORE = 3;
   */
  IGNORE = 3,
}

/**
 * Describes the enum google.devtools.testing.v1.RoboActionType.
 */
export const RoboActionTypeSchema: GenEnum<RoboActionType> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 2);

/**
 * The detailed reason that a Matrix was deemed INVALID.
 *
 * @generated from enum google.devtools.testing.v1.InvalidMatrixDetails
 */
export enum InvalidMatrixDetails {
  /**
   * Do not use. For proto versioning only.
   *
   * @generated from enum value: INVALID_MATRIX_DETAILS_UNSPECIFIED = 0;
   */
  INVALID_MATRIX_DETAILS_UNSPECIFIED = 0,

  /**
   * The matrix is INVALID, but there are no further details available.
   *
   * @generated from enum value: DETAILS_UNAVAILABLE = 1;
   */
  DETAILS_UNAVAILABLE = 1,

  /**
   * The input app APK could not be parsed.
   *
   * @generated from enum value: MALFORMED_APK = 2;
   */
  MALFORMED_APK = 2,

  /**
   * The input test APK could not be parsed.
   *
   * @generated from enum value: MALFORMED_TEST_APK = 3;
   */
  MALFORMED_TEST_APK = 3,

  /**
   * The AndroidManifest.xml could not be found.
   *
   * @generated from enum value: NO_MANIFEST = 4;
   */
  NO_MANIFEST = 4,

  /**
   * The APK manifest does not declare a package name.
   *
   * @generated from enum value: NO_PACKAGE_NAME = 5;
   */
  NO_PACKAGE_NAME = 5,

  /**
   * The APK application ID (aka package name) is invalid.
   * See also
   * https://developer.android.com/studio/build/application-id
   *
   * @generated from enum value: INVALID_PACKAGE_NAME = 31;
   */
  INVALID_PACKAGE_NAME = 31,

  /**
   * The test package and app package are the same.
   *
   * @generated from enum value: TEST_SAME_AS_APP = 6;
   */
  TEST_SAME_AS_APP = 6,

  /**
   * The test apk does not declare an instrumentation.
   *
   * @generated from enum value: NO_INSTRUMENTATION = 7;
   */
  NO_INSTRUMENTATION = 7,

  /**
   * The input app apk does not have a signature.
   *
   * @generated from enum value: NO_SIGNATURE = 20;
   */
  NO_SIGNATURE = 20,

  /**
   * The test runner class specified by user or in the test APK's manifest file
   * is not compatible with Android Test Orchestrator.
   * Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or
   * higher.
   * Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
   * OrchestratorOption.
   *
   * @generated from enum value: INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 18;
   */
  INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE = 18,

  /**
   * The test APK does not contain the test runner class specified by the user
   * or in the manifest file. This can be caused by one of the following
   * reasons:
   *
   * - the user provided a runner class name that's incorrect, or
   * - the test runner isn't built into the test APK (might be in the app APK
   * instead).
   *
   * @generated from enum value: NO_TEST_RUNNER_CLASS = 19;
   */
  NO_TEST_RUNNER_CLASS = 19,

  /**
   * A main launcher activity could not be found.
   *
   * @generated from enum value: NO_LAUNCHER_ACTIVITY = 8;
   */
  NO_LAUNCHER_ACTIVITY = 8,

  /**
   * The app declares one or more permissions that are not allowed.
   *
   * @generated from enum value: FORBIDDEN_PERMISSIONS = 9;
   */
  FORBIDDEN_PERMISSIONS = 9,

  /**
   * There is a conflict in the provided robo_directives.
   *
   * @generated from enum value: INVALID_ROBO_DIRECTIVES = 10;
   */
  INVALID_ROBO_DIRECTIVES = 10,

  /**
   * There is at least one invalid resource name in the provided
   * robo directives
   *
   * @generated from enum value: INVALID_RESOURCE_NAME = 33;
   */
  INVALID_RESOURCE_NAME = 33,

  /**
   * Invalid definition of action in the robo directives
   * (e.g. a click or ignore action includes an input text field)
   *
   * @generated from enum value: INVALID_DIRECTIVE_ACTION = 34;
   */
  INVALID_DIRECTIVE_ACTION = 34,

  /**
   * There is no test loop intent filter, or the one that is given is
   * not formatted correctly.
   *
   * @generated from enum value: TEST_LOOP_INTENT_FILTER_NOT_FOUND = 12;
   */
  TEST_LOOP_INTENT_FILTER_NOT_FOUND = 12,

  /**
   * The request contains a scenario label that was not declared in the
   * manifest.
   *
   * @generated from enum value: SCENARIO_LABEL_NOT_DECLARED = 13;
   */
  SCENARIO_LABEL_NOT_DECLARED = 13,

  /**
   * There was an error when parsing a label's value.
   *
   * @generated from enum value: SCENARIO_LABEL_MALFORMED = 14;
   */
  SCENARIO_LABEL_MALFORMED = 14,

  /**
   * The request contains a scenario number that was not declared in the
   * manifest.
   *
   * @generated from enum value: SCENARIO_NOT_DECLARED = 15;
   */
  SCENARIO_NOT_DECLARED = 15,

  /**
   * Device administrator applications are not allowed.
   *
   * @generated from enum value: DEVICE_ADMIN_RECEIVER = 17;
   */
  DEVICE_ADMIN_RECEIVER = 17,

  /**
   * The zipped XCTest was malformed. The zip did not contain a single
   * .xctestrun file and the contents of the DerivedData/Build/Products
   * directory.
   *
   * @generated from enum value: MALFORMED_XC_TEST_ZIP = 11;
   */
  MALFORMED_XC_TEST_ZIP = 11,

  /**
   * The zipped XCTest was built for the iOS simulator rather than for a
   * physical device.
   *
   * @generated from enum value: BUILT_FOR_IOS_SIMULATOR = 24;
   */
  BUILT_FOR_IOS_SIMULATOR = 24,

  /**
   * The .xctestrun file did not specify any test targets.
   *
   * @generated from enum value: NO_TESTS_IN_XC_TEST_ZIP = 25;
   */
  NO_TESTS_IN_XC_TEST_ZIP = 25,

  /**
   * One or more of the test targets defined in the .xctestrun file specifies
   * "UseDestinationArtifacts", which is disallowed.
   *
   * @generated from enum value: USE_DESTINATION_ARTIFACTS = 26;
   */
  USE_DESTINATION_ARTIFACTS = 26,

  /**
   * XC tests which run on physical devices must have
   * "IsAppHostedTestBundle" == "true" in the xctestrun file.
   *
   * @generated from enum value: TEST_NOT_APP_HOSTED = 28;
   */
  TEST_NOT_APP_HOSTED = 28,

  /**
   * An Info.plist file in the XCTest zip could not be parsed.
   *
   * @generated from enum value: PLIST_CANNOT_BE_PARSED = 30;
   */
  PLIST_CANNOT_BE_PARSED = 30,

  /**
   * The APK is marked as "testOnly".
   * Deprecated and not currently used.
   *
   * @generated from enum value: TEST_ONLY_APK = 21 [deprecated = true];
   * @deprecated
   */
  TEST_ONLY_APK = 21,

  /**
   * The input IPA could not be parsed.
   *
   * @generated from enum value: MALFORMED_IPA = 22;
   */
  MALFORMED_IPA = 22,

  /**
   * The application doesn't register the game loop URL scheme.
   *
   * @generated from enum value: MISSING_URL_SCHEME = 35;
   */
  MISSING_URL_SCHEME = 35,

  /**
   * The iOS application bundle (.app) couldn't be processed.
   *
   * @generated from enum value: MALFORMED_APP_BUNDLE = 36;
   */
  MALFORMED_APP_BUNDLE = 36,

  /**
   * APK contains no code.
   * See also
   * https://developer.android.com/guide/topics/manifest/application-element.html#code
   *
   * @generated from enum value: NO_CODE_APK = 23;
   */
  NO_CODE_APK = 23,

  /**
   * Either the provided input APK path was malformed,
   * the APK file does not exist, or the user does not have permission to
   * access the APK file.
   *
   * @generated from enum value: INVALID_INPUT_APK = 27;
   */
  INVALID_INPUT_APK = 27,

  /**
   * APK is built for a preview SDK which is unsupported
   *
   * @generated from enum value: INVALID_APK_PREVIEW_SDK = 29;
   */
  INVALID_APK_PREVIEW_SDK = 29,

  /**
   * The matrix expanded to contain too many executions.
   *
   * @generated from enum value: MATRIX_TOO_LARGE = 37;
   */
  MATRIX_TOO_LARGE = 37,

  /**
   * Not enough test quota to run the executions in this matrix.
   *
   * @generated from enum value: TEST_QUOTA_EXCEEDED = 39;
   */
  TEST_QUOTA_EXCEEDED = 39,

  /**
   * A required cloud service api is not activated.
   * See:
   * https://firebase.google.com/docs/test-lab/android/continuous#requirements
   *
   * @generated from enum value: SERVICE_NOT_ACTIVATED = 40;
   */
  SERVICE_NOT_ACTIVATED = 40,

  /**
   * There was an unknown permission issue running this test.
   *
   * @generated from enum value: UNKNOWN_PERMISSION_ERROR = 41;
   */
  UNKNOWN_PERMISSION_ERROR = 41,
}

/**
 * Describes the enum google.devtools.testing.v1.InvalidMatrixDetails.
 */
export const InvalidMatrixDetailsSchema: GenEnum<InvalidMatrixDetails> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 3);

/**
 * The state (i.e., progress) of a test execution or matrix.
 *
 * @generated from enum google.devtools.testing.v1.TestState
 */
export enum TestState {
  /**
   * Do not use.  For proto versioning only.
   *
   * @generated from enum value: TEST_STATE_UNSPECIFIED = 0;
   */
  TEST_STATE_UNSPECIFIED = 0,

  /**
   * The execution or matrix is being validated.
   *
   * @generated from enum value: VALIDATING = 8;
   */
  VALIDATING = 8,

  /**
   * The execution or matrix is waiting for resources to become available.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * The execution is currently being processed.
   *
   * Can only be set on an execution.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The execution or matrix has terminated normally.
   *
   * On a matrix this means that the matrix level processing completed normally,
   * but individual executions may be in an ERROR state.
   *
   * @generated from enum value: FINISHED = 3;
   */
  FINISHED = 3,

  /**
   * The execution or matrix has stopped because it encountered an
   * infrastructure failure.
   *
   * @generated from enum value: ERROR = 4;
   */
  ERROR = 4,

  /**
   * The execution was not run because it corresponds to a unsupported
   * environment.
   *
   * Can only be set on an execution.
   *
   * @generated from enum value: UNSUPPORTED_ENVIRONMENT = 5;
   */
  UNSUPPORTED_ENVIRONMENT = 5,

  /**
   * The execution was not run because the provided inputs are incompatible with
   * the requested environment.
   *
   * Example: requested AndroidVersion is lower than APK's minSdkVersion
   *
   * Can only be set on an execution.
   *
   * @generated from enum value: INCOMPATIBLE_ENVIRONMENT = 9;
   */
  INCOMPATIBLE_ENVIRONMENT = 9,

  /**
   * The execution was not run because the provided inputs are incompatible with
   * the requested architecture.
   *
   * Example: requested device does not support running the native code in
   * the supplied APK
   *
   * Can only be set on an execution.
   *
   * @generated from enum value: INCOMPATIBLE_ARCHITECTURE = 10;
   */
  INCOMPATIBLE_ARCHITECTURE = 10,

  /**
   * The user cancelled the execution.
   *
   * Can only be set on an execution.
   *
   * @generated from enum value: CANCELLED = 6;
   */
  CANCELLED = 6,

  /**
   * The execution or matrix was not run because the provided inputs are not
   * valid.
   *
   * Examples: input file is not of the expected type, is malformed/corrupt, or
   * was flagged as malware
   *
   * @generated from enum value: INVALID = 7;
   */
  INVALID = 7,
}

/**
 * Describes the enum google.devtools.testing.v1.TestState.
 */
export const TestStateSchema: GenEnum<TestState> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 4);

/**
 * Outcome summary for a finished test matrix.
 *
 * @generated from enum google.devtools.testing.v1.OutcomeSummary
 */
export enum OutcomeSummary {
  /**
   * Do not use. For proto versioning only.
   *
   * @generated from enum value: OUTCOME_SUMMARY_UNSPECIFIED = 0;
   */
  OUTCOME_SUMMARY_UNSPECIFIED = 0,

  /**
   * The test matrix run was successful, for instance:
   *
   * - All the test cases passed.
   * - Robo did not detect a crash of the application under test.
   *
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * A run failed, for instance:
   *
   * - One or more test cases failed.
   * - A test timed out.
   * - The application under test crashed.
   *
   * @generated from enum value: FAILURE = 2;
   */
  FAILURE = 2,

  /**
   * Something unexpected happened. The run should still be considered
   * unsuccessful but this is likely a transient problem and re-running the
   * test might be successful.
   *
   * @generated from enum value: INCONCLUSIVE = 3;
   */
  INCONCLUSIVE = 3,

  /**
   * All tests were skipped, for instance:
   *
   * - All device configurations were incompatible.
   *
   * @generated from enum value: SKIPPED = 4;
   */
  SKIPPED = 4,
}

/**
 * Describes the enum google.devtools.testing.v1.OutcomeSummary.
 */
export const OutcomeSummarySchema: GenEnum<OutcomeSummary> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_execution, 5);

/**
 * A service for requesting test executions and querying their status.
 *
 * This service is part of Firebase Test Lab. To learn about how to use the
 * product, and how to integrate it with your system,
 * visit https://firebase.google.com/docs/test-lab.
 *
 * Each test execution will wait for available capacity. It will then be
 * invoked as described. The test may be invoked multiple times if an
 * infrastructure failure is detected. Results and other files generated by
 * the test will be stored in an external storage system.
 *
 * The TestExecutionService models this behavior using two resource types:
 *
 * - TestMatrix: a group of one or more TestExecutions, built by taking a
 *   product of values over a pre-defined set of axes. In the case of Android
 *   Tests, for example, device model and OS version are two axes of the matrix.
 *
 * - TestExecution: a single execution of one or more test targets on a
 *   single device. These are created automatically when a TestMatrix is
 *   created.
 *
 * This service returns any error codes from the canonical error space (i.e.
 * google.rpc.Code). The errors which may be returned are specified on each
 * method. In addition, any method may return UNAVAILABLE or INTERNAL.
 *
 * @generated from service google.devtools.testing.v1.TestExecutionService
 */
export const TestExecutionService: GenService<{
  /**
   * Creates and runs a matrix of tests according to the given specifications.
   * Unsupported environments will be returned in the state UNSUPPORTED.
   * A test matrix is limited to use at most 2000 devices in parallel.
   *
   * The returned matrix will not yet contain the executions that will be
   * created for this matrix. Execution creation happens later on and will
   * require a call to GetTestMatrix.
   *
   * May return any of the following canonical error codes:
   *
   * - PERMISSION_DENIED - if the user is not authorized to write to project
   * - INVALID_ARGUMENT - if the request is malformed or if the matrix tries
   *                      to use too many simultaneous devices.
   *
   * @generated from rpc google.devtools.testing.v1.TestExecutionService.CreateTestMatrix
   */
  createTestMatrix: {
    methodKind: "unary";
    input: typeof CreateTestMatrixRequestSchema;
    output: typeof TestMatrixSchema;
  },
  /**
   * Checks the status of a test matrix and the executions once they
   * are created.
   *
   * The test matrix will contain the list of test executions to run if and only
   * if the resultStorage.toolResultsExecution fields have been populated.
   *
   * Note: Flaky test executions may be added to the matrix at a later stage.
   *
   * May return any of the following canonical error codes:
   *
   * - PERMISSION_DENIED - if the user is not authorized to read project
   * - INVALID_ARGUMENT - if the request is malformed
   * - NOT_FOUND - if the Test Matrix does not exist
   *
   * @generated from rpc google.devtools.testing.v1.TestExecutionService.GetTestMatrix
   */
  getTestMatrix: {
    methodKind: "unary";
    input: typeof GetTestMatrixRequestSchema;
    output: typeof TestMatrixSchema;
  },
  /**
   * Cancels unfinished test executions in a test matrix.
   * This call returns immediately and cancellation proceeds asynchronously.
   * If the matrix is already final, this operation will have no effect.
   *
   * May return any of the following canonical error codes:
   *
   * - PERMISSION_DENIED - if the user is not authorized to read project
   * - INVALID_ARGUMENT - if the request is malformed
   * - NOT_FOUND - if the Test Matrix does not exist
   *
   * @generated from rpc google.devtools.testing.v1.TestExecutionService.CancelTestMatrix
   */
  cancelTestMatrix: {
    methodKind: "unary";
    input: typeof CancelTestMatrixRequestSchema;
    output: typeof CancelTestMatrixResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_testing_v1_test_execution, 0);

