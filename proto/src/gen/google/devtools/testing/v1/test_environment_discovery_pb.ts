// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/testing/v1/test_environment_discovery.proto (package google.devtools.testing.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/testing/v1/test_environment_discovery.proto.
 */
export const file_google_devtools_testing_v1_test_environment_discovery: GenFile = /*@__PURE__*/
  fileDesc("Cjtnb29nbGUvZGV2dG9vbHMvdGVzdGluZy92MS90ZXN0X2Vudmlyb25tZW50X2Rpc2NvdmVyeS5wcm90bxIaZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEiewoNRGV2aWNlSXBCbG9jaxINCgVibG9jaxgBIAEoCRI0CgRmb3JtGAIgASgOMiYuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlRm9ybRIlCgphZGRlZF9kYXRlGAMgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZSKyAgogR2V0VGVzdEVudmlyb25tZW50Q2F0YWxvZ1JlcXVlc3QSZgoQZW52aXJvbm1lbnRfdHlwZRgBIAEoDjJMLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkdldFRlc3RFbnZpcm9ubWVudENhdGFsb2dSZXF1ZXN0LkVudmlyb25tZW50VHlwZRISCgpwcm9qZWN0X2lkGAIgASgJIpEBCg9FbnZpcm9ubWVudFR5cGUSIAocRU5WSVJPTk1FTlRfVFlQRV9VTlNQRUNJRklFRBAAEgsKB0FORFJPSUQQARIHCgNJT1MQAxIZChVORVRXT1JLX0NPTkZJR1VSQVRJT04QBBIVChFQUk9WSURFRF9TT0ZUV0FSRRAFEhQKEERFVklDRV9JUF9CTE9DS1MQBiLXAwoWVGVzdEVudmlyb25tZW50Q2F0YWxvZxJSChZhbmRyb2lkX2RldmljZV9jYXRhbG9nGAEgASgLMjAuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuQW5kcm9pZERldmljZUNhdGFsb2dIABJKChJpb3NfZGV2aWNlX2NhdGFsb2cYAyABKAsyLC5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5Jb3NEZXZpY2VDYXRhbG9nSAASYAodbmV0d29ya19jb25maWd1cmF0aW9uX2NhdGFsb2cYBCABKAsyNy5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5OZXR3b3JrQ29uZmlndXJhdGlvbkNhdGFsb2dIABJPChBzb2Z0d2FyZV9jYXRhbG9nGAUgASgLMjMuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuUHJvdmlkZWRTb2Z0d2FyZUNhdGFsb2dIABJTChdkZXZpY2VfaXBfYmxvY2tfY2F0YWxvZxgGIAEoCzIwLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZUlwQmxvY2tDYXRhbG9nSABCFQoTZW52aXJvbm1lbnRfY2F0YWxvZyJUChREZXZpY2VJcEJsb2NrQ2F0YWxvZxI8CglpcF9ibG9ja3MYASADKAsyKS5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EZXZpY2VJcEJsb2NrIuYBChRBbmRyb2lkRGV2aWNlQ2F0YWxvZxI4CgZtb2RlbHMYASADKAsyKC5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5BbmRyb2lkTW9kZWwSPAoIdmVyc2lvbnMYAiADKAsyKi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5BbmRyb2lkVmVyc2lvbhJWChVydW50aW1lX2NvbmZpZ3VyYXRpb24YAyABKAsyNy5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5BbmRyb2lkUnVudGltZUNvbmZpZ3VyYXRpb24ikQEKG0FuZHJvaWRSdW50aW1lQ29uZmlndXJhdGlvbhIzCgdsb2NhbGVzGAEgAygLMiIuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuTG9jYWxlEj0KDG9yaWVudGF0aW9ucxgCIAMoCzInLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLk9yaWVudGF0aW9uIt4DCgxBbmRyb2lkTW9kZWwSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIUCgxtYW51ZmFjdHVyZXIYAyABKAkSDQoFYnJhbmQYCSABKAkSEAoIY29kZW5hbWUYCiABKAkSNAoEZm9ybRgEIAEoDjImLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRldmljZUZvcm0SQQoLZm9ybV9mYWN0b3IYECABKA4yLC5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EZXZpY2VGb3JtRmFjdG9yEksKEHBlcl92ZXJzaW9uX2luZm8YFSADKAsyMS5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5QZXJBbmRyb2lkVmVyc2lvbkluZm8SEAoIc2NyZWVuX3gYBSABKAUSEAoIc2NyZWVuX3kYBiABKAUSFgoOc2NyZWVuX2RlbnNpdHkYDCABKAUSHwoXbG93X2Zwc192aWRlb19yZWNvcmRpbmcYESABKAgSHQoVc3VwcG9ydGVkX3ZlcnNpb25faWRzGAcgAygJEhYKDnN1cHBvcnRlZF9hYmlzGAsgAygJEgwKBHRhZ3MYCCADKAkSFQoNdGh1bWJuYWlsX3VybBgTIAEoCSLRAQoOQW5kcm9pZFZlcnNpb24SCgoCaWQYASABKAkSFgoOdmVyc2lvbl9zdHJpbmcYAiABKAkSEQoJYXBpX2xldmVsGAMgASgFEhEKCWNvZGVfbmFtZRgEIAEoCRInCgxyZWxlYXNlX2RhdGUYBSABKAsyES5nb29nbGUudHlwZS5EYXRlEj4KDGRpc3RyaWJ1dGlvbhgGIAEoCzIoLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkRpc3RyaWJ1dGlvbhIMCgR0YWdzGAcgAygJIqACChVQZXJBbmRyb2lkVmVyc2lvbkluZm8SEgoKdmVyc2lvbl9pZBgBIAEoCRJDCg9kZXZpY2VfY2FwYWNpdHkYAiABKA4yKi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EZXZpY2VDYXBhY2l0eRJQCihpbnRlcmFjdGl2ZV9kZXZpY2VfYXZhaWxhYmlsaXR5X2VzdGltYXRlGAMgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgPgQQMSXAoaZGlyZWN0X2FjY2Vzc192ZXJzaW9uX2luZm8YBCABKAsyMy5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EaXJlY3RBY2Nlc3NWZXJzaW9uSW5mb0ID4EEDImIKF0RpcmVjdEFjY2Vzc1ZlcnNpb25JbmZvEh8KF2RpcmVjdF9hY2Nlc3Nfc3VwcG9ydGVkGAEgASgIEiYKHm1pbmltdW1fYW5kcm9pZF9zdHVkaW9fdmVyc2lvbhgCIAEoCSJaCgxEaXN0cmlidXRpb24SNAoQbWVhc3VyZW1lbnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFAoMbWFya2V0X3NoYXJlGAIgASgBIpgCChBJb3NEZXZpY2VDYXRhbG9nEjQKBm1vZGVscxgBIAMoCzIkLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLklvc01vZGVsEjgKCHZlcnNpb25zGAIgAygLMiYuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuSW9zVmVyc2lvbhJACg54Y29kZV92ZXJzaW9ucxgEIAMoCzIoLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLlhjb2RlVmVyc2lvbhJSChVydW50aW1lX2NvbmZpZ3VyYXRpb24YAyABKAsyMy5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5Jb3NSdW50aW1lQ29uZmlndXJhdGlvbiKNAQoXSW9zUnVudGltZUNvbmZpZ3VyYXRpb24SMwoHbG9jYWxlcxgBIAMoCzIiLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLkxvY2FsZRI9CgxvcmllbnRhdGlvbnMYAiADKAsyJy5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5PcmllbnRhdGlvbiK2AgoISW9zTW9kZWwSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIdChVzdXBwb3J0ZWRfdmVyc2lvbl9pZHMYAyADKAkSDAoEdGFncxgEIAMoCRIbChNkZXZpY2VfY2FwYWJpbGl0aWVzGAUgAygJEhAKCHNjcmVlbl94GAcgASgFEhAKCHNjcmVlbl95GAggASgFEhYKDnNjcmVlbl9kZW5zaXR5GAkgASgFEkEKC2Zvcm1fZmFjdG9yGAYgASgOMiwuZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuRGV2aWNlRm9ybUZhY3RvchJHChBwZXJfdmVyc2lvbl9pbmZvGA4gAygLMi0uZ29vZ2xlLmRldnRvb2xzLnRlc3RpbmcudjEuUGVySW9zVmVyc2lvbkluZm8ieQoKSW9zVmVyc2lvbhIKCgJpZBgBIAEoCRIVCg1tYWpvcl92ZXJzaW9uGAIgASgFEhUKDW1pbm9yX3ZlcnNpb24YBCABKAUSDAoEdGFncxgDIAMoCRIjChtzdXBwb3J0ZWRfeGNvZGVfdmVyc2lvbl9pZHMYBSADKAkibAoRUGVySW9zVmVyc2lvbkluZm8SEgoKdmVyc2lvbl9pZBgBIAEoCRJDCg9kZXZpY2VfY2FwYWNpdHkYAiABKA4yKi5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5EZXZpY2VDYXBhY2l0eSJACgZMb2NhbGUSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIOCgZyZWdpb24YAyABKAkSDAoEdGFncxgEIAMoCSI1CgtPcmllbnRhdGlvbhIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEgwKBHRhZ3MYAyADKAkiLQoMWGNvZGVWZXJzaW9uEg8KB3ZlcnNpb24YASABKAkSDAoEdGFncxgCIAMoCSJnChtOZXR3b3JrQ29uZmlndXJhdGlvbkNhdGFsb2cSSAoOY29uZmlndXJhdGlvbnMYASADKAsyMC5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5OZXR3b3JrQ29uZmlndXJhdGlvbiKYAQoUTmV0d29ya0NvbmZpZ3VyYXRpb24SCgoCaWQYASABKAkSOAoHdXBfcnVsZRgCIAEoCzInLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLlRyYWZmaWNSdWxlEjoKCWRvd25fcnVsZRgDIAEoCzInLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLlRyYWZmaWNSdWxlIpYBCgtUcmFmZmljUnVsZRIoCgVkZWxheRgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIZChFwYWNrZXRfbG9zc19yYXRpbxgCIAEoAhIgChhwYWNrZXRfZHVwbGljYXRpb25fcmF0aW8YAyABKAISEQoJYmFuZHdpZHRoGAQgASgCEg0KBWJ1cnN0GAUgASgCImIKF1Byb3ZpZGVkU29mdHdhcmVDYXRhbG9nEiAKFG9yY2hlc3RyYXRvcl92ZXJzaW9uGAEgASgJQgIYARIlCh1hbmRyb2lkeF9vcmNoZXN0cmF0b3JfdmVyc2lvbhgCIAEoCSpSCgpEZXZpY2VGb3JtEhsKF0RFVklDRV9GT1JNX1VOU1BFQ0lGSUVEEAASCwoHVklSVFVBTBABEgwKCFBIWVNJQ0FMEAISDAoIRU1VTEFUT1IQAypbChBEZXZpY2VGb3JtRmFjdG9yEiIKHkRFVklDRV9GT1JNX0ZBQ1RPUl9VTlNQRUNJRklFRBAAEgkKBVBIT05FEAESCgoGVEFCTEVUEAISDAoIV0VBUkFCTEUQAyqaAQoORGV2aWNlQ2FwYWNpdHkSHwobREVWSUNFX0NBUEFDSVRZX1VOU1BFQ0lGSUVEEAASGAoUREVWSUNFX0NBUEFDSVRZX0hJR0gQARIaChZERVZJQ0VfQ0FQQUNJVFlfTUVESVVNEAISFwoTREVWSUNFX0NBUEFDSVRZX0xPVxADEhgKFERFVklDRV9DQVBBQ0lUWV9OT05FEAQy7gIKH1Rlc3RFbnZpcm9ubWVudERpc2NvdmVyeVNlcnZpY2USxAEKGUdldFRlc3RFbnZpcm9ubWVudENhdGFsb2cSPC5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MS5HZXRUZXN0RW52aXJvbm1lbnRDYXRhbG9nUmVxdWVzdBoyLmdvb2dsZS5kZXZ0b29scy50ZXN0aW5nLnYxLlRlc3RFbnZpcm9ubWVudENhdGFsb2ciNYLT5JMCLxItL3YxL3Rlc3RFbnZpcm9ubWVudENhdGFsb2cve2Vudmlyb25tZW50X3R5cGV9GoMBykEWdGVzdGluZy5nb29nbGVhcGlzLmNvbdJBZ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybS5yZWFkLW9ubHlChAEKHmNvbS5nb29nbGUuZGV2dG9vbHMudGVzdGluZy52MUIdVGVzdEVudmlyb25tZW50RGlzY292ZXJ5UHJvdG9QAVpBZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy90ZXN0aW5nL3YxO3Rlc3RpbmdiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_protobuf_duration, file_google_protobuf_timestamp, file_google_type_date]);

/**
 * A single device IP block
 *
 * @generated from message google.devtools.testing.v1.DeviceIpBlock
 */
export type DeviceIpBlock = Message<"google.devtools.testing.v1.DeviceIpBlock"> & {
  /**
   * An IP address block in CIDR notation eg: 34.68.194.64/29
   *
   * @generated from field: string block = 1;
   */
  block: string;

  /**
   * Whether this block is used by physical or virtual devices
   *
   * @generated from field: google.devtools.testing.v1.DeviceForm form = 2;
   */
  form: DeviceForm;

  /**
   * The date this block was added to Firebase Test Lab
   *
   * @generated from field: google.type.Date added_date = 3;
   */
  addedDate?: Date;
};

/**
 * Describes the message google.devtools.testing.v1.DeviceIpBlock.
 * Use `create(DeviceIpBlockSchema)` to create a new message.
 */
export const DeviceIpBlockSchema: GenMessage<DeviceIpBlock> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 0);

/**
 * Request to list the currently supported values for an environment type.
 *
 * @generated from message google.devtools.testing.v1.GetTestEnvironmentCatalogRequest
 */
export type GetTestEnvironmentCatalogRequest = Message<"google.devtools.testing.v1.GetTestEnvironmentCatalogRequest"> & {
  /**
   * Required. The type of environment that should be listed.
   *
   * @generated from field: google.devtools.testing.v1.GetTestEnvironmentCatalogRequest.EnvironmentType environment_type = 1;
   */
  environmentType: GetTestEnvironmentCatalogRequest_EnvironmentType;

  /**
   * For authorization, the cloud project requesting the TestEnvironmentCatalog.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.devtools.testing.v1.GetTestEnvironmentCatalogRequest.
 * Use `create(GetTestEnvironmentCatalogRequestSchema)` to create a new message.
 */
export const GetTestEnvironmentCatalogRequestSchema: GenMessage<GetTestEnvironmentCatalogRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 1);

/**
 * Types of environments the Test API supports.
 *
 * @generated from enum google.devtools.testing.v1.GetTestEnvironmentCatalogRequest.EnvironmentType
 */
export enum GetTestEnvironmentCatalogRequest_EnvironmentType {
  /**
   * Do not use.  For proto versioning only.
   *
   * @generated from enum value: ENVIRONMENT_TYPE_UNSPECIFIED = 0;
   */
  ENVIRONMENT_TYPE_UNSPECIFIED = 0,

  /**
   * A device running a version of the Android OS.
   *
   * @generated from enum value: ANDROID = 1;
   */
  ANDROID = 1,

  /**
   * A device running a version of iOS.
   *
   * @generated from enum value: IOS = 3;
   */
  IOS = 3,

  /**
   * A network configuration to use when running a test.
   *
   * @generated from enum value: NETWORK_CONFIGURATION = 4;
   */
  NETWORK_CONFIGURATION = 4,

  /**
   * The software environment provided by TestExecutionService.
   *
   * @generated from enum value: PROVIDED_SOFTWARE = 5;
   */
  PROVIDED_SOFTWARE = 5,

  /**
   * The IP blocks used by devices in the test environment.
   *
   * @generated from enum value: DEVICE_IP_BLOCKS = 6;
   */
  DEVICE_IP_BLOCKS = 6,
}

/**
 * Describes the enum google.devtools.testing.v1.GetTestEnvironmentCatalogRequest.EnvironmentType.
 */
export const GetTestEnvironmentCatalogRequest_EnvironmentTypeSchema: GenEnum<GetTestEnvironmentCatalogRequest_EnvironmentType> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_environment_discovery, 1, 0);

/**
 * A description of a test environment.
 *
 * @generated from message google.devtools.testing.v1.TestEnvironmentCatalog
 */
export type TestEnvironmentCatalog = Message<"google.devtools.testing.v1.TestEnvironmentCatalog"> & {
  /**
   * Output only.
   *
   * @generated from oneof google.devtools.testing.v1.TestEnvironmentCatalog.environment_catalog
   */
  environmentCatalog: {
    /**
     * Supported Android devices.
     *
     * @generated from field: google.devtools.testing.v1.AndroidDeviceCatalog android_device_catalog = 1;
     */
    value: AndroidDeviceCatalog;
    case: "androidDeviceCatalog";
  } | {
    /**
     * Supported iOS devices.
     *
     * @generated from field: google.devtools.testing.v1.IosDeviceCatalog ios_device_catalog = 3;
     */
    value: IosDeviceCatalog;
    case: "iosDeviceCatalog";
  } | {
    /**
     * Supported network configurations.
     *
     * @generated from field: google.devtools.testing.v1.NetworkConfigurationCatalog network_configuration_catalog = 4;
     */
    value: NetworkConfigurationCatalog;
    case: "networkConfigurationCatalog";
  } | {
    /**
     * The software test environment provided by TestExecutionService.
     *
     * @generated from field: google.devtools.testing.v1.ProvidedSoftwareCatalog software_catalog = 5;
     */
    value: ProvidedSoftwareCatalog;
    case: "softwareCatalog";
  } | {
    /**
     * The IP blocks used by devices in the test environment.
     *
     * @generated from field: google.devtools.testing.v1.DeviceIpBlockCatalog device_ip_block_catalog = 6;
     */
    value: DeviceIpBlockCatalog;
    case: "deviceIpBlockCatalog";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.testing.v1.TestEnvironmentCatalog.
 * Use `create(TestEnvironmentCatalogSchema)` to create a new message.
 */
export const TestEnvironmentCatalogSchema: GenMessage<TestEnvironmentCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 2);

/**
 * List of IP blocks used by the Firebase Test Lab
 *
 * @generated from message google.devtools.testing.v1.DeviceIpBlockCatalog
 */
export type DeviceIpBlockCatalog = Message<"google.devtools.testing.v1.DeviceIpBlockCatalog"> & {
  /**
   * The device IP blocks used by Firebase Test Lab
   *
   * @generated from field: repeated google.devtools.testing.v1.DeviceIpBlock ip_blocks = 1;
   */
  ipBlocks: DeviceIpBlock[];
};

/**
 * Describes the message google.devtools.testing.v1.DeviceIpBlockCatalog.
 * Use `create(DeviceIpBlockCatalogSchema)` to create a new message.
 */
export const DeviceIpBlockCatalogSchema: GenMessage<DeviceIpBlockCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 3);

/**
 * The currently supported Android devices.
 *
 * @generated from message google.devtools.testing.v1.AndroidDeviceCatalog
 */
export type AndroidDeviceCatalog = Message<"google.devtools.testing.v1.AndroidDeviceCatalog"> & {
  /**
   * The set of supported Android device models.
   *
   * @generated from field: repeated google.devtools.testing.v1.AndroidModel models = 1;
   */
  models: AndroidModel[];

  /**
   * The set of supported Android OS versions.
   *
   * @generated from field: repeated google.devtools.testing.v1.AndroidVersion versions = 2;
   */
  versions: AndroidVersion[];

  /**
   * The set of supported runtime configurations.
   *
   * @generated from field: google.devtools.testing.v1.AndroidRuntimeConfiguration runtime_configuration = 3;
   */
  runtimeConfiguration?: AndroidRuntimeConfiguration;
};

/**
 * Describes the message google.devtools.testing.v1.AndroidDeviceCatalog.
 * Use `create(AndroidDeviceCatalogSchema)` to create a new message.
 */
export const AndroidDeviceCatalogSchema: GenMessage<AndroidDeviceCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 4);

/**
 * Android configuration that can be selected at the time a test is run.
 *
 * @generated from message google.devtools.testing.v1.AndroidRuntimeConfiguration
 */
export type AndroidRuntimeConfiguration = Message<"google.devtools.testing.v1.AndroidRuntimeConfiguration"> & {
  /**
   * The set of available locales.
   *
   * @generated from field: repeated google.devtools.testing.v1.Locale locales = 1;
   */
  locales: Locale[];

  /**
   * The set of available orientations.
   *
   * @generated from field: repeated google.devtools.testing.v1.Orientation orientations = 2;
   */
  orientations: Orientation[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidRuntimeConfiguration.
 * Use `create(AndroidRuntimeConfigurationSchema)` to create a new message.
 */
export const AndroidRuntimeConfigurationSchema: GenMessage<AndroidRuntimeConfiguration> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 5);

/**
 * A description of an Android device tests may be run on.
 *
 * @generated from message google.devtools.testing.v1.AndroidModel
 */
export type AndroidModel = Message<"google.devtools.testing.v1.AndroidModel"> & {
  /**
   * The unique opaque id for this model.
   * Use this for invoking the TestExecutionService.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The human-readable marketing name for this device model.
   * Examples: "Nexus 5", "Galaxy S5".
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The manufacturer of this device.
   *
   * @generated from field: string manufacturer = 3;
   */
  manufacturer: string;

  /**
   * The company that this device is branded with.
   * Example: "Google", "Samsung".
   *
   * @generated from field: string brand = 9;
   */
  brand: string;

  /**
   * The name of the industrial design.
   * This corresponds to android.os.Build.DEVICE.
   *
   * @generated from field: string codename = 10;
   */
  codename: string;

  /**
   * Whether this device is virtual or physical.
   *
   * @generated from field: google.devtools.testing.v1.DeviceForm form = 4;
   */
  form: DeviceForm;

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   *
   * @generated from field: google.devtools.testing.v1.DeviceFormFactor form_factor = 16;
   */
  formFactor: DeviceFormFactor;

  /**
   * Version-specific information of an Android model.
   *
   * @generated from field: repeated google.devtools.testing.v1.PerAndroidVersionInfo per_version_info = 21;
   */
  perVersionInfo: PerAndroidVersionInfo[];

  /**
   * Screen size in the horizontal (X) dimension measured in pixels.
   *
   * @generated from field: int32 screen_x = 5;
   */
  screenX: number;

  /**
   * Screen size in the vertical (Y) dimension measured in pixels.
   *
   * @generated from field: int32 screen_y = 6;
   */
  screenY: number;

  /**
   * Screen density in DPI.
   * This corresponds to ro.sf.lcd_density
   *
   * @generated from field: int32 screen_density = 12;
   */
  screenDensity: number;

  /**
   * True if and only if tests with this model are recorded by stitching
   * together screenshots. See use_low_spec_video_recording in device config.
   *
   * @generated from field: bool low_fps_video_recording = 17;
   */
  lowFpsVideoRecording: boolean;

  /**
   * The set of Android versions this device supports.
   *
   * @generated from field: repeated string supported_version_ids = 7;
   */
  supportedVersionIds: string[];

  /**
   * The list of supported ABIs for this device.
   * This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level
   * 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2.
   * The most preferred ABI is the first element in the list.
   *
   * Elements are optionally prefixed by "version_id:" (where version_id is
   * the id of an AndroidVersion), denoting an ABI that is supported only on
   * a particular version.
   *
   * @generated from field: repeated string supported_abis = 11;
   */
  supportedAbis: string[];

  /**
   * Tags for this dimension.
   * Examples: "default", "preview", "deprecated".
   *
   * @generated from field: repeated string tags = 8;
   */
  tags: string[];

  /**
   * URL of a thumbnail image (photo) of the device.
   *
   * @generated from field: string thumbnail_url = 19;
   */
  thumbnailUrl: string;
};

/**
 * Describes the message google.devtools.testing.v1.AndroidModel.
 * Use `create(AndroidModelSchema)` to create a new message.
 */
export const AndroidModelSchema: GenMessage<AndroidModel> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 6);

/**
 * A version of the Android OS.
 *
 * @generated from message google.devtools.testing.v1.AndroidVersion
 */
export type AndroidVersion = Message<"google.devtools.testing.v1.AndroidVersion"> & {
  /**
   * An opaque id for this Android version.
   * Use this id to invoke the TestExecutionService.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * A string representing this version of the Android OS.
   * Examples: "4.3", "4.4".
   *
   * @generated from field: string version_string = 2;
   */
  versionString: string;

  /**
   * The API level for this Android version.
   * Examples: 18, 19.
   *
   * @generated from field: int32 api_level = 3;
   */
  apiLevel: number;

  /**
   * The code name for this Android version.
   * Examples: "JellyBean", "KitKat".
   *
   * @generated from field: string code_name = 4;
   */
  codeName: string;

  /**
   * The date this Android version became available in the market.
   *
   * @generated from field: google.type.Date release_date = 5;
   */
  releaseDate?: Date;

  /**
   * Market share for this version.
   *
   * @generated from field: google.devtools.testing.v1.Distribution distribution = 6;
   */
  distribution?: Distribution;

  /**
   * Tags for this dimension.
   * Examples: "default", "preview", "deprecated".
   *
   * @generated from field: repeated string tags = 7;
   */
  tags: string[];
};

/**
 * Describes the message google.devtools.testing.v1.AndroidVersion.
 * Use `create(AndroidVersionSchema)` to create a new message.
 */
export const AndroidVersionSchema: GenMessage<AndroidVersion> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 7);

/**
 * A version-specific information of an Android model.
 *
 * @generated from message google.devtools.testing.v1.PerAndroidVersionInfo
 */
export type PerAndroidVersionInfo = Message<"google.devtools.testing.v1.PerAndroidVersionInfo"> & {
  /**
   * An Android version.
   *
   * @generated from field: string version_id = 1;
   */
  versionId: string;

  /**
   * The number of online devices for an Android version.
   *
   * @generated from field: google.devtools.testing.v1.DeviceCapacity device_capacity = 2;
   */
  deviceCapacity: DeviceCapacity;

  /**
   * Output only. The estimated wait time for a single interactive device
   * session using Direct Access.
   *
   * @generated from field: google.protobuf.Duration interactive_device_availability_estimate = 3;
   */
  interactiveDeviceAvailabilityEstimate?: Duration;

  /**
   * Output only. Identifies supported clients for DirectAccess for this Android
   * version.
   *
   * @generated from field: google.devtools.testing.v1.DirectAccessVersionInfo direct_access_version_info = 4;
   */
  directAccessVersionInfo?: DirectAccessVersionInfo;
};

/**
 * Describes the message google.devtools.testing.v1.PerAndroidVersionInfo.
 * Use `create(PerAndroidVersionInfoSchema)` to create a new message.
 */
export const PerAndroidVersionInfoSchema: GenMessage<PerAndroidVersionInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 8);

/**
 * Denotes whether Direct Access is supported, and by which client versions.
 *
 * DirectAccessService is currently available as a preview to select developers.
 * You can register today on behalf of you and your team at
 * https://developer.android.com/studio/preview/android-device-streaming
 *
 * @generated from message google.devtools.testing.v1.DirectAccessVersionInfo
 */
export type DirectAccessVersionInfo = Message<"google.devtools.testing.v1.DirectAccessVersionInfo"> & {
  /**
   * Whether direct access is supported at all. Clients are expected to
   * filter down the device list to only android models and versions which
   * support Direct Access when that is the user intent.
   *
   * @generated from field: bool direct_access_supported = 1;
   */
  directAccessSupported: boolean;

  /**
   * Output only. Indicates client-device compatibility, where a device is known
   * to work only with certain workarounds implemented in the Android Studio
   * client. Expected format "major.minor.micro.patch", e.g.
   * "5921.22.2211.8881706".
   *
   * @generated from field: string minimum_android_studio_version = 2;
   */
  minimumAndroidStudioVersion: string;
};

/**
 * Describes the message google.devtools.testing.v1.DirectAccessVersionInfo.
 * Use `create(DirectAccessVersionInfoSchema)` to create a new message.
 */
export const DirectAccessVersionInfoSchema: GenMessage<DirectAccessVersionInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 9);

/**
 * Data about the relative number of devices running a
 * given configuration of the Android platform.
 *
 * @generated from message google.devtools.testing.v1.Distribution
 */
export type Distribution = Message<"google.devtools.testing.v1.Distribution"> & {
  /**
   * Output only. The time this distribution was measured.
   *
   * @generated from field: google.protobuf.Timestamp measurement_time = 1;
   */
  measurementTime?: Timestamp;

  /**
   * Output only. The estimated fraction (0-1) of the total market with this
   * configuration.
   *
   * @generated from field: double market_share = 2;
   */
  marketShare: number;
};

/**
 * Describes the message google.devtools.testing.v1.Distribution.
 * Use `create(DistributionSchema)` to create a new message.
 */
export const DistributionSchema: GenMessage<Distribution> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 10);

/**
 * The currently supported iOS devices.
 *
 * @generated from message google.devtools.testing.v1.IosDeviceCatalog
 */
export type IosDeviceCatalog = Message<"google.devtools.testing.v1.IosDeviceCatalog"> & {
  /**
   * The set of supported iOS device models.
   *
   * @generated from field: repeated google.devtools.testing.v1.IosModel models = 1;
   */
  models: IosModel[];

  /**
   * The set of supported iOS software versions.
   *
   * @generated from field: repeated google.devtools.testing.v1.IosVersion versions = 2;
   */
  versions: IosVersion[];

  /**
   * The set of supported Xcode versions.
   *
   * @generated from field: repeated google.devtools.testing.v1.XcodeVersion xcode_versions = 4;
   */
  xcodeVersions: XcodeVersion[];

  /**
   * The set of supported runtime configurations.
   *
   * @generated from field: google.devtools.testing.v1.IosRuntimeConfiguration runtime_configuration = 3;
   */
  runtimeConfiguration?: IosRuntimeConfiguration;
};

/**
 * Describes the message google.devtools.testing.v1.IosDeviceCatalog.
 * Use `create(IosDeviceCatalogSchema)` to create a new message.
 */
export const IosDeviceCatalogSchema: GenMessage<IosDeviceCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 11);

/**
 * iOS configuration that can be selected at the time a test is run.
 *
 * @generated from message google.devtools.testing.v1.IosRuntimeConfiguration
 */
export type IosRuntimeConfiguration = Message<"google.devtools.testing.v1.IosRuntimeConfiguration"> & {
  /**
   * The set of available locales.
   *
   * @generated from field: repeated google.devtools.testing.v1.Locale locales = 1;
   */
  locales: Locale[];

  /**
   * The set of available orientations.
   *
   * @generated from field: repeated google.devtools.testing.v1.Orientation orientations = 2;
   */
  orientations: Orientation[];
};

/**
 * Describes the message google.devtools.testing.v1.IosRuntimeConfiguration.
 * Use `create(IosRuntimeConfigurationSchema)` to create a new message.
 */
export const IosRuntimeConfigurationSchema: GenMessage<IosRuntimeConfiguration> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 12);

/**
 * A description of an iOS device tests may be run on.
 *
 * @generated from message google.devtools.testing.v1.IosModel
 */
export type IosModel = Message<"google.devtools.testing.v1.IosModel"> & {
  /**
   * The unique opaque id for this model.
   * Use this for invoking the TestExecutionService.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The human-readable name for this device model.
   * Examples: "iPhone 4s", "iPad Mini 2".
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The set of iOS major software versions this device supports.
   *
   * @generated from field: repeated string supported_version_ids = 3;
   */
  supportedVersionIds: string[];

  /**
   * Tags for this dimension.
   * Examples: "default", "preview", "deprecated".
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[];

  /**
   * Device capabilities.
   * Copied from
   * https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
   *
   * @generated from field: repeated string device_capabilities = 5;
   */
  deviceCapabilities: string[];

  /**
   * Screen size in the horizontal (X) dimension measured in pixels.
   *
   * @generated from field: int32 screen_x = 7;
   */
  screenX: number;

  /**
   * Screen size in the vertical (Y) dimension measured in pixels.
   *
   * @generated from field: int32 screen_y = 8;
   */
  screenY: number;

  /**
   * Screen density in DPI.
   *
   * @generated from field: int32 screen_density = 9;
   */
  screenDensity: number;

  /**
   * Whether this device is a phone, tablet, wearable, etc.
   *
   * @generated from field: google.devtools.testing.v1.DeviceFormFactor form_factor = 6;
   */
  formFactor: DeviceFormFactor;

  /**
   * Version-specific information of an iOS model.
   *
   * @generated from field: repeated google.devtools.testing.v1.PerIosVersionInfo per_version_info = 14;
   */
  perVersionInfo: PerIosVersionInfo[];
};

/**
 * Describes the message google.devtools.testing.v1.IosModel.
 * Use `create(IosModelSchema)` to create a new message.
 */
export const IosModelSchema: GenMessage<IosModel> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 13);

/**
 * An iOS version.
 *
 * @generated from message google.devtools.testing.v1.IosVersion
 */
export type IosVersion = Message<"google.devtools.testing.v1.IosVersion"> & {
  /**
   * An opaque id for this iOS version.
   * Use this id to invoke the TestExecutionService.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * An integer representing the major iOS version.
   * Examples: "8", "9".
   *
   * @generated from field: int32 major_version = 2;
   */
  majorVersion: number;

  /**
   * An integer representing the minor iOS version.
   * Examples: "1", "2".
   *
   * @generated from field: int32 minor_version = 4;
   */
  minorVersion: number;

  /**
   * Tags for this dimension.
   * Examples: "default", "preview", "deprecated".
   *
   * @generated from field: repeated string tags = 3;
   */
  tags: string[];

  /**
   * The available Xcode versions for this version.
   *
   * @generated from field: repeated string supported_xcode_version_ids = 5;
   */
  supportedXcodeVersionIds: string[];
};

/**
 * Describes the message google.devtools.testing.v1.IosVersion.
 * Use `create(IosVersionSchema)` to create a new message.
 */
export const IosVersionSchema: GenMessage<IosVersion> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 14);

/**
 * A version-specific information of an iOS model.
 *
 * @generated from message google.devtools.testing.v1.PerIosVersionInfo
 */
export type PerIosVersionInfo = Message<"google.devtools.testing.v1.PerIosVersionInfo"> & {
  /**
   * An iOS version.
   *
   * @generated from field: string version_id = 1;
   */
  versionId: string;

  /**
   * The number of online devices for an iOS version.
   *
   * @generated from field: google.devtools.testing.v1.DeviceCapacity device_capacity = 2;
   */
  deviceCapacity: DeviceCapacity;
};

/**
 * Describes the message google.devtools.testing.v1.PerIosVersionInfo.
 * Use `create(PerIosVersionInfoSchema)` to create a new message.
 */
export const PerIosVersionInfoSchema: GenMessage<PerIosVersionInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 15);

/**
 * A location/region designation for language.
 *
 * @generated from message google.devtools.testing.v1.Locale
 */
export type Locale = Message<"google.devtools.testing.v1.Locale"> & {
  /**
   * The id for this locale.
   * Example: "en_US".
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * A human-friendly name for this language/locale.
   * Example: "English".
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * A human-friendly string representing the region for this
   * locale. Example: "United States". Not present for every locale.
   *
   * @generated from field: string region = 3;
   */
  region: string;

  /**
   * Tags for this dimension.
   * Example: "default".
   *
   * @generated from field: repeated string tags = 4;
   */
  tags: string[];
};

/**
 * Describes the message google.devtools.testing.v1.Locale.
 * Use `create(LocaleSchema)` to create a new message.
 */
export const LocaleSchema: GenMessage<Locale> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 16);

/**
 * Screen orientation of the device.
 *
 * @generated from message google.devtools.testing.v1.Orientation
 */
export type Orientation = Message<"google.devtools.testing.v1.Orientation"> & {
  /**
   * The id for this orientation.
   * Example: "portrait".
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * A human-friendly name for this orientation.
   * Example: "portrait".
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Tags for this dimension.
   * Example: "default".
   *
   * @generated from field: repeated string tags = 3;
   */
  tags: string[];
};

/**
 * Describes the message google.devtools.testing.v1.Orientation.
 * Use `create(OrientationSchema)` to create a new message.
 */
export const OrientationSchema: GenMessage<Orientation> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 17);

/**
 * An Xcode version that an iOS version is compatible with.
 *
 * @generated from message google.devtools.testing.v1.XcodeVersion
 */
export type XcodeVersion = Message<"google.devtools.testing.v1.XcodeVersion"> & {
  /**
   * The id for this version.
   * Example: "9.2".
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * Tags for this Xcode version.
   * Example: "default".
   *
   * @generated from field: repeated string tags = 2;
   */
  tags: string[];
};

/**
 * Describes the message google.devtools.testing.v1.XcodeVersion.
 * Use `create(XcodeVersionSchema)` to create a new message.
 */
export const XcodeVersionSchema: GenMessage<XcodeVersion> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 18);

/**
 * @generated from message google.devtools.testing.v1.NetworkConfigurationCatalog
 */
export type NetworkConfigurationCatalog = Message<"google.devtools.testing.v1.NetworkConfigurationCatalog"> & {
  /**
   * @generated from field: repeated google.devtools.testing.v1.NetworkConfiguration configurations = 1;
   */
  configurations: NetworkConfiguration[];
};

/**
 * Describes the message google.devtools.testing.v1.NetworkConfigurationCatalog.
 * Use `create(NetworkConfigurationCatalogSchema)` to create a new message.
 */
export const NetworkConfigurationCatalogSchema: GenMessage<NetworkConfigurationCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 19);

/**
 * @generated from message google.devtools.testing.v1.NetworkConfiguration
 */
export type NetworkConfiguration = Message<"google.devtools.testing.v1.NetworkConfiguration"> & {
  /**
   * The unique opaque id for this network traffic configuration.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The emulation rule applying to the upload traffic.
   *
   * @generated from field: google.devtools.testing.v1.TrafficRule up_rule = 2;
   */
  upRule?: TrafficRule;

  /**
   * The emulation rule applying to the download traffic.
   *
   * @generated from field: google.devtools.testing.v1.TrafficRule down_rule = 3;
   */
  downRule?: TrafficRule;
};

/**
 * Describes the message google.devtools.testing.v1.NetworkConfiguration.
 * Use `create(NetworkConfigurationSchema)` to create a new message.
 */
export const NetworkConfigurationSchema: GenMessage<NetworkConfiguration> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 20);

/**
 * Network emulation parameters.
 *
 * @generated from message google.devtools.testing.v1.TrafficRule
 */
export type TrafficRule = Message<"google.devtools.testing.v1.TrafficRule"> & {
  /**
   * Packet delay, must be >= 0.
   *
   * @generated from field: google.protobuf.Duration delay = 1;
   */
  delay?: Duration;

  /**
   * Packet loss ratio (0.0 - 1.0).
   *
   * @generated from field: float packet_loss_ratio = 2;
   */
  packetLossRatio: number;

  /**
   * Packet duplication ratio (0.0 - 1.0).
   *
   * @generated from field: float packet_duplication_ratio = 3;
   */
  packetDuplicationRatio: number;

  /**
   * Bandwidth in kbits/second.
   *
   * @generated from field: float bandwidth = 4;
   */
  bandwidth: number;

  /**
   * Burst size in kbits.
   *
   * @generated from field: float burst = 5;
   */
  burst: number;
};

/**
 * Describes the message google.devtools.testing.v1.TrafficRule.
 * Use `create(TrafficRuleSchema)` to create a new message.
 */
export const TrafficRuleSchema: GenMessage<TrafficRule> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 21);

/**
 * The currently provided software environment on the devices under test.
 *
 * @generated from message google.devtools.testing.v1.ProvidedSoftwareCatalog
 */
export type ProvidedSoftwareCatalog = Message<"google.devtools.testing.v1.ProvidedSoftwareCatalog"> & {
  /**
   * Deprecated: Use AndroidX Test Orchestrator going forward.
   *
   * A string representing the current version of Android Test Orchestrator
   * that is used in the environment. The package is available at
   * https://maven.google.com/web/index.html#com.android.support.test:orchestrator.
   *
   * @generated from field: string orchestrator_version = 1 [deprecated = true];
   * @deprecated
   */
  orchestratorVersion: string;

  /**
   * A string representing the current version of AndroidX Test Orchestrator
   * that is used in the environment. The package is available at
   * https://maven.google.com/web/index.html#androidx.test:orchestrator.
   *
   * @generated from field: string androidx_orchestrator_version = 2;
   */
  androidxOrchestratorVersion: string;
};

/**
 * Describes the message google.devtools.testing.v1.ProvidedSoftwareCatalog.
 * Use `create(ProvidedSoftwareCatalogSchema)` to create a new message.
 */
export const ProvidedSoftwareCatalogSchema: GenMessage<ProvidedSoftwareCatalog> = /*@__PURE__*/
  messageDesc(file_google_devtools_testing_v1_test_environment_discovery, 22);

/**
 * Whether the device is physical or virtual.
 *
 * @generated from enum google.devtools.testing.v1.DeviceForm
 */
export enum DeviceForm {
  /**
   * Do not use.  For proto versioning only.
   *
   * @generated from enum value: DEVICE_FORM_UNSPECIFIED = 0;
   */
  DEVICE_FORM_UNSPECIFIED = 0,

  /**
   * Android virtual device using Compute Engine native virtualization. Firebase
   * Test Lab only.
   *
   * @generated from enum value: VIRTUAL = 1;
   */
  VIRTUAL = 1,

  /**
   * Actual hardware.
   *
   * @generated from enum value: PHYSICAL = 2;
   */
  PHYSICAL = 2,

  /**
   * Android virtual device using emulator in nested virtualization. Equivalent
   * to Android Studio.
   *
   * @generated from enum value: EMULATOR = 3;
   */
  EMULATOR = 3,
}

/**
 * Describes the enum google.devtools.testing.v1.DeviceForm.
 */
export const DeviceFormSchema: GenEnum<DeviceForm> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_environment_discovery, 0);

/**
 * The form factor of a device.
 *
 * @generated from enum google.devtools.testing.v1.DeviceFormFactor
 */
export enum DeviceFormFactor {
  /**
   * Do not use. For proto versioning only.
   *
   * @generated from enum value: DEVICE_FORM_FACTOR_UNSPECIFIED = 0;
   */
  DEVICE_FORM_FACTOR_UNSPECIFIED = 0,

  /**
   * This device has the shape of a phone.
   *
   * @generated from enum value: PHONE = 1;
   */
  PHONE = 1,

  /**
   * This device has the shape of a tablet.
   *
   * @generated from enum value: TABLET = 2;
   */
  TABLET = 2,

  /**
   * This device has the shape of a watch or other wearable.
   *
   * @generated from enum value: WEARABLE = 3;
   */
  WEARABLE = 3,
}

/**
 * Describes the enum google.devtools.testing.v1.DeviceFormFactor.
 */
export const DeviceFormFactorSchema: GenEnum<DeviceFormFactor> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_environment_discovery, 1);

/**
 * Capacity based on the number of online devices in the lab.
 *
 * Important: device capacity does not directly reflect the length of the
 * queue at a moment in time. It does not take into account current traffic or
 * the state of the devices.
 *
 * For physical devices, the number is the average of online devices in the last
 * 30 days.
 *
 * @generated from enum google.devtools.testing.v1.DeviceCapacity
 */
export enum DeviceCapacity {
  /**
   * The value of device capacity is unknown or unset.
   *
   * @generated from enum value: DEVICE_CAPACITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Devices that are high in capacity (The lab has a large number of these
   * devices).
   *
   * These devices are generally suggested for running a large number of
   * simultaneous tests (e.g. more than 100 tests).
   *
   * Please note that high capacity devices do not guarantee short wait times
   * due to several factors:
   * 1. Traffic (how heavily they are used at any given moment)
   * 2. High capacity devices are prioritized for certain usages, which may
   * cause user tests to be slower than selecting other similar device types.
   *
   * @generated from enum value: DEVICE_CAPACITY_HIGH = 1;
   */
  HIGH = 1,

  /**
   * Devices that are medium in capacity (The lab has a decent number of these
   * devices, though not as many as high capacity devices).
   *
   * These devices are suitable for fewer test runs (e.g. fewer than 100 tests)
   * and only for low shard counts (e.g. less than 10 shards).
   *
   * @generated from enum value: DEVICE_CAPACITY_MEDIUM = 2;
   */
  MEDIUM = 2,

  /**
   * Devices that are low in capacity (The lab has a small number of these
   * devices).
   *
   * These devices may be used if users need to test on this specific device
   * model and version. Please note that due to low capacity, the tests may take
   * much longer to finish, especially if a large number of tests are invoked at
   * once. These devices are not suitable for test sharding.
   *
   * @generated from enum value: DEVICE_CAPACITY_LOW = 3;
   */
  LOW = 3,

  /**
   * Devices that are completely missing from the lab.
   *
   * These devices are unavailable either temporarily or permanently and should
   * not be requested. If the device is also marked as deprecated, this state
   * is very likely permanent.
   *
   * @generated from enum value: DEVICE_CAPACITY_NONE = 4;
   */
  NONE = 4,
}

/**
 * Describes the enum google.devtools.testing.v1.DeviceCapacity.
 */
export const DeviceCapacitySchema: GenEnum<DeviceCapacity> = /*@__PURE__*/
  enumDesc(file_google_devtools_testing_v1_test_environment_discovery, 2);

/**
 * Service for discovering environments supported by the TestExecutionService.
 *
 * Over time the TestService may add or remove devices or configuration options
 * (e.g., when new devices and APIs are released).  Clients should check here
 * periodically to discover what options are supported.
 *
 * It defines the following resource model:
 *
 * - The API a collection of [TestEnvironmentCatalog]
 *   [google.devtools.test.v1.TestEnvironmentCatalog] resources, named
 *   `testEnvironmentCatalog/*`
 *
 * - Each TestEnvironmentCatalog resource describes a set of supported
 *   environments.
 *
 * - An [AndroidDeviceCatalog][google.devtools.test.v1.AndroidDeviceCatalog]
 *   describes supported Android devices. It contains lists of supported
 *   [AndroidModels][google.devtools.test.v1.AndroidModel] and
 *   [AndroidVersions][google.devtools.test.v1.AndroidVersion] along with a
 *   [AndroidRuntimeConfiguration][google.devtools.test.v1.AndroidRuntimeConfiguration].
 *   Each AndroidModel contains a list of Versions it supports. All
 *   models support all locales and orientations described by the
 *   AndroidRuntimeConfiguration
 *
 * - An [IosDeviceCatalog][google.devtools.test.v1.IosDeviceCatalog]
 *   describes supported iOS devices. It contains lists of supported
 *   [IosModels][google.devtools.test.v1.IosModel] and
 *   [IosVersions][google.devtools.test.v1.IosVersion] along with a
 *   [IosRuntimeConfiguration][google.devtools.test.v1.IosRuntimeConfiguration].
 *   Each IosModel contains a list of Versions it supports. All
 *   models support all locales and orientations described by the
 *   IosRuntimeConfiguration.
 *
 * @generated from service google.devtools.testing.v1.TestEnvironmentDiscoveryService
 */
export const TestEnvironmentDiscoveryService: GenService<{
  /**
   * Gets the catalog of supported test environments.
   *
   * May return any of the following canonical error codes:
   *
   * - INVALID_ARGUMENT - if the request is malformed
   * - NOT_FOUND - if the environment type does not exist
   * - INTERNAL - if an internal error occurred
   *
   * @generated from rpc google.devtools.testing.v1.TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog
   */
  getTestEnvironmentCatalog: {
    methodKind: "unary";
    input: typeof GetTestEnvironmentCatalogRequestSchema;
    output: typeof TestEnvironmentCatalogSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_testing_v1_test_environment_discovery, 0);

