// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/resultstore/v2/test_suite.proto (package google.devtools.resultstore.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Property, Timing } from "./common_pb";
import { file_google_devtools_resultstore_v2_common } from "./common_pb";
import type { File } from "./file_pb";
import { file_google_devtools_resultstore_v2_file } from "./file_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/resultstore/v2/test_suite.proto.
 */
export const file_google_devtools_resultstore_v2_test_suite: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvZGV2dG9vbHMvcmVzdWx0c3RvcmUvdjIvdGVzdF9zdWl0ZS5wcm90bxIeZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyIvkCCglUZXN0U3VpdGUSEgoKc3VpdGVfbmFtZRgBIAEoCRIzCgV0ZXN0cxgCIAMoCzIkLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UZXN0Ej0KCGZhaWx1cmVzGAMgAygLMisuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRlc3RGYWlsdXJlEjkKBmVycm9ycxgEIAMoCzIpLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UZXN0RXJyb3ISNgoGdGltaW5nGAYgASgLMiYuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRpbWluZxI8Cgpwcm9wZXJ0aWVzGAcgAygLMiguZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlByb3BlcnR5EjMKBWZpbGVzGAggAygLMiQuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkZpbGUikwEKBFRlc3QSPQoJdGVzdF9jYXNlGAEgASgLMiguZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRlc3RDYXNlSAASPwoKdGVzdF9zdWl0ZRgCIAEoCzIpLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UZXN0U3VpdGVIAEILCgl0ZXN0X3R5cGUiwAQKCFRlc3RDYXNlEhEKCWNhc2VfbmFtZRgBIAEoCRISCgpjbGFzc19uYW1lGAIgASgJEj8KBnJlc3VsdBgDIAEoDjIvLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UZXN0Q2FzZS5SZXN1bHQSPQoIZmFpbHVyZXMYBCADKAsyKy5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuVGVzdEZhaWx1cmUSOQoGZXJyb3JzGAUgAygLMikuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRlc3RFcnJvchI2CgZ0aW1pbmcYByABKAsyJi5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuVGltaW5nEjwKCnByb3BlcnRpZXMYCCADKAsyKC5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuUHJvcGVydHkSMwoFZmlsZXMYCSADKAsyJC5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuRmlsZRIUCgxyZXRyeV9udW1iZXIYCiABKAUSFQoNcmVwZWF0X251bWJlchgLIAEoBSJ6CgZSZXN1bHQSFgoSUkVTVUxUX1VOU1BFQ0lGSUVEEAASDQoJQ09NUExFVEVEEAESDwoLSU5URVJSVVBURUQQAhINCglDQU5DRUxMRUQQAxIMCghGSUxURVJFRBAEEgsKB1NLSVBQRUQQBRIOCgpTVVBQUkVTU0VEEAYidQoLVGVzdEZhaWx1cmUSFwoPZmFpbHVyZV9tZXNzYWdlGAEgASgJEhYKDmV4Y2VwdGlvbl90eXBlGAIgASgJEhMKC3N0YWNrX3RyYWNlGAMgASgJEhAKCGV4cGVjdGVkGAQgAygJEg4KBmFjdHVhbBgFIAMoCSJPCglUZXN0RXJyb3ISFQoNZXJyb3JfbWVzc2FnZRgBIAEoCRIWCg5leGNlcHRpb25fdHlwZRgCIAEoCRITCgtzdGFja190cmFjZRgDIAEoCUKBAQoiY29tLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52MkIOVGVzdFN1aXRlUHJvdG9QAVpJZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9yZXN1bHRzdG9yZS92MjtyZXN1bHRzdG9yZWIGcHJvdG8z", [file_google_devtools_resultstore_v2_common, file_google_devtools_resultstore_v2_file]);

/**
 * The result of running a test suite, as reported in a <testsuite> element of
 * an XML log.
 *
 * @generated from message google.devtools.resultstore.v2.TestSuite
 */
export type TestSuite = Message<"google.devtools.resultstore.v2.TestSuite"> & {
  /**
   * The full name of this suite, as reported in the name attribute. For Java
   * tests, this is normally the fully qualified class name. Eg.
   * "com.google.common.hash.BloomFilterTest".
   *
   * @generated from field: string suite_name = 1;
   */
  suiteName: string;

  /**
   * The results of the test cases and test suites contained in this suite,
   * as reported in the <testcase> and <testsuite> elements contained within
   * this <testsuite>.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Test tests = 2;
   */
  tests: Test[];

  /**
   * Failures reported in <failure> elements within this <testsuite>.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.TestFailure failures = 3;
   */
  failures: TestFailure[];

  /**
   * Errors reported in <error> elements within this <testsuite>.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.TestError errors = 4;
   */
  errors: TestError[];

  /**
   * The timing for the entire TestSuite, as reported by the time attribute.
   *
   * @generated from field: google.devtools.resultstore.v2.Timing timing = 6;
   */
  timing?: Timing;

  /**
   * Arbitrary name-value pairs, as reported in custom attributes or in a
   * <properties> element within this <testsuite>. Multiple properties are
   * allowed with the same key. Properties will be returned in lexicographical
   * order by key.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Property properties = 7;
   */
  properties: Property[];

  /**
   * Files produced by this test suite, as reported by undeclared output
   * annotations.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.File files = 8;
   */
  files: File[];
};

/**
 * Describes the message google.devtools.resultstore.v2.TestSuite.
 * Use `create(TestSuiteSchema)` to create a new message.
 */
export const TestSuiteSchema: GenMessage<TestSuite> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_test_suite, 0);

/**
 * The result of running a test case or test suite. JUnit3 TestDecorators are
 * represented as a TestSuite with a single test.
 *
 * @generated from message google.devtools.resultstore.v2.Test
 */
export type Test = Message<"google.devtools.resultstore.v2.Test"> & {
  /**
   * Either a TestCase of a TestSuite
   *
   * @generated from oneof google.devtools.resultstore.v2.Test.test_type
   */
  testType: {
    /**
     * When this contains just a single TestCase
     *
     * @generated from field: google.devtools.resultstore.v2.TestCase test_case = 1;
     */
    value: TestCase;
    case: "testCase";
  } | {
    /**
     * When this contains a TestSuite of test cases.
     *
     * @generated from field: google.devtools.resultstore.v2.TestSuite test_suite = 2;
     */
    value: TestSuite;
    case: "testSuite";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.resultstore.v2.Test.
 * Use `create(TestSchema)` to create a new message.
 */
export const TestSchema: GenMessage<Test> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_test_suite, 1);

/**
 * The result of running a test case, as reported in a <testcase> element of
 * an XML log.
 *
 * @generated from message google.devtools.resultstore.v2.TestCase
 */
export type TestCase = Message<"google.devtools.resultstore.v2.TestCase"> & {
  /**
   * The name of the test case, as reported in the name attribute. For Java,
   * this is normally the method name. Eg. "testBasic".
   *
   * @generated from field: string case_name = 1;
   */
  caseName: string;

  /**
   * The name of the class in which the test case was defined, as reported in
   * the classname attribute. For Java, this is normally the fully qualified
   * class name. Eg. "com.google.common.hash.BloomFilterTest".
   *
   * @generated from field: string class_name = 2;
   */
  className: string;

  /**
   * An enum reported in the result attribute that is used in conjunction with
   * failures and errors below to report the outcome.
   *
   * @generated from field: google.devtools.resultstore.v2.TestCase.Result result = 3;
   */
  result: TestCase_Result;

  /**
   * Failures reported in <failure> elements within this <testcase>.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.TestFailure failures = 4;
   */
  failures: TestFailure[];

  /**
   * Errors reported in <error> elements within this <testcase>.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.TestError errors = 5;
   */
  errors: TestError[];

  /**
   * The timing for the TestCase, as reported by the time attribute.
   *
   * @generated from field: google.devtools.resultstore.v2.Timing timing = 7;
   */
  timing?: Timing;

  /**
   * Arbitrary name-value pairs, as reported in custom attributes or in a
   * <properties> element within this <testcase>. Multiple properties are
   * allowed with the same key. Properties will be returned in lexicographical
   * order by key.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Property properties = 8;
   */
  properties: Property[];

  /**
   * Files produced by this test case, as reported by undeclared output
   * annotations.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.File files = 9;
   */
  files: File[];

  /**
   * The 0-indexed retry number of the test case. A value of `0` may indicate
   * either that this is the first in a series of retries, or that no retries
   * were requested.
   *
   * @generated from field: int32 retry_number = 10;
   */
  retryNumber: number;

  /**
   * The 0-indexed repeat number of the test case. A value of `0` may indicate
   * either that this is the first in a series of repeats, or that no repeats
   * were requested.
   *
   * @generated from field: int32 repeat_number = 11;
   */
  repeatNumber: number;
};

/**
 * Describes the message google.devtools.resultstore.v2.TestCase.
 * Use `create(TestCaseSchema)` to create a new message.
 */
export const TestCaseSchema: GenMessage<TestCase> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_test_suite, 2);

/**
 * The result of running a test case.
 *
 * @generated from enum google.devtools.resultstore.v2.TestCase.Result
 */
export enum TestCase_Result {
  /**
   * The implicit default enum value. Do not use.
   *
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  RESULT_UNSPECIFIED = 0,

  /**
   * Test case ran to completion. Look for failures or errors to determine
   * whether it passed, failed, or errored.
   *
   * @generated from enum value: COMPLETED = 1;
   */
  COMPLETED = 1,

  /**
   * Test case started but did not complete because the test harness received
   * a signal and decided to stop running tests.
   *
   * @generated from enum value: INTERRUPTED = 2;
   */
  INTERRUPTED = 2,

  /**
   * Test case was not started because the test harness received a SIGINT or
   * timed out.
   *
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * Test case was not run because the user or process running the test
   * specified a filter that excluded this test case.
   *
   * @generated from enum value: FILTERED = 4;
   */
  FILTERED = 4,

  /**
   * Test case was not run to completion because the test case decided it
   * should not be run (eg. due to a failed assumption in a JUnit4 test).
   * Per-test setup or tear-down may or may not have run.
   *
   * @generated from enum value: SKIPPED = 5;
   */
  SKIPPED = 5,

  /**
   * The test framework did not run the test case because it was labeled as
   * suppressed.  Eg. if someone temporarily disables a failing test.
   *
   * @generated from enum value: SUPPRESSED = 6;
   */
  SUPPRESSED = 6,
}

/**
 * Describes the enum google.devtools.resultstore.v2.TestCase.Result.
 */
export const TestCase_ResultSchema: GenEnum<TestCase_Result> = /*@__PURE__*/
  enumDesc(file_google_devtools_resultstore_v2_test_suite, 2, 0);

/**
 * Represents a violated assertion, as reported in a <failure> element within a
 * <testcase>. Some languages allow assertions to be made without stopping the
 * test case when they're violated, leading to multiple TestFailures. For Java,
 * multiple TestFailures are used to represent a chained exception.
 *
 * @generated from message google.devtools.resultstore.v2.TestFailure
 */
export type TestFailure = Message<"google.devtools.resultstore.v2.TestFailure"> & {
  /**
   * The exception message reported in the message attribute. Typically short,
   * but may be multi-line. Eg. "Expected 'foo' but was 'bar'".
   *
   * @generated from field: string failure_message = 1;
   */
  failureMessage: string;

  /**
   * The type of the exception being thrown, reported in the type attribute.
   * Eg: "org.junit.ComparisonFailure"
   *
   * @generated from field: string exception_type = 2;
   */
  exceptionType: string;

  /**
   * The stack trace reported as the content of the <failure> element, often in
   * a CDATA block. This contains one line for each stack frame, each including
   * a method/function name, a class/file name, and a line number. Most recent
   * call is usually first, but not for Python stack traces. May contain the
   * exception_type and message.
   *
   * @generated from field: string stack_trace = 3;
   */
  stackTrace: string;

  /**
   * The expected values.
   *
   * These values can be diffed against the actual values. Often, there is just
   * one actual and one expected value. If there is more than one, they should
   * be compared as an unordered collection.
   *
   * @generated from field: repeated string expected = 4;
   */
  expected: string[];

  /**
   * The actual values.
   *
   * These values can be diffed against the expected values. Often, there is
   * just one actual and one expected value. If there is more than one, they
   * should be compared as an unordered collection.
   *
   * @generated from field: repeated string actual = 5;
   */
  actual: string[];
};

/**
 * Describes the message google.devtools.resultstore.v2.TestFailure.
 * Use `create(TestFailureSchema)` to create a new message.
 */
export const TestFailureSchema: GenMessage<TestFailure> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_test_suite, 3);

/**
 * Represents an exception that prevented a test case from completing, as
 * reported in an <error> element within a <testcase>. For Java, multiple
 * TestErrors are used to represent a chained exception.
 *
 * @generated from message google.devtools.resultstore.v2.TestError
 */
export type TestError = Message<"google.devtools.resultstore.v2.TestError"> & {
  /**
   * The exception message, as reported in the message attribute. Typically
   * short, but may be multi-line. Eg. "argument cannot be null".
   *
   * @generated from field: string error_message = 1;
   */
  errorMessage: string;

  /**
   * The type of the exception being thrown, reported in the type attribute.
   * For Java, this is a fully qualified Throwable class name.
   * Eg: "java.lang.IllegalArgumentException"
   *
   * @generated from field: string exception_type = 2;
   */
  exceptionType: string;

  /**
   * The stack trace reported as the content of the <error> element, often in
   * a CDATA block. This contains one line for each stack frame, each including
   * a method/function name, a class/file name, and a line number. Most recent
   * call is usually first, but not for Python stack traces. May contain the
   * exception_type and message.
   *
   * @generated from field: string stack_trace = 3;
   */
  stackTrace: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.TestError.
 * Use `create(TestErrorSchema)` to create a new message.
 */
export const TestErrorSchema: GenMessage<TestError> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_test_suite, 4);

