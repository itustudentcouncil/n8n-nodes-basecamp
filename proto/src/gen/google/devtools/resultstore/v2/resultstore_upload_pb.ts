// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/resultstore/v2/resultstore_upload.proto (package google.devtools.resultstore.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Action, ActionSchema } from "./action_pb";
import { file_google_devtools_resultstore_v2_action } from "./action_pb";
import type { Configuration, ConfigurationSchema } from "./configuration_pb";
import { file_google_devtools_resultstore_v2_configuration } from "./configuration_pb";
import type { ConfiguredTarget, ConfiguredTarget_Id, ConfiguredTargetSchema } from "./configured_target_pb";
import { file_google_devtools_resultstore_v2_configured_target } from "./configured_target_pb";
import type { FileSet, FileSetSchema } from "./file_set_pb";
import { file_google_devtools_resultstore_v2_file_set } from "./file_set_pb";
import type { Invocation, Invocation_Id, InvocationSchema } from "./invocation_pb";
import { file_google_devtools_resultstore_v2_invocation } from "./invocation_pb";
import type { Target, Target_Id, TargetSchema } from "./target_pb";
import { file_google_devtools_resultstore_v2_target } from "./target_pb";
import type { UploadMetadataSchema } from "./upload_metadata_pb";
import { file_google_devtools_resultstore_v2_upload_metadata } from "./upload_metadata_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/resultstore/v2/resultstore_upload.proto.
 */
export const file_google_devtools_resultstore_v2_resultstore_upload: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_devtools_resultstore_v2_action, file_google_devtools_resultstore_v2_configuration, file_google_devtools_resultstore_v2_configured_target, file_google_devtools_resultstore_v2_file_set, file_google_devtools_resultstore_v2_invocation, file_google_devtools_resultstore_v2_target, file_google_devtools_resultstore_v2_upload_metadata, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Request passed into CreateInvocation
 *
 * @generated from message google.devtools.resultstore.v2.CreateInvocationRequest
 */
export type CreateInvocationRequest = Message<"google.devtools.resultstore.v2.CreateInvocationRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID. If set, invocation_id must also be provided.
   * Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * The invocation ID. It is optional, but strongly recommended.
   *
   * If left empty then a new unique ID will be assigned by the server. If
   * populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
   * are allowed too.
   *
   * @generated from field: string invocation_id = 2;
   */
  invocationId: string;

  /**
   * Required. The invocation to create.  Its name field will be ignored, since
   * the name will be derived from the id field above and assigned by the
   * server.
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation invocation = 3;
   */
  invocation?: Invocation;

  /**
   * This is a token to authorize upload access to this invocation. It must be
   * set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
   * CreateInvocation, all other upload RPCs for that Invocation and any of its
   * child resources must also include the exact same token, or they will be
   * rejected. The generated token should be unique to this invocation, and it
   * should be kept secret.
   *
   * The purpose of this field is to prevent other users and tools from
   * clobbering your upload intentionally or accidentally. The standard way of
   * using this token is to create a second v4 UUID when the invocation_id is
   * created, and storing them together during the upload. Essentially, this is
   * a "password" to the invocation.
   *
   * @generated from field: string authorization_token = 4;
   */
  authorizationToken: string;

  /**
   * By default, Invocations are auto-finalized if they are not modified for 24
   * hours. If you need auto-finalize to happen sooner, set this field to the
   * time you'd like auto-finalize to occur.
   *
   * @generated from field: google.protobuf.Timestamp auto_finalize_time = 6;
   */
  autoFinalizeTime?: Timestamp;

  /**
   * Client provided unique token for batch upload to ensure data integrity and
   * to provide a way to resume batch upload in case of a distributed failure on
   * the client side. The standard uploading client is presumed to have many
   * machines uploading to ResultStore, and that any given machine could process
   * any given Invocation at any time. This field is used to coordinate between
   * the client's machines, resolve concurrency issues, and enforce "exactly
   * once" semantics on each batch within the upload.
   *
   * The typical usage of the resume_token is that it should contain a "key"
   * indicating to the client where it is in the upload process, so that the
   * client can use it to resume the upload by reconstructing the state of
   * upload from the point where it was interrupted.
   *
   * If this matches the previously uploaded resume_token, then this request
   * will silently do nothing, making CreateInvocation idempotent.
   * If this token is provided, all further upload RPCs must be done through
   * UploadBatch. This token must not be combined with request_id.
   * Must be web safe Base64 encoded bytes.
   *
   * @generated from field: string initial_resume_token = 7;
   */
  initialResumeToken: string;

  /**
   * Client-specific data used to resume batch upload if an error occurs and
   * retry is needed. This serves a role closely related to resume_token, as
   * both fields may be used to provide state required to restore a Batch
   * Upload, but they differ in two important aspects:
   *  - it is not compared to previous values, and as such does not provide
   *    concurrency control;
   *  - it allows for a larger payload, since the contents are never
   *    inspected/compared;
   * The size of the message must be within 1 MiB. Too large requests will be
   * rejected.
   *
   * @generated from field: bytes uploader_state = 8;
   */
  uploaderState: Uint8Array;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateInvocationRequest.
 * Use `create(CreateInvocationRequestSchema)` to create a new message.
 */
export const CreateInvocationRequestSchema: GenMessage<CreateInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 0);

/**
 * Request passed into UpdateInvocation
 *
 * @generated from message google.devtools.resultstore.v2.UpdateInvocationRequest
 */
export type UpdateInvocationRequest = Message<"google.devtools.resultstore.v2.UpdateInvocationRequest"> & {
  /**
   * Contains the name and the fields of the invocation to be updated.  The
   * name format must be: invocations/${INVOCATION_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation invocation = 3;
   */
  invocation?: Invocation;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateInvocationRequest.
 * Use `create(UpdateInvocationRequestSchema)` to create a new message.
 */
export const UpdateInvocationRequestSchema: GenMessage<UpdateInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 1);

/**
 * Request passed into MergeInvocation
 *
 * @generated from message google.devtools.resultstore.v2.MergeInvocationRequest
 */
export type MergeInvocationRequest = Message<"google.devtools.resultstore.v2.MergeInvocationRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Contains the name and the fields of the invocation to be merged.  The
   * name format must be: invocations/${INVOCATION_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation invocation = 3;
   */
  invocation?: Invocation;

  /**
   * Indicates which fields to merge.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.MergeInvocationRequest.
 * Use `create(MergeInvocationRequestSchema)` to create a new message.
 */
export const MergeInvocationRequestSchema: GenMessage<MergeInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 2);

/**
 * Request passed into TouchInvocation
 *
 * @generated from message google.devtools.resultstore.v2.TouchInvocationRequest
 */
export type TouchInvocationRequest = Message<"google.devtools.resultstore.v2.TouchInvocationRequest"> & {
  /**
   * Required. The name of the invocation.  Its format must be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 2;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.TouchInvocationRequest.
 * Use `create(TouchInvocationRequestSchema)` to create a new message.
 */
export const TouchInvocationRequestSchema: GenMessage<TouchInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 3);

/**
 * Response returned from TouchInvocation
 *
 * @generated from message google.devtools.resultstore.v2.TouchInvocationResponse
 */
export type TouchInvocationResponse = Message<"google.devtools.resultstore.v2.TouchInvocationResponse"> & {
  /**
   * The name of the invocation.  Its format will be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the Invocation.
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation.Id id = 2;
   */
  id?: Invocation_Id;
};

/**
 * Describes the message google.devtools.resultstore.v2.TouchInvocationResponse.
 * Use `create(TouchInvocationResponseSchema)` to create a new message.
 */
export const TouchInvocationResponseSchema: GenMessage<TouchInvocationResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 4);

/**
 * Request passed into DeleteInvocation
 *
 * @generated from message google.devtools.resultstore.v2.DeleteInvocationRequest
 */
export type DeleteInvocationRequest = Message<"google.devtools.resultstore.v2.DeleteInvocationRequest"> & {
  /**
   * Required. The name of the invocation.  Its format must be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.DeleteInvocationRequest.
 * Use `create(DeleteInvocationRequestSchema)` to create a new message.
 */
export const DeleteInvocationRequestSchema: GenMessage<DeleteInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 5);

/**
 * Request passed into FinalizeInvocation
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeInvocationRequest
 */
export type FinalizeInvocationRequest = Message<"google.devtools.resultstore.v2.FinalizeInvocationRequest"> & {
  /**
   * Required. The name of the invocation.  Its format must be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 3;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeInvocationRequest.
 * Use `create(FinalizeInvocationRequestSchema)` to create a new message.
 */
export const FinalizeInvocationRequestSchema: GenMessage<FinalizeInvocationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 6);

/**
 * Response returned from FinalizeInvocation
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeInvocationResponse
 */
export type FinalizeInvocationResponse = Message<"google.devtools.resultstore.v2.FinalizeInvocationResponse"> & {
  /**
   * The name of the invocation.  Its format will be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the Invocation.
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation.Id id = 2;
   */
  id?: Invocation_Id;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeInvocationResponse.
 * Use `create(FinalizeInvocationResponseSchema)` to create a new message.
 */
export const FinalizeInvocationResponseSchema: GenMessage<FinalizeInvocationResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 7);

/**
 * Request passed into CreateTarget
 *
 * @generated from message google.devtools.resultstore.v2.CreateTargetRequest
 */
export type CreateTargetRequest = Message<"google.devtools.resultstore.v2.CreateTargetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Required. The name of the parent invocation in which the target is created.
   * Its format must be invocations/${INVOCATION_ID}
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The target identifier.  It can be any string up to 1024 Unicode characters
   * long except for the reserved id '-'.
   *
   * @generated from field: string target_id = 3;
   */
  targetId: string;

  /**
   * Required. The target to create.  Its name field will be ignored, since the
   * name will be derived from the id field above and assigned by the server.
   *
   * @generated from field: google.devtools.resultstore.v2.Target target = 4;
   */
  target?: Target;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateTargetRequest.
 * Use `create(CreateTargetRequestSchema)` to create a new message.
 */
export const CreateTargetRequestSchema: GenMessage<CreateTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 8);

/**
 * Request passed into UpdateTarget
 *
 * @generated from message google.devtools.resultstore.v2.UpdateTargetRequest
 */
export type UpdateTargetRequest = Message<"google.devtools.resultstore.v2.UpdateTargetRequest"> & {
  /**
   * Contains the name and the fields of the target to be updated.  The name
   * format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
   *
   * @generated from field: google.devtools.resultstore.v2.Target target = 3;
   */
  target?: Target;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Update operation will become a Create operation if the
   * Target is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateTargetRequest.
 * Use `create(UpdateTargetRequestSchema)` to create a new message.
 */
export const UpdateTargetRequestSchema: GenMessage<UpdateTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 9);

/**
 * Request passed into MergeTarget
 *
 * @generated from message google.devtools.resultstore.v2.MergeTargetRequest
 */
export type MergeTargetRequest = Message<"google.devtools.resultstore.v2.MergeTargetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Contains the name and the fields of the target to be merged.  The name
   * format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
   *
   * @generated from field: google.devtools.resultstore.v2.Target target = 3;
   */
  target?: Target;

  /**
   * Indicates which fields to merge.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Merge operation will become a Create operation if the
   * Target is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.MergeTargetRequest.
 * Use `create(MergeTargetRequestSchema)` to create a new message.
 */
export const MergeTargetRequestSchema: GenMessage<MergeTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 10);

/**
 * Request passed into FinalizeTarget
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeTargetRequest
 */
export type FinalizeTargetRequest = Message<"google.devtools.resultstore.v2.FinalizeTargetRequest"> & {
  /**
   * Required. The name of the target.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 3;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeTargetRequest.
 * Use `create(FinalizeTargetRequestSchema)` to create a new message.
 */
export const FinalizeTargetRequestSchema: GenMessage<FinalizeTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 11);

/**
 * Response returned from FinalizeTarget
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeTargetResponse
 */
export type FinalizeTargetResponse = Message<"google.devtools.resultstore.v2.FinalizeTargetResponse"> & {
  /**
   * The name of the target.  Its format will be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the Target.
   *
   * @generated from field: google.devtools.resultstore.v2.Target.Id id = 2;
   */
  id?: Target_Id;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeTargetResponse.
 * Use `create(FinalizeTargetResponseSchema)` to create a new message.
 */
export const FinalizeTargetResponseSchema: GenMessage<FinalizeTargetResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 12);

/**
 * Request passed into CreateConfiguredTarget
 *
 * @generated from message google.devtools.resultstore.v2.CreateConfiguredTargetRequest
 */
export type CreateConfiguredTargetRequest = Message<"google.devtools.resultstore.v2.CreateConfiguredTargetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Required. The name of the parent target in which the configured target is
   * created. Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The configuration identifier. This must match the ID of an existing
   * Configuration under this Invocation. Cannot be the reserved id '-'.
   *
   * @generated from field: string config_id = 3;
   */
  configId: string;

  /**
   * Required. The configured target to create. Its name field will be ignored,
   * since the name will be derived from the id field above and assigned by the
   * server.
   *
   * @generated from field: google.devtools.resultstore.v2.ConfiguredTarget configured_target = 4;
   */
  configuredTarget?: ConfiguredTarget;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateConfiguredTargetRequest.
 * Use `create(CreateConfiguredTargetRequestSchema)` to create a new message.
 */
export const CreateConfiguredTargetRequestSchema: GenMessage<CreateConfiguredTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 13);

/**
 * Request passed into UpdateConfiguredTarget
 *
 * @generated from message google.devtools.resultstore.v2.UpdateConfiguredTargetRequest
 */
export type UpdateConfiguredTargetRequest = Message<"google.devtools.resultstore.v2.UpdateConfiguredTargetRequest"> & {
  /**
   * Contains the name and the fields of the configured target to be updated.
   * The name format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.ConfiguredTarget configured_target = 3;
   */
  configuredTarget?: ConfiguredTarget;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Update operation will become a Create operation if the
   * ConfiguredTarget is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateConfiguredTargetRequest.
 * Use `create(UpdateConfiguredTargetRequestSchema)` to create a new message.
 */
export const UpdateConfiguredTargetRequestSchema: GenMessage<UpdateConfiguredTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 14);

/**
 * Request passed into MergeConfiguredTarget
 *
 * @generated from message google.devtools.resultstore.v2.MergeConfiguredTargetRequest
 */
export type MergeConfiguredTargetRequest = Message<"google.devtools.resultstore.v2.MergeConfiguredTargetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Contains the name and the fields of the configured target to be merged.
   * The name format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.ConfiguredTarget configured_target = 3;
   */
  configuredTarget?: ConfiguredTarget;

  /**
   * Indicates which fields to merge.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Merge operation will become a Create operation if the
   * ConfiguredTarget is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.MergeConfiguredTargetRequest.
 * Use `create(MergeConfiguredTargetRequestSchema)` to create a new message.
 */
export const MergeConfiguredTargetRequestSchema: GenMessage<MergeConfiguredTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 15);

/**
 * Request passed into FinalizeConfiguredTarget
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest
 */
export type FinalizeConfiguredTargetRequest = Message<"google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest"> & {
  /**
   * Required. The name of the configured target. Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 3;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest.
 * Use `create(FinalizeConfiguredTargetRequestSchema)` to create a new message.
 */
export const FinalizeConfiguredTargetRequestSchema: GenMessage<FinalizeConfiguredTargetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 16);

/**
 * Response returned from FinalizeConfiguredTarget
 *
 * @generated from message google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse
 */
export type FinalizeConfiguredTargetResponse = Message<"google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse"> & {
  /**
   * The name of the configured target. Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the ConfiguredTarget.
   *
   * @generated from field: google.devtools.resultstore.v2.ConfiguredTarget.Id id = 2;
   */
  id?: ConfiguredTarget_Id;
};

/**
 * Describes the message google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse.
 * Use `create(FinalizeConfiguredTargetResponseSchema)` to create a new message.
 */
export const FinalizeConfiguredTargetResponseSchema: GenMessage<FinalizeConfiguredTargetResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 17);

/**
 * Request passed into CreateAction
 *
 * @generated from message google.devtools.resultstore.v2.CreateActionRequest
 */
export type CreateActionRequest = Message<"google.devtools.resultstore.v2.CreateActionRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Required. The name of the parent configured target in which the action is
   * created. Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The action identifier. It can be any string of up to 512 alphanumeric
   * characters [a-zA-Z_-], except for the reserved id '-'.
   *
   * Recommended IDs for Test Actions:
   * "test": For a single test action.
   * "test_shard0_run0_attempt0" ... "test_shard9_run9_attempt9": For tests with
   *  shard/run/attempts.
   *
   * Recommended IDs for Build Actions:
   * "build": If you only have a single build action.
   *
   * @generated from field: string action_id = 3;
   */
  actionId: string;

  /**
   * Required. The action to create.  Its name field will be ignored, since the
   * name will be derived from the id field above and assigned by the server.
   *
   * @generated from field: google.devtools.resultstore.v2.Action action = 4;
   */
  action?: Action;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateActionRequest.
 * Use `create(CreateActionRequestSchema)` to create a new message.
 */
export const CreateActionRequestSchema: GenMessage<CreateActionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 18);

/**
 * Request passed into UpdateAction
 *
 * @generated from message google.devtools.resultstore.v2.UpdateActionRequest
 */
export type UpdateActionRequest = Message<"google.devtools.resultstore.v2.UpdateActionRequest"> & {
  /**
   * Contains the name and the fields of the action to be updated.  The
   * name format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.Action action = 3;
   */
  action?: Action;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Update operation will become a Create operation if the
   * Action is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateActionRequest.
 * Use `create(UpdateActionRequestSchema)` to create a new message.
 */
export const UpdateActionRequestSchema: GenMessage<UpdateActionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 19);

/**
 * Request passed into MergeAction
 *
 * @generated from message google.devtools.resultstore.v2.MergeActionRequest
 */
export type MergeActionRequest = Message<"google.devtools.resultstore.v2.MergeActionRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Contains the name and the fields of the action to be merged.  The
   * name format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.Action action = 3;
   */
  action?: Action;

  /**
   * Indicates which fields to merge.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Merge operation will become a Create operation if the
   * Action is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.MergeActionRequest.
 * Use `create(MergeActionRequestSchema)` to create a new message.
 */
export const MergeActionRequestSchema: GenMessage<MergeActionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 20);

/**
 * Request passed into CreateConfiguration
 *
 * @generated from message google.devtools.resultstore.v2.CreateConfigurationRequest
 */
export type CreateConfigurationRequest = Message<"google.devtools.resultstore.v2.CreateConfigurationRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Required. The name of the parent invocation in which the configuration is
   * created. Its format must be invocations/${INVOCATION_ID}
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The configuration identifier.  It can be any string of up to 512
   * alphanumeric characters [a-zA-Z_-], except for the reserved id '-'. The
   * configuration ID of "default" should be preferred for the default
   * configuration in a single-config invocation.
   *
   * @generated from field: string config_id = 3;
   */
  configId: string;

  /**
   * Required. The configuration to create. Its name field will be ignored,
   * since the name will be derived from the id field above and assigned by the
   * server.
   *
   * @generated from field: google.devtools.resultstore.v2.Configuration configuration = 4;
   */
  configuration?: Configuration;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateConfigurationRequest.
 * Use `create(CreateConfigurationRequestSchema)` to create a new message.
 */
export const CreateConfigurationRequestSchema: GenMessage<CreateConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 21);

/**
 * Request passed into UpdateConfiguration
 *
 * @generated from message google.devtools.resultstore.v2.UpdateConfigurationRequest
 */
export type UpdateConfigurationRequest = Message<"google.devtools.resultstore.v2.UpdateConfigurationRequest"> & {
  /**
   * Contains the name and fields of the configuration to be updated. The name
   * format must be:
   * invocations/${INVOCATION_ID}/configs/${CONFIG_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.Configuration configuration = 3;
   */
  configuration?: Configuration;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;

  /**
   * If true then the Update operation will become a Create operation if the
   * Configuration is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 6;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateConfigurationRequest.
 * Use `create(UpdateConfigurationRequestSchema)` to create a new message.
 */
export const UpdateConfigurationRequestSchema: GenMessage<UpdateConfigurationRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 22);

/**
 * Request passed into CreateFileSet
 *
 * @generated from message google.devtools.resultstore.v2.CreateFileSetRequest
 */
export type CreateFileSetRequest = Message<"google.devtools.resultstore.v2.CreateFileSetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Required. The name of the parent invocation in which the file set is
   * created. Its format must be invocations/${INVOCATION_ID}
   *
   * @generated from field: string parent = 2;
   */
  parent: string;

  /**
   * The file set identifier.  It can be any string of up to 512 alphanumeric
   * characters [a-zA-Z_-], except for the reserved id '-'.
   *
   * @generated from field: string file_set_id = 3;
   */
  fileSetId: string;

  /**
   * Required. The file set to create. Its name field will be ignored, since the
   * name will be derived from the id field above and assigned by the server.
   *
   * @generated from field: google.devtools.resultstore.v2.FileSet file_set = 4;
   */
  fileSet?: FileSet;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 5;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CreateFileSetRequest.
 * Use `create(CreateFileSetRequestSchema)` to create a new message.
 */
export const CreateFileSetRequestSchema: GenMessage<CreateFileSetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 23);

/**
 * Request passed into UpdateFileSet
 *
 * @generated from message google.devtools.resultstore.v2.UpdateFileSetRequest
 */
export type UpdateFileSetRequest = Message<"google.devtools.resultstore.v2.UpdateFileSetRequest"> & {
  /**
   * Contains the name and fields of the file set to be updated. The name format
   * must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.FileSet file_set = 1;
   */
  fileSet?: FileSet;

  /**
   * Indicates which fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 3;
   */
  authorizationToken: string;

  /**
   * If true then the Update operation will become a Create operation if the
   * FileSet is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 4;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.UpdateFileSetRequest.
 * Use `create(UpdateFileSetRequestSchema)` to create a new message.
 */
export const UpdateFileSetRequestSchema: GenMessage<UpdateFileSetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 24);

/**
 * Request passed into MergeFileSet
 *
 * @generated from message google.devtools.resultstore.v2.MergeFileSetRequest
 */
export type MergeFileSetRequest = Message<"google.devtools.resultstore.v2.MergeFileSetRequest"> & {
  /**
   * A unique identifier for this request. Must be set to a different value for
   * each request that affects a given resource (eg. a random UUID). Required
   * for the operation to be idempotent. This is achieved by ignoring this
   * request if the last successful operation on the resource had the same
   * request ID.  Restricted to 36 Unicode characters.
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * Contains the name and fields of the file set to be merged. The name
   * format must be:
   * invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   *
   * @generated from field: google.devtools.resultstore.v2.FileSet file_set = 2;
   */
  fileSet?: FileSet;

  /**
   * Indicates which fields to merge.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  /**
   * This is a token to authorize access to this invocation. It must be set to
   * the same value that was provided in the CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 4;
   */
  authorizationToken: string;

  /**
   * If true then the Merge operation will become a Create operation if the
   * FileSet is NOT_FOUND.
   *
   * @generated from field: bool create_if_not_found = 5;
   */
  createIfNotFound: boolean;
};

/**
 * Describes the message google.devtools.resultstore.v2.MergeFileSetRequest.
 * Use `create(MergeFileSetRequestSchema)` to create a new message.
 */
export const MergeFileSetRequestSchema: GenMessage<MergeFileSetRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 25);

/**
 * Request passed into UploadBatch
 *
 * @generated from message google.devtools.resultstore.v2.UploadBatchRequest
 */
export type UploadBatchRequest = Message<"google.devtools.resultstore.v2.UploadBatchRequest"> & {
  /**
   * Required. The name of the invocation being modified.
   * The name format must be: invocations/${INVOCATION_ID}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A UUID that must match the value provided in
   * CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 2;
   */
  authorizationToken: string;

  /**
   * Required. The token of this batch, that will be committed in this
   * UploadBatchRequest. If this matches the previously uploaded resume_token,
   * then this request will silently do nothing. See
   * CreateInvocationRequest.initial_resume_token for more information. Must be
   * web safe Base64 encoded bytes.
   *
   * @generated from field: string next_resume_token = 3;
   */
  nextResumeToken: string;

  /**
   * Required. The token of the previous batch that was committed in a
   * UploadBatchRequest. This will be checked after next_resume_token match is
   * checked. If this does not match the previously uploaded resume_token, a 409
   * Conflict (HTTPS) or ABORTED (gRPC ) error code indicating a concurrency
   * failure will be returned, and that the user should call
   * GetInvocationUploadMetadata to fetch the current resume_token to
   * reconstruct the state of the upload to resume it.
   * See CreateInvocationRequest.initial_resume_token for more information.
   * Must be web safe Base64 encoded bytes.
   *
   * @generated from field: string resume_token = 4;
   */
  resumeToken: string;

  /**
   * Client-specific data used to resume batch upload if an error occurs and
   * retry is needed. This serves a role closely related to resume_token, as
   * both fields may be used to provide state required to restore a Batch
   * Upload, but they differ in two important aspects:
   *  - it is not compared to previous values, and as such does not provide
   *    concurrency control;
   *  - it allows for a larger payload, since the contents are never
   *    inspected/compared;
   * The size of the message must be within 1 MiB. Too large requests will be
   * rejected.
   *
   * @generated from field: bytes uploader_state = 6;
   */
  uploaderState: Uint8Array;

  /**
   * The individual upload requests for this batch.
   * This field may be empty, allowing this RPC to be used like TouchInvocation.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.UploadRequest upload_requests = 5;
   */
  uploadRequests: UploadRequest[];
};

/**
 * Describes the message google.devtools.resultstore.v2.UploadBatchRequest.
 * Use `create(UploadBatchRequestSchema)` to create a new message.
 */
export const UploadBatchRequestSchema: GenMessage<UploadBatchRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 26);

/**
 * Response for UploadBatch
 *
 * @generated from message google.devtools.resultstore.v2.UploadBatchResponse
 */
export type UploadBatchResponse = Message<"google.devtools.resultstore.v2.UploadBatchResponse"> & {
};

/**
 * Describes the message google.devtools.resultstore.v2.UploadBatchResponse.
 * Use `create(UploadBatchResponseSchema)` to create a new message.
 */
export const UploadBatchResponseSchema: GenMessage<UploadBatchResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 27);

/**
 * The individual upload requests for this batch.
 *
 * @generated from message google.devtools.resultstore.v2.UploadRequest
 */
export type UploadRequest = Message<"google.devtools.resultstore.v2.UploadRequest"> & {
  /**
   * The resource ID components that identify the resource being uploaded.
   *
   * @generated from field: google.devtools.resultstore.v2.UploadRequest.Id id = 1;
   */
  id?: UploadRequest_Id;

  /**
   * The operation for the request (e.g. Create(), Update(), etc.)
   *
   * @generated from field: google.devtools.resultstore.v2.UploadRequest.UploadOperation upload_operation = 2;
   */
  uploadOperation: UploadRequest_UploadOperation;

  /**
   * Required for Update and Merge operations.
   * Ignored for Create and Finalize operations.
   * Masks the fields of the resource being uploaded. Provides support for a
   * more granular upload. FieldMasks are limited to certain fields and must
   * match one of the follow patterns, where * means any single field name.
   *
   * For Update Operations:
   *
   * Invocation: [*, status_attributes.*, timing.*, invocation_attributes.*,
   * workspace_info.*].
   * Target: [*, status_attributes.*, timing.*].
   * Configuration: [*, status_attributes.*].
   * ConfiguredTarget: [*, status_attributes.*].
   * Action: [*, status_attributes.*, timing.*, test_action.test_suite,
   * test_action.infrastructure_failure_info].
   * FileSet: [*].
   *
   * For Merge Operations:
   *
   * Invocation: [invocation_attributes.labels, workspace_info.command_lines,
   * properties, files, file_processing_errors].
   * Target: [files].
   * ConfiguredTarget: [files].
   * Action: [files, file_processing_errors].
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  /**
   * If true then the Update, Merge operation will become a Create operation if
   * the resource is NOT_FOUND. Not supported for Invocation resource.
   *
   * @generated from field: bool create_if_not_found = 10;
   */
  createIfNotFound: boolean;

  /**
   * The proto of the resource being uploaded.
   *
   * @generated from oneof google.devtools.resultstore.v2.UploadRequest.resource
   */
  resource: {
    /**
     * The Invocation Resource
     *
     * @generated from field: google.devtools.resultstore.v2.Invocation invocation = 4;
     */
    value: Invocation;
    case: "invocation";
  } | {
    /**
     * The Target Resource
     *
     * @generated from field: google.devtools.resultstore.v2.Target target = 5;
     */
    value: Target;
    case: "target";
  } | {
    /**
     * The Configuration Resource
     *
     * @generated from field: google.devtools.resultstore.v2.Configuration configuration = 6;
     */
    value: Configuration;
    case: "configuration";
  } | {
    /**
     * The ConfiguredTarget Resource
     *
     * @generated from field: google.devtools.resultstore.v2.ConfiguredTarget configured_target = 7;
     */
    value: ConfiguredTarget;
    case: "configuredTarget";
  } | {
    /**
     * The Action Resource
     *
     * @generated from field: google.devtools.resultstore.v2.Action action = 8;
     */
    value: Action;
    case: "action";
  } | {
    /**
     * The FileSet Resource
     *
     * @generated from field: google.devtools.resultstore.v2.FileSet file_set = 9;
     */
    value: FileSet;
    case: "fileSet";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.resultstore.v2.UploadRequest.
 * Use `create(UploadRequestSchema)` to create a new message.
 */
export const UploadRequestSchema: GenMessage<UploadRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 28);

/**
 * The resource ID components that identify the resource being uploaded.
 *
 * @generated from message google.devtools.resultstore.v2.UploadRequest.Id
 */
export type UploadRequest_Id = Message<"google.devtools.resultstore.v2.UploadRequest.Id"> & {
  /**
   * Required for Target, ConfiguredTarget, or Action.
   * The Target ID.
   *
   * @generated from field: string target_id = 1;
   */
  targetId: string;

  /**
   * Required for Configuration, ConfiguredTarget, or Action.
   * The Configuration ID.
   *
   * @generated from field: string configuration_id = 2;
   */
  configurationId: string;

  /**
   * Required for Action.
   * The Action ID.
   *
   * @generated from field: string action_id = 3;
   */
  actionId: string;

  /**
   * Required for FileSet.
   * The FileSet ID.
   *
   * @generated from field: string file_set_id = 4;
   */
  fileSetId: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.UploadRequest.Id.
 * Use `create(UploadRequest_IdSchema)` to create a new message.
 */
export const UploadRequest_IdSchema: GenMessage<UploadRequest_Id> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 28, 0);

/**
 * The operation for the request (e.g. Create(), Update(), etc.)
 *
 * @generated from enum google.devtools.resultstore.v2.UploadRequest.UploadOperation
 */
export enum UploadRequest_UploadOperation {
  /**
   * Unspecified
   *
   * @generated from enum value: UPLOAD_OPERATION_UNSPECIFIED = 0;
   */
  UPLOAD_OPERATION_UNSPECIFIED = 0,

  /**
   * Create the given resources except Invocation.
   * For more information, check the Create APIs.
   *
   * @generated from enum value: CREATE = 1;
   */
  CREATE = 1,

  /**
   * Applies a standard update to the resource identified by the given
   * proto's name. For more information, see the Update APIs.
   * UploadBatch does not support arbitrary field masks. The list of allowed
   * field masks can be found below.
   *
   * @generated from enum value: UPDATE = 2;
   */
  UPDATE = 2,

  /**
   * Applies an merge update to the resource identified by the given
   * proto's name. For more information, see the Merge APIs.
   * UploadBatch does not support arbitrary field masks. The list of allowed
   * field masks can be found below.
   *
   * @generated from enum value: MERGE = 3;
   */
  MERGE = 3,

  /**
   * Declares the resource with the given name as finalized and immutable by
   * the uploader. Only supported for Invocation, Target, ConfiguredTarget.
   * There must be no operation on child resources after parent resource is
   * Finalized. If there is a Finalize of Invocation, it must be the final
   * UploadRequest. For more information, see the Finalize APIs.
   * An empty resource should be provided below.
   *
   * @generated from enum value: FINALIZE = 4;
   */
  FINALIZE = 4,
}

/**
 * Describes the enum google.devtools.resultstore.v2.UploadRequest.UploadOperation.
 */
export const UploadRequest_UploadOperationSchema: GenEnum<UploadRequest_UploadOperation> = /*@__PURE__*/
  enumDesc(file_google_devtools_resultstore_v2_resultstore_upload, 28, 0);

/**
 * Request passed into GetInvocationUploadMetadata
 *
 * @generated from message google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest
 */
export type GetInvocationUploadMetadataRequest = Message<"google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest"> & {
  /**
   * Required. The name of the UploadMetadata being requested.
   * The name format must be: invocations/${INVOCATION_ID}/uploadMetadata
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. A UUID that must match the value provided in
   * CreateInvocationRequest.
   *
   * @generated from field: string authorization_token = 2;
   */
  authorizationToken: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest.
 * Use `create(GetInvocationUploadMetadataRequestSchema)` to create a new message.
 */
export const GetInvocationUploadMetadataRequestSchema: GenMessage<GetInvocationUploadMetadataRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_resultstore_upload, 29);

/**
 * This is the interface used to upload information to the ResultStore database,
 * to update that information as necessary, and to make it immutable at the end.
 *
 * This interface intentionally does not support user read-modify-write
 * operations. They may corrupt data, and are too expensive. For the same
 * reason, all upload RPCs will return no resource fields except name and ID. An
 * uploader should hold as little state as possible in memory to avoid running
 * out of memory.
 *
 * @generated from service google.devtools.resultstore.v2.ResultStoreUpload
 */
export const ResultStoreUpload: GenService<{
  /**
   * Creates the given invocation.
   *
   * This is not an implicitly idempotent API, so a request id is required to
   * make it idempotent.
   *
   * Returns an empty Invocation proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If an invocation with the same ID already exists.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateInvocation
   */
  createInvocation: {
    methodKind: "unary";
    input: typeof CreateInvocationRequestSchema;
    output: typeof InvocationSchema;
  },
  /**
   * Applies a standard update to the invocation identified by the given proto's
   * name.  For all types of fields (primitive, message, or repeated), replaces
   * them with the given proto fields if they are under the given field mask
   * paths.  Fields that match the mask but aren't populated in the given
   * invocation are cleared. This is an implicitly idempotent API.
   *
   * Returns an empty Invocation proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If the invocation does not exist.
   * - If the invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateInvocation
   */
  updateInvocation: {
    methodKind: "unary";
    input: typeof UpdateInvocationRequestSchema;
    output: typeof InvocationSchema;
  },
  /**
   * Applies a merge update to the invocation identified by the given proto's
   * name.  For primitive and message fields, replaces them with the ones in
   * the given proto if they are covered under the field mask paths.  For
   * repeated fields, merges to them with the given ones if they are covered
   * under the field mask paths. This is not an implicitly idempotent API, so a
   * request id is required to make it idempotent.
   *
   * Returns an empty Invocation proto with only the name and ID fields
   * populated.
   *
   *
   * An error will be reported in the following cases:
   * - If the invocation does not exist.
   * - If the invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.MergeInvocation
   */
  mergeInvocation: {
    methodKind: "unary";
    input: typeof MergeInvocationRequestSchema;
    output: typeof InvocationSchema;
  },
  /**
   * Touches the invocation identified by the given proto's name.
   *
   * This is useful when you need to notify ResultStore that you haven't
   * abandoned the upload, since abandoned uploads will be automatically
   * finalized after a set period.
   *
   * An error will be reported in the following cases:
   * - If the invocation does not exist.
   * - If the invocation is finalized.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.TouchInvocation
   */
  touchInvocation: {
    methodKind: "unary";
    input: typeof TouchInvocationRequestSchema;
    output: typeof TouchInvocationResponseSchema;
  },
  /**
   * Declares the invocation with the given name as finalized and immutable by
   * the user. It may still be mutated by post-processing. This is an implicitly
   * idempotent API.
   *
   * If an Invocation is not updated for 24 hours, some time after that
   * this will be called automatically.
   *
   * An error will be reported in the following cases:
   * - If the invocation does not exist.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.FinalizeInvocation
   */
  finalizeInvocation: {
    methodKind: "unary";
    input: typeof FinalizeInvocationRequestSchema;
    output: typeof FinalizeInvocationResponseSchema;
  },
  /**
   * Deletes an immutable invocation (permanently)
   * Note: this does not delete indirect data, e.g. files stored in other
   * services.
   *
   * An error will be reported in the following cases:
   * - If the invocation does not exist.
   * - If the invocation is not finalized.  This can be retried until it is.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.DeleteInvocation
   */
  deleteInvocation: {
    methodKind: "unary";
    input: typeof DeleteInvocationRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates the given target under the given parent invocation. The given
   * target ID is URL encoded, converted to the full resource name, and assigned
   * to the target's name field. This is not an implicitly idempotent API, so a
   * request id is required to make it idempotent.
   *
   * Returns an empty Target proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If no target ID is provided.
   * - If the parent invocation does not exist.
   * - If the parent invocation is finalized.
   * - If a target with the same name already exists.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateTarget
   */
  createTarget: {
    methodKind: "unary";
    input: typeof CreateTargetRequestSchema;
    output: typeof TargetSchema;
  },
  /**
   * Applies a standard update to the target identified by the given proto's
   * name. For all types of fields (primitive, message, or repeated), replaces
   * them with the given proto fields if they are under the given field mask
   * paths. Fields that match the mask but aren't populated in the given
   * target are cleared. This is an implicitly idempotent API.
   *
   * Returns an empty Target proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If the target does not exist.
   * - If the target or parent invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateTarget
   */
  updateTarget: {
    methodKind: "unary";
    input: typeof UpdateTargetRequestSchema;
    output: typeof TargetSchema;
  },
  /**
   * Applies a merge update to the target identified by the given proto's
   * name. For primitive and message fields, replaces them with the ones in the
   * given proto if they are covered under the field mask paths.  For repeated
   * fields, merges to them with the given ones if they are covered under the
   * field mask paths. This is not an implicitly idempotent API, so a request
   * id is required to make it idempotent.
   *
   * Returns an empty Target proto with only the name and ID fields populated.
   *
   *
   * An error will be reported in the following cases:
   * - If the target does not exist.
   * - If the target or parent invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.MergeTarget
   */
  mergeTarget: {
    methodKind: "unary";
    input: typeof MergeTargetRequestSchema;
    output: typeof TargetSchema;
  },
  /**
   * Declares the target with the given name as finalized and immutable by the
   * user. It may still be mutated by post-processing. This is an implicitly
   * idempotent API.
   *
   * An error will be reported in the following cases:
   * - If the target does not exist.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.FinalizeTarget
   */
  finalizeTarget: {
    methodKind: "unary";
    input: typeof FinalizeTargetRequestSchema;
    output: typeof FinalizeTargetResponseSchema;
  },
  /**
   * Creates the given configured target under the given parent target.
   * The given configured target ID is URL encoded, converted to the full
   * resource name, and assigned to the configured target's name field.
   * This is not an implicitly idempotent API, so a request id is required
   * to make it idempotent.
   *
   * Returns an empty ConfiguredTarget proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If no config ID is provided.
   * - If a configured target with the same ID already exists.
   * - If the parent target does not exist.
   * - If the parent target or invocation is finalized.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateConfiguredTarget
   */
  createConfiguredTarget: {
    methodKind: "unary";
    input: typeof CreateConfiguredTargetRequestSchema;
    output: typeof ConfiguredTargetSchema;
  },
  /**
   * Applies a standard update to the configured target identified by the given
   * proto's name. For all types of fields (primitive, message, or repeated),
   * replaces them with the given proto fields if they are under the given
   * field mask paths. Fields that match the mask but aren't populated in the
   * given configured target are cleared. This is an implicitly idempotent API.
   *
   * Returns an empty ConfiguredTarget proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If the configured target does not exist.
   * - If the parent target or invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateConfiguredTarget
   */
  updateConfiguredTarget: {
    methodKind: "unary";
    input: typeof UpdateConfiguredTargetRequestSchema;
    output: typeof ConfiguredTargetSchema;
  },
  /**
   * Applies a merge update to the configured target identified by the given
   * proto's name. For primitive and message fields, replaces them with the
   * ones in the given proto if they are covered under the field mask paths.
   * For repeated fields, merges to them with the given ones if they are
   * covered under the field mask paths. This is not an implicitly idempotent
   * API, so a request id is required to make it idempotent.
   *
   * Returns an empty ConfiguredTarget proto with only the name and ID fields
   * populated.
   *
   *
   * An error will be reported in the following cases:
   * - If the configured target does not exist.
   * - If the parent target or invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.MergeConfiguredTarget
   */
  mergeConfiguredTarget: {
    methodKind: "unary";
    input: typeof MergeConfiguredTargetRequestSchema;
    output: typeof ConfiguredTargetSchema;
  },
  /**
   * Declares the configured target with the given name as finalized and
   * immutable by the user. It may still be mutated by post-processing. This is
   * an implicitly idempotent API.
   *
   * An error will be reported in the following cases:
   * - If the configured target does not exist.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.FinalizeConfiguredTarget
   */
  finalizeConfiguredTarget: {
    methodKind: "unary";
    input: typeof FinalizeConfiguredTargetRequestSchema;
    output: typeof FinalizeConfiguredTargetResponseSchema;
  },
  /**
   * Creates the given action under the given configured target. The given
   * action ID is URL encoded, converted to the full resource name, and
   * assigned to the action's name field. This is not an implicitly
   * idempotent API, so a request id is required to make it idempotent.
   *
   * Returns an empty Action proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If no action ID provided.
   * - If the parent configured target does not exist.
   * - If the parent target or invocation is finalized.
   * - If an action  with the same name already exists.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateAction
   */
  createAction: {
    methodKind: "unary";
    input: typeof CreateActionRequestSchema;
    output: typeof ActionSchema;
  },
  /**
   * Applies a standard update to the action identified by the given
   * proto's name.  For all types of fields (primitive, message, or repeated),
   * replaces them with the given proto fields if they are under the given
   * field mask paths.  Fields that match the mask but aren't populated in the
   * given action are cleared.  This is an implicitly idempotent API.
   *
   * Returns an empty Action proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If the action does not exist.
   * - If the parent target or invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateAction
   */
  updateAction: {
    methodKind: "unary";
    input: typeof UpdateActionRequestSchema;
    output: typeof ActionSchema;
  },
  /**
   * Applies a merge update to the action identified by the given
   * proto's name.  For primitive and message fields, replaces them with the
   * ones in the given proto if they are covered under the field mask paths.
   * For repeated fields, merges to them with the given ones if they are
   * covered under the field mask paths. This is not an implicitly idempotent
   * API, so a request id is required to make it idempotent.
   *
   * Returns an empty Action proto with only the name and ID fields populated.
   *
   *
   * An error will be reported in the following cases:
   * - If the action does not exist.
   * - If the parent target or invocation is finalized.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.MergeAction
   */
  mergeAction: {
    methodKind: "unary";
    input: typeof MergeActionRequestSchema;
    output: typeof ActionSchema;
  },
  /**
   * Creates the given configuration under the given parent invocation. The
   * given configuration ID is URL encoded, converted to the full resource name,
   * and assigned to the configuration's name field. The configuration ID of
   * "default" should be preferred for the default configuration in a
   * single-config invocation. This is not an implicitly idempotent API, so a
   * request id is required to make it idempotent.
   *
   * Returns an empty Configuration proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If no configuration ID is provided.
   * - If the parent invocation does not exist.
   * - If the parent invocation is finalized.
   * - If a configuration with the same name already exists.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateConfiguration
   */
  createConfiguration: {
    methodKind: "unary";
    input: typeof CreateConfigurationRequestSchema;
    output: typeof ConfigurationSchema;
  },
  /**
   * Applies a standard update to the configuration identified by the given
   * proto's name. For all types of fields (primitive, message, or repeated),
   * replaces them with the given proto fields if they are under the given field
   * mask paths. Fields that match the mask but aren't populated in the given
   * configuration are cleared. This is an implicitly idempotent API.
   *
   * Returns an empty Configuration proto with only the name and ID fields
   * populated.
   *
   * An error will be reported in the following cases:
   * - If the configuration does not exist.
   * - If the parent invocation is finalized.
   * - If no field mask was given.
   * - If a given field mask path is not valid.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateConfiguration
   */
  updateConfiguration: {
    methodKind: "unary";
    input: typeof UpdateConfigurationRequestSchema;
    output: typeof ConfigurationSchema;
  },
  /**
   * Creates the given file set under the given parent invocation. The given
   * file set ID is URL encoded, converted to the full resource name, and
   * assigned to the file set's name field. This is not an implicitly idempotent
   * API, so a request id is required to make it idempotent.
   *
   * Returns an empty FileSet proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If no file set ID is provided.
   * - If a file set with the same name already exists.
   * - If the parent invocation does not exist.
   * - If the parent invocation is finalized.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.CreateFileSet
   */
  createFileSet: {
    methodKind: "unary";
    input: typeof CreateFileSetRequestSchema;
    output: typeof FileSetSchema;
  },
  /**
   * Applies a standard update to the file set identified by the given proto's
   * name. For all types of fields (primitive, message, or repeated), replaces
   * them with the given proto fields if they are under the given field mask
   * paths. Fields that match the mask but aren't populated in the given
   * configuration are cleared. This is an implicitly idempotent API.
   *
   * Returns an empty FileSet proto with only the name and ID fields populated.
   *
   * An error will be reported in the following cases:
   * - If the file set does not exist.
   * - If the parent invocation is finalized.
   * - If no field mask was given.
   * - If a given field mask path is not valid.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UpdateFileSet
   */
  updateFileSet: {
    methodKind: "unary";
    input: typeof UpdateFileSetRequestSchema;
    output: typeof FileSetSchema;
  },
  /**
   * Applies a merge update to the file set identified by the given proto's
   * name. For primitive and message fields, updates them with the ones in the
   * given proto if they are covered under the field mask paths. For repeated
   * fields, merges to them with the given ones if they are covered under the
   * field mask paths. This is not an implicitly idempotent API, so a request
   * id is required to make it idempotent.
   *
   * Returns an empty FileSet proto with only the name and ID fields populated.
   *
   *
   * An error will be reported in the following cases:
   * - If the file set does not exist.
   * - If the parent invocation is finalized.
   * - If a given field mask path is not valid.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.MergeFileSet
   */
  mergeFileSet: {
    methodKind: "unary";
    input: typeof MergeFileSetRequestSchema;
    output: typeof FileSetSchema;
  },
  /**
   * This is the RPC used for batch upload. It supports uploading multiple
   * resources for an invocation in a transaction safe manner.
   *
   * To use this RPC, the CreateInvocationRequest must have been provided a
   * resume_token.
   *
   * Combining batch upload with normal upload on a single Invocation is not
   * supported. If an Invocation is created with a resume_token, all further
   * calls must be through UploadBatch. If an Invocation is created without
   * resume_token normal upload, all further upload calls must be through normal
   * upload RPCs.
   *
   * The recommend total size of UploadBatchRequest is 10 MiB. If
   * it is too large, it may be rejected.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.UploadBatch
   */
  uploadBatch: {
    methodKind: "unary";
    input: typeof UploadBatchRequestSchema;
    output: typeof UploadBatchResponseSchema;
  },
  /**
   * Provides a way to read the metadata for an invocation.
   * The UploadMetadata could still be retrieved by this RPC even the Invocation
   * has been finalized.
   * This API requires setting a response FieldMask via 'fields' URL query
   * parameter or X-Goog-FieldMask HTTP/gRPC header.
   *
   * An error will be reported in the following case:
   * - If the invocation does not exist.
   * - If no field mask was given.
   *
   * @generated from rpc google.devtools.resultstore.v2.ResultStoreUpload.GetInvocationUploadMetadata
   */
  getInvocationUploadMetadata: {
    methodKind: "unary";
    input: typeof GetInvocationUploadMetadataRequestSchema;
    output: typeof UploadMetadataSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_resultstore_v2_resultstore_upload, 0);

