// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/resultstore/v2/invocation.proto (package google.devtools.resultstore.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Property, StatusAttributes, Timing } from "./common_pb";
import { file_google_devtools_resultstore_v2_common } from "./common_pb";
import type { AggregateCoverage } from "./coverage_pb";
import { file_google_devtools_resultstore_v2_coverage } from "./coverage_pb";
import type { LanguageCoverageSummary } from "./coverage_summary_pb";
import { file_google_devtools_resultstore_v2_coverage_summary } from "./coverage_summary_pb";
import type { File } from "./file_pb";
import { file_google_devtools_resultstore_v2_file } from "./file_pb";
import type { FileProcessingErrors } from "./file_processing_error_pb";
import { file_google_devtools_resultstore_v2_file_processing_error } from "./file_processing_error_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/resultstore/v2/invocation.proto.
 */
export const file_google_devtools_resultstore_v2_invocation: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvZGV2dG9vbHMvcmVzdWx0c3RvcmUvdjIvaW52b2NhdGlvbi5wcm90bxIeZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyIsYGCgpJbnZvY2F0aW9uEgwKBG5hbWUYASABKAkSOQoCaWQYAiABKAsyLS5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuSW52b2NhdGlvbi5JZBJLChFzdGF0dXNfYXR0cmlidXRlcxgDIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5TdGF0dXNBdHRyaWJ1dGVzEjYKBnRpbWluZxgEIAEoCzImLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UaW1pbmcSUwoVaW52b2NhdGlvbl9hdHRyaWJ1dGVzGAUgASgLMjQuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkludm9jYXRpb25BdHRyaWJ1dGVzEkUKDndvcmtzcGFjZV9pbmZvGAYgASgLMi0uZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLldvcmtzcGFjZUluZm8SPAoKcHJvcGVydGllcxgHIAMoCzIoLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5Qcm9wZXJ0eRIzCgVmaWxlcxgIIAMoCzIkLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5GaWxlElMKEmNvdmVyYWdlX3N1bW1hcmllcxgJIAMoCzI3Lmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5MYW5ndWFnZUNvdmVyYWdlU3VtbWFyeRJNChJhZ2dyZWdhdGVfY292ZXJhZ2UYCiABKAsyMS5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuQWdncmVnYXRlQ292ZXJhZ2USVAoWZmlsZV9wcm9jZXNzaW5nX2Vycm9ycxgLIAMoCzI0Lmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5GaWxlUHJvY2Vzc2luZ0Vycm9ycxobCgJJZBIVCg1pbnZvY2F0aW9uX2lkGAEgASgJOkTqQUEKJXJlc3VsdHN0b3JlLmdvb2dsZWFwaXMuY29tL0ludm9jYXRpb24SGGludm9jYXRpb25zL3tpbnZvY2F0aW9ufSISChBXb3Jrc3BhY2VDb250ZXh0It8BCg1Xb3Jrc3BhY2VJbmZvEksKEXdvcmtzcGFjZV9jb250ZXh0GAEgASgLMjAuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLldvcmtzcGFjZUNvbnRleHQSEAoIaG9zdG5hbWUYAyABKAkSGQoRd29ya2luZ19kaXJlY3RvcnkYBCABKAkSEAoIdG9vbF90YWcYBSABKAkSQgoNY29tbWFuZF9saW5lcxgHIAMoCzIrLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5Db21tYW5kTGluZSJJCgtDb21tYW5kTGluZRINCgVsYWJlbBgBIAEoCRIMCgR0b29sGAIgASgJEgwKBGFyZ3MYAyADKAkSDwoHY29tbWFuZBgEIAEoCSLGAQoUSW52b2NhdGlvbkF0dHJpYnV0ZXMSFwoKcHJvamVjdF9pZBgBIAEoCUID4EEFEg0KBXVzZXJzGAIgAygJEg4KBmxhYmVscxgDIAMoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRJOChNpbnZvY2F0aW9uX2NvbnRleHRzGAYgAygLMjEuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkludm9jYXRpb25Db250ZXh0EhEKCWV4aXRfY29kZRgHIAEoBSI2ChFJbnZvY2F0aW9uQ29udGV4dBIUCgxkaXNwbGF5X25hbWUYASABKAkSCwoDdXJsGAIgASgJQoIBCiJjb20uZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyQg9JbnZvY2F0aW9uUHJvdG9QAVpJZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9yZXN1bHRzdG9yZS92MjtyZXN1bHRzdG9yZWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_devtools_resultstore_v2_common, file_google_devtools_resultstore_v2_coverage, file_google_devtools_resultstore_v2_coverage_summary, file_google_devtools_resultstore_v2_file, file_google_devtools_resultstore_v2_file_processing_error]);

/**
 * An Invocation typically represents the result of running a tool. Each has a
 * unique ID, typically generated by the server. Target resources under each
 * Invocation contain the bulk of the data.
 *
 * @generated from message google.devtools.resultstore.v2.Invocation
 */
export type Invocation = Message<"google.devtools.resultstore.v2.Invocation"> & {
  /**
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the Invocation. They must match
   * the resource name after proper encoding.
   *
   * @generated from field: google.devtools.resultstore.v2.Invocation.Id id = 2;
   */
  id?: Invocation_Id;

  /**
   * The aggregate status of the invocation.
   *
   * @generated from field: google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;
   */
  statusAttributes?: StatusAttributes;

  /**
   * When this invocation started and its duration.
   *
   * @generated from field: google.devtools.resultstore.v2.Timing timing = 4;
   */
  timing?: Timing;

  /**
   * Attributes of this invocation.
   *
   * @generated from field: google.devtools.resultstore.v2.InvocationAttributes invocation_attributes = 5;
   */
  invocationAttributes?: InvocationAttributes;

  /**
   * The workspace the tool was run in.
   *
   * @generated from field: google.devtools.resultstore.v2.WorkspaceInfo workspace_info = 6;
   */
  workspaceInfo?: WorkspaceInfo;

  /**
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Property properties = 7;
   */
  properties: Property[];

  /**
   * A list of file references for invocation level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   * Use this field to specify build logs, and other invocation level logs.
   *
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   *
   * build.log: The primary log for the Invocation.
   * coverage_report.lcov: Aggregate coverage report for the invocation.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.File files = 8;
   */
  files: File[];

  /**
   * Summary of aggregate coverage across all Actions in this Invocation.
   * If missing, this data will be populated by the server from the
   * coverage_report.lcov file or the union of all ActionCoverages under this
   * invocation (in that order).
   *
   * @generated from field: repeated google.devtools.resultstore.v2.LanguageCoverageSummary coverage_summaries = 9;
   */
  coverageSummaries: LanguageCoverageSummary[];

  /**
   * Aggregate code coverage for all build and test Actions within this
   * Invocation. If missing, this data will be populated by the server
   * from the coverage_report.lcov file or the union of all ActionCoverages
   * under this invocation (in that order).
   *
   * @generated from field: google.devtools.resultstore.v2.AggregateCoverage aggregate_coverage = 10;
   */
  aggregateCoverage?: AggregateCoverage;

  /**
   * NOT IMPLEMENTED.
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 11;
   */
  fileProcessingErrors: FileProcessingErrors[];
};

/**
 * Describes the message google.devtools.resultstore.v2.Invocation.
 * Use `create(InvocationSchema)` to create a new message.
 */
export const InvocationSchema: GenMessage<Invocation> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 0);

/**
 * The resource ID components that identify the Invocation.
 *
 * @generated from message google.devtools.resultstore.v2.Invocation.Id
 */
export type Invocation_Id = Message<"google.devtools.resultstore.v2.Invocation.Id"> & {
  /**
   * The Invocation ID.
   *
   * @generated from field: string invocation_id = 1;
   */
  invocationId: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.Invocation.Id.
 * Use `create(Invocation_IdSchema)` to create a new message.
 */
export const Invocation_IdSchema: GenMessage<Invocation_Id> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 0, 0);

/**
 * If known, represents the state of the user/build-system workspace.
 *
 * @generated from message google.devtools.resultstore.v2.WorkspaceContext
 */
export type WorkspaceContext = Message<"google.devtools.resultstore.v2.WorkspaceContext"> & {
};

/**
 * Describes the message google.devtools.resultstore.v2.WorkspaceContext.
 * Use `create(WorkspaceContextSchema)` to create a new message.
 */
export const WorkspaceContextSchema: GenMessage<WorkspaceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 1);

/**
 * Describes the workspace under which the tool was invoked, this includes
 * information that was fed into the command, the source code referenced, and
 * the tool itself.
 *
 * @generated from message google.devtools.resultstore.v2.WorkspaceInfo
 */
export type WorkspaceInfo = Message<"google.devtools.resultstore.v2.WorkspaceInfo"> & {
  /**
   * Data about the workspace that might be useful for debugging.
   *
   * @generated from field: google.devtools.resultstore.v2.WorkspaceContext workspace_context = 1;
   */
  workspaceContext?: WorkspaceContext;

  /**
   * Where the tool was invoked
   *
   * @generated from field: string hostname = 3;
   */
  hostname: string;

  /**
   * The client's working directory where the build/test was run from.
   *
   * @generated from field: string working_directory = 4;
   */
  workingDirectory: string;

  /**
   * Tools should set tool_tag to the name of the tool or use case.
   *
   * @generated from field: string tool_tag = 5;
   */
  toolTag: string;

  /**
   * The command lines invoked. The first command line is the one typed by the
   * user, then each one after that should be an expansion of the previous
   * command line.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.CommandLine command_lines = 7;
   */
  commandLines: CommandLine[];
};

/**
 * Describes the message google.devtools.resultstore.v2.WorkspaceInfo.
 * Use `create(WorkspaceInfoSchema)` to create a new message.
 */
export const WorkspaceInfoSchema: GenMessage<WorkspaceInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 2);

/**
 * The command and arguments that produced this Invocation.
 *
 * @generated from message google.devtools.resultstore.v2.CommandLine
 */
export type CommandLine = Message<"google.devtools.resultstore.v2.CommandLine"> & {
  /**
   * A label describing this command line.
   *
   * @generated from field: string label = 1;
   */
  label: string;

  /**
   * The command-line tool that is run: argv[0].
   *
   * @generated from field: string tool = 2;
   */
  tool: string;

  /**
   * The arguments to the above tool: argv[1]...argv[N].
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * The subcommand that was run with the tool, usually "build" or "test".
   * For example, in the Bazel command "bazel build //foo", this would be set
   * to "build". Omit if the tool doesn't accept a subcommand.  This is must
   * be a reference to one of values in args.
   *
   * @generated from field: string command = 4;
   */
  command: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.CommandLine.
 * Use `create(CommandLineSchema)` to create a new message.
 */
export const CommandLineSchema: GenMessage<CommandLine> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 3);

/**
 * Attributes that apply to all invocations.
 *
 * @generated from message google.devtools.resultstore.v2.InvocationAttributes
 */
export type InvocationAttributes = Message<"google.devtools.resultstore.v2.InvocationAttributes"> & {
  /**
   * Immutable. The Cloud Project that owns this invocation (this is different
   * than the Consumer Cloud Project that calls this API). This must be set in
   * the CreateInvocation call, and can't be changed. As input, callers can set
   * this field to a project id (string) or a stringified int64 project number.
   * As output, the API populates this field with the stringified int64 project
   * number (per https://google.aip.dev/cloud/2510).
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The list of users in the command chain.  The first user in this sequence
   * is the one who instigated the first command in the chain. For example,
   * this might contain just the user that ran a Bazel command, or a robot
   * that tested a change as part of a CI system. It could also contain the user
   * that manually triggered a CI test, then the robot that ran the test.
   *
   * @generated from field: repeated string users = 2;
   */
  users: string[];

  /**
   * Labels to categorize this invocation.
   * This is implemented as a set. All labels will be unique. Any duplicate
   * labels added will be ignored. Labels will be returned in lexicographical
   * order. Labels should be a list of words describing the Invocation. Labels
   * should be short, easy to read, and you shouldn't have more than a handful.
   * Labels should not be used for unique properties such as unique IDs. Use
   * properties in cases that don't meet these conditions.
   *
   * @generated from field: repeated string labels = 3;
   */
  labels: string[];

  /**
   * This field describes the overall context or purpose of this invocation.
   * It will be used in the UI to give users more information about
   * how or why this invocation was run.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * If this Invocation was run in the context of a larger Continuous
   * Integration build or other automated system, this field may contain more
   * information about the greater context.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.InvocationContext invocation_contexts = 6;
   */
  invocationContexts: InvocationContext[];

  /**
   * Exit code of the process that ran the invocation. A non-zero value
   * means failure. For example, the exit code of a "bazel test" command.
   *
   * @generated from field: int32 exit_code = 7;
   */
  exitCode: number;
};

/**
 * Describes the message google.devtools.resultstore.v2.InvocationAttributes.
 * Use `create(InvocationAttributesSchema)` to create a new message.
 */
export const InvocationAttributesSchema: GenMessage<InvocationAttributes> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 4);

/**
 * Describes the invocation context which includes a display name and URL.
 *
 * @generated from message google.devtools.resultstore.v2.InvocationContext
 */
export type InvocationContext = Message<"google.devtools.resultstore.v2.InvocationContext"> & {
  /**
   * A human readable name for the context under which this Invocation was run.
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * A URL pointing to a UI containing more information
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.InvocationContext.
 * Use `create(InvocationContextSchema)` to create a new message.
 */
export const InvocationContextSchema: GenMessage<InvocationContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_invocation, 5);

