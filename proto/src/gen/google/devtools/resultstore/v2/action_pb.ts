// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/resultstore/v2/action.proto (package google.devtools.resultstore.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Dependency, Property, StatusAttributes, Timing } from "./common_pb";
import { file_google_devtools_resultstore_v2_common } from "./common_pb";
import type { ActionCoverage } from "./coverage_pb";
import { file_google_devtools_resultstore_v2_coverage } from "./coverage_pb";
import type { File } from "./file_pb";
import { file_google_devtools_resultstore_v2_file } from "./file_pb";
import type { FileProcessingErrors } from "./file_processing_error_pb";
import { file_google_devtools_resultstore_v2_file_processing_error } from "./file_processing_error_pb";
import type { TestSuite } from "./test_suite_pb";
import { file_google_devtools_resultstore_v2_test_suite } from "./test_suite_pb";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/resultstore/v2/action.proto.
 */
export const file_google_devtools_resultstore_v2_action: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvZGV2dG9vbHMvcmVzdWx0c3RvcmUvdjIvYWN0aW9uLnByb3RvEh5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIihggKBkFjdGlvbhIMCgRuYW1lGAEgASgJEjUKAmlkGAIgASgLMikuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkFjdGlvbi5JZBJLChFzdGF0dXNfYXR0cmlidXRlcxgDIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5TdGF0dXNBdHRyaWJ1dGVzEjYKBnRpbWluZxgEIAEoCzImLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UaW1pbmcSQwoMYnVpbGRfYWN0aW9uGAkgASgLMisuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkJ1aWxkQWN0aW9uSAASQQoLdGVzdF9hY3Rpb24YCiABKAsyKi5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuVGVzdEFjdGlvbkgAEksKEWFjdGlvbl9hdHRyaWJ1dGVzGAUgASgLMjAuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkFjdGlvbkF0dHJpYnV0ZXMSRwoTYWN0aW9uX2RlcGVuZGVuY2llcxgOIAMoCzIqLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5EZXBlbmRlbmN5EjwKCnByb3BlcnRpZXMYByADKAsyKC5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuUHJvcGVydHkSMwoFZmlsZXMYCCADKAsyJC5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuRmlsZRIRCglmaWxlX3NldHMYDyADKAkSQAoIY292ZXJhZ2UYCyABKAsyLi5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuQWN0aW9uQ292ZXJhZ2USVAoWZmlsZV9wcm9jZXNzaW5nX2Vycm9ycxgNIAMoCzI0Lmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5GaWxlUHJvY2Vzc2luZ0Vycm9ycxpbCgJJZBIVCg1pbnZvY2F0aW9uX2lkGAEgASgJEhEKCXRhcmdldF9pZBgCIAEoCRIYChBjb25maWd1cmF0aW9uX2lkGAMgASgJEhEKCWFjdGlvbl9pZBgEIAEoCTqJAepBhQEKIXJlc3VsdHN0b3JlLmdvb2dsZWFwaXMuY29tL0FjdGlvbhJgaW52b2NhdGlvbnMve2ludm9jYXRpb259L3RhcmdldHMve3RhcmdldH0vY29uZmlndXJlZFRhcmdldHMve2NvbmZpZ3VyZWRfdGFyZ2V0fS9hY3Rpb25zL3thY3Rpb259Qg0KC2FjdGlvbl90eXBlIlQKC0J1aWxkQWN0aW9uEgwKBHR5cGUYASABKAkSGgoScHJpbWFyeV9pbnB1dF9wYXRoGAIgASgJEhsKE3ByaW1hcnlfb3V0cHV0X3BhdGgYAyABKAkirQIKClRlc3RBY3Rpb24SPwoLdGVzdF90aW1pbmcYASABKAsyKi5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuVGVzdFRpbWluZxIUCgxzaGFyZF9udW1iZXIYAiABKAUSEgoKcnVuX251bWJlchgDIAEoBRIWCg5hdHRlbXB0X251bWJlchgEIAEoBRI9Cgp0ZXN0X3N1aXRlGAUgASgLMikuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRlc3RTdWl0ZRI9Cgh3YXJuaW5ncxgIIAMoCzIrLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5UZXN0V2FybmluZxIeChZlc3RpbWF0ZWRfbWVtb3J5X2J5dGVzGAogASgDIs4BChBBY3Rpb25BdHRyaWJ1dGVzEk0KEmV4ZWN1dGlvbl9zdHJhdGVneRgBIAEoDjIxLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5FeGVjdXRpb25TdHJhdGVneRIRCglleGl0X2NvZGUYAiABKAUSEAoIaG9zdG5hbWUYAyABKAkSRgoPaW5wdXRfZmlsZV9pbmZvGAQgASgLMi0uZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLklucHV0RmlsZUluZm8igAEKDUlucHV0RmlsZUluZm8SDQoFY291bnQYASABKAMSFgoOZGlzdGluY3RfY291bnQYAiABKAMSEwoLY291bnRfbGltaXQYAyABKAMSFgoOZGlzdGluY3RfYnl0ZXMYBCABKAMSGwoTZGlzdGluY3RfYnl0ZV9saW1pdBgFIAEoAyJLCg9Mb2NhbFRlc3RUaW1pbmcSOAoVdGVzdF9wcm9jZXNzX2R1cmF0aW9uGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uIqsCChdSZW1vdGVUZXN0QXR0ZW1wdFRpbWluZxIxCg5xdWV1ZV9kdXJhdGlvbhgBIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIyCg91cGxvYWRfZHVyYXRpb24YAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SOQoWbWFjaGluZV9zZXR1cF9kdXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI4ChV0ZXN0X3Byb2Nlc3NfZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SNAoRZG93bmxvYWRfZHVyYXRpb24YBSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24imQEKEFJlbW90ZVRlc3RUaW1pbmcSOgoXbG9jYWxfYW5hbHlzaXNfZHVyYXRpb24YASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SSQoIYXR0ZW1wdHMYAiADKAsyNy5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuUmVtb3RlVGVzdEF0dGVtcHRUaW1pbmci0QIKClRlc3RUaW1pbmcSQAoFbG9jYWwYASABKAsyLy5nb29nbGUuZGV2dG9vbHMucmVzdWx0c3RvcmUudjIuTG9jYWxUZXN0VGltaW5nSAASQgoGcmVtb3RlGAIgASgLMjAuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlJlbW90ZVRlc3RUaW1pbmdIABI3ChRzeXN0ZW1fdGltZV9kdXJhdGlvbhgDIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhI1ChJ1c2VyX3RpbWVfZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SQQoMdGVzdF9jYWNoaW5nGAUgASgOMisuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLlRlc3RDYWNoaW5nQgoKCGxvY2F0aW9uIiYKC1Rlc3RXYXJuaW5nEhcKD3dhcm5pbmdfbWVzc2FnZRgBIAEoCSqMAQoRRXhlY3V0aW9uU3RyYXRlZ3kSIgoeRVhFQ1VUSU9OX1NUUkFURUdZX1VOU1BFQ0lGSUVEEAASFQoRT1RIRVJfRU5WSVJPTk1FTlQQARISCg5SRU1PVEVfU0VSVklDRRACEhIKDkxPQ0FMX1BBUkFMTEVMEAMSFAoQTE9DQUxfU0VRVUVOVElBTBAEKmYKC1Rlc3RDYWNoaW5nEhwKGFRFU1RfQ0FDSElOR19VTlNQRUNJRklFRBAAEhMKD0xPQ0FMX0NBQ0hFX0hJVBABEhQKEFJFTU9URV9DQUNIRV9ISVQQAhIOCgpDQUNIRV9NSVNTEANCfgoiY29tLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52MkILQWN0aW9uUHJvdG9QAVpJZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9yZXN1bHRzdG9yZS92MjtyZXN1bHRzdG9yZWIGcHJvdG8z", [file_google_api_resource, file_google_devtools_resultstore_v2_common, file_google_devtools_resultstore_v2_coverage, file_google_devtools_resultstore_v2_file, file_google_devtools_resultstore_v2_file_processing_error, file_google_devtools_resultstore_v2_test_suite, file_google_protobuf_duration]);

/**
 * An action that happened as part of a configured target. This action could be
 * a build, a test, or another type of action, as specified in action_type
 * oneof.
 *
 * Each parent ConfiguredTarget resource should have at least one Action as its
 * child resource before the invocation is finalized. For a simple build, at
 * least one build action should be created to represent the build result, and
 * at least one test action should be created to represent the test result, if
 * any.
 *
 * @generated from message google.devtools.resultstore.v2.Action
 */
export type Action = Message<"google.devtools.resultstore.v2.Action"> & {
  /**
   * The resource name.  Its format must be:
   * invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/url_encode(${CONFIG_ID})/actions/${url_encode(ACTION_ID)}
   *
   * See CreateActionRequest proto for more information.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource ID components that identify the Action. They must match the
   * resource name after proper encoding.
   *
   * @generated from field: google.devtools.resultstore.v2.Action.Id id = 2;
   */
  id?: Action_Id;

  /**
   * The status of the action.
   *
   * @generated from field: google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;
   */
  statusAttributes?: StatusAttributes;

  /**
   * The timing of the whole action. For TestActions, the start time may be
   * before the test actually started, and the duration may last until after the
   * test actually finished.
   *
   * @generated from field: google.devtools.resultstore.v2.Timing timing = 4;
   */
  timing?: Timing;

  /**
   * The type of the action. The type of an action may not change over the
   * lifetime of the invocation. If one of these fields is to be set, it must be
   * set in the CreateAction method. It may be set to an empty message that is
   * populated in later methods or post-processing. A generic "untyped" action
   * can be created by not setting any of these fields. An untyped action will
   * be untyped for the lifetime of the invocation.
   *
   * @generated from oneof google.devtools.resultstore.v2.Action.action_type
   */
  actionType: {
    /**
     * Used only when this action represents a build action.
     *
     * @generated from field: google.devtools.resultstore.v2.BuildAction build_action = 9;
     */
    value: BuildAction;
    case: "buildAction";
  } | {
    /**
     * Only for test actions.
     *
     * @generated from field: google.devtools.resultstore.v2.TestAction test_action = 10;
     */
    value: TestAction;
    case: "testAction";
  } | { case: undefined; value?: undefined };

  /**
   * General attributes of the action.
   *
   * @generated from field: google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;
   */
  actionAttributes?: ActionAttributes;

  /**
   * A list of resources that this action depended upon. May be used to provide
   * the cause of a build failure in the case of a failed build action.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Dependency action_dependencies = 14;
   */
  actionDependencies: Dependency[];

  /**
   * Arbitrary name-value pairs.
   * This is implemented as a multi-map. Multiple properties are allowed with
   * the same key. Properties will be returned in lexicographical order by key.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.Property properties = 7;
   */
  properties: Property[];

  /**
   * A list of file references for action level files.
   * The file IDs must be unique within this list. Duplicate file IDs will
   * result in an error. Files will be returned in lexicographical order by ID.
   *
   * Files with the following reserved file IDs cause specific post-processing
   * or have special handling. These files must be immediately available to
   * ResultStore for processing when the reference is uploaded.
   *
   * For build actions:
   * stdout: The stdout of the action
   * stderr: The stderr of the action
   * baseline.lcov: Baseline coverage file to be parsed by the server. This
   *     uses a stripped down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   *
   * For test actions:
   * test.xml: The test suite / test case data in XML format.
   * test.log: The combined stdout and stderr of the test process.
   * test.lcov: Coverage file to be parsed by the server. This uses a stripped
   *     down implementation of the LCOV standard.
   *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
   *
   * @generated from field: repeated google.devtools.resultstore.v2.File files = 8;
   */
  files: File[];

  /**
   * List of names of file sets that are referenced from this Action.
   * Each name must point to a file set under the same Invocation. The name
   * format must be: invocations/${INVOCATION_ID}/fileSets/${FILE_SET_ID}
   *
   * @generated from field: repeated string file_sets = 15;
   */
  fileSets: string[];

  /**
   * Coverage data was collected while running the build or test action. This
   * usually includes line coverage, and may also include branch coverage.
   * For test actions, this is usually only for the source files which were
   * actually executed by that particular action.
   * For build actions, this is the baseline coverage, which captures the
   * instrumented files and lines, without any lines being executed. This
   * ensures files that are never covered at all are included.
   *
   * @generated from field: google.devtools.resultstore.v2.ActionCoverage coverage = 11;
   */
  coverage?: ActionCoverage;

  /**
   * ResultStore will read and parse Files with reserved IDs listed above. Read
   * and parse errors for all these Files are reported here.
   * This is implemented as a map, with one FileProcessingErrors for each file.
   * Typically produced when parsing Files, but may also be provided directly
   * by clients.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;
   */
  fileProcessingErrors: FileProcessingErrors[];
};

/**
 * Describes the message google.devtools.resultstore.v2.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 0);

/**
 * The resource ID components that identify the Action.
 *
 * @generated from message google.devtools.resultstore.v2.Action.Id
 */
export type Action_Id = Message<"google.devtools.resultstore.v2.Action.Id"> & {
  /**
   * The Invocation ID.
   *
   * @generated from field: string invocation_id = 1;
   */
  invocationId: string;

  /**
   * The Target ID.
   *
   * @generated from field: string target_id = 2;
   */
  targetId: string;

  /**
   * The Configuration ID.
   *
   * @generated from field: string configuration_id = 3;
   */
  configurationId: string;

  /**
   * The Action ID.
   *
   * @generated from field: string action_id = 4;
   */
  actionId: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.Action.Id.
 * Use `create(Action_IdSchema)` to create a new message.
 */
export const Action_IdSchema: GenMessage<Action_Id> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 0, 0);

/**
 * A build action, such as building a java library.
 *
 * @generated from message google.devtools.resultstore.v2.BuildAction
 */
export type BuildAction = Message<"google.devtools.resultstore.v2.BuildAction"> & {
  /**
   * The type of the action.  This is intended to be a clue as to how the output
   * of the action should be parsed. For example "javac" for a Java compile
   * action.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * The "primary" input artifact processed by this action.  E.g., the .cc file
   * of a C++ compile action.  Empty string ("") if the action has no input
   * artifacts or no "primary" input artifact.
   *
   * @generated from field: string primary_input_path = 2;
   */
  primaryInputPath: string;

  /**
   * The "primary" output artifact processed by this action.  E.g., the .o file
   * of a C++ compile action.  Empty string ("") if the action has no output
   * artifacts or no "primary" output artifact.
   *
   * @generated from field: string primary_output_path = 3;
   */
  primaryOutputPath: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.BuildAction.
 * Use `create(BuildActionSchema)` to create a new message.
 */
export const BuildActionSchema: GenMessage<BuildAction> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 1);

/**
 * A test action, such as running a JUnit4 test binary.
 *
 * @generated from message google.devtools.resultstore.v2.TestAction
 */
export type TestAction = Message<"google.devtools.resultstore.v2.TestAction"> & {
  /**
   * Timing data for execution of the test action.
   *
   * @generated from field: google.devtools.resultstore.v2.TestTiming test_timing = 1;
   */
  testTiming?: TestTiming;

  /**
   * If the test is divided up into shards to improve performance, set this to
   * indicate which shard this test action is for. Value must be in interval
   * [0, total_shard_count). Defaults to 0, which is appropriate if all test
   * cases are run in the same process.
   *
   * @generated from field: int32 shard_number = 2;
   */
  shardNumber: number;

  /**
   * If the user requested that every test be run multiple times, as is often
   * done to measure flakiness, set this to indicate which run this test action
   * is for. Value must be in interval [0, total_run_count). Defaults to 0,
   * which is appropriate if multiple runs were not requested.
   *
   * @generated from field: int32 run_number = 3;
   */
  runNumber: number;

  /**
   * If flaky tests are automatically retried, set this to indicate which
   * attempt this test action is for. (e.g. 0 for the first attempt, 1 for
   * second, and so on). Defaults to 0, which is appropriate if this is the only
   * attempt.
   *
   * @generated from field: int32 attempt_number = 4;
   */
  attemptNumber: number;

  /**
   * A tree of test suites and test cases that were run by this test action.
   * Each test case has its own status information, including stack traces.
   * Typically produced by parsing an XML Log, but may also be provided directly
   * by clients.
   *
   * @generated from field: google.devtools.resultstore.v2.TestSuite test_suite = 5;
   */
  testSuite?: TestSuite;

  /**
   * Warnings for this test action.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.TestWarning warnings = 8;
   */
  warnings: TestWarning[];

  /**
   * Estimated memory consumption of the test action, in bytes. A default value
   * of 0 means there is no memory consumption estimate specified.
   *
   * @generated from field: int64 estimated_memory_bytes = 10;
   */
  estimatedMemoryBytes: bigint;
};

/**
 * Describes the message google.devtools.resultstore.v2.TestAction.
 * Use `create(TestActionSchema)` to create a new message.
 */
export const TestActionSchema: GenMessage<TestAction> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 2);

/**
 * General attributes of an action
 *
 * @generated from message google.devtools.resultstore.v2.ActionAttributes
 */
export type ActionAttributes = Message<"google.devtools.resultstore.v2.ActionAttributes"> & {
  /**
   * Strategy used for executing the action.
   *
   * @generated from field: google.devtools.resultstore.v2.ExecutionStrategy execution_strategy = 1;
   */
  executionStrategy: ExecutionStrategy;

  /**
   * Exit code of the process that ran the action. A non-zero value means
   * failure.
   *
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * Where the action was run.
   *
   * @generated from field: string hostname = 3;
   */
  hostname: string;

  /**
   * Information about the input files used in all actions under this configured
   * target.
   *
   * @generated from field: google.devtools.resultstore.v2.InputFileInfo input_file_info = 4;
   */
  inputFileInfo?: InputFileInfo;
};

/**
 * Describes the message google.devtools.resultstore.v2.ActionAttributes.
 * Use `create(ActionAttributesSchema)` to create a new message.
 */
export const ActionAttributesSchema: GenMessage<ActionAttributes> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 3);

/**
 * File count and size information for the input files to a configured target.
 *
 * @generated from message google.devtools.resultstore.v2.InputFileInfo
 */
export type InputFileInfo = Message<"google.devtools.resultstore.v2.InputFileInfo"> & {
  /**
   * The number of input files (counting every file, even if a duplicate).
   *
   * @generated from field: int64 count = 1;
   */
  count: bigint;

  /**
   * The number of distinct input files.
   *
   * @generated from field: int64 distinct_count = 2;
   */
  distinctCount: bigint;

  /**
   * The max number of input files allowed by the build system (counting every
   * file, even if a duplicate).
   *
   * @generated from field: int64 count_limit = 3;
   */
  countLimit: bigint;

  /**
   * The total size of the distinct input files.
   *
   * @generated from field: int64 distinct_bytes = 4;
   */
  distinctBytes: bigint;

  /**
   * The max allowed total size of the distinct input files.
   *
   * @generated from field: int64 distinct_byte_limit = 5;
   */
  distinctByteLimit: bigint;
};

/**
 * Describes the message google.devtools.resultstore.v2.InputFileInfo.
 * Use `create(InputFileInfoSchema)` to create a new message.
 */
export const InputFileInfoSchema: GenMessage<InputFileInfo> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 4);

/**
 * Timing data for tests executed locally on the machine running the build.
 *
 * @generated from message google.devtools.resultstore.v2.LocalTestTiming
 */
export type LocalTestTiming = Message<"google.devtools.resultstore.v2.LocalTestTiming"> & {
  /**
   * Time taken by the test process, typically surrounded by a small wrapper
   * script.
   *
   * @generated from field: google.protobuf.Duration test_process_duration = 1;
   */
  testProcessDuration?: Duration;
};

/**
 * Describes the message google.devtools.resultstore.v2.LocalTestTiming.
 * Use `create(LocalTestTimingSchema)` to create a new message.
 */
export const LocalTestTimingSchema: GenMessage<LocalTestTiming> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 5);

/**
 * Timing data for one attempt to execute a test action remotely.
 *
 * @generated from message google.devtools.resultstore.v2.RemoteTestAttemptTiming
 */
export type RemoteTestAttemptTiming = Message<"google.devtools.resultstore.v2.RemoteTestAttemptTiming"> & {
  /**
   * Idle period before the test process is invoked on the remote machine.
   *
   * @generated from field: google.protobuf.Duration queue_duration = 1;
   */
  queueDuration?: Duration;

  /**
   * Time to upload data dependencies from the local machine to the remote
   * machine running the test, or to the distributed cache.
   *
   * @generated from field: google.protobuf.Duration upload_duration = 2;
   */
  uploadDuration?: Duration;

  /**
   * Time to set up the remote machine.
   * Not to be confused with setup time in
   * xUnit test frameworks, which falls within the test_process_time.
   *
   * @generated from field: google.protobuf.Duration machine_setup_duration = 3;
   */
  machineSetupDuration?: Duration;

  /**
   * Time taken by the test process, typically surrounded by a small wrapper
   * script.
   * For Java tests, this includes JVM setup, flag parsing, class path setup,
   * parsing files to setup the suite, and finally running your test methods.
   * In many cases, only a small fraction of the test process time is spent
   * running the test methods.
   *
   * @generated from field: google.protobuf.Duration test_process_duration = 4;
   */
  testProcessDuration?: Duration;

  /**
   * Time spent retrieving test logs and any other test outputs, back to the
   * local machine.
   *
   * @generated from field: google.protobuf.Duration download_duration = 5;
   */
  downloadDuration?: Duration;
};

/**
 * Describes the message google.devtools.resultstore.v2.RemoteTestAttemptTiming.
 * Use `create(RemoteTestAttemptTimingSchema)` to create a new message.
 */
export const RemoteTestAttemptTimingSchema: GenMessage<RemoteTestAttemptTiming> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 6);

/**
 * Timing data for the part of the test execution that is done remotely.
 *
 * @generated from message google.devtools.resultstore.v2.RemoteTestTiming
 */
export type RemoteTestTiming = Message<"google.devtools.resultstore.v2.RemoteTestTiming"> & {
  /**
   * Time taken locally to determine what to do.
   *
   * @generated from field: google.protobuf.Duration local_analysis_duration = 1;
   */
  localAnalysisDuration?: Duration;

  /**
   * Normally there is only one attempt, but the system may retry on internal
   * errors, leading to multiple attempts.
   *
   * @generated from field: repeated google.devtools.resultstore.v2.RemoteTestAttemptTiming attempts = 2;
   */
  attempts: RemoteTestAttemptTiming[];
};

/**
 * Describes the message google.devtools.resultstore.v2.RemoteTestTiming.
 * Use `create(RemoteTestTimingSchema)` to create a new message.
 */
export const RemoteTestTimingSchema: GenMessage<RemoteTestTiming> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 7);

/**
 * Timing data for execution of a test action. The action may be performed
 * locally, on the machine running the build, or remotely.
 *
 * @generated from message google.devtools.resultstore.v2.TestTiming
 */
export type TestTiming = Message<"google.devtools.resultstore.v2.TestTiming"> & {
  /**
   * Test timing for either a local or remote execution.
   *
   * @generated from oneof google.devtools.resultstore.v2.TestTiming.location
   */
  location: {
    /**
     * Used for local test actions.
     *
     * @generated from field: google.devtools.resultstore.v2.LocalTestTiming local = 1;
     */
    value: LocalTestTiming;
    case: "local";
  } | {
    /**
     * Used for remote test actions.
     *
     * @generated from field: google.devtools.resultstore.v2.RemoteTestTiming remote = 2;
     */
    value: RemoteTestTiming;
    case: "remote";
  } | { case: undefined; value?: undefined };

  /**
   * The amount of CPU time spent by the test process executing system calls
   * within the kernel, as opposed to library code. Time the test process spent
   * blocked does not count towards this figure.
   *
   * @generated from field: google.protobuf.Duration system_time_duration = 3;
   */
  systemTimeDuration?: Duration;

  /**
   * The amount of CPU time spent by the test process executing user-mode code
   * outside the kernel, as opposed to library code. Time the test process
   * spent blocked does not count towards this figure. You can add user_time to
   * system_time to get total CPU time taken by the test process.
   *
   * @generated from field: google.protobuf.Duration user_time_duration = 4;
   */
  userTimeDuration?: Duration;

  /**
   * Most build systems cache build results to speed up incremental builds.
   * Some also cache test results too. This indicates whether the test results
   * were found in a cache, and where that cache was located.
   *
   * @generated from field: google.devtools.resultstore.v2.TestCaching test_caching = 5;
   */
  testCaching: TestCaching;
};

/**
 * Describes the message google.devtools.resultstore.v2.TestTiming.
 * Use `create(TestTimingSchema)` to create a new message.
 */
export const TestTimingSchema: GenMessage<TestTiming> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 8);

/**
 * A warning from a test execution.
 *
 * @generated from message google.devtools.resultstore.v2.TestWarning
 */
export type TestWarning = Message<"google.devtools.resultstore.v2.TestWarning"> & {
  /**
   * Contains the message detailing the warning.
   *
   * @generated from field: string warning_message = 1;
   */
  warningMessage: string;
};

/**
 * Describes the message google.devtools.resultstore.v2.TestWarning.
 * Use `create(TestWarningSchema)` to create a new message.
 */
export const TestWarningSchema: GenMessage<TestWarning> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_action, 9);

/**
 * Indicates how/where this Action was executed.
 *
 * @generated from enum google.devtools.resultstore.v2.ExecutionStrategy
 */
export enum ExecutionStrategy {
  /**
   * The action did not indicate how it was executed.
   *
   * @generated from enum value: EXECUTION_STRATEGY_UNSPECIFIED = 0;
   */
  EXECUTION_STRATEGY_UNSPECIFIED = 0,

  /**
   * The action was executed in some other form.
   *
   * @generated from enum value: OTHER_ENVIRONMENT = 1;
   */
  OTHER_ENVIRONMENT = 1,

  /**
   * The action used a remote build service.
   *
   * @generated from enum value: REMOTE_SERVICE = 2;
   */
  REMOTE_SERVICE = 2,

  /**
   * The action was executed locally, in parallel with other actions.
   *
   * @generated from enum value: LOCAL_PARALLEL = 3;
   */
  LOCAL_PARALLEL = 3,

  /**
   * The action was executed locally, without parallelism.
   *
   * @generated from enum value: LOCAL_SEQUENTIAL = 4;
   */
  LOCAL_SEQUENTIAL = 4,
}

/**
 * Describes the enum google.devtools.resultstore.v2.ExecutionStrategy.
 */
export const ExecutionStrategySchema: GenEnum<ExecutionStrategy> = /*@__PURE__*/
  enumDesc(file_google_devtools_resultstore_v2_action, 0);

/**
 * Most build systems cache build results to speed up incremental builds.
 * Some also cache test results too. This indicates whether the test results
 * were found in a cache, and where that cache was located.
 *
 * @generated from enum google.devtools.resultstore.v2.TestCaching
 */
export enum TestCaching {
  /**
   * The implicit default enum value. Should never be set.
   *
   * @generated from enum value: TEST_CACHING_UNSPECIFIED = 0;
   */
  TEST_CACHING_UNSPECIFIED = 0,

  /**
   * The test result was found in a local cache, so it wasn't run again.
   *
   * @generated from enum value: LOCAL_CACHE_HIT = 1;
   */
  LOCAL_CACHE_HIT = 1,

  /**
   * The test result was found in a remote cache, so it wasn't run again.
   *
   * @generated from enum value: REMOTE_CACHE_HIT = 2;
   */
  REMOTE_CACHE_HIT = 2,

  /**
   * The test result was not found in any cache, so it had to be run again.
   *
   * @generated from enum value: CACHE_MISS = 3;
   */
  CACHE_MISS = 3,
}

/**
 * Describes the enum google.devtools.resultstore.v2.TestCaching.
 */
export const TestCachingSchema: GenEnum<TestCaching> = /*@__PURE__*/
  enumDesc(file_google_devtools_resultstore_v2_action, 1);

