// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/resultstore/v2/coverage_summary.proto (package google.devtools.resultstore.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Language } from "./common_pb";
import { file_google_devtools_resultstore_v2_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/resultstore/v2/coverage_summary.proto.
 */
export const file_google_devtools_resultstore_v2_coverage_summary: GenFile = /*@__PURE__*/
  fileDesc("CjVnb29nbGUvZGV2dG9vbHMvcmVzdWx0c3RvcmUvdjIvY292ZXJhZ2Vfc3VtbWFyeS5wcm90bxIeZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyIlMKE0xpbmVDb3ZlcmFnZVN1bW1hcnkSHwoXaW5zdHJ1bWVudGVkX2xpbmVfY291bnQYASABKAUSGwoTZXhlY3V0ZWRfbGluZV9jb3VudBgCIAEoBSJuChVCcmFuY2hDb3ZlcmFnZVN1bW1hcnkSGgoSdG90YWxfYnJhbmNoX2NvdW50GAEgASgFEh0KFWV4ZWN1dGVkX2JyYW5jaF9jb3VudBgCIAEoBRIaChJ0YWtlbl9icmFuY2hfY291bnQYAyABKAUi7wEKF0xhbmd1YWdlQ292ZXJhZ2VTdW1tYXJ5EjoKCGxhbmd1YWdlGAEgASgOMiguZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkxhbmd1YWdlEkkKDGxpbmVfc3VtbWFyeRgCIAEoCzIzLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52Mi5MaW5lQ292ZXJhZ2VTdW1tYXJ5Ek0KDmJyYW5jaF9zdW1tYXJ5GAMgASgLMjUuZ29vZ2xlLmRldnRvb2xzLnJlc3VsdHN0b3JlLnYyLkJyYW5jaENvdmVyYWdlU3VtbWFyeUKHAQoiY29tLmdvb2dsZS5kZXZ0b29scy5yZXN1bHRzdG9yZS52MkIUQ292ZXJhZ2VTdW1tYXJ5UHJvdG9QAVpJZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9yZXN1bHRzdG9yZS92MjtyZXN1bHRzdG9yZWIGcHJvdG8z", [file_google_devtools_resultstore_v2_common]);

/**
 * Summary of line coverage
 *
 * @generated from message google.devtools.resultstore.v2.LineCoverageSummary
 */
export type LineCoverageSummary = Message<"google.devtools.resultstore.v2.LineCoverageSummary"> & {
  /**
   * Number of lines instrumented for coverage.
   *
   * @generated from field: int32 instrumented_line_count = 1;
   */
  instrumentedLineCount: number;

  /**
   * Number of instrumented lines that were executed by the test.
   *
   * @generated from field: int32 executed_line_count = 2;
   */
  executedLineCount: number;
};

/**
 * Describes the message google.devtools.resultstore.v2.LineCoverageSummary.
 * Use `create(LineCoverageSummarySchema)` to create a new message.
 */
export const LineCoverageSummarySchema: GenMessage<LineCoverageSummary> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_coverage_summary, 0);

/**
 * Summary of branch coverage
 * A branch may be:
 *  * not executed.  Counted only in total.
 *  * executed but not taken.  Appears in total and executed.
 *  * executed and taken.  Appears in all three fields.
 *
 * @generated from message google.devtools.resultstore.v2.BranchCoverageSummary
 */
export type BranchCoverageSummary = Message<"google.devtools.resultstore.v2.BranchCoverageSummary"> & {
  /**
   * The number of branches present in the file.
   *
   * @generated from field: int32 total_branch_count = 1;
   */
  totalBranchCount: number;

  /**
   * The number of branches executed out of the total branches present.
   * A branch is executed when its condition is evaluated.
   * This is <= total_branch_count as not all branches are executed.
   *
   * @generated from field: int32 executed_branch_count = 2;
   */
  executedBranchCount: number;

  /**
   * The number of branches taken out of the total branches executed.
   * A branch is taken when its condition is satisfied.
   * This is <= executed_branch_count as not all executed branches are taken.
   *
   * @generated from field: int32 taken_branch_count = 3;
   */
  takenBranchCount: number;
};

/**
 * Describes the message google.devtools.resultstore.v2.BranchCoverageSummary.
 * Use `create(BranchCoverageSummarySchema)` to create a new message.
 */
export const BranchCoverageSummarySchema: GenMessage<BranchCoverageSummary> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_coverage_summary, 1);

/**
 * Summary of coverage in each language
 *
 * @generated from message google.devtools.resultstore.v2.LanguageCoverageSummary
 */
export type LanguageCoverageSummary = Message<"google.devtools.resultstore.v2.LanguageCoverageSummary"> & {
  /**
   * This summary is for all files written in this programming language.
   *
   * @generated from field: google.devtools.resultstore.v2.Language language = 1;
   */
  language: Language;

  /**
   * Summary of lines covered vs instrumented.
   *
   * @generated from field: google.devtools.resultstore.v2.LineCoverageSummary line_summary = 2;
   */
  lineSummary?: LineCoverageSummary;

  /**
   * Summary of branch coverage.
   *
   * @generated from field: google.devtools.resultstore.v2.BranchCoverageSummary branch_summary = 3;
   */
  branchSummary?: BranchCoverageSummary;
};

/**
 * Describes the message google.devtools.resultstore.v2.LanguageCoverageSummary.
 * Use `create(LanguageCoverageSummarySchema)` to create a new message.
 */
export const LanguageCoverageSummarySchema: GenMessage<LanguageCoverageSummary> = /*@__PURE__*/
  messageDesc(file_google_devtools_resultstore_v2_coverage_summary, 2);

