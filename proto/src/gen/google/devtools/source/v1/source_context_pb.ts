// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/source/v1/source_context.proto (package google.devtools.source.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/source/v1/source_context.proto.
 */
export const file_google_devtools_source_v1_source_context: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvZGV2dG9vbHMvc291cmNlL3YxL3NvdXJjZV9jb250ZXh0LnByb3RvEhlnb29nbGUuZGV2dG9vbHMuc291cmNlLnYxIrQCCg1Tb3VyY2VDb250ZXh0EkcKCmNsb3VkX3JlcG8YASABKAsyMS5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkNsb3VkUmVwb1NvdXJjZUNvbnRleHRIABJRCg9jbG91ZF93b3Jrc3BhY2UYAiABKAsyNi5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkNsb3VkV29ya3NwYWNlU291cmNlQ29udGV4dEgAEkAKBmdlcnJpdBgDIAEoCzIuLmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuR2Vycml0U291cmNlQ29udGV4dEgAEjoKA2dpdBgGIAEoCzIrLmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuR2l0U291cmNlQ29udGV4dEgAQgkKB2NvbnRleHQizwEKFUV4dGVuZGVkU291cmNlQ29udGV4dBI5Cgdjb250ZXh0GAEgASgLMiguZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5Tb3VyY2VDb250ZXh0EkwKBmxhYmVscxgCIAMoCzI8Lmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuRXh0ZW5kZWRTb3VyY2VDb250ZXh0LkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEijAEKDEFsaWFzQ29udGV4dBI6CgRraW5kGAEgASgOMiwuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5BbGlhc0NvbnRleHQuS2luZBIMCgRuYW1lGAIgASgJIjIKBEtpbmQSBwoDQU5ZEAASCQoFRklYRUQQARILCgdNT1ZBQkxFEAISCQoFT1RIRVIQBCLLAQoWQ2xvdWRSZXBvU291cmNlQ29udGV4dBIyCgdyZXBvX2lkGAEgASgLMiEuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5SZXBvSWQSFQoLcmV2aXNpb25faWQYAiABKAlIABIYCgphbGlhc19uYW1lGAMgASgJQgIYAUgAEkAKDWFsaWFzX2NvbnRleHQYBCABKAsyJy5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkFsaWFzQ29udGV4dEgAQgoKCHJldmlzaW9uInUKG0Nsb3VkV29ya3NwYWNlU291cmNlQ29udGV4dBJBCgx3b3Jrc3BhY2VfaWQYASABKAsyKy5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkNsb3VkV29ya3NwYWNlSWQSEwoLc25hcHNob3RfaWQYAiABKAkivgEKE0dlcnJpdFNvdXJjZUNvbnRleHQSEAoIaG9zdF91cmkYASABKAkSFgoOZ2Vycml0X3Byb2plY3QYAiABKAkSFQoLcmV2aXNpb25faWQYAyABKAlIABIYCgphbGlhc19uYW1lGAQgASgJQgIYAUgAEkAKDWFsaWFzX2NvbnRleHQYBSABKAsyJy5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLkFsaWFzQ29udGV4dEgAQgoKCHJldmlzaW9uIjQKEEdpdFNvdXJjZUNvbnRleHQSCwoDdXJsGAEgASgJEhMKC3JldmlzaW9uX2lkGAIgASgJImIKBlJlcG9JZBJDCg9wcm9qZWN0X3JlcG9faWQYASABKAsyKC5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxLlByb2plY3RSZXBvSWRIABINCgN1aWQYAiABKAlIAEIECgJpZCI2Cg1Qcm9qZWN0UmVwb0lkEhIKCnByb2plY3RfaWQYASABKAkSEQoJcmVwb19uYW1lGAIgASgJIlQKEENsb3VkV29ya3NwYWNlSWQSMgoHcmVwb19pZBgBIAEoCzIhLmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuUmVwb0lkEgwKBG5hbWUYAiABKAlCvQEKHWNvbS5nb29nbGUuZGV2dG9vbHMuc291cmNlLnYxQhJTb3VyY2VDb250ZXh0UHJvdG9QAVo/Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9zb3VyY2UvdjE7c291cmNl+AEBqgIfR29vZ2xlLkNsb3VkLkRldlRvb2xzLlNvdXJjZS5WMcoCH0dvb2dsZVxDbG91ZFxEZXZUb29sc1xTb3VyY2VcVjFiBnByb3RvMw");

/**
 * A SourceContext is a reference to a tree of files. A SourceContext together
 * with a path point to a unique revision of a single file or directory.
 *
 * @generated from message google.devtools.source.v1.SourceContext
 */
export type SourceContext = Message<"google.devtools.source.v1.SourceContext"> & {
  /**
   * A SourceContext can refer any one of the following types of repositories.
   *
   * @generated from oneof google.devtools.source.v1.SourceContext.context
   */
  context: {
    /**
     * A SourceContext referring to a revision in a cloud repo.
     *
     * @generated from field: google.devtools.source.v1.CloudRepoSourceContext cloud_repo = 1;
     */
    value: CloudRepoSourceContext;
    case: "cloudRepo";
  } | {
    /**
     * A SourceContext referring to a snapshot in a cloud workspace.
     *
     * @generated from field: google.devtools.source.v1.CloudWorkspaceSourceContext cloud_workspace = 2;
     */
    value: CloudWorkspaceSourceContext;
    case: "cloudWorkspace";
  } | {
    /**
     * A SourceContext referring to a Gerrit project.
     *
     * @generated from field: google.devtools.source.v1.GerritSourceContext gerrit = 3;
     */
    value: GerritSourceContext;
    case: "gerrit";
  } | {
    /**
     * A SourceContext referring to any third party Git repo (e.g. GitHub).
     *
     * @generated from field: google.devtools.source.v1.GitSourceContext git = 6;
     */
    value: GitSourceContext;
    case: "git";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.source.v1.SourceContext.
 * Use `create(SourceContextSchema)` to create a new message.
 */
export const SourceContextSchema: GenMessage<SourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 0);

/**
 * An ExtendedSourceContext is a SourceContext combined with additional
 * details describing the context.
 *
 * @generated from message google.devtools.source.v1.ExtendedSourceContext
 */
export type ExtendedSourceContext = Message<"google.devtools.source.v1.ExtendedSourceContext"> & {
  /**
   * Any source context.
   *
   * @generated from field: google.devtools.source.v1.SourceContext context = 1;
   */
  context?: SourceContext;

  /**
   * Labels with user defined metadata.
   *
   * @generated from field: map<string, string> labels = 2;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.devtools.source.v1.ExtendedSourceContext.
 * Use `create(ExtendedSourceContextSchema)` to create a new message.
 */
export const ExtendedSourceContextSchema: GenMessage<ExtendedSourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 1);

/**
 * An alias to a repo revision.
 *
 * @generated from message google.devtools.source.v1.AliasContext
 */
export type AliasContext = Message<"google.devtools.source.v1.AliasContext"> & {
  /**
   * The alias kind.
   *
   * @generated from field: google.devtools.source.v1.AliasContext.Kind kind = 1;
   */
  kind: AliasContext_Kind;

  /**
   * The alias name.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message google.devtools.source.v1.AliasContext.
 * Use `create(AliasContextSchema)` to create a new message.
 */
export const AliasContextSchema: GenMessage<AliasContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 2);

/**
 * The type of an Alias.
 *
 * @generated from enum google.devtools.source.v1.AliasContext.Kind
 */
export enum AliasContext_Kind {
  /**
   * Do not use.
   *
   * @generated from enum value: ANY = 0;
   */
  ANY = 0,

  /**
   * Git tag
   *
   * @generated from enum value: FIXED = 1;
   */
  FIXED = 1,

  /**
   * Git branch
   *
   * @generated from enum value: MOVABLE = 2;
   */
  MOVABLE = 2,

  /**
   * OTHER is used to specify non-standard aliases, those not of the kinds
   * above. For example, if a Git repo has a ref named "refs/foo/bar", it
   * is considered to be of kind OTHER.
   *
   * @generated from enum value: OTHER = 4;
   */
  OTHER = 4,
}

/**
 * Describes the enum google.devtools.source.v1.AliasContext.Kind.
 */
export const AliasContext_KindSchema: GenEnum<AliasContext_Kind> = /*@__PURE__*/
  enumDesc(file_google_devtools_source_v1_source_context, 2, 0);

/**
 * A CloudRepoSourceContext denotes a particular revision in a cloud
 * repo (a repo hosted by the Google Cloud Platform).
 *
 * @generated from message google.devtools.source.v1.CloudRepoSourceContext
 */
export type CloudRepoSourceContext = Message<"google.devtools.source.v1.CloudRepoSourceContext"> & {
  /**
   * The ID of the repo.
   *
   * @generated from field: google.devtools.source.v1.RepoId repo_id = 1;
   */
  repoId?: RepoId;

  /**
   * A revision in a cloud repository can be identified by either its revision
   * ID or its Alias.
   *
   * @generated from oneof google.devtools.source.v1.CloudRepoSourceContext.revision
   */
  revision: {
    /**
     * A revision ID.
     *
     * @generated from field: string revision_id = 2;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * The name of an alias (branch, tag, etc.).
     *
     * @generated from field: string alias_name = 3 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "aliasName";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: google.devtools.source.v1.AliasContext alias_context = 4;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.source.v1.CloudRepoSourceContext.
 * Use `create(CloudRepoSourceContextSchema)` to create a new message.
 */
export const CloudRepoSourceContextSchema: GenMessage<CloudRepoSourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 3);

/**
 * A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
 *
 * @generated from message google.devtools.source.v1.CloudWorkspaceSourceContext
 */
export type CloudWorkspaceSourceContext = Message<"google.devtools.source.v1.CloudWorkspaceSourceContext"> & {
  /**
   * The ID of the workspace.
   *
   * @generated from field: google.devtools.source.v1.CloudWorkspaceId workspace_id = 1;
   */
  workspaceId?: CloudWorkspaceId;

  /**
   * The ID of the snapshot.
   * An empty snapshot_id refers to the most recent snapshot.
   *
   * @generated from field: string snapshot_id = 2;
   */
  snapshotId: string;
};

/**
 * Describes the message google.devtools.source.v1.CloudWorkspaceSourceContext.
 * Use `create(CloudWorkspaceSourceContextSchema)` to create a new message.
 */
export const CloudWorkspaceSourceContextSchema: GenMessage<CloudWorkspaceSourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 4);

/**
 * A SourceContext referring to a Gerrit project.
 *
 * @generated from message google.devtools.source.v1.GerritSourceContext
 */
export type GerritSourceContext = Message<"google.devtools.source.v1.GerritSourceContext"> & {
  /**
   * The URI of a running Gerrit instance.
   *
   * @generated from field: string host_uri = 1;
   */
  hostUri: string;

  /**
   * The full project name within the host. Projects may be nested, so
   * "project/subproject" is a valid project name.
   * The "repo name" is hostURI/project.
   *
   * @generated from field: string gerrit_project = 2;
   */
  gerritProject: string;

  /**
   * A revision in a Gerrit project can be identified by either its revision ID
   * or its alias.
   *
   * @generated from oneof google.devtools.source.v1.GerritSourceContext.revision
   */
  revision: {
    /**
     * A revision (commit) ID.
     *
     * @generated from field: string revision_id = 3;
     */
    value: string;
    case: "revisionId";
  } | {
    /**
     * The name of an alias (branch, tag, etc.).
     *
     * @generated from field: string alias_name = 4 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "aliasName";
  } | {
    /**
     * An alias, which may be a branch or tag.
     *
     * @generated from field: google.devtools.source.v1.AliasContext alias_context = 5;
     */
    value: AliasContext;
    case: "aliasContext";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.source.v1.GerritSourceContext.
 * Use `create(GerritSourceContextSchema)` to create a new message.
 */
export const GerritSourceContextSchema: GenMessage<GerritSourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 5);

/**
 * A GitSourceContext denotes a particular revision in a third party Git
 * repository (e.g. GitHub).
 *
 * @generated from message google.devtools.source.v1.GitSourceContext
 */
export type GitSourceContext = Message<"google.devtools.source.v1.GitSourceContext"> & {
  /**
   * Git repository URL.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Git commit hash.
   * required.
   *
   * @generated from field: string revision_id = 2;
   */
  revisionId: string;
};

/**
 * Describes the message google.devtools.source.v1.GitSourceContext.
 * Use `create(GitSourceContextSchema)` to create a new message.
 */
export const GitSourceContextSchema: GenMessage<GitSourceContext> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 6);

/**
 * A unique identifier for a cloud repo.
 *
 * @generated from message google.devtools.source.v1.RepoId
 */
export type RepoId = Message<"google.devtools.source.v1.RepoId"> & {
  /**
   * A cloud repository can be identified by either its project ID and
   * repository name combination, or its globally unique identifier.
   *
   * @generated from oneof google.devtools.source.v1.RepoId.id
   */
  id: {
    /**
     * A combination of a project ID and a repo name.
     *
     * @generated from field: google.devtools.source.v1.ProjectRepoId project_repo_id = 1;
     */
    value: ProjectRepoId;
    case: "projectRepoId";
  } | {
    /**
     * A server-assigned, globally unique identifier.
     *
     * @generated from field: string uid = 2;
     */
    value: string;
    case: "uid";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.source.v1.RepoId.
 * Use `create(RepoIdSchema)` to create a new message.
 */
export const RepoIdSchema: GenMessage<RepoId> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 7);

/**
 * Selects a repo using a Google Cloud Platform project ID
 * (e.g. winged-cargo-31) and a repo name within that project.
 *
 * @generated from message google.devtools.source.v1.ProjectRepoId
 */
export type ProjectRepoId = Message<"google.devtools.source.v1.ProjectRepoId"> & {
  /**
   * The ID of the project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * The name of the repo. Leave empty for the default repo.
   *
   * @generated from field: string repo_name = 2;
   */
  repoName: string;
};

/**
 * Describes the message google.devtools.source.v1.ProjectRepoId.
 * Use `create(ProjectRepoIdSchema)` to create a new message.
 */
export const ProjectRepoIdSchema: GenMessage<ProjectRepoId> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 8);

/**
 * A CloudWorkspaceId is a unique identifier for a cloud workspace.
 * A cloud workspace is a place associated with a repo where modified files
 * can be stored before they are committed.
 *
 * @generated from message google.devtools.source.v1.CloudWorkspaceId
 */
export type CloudWorkspaceId = Message<"google.devtools.source.v1.CloudWorkspaceId"> & {
  /**
   * The ID of the repo containing the workspace.
   *
   * @generated from field: google.devtools.source.v1.RepoId repo_id = 1;
   */
  repoId?: RepoId;

  /**
   * The unique name of the workspace within the repo.  This is the name
   * chosen by the client in the Source API's CreateWorkspace method.
   *
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Describes the message google.devtools.source.v1.CloudWorkspaceId.
 * Use `create(CloudWorkspaceIdSchema)` to create a new message.
 */
export const CloudWorkspaceIdSchema: GenMessage<CloudWorkspaceId> = /*@__PURE__*/
  messageDesc(file_google_devtools_source_v1_source_context, 9);

