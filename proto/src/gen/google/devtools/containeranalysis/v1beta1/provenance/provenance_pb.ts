// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/containeranalysis/v1beta1/provenance/provenance.proto (package grafeas.v1beta1.provenance, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { SourceContext } from "../source/source_pb";
import { file_google_devtools_containeranalysis_v1beta1_source_source } from "../source/source_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/containeranalysis/v1beta1/provenance/provenance.proto.
 */
export const file_google_devtools_containeranalysis_v1beta1_provenance_provenance: GenFile = /*@__PURE__*/
  fileDesc("CkVnb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9wcm92ZW5hbmNlL3Byb3ZlbmFuY2UucHJvdG8SGmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlItAECg9CdWlsZFByb3ZlbmFuY2USCgoCaWQYASABKAkSEgoKcHJvamVjdF9pZBgCIAEoCRI1Cghjb21tYW5kcxgDIAMoCzIjLmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlLkNvbW1hbmQSPQoPYnVpbHRfYXJ0aWZhY3RzGAQgAygLMiQuZ3JhZmVhcy52MWJldGExLnByb3ZlbmFuY2UuQXJ0aWZhY3QSLwoLY3JlYXRlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnN0YXJ0X3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEiwKCGVuZF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdjcmVhdG9yGAggASgJEhAKCGxvZ3NfdXJpGAkgASgJEj0KEXNvdXJjZV9wcm92ZW5hbmNlGAogASgLMiIuZ3JhZmVhcy52MWJldGExLnByb3ZlbmFuY2UuU291cmNlEhIKCnRyaWdnZXJfaWQYCyABKAkSVAoNYnVpbGRfb3B0aW9ucxgMIAMoCzI9LmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlLkJ1aWxkUHJvdmVuYW5jZS5CdWlsZE9wdGlvbnNFbnRyeRIXCg9idWlsZGVyX3ZlcnNpb24YDSABKAkaMwoRQnVpbGRPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLNAgoGU291cmNlEiMKG2FydGlmYWN0X3N0b3JhZ2Vfc291cmNlX3VyaRgBIAEoCRJHCgtmaWxlX2hhc2hlcxgCIAMoCzIyLmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlLlNvdXJjZS5GaWxlSGFzaGVzRW50cnkSNgoHY29udGV4dBgDIAEoCzIlLmdyYWZlYXMudjFiZXRhMS5zb3VyY2UuU291cmNlQ29udGV4dBJCChNhZGRpdGlvbmFsX2NvbnRleHRzGAQgAygLMiUuZ3JhZmVhcy52MWJldGExLnNvdXJjZS5Tb3VyY2VDb250ZXh0GlkKD0ZpbGVIYXNoZXNFbnRyeRILCgNrZXkYASABKAkSNQoFdmFsdWUYAiABKAsyJi5ncmFmZWFzLnYxYmV0YTEucHJvdmVuYW5jZS5GaWxlSGFzaGVzOgI4ASJBCgpGaWxlSGFzaGVzEjMKCWZpbGVfaGFzaBgBIAMoCzIgLmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlLkhhc2gigQEKBEhhc2gSNwoEdHlwZRgBIAEoDjIpLmdyYWZlYXMudjFiZXRhMS5wcm92ZW5hbmNlLkhhc2guSGFzaFR5cGUSDQoFdmFsdWUYAiABKAwiMQoISGFzaFR5cGUSGQoVSEFTSF9UWVBFX1VOU1BFQ0lGSUVEEAASCgoGU0hBMjU2EAEiXQoHQ29tbWFuZBIMCgRuYW1lGAEgASgJEgsKA2VudhgCIAMoCRIMCgRhcmdzGAMgAygJEgsKA2RpchgEIAEoCRIKCgJpZBgFIAEoCRIQCgh3YWl0X2ZvchgGIAMoCSI3CghBcnRpZmFjdBIQCghjaGVja3N1bRgBIAEoCRIKCgJpZBgCIAEoCRINCgVuYW1lcxgDIAMoCUKBAQodaW8uZ3JhZmVhcy52MWJldGExLnByb3ZlbmFuY2VQAVpYY2xvdWQuZ29vZ2xlLmNvbS9nby9jb250YWluZXJhbmFseXNpcy9hcGl2MWJldGExL2NvbnRhaW5lcmFuYWx5c2lzcGI7Y29udGFpbmVyYW5hbHlzaXNwYqICA0dSQWIGcHJvdG8z", [file_google_devtools_containeranalysis_v1beta1_source_source, file_google_protobuf_timestamp]);

/**
 * Provenance of a build. Contains all information needed to verify the full
 * details about the build from source to completion.
 *
 * @generated from message grafeas.v1beta1.provenance.BuildProvenance
 */
export type BuildProvenance = Message<"grafeas.v1beta1.provenance.BuildProvenance"> & {
  /**
   * Required. Unique identifier of the build.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * ID of the project.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Commands requested by the build.
   *
   * @generated from field: repeated grafeas.v1beta1.provenance.Command commands = 3;
   */
  commands: Command[];

  /**
   * Output of the build.
   *
   * @generated from field: repeated grafeas.v1beta1.provenance.Artifact built_artifacts = 4;
   */
  builtArtifacts: Artifact[];

  /**
   * Time at which the build was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * Time at which execution of the build was started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 6;
   */
  startTime?: Timestamp;

  /**
   * Time at which execution of the build was finished.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 7;
   */
  endTime?: Timestamp;

  /**
   * E-mail address of the user who initiated this build. Note that this was the
   * user's e-mail address at the time the build was initiated; this address may
   * not represent the same end-user for all time.
   *
   * @generated from field: string creator = 8;
   */
  creator: string;

  /**
   * URI where any logs for this provenance were written.
   *
   * @generated from field: string logs_uri = 9;
   */
  logsUri: string;

  /**
   * Details of the Source input to the build.
   *
   * @generated from field: grafeas.v1beta1.provenance.Source source_provenance = 10;
   */
  sourceProvenance?: Source;

  /**
   * Trigger identifier if the build was triggered automatically; empty if not.
   *
   * @generated from field: string trigger_id = 11;
   */
  triggerId: string;

  /**
   * Special options applied to this build. This is a catch-all field where
   * build providers can enter any desired additional details.
   *
   * @generated from field: map<string, string> build_options = 12;
   */
  buildOptions: { [key: string]: string };

  /**
   * Version string of the builder at the time this build was executed.
   *
   * @generated from field: string builder_version = 13;
   */
  builderVersion: string;
};

/**
 * Describes the message grafeas.v1beta1.provenance.BuildProvenance.
 * Use `create(BuildProvenanceSchema)` to create a new message.
 */
export const BuildProvenanceSchema: GenMessage<BuildProvenance> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 0);

/**
 * Source describes the location of the source used for the build.
 *
 * @generated from message grafeas.v1beta1.provenance.Source
 */
export type Source = Message<"grafeas.v1beta1.provenance.Source"> & {
  /**
   * If provided, the input binary artifacts for the build came from this
   * location.
   *
   * @generated from field: string artifact_storage_source_uri = 1;
   */
  artifactStorageSourceUri: string;

  /**
   * Hash(es) of the build source, which can be used to verify that the original
   * source integrity was maintained in the build.
   *
   * The keys to this map are file paths used as build source and the values
   * contain the hash values for those files.
   *
   * If the build source came in a single package such as a gzipped tarfile
   * (.tar.gz), the FileHash will be for the single path to that file.
   *
   * @generated from field: map<string, grafeas.v1beta1.provenance.FileHashes> file_hashes = 2;
   */
  fileHashes: { [key: string]: FileHashes };

  /**
   * If provided, the source code used for the build came from this location.
   *
   * @generated from field: grafeas.v1beta1.source.SourceContext context = 3;
   */
  context?: SourceContext;

  /**
   * If provided, some of the source code used for the build may be found in
   * these locations, in the case where the source repository had multiple
   * remotes or submodules. This list will not include the context specified in
   * the context field.
   *
   * @generated from field: repeated grafeas.v1beta1.source.SourceContext additional_contexts = 4;
   */
  additionalContexts: SourceContext[];
};

/**
 * Describes the message grafeas.v1beta1.provenance.Source.
 * Use `create(SourceSchema)` to create a new message.
 */
export const SourceSchema: GenMessage<Source> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 1);

/**
 * Container message for hashes of byte content of files, used in source
 * messages to verify integrity of source input to the build.
 *
 * @generated from message grafeas.v1beta1.provenance.FileHashes
 */
export type FileHashes = Message<"grafeas.v1beta1.provenance.FileHashes"> & {
  /**
   * Required. Collection of file hashes.
   *
   * @generated from field: repeated grafeas.v1beta1.provenance.Hash file_hash = 1;
   */
  fileHash: Hash[];
};

/**
 * Describes the message grafeas.v1beta1.provenance.FileHashes.
 * Use `create(FileHashesSchema)` to create a new message.
 */
export const FileHashesSchema: GenMessage<FileHashes> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 2);

/**
 * Container message for hash values.
 *
 * @generated from message grafeas.v1beta1.provenance.Hash
 */
export type Hash = Message<"grafeas.v1beta1.provenance.Hash"> & {
  /**
   * Required. The type of hash that was performed.
   *
   * @generated from field: grafeas.v1beta1.provenance.Hash.HashType type = 1;
   */
  type: Hash_HashType;

  /**
   * Required. The hash value.
   *
   * @generated from field: bytes value = 2;
   */
  value: Uint8Array;
};

/**
 * Describes the message grafeas.v1beta1.provenance.Hash.
 * Use `create(HashSchema)` to create a new message.
 */
export const HashSchema: GenMessage<Hash> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 3);

/**
 * Specifies the hash algorithm.
 *
 * @generated from enum grafeas.v1beta1.provenance.Hash.HashType
 */
export enum Hash_HashType {
  /**
   * Unknown.
   *
   * @generated from enum value: HASH_TYPE_UNSPECIFIED = 0;
   */
  HASH_TYPE_UNSPECIFIED = 0,

  /**
   * A SHA-256 hash.
   *
   * @generated from enum value: SHA256 = 1;
   */
  SHA256 = 1,
}

/**
 * Describes the enum grafeas.v1beta1.provenance.Hash.HashType.
 */
export const Hash_HashTypeSchema: GenEnum<Hash_HashType> = /*@__PURE__*/
  enumDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 3, 0);

/**
 * Command describes a step performed as part of the build pipeline.
 *
 * @generated from message grafeas.v1beta1.provenance.Command
 */
export type Command = Message<"grafeas.v1beta1.provenance.Command"> & {
  /**
   * Required. Name of the command, as presented on the command line, or if the
   * command is packaged as a Docker container, as presented to `docker pull`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Environment variables set before running this command.
   *
   * @generated from field: repeated string env = 2;
   */
  env: string[];

  /**
   * Command-line arguments used when executing this command.
   *
   * @generated from field: repeated string args = 3;
   */
  args: string[];

  /**
   * Working directory (relative to project source root) used when running this
   * command.
   *
   * @generated from field: string dir = 4;
   */
  dir: string;

  /**
   * Optional unique identifier for this command, used in wait_for to reference
   * this command as a dependency.
   *
   * @generated from field: string id = 5;
   */
  id: string;

  /**
   * The ID(s) of the command(s) that this command depends on.
   *
   * @generated from field: repeated string wait_for = 6;
   */
  waitFor: string[];
};

/**
 * Describes the message grafeas.v1beta1.provenance.Command.
 * Use `create(CommandSchema)` to create a new message.
 */
export const CommandSchema: GenMessage<Command> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 4);

/**
 * Artifact describes a build product.
 *
 * @generated from message grafeas.v1beta1.provenance.Artifact
 */
export type Artifact = Message<"grafeas.v1beta1.provenance.Artifact"> & {
  /**
   * Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
   * container.
   *
   * @generated from field: string checksum = 1;
   */
  checksum: string;

  /**
   * Artifact ID, if any; for container images, this will be a URL by digest
   * like `gcr.io/projectID/imagename@sha256:123456`.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * Related artifact names. This may be the path to a binary or jar file, or in
   * the case of a container build, the name used to push the container image to
   * Google Container Registry, as presented to `docker push`. Note that a
   * single Artifact ID can have multiple names, for example if two tags are
   * applied to one image.
   *
   * @generated from field: repeated string names = 3;
   */
  names: string[];
};

/**
 * Describes the message grafeas.v1beta1.provenance.Artifact.
 * Use `create(ArtifactSchema)` to create a new message.
 */
export const ArtifactSchema: GenMessage<Artifact> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_provenance_provenance, 5);

