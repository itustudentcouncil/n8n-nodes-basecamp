// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/containeranalysis/v1beta1/common/common.proto (package grafeas.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/containeranalysis/v1beta1/common/common.proto.
 */
export const file_google_devtools_containeranalysis_v1beta1_common_common: GenFile = /*@__PURE__*/
  fileDesc("Cj1nb29nbGUvZGV2dG9vbHMvY29udGFpbmVyYW5hbHlzaXMvdjFiZXRhMS9jb21tb24vY29tbW9uLnByb3RvEg9ncmFmZWFzLnYxYmV0YTEiKAoKUmVsYXRlZFVybBILCgN1cmwYASABKAkSDQoFbGFiZWwYAiABKAkiNQoJU2lnbmF0dXJlEhEKCXNpZ25hdHVyZRgBIAEoDBIVCg1wdWJsaWNfa2V5X2lkGAIgASgJKosBCghOb3RlS2luZBIZChVOT1RFX0tJTkRfVU5TUEVDSUZJRUQQABIRCg1WVUxORVJBQklMSVRZEAESCQoFQlVJTEQQAhIJCgVJTUFHRRADEgsKB1BBQ0tBR0UQBBIOCgpERVBMT1lNRU5UEAUSDQoJRElTQ09WRVJZEAYSDwoLQVRURVNUQVRJT04QB0J9Chlpby5ncmFmZWFzLnYxYmV0YTEuY29tbW9uUAFaWGNsb3VkLmdvb2dsZS5jb20vZ28vY29udGFpbmVyYW5hbHlzaXMvYXBpdjFiZXRhMS9jb250YWluZXJhbmFseXNpc3BiO2NvbnRhaW5lcmFuYWx5c2lzcGKiAgNHUkFiBnByb3RvMw");

/**
 * Metadata for any related URL information.
 *
 * @generated from message grafeas.v1beta1.RelatedUrl
 */
export type RelatedUrl = Message<"grafeas.v1beta1.RelatedUrl"> & {
  /**
   * Specific URL associated with the resource.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * Label to describe usage of the URL.
   *
   * @generated from field: string label = 2;
   */
  label: string;
};

/**
 * Describes the message grafeas.v1beta1.RelatedUrl.
 * Use `create(RelatedUrlSchema)` to create a new message.
 */
export const RelatedUrlSchema: GenMessage<RelatedUrl> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_common_common, 0);

/**
 * Verifiers (e.g. Kritis implementations) MUST verify signatures
 * with respect to the trust anchors defined in policy (e.g. a Kritis policy).
 * Typically this means that the verifier has been configured with a map from
 * `public_key_id` to public key material (and any required parameters, e.g.
 * signing algorithm).
 *
 * In particular, verification implementations MUST NOT treat the signature
 * `public_key_id` as anything more than a key lookup hint. The `public_key_id`
 * DOES NOT validate or authenticate a public key; it only provides a mechanism
 * for quickly selecting a public key ALREADY CONFIGURED on the verifier through
 * a trusted channel. Verification implementations MUST reject signatures in any
 * of the following circumstances:
 *   * The `public_key_id` is not recognized by the verifier.
 *   * The public key that `public_key_id` refers to does not verify the
 *     signature with respect to the payload.
 *
 * The `signature` contents SHOULD NOT be "attached" (where the payload is
 * included with the serialized `signature` bytes). Verifiers MUST ignore any
 * "attached" payload and only verify signatures with respect to explicitly
 * provided payload (e.g. a `payload` field on the proto message that holds
 * this Signature, or the canonical serialization of the proto message that
 * holds this signature).
 *
 * @generated from message grafeas.v1beta1.Signature
 */
export type Signature = Message<"grafeas.v1beta1.Signature"> & {
  /**
   * The content of the signature, an opaque bytestring.
   * The payload that this signature verifies MUST be unambiguously provided
   * with the Signature during verification. A wrapper message might provide
   * the payload explicitly. Alternatively, a message might have a canonical
   * serialization that can always be unambiguously computed to derive the
   * payload.
   *
   * @generated from field: bytes signature = 1;
   */
  signature: Uint8Array;

  /**
   * The identifier for the public key that verifies this signature.
   *   * The `public_key_id` is required.
   *   * The `public_key_id` MUST be an RFC3986 conformant URI.
   *   * When possible, the `public_key_id` SHOULD be an immutable reference,
   *     such as a cryptographic digest.
   *
   * Examples of valid `public_key_id`s:
   *
   * OpenPGP V4 public key fingerprint:
   *   * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA"
   * See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more
   * details on this scheme.
   *
   * RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER
   * serialization):
   *   * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU"
   *   * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
   *
   * @generated from field: string public_key_id = 2;
   */
  publicKeyId: string;
};

/**
 * Describes the message grafeas.v1beta1.Signature.
 * Use `create(SignatureSchema)` to create a new message.
 */
export const SignatureSchema: GenMessage<Signature> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_common_common, 1);

/**
 * Kind represents the kinds of notes supported.
 *
 * @generated from enum grafeas.v1beta1.NoteKind
 */
export enum NoteKind {
  /**
   * Unknown.
   *
   * @generated from enum value: NOTE_KIND_UNSPECIFIED = 0;
   */
  NOTE_KIND_UNSPECIFIED = 0,

  /**
   * The note and occurrence represent a package vulnerability.
   *
   * @generated from enum value: VULNERABILITY = 1;
   */
  VULNERABILITY = 1,

  /**
   * The note and occurrence assert build provenance.
   *
   * @generated from enum value: BUILD = 2;
   */
  BUILD = 2,

  /**
   * This represents an image basis relationship.
   *
   * @generated from enum value: IMAGE = 3;
   */
  IMAGE = 3,

  /**
   * This represents a package installed via a package manager.
   *
   * @generated from enum value: PACKAGE = 4;
   */
  PACKAGE = 4,

  /**
   * The note and occurrence track deployment events.
   *
   * @generated from enum value: DEPLOYMENT = 5;
   */
  DEPLOYMENT = 5,

  /**
   * The note and occurrence track the initial discovery status of a resource.
   *
   * @generated from enum value: DISCOVERY = 6;
   */
  DISCOVERY = 6,

  /**
   * This represents a logical "role" that can attest to artifacts.
   *
   * @generated from enum value: ATTESTATION = 7;
   */
  ATTESTATION = 7,
}

/**
 * Describes the enum grafeas.v1beta1.NoteKind.
 */
export const NoteKindSchema: GenEnum<NoteKind> = /*@__PURE__*/
  enumDesc(file_google_devtools_containeranalysis_v1beta1_common_common, 0);

