// Copyright 2018 The Grafeas Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto (package grafeas.v1beta1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import type { Authority, Details as Details$6 } from "../attestation/attestation_pb";
import { file_google_devtools_containeranalysis_v1beta1_attestation_attestation } from "../attestation/attestation_pb";
import type { Build, Details as Details$1 } from "../build/build_pb";
import { file_google_devtools_containeranalysis_v1beta1_build_build } from "../build/build_pb";
import type { NoteKind, RelatedUrl } from "../common/common_pb";
import { file_google_devtools_containeranalysis_v1beta1_common_common } from "../common/common_pb";
import type { Deployable, Details as Details$4 } from "../deployment/deployment_pb";
import { file_google_devtools_containeranalysis_v1beta1_deployment_deployment } from "../deployment/deployment_pb";
import type { Details as Details$5, Discovery } from "../discovery/discovery_pb";
import { file_google_devtools_containeranalysis_v1beta1_discovery_discovery } from "../discovery/discovery_pb";
import type { Basis, Details as Details$2 } from "../image/image_pb";
import { file_google_devtools_containeranalysis_v1beta1_image_image } from "../image/image_pb";
import type { Details as Details$3, Package } from "../package/package_pb";
import { file_google_devtools_containeranalysis_v1beta1_package_package } from "../package/package_pb";
import type { Hash } from "../provenance/provenance_pb";
import { file_google_devtools_containeranalysis_v1beta1_provenance_provenance } from "../provenance/provenance_pb";
import type { Details, Severity, Vulnerability } from "../vulnerability/vulnerability_pb";
import { file_google_devtools_containeranalysis_v1beta1_vulnerability_vulnerability } from "../vulnerability/vulnerability_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/containeranalysis/v1beta1/grafeas/grafeas.proto.
 */
export const file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_devtools_containeranalysis_v1beta1_attestation_attestation, file_google_devtools_containeranalysis_v1beta1_build_build, file_google_devtools_containeranalysis_v1beta1_common_common, file_google_devtools_containeranalysis_v1beta1_deployment_deployment, file_google_devtools_containeranalysis_v1beta1_discovery_discovery, file_google_devtools_containeranalysis_v1beta1_image_image, file_google_devtools_containeranalysis_v1beta1_package_package, file_google_devtools_containeranalysis_v1beta1_provenance_provenance, file_google_devtools_containeranalysis_v1beta1_vulnerability_vulnerability, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * An instance of an analysis type that has been found on a resource.
 *
 * @generated from message grafeas.v1beta1.Occurrence
 */
export type Occurrence = Message<"grafeas.v1beta1.Occurrence"> & {
  /**
   * Output only. The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Immutable. The resource for which the occurrence applies.
   *
   * @generated from field: grafeas.v1beta1.Resource resource = 2;
   */
  resource?: Resource;

  /**
   * Required. Immutable. The analysis note associated with this occurrence, in
   * the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be
   * used as a filter in list requests.
   *
   * @generated from field: string note_name = 3;
   */
  noteName: string;

  /**
   * Output only. This explicitly denotes which of the occurrence details are
   * specified. This field can be used as a filter in list requests.
   *
   * @generated from field: grafeas.v1beta1.NoteKind kind = 4;
   */
  kind: NoteKind;

  /**
   * A description of actions that can be taken to remedy the note.
   *
   * @generated from field: string remediation = 5;
   */
  remediation: string;

  /**
   * Output only. The time this occurrence was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time this occurrence was last updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 7;
   */
  updateTime?: Timestamp;

  /**
   * Required. Immutable. Describes the details of the note kind found on this
   * resource.
   *
   * @generated from oneof grafeas.v1beta1.Occurrence.details
   */
  details: {
    /**
     * Describes a security vulnerability.
     *
     * @generated from field: grafeas.v1beta1.vulnerability.Details vulnerability = 8;
     */
    value: Details;
    case: "vulnerability";
  } | {
    /**
     * Describes a verifiable build.
     *
     * @generated from field: grafeas.v1beta1.build.Details build = 9;
     */
    value: Details$1;
    case: "build";
  } | {
    /**
     * Describes how this resource derives from the basis in the associated
     * note.
     *
     * @generated from field: grafeas.v1beta1.image.Details derived_image = 10;
     */
    value: Details$2;
    case: "derivedImage";
  } | {
    /**
     * Describes the installation of a package on the linked resource.
     *
     * @generated from field: grafeas.v1beta1.package.Details installation = 11;
     */
    value: Details$3;
    case: "installation";
  } | {
    /**
     * Describes the deployment of an artifact on a runtime.
     *
     * @generated from field: grafeas.v1beta1.deployment.Details deployment = 12;
     */
    value: Details$4;
    case: "deployment";
  } | {
    /**
     * Describes when a resource was discovered.
     *
     * @generated from field: grafeas.v1beta1.discovery.Details discovered = 13;
     */
    value: Details$5;
    case: "discovered";
  } | {
    /**
     * Describes an attestation of an artifact.
     *
     * @generated from field: grafeas.v1beta1.attestation.Details attestation = 14;
     */
    value: Details$6;
    case: "attestation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1beta1.Occurrence.
 * Use `create(OccurrenceSchema)` to create a new message.
 */
export const OccurrenceSchema: GenMessage<Occurrence> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 0);

/**
 * An entity that can have metadata. For example, a Docker image.
 *
 * @generated from message grafeas.v1beta1.Resource
 */
export type Resource = Message<"grafeas.v1beta1.Resource"> & {
  /**
   * The name of the resource. For example, the name of a Docker image -
   * "Debian".
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The unique URI of the resource. For example,
   * `https://gcr.io/project/image@sha256:foo` for a Docker image.
   *
   * @generated from field: string uri = 2;
   */
  uri: string;

  /**
   * The hash of the resource content. For example, the Docker digest.
   *
   * @generated from field: grafeas.v1beta1.provenance.Hash content_hash = 3;
   */
  contentHash?: Hash;
};

/**
 * Describes the message grafeas.v1beta1.Resource.
 * Use `create(ResourceSchema)` to create a new message.
 */
export const ResourceSchema: GenMessage<Resource> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 1);

/**
 * A type of analysis that can be done for a resource.
 *
 * @generated from message grafeas.v1beta1.Note
 */
export type Note = Message<"grafeas.v1beta1.Note"> & {
  /**
   * Output only. The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A one sentence description of this note.
   *
   * @generated from field: string short_description = 2;
   */
  shortDescription: string;

  /**
   * A detailed description of this note.
   *
   * @generated from field: string long_description = 3;
   */
  longDescription: string;

  /**
   * Output only. The type of analysis. This field can be used as a filter in
   * list requests.
   *
   * @generated from field: grafeas.v1beta1.NoteKind kind = 4;
   */
  kind: NoteKind;

  /**
   * URLs associated with this note.
   *
   * @generated from field: repeated grafeas.v1beta1.RelatedUrl related_url = 5;
   */
  relatedUrl: RelatedUrl[];

  /**
   * Time of expiration for this note. Empty if note does not expire.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 6;
   */
  expirationTime?: Timestamp;

  /**
   * Output only. The time this note was created. This field can be used as a
   * filter in list requests.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time this note was last updated. This field can be used as
   * a filter in list requests.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * Other notes related to this note.
   *
   * @generated from field: repeated string related_note_names = 9;
   */
  relatedNoteNames: string[];

  /**
   * Required. Immutable. The type of analysis this note represents.
   *
   * @generated from oneof grafeas.v1beta1.Note.type
   */
  type: {
    /**
     * A note describing a package vulnerability.
     *
     * @generated from field: grafeas.v1beta1.vulnerability.Vulnerability vulnerability = 10;
     */
    value: Vulnerability;
    case: "vulnerability";
  } | {
    /**
     * A note describing build provenance for a verifiable build.
     *
     * @generated from field: grafeas.v1beta1.build.Build build = 11;
     */
    value: Build;
    case: "build";
  } | {
    /**
     * A note describing a base image.
     *
     * @generated from field: grafeas.v1beta1.image.Basis base_image = 12;
     */
    value: Basis;
    case: "baseImage";
  } | {
    /**
     * A note describing a package hosted by various package managers.
     *
     * @generated from field: grafeas.v1beta1.package.Package package = 13;
     */
    value: Package;
    case: "package";
  } | {
    /**
     * A note describing something that can be deployed.
     *
     * @generated from field: grafeas.v1beta1.deployment.Deployable deployable = 14;
     */
    value: Deployable;
    case: "deployable";
  } | {
    /**
     * A note describing the initial analysis of a resource.
     *
     * @generated from field: grafeas.v1beta1.discovery.Discovery discovery = 15;
     */
    value: Discovery;
    case: "discovery";
  } | {
    /**
     * A note describing an attestation role.
     *
     * @generated from field: grafeas.v1beta1.attestation.Authority attestation_authority = 16;
     */
    value: Authority;
    case: "attestationAuthority";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message grafeas.v1beta1.Note.
 * Use `create(NoteSchema)` to create a new message.
 */
export const NoteSchema: GenMessage<Note> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 2);

/**
 * Request to get an occurrence.
 *
 * @generated from message grafeas.v1beta1.GetOccurrenceRequest
 */
export type GetOccurrenceRequest = Message<"grafeas.v1beta1.GetOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1beta1.GetOccurrenceRequest.
 * Use `create(GetOccurrenceRequestSchema)` to create a new message.
 */
export const GetOccurrenceRequestSchema: GenMessage<GetOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 3);

/**
 * Request to list occurrences.
 *
 * @generated from message grafeas.v1beta1.ListOccurrencesRequest
 */
export type ListOccurrencesRequest = Message<"grafeas.v1beta1.ListOccurrencesRequest"> & {
  /**
   * The name of the project to list occurrences for in the form of
   * `projects/[PROJECT_ID]`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of occurrences to return in the list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListOccurrencesRequest.
 * Use `create(ListOccurrencesRequestSchema)` to create a new message.
 */
export const ListOccurrencesRequestSchema: GenMessage<ListOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 4);

/**
 * Response for listing occurrences.
 *
 * @generated from message grafeas.v1beta1.ListOccurrencesResponse
 */
export type ListOccurrencesResponse = Message<"grafeas.v1beta1.ListOccurrencesResponse"> & {
  /**
   * The occurrences requested.
   *
   * @generated from field: repeated grafeas.v1beta1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];

  /**
   * The next pagination token in the list response. It should be used as
   * `page_token` for the following request. An empty value means no more
   * results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListOccurrencesResponse.
 * Use `create(ListOccurrencesResponseSchema)` to create a new message.
 */
export const ListOccurrencesResponseSchema: GenMessage<ListOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 5);

/**
 * Request to delete a occurrence.
 *
 * @generated from message grafeas.v1beta1.DeleteOccurrenceRequest
 */
export type DeleteOccurrenceRequest = Message<"grafeas.v1beta1.DeleteOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1beta1.DeleteOccurrenceRequest.
 * Use `create(DeleteOccurrenceRequestSchema)` to create a new message.
 */
export const DeleteOccurrenceRequestSchema: GenMessage<DeleteOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 6);

/**
 * Request to create a new occurrence.
 *
 * @generated from message grafeas.v1beta1.CreateOccurrenceRequest
 */
export type CreateOccurrenceRequest = Message<"grafeas.v1beta1.CreateOccurrenceRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the occurrence is to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The occurrence to create.
   *
   * @generated from field: grafeas.v1beta1.Occurrence occurrence = 2;
   */
  occurrence?: Occurrence;
};

/**
 * Describes the message grafeas.v1beta1.CreateOccurrenceRequest.
 * Use `create(CreateOccurrenceRequestSchema)` to create a new message.
 */
export const CreateOccurrenceRequestSchema: GenMessage<CreateOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 7);

/**
 * Request to update an occurrence.
 *
 * @generated from message grafeas.v1beta1.UpdateOccurrenceRequest
 */
export type UpdateOccurrenceRequest = Message<"grafeas.v1beta1.UpdateOccurrenceRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The updated occurrence.
   *
   * @generated from field: grafeas.v1beta1.Occurrence occurrence = 2;
   */
  occurrence?: Occurrence;

  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message grafeas.v1beta1.UpdateOccurrenceRequest.
 * Use `create(UpdateOccurrenceRequestSchema)` to create a new message.
 */
export const UpdateOccurrenceRequestSchema: GenMessage<UpdateOccurrenceRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 8);

/**
 * Request to get a note.
 *
 * @generated from message grafeas.v1beta1.GetNoteRequest
 */
export type GetNoteRequest = Message<"grafeas.v1beta1.GetNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1beta1.GetNoteRequest.
 * Use `create(GetNoteRequestSchema)` to create a new message.
 */
export const GetNoteRequestSchema: GenMessage<GetNoteRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 9);

/**
 * Request to get the note to which the specified occurrence is attached.
 *
 * @generated from message grafeas.v1beta1.GetOccurrenceNoteRequest
 */
export type GetOccurrenceNoteRequest = Message<"grafeas.v1beta1.GetOccurrenceNoteRequest"> & {
  /**
   * The name of the occurrence in the form of
   * `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1beta1.GetOccurrenceNoteRequest.
 * Use `create(GetOccurrenceNoteRequestSchema)` to create a new message.
 */
export const GetOccurrenceNoteRequestSchema: GenMessage<GetOccurrenceNoteRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 10);

/**
 * Request to list notes.
 *
 * @generated from message grafeas.v1beta1.ListNotesRequest
 */
export type ListNotesRequest = Message<"grafeas.v1beta1.ListNotesRequest"> & {
  /**
   * The name of the project to list notes for in the form of
   * `projects/[PROJECT_ID]`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of notes to return in the list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListNotesRequest.
 * Use `create(ListNotesRequestSchema)` to create a new message.
 */
export const ListNotesRequestSchema: GenMessage<ListNotesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 11);

/**
 * Response for listing notes.
 *
 * @generated from message grafeas.v1beta1.ListNotesResponse
 */
export type ListNotesResponse = Message<"grafeas.v1beta1.ListNotesResponse"> & {
  /**
   * The notes requested.
   *
   * @generated from field: repeated grafeas.v1beta1.Note notes = 1;
   */
  notes: Note[];

  /**
   * The next pagination token in the list response. It should be used as
   * `page_token` for the following request. An empty value means no more
   * results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListNotesResponse.
 * Use `create(ListNotesResponseSchema)` to create a new message.
 */
export const ListNotesResponseSchema: GenMessage<ListNotesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 12);

/**
 * Request to delete a note.
 *
 * @generated from message grafeas.v1beta1.DeleteNoteRequest
 */
export type DeleteNoteRequest = Message<"grafeas.v1beta1.DeleteNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message grafeas.v1beta1.DeleteNoteRequest.
 * Use `create(DeleteNoteRequestSchema)` to create a new message.
 */
export const DeleteNoteRequestSchema: GenMessage<DeleteNoteRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 13);

/**
 * Request to create a new note.
 *
 * @generated from message grafeas.v1beta1.CreateNoteRequest
 */
export type CreateNoteRequest = Message<"grafeas.v1beta1.CreateNoteRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the note is to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The ID to use for this note.
   *
   * @generated from field: string note_id = 2;
   */
  noteId: string;

  /**
   * The note to create.
   *
   * @generated from field: grafeas.v1beta1.Note note = 3;
   */
  note?: Note;
};

/**
 * Describes the message grafeas.v1beta1.CreateNoteRequest.
 * Use `create(CreateNoteRequestSchema)` to create a new message.
 */
export const CreateNoteRequestSchema: GenMessage<CreateNoteRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 14);

/**
 * Request to update a note.
 *
 * @generated from message grafeas.v1beta1.UpdateNoteRequest
 */
export type UpdateNoteRequest = Message<"grafeas.v1beta1.UpdateNoteRequest"> & {
  /**
   * The name of the note in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The updated note.
   *
   * @generated from field: grafeas.v1beta1.Note note = 2;
   */
  note?: Note;

  /**
   * The fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message grafeas.v1beta1.UpdateNoteRequest.
 * Use `create(UpdateNoteRequestSchema)` to create a new message.
 */
export const UpdateNoteRequestSchema: GenMessage<UpdateNoteRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 15);

/**
 * Request to list occurrences for a note.
 *
 * @generated from message grafeas.v1beta1.ListNoteOccurrencesRequest
 */
export type ListNoteOccurrencesRequest = Message<"grafeas.v1beta1.ListNoteOccurrencesRequest"> & {
  /**
   * The name of the note to list occurrences for in the form of
   * `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of occurrences to return in the list.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListNoteOccurrencesRequest.
 * Use `create(ListNoteOccurrencesRequestSchema)` to create a new message.
 */
export const ListNoteOccurrencesRequestSchema: GenMessage<ListNoteOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 16);

/**
 * Response for listing occurrences for a note.
 *
 * @generated from message grafeas.v1beta1.ListNoteOccurrencesResponse
 */
export type ListNoteOccurrencesResponse = Message<"grafeas.v1beta1.ListNoteOccurrencesResponse"> & {
  /**
   * The occurrences attached to the specified note.
   *
   * @generated from field: repeated grafeas.v1beta1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];

  /**
   * Token to provide to skip to a particular spot in the list.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message grafeas.v1beta1.ListNoteOccurrencesResponse.
 * Use `create(ListNoteOccurrencesResponseSchema)` to create a new message.
 */
export const ListNoteOccurrencesResponseSchema: GenMessage<ListNoteOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 17);

/**
 * Request to create notes in batch.
 *
 * @generated from message grafeas.v1beta1.BatchCreateNotesRequest
 */
export type BatchCreateNotesRequest = Message<"grafeas.v1beta1.BatchCreateNotesRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the notes are to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The notes to create.
   *
   * @generated from field: map<string, grafeas.v1beta1.Note> notes = 2;
   */
  notes: { [key: string]: Note };
};

/**
 * Describes the message grafeas.v1beta1.BatchCreateNotesRequest.
 * Use `create(BatchCreateNotesRequestSchema)` to create a new message.
 */
export const BatchCreateNotesRequestSchema: GenMessage<BatchCreateNotesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 18);

/**
 * Response for creating notes in batch.
 *
 * @generated from message grafeas.v1beta1.BatchCreateNotesResponse
 */
export type BatchCreateNotesResponse = Message<"grafeas.v1beta1.BatchCreateNotesResponse"> & {
  /**
   * The notes that were created.
   *
   * @generated from field: repeated grafeas.v1beta1.Note notes = 1;
   */
  notes: Note[];
};

/**
 * Describes the message grafeas.v1beta1.BatchCreateNotesResponse.
 * Use `create(BatchCreateNotesResponseSchema)` to create a new message.
 */
export const BatchCreateNotesResponseSchema: GenMessage<BatchCreateNotesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 19);

/**
 * Request to create occurrences in batch.
 *
 * @generated from message grafeas.v1beta1.BatchCreateOccurrencesRequest
 */
export type BatchCreateOccurrencesRequest = Message<"grafeas.v1beta1.BatchCreateOccurrencesRequest"> & {
  /**
   * The name of the project in the form of `projects/[PROJECT_ID]`, under which
   * the occurrences are to be created.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The occurrences to create.
   *
   * @generated from field: repeated grafeas.v1beta1.Occurrence occurrences = 2;
   */
  occurrences: Occurrence[];
};

/**
 * Describes the message grafeas.v1beta1.BatchCreateOccurrencesRequest.
 * Use `create(BatchCreateOccurrencesRequestSchema)` to create a new message.
 */
export const BatchCreateOccurrencesRequestSchema: GenMessage<BatchCreateOccurrencesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 20);

/**
 * Response for creating occurrences in batch.
 *
 * @generated from message grafeas.v1beta1.BatchCreateOccurrencesResponse
 */
export type BatchCreateOccurrencesResponse = Message<"grafeas.v1beta1.BatchCreateOccurrencesResponse"> & {
  /**
   * The occurrences that were created.
   *
   * @generated from field: repeated grafeas.v1beta1.Occurrence occurrences = 1;
   */
  occurrences: Occurrence[];
};

/**
 * Describes the message grafeas.v1beta1.BatchCreateOccurrencesResponse.
 * Use `create(BatchCreateOccurrencesResponseSchema)` to create a new message.
 */
export const BatchCreateOccurrencesResponseSchema: GenMessage<BatchCreateOccurrencesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 21);

/**
 * Request to get a vulnerability summary for some set of occurrences.
 *
 * @generated from message grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest
 */
export type GetVulnerabilityOccurrencesSummaryRequest = Message<"grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest"> & {
  /**
   * The name of the project to get a vulnerability summary for in the form of
   * `projects/[PROJECT_ID]`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The filter expression.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;
};

/**
 * Describes the message grafeas.v1beta1.GetVulnerabilityOccurrencesSummaryRequest.
 * Use `create(GetVulnerabilityOccurrencesSummaryRequestSchema)` to create a new message.
 */
export const GetVulnerabilityOccurrencesSummaryRequestSchema: GenMessage<GetVulnerabilityOccurrencesSummaryRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 22);

/**
 * A summary of how many vulnerability occurrences there are per resource and
 * severity type.
 *
 * @generated from message grafeas.v1beta1.VulnerabilityOccurrencesSummary
 */
export type VulnerabilityOccurrencesSummary = Message<"grafeas.v1beta1.VulnerabilityOccurrencesSummary"> & {
  /**
   * A listing by resource of the number of fixable and total vulnerabilities.
   *
   * @generated from field: repeated grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest counts = 1;
   */
  counts: VulnerabilityOccurrencesSummary_FixableTotalByDigest[];
};

/**
 * Describes the message grafeas.v1beta1.VulnerabilityOccurrencesSummary.
 * Use `create(VulnerabilityOccurrencesSummarySchema)` to create a new message.
 */
export const VulnerabilityOccurrencesSummarySchema: GenMessage<VulnerabilityOccurrencesSummary> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 23);

/**
 * Per resource and severity counts of fixable and total vulnerabilities.
 *
 * @generated from message grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest
 */
export type VulnerabilityOccurrencesSummary_FixableTotalByDigest = Message<"grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest"> & {
  /**
   * The affected resource.
   *
   * @generated from field: grafeas.v1beta1.Resource resource = 1;
   */
  resource?: Resource;

  /**
   * The severity for this count. SEVERITY_UNSPECIFIED indicates total across
   * all severities.
   *
   * @generated from field: grafeas.v1beta1.vulnerability.Severity severity = 2;
   */
  severity: Severity;

  /**
   * The number of fixable vulnerabilities associated with this resource.
   *
   * @generated from field: int64 fixable_count = 3;
   */
  fixableCount: bigint;

  /**
   * The total number of vulnerabilities associated with this resource.
   *
   * @generated from field: int64 total_count = 4;
   */
  totalCount: bigint;
};

/**
 * Describes the message grafeas.v1beta1.VulnerabilityOccurrencesSummary.FixableTotalByDigest.
 * Use `create(VulnerabilityOccurrencesSummary_FixableTotalByDigestSchema)` to create a new message.
 */
export const VulnerabilityOccurrencesSummary_FixableTotalByDigestSchema: GenMessage<VulnerabilityOccurrencesSummary_FixableTotalByDigest> = /*@__PURE__*/
  messageDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 23, 0);

/**
 * [Grafeas](grafeas.io) API.
 *
 * Retrieves analysis results of Cloud components such as Docker container
 * images.
 *
 * Analysis results are stored as a series of occurrences. An `Occurrence`
 * contains information about a specific analysis instance on a resource. An
 * occurrence refers to a `Note`. A note contains details describing the
 * analysis and is generally stored in a separate project, called a `Provider`.
 * Multiple occurrences can refer to the same note.
 *
 * For example, an SSL vulnerability could affect multiple images. In this case,
 * there would be one note for the vulnerability and an occurrence for each
 * image with the vulnerability referring to that note.
 *
 * @generated from service grafeas.v1beta1.GrafeasV1Beta1
 */
export const GrafeasV1Beta1: GenService<{
  /**
   * Gets the specified occurrence.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.GetOccurrence
   */
  getOccurrence: {
    methodKind: "unary";
    input: typeof GetOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Lists occurrences for the specified project.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.ListOccurrences
   */
  listOccurrences: {
    methodKind: "unary";
    input: typeof ListOccurrencesRequestSchema;
    output: typeof ListOccurrencesResponseSchema;
  },
  /**
   * Deletes the specified occurrence. For example, use this method to delete an
   * occurrence when the occurrence is no longer applicable for the given
   * resource.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.DeleteOccurrence
   */
  deleteOccurrence: {
    methodKind: "unary";
    input: typeof DeleteOccurrenceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new occurrence.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.CreateOccurrence
   */
  createOccurrence: {
    methodKind: "unary";
    input: typeof CreateOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Creates new occurrences in batch.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.BatchCreateOccurrences
   */
  batchCreateOccurrences: {
    methodKind: "unary";
    input: typeof BatchCreateOccurrencesRequestSchema;
    output: typeof BatchCreateOccurrencesResponseSchema;
  },
  /**
   * Updates the specified occurrence.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.UpdateOccurrence
   */
  updateOccurrence: {
    methodKind: "unary";
    input: typeof UpdateOccurrenceRequestSchema;
    output: typeof OccurrenceSchema;
  },
  /**
   * Gets the note attached to the specified occurrence. Consumer projects can
   * use this method to get a note that belongs to a provider project.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.GetOccurrenceNote
   */
  getOccurrenceNote: {
    methodKind: "unary";
    input: typeof GetOccurrenceNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Gets the specified note.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.GetNote
   */
  getNote: {
    methodKind: "unary";
    input: typeof GetNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Lists notes for the specified project.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.ListNotes
   */
  listNotes: {
    methodKind: "unary";
    input: typeof ListNotesRequestSchema;
    output: typeof ListNotesResponseSchema;
  },
  /**
   * Deletes the specified note.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.DeleteNote
   */
  deleteNote: {
    methodKind: "unary";
    input: typeof DeleteNoteRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new note.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.CreateNote
   */
  createNote: {
    methodKind: "unary";
    input: typeof CreateNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Creates new notes in batch.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.BatchCreateNotes
   */
  batchCreateNotes: {
    methodKind: "unary";
    input: typeof BatchCreateNotesRequestSchema;
    output: typeof BatchCreateNotesResponseSchema;
  },
  /**
   * Updates the specified note.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.UpdateNote
   */
  updateNote: {
    methodKind: "unary";
    input: typeof UpdateNoteRequestSchema;
    output: typeof NoteSchema;
  },
  /**
   * Lists occurrences referencing the specified note. Provider projects can use
   * this method to get all occurrences across consumer projects referencing the
   * specified note.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.ListNoteOccurrences
   */
  listNoteOccurrences: {
    methodKind: "unary";
    input: typeof ListNoteOccurrencesRequestSchema;
    output: typeof ListNoteOccurrencesResponseSchema;
  },
  /**
   * Gets a summary of the number and severity of occurrences.
   *
   * @generated from rpc grafeas.v1beta1.GrafeasV1Beta1.GetVulnerabilityOccurrencesSummary
   */
  getVulnerabilityOccurrencesSummary: {
    methodKind: "unary";
    input: typeof GetVulnerabilityOccurrencesSummaryRequestSchema;
    output: typeof VulnerabilityOccurrencesSummarySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_containeranalysis_v1beta1_grafeas_grafeas, 0);

