// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/sourcerepo/v1/sourcerepo.proto (package google.devtools.sourcerepo.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { GetIamPolicyRequestSchema, SetIamPolicyRequestSchema, TestIamPermissionsRequestSchema, TestIamPermissionsResponseSchema } from "../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../iam/v1/iam_policy_pb";
import type { PolicySchema } from "../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../iam/v1/policy_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/sourcerepo/v1/sourcerepo.proto.
 */
export const file_google_devtools_sourcerepo_v1_sourcerepo: GenFile = /*@__PURE__*/
  fileDesc("Ci5nb29nbGUvZGV2dG9vbHMvc291cmNlcmVwby92MS9zb3VyY2VyZXBvLnByb3RvEh1nb29nbGUuZGV2dG9vbHMuc291cmNlcmVwby52MSJzCgRSZXBvEgwKBG5hbWUYASABKAkSDAoEc2l6ZRgCIAEoAxILCgN1cmwYAyABKAkSQgoNbWlycm9yX2NvbmZpZxgEIAEoCzIrLmdvb2dsZS5kZXZ0b29scy5zb3VyY2VyZXBvLnYxLk1pcnJvckNvbmZpZyJGCgxNaXJyb3JDb25maWcSCwoDdXJsGAEgASgJEhIKCndlYmhvb2tfaWQYAiABKAkSFQoNZGVwbG95X2tleV9pZBgDIAEoCSIeCg5HZXRSZXBvUmVxdWVzdBIMCgRuYW1lGAEgASgJIkcKEExpc3RSZXBvc1JlcXVlc3QSDAoEbmFtZRgBIAEoCRIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCSJgChFMaXN0UmVwb3NSZXNwb25zZRIyCgVyZXBvcxgBIAMoCzIjLmdvb2dsZS5kZXZ0b29scy5zb3VyY2VyZXBvLnYxLlJlcG8SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIlYKEUNyZWF0ZVJlcG9SZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRIxCgRyZXBvGAIgASgLMiMuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZXJlcG8udjEuUmVwbyIhChFEZWxldGVSZXBvUmVxdWVzdBIMCgRuYW1lGAEgASgJMvgHCgpTb3VyY2VSZXBvEpMBCglMaXN0UmVwb3MSLy5nb29nbGUuZGV2dG9vbHMuc291cmNlcmVwby52MS5MaXN0UmVwb3NSZXF1ZXN0GjAuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZXJlcG8udjEuTGlzdFJlcG9zUmVzcG9uc2UiI4LT5JMCHRIbL3YxL3tuYW1lPXByb2plY3RzLyp9L3JlcG9zEoUBCgdHZXRSZXBvEi0uZ29vZ2xlLmRldnRvb2xzLnNvdXJjZXJlcG8udjEuR2V0UmVwb1JlcXVlc3QaIy5nb29nbGUuZGV2dG9vbHMuc291cmNlcmVwby52MS5SZXBvIiaC0+STAiASHi92MS97bmFtZT1wcm9qZWN0cy8qL3JlcG9zLyoqfRKQAQoKQ3JlYXRlUmVwbxIwLmdvb2dsZS5kZXZ0b29scy5zb3VyY2VyZXBvLnYxLkNyZWF0ZVJlcG9SZXF1ZXN0GiMuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZXJlcG8udjEuUmVwbyIrgtPkkwIlOgRyZXBvIh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9yZXBvcxJ+CgpEZWxldGVSZXBvEjAuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZXJlcG8udjEuRGVsZXRlUmVwb1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiJoLT5JMCICoeL3YxL3tuYW1lPXByb2plY3RzLyovcmVwb3MvKip9EoUBCgxTZXRJYW1Qb2xpY3kSIi5nb29nbGUuaWFtLnYxLlNldElhbVBvbGljeVJlcXVlc3QaFS5nb29nbGUuaWFtLnYxLlBvbGljeSI6gtPkkwI0OgEqIi8vdjEve3Jlc291cmNlPXByb2plY3RzLyovcmVwb3MvKip9OnNldElhbVBvbGljeRKCAQoMR2V0SWFtUG9saWN5EiIuZ29vZ2xlLmlhbS52MS5HZXRJYW1Qb2xpY3lSZXF1ZXN0GhUuZ29vZ2xlLmlhbS52MS5Qb2xpY3kiN4LT5JMCMRIvL3YxL3tyZXNvdXJjZT1wcm9qZWN0cy8qL3JlcG9zLyoqfTpnZXRJYW1Qb2xpY3kSqwEKElRlc3RJYW1QZXJtaXNzaW9ucxIoLmdvb2dsZS5pYW0udjEuVGVzdElhbVBlcm1pc3Npb25zUmVxdWVzdBopLmdvb2dsZS5pYW0udjEuVGVzdElhbVBlcm1pc3Npb25zUmVzcG9uc2UiQILT5JMCOjoBKiI1L3YxL3tyZXNvdXJjZT1wcm9qZWN0cy8qL3JlcG9zLyoqfTp0ZXN0SWFtUGVybWlzc2lvbnNCfwohY29tLmdvb2dsZS5kZXZ0b29scy5zb3VyY2VyZXBvLnYxQg9Tb3VyY2VSZXBvUHJvdG9QAVpHZ29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy9kZXZ0b29scy9zb3VyY2VyZXBvL3YxO3NvdXJjZXJlcG9iBnByb3RvMw", [file_google_api_annotations, file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_protobuf_empty]);

/**
 * A repository (or repo) is a Git repository storing versioned source content.
 *
 * @generated from message google.devtools.sourcerepo.v1.Repo
 */
export type Repo = Message<"google.devtools.sourcerepo.v1.Repo"> & {
  /**
   * Resource name of the repository, of the form
   * `projects/<project>/repos/<repo>`.  The repo name may contain slashes.
   * eg, `projects/myproject/repos/name/with/slash`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The disk usage of the repo, in bytes. Read-only field. Size is only
   * returned by GetRepo.
   *
   * @generated from field: int64 size = 2;
   */
  size: bigint;

  /**
   * URL to clone the repository from Google Cloud Source Repositories.
   * Read-only field.
   *
   * @generated from field: string url = 3;
   */
  url: string;

  /**
   * How this repository mirrors a repository managed by another service.
   * Read-only field.
   *
   * @generated from field: google.devtools.sourcerepo.v1.MirrorConfig mirror_config = 4;
   */
  mirrorConfig?: MirrorConfig;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.Repo.
 * Use `create(RepoSchema)` to create a new message.
 */
export const RepoSchema: GenMessage<Repo> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 0);

/**
 * Configuration to automatically mirror a repository from another
 * hosting service, for example GitHub or BitBucket.
 *
 * @generated from message google.devtools.sourcerepo.v1.MirrorConfig
 */
export type MirrorConfig = Message<"google.devtools.sourcerepo.v1.MirrorConfig"> & {
  /**
   * URL of the main repository at the other hosting service.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * ID of the webhook listening to updates to trigger mirroring.
   * Removing this webhook from the other hosting service will stop
   * Google Cloud Source Repositories from receiving notifications,
   * and thereby disabling mirroring.
   *
   * @generated from field: string webhook_id = 2;
   */
  webhookId: string;

  /**
   * ID of the SSH deploy key at the other hosting service.
   * Removing this key from the other service would deauthorize
   * Google Cloud Source Repositories from mirroring.
   *
   * @generated from field: string deploy_key_id = 3;
   */
  deployKeyId: string;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.MirrorConfig.
 * Use `create(MirrorConfigSchema)` to create a new message.
 */
export const MirrorConfigSchema: GenMessage<MirrorConfig> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 1);

/**
 * Request for GetRepo.
 *
 * @generated from message google.devtools.sourcerepo.v1.GetRepoRequest
 */
export type GetRepoRequest = Message<"google.devtools.sourcerepo.v1.GetRepoRequest"> & {
  /**
   * The name of the requested repository. Values are of the form
   * `projects/<project>/repos/<repo>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.GetRepoRequest.
 * Use `create(GetRepoRequestSchema)` to create a new message.
 */
export const GetRepoRequestSchema: GenMessage<GetRepoRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 2);

/**
 * Request for ListRepos.
 *
 * @generated from message google.devtools.sourcerepo.v1.ListReposRequest
 */
export type ListReposRequest = Message<"google.devtools.sourcerepo.v1.ListReposRequest"> & {
  /**
   * The project ID whose repos should be listed. Values are of the form
   * `projects/<project>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Maximum number of repositories to return; between 1 and 500.
   * If not set or zero, defaults to 100 at the server.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Resume listing repositories where a prior ListReposResponse
   * left off. This is an opaque token that must be obtained from
   * a recent, prior ListReposResponse's next_page_token field.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.ListReposRequest.
 * Use `create(ListReposRequestSchema)` to create a new message.
 */
export const ListReposRequestSchema: GenMessage<ListReposRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 3);

/**
 * Response for ListRepos.  The size is not set in the returned repositories.
 *
 * @generated from message google.devtools.sourcerepo.v1.ListReposResponse
 */
export type ListReposResponse = Message<"google.devtools.sourcerepo.v1.ListReposResponse"> & {
  /**
   * The listed repos.
   *
   * @generated from field: repeated google.devtools.sourcerepo.v1.Repo repos = 1;
   */
  repos: Repo[];

  /**
   * If non-empty, additional repositories exist within the project. These
   * can be retrieved by including this value in the next ListReposRequest's
   * page_token field.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.ListReposResponse.
 * Use `create(ListReposResponseSchema)` to create a new message.
 */
export const ListReposResponseSchema: GenMessage<ListReposResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 4);

/**
 * Request for CreateRepo
 *
 * @generated from message google.devtools.sourcerepo.v1.CreateRepoRequest
 */
export type CreateRepoRequest = Message<"google.devtools.sourcerepo.v1.CreateRepoRequest"> & {
  /**
   * The project in which to create the repo. Values are of the form
   * `projects/<project>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The repo to create.  Only name should be set; setting other fields
   * is an error.  The project in the name should match the parent field.
   *
   * @generated from field: google.devtools.sourcerepo.v1.Repo repo = 2;
   */
  repo?: Repo;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.CreateRepoRequest.
 * Use `create(CreateRepoRequestSchema)` to create a new message.
 */
export const CreateRepoRequestSchema: GenMessage<CreateRepoRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 5);

/**
 * Request for DeleteRepo.
 *
 * @generated from message google.devtools.sourcerepo.v1.DeleteRepoRequest
 */
export type DeleteRepoRequest = Message<"google.devtools.sourcerepo.v1.DeleteRepoRequest"> & {
  /**
   * The name of the repo to delete. Values are of the form
   * `projects/<project>/repos/<repo>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.devtools.sourcerepo.v1.DeleteRepoRequest.
 * Use `create(DeleteRepoRequestSchema)` to create a new message.
 */
export const DeleteRepoRequestSchema: GenMessage<DeleteRepoRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 6);

/**
 * The Source Repo API service.
 *
 * @generated from service google.devtools.sourcerepo.v1.SourceRepo
 */
export const SourceRepo: GenService<{
  /**
   * Returns all repos belonging to a project. The sizes of the repos are
   * not set by ListRepos.  To get the size of a repo, use GetRepo.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.ListRepos
   */
  listRepos: {
    methodKind: "unary";
    input: typeof ListReposRequestSchema;
    output: typeof ListReposResponseSchema;
  },
  /**
   * Returns information about a repo.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.GetRepo
   */
  getRepo: {
    methodKind: "unary";
    input: typeof GetRepoRequestSchema;
    output: typeof RepoSchema;
  },
  /**
   * Creates a repo in the given project with the given name.
   *
   * If the named repository already exists, `CreateRepo` returns
   * `ALREADY_EXISTS`.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.CreateRepo
   */
  createRepo: {
    methodKind: "unary";
    input: typeof CreateRepoRequestSchema;
    output: typeof RepoSchema;
  },
  /**
   * Deletes a repo.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.DeleteRepo
   */
  deleteRepo: {
    methodKind: "unary";
    input: typeof DeleteRepoRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.SetIamPolicy
   */
  setIamPolicy: {
    methodKind: "unary";
    input: typeof SetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.GetIamPolicy
   */
  getIamPolicy: {
    methodKind: "unary";
    input: typeof GetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a NOT_FOUND error.
   *
   * @generated from rpc google.devtools.sourcerepo.v1.SourceRepo.TestIamPermissions
   */
  testIamPermissions: {
    methodKind: "unary";
    input: typeof TestIamPermissionsRequestSchema;
    output: typeof TestIamPermissionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_sourcerepo_v1_sourcerepo, 0);

