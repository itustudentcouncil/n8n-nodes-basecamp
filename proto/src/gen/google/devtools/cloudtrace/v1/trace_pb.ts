// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/cloudtrace/v1/trace.proto (package google.devtools.cloudtrace.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/cloudtrace/v1/trace.proto.
 */
export const file_google_devtools_cloudtrace_v1_trace: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvZGV2dG9vbHMvY2xvdWR0cmFjZS92MS90cmFjZS5wcm90bxIdZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjEiZgoFVHJhY2USEgoKcHJvamVjdF9pZBgBIAEoCRIQCgh0cmFjZV9pZBgCIAEoCRI3CgVzcGFucxgDIAMoCzIoLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYxLlRyYWNlU3BhbiI+CgZUcmFjZXMSNAoGdHJhY2VzGAEgAygLMiQuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjEuVHJhY2UiogMKCVRyYWNlU3BhbhIPCgdzcGFuX2lkGAEgASgGEj8KBGtpbmQYAiABKA4yMS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5UcmFjZVNwYW4uU3BhbktpbmQSDAoEbmFtZRgDIAEoCRIuCgpzdGFydF90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASGwoOcGFyZW50X3NwYW5faWQYBiABKAZCA+BBARJECgZsYWJlbHMYByADKAsyNC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5UcmFjZVNwYW4uTGFiZWxzRW50cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJFCghTcGFuS2luZBIZChVTUEFOX0tJTkRfVU5TUEVDSUZJRUQQABIOCgpSUENfU0VSVkVSEAESDgoKUlBDX0NMSUVOVBACIoADChFMaXN0VHJhY2VzUmVxdWVzdBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISTAoEdmlldxgCIAEoDjI5Lmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYxLkxpc3RUcmFjZXNSZXF1ZXN0LlZpZXdUeXBlQgPgQQESFgoJcGFnZV9zaXplGAMgASgFQgPgQQESEgoKcGFnZV90b2tlbhgEIAEoCRIuCgpzdGFydF90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoGZmlsdGVyGAcgASgJQgPgQQESFQoIb3JkZXJfYnkYCCABKAlCA+BBASJOCghWaWV3VHlwZRIZChVWSUVXX1RZUEVfVU5TUEVDSUZJRUQQABILCgdNSU5JTUFMEAESDAoIUk9PVFNQQU4QAhIMCghDT01QTEVURRADImMKEkxpc3RUcmFjZXNSZXNwb25zZRI0CgZ0cmFjZXMYASADKAsyJC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5UcmFjZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiQQoPR2V0VHJhY2VSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlCA+BBAhIVCgh0cmFjZV9pZBgCIAEoCUID4EECImkKElBhdGNoVHJhY2VzUmVxdWVzdBIXCgpwcm9qZWN0X2lkGAEgASgJQgPgQQISOgoGdHJhY2VzGAIgASgLMiUuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjEuVHJhY2VzQgPgQQIytQUKDFRyYWNlU2VydmljZRKoAQoKTGlzdFRyYWNlcxIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYxLkxpc3RUcmFjZXNSZXF1ZXN0GjEuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjEuTGlzdFRyYWNlc1Jlc3BvbnNlIjXaQQpwcm9qZWN0X2lkgtPkkwIiEiAvdjEvcHJvamVjdHMve3Byb2plY3RfaWR9L3RyYWNlcxKrAQoIR2V0VHJhY2USLi5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5HZXRUcmFjZVJlcXVlc3QaJC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5UcmFjZSJJ2kETcHJvamVjdF9pZCx0cmFjZV9pZILT5JMCLRIrL3YxL3Byb2plY3RzL3twcm9qZWN0X2lkfS90cmFjZXMve3RyYWNlX2lkfRKeAQoLUGF0Y2hUcmFjZXMSMS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MS5QYXRjaFRyYWNlc1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiRNpBEXByb2plY3RfaWQsdHJhY2VzgtPkkwIqOgZ0cmFjZXMyIC92MS9wcm9qZWN0cy97cHJvamVjdF9pZH0vdHJhY2VzGqoBykEZY2xvdWR0cmFjZS5nb29nbGVhcGlzLmNvbdJBigFodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkLXBsYXRmb3JtLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdHJhY2UuYXBwZW5kLGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdHJhY2UucmVhZG9ubHlCrQEKIWNvbS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MUIKVHJhY2VQcm90b1ABWi9jbG91ZC5nb29nbGUuY29tL2dvL3RyYWNlL2FwaXYxL3RyYWNlcGI7dHJhY2VwYqoCFUdvb2dsZS5DbG91ZC5UcmFjZS5WMcoCFUdvb2dsZVxDbG91ZFxUcmFjZVxWMeoCGEdvb2dsZTo6Q2xvdWQ6OlRyYWNlOjpWMWIGcHJvdG8z", [file_google_api_client, file_google_api_field_behavior, file_google_protobuf_empty, file_google_protobuf_timestamp, file_google_api_annotations]);

/**
 * A trace describes how long it takes for an application to perform an
 * operation. It consists of a set of spans, each of which represent a single
 * timed event within the operation.
 *
 * @generated from message google.devtools.cloudtrace.v1.Trace
 */
export type Trace = Message<"google.devtools.cloudtrace.v1.Trace"> & {
  /**
   * Project ID of the Cloud project where the trace data is stored.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Globally unique identifier for the trace. This identifier is a 128-bit
   * numeric value formatted as a 32-byte hex string. For example,
   * `382d4f4c6b7bb2f4a972559d9085001d`.
   *
   * @generated from field: string trace_id = 2;
   */
  traceId: string;

  /**
   * Collection of spans in the trace.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v1.TraceSpan spans = 3;
   */
  spans: TraceSpan[];
};

/**
 * Describes the message google.devtools.cloudtrace.v1.Trace.
 * Use `create(TraceSchema)` to create a new message.
 */
export const TraceSchema: GenMessage<Trace> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 0);

/**
 * List of new or updated traces.
 *
 * @generated from message google.devtools.cloudtrace.v1.Traces
 */
export type Traces = Message<"google.devtools.cloudtrace.v1.Traces"> & {
  /**
   * List of traces.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v1.Trace traces = 1;
   */
  traces: Trace[];
};

/**
 * Describes the message google.devtools.cloudtrace.v1.Traces.
 * Use `create(TracesSchema)` to create a new message.
 */
export const TracesSchema: GenMessage<Traces> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 1);

/**
 * A span represents a single timed event within a trace. Spans can be nested
 * and form a trace tree. Often, a trace contains a root span that describes the
 * end-to-end latency of an operation and, optionally, one or more subspans for
 * its suboperations. Spans do not need to be contiguous. There may be gaps
 * between spans in a trace.
 *
 * @generated from message google.devtools.cloudtrace.v1.TraceSpan
 */
export type TraceSpan = Message<"google.devtools.cloudtrace.v1.TraceSpan"> & {
  /**
   * Identifier for the span. Must be a 64-bit integer other than 0 and
   * unique within a trace. For example, `2205310701640571284`.
   *
   * @generated from field: fixed64 span_id = 1;
   */
  spanId: bigint;

  /**
   * Distinguishes between spans generated in a particular context. For example,
   * two spans with the same name may be distinguished using `RPC_CLIENT`
   * and `RPC_SERVER` to identify queueing latency associated with the span.
   *
   * @generated from field: google.devtools.cloudtrace.v1.TraceSpan.SpanKind kind = 2;
   */
  kind: TraceSpan_SpanKind;

  /**
   * Name of the span. Must be less than 128 bytes. The span name is sanitized
   * and displayed in the Stackdriver Trace tool in the
   * Google Cloud Platform Console.
   * The name may be a method name or some other per-call site name.
   * For the same executable and the same call point, a best practice is
   * to use a consistent name, which makes it easier to correlate
   * cross-trace spans.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * Start time of the span in nanoseconds from the UNIX epoch.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 4;
   */
  startTime?: Timestamp;

  /**
   * End time of the span in nanoseconds from the UNIX epoch.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 5;
   */
  endTime?: Timestamp;

  /**
   * Optional. ID of the parent span, if any.
   *
   * @generated from field: fixed64 parent_span_id = 6;
   */
  parentSpanId: bigint;

  /**
   * Collection of labels associated with the span. Label keys must be less than
   * 128 bytes. Label values must be less than 16 kilobytes (10MB for
   * `/stacktrace` values).
   *
   * Some predefined label keys exist, or you may create your own. When creating
   * your own, we recommend the following formats:
   *
   * * `/category/product/key` for agents of well-known products (e.g.
   *   `/db/mongodb/read_size`).
   * * `short_host/path/key` for domain-specific keys (e.g.
   *   `foo.com/myproduct/bar`)
   *
   * Predefined labels include:
   *
   * *   `/agent`
   * *   `/component`
   * *   `/error/message`
   * *   `/error/name`
   * *   `/http/client_city`
   * *   `/http/client_country`
   * *   `/http/client_protocol`
   * *   `/http/client_region`
   * *   `/http/host`
   * *   `/http/method`
   * *   `/http/path`
   * *   `/http/redirected_url`
   * *   `/http/request/size`
   * *   `/http/response/size`
   * *   `/http/route`
   * *   `/http/status_code`
   * *   `/http/url`
   * *   `/http/user_agent`
   * *   `/pid`
   * *   `/stacktrace`
   * *   `/tid`
   *
   * @generated from field: map<string, string> labels = 7;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.devtools.cloudtrace.v1.TraceSpan.
 * Use `create(TraceSpanSchema)` to create a new message.
 */
export const TraceSpanSchema: GenMessage<TraceSpan> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 2);

/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 *
 * @generated from enum google.devtools.cloudtrace.v1.TraceSpan.SpanKind
 */
export enum TraceSpan_SpanKind {
  /**
   * Unspecified.
   *
   * @generated from enum value: SPAN_KIND_UNSPECIFIED = 0;
   */
  SPAN_KIND_UNSPECIFIED = 0,

  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote network request.
   *
   * @generated from enum value: RPC_SERVER = 1;
   */
  RPC_SERVER = 1,

  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   *
   * @generated from enum value: RPC_CLIENT = 2;
   */
  RPC_CLIENT = 2,
}

/**
 * Describes the enum google.devtools.cloudtrace.v1.TraceSpan.SpanKind.
 */
export const TraceSpan_SpanKindSchema: GenEnum<TraceSpan_SpanKind> = /*@__PURE__*/
  enumDesc(file_google_devtools_cloudtrace_v1_trace, 2, 0);

/**
 * The request message for the `ListTraces` method. All fields are required
 * unless specified.
 *
 * @generated from message google.devtools.cloudtrace.v1.ListTracesRequest
 */
export type ListTracesRequest = Message<"google.devtools.cloudtrace.v1.ListTracesRequest"> & {
  /**
   * Required. ID of the Cloud project where the trace data is stored.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Optional. Type of data returned for traces in the list. Default is
   * `MINIMAL`.
   *
   * @generated from field: google.devtools.cloudtrace.v1.ListTracesRequest.ViewType view = 2;
   */
  view: ListTracesRequest_ViewType;

  /**
   * Optional. Maximum number of traces to return. If not specified or <= 0, the
   * implementation selects a reasonable value.  The implementation may
   * return fewer traces than the requested page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token identifying the page of results to return. If provided, use the
   * value of the `next_page_token` field from a previous request.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  /**
   * Start of the time interval (inclusive) during which the trace data was
   * collected from the application.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * End of the time interval (inclusive) during which the trace data was
   * collected from the application.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * Optional. A filter against labels for the request.
   *
   * By default, searches use prefix matching. To specify exact match, prepend
   * a plus symbol (`+`) to the search term.
   * Multiple terms are ANDed. Syntax:
   *
   * *   `root:NAME_PREFIX` or `NAME_PREFIX`: Return traces where any root
   *     span starts with `NAME_PREFIX`.
   * *   `+root:NAME` or `+NAME`: Return traces where any root span's name is
   *     exactly `NAME`.
   * *   `span:NAME_PREFIX`: Return traces where any span starts with
   *     `NAME_PREFIX`.
   * *   `+span:NAME`: Return traces where any span's name is exactly
   *     `NAME`.
   * *   `latency:DURATION`: Return traces whose overall latency is
   *     greater or equal to than `DURATION`. Accepted units are nanoseconds
   *     (`ns`), milliseconds (`ms`), and seconds (`s`). Default is `ms`. For
   *     example, `latency:24ms` returns traces whose overall latency
   *     is greater than or equal to 24 milliseconds.
   * *   `label:LABEL_KEY`: Return all traces containing the specified
   *     label key (exact match, case-sensitive) regardless of the key:value
   *     pair's value (including empty values).
   * *   `LABEL_KEY:VALUE_PREFIX`: Return all traces containing the specified
   *     label key (exact match, case-sensitive) whose value starts with
   *     `VALUE_PREFIX`. Both a key and a value must be specified.
   * *   `+LABEL_KEY:VALUE`: Return all traces containing a key:value pair
   *     exactly matching the specified text. Both a key and a value must be
   *     specified.
   * *   `method:VALUE`: Equivalent to `/http/method:VALUE`.
   * *   `url:VALUE`: Equivalent to `/http/url:VALUE`.
   *
   * @generated from field: string filter = 7;
   */
  filter: string;

  /**
   * Optional. Field used to sort the returned traces.
   * Can be one of the following:
   *
   * *   `trace_id`
   * *   `name` (`name` field of root span in the trace)
   * *   `duration` (difference between `end_time` and `start_time` fields of
   *      the root span)
   * *   `start` (`start_time` field of the root span)
   *
   * Descending order can be specified by appending `desc` to the sort field
   * (for example, `name desc`).
   *
   * Only one sort field is permitted.
   *
   * @generated from field: string order_by = 8;
   */
  orderBy: string;
};

/**
 * Describes the message google.devtools.cloudtrace.v1.ListTracesRequest.
 * Use `create(ListTracesRequestSchema)` to create a new message.
 */
export const ListTracesRequestSchema: GenMessage<ListTracesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 3);

/**
 * Type of data returned for traces in the list.
 *
 * @generated from enum google.devtools.cloudtrace.v1.ListTracesRequest.ViewType
 */
export enum ListTracesRequest_ViewType {
  /**
   * Default is `MINIMAL` if unspecified.
   *
   * @generated from enum value: VIEW_TYPE_UNSPECIFIED = 0;
   */
  VIEW_TYPE_UNSPECIFIED = 0,

  /**
   * Minimal view of the trace record that contains only the project
   * and trace IDs.
   *
   * @generated from enum value: MINIMAL = 1;
   */
  MINIMAL = 1,

  /**
   * Root span view of the trace record that returns the root spans along
   * with the minimal trace data.
   *
   * @generated from enum value: ROOTSPAN = 2;
   */
  ROOTSPAN = 2,

  /**
   * Complete view of the trace record that contains the actual trace data.
   * This is equivalent to calling the REST `get` or RPC `GetTrace` method
   * using the ID of each listed trace.
   *
   * @generated from enum value: COMPLETE = 3;
   */
  COMPLETE = 3,
}

/**
 * Describes the enum google.devtools.cloudtrace.v1.ListTracesRequest.ViewType.
 */
export const ListTracesRequest_ViewTypeSchema: GenEnum<ListTracesRequest_ViewType> = /*@__PURE__*/
  enumDesc(file_google_devtools_cloudtrace_v1_trace, 3, 0);

/**
 * The response message for the `ListTraces` method.
 *
 * @generated from message google.devtools.cloudtrace.v1.ListTracesResponse
 */
export type ListTracesResponse = Message<"google.devtools.cloudtrace.v1.ListTracesResponse"> & {
  /**
   * List of trace records as specified by the view parameter.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v1.Trace traces = 1;
   */
  traces: Trace[];

  /**
   * If defined, indicates that there are more traces that match the request
   * and that this value should be passed to the next request to continue
   * retrieving additional traces.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.devtools.cloudtrace.v1.ListTracesResponse.
 * Use `create(ListTracesResponseSchema)` to create a new message.
 */
export const ListTracesResponseSchema: GenMessage<ListTracesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 4);

/**
 * The request message for the `GetTrace` method.
 *
 * @generated from message google.devtools.cloudtrace.v1.GetTraceRequest
 */
export type GetTraceRequest = Message<"google.devtools.cloudtrace.v1.GetTraceRequest"> & {
  /**
   * Required. ID of the Cloud project where the trace data is stored.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. ID of the trace to return.
   *
   * @generated from field: string trace_id = 2;
   */
  traceId: string;
};

/**
 * Describes the message google.devtools.cloudtrace.v1.GetTraceRequest.
 * Use `create(GetTraceRequestSchema)` to create a new message.
 */
export const GetTraceRequestSchema: GenMessage<GetTraceRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 5);

/**
 * The request message for the `PatchTraces` method.
 *
 * @generated from message google.devtools.cloudtrace.v1.PatchTracesRequest
 */
export type PatchTracesRequest = Message<"google.devtools.cloudtrace.v1.PatchTracesRequest"> & {
  /**
   * Required. ID of the Cloud project where the trace data is stored.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The body of the message.
   *
   * @generated from field: google.devtools.cloudtrace.v1.Traces traces = 2;
   */
  traces?: Traces;
};

/**
 * Describes the message google.devtools.cloudtrace.v1.PatchTracesRequest.
 * Use `create(PatchTracesRequestSchema)` to create a new message.
 */
export const PatchTracesRequestSchema: GenMessage<PatchTracesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v1_trace, 6);

/**
 * This file describes an API for collecting and viewing traces and spans
 * within a trace.  A Trace is a collection of spans corresponding to a single
 * operation or set of operations for an application. A span is an individual
 * timed event which forms a node of the trace tree. Spans for a single trace
 * may span multiple services.
 *
 * @generated from service google.devtools.cloudtrace.v1.TraceService
 */
export const TraceService: GenService<{
  /**
   * Returns of a list of traces that match the specified filter conditions.
   *
   * @generated from rpc google.devtools.cloudtrace.v1.TraceService.ListTraces
   */
  listTraces: {
    methodKind: "unary";
    input: typeof ListTracesRequestSchema;
    output: typeof ListTracesResponseSchema;
  },
  /**
   * Gets a single trace by its ID.
   *
   * @generated from rpc google.devtools.cloudtrace.v1.TraceService.GetTrace
   */
  getTrace: {
    methodKind: "unary";
    input: typeof GetTraceRequestSchema;
    output: typeof TraceSchema;
  },
  /**
   * Sends new traces to Stackdriver Trace or updates existing traces. If the ID
   * of a trace that you send matches that of an existing trace, any fields
   * in the existing trace and its spans are overwritten by the provided values,
   * and any new fields provided are merged with the existing trace data. If the
   * ID does not match, a new trace is created.
   *
   * @generated from rpc google.devtools.cloudtrace.v1.TraceService.PatchTraces
   */
  patchTraces: {
    methodKind: "unary";
    input: typeof PatchTracesRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_cloudtrace_v1_trace, 0);

