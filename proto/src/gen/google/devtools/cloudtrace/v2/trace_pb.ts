// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/cloudtrace/v2/trace.proto (package google.devtools.cloudtrace.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/cloudtrace/v2/trace.proto.
 */
export const file_google_devtools_cloudtrace_v2_trace: GenFile = /*@__PURE__*/
  fileDesc("Cilnb29nbGUvZGV2dG9vbHMvY2xvdWR0cmFjZS92Mi90cmFjZS5wcm90bxIdZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIi8REKBFNwYW4SEQoEbmFtZRgBIAEoCUID4EECEhQKB3NwYW5faWQYAiABKAlCA+BBAhIWCg5wYXJlbnRfc3Bhbl9pZBgDIAEoCRJLCgxkaXNwbGF5X25hbWUYBCABKAsyMC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5UcnVuY2F0YWJsZVN0cmluZ0ID4EECEjMKCnN0YXJ0X3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQISMQoIZW5kX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQISQgoKYXR0cmlidXRlcxgHIAEoCzIuLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlNwYW4uQXR0cmlidXRlcxI+CgtzdGFja190cmFjZRgIIAEoCzIpLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlN0YWNrVHJhY2USQwoLdGltZV9ldmVudHMYCSABKAsyLi5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLlRpbWVFdmVudHMSOAoFbGlua3MYCiABKAsyKS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLkxpbmtzEicKBnN0YXR1cxgLIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgPgQQESRAobc2FtZV9wcm9jZXNzX2FzX3BhcmVudF9zcGFuGAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZUID4EEBEjoKEGNoaWxkX3NwYW5fY291bnQYDSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZUID4EEBEkQKCXNwYW5fa2luZBgOIAEoDjIsLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlNwYW4uU3BhbktpbmRCA+BBARrrAQoKQXR0cmlidXRlcxJXCg1hdHRyaWJ1dGVfbWFwGAEgAygLMkAuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuU3Bhbi5BdHRyaWJ1dGVzLkF0dHJpYnV0ZU1hcEVudHJ5EiAKGGRyb3BwZWRfYXR0cmlidXRlc19jb3VudBgCIAEoBRpiChFBdHRyaWJ1dGVNYXBFbnRyeRILCgNrZXkYASABKAkSPAoFdmFsdWUYAiABKAsyLS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5BdHRyaWJ1dGVWYWx1ZToCOAEa3wQKCVRpbWVFdmVudBIoCgR0aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJOCgphbm5vdGF0aW9uGAIgASgLMjguZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuU3Bhbi5UaW1lRXZlbnQuQW5ub3RhdGlvbkgAElMKDW1lc3NhZ2VfZXZlbnQYAyABKAsyOi5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLlRpbWVFdmVudC5NZXNzYWdlRXZlbnRIABqXAQoKQW5ub3RhdGlvbhJFCgtkZXNjcmlwdGlvbhgBIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlRydW5jYXRhYmxlU3RyaW5nEkIKCmF0dHJpYnV0ZXMYAiABKAsyLi5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLkF0dHJpYnV0ZXMa3wEKDE1lc3NhZ2VFdmVudBJNCgR0eXBlGAEgASgOMj8uZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuU3Bhbi5UaW1lRXZlbnQuTWVzc2FnZUV2ZW50LlR5cGUSCgoCaWQYAiABKAMSHwoXdW5jb21wcmVzc2VkX3NpemVfYnl0ZXMYAyABKAMSHQoVY29tcHJlc3NlZF9zaXplX2J5dGVzGAQgASgDIjQKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEggKBFNFTlQQARIMCghSRUNFSVZFRBACQgcKBXZhbHVlGpgBCgpUaW1lRXZlbnRzEkEKCnRpbWVfZXZlbnQYASADKAsyLS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLlRpbWVFdmVudBIhChlkcm9wcGVkX2Fubm90YXRpb25zX2NvdW50GAIgASgFEiQKHGRyb3BwZWRfbWVzc2FnZV9ldmVudHNfY291bnQYAyABKAUa9wEKBExpbmsSEAoIdHJhY2VfaWQYASABKAkSDwoHc3Bhbl9pZBgCIAEoCRI7CgR0eXBlGAMgASgOMi0uZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuU3Bhbi5MaW5rLlR5cGUSQgoKYXR0cmlidXRlcxgEIAEoCzIuLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlNwYW4uQXR0cmlidXRlcyJLCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIVChFDSElMRF9MSU5LRURfU1BBThABEhYKElBBUkVOVF9MSU5LRURfU1BBThACGlwKBUxpbmtzEjYKBGxpbmsYASADKAsyKC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5TcGFuLkxpbmsSGwoTZHJvcHBlZF9saW5rc19jb3VudBgCIAEoBSJnCghTcGFuS2luZBIZChVTUEFOX0tJTkRfVU5TUEVDSUZJRUQQABIMCghJTlRFUk5BTBABEgoKBlNFUlZFUhACEgoKBkNMSUVOVBADEgwKCFBST0RVQ0VSEAQSDAoIQ09OU1VNRVIQBTpT6kFQCh5jbG91ZHRyYWNlLmdvb2dsZWFwaXMuY29tL1NwYW4SLnByb2plY3RzL3twcm9qZWN0fS90cmFjZXMve3RyYWNlfS9zcGFucy97c3Bhbn0ijgEKDkF0dHJpYnV0ZVZhbHVlEkgKDHN0cmluZ192YWx1ZRgBIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlRydW5jYXRhYmxlU3RyaW5nSAASEwoJaW50X3ZhbHVlGAIgASgDSAASFAoKYm9vbF92YWx1ZRgDIAEoCEgAQgcKBXZhbHVlIokFCgpTdGFja1RyYWNlEksKDHN0YWNrX2ZyYW1lcxgBIAEoCzI1Lmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlN0YWNrVHJhY2UuU3RhY2tGcmFtZXMSGwoTc3RhY2tfdHJhY2VfaGFzaF9pZBgCIAEoAxqeAwoKU3RhY2tGcmFtZRJHCg1mdW5jdGlvbl9uYW1lGAEgASgLMjAuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuVHJ1bmNhdGFibGVTdHJpbmcSUAoWb3JpZ2luYWxfZnVuY3Rpb25fbmFtZRgCIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlRydW5jYXRhYmxlU3RyaW5nEkMKCWZpbGVfbmFtZRgDIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlRydW5jYXRhYmxlU3RyaW5nEhMKC2xpbmVfbnVtYmVyGAQgASgDEhUKDWNvbHVtbl9udW1iZXIYBSABKAMSOgoLbG9hZF9tb2R1bGUYBiABKAsyJS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5Nb2R1bGUSSAoOc291cmNlX3ZlcnNpb24YByABKAsyMC5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52Mi5UcnVuY2F0YWJsZVN0cmluZxpwCgtTdGFja0ZyYW1lcxJDCgVmcmFtZRgBIAMoCzI0Lmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlN0YWNrVHJhY2UuU3RhY2tGcmFtZRIcChRkcm9wcGVkX2ZyYW1lc19jb3VudBgCIAEoBSKOAQoGTW9kdWxlEkAKBm1vZHVsZRgBIAEoCzIwLmdvb2dsZS5kZXZ0b29scy5jbG91ZHRyYWNlLnYyLlRydW5jYXRhYmxlU3RyaW5nEkIKCGJ1aWxkX2lkGAIgASgLMjAuZ29vZ2xlLmRldnRvb2xzLmNsb3VkdHJhY2UudjIuVHJ1bmNhdGFibGVTdHJpbmciQAoRVHJ1bmNhdGFibGVTdHJpbmcSDQoFdmFsdWUYASABKAkSHAoUdHJ1bmNhdGVkX2J5dGVfY291bnQYAiABKAVCrQEKIWNvbS5nb29nbGUuZGV2dG9vbHMuY2xvdWR0cmFjZS52MkIKVHJhY2VQcm90b1ABWi9jbG91ZC5nb29nbGUuY29tL2dvL3RyYWNlL2FwaXYyL3RyYWNlcGI7dHJhY2VwYqoCFUdvb2dsZS5DbG91ZC5UcmFjZS5WMsoCFUdvb2dsZVxDbG91ZFxUcmFjZVxWMuoCGEdvb2dsZTo6Q2xvdWQ6OlRyYWNlOjpWMmIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp, file_google_protobuf_wrappers, file_google_rpc_status]);

/**
 * A span represents a single operation within a trace. Spans can be
 * nested to form a trace tree. Often, a trace contains a root span
 * that describes the end-to-end latency, and one or more subspans for
 * its sub-operations.
 *
 * A trace can also contain multiple root spans, or none at all.
 * Spans do not need to be contiguous. There might be
 * gaps or overlaps between spans in a trace.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span
 */
export type Span = Message<"google.devtools.cloudtrace.v2.Span"> & {
  /**
   * Required. The resource name of the span in the following format:
   *
   *  * `projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/[SPAN_ID]`
   *
   * `[TRACE_ID]` is a unique identifier for a trace within a project;
   * it is a 32-character hexadecimal encoding of a 16-byte array. It should
   * not be zero.
   *
   * `[SPAN_ID]` is a unique identifier for a span within a trace; it
   * is a 16-character hexadecimal encoding of an 8-byte array. It should not
   * be zero.
   * .
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The `[SPAN_ID]` portion of the span's resource name.
   *
   * @generated from field: string span_id = 2;
   */
  spanId: string;

  /**
   * The `[SPAN_ID]` of this span's parent span. If this is a root span,
   * then this field must be empty.
   *
   * @generated from field: string parent_span_id = 3;
   */
  parentSpanId: string;

  /**
   * Required. A description of the span's operation (up to 128 bytes).
   * Cloud Trace displays the description in the
   * Cloud console.
   * For example, the display name can be a qualified method name or a file name
   * and a line number where the operation is called. A best practice is to use
   * the same display name within an application and at the same call point.
   * This makes it easier to correlate spans in different traces.
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString display_name = 4;
   */
  displayName?: TruncatableString;

  /**
   * Required. The start time of the span. On the client side, this is the time
   * kept by the local machine where the span execution starts. On the server
   * side, this is the time when the server's application handler starts
   * running.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * Required. The end time of the span. On the client side, this is the time
   * kept by the local machine where the span execution ends. On the server
   * side, this is the time when the server application handler stops running.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 6;
   */
  endTime?: Timestamp;

  /**
   * A set of attributes on the span. You can have up to 32 attributes per
   * span.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.Attributes attributes = 7;
   */
  attributes?: Span_Attributes;

  /**
   * Stack trace captured at the start of the span.
   *
   * @generated from field: google.devtools.cloudtrace.v2.StackTrace stack_trace = 8;
   */
  stackTrace?: StackTrace;

  /**
   * A set of time events. You can have up to 32 annotations and 128 message
   * events per span.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.TimeEvents time_events = 9;
   */
  timeEvents?: Span_TimeEvents;

  /**
   * Links associated with the span. You can have up to 128 links per Span.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.Links links = 10;
   */
  links?: Span_Links;

  /**
   * Optional. The final status for this span.
   *
   * @generated from field: google.rpc.Status status = 11;
   */
  status?: Status;

  /**
   * Optional. Set this parameter to indicate whether this span is in
   * the same process as its parent. If you do not set this parameter,
   * Trace is unable to take advantage of this helpful information.
   *
   * @generated from field: google.protobuf.BoolValue same_process_as_parent_span = 12;
   */
  sameProcessAsParentSpan?: boolean;

  /**
   * Optional. The number of child spans that were generated while this span
   * was active. If set, allows implementation to detect missing child spans.
   *
   * @generated from field: google.protobuf.Int32Value child_span_count = 13;
   */
  childSpanCount?: number;

  /**
   * Optional. Distinguishes between spans generated in a particular context.
   * For example, two spans with the same name may be distinguished using
   * `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.SpanKind span_kind = 14;
   */
  spanKind: Span_SpanKind;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.
 * Use `create(SpanSchema)` to create a new message.
 */
export const SpanSchema: GenMessage<Span> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0);

/**
 * A set of attributes as key-value pairs.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.Attributes
 */
export type Span_Attributes = Message<"google.devtools.cloudtrace.v2.Span.Attributes"> & {
  /**
   * A set of attributes. Each attribute's key can be up to 128 bytes
   * long. The value can be a string up to 256 bytes, a signed 64-bit integer,
   * or the boolean values `true` or `false`. For example:
   *
   *     "/instance_id": { "string_value": { "value": "my-instance" } }
   *     "/http/request_bytes": { "int_value": 300 }
   *     "abc.com/myattribute": { "bool_value": false }
   *
   * @generated from field: map<string, google.devtools.cloudtrace.v2.AttributeValue> attribute_map = 1;
   */
  attributeMap: { [key: string]: AttributeValue };

  /**
   * The number of attributes that were discarded. Attributes can be discarded
   * because their keys are too long or because there are too many attributes.
   * If this value is 0 then all attributes are valid.
   *
   * @generated from field: int32 dropped_attributes_count = 2;
   */
  droppedAttributesCount: number;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.Attributes.
 * Use `create(Span_AttributesSchema)` to create a new message.
 */
export const Span_AttributesSchema: GenMessage<Span_Attributes> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 0);

/**
 * A time-stamped annotation or message event in the Span.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.TimeEvent
 */
export type Span_TimeEvent = Message<"google.devtools.cloudtrace.v2.Span.TimeEvent"> & {
  /**
   * The timestamp indicating the time the event occurred.
   *
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * A `TimeEvent` can contain either an `Annotation` object or a
   * `MessageEvent` object, but not both.
   *
   * @generated from oneof google.devtools.cloudtrace.v2.Span.TimeEvent.value
   */
  value: {
    /**
     * Text annotation with a set of attributes.
     *
     * @generated from field: google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation annotation = 2;
     */
    value: Span_TimeEvent_Annotation;
    case: "annotation";
  } | {
    /**
     * An event describing a message sent/received between Spans.
     *
     * @generated from field: google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent message_event = 3;
     */
    value: Span_TimeEvent_MessageEvent;
    case: "messageEvent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.TimeEvent.
 * Use `create(Span_TimeEventSchema)` to create a new message.
 */
export const Span_TimeEventSchema: GenMessage<Span_TimeEvent> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 1);

/**
 * Text annotation with a set of attributes.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation
 */
export type Span_TimeEvent_Annotation = Message<"google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation"> & {
  /**
   * A user-supplied message describing the event. The maximum length for
   * the description is 256 bytes.
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString description = 1;
   */
  description?: TruncatableString;

  /**
   * A set of attributes on the annotation. You can have up to 4 attributes
   * per Annotation.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.Attributes attributes = 2;
   */
  attributes?: Span_Attributes;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.TimeEvent.Annotation.
 * Use `create(Span_TimeEvent_AnnotationSchema)` to create a new message.
 */
export const Span_TimeEvent_AnnotationSchema: GenMessage<Span_TimeEvent_Annotation> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 1, 0);

/**
 * An event describing a message sent/received between Spans.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent
 */
export type Span_TimeEvent_MessageEvent = Message<"google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent"> & {
  /**
   * Type of MessageEvent. Indicates whether the message was sent or
   * received.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type type = 1;
   */
  type: Span_TimeEvent_MessageEvent_Type;

  /**
   * An identifier for the MessageEvent's message that can be used to match
   * `SENT` and `RECEIVED` MessageEvents.
   *
   * @generated from field: int64 id = 2;
   */
  id: bigint;

  /**
   * The number of uncompressed bytes sent or received.
   *
   * @generated from field: int64 uncompressed_size_bytes = 3;
   */
  uncompressedSizeBytes: bigint;

  /**
   * The number of compressed bytes sent or received. If missing, the
   * compressed size is assumed to be the same size as the uncompressed
   * size.
   *
   * @generated from field: int64 compressed_size_bytes = 4;
   */
  compressedSizeBytes: bigint;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.
 * Use `create(Span_TimeEvent_MessageEventSchema)` to create a new message.
 */
export const Span_TimeEvent_MessageEventSchema: GenMessage<Span_TimeEvent_MessageEvent> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 1, 1);

/**
 * Indicates whether the message was sent or received.
 *
 * @generated from enum google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type
 */
export enum Span_TimeEvent_MessageEvent_Type {
  /**
   * Unknown event type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Indicates a sent message.
   *
   * @generated from enum value: SENT = 1;
   */
  SENT = 1,

  /**
   * Indicates a received message.
   *
   * @generated from enum value: RECEIVED = 2;
   */
  RECEIVED = 2,
}

/**
 * Describes the enum google.devtools.cloudtrace.v2.Span.TimeEvent.MessageEvent.Type.
 */
export const Span_TimeEvent_MessageEvent_TypeSchema: GenEnum<Span_TimeEvent_MessageEvent_Type> = /*@__PURE__*/
  enumDesc(file_google_devtools_cloudtrace_v2_trace, 0, 1, 1, 0);

/**
 * A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation
 * on the span, consisting of either user-supplied key:value pairs, or
 * details of a message sent/received between Spans.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.TimeEvents
 */
export type Span_TimeEvents = Message<"google.devtools.cloudtrace.v2.Span.TimeEvents"> & {
  /**
   * A collection of `TimeEvent`s.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v2.Span.TimeEvent time_event = 1;
   */
  timeEvent: Span_TimeEvent[];

  /**
   * The number of dropped annotations in all the included time events.
   * If the value is 0, then no annotations were dropped.
   *
   * @generated from field: int32 dropped_annotations_count = 2;
   */
  droppedAnnotationsCount: number;

  /**
   * The number of dropped message events in all the included time events.
   * If the value is 0, then no message events were dropped.
   *
   * @generated from field: int32 dropped_message_events_count = 3;
   */
  droppedMessageEventsCount: number;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.TimeEvents.
 * Use `create(Span_TimeEventsSchema)` to create a new message.
 */
export const Span_TimeEventsSchema: GenMessage<Span_TimeEvents> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 2);

/**
 * A pointer from the current span to another span in the same trace or in a
 * different trace. For example, this can be used in batching operations,
 * where a single batch handler processes multiple requests from different
 * traces or when the handler receives a request from a different project.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.Link
 */
export type Span_Link = Message<"google.devtools.cloudtrace.v2.Span.Link"> & {
  /**
   * The `[TRACE_ID]` for a trace within a project.
   *
   * @generated from field: string trace_id = 1;
   */
  traceId: string;

  /**
   * The `[SPAN_ID]` for a span within a trace.
   *
   * @generated from field: string span_id = 2;
   */
  spanId: string;

  /**
   * The relationship of the current span relative to the linked span.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.Link.Type type = 3;
   */
  type: Span_Link_Type;

  /**
   * A set of attributes on the link. Up to 32 attributes can be
   * specified per link.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Span.Attributes attributes = 4;
   */
  attributes?: Span_Attributes;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.Link.
 * Use `create(Span_LinkSchema)` to create a new message.
 */
export const Span_LinkSchema: GenMessage<Span_Link> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 3);

/**
 * The relationship of the current span relative to the linked span: child,
 * parent, or unspecified.
 *
 * @generated from enum google.devtools.cloudtrace.v2.Span.Link.Type
 */
export enum Span_Link_Type {
  /**
   * The relationship of the two spans is unknown.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * The linked span is a child of the current span.
   *
   * @generated from enum value: CHILD_LINKED_SPAN = 1;
   */
  CHILD_LINKED_SPAN = 1,

  /**
   * The linked span is a parent of the current span.
   *
   * @generated from enum value: PARENT_LINKED_SPAN = 2;
   */
  PARENT_LINKED_SPAN = 2,
}

/**
 * Describes the enum google.devtools.cloudtrace.v2.Span.Link.Type.
 */
export const Span_Link_TypeSchema: GenEnum<Span_Link_Type> = /*@__PURE__*/
  enumDesc(file_google_devtools_cloudtrace_v2_trace, 0, 3, 0);

/**
 * A collection of links, which are references from this span to a span
 * in the same or different trace.
 *
 * @generated from message google.devtools.cloudtrace.v2.Span.Links
 */
export type Span_Links = Message<"google.devtools.cloudtrace.v2.Span.Links"> & {
  /**
   * A collection of links.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v2.Span.Link link = 1;
   */
  link: Span_Link[];

  /**
   * The number of dropped links after the maximum size was enforced. If
   * this value is 0, then no links were dropped.
   *
   * @generated from field: int32 dropped_links_count = 2;
   */
  droppedLinksCount: number;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Span.Links.
 * Use `create(Span_LinksSchema)` to create a new message.
 */
export const Span_LinksSchema: GenMessage<Span_Links> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 0, 4);

/**
 * Type of span. Can be used to specify additional relationships between spans
 * in addition to a parent/child relationship.
 *
 * @generated from enum google.devtools.cloudtrace.v2.Span.SpanKind
 */
export enum Span_SpanKind {
  /**
   * Unspecified. Do NOT use as default.
   * Implementations MAY assume SpanKind.INTERNAL to be default.
   *
   * @generated from enum value: SPAN_KIND_UNSPECIFIED = 0;
   */
  SPAN_KIND_UNSPECIFIED = 0,

  /**
   * Indicates that the span is used internally. Default value.
   *
   * @generated from enum value: INTERNAL = 1;
   */
  INTERNAL = 1,

  /**
   * Indicates that the span covers server-side handling of an RPC or other
   * remote network request.
   *
   * @generated from enum value: SERVER = 2;
   */
  SERVER = 2,

  /**
   * Indicates that the span covers the client-side wrapper around an RPC or
   * other remote request.
   *
   * @generated from enum value: CLIENT = 3;
   */
  CLIENT = 3,

  /**
   * Indicates that the span describes producer sending a message to a broker.
   * Unlike client and  server, there is no direct critical path latency
   * relationship between producer and consumer spans (e.g. publishing a
   * message to a pubsub service).
   *
   * @generated from enum value: PRODUCER = 4;
   */
  PRODUCER = 4,

  /**
   * Indicates that the span describes consumer receiving a message from a
   * broker. Unlike client and  server, there is no direct critical path
   * latency relationship between producer and consumer spans (e.g. receiving
   * a message from a pubsub service subscription).
   *
   * @generated from enum value: CONSUMER = 5;
   */
  CONSUMER = 5,
}

/**
 * Describes the enum google.devtools.cloudtrace.v2.Span.SpanKind.
 */
export const Span_SpanKindSchema: GenEnum<Span_SpanKind> = /*@__PURE__*/
  enumDesc(file_google_devtools_cloudtrace_v2_trace, 0, 0);

/**
 * The allowed types for `[VALUE]` in a `[KEY]:[VALUE]` attribute.
 *
 * @generated from message google.devtools.cloudtrace.v2.AttributeValue
 */
export type AttributeValue = Message<"google.devtools.cloudtrace.v2.AttributeValue"> & {
  /**
   * The type of the value.
   *
   * @generated from oneof google.devtools.cloudtrace.v2.AttributeValue.value
   */
  value: {
    /**
     * A string up to 256 bytes long.
     *
     * @generated from field: google.devtools.cloudtrace.v2.TruncatableString string_value = 1;
     */
    value: TruncatableString;
    case: "stringValue";
  } | {
    /**
     * A 64-bit signed integer.
     *
     * @generated from field: int64 int_value = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * A Boolean value represented by `true` or `false`.
     *
     * @generated from field: bool bool_value = 3;
     */
    value: boolean;
    case: "boolValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.devtools.cloudtrace.v2.AttributeValue.
 * Use `create(AttributeValueSchema)` to create a new message.
 */
export const AttributeValueSchema: GenMessage<AttributeValue> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 1);

/**
 * A call stack appearing in a trace.
 *
 * @generated from message google.devtools.cloudtrace.v2.StackTrace
 */
export type StackTrace = Message<"google.devtools.cloudtrace.v2.StackTrace"> & {
  /**
   * Stack frames in this stack trace. A maximum of 128 frames are allowed.
   *
   * @generated from field: google.devtools.cloudtrace.v2.StackTrace.StackFrames stack_frames = 1;
   */
  stackFrames?: StackTrace_StackFrames;

  /**
   * The hash ID is used to conserve network bandwidth for duplicate
   * stack traces within a single trace.
   *
   * Often multiple spans will have identical stack traces.
   * The first occurrence of a stack trace should contain both the
   * `stackFrame` content and a value in `stackTraceHashId`.
   *
   * Subsequent spans within the same request can refer
   * to that stack trace by only setting `stackTraceHashId`.
   *
   * @generated from field: int64 stack_trace_hash_id = 2;
   */
  stackTraceHashId: bigint;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.StackTrace.
 * Use `create(StackTraceSchema)` to create a new message.
 */
export const StackTraceSchema: GenMessage<StackTrace> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 2);

/**
 * Represents a single stack frame in a stack trace.
 *
 * @generated from message google.devtools.cloudtrace.v2.StackTrace.StackFrame
 */
export type StackTrace_StackFrame = Message<"google.devtools.cloudtrace.v2.StackTrace.StackFrame"> & {
  /**
   * The fully-qualified name that uniquely identifies the function or
   * method that is active in this frame (up to 1024 bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString function_name = 1;
   */
  functionName?: TruncatableString;

  /**
   * An un-mangled function name, if `function_name` is mangled.
   * To get information about name mangling, run
   * [this search](https://www.google.com/search?q=cxx+name+mangling).
   * The name can be fully-qualified (up to 1024 bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString original_function_name = 2;
   */
  originalFunctionName?: TruncatableString;

  /**
   * The name of the source file where the function call appears (up to 256
   * bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString file_name = 3;
   */
  fileName?: TruncatableString;

  /**
   * The line number in `file_name` where the function call appears.
   *
   * @generated from field: int64 line_number = 4;
   */
  lineNumber: bigint;

  /**
   * The column number where the function call appears, if available.
   * This is important in JavaScript because of its anonymous functions.
   *
   * @generated from field: int64 column_number = 5;
   */
  columnNumber: bigint;

  /**
   * The binary module from where the code was loaded.
   *
   * @generated from field: google.devtools.cloudtrace.v2.Module load_module = 6;
   */
  loadModule?: Module;

  /**
   * The version of the deployed source code (up to 128 bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString source_version = 7;
   */
  sourceVersion?: TruncatableString;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.StackTrace.StackFrame.
 * Use `create(StackTrace_StackFrameSchema)` to create a new message.
 */
export const StackTrace_StackFrameSchema: GenMessage<StackTrace_StackFrame> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 2, 0);

/**
 * A collection of stack frames, which can be truncated.
 *
 * @generated from message google.devtools.cloudtrace.v2.StackTrace.StackFrames
 */
export type StackTrace_StackFrames = Message<"google.devtools.cloudtrace.v2.StackTrace.StackFrames"> & {
  /**
   * Stack frames in this call stack.
   *
   * @generated from field: repeated google.devtools.cloudtrace.v2.StackTrace.StackFrame frame = 1;
   */
  frame: StackTrace_StackFrame[];

  /**
   * The number of stack frames that were dropped because there
   * were too many stack frames.
   * If this value is 0, then no stack frames were dropped.
   *
   * @generated from field: int32 dropped_frames_count = 2;
   */
  droppedFramesCount: number;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.StackTrace.StackFrames.
 * Use `create(StackTrace_StackFramesSchema)` to create a new message.
 */
export const StackTrace_StackFramesSchema: GenMessage<StackTrace_StackFrames> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 2, 1);

/**
 * Binary module.
 *
 * @generated from message google.devtools.cloudtrace.v2.Module
 */
export type Module = Message<"google.devtools.cloudtrace.v2.Module"> & {
  /**
   * For example: main binary, kernel modules, and dynamic libraries
   * such as libc.so, sharedlib.so (up to 256 bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString module = 1;
   */
  module?: TruncatableString;

  /**
   * A unique identifier for the module, usually a hash of its
   * contents (up to 128 bytes).
   *
   * @generated from field: google.devtools.cloudtrace.v2.TruncatableString build_id = 2;
   */
  buildId?: TruncatableString;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.Module.
 * Use `create(ModuleSchema)` to create a new message.
 */
export const ModuleSchema: GenMessage<Module> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 3);

/**
 * Represents a string that might be shortened to a specified length.
 *
 * @generated from message google.devtools.cloudtrace.v2.TruncatableString
 */
export type TruncatableString = Message<"google.devtools.cloudtrace.v2.TruncatableString"> & {
  /**
   * The shortened string. For example, if the original string is 500
   * bytes long and the limit of the string is 128 bytes, then
   * `value` contains the first 128 bytes of the 500-byte string.
   *
   * Truncation always happens on a UTF8 character boundary. If there
   * are multi-byte characters in the string, then the length of the
   * shortened string might be less than the size limit.
   *
   * @generated from field: string value = 1;
   */
  value: string;

  /**
   * The number of bytes removed from the original string. If this
   * value is 0, then the string was not shortened.
   *
   * @generated from field: int32 truncated_byte_count = 2;
   */
  truncatedByteCount: number;
};

/**
 * Describes the message google.devtools.cloudtrace.v2.TruncatableString.
 * Use `create(TruncatableStringSchema)` to create a new message.
 */
export const TruncatableStringSchema: GenMessage<TruncatableString> = /*@__PURE__*/
  messageDesc(file_google_devtools_cloudtrace_v2_trace, 4);

