// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/clouddebugger/v2/data.proto (package google.devtools.clouddebugger.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ExtendedSourceContext, SourceContext } from "../../source/v1/source_context_pb";
import { file_google_devtools_source_v1_source_context } from "../../source/v1/source_context_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/clouddebugger/v2/data.proto.
 */
export const file_google_devtools_clouddebugger_v2_data: GenFile = /*@__PURE__*/
  fileDesc("Citnb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kYXRhLnByb3RvEiBnb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52MiIzCg1Gb3JtYXRNZXNzYWdlEg4KBmZvcm1hdBgBIAEoCRISCgpwYXJhbWV0ZXJzGAIgAygJIuQCCg1TdGF0dXNNZXNzYWdlEhAKCGlzX2Vycm9yGAEgASgIEkwKCXJlZmVyc190bxgCIAEoDjI5Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlN0YXR1c01lc3NhZ2UuUmVmZXJlbmNlEkQKC2Rlc2NyaXB0aW9uGAMgASgLMi8uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuRm9ybWF0TWVzc2FnZSKsAQoJUmVmZXJlbmNlEg8KC1VOU1BFQ0lGSUVEEAASHgoaQlJFQUtQT0lOVF9TT1VSQ0VfTE9DQVRJT04QAxIYChRCUkVBS1BPSU5UX0NPTkRJVElPThAEEhkKFUJSRUFLUE9JTlRfRVhQUkVTU0lPThAHEhIKDkJSRUFLUE9JTlRfQUdFEAgSEQoNVkFSSUFCTEVfTkFNRRAFEhIKDlZBUklBQkxFX1ZBTFVFEAYiPAoOU291cmNlTG9jYXRpb24SDAoEcGF0aBgBIAEoCRIMCgRsaW5lGAIgASgFEg4KBmNvbHVtbhgDIAEoBSLpAQoIVmFyaWFibGUSDAoEbmFtZRgBIAEoCRINCgV2YWx1ZRgCIAEoCRIMCgR0eXBlGAYgASgJEjsKB21lbWJlcnMYAyADKAsyKi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5WYXJpYWJsZRI0Cg92YXJfdGFibGVfaW5kZXgYBCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZRI/CgZzdGF0dXMYBSABKAsyLy5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5TdGF0dXNNZXNzYWdlIt0BCgpTdGFja0ZyYW1lEhAKCGZ1bmN0aW9uGAEgASgJEkIKCGxvY2F0aW9uGAIgASgLMjAuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuU291cmNlTG9jYXRpb24SPQoJYXJndW1lbnRzGAMgAygLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuVmFyaWFibGUSOgoGbG9jYWxzGAQgAygLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuVmFyaWFibGUilwcKCkJyZWFrcG9pbnQSCgoCaWQYASABKAkSQwoGYWN0aW9uGA0gASgOMjMuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludC5BY3Rpb24SQgoIbG9jYXRpb24YAiABKAsyMC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5Tb3VyY2VMb2NhdGlvbhIRCgljb25kaXRpb24YAyABKAkSEwoLZXhwcmVzc2lvbnMYBCADKAkSGgoSbG9nX21lc3NhZ2VfZm9ybWF0GA4gASgJEkgKCWxvZ19sZXZlbBgPIAEoDjI1Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9pbnQuTG9nTGV2ZWwSFgoOaXNfZmluYWxfc3RhdGUYBSABKAgSLwoLY3JlYXRlX3RpbWUYCyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCmZpbmFsX3RpbWUYDCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhIKCnVzZXJfZW1haWwYECABKAkSPwoGc3RhdHVzGAogASgLMi8uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuU3RhdHVzTWVzc2FnZRJCCgxzdGFja19mcmFtZXMYByADKAsyLC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5TdGFja0ZyYW1lEkkKFWV2YWx1YXRlZF9leHByZXNzaW9ucxgIIAMoCzIqLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlZhcmlhYmxlEkIKDnZhcmlhYmxlX3RhYmxlGAkgAygLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuVmFyaWFibGUSSAoGbGFiZWxzGBEgAygLMjguZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludC5MYWJlbHNFbnRyeRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIh4KBkFjdGlvbhILCgdDQVBUVVJFEAASBwoDTE9HEAEiLAoITG9nTGV2ZWwSCAoESU5GTxAAEgsKB1dBUk5JTkcQARIJCgVFUlJPUhACIt8DCghEZWJ1Z2dlZRIKCgJpZBgBIAEoCRIPCgdwcm9qZWN0GAIgASgJEhIKCnVuaXF1aWZpZXIYAyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAkSEwoLaXNfaW5hY3RpdmUYBSABKAgSFQoNYWdlbnRfdmVyc2lvbhgGIAEoCRITCgtpc19kaXNhYmxlZBgHIAEoCBI/CgZzdGF0dXMYCCABKAsyLy5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5TdGF0dXNNZXNzYWdlEkEKD3NvdXJjZV9jb250ZXh0cxgJIAMoCzIoLmdvb2dsZS5kZXZ0b29scy5zb3VyY2UudjEuU291cmNlQ29udGV4dBJRChNleHRfc291cmNlX2NvbnRleHRzGA0gAygLMjAuZ29vZ2xlLmRldnRvb2xzLnNvdXJjZS52MS5FeHRlbmRlZFNvdXJjZUNvbnRleHRCAhgBEkYKBmxhYmVscxgLIAMoCzI2Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRlYnVnZ2VlLkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCxAEKJGNvbS5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52MkIJRGF0YVByb3RvUAFaOGNsb3VkLmdvb2dsZS5jb20vZ28vZGVidWdnZXIvYXBpdjIvZGVidWdnZXJwYjtkZWJ1Z2dlcnBi+AEBqgIYR29vZ2xlLkNsb3VkLkRlYnVnZ2VyLlYyygIYR29vZ2xlXENsb3VkXERlYnVnZ2VyXFYy6gIbR29vZ2xlOjpDbG91ZDo6RGVidWdnZXI6OlYyYgZwcm90bzM", [file_google_devtools_source_v1_source_context, file_google_protobuf_timestamp, file_google_protobuf_wrappers]);

/**
 * Represents a message with parameters.
 *
 * @generated from message google.devtools.clouddebugger.v2.FormatMessage
 */
export type FormatMessage = Message<"google.devtools.clouddebugger.v2.FormatMessage"> & {
  /**
   * Format template for the message. The `format` uses placeholders `$0`,
   * `$1`, etc. to reference parameters. `$$` can be used to denote the `$`
   * character.
   *
   * Examples:
   *
   * *   `Failed to load '$0' which helps debug $1 the first time it
   *     is loaded.  Again, $0 is very important.`
   * *   `Please pay $$10 to use $0 instead of $1.`
   *
   * @generated from field: string format = 1;
   */
  format: string;

  /**
   * Optional parameters to be embedded into the message.
   *
   * @generated from field: repeated string parameters = 2;
   */
  parameters: string[];
};

/**
 * Describes the message google.devtools.clouddebugger.v2.FormatMessage.
 * Use `create(FormatMessageSchema)` to create a new message.
 */
export const FormatMessageSchema: GenMessage<FormatMessage> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 0);

/**
 * Represents a contextual status message.
 * The message can indicate an error or informational status, and refer to
 * specific parts of the containing object.
 * For example, the `Breakpoint.status` field can indicate an error referring
 * to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
 *
 * @generated from message google.devtools.clouddebugger.v2.StatusMessage
 */
export type StatusMessage = Message<"google.devtools.clouddebugger.v2.StatusMessage"> & {
  /**
   * Distinguishes errors from informational messages.
   *
   * @generated from field: bool is_error = 1;
   */
  isError: boolean;

  /**
   * Reference to which the message applies.
   *
   * @generated from field: google.devtools.clouddebugger.v2.StatusMessage.Reference refers_to = 2;
   */
  refersTo: StatusMessage_Reference;

  /**
   * Status message text.
   *
   * @generated from field: google.devtools.clouddebugger.v2.FormatMessage description = 3;
   */
  description?: FormatMessage;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.StatusMessage.
 * Use `create(StatusMessageSchema)` to create a new message.
 */
export const StatusMessageSchema: GenMessage<StatusMessage> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 1);

/**
 * Enumerates references to which the message applies.
 *
 * @generated from enum google.devtools.clouddebugger.v2.StatusMessage.Reference
 */
export enum StatusMessage_Reference {
  /**
   * Status doesn't refer to any particular input.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Status applies to the breakpoint and is related to its location.
   *
   * @generated from enum value: BREAKPOINT_SOURCE_LOCATION = 3;
   */
  BREAKPOINT_SOURCE_LOCATION = 3,

  /**
   * Status applies to the breakpoint and is related to its condition.
   *
   * @generated from enum value: BREAKPOINT_CONDITION = 4;
   */
  BREAKPOINT_CONDITION = 4,

  /**
   * Status applies to the breakpoint and is related to its expressions.
   *
   * @generated from enum value: BREAKPOINT_EXPRESSION = 7;
   */
  BREAKPOINT_EXPRESSION = 7,

  /**
   * Status applies to the breakpoint and is related to its age.
   *
   * @generated from enum value: BREAKPOINT_AGE = 8;
   */
  BREAKPOINT_AGE = 8,

  /**
   * Status applies to the entire variable.
   *
   * @generated from enum value: VARIABLE_NAME = 5;
   */
  VARIABLE_NAME = 5,

  /**
   * Status applies to variable value (variable name is valid).
   *
   * @generated from enum value: VARIABLE_VALUE = 6;
   */
  VARIABLE_VALUE = 6,
}

/**
 * Describes the enum google.devtools.clouddebugger.v2.StatusMessage.Reference.
 */
export const StatusMessage_ReferenceSchema: GenEnum<StatusMessage_Reference> = /*@__PURE__*/
  enumDesc(file_google_devtools_clouddebugger_v2_data, 1, 0);

/**
 * Represents a location in the source code.
 *
 * @generated from message google.devtools.clouddebugger.v2.SourceLocation
 */
export type SourceLocation = Message<"google.devtools.clouddebugger.v2.SourceLocation"> & {
  /**
   * Path to the source file within the source context of the target binary.
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * Line inside the file. The first line in the file has the value `1`.
   *
   * @generated from field: int32 line = 2;
   */
  line: number;

  /**
   * Column within a line. The first column in a line as the value `1`.
   * Agents that do not support setting breakpoints on specific columns ignore
   * this field.
   *
   * @generated from field: int32 column = 3;
   */
  column: number;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.SourceLocation.
 * Use `create(SourceLocationSchema)` to create a new message.
 */
export const SourceLocationSchema: GenMessage<SourceLocation> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 2);

/**
 * Represents a variable or an argument possibly of a compound object type.
 * Note how the following variables are represented:
 *
 * 1) A simple variable:
 *
 *     int x = 5
 *
 *     { name: "x", value: "5", type: "int" }  // Captured variable
 *
 * 2) A compound object:
 *
 *     struct T {
 *         int m1;
 *         int m2;
 *     };
 *     T x = { 3, 7 };
 *
 *     {  // Captured variable
 *         name: "x",
 *         type: "T",
 *         members { name: "m1", value: "3", type: "int" },
 *         members { name: "m2", value: "7", type: "int" }
 *     }
 *
 * 3) A pointer where the pointee was captured:
 *
 *     T x = { 3, 7 };
 *     T* p = &x;
 *
 *     {   // Captured variable
 *         name: "p",
 *         type: "T*",
 *         value: "0x00500500",
 *         members { name: "m1", value: "3", type: "int" },
 *         members { name: "m2", value: "7", type: "int" }
 *     }
 *
 * 4) A pointer where the pointee was not captured:
 *
 *     T* p = new T;
 *
 *     {   // Captured variable
 *         name: "p",
 *         type: "T*",
 *         value: "0x00400400"
 *         status { is_error: true, description { format: "unavailable" } }
 *     }
 *
 * The status should describe the reason for the missing value,
 * such as `<optimized out>`, `<inaccessible>`, `<pointers limit reached>`.
 *
 * Note that a null pointer should not have members.
 *
 * 5) An unnamed value:
 *
 *     int* p = new int(7);
 *
 *     {   // Captured variable
 *         name: "p",
 *         value: "0x00500500",
 *         type: "int*",
 *         members { value: "7", type: "int" } }
 *
 * 6) An unnamed pointer where the pointee was not captured:
 *
 *     int* p = new int(7);
 *     int** pp = &p;
 *
 *     {  // Captured variable
 *         name: "pp",
 *         value: "0x00500500",
 *         type: "int**",
 *         members {
 *             value: "0x00400400",
 *             type: "int*"
 *             status {
 *                 is_error: true,
 *                 description: { format: "unavailable" } }
 *             }
 *         }
 *     }
 *
 * To optimize computation, memory and network traffic, variables that
 * repeat in the output multiple times can be stored once in a shared
 * variable table and be referenced using the `var_table_index` field.  The
 * variables stored in the shared table are nameless and are essentially
 * a partition of the complete variable. To reconstruct the complete
 * variable, merge the referencing variable with the referenced variable.
 *
 * When using the shared variable table, the following variables:
 *
 *     T x = { 3, 7 };
 *     T* p = &x;
 *     T& r = x;
 *
 *     { name: "x", var_table_index: 3, type: "T" }  // Captured variables
 *     { name: "p", value "0x00500500", type="T*", var_table_index: 3 }
 *     { name: "r", type="T&", var_table_index: 3 }
 *
 *     {  // Shared variable table entry #3:
 *         members { name: "m1", value: "3", type: "int" },
 *         members { name: "m2", value: "7", type: "int" }
 *     }
 *
 * Note that the pointer address is stored with the referencing variable
 * and not with the referenced variable. This allows the referenced variable
 * to be shared between pointers and references.
 *
 * The type field is optional. The debugger agent may or may not support it.
 *
 * @generated from message google.devtools.clouddebugger.v2.Variable
 */
export type Variable = Message<"google.devtools.clouddebugger.v2.Variable"> & {
  /**
   * Name of the variable, if any.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Simple value of the variable.
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * Variable type (e.g. `MyClass`). If the variable is split with
   * `var_table_index`, `type` goes next to `value`. The interpretation of
   * a type is agent specific. It is recommended to include the dynamic type
   * rather than a static type of an object.
   *
   * @generated from field: string type = 6;
   */
  type: string;

  /**
   * Members contained or pointed to by the variable.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Variable members = 3;
   */
  members: Variable[];

  /**
   * Reference to a variable in the shared variable table. More than
   * one variable can reference the same variable in the table. The
   * `var_table_index` field is an index into `variable_table` in Breakpoint.
   *
   * @generated from field: google.protobuf.Int32Value var_table_index = 4;
   */
  varTableIndex?: number;

  /**
   * Status associated with the variable. This field will usually stay
   * unset. A status of a single variable only applies to that variable or
   * expression. The rest of breakpoint data still remains valid. Variables
   * might be reported in error state even when breakpoint is not in final
   * state.
   *
   * The message may refer to variable name with `refers_to` set to
   * `VARIABLE_NAME`. Alternatively `refers_to` will be set to `VARIABLE_VALUE`.
   * In either case variable value and members will be unset.
   *
   * Example of error message applied to name: `Invalid expression syntax`.
   *
   * Example of information message applied to value: `Not captured`.
   *
   * Examples of error message applied to value:
   *
   * *   `Malformed string`,
   * *   `Field f not found in class C`
   * *   `Null pointer dereference`
   *
   * @generated from field: google.devtools.clouddebugger.v2.StatusMessage status = 5;
   */
  status?: StatusMessage;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.Variable.
 * Use `create(VariableSchema)` to create a new message.
 */
export const VariableSchema: GenMessage<Variable> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 3);

/**
 * Represents a stack frame context.
 *
 * @generated from message google.devtools.clouddebugger.v2.StackFrame
 */
export type StackFrame = Message<"google.devtools.clouddebugger.v2.StackFrame"> & {
  /**
   * Demangled function name at the call site.
   *
   * @generated from field: string function = 1;
   */
  function: string;

  /**
   * Source location of the call site.
   *
   * @generated from field: google.devtools.clouddebugger.v2.SourceLocation location = 2;
   */
  location?: SourceLocation;

  /**
   * Set of arguments passed to this function.
   * Note that this might not be populated for all stack frames.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Variable arguments = 3;
   */
  arguments: Variable[];

  /**
   * Set of local variables at the stack frame location.
   * Note that this might not be populated for all stack frames.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Variable locals = 4;
   */
  locals: Variable[];
};

/**
 * Describes the message google.devtools.clouddebugger.v2.StackFrame.
 * Use `create(StackFrameSchema)` to create a new message.
 */
export const StackFrameSchema: GenMessage<StackFrame> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 4);

/**
 * Represents the breakpoint specification, status and results.
 *
 * @generated from message google.devtools.clouddebugger.v2.Breakpoint
 */
export type Breakpoint = Message<"google.devtools.clouddebugger.v2.Breakpoint"> & {
  /**
   * Breakpoint identifier, unique in the scope of the debuggee.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Action that the agent should perform when the code at the
   * breakpoint location is hit.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint.Action action = 13;
   */
  action: Breakpoint_Action;

  /**
   * Breakpoint source location.
   *
   * @generated from field: google.devtools.clouddebugger.v2.SourceLocation location = 2;
   */
  location?: SourceLocation;

  /**
   * Condition that triggers the breakpoint.
   * The condition is a compound boolean expression composed using expressions
   * in a programming language at the source location.
   *
   * @generated from field: string condition = 3;
   */
  condition: string;

  /**
   * List of read-only expressions to evaluate at the breakpoint location.
   * The expressions are composed using expressions in the programming language
   * at the source location. If the breakpoint action is `LOG`, the evaluated
   * expressions are included in log statements.
   *
   * @generated from field: repeated string expressions = 4;
   */
  expressions: string[];

  /**
   * Only relevant when action is `LOG`. Defines the message to log when
   * the breakpoint hits. The message may include parameter placeholders `$0`,
   * `$1`, etc. These placeholders are replaced with the evaluated value
   * of the appropriate expression. Expressions not referenced in
   * `log_message_format` are not logged.
   *
   * Example: `Message received, id = $0, count = $1` with
   * `expressions` = `[ message.id, message.count ]`.
   *
   * @generated from field: string log_message_format = 14;
   */
  logMessageFormat: string;

  /**
   * Indicates the severity of the log. Only relevant when action is `LOG`.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint.LogLevel log_level = 15;
   */
  logLevel: Breakpoint_LogLevel;

  /**
   * When true, indicates that this is a final result and the
   * breakpoint state will not change from here on.
   *
   * @generated from field: bool is_final_state = 5;
   */
  isFinalState: boolean;

  /**
   * Time this breakpoint was created by the server in seconds resolution.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 11;
   */
  createTime?: Timestamp;

  /**
   * Time this breakpoint was finalized as seen by the server in seconds
   * resolution.
   *
   * @generated from field: google.protobuf.Timestamp final_time = 12;
   */
  finalTime?: Timestamp;

  /**
   * E-mail address of the user that created this breakpoint
   *
   * @generated from field: string user_email = 16;
   */
  userEmail: string;

  /**
   * Breakpoint status.
   *
   * The status includes an error flag and a human readable message.
   * This field is usually unset. The message can be either
   * informational or an error message. Regardless, clients should always
   * display the text message back to the user.
   *
   * Error status indicates complete failure of the breakpoint.
   *
   * Example (non-final state): `Still loading symbols...`
   *
   * Examples (final state):
   *
   * *   `Invalid line number` referring to location
   * *   `Field f not found in class C` referring to condition
   *
   * @generated from field: google.devtools.clouddebugger.v2.StatusMessage status = 10;
   */
  status?: StatusMessage;

  /**
   * The stack at breakpoint time, where stack_frames[0] represents the most
   * recently entered function.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.StackFrame stack_frames = 7;
   */
  stackFrames: StackFrame[];

  /**
   * Values of evaluated expressions at breakpoint time.
   * The evaluated expressions appear in exactly the same order they
   * are listed in the `expressions` field.
   * The `name` field holds the original expression text, the `value` or
   * `members` field holds the result of the evaluated expression.
   * If the expression cannot be evaluated, the `status` inside the `Variable`
   * will indicate an error and contain the error text.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Variable evaluated_expressions = 8;
   */
  evaluatedExpressions: Variable[];

  /**
   * The `variable_table` exists to aid with computation, memory and network
   * traffic optimization.  It enables storing a variable once and reference
   * it from multiple variables, including variables stored in the
   * `variable_table` itself.
   * For example, the same `this` object, which may appear at many levels of
   * the stack, can have all of its data stored once in this table.  The
   * stack frame variables then would hold only a reference to it.
   *
   * The variable `var_table_index` field is an index into this repeated field.
   * The stored objects are nameless and get their name from the referencing
   * variable. The effective variable is a merge of the referencing variable
   * and the referenced variable.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Variable variable_table = 9;
   */
  variableTable: Variable[];

  /**
   * A set of custom breakpoint properties, populated by the agent, to be
   * displayed to the user.
   *
   * @generated from field: map<string, string> labels = 17;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.devtools.clouddebugger.v2.Breakpoint.
 * Use `create(BreakpointSchema)` to create a new message.
 */
export const BreakpointSchema: GenMessage<Breakpoint> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 5);

/**
 * Actions that can be taken when a breakpoint hits.
 * Agents should reject breakpoints with unsupported or unknown action values.
 *
 * @generated from enum google.devtools.clouddebugger.v2.Breakpoint.Action
 */
export enum Breakpoint_Action {
  /**
   * Capture stack frame and variables and update the breakpoint.
   * The data is only captured once. After that the breakpoint is set
   * in a final state.
   *
   * @generated from enum value: CAPTURE = 0;
   */
  CAPTURE = 0,

  /**
   * Log each breakpoint hit. The breakpoint remains active until
   * deleted or expired.
   *
   * @generated from enum value: LOG = 1;
   */
  LOG = 1,
}

/**
 * Describes the enum google.devtools.clouddebugger.v2.Breakpoint.Action.
 */
export const Breakpoint_ActionSchema: GenEnum<Breakpoint_Action> = /*@__PURE__*/
  enumDesc(file_google_devtools_clouddebugger_v2_data, 5, 0);

/**
 * Log severity levels.
 *
 * @generated from enum google.devtools.clouddebugger.v2.Breakpoint.LogLevel
 */
export enum Breakpoint_LogLevel {
  /**
   * Information log message.
   *
   * @generated from enum value: INFO = 0;
   */
  INFO = 0,

  /**
   * Warning log message.
   *
   * @generated from enum value: WARNING = 1;
   */
  WARNING = 1,

  /**
   * Error log message.
   *
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}

/**
 * Describes the enum google.devtools.clouddebugger.v2.Breakpoint.LogLevel.
 */
export const Breakpoint_LogLevelSchema: GenEnum<Breakpoint_LogLevel> = /*@__PURE__*/
  enumDesc(file_google_devtools_clouddebugger_v2_data, 5, 1);

/**
 * Represents the debugged application. The application may include one or more
 * replicated processes executing the same code. Each of these processes is
 * attached with a debugger agent, carrying out the debugging commands.
 * Agents attached to the same debuggee identify themselves as such by using
 * exactly the same Debuggee message value when registering.
 *
 * @generated from message google.devtools.clouddebugger.v2.Debuggee
 */
export type Debuggee = Message<"google.devtools.clouddebugger.v2.Debuggee"> & {
  /**
   * Unique identifier for the debuggee generated by the controller service.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Project the debuggee is associated with.
   * Use project number or id when registering a Google Cloud Platform project.
   *
   * @generated from field: string project = 2;
   */
  project: string;

  /**
   * Uniquifier to further distinguish the application.
   * It is possible that different applications might have identical values in
   * the debuggee message, thus, incorrectly identified as a single application
   * by the Controller service. This field adds salt to further distinguish the
   * application. Agents should consider seeding this field with value that
   * identifies the code, binary, configuration and environment.
   *
   * @generated from field: string uniquifier = 3;
   */
  uniquifier: string;

  /**
   * Human readable description of the debuggee.
   * Including a human-readable project name, environment name and version
   * information is recommended.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * If set to `true`, indicates that Controller service does not detect any
   * activity from the debuggee agents and the application is possibly stopped.
   *
   * @generated from field: bool is_inactive = 5;
   */
  isInactive: boolean;

  /**
   * Version ID of the agent.
   * Schema: `domain/language-platform/vmajor.minor` (for example
   * `google.com/java-gcp/v1.1`).
   *
   * @generated from field: string agent_version = 6;
   */
  agentVersion: string;

  /**
   * If set to `true`, indicates that the agent should disable itself and
   * detach from the debuggee.
   *
   * @generated from field: bool is_disabled = 7;
   */
  isDisabled: boolean;

  /**
   * Human readable message to be displayed to the user about this debuggee.
   * Absence of this field indicates no status. The message can be either
   * informational or an error status.
   *
   * @generated from field: google.devtools.clouddebugger.v2.StatusMessage status = 8;
   */
  status?: StatusMessage;

  /**
   * References to the locations and revisions of the source code used in the
   * deployed application.
   *
   * @generated from field: repeated google.devtools.source.v1.SourceContext source_contexts = 9;
   */
  sourceContexts: SourceContext[];

  /**
   * References to the locations and revisions of the source code used in the
   * deployed application.
   *
   * @generated from field: repeated google.devtools.source.v1.ExtendedSourceContext ext_source_contexts = 13 [deprecated = true];
   * @deprecated
   */
  extSourceContexts: ExtendedSourceContext[];

  /**
   * A set of custom debuggee properties, populated by the agent, to be
   * displayed to the user.
   *
   * @generated from field: map<string, string> labels = 11;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.devtools.clouddebugger.v2.Debuggee.
 * Use `create(DebuggeeSchema)` to create a new message.
 */
export const DebuggeeSchema: GenMessage<Debuggee> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_data, 6);

