// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/clouddebugger/v2/debugger.proto (package google.devtools.clouddebugger.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Breakpoint, Breakpoint_Action, Debuggee } from "./data_pb";
import { file_google_devtools_clouddebugger_v2_data } from "./data_pb";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/clouddebugger/v2/debugger.proto.
 */
export const file_google_devtools_clouddebugger_v2_debugger: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9kZWJ1Z2dlci5wcm90bxIgZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIilAEKFFNldEJyZWFrcG9pbnRSZXF1ZXN0EhgKC2RlYnVnZ2VlX2lkGAEgASgJQgPgQQISRQoKYnJlYWtwb2ludBgCIAEoCzIsLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9pbnRCA+BBAhIbCg5jbGllbnRfdmVyc2lvbhgEIAEoCUID4EECIlkKFVNldEJyZWFrcG9pbnRSZXNwb25zZRJACgpicmVha3BvaW50GAEgASgLMiwuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludCJpChRHZXRCcmVha3BvaW50UmVxdWVzdBIYCgtkZWJ1Z2dlZV9pZBgBIAEoCUID4EECEhoKDWJyZWFrcG9pbnRfaWQYAiABKAlCA+BBAhIbCg5jbGllbnRfdmVyc2lvbhgEIAEoCUID4EECIlkKFUdldEJyZWFrcG9pbnRSZXNwb25zZRJACgpicmVha3BvaW50GAEgASgLMiwuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludCJsChdEZWxldGVCcmVha3BvaW50UmVxdWVzdBIYCgtkZWJ1Z2dlZV9pZBgBIAEoCUID4EECEhoKDWJyZWFrcG9pbnRfaWQYAiABKAlCA+BBAhIbCg5jbGllbnRfdmVyc2lvbhgDIAEoCUID4EECIvACChZMaXN0QnJlYWtwb2ludHNSZXF1ZXN0EhgKC2RlYnVnZ2VlX2lkGAEgASgJQgPgQQISGQoRaW5jbHVkZV9hbGxfdXNlcnMYAiABKAgSGAoQaW5jbHVkZV9pbmFjdGl2ZRgDIAEoCBJeCgZhY3Rpb24YBCABKAsyTi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0QnJlYWtwb2ludHNSZXF1ZXN0LkJyZWFrcG9pbnRBY3Rpb25WYWx1ZRIZCg1zdHJpcF9yZXN1bHRzGAUgASgIQgIYARISCgp3YWl0X3Rva2VuGAYgASgJEhsKDmNsaWVudF92ZXJzaW9uGAggASgJQgPgQQIaWwoVQnJlYWtwb2ludEFjdGlvblZhbHVlEkIKBXZhbHVlGAEgASgOMjMuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludC5BY3Rpb24idQoXTGlzdEJyZWFrcG9pbnRzUmVzcG9uc2USQQoLYnJlYWtwb2ludHMYASADKAsyLC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5CcmVha3BvaW50EhcKD25leHRfd2FpdF90b2tlbhgCIAEoCSJjChRMaXN0RGVidWdnZWVzUmVxdWVzdBIUCgdwcm9qZWN0GAIgASgJQgPgQQISGAoQaW5jbHVkZV9pbmFjdGl2ZRgDIAEoCBIbCg5jbGllbnRfdmVyc2lvbhgEIAEoCUID4EECIlYKFUxpc3REZWJ1Z2dlZXNSZXNwb25zZRI9CglkZWJ1Z2dlZXMYASADKAsyKi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5EZWJ1Z2dlZTLyCQoJRGVidWdnZXIyEvIBCg1TZXRCcmVha3BvaW50EjYuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuU2V0QnJlYWtwb2ludFJlcXVlc3QaNy5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5TZXRCcmVha3BvaW50UmVzcG9uc2UicNpBJWRlYnVnZ2VlX2lkLGJyZWFrcG9pbnQsY2xpZW50X3ZlcnNpb26C0+STAkI6CmJyZWFrcG9pbnQiNC92Mi9kZWJ1Z2dlci9kZWJ1Z2dlZXMve2RlYnVnZ2VlX2lkfS9icmVha3BvaW50cy9zZXQS9QEKDUdldEJyZWFrcG9pbnQSNi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5HZXRCcmVha3BvaW50UmVxdWVzdBo3Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkdldEJyZWFrcG9pbnRSZXNwb25zZSJz2kEoZGVidWdnZWVfaWQsYnJlYWtwb2ludF9pZCxjbGllbnRfdmVyc2lvboLT5JMCQhJAL3YyL2RlYnVnZ2VyL2RlYnVnZ2Vlcy97ZGVidWdnZWVfaWR9L2JyZWFrcG9pbnRzL3ticmVha3BvaW50X2lkfRLaAQoQRGVsZXRlQnJlYWtwb2ludBI5Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRlbGV0ZUJyZWFrcG9pbnRSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5InPaQShkZWJ1Z2dlZV9pZCxicmVha3BvaW50X2lkLGNsaWVudF92ZXJzaW9ugtPkkwJCKkAvdjIvZGVidWdnZXIvZGVidWdnZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMve2JyZWFrcG9pbnRfaWR9Et0BCg9MaXN0QnJlYWtwb2ludHMSOC5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0QnJlYWtwb2ludHNSZXF1ZXN0GjkuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuTGlzdEJyZWFrcG9pbnRzUmVzcG9uc2UiVdpBGmRlYnVnZ2VlX2lkLGNsaWVudF92ZXJzaW9ugtPkkwIyEjAvdjIvZGVidWdnZXIvZGVidWdnZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMSuQEKDUxpc3REZWJ1Z2dlZXMSNi5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5MaXN0RGVidWdnZWVzUmVxdWVzdBo3Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkxpc3REZWJ1Z2dlZXNSZXNwb25zZSI32kEWcHJvamVjdCxjbGllbnRfdmVyc2lvboLT5JMCGBIWL3YyL2RlYnVnZ2VyL2RlYnVnZ2Vlcxp/ykEcY2xvdWRkZWJ1Z2dlci5nb29nbGVhcGlzLmNvbdJBXWh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xvdWQtcGxhdGZvcm0saHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZF9kZWJ1Z2dlckLFAQokY29tLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyQg1EZWJ1Z2dlclByb3RvUAFaOGNsb3VkLmdvb2dsZS5jb20vZ28vZGVidWdnZXIvYXBpdjIvZGVidWdnZXJwYjtkZWJ1Z2dlcnBiqgIYR29vZ2xlLkNsb3VkLkRlYnVnZ2VyLlYyygIYR29vZ2xlXENsb3VkXERlYnVnZ2VyXFYy6gIbR29vZ2xlOjpDbG91ZDo6RGVidWdnZXI6OlYyYgZwcm90bzM", [file_google_api_client, file_google_api_field_behavior, file_google_devtools_clouddebugger_v2_data, file_google_protobuf_empty, file_google_api_annotations]);

/**
 * Request to set a breakpoint
 *
 * @generated from message google.devtools.clouddebugger.v2.SetBreakpointRequest
 */
export type SetBreakpointRequest = Message<"google.devtools.clouddebugger.v2.SetBreakpointRequest"> & {
  /**
   * Required. ID of the debuggee where the breakpoint is to be set.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * Required. Breakpoint specification to set.
   * The field `location` of the breakpoint must be set.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
   */
  breakpoint?: Breakpoint;

  /**
   * Required. The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.SetBreakpointRequest.
 * Use `create(SetBreakpointRequestSchema)` to create a new message.
 */
export const SetBreakpointRequestSchema: GenMessage<SetBreakpointRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 0);

/**
 * Response for setting a breakpoint.
 *
 * @generated from message google.devtools.clouddebugger.v2.SetBreakpointResponse
 */
export type SetBreakpointResponse = Message<"google.devtools.clouddebugger.v2.SetBreakpointResponse"> & {
  /**
   * Breakpoint resource.
   * The field `id` is guaranteed to be set (in addition to the echoed fileds).
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
   */
  breakpoint?: Breakpoint;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.SetBreakpointResponse.
 * Use `create(SetBreakpointResponseSchema)` to create a new message.
 */
export const SetBreakpointResponseSchema: GenMessage<SetBreakpointResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 1);

/**
 * Request to get breakpoint information.
 *
 * @generated from message google.devtools.clouddebugger.v2.GetBreakpointRequest
 */
export type GetBreakpointRequest = Message<"google.devtools.clouddebugger.v2.GetBreakpointRequest"> & {
  /**
   * Required. ID of the debuggee whose breakpoint to get.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * Required. ID of the breakpoint to get.
   *
   * @generated from field: string breakpoint_id = 2;
   */
  breakpointId: string;

  /**
   * Required. The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.GetBreakpointRequest.
 * Use `create(GetBreakpointRequestSchema)` to create a new message.
 */
export const GetBreakpointRequestSchema: GenMessage<GetBreakpointRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 2);

/**
 * Response for getting breakpoint information.
 *
 * @generated from message google.devtools.clouddebugger.v2.GetBreakpointResponse
 */
export type GetBreakpointResponse = Message<"google.devtools.clouddebugger.v2.GetBreakpointResponse"> & {
  /**
   * Complete breakpoint state.
   * The fields `id` and `location` are guaranteed to be set.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 1;
   */
  breakpoint?: Breakpoint;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.GetBreakpointResponse.
 * Use `create(GetBreakpointResponseSchema)` to create a new message.
 */
export const GetBreakpointResponseSchema: GenMessage<GetBreakpointResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 3);

/**
 * Request to delete a breakpoint.
 *
 * @generated from message google.devtools.clouddebugger.v2.DeleteBreakpointRequest
 */
export type DeleteBreakpointRequest = Message<"google.devtools.clouddebugger.v2.DeleteBreakpointRequest"> & {
  /**
   * Required. ID of the debuggee whose breakpoint to delete.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * Required. ID of the breakpoint to delete.
   *
   * @generated from field: string breakpoint_id = 2;
   */
  breakpointId: string;

  /**
   * Required. The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 3;
   */
  clientVersion: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.DeleteBreakpointRequest.
 * Use `create(DeleteBreakpointRequestSchema)` to create a new message.
 */
export const DeleteBreakpointRequestSchema: GenMessage<DeleteBreakpointRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 4);

/**
 * Request to list breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsRequest
 */
export type ListBreakpointsRequest = Message<"google.devtools.clouddebugger.v2.ListBreakpointsRequest"> & {
  /**
   * Required. ID of the debuggee whose breakpoints to list.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * When set to `true`, the response includes the list of breakpoints set by
   * any user. Otherwise, it includes only breakpoints set by the caller.
   *
   * @generated from field: bool include_all_users = 2;
   */
  includeAllUsers: boolean;

  /**
   * When set to `true`, the response includes active and inactive
   * breakpoints. Otherwise, it includes only active breakpoints.
   *
   * @generated from field: bool include_inactive = 3;
   */
  includeInactive: boolean;

  /**
   * When set, the response includes only breakpoints with the specified action.
   *
   * @generated from field: google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue action = 4;
   */
  action?: ListBreakpointsRequest_BreakpointActionValue;

  /**
   * This field is deprecated. The following fields are always stripped out of
   * the result: `stack_frames`, `evaluated_expressions` and `variable_table`.
   *
   * @generated from field: bool strip_results = 5 [deprecated = true];
   * @deprecated
   */
  stripResults: boolean;

  /**
   * A wait token that, if specified, blocks the call until the breakpoints
   * list has changed, or a server selected timeout has expired.  The value
   * should be set from the last response. The error code
   * `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which
   * should be called again with the same `wait_token`.
   *
   * @generated from field: string wait_token = 6;
   */
  waitToken: string;

  /**
   * Required. The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 8;
   */
  clientVersion: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListBreakpointsRequest.
 * Use `create(ListBreakpointsRequestSchema)` to create a new message.
 */
export const ListBreakpointsRequestSchema: GenMessage<ListBreakpointsRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 5);

/**
 * Wrapper message for `Breakpoint.Action`. Defines a filter on the action
 * field of breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue
 */
export type ListBreakpointsRequest_BreakpointActionValue = Message<"google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue"> & {
  /**
   * Only breakpoints with the specified action will pass the filter.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint.Action value = 1;
   */
  value: Breakpoint_Action;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListBreakpointsRequest.BreakpointActionValue.
 * Use `create(ListBreakpointsRequest_BreakpointActionValueSchema)` to create a new message.
 */
export const ListBreakpointsRequest_BreakpointActionValueSchema: GenMessage<ListBreakpointsRequest_BreakpointActionValue> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 5, 0);

/**
 * Response for listing breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListBreakpointsResponse
 */
export type ListBreakpointsResponse = Message<"google.devtools.clouddebugger.v2.ListBreakpointsResponse"> & {
  /**
   * List of breakpoints matching the request.
   * The fields `id` and `location` are guaranteed to be set on each breakpoint.
   * The fields: `stack_frames`, `evaluated_expressions` and `variable_table`
   * are cleared on each breakpoint regardless of its status.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
   */
  breakpoints: Breakpoint[];

  /**
   * A wait token that can be used in the next call to `list` (REST) or
   * `ListBreakpoints` (RPC) to block until the list of breakpoints has changes.
   *
   * @generated from field: string next_wait_token = 2;
   */
  nextWaitToken: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListBreakpointsResponse.
 * Use `create(ListBreakpointsResponseSchema)` to create a new message.
 */
export const ListBreakpointsResponseSchema: GenMessage<ListBreakpointsResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 6);

/**
 * Request to list debuggees.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListDebuggeesRequest
 */
export type ListDebuggeesRequest = Message<"google.devtools.clouddebugger.v2.ListDebuggeesRequest"> & {
  /**
   * Required. Project number of a Google Cloud project whose debuggees to list.
   *
   * @generated from field: string project = 2;
   */
  project: string;

  /**
   * When set to `true`, the result includes all debuggees. Otherwise, the
   * result includes only debuggees that are active.
   *
   * @generated from field: bool include_inactive = 3;
   */
  includeInactive: boolean;

  /**
   * Required. The client version making the call.
   * Schema: `domain/type/version` (e.g., `google.com/intellij/v1`).
   *
   * @generated from field: string client_version = 4;
   */
  clientVersion: string;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListDebuggeesRequest.
 * Use `create(ListDebuggeesRequestSchema)` to create a new message.
 */
export const ListDebuggeesRequestSchema: GenMessage<ListDebuggeesRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 7);

/**
 * Response for listing debuggees.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListDebuggeesResponse
 */
export type ListDebuggeesResponse = Message<"google.devtools.clouddebugger.v2.ListDebuggeesResponse"> & {
  /**
   * List of debuggees accessible to the calling user.
   * The fields `debuggee.id` and `description` are guaranteed to be set.
   * The `description` field is a human readable field provided by agents and
   * can be displayed to users.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Debuggee debuggees = 1;
   */
  debuggees: Debuggee[];
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListDebuggeesResponse.
 * Use `create(ListDebuggeesResponseSchema)` to create a new message.
 */
export const ListDebuggeesResponseSchema: GenMessage<ListDebuggeesResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_debugger, 8);

/**
 * The Debugger service provides the API that allows users to collect run-time
 * information from a running application, without stopping or slowing it down
 * and without modifying its state.  An application may include one or
 * more replicated processes performing the same work.
 *
 * A debugged application is represented using the Debuggee concept. The
 * Debugger service provides a way to query for available debuggees, but does
 * not provide a way to create one.  A debuggee is created using the Controller
 * service, usually by running a debugger agent with the application.
 *
 * The Debugger service enables the client to set one or more Breakpoints on a
 * Debuggee and collect the results of the set Breakpoints.
 *
 * @generated from service google.devtools.clouddebugger.v2.Debugger2
 */
export const Debugger2: GenService<{
  /**
   * Sets the breakpoint to the debuggee.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Debugger2.SetBreakpoint
   */
  setBreakpoint: {
    methodKind: "unary";
    input: typeof SetBreakpointRequestSchema;
    output: typeof SetBreakpointResponseSchema;
  },
  /**
   * Gets breakpoint information.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Debugger2.GetBreakpoint
   */
  getBreakpoint: {
    methodKind: "unary";
    input: typeof GetBreakpointRequestSchema;
    output: typeof GetBreakpointResponseSchema;
  },
  /**
   * Deletes the breakpoint from the debuggee.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Debugger2.DeleteBreakpoint
   */
  deleteBreakpoint: {
    methodKind: "unary";
    input: typeof DeleteBreakpointRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists all breakpoints for the debuggee.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Debugger2.ListBreakpoints
   */
  listBreakpoints: {
    methodKind: "unary";
    input: typeof ListBreakpointsRequestSchema;
    output: typeof ListBreakpointsResponseSchema;
  },
  /**
   * Lists all the debuggees that the user has access to.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Debugger2.ListDebuggees
   */
  listDebuggees: {
    methodKind: "unary";
    input: typeof ListDebuggeesRequestSchema;
    output: typeof ListDebuggeesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_clouddebugger_v2_debugger, 0);

