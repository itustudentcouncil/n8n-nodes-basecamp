// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/clouddebugger/v2/controller.proto (package google.devtools.clouddebugger.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Breakpoint, Debuggee } from "./data_pb";
import { file_google_devtools_clouddebugger_v2_data } from "./data_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/clouddebugger/v2/controller.proto.
 */
export const file_google_devtools_clouddebugger_v2_controller: GenFile = /*@__PURE__*/
  fileDesc("CjFnb29nbGUvZGV2dG9vbHMvY2xvdWRkZWJ1Z2dlci92Mi9jb250cm9sbGVyLnByb3RvEiBnb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52MiJcChdSZWdpc3RlckRlYnVnZ2VlUmVxdWVzdBJBCghkZWJ1Z2dlZRgBIAEoCzIqLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkRlYnVnZ2VlQgPgQQIiWAoYUmVnaXN0ZXJEZWJ1Z2dlZVJlc3BvbnNlEjwKCGRlYnVnZ2VlGAEgASgLMiouZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuRGVidWdnZWUiaAocTGlzdEFjdGl2ZUJyZWFrcG9pbnRzUmVxdWVzdBIYCgtkZWJ1Z2dlZV9pZBgBIAEoCUID4EECEhIKCndhaXRfdG9rZW4YAiABKAkSGgoSc3VjY2Vzc19vbl90aW1lb3V0GAMgASgIIpEBCh1MaXN0QWN0aXZlQnJlYWtwb2ludHNSZXNwb25zZRJBCgticmVha3BvaW50cxgBIAMoCzIsLmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkJyZWFrcG9pbnQSFwoPbmV4dF93YWl0X3Rva2VuGAIgASgJEhQKDHdhaXRfZXhwaXJlZBgDIAEoCCKAAQodVXBkYXRlQWN0aXZlQnJlYWtwb2ludFJlcXVlc3QSGAoLZGVidWdnZWVfaWQYASABKAlCA+BBAhJFCgpicmVha3BvaW50GAIgASgLMiwuZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuQnJlYWtwb2ludEID4EECIiAKHlVwZGF0ZUFjdGl2ZUJyZWFrcG9pbnRSZXNwb25zZTK+BgoLQ29udHJvbGxlcjISwgEKEFJlZ2lzdGVyRGVidWdnZWUSOS5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5SZWdpc3RlckRlYnVnZ2VlUmVxdWVzdBo6Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlJlZ2lzdGVyRGVidWdnZWVSZXNwb25zZSI32kEIZGVidWdnZWWC0+STAiY6ASoiIS92Mi9jb250cm9sbGVyL2RlYnVnZ2Vlcy9yZWdpc3RlchLiAQoVTGlzdEFjdGl2ZUJyZWFrcG9pbnRzEj4uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjIuTGlzdEFjdGl2ZUJyZWFrcG9pbnRzUmVxdWVzdBo/Lmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLkxpc3RBY3RpdmVCcmVha3BvaW50c1Jlc3BvbnNlIkjaQQtkZWJ1Z2dlZV9pZILT5JMCNBIyL3YyL2NvbnRyb2xsZXIvZGVidWdnZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMSgwIKFlVwZGF0ZUFjdGl2ZUJyZWFrcG9pbnQSPy5nb29nbGUuZGV2dG9vbHMuY2xvdWRkZWJ1Z2dlci52Mi5VcGRhdGVBY3RpdmVCcmVha3BvaW50UmVxdWVzdBpALmdvb2dsZS5kZXZ0b29scy5jbG91ZGRlYnVnZ2VyLnYyLlVwZGF0ZUFjdGl2ZUJyZWFrcG9pbnRSZXNwb25zZSJm2kEWZGVidWdnZWVfaWQsYnJlYWtwb2ludILT5JMCRzoBKhpCL3YyL2NvbnRyb2xsZXIvZGVidWdnZWVzL3tkZWJ1Z2dlZV9pZH0vYnJlYWtwb2ludHMve2JyZWFrcG9pbnQuaWR9Gn/KQRxjbG91ZGRlYnVnZ2VyLmdvb2dsZWFwaXMuY29t0kFdaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbG91ZC1wbGF0Zm9ybSxodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2Nsb3VkX2RlYnVnZ2VyQscBCiRjb20uZ29vZ2xlLmRldnRvb2xzLmNsb3VkZGVidWdnZXIudjJCD0NvbnRyb2xsZXJQcm90b1ABWjhjbG91ZC5nb29nbGUuY29tL2dvL2RlYnVnZ2VyL2FwaXYyL2RlYnVnZ2VycGI7ZGVidWdnZXJwYqoCGEdvb2dsZS5DbG91ZC5EZWJ1Z2dlci5WMsoCGEdvb2dsZVxDbG91ZFxEZWJ1Z2dlclxWMuoCG0dvb2dsZTo6Q2xvdWQ6OkRlYnVnZ2VyOjpWMmIGcHJvdG8z", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_devtools_clouddebugger_v2_data]);

/**
 * Request to register a debuggee.
 *
 * @generated from message google.devtools.clouddebugger.v2.RegisterDebuggeeRequest
 */
export type RegisterDebuggeeRequest = Message<"google.devtools.clouddebugger.v2.RegisterDebuggeeRequest"> & {
  /**
   * Required. Debuggee information to register.
   * The fields `project`, `uniquifier`, `description` and `agent_version`
   * of the debuggee must be set.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
   */
  debuggee?: Debuggee;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.RegisterDebuggeeRequest.
 * Use `create(RegisterDebuggeeRequestSchema)` to create a new message.
 */
export const RegisterDebuggeeRequestSchema: GenMessage<RegisterDebuggeeRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 0);

/**
 * Response for registering a debuggee.
 *
 * @generated from message google.devtools.clouddebugger.v2.RegisterDebuggeeResponse
 */
export type RegisterDebuggeeResponse = Message<"google.devtools.clouddebugger.v2.RegisterDebuggeeResponse"> & {
  /**
   * Debuggee resource.
   * The field `id` is guaranteed to be set (in addition to the echoed fields).
   * If the field `is_disabled` is set to `true`, the agent should disable
   * itself by removing all breakpoints and detaching from the application.
   * It should however continue to poll `RegisterDebuggee` until reenabled.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Debuggee debuggee = 1;
   */
  debuggee?: Debuggee;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.RegisterDebuggeeResponse.
 * Use `create(RegisterDebuggeeResponseSchema)` to create a new message.
 */
export const RegisterDebuggeeResponseSchema: GenMessage<RegisterDebuggeeResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 1);

/**
 * Request to list active breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest
 */
export type ListActiveBreakpointsRequest = Message<"google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest"> & {
  /**
   * Required. Identifies the debuggee.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * A token that, if specified, blocks the method call until the list
   * of active breakpoints has changed, or a server-selected timeout has
   * expired. The value should be set from the `next_wait_token` field in
   * the last response. The initial value should be set to `"init"`.
   *
   * @generated from field: string wait_token = 2;
   */
  waitToken: string;

  /**
   * If set to `true` (recommended), returns `google.rpc.Code.OK` status and
   * sets the `wait_expired` response field to `true` when the server-selected
   * timeout has expired.
   *
   * If set to `false` (deprecated), returns `google.rpc.Code.ABORTED` status
   * when the server-selected timeout has expired.
   *
   * @generated from field: bool success_on_timeout = 3;
   */
  successOnTimeout: boolean;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListActiveBreakpointsRequest.
 * Use `create(ListActiveBreakpointsRequestSchema)` to create a new message.
 */
export const ListActiveBreakpointsRequestSchema: GenMessage<ListActiveBreakpointsRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 2);

/**
 * Response for listing active breakpoints.
 *
 * @generated from message google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse
 */
export type ListActiveBreakpointsResponse = Message<"google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse"> & {
  /**
   * List of all active breakpoints.
   * The fields `id` and `location` are guaranteed to be set on each breakpoint.
   *
   * @generated from field: repeated google.devtools.clouddebugger.v2.Breakpoint breakpoints = 1;
   */
  breakpoints: Breakpoint[];

  /**
   * A token that can be used in the next method call to block until
   * the list of breakpoints changes.
   *
   * @generated from field: string next_wait_token = 2;
   */
  nextWaitToken: string;

  /**
   * If set to `true`, indicates that there is no change to the
   * list of active breakpoints and the server-selected timeout has expired.
   * The `breakpoints` field would be empty and should be ignored.
   *
   * @generated from field: bool wait_expired = 3;
   */
  waitExpired: boolean;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.ListActiveBreakpointsResponse.
 * Use `create(ListActiveBreakpointsResponseSchema)` to create a new message.
 */
export const ListActiveBreakpointsResponseSchema: GenMessage<ListActiveBreakpointsResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 3);

/**
 * Request to update an active breakpoint.
 *
 * @generated from message google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest
 */
export type UpdateActiveBreakpointRequest = Message<"google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest"> & {
  /**
   * Required. Identifies the debuggee being debugged.
   *
   * @generated from field: string debuggee_id = 1;
   */
  debuggeeId: string;

  /**
   * Required. Updated breakpoint information.
   * The field `id` must be set.
   * The agent must echo all Breakpoint specification fields in the update.
   *
   * @generated from field: google.devtools.clouddebugger.v2.Breakpoint breakpoint = 2;
   */
  breakpoint?: Breakpoint;
};

/**
 * Describes the message google.devtools.clouddebugger.v2.UpdateActiveBreakpointRequest.
 * Use `create(UpdateActiveBreakpointRequestSchema)` to create a new message.
 */
export const UpdateActiveBreakpointRequestSchema: GenMessage<UpdateActiveBreakpointRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 4);

/**
 * Response for updating an active breakpoint.
 * The message is defined to allow future extensions.
 *
 * @generated from message google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse
 */
export type UpdateActiveBreakpointResponse = Message<"google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse"> & {
};

/**
 * Describes the message google.devtools.clouddebugger.v2.UpdateActiveBreakpointResponse.
 * Use `create(UpdateActiveBreakpointResponseSchema)` to create a new message.
 */
export const UpdateActiveBreakpointResponseSchema: GenMessage<UpdateActiveBreakpointResponse> = /*@__PURE__*/
  messageDesc(file_google_devtools_clouddebugger_v2_controller, 5);

/**
 * The Controller service provides the API for orchestrating a collection of
 * debugger agents to perform debugging tasks. These agents are each attached
 * to a process of an application which may include one or more replicas.
 *
 * The debugger agents register with the Controller to identify the application
 * being debugged, the Debuggee. All agents that register with the same data,
 * represent the same Debuggee, and are assigned the same `debuggee_id`.
 *
 * The debugger agents call the Controller to retrieve  the list of active
 * Breakpoints. Agents with the same `debuggee_id` get the same breakpoints
 * list. An agent that can fulfill the breakpoint request updates the
 * Controller with the breakpoint result. The controller selects the first
 * result received and discards the rest of the results.
 * Agents that poll again for active breakpoints will no longer have
 * the completed breakpoint in the list and should remove that breakpoint from
 * their attached process.
 *
 * The Controller service does not provide a way to retrieve the results of
 * a completed breakpoint. This functionality is available using the Debugger
 * service.
 *
 * @generated from service google.devtools.clouddebugger.v2.Controller2
 */
export const Controller2: GenService<{
  /**
   * Registers the debuggee with the controller service.
   *
   * All agents attached to the same application must call this method with
   * exactly the same request content to get back the same stable `debuggee_id`.
   * Agents should call this method again whenever `google.rpc.Code.NOT_FOUND`
   * is returned from any controller method.
   *
   * This protocol allows the controller service to disable debuggees, recover
   * from data loss, or change the `debuggee_id` format. Agents must handle
   * `debuggee_id` value changing upon re-registration.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Controller2.RegisterDebuggee
   */
  registerDebuggee: {
    methodKind: "unary";
    input: typeof RegisterDebuggeeRequestSchema;
    output: typeof RegisterDebuggeeResponseSchema;
  },
  /**
   * Returns the list of all active breakpoints for the debuggee.
   *
   * The breakpoint specification (`location`, `condition`, and `expressions`
   * fields) is semantically immutable, although the field values may
   * change. For example, an agent may update the location line number
   * to reflect the actual line where the breakpoint was set, but this
   * doesn't change the breakpoint semantics.
   *
   * This means that an agent does not need to check if a breakpoint has changed
   * when it encounters the same breakpoint on a successive call.
   * Moreover, an agent should remember the breakpoints that are completed
   * until the controller removes them from the active list to avoid
   * setting those breakpoints again.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Controller2.ListActiveBreakpoints
   */
  listActiveBreakpoints: {
    methodKind: "unary";
    input: typeof ListActiveBreakpointsRequestSchema;
    output: typeof ListActiveBreakpointsResponseSchema;
  },
  /**
   * Updates the breakpoint state or mutable fields.
   * The entire Breakpoint message must be sent back to the controller service.
   *
   * Updates to active breakpoint fields are only allowed if the new value
   * does not change the breakpoint specification. Updates to the `location`,
   * `condition` and `expressions` fields should not alter the breakpoint
   * semantics. These may only make changes such as canonicalizing a value
   * or snapping the location to the correct line of code.
   *
   * @generated from rpc google.devtools.clouddebugger.v2.Controller2.UpdateActiveBreakpoint
   */
  updateActiveBreakpoint: {
    methodKind: "unary";
    input: typeof UpdateActiveBreakpointRequestSchema;
    output: typeof UpdateActiveBreakpointResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_clouddebugger_v2_controller, 0);

