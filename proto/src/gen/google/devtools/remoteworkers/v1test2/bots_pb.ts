// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/remoteworkers/v1test2/bots.proto (package google.devtools.remoteworkers.v1test2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { Worker } from "./worker_pb";
import { file_google_devtools_remoteworkers_v1test2_worker } from "./worker_pb";
import type { Any, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/remoteworkers/v1test2/bots.proto.
 */
export const file_google_devtools_remoteworkers_v1test2_bots: GenFile = /*@__PURE__*/
  fileDesc("CjBnb29nbGUvZGV2dG9vbHMvcmVtb3Rld29ya2Vycy92MXRlc3QyL2JvdHMucHJvdG8SJWdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIigwMKCkJvdFNlc3Npb24SDAoEbmFtZRgBIAEoCRIOCgZib3RfaWQYAiABKAkSQAoGc3RhdHVzGAMgASgOMjAuZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5Cb3RTdGF0dXMSPQoGd29ya2VyGAQgASgLMi0uZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5Xb3JrZXISPAoGbGVhc2VzGAUgAygLMiwuZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5MZWFzZRIvCgtleHBpcmVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDwoHdmVyc2lvbhgHIAEoCTpW6kFTCidyZW1vdGV3b3JrZXJzLmdvb2dsZWFwaXMuY29tL0JvdFNlc3Npb24SKHt1bmtub3duX3BhdGh9L2JvdFNlc3Npb25zL3tib3Rfc2Vzc2lvbn0iiQMKBUxlYXNlEgoKAmlkGAcgASgJEiUKB3BheWxvYWQYCCABKAsyFC5nb29nbGUucHJvdG9idWYuQW55EiQKBnJlc3VsdBgJIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSQAoFc3RhdGUYAiABKA4yMS5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkxlYXNlU3RhdGUSIgoGc3RhdHVzGAMgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXMSQwoMcmVxdWlyZW1lbnRzGAQgASgLMi0uZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5Xb3JrZXISLwoLZXhwaXJlX3RpbWUYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhYKCmFzc2lnbm1lbnQYASABKAlCAhgBEjMKEWlubGluZV9hc3NpZ25tZW50GAYgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUICGAEixQEKCUFkbWluVGVtcBJJCgdjb21tYW5kGAEgASgOMjguZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5BZG1pblRlbXAuQ29tbWFuZBILCgNhcmcYAiABKAkiYAoHQ29tbWFuZBIPCgtVTlNQRUNJRklFRBAAEg4KCkJPVF9VUERBVEUQARIPCgtCT1RfUkVTVEFSVBACEhEKDUJPVF9URVJNSU5BVEUQAxIQCgxIT1NUX1JFU1RBUlQQBCJ7ChdDcmVhdGVCb3RTZXNzaW9uUmVxdWVzdBITCgZwYXJlbnQYASABKAlCA+BBAhJLCgtib3Rfc2Vzc2lvbhgCIAEoCzIxLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQm90U2Vzc2lvbkID4EECItsBChdVcGRhdGVCb3RTZXNzaW9uUmVxdWVzdBI9CgRuYW1lGAEgASgJQi/gQQL6QSkKJ3JlbW90ZXdvcmtlcnMuZ29vZ2xlYXBpcy5jb20vQm90U2Vzc2lvbhJLCgtib3Rfc2Vzc2lvbhgCIAEoCzIxLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQm90U2Vzc2lvbkID4EECEjQKC3VwZGF0ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0ID4EECKnkKCUJvdFN0YXR1cxIaChZCT1RfU1RBVFVTX1VOU1BFQ0lGSUVEEAASBgoCT0sQARINCglVTkhFQUxUSFkQAhISCg5IT1NUX1JFQk9PVElORxADEhMKD0JPVF9URVJNSU5BVElORxAEEhAKDElOSVRJQUxJWklORxAFKmAKCkxlYXNlU3RhdGUSGwoXTEVBU0VfU1RBVEVfVU5TUEVDSUZJRUQQABILCgdQRU5ESU5HEAESCgoGQUNUSVZFEAISDQoJQ09NUExFVEVEEAQSDQoJQ0FOQ0VMTEVEEAUy2QMKBEJvdHMS0QEKEENyZWF0ZUJvdFNlc3Npb24SPi5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkNyZWF0ZUJvdFNlc3Npb25SZXF1ZXN0GjEuZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5Cb3RTZXNzaW9uIkraQRJwYXJlbnQsYm90X3Nlc3Npb26C0+STAi86C2JvdF9zZXNzaW9uIiAvdjF0ZXN0Mi97cGFyZW50PSoqfS9ib3RTZXNzaW9ucxLbAQoQVXBkYXRlQm90U2Vzc2lvbhI+Lmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuVXBkYXRlQm90U2Vzc2lvblJlcXVlc3QaMS5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkJvdFNlc3Npb24iVNpBHG5hbWUsYm90X3Nlc3Npb24sdXBkYXRlX21hc2uC0+STAi86C2JvdF9zZXNzaW9uMiAvdjF0ZXN0Mi97bmFtZT0qKi9ib3RTZXNzaW9ucy8qfRofykEccmVtb3Rld29ya2Vycy5nb29nbGVhcGlzLmNvbULmAQopY29tLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDJCEVJlbW90ZVdvcmtlcnNCb3RzUAFaUmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvcmVtb3Rld29ya2Vycy92MXRlc3QyO3JlbW90ZXdvcmtlcnOiAgJSV6oCJUdvb2dsZS5EZXZUb29scy5SZW1vdGVXb3JrZXJzLlYxVGVzdDLKAiJHb29nbGVcQ2xvdWRcUmVtb3Rld29ya2Vyc1xWMXRlc3QyYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_devtools_remoteworkers_v1test2_worker, file_google_protobuf_any, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_rpc_status]);

/**
 * A bot session represents the state of a bot while in continuous contact with
 * the server for a period of time. The session includes information about the
 * worker - that is, the *worker* (the physical or virtual hardware) is
 * considered to be a property of the bot (the software agent running on that
 * hardware), which is the reverse of real life, but more natural from the point
 * of the view of this API, which communicates solely with the bot and not
 * directly with the underlying worker.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.BotSession
 */
export type BotSession = Message<"google.devtools.remoteworkers.v1test2.BotSession"> & {
  /**
   * The bot session name, as selected by the server. Output only during a call
   * to CreateBotSession.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A unique bot ID within the farm used to persistently identify this bot over
   * time (i.e., over multiple sessions). This ID must be unique within a
   * farm. Typically, the bot ID will be the same as the name of the primary
   * device in the worker (e.g., what you'd get from typing `uname -n` on *nix),
   * but this is not required since a single device may allow multiple bots to
   * run on it, each with access to different resources. What is important is
   * that this ID is meaningful to humans, who might need to hunt a physical
   * machine down to fix it.
   *
   * When CreateBotSession is successfully called with a bot_id, all prior
   * sessions with the same ID are invalidated. If a bot attempts to update an
   * invalid session, the server must reject that request, and may also
   * quarantine the other bot with the same bot IDs (ie, stop sending it new
   * leases and alert an admin).
   *
   * @generated from field: string bot_id = 2;
   */
  botId: string;

  /**
   * The status of the bot. This must be populated in every call to
   * UpdateBotSession.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.BotStatus status = 3;
   */
  status: BotStatus;

  /**
   * A description of the worker hosting this bot. The Worker message is used
   * here in the Status context (see Worker for more information).  If multiple
   * bots are running on the worker, this field should only describe the
   * resources accessible from this bot.
   *
   * During the call to CreateBotSession, the server may make arbitrary changes
   * to the worker's `server_properties` field (see that field for more
   * information). Otherwise, this field is input-only.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Worker worker = 4;
   */
  worker?: Worker;

  /**
   * A list of all leases that are a part of this session. See the Lease message
   * for details.
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.Lease leases = 5;
   */
  leases: Lease[];

  /**
   * The time at which this bot session will expire, unless the bot calls
   * UpdateBotSession again. Output only.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 6;
   */
  expireTime?: Timestamp;

  /**
   * The version of the bot code currently running. The server may use this
   * information to issue an admin action to tell the bot to update itself.
   *
   * @generated from field: string version = 7;
   */
  version: string;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.BotSession.
 * Use `create(BotSessionSchema)` to create a new message.
 */
export const BotSessionSchema: GenMessage<BotSession> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_bots, 0);

/**
 * A Lease is a lease that the scheduler has assigned to this bot. If the bot
 * notices (by UpdateBotSession) that it has any leases in the PENDING state, it
 * should call UpdateBotSession to put the leases into the ACTIVE state and
 * start executing their assignments.
 *
 * All fields in this message are output-only, *except* the `state` and `status`
 * fields. Note that repeated fields can only be updated as a unit, so on every
 * update the bot must provide an update for *all* the leases the server expects
 * it to report on.
 *
 * The scheduler *should* ensure that all leases scheduled to a bot can actually
 * be accepted, but race conditions may occur. In such cases, the bot should
 * attempt to accept the leases in the order they are listed by the server, to
 * allow the server to control priorities.
 *
 * The server will remove COMPLETED leases from time to time, after which the
 * bot shouldn't report on them any more (the server will ignore superfluous
 * COMPLETED records).
 *
 * @generated from message google.devtools.remoteworkers.v1test2.Lease
 */
export type Lease = Message<"google.devtools.remoteworkers.v1test2.Lease"> & {
  /**
   * A short string uniquely identifing the lease within this bot session.
   *
   * @generated from field: string id = 7;
   */
  id: string;

  /**
   * The actual work to be performed, if any. May be omitted by the server if
   * the lease is not in the `PENDING` state. The message must be meaningful to
   * the bot. Output only (must only be set by the server).
   *
   * @generated from field: google.protobuf.Any payload = 8;
   */
  payload?: Any;

  /**
   * Any result the bot wishes to provide about the lease. Must not be changed
   * after the first call with the lease in the `COMPLETED` or `CANCELLED`
   * state. Input only (must only be set by the bot, will not be echoed by the
   * server).
   *
   * @generated from field: google.protobuf.Any result = 9;
   */
  result?: Any;

  /**
   * The state of the lease. See LeaseState for more information.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.LeaseState state = 2;
   */
  state: LeaseState;

  /**
   * The final status of the lease (should be populated by the bot if the state
   * is completed). This is the status of the lease, not of any task represented
   * by the lease. For example, if the bot could not accept the lease because it
   * asked for some resource the bot didn't have, this status will be
   * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
   * correctly, this field will be `OK` while the failure of the assignment must
   * communicated via the `result` field.
   *
   * @generated from field: google.rpc.Status status = 3;
   */
  status?: Status;

  /**
   * The requirements that are being claimed by this lease. This field may be
   * omitted by the server if the lease is not pending.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Worker requirements = 4;
   */
  requirements?: Worker;

  /**
   * The time at which this lease expires. The server *may* extend this over
   * time, but due to race conditions, the bot is not *required* to respect any
   * expiry date except the first one.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * DEPRECATED. The assignment should be provided to the bot via the `payload`
   * field. Clients that wish to use a simple name (such as a queue of work
   * provided elsewhere) should define a custom message type and encode it into
   * `payload`.
   *
   * @generated from field: string assignment = 1 [deprecated = true];
   * @deprecated
   */
  assignment: string;

  /**
   * DEPRECATED. Use `payload` instead.
   *
   * @generated from field: google.protobuf.Any inline_assignment = 6 [deprecated = true];
   * @deprecated
   */
  inlineAssignment?: Any;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.Lease.
 * Use `create(LeaseSchema)` to create a new message.
 */
export const LeaseSchema: GenMessage<Lease> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_bots, 1);

/**
 * AdminTemp is a prelimiary set of administration tasks. It's called "Temp"
 * because we do not yet know the best way to represent admin tasks; it's
 * possible that this will be entirely replaced in later versions of this API.
 * If this message proves to be sufficient, it will be renamed in the alpha or
 * beta release of this API.
 *
 * This message (suitably marshalled into a protobuf.Any) can be used as the
 * inline_assignment field in a lease; the lease assignment field should simply
 * be `"admin"` in these cases.
 *
 * This message is heavily based on Swarming administration tasks from the LUCI
 * project (http://github.com/luci/luci-py/appengine/swarming).
 *
 * @generated from message google.devtools.remoteworkers.v1test2.AdminTemp
 */
export type AdminTemp = Message<"google.devtools.remoteworkers.v1test2.AdminTemp"> & {
  /**
   * The admin action; see `Command` for legal values.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.AdminTemp.Command command = 1;
   */
  command: AdminTemp_Command;

  /**
   * The argument to the admin action; see `Command` for semantics.
   *
   * @generated from field: string arg = 2;
   */
  arg: string;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.AdminTemp.
 * Use `create(AdminTempSchema)` to create a new message.
 */
export const AdminTempSchema: GenMessage<AdminTemp> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_bots, 2);

/**
 * Possible administration actions.
 *
 * @generated from enum google.devtools.remoteworkers.v1test2.AdminTemp.Command
 */
export enum AdminTemp_Command {
  /**
   * Illegal value.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Download and run a new version of the bot. `arg` will be a resource
   * accessible via `ByteStream.Read` to obtain the new bot code.
   *
   * @generated from enum value: BOT_UPDATE = 1;
   */
  BOT_UPDATE = 1,

  /**
   * Restart the bot without downloading a new version. `arg` will be a
   * message to log.
   *
   * @generated from enum value: BOT_RESTART = 2;
   */
  BOT_RESTART = 2,

  /**
   * Shut down the bot. `arg` will be a task resource name (similar to those
   * in tasks.proto) that the bot can use to tell the server that it is
   * terminating.
   *
   * @generated from enum value: BOT_TERMINATE = 3;
   */
  BOT_TERMINATE = 3,

  /**
   * Restart the host computer. `arg` will be a message to log.
   *
   * @generated from enum value: HOST_RESTART = 4;
   */
  HOST_RESTART = 4,
}

/**
 * Describes the enum google.devtools.remoteworkers.v1test2.AdminTemp.Command.
 */
export const AdminTemp_CommandSchema: GenEnum<AdminTemp_Command> = /*@__PURE__*/
  enumDesc(file_google_devtools_remoteworkers_v1test2_bots, 2, 0);

/**
 * Request message for CreateBotSession.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CreateBotSessionRequest
 */
export type CreateBotSessionRequest = Message<"google.devtools.remoteworkers.v1test2.CreateBotSessionRequest"> & {
  /**
   * Required. The farm resource.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The bot session to create. Server-assigned fields like name must
   * be unset.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
   */
  botSession?: BotSession;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CreateBotSessionRequest.
 * Use `create(CreateBotSessionRequestSchema)` to create a new message.
 */
export const CreateBotSessionRequestSchema: GenMessage<CreateBotSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_bots, 3);

/**
 * Request message for UpdateBotSession.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest
 */
export type UpdateBotSessionRequest = Message<"google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest"> & {
  /**
   * Required. The bot session name. Must match bot_session.name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The bot session resource to update.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.BotSession bot_session = 2;
   */
  botSession?: BotSession;

  /**
   * Required. The fields on the bot that should be updated. See the BotSession
   * resource for which fields are updatable by which caller.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.UpdateBotSessionRequest.
 * Use `create(UpdateBotSessionRequestSchema)` to create a new message.
 */
export const UpdateBotSessionRequestSchema: GenMessage<UpdateBotSessionRequest> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_bots, 4);

/**
 * A coarse description of the status of the bot that the server uses to
 * determine whether to assign the bot new leases.
 *
 * @generated from enum google.devtools.remoteworkers.v1test2.BotStatus
 */
export enum BotStatus {
  /**
   * Default value; do not use.
   *
   * @generated from enum value: BOT_STATUS_UNSPECIFIED = 0;
   */
  BOT_STATUS_UNSPECIFIED = 0,

  /**
   * The bot is healthy, and will accept leases as normal.
   *
   * @generated from enum value: OK = 1;
   */
  OK = 1,

  /**
   * The bot is unhealthy and will not accept new leases. For example, the bot
   * may have detected that available disk space is too low. This situation may
   * resolve itself, but will typically require human intervention.
   *
   * @generated from enum value: UNHEALTHY = 2;
   */
  UNHEALTHY = 2,

  /**
   * The bot has been asked to reboot the host. The bot will not accept new
   * leases; once all leases are complete, this session will no longer be
   * updated but the bot will be expected to establish a new session after the
   * reboot completes.
   *
   * @generated from enum value: HOST_REBOOTING = 3;
   */
  HOST_REBOOTING = 3,

  /**
   * The bot has been asked to shut down. As with HOST_REBOOTING, once all
   * leases are completed, the session will no longer be updated and the bot
   * will not be expected to establish a new session.
   *
   * Bots are typically only asked to shut down if its host computer will be
   * modified in some way, such as deleting a VM.
   *
   * @generated from enum value: BOT_TERMINATING = 4;
   */
  BOT_TERMINATING = 4,

  /**
   * The bot is initializing and is not ready to accept leases.
   *
   * @generated from enum value: INITIALIZING = 5;
   */
  INITIALIZING = 5,
}

/**
 * Describes the enum google.devtools.remoteworkers.v1test2.BotStatus.
 */
export const BotStatusSchema: GenEnum<BotStatus> = /*@__PURE__*/
  enumDesc(file_google_devtools_remoteworkers_v1test2_bots, 0);

/**
 * The state of the lease. All leases start in the PENDING state. A bot can
 * change PENDING to ACTIVE or (in the case of an error) COMPLETED, or from
 * ACTIVE to COMPLETED. The server can change PENDING or ACTIVE to CANCELLED if
 * it wants the bot to release its resources - for example, if the bot needs to
 * be quarantined (it's producing bad output) or a cell needs to be drained.
 *
 * @generated from enum google.devtools.remoteworkers.v1test2.LeaseState
 */
export enum LeaseState {
  /**
   * Default value; do not use.
   *
   * @generated from enum value: LEASE_STATE_UNSPECIFIED = 0;
   */
  LEASE_STATE_UNSPECIFIED = 0,

  /**
   * Pending: the server expects the bot to accept this lease. This may only be
   * set by the server.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * Active: the bot has accepted this lease. This may only be set by the bot.
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * Completed: the bot is no longer leased. This may only be set by the bot,
   * and the status field must be populated iff the state is COMPLETED.
   *
   * @generated from enum value: COMPLETED = 4;
   */
  COMPLETED = 4,

  /**
   * Cancelled: The bot should immediately release all resources associated with
   * the lease. This may only be set by the server.
   *
   * @generated from enum value: CANCELLED = 5;
   */
  CANCELLED = 5,
}

/**
 * Describes the enum google.devtools.remoteworkers.v1test2.LeaseState.
 */
export const LeaseStateSchema: GenEnum<LeaseState> = /*@__PURE__*/
  enumDesc(file_google_devtools_remoteworkers_v1test2_bots, 1);

/**
 * Design doc: https://goo.gl/oojM5H
 *
 * Loosely speaking, the Bots interface monitors a collection of workers (think
 * of them as "computers" for a moment). This collection is known as a "farm,"
 * and its purpose is to perform work on behalf of a client.
 *
 * Each worker runs a small program known as a "bot" that allows it to be
 * controlled by the server. This interface contains only methods that are
 * called by the bots themselves; admin functionality is out of scope for this
 * interface.
 *
 * More precisely, we use the term "worker" to refer to the physical "thing"
 * running the bot. We use the term "worker," and not "machine" or "computer,"
 * since a worker may consist of more than one machine - e.g., a computer with
 * multiple attached devices, or even a cluster of computers, with only one of
 * them running the bot. Conversely, a single machine may host several bots, in
 * which case each bot has a "worker" corresponding to the slice of the machine
 * being managed by that bot.
 *
 * The main resource in the Bots interface is not, surprisingly, a Bot - it is a
 * BotSession, which represents a period of time in which a bot is in continuous
 * contact with the server (see the BotSession message for more information).
 * The parent of a bot session can be thought of as an instance of a farm. That
 * is, one endpoint may be able to manage many farms for many users. For
 * example, for a farm managed through GCP, the parent resource will typically
 * take the form "projects/{project_id}". This is referred to below as "the farm
 * resource."
 *
 * @generated from service google.devtools.remoteworkers.v1test2.Bots
 */
export const Bots: GenService<{
  /**
   * CreateBotSession is called when the bot first joins the farm, and
   * establishes a session ID to ensure that multiple machines do not register
   * using the same name accidentally.
   *
   * @generated from rpc google.devtools.remoteworkers.v1test2.Bots.CreateBotSession
   */
  createBotSession: {
    methodKind: "unary";
    input: typeof CreateBotSessionRequestSchema;
    output: typeof BotSessionSchema;
  },
  /**
   * UpdateBotSession must be called periodically by the bot (on a schedule
   * determined by the server) to let the server know about its status, and to
   * pick up new lease requests from the server.
   *
   * @generated from rpc google.devtools.remoteworkers.v1test2.Bots.UpdateBotSession
   */
  updateBotSession: {
    methodKind: "unary";
    input: typeof UpdateBotSessionRequestSchema;
    output: typeof BotSessionSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_devtools_remoteworkers_v1test2_bots, 0);

