// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/devtools/remoteworkers/v1test2/command.proto (package google.devtools.remoteworkers.v1test2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/devtools/remoteworkers/v1test2/command.proto.
 */
export const file_google_devtools_remoteworkers_v1test2_command: GenFile = /*@__PURE__*/
  fileDesc("CjNnb29nbGUvZGV2dG9vbHMvcmVtb3Rld29ya2Vycy92MXRlc3QyL2NvbW1hbmQucHJvdG8SJWdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIi0QYKC0NvbW1hbmRUYXNrEkkKBmlucHV0cxgBIAEoCzI5Lmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQ29tbWFuZFRhc2suSW5wdXRzElQKEGV4cGVjdGVkX291dHB1dHMYBCABKAsyOi5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkNvbW1hbmRUYXNrLk91dHB1dHMSTQoIdGltZW91dHMYBSABKAsyOy5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkNvbW1hbmRUYXNrLlRpbWVvdXRzGtkCCgZJbnB1dHMSEQoJYXJndW1lbnRzGAEgAygJEjwKBWZpbGVzGAIgAygLMi0uZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5EaWdlc3QSQQoMaW5saW5lX2Jsb2JzGAQgAygLMisuZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5CbG9iEmwKFWVudmlyb25tZW50X3ZhcmlhYmxlcxgDIAMoCzJNLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuQ29tbWFuZFRhc2suSW5wdXRzLkVudmlyb25tZW50VmFyaWFibGUSGQoRd29ya2luZ19kaXJlY3RvcnkYBSABKAkaMgoTRW52aXJvbm1lbnRWYXJpYWJsZRIMCgRuYW1lGAEgASgJEg0KBXZhbHVlGAIgASgJGmUKB091dHB1dHMSDQoFZmlsZXMYASADKAkSEwoLZGlyZWN0b3JpZXMYAiADKAkSGgoSc3Rkb3V0X2Rlc3RpbmF0aW9uGAMgASgJEhoKEnN0ZGVycl9kZXN0aW5hdGlvbhgEIAEoCRqOAQoIVGltZW91dHMSLAoJZXhlY3V0aW9uGAEgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEicKBGlkbGUYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SKwoIc2h1dGRvd24YAyABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24iYwoOQ29tbWFuZE91dHB1dHMSEQoJZXhpdF9jb2RlGAEgASgFEj4KB291dHB1dHMYAiABKAsyLS5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkRpZ2VzdCJrCg9Db21tYW5kT3ZlcmhlYWQSKwoIZHVyYXRpb24YASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24SKwoIb3ZlcmhlYWQYAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb24ikAIKDUNvbW1hbmRSZXN1bHQSIgoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXMSEQoJZXhpdF9jb2RlGAIgASgFEj4KB291dHB1dHMYAyABKAsyLS5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkRpZ2VzdBIvCghkdXJhdGlvbhgEIAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbkICGAESLwoIb3ZlcmhlYWQYBSABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CAhgBEiYKCG1ldGFkYXRhGAYgAygLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSKEAQoMRmlsZU1ldGFkYXRhEgwKBHBhdGgYASABKAkSPQoGZGlnZXN0GAIgASgLMi0uZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5EaWdlc3QSEAoIY29udGVudHMYAyABKAwSFQoNaXNfZXhlY3V0YWJsZRgEIAEoCCJgChFEaXJlY3RvcnlNZXRhZGF0YRIMCgRwYXRoGAEgASgJEj0KBmRpZ2VzdBgCIAEoCzItLmdvb2dsZS5kZXZ0b29scy5yZW1vdGV3b3JrZXJzLnYxdGVzdDIuRGlnZXN0IioKBkRpZ2VzdBIMCgRoYXNoGAEgASgJEhIKCnNpemVfYnl0ZXMYAiABKAMiVwoEQmxvYhI9CgZkaWdlc3QYASABKAsyLS5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkRpZ2VzdBIQCghjb250ZW50cxgCIAEoDCKeAQoJRGlyZWN0b3J5EkIKBWZpbGVzGAEgAygLMjMuZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0Mi5GaWxlTWV0YWRhdGESTQoLZGlyZWN0b3JpZXMYAiADKAsyOC5nb29nbGUuZGV2dG9vbHMucmVtb3Rld29ya2Vycy52MXRlc3QyLkRpcmVjdG9yeU1ldGFkYXRhQuoBCiljb20uZ29vZ2xlLmRldnRvb2xzLnJlbW90ZXdvcmtlcnMudjF0ZXN0MkIVUmVtb3RlV29ya2Vyc0NvbW1hbmRzUAFaUmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZGV2dG9vbHMvcmVtb3Rld29ya2Vycy92MXRlc3QyO3JlbW90ZXdvcmtlcnOiAgJSV6oCJUdvb2dsZS5EZXZUb29scy5SZW1vdGVXb3JrZXJzLlYxVGVzdDLKAiJHb29nbGVcQ2xvdWRcUmVtb3Rld29ya2Vyc1xWMXRlc3QyYgZwcm90bzM", [file_google_protobuf_any, file_google_protobuf_duration, file_google_rpc_status]);

/**
 * Describes a shell-style task to execute, suitable for providing as the Bots
 * interface's `Lease.payload` field.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandTask
 */
export type CommandTask = Message<"google.devtools.remoteworkers.v1test2.CommandTask"> & {
  /**
   * The inputs to the task.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.CommandTask.Inputs inputs = 1;
   */
  inputs?: CommandTask_Inputs;

  /**
   * The expected outputs from the task.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.CommandTask.Outputs expected_outputs = 4;
   */
  expectedOutputs?: CommandTask_Outputs;

  /**
   * The timeouts of this task.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.CommandTask.Timeouts timeouts = 5;
   */
  timeouts?: CommandTask_Timeouts;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandTask.
 * Use `create(CommandTaskSchema)` to create a new message.
 */
export const CommandTaskSchema: GenMessage<CommandTask> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 0);

/**
 * Describes the inputs to a shell-style task.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandTask.Inputs
 */
export type CommandTask_Inputs = Message<"google.devtools.remoteworkers.v1test2.CommandTask.Inputs"> & {
  /**
   * The command itself to run (e.g., argv).
   *
   * This field should be passed directly to the underlying operating system,
   * and so it must be sensible to that operating system. For example, on
   * Windows, the first argument might be "C:\Windows\System32\ping.exe" -
   * that is, using drive letters and backslashes. A command for a *nix
   * system, on the other hand, would use forward slashes.
   *
   * All other fields in the RWAPI must consistently use forward slashes,
   * since those fields may be interpretted by both the service and the bot.
   *
   * @generated from field: repeated string arguments = 1;
   */
  arguments: string[];

  /**
   * The input filesystem to be set up prior to the task beginning. The
   * contents should be a repeated set of FileMetadata messages though other
   * formats are allowed if better for the implementation (eg, a LUCI-style
   * .isolated file).
   *
   * This field is repeated since implementations might want to cache the
   * metadata, in which case it may be useful to break up portions of the
   * filesystem that change frequently (eg, specific input files) from those
   * that don't (eg, standard header files).
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.Digest files = 2;
   */
  files: Digest[];

  /**
   * Inline contents for blobs expected to be needed by the bot to execute the
   * task. For example, contents of entries in `files` or blobs that are
   * indirectly referenced by an entry there.
   *
   * The bot should check against this list before downloading required task
   * inputs to reduce the number of communications between itself and the
   * remote CAS server.
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.Blob inline_blobs = 4;
   */
  inlineBlobs: Blob[];

  /**
   * All environment variables required by the task.
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable environment_variables = 3;
   */
  environmentVariables: CommandTask_Inputs_EnvironmentVariable[];

  /**
   * Directory from which a command is executed. It is a relative directory
   * with respect to the bot's working directory (i.e., "./"). If it is
   * non-empty, then it must exist under "./". Otherwise, "./" will be used.
   *
   * @generated from field: string working_directory = 5;
   */
  workingDirectory: string;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandTask.Inputs.
 * Use `create(CommandTask_InputsSchema)` to create a new message.
 */
export const CommandTask_InputsSchema: GenMessage<CommandTask_Inputs> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 0, 0);

/**
 * An environment variable required by this task.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable
 */
export type CommandTask_Inputs_EnvironmentVariable = Message<"google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable"> & {
  /**
   * The envvar name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The envvar value.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandTask.Inputs.EnvironmentVariable.
 * Use `create(CommandTask_Inputs_EnvironmentVariableSchema)` to create a new message.
 */
export const CommandTask_Inputs_EnvironmentVariableSchema: GenMessage<CommandTask_Inputs_EnvironmentVariable> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 0, 0, 0);

/**
 * Describes the expected outputs of the command.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandTask.Outputs
 */
export type CommandTask_Outputs = Message<"google.devtools.remoteworkers.v1test2.CommandTask.Outputs"> & {
  /**
   * A list of expected files, relative to the execution root. All paths
   * MUST be delimited by forward slashes.
   *
   * @generated from field: repeated string files = 1;
   */
  files: string[];

  /**
   * A list of expected directories, relative to the execution root. All paths
   * MUST be delimited by forward slashes.
   *
   * @generated from field: repeated string directories = 2;
   */
  directories: string[];

  /**
   * The destination to which any stdout should be sent. The method by which
   * the bot should send the stream contents to that destination is not
   * defined in this API. As examples, the destination could be a file
   * referenced in the `files` field in this message, or it could be a URI
   * that must be written via the ByteStream API.
   *
   * @generated from field: string stdout_destination = 3;
   */
  stdoutDestination: string;

  /**
   * The destination to which any stderr should be sent. The method by which
   * the bot should send the stream contents to that destination is not
   * defined in this API. As examples, the destination could be a file
   * referenced in the `files` field in this message, or it could be a URI
   * that must be written via the ByteStream API.
   *
   * @generated from field: string stderr_destination = 4;
   */
  stderrDestination: string;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandTask.Outputs.
 * Use `create(CommandTask_OutputsSchema)` to create a new message.
 */
export const CommandTask_OutputsSchema: GenMessage<CommandTask_Outputs> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 0, 1);

/**
 * Describes the timeouts associated with this task.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandTask.Timeouts
 */
export type CommandTask_Timeouts = Message<"google.devtools.remoteworkers.v1test2.CommandTask.Timeouts"> & {
  /**
   * This specifies the maximum time that the task can run, excluding the
   * time required to download inputs or upload outputs. That is, the worker
   * will terminate the task if it runs longer than this.
   *
   * @generated from field: google.protobuf.Duration execution = 1;
   */
  execution?: Duration;

  /**
   * This specifies the maximum amount of time the task can be idle - that is,
   * go without generating some output in either stdout or stderr. If the
   * process is silent for more than the specified time, the worker will
   * terminate the task.
   *
   * @generated from field: google.protobuf.Duration idle = 2;
   */
  idle?: Duration;

  /**
   * If the execution or IO timeouts are exceeded, the worker will try to
   * gracefully terminate the task and return any existing logs. However,
   * tasks may be hard-frozen in which case this process will fail. This
   * timeout specifies how long to wait for a terminated task to shut down
   * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
   * SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
   *
   * @generated from field: google.protobuf.Duration shutdown = 3;
   */
  shutdown?: Duration;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandTask.Timeouts.
 * Use `create(CommandTask_TimeoutsSchema)` to create a new message.
 */
export const CommandTask_TimeoutsSchema: GenMessage<CommandTask_Timeouts> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 0, 2);

/**
 * DEPRECATED - use CommandResult instead.
 * Describes the actual outputs from the task.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandOutputs
 */
export type CommandOutputs = Message<"google.devtools.remoteworkers.v1test2.CommandOutputs"> & {
  /**
   * exit_code is only fully reliable if the status' code is OK. If the task
   * exceeded its deadline or was cancelled, the process may still produce an
   * exit code as it is cancelled, and this will be populated, but a successful
   * (zero) is unlikely to be correct unless the status code is OK.
   *
   * @generated from field: int32 exit_code = 1;
   */
  exitCode: number;

  /**
   * The output files. The blob referenced by the digest should contain
   * one of the following (implementation-dependent):
   *    * A marshalled DirectoryMetadata of the returned filesystem
   *    * A LUCI-style .isolated file
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Digest outputs = 2;
   */
  outputs?: Digest;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandOutputs.
 * Use `create(CommandOutputsSchema)` to create a new message.
 */
export const CommandOutputsSchema: GenMessage<CommandOutputs> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 1);

/**
 * DEPRECATED - use CommandResult instead.
 * Can be used as part of CompleteRequest.metadata, or are part of a more
 * sophisticated message.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandOverhead
 */
export type CommandOverhead = Message<"google.devtools.remoteworkers.v1test2.CommandOverhead"> & {
  /**
   * The elapsed time between calling Accept and Complete. The server will also
   * have its own idea of what this should be, but this excludes the overhead of
   * the RPCs and the bot response time.
   *
   * @generated from field: google.protobuf.Duration duration = 1;
   */
  duration?: Duration;

  /**
   * The amount of time *not* spent executing the command (ie
   * uploading/downloading files).
   *
   * @generated from field: google.protobuf.Duration overhead = 2;
   */
  overhead?: Duration;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandOverhead.
 * Use `create(CommandOverheadSchema)` to create a new message.
 */
export const CommandOverheadSchema: GenMessage<CommandOverhead> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 2);

/**
 * All information about the execution of a command, suitable for providing as
 * the Bots interface's `Lease.result` field.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.CommandResult
 */
export type CommandResult = Message<"google.devtools.remoteworkers.v1test2.CommandResult"> & {
  /**
   * An overall status for the command. For example, if the command timed out,
   * this might have a code of DEADLINE_EXCEEDED; if it was killed by the OS for
   * memory exhaustion, it might have a code of RESOURCE_EXHAUSTED.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * The exit code of the process. An exit code of "0" should only be trusted if
   * `status` has a code of OK (otherwise it may simply be unset).
   *
   * @generated from field: int32 exit_code = 2;
   */
  exitCode: number;

  /**
   * The output files. The blob referenced by the digest should contain
   * one of the following (implementation-dependent):
   *    * A marshalled DirectoryMetadata of the returned filesystem
   *    * A LUCI-style .isolated file
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Digest outputs = 3;
   */
  outputs?: Digest;

  /**
   * The elapsed time between calling Accept and Complete. The server will also
   * have its own idea of what this should be, but this excludes the overhead of
   * the RPCs and the bot response time.
   *
   * @generated from field: google.protobuf.Duration duration = 4 [deprecated = true];
   * @deprecated
   */
  duration?: Duration;

  /**
   * The amount of time *not* spent executing the command (ie
   * uploading/downloading files).
   *
   * @generated from field: google.protobuf.Duration overhead = 5 [deprecated = true];
   * @deprecated
   */
  overhead?: Duration;

  /**
   * Implementation-dependent metadata about the task. Both servers and bots
   * may define messages which can be encoded here; bots are free to provide
   * metadata in multiple formats, and servers are free to choose one or more
   * of the values to process and ignore others. In particular, it is *not*
   * considered an error for the bot to provide the server with a field that it
   * doesn't know about.
   *
   * @generated from field: repeated google.protobuf.Any metadata = 6;
   */
  metadata: Any[];
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.CommandResult.
 * Use `create(CommandResultSchema)` to create a new message.
 */
export const CommandResultSchema: GenMessage<CommandResult> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 3);

/**
 * The metadata for a file. Similar to the equivalent message in the Remote
 * Execution API.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.FileMetadata
 */
export type FileMetadata = Message<"google.devtools.remoteworkers.v1test2.FileMetadata"> & {
  /**
   * The path of this file. If this message is part of the
   * CommandOutputs.outputs fields, the path is relative to the execution root
   * and must correspond to an entry in CommandTask.outputs.files. If this
   * message is part of a Directory message, then the path is relative to the
   * root of that directory. All paths MUST be delimited by forward slashes.
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * A pointer to the contents of the file. The method by which a client
   * retrieves the contents from a CAS system is not defined here.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Digest digest = 2;
   */
  digest?: Digest;

  /**
   * If the file is small enough, its contents may also or alternatively be
   * listed here.
   *
   * @generated from field: bytes contents = 3;
   */
  contents: Uint8Array;

  /**
   * Properties of the file
   *
   * @generated from field: bool is_executable = 4;
   */
  isExecutable: boolean;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.FileMetadata.
 * Use `create(FileMetadataSchema)` to create a new message.
 */
export const FileMetadataSchema: GenMessage<FileMetadata> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 4);

/**
 * The metadata for a directory. Similar to the equivalent message in the Remote
 * Execution API.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.DirectoryMetadata
 */
export type DirectoryMetadata = Message<"google.devtools.remoteworkers.v1test2.DirectoryMetadata"> & {
  /**
   * The path of the directory, as in
   * [FileMetadata.path][google.devtools.remoteworkers.v1test2.FileMetadata.path].
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * A pointer to the contents of the directory, in the form of a marshalled
   * Directory message.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Digest digest = 2;
   */
  digest?: Digest;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.DirectoryMetadata.
 * Use `create(DirectoryMetadataSchema)` to create a new message.
 */
export const DirectoryMetadataSchema: GenMessage<DirectoryMetadata> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 5);

/**
 * The CommandTask and CommandResult messages assume the existence of a service
 * that can serve blobs of content, identified by a hash and size known as a
 * "digest." The method by which these blobs may be retrieved is not specified
 * here, but a model implementation is in the Remote Execution API's
 * "ContentAddressibleStorage" interface.
 *
 * In the context of the RWAPI, a Digest will virtually always refer to the
 * contents of a file or a directory. The latter is represented by the
 * byte-encoded Directory message.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.Digest
 */
export type Digest = Message<"google.devtools.remoteworkers.v1test2.Digest"> & {
  /**
   * A string-encoded hash (eg "1a2b3c", not the byte array [0x1a, 0x2b, 0x3c])
   * using an implementation-defined hash algorithm (eg SHA-256).
   *
   * @generated from field: string hash = 1;
   */
  hash: string;

  /**
   * The size of the contents. While this is not strictly required as part of an
   * identifier (after all, any given hash will have exactly one canonical
   * size), it's useful in almost all cases when one might want to send or
   * retrieve blobs of content and is included here for this reason.
   *
   * @generated from field: int64 size_bytes = 2;
   */
  sizeBytes: bigint;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.Digest.
 * Use `create(DigestSchema)` to create a new message.
 */
export const DigestSchema: GenMessage<Digest> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 6);

/**
 * Describes a blob of binary content with its digest.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.Blob
 */
export type Blob = Message<"google.devtools.remoteworkers.v1test2.Blob"> & {
  /**
   * The digest of the blob. This should be verified by the receiver.
   *
   * @generated from field: google.devtools.remoteworkers.v1test2.Digest digest = 1;
   */
  digest?: Digest;

  /**
   * The contents of the blob.
   *
   * @generated from field: bytes contents = 2;
   */
  contents: Uint8Array;
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.Blob.
 * Use `create(BlobSchema)` to create a new message.
 */
export const BlobSchema: GenMessage<Blob> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 7);

/**
 * The contents of a directory. Similar to the equivalent message in the Remote
 * Execution API.
 *
 * @generated from message google.devtools.remoteworkers.v1test2.Directory
 */
export type Directory = Message<"google.devtools.remoteworkers.v1test2.Directory"> & {
  /**
   * The files in this directory
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.FileMetadata files = 1;
   */
  files: FileMetadata[];

  /**
   * Any subdirectories
   *
   * @generated from field: repeated google.devtools.remoteworkers.v1test2.DirectoryMetadata directories = 2;
   */
  directories: DirectoryMetadata[];
};

/**
 * Describes the message google.devtools.remoteworkers.v1test2.Directory.
 * Use `create(DirectorySchema)` to create a new message.
 */
export const DirectorySchema: GenMessage<Directory> = /*@__PURE__*/
  messageDesc(file_google_devtools_remoteworkers_v1test2_command, 8);

