// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/ads/googleads/v17/services/reach_plan_service.proto (package google.ads.googleads.v17.services, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { DeviceInfo, GenderInfo, UserInterestInfo } from "../common/criteria_pb";
import { file_google_ads_googleads_v17_common_criteria } from "../common/criteria_pb";
import type { DateRange } from "../common/dates_pb";
import { file_google_ads_googleads_v17_common_dates } from "../common/dates_pb";
import type { FrequencyCapTimeUnitEnum_FrequencyCapTimeUnit } from "../enums/frequency_cap_time_unit_pb";
import { file_google_ads_googleads_v17_enums_frequency_cap_time_unit } from "../enums/frequency_cap_time_unit_pb";
import type { ReachPlanAgeRangeEnum_ReachPlanAgeRange } from "../enums/reach_plan_age_range_pb";
import { file_google_ads_googleads_v17_enums_reach_plan_age_range } from "../enums/reach_plan_age_range_pb";
import type { ReachPlanNetworkEnum_ReachPlanNetwork } from "../enums/reach_plan_network_pb";
import { file_google_ads_googleads_v17_enums_reach_plan_network } from "../enums/reach_plan_network_pb";
import type { ReachPlanSurfaceEnum_ReachPlanSurface } from "../enums/reach_plan_surface_pb";
import { file_google_ads_googleads_v17_enums_reach_plan_surface } from "../enums/reach_plan_surface_pb";
import type { TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit } from "../enums/target_frequency_time_unit_pb";
import { file_google_ads_googleads_v17_enums_target_frequency_time_unit } from "../enums/target_frequency_time_unit_pb";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/ads/googleads/v17/services/reach_plan_service.proto.
 */
export const file_google_ads_googleads_v17_services_reach_plan_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_ads_googleads_v17_common_criteria, file_google_ads_googleads_v17_common_dates, file_google_ads_googleads_v17_enums_frequency_cap_time_unit, file_google_ads_googleads_v17_enums_reach_plan_age_range, file_google_ads_googleads_v17_enums_reach_plan_network, file_google_ads_googleads_v17_enums_reach_plan_surface, file_google_ads_googleads_v17_enums_target_frequency_time_unit, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior]);

/**
 * Request message for
 * [ReachPlanService.ListPlannableLocations][google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations].
 *
 * @generated from message google.ads.googleads.v17.services.ListPlannableLocationsRequest
 */
export type ListPlannableLocationsRequest = Message<"google.ads.googleads.v17.services.ListPlannableLocationsRequest"> & {
};

/**
 * Describes the message google.ads.googleads.v17.services.ListPlannableLocationsRequest.
 * Use `create(ListPlannableLocationsRequestSchema)` to create a new message.
 */
export const ListPlannableLocationsRequestSchema: GenMessage<ListPlannableLocationsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 0);

/**
 * The list of plannable locations.
 *
 * @generated from message google.ads.googleads.v17.services.ListPlannableLocationsResponse
 */
export type ListPlannableLocationsResponse = Message<"google.ads.googleads.v17.services.ListPlannableLocationsResponse"> & {
  /**
   * The list of locations available for planning.
   * See
   * https://developers.google.com/google-ads/api/reference/data/geotargets
   * for sample locations.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.PlannableLocation plannable_locations = 1;
   */
  plannableLocations: PlannableLocation[];
};

/**
 * Describes the message google.ads.googleads.v17.services.ListPlannableLocationsResponse.
 * Use `create(ListPlannableLocationsResponseSchema)` to create a new message.
 */
export const ListPlannableLocationsResponseSchema: GenMessage<ListPlannableLocationsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 1);

/**
 * A plannable location: country, metro region, province, etc.
 *
 * @generated from message google.ads.googleads.v17.services.PlannableLocation
 */
export type PlannableLocation = Message<"google.ads.googleads.v17.services.PlannableLocation"> & {
  /**
   * The location identifier.
   *
   * @generated from field: optional string id = 4;
   */
  id?: string;

  /**
   * The unique location name in English.
   *
   * @generated from field: optional string name = 5;
   */
  name?: string;

  /**
   * The parent country (not present if location is a country).
   * If present, will always be a GeoTargetConstant ID. Additional information
   * such as country name is provided by
   * [ReachPlanService.ListPlannableLocations][google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations]
   * or GoogleAdsService.Search/SearchStream.
   *
   * @generated from field: optional int64 parent_country_id = 6;
   */
  parentCountryId?: bigint;

  /**
   * The ISO-3166-1 alpha-2 country code that is associated with the location.
   *
   * @generated from field: optional string country_code = 7;
   */
  countryCode?: string;

  /**
   * The location's type. Location types correspond to target_type returned by
   * searching location type in GoogleAdsService.Search/SearchStream.
   *
   * @generated from field: optional string location_type = 8;
   */
  locationType?: string;
};

/**
 * Describes the message google.ads.googleads.v17.services.PlannableLocation.
 * Use `create(PlannableLocationSchema)` to create a new message.
 */
export const PlannableLocationSchema: GenMessage<PlannableLocation> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 2);

/**
 * Request to list available products in a given location.
 *
 * @generated from message google.ads.googleads.v17.services.ListPlannableProductsRequest
 */
export type ListPlannableProductsRequest = Message<"google.ads.googleads.v17.services.ListPlannableProductsRequest"> & {
  /**
   * Required. The ID of the selected location for planning. To list the
   * available plannable location IDs use
   * [ReachPlanService.ListPlannableLocations][google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations].
   *
   * @generated from field: string plannable_location_id = 2;
   */
  plannableLocationId: string;
};

/**
 * Describes the message google.ads.googleads.v17.services.ListPlannableProductsRequest.
 * Use `create(ListPlannableProductsRequestSchema)` to create a new message.
 */
export const ListPlannableProductsRequestSchema: GenMessage<ListPlannableProductsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 3);

/**
 * A response with all available products.
 *
 * @generated from message google.ads.googleads.v17.services.ListPlannableProductsResponse
 */
export type ListPlannableProductsResponse = Message<"google.ads.googleads.v17.services.ListPlannableProductsResponse"> & {
  /**
   * The list of products available for planning and related targeting metadata.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.ProductMetadata product_metadata = 1;
   */
  productMetadata: ProductMetadata[];
};

/**
 * Describes the message google.ads.googleads.v17.services.ListPlannableProductsResponse.
 * Use `create(ListPlannableProductsResponseSchema)` to create a new message.
 */
export const ListPlannableProductsResponseSchema: GenMessage<ListPlannableProductsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 4);

/**
 * The metadata associated with an available plannable product.
 *
 * @generated from message google.ads.googleads.v17.services.ProductMetadata
 */
export type ProductMetadata = Message<"google.ads.googleads.v17.services.ProductMetadata"> & {
  /**
   * The code associated with the ad product (for example: BUMPER,
   * TRUEVIEW_IN_STREAM).
   * To list the available plannable product codes use
   * [ReachPlanService.ListPlannableProducts][google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts].
   *
   * @generated from field: optional string plannable_product_code = 4;
   */
  plannableProductCode?: string;

  /**
   * The name associated with the ad product.
   *
   * @generated from field: string plannable_product_name = 3;
   */
  plannableProductName: string;

  /**
   * The allowed plannable targeting for this product.
   *
   * @generated from field: google.ads.googleads.v17.services.PlannableTargeting plannable_targeting = 2;
   */
  plannableTargeting?: PlannableTargeting;
};

/**
 * Describes the message google.ads.googleads.v17.services.ProductMetadata.
 * Use `create(ProductMetadataSchema)` to create a new message.
 */
export const ProductMetadataSchema: GenMessage<ProductMetadata> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 5);

/**
 * The targeting for which traffic metrics will be reported.
 *
 * @generated from message google.ads.googleads.v17.services.PlannableTargeting
 */
export type PlannableTargeting = Message<"google.ads.googleads.v17.services.PlannableTargeting"> & {
  /**
   * Allowed plannable age ranges for the product for which metrics will be
   * reported. Actual targeting is computed by mapping this age range onto
   * standard Google common.AgeRangeInfo values.
   *
   * @generated from field: repeated google.ads.googleads.v17.enums.ReachPlanAgeRangeEnum.ReachPlanAgeRange age_ranges = 1;
   */
  ageRanges: ReachPlanAgeRangeEnum_ReachPlanAgeRange[];

  /**
   * Targetable genders for the ad product.
   *
   * @generated from field: repeated google.ads.googleads.v17.common.GenderInfo genders = 2;
   */
  genders: GenderInfo[];

  /**
   * Targetable devices for the ad product.
   * TABLET device targeting is automatically applied to reported metrics
   * when MOBILE targeting is selected for CPM_MASTHEAD,
   * GOOGLE_PREFERRED_BUMPER, and GOOGLE_PREFERRED_SHORT products.
   *
   * @generated from field: repeated google.ads.googleads.v17.common.DeviceInfo devices = 3;
   */
  devices: DeviceInfo[];

  /**
   * Targetable networks for the ad product.
   *
   * @generated from field: repeated google.ads.googleads.v17.enums.ReachPlanNetworkEnum.ReachPlanNetwork networks = 4;
   */
  networks: ReachPlanNetworkEnum_ReachPlanNetwork[];

  /**
   * Targetable YouTube Select Lineups for the ad product.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.YouTubeSelectLineUp youtube_select_lineups = 5;
   */
  youtubeSelectLineups: YouTubeSelectLineUp[];

  /**
   * Targetable surface combinations for the ad product.
   *
   * @generated from field: google.ads.googleads.v17.services.SurfaceTargetingCombinations surface_targeting = 6;
   */
  surfaceTargeting?: SurfaceTargetingCombinations;
};

/**
 * Describes the message google.ads.googleads.v17.services.PlannableTargeting.
 * Use `create(PlannableTargetingSchema)` to create a new message.
 */
export const PlannableTargetingSchema: GenMessage<PlannableTargeting> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 6);

/**
 * Request message for
 * [ReachPlanService.GenerateReachForecast][google.ads.googleads.v17.services.ReachPlanService.GenerateReachForecast].
 *
 * @generated from message google.ads.googleads.v17.services.GenerateReachForecastRequest
 */
export type GenerateReachForecastRequest = Message<"google.ads.googleads.v17.services.GenerateReachForecastRequest"> & {
  /**
   * Required. The ID of the customer.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * The currency code.
   * Three-character ISO 4217 currency code.
   *
   * @generated from field: optional string currency_code = 9;
   */
  currencyCode?: string;

  /**
   * Required. Campaign duration.
   *
   * @generated from field: google.ads.googleads.v17.services.CampaignDuration campaign_duration = 3;
   */
  campaignDuration?: CampaignDuration;

  /**
   * Chosen cookie frequency cap to be applied to each planned product.
   * This is equivalent to the frequency cap exposed in Google Ads when creating
   * a campaign, it represents the maximum number of times an ad can be shown to
   * the same user.
   * If not specified, no cap is applied.
   *
   * This field is deprecated in v4 and will eventually be removed.
   * Use cookie_frequency_cap_setting instead.
   *
   * @generated from field: optional int32 cookie_frequency_cap = 10;
   */
  cookieFrequencyCap?: number;

  /**
   * Chosen cookie frequency cap to be applied to each planned product.
   * This is equivalent to the frequency cap exposed in Google Ads when creating
   * a campaign, it represents the maximum number of times an ad can be shown to
   * the same user during a specified time interval.
   * If not specified, a default of 0 (no cap) is applied.
   *
   * This field replaces the deprecated cookie_frequency_cap field.
   *
   * @generated from field: google.ads.googleads.v17.services.FrequencyCap cookie_frequency_cap_setting = 8;
   */
  cookieFrequencyCapSetting?: FrequencyCap;

  /**
   * Chosen minimum effective frequency (the number of times a person was
   * exposed to the ad) for the reported reach metrics [1-10].
   * This won't affect the targeting, but just the reporting.
   * If not specified, a default of 1 is applied.
   *
   * This field cannot be combined with the effective_frequency_limit field.
   *
   * @generated from field: optional int32 min_effective_frequency = 11;
   */
  minEffectiveFrequency?: number;

  /**
   * The highest minimum effective frequency (the number of times a person was
   * exposed to the ad) value [1-10] to include in
   * Forecast.effective_frequency_breakdowns.
   * If not specified, Forecast.effective_frequency_breakdowns will not be
   * provided.
   *
   * The effective frequency value provided here will also be used as the
   * minimum effective frequency for the reported reach metrics.
   *
   * This field cannot be combined with the min_effective_frequency field.
   *
   * @generated from field: optional google.ads.googleads.v17.services.EffectiveFrequencyLimit effective_frequency_limit = 12;
   */
  effectiveFrequencyLimit?: EffectiveFrequencyLimit;

  /**
   * The targeting to be applied to all products selected in the product mix.
   *
   * This is planned targeting: execution details might vary based on the
   * advertising product, consult an implementation specialist.
   *
   * See specific metrics for details on how targeting affects them.
   *
   * @generated from field: google.ads.googleads.v17.services.Targeting targeting = 6;
   */
  targeting?: Targeting;

  /**
   * Required. The products to be forecast.
   * The max number of allowed planned products is 15.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.PlannedProduct planned_products = 7;
   */
  plannedProducts: PlannedProduct[];

  /**
   * Controls the forecast metrics returned in the response.
   *
   * @generated from field: google.ads.googleads.v17.services.ForecastMetricOptions forecast_metric_options = 13;
   */
  forecastMetricOptions?: ForecastMetricOptions;

  /**
   * The name of the customer being planned for. This is a user-defined value.
   *
   * @generated from field: optional string customer_reach_group = 14;
   */
  customerReachGroup?: string;
};

/**
 * Describes the message google.ads.googleads.v17.services.GenerateReachForecastRequest.
 * Use `create(GenerateReachForecastRequestSchema)` to create a new message.
 */
export const GenerateReachForecastRequestSchema: GenMessage<GenerateReachForecastRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 7);

/**
 * Effective frequency limit.
 *
 * @generated from message google.ads.googleads.v17.services.EffectiveFrequencyLimit
 */
export type EffectiveFrequencyLimit = Message<"google.ads.googleads.v17.services.EffectiveFrequencyLimit"> & {
  /**
   * The highest effective frequency value to include in
   * Forecast.effective_frequency_breakdowns.
   * This field supports frequencies 1-10, inclusive.
   *
   * @generated from field: int32 effective_frequency_breakdown_limit = 1;
   */
  effectiveFrequencyBreakdownLimit: number;
};

/**
 * Describes the message google.ads.googleads.v17.services.EffectiveFrequencyLimit.
 * Use `create(EffectiveFrequencyLimitSchema)` to create a new message.
 */
export const EffectiveFrequencyLimitSchema: GenMessage<EffectiveFrequencyLimit> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 8);

/**
 * A rule specifying the maximum number of times an ad can be shown to a user
 * over a particular time period.
 *
 * @generated from message google.ads.googleads.v17.services.FrequencyCap
 */
export type FrequencyCap = Message<"google.ads.googleads.v17.services.FrequencyCap"> & {
  /**
   * Required. The number of impressions, inclusive.
   *
   * @generated from field: int32 impressions = 3;
   */
  impressions: number;

  /**
   * Required. The type of time unit.
   *
   * @generated from field: google.ads.googleads.v17.enums.FrequencyCapTimeUnitEnum.FrequencyCapTimeUnit time_unit = 2;
   */
  timeUnit: FrequencyCapTimeUnitEnum_FrequencyCapTimeUnit;
};

/**
 * Describes the message google.ads.googleads.v17.services.FrequencyCap.
 * Use `create(FrequencyCapSchema)` to create a new message.
 */
export const FrequencyCapSchema: GenMessage<FrequencyCap> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 9);

/**
 * The targeting for which traffic metrics will be reported.
 *
 * @generated from message google.ads.googleads.v17.services.Targeting
 */
export type Targeting = Message<"google.ads.googleads.v17.services.Targeting"> & {
  /**
   * The ID of the selected location. Plannable location IDs can be
   * obtained from
   * [ReachPlanService.ListPlannableLocations][google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations].
   *
   * Requests must set either this field or `plannable_location_ids`.
   *
   * This field is deprecated as of V12 and will be removed in a future release.
   * Use `plannable_location_ids` instead.
   *
   * @generated from field: optional string plannable_location_id = 6;
   */
  plannableLocationId?: string;

  /**
   * The list of plannable location IDs to target with this forecast.
   *
   * If more than one ID is provided, all IDs must have the same
   * `parent_country_id`. Planning for more than `parent_county` is not
   * supported. Plannable location IDs and their `parent_country_id` can be
   * obtained from
   * [ReachPlanService.ListPlannableLocations][google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations].
   *
   * Requests must set either this field or `plannable_location_id`.
   *
   * @generated from field: repeated string plannable_location_ids = 8;
   */
  plannableLocationIds: string[];

  /**
   * Targeted age range.
   * An unset value is equivalent to targeting all ages.
   *
   * @generated from field: google.ads.googleads.v17.enums.ReachPlanAgeRangeEnum.ReachPlanAgeRange age_range = 2;
   */
  ageRange: ReachPlanAgeRangeEnum_ReachPlanAgeRange;

  /**
   * Targeted genders.
   * An unset value is equivalent to targeting MALE and FEMALE.
   *
   * @generated from field: repeated google.ads.googleads.v17.common.GenderInfo genders = 3;
   */
  genders: GenderInfo[];

  /**
   * Targeted devices.
   * If not specified, targets all applicable devices. Applicable devices vary
   * by product and region and can be obtained from
   * [ReachPlanService.ListPlannableProducts][google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts].
   *
   * @generated from field: repeated google.ads.googleads.v17.common.DeviceInfo devices = 4;
   */
  devices: DeviceInfo[];

  /**
   * Targetable network for the ad product.
   * If not specified, targets all applicable networks. Applicable networks vary
   * by product and region and can be obtained from
   * [ReachPlanService.ListPlannableProducts][google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts].
   *
   * @generated from field: google.ads.googleads.v17.enums.ReachPlanNetworkEnum.ReachPlanNetwork network = 5;
   */
  network: ReachPlanNetworkEnum_ReachPlanNetwork;

  /**
   * Targeted audiences.
   * If not specified, does not target any specific audience.
   *
   * @generated from field: google.ads.googleads.v17.services.AudienceTargeting audience_targeting = 7;
   */
  audienceTargeting?: AudienceTargeting;
};

/**
 * Describes the message google.ads.googleads.v17.services.Targeting.
 * Use `create(TargetingSchema)` to create a new message.
 */
export const TargetingSchema: GenMessage<Targeting> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 10);

/**
 * The duration of a planned campaign.
 *
 * @generated from message google.ads.googleads.v17.services.CampaignDuration
 */
export type CampaignDuration = Message<"google.ads.googleads.v17.services.CampaignDuration"> & {
  /**
   * The duration value in days.
   *
   * This field cannot be combined with the date_range field.
   *
   * @generated from field: optional int32 duration_in_days = 2;
   */
  durationInDays?: number;

  /**
   * Date range of the campaign.
   * Dates are in the yyyy-mm-dd format and inclusive.
   * The end date must be < 1 year in the future and the
   * date range must be <= 92 days long.
   *
   * This field cannot be combined with the duration_in_days field.
   *
   * @generated from field: google.ads.googleads.v17.common.DateRange date_range = 3;
   */
  dateRange?: DateRange;
};

/**
 * Describes the message google.ads.googleads.v17.services.CampaignDuration.
 * Use `create(CampaignDurationSchema)` to create a new message.
 */
export const CampaignDurationSchema: GenMessage<CampaignDuration> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 11);

/**
 * A product being planned for reach.
 *
 * @generated from message google.ads.googleads.v17.services.PlannedProduct
 */
export type PlannedProduct = Message<"google.ads.googleads.v17.services.PlannedProduct"> & {
  /**
   * Required. Selected product for planning.
   * The code associated with the ad product (for example: Trueview, Bumper).
   * To list the available plannable product codes use
   * [ReachPlanService.ListPlannableProducts][google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts].
   *
   * @generated from field: optional string plannable_product_code = 3;
   */
  plannableProductCode?: string;

  /**
   * Required. Maximum budget allocation in micros for the selected product.
   * The value is specified in the selected planning currency_code.
   * For example: 1 000 000$ = 1 000 000 000 000 micros.
   *
   * @generated from field: optional int64 budget_micros = 4;
   */
  budgetMicros?: bigint;

  /**
   * Targeting settings for the selected product.
   * To list the available targeting for each product use
   * [ReachPlanService.ListPlannableProducts][google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts].
   *
   * @generated from field: google.ads.googleads.v17.services.AdvancedProductTargeting advanced_product_targeting = 5;
   */
  advancedProductTargeting?: AdvancedProductTargeting;
};

/**
 * Describes the message google.ads.googleads.v17.services.PlannedProduct.
 * Use `create(PlannedProductSchema)` to create a new message.
 */
export const PlannedProductSchema: GenMessage<PlannedProduct> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 12);

/**
 * Response message containing the generated reach curve.
 *
 * @generated from message google.ads.googleads.v17.services.GenerateReachForecastResponse
 */
export type GenerateReachForecastResponse = Message<"google.ads.googleads.v17.services.GenerateReachForecastResponse"> & {
  /**
   * Reference on target audiences for this curve.
   *
   * @generated from field: google.ads.googleads.v17.services.OnTargetAudienceMetrics on_target_audience_metrics = 1;
   */
  onTargetAudienceMetrics?: OnTargetAudienceMetrics;

  /**
   * The generated reach curve for the planned product mix.
   *
   * @generated from field: google.ads.googleads.v17.services.ReachCurve reach_curve = 2;
   */
  reachCurve?: ReachCurve;
};

/**
 * Describes the message google.ads.googleads.v17.services.GenerateReachForecastResponse.
 * Use `create(GenerateReachForecastResponseSchema)` to create a new message.
 */
export const GenerateReachForecastResponseSchema: GenMessage<GenerateReachForecastResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 13);

/**
 * The reach curve for the planned products.
 *
 * @generated from message google.ads.googleads.v17.services.ReachCurve
 */
export type ReachCurve = Message<"google.ads.googleads.v17.services.ReachCurve"> & {
  /**
   * All points on the reach curve.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.ReachForecast reach_forecasts = 1;
   */
  reachForecasts: ReachForecast[];
};

/**
 * Describes the message google.ads.googleads.v17.services.ReachCurve.
 * Use `create(ReachCurveSchema)` to create a new message.
 */
export const ReachCurveSchema: GenMessage<ReachCurve> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 14);

/**
 * A point on reach curve.
 *
 * @generated from message google.ads.googleads.v17.services.ReachForecast
 */
export type ReachForecast = Message<"google.ads.googleads.v17.services.ReachForecast"> & {
  /**
   * The cost in micros.
   *
   * @generated from field: int64 cost_micros = 5;
   */
  costMicros: bigint;

  /**
   * Forecasted traffic metrics for this point.
   *
   * @generated from field: google.ads.googleads.v17.services.Forecast forecast = 2;
   */
  forecast?: Forecast;

  /**
   * The forecasted allocation and traffic metrics for each planned product
   * at this point on the reach curve.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.PlannedProductReachForecast planned_product_reach_forecasts = 4;
   */
  plannedProductReachForecasts: PlannedProductReachForecast[];
};

/**
 * Describes the message google.ads.googleads.v17.services.ReachForecast.
 * Use `create(ReachForecastSchema)` to create a new message.
 */
export const ReachForecastSchema: GenMessage<ReachForecast> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 15);

/**
 * Forecasted traffic metrics for the planned products and targeting.
 *
 * @generated from message google.ads.googleads.v17.services.Forecast
 */
export type Forecast = Message<"google.ads.googleads.v17.services.Forecast"> & {
  /**
   * Number of unique people reached at least
   * GenerateReachForecastRequest.min_effective_frequency or
   * GenerateReachForecastRequest.effective_frequency_limit times that exactly
   * matches the Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the on_target_reach
   * value will be rounded to 0.
   *
   * @generated from field: optional int64 on_target_reach = 5;
   */
  onTargetReach?: bigint;

  /**
   * Total number of unique people reached at least
   * GenerateReachForecastRequest.min_effective_frequency or
   * GenerateReachForecastRequest.effective_frequency_limit times. This includes
   * people that may fall outside the specified Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the total_reach
   * value will be rounded to 0.
   *
   * @generated from field: optional int64 total_reach = 6;
   */
  totalReach?: bigint;

  /**
   * Number of ad impressions that exactly matches the Targeting.
   *
   * @generated from field: optional int64 on_target_impressions = 7;
   */
  onTargetImpressions?: bigint;

  /**
   * Total number of ad impressions. This includes impressions that may fall
   * outside the specified Targeting, due to insufficient information on
   * signed-in users.
   *
   * @generated from field: optional int64 total_impressions = 8;
   */
  totalImpressions?: bigint;

  /**
   * Number of times the ad's impressions were considered viewable.
   * See https://support.google.com/google-ads/answer/7029393 for
   * more information about what makes an ad viewable and how
   * viewability is measured.
   *
   * @generated from field: optional int64 viewable_impressions = 9;
   */
  viewableImpressions?: bigint;

  /**
   * A list of effective frequency forecasts. The list is ordered starting with
   * 1+ and ending with the value set in
   * GenerateReachForecastRequest.effective_frequency_limit. If no
   * effective_frequency_limit was set, this list will be empty.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.EffectiveFrequencyBreakdown effective_frequency_breakdowns = 10;
   */
  effectiveFrequencyBreakdowns: EffectiveFrequencyBreakdown[];

  /**
   * Number of unique people reached that exactly matches the Targeting
   * including co-viewers.
   *
   * @generated from field: optional int64 on_target_coview_reach = 11;
   */
  onTargetCoviewReach?: bigint;

  /**
   * Number of unique people reached including co-viewers. This includes
   * people that may fall outside the specified Targeting.
   *
   * @generated from field: optional int64 total_coview_reach = 12;
   */
  totalCoviewReach?: bigint;

  /**
   * Number of ad impressions that exactly matches the Targeting including
   * co-viewers.
   *
   * @generated from field: optional int64 on_target_coview_impressions = 13;
   */
  onTargetCoviewImpressions?: bigint;

  /**
   * Total number of ad impressions including co-viewers. This includes
   * impressions that may fall outside the specified Targeting, due to
   * insufficient information on signed-in users.
   *
   * @generated from field: optional int64 total_coview_impressions = 14;
   */
  totalCoviewImpressions?: bigint;

  /**
   * Number of ad views forecasted for the specified product and targeting.
   * A view is counted when a viewer views a larger portion or the entirety of
   * an ad beyond an impression.
   *
   * See https://support.google.com/google-ads/answer/2375431 for
   * more information on views.
   *
   * @generated from field: optional int64 views = 15;
   */
  views?: bigint;
};

/**
 * Describes the message google.ads.googleads.v17.services.Forecast.
 * Use `create(ForecastSchema)` to create a new message.
 */
export const ForecastSchema: GenMessage<Forecast> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 16);

/**
 * The forecasted allocation and traffic metrics for a specific product
 * at a point on the reach curve.
 *
 * @generated from message google.ads.googleads.v17.services.PlannedProductReachForecast
 */
export type PlannedProductReachForecast = Message<"google.ads.googleads.v17.services.PlannedProductReachForecast"> & {
  /**
   * Selected product for planning. The product codes returned are within the
   * set of the ones returned by ListPlannableProducts when using the same
   * location ID.
   *
   * @generated from field: string plannable_product_code = 1;
   */
  plannableProductCode: string;

  /**
   * The cost in micros. This may differ from the product's input allocation
   * if one or more planned products cannot fulfill the budget because of
   * limited inventory.
   *
   * @generated from field: int64 cost_micros = 2;
   */
  costMicros: bigint;

  /**
   * Forecasted traffic metrics for this product.
   *
   * @generated from field: google.ads.googleads.v17.services.PlannedProductForecast planned_product_forecast = 3;
   */
  plannedProductForecast?: PlannedProductForecast;
};

/**
 * Describes the message google.ads.googleads.v17.services.PlannedProductReachForecast.
 * Use `create(PlannedProductReachForecastSchema)` to create a new message.
 */
export const PlannedProductReachForecastSchema: GenMessage<PlannedProductReachForecast> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 17);

/**
 * Forecasted traffic metrics for a planned product.
 *
 * @generated from message google.ads.googleads.v17.services.PlannedProductForecast
 */
export type PlannedProductForecast = Message<"google.ads.googleads.v17.services.PlannedProductForecast"> & {
  /**
   * Number of unique people reached that exactly matches the Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the on_target_reach
   * value will be rounded to 0.
   *
   * @generated from field: int64 on_target_reach = 1;
   */
  onTargetReach: bigint;

  /**
   * Number of unique people reached. This includes people that may fall
   * outside the specified Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the total_reach
   * value will be rounded to 0.
   *
   * @generated from field: int64 total_reach = 2;
   */
  totalReach: bigint;

  /**
   * Number of ad impressions that exactly matches the Targeting.
   *
   * @generated from field: int64 on_target_impressions = 3;
   */
  onTargetImpressions: bigint;

  /**
   * Total number of ad impressions. This includes impressions that may fall
   * outside the specified Targeting, due to insufficient information on
   * signed-in users.
   *
   * @generated from field: int64 total_impressions = 4;
   */
  totalImpressions: bigint;

  /**
   * Number of times the ad's impressions were considered viewable.
   * See https://support.google.com/google-ads/answer/7029393 for
   * more information about what makes an ad viewable and how
   * viewability is measured.
   *
   * @generated from field: optional int64 viewable_impressions = 5;
   */
  viewableImpressions?: bigint;

  /**
   * Number of unique people reached that exactly matches the Targeting
   * including co-viewers.
   *
   * @generated from field: optional int64 on_target_coview_reach = 6;
   */
  onTargetCoviewReach?: bigint;

  /**
   * Number of unique people reached including co-viewers. This includes
   * people that may fall outside the specified Targeting.
   *
   * @generated from field: optional int64 total_coview_reach = 7;
   */
  totalCoviewReach?: bigint;

  /**
   * Number of ad impressions that exactly matches the Targeting including
   * co-viewers.
   *
   * @generated from field: optional int64 on_target_coview_impressions = 8;
   */
  onTargetCoviewImpressions?: bigint;

  /**
   * Total number of ad impressions including co-viewers. This includes
   * impressions that may fall outside the specified Targeting, due to
   * insufficient information on signed-in users.
   *
   * @generated from field: optional int64 total_coview_impressions = 9;
   */
  totalCoviewImpressions?: bigint;

  /**
   * The number of times per selected time unit a user will see an ad, averaged
   * over the number of time units in the forecast length. This field will only
   * be populated for a Target Frequency campaign.
   *
   * See https://support.google.com/google-ads/answer/12400225 for more
   * information about Target Frequency campaigns.
   *
   * @generated from field: optional double average_frequency = 10;
   */
  averageFrequency?: number;

  /**
   * Number of ad views forecasted for the specified product and targeting.
   * A view is counted when a viewer views a larger portion or the entirety of
   * an ad beyond an impression.
   *
   * See https://support.google.com/google-ads/answer/2375431 for
   * more information on views.
   *
   * @generated from field: optional int64 views = 11;
   */
  views?: bigint;
};

/**
 * Describes the message google.ads.googleads.v17.services.PlannedProductForecast.
 * Use `create(PlannedProductForecastSchema)` to create a new message.
 */
export const PlannedProductForecastSchema: GenMessage<PlannedProductForecast> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 18);

/**
 * Audience metrics for the planned products.
 * These metrics consider the following targeting dimensions:
 *
 * - Location
 * - PlannableAgeRange
 * - Gender
 * - AudienceTargeting (only for youtube_audience_size)
 *
 * @generated from message google.ads.googleads.v17.services.OnTargetAudienceMetrics
 */
export type OnTargetAudienceMetrics = Message<"google.ads.googleads.v17.services.OnTargetAudienceMetrics"> & {
  /**
   * Reference audience size matching the considered targeting for YouTube.
   *
   * @generated from field: optional int64 youtube_audience_size = 3;
   */
  youtubeAudienceSize?: bigint;

  /**
   * Reference audience size matching the considered targeting for Census.
   *
   * @generated from field: optional int64 census_audience_size = 4;
   */
  censusAudienceSize?: bigint;
};

/**
 * Describes the message google.ads.googleads.v17.services.OnTargetAudienceMetrics.
 * Use `create(OnTargetAudienceMetricsSchema)` to create a new message.
 */
export const OnTargetAudienceMetricsSchema: GenMessage<OnTargetAudienceMetrics> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 19);

/**
 * A breakdown of the number of unique people reached at a given effective
 * frequency.
 *
 * @generated from message google.ads.googleads.v17.services.EffectiveFrequencyBreakdown
 */
export type EffectiveFrequencyBreakdown = Message<"google.ads.googleads.v17.services.EffectiveFrequencyBreakdown"> & {
  /**
   * The effective frequency [1-10].
   *
   * @generated from field: int32 effective_frequency = 1;
   */
  effectiveFrequency: number;

  /**
   * The number of unique people reached at least effective_frequency times that
   * exactly matches the Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the on_target_reach
   * value will be rounded to 0.
   *
   * @generated from field: int64 on_target_reach = 2;
   */
  onTargetReach: bigint;

  /**
   * Total number of unique people reached at least effective_frequency times.
   * This includes people that may fall outside the specified Targeting.
   *
   * Note that a minimum number of unique people must be reached in order for
   * data to be reported. If the minimum number is not met, the total_reach
   * value will be rounded to 0.
   *
   * @generated from field: int64 total_reach = 3;
   */
  totalReach: bigint;

  /**
   * The number of users (including co-viewing users) reached for the associated
   * effective_frequency value.
   *
   * @generated from field: optional int64 effective_coview_reach = 4;
   */
  effectiveCoviewReach?: bigint;

  /**
   * The number of users (including co-viewing users) reached for the associated
   * effective_frequency value within the specified plan demographic.
   *
   * @generated from field: optional int64 on_target_effective_coview_reach = 5;
   */
  onTargetEffectiveCoviewReach?: bigint;
};

/**
 * Describes the message google.ads.googleads.v17.services.EffectiveFrequencyBreakdown.
 * Use `create(EffectiveFrequencyBreakdownSchema)` to create a new message.
 */
export const EffectiveFrequencyBreakdownSchema: GenMessage<EffectiveFrequencyBreakdown> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 20);

/**
 * Controls forecast metrics to return.
 *
 * @generated from message google.ads.googleads.v17.services.ForecastMetricOptions
 */
export type ForecastMetricOptions = Message<"google.ads.googleads.v17.services.ForecastMetricOptions"> & {
  /**
   * Indicates whether to include co-view metrics in the response forecast.
   *
   * @generated from field: bool include_coview = 1;
   */
  includeCoview: boolean;
};

/**
 * Describes the message google.ads.googleads.v17.services.ForecastMetricOptions.
 * Use `create(ForecastMetricOptionsSchema)` to create a new message.
 */
export const ForecastMetricOptionsSchema: GenMessage<ForecastMetricOptions> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 21);

/**
 * Audience targeting for reach forecast.
 *
 * @generated from message google.ads.googleads.v17.services.AudienceTargeting
 */
export type AudienceTargeting = Message<"google.ads.googleads.v17.services.AudienceTargeting"> & {
  /**
   * List of audiences based on user interests to be targeted.
   *
   * @generated from field: repeated google.ads.googleads.v17.common.UserInterestInfo user_interest = 1;
   */
  userInterest: UserInterestInfo[];
};

/**
 * Describes the message google.ads.googleads.v17.services.AudienceTargeting.
 * Use `create(AudienceTargetingSchema)` to create a new message.
 */
export const AudienceTargetingSchema: GenMessage<AudienceTargeting> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 22);

/**
 * Advanced targeting settings for products.
 *
 * @generated from message google.ads.googleads.v17.services.AdvancedProductTargeting
 */
export type AdvancedProductTargeting = Message<"google.ads.googleads.v17.services.AdvancedProductTargeting"> & {
  /**
   * Surface targeting settings for this product.
   *
   * @generated from field: google.ads.googleads.v17.services.SurfaceTargeting surface_targeting_settings = 2;
   */
  surfaceTargetingSettings?: SurfaceTargeting;

  /**
   * Settings for a Target frequency campaign. Must be set when selecting the
   * TARGET_FREQUENCY product.
   *
   * See https://support.google.com/google-ads/answer/12400225 for more
   * information about Target Frequency campaigns.
   *
   * @generated from field: google.ads.googleads.v17.services.TargetFrequencySettings target_frequency_settings = 3;
   */
  targetFrequencySettings?: TargetFrequencySettings;

  /**
   * Targeting options for this product.
   *
   * @generated from oneof google.ads.googleads.v17.services.AdvancedProductTargeting.advanced_targeting
   */
  advancedTargeting: {
    /**
     * Settings for YouTube Select targeting.
     *
     * @generated from field: google.ads.googleads.v17.services.YouTubeSelectSettings youtube_select_settings = 1;
     */
    value: YouTubeSelectSettings;
    case: "youtubeSelectSettings";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.ads.googleads.v17.services.AdvancedProductTargeting.
 * Use `create(AdvancedProductTargetingSchema)` to create a new message.
 */
export const AdvancedProductTargetingSchema: GenMessage<AdvancedProductTargeting> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 23);

/**
 * Request settings for YouTube Select Lineups
 *
 * @generated from message google.ads.googleads.v17.services.YouTubeSelectSettings
 */
export type YouTubeSelectSettings = Message<"google.ads.googleads.v17.services.YouTubeSelectSettings"> & {
  /**
   * Lineup for YouTube Select Targeting.
   *
   * @generated from field: int64 lineup_id = 1;
   */
  lineupId: bigint;
};

/**
 * Describes the message google.ads.googleads.v17.services.YouTubeSelectSettings.
 * Use `create(YouTubeSelectSettingsSchema)` to create a new message.
 */
export const YouTubeSelectSettingsSchema: GenMessage<YouTubeSelectSettings> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 24);

/**
 * A Plannable YouTube Select Lineup for product targeting.
 *
 * @generated from message google.ads.googleads.v17.services.YouTubeSelectLineUp
 */
export type YouTubeSelectLineUp = Message<"google.ads.googleads.v17.services.YouTubeSelectLineUp"> & {
  /**
   * The ID of the YouTube Select Lineup.
   *
   * @generated from field: int64 lineup_id = 1;
   */
  lineupId: bigint;

  /**
   * The unique name of the YouTube Select Lineup.
   *
   * @generated from field: string lineup_name = 2;
   */
  lineupName: string;
};

/**
 * Describes the message google.ads.googleads.v17.services.YouTubeSelectLineUp.
 * Use `create(YouTubeSelectLineUpSchema)` to create a new message.
 */
export const YouTubeSelectLineUpSchema: GenMessage<YouTubeSelectLineUp> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 25);

/**
 * The surface targeting combinations available for an ad product.
 *
 * @generated from message google.ads.googleads.v17.services.SurfaceTargetingCombinations
 */
export type SurfaceTargetingCombinations = Message<"google.ads.googleads.v17.services.SurfaceTargetingCombinations"> & {
  /**
   * Default surface targeting applied to the ad product.
   *
   * @generated from field: google.ads.googleads.v17.services.SurfaceTargeting default_targeting = 1;
   */
  defaultTargeting?: SurfaceTargeting;

  /**
   * Available surface target combinations for the ad product.
   *
   * @generated from field: repeated google.ads.googleads.v17.services.SurfaceTargeting available_targeting_combinations = 2;
   */
  availableTargetingCombinations: SurfaceTargeting[];
};

/**
 * Describes the message google.ads.googleads.v17.services.SurfaceTargetingCombinations.
 * Use `create(SurfaceTargetingCombinationsSchema)` to create a new message.
 */
export const SurfaceTargetingCombinationsSchema: GenMessage<SurfaceTargetingCombinations> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 26);

/**
 * Container for surfaces for a product. Surfaces refer to the available types
 * of ad inventories such as In-Feed, In-Stream, and Shorts.
 *
 * @generated from message google.ads.googleads.v17.services.SurfaceTargeting
 */
export type SurfaceTargeting = Message<"google.ads.googleads.v17.services.SurfaceTargeting"> & {
  /**
   * List of surfaces available to target.
   *
   * @generated from field: repeated google.ads.googleads.v17.enums.ReachPlanSurfaceEnum.ReachPlanSurface surfaces = 1;
   */
  surfaces: ReachPlanSurfaceEnum_ReachPlanSurface[];
};

/**
 * Describes the message google.ads.googleads.v17.services.SurfaceTargeting.
 * Use `create(SurfaceTargetingSchema)` to create a new message.
 */
export const SurfaceTargetingSchema: GenMessage<SurfaceTargeting> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 27);

/**
 * Target Frequency settings for a supported product.
 *
 * @generated from message google.ads.googleads.v17.services.TargetFrequencySettings
 */
export type TargetFrequencySettings = Message<"google.ads.googleads.v17.services.TargetFrequencySettings"> & {
  /**
   * Required. The time unit used to describe the time frame for
   * target_frequency.
   *
   * @generated from field: google.ads.googleads.v17.enums.TargetFrequencyTimeUnitEnum.TargetFrequencyTimeUnit time_unit = 1;
   */
  timeUnit: TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit;

  /**
   * Required. The target frequency goal per selected time unit.
   *
   * @generated from field: int32 target_frequency = 2;
   */
  targetFrequency: number;
};

/**
 * Describes the message google.ads.googleads.v17.services.TargetFrequencySettings.
 * Use `create(TargetFrequencySettingsSchema)` to create a new message.
 */
export const TargetFrequencySettingsSchema: GenMessage<TargetFrequencySettings> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v17_services_reach_plan_service, 28);

/**
 * Reach Plan Service gives users information about audience size that can
 * be reached through advertisement on YouTube. In particular,
 * GenerateReachForecast provides estimated number of people of specified
 * demographics that can be reached by an ad in a given market by a campaign of
 * certain duration with a defined budget.
 *
 * @generated from service google.ads.googleads.v17.services.ReachPlanService
 */
export const ReachPlanService: GenService<{
  /**
   * Returns the list of plannable locations (for example, countries).
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v17.services.ReachPlanService.ListPlannableLocations
   */
  listPlannableLocations: {
    methodKind: "unary";
    input: typeof ListPlannableLocationsRequestSchema;
    output: typeof ListPlannableLocationsResponseSchema;
  },
  /**
   * Returns the list of per-location plannable YouTube ad formats with allowed
   * targeting.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v17.services.ReachPlanService.ListPlannableProducts
   */
  listPlannableProducts: {
    methodKind: "unary";
    input: typeof ListPlannableProductsRequestSchema;
    output: typeof ListPlannableProductsResponseSchema;
  },
  /**
   * Generates a reach forecast for a given targeting / product mix.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [FieldError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RangeError]()
   *   [ReachPlanError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v17.services.ReachPlanService.GenerateReachForecast
   */
  generateReachForecast: {
    methodKind: "unary";
    input: typeof GenerateReachForecastRequestSchema;
    output: typeof GenerateReachForecastResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_ads_googleads_v17_services_reach_plan_service, 0);

