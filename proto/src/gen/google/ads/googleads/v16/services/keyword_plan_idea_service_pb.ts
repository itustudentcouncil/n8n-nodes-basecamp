// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/ads/googleads/v16/services/keyword_plan_idea_service.proto (package google.ads.googleads.v16.services, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { KeywordInfo } from "../common/criteria_pb";
import { file_google_ads_googleads_v16_common_criteria } from "../common/criteria_pb";
import type { DateRange } from "../common/dates_pb";
import { file_google_ads_googleads_v16_common_dates } from "../common/dates_pb";
import type { HistoricalMetricsOptions, KeywordAnnotations, KeywordPlanAggregateMetricResults, KeywordPlanAggregateMetrics, KeywordPlanHistoricalMetrics } from "../common/keyword_plan_common_pb";
import { file_google_ads_googleads_v16_common_keyword_plan_common } from "../common/keyword_plan_common_pb";
import type { KeywordMatchTypeEnum_KeywordMatchType } from "../enums/keyword_match_type_pb";
import { file_google_ads_googleads_v16_enums_keyword_match_type } from "../enums/keyword_match_type_pb";
import type { KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation } from "../enums/keyword_plan_keyword_annotation_pb";
import { file_google_ads_googleads_v16_enums_keyword_plan_keyword_annotation } from "../enums/keyword_plan_keyword_annotation_pb";
import type { KeywordPlanNetworkEnum_KeywordPlanNetwork } from "../enums/keyword_plan_network_pb";
import { file_google_ads_googleads_v16_enums_keyword_plan_network } from "../enums/keyword_plan_network_pb";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/ads/googleads/v16/services/keyword_plan_idea_service.proto.
 */
export const file_google_ads_googleads_v16_services_keyword_plan_idea_service: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_ads_googleads_v16_common_criteria, file_google_ads_googleads_v16_common_dates, file_google_ads_googleads_v16_common_keyword_plan_common, file_google_ads_googleads_v16_enums_keyword_match_type, file_google_ads_googleads_v16_enums_keyword_plan_keyword_annotation, file_google_ads_googleads_v16_enums_keyword_plan_network, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior]);

/**
 * Request message for
 * [KeywordPlanIdeaService.GenerateKeywordIdeas][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordIdeas].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordIdeasRequest
 */
export type GenerateKeywordIdeasRequest = Message<"google.ads.googleads.v16.services.GenerateKeywordIdeasRequest"> & {
  /**
   * The ID of the customer with the recommendation.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * The resource name of the language to target.
   * Each keyword belongs to some set of languages; a keyword is included if
   * language is one of its languages.
   * If not set, all keywords will be included.
   *
   * @generated from field: optional string language = 14;
   */
  language?: string;

  /**
   * The resource names of the location to target. Maximum is 10.
   * An empty list MAY be used to specify all targeting geos.
   *
   * @generated from field: repeated string geo_target_constants = 15;
   */
  geoTargetConstants: string[];

  /**
   * If true, adult keywords will be included in response.
   * The default value is false.
   *
   * @generated from field: bool include_adult_keywords = 10;
   */
  includeAdultKeywords: boolean;

  /**
   * Token of the page to retrieve. If not specified, the first
   * page of results will be returned. To request next page of results use the
   * value obtained from `next_page_token` in the previous response.
   * The request fields must match across pages.
   *
   * @generated from field: string page_token = 12;
   */
  pageToken: string;

  /**
   * Number of results to retrieve in a single page.
   * A maximum of 10,000 results may be returned, if the page_size
   * exceeds this, it is ignored.
   * If unspecified, at most 10,000 results will be returned.
   * The server may decide to further limit the number of returned resources.
   * If the response contains fewer than 10,000 results it may not be assumed
   * as last page of results.
   *
   * @generated from field: int32 page_size = 13;
   */
  pageSize: number;

  /**
   * Targeting network.
   * If not set, Google Search And Partners Network will be used.
   *
   * @generated from field: google.ads.googleads.v16.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork keyword_plan_network = 9;
   */
  keywordPlanNetwork: KeywordPlanNetworkEnum_KeywordPlanNetwork;

  /**
   * The keyword annotations to include in response.
   *
   * @generated from field: repeated google.ads.googleads.v16.enums.KeywordPlanKeywordAnnotationEnum.KeywordPlanKeywordAnnotation keyword_annotation = 17;
   */
  keywordAnnotation: KeywordPlanKeywordAnnotationEnum_KeywordPlanKeywordAnnotation[];

  /**
   * The aggregate fields to include in response.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanAggregateMetrics aggregate_metrics = 16;
   */
  aggregateMetrics?: KeywordPlanAggregateMetrics;

  /**
   * The options for historical metrics data.
   *
   * @generated from field: google.ads.googleads.v16.common.HistoricalMetricsOptions historical_metrics_options = 18;
   */
  historicalMetricsOptions?: HistoricalMetricsOptions;

  /**
   * The type of seed to generate keyword ideas.
   *
   * @generated from oneof google.ads.googleads.v16.services.GenerateKeywordIdeasRequest.seed
   */
  seed: {
    /**
     * A Keyword and a specific Url to generate ideas from
     * for example, cars, www.example.com/cars.
     *
     * @generated from field: google.ads.googleads.v16.services.KeywordAndUrlSeed keyword_and_url_seed = 2;
     */
    value: KeywordAndUrlSeed;
    case: "keywordAndUrlSeed";
  } | {
    /**
     * A Keyword or phrase to generate ideas from, for example, cars.
     *
     * @generated from field: google.ads.googleads.v16.services.KeywordSeed keyword_seed = 3;
     */
    value: KeywordSeed;
    case: "keywordSeed";
  } | {
    /**
     * A specific url to generate ideas from, for example, www.example.com/cars.
     *
     * @generated from field: google.ads.googleads.v16.services.UrlSeed url_seed = 5;
     */
    value: UrlSeed;
    case: "urlSeed";
  } | {
    /**
     * The site to generate ideas from, for example, www.example.com.
     *
     * @generated from field: google.ads.googleads.v16.services.SiteSeed site_seed = 11;
     */
    value: SiteSeed;
    case: "siteSeed";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordIdeasRequest.
 * Use `create(GenerateKeywordIdeasRequestSchema)` to create a new message.
 */
export const GenerateKeywordIdeasRequestSchema: GenMessage<GenerateKeywordIdeasRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 0);

/**
 * Keyword And Url Seed
 *
 * @generated from message google.ads.googleads.v16.services.KeywordAndUrlSeed
 */
export type KeywordAndUrlSeed = Message<"google.ads.googleads.v16.services.KeywordAndUrlSeed"> & {
  /**
   * The URL to crawl in order to generate keyword ideas.
   *
   * @generated from field: optional string url = 3;
   */
  url?: string;

  /**
   * Requires at least one keyword.
   *
   * @generated from field: repeated string keywords = 4;
   */
  keywords: string[];
};

/**
 * Describes the message google.ads.googleads.v16.services.KeywordAndUrlSeed.
 * Use `create(KeywordAndUrlSeedSchema)` to create a new message.
 */
export const KeywordAndUrlSeedSchema: GenMessage<KeywordAndUrlSeed> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 1);

/**
 * Keyword Seed
 *
 * @generated from message google.ads.googleads.v16.services.KeywordSeed
 */
export type KeywordSeed = Message<"google.ads.googleads.v16.services.KeywordSeed"> & {
  /**
   * Requires at least one keyword.
   *
   * @generated from field: repeated string keywords = 2;
   */
  keywords: string[];
};

/**
 * Describes the message google.ads.googleads.v16.services.KeywordSeed.
 * Use `create(KeywordSeedSchema)` to create a new message.
 */
export const KeywordSeedSchema: GenMessage<KeywordSeed> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 2);

/**
 * Site Seed
 *
 * @generated from message google.ads.googleads.v16.services.SiteSeed
 */
export type SiteSeed = Message<"google.ads.googleads.v16.services.SiteSeed"> & {
  /**
   * The domain name of the site. If the customer requesting the ideas doesn't
   * own the site provided only public information is returned.
   *
   * @generated from field: optional string site = 2;
   */
  site?: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.SiteSeed.
 * Use `create(SiteSeedSchema)` to create a new message.
 */
export const SiteSeedSchema: GenMessage<SiteSeed> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 3);

/**
 * Url Seed
 *
 * @generated from message google.ads.googleads.v16.services.UrlSeed
 */
export type UrlSeed = Message<"google.ads.googleads.v16.services.UrlSeed"> & {
  /**
   * The URL to crawl in order to generate keyword ideas.
   *
   * @generated from field: optional string url = 2;
   */
  url?: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.UrlSeed.
 * Use `create(UrlSeedSchema)` to create a new message.
 */
export const UrlSeedSchema: GenMessage<UrlSeed> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 4);

/**
 * Response message for
 * [KeywordPlanIdeaService.GenerateKeywordIdeas][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordIdeas].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordIdeaResponse
 */
export type GenerateKeywordIdeaResponse = Message<"google.ads.googleads.v16.services.GenerateKeywordIdeaResponse"> & {
  /**
   * Results of generating keyword ideas.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.GenerateKeywordIdeaResult results = 1;
   */
  results: GenerateKeywordIdeaResult[];

  /**
   * The aggregate metrics for all keyword ideas.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanAggregateMetricResults aggregate_metric_results = 4;
   */
  aggregateMetricResults?: KeywordPlanAggregateMetricResults;

  /**
   * Pagination token used to retrieve the next page of results.
   * Pass the content of this string as the `page_token` attribute of
   * the next request.
   * `next_page_token` is not returned for the last page.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Total number of results available.
   *
   * @generated from field: int64 total_size = 3;
   */
  totalSize: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordIdeaResponse.
 * Use `create(GenerateKeywordIdeaResponseSchema)` to create a new message.
 */
export const GenerateKeywordIdeaResponseSchema: GenMessage<GenerateKeywordIdeaResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 5);

/**
 * The result of generating keyword ideas.
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordIdeaResult
 */
export type GenerateKeywordIdeaResult = Message<"google.ads.googleads.v16.services.GenerateKeywordIdeaResult"> & {
  /**
   * Text of the keyword idea.
   * As in Keyword Plan historical metrics, this text may not be an actual
   * keyword, but the canonical form of multiple keywords.
   * See KeywordPlanKeywordHistoricalMetrics message in KeywordPlanService.
   *
   * @generated from field: optional string text = 5;
   */
  text?: string;

  /**
   * The historical metrics for the keyword.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanHistoricalMetrics keyword_idea_metrics = 3;
   */
  keywordIdeaMetrics?: KeywordPlanHistoricalMetrics;

  /**
   * The annotations for the keyword.
   * The annotation data is only provided if requested.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordAnnotations keyword_annotations = 6;
   */
  keywordAnnotations?: KeywordAnnotations;

  /**
   * The list of close variants from the requested keywords that
   * are combined into this GenerateKeywordIdeaResult. See
   * https://support.google.com/google-ads/answer/9342105 for the
   * definition of "close variants".
   *
   * @generated from field: repeated string close_variants = 7;
   */
  closeVariants: string[];
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordIdeaResult.
 * Use `create(GenerateKeywordIdeaResultSchema)` to create a new message.
 */
export const GenerateKeywordIdeaResultSchema: GenMessage<GenerateKeywordIdeaResult> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 6);

/**
 * Request message for
 * [KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsRequest
 */
export type GenerateKeywordHistoricalMetricsRequest = Message<"google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsRequest"> & {
  /**
   * The ID of the customer with the recommendation.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * A list of keywords to get historical metrics.
   * Not all inputs will be returned as a result of near-exact deduplication.
   * For example, if stats for "car" and "cars" are requested, only "car" will
   * be returned.
   * A maximum of 10,000 keywords can be used.
   *
   * @generated from field: repeated string keywords = 2;
   */
  keywords: string[];

  /**
   * The resource name of the language to target.
   * Each keyword belongs to some set of languages; a keyword is included if
   * language is one of its languages.
   * If not set, all keywords will be included.
   *
   * @generated from field: optional string language = 4;
   */
  language?: string;

  /**
   * If true, adult keywords will be included in response.
   * The default value is false.
   *
   * @generated from field: bool include_adult_keywords = 5;
   */
  includeAdultKeywords: boolean;

  /**
   * The resource names of the location to target. Maximum is 10.
   * An empty list MAY be used to specify all targeting geos.
   *
   * @generated from field: repeated string geo_target_constants = 6;
   */
  geoTargetConstants: string[];

  /**
   * Targeting network.
   * If not set, Google Search And Partners Network will be used.
   *
   * @generated from field: google.ads.googleads.v16.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork keyword_plan_network = 7;
   */
  keywordPlanNetwork: KeywordPlanNetworkEnum_KeywordPlanNetwork;

  /**
   * The aggregate fields to include in response.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanAggregateMetrics aggregate_metrics = 8;
   */
  aggregateMetrics?: KeywordPlanAggregateMetrics;

  /**
   * The options for historical metrics data.
   *
   * @generated from field: google.ads.googleads.v16.common.HistoricalMetricsOptions historical_metrics_options = 3;
   */
  historicalMetricsOptions?: HistoricalMetricsOptions;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsRequest.
 * Use `create(GenerateKeywordHistoricalMetricsRequestSchema)` to create a new message.
 */
export const GenerateKeywordHistoricalMetricsRequestSchema: GenMessage<GenerateKeywordHistoricalMetricsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 7);

/**
 * Response message for
 * [KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResponse
 */
export type GenerateKeywordHistoricalMetricsResponse = Message<"google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResponse"> & {
  /**
   * List of keywords and their historical metrics.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResult results = 1;
   */
  results: GenerateKeywordHistoricalMetricsResult[];

  /**
   * The aggregate metrics for all keywords.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanAggregateMetricResults aggregate_metric_results = 2;
   */
  aggregateMetricResults?: KeywordPlanAggregateMetricResults;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResponse.
 * Use `create(GenerateKeywordHistoricalMetricsResponseSchema)` to create a new message.
 */
export const GenerateKeywordHistoricalMetricsResponseSchema: GenMessage<GenerateKeywordHistoricalMetricsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 8);

/**
 * The result of generating keyword historical metrics.
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResult
 */
export type GenerateKeywordHistoricalMetricsResult = Message<"google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResult"> & {
  /**
   * The text of the query associated with one or more keywords.
   * Note that we de-dupe your keywords list, eliminating close variants
   * before returning the keywords as text. For example, if your request
   * originally contained the keywords "car" and "cars", the returned search
   * query will only contain "cars". The list of de-duped queries will be
   * included in close_variants field.
   *
   * @generated from field: optional string text = 1;
   */
  text?: string;

  /**
   * The list of close variants from the requested keywords whose stats
   * are combined into this GenerateKeywordHistoricalMetricsResult.
   *
   * @generated from field: repeated string close_variants = 3;
   */
  closeVariants: string[];

  /**
   * The historical metrics for text and its close variants
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordPlanHistoricalMetrics keyword_metrics = 2;
   */
  keywordMetrics?: KeywordPlanHistoricalMetrics;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordHistoricalMetricsResult.
 * Use `create(GenerateKeywordHistoricalMetricsResultSchema)` to create a new message.
 */
export const GenerateKeywordHistoricalMetricsResultSchema: GenMessage<GenerateKeywordHistoricalMetricsResult> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 9);

/**
 * Request message for
 * [KeywordPlanIdeaService.GenerateAdGroupThemes][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateAdGroupThemes].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateAdGroupThemesRequest
 */
export type GenerateAdGroupThemesRequest = Message<"google.ads.googleads.v16.services.GenerateAdGroupThemesRequest"> & {
  /**
   * Required. The ID of the customer.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * Required. A list of keywords to group into the provided AdGroups.
   *
   * @generated from field: repeated string keywords = 2;
   */
  keywords: string[];

  /**
   * Required. A list of resource names of AdGroups to group keywords into.
   *  Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
   *
   * @generated from field: repeated string ad_groups = 3;
   */
  adGroups: string[];
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateAdGroupThemesRequest.
 * Use `create(GenerateAdGroupThemesRequestSchema)` to create a new message.
 */
export const GenerateAdGroupThemesRequestSchema: GenMessage<GenerateAdGroupThemesRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 10);

/**
 * Response message for
 * [KeywordPlanIdeaService.GenerateAdGroupThemes][google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateAdGroupThemes].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateAdGroupThemesResponse
 */
export type GenerateAdGroupThemesResponse = Message<"google.ads.googleads.v16.services.GenerateAdGroupThemesResponse"> & {
  /**
   * A list of suggested AdGroup/keyword pairings.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.AdGroupKeywordSuggestion ad_group_keyword_suggestions = 1;
   */
  adGroupKeywordSuggestions: AdGroupKeywordSuggestion[];

  /**
   * A list of provided AdGroups that could not be used as suggestions.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.UnusableAdGroup unusable_ad_groups = 2;
   */
  unusableAdGroups: UnusableAdGroup[];
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateAdGroupThemesResponse.
 * Use `create(GenerateAdGroupThemesResponseSchema)` to create a new message.
 */
export const GenerateAdGroupThemesResponseSchema: GenMessage<GenerateAdGroupThemesResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 11);

/**
 * The suggested text and AdGroup/Campaign pairing for a given keyword.
 *
 * @generated from message google.ads.googleads.v16.services.AdGroupKeywordSuggestion
 */
export type AdGroupKeywordSuggestion = Message<"google.ads.googleads.v16.services.AdGroupKeywordSuggestion"> & {
  /**
   * The original keyword text.
   *
   * @generated from field: string keyword_text = 1;
   */
  keywordText: string;

  /**
   * The normalized version of keyword_text for BROAD/EXACT/PHRASE suggestions.
   *
   * @generated from field: string suggested_keyword_text = 2;
   */
  suggestedKeywordText: string;

  /**
   * The suggested keyword match type.
   *
   * @generated from field: google.ads.googleads.v16.enums.KeywordMatchTypeEnum.KeywordMatchType suggested_match_type = 3;
   */
  suggestedMatchType: KeywordMatchTypeEnum_KeywordMatchType;

  /**
   * The suggested AdGroup for the keyword.
   * Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
   *
   * @generated from field: string suggested_ad_group = 4;
   */
  suggestedAdGroup: string;

  /**
   * The suggested Campaign for the keyword.
   * Resource name format: `customers/{customer_id}/campaigns/{campaign_id}`
   *
   * @generated from field: string suggested_campaign = 5;
   */
  suggestedCampaign: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.AdGroupKeywordSuggestion.
 * Use `create(AdGroupKeywordSuggestionSchema)` to create a new message.
 */
export const AdGroupKeywordSuggestionSchema: GenMessage<AdGroupKeywordSuggestion> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 12);

/**
 * An AdGroup/Campaign pair that could not be used as a suggestion for keywords.
 *
 * AdGroups may not be usable if the AdGroup
 *
 * * belongs to a Campaign that is not ENABLED or PAUSED
 * * is itself not ENABLED
 *
 * @generated from message google.ads.googleads.v16.services.UnusableAdGroup
 */
export type UnusableAdGroup = Message<"google.ads.googleads.v16.services.UnusableAdGroup"> & {
  /**
   * The AdGroup resource name.
   * Resource name format: `customers/{customer_id}/adGroups/{ad_group_id}`
   *
   * @generated from field: string ad_group = 1;
   */
  adGroup: string;

  /**
   * The Campaign resource name.
   * Resource name format: `customers/{customer_id}/campaigns/{campaign_id}`
   *
   * @generated from field: string campaign = 2;
   */
  campaign: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.UnusableAdGroup.
 * Use `create(UnusableAdGroupSchema)` to create a new message.
 */
export const UnusableAdGroupSchema: GenMessage<UnusableAdGroup> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 13);

/**
 * Request message for [KeywordPlanIdeaService.GenerateKeywordForecastMetrics].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordForecastMetricsRequest
 */
export type GenerateKeywordForecastMetricsRequest = Message<"google.ads.googleads.v16.services.GenerateKeywordForecastMetricsRequest"> & {
  /**
   * The ID of the customer.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * The currency used for exchange rate conversion.
   * By default, the account currency of the customer is used.
   * Set this field only if the currency is different from the account currency.
   * The list of valid currency codes can be found at
   * https://developers.google.com/google-ads/api/data/codes-formats#currency-codes.
   *
   * @generated from field: optional string currency_code = 2;
   */
  currencyCode?: string;

  /**
   * The date range for the forecast. The start date must be in the future and
   * end date must be within 1 year from today. The reference timezone used is
   * the one of the Google Ads account belonging to the customer. If not set, a
   * default date range from next Sunday to the following Saturday will be used.
   *
   * @generated from field: google.ads.googleads.v16.common.DateRange forecast_period = 3;
   */
  forecastPeriod?: DateRange;

  /**
   * Required. The campaign used in the forecast.
   *
   * @generated from field: google.ads.googleads.v16.services.CampaignToForecast campaign = 4;
   */
  campaign?: CampaignToForecast;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordForecastMetricsRequest.
 * Use `create(GenerateKeywordForecastMetricsRequestSchema)` to create a new message.
 */
export const GenerateKeywordForecastMetricsRequestSchema: GenMessage<GenerateKeywordForecastMetricsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 14);

/**
 * A campaign to do a keyword campaign forecast.
 *
 * @generated from message google.ads.googleads.v16.services.CampaignToForecast
 */
export type CampaignToForecast = Message<"google.ads.googleads.v16.services.CampaignToForecast"> & {
  /**
   * The list of resource names of languages to be targeted. The resource name
   * is of the format "languageConstants/{criterion_id}". See
   * https://developers.google.com/google-ads/api/data/codes-formats#languages
   * for the list of language criterion codes.
   *
   * @generated from field: repeated string language_constants = 1;
   */
  languageConstants: string[];

  /**
   * Locations to be targeted. Locations must be unique.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CriterionBidModifier geo_modifiers = 2;
   */
  geoModifiers: CriterionBidModifier[];

  /**
   * Required. The network used for targeting.
   *
   * @generated from field: google.ads.googleads.v16.enums.KeywordPlanNetworkEnum.KeywordPlanNetwork keyword_plan_network = 3;
   */
  keywordPlanNetwork: KeywordPlanNetworkEnum_KeywordPlanNetwork;

  /**
   * The list of negative keywords to be used in the campaign when doing the
   * forecast.
   *
   * @generated from field: repeated google.ads.googleads.v16.common.KeywordInfo negative_keywords = 4;
   */
  negativeKeywords: KeywordInfo[];

  /**
   * Required. The bidding strategy for the campaign.
   *
   * @generated from field: google.ads.googleads.v16.services.CampaignToForecast.CampaignBiddingStrategy bidding_strategy = 5;
   */
  biddingStrategy?: CampaignToForecast_CampaignBiddingStrategy;

  /**
   * The expected conversion rate (number of conversions divided by number of
   * total clicks) as defined by the user. This value is expressed as a decimal
   * value, so an expected conversion rate of 2% should be entered as 0.02. If
   * left empty, an estimated conversion rate will be used.
   *
   * @generated from field: optional double conversion_rate = 6;
   */
  conversionRate?: number;

  /**
   * The ad groups in the new campaign to forecast.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.ForecastAdGroup ad_groups = 7;
   */
  adGroups: ForecastAdGroup[];
};

/**
 * Describes the message google.ads.googleads.v16.services.CampaignToForecast.
 * Use `create(CampaignToForecastSchema)` to create a new message.
 */
export const CampaignToForecastSchema: GenMessage<CampaignToForecast> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 15);

/**
 * Supported bidding strategies for new campaign forecasts.
 *
 * @generated from message google.ads.googleads.v16.services.CampaignToForecast.CampaignBiddingStrategy
 */
export type CampaignToForecast_CampaignBiddingStrategy = Message<"google.ads.googleads.v16.services.CampaignToForecast.CampaignBiddingStrategy"> & {
  /**
   * Bidding strategies.
   *
   * @generated from oneof google.ads.googleads.v16.services.CampaignToForecast.CampaignBiddingStrategy.bidding_strategy
   */
  biddingStrategy: {
    /**
     * Use manual CPC bidding strategy for forecasting.
     *
     * @generated from field: google.ads.googleads.v16.services.ManualCpcBiddingStrategy manual_cpc_bidding_strategy = 1;
     */
    value: ManualCpcBiddingStrategy;
    case: "manualCpcBiddingStrategy";
  } | {
    /**
     * Use maximize clicks bidding strategy for forecasting.
     *
     * @generated from field: google.ads.googleads.v16.services.MaximizeClicksBiddingStrategy maximize_clicks_bidding_strategy = 2;
     */
    value: MaximizeClicksBiddingStrategy;
    case: "maximizeClicksBiddingStrategy";
  } | {
    /**
     * Use maximize conversions bidding strategy for forecasting.
     *
     * @generated from field: google.ads.googleads.v16.services.MaximizeConversionsBiddingStrategy maximize_conversions_bidding_strategy = 3;
     */
    value: MaximizeConversionsBiddingStrategy;
    case: "maximizeConversionsBiddingStrategy";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.ads.googleads.v16.services.CampaignToForecast.CampaignBiddingStrategy.
 * Use `create(CampaignToForecast_CampaignBiddingStrategySchema)` to create a new message.
 */
export const CampaignToForecast_CampaignBiddingStrategySchema: GenMessage<CampaignToForecast_CampaignBiddingStrategy> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 15, 0);

/**
 * An ad group that is part of a campaign to be forecasted.
 *
 * @generated from message google.ads.googleads.v16.services.ForecastAdGroup
 */
export type ForecastAdGroup = Message<"google.ads.googleads.v16.services.ForecastAdGroup"> & {
  /**
   * The max cpc to use for the ad group when generating forecasted traffic.
   * This value will override the max cpc value set in the bidding strategy.
   * Only specify this field for bidding strategies that max cpc values.
   *
   * @generated from field: optional int64 max_cpc_bid_micros = 1;
   */
  maxCpcBidMicros?: bigint;

  /**
   * Required. The list of biddable keywords to be used in the ad group when
   * doing the forecast. Requires at least one keyword.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.BiddableKeyword biddable_keywords = 2;
   */
  biddableKeywords: BiddableKeyword[];

  /**
   * The details of the keyword. You should specify both the keyword text and
   * match type.
   *
   * @generated from field: repeated google.ads.googleads.v16.common.KeywordInfo negative_keywords = 3;
   */
  negativeKeywords: KeywordInfo[];
};

/**
 * Describes the message google.ads.googleads.v16.services.ForecastAdGroup.
 * Use `create(ForecastAdGroupSchema)` to create a new message.
 */
export const ForecastAdGroupSchema: GenMessage<ForecastAdGroup> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 16);

/**
 * A biddable keyword part of an ad group.
 *
 * @generated from message google.ads.googleads.v16.services.BiddableKeyword
 */
export type BiddableKeyword = Message<"google.ads.googleads.v16.services.BiddableKeyword"> & {
  /**
   * Required. Keyword. Must have text and match type.
   *
   * @generated from field: google.ads.googleads.v16.common.KeywordInfo keyword = 1;
   */
  keyword?: KeywordInfo;

  /**
   * A max cpc bid in micros that overrides the ad group level max cpc bid in
   * forecast simulation. This value will override the max cpc value set in the
   * bidding strategy and ad group. Only specify this field for bidding
   * strategies that support max cpc values.
   *
   * @generated from field: optional int64 max_cpc_bid_micros = 2;
   */
  maxCpcBidMicros?: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.BiddableKeyword.
 * Use `create(BiddableKeywordSchema)` to create a new message.
 */
export const BiddableKeywordSchema: GenMessage<BiddableKeyword> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 17);

/**
 * Location Criterion bid modifier.
 *
 * @generated from message google.ads.googleads.v16.services.CriterionBidModifier
 */
export type CriterionBidModifier = Message<"google.ads.googleads.v16.services.CriterionBidModifier"> & {
  /**
   * The resource name of the geo location to target. The resource name is of
   * the format "geoTargetConstants/{criterion_id}".
   *
   * @generated from field: string geo_target_constant = 1;
   */
  geoTargetConstant: string;

  /**
   * The associated multiplier for the criterion_id. If set, this value cannot
   * be 0.
   *
   * @generated from field: optional double bid_modifier = 2;
   */
  bidModifier?: number;
};

/**
 * Describes the message google.ads.googleads.v16.services.CriterionBidModifier.
 * Use `create(CriterionBidModifierSchema)` to create a new message.
 */
export const CriterionBidModifierSchema: GenMessage<CriterionBidModifier> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 18);

/**
 * Manual CPC Bidding Strategy.
 *
 * @generated from message google.ads.googleads.v16.services.ManualCpcBiddingStrategy
 */
export type ManualCpcBiddingStrategy = Message<"google.ads.googleads.v16.services.ManualCpcBiddingStrategy"> & {
  /**
   * Campaign level budget in micros. If set, a minimum value
   * is enforced for the local currency used in the campaign. An error
   * will occur showing the minimum value if this field is set too low.
   *
   * @generated from field: optional int64 daily_budget_micros = 1;
   */
  dailyBudgetMicros?: bigint;

  /**
   * Required. A bid in micros to be applied to ad groups within the campaign
   * for a manual CPC bidding strategy.
   *
   * @generated from field: int64 max_cpc_bid_micros = 2;
   */
  maxCpcBidMicros: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.ManualCpcBiddingStrategy.
 * Use `create(ManualCpcBiddingStrategySchema)` to create a new message.
 */
export const ManualCpcBiddingStrategySchema: GenMessage<ManualCpcBiddingStrategy> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 19);

/**
 * Maximize Clicks Bidding Strategy.
 *
 * @generated from message google.ads.googleads.v16.services.MaximizeClicksBiddingStrategy
 */
export type MaximizeClicksBiddingStrategy = Message<"google.ads.googleads.v16.services.MaximizeClicksBiddingStrategy"> & {
  /**
   * Required. The daily target spend in micros to be used for estimation. A
   * minimum value is enforced for the local currency used in the campaign. An
   * error will occur showing the minimum value if this field is set too low.
   *
   * @generated from field: int64 daily_target_spend_micros = 1;
   */
  dailyTargetSpendMicros: bigint;

  /**
   * Ceiling on max CPC bids in micros.
   *
   * @generated from field: optional int64 max_cpc_bid_ceiling_micros = 2;
   */
  maxCpcBidCeilingMicros?: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.MaximizeClicksBiddingStrategy.
 * Use `create(MaximizeClicksBiddingStrategySchema)` to create a new message.
 */
export const MaximizeClicksBiddingStrategySchema: GenMessage<MaximizeClicksBiddingStrategy> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 20);

/**
 * Maximize Conversions Bidding Strategy.
 *
 * @generated from message google.ads.googleads.v16.services.MaximizeConversionsBiddingStrategy
 */
export type MaximizeConversionsBiddingStrategy = Message<"google.ads.googleads.v16.services.MaximizeConversionsBiddingStrategy"> & {
  /**
   * Required. The daily target spend in micros to be used for estimation. This
   * value must be greater than zero.
   *
   * @generated from field: int64 daily_target_spend_micros = 1;
   */
  dailyTargetSpendMicros: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.MaximizeConversionsBiddingStrategy.
 * Use `create(MaximizeConversionsBiddingStrategySchema)` to create a new message.
 */
export const MaximizeConversionsBiddingStrategySchema: GenMessage<MaximizeConversionsBiddingStrategy> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 21);

/**
 * Response message for [KeywordPlanIdeaService.GenerateKeywordForecastMetrics].
 *
 * @generated from message google.ads.googleads.v16.services.GenerateKeywordForecastMetricsResponse
 */
export type GenerateKeywordForecastMetricsResponse = Message<"google.ads.googleads.v16.services.GenerateKeywordForecastMetricsResponse"> & {
  /**
   * Results of the campaign forecast.
   *
   * @generated from field: optional google.ads.googleads.v16.services.KeywordForecastMetrics campaign_forecast_metrics = 1;
   */
  campaignForecastMetrics?: KeywordForecastMetrics;
};

/**
 * Describes the message google.ads.googleads.v16.services.GenerateKeywordForecastMetricsResponse.
 * Use `create(GenerateKeywordForecastMetricsResponseSchema)` to create a new message.
 */
export const GenerateKeywordForecastMetricsResponseSchema: GenMessage<GenerateKeywordForecastMetricsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 22);

/**
 * The forecast metrics for the planless keyword campaign.
 *
 * @generated from message google.ads.googleads.v16.services.KeywordForecastMetrics
 */
export type KeywordForecastMetrics = Message<"google.ads.googleads.v16.services.KeywordForecastMetrics"> & {
  /**
   * The total number of impressions.
   *
   * @generated from field: optional double impressions = 1;
   */
  impressions?: number;

  /**
   * The average click through rate. Available only if impressions > 0.
   *
   * @generated from field: optional double click_through_rate = 2;
   */
  clickThroughRate?: number;

  /**
   * The average cpc. Available only if clicks > 0.
   *
   * @generated from field: optional int64 average_cpc_micros = 3;
   */
  averageCpcMicros?: bigint;

  /**
   * The total number of clicks.
   *
   * @generated from field: optional double clicks = 4;
   */
  clicks?: number;

  /**
   * The total cost.
   *
   * @generated from field: optional int64 cost_micros = 5;
   */
  costMicros?: bigint;

  /**
   * Forecasted number of conversions: clicks * conversion_rate.
   *
   * @generated from field: optional double conversions = 6;
   */
  conversions?: number;

  /**
   * Forecasted conversion rate.
   *
   * @generated from field: optional double conversion_rate = 7;
   */
  conversionRate?: number;

  /**
   * Average cost per acquisition calculated as cost_micros / conversions.
   *
   * @generated from field: optional int64 average_cpa_micros = 8;
   */
  averageCpaMicros?: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.KeywordForecastMetrics.
 * Use `create(KeywordForecastMetricsSchema)` to create a new message.
 */
export const KeywordForecastMetricsSchema: GenMessage<KeywordForecastMetrics> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 23);

/**
 * Service to generate keyword ideas.
 *
 * @generated from service google.ads.googleads.v16.services.KeywordPlanIdeaService
 */
export const KeywordPlanIdeaService: GenService<{
  /**
   * Returns a list of keyword ideas.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CollectionSizeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [KeywordPlanIdeaError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordIdeas
   */
  generateKeywordIdeas: {
    methodKind: "unary";
    input: typeof GenerateKeywordIdeasRequestSchema;
    output: typeof GenerateKeywordIdeaResponseSchema;
  },
  /**
   * Returns a list of keyword historical metrics.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CollectionSizeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordHistoricalMetrics
   */
  generateKeywordHistoricalMetrics: {
    methodKind: "unary";
    input: typeof GenerateKeywordHistoricalMetricsRequestSchema;
    output: typeof GenerateKeywordHistoricalMetricsResponseSchema;
  },
  /**
   * Returns a list of suggested AdGroups and suggested modifications
   * (text, match type) for the given keywords.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CollectionSizeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateAdGroupThemes
   */
  generateAdGroupThemes: {
    methodKind: "unary";
    input: typeof GenerateAdGroupThemesRequestSchema;
    output: typeof GenerateAdGroupThemesResponseSchema;
  },
  /**
   * Returns metrics (such as impressions, clicks, total cost) of a keyword
   * forecast for the given campaign.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [CollectionSizeError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.KeywordPlanIdeaService.GenerateKeywordForecastMetrics
   */
  generateKeywordForecastMetrics: {
    methodKind: "unary";
    input: typeof GenerateKeywordForecastMetricsRequestSchema;
    output: typeof GenerateKeywordForecastMetricsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_ads_googleads_v16_services_keyword_plan_idea_service, 0);

