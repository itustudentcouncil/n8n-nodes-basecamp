// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/ads/googleads/v16/services/conversion_upload_service.proto (package google.ads.googleads.v16.services, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Consent } from "../common/consent_pb";
import { file_google_ads_googleads_v16_common_consent } from "../common/consent_pb";
import type { UserIdentifier } from "../common/offline_user_data_pb";
import { file_google_ads_googleads_v16_common_offline_user_data } from "../common/offline_user_data_pb";
import type { ConversionEnvironmentEnum_ConversionEnvironment } from "../enums/conversion_environment_enum_pb";
import { file_google_ads_googleads_v16_enums_conversion_environment_enum } from "../enums/conversion_environment_enum_pb";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Status } from "../../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../../rpc/status_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/ads/googleads/v16/services/conversion_upload_service.proto.
 */
export const file_google_ads_googleads_v16_services_conversion_upload_service: GenFile = /*@__PURE__*/
  fileDesc("CkFnb29nbGUvYWRzL2dvb2dsZWFkcy92MTYvc2VydmljZXMvY29udmVyc2lvbl91cGxvYWRfc2VydmljZS5wcm90bxIhZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzIvgBCh1VcGxvYWRDbGlja0NvbnZlcnNpb25zUmVxdWVzdBIYCgtjdXN0b21lcl9pZBgBIAEoCUID4EECEkwKC2NvbnZlcnNpb25zGAIgAygLMjIuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLkNsaWNrQ29udmVyc2lvbkID4EECEhwKD3BhcnRpYWxfZmFpbHVyZRgDIAEoCEID4EECEhUKDXZhbGlkYXRlX29ubHkYBCABKAgSFQoNZGVidWdfZW5hYmxlZBgFIAEoCBIYCgZqb2JfaWQYBiABKAVCA+BBAUgAiAEBQgkKB19qb2JfaWQirgEKHlVwbG9hZENsaWNrQ29udmVyc2lvbnNSZXNwb25zZRIxChVwYXJ0aWFsX2ZhaWx1cmVfZXJyb3IYASABKAsyEi5nb29nbGUucnBjLlN0YXR1cxJJCgdyZXN1bHRzGAIgAygLMjguZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLkNsaWNrQ29udmVyc2lvblJlc3VsdBIOCgZqb2JfaWQYAyABKAMiugEKHFVwbG9hZENhbGxDb252ZXJzaW9uc1JlcXVlc3QSGAoLY3VzdG9tZXJfaWQYASABKAlCA+BBAhJLCgtjb252ZXJzaW9ucxgCIAMoCzIxLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNi5zZXJ2aWNlcy5DYWxsQ29udmVyc2lvbkID4EECEhwKD3BhcnRpYWxfZmFpbHVyZRgDIAEoCEID4EECEhUKDXZhbGlkYXRlX29ubHkYBCABKAginAEKHVVwbG9hZENhbGxDb252ZXJzaW9uc1Jlc3BvbnNlEjEKFXBhcnRpYWxfZmFpbHVyZV9lcnJvchgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzEkgKB3Jlc3VsdHMYAiADKAsyNy5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuc2VydmljZXMuQ2FsbENvbnZlcnNpb25SZXN1bHQiqgYKD0NsaWNrQ29udmVyc2lvbhISCgVnY2xpZBgJIAEoCUgAiAEBEg4KBmdicmFpZBgSIAEoCRIOCgZ3YnJhaWQYEyABKAkSHgoRY29udmVyc2lvbl9hY3Rpb24YCiABKAlIAYgBARIhChRjb252ZXJzaW9uX2RhdGVfdGltZRgLIAEoCUgCiAEBEh0KEGNvbnZlcnNpb25fdmFsdWUYDCABKAFIA4gBARIaCg1jdXJyZW5jeV9jb2RlGA0gASgJSASIAQESFQoIb3JkZXJfaWQYDiABKAlIBYgBARJdChlleHRlcm5hbF9hdHRyaWJ1dGlvbl9kYXRhGAcgASgLMjouZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLkV4dGVybmFsQXR0cmlidXRpb25EYXRhEksKEGN1c3RvbV92YXJpYWJsZXMYDyADKAsyMS5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuc2VydmljZXMuQ3VzdG9tVmFyaWFibGUSPgoJY2FydF9kYXRhGBAgASgLMisuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLkNhcnREYXRhEkkKEHVzZXJfaWRlbnRpZmllcnMYESADKAsyLy5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuY29tbW9uLlVzZXJJZGVudGlmaWVyEm8KFmNvbnZlcnNpb25fZW52aXJvbm1lbnQYFCABKA4yTy5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuZW51bXMuQ29udmVyc2lvbkVudmlyb25tZW50RW51bS5Db252ZXJzaW9uRW52aXJvbm1lbnQSOQoHY29uc2VudBgXIAEoCzIoLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNi5jb21tb24uQ29uc2VudEIICgZfZ2NsaWRCFAoSX2NvbnZlcnNpb25fYWN0aW9uQhcKFV9jb252ZXJzaW9uX2RhdGVfdGltZUITChFfY29udmVyc2lvbl92YWx1ZUIQCg5fY3VycmVuY3lfY29kZUILCglfb3JkZXJfaWQizgMKDkNhbGxDb252ZXJzaW9uEhYKCWNhbGxlcl9pZBgHIAEoCUgAiAEBEiEKFGNhbGxfc3RhcnRfZGF0ZV90aW1lGAggASgJSAGIAQESHgoRY29udmVyc2lvbl9hY3Rpb24YCSABKAlIAogBARIhChRjb252ZXJzaW9uX2RhdGVfdGltZRgKIAEoCUgDiAEBEh0KEGNvbnZlcnNpb25fdmFsdWUYCyABKAFIBIgBARIaCg1jdXJyZW5jeV9jb2RlGAwgASgJSAWIAQESSwoQY3VzdG9tX3ZhcmlhYmxlcxgNIAMoCzIxLmdvb2dsZS5hZHMuZ29vZ2xlYWRzLnYxNi5zZXJ2aWNlcy5DdXN0b21WYXJpYWJsZRI5Cgdjb25zZW50GA4gASgLMiguZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LmNvbW1vbi5Db25zZW50QgwKCl9jYWxsZXJfaWRCFwoVX2NhbGxfc3RhcnRfZGF0ZV90aW1lQhQKEl9jb252ZXJzaW9uX2FjdGlvbkIXChVfY29udmVyc2lvbl9kYXRlX3RpbWVCEwoRX2NvbnZlcnNpb25fdmFsdWVCEAoOX2N1cnJlbmN5X2NvZGUiqwEKF0V4dGVybmFsQXR0cmlidXRpb25EYXRhEigKG2V4dGVybmFsX2F0dHJpYnV0aW9uX2NyZWRpdBgDIAEoAUgAiAEBEicKGmV4dGVybmFsX2F0dHJpYnV0aW9uX21vZGVsGAQgASgJSAGIAQFCHgocX2V4dGVybmFsX2F0dHJpYnV0aW9uX2NyZWRpdEIdChtfZXh0ZXJuYWxfYXR0cmlidXRpb25fbW9kZWwikgIKFUNsaWNrQ29udmVyc2lvblJlc3VsdBISCgVnY2xpZBgEIAEoCUgAiAEBEg4KBmdicmFpZBgIIAEoCRIOCgZ3YnJhaWQYCSABKAkSHgoRY29udmVyc2lvbl9hY3Rpb24YBSABKAlIAYgBARIhChRjb252ZXJzaW9uX2RhdGVfdGltZRgGIAEoCUgCiAEBEkkKEHVzZXJfaWRlbnRpZmllcnMYByADKAsyLy5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuY29tbW9uLlVzZXJJZGVudGlmaWVyQggKBl9nY2xpZEIUChJfY29udmVyc2lvbl9hY3Rpb25CFwoVX2NvbnZlcnNpb25fZGF0ZV90aW1lIuoBChRDYWxsQ29udmVyc2lvblJlc3VsdBIWCgljYWxsZXJfaWQYBSABKAlIAIgBARIhChRjYWxsX3N0YXJ0X2RhdGVfdGltZRgGIAEoCUgBiAEBEh4KEWNvbnZlcnNpb25fYWN0aW9uGAcgASgJSAKIAQESIQoUY29udmVyc2lvbl9kYXRlX3RpbWUYCCABKAlIA4gBAUIMCgpfY2FsbGVyX2lkQhcKFV9jYWxsX3N0YXJ0X2RhdGVfdGltZUIUChJfY29udmVyc2lvbl9hY3Rpb25CFwoVX2NvbnZlcnNpb25fZGF0ZV90aW1lInsKDkN1c3RvbVZhcmlhYmxlEloKGmNvbnZlcnNpb25fY3VzdG9tX3ZhcmlhYmxlGAEgASgJQjb6QTMKMWdvb2dsZWFkcy5nb29nbGVhcGlzLmNvbS9Db252ZXJzaW9uQ3VzdG9tVmFyaWFibGUSDQoFdmFsdWUYAiABKAki+QEKCENhcnREYXRhEhMKC21lcmNoYW50X2lkGAYgASgDEhkKEWZlZWRfY291bnRyeV9jb2RlGAIgASgJEhoKEmZlZWRfbGFuZ3VhZ2VfY29kZRgDIAEoCRIeChZsb2NhbF90cmFuc2FjdGlvbl9jb3N0GAQgASgBEj8KBWl0ZW1zGAUgAygLMjAuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLkNhcnREYXRhLkl0ZW0aQAoESXRlbRISCgpwcm9kdWN0X2lkGAEgASgJEhAKCHF1YW50aXR5GAIgASgFEhIKCnVuaXRfcHJpY2UYAyABKAEy9AQKF0NvbnZlcnNpb25VcGxvYWRTZXJ2aWNlEokCChZVcGxvYWRDbGlja0NvbnZlcnNpb25zEkAuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLlVwbG9hZENsaWNrQ29udmVyc2lvbnNSZXF1ZXN0GkEuZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLlVwbG9hZENsaWNrQ29udmVyc2lvbnNSZXNwb25zZSJq2kEnY3VzdG9tZXJfaWQsY29udmVyc2lvbnMscGFydGlhbF9mYWlsdXJlgtPkkwI6OgEqIjUvdjE2L2N1c3RvbWVycy97Y3VzdG9tZXJfaWQ9Kn06dXBsb2FkQ2xpY2tDb252ZXJzaW9ucxKFAgoVVXBsb2FkQ2FsbENvbnZlcnNpb25zEj8uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzLlVwbG9hZENhbGxDb252ZXJzaW9uc1JlcXVlc3QaQC5nb29nbGUuYWRzLmdvb2dsZWFkcy52MTYuc2VydmljZXMuVXBsb2FkQ2FsbENvbnZlcnNpb25zUmVzcG9uc2UiadpBJ2N1c3RvbWVyX2lkLGNvbnZlcnNpb25zLHBhcnRpYWxfZmFpbHVyZYLT5JMCOToBKiI0L3YxNi9jdXN0b21lcnMve2N1c3RvbWVyX2lkPSp9OnVwbG9hZENhbGxDb252ZXJzaW9ucxpFykEYZ29vZ2xlYWRzLmdvb2dsZWFwaXMuY29t0kEnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9hZHdvcmRzQogCCiVjb20uZ29vZ2xlLmFkcy5nb29nbGVhZHMudjE2LnNlcnZpY2VzQhxDb252ZXJzaW9uVXBsb2FkU2VydmljZVByb3RvUAFaSWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYWRzL2dvb2dsZWFkcy92MTYvc2VydmljZXM7c2VydmljZXOiAgNHQUGqAiFHb29nbGUuQWRzLkdvb2dsZUFkcy5WMTYuU2VydmljZXPKAiFHb29nbGVcQWRzXEdvb2dsZUFkc1xWMTZcU2VydmljZXPqAiVHb29nbGU6OkFkczo6R29vZ2xlQWRzOjpWMTY6OlNlcnZpY2VzYgZwcm90bzM", [file_google_ads_googleads_v16_common_consent, file_google_ads_googleads_v16_common_offline_user_data, file_google_ads_googleads_v16_enums_conversion_environment_enum, file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_rpc_status]);

/**
 * Request message for
 * [ConversionUploadService.UploadClickConversions][google.ads.googleads.v16.services.ConversionUploadService.UploadClickConversions].
 *
 * @generated from message google.ads.googleads.v16.services.UploadClickConversionsRequest
 */
export type UploadClickConversionsRequest = Message<"google.ads.googleads.v16.services.UploadClickConversionsRequest"> & {
  /**
   * Required. The ID of the customer performing the upload.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * Required. The conversions that are being uploaded.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.ClickConversion conversions = 2;
   */
  conversions: ClickConversion[];

  /**
   * Required. If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * This should always be set to true.
   * See
   * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
   * for more information about partial failure.
   *
   * @generated from field: bool partial_failure = 3;
   */
  partialFailure: boolean;

  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;

  /**
   * If true, the API will perform all upload checks and return errors if
   * any are found. If false, it will perform only basic input validation,
   * skip subsequent upload checks, and return success even if no click
   * was found for the provided `user_identifiers`.
   *
   * This setting only affects Enhanced conversions for leads uploads that use
   * `user_identifiers` instead of `GCLID`, `GBRAID`, or `WBRAID`. When
   * uploading enhanced conversions for leads, you should upload all conversion
   * events to the API, including those that may not come from Google Ads
   * campaigns. The upload of an event that is not from a Google Ads campaign
   * will result in a `CLICK_NOT_FOUND` error if this field is set to `true`.
   * Since these errors are expected for such events, set this field to `false`
   * so you can confirm your uploads are properly formatted but ignore
   * `CLICK_NOT_FOUND` errors from all of the conversions that are not from a
   * Google Ads campaign. This will allow you to focus only on errors that you
   * can address.
   *
   * Default is false.
   *
   * @generated from field: bool debug_enabled = 5;
   */
  debugEnabled: boolean;

  /**
   * Optional. Optional input to set job ID. Must be a non-negative number that
   * is less than 2^31 if provided. If this field is not provided, the API will
   * generate a job ID in the range [2^31, (2^63)-1]. The API will return the
   * value for this request in the `job_id` field of the
   * `UploadClickConversionsResponse`.
   *
   * @generated from field: optional int32 job_id = 6;
   */
  jobId?: number;
};

/**
 * Describes the message google.ads.googleads.v16.services.UploadClickConversionsRequest.
 * Use `create(UploadClickConversionsRequestSchema)` to create a new message.
 */
export const UploadClickConversionsRequestSchema: GenMessage<UploadClickConversionsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 0);

/**
 * Response message for
 * [ConversionUploadService.UploadClickConversions][google.ads.googleads.v16.services.ConversionUploadService.UploadClickConversions].
 *
 * @generated from message google.ads.googleads.v16.services.UploadClickConversionsResponse
 */
export type UploadClickConversionsResponse = Message<"google.ads.googleads.v16.services.UploadClickConversionsResponse"> & {
  /**
   * Errors that pertain to conversion failures in the partial failure mode.
   * Returned when all errors occur inside the conversions. If any errors occur
   * outside the conversions (for example, auth errors), we return an RPC level
   * error. See
   * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
   * for more information about partial failure.
   *
   * @generated from field: google.rpc.Status partial_failure_error = 1;
   */
  partialFailureError?: Status;

  /**
   * Returned for successfully processed conversions. Proto will be empty for
   * rows that received an error. Results are not returned when validate_only is
   * true.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.ClickConversionResult results = 2;
   */
  results: ClickConversionResult[];

  /**
   * Job ID for the upload batch.
   *
   * @generated from field: int64 job_id = 3;
   */
  jobId: bigint;
};

/**
 * Describes the message google.ads.googleads.v16.services.UploadClickConversionsResponse.
 * Use `create(UploadClickConversionsResponseSchema)` to create a new message.
 */
export const UploadClickConversionsResponseSchema: GenMessage<UploadClickConversionsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 1);

/**
 * Request message for
 * [ConversionUploadService.UploadCallConversions][google.ads.googleads.v16.services.ConversionUploadService.UploadCallConversions].
 *
 * @generated from message google.ads.googleads.v16.services.UploadCallConversionsRequest
 */
export type UploadCallConversionsRequest = Message<"google.ads.googleads.v16.services.UploadCallConversionsRequest"> & {
  /**
   * Required. The ID of the customer performing the upload.
   *
   * @generated from field: string customer_id = 1;
   */
  customerId: string;

  /**
   * Required. The conversions that are being uploaded.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CallConversion conversions = 2;
   */
  conversions: CallConversion[];

  /**
   * Required. If true, successful operations will be carried out and invalid
   * operations will return errors. If false, all operations will be carried
   * out in one transaction if and only if they are all valid.
   * This should always be set to true.
   * See
   * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
   * for more information about partial failure.
   *
   * @generated from field: bool partial_failure = 3;
   */
  partialFailure: boolean;

  /**
   * If true, the request is validated but not executed. Only errors are
   * returned, not results.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message google.ads.googleads.v16.services.UploadCallConversionsRequest.
 * Use `create(UploadCallConversionsRequestSchema)` to create a new message.
 */
export const UploadCallConversionsRequestSchema: GenMessage<UploadCallConversionsRequest> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 2);

/**
 * Response message for
 * [ConversionUploadService.UploadCallConversions][google.ads.googleads.v16.services.ConversionUploadService.UploadCallConversions].
 *
 * @generated from message google.ads.googleads.v16.services.UploadCallConversionsResponse
 */
export type UploadCallConversionsResponse = Message<"google.ads.googleads.v16.services.UploadCallConversionsResponse"> & {
  /**
   * Errors that pertain to conversion failures in the partial failure mode.
   * Returned when all errors occur inside the conversions. If any errors occur
   * outside the conversions (for example, auth errors), we return an RPC level
   * error. See
   * https://developers.google.com/google-ads/api/docs/best-practices/partial-failures
   * for more information about partial failure.
   *
   * @generated from field: google.rpc.Status partial_failure_error = 1;
   */
  partialFailureError?: Status;

  /**
   * Returned for successfully processed conversions. Proto will be empty for
   * rows that received an error. Results are not returned when validate_only is
   * true.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CallConversionResult results = 2;
   */
  results: CallConversionResult[];
};

/**
 * Describes the message google.ads.googleads.v16.services.UploadCallConversionsResponse.
 * Use `create(UploadCallConversionsResponseSchema)` to create a new message.
 */
export const UploadCallConversionsResponseSchema: GenMessage<UploadCallConversionsResponse> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 3);

/**
 * A click conversion.
 *
 * @generated from message google.ads.googleads.v16.services.ClickConversion
 */
export type ClickConversion = Message<"google.ads.googleads.v16.services.ClickConversion"> & {
  /**
   * The Google click ID (gclid) associated with this conversion.
   *
   * @generated from field: optional string gclid = 9;
   */
  gclid?: string;

  /**
   * The click identifier for clicks associated with app conversions and
   * originating from iOS devices starting with iOS14.
   *
   * @generated from field: string gbraid = 18;
   */
  gbraid: string;

  /**
   * The click identifier for clicks associated with web conversions and
   * originating from iOS devices starting with iOS14.
   *
   * @generated from field: string wbraid = 19;
   */
  wbraid: string;

  /**
   * Resource name of the conversion action associated with this conversion.
   * Note: Although this resource name consists of a customer id and a
   * conversion action id, validation will ignore the customer id and use the
   * conversion action id as the sole identifier of the conversion action.
   *
   * @generated from field: optional string conversion_action = 10;
   */
  conversionAction?: string;

  /**
   * The date time at which the conversion occurred. Must be after
   * the click time. The timezone must be specified. The format is
   * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string conversion_date_time = 11;
   */
  conversionDateTime?: string;

  /**
   * The value of the conversion for the advertiser.
   *
   * @generated from field: optional double conversion_value = 12;
   */
  conversionValue?: number;

  /**
   * Currency associated with the conversion value. This is the ISO 4217
   * 3-character currency code. For example: USD, EUR.
   *
   * @generated from field: optional string currency_code = 13;
   */
  currencyCode?: string;

  /**
   * The order ID associated with the conversion. An order id can only be used
   * for one conversion per conversion action.
   *
   * @generated from field: optional string order_id = 14;
   */
  orderId?: string;

  /**
   * Additional data about externally attributed conversions. This field
   * is required for conversions with an externally attributed conversion
   * action, but should not be set otherwise.
   *
   * @generated from field: google.ads.googleads.v16.services.ExternalAttributionData external_attribution_data = 7;
   */
  externalAttributionData?: ExternalAttributionData;

  /**
   * The custom variables associated with this conversion.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CustomVariable custom_variables = 15;
   */
  customVariables: CustomVariable[];

  /**
   * The cart data associated with this conversion.
   *
   * @generated from field: google.ads.googleads.v16.services.CartData cart_data = 16;
   */
  cartData?: CartData;

  /**
   * The user identifiers associated with this conversion. Only hashed_email and
   * hashed_phone_number are supported for conversion uploads. The maximum
   * number of user identifiers for each conversion is 5.
   *
   * @generated from field: repeated google.ads.googleads.v16.common.UserIdentifier user_identifiers = 17;
   */
  userIdentifiers: UserIdentifier[];

  /**
   * The environment this conversion was recorded on, for example, App or Web.
   *
   * @generated from field: google.ads.googleads.v16.enums.ConversionEnvironmentEnum.ConversionEnvironment conversion_environment = 20;
   */
  conversionEnvironment: ConversionEnvironmentEnum_ConversionEnvironment;

  /**
   * The consent setting for the event.
   *
   * @generated from field: google.ads.googleads.v16.common.Consent consent = 23;
   */
  consent?: Consent;
};

/**
 * Describes the message google.ads.googleads.v16.services.ClickConversion.
 * Use `create(ClickConversionSchema)` to create a new message.
 */
export const ClickConversionSchema: GenMessage<ClickConversion> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 4);

/**
 * A call conversion.
 *
 * @generated from message google.ads.googleads.v16.services.CallConversion
 */
export type CallConversion = Message<"google.ads.googleads.v16.services.CallConversion"> & {
  /**
   * The caller id from which this call was placed. Caller id is expected to be
   * in E.164 format with preceding '+' sign, for example, "+16502531234".
   *
   * @generated from field: optional string caller_id = 7;
   */
  callerId?: string;

  /**
   * The date time at which the call occurred. The timezone must be specified.
   * The format is "yyyy-mm-dd hh:mm:ss+|-hh:mm",
   * for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string call_start_date_time = 8;
   */
  callStartDateTime?: string;

  /**
   * Resource name of the conversion action associated with this conversion.
   * Note: Although this resource name consists of a customer id and a
   * conversion action id, validation will ignore the customer id and use the
   * conversion action id as the sole identifier of the conversion action.
   *
   * @generated from field: optional string conversion_action = 9;
   */
  conversionAction?: string;

  /**
   * The date time at which the conversion occurred. Must be after the call
   * time. The timezone must be specified. The format is
   * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string conversion_date_time = 10;
   */
  conversionDateTime?: string;

  /**
   * The value of the conversion for the advertiser.
   *
   * @generated from field: optional double conversion_value = 11;
   */
  conversionValue?: number;

  /**
   * Currency associated with the conversion value. This is the ISO 4217
   * 3-character currency code. For example: USD, EUR.
   *
   * @generated from field: optional string currency_code = 12;
   */
  currencyCode?: string;

  /**
   * The custom variables associated with this conversion.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CustomVariable custom_variables = 13;
   */
  customVariables: CustomVariable[];

  /**
   * The consent setting for the event.
   *
   * @generated from field: google.ads.googleads.v16.common.Consent consent = 14;
   */
  consent?: Consent;
};

/**
 * Describes the message google.ads.googleads.v16.services.CallConversion.
 * Use `create(CallConversionSchema)` to create a new message.
 */
export const CallConversionSchema: GenMessage<CallConversion> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 5);

/**
 * Contains additional information about externally attributed conversions.
 *
 * @generated from message google.ads.googleads.v16.services.ExternalAttributionData
 */
export type ExternalAttributionData = Message<"google.ads.googleads.v16.services.ExternalAttributionData"> & {
  /**
   * Represents the fraction of the conversion that is attributed to the
   * Google Ads click.
   *
   * @generated from field: optional double external_attribution_credit = 3;
   */
  externalAttributionCredit?: number;

  /**
   * Specifies the attribution model name.
   *
   * @generated from field: optional string external_attribution_model = 4;
   */
  externalAttributionModel?: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.ExternalAttributionData.
 * Use `create(ExternalAttributionDataSchema)` to create a new message.
 */
export const ExternalAttributionDataSchema: GenMessage<ExternalAttributionData> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 6);

/**
 * Identifying information for a successfully processed ClickConversion.
 *
 * @generated from message google.ads.googleads.v16.services.ClickConversionResult
 */
export type ClickConversionResult = Message<"google.ads.googleads.v16.services.ClickConversionResult"> & {
  /**
   * The Google Click ID (gclid) associated with this conversion.
   *
   * @generated from field: optional string gclid = 4;
   */
  gclid?: string;

  /**
   * The click identifier for clicks associated with app conversions and
   * originating from iOS devices starting with iOS14.
   *
   * @generated from field: string gbraid = 8;
   */
  gbraid: string;

  /**
   * The click identifier for clicks associated with web conversions and
   * originating from iOS devices starting with iOS14.
   *
   * @generated from field: string wbraid = 9;
   */
  wbraid: string;

  /**
   * Resource name of the conversion action associated with this conversion.
   *
   * @generated from field: optional string conversion_action = 5;
   */
  conversionAction?: string;

  /**
   * The date time at which the conversion occurred. The format is
   * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string conversion_date_time = 6;
   */
  conversionDateTime?: string;

  /**
   * The user identifiers associated with this conversion. Only hashed_email and
   * hashed_phone_number are supported for conversion uploads. The maximum
   * number of user identifiers for each conversion is 5.
   *
   * @generated from field: repeated google.ads.googleads.v16.common.UserIdentifier user_identifiers = 7;
   */
  userIdentifiers: UserIdentifier[];
};

/**
 * Describes the message google.ads.googleads.v16.services.ClickConversionResult.
 * Use `create(ClickConversionResultSchema)` to create a new message.
 */
export const ClickConversionResultSchema: GenMessage<ClickConversionResult> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 7);

/**
 * Identifying information for a successfully processed CallConversionUpload.
 *
 * @generated from message google.ads.googleads.v16.services.CallConversionResult
 */
export type CallConversionResult = Message<"google.ads.googleads.v16.services.CallConversionResult"> & {
  /**
   * The caller id from which this call was placed. Caller id is expected to be
   * in E.164 format with preceding '+' sign.
   *
   * @generated from field: optional string caller_id = 5;
   */
  callerId?: string;

  /**
   * The date time at which the call occurred. The format is
   * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string call_start_date_time = 6;
   */
  callStartDateTime?: string;

  /**
   * Resource name of the conversion action associated with this conversion.
   *
   * @generated from field: optional string conversion_action = 7;
   */
  conversionAction?: string;

  /**
   * The date time at which the conversion occurred. The format is
   * "yyyy-mm-dd hh:mm:ss+|-hh:mm", for example, "2019-01-01 12:32:45-08:00".
   *
   * @generated from field: optional string conversion_date_time = 8;
   */
  conversionDateTime?: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.CallConversionResult.
 * Use `create(CallConversionResultSchema)` to create a new message.
 */
export const CallConversionResultSchema: GenMessage<CallConversionResult> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 8);

/**
 * A custom variable.
 *
 * @generated from message google.ads.googleads.v16.services.CustomVariable
 */
export type CustomVariable = Message<"google.ads.googleads.v16.services.CustomVariable"> & {
  /**
   * Resource name of the custom variable associated with this conversion.
   * Note: Although this resource name consists of a customer id and a
   * conversion custom variable id, validation will ignore the customer id and
   * use the conversion custom variable id as the sole identifier of the
   * conversion custom variable.
   *
   * @generated from field: string conversion_custom_variable = 1;
   */
  conversionCustomVariable: string;

  /**
   * The value string of this custom variable.
   * The value of the custom variable should not contain private customer data,
   * such as email addresses or phone numbers.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.ads.googleads.v16.services.CustomVariable.
 * Use `create(CustomVariableSchema)` to create a new message.
 */
export const CustomVariableSchema: GenMessage<CustomVariable> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 9);

/**
 * Contains additional information about cart data.
 *
 * @generated from message google.ads.googleads.v16.services.CartData
 */
export type CartData = Message<"google.ads.googleads.v16.services.CartData"> & {
  /**
   * The Merchant Center ID where the items are uploaded.
   *
   * @generated from field: int64 merchant_id = 6;
   */
  merchantId: bigint;

  /**
   * The country code associated with the feed where the items are uploaded.
   *
   * @generated from field: string feed_country_code = 2;
   */
  feedCountryCode: string;

  /**
   * The language code associated with the feed where the items are uploaded.
   *
   * @generated from field: string feed_language_code = 3;
   */
  feedLanguageCode: string;

  /**
   * Sum of all transaction level discounts, such as free shipping and
   * coupon discounts for the whole cart. The currency code is the same
   * as that in the ClickConversion message.
   *
   * @generated from field: double local_transaction_cost = 4;
   */
  localTransactionCost: number;

  /**
   * Data of the items purchased.
   *
   * @generated from field: repeated google.ads.googleads.v16.services.CartData.Item items = 5;
   */
  items: CartData_Item[];
};

/**
 * Describes the message google.ads.googleads.v16.services.CartData.
 * Use `create(CartDataSchema)` to create a new message.
 */
export const CartDataSchema: GenMessage<CartData> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 10);

/**
 * Contains data of the items purchased.
 *
 * @generated from message google.ads.googleads.v16.services.CartData.Item
 */
export type CartData_Item = Message<"google.ads.googleads.v16.services.CartData.Item"> & {
  /**
   * The shopping id of the item. Must be equal to the Merchant Center product
   * identifier.
   *
   * @generated from field: string product_id = 1;
   */
  productId: string;

  /**
   * Number of items sold.
   *
   * @generated from field: int32 quantity = 2;
   */
  quantity: number;

  /**
   * Unit price excluding tax, shipping, and any transaction
   * level discounts. The currency code is the same as that in the
   * ClickConversion message.
   *
   * @generated from field: double unit_price = 3;
   */
  unitPrice: number;
};

/**
 * Describes the message google.ads.googleads.v16.services.CartData.Item.
 * Use `create(CartData_ItemSchema)` to create a new message.
 */
export const CartData_ItemSchema: GenMessage<CartData_Item> = /*@__PURE__*/
  messageDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 10, 0);

/**
 * Service to upload conversions.
 *
 * @generated from service google.ads.googleads.v16.services.ConversionUploadService
 */
export const ConversionUploadService: GenService<{
  /**
   * Processes the given click conversions.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [ConversionUploadError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [PartialFailureError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.ConversionUploadService.UploadClickConversions
   */
  uploadClickConversions: {
    methodKind: "unary";
    input: typeof UploadClickConversionsRequestSchema;
    output: typeof UploadClickConversionsResponseSchema;
  },
  /**
   * Processes the given call conversions.
   *
   * List of thrown errors:
   *   [AuthenticationError]()
   *   [AuthorizationError]()
   *   [HeaderError]()
   *   [InternalError]()
   *   [PartialFailureError]()
   *   [QuotaError]()
   *   [RequestError]()
   *
   * @generated from rpc google.ads.googleads.v16.services.ConversionUploadService.UploadCallConversions
   */
  uploadCallConversions: {
    methodKind: "unary";
    input: typeof UploadCallConversionsRequestSchema;
    output: typeof UploadCallConversionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_ads_googleads_v16_services_conversion_upload_service, 0);

