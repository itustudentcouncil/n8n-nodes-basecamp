// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/privacy/dlp/v2/dlp.proto (package google.privacy.dlp.v2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { BigQueryField, BigQueryTable, CloudStorageFileSet, CloudStoragePath, CustomInfoType, CustomInfoType_DetectionRule_HotwordRule, CustomInfoType_DetectionRule_Proximity, CustomInfoType_Dictionary, CustomInfoType_Dictionary_WordList, CustomInfoType_Regex, EntityId, FieldId, FileType, InfoType, Likelihood, RecordKey, SensitivityScore, StorageConfig, TableOptions, TableReference } from "./storage_pb";
import { file_google_privacy_dlp_v2_storage } from "./storage_pb";
import type { Duration, Empty, EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Date } from "../../../type/date_pb";
import { file_google_type_date } from "../../../type/date_pb";
import type { DayOfWeek } from "../../../type/dayofweek_pb";
import { file_google_type_dayofweek } from "../../../type/dayofweek_pb";
import type { TimeOfDay } from "../../../type/timeofday_pb";
import { file_google_type_timeofday } from "../../../type/timeofday_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/privacy/dlp/v2/dlp.proto.
 */
export const file_google_privacy_dlp_v2_dlp: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_privacy_dlp_v2_storage, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_rpc_status, file_google_type_date, file_google_type_dayofweek, file_google_type_timeofday]);

/**
 * List of excluded infoTypes.
 *
 * @generated from message google.privacy.dlp.v2.ExcludeInfoTypes
 */
export type ExcludeInfoTypes = Message<"google.privacy.dlp.v2.ExcludeInfoTypes"> & {
  /**
   * InfoType list in ExclusionRule rule drops a finding when it overlaps or
   * contained within with a finding of an infoType from this list. For
   * example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and
   * `exclusion_rule` containing `exclude_info_types.info_types` with
   * "EMAIL_ADDRESS" the phone number findings are dropped if they overlap
   * with EMAIL_ADDRESS finding.
   * That leads to "555-222-2222@example.org" to generate only a single
   * finding, namely email address.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoType info_types = 1;
   */
  infoTypes: InfoType[];
};

/**
 * Describes the message google.privacy.dlp.v2.ExcludeInfoTypes.
 * Use `create(ExcludeInfoTypesSchema)` to create a new message.
 */
export const ExcludeInfoTypesSchema: GenMessage<ExcludeInfoTypes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 0);

/**
 * The rule to exclude findings based on a hotword. For record inspection of
 * tables, column names are considered hotwords. An example of this is to
 * exclude a finding if it belongs to a BigQuery column that matches a specific
 * pattern.
 *
 * @generated from message google.privacy.dlp.v2.ExcludeByHotword
 */
export type ExcludeByHotword = Message<"google.privacy.dlp.v2.ExcludeByHotword"> & {
  /**
   * Regular expression pattern defining what qualifies as a hotword.
   *
   * @generated from field: google.privacy.dlp.v2.CustomInfoType.Regex hotword_regex = 1;
   */
  hotwordRegex?: CustomInfoType_Regex;

  /**
   * Range of characters within which the entire hotword must reside.
   * The total length of the window cannot exceed 1000 characters.
   * The windowBefore property in proximity should be set to 1 if the hotword
   * needs to be included in a column header.
   *
   * @generated from field: google.privacy.dlp.v2.CustomInfoType.DetectionRule.Proximity proximity = 2;
   */
  proximity?: CustomInfoType_DetectionRule_Proximity;
};

/**
 * Describes the message google.privacy.dlp.v2.ExcludeByHotword.
 * Use `create(ExcludeByHotwordSchema)` to create a new message.
 */
export const ExcludeByHotwordSchema: GenMessage<ExcludeByHotword> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 1);

/**
 * The rule that specifies conditions when findings of infoTypes specified in
 * `InspectionRuleSet` are removed from results.
 *
 * @generated from message google.privacy.dlp.v2.ExclusionRule
 */
export type ExclusionRule = Message<"google.privacy.dlp.v2.ExclusionRule"> & {
  /**
   * Exclusion rule types.
   *
   * @generated from oneof google.privacy.dlp.v2.ExclusionRule.type
   */
  type: {
    /**
     * Dictionary which defines the rule.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 1;
     */
    value: CustomInfoType_Dictionary;
    case: "dictionary";
  } | {
    /**
     * Regular expression which defines the rule.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.Regex regex = 2;
     */
    value: CustomInfoType_Regex;
    case: "regex";
  } | {
    /**
     * Set of infoTypes for which findings would affect this rule.
     *
     * @generated from field: google.privacy.dlp.v2.ExcludeInfoTypes exclude_info_types = 3;
     */
    value: ExcludeInfoTypes;
    case: "excludeInfoTypes";
  } | {
    /**
     * Drop if the hotword rule is contained in the proximate context. For
     * tabular data, the context includes the column name.
     *
     * @generated from field: google.privacy.dlp.v2.ExcludeByHotword exclude_by_hotword = 5;
     */
    value: ExcludeByHotword;
    case: "excludeByHotword";
  } | { case: undefined; value?: undefined };

  /**
   * How the rule is applied, see MatchingType documentation for details.
   *
   * @generated from field: google.privacy.dlp.v2.MatchingType matching_type = 4;
   */
  matchingType: MatchingType;
};

/**
 * Describes the message google.privacy.dlp.v2.ExclusionRule.
 * Use `create(ExclusionRuleSchema)` to create a new message.
 */
export const ExclusionRuleSchema: GenMessage<ExclusionRule> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 2);

/**
 * A single inspection rule to be applied to infoTypes, specified in
 * `InspectionRuleSet`.
 *
 * @generated from message google.privacy.dlp.v2.InspectionRule
 */
export type InspectionRule = Message<"google.privacy.dlp.v2.InspectionRule"> & {
  /**
   * Inspection rule types.
   *
   * @generated from oneof google.privacy.dlp.v2.InspectionRule.type
   */
  type: {
    /**
     * Hotword-based detection rule.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.DetectionRule.HotwordRule hotword_rule = 1;
     */
    value: CustomInfoType_DetectionRule_HotwordRule;
    case: "hotwordRule";
  } | {
    /**
     * Exclusion rule.
     *
     * @generated from field: google.privacy.dlp.v2.ExclusionRule exclusion_rule = 2;
     */
    value: ExclusionRule;
    case: "exclusionRule";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.InspectionRule.
 * Use `create(InspectionRuleSchema)` to create a new message.
 */
export const InspectionRuleSchema: GenMessage<InspectionRule> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 3);

/**
 * Rule set for modifying a set of infoTypes to alter behavior under certain
 * circumstances, depending on the specific details of the rules within the set.
 *
 * @generated from message google.privacy.dlp.v2.InspectionRuleSet
 */
export type InspectionRuleSet = Message<"google.privacy.dlp.v2.InspectionRuleSet"> & {
  /**
   * List of infoTypes this rule set is applied to.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoType info_types = 1;
   */
  infoTypes: InfoType[];

  /**
   * Set of rules to be applied to infoTypes. The rules are applied in order.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InspectionRule rules = 2;
   */
  rules: InspectionRule[];
};

/**
 * Describes the message google.privacy.dlp.v2.InspectionRuleSet.
 * Use `create(InspectionRuleSetSchema)` to create a new message.
 */
export const InspectionRuleSetSchema: GenMessage<InspectionRuleSet> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 4);

/**
 * Configuration description of the scanning process.
 * When used with redactContent only info_types and min_likelihood are currently
 * used.
 *
 * @generated from message google.privacy.dlp.v2.InspectConfig
 */
export type InspectConfig = Message<"google.privacy.dlp.v2.InspectConfig"> & {
  /**
   * Restricts what info_types to look for. The values must correspond to
   * InfoType values returned by ListInfoTypes or listed at
   * https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference.
   *
   * When no InfoTypes or CustomInfoTypes are specified in a request, the
   * system may automatically choose a default list of detectors to run, which
   * may change over time.
   *
   * If you need precise control and predictability as to what detectors are
   * run you should specify specific InfoTypes listed in the reference,
   * otherwise a default list will be used, which may change over time.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoType info_types = 1;
   */
  infoTypes: InfoType[];

  /**
   * Only returns findings equal to or above this threshold. The default is
   * POSSIBLE.
   *
   * In general, the highest likelihood setting yields the fewest findings in
   * results and the lowest chance of a false positive. For more information,
   * see [Match
   * likelihood](https://cloud.google.com/sensitive-data-protection/docs/likelihood).
   *
   * @generated from field: google.privacy.dlp.v2.Likelihood min_likelihood = 2;
   */
  minLikelihood: Likelihood;

  /**
   * Minimum likelihood per infotype. For each infotype, a user can specify a
   * minimum likelihood. The system only returns a finding if its likelihood is
   * above this threshold. If this field is not set, the system uses the
   * InspectConfig min_likelihood.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InspectConfig.InfoTypeLikelihood min_likelihood_per_info_type = 11;
   */
  minLikelihoodPerInfoType: InspectConfig_InfoTypeLikelihood[];

  /**
   * Configuration to control the number of findings returned.
   * This is not used for data profiling.
   *
   * When redacting sensitive data from images, finding limits don't apply. They
   * can cause unexpected or inconsistent results, where only some data is
   * redacted. Don't include finding limits in
   * [RedactImage][google.privacy.dlp.v2.DlpService.RedactImage]
   * requests. Otherwise, Cloud DLP returns an error.
   *
   * When set within an
   * [InspectJobConfig][google.privacy.dlp.v2.InspectJobConfig], the specified
   * maximum values aren't hard limits. If an inspection job reaches these
   * limits, the job ends gradually, not abruptly. Therefore, the actual number
   * of findings that Cloud DLP returns can be multiple times higher than these
   * maximum values.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig.FindingLimits limits = 3;
   */
  limits?: InspectConfig_FindingLimits;

  /**
   * When true, a contextual quote from the data that triggered a finding is
   * included in the response; see
   * [Finding.quote][google.privacy.dlp.v2.Finding.quote]. This is not used for
   * data profiling.
   *
   * @generated from field: bool include_quote = 4;
   */
  includeQuote: boolean;

  /**
   * When true, excludes type information of the findings.
   * This is not used for data profiling.
   *
   * @generated from field: bool exclude_info_types = 5;
   */
  excludeInfoTypes: boolean;

  /**
   * CustomInfoTypes provided by the user. See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes
   * to learn more.
   *
   * @generated from field: repeated google.privacy.dlp.v2.CustomInfoType custom_info_types = 6;
   */
  customInfoTypes: CustomInfoType[];

  /**
   * Deprecated and unused.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ContentOption content_options = 8;
   */
  contentOptions: ContentOption[];

  /**
   * Set of rules to apply to the findings for this InspectConfig.
   * Exclusion rules, contained in the set are executed in the end, other
   * rules are executed in the order they are specified for each info type.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InspectionRuleSet rule_set = 10;
   */
  ruleSet: InspectionRuleSet[];
};

/**
 * Describes the message google.privacy.dlp.v2.InspectConfig.
 * Use `create(InspectConfigSchema)` to create a new message.
 */
export const InspectConfigSchema: GenMessage<InspectConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 5);

/**
 * Configuration for setting a minimum likelihood per infotype. Used to
 * customize the minimum likelihood level for specific infotypes in the
 * request. For example, use this if you want to lower the precision for
 * PERSON_NAME without lowering the precision for the other infotypes in the
 * request.
 *
 * @generated from message google.privacy.dlp.v2.InspectConfig.InfoTypeLikelihood
 */
export type InspectConfig_InfoTypeLikelihood = Message<"google.privacy.dlp.v2.InspectConfig.InfoTypeLikelihood"> & {
  /**
   * Type of information the likelihood threshold applies to. Only one
   * likelihood per info_type should be provided. If InfoTypeLikelihood does
   * not have an info_type, the configuration fails.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Only returns findings equal to or above this threshold. This field is
   * required or else the configuration fails.
   *
   * @generated from field: google.privacy.dlp.v2.Likelihood min_likelihood = 2;
   */
  minLikelihood: Likelihood;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectConfig.InfoTypeLikelihood.
 * Use `create(InspectConfig_InfoTypeLikelihoodSchema)` to create a new message.
 */
export const InspectConfig_InfoTypeLikelihoodSchema: GenMessage<InspectConfig_InfoTypeLikelihood> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 5, 0);

/**
 * Configuration to control the number of findings returned for inspection.
 * This is not used for de-identification or data profiling.
 *
 * When redacting sensitive data from images, finding limits don't apply. They
 * can cause unexpected or inconsistent results, where only some data is
 * redacted. Don't include finding limits in
 * [RedactImage][google.privacy.dlp.v2.DlpService.RedactImage]
 * requests. Otherwise, Cloud DLP returns an error.
 *
 * @generated from message google.privacy.dlp.v2.InspectConfig.FindingLimits
 */
export type InspectConfig_FindingLimits = Message<"google.privacy.dlp.v2.InspectConfig.FindingLimits"> & {
  /**
   * Max number of findings that are returned for each item scanned.
   *
   * When set within an
   * [InspectContentRequest][google.privacy.dlp.v2.InspectContentRequest],
   * this field is ignored.
   *
   * This value isn't a hard limit. If the number of findings for an item
   * reaches this limit, the inspection of that item ends gradually, not
   * abruptly. Therefore, the actual number of findings that Cloud DLP returns
   * for the item can be multiple times higher than this value.
   *
   * @generated from field: int32 max_findings_per_item = 1;
   */
  maxFindingsPerItem: number;

  /**
   * Max number of findings that are returned per request or job.
   *
   * If you set this field in an
   * [InspectContentRequest][google.privacy.dlp.v2.InspectContentRequest], the
   * resulting maximum value is the value that you set or 3,000, whichever is
   * lower.
   *
   * This value isn't a hard limit. If an inspection reaches this limit, the
   * inspection ends gradually, not abruptly. Therefore, the actual number of
   * findings that Cloud DLP returns can be multiple times higher than this
   * value.
   *
   * @generated from field: int32 max_findings_per_request = 2;
   */
  maxFindingsPerRequest: number;

  /**
   * Configuration of findings limit given for specified infoTypes.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit max_findings_per_info_type = 3;
   */
  maxFindingsPerInfoType: InspectConfig_FindingLimits_InfoTypeLimit[];
};

/**
 * Describes the message google.privacy.dlp.v2.InspectConfig.FindingLimits.
 * Use `create(InspectConfig_FindingLimitsSchema)` to create a new message.
 */
export const InspectConfig_FindingLimitsSchema: GenMessage<InspectConfig_FindingLimits> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 5, 1);

/**
 * Max findings configuration per infoType, per content item or long
 * running DlpJob.
 *
 * @generated from message google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit
 */
export type InspectConfig_FindingLimits_InfoTypeLimit = Message<"google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit"> & {
  /**
   * Type of information the findings limit applies to. Only one limit per
   * info_type should be provided. If InfoTypeLimit does not have an
   * info_type, the DLP API applies the limit against all info_types that
   * are found but not specified in another InfoTypeLimit.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Max findings limit for the given infoType.
   *
   * @generated from field: int32 max_findings = 2;
   */
  maxFindings: number;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectConfig.FindingLimits.InfoTypeLimit.
 * Use `create(InspectConfig_FindingLimits_InfoTypeLimitSchema)` to create a new message.
 */
export const InspectConfig_FindingLimits_InfoTypeLimitSchema: GenMessage<InspectConfig_FindingLimits_InfoTypeLimit> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 5, 1, 0);

/**
 * Container for bytes to inspect or redact.
 *
 * @generated from message google.privacy.dlp.v2.ByteContentItem
 */
export type ByteContentItem = Message<"google.privacy.dlp.v2.ByteContentItem"> & {
  /**
   * The type of data stored in the bytes string. Default will be TEXT_UTF8.
   *
   * @generated from field: google.privacy.dlp.v2.ByteContentItem.BytesType type = 1;
   */
  type: ByteContentItem_BytesType;

  /**
   * Content data to inspect or redact.
   *
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message google.privacy.dlp.v2.ByteContentItem.
 * Use `create(ByteContentItemSchema)` to create a new message.
 */
export const ByteContentItemSchema: GenMessage<ByteContentItem> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 6);

/**
 * The type of data being sent for inspection. To learn more, see
 * [Supported file
 * types](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types).
 *
 * @generated from enum google.privacy.dlp.v2.ByteContentItem.BytesType
 */
export enum ByteContentItem_BytesType {
  /**
   * Unused
   *
   * @generated from enum value: BYTES_TYPE_UNSPECIFIED = 0;
   */
  BYTES_TYPE_UNSPECIFIED = 0,

  /**
   * Any image type.
   *
   * @generated from enum value: IMAGE = 6;
   */
  IMAGE = 6,

  /**
   * jpeg
   *
   * @generated from enum value: IMAGE_JPEG = 1;
   */
  IMAGE_JPEG = 1,

  /**
   * bmp
   *
   * @generated from enum value: IMAGE_BMP = 2;
   */
  IMAGE_BMP = 2,

  /**
   * png
   *
   * @generated from enum value: IMAGE_PNG = 3;
   */
  IMAGE_PNG = 3,

  /**
   * svg
   *
   * @generated from enum value: IMAGE_SVG = 4;
   */
  IMAGE_SVG = 4,

  /**
   * plain text
   *
   * @generated from enum value: TEXT_UTF8 = 5;
   */
  TEXT_UTF8 = 5,

  /**
   * docx, docm, dotx, dotm
   *
   * @generated from enum value: WORD_DOCUMENT = 7;
   */
  WORD_DOCUMENT = 7,

  /**
   * pdf
   *
   * @generated from enum value: PDF = 8;
   */
  PDF = 8,

  /**
   * pptx, pptm, potx, potm, pot
   *
   * @generated from enum value: POWERPOINT_DOCUMENT = 9;
   */
  POWERPOINT_DOCUMENT = 9,

  /**
   * xlsx, xlsm, xltx, xltm
   *
   * @generated from enum value: EXCEL_DOCUMENT = 10;
   */
  EXCEL_DOCUMENT = 10,

  /**
   * avro
   *
   * @generated from enum value: AVRO = 11;
   */
  AVRO = 11,

  /**
   * csv
   *
   * @generated from enum value: CSV = 12;
   */
  CSV = 12,

  /**
   * tsv
   *
   * @generated from enum value: TSV = 13;
   */
  TSV = 13,

  /**
   * Audio file types. Only used for profiling.
   *
   * @generated from enum value: AUDIO = 15;
   */
  AUDIO = 15,

  /**
   * Video file types. Only used for profiling.
   *
   * @generated from enum value: VIDEO = 16;
   */
  VIDEO = 16,

  /**
   * Executable file types. Only used for profiling.
   *
   * @generated from enum value: EXECUTABLE = 17;
   */
  EXECUTABLE = 17,
}

/**
 * Describes the enum google.privacy.dlp.v2.ByteContentItem.BytesType.
 */
export const ByteContentItem_BytesTypeSchema: GenEnum<ByteContentItem_BytesType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 6, 0);

/**
 * Type of content to inspect.
 *
 * @generated from message google.privacy.dlp.v2.ContentItem
 */
export type ContentItem = Message<"google.privacy.dlp.v2.ContentItem"> & {
  /**
   * Data of the item either in the byte array or UTF-8 string form, or table.
   *
   * @generated from oneof google.privacy.dlp.v2.ContentItem.data_item
   */
  dataItem: {
    /**
     * String data to inspect or redact.
     *
     * @generated from field: string value = 3;
     */
    value: string;
    case: "value";
  } | {
    /**
     * Structured content for inspection. See
     * https://cloud.google.com/sensitive-data-protection/docs/inspecting-text#inspecting_a_table
     * to learn more.
     *
     * @generated from field: google.privacy.dlp.v2.Table table = 4;
     */
    value: Table;
    case: "table";
  } | {
    /**
     * Content data to inspect or redact. Replaces `type` and `data`.
     *
     * @generated from field: google.privacy.dlp.v2.ByteContentItem byte_item = 5;
     */
    value: ByteContentItem;
    case: "byteItem";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.ContentItem.
 * Use `create(ContentItemSchema)` to create a new message.
 */
export const ContentItemSchema: GenMessage<ContentItem> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 7);

/**
 * Structured content to inspect. Up to 50,000 `Value`s per request allowed. See
 * https://cloud.google.com/sensitive-data-protection/docs/inspecting-structured-text#inspecting_a_table
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.Table
 */
export type Table = Message<"google.privacy.dlp.v2.Table"> & {
  /**
   * Headers of the table.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldId headers = 1;
   */
  headers: FieldId[];

  /**
   * Rows of the table.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Table.Row rows = 2;
   */
  rows: Table_Row[];
};

/**
 * Describes the message google.privacy.dlp.v2.Table.
 * Use `create(TableSchema)` to create a new message.
 */
export const TableSchema: GenMessage<Table> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 8);

/**
 * Values of the row.
 *
 * @generated from message google.privacy.dlp.v2.Table.Row
 */
export type Table_Row = Message<"google.privacy.dlp.v2.Table.Row"> & {
  /**
   * Individual cells.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value values = 1;
   */
  values: Value[];
};

/**
 * Describes the message google.privacy.dlp.v2.Table.Row.
 * Use `create(Table_RowSchema)` to create a new message.
 */
export const Table_RowSchema: GenMessage<Table_Row> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 8, 0);

/**
 * All the findings for a single scanned item.
 *
 * @generated from message google.privacy.dlp.v2.InspectResult
 */
export type InspectResult = Message<"google.privacy.dlp.v2.InspectResult"> & {
  /**
   * List of findings for an item.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Finding findings = 1;
   */
  findings: Finding[];

  /**
   * If true, then this item might have more findings than were returned,
   * and the findings returned are an arbitrary subset of all findings.
   * The findings list might be truncated because the input items were too
   * large, or because the server reached the maximum amount of resources
   * allowed for a single API call. For best results, divide the input into
   * smaller batches.
   *
   * @generated from field: bool findings_truncated = 2;
   */
  findingsTruncated: boolean;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectResult.
 * Use `create(InspectResultSchema)` to create a new message.
 */
export const InspectResultSchema: GenMessage<InspectResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 9);

/**
 * Represents a piece of potentially sensitive content.
 *
 * @generated from message google.privacy.dlp.v2.Finding
 */
export type Finding = Message<"google.privacy.dlp.v2.Finding"> & {
  /**
   * Resource name in format
   * projects/{project}/locations/{location}/findings/{finding} Populated only
   * when viewing persisted findings.
   *
   * @generated from field: string name = 14;
   */
  name: string;

  /**
   * The content that was found. Even if the content is not textual, it
   * may be converted to a textual representation here.
   * Provided if `include_quote` is true and the finding is
   * less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes
   * in length, the quote may be omitted.
   *
   * @generated from field: string quote = 1;
   */
  quote: string;

  /**
   * The type of content that might have been found.
   * Provided if `excluded_types` is false.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 2;
   */
  infoType?: InfoType;

  /**
   * Confidence of how likely it is that the `info_type` is correct.
   *
   * @generated from field: google.privacy.dlp.v2.Likelihood likelihood = 3;
   */
  likelihood: Likelihood;

  /**
   * Where the content was found.
   *
   * @generated from field: google.privacy.dlp.v2.Location location = 4;
   */
  location?: Location;

  /**
   * Timestamp when finding was detected.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Contains data parsed from quotes. Only populated if include_quote was set
   * to true and a supported infoType was requested. Currently supported
   * infoTypes: DATE, DATE_OF_BIRTH and TIME.
   *
   * @generated from field: google.privacy.dlp.v2.QuoteInfo quote_info = 7;
   */
  quoteInfo?: QuoteInfo;

  /**
   * The job that stored the finding.
   *
   * @generated from field: string resource_name = 8;
   */
  resourceName: string;

  /**
   * Job trigger name, if applicable, for this finding.
   *
   * @generated from field: string trigger_name = 9;
   */
  triggerName: string;

  /**
   * The labels associated with this `Finding`.
   *
   * Label keys must be between 1 and 63 characters long and must conform
   * to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
   *
   * Label values must be between 0 and 63 characters long and must conform
   * to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
   *
   * No more than 10 labels can be associated with a given finding.
   *
   * Examples:
   *
   * * `"environment" : "production"`
   * * `"pipeline" : "etl"`
   *
   * @generated from field: map<string, string> labels = 10;
   */
  labels: { [key: string]: string };

  /**
   * Time the job started that produced this finding.
   *
   * @generated from field: google.protobuf.Timestamp job_create_time = 11;
   */
  jobCreateTime?: Timestamp;

  /**
   * The job that stored the finding.
   *
   * @generated from field: string job_name = 13;
   */
  jobName: string;

  /**
   * The unique finding id.
   *
   * @generated from field: string finding_id = 15;
   */
  findingId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.Finding.
 * Use `create(FindingSchema)` to create a new message.
 */
export const FindingSchema: GenMessage<Finding> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 10);

/**
 * Specifies the location of the finding.
 *
 * @generated from message google.privacy.dlp.v2.Location
 */
export type Location = Message<"google.privacy.dlp.v2.Location"> & {
  /**
   * Zero-based byte offsets delimiting the finding.
   * These are relative to the finding's containing element.
   * Note that when the content is not textual, this references
   * the UTF-8 encoded textual representation of the content.
   * Omitted if content is an image.
   *
   * @generated from field: google.privacy.dlp.v2.Range byte_range = 1;
   */
  byteRange?: Range;

  /**
   * Unicode character offsets delimiting the finding.
   * These are relative to the finding's containing element.
   * Provided when the content is text.
   *
   * @generated from field: google.privacy.dlp.v2.Range codepoint_range = 2;
   */
  codepointRange?: Range;

  /**
   * List of nested objects pointing to the precise location of the finding
   * within the file or record.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ContentLocation content_locations = 7;
   */
  contentLocations: ContentLocation[];

  /**
   * Information about the container where this finding occurred, if available.
   *
   * @generated from field: google.privacy.dlp.v2.Container container = 8;
   */
  container?: Container;
};

/**
 * Describes the message google.privacy.dlp.v2.Location.
 * Use `create(LocationSchema)` to create a new message.
 */
export const LocationSchema: GenMessage<Location> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 11);

/**
 * Precise location of the finding within a document, record, image, or metadata
 * container.
 *
 * @generated from message google.privacy.dlp.v2.ContentLocation
 */
export type ContentLocation = Message<"google.privacy.dlp.v2.ContentLocation"> & {
  /**
   * Name of the container where the finding is located.
   * The top level name is the source file name or table name. Names of some
   * common storage containers are formatted as follows:
   *
   * * BigQuery tables:  `{project_id}:{dataset_id}.{table_id}`
   * * Cloud Storage files: `gs://{bucket}/{path}`
   * * Datastore namespace: {namespace}
   *
   * Nested names could be absent if the embedded object has no string
   * identifier (for example, an image contained within a document).
   *
   * @generated from field: string container_name = 1;
   */
  containerName: string;

  /**
   * Type of the container within the file with location of the finding.
   *
   * @generated from oneof google.privacy.dlp.v2.ContentLocation.location
   */
  location: {
    /**
     * Location within a row or record of a database table.
     *
     * @generated from field: google.privacy.dlp.v2.RecordLocation record_location = 2;
     */
    value: RecordLocation;
    case: "recordLocation";
  } | {
    /**
     * Location within an image's pixels.
     *
     * @generated from field: google.privacy.dlp.v2.ImageLocation image_location = 3;
     */
    value: ImageLocation;
    case: "imageLocation";
  } | {
    /**
     * Location data for document files.
     *
     * @generated from field: google.privacy.dlp.v2.DocumentLocation document_location = 5;
     */
    value: DocumentLocation;
    case: "documentLocation";
  } | {
    /**
     * Location within the metadata for inspected content.
     *
     * @generated from field: google.privacy.dlp.v2.MetadataLocation metadata_location = 8;
     */
    value: MetadataLocation;
    case: "metadataLocation";
  } | { case: undefined; value?: undefined };

  /**
   * Finding container modification timestamp, if applicable. For Cloud Storage,
   * this field contains the last file modification timestamp. For a BigQuery
   * table, this field contains the last_modified_time property. For Datastore,
   * this field isn't populated.
   *
   * @generated from field: google.protobuf.Timestamp container_timestamp = 6;
   */
  containerTimestamp?: Timestamp;

  /**
   * Finding container version, if available
   * ("generation" for Cloud Storage).
   *
   * @generated from field: string container_version = 7;
   */
  containerVersion: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ContentLocation.
 * Use `create(ContentLocationSchema)` to create a new message.
 */
export const ContentLocationSchema: GenMessage<ContentLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 12);

/**
 * Metadata Location
 *
 * @generated from message google.privacy.dlp.v2.MetadataLocation
 */
export type MetadataLocation = Message<"google.privacy.dlp.v2.MetadataLocation"> & {
  /**
   * Type of metadata containing the finding.
   *
   * @generated from field: google.privacy.dlp.v2.MetadataType type = 1;
   */
  type: MetadataType;

  /**
   * Label of the piece of metadata containing the finding, for example -
   * latitude, author, caption.
   *
   * @generated from oneof google.privacy.dlp.v2.MetadataLocation.label
   */
  label: {
    /**
     * Storage metadata.
     *
     * @generated from field: google.privacy.dlp.v2.StorageMetadataLabel storage_label = 3;
     */
    value: StorageMetadataLabel;
    case: "storageLabel";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.MetadataLocation.
 * Use `create(MetadataLocationSchema)` to create a new message.
 */
export const MetadataLocationSchema: GenMessage<MetadataLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 13);

/**
 * Storage metadata label to indicate which metadata entry contains findings.
 *
 * @generated from message google.privacy.dlp.v2.StorageMetadataLabel
 */
export type StorageMetadataLabel = Message<"google.privacy.dlp.v2.StorageMetadataLabel"> & {
  /**
   * Label name.
   *
   * @generated from field: string key = 1;
   */
  key: string;
};

/**
 * Describes the message google.privacy.dlp.v2.StorageMetadataLabel.
 * Use `create(StorageMetadataLabelSchema)` to create a new message.
 */
export const StorageMetadataLabelSchema: GenMessage<StorageMetadataLabel> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 14);

/**
 * Location of a finding within a document.
 *
 * @generated from message google.privacy.dlp.v2.DocumentLocation
 */
export type DocumentLocation = Message<"google.privacy.dlp.v2.DocumentLocation"> & {
  /**
   * Offset of the line, from the beginning of the file, where the finding
   * is located.
   *
   * @generated from field: int64 file_offset = 1;
   */
  fileOffset: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.DocumentLocation.
 * Use `create(DocumentLocationSchema)` to create a new message.
 */
export const DocumentLocationSchema: GenMessage<DocumentLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 15);

/**
 * Location of a finding within a row or record.
 *
 * @generated from message google.privacy.dlp.v2.RecordLocation
 */
export type RecordLocation = Message<"google.privacy.dlp.v2.RecordLocation"> & {
  /**
   * Key of the finding.
   *
   * @generated from field: google.privacy.dlp.v2.RecordKey record_key = 1;
   */
  recordKey?: RecordKey;

  /**
   * Field id of the field containing the finding.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field_id = 2;
   */
  fieldId?: FieldId;

  /**
   * Location within a `ContentItem.Table`.
   *
   * @generated from field: google.privacy.dlp.v2.TableLocation table_location = 3;
   */
  tableLocation?: TableLocation;
};

/**
 * Describes the message google.privacy.dlp.v2.RecordLocation.
 * Use `create(RecordLocationSchema)` to create a new message.
 */
export const RecordLocationSchema: GenMessage<RecordLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 16);

/**
 * Location of a finding within a table.
 *
 * @generated from message google.privacy.dlp.v2.TableLocation
 */
export type TableLocation = Message<"google.privacy.dlp.v2.TableLocation"> & {
  /**
   * The zero-based index of the row where the finding is located. Only
   * populated for resources that have a natural ordering, not BigQuery. In
   * BigQuery, to identify the row a finding came from, populate
   * BigQueryOptions.identifying_fields with your primary key column names and
   * when you store the findings the value of those columns will be stored
   * inside of Finding.
   *
   * @generated from field: int64 row_index = 1;
   */
  rowIndex: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.TableLocation.
 * Use `create(TableLocationSchema)` to create a new message.
 */
export const TableLocationSchema: GenMessage<TableLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 17);

/**
 * Represents a container that may contain DLP findings.
 * Examples of a container include a file, table, or database record.
 *
 * @generated from message google.privacy.dlp.v2.Container
 */
export type Container = Message<"google.privacy.dlp.v2.Container"> & {
  /**
   * Container type, for example BigQuery or Cloud Storage.
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * Project where the finding was found.
   * Can be different from the project that owns the finding.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * A string representation of the full container name.
   * Examples:
   * - BigQuery: 'Project:DataSetId.TableId'
   * - Cloud Storage: 'gs://Bucket/folders/filename.txt'
   *
   * @generated from field: string full_path = 3;
   */
  fullPath: string;

  /**
   * The root of the container.
   * Examples:
   *
   * - For BigQuery table `project_id:dataset_id.table_id`, the root is
   *  `dataset_id`
   * - For Cloud Storage file `gs://bucket/folder/filename.txt`, the root
   *  is `gs://bucket`
   *
   * @generated from field: string root_path = 4;
   */
  rootPath: string;

  /**
   * The rest of the path after the root.
   * Examples:
   *
   * - For BigQuery table `project_id:dataset_id.table_id`, the relative path is
   *  `table_id`
   * - For Cloud Storage file `gs://bucket/folder/filename.txt`, the relative
   *  path is `folder/filename.txt`
   *
   * @generated from field: string relative_path = 5;
   */
  relativePath: string;

  /**
   * Findings container modification timestamp, if applicable. For Cloud
   * Storage, this field contains the last file modification timestamp. For a
   * BigQuery table, this field contains the last_modified_time property. For
   * Datastore, this field isn't populated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * Findings container version, if available
   * ("generation" for Cloud Storage).
   *
   * @generated from field: string version = 7;
   */
  version: string;
};

/**
 * Describes the message google.privacy.dlp.v2.Container.
 * Use `create(ContainerSchema)` to create a new message.
 */
export const ContainerSchema: GenMessage<Container> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 18);

/**
 * Generic half-open interval [start, end)
 *
 * @generated from message google.privacy.dlp.v2.Range
 */
export type Range = Message<"google.privacy.dlp.v2.Range"> & {
  /**
   * Index of the first character of the range (inclusive).
   *
   * @generated from field: int64 start = 1;
   */
  start: bigint;

  /**
   * Index of the last character of the range (exclusive).
   *
   * @generated from field: int64 end = 2;
   */
  end: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.Range.
 * Use `create(RangeSchema)` to create a new message.
 */
export const RangeSchema: GenMessage<Range> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 19);

/**
 * Location of the finding within an image.
 *
 * @generated from message google.privacy.dlp.v2.ImageLocation
 */
export type ImageLocation = Message<"google.privacy.dlp.v2.ImageLocation"> & {
  /**
   * Bounding boxes locating the pixels within the image containing the finding.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BoundingBox bounding_boxes = 1;
   */
  boundingBoxes: BoundingBox[];
};

/**
 * Describes the message google.privacy.dlp.v2.ImageLocation.
 * Use `create(ImageLocationSchema)` to create a new message.
 */
export const ImageLocationSchema: GenMessage<ImageLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 20);

/**
 * Bounding box encompassing detected text within an image.
 *
 * @generated from message google.privacy.dlp.v2.BoundingBox
 */
export type BoundingBox = Message<"google.privacy.dlp.v2.BoundingBox"> & {
  /**
   * Top coordinate of the bounding box. (0,0) is upper left.
   *
   * @generated from field: int32 top = 1;
   */
  top: number;

  /**
   * Left coordinate of the bounding box. (0,0) is upper left.
   *
   * @generated from field: int32 left = 2;
   */
  left: number;

  /**
   * Width of the bounding box in pixels.
   *
   * @generated from field: int32 width = 3;
   */
  width: number;

  /**
   * Height of the bounding box in pixels.
   *
   * @generated from field: int32 height = 4;
   */
  height: number;
};

/**
 * Describes the message google.privacy.dlp.v2.BoundingBox.
 * Use `create(BoundingBoxSchema)` to create a new message.
 */
export const BoundingBoxSchema: GenMessage<BoundingBox> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 21);

/**
 * Request to search for potentially sensitive info in an image and redact it
 * by covering it with a colored rectangle.
 *
 * @generated from message google.privacy.dlp.v2.RedactImageRequest
 */
export type RedactImageRequest = Message<"google.privacy.dlp.v2.RedactImageRequest"> & {
  /**
   * Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 8;
   */
  locationId: string;

  /**
   * Configuration for the inspector.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 2;
   */
  inspectConfig?: InspectConfig;

  /**
   * The configuration for specifying what content to redact from images.
   *
   * @generated from field: repeated google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig image_redaction_configs = 5;
   */
  imageRedactionConfigs: RedactImageRequest_ImageRedactionConfig[];

  /**
   * Whether the response should include findings along with the redacted
   * image.
   *
   * @generated from field: bool include_findings = 6;
   */
  includeFindings: boolean;

  /**
   * The content must be PNG, JPEG, SVG or BMP.
   *
   * @generated from field: google.privacy.dlp.v2.ByteContentItem byte_item = 7;
   */
  byteItem?: ByteContentItem;
};

/**
 * Describes the message google.privacy.dlp.v2.RedactImageRequest.
 * Use `create(RedactImageRequestSchema)` to create a new message.
 */
export const RedactImageRequestSchema: GenMessage<RedactImageRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 22);

/**
 * Configuration for determining how redaction of images should occur.
 *
 * @generated from message google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig
 */
export type RedactImageRequest_ImageRedactionConfig = Message<"google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig"> & {
  /**
   * Type of information to redact from images.
   *
   * @generated from oneof google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.target
   */
  target: {
    /**
     * Only one per info_type should be provided per request. If not
     * specified, and redact_all_text is false, the DLP API will redact all
     * text that it matches against all info_types that are found, but not
     * specified in another ImageRedactionConfig.
     *
     * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
     */
    value: InfoType;
    case: "infoType";
  } | {
    /**
     * If true, all text found in the image, regardless whether it matches an
     * info_type, is redacted. Only one should be provided.
     *
     * @generated from field: bool redact_all_text = 2;
     */
    value: boolean;
    case: "redactAllText";
  } | { case: undefined; value?: undefined };

  /**
   * The color to use when redacting content from an image. If not specified,
   * the default is black.
   *
   * @generated from field: google.privacy.dlp.v2.Color redaction_color = 3;
   */
  redactionColor?: Color;
};

/**
 * Describes the message google.privacy.dlp.v2.RedactImageRequest.ImageRedactionConfig.
 * Use `create(RedactImageRequest_ImageRedactionConfigSchema)` to create a new message.
 */
export const RedactImageRequest_ImageRedactionConfigSchema: GenMessage<RedactImageRequest_ImageRedactionConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 22, 0);

/**
 * Represents a color in the RGB color space.
 *
 * @generated from message google.privacy.dlp.v2.Color
 */
export type Color = Message<"google.privacy.dlp.v2.Color"> & {
  /**
   * The amount of red in the color as a value in the interval [0, 1].
   *
   * @generated from field: float red = 1;
   */
  red: number;

  /**
   * The amount of green in the color as a value in the interval [0, 1].
   *
   * @generated from field: float green = 2;
   */
  green: number;

  /**
   * The amount of blue in the color as a value in the interval [0, 1].
   *
   * @generated from field: float blue = 3;
   */
  blue: number;
};

/**
 * Describes the message google.privacy.dlp.v2.Color.
 * Use `create(ColorSchema)` to create a new message.
 */
export const ColorSchema: GenMessage<Color> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 23);

/**
 * Results of redacting an image.
 *
 * @generated from message google.privacy.dlp.v2.RedactImageResponse
 */
export type RedactImageResponse = Message<"google.privacy.dlp.v2.RedactImageResponse"> & {
  /**
   * The redacted image. The type will be the same as the original image.
   *
   * @generated from field: bytes redacted_image = 1;
   */
  redactedImage: Uint8Array;

  /**
   * If an image was being inspected and the InspectConfig's include_quote was
   * set to true, then this field will include all text, if any, that was found
   * in the image.
   *
   * @generated from field: string extracted_text = 2;
   */
  extractedText: string;

  /**
   * The findings. Populated when include_findings in the request is true.
   *
   * @generated from field: google.privacy.dlp.v2.InspectResult inspect_result = 3;
   */
  inspectResult?: InspectResult;
};

/**
 * Describes the message google.privacy.dlp.v2.RedactImageResponse.
 * Use `create(RedactImageResponseSchema)` to create a new message.
 */
export const RedactImageResponseSchema: GenMessage<RedactImageResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 24);

/**
 * Request to de-identify a ContentItem.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyContentRequest
 */
export type DeidentifyContentRequest = Message<"google.privacy.dlp.v2.DeidentifyContentRequest"> & {
  /**
   * Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Configuration for the de-identification of the content item.
   * Items specified here will override the template referenced by the
   * deidentify_template_name argument.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 2;
   */
  deidentifyConfig?: DeidentifyConfig;

  /**
   * Configuration for the inspector.
   * Items specified here will override the template referenced by the
   * inspect_template_name argument.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 3;
   */
  inspectConfig?: InspectConfig;

  /**
   * The item to de-identify. Will be treated as text.
   *
   * This value must be of type
   * [Table][google.privacy.dlp.v2.Table] if your
   * [deidentify_config][google.privacy.dlp.v2.DeidentifyContentRequest.deidentify_config]
   * is a
   * [RecordTransformations][google.privacy.dlp.v2.RecordTransformations]
   * object.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 4;
   */
  item?: ContentItem;

  /**
   * Template to use. Any configuration directly specified in
   * inspect_config will override those set in the template. Singular fields
   * that are set in this request will replace their corresponding fields in the
   * template. Repeated fields are appended. Singular sub-messages and groups
   * are recursively merged.
   *
   * @generated from field: string inspect_template_name = 5;
   */
  inspectTemplateName: string;

  /**
   * Template to use. Any configuration directly specified in
   * deidentify_config will override those set in the template. Singular fields
   * that are set in this request will replace their corresponding fields in the
   * template. Repeated fields are appended. Singular sub-messages and groups
   * are recursively merged.
   *
   * @generated from field: string deidentify_template_name = 6;
   */
  deidentifyTemplateName: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 7;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyContentRequest.
 * Use `create(DeidentifyContentRequestSchema)` to create a new message.
 */
export const DeidentifyContentRequestSchema: GenMessage<DeidentifyContentRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 25);

/**
 * Results of de-identifying a ContentItem.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyContentResponse
 */
export type DeidentifyContentResponse = Message<"google.privacy.dlp.v2.DeidentifyContentResponse"> & {
  /**
   * The de-identified item.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 1;
   */
  item?: ContentItem;

  /**
   * An overview of the changes that were made on the `item`.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationOverview overview = 2;
   */
  overview?: TransformationOverview;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyContentResponse.
 * Use `create(DeidentifyContentResponseSchema)` to create a new message.
 */
export const DeidentifyContentResponseSchema: GenMessage<DeidentifyContentResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 26);

/**
 * Request to re-identify an item.
 *
 * @generated from message google.privacy.dlp.v2.ReidentifyContentRequest
 */
export type ReidentifyContentRequest = Message<"google.privacy.dlp.v2.ReidentifyContentRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Configuration for the re-identification of the content item.
   * This field shares the same proto message type that is used for
   * de-identification, however its usage here is for the reversal of the
   * previous de-identification. Re-identification is performed by examining
   * the transformations used to de-identify the items and executing the
   * reverse. This requires that only reversible transformations
   * be provided here. The reversible transformations are:
   *
   *  - `CryptoDeterministicConfig`
   *  - `CryptoReplaceFfxFpeConfig`
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyConfig reidentify_config = 2;
   */
  reidentifyConfig?: DeidentifyConfig;

  /**
   * Configuration for the inspector.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 3;
   */
  inspectConfig?: InspectConfig;

  /**
   * The item to re-identify. Will be treated as text.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 4;
   */
  item?: ContentItem;

  /**
   * Template to use. Any configuration directly specified in
   * `inspect_config` will override those set in the template. Singular fields
   * that are set in this request will replace their corresponding fields in the
   * template. Repeated fields are appended. Singular sub-messages and groups
   * are recursively merged.
   *
   * @generated from field: string inspect_template_name = 5;
   */
  inspectTemplateName: string;

  /**
   * Template to use. References an instance of `DeidentifyTemplate`.
   * Any configuration directly specified in `reidentify_config` or
   * `inspect_config` will override those set in the template. The
   * `DeidentifyTemplate` used must include only reversible transformations.
   * Singular fields that are set in this request will replace their
   * corresponding fields in the template. Repeated fields are appended.
   * Singular sub-messages and groups are recursively merged.
   *
   * @generated from field: string reidentify_template_name = 6;
   */
  reidentifyTemplateName: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 7;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ReidentifyContentRequest.
 * Use `create(ReidentifyContentRequestSchema)` to create a new message.
 */
export const ReidentifyContentRequestSchema: GenMessage<ReidentifyContentRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 27);

/**
 * Results of re-identifying an item.
 *
 * @generated from message google.privacy.dlp.v2.ReidentifyContentResponse
 */
export type ReidentifyContentResponse = Message<"google.privacy.dlp.v2.ReidentifyContentResponse"> & {
  /**
   * The re-identified item.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 1;
   */
  item?: ContentItem;

  /**
   * An overview of the changes that were made to the `item`.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationOverview overview = 2;
   */
  overview?: TransformationOverview;
};

/**
 * Describes the message google.privacy.dlp.v2.ReidentifyContentResponse.
 * Use `create(ReidentifyContentResponseSchema)` to create a new message.
 */
export const ReidentifyContentResponseSchema: GenMessage<ReidentifyContentResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 28);

/**
 * Request to search for potentially sensitive info in a ContentItem.
 *
 * @generated from message google.privacy.dlp.v2.InspectContentRequest
 */
export type InspectContentRequest = Message<"google.privacy.dlp.v2.InspectContentRequest"> & {
  /**
   * Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Configuration for the inspector. What specified here will override
   * the template referenced by the inspect_template_name argument.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 2;
   */
  inspectConfig?: InspectConfig;

  /**
   * The item to inspect.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 3;
   */
  item?: ContentItem;

  /**
   * Template to use. Any configuration directly specified in
   * inspect_config will override those set in the template. Singular fields
   * that are set in this request will replace their corresponding fields in the
   * template. Repeated fields are appended. Singular sub-messages and groups
   * are recursively merged.
   *
   * @generated from field: string inspect_template_name = 4;
   */
  inspectTemplateName: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 5;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectContentRequest.
 * Use `create(InspectContentRequestSchema)` to create a new message.
 */
export const InspectContentRequestSchema: GenMessage<InspectContentRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 29);

/**
 * Results of inspecting an item.
 *
 * @generated from message google.privacy.dlp.v2.InspectContentResponse
 */
export type InspectContentResponse = Message<"google.privacy.dlp.v2.InspectContentResponse"> & {
  /**
   * The findings.
   *
   * @generated from field: google.privacy.dlp.v2.InspectResult result = 1;
   */
  result?: InspectResult;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectContentResponse.
 * Use `create(InspectContentResponseSchema)` to create a new message.
 */
export const InspectContentResponseSchema: GenMessage<InspectContentResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 30);

/**
 * Cloud repository for storing output.
 *
 * @generated from message google.privacy.dlp.v2.OutputStorageConfig
 */
export type OutputStorageConfig = Message<"google.privacy.dlp.v2.OutputStorageConfig"> & {
  /**
   * Output storage types.
   *
   * @generated from oneof google.privacy.dlp.v2.OutputStorageConfig.type
   */
  type: {
    /**
     * Store findings in an existing table or a new table in an existing
     * dataset. If table_id is not set a new one will be generated
     * for you with the following format:
     * dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone will be used
     * for generating the date details.
     *
     * For Inspect, each column in an existing output table must have the same
     * name, type, and mode of a field in the `Finding` object.
     *
     * For Risk, an existing output table should be the output of a previous
     * Risk analysis job run on the same source table, with the same privacy
     * metric and quasi-identifiers. Risk jobs that analyze the same table but
     * compute a different privacy metric, or use different sets of
     * quasi-identifiers, cannot store their results in the same table.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryTable table = 1;
     */
    value: BigQueryTable;
    case: "table";
  } | { case: undefined; value?: undefined };

  /**
   * Schema used for writing the findings for Inspect jobs. This field is only
   * used for Inspect and must be unspecified for Risk jobs. Columns are derived
   * from the `Finding` object. If appending to an existing table, any columns
   * from the predefined schema that are missing will be added. No columns in
   * the existing table will be deleted.
   *
   * If unspecified, then all available columns will be used for a new table or
   * an (existing) table with no schema, and no changes will be made to an
   * existing table that has a schema.
   * Only for use with external storage.
   *
   * @generated from field: google.privacy.dlp.v2.OutputStorageConfig.OutputSchema output_schema = 3;
   */
  outputSchema: OutputStorageConfig_OutputSchema;
};

/**
 * Describes the message google.privacy.dlp.v2.OutputStorageConfig.
 * Use `create(OutputStorageConfigSchema)` to create a new message.
 */
export const OutputStorageConfigSchema: GenMessage<OutputStorageConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 31);

/**
 * Predefined schemas for storing findings.
 * Only for use with external storage.
 *
 * @generated from enum google.privacy.dlp.v2.OutputStorageConfig.OutputSchema
 */
export enum OutputStorageConfig_OutputSchema {
  /**
   * Unused.
   *
   * @generated from enum value: OUTPUT_SCHEMA_UNSPECIFIED = 0;
   */
  OUTPUT_SCHEMA_UNSPECIFIED = 0,

  /**
   * Basic schema including only `info_type`, `quote`, `certainty`, and
   * `timestamp`.
   *
   * @generated from enum value: BASIC_COLUMNS = 1;
   */
  BASIC_COLUMNS = 1,

  /**
   * Schema tailored to findings from scanning Cloud Storage.
   *
   * @generated from enum value: GCS_COLUMNS = 2;
   */
  GCS_COLUMNS = 2,

  /**
   * Schema tailored to findings from scanning Google Datastore.
   *
   * @generated from enum value: DATASTORE_COLUMNS = 3;
   */
  DATASTORE_COLUMNS = 3,

  /**
   * Schema tailored to findings from scanning Google BigQuery.
   *
   * @generated from enum value: BIG_QUERY_COLUMNS = 4;
   */
  BIG_QUERY_COLUMNS = 4,

  /**
   * Schema containing all columns.
   *
   * @generated from enum value: ALL_COLUMNS = 5;
   */
  ALL_COLUMNS = 5,
}

/**
 * Describes the enum google.privacy.dlp.v2.OutputStorageConfig.OutputSchema.
 */
export const OutputStorageConfig_OutputSchemaSchema: GenEnum<OutputStorageConfig_OutputSchema> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 31, 0);

/**
 * Statistics regarding a specific InfoType.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeStats
 */
export type InfoTypeStats = Message<"google.privacy.dlp.v2.InfoTypeStats"> & {
  /**
   * The type of finding this stat is for.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Number of findings for this infoType.
   *
   * @generated from field: int64 count = 2;
   */
  count: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeStats.
 * Use `create(InfoTypeStatsSchema)` to create a new message.
 */
export const InfoTypeStatsSchema: GenMessage<InfoTypeStats> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 32);

/**
 * The results of an inspect DataSource job.
 *
 * @generated from message google.privacy.dlp.v2.InspectDataSourceDetails
 */
export type InspectDataSourceDetails = Message<"google.privacy.dlp.v2.InspectDataSourceDetails"> & {
  /**
   * The configuration used for this job.
   *
   * @generated from field: google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions requested_options = 2;
   */
  requestedOptions?: InspectDataSourceDetails_RequestedOptions;

  /**
   * A summary of the outcome of this inspection job.
   *
   * @generated from field: google.privacy.dlp.v2.InspectDataSourceDetails.Result result = 3;
   */
  result?: InspectDataSourceDetails_Result;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectDataSourceDetails.
 * Use `create(InspectDataSourceDetailsSchema)` to create a new message.
 */
export const InspectDataSourceDetailsSchema: GenMessage<InspectDataSourceDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 33);

/**
 * Snapshot of the inspection configuration.
 *
 * @generated from message google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions
 */
export type InspectDataSourceDetails_RequestedOptions = Message<"google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions"> & {
  /**
   * If run with an InspectTemplate, a snapshot of its state at the time of
   * this run.
   *
   * @generated from field: google.privacy.dlp.v2.InspectTemplate snapshot_inspect_template = 1;
   */
  snapshotInspectTemplate?: InspectTemplate;

  /**
   * Inspect config.
   *
   * @generated from field: google.privacy.dlp.v2.InspectJobConfig job_config = 3;
   */
  jobConfig?: InspectJobConfig;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectDataSourceDetails.RequestedOptions.
 * Use `create(InspectDataSourceDetails_RequestedOptionsSchema)` to create a new message.
 */
export const InspectDataSourceDetails_RequestedOptionsSchema: GenMessage<InspectDataSourceDetails_RequestedOptions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 33, 0);

/**
 * All result fields mentioned below are updated while the job is processing.
 *
 * @generated from message google.privacy.dlp.v2.InspectDataSourceDetails.Result
 */
export type InspectDataSourceDetails_Result = Message<"google.privacy.dlp.v2.InspectDataSourceDetails.Result"> & {
  /**
   * Total size in bytes that were processed.
   *
   * @generated from field: int64 processed_bytes = 1;
   */
  processedBytes: bigint;

  /**
   * Estimate of the number of bytes to process.
   *
   * @generated from field: int64 total_estimated_bytes = 2;
   */
  totalEstimatedBytes: bigint;

  /**
   * Statistics of how many instances of each info type were found during
   * inspect job.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeStats info_type_stats = 3;
   */
  infoTypeStats: InfoTypeStats[];

  /**
   * Number of rows scanned after sampling and time filtering (applicable for
   * row based stores such as BigQuery).
   *
   * @generated from field: int64 num_rows_processed = 5;
   */
  numRowsProcessed: bigint;

  /**
   * Statistics related to the processing of hybrid inspect.
   *
   * @generated from field: google.privacy.dlp.v2.HybridInspectStatistics hybrid_stats = 7;
   */
  hybridStats?: HybridInspectStatistics;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectDataSourceDetails.Result.
 * Use `create(InspectDataSourceDetails_ResultSchema)` to create a new message.
 */
export const InspectDataSourceDetails_ResultSchema: GenMessage<InspectDataSourceDetails_Result> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 33, 1);

/**
 * The schema of data to be saved to the BigQuery table when the
 * `DataProfileAction` is enabled.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileBigQueryRowSchema
 */
export type DataProfileBigQueryRowSchema = Message<"google.privacy.dlp.v2.DataProfileBigQueryRowSchema"> & {
  /**
   * Data profile type.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfileBigQueryRowSchema.data_profile
   */
  dataProfile: {
    /**
     * Table data profile column
     *
     * @generated from field: google.privacy.dlp.v2.TableDataProfile table_profile = 1;
     */
    value: TableDataProfile;
    case: "tableProfile";
  } | {
    /**
     * Column data profile column
     *
     * @generated from field: google.privacy.dlp.v2.ColumnDataProfile column_profile = 2;
     */
    value: ColumnDataProfile;
    case: "columnProfile";
  } | {
    /**
     * File store data profile column.
     *
     * @generated from field: google.privacy.dlp.v2.FileStoreDataProfile file_store_profile = 3;
     */
    value: FileStoreDataProfile;
    case: "fileStoreProfile";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileBigQueryRowSchema.
 * Use `create(DataProfileBigQueryRowSchemaSchema)` to create a new message.
 */
export const DataProfileBigQueryRowSchemaSchema: GenMessage<DataProfileBigQueryRowSchema> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 34);

/**
 * Statistics related to processing hybrid inspect requests.
 *
 * @generated from message google.privacy.dlp.v2.HybridInspectStatistics
 */
export type HybridInspectStatistics = Message<"google.privacy.dlp.v2.HybridInspectStatistics"> & {
  /**
   * The number of hybrid inspection requests processed within this job.
   *
   * @generated from field: int64 processed_count = 1;
   */
  processedCount: bigint;

  /**
   * The number of hybrid inspection requests aborted because the job ran
   * out of quota or was ended before they could be processed.
   *
   * @generated from field: int64 aborted_count = 2;
   */
  abortedCount: bigint;

  /**
   * The number of hybrid requests currently being processed. Only populated
   * when called via method `getDlpJob`.
   * A burst of traffic may cause hybrid inspect requests to be enqueued.
   * Processing will take place as quickly as possible, but resource limitations
   * may impact how long a request is enqueued for.
   *
   * @generated from field: int64 pending_count = 3;
   */
  pendingCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.HybridInspectStatistics.
 * Use `create(HybridInspectStatisticsSchema)` to create a new message.
 */
export const HybridInspectStatisticsSchema: GenMessage<HybridInspectStatistics> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 35);

/**
 * The results of an [Action][google.privacy.dlp.v2.Action].
 *
 * @generated from message google.privacy.dlp.v2.ActionDetails
 */
export type ActionDetails = Message<"google.privacy.dlp.v2.ActionDetails"> & {
  /**
   * Summary of what occurred in the actions.
   *
   * @generated from oneof google.privacy.dlp.v2.ActionDetails.details
   */
  details: {
    /**
     * Outcome of a de-identification action.
     *
     * @generated from field: google.privacy.dlp.v2.DeidentifyDataSourceDetails deidentify_details = 1;
     */
    value: DeidentifyDataSourceDetails;
    case: "deidentifyDetails";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.ActionDetails.
 * Use `create(ActionDetailsSchema)` to create a new message.
 */
export const ActionDetailsSchema: GenMessage<ActionDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 36);

/**
 * Summary of what was modified during a transformation.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyDataSourceStats
 */
export type DeidentifyDataSourceStats = Message<"google.privacy.dlp.v2.DeidentifyDataSourceStats"> & {
  /**
   * Total size in bytes that were transformed in some way.
   *
   * @generated from field: int64 transformed_bytes = 1;
   */
  transformedBytes: bigint;

  /**
   * Number of successfully applied transformations.
   *
   * @generated from field: int64 transformation_count = 2;
   */
  transformationCount: bigint;

  /**
   * Number of errors encountered while trying to apply transformations.
   *
   * @generated from field: int64 transformation_error_count = 3;
   */
  transformationErrorCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyDataSourceStats.
 * Use `create(DeidentifyDataSourceStatsSchema)` to create a new message.
 */
export const DeidentifyDataSourceStatsSchema: GenMessage<DeidentifyDataSourceStats> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 37);

/**
 * The results of a [Deidentify][google.privacy.dlp.v2.Action.Deidentify] action
 * from an inspect job.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyDataSourceDetails
 */
export type DeidentifyDataSourceDetails = Message<"google.privacy.dlp.v2.DeidentifyDataSourceDetails"> & {
  /**
   * De-identification config used for the request.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyDataSourceDetails.RequestedDeidentifyOptions requested_options = 1;
   */
  requestedOptions?: DeidentifyDataSourceDetails_RequestedDeidentifyOptions;

  /**
   * Stats about the de-identification operation.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyDataSourceStats deidentify_stats = 2;
   */
  deidentifyStats?: DeidentifyDataSourceStats;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyDataSourceDetails.
 * Use `create(DeidentifyDataSourceDetailsSchema)` to create a new message.
 */
export const DeidentifyDataSourceDetailsSchema: GenMessage<DeidentifyDataSourceDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 38);

/**
 * De-identification options.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyDataSourceDetails.RequestedDeidentifyOptions
 */
export type DeidentifyDataSourceDetails_RequestedDeidentifyOptions = Message<"google.privacy.dlp.v2.DeidentifyDataSourceDetails.RequestedDeidentifyOptions"> & {
  /**
   * Snapshot of the state of the `DeidentifyTemplate` from the
   * [Deidentify][google.privacy.dlp.v2.Action.Deidentify] action at the time
   * this job was run.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyTemplate snapshot_deidentify_template = 1;
   */
  snapshotDeidentifyTemplate?: DeidentifyTemplate;

  /**
   * Snapshot of the state of the structured `DeidentifyTemplate` from the
   * `Deidentify` action at the time this job was run.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyTemplate snapshot_structured_deidentify_template = 2;
   */
  snapshotStructuredDeidentifyTemplate?: DeidentifyTemplate;

  /**
   * Snapshot of the state of the image transformation `DeidentifyTemplate`
   * from the `Deidentify` action at the time this job was run.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyTemplate snapshot_image_redact_template = 3;
   */
  snapshotImageRedactTemplate?: DeidentifyTemplate;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyDataSourceDetails.RequestedDeidentifyOptions.
 * Use `create(DeidentifyDataSourceDetails_RequestedDeidentifyOptionsSchema)` to create a new message.
 */
export const DeidentifyDataSourceDetails_RequestedDeidentifyOptionsSchema: GenMessage<DeidentifyDataSourceDetails_RequestedDeidentifyOptions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 38, 0);

/**
 * InfoType description.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeDescription
 */
export type InfoTypeDescription = Message<"google.privacy.dlp.v2.InfoTypeDescription"> & {
  /**
   * Internal name of the infoType.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Human readable form of the infoType name.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Which parts of the API supports this InfoType.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeSupportedBy supported_by = 3;
   */
  supportedBy: InfoTypeSupportedBy[];

  /**
   * Description of the infotype. Translated when language is provided in the
   * request.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * A list of available versions for the infotype.
   *
   * @generated from field: repeated google.privacy.dlp.v2.VersionDescription versions = 9;
   */
  versions: VersionDescription[];

  /**
   * The category of the infoType.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeCategory categories = 10;
   */
  categories: InfoTypeCategory[];

  /**
   * The default sensitivity of the infoType.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 11;
   */
  sensitivityScore?: SensitivityScore;
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeDescription.
 * Use `create(InfoTypeDescriptionSchema)` to create a new message.
 */
export const InfoTypeDescriptionSchema: GenMessage<InfoTypeDescription> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 39);

/**
 * Classification of infoTypes to organize them according to geographic
 * location, industry, and data type.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeCategory
 */
export type InfoTypeCategory = Message<"google.privacy.dlp.v2.InfoTypeCategory"> & {
  /**
   * Categories of infotypes.
   *
   * @generated from oneof google.privacy.dlp.v2.InfoTypeCategory.category
   */
  category: {
    /**
     * The region or country that issued the ID or document represented by the
     * infoType.
     *
     * @generated from field: google.privacy.dlp.v2.InfoTypeCategory.LocationCategory location_category = 1;
     */
    value: InfoTypeCategory_LocationCategory;
    case: "locationCategory";
  } | {
    /**
     * The group of relevant businesses where this infoType is commonly used
     *
     * @generated from field: google.privacy.dlp.v2.InfoTypeCategory.IndustryCategory industry_category = 2;
     */
    value: InfoTypeCategory_IndustryCategory;
    case: "industryCategory";
  } | {
    /**
     * The class of identifiers where this infoType belongs
     *
     * @generated from field: google.privacy.dlp.v2.InfoTypeCategory.TypeCategory type_category = 3;
     */
    value: InfoTypeCategory_TypeCategory;
    case: "typeCategory";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeCategory.
 * Use `create(InfoTypeCategorySchema)` to create a new message.
 */
export const InfoTypeCategorySchema: GenMessage<InfoTypeCategory> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 40);

/**
 * Enum of the current locations.
 * We might add more locations in the future.
 *
 * @generated from enum google.privacy.dlp.v2.InfoTypeCategory.LocationCategory
 */
export enum InfoTypeCategory_LocationCategory {
  /**
   * Unused location
   *
   * @generated from enum value: LOCATION_UNSPECIFIED = 0;
   */
  LOCATION_UNSPECIFIED = 0,

  /**
   * The infoType is not issued by or tied to a specific region, but is used
   * almost everywhere.
   *
   * @generated from enum value: GLOBAL = 1;
   */
  GLOBAL = 1,

  /**
   * The infoType is typically used in Argentina.
   *
   * @generated from enum value: ARGENTINA = 2;
   */
  ARGENTINA = 2,

  /**
   * The infoType is typically used in Armenia.
   *
   * @generated from enum value: ARMENIA = 51;
   */
  ARMENIA = 51,

  /**
   * The infoType is typically used in Australia.
   *
   * @generated from enum value: AUSTRALIA = 3;
   */
  AUSTRALIA = 3,

  /**
   * The infoType is typically used in Azerbaijan.
   *
   * @generated from enum value: AZERBAIJAN = 48;
   */
  AZERBAIJAN = 48,

  /**
   * The infoType is typically used in Belarus.
   *
   * @generated from enum value: BELARUS = 50;
   */
  BELARUS = 50,

  /**
   * The infoType is typically used in Belgium.
   *
   * @generated from enum value: BELGIUM = 4;
   */
  BELGIUM = 4,

  /**
   * The infoType is typically used in Brazil.
   *
   * @generated from enum value: BRAZIL = 5;
   */
  BRAZIL = 5,

  /**
   * The infoType is typically used in Canada.
   *
   * @generated from enum value: CANADA = 6;
   */
  CANADA = 6,

  /**
   * The infoType is typically used in Chile.
   *
   * @generated from enum value: CHILE = 7;
   */
  CHILE = 7,

  /**
   * The infoType is typically used in China.
   *
   * @generated from enum value: CHINA = 8;
   */
  CHINA = 8,

  /**
   * The infoType is typically used in Colombia.
   *
   * @generated from enum value: COLOMBIA = 9;
   */
  COLOMBIA = 9,

  /**
   * The infoType is typically used in Croatia.
   *
   * @generated from enum value: CROATIA = 42;
   */
  CROATIA = 42,

  /**
   * The infoType is typically used in Denmark.
   *
   * @generated from enum value: DENMARK = 10;
   */
  DENMARK = 10,

  /**
   * The infoType is typically used in France.
   *
   * @generated from enum value: FRANCE = 11;
   */
  FRANCE = 11,

  /**
   * The infoType is typically used in Finland.
   *
   * @generated from enum value: FINLAND = 12;
   */
  FINLAND = 12,

  /**
   * The infoType is typically used in Germany.
   *
   * @generated from enum value: GERMANY = 13;
   */
  GERMANY = 13,

  /**
   * The infoType is typically used in Hong Kong.
   *
   * @generated from enum value: HONG_KONG = 14;
   */
  HONG_KONG = 14,

  /**
   * The infoType is typically used in India.
   *
   * @generated from enum value: INDIA = 15;
   */
  INDIA = 15,

  /**
   * The infoType is typically used in Indonesia.
   *
   * @generated from enum value: INDONESIA = 16;
   */
  INDONESIA = 16,

  /**
   * The infoType is typically used in Ireland.
   *
   * @generated from enum value: IRELAND = 17;
   */
  IRELAND = 17,

  /**
   * The infoType is typically used in Israel.
   *
   * @generated from enum value: ISRAEL = 18;
   */
  ISRAEL = 18,

  /**
   * The infoType is typically used in Italy.
   *
   * @generated from enum value: ITALY = 19;
   */
  ITALY = 19,

  /**
   * The infoType is typically used in Japan.
   *
   * @generated from enum value: JAPAN = 20;
   */
  JAPAN = 20,

  /**
   * The infoType is typically used in Kazakhstan.
   *
   * @generated from enum value: KAZAKHSTAN = 47;
   */
  KAZAKHSTAN = 47,

  /**
   * The infoType is typically used in Korea.
   *
   * @generated from enum value: KOREA = 21;
   */
  KOREA = 21,

  /**
   * The infoType is typically used in Mexico.
   *
   * @generated from enum value: MEXICO = 22;
   */
  MEXICO = 22,

  /**
   * The infoType is typically used in the Netherlands.
   *
   * @generated from enum value: THE_NETHERLANDS = 23;
   */
  THE_NETHERLANDS = 23,

  /**
   * The infoType is typically used in New Zealand.
   *
   * @generated from enum value: NEW_ZEALAND = 41;
   */
  NEW_ZEALAND = 41,

  /**
   * The infoType is typically used in Norway.
   *
   * @generated from enum value: NORWAY = 24;
   */
  NORWAY = 24,

  /**
   * The infoType is typically used in Paraguay.
   *
   * @generated from enum value: PARAGUAY = 25;
   */
  PARAGUAY = 25,

  /**
   * The infoType is typically used in Peru.
   *
   * @generated from enum value: PERU = 26;
   */
  PERU = 26,

  /**
   * The infoType is typically used in Poland.
   *
   * @generated from enum value: POLAND = 27;
   */
  POLAND = 27,

  /**
   * The infoType is typically used in Portugal.
   *
   * @generated from enum value: PORTUGAL = 28;
   */
  PORTUGAL = 28,

  /**
   * The infoType is typically used in Russia.
   *
   * @generated from enum value: RUSSIA = 44;
   */
  RUSSIA = 44,

  /**
   * The infoType is typically used in Singapore.
   *
   * @generated from enum value: SINGAPORE = 29;
   */
  SINGAPORE = 29,

  /**
   * The infoType is typically used in South Africa.
   *
   * @generated from enum value: SOUTH_AFRICA = 30;
   */
  SOUTH_AFRICA = 30,

  /**
   * The infoType is typically used in Spain.
   *
   * @generated from enum value: SPAIN = 31;
   */
  SPAIN = 31,

  /**
   * The infoType is typically used in Sweden.
   *
   * @generated from enum value: SWEDEN = 32;
   */
  SWEDEN = 32,

  /**
   * The infoType is typically used in Switzerland.
   *
   * @generated from enum value: SWITZERLAND = 43;
   */
  SWITZERLAND = 43,

  /**
   * The infoType is typically used in Taiwan.
   *
   * @generated from enum value: TAIWAN = 33;
   */
  TAIWAN = 33,

  /**
   * The infoType is typically used in Thailand.
   *
   * @generated from enum value: THAILAND = 34;
   */
  THAILAND = 34,

  /**
   * The infoType is typically used in Turkey.
   *
   * @generated from enum value: TURKEY = 35;
   */
  TURKEY = 35,

  /**
   * The infoType is typically used in Ukraine.
   *
   * @generated from enum value: UKRAINE = 45;
   */
  UKRAINE = 45,

  /**
   * The infoType is typically used in the United Kingdom.
   *
   * @generated from enum value: UNITED_KINGDOM = 36;
   */
  UNITED_KINGDOM = 36,

  /**
   * The infoType is typically used in the United States.
   *
   * @generated from enum value: UNITED_STATES = 37;
   */
  UNITED_STATES = 37,

  /**
   * The infoType is typically used in Uruguay.
   *
   * @generated from enum value: URUGUAY = 38;
   */
  URUGUAY = 38,

  /**
   * The infoType is typically used in Uzbekistan.
   *
   * @generated from enum value: UZBEKISTAN = 46;
   */
  UZBEKISTAN = 46,

  /**
   * The infoType is typically used in Venezuela.
   *
   * @generated from enum value: VENEZUELA = 39;
   */
  VENEZUELA = 39,

  /**
   * The infoType is typically used in Google internally.
   *
   * @generated from enum value: INTERNAL = 40;
   */
  INTERNAL = 40,
}

/**
 * Describes the enum google.privacy.dlp.v2.InfoTypeCategory.LocationCategory.
 */
export const InfoTypeCategory_LocationCategorySchema: GenEnum<InfoTypeCategory_LocationCategory> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 40, 0);

/**
 * Enum of the current industries in the category.
 * We might add more industries in the future.
 *
 * @generated from enum google.privacy.dlp.v2.InfoTypeCategory.IndustryCategory
 */
export enum InfoTypeCategory_IndustryCategory {
  /**
   * Unused industry
   *
   * @generated from enum value: INDUSTRY_UNSPECIFIED = 0;
   */
  INDUSTRY_UNSPECIFIED = 0,

  /**
   * The infoType is typically used in the finance industry.
   *
   * @generated from enum value: FINANCE = 1;
   */
  FINANCE = 1,

  /**
   * The infoType is typically used in the health industry.
   *
   * @generated from enum value: HEALTH = 2;
   */
  HEALTH = 2,

  /**
   * The infoType is typically used in the telecommunications industry.
   *
   * @generated from enum value: TELECOMMUNICATIONS = 3;
   */
  TELECOMMUNICATIONS = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.InfoTypeCategory.IndustryCategory.
 */
export const InfoTypeCategory_IndustryCategorySchema: GenEnum<InfoTypeCategory_IndustryCategory> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 40, 1);

/**
 * Enum of the current types in the category.
 * We might add more types in the future.
 *
 * @generated from enum google.privacy.dlp.v2.InfoTypeCategory.TypeCategory
 */
export enum InfoTypeCategory_TypeCategory {
  /**
   * Unused type
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Personally identifiable information, for example, a
   * name or phone number
   *
   * @generated from enum value: PII = 1;
   */
  PII = 1,

  /**
   * Personally identifiable information that is especially sensitive, for
   * example, a passport number.
   *
   * @generated from enum value: SPII = 2;
   */
  SPII = 2,

  /**
   * Attributes that can partially identify someone, especially in
   * combination with other attributes, like age, height, and gender.
   *
   * @generated from enum value: DEMOGRAPHIC = 3;
   */
  DEMOGRAPHIC = 3,

  /**
   * Confidential or secret information, for example, a password.
   *
   * @generated from enum value: CREDENTIAL = 4;
   */
  CREDENTIAL = 4,

  /**
   * An identification document issued by a government.
   *
   * @generated from enum value: GOVERNMENT_ID = 5;
   */
  GOVERNMENT_ID = 5,

  /**
   * A document, for example, a resume or source code.
   *
   * @generated from enum value: DOCUMENT = 6;
   */
  DOCUMENT = 6,

  /**
   * Information that is not sensitive on its own, but provides details about
   * the circumstances surrounding an entity or an event.
   *
   * @generated from enum value: CONTEXTUAL_INFORMATION = 7;
   */
  CONTEXTUAL_INFORMATION = 7,
}

/**
 * Describes the enum google.privacy.dlp.v2.InfoTypeCategory.TypeCategory.
 */
export const InfoTypeCategory_TypeCategorySchema: GenEnum<InfoTypeCategory_TypeCategory> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 40, 2);

/**
 * Details about each available version for an infotype.
 *
 * @generated from message google.privacy.dlp.v2.VersionDescription
 */
export type VersionDescription = Message<"google.privacy.dlp.v2.VersionDescription"> & {
  /**
   * Name of the version
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * Description of the version.
   *
   * @generated from field: string description = 2;
   */
  description: string;
};

/**
 * Describes the message google.privacy.dlp.v2.VersionDescription.
 * Use `create(VersionDescriptionSchema)` to create a new message.
 */
export const VersionDescriptionSchema: GenMessage<VersionDescription> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 41);

/**
 * Request for the list of infoTypes.
 *
 * @generated from message google.privacy.dlp.v2.ListInfoTypesRequest
 */
export type ListInfoTypesRequest = Message<"google.privacy.dlp.v2.ListInfoTypesRequest"> & {
  /**
   * The parent resource name.
   *
   * The format of this value is as follows:
   *
   *     `locations/{location_id}`
   *
   * @generated from field: string parent = 4;
   */
  parent: string;

  /**
   * BCP-47 language code for localized infoType friendly
   * names. If omitted, or if localized strings are not available,
   * en-US strings will be returned.
   *
   * @generated from field: string language_code = 1;
   */
  languageCode: string;

  /**
   * filter to only return infoTypes supported by certain parts of the
   * API. Defaults to supported_by=INSPECT.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 3;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListInfoTypesRequest.
 * Use `create(ListInfoTypesRequestSchema)` to create a new message.
 */
export const ListInfoTypesRequestSchema: GenMessage<ListInfoTypesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 42);

/**
 * Response to the ListInfoTypes request.
 *
 * @generated from message google.privacy.dlp.v2.ListInfoTypesResponse
 */
export type ListInfoTypesResponse = Message<"google.privacy.dlp.v2.ListInfoTypesResponse"> & {
  /**
   * Set of sensitive infoTypes.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeDescription info_types = 1;
   */
  infoTypes: InfoTypeDescription[];
};

/**
 * Describes the message google.privacy.dlp.v2.ListInfoTypesResponse.
 * Use `create(ListInfoTypesResponseSchema)` to create a new message.
 */
export const ListInfoTypesResponseSchema: GenMessage<ListInfoTypesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 43);

/**
 * Configuration for a risk analysis job. See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-risk-analysis
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.RiskAnalysisJobConfig
 */
export type RiskAnalysisJobConfig = Message<"google.privacy.dlp.v2.RiskAnalysisJobConfig"> & {
  /**
   * Privacy metric to compute.
   *
   * @generated from field: google.privacy.dlp.v2.PrivacyMetric privacy_metric = 1;
   */
  privacyMetric?: PrivacyMetric;

  /**
   * Input dataset to compute metrics over.
   *
   * @generated from field: google.privacy.dlp.v2.BigQueryTable source_table = 2;
   */
  sourceTable?: BigQueryTable;

  /**
   * Actions to execute at the completion of the job. Are executed in the order
   * provided.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Action actions = 3;
   */
  actions: Action[];
};

/**
 * Describes the message google.privacy.dlp.v2.RiskAnalysisJobConfig.
 * Use `create(RiskAnalysisJobConfigSchema)` to create a new message.
 */
export const RiskAnalysisJobConfigSchema: GenMessage<RiskAnalysisJobConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 44);

/**
 * A column with a semantic tag attached.
 *
 * @generated from message google.privacy.dlp.v2.QuasiId
 */
export type QuasiId = Message<"google.privacy.dlp.v2.QuasiId"> & {
  /**
   * Required. Identifies the column.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;

  /**
   * Semantic tag that identifies what a column contains, to determine which
   * statistical model to use to estimate the reidentifiability of each
   * value. [required]
   *
   * @generated from oneof google.privacy.dlp.v2.QuasiId.tag
   */
  tag: {
    /**
     * A column can be tagged with a InfoType to use the relevant public
     * dataset as a statistical model of population, if available. We
     * currently support US ZIP codes, region codes, ages and genders.
     * To programmatically obtain the list of supported InfoTypes, use
     * ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
     *
     * @generated from field: google.privacy.dlp.v2.InfoType info_type = 2;
     */
    value: InfoType;
    case: "infoType";
  } | {
    /**
     * A column can be tagged with a custom tag. In this case, the user must
     * indicate an auxiliary table that contains statistical information on
     * the possible values of this column (below).
     *
     * @generated from field: string custom_tag = 3;
     */
    value: string;
    case: "customTag";
  } | {
    /**
     * If no semantic tag is indicated, we infer the statistical model from
     * the distribution of values in the input data
     *
     * @generated from field: google.protobuf.Empty inferred = 4;
     */
    value: Empty;
    case: "inferred";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.QuasiId.
 * Use `create(QuasiIdSchema)` to create a new message.
 */
export const QuasiIdSchema: GenMessage<QuasiId> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 45);

/**
 * An auxiliary table containing statistical information on the relative
 * frequency of different quasi-identifiers values. It has one or several
 * quasi-identifiers columns, and one column that indicates the relative
 * frequency of each quasi-identifier tuple.
 * If a tuple is present in the data but not in the auxiliary table, the
 * corresponding relative frequency is assumed to be zero (and thus, the
 * tuple is highly reidentifiable).
 *
 * @generated from message google.privacy.dlp.v2.StatisticalTable
 */
export type StatisticalTable = Message<"google.privacy.dlp.v2.StatisticalTable"> & {
  /**
   * Required. Auxiliary table location.
   *
   * @generated from field: google.privacy.dlp.v2.BigQueryTable table = 3;
   */
  table?: BigQueryTable;

  /**
   * Required. Quasi-identifier columns.
   *
   * @generated from field: repeated google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField quasi_ids = 1;
   */
  quasiIds: StatisticalTable_QuasiIdentifierField[];

  /**
   * Required. The relative frequency column must contain a floating-point
   * number between 0 and 1 (inclusive). Null values are assumed to be zero.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId relative_frequency = 2;
   */
  relativeFrequency?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.StatisticalTable.
 * Use `create(StatisticalTableSchema)` to create a new message.
 */
export const StatisticalTableSchema: GenMessage<StatisticalTable> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 46);

/**
 * A quasi-identifier column has a custom_tag, used to know which column
 * in the data corresponds to which column in the statistical model.
 *
 * @generated from message google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField
 */
export type StatisticalTable_QuasiIdentifierField = Message<"google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField"> & {
  /**
   * Identifies the column.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;

  /**
   * A column can be tagged with a custom tag. In this case, the user must
   * indicate an auxiliary table that contains statistical information on
   * the possible values of this column (below).
   *
   * @generated from field: string custom_tag = 2;
   */
  customTag: string;
};

/**
 * Describes the message google.privacy.dlp.v2.StatisticalTable.QuasiIdentifierField.
 * Use `create(StatisticalTable_QuasiIdentifierFieldSchema)` to create a new message.
 */
export const StatisticalTable_QuasiIdentifierFieldSchema: GenMessage<StatisticalTable_QuasiIdentifierField> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 46, 0);

/**
 * Privacy metric to compute for reidentification risk analysis.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric
 */
export type PrivacyMetric = Message<"google.privacy.dlp.v2.PrivacyMetric"> & {
  /**
   * Types of analysis.
   *
   * @generated from oneof google.privacy.dlp.v2.PrivacyMetric.type
   */
  type: {
    /**
     * Numerical stats
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig numerical_stats_config = 1;
     */
    value: PrivacyMetric_NumericalStatsConfig;
    case: "numericalStatsConfig";
  } | {
    /**
     * Categorical stats
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig categorical_stats_config = 2;
     */
    value: PrivacyMetric_CategoricalStatsConfig;
    case: "categoricalStatsConfig";
  } | {
    /**
     * K-anonymity
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig k_anonymity_config = 3;
     */
    value: PrivacyMetric_KAnonymityConfig;
    case: "kAnonymityConfig";
  } | {
    /**
     * l-diversity
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig l_diversity_config = 4;
     */
    value: PrivacyMetric_LDiversityConfig;
    case: "lDiversityConfig";
  } | {
    /**
     * k-map
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig k_map_estimation_config = 5;
     */
    value: PrivacyMetric_KMapEstimationConfig;
    case: "kMapEstimationConfig";
  } | {
    /**
     * delta-presence
     *
     * @generated from field: google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig delta_presence_estimation_config = 6;
     */
    value: PrivacyMetric_DeltaPresenceEstimationConfig;
    case: "deltaPresenceEstimationConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.
 * Use `create(PrivacyMetricSchema)` to create a new message.
 */
export const PrivacyMetricSchema: GenMessage<PrivacyMetric> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47);

/**
 * Compute numerical stats over an individual column, including
 * min, max, and quantiles.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig
 */
export type PrivacyMetric_NumericalStatsConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig"> & {
  /**
   * Field to compute numerical stats on. Supported types are
   * integer, float, date, datetime, timestamp, time.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.NumericalStatsConfig.
 * Use `create(PrivacyMetric_NumericalStatsConfigSchema)` to create a new message.
 */
export const PrivacyMetric_NumericalStatsConfigSchema: GenMessage<PrivacyMetric_NumericalStatsConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 0);

/**
 * Compute numerical stats over an individual column, including
 * number of distinct values and value count distribution.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig
 */
export type PrivacyMetric_CategoricalStatsConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig"> & {
  /**
   * Field to compute categorical stats on. All column types are
   * supported except for arrays and structs. However, it may be more
   * informative to use NumericalStats when the field type is supported,
   * depending on the data.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.CategoricalStatsConfig.
 * Use `create(PrivacyMetric_CategoricalStatsConfigSchema)` to create a new message.
 */
export const PrivacyMetric_CategoricalStatsConfigSchema: GenMessage<PrivacyMetric_CategoricalStatsConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 1);

/**
 * k-anonymity metric, used for analysis of reidentification risk.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig
 */
export type PrivacyMetric_KAnonymityConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig"> & {
  /**
   * Set of fields to compute k-anonymity over. When multiple fields are
   * specified, they are considered a single composite key. Structs and
   * repeated data types are not supported; however, nested fields are
   * supported so long as they are not structs themselves or nested within
   * a repeated field.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldId quasi_ids = 1;
   */
  quasiIds: FieldId[];

  /**
   * Message indicating that multiple rows might be associated to a
   * single individual. If the same entity_id is associated to multiple
   * quasi-identifier tuples over distinct rows, we consider the entire
   * collection of tuples as the composite quasi-identifier. This collection
   * is a multiset: the order in which the different tuples appear in the
   * dataset is ignored, but their frequency is taken into account.
   *
   * Important note: a maximum of 1000 rows can be associated to a single
   * entity ID. If more rows are associated with the same entity ID, some
   * might be ignored.
   *
   * @generated from field: google.privacy.dlp.v2.EntityId entity_id = 2;
   */
  entityId?: EntityId;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.KAnonymityConfig.
 * Use `create(PrivacyMetric_KAnonymityConfigSchema)` to create a new message.
 */
export const PrivacyMetric_KAnonymityConfigSchema: GenMessage<PrivacyMetric_KAnonymityConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 2);

/**
 * l-diversity metric, used for analysis of reidentification risk.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig
 */
export type PrivacyMetric_LDiversityConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig"> & {
  /**
   * Set of quasi-identifiers indicating how equivalence classes are
   * defined for the l-diversity computation. When multiple fields are
   * specified, they are considered a single composite key.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldId quasi_ids = 1;
   */
  quasiIds: FieldId[];

  /**
   * Sensitive field for computing the l-value.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId sensitive_attribute = 2;
   */
  sensitiveAttribute?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.LDiversityConfig.
 * Use `create(PrivacyMetric_LDiversityConfigSchema)` to create a new message.
 */
export const PrivacyMetric_LDiversityConfigSchema: GenMessage<PrivacyMetric_LDiversityConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 3);

/**
 * Reidentifiability metric. This corresponds to a risk model similar to what
 * is called "journalist risk" in the literature, except the attack dataset is
 * statistically modeled instead of being perfectly known. This can be done
 * using publicly available data (like the US Census), or using a custom
 * statistical model (indicated as one or several BigQuery tables), or by
 * extrapolating from the distribution of values in the input dataset.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig
 */
export type PrivacyMetric_KMapEstimationConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig"> & {
  /**
   * Required. Fields considered to be quasi-identifiers. No two columns can
   * have the same tag.
   *
   * @generated from field: repeated google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField quasi_ids = 1;
   */
  quasiIds: PrivacyMetric_KMapEstimationConfig_TaggedField[];

  /**
   * ISO 3166-1 alpha-2 region code to use in the statistical modeling.
   * Set if no column is tagged with a region-specific InfoType (like
   * US_ZIP_5) or a region code.
   *
   * @generated from field: string region_code = 2;
   */
  regionCode: string;

  /**
   * Several auxiliary tables can be used in the analysis. Each custom_tag
   * used to tag a quasi-identifiers column must appear in exactly one column
   * of one auxiliary table.
   *
   * @generated from field: repeated google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable auxiliary_tables = 3;
   */
  auxiliaryTables: PrivacyMetric_KMapEstimationConfig_AuxiliaryTable[];
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.
 * Use `create(PrivacyMetric_KMapEstimationConfigSchema)` to create a new message.
 */
export const PrivacyMetric_KMapEstimationConfigSchema: GenMessage<PrivacyMetric_KMapEstimationConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 4);

/**
 * A column with a semantic tag attached.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField
 */
export type PrivacyMetric_KMapEstimationConfig_TaggedField = Message<"google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField"> & {
  /**
   * Required. Identifies the column.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;

  /**
   * Semantic tag that identifies what a column contains, to determine which
   * statistical model to use to estimate the reidentifiability of each
   * value. [required]
   *
   * @generated from oneof google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.tag
   */
  tag: {
    /**
     * A column can be tagged with a InfoType to use the relevant public
     * dataset as a statistical model of population, if available. We
     * currently support US ZIP codes, region codes, ages and genders.
     * To programmatically obtain the list of supported InfoTypes, use
     * ListInfoTypes with the supported_by=RISK_ANALYSIS filter.
     *
     * @generated from field: google.privacy.dlp.v2.InfoType info_type = 2;
     */
    value: InfoType;
    case: "infoType";
  } | {
    /**
     * A column can be tagged with a custom tag. In this case, the user must
     * indicate an auxiliary table that contains statistical information on
     * the possible values of this column (below).
     *
     * @generated from field: string custom_tag = 3;
     */
    value: string;
    case: "customTag";
  } | {
    /**
     * If no semantic tag is indicated, we infer the statistical model from
     * the distribution of values in the input data
     *
     * @generated from field: google.protobuf.Empty inferred = 4;
     */
    value: Empty;
    case: "inferred";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.TaggedField.
 * Use `create(PrivacyMetric_KMapEstimationConfig_TaggedFieldSchema)` to create a new message.
 */
export const PrivacyMetric_KMapEstimationConfig_TaggedFieldSchema: GenMessage<PrivacyMetric_KMapEstimationConfig_TaggedField> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 4, 0);

/**
 * An auxiliary table contains statistical information on the relative
 * frequency of different quasi-identifiers values. It has one or several
 * quasi-identifiers columns, and one column that indicates the relative
 * frequency of each quasi-identifier tuple.
 * If a tuple is present in the data but not in the auxiliary table, the
 * corresponding relative frequency is assumed to be zero (and thus, the
 * tuple is highly reidentifiable).
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable
 */
export type PrivacyMetric_KMapEstimationConfig_AuxiliaryTable = Message<"google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable"> & {
  /**
   * Required. Auxiliary table location.
   *
   * @generated from field: google.privacy.dlp.v2.BigQueryTable table = 3;
   */
  table?: BigQueryTable;

  /**
   * Required. Quasi-identifier columns.
   *
   * @generated from field: repeated google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField quasi_ids = 1;
   */
  quasiIds: PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField[];

  /**
   * Required. The relative frequency column must contain a floating-point
   * number between 0 and 1 (inclusive). Null values are assumed to be zero.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId relative_frequency = 2;
   */
  relativeFrequency?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.
 * Use `create(PrivacyMetric_KMapEstimationConfig_AuxiliaryTableSchema)` to create a new message.
 */
export const PrivacyMetric_KMapEstimationConfig_AuxiliaryTableSchema: GenMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 4, 1);

/**
 * A quasi-identifier column has a custom_tag, used to know which column
 * in the data corresponds to which column in the statistical model.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField
 */
export type PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField = Message<"google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField"> & {
  /**
   * Identifies the column.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;

  /**
   * A auxiliary field.
   *
   * @generated from field: string custom_tag = 2;
   */
  customTag: string;
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.KMapEstimationConfig.AuxiliaryTable.QuasiIdField.
 * Use `create(PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdFieldSchema)` to create a new message.
 */
export const PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdFieldSchema: GenMessage<PrivacyMetric_KMapEstimationConfig_AuxiliaryTable_QuasiIdField> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 4, 1, 0);

/**
 * δ-presence metric, used to estimate how likely it is for an attacker to
 * figure out that one given individual appears in a de-identified dataset.
 * Similarly to the k-map metric, we cannot compute δ-presence exactly without
 * knowing the attack dataset, so we use a statistical model instead.
 *
 * @generated from message google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig
 */
export type PrivacyMetric_DeltaPresenceEstimationConfig = Message<"google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig"> & {
  /**
   * Required. Fields considered to be quasi-identifiers. No two fields can
   * have the same tag.
   *
   * @generated from field: repeated google.privacy.dlp.v2.QuasiId quasi_ids = 1;
   */
  quasiIds: QuasiId[];

  /**
   * ISO 3166-1 alpha-2 region code to use in the statistical modeling.
   * Set if no column is tagged with a region-specific InfoType (like
   * US_ZIP_5) or a region code.
   *
   * @generated from field: string region_code = 2;
   */
  regionCode: string;

  /**
   * Several auxiliary tables can be used in the analysis. Each custom_tag
   * used to tag a quasi-identifiers field must appear in exactly one
   * field of one auxiliary table.
   *
   * @generated from field: repeated google.privacy.dlp.v2.StatisticalTable auxiliary_tables = 3;
   */
  auxiliaryTables: StatisticalTable[];
};

/**
 * Describes the message google.privacy.dlp.v2.PrivacyMetric.DeltaPresenceEstimationConfig.
 * Use `create(PrivacyMetric_DeltaPresenceEstimationConfigSchema)` to create a new message.
 */
export const PrivacyMetric_DeltaPresenceEstimationConfigSchema: GenMessage<PrivacyMetric_DeltaPresenceEstimationConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 47, 5);

/**
 * Result of a risk analysis operation request.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails
 */
export type AnalyzeDataSourceRiskDetails = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails"> & {
  /**
   * Privacy metric to compute.
   *
   * @generated from field: google.privacy.dlp.v2.PrivacyMetric requested_privacy_metric = 1;
   */
  requestedPrivacyMetric?: PrivacyMetric;

  /**
   * Input dataset to compute metrics over.
   *
   * @generated from field: google.privacy.dlp.v2.BigQueryTable requested_source_table = 2;
   */
  requestedSourceTable?: BigQueryTable;

  /**
   * Values associated with this metric.
   *
   * @generated from oneof google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.result
   */
  result: {
    /**
     * Numerical stats result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult numerical_stats_result = 3;
     */
    value: AnalyzeDataSourceRiskDetails_NumericalStatsResult;
    case: "numericalStatsResult";
  } | {
    /**
     * Categorical stats result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult categorical_stats_result = 4;
     */
    value: AnalyzeDataSourceRiskDetails_CategoricalStatsResult;
    case: "categoricalStatsResult";
  } | {
    /**
     * K-anonymity result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult k_anonymity_result = 5;
     */
    value: AnalyzeDataSourceRiskDetails_KAnonymityResult;
    case: "kAnonymityResult";
  } | {
    /**
     * L-divesity result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult l_diversity_result = 6;
     */
    value: AnalyzeDataSourceRiskDetails_LDiversityResult;
    case: "lDiversityResult";
  } | {
    /**
     * K-map result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult k_map_estimation_result = 7;
     */
    value: AnalyzeDataSourceRiskDetails_KMapEstimationResult;
    case: "kMapEstimationResult";
  } | {
    /**
     * Delta-presence result
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult delta_presence_estimation_result = 9;
     */
    value: AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult;
    case: "deltaPresenceEstimationResult";
  } | { case: undefined; value?: undefined };

  /**
   * The configuration used for this job.
   *
   * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions requested_options = 10;
   */
  requestedOptions?: AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.
 * Use `create(AnalyzeDataSourceRiskDetailsSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetailsSchema: GenMessage<AnalyzeDataSourceRiskDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48);

/**
 * Result of the numerical stats computation.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult
 */
export type AnalyzeDataSourceRiskDetails_NumericalStatsResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult"> & {
  /**
   * Minimum value appearing in the column.
   *
   * @generated from field: google.privacy.dlp.v2.Value min_value = 1;
   */
  minValue?: Value;

  /**
   * Maximum value appearing in the column.
   *
   * @generated from field: google.privacy.dlp.v2.Value max_value = 2;
   */
  maxValue?: Value;

  /**
   * List of 99 values that partition the set of field values into 100 equal
   * sized buckets.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value quantile_values = 4;
   */
  quantileValues: Value[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.NumericalStatsResult.
 * Use `create(AnalyzeDataSourceRiskDetails_NumericalStatsResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_NumericalStatsResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_NumericalStatsResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 0);

/**
 * Result of the categorical stats computation.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult
 */
export type AnalyzeDataSourceRiskDetails_CategoricalStatsResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult"> & {
  /**
   * Histogram of value frequencies in the column.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket value_frequency_histogram_buckets = 5;
   */
  valueFrequencyHistogramBuckets: AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.
 * Use `create(AnalyzeDataSourceRiskDetails_CategoricalStatsResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_CategoricalStatsResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 1);

/**
 * Histogram of value frequencies in the column.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket
 */
export type AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket"> & {
  /**
   * Lower bound on the value frequency of the values in this bucket.
   *
   * @generated from field: int64 value_frequency_lower_bound = 1;
   */
  valueFrequencyLowerBound: bigint;

  /**
   * Upper bound on the value frequency of the values in this bucket.
   *
   * @generated from field: int64 value_frequency_upper_bound = 2;
   */
  valueFrequencyUpperBound: bigint;

  /**
   * Total number of values in this bucket.
   *
   * @generated from field: int64 bucket_size = 3;
   */
  bucketSize: bigint;

  /**
   * Sample of value frequencies in this bucket. The total number of
   * values returned per bucket is capped at 20.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ValueFrequency bucket_values = 4;
   */
  bucketValues: ValueFrequency[];

  /**
   * Total number of distinct values in this bucket.
   *
   * @generated from field: int64 bucket_value_count = 5;
   */
  bucketValueCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.CategoricalStatsResult.CategoricalStatsHistogramBucket.
 * Use `create(AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucketSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucketSchema: GenMessage<AnalyzeDataSourceRiskDetails_CategoricalStatsResult_CategoricalStatsHistogramBucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 1, 0);

/**
 * Result of the k-anonymity computation.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult
 */
export type AnalyzeDataSourceRiskDetails_KAnonymityResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult"> & {
  /**
   * Histogram of k-anonymity equivalence classes.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket equivalence_class_histogram_buckets = 5;
   */
  equivalenceClassHistogramBuckets: AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.
 * Use `create(AnalyzeDataSourceRiskDetails_KAnonymityResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KAnonymityResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 2);

/**
 * The set of columns' values that share the same ldiversity value
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass
 */
export type AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass"> & {
  /**
   * Set of values defining the equivalence class. One value per
   * quasi-identifier column in the original KAnonymity metric message.
   * The order is always the same as the original request.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value quasi_ids_values = 1;
   */
  quasiIdsValues: Value[];

  /**
   * Size of the equivalence class, for example number of rows with the
   * above set of values.
   *
   * @generated from field: int64 equivalence_class_size = 2;
   */
  equivalenceClassSize: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass.
 * Use `create(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClassSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClassSchema: GenMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 2, 0);

/**
 * Histogram of k-anonymity equivalence classes.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket
 */
export type AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket"> & {
  /**
   * Lower bound on the size of the equivalence classes in this bucket.
   *
   * @generated from field: int64 equivalence_class_size_lower_bound = 1;
   */
  equivalenceClassSizeLowerBound: bigint;

  /**
   * Upper bound on the size of the equivalence classes in this bucket.
   *
   * @generated from field: int64 equivalence_class_size_upper_bound = 2;
   */
  equivalenceClassSizeUpperBound: bigint;

  /**
   * Total number of equivalence classes in this bucket.
   *
   * @generated from field: int64 bucket_size = 3;
   */
  bucketSize: bigint;

  /**
   * Sample of equivalence classes in this bucket. The total number of
   * classes returned per bucket is capped at 20.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityEquivalenceClass bucket_values = 4;
   */
  bucketValues: AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityEquivalenceClass[];

  /**
   * Total number of distinct equivalence classes in this bucket.
   *
   * @generated from field: int64 bucket_value_count = 5;
   */
  bucketValueCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KAnonymityResult.KAnonymityHistogramBucket.
 * Use `create(AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucketSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucketSchema: GenMessage<AnalyzeDataSourceRiskDetails_KAnonymityResult_KAnonymityHistogramBucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 2, 1);

/**
 * Result of the l-diversity computation.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult
 */
export type AnalyzeDataSourceRiskDetails_LDiversityResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult"> & {
  /**
   * Histogram of l-diversity equivalence class sensitive value frequencies.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket sensitive_value_frequency_histogram_buckets = 5;
   */
  sensitiveValueFrequencyHistogramBuckets: AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.
 * Use `create(AnalyzeDataSourceRiskDetails_LDiversityResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_LDiversityResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_LDiversityResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 3);

/**
 * The set of columns' values that share the same ldiversity value.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass
 */
export type AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass"> & {
  /**
   * Quasi-identifier values defining the k-anonymity equivalence
   * class. The order is always the same as the original request.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value quasi_ids_values = 1;
   */
  quasiIdsValues: Value[];

  /**
   * Size of the k-anonymity equivalence class.
   *
   * @generated from field: int64 equivalence_class_size = 2;
   */
  equivalenceClassSize: bigint;

  /**
   * Number of distinct sensitive values in this equivalence class.
   *
   * @generated from field: int64 num_distinct_sensitive_values = 3;
   */
  numDistinctSensitiveValues: bigint;

  /**
   * Estimated frequencies of top sensitive values.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ValueFrequency top_sensitive_values = 4;
   */
  topSensitiveValues: ValueFrequency[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass.
 * Use `create(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClassSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClassSchema: GenMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 3, 0);

/**
 * Histogram of l-diversity equivalence class sensitive value frequencies.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket
 */
export type AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket"> & {
  /**
   * Lower bound on the sensitive value frequencies of the equivalence
   * classes in this bucket.
   *
   * @generated from field: int64 sensitive_value_frequency_lower_bound = 1;
   */
  sensitiveValueFrequencyLowerBound: bigint;

  /**
   * Upper bound on the sensitive value frequencies of the equivalence
   * classes in this bucket.
   *
   * @generated from field: int64 sensitive_value_frequency_upper_bound = 2;
   */
  sensitiveValueFrequencyUpperBound: bigint;

  /**
   * Total number of equivalence classes in this bucket.
   *
   * @generated from field: int64 bucket_size = 3;
   */
  bucketSize: bigint;

  /**
   * Sample of equivalence classes in this bucket. The total number of
   * classes returned per bucket is capped at 20.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityEquivalenceClass bucket_values = 4;
   */
  bucketValues: AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityEquivalenceClass[];

  /**
   * Total number of distinct equivalence classes in this bucket.
   *
   * @generated from field: int64 bucket_value_count = 5;
   */
  bucketValueCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.LDiversityResult.LDiversityHistogramBucket.
 * Use `create(AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucketSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucketSchema: GenMessage<AnalyzeDataSourceRiskDetails_LDiversityResult_LDiversityHistogramBucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 3, 1);

/**
 * Result of the reidentifiability analysis. Note that these results are an
 * estimation, not exact values.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult
 */
export type AnalyzeDataSourceRiskDetails_KMapEstimationResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult"> & {
  /**
   * The intervals [min_anonymity, max_anonymity] do not overlap. If a value
   * doesn't correspond to any such interval, the associated frequency is
   * zero. For example, the following records:
   *   {min_anonymity: 1, max_anonymity: 1, frequency: 17}
   *   {min_anonymity: 2, max_anonymity: 3, frequency: 42}
   *   {min_anonymity: 5, max_anonymity: 10, frequency: 99}
   * mean that there are no record with an estimated anonymity of 4, 5, or
   * larger than 10.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket k_map_estimation_histogram = 1;
   */
  kMapEstimationHistogram: AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.
 * Use `create(AnalyzeDataSourceRiskDetails_KMapEstimationResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KMapEstimationResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 4);

/**
 * A tuple of values for the quasi-identifier columns.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues
 */
export type AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues"> & {
  /**
   * The quasi-identifier values.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value quasi_ids_values = 1;
   */
  quasiIdsValues: Value[];

  /**
   * The estimated anonymity for these quasi-identifier values.
   *
   * @generated from field: int64 estimated_anonymity = 2;
   */
  estimatedAnonymity: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues.
 * Use `create(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValuesSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValuesSchema: GenMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 4, 0);

/**
 * A KMapEstimationHistogramBucket message with the following values:
 *   min_anonymity: 3
 *   max_anonymity: 5
 *   frequency: 42
 * means that there are 42 records whose quasi-identifier values correspond
 * to 3, 4 or 5 people in the overlying population. An important particular
 * case is when min_anonymity = max_anonymity = 1: the frequency field then
 * corresponds to the number of uniquely identifiable records.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket
 */
export type AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket"> & {
  /**
   * Always positive.
   *
   * @generated from field: int64 min_anonymity = 1;
   */
  minAnonymity: bigint;

  /**
   * Always greater than or equal to min_anonymity.
   *
   * @generated from field: int64 max_anonymity = 2;
   */
  maxAnonymity: bigint;

  /**
   * Number of records within these anonymity bounds.
   *
   * @generated from field: int64 bucket_size = 5;
   */
  bucketSize: bigint;

  /**
   * Sample of quasi-identifier tuple values in this bucket. The total
   * number of classes returned per bucket is capped at 20.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationQuasiIdValues bucket_values = 6;
   */
  bucketValues: AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationQuasiIdValues[];

  /**
   * Total number of distinct quasi-identifier tuple values in this bucket.
   *
   * @generated from field: int64 bucket_value_count = 7;
   */
  bucketValueCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.KMapEstimationResult.KMapEstimationHistogramBucket.
 * Use `create(AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucketSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucketSchema: GenMessage<AnalyzeDataSourceRiskDetails_KMapEstimationResult_KMapEstimationHistogramBucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 4, 1);

/**
 * Result of the δ-presence computation. Note that these results are an
 * estimation, not exact values.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult
 */
export type AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult"> & {
  /**
   * The intervals [min_probability, max_probability) do not overlap. If a
   * value doesn't correspond to any such interval, the associated frequency
   * is zero. For example, the following records:
   *   {min_probability: 0, max_probability: 0.1, frequency: 17}
   *   {min_probability: 0.2, max_probability: 0.3, frequency: 42}
   *   {min_probability: 0.3, max_probability: 0.4, frequency: 99}
   * mean that there are no record with an estimated probability in [0.1, 0.2)
   * nor larger or equal to 0.4.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket delta_presence_estimation_histogram = 1;
   */
  deltaPresenceEstimationHistogram: AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.
 * Use `create(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResultSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResultSchema: GenMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 5);

/**
 * A tuple of values for the quasi-identifier columns.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues
 */
export type AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues"> & {
  /**
   * The quasi-identifier values.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Value quasi_ids_values = 1;
   */
  quasiIdsValues: Value[];

  /**
   * The estimated probability that a given individual sharing these
   * quasi-identifier values is in the dataset. This value, typically
   * called δ, is the ratio between the number of records in the dataset
   * with these quasi-identifier values, and the total number of individuals
   * (inside *and* outside the dataset) with these quasi-identifier values.
   * For example, if there are 15 individuals in the dataset who share the
   * same quasi-identifier values, and an estimated 100 people in the entire
   * population with these values, then δ is 0.15.
   *
   * @generated from field: double estimated_probability = 2;
   */
  estimatedProbability: number;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues.
 * Use `create(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValuesSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValuesSchema: GenMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 5, 0);

/**
 * A DeltaPresenceEstimationHistogramBucket message with the following
 * values:
 *   min_probability: 0.1
 *   max_probability: 0.2
 *   frequency: 42
 * means that there are 42 records for which δ is in [0.1, 0.2). An
 * important particular case is when min_probability = max_probability = 1:
 * then, every individual who shares this quasi-identifier combination is in
 * the dataset.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket
 */
export type AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket"> & {
  /**
   * Between 0 and 1.
   *
   * @generated from field: double min_probability = 1;
   */
  minProbability: number;

  /**
   * Always greater than or equal to min_probability.
   *
   * @generated from field: double max_probability = 2;
   */
  maxProbability: number;

  /**
   * Number of records within these probability bounds.
   *
   * @generated from field: int64 bucket_size = 5;
   */
  bucketSize: bigint;

  /**
   * Sample of quasi-identifier tuple values in this bucket. The total
   * number of classes returned per bucket is capped at 20.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationQuasiIdValues bucket_values = 6;
   */
  bucketValues: AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationQuasiIdValues[];

  /**
   * Total number of distinct quasi-identifier tuple values in this bucket.
   *
   * @generated from field: int64 bucket_value_count = 7;
   */
  bucketValueCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.DeltaPresenceEstimationResult.DeltaPresenceEstimationHistogramBucket.
 * Use `create(AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucketSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucketSchema: GenMessage<AnalyzeDataSourceRiskDetails_DeltaPresenceEstimationResult_DeltaPresenceEstimationHistogramBucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 5, 1);

/**
 * Risk analysis options.
 *
 * @generated from message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions
 */
export type AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions = Message<"google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions"> & {
  /**
   * The job config for the risk job.
   *
   * @generated from field: google.privacy.dlp.v2.RiskAnalysisJobConfig job_config = 1;
   */
  jobConfig?: RiskAnalysisJobConfig;
};

/**
 * Describes the message google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails.RequestedRiskAnalysisOptions.
 * Use `create(AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptionsSchema)` to create a new message.
 */
export const AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptionsSchema: GenMessage<AnalyzeDataSourceRiskDetails_RequestedRiskAnalysisOptions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 48, 6);

/**
 * A value of a field, including its frequency.
 *
 * @generated from message google.privacy.dlp.v2.ValueFrequency
 */
export type ValueFrequency = Message<"google.privacy.dlp.v2.ValueFrequency"> & {
  /**
   * A value contained in the field in question.
   *
   * @generated from field: google.privacy.dlp.v2.Value value = 1;
   */
  value?: Value;

  /**
   * How many times the value is contained in the field.
   *
   * @generated from field: int64 count = 2;
   */
  count: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.ValueFrequency.
 * Use `create(ValueFrequencySchema)` to create a new message.
 */
export const ValueFrequencySchema: GenMessage<ValueFrequency> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 49);

/**
 * Set of primitive values supported by the system.
 * Note that for the purposes of inspection or transformation, the number
 * of bytes considered to comprise a 'Value' is based on its representation
 * as a UTF-8 encoded string. For example, if 'integer_value' is set to
 * 123456789, the number of bytes would be counted as 9, even though an
 * int64 only holds up to 8 bytes of data.
 *
 * @generated from message google.privacy.dlp.v2.Value
 */
export type Value = Message<"google.privacy.dlp.v2.Value"> & {
  /**
   * Value types
   *
   * @generated from oneof google.privacy.dlp.v2.Value.type
   */
  type: {
    /**
     * integer
     *
     * @generated from field: int64 integer_value = 1;
     */
    value: bigint;
    case: "integerValue";
  } | {
    /**
     * float
     *
     * @generated from field: double float_value = 2;
     */
    value: number;
    case: "floatValue";
  } | {
    /**
     * string
     *
     * @generated from field: string string_value = 3;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * boolean
     *
     * @generated from field: bool boolean_value = 4;
     */
    value: boolean;
    case: "booleanValue";
  } | {
    /**
     * timestamp
     *
     * @generated from field: google.protobuf.Timestamp timestamp_value = 5;
     */
    value: Timestamp;
    case: "timestampValue";
  } | {
    /**
     * time of day
     *
     * @generated from field: google.type.TimeOfDay time_value = 6;
     */
    value: TimeOfDay;
    case: "timeValue";
  } | {
    /**
     * date
     *
     * @generated from field: google.type.Date date_value = 7;
     */
    value: Date;
    case: "dateValue";
  } | {
    /**
     * day of week
     *
     * @generated from field: google.type.DayOfWeek day_of_week_value = 8;
     */
    value: DayOfWeek;
    case: "dayOfWeekValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.Value.
 * Use `create(ValueSchema)` to create a new message.
 */
export const ValueSchema: GenMessage<Value> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 50);

/**
 * Message for infoType-dependent details parsed from quote.
 *
 * @generated from message google.privacy.dlp.v2.QuoteInfo
 */
export type QuoteInfo = Message<"google.privacy.dlp.v2.QuoteInfo"> & {
  /**
   * Object representation of the quote.
   *
   * @generated from oneof google.privacy.dlp.v2.QuoteInfo.parsed_quote
   */
  parsedQuote: {
    /**
     * The date time indicated by the quote.
     *
     * @generated from field: google.privacy.dlp.v2.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.QuoteInfo.
 * Use `create(QuoteInfoSchema)` to create a new message.
 */
export const QuoteInfoSchema: GenMessage<QuoteInfo> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 51);

/**
 * Message for a date time object.
 * e.g. 2018-01-01, 5th August.
 *
 * @generated from message google.privacy.dlp.v2.DateTime
 */
export type DateTime = Message<"google.privacy.dlp.v2.DateTime"> & {
  /**
   * One or more of the following must be set.
   * Must be a valid date or time value.
   *
   * @generated from field: google.type.Date date = 1;
   */
  date?: Date;

  /**
   * Day of week
   *
   * @generated from field: google.type.DayOfWeek day_of_week = 2;
   */
  dayOfWeek: DayOfWeek;

  /**
   * Time of day
   *
   * @generated from field: google.type.TimeOfDay time = 3;
   */
  time?: TimeOfDay;

  /**
   * Time zone
   *
   * @generated from field: google.privacy.dlp.v2.DateTime.TimeZone time_zone = 4;
   */
  timeZone?: DateTime_TimeZone;
};

/**
 * Describes the message google.privacy.dlp.v2.DateTime.
 * Use `create(DateTimeSchema)` to create a new message.
 */
export const DateTimeSchema: GenMessage<DateTime> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 52);

/**
 * Time zone of the date time object.
 *
 * @generated from message google.privacy.dlp.v2.DateTime.TimeZone
 */
export type DateTime_TimeZone = Message<"google.privacy.dlp.v2.DateTime.TimeZone"> & {
  /**
   * Set only if the offset can be determined. Positive for time ahead of UTC.
   * E.g. For "UTC-9", this value is -540.
   *
   * @generated from field: int32 offset_minutes = 1;
   */
  offsetMinutes: number;
};

/**
 * Describes the message google.privacy.dlp.v2.DateTime.TimeZone.
 * Use `create(DateTime_TimeZoneSchema)` to create a new message.
 */
export const DateTime_TimeZoneSchema: GenMessage<DateTime_TimeZone> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 52, 0);

/**
 * The configuration that controls how the data will change.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyConfig
 */
export type DeidentifyConfig = Message<"google.privacy.dlp.v2.DeidentifyConfig"> & {
  /**
   * Type of transformation
   *
   * @generated from oneof google.privacy.dlp.v2.DeidentifyConfig.transformation
   */
  transformation: {
    /**
     * Treat the dataset as free-form text and apply the same free text
     * transformation everywhere.
     *
     * @generated from field: google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 1;
     */
    value: InfoTypeTransformations;
    case: "infoTypeTransformations";
  } | {
    /**
     * Treat the dataset as structured. Transformations can be applied to
     * specific locations within structured datasets, such as transforming
     * a column within a table.
     *
     * @generated from field: google.privacy.dlp.v2.RecordTransformations record_transformations = 2;
     */
    value: RecordTransformations;
    case: "recordTransformations";
  } | {
    /**
     * Treat the dataset as an image and redact.
     *
     * @generated from field: google.privacy.dlp.v2.ImageTransformations image_transformations = 4;
     */
    value: ImageTransformations;
    case: "imageTransformations";
  } | { case: undefined; value?: undefined };

  /**
   * Mode for handling transformation errors. If left unspecified, the default
   * mode is `TransformationErrorHandling.ThrowError`.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationErrorHandling transformation_error_handling = 3;
   */
  transformationErrorHandling?: TransformationErrorHandling;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyConfig.
 * Use `create(DeidentifyConfigSchema)` to create a new message.
 */
export const DeidentifyConfigSchema: GenMessage<DeidentifyConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 53);

/**
 * A type of transformation that is applied over images.
 *
 * @generated from message google.privacy.dlp.v2.ImageTransformations
 */
export type ImageTransformations = Message<"google.privacy.dlp.v2.ImageTransformations"> & {
  /**
   * List of transforms to make.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ImageTransformations.ImageTransformation transforms = 2;
   */
  transforms: ImageTransformations_ImageTransformation[];
};

/**
 * Describes the message google.privacy.dlp.v2.ImageTransformations.
 * Use `create(ImageTransformationsSchema)` to create a new message.
 */
export const ImageTransformationsSchema: GenMessage<ImageTransformations> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 54);

/**
 * Configuration for determining how redaction of images should occur.
 *
 * @generated from message google.privacy.dlp.v2.ImageTransformations.ImageTransformation
 */
export type ImageTransformations_ImageTransformation = Message<"google.privacy.dlp.v2.ImageTransformations.ImageTransformation"> & {
  /**
   * Part of the image to transform.
   *
   * @generated from oneof google.privacy.dlp.v2.ImageTransformations.ImageTransformation.target
   */
  target: {
    /**
     * Apply transformation to the selected info_types.
     *
     * @generated from field: google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes selected_info_types = 4;
     */
    value: ImageTransformations_ImageTransformation_SelectedInfoTypes;
    case: "selectedInfoTypes";
  } | {
    /**
     * Apply transformation to all findings not specified in other
     * ImageTransformation's selected_info_types. Only one instance is allowed
     * within the ImageTransformations message.
     *
     * @generated from field: google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes all_info_types = 5;
     */
    value: ImageTransformations_ImageTransformation_AllInfoTypes;
    case: "allInfoTypes";
  } | {
    /**
     * Apply transformation to all text that doesn't match an infoType. Only
     * one instance is allowed within the ImageTransformations message.
     *
     * @generated from field: google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText all_text = 6;
     */
    value: ImageTransformations_ImageTransformation_AllText;
    case: "allText";
  } | { case: undefined; value?: undefined };

  /**
   * The color to use when redacting content from an image. If not
   * specified, the default is black.
   *
   * @generated from field: google.privacy.dlp.v2.Color redaction_color = 3;
   */
  redactionColor?: Color;
};

/**
 * Describes the message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.
 * Use `create(ImageTransformations_ImageTransformationSchema)` to create a new message.
 */
export const ImageTransformations_ImageTransformationSchema: GenMessage<ImageTransformations_ImageTransformation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 54, 0);

/**
 * Apply transformation to the selected info_types.
 *
 * @generated from message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes
 */
export type ImageTransformations_ImageTransformation_SelectedInfoTypes = Message<"google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes"> & {
  /**
   * Required. InfoTypes to apply the transformation to. Required. Provided
   * InfoType must be unique within the ImageTransformations message.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoType info_types = 5;
   */
  infoTypes: InfoType[];
};

/**
 * Describes the message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.SelectedInfoTypes.
 * Use `create(ImageTransformations_ImageTransformation_SelectedInfoTypesSchema)` to create a new message.
 */
export const ImageTransformations_ImageTransformation_SelectedInfoTypesSchema: GenMessage<ImageTransformations_ImageTransformation_SelectedInfoTypes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 54, 0, 0);

/**
 * Apply transformation to all findings.
 *
 * @generated from message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes
 */
export type ImageTransformations_ImageTransformation_AllInfoTypes = Message<"google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllInfoTypes.
 * Use `create(ImageTransformations_ImageTransformation_AllInfoTypesSchema)` to create a new message.
 */
export const ImageTransformations_ImageTransformation_AllInfoTypesSchema: GenMessage<ImageTransformations_ImageTransformation_AllInfoTypes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 54, 0, 1);

/**
 * Apply to all text.
 *
 * @generated from message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText
 */
export type ImageTransformations_ImageTransformation_AllText = Message<"google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.ImageTransformations.ImageTransformation.AllText.
 * Use `create(ImageTransformations_ImageTransformation_AllTextSchema)` to create a new message.
 */
export const ImageTransformations_ImageTransformation_AllTextSchema: GenMessage<ImageTransformations_ImageTransformation_AllText> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 54, 0, 2);

/**
 * How to handle transformation errors during de-identification. A
 * transformation error occurs when the requested transformation is incompatible
 * with the data. For example, trying to de-identify an IP address using a
 * `DateShift` transformation would result in a transformation error, since date
 * info cannot be extracted from an IP address.
 * Information about any incompatible transformations, and how they were
 * handled, is returned in the response as part of the
 * `TransformationOverviews`.
 *
 * @generated from message google.privacy.dlp.v2.TransformationErrorHandling
 */
export type TransformationErrorHandling = Message<"google.privacy.dlp.v2.TransformationErrorHandling"> & {
  /**
   * How transformation errors should be handled.
   *
   * @generated from oneof google.privacy.dlp.v2.TransformationErrorHandling.mode
   */
  mode: {
    /**
     * Throw an error
     *
     * @generated from field: google.privacy.dlp.v2.TransformationErrorHandling.ThrowError throw_error = 1;
     */
    value: TransformationErrorHandling_ThrowError;
    case: "throwError";
  } | {
    /**
     * Ignore errors
     *
     * @generated from field: google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed leave_untransformed = 2;
     */
    value: TransformationErrorHandling_LeaveUntransformed;
    case: "leaveUntransformed";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationErrorHandling.
 * Use `create(TransformationErrorHandlingSchema)` to create a new message.
 */
export const TransformationErrorHandlingSchema: GenMessage<TransformationErrorHandling> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 55);

/**
 * Throw an error and fail the request when a transformation error occurs.
 *
 * @generated from message google.privacy.dlp.v2.TransformationErrorHandling.ThrowError
 */
export type TransformationErrorHandling_ThrowError = Message<"google.privacy.dlp.v2.TransformationErrorHandling.ThrowError"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationErrorHandling.ThrowError.
 * Use `create(TransformationErrorHandling_ThrowErrorSchema)` to create a new message.
 */
export const TransformationErrorHandling_ThrowErrorSchema: GenMessage<TransformationErrorHandling_ThrowError> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 55, 0);

/**
 * Skips the data without modifying it if the requested transformation would
 * cause an error. For example, if a `DateShift` transformation were applied
 * an an IP address, this mode would leave the IP address unchanged in the
 * response.
 *
 * @generated from message google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed
 */
export type TransformationErrorHandling_LeaveUntransformed = Message<"google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationErrorHandling.LeaveUntransformed.
 * Use `create(TransformationErrorHandling_LeaveUntransformedSchema)` to create a new message.
 */
export const TransformationErrorHandling_LeaveUntransformedSchema: GenMessage<TransformationErrorHandling_LeaveUntransformed> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 55, 1);

/**
 * A rule for transforming a value.
 *
 * @generated from message google.privacy.dlp.v2.PrimitiveTransformation
 */
export type PrimitiveTransformation = Message<"google.privacy.dlp.v2.PrimitiveTransformation"> & {
  /**
   * Type of transformation.
   *
   * @generated from oneof google.privacy.dlp.v2.PrimitiveTransformation.transformation
   */
  transformation: {
    /**
     * Replace with a specified value.
     *
     * @generated from field: google.privacy.dlp.v2.ReplaceValueConfig replace_config = 1;
     */
    value: ReplaceValueConfig;
    case: "replaceConfig";
  } | {
    /**
     * Redact
     *
     * @generated from field: google.privacy.dlp.v2.RedactConfig redact_config = 2;
     */
    value: RedactConfig;
    case: "redactConfig";
  } | {
    /**
     * Mask
     *
     * @generated from field: google.privacy.dlp.v2.CharacterMaskConfig character_mask_config = 3;
     */
    value: CharacterMaskConfig;
    case: "characterMaskConfig";
  } | {
    /**
     * Ffx-Fpe
     *
     * @generated from field: google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig crypto_replace_ffx_fpe_config = 4;
     */
    value: CryptoReplaceFfxFpeConfig;
    case: "cryptoReplaceFfxFpeConfig";
  } | {
    /**
     * Fixed size bucketing
     *
     * @generated from field: google.privacy.dlp.v2.FixedSizeBucketingConfig fixed_size_bucketing_config = 5;
     */
    value: FixedSizeBucketingConfig;
    case: "fixedSizeBucketingConfig";
  } | {
    /**
     * Bucketing
     *
     * @generated from field: google.privacy.dlp.v2.BucketingConfig bucketing_config = 6;
     */
    value: BucketingConfig;
    case: "bucketingConfig";
  } | {
    /**
     * Replace with infotype
     *
     * @generated from field: google.privacy.dlp.v2.ReplaceWithInfoTypeConfig replace_with_info_type_config = 7;
     */
    value: ReplaceWithInfoTypeConfig;
    case: "replaceWithInfoTypeConfig";
  } | {
    /**
     * Time extraction
     *
     * @generated from field: google.privacy.dlp.v2.TimePartConfig time_part_config = 8;
     */
    value: TimePartConfig;
    case: "timePartConfig";
  } | {
    /**
     * Crypto
     *
     * @generated from field: google.privacy.dlp.v2.CryptoHashConfig crypto_hash_config = 9;
     */
    value: CryptoHashConfig;
    case: "cryptoHashConfig";
  } | {
    /**
     * Date Shift
     *
     * @generated from field: google.privacy.dlp.v2.DateShiftConfig date_shift_config = 11;
     */
    value: DateShiftConfig;
    case: "dateShiftConfig";
  } | {
    /**
     * Deterministic Crypto
     *
     * @generated from field: google.privacy.dlp.v2.CryptoDeterministicConfig crypto_deterministic_config = 12;
     */
    value: CryptoDeterministicConfig;
    case: "cryptoDeterministicConfig";
  } | {
    /**
     * Replace with a value randomly drawn (with replacement) from a dictionary.
     *
     * @generated from field: google.privacy.dlp.v2.ReplaceDictionaryConfig replace_dictionary_config = 13;
     */
    value: ReplaceDictionaryConfig;
    case: "replaceDictionaryConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.PrimitiveTransformation.
 * Use `create(PrimitiveTransformationSchema)` to create a new message.
 */
export const PrimitiveTransformationSchema: GenMessage<PrimitiveTransformation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 56);

/**
 * For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a
 * portion of the value.
 *
 * @generated from message google.privacy.dlp.v2.TimePartConfig
 */
export type TimePartConfig = Message<"google.privacy.dlp.v2.TimePartConfig"> & {
  /**
   * The part of the time to keep.
   *
   * @generated from field: google.privacy.dlp.v2.TimePartConfig.TimePart part_to_extract = 1;
   */
  partToExtract: TimePartConfig_TimePart;
};

/**
 * Describes the message google.privacy.dlp.v2.TimePartConfig.
 * Use `create(TimePartConfigSchema)` to create a new message.
 */
export const TimePartConfigSchema: GenMessage<TimePartConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 57);

/**
 * Components that make up time.
 *
 * @generated from enum google.privacy.dlp.v2.TimePartConfig.TimePart
 */
export enum TimePartConfig_TimePart {
  /**
   * Unused
   *
   * @generated from enum value: TIME_PART_UNSPECIFIED = 0;
   */
  TIME_PART_UNSPECIFIED = 0,

  /**
   * [0-9999]
   *
   * @generated from enum value: YEAR = 1;
   */
  YEAR = 1,

  /**
   * [1-12]
   *
   * @generated from enum value: MONTH = 2;
   */
  MONTH = 2,

  /**
   * [1-31]
   *
   * @generated from enum value: DAY_OF_MONTH = 3;
   */
  DAY_OF_MONTH = 3,

  /**
   * [1-7]
   *
   * @generated from enum value: DAY_OF_WEEK = 4;
   */
  DAY_OF_WEEK = 4,

  /**
   * [1-53]
   *
   * @generated from enum value: WEEK_OF_YEAR = 5;
   */
  WEEK_OF_YEAR = 5,

  /**
   * [0-23]
   *
   * @generated from enum value: HOUR_OF_DAY = 6;
   */
  HOUR_OF_DAY = 6,
}

/**
 * Describes the enum google.privacy.dlp.v2.TimePartConfig.TimePart.
 */
export const TimePartConfig_TimePartSchema: GenEnum<TimePartConfig_TimePart> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 57, 0);

/**
 * Pseudonymization method that generates surrogates via cryptographic hashing.
 * Uses SHA-256.
 * The key size must be either 32 or 64 bytes.
 * Outputs a base64 encoded representation of the hashed output
 * (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=).
 * Currently, only string and integer values can be hashed.
 * See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.CryptoHashConfig
 */
export type CryptoHashConfig = Message<"google.privacy.dlp.v2.CryptoHashConfig"> & {
  /**
   * The key used by the hash function.
   *
   * @generated from field: google.privacy.dlp.v2.CryptoKey crypto_key = 1;
   */
  cryptoKey?: CryptoKey;
};

/**
 * Describes the message google.privacy.dlp.v2.CryptoHashConfig.
 * Use `create(CryptoHashConfigSchema)` to create a new message.
 */
export const CryptoHashConfigSchema: GenMessage<CryptoHashConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 58);

/**
 * Pseudonymization method that generates deterministic encryption for the given
 * input. Outputs a base64 encoded representation of the encrypted output.
 * Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
 *
 * @generated from message google.privacy.dlp.v2.CryptoDeterministicConfig
 */
export type CryptoDeterministicConfig = Message<"google.privacy.dlp.v2.CryptoDeterministicConfig"> & {
  /**
   * The key used by the encryption function. For deterministic encryption
   * using AES-SIV, the provided key is internally expanded to 64 bytes prior to
   * use.
   *
   * @generated from field: google.privacy.dlp.v2.CryptoKey crypto_key = 1;
   */
  cryptoKey?: CryptoKey;

  /**
   * The custom info type to annotate the surrogate with.
   * This annotation will be applied to the surrogate by prefixing it with
   * the name of the custom info type followed by the number of
   * characters comprising the surrogate. The following scheme defines the
   * format: {info type name}({surrogate character count}):{surrogate}
   *
   * For example, if the name of custom info type is 'MY_TOKEN_INFO_TYPE' and
   * the surrogate is 'abc', the full replacement value
   * will be: 'MY_TOKEN_INFO_TYPE(3):abc'
   *
   * This annotation identifies the surrogate when inspecting content using the
   * custom info type 'Surrogate'. This facilitates reversal of the
   * surrogate when it occurs in free text.
   *
   * Note: For record transformations where the entire cell in a table is being
   * transformed, surrogates are not mandatory. Surrogates are used to denote
   * the location of the token and are necessary for re-identification in free
   * form text.
   *
   * In order for inspection to work properly, the name of this info type must
   * not occur naturally anywhere in your data; otherwise, inspection may either
   *
   * - reverse a surrogate that does not correspond to an actual identifier
   * - be unable to parse the surrogate and result in an error
   *
   * Therefore, choose your custom info type name carefully after considering
   * what your data looks like. One way to select a name that has a high chance
   * of yielding reliable detection is to include one or more unicode characters
   * that are highly improbable to exist in your data.
   * For example, assuming your data is entered from a regular ASCII keyboard,
   * the symbol with the hex code point 29DD might be used like so:
   * ⧝MY_TOKEN_TYPE.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType surrogate_info_type = 2;
   */
  surrogateInfoType?: InfoType;

  /**
   * A context may be used for higher security and maintaining
   * referential integrity such that the same identifier in two different
   * contexts will be given a distinct surrogate. The context is appended to
   * plaintext value being encrypted. On decryption the provided context is
   * validated against the value used during encryption. If a context was
   * provided during encryption, same context must be provided during decryption
   * as well.
   *
   * If the context is not set, plaintext would be used as is for encryption.
   * If the context is set but:
   *
   * 1. there is no record present when transforming a given value or
   * 2. the field is not present when transforming a given value,
   *
   * plaintext would be used as is for encryption.
   *
   * Note that case (1) is expected when an `InfoTypeTransformation` is
   * applied to both structured and unstructured `ContentItem`s.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId context = 3;
   */
  context?: FieldId;
};

/**
 * Describes the message google.privacy.dlp.v2.CryptoDeterministicConfig.
 * Use `create(CryptoDeterministicConfigSchema)` to create a new message.
 */
export const CryptoDeterministicConfigSchema: GenMessage<CryptoDeterministicConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 59);

/**
 * Replace each input value with a given `Value`.
 *
 * @generated from message google.privacy.dlp.v2.ReplaceValueConfig
 */
export type ReplaceValueConfig = Message<"google.privacy.dlp.v2.ReplaceValueConfig"> & {
  /**
   * Value to replace it with.
   *
   * @generated from field: google.privacy.dlp.v2.Value new_value = 1;
   */
  newValue?: Value;
};

/**
 * Describes the message google.privacy.dlp.v2.ReplaceValueConfig.
 * Use `create(ReplaceValueConfigSchema)` to create a new message.
 */
export const ReplaceValueConfigSchema: GenMessage<ReplaceValueConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 60);

/**
 * Replace each input value with a value randomly selected from the dictionary.
 *
 * @generated from message google.privacy.dlp.v2.ReplaceDictionaryConfig
 */
export type ReplaceDictionaryConfig = Message<"google.privacy.dlp.v2.ReplaceDictionaryConfig"> & {
  /**
   * Type of dictionary.
   *
   * @generated from oneof google.privacy.dlp.v2.ReplaceDictionaryConfig.type
   */
  type: {
    /**
     * A list of words to select from for random replacement. The
     * [limits](https://cloud.google.com/sensitive-data-protection/limits) page
     * contains details about the size limits of dictionaries.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.Dictionary.WordList word_list = 1;
     */
    value: CustomInfoType_Dictionary_WordList;
    case: "wordList";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.ReplaceDictionaryConfig.
 * Use `create(ReplaceDictionaryConfigSchema)` to create a new message.
 */
export const ReplaceDictionaryConfigSchema: GenMessage<ReplaceDictionaryConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 61);

/**
 * Replace each matching finding with the name of the info_type.
 *
 * @generated from message google.privacy.dlp.v2.ReplaceWithInfoTypeConfig
 */
export type ReplaceWithInfoTypeConfig = Message<"google.privacy.dlp.v2.ReplaceWithInfoTypeConfig"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.ReplaceWithInfoTypeConfig.
 * Use `create(ReplaceWithInfoTypeConfigSchema)` to create a new message.
 */
export const ReplaceWithInfoTypeConfigSchema: GenMessage<ReplaceWithInfoTypeConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 62);

/**
 * Redact a given value. For example, if used with an `InfoTypeTransformation`
 * transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the
 * output would be 'My phone number is '.
 *
 * @generated from message google.privacy.dlp.v2.RedactConfig
 */
export type RedactConfig = Message<"google.privacy.dlp.v2.RedactConfig"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.RedactConfig.
 * Use `create(RedactConfigSchema)` to create a new message.
 */
export const RedactConfigSchema: GenMessage<RedactConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 63);

/**
 * Characters to skip when doing deidentification of a value. These will be left
 * alone and skipped.
 *
 * @generated from message google.privacy.dlp.v2.CharsToIgnore
 */
export type CharsToIgnore = Message<"google.privacy.dlp.v2.CharsToIgnore"> & {
  /**
   * Type of characters to skip.
   *
   * @generated from oneof google.privacy.dlp.v2.CharsToIgnore.characters
   */
  characters: {
    /**
     * Characters to not transform when masking.
     *
     * @generated from field: string characters_to_skip = 1;
     */
    value: string;
    case: "charactersToSkip";
  } | {
    /**
     * Common characters to not transform when masking. Useful to avoid removing
     * punctuation.
     *
     * @generated from field: google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore common_characters_to_ignore = 2;
     */
    value: CharsToIgnore_CommonCharsToIgnore;
    case: "commonCharactersToIgnore";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.CharsToIgnore.
 * Use `create(CharsToIgnoreSchema)` to create a new message.
 */
export const CharsToIgnoreSchema: GenMessage<CharsToIgnore> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 64);

/**
 * Convenience enum for indicating common characters to not transform.
 *
 * @generated from enum google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore
 */
export enum CharsToIgnore_CommonCharsToIgnore {
  /**
   * Unused.
   *
   * @generated from enum value: COMMON_CHARS_TO_IGNORE_UNSPECIFIED = 0;
   */
  COMMON_CHARS_TO_IGNORE_UNSPECIFIED = 0,

  /**
   * 0-9
   *
   * @generated from enum value: NUMERIC = 1;
   */
  NUMERIC = 1,

  /**
   * A-Z
   *
   * @generated from enum value: ALPHA_UPPER_CASE = 2;
   */
  ALPHA_UPPER_CASE = 2,

  /**
   * a-z
   *
   * @generated from enum value: ALPHA_LOWER_CASE = 3;
   */
  ALPHA_LOWER_CASE = 3,

  /**
   * US Punctuation, one of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
   *
   * @generated from enum value: PUNCTUATION = 4;
   */
  PUNCTUATION = 4,

  /**
   * Whitespace character, one of [ \t\n\x0B\f\r]
   *
   * @generated from enum value: WHITESPACE = 5;
   */
  WHITESPACE = 5,
}

/**
 * Describes the enum google.privacy.dlp.v2.CharsToIgnore.CommonCharsToIgnore.
 */
export const CharsToIgnore_CommonCharsToIgnoreSchema: GenEnum<CharsToIgnore_CommonCharsToIgnore> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 64, 0);

/**
 * Partially mask a string by replacing a given number of characters with a
 * fixed character. Masking can start from the beginning or end of the string.
 * This can be used on data of any type (numbers, longs, and so on) and when
 * de-identifying structured data we'll attempt to preserve the original data's
 * type. (This allows you to take a long like 123 and modify it to a string like
 * **3.
 *
 * @generated from message google.privacy.dlp.v2.CharacterMaskConfig
 */
export type CharacterMaskConfig = Message<"google.privacy.dlp.v2.CharacterMaskConfig"> & {
  /**
   * Character to use to mask the sensitive values&mdash;for example, `*` for an
   * alphabetic string such as a name, or `0` for a numeric string such as ZIP
   * code or credit card number. This string must have a length of 1. If not
   * supplied, this value defaults to `*` for strings, and `0` for digits.
   *
   * @generated from field: string masking_character = 1;
   */
  maskingCharacter: string;

  /**
   * Number of characters to mask. If not set, all matching chars will be
   * masked. Skipped characters do not count towards this tally.
   *
   * If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP
   * masks all but a number of characters.
   * For example, suppose you have the following values:
   *
   * - `masking_character` is `*`
   * - `number_to_mask` is `-4`
   * - `reverse_order` is `false`
   * - `CharsToIgnore` includes `-`
   * - Input string is `1234-5678-9012-3456`
   *
   * The resulting de-identified string is
   * `****-****-****-3456`. Cloud DLP masks all but the last four characters.
   * If `reverse_order` is `true`, all but the first four characters are masked
   * as `1234-****-****-****`.
   *
   * @generated from field: int32 number_to_mask = 2;
   */
  numberToMask: number;

  /**
   * Mask characters in reverse order. For example, if `masking_character` is
   * `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the
   * input string `1234-5678-9012-3456` is masked as `00000000000000-3456`.
   * If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order`
   * is `true`, then the string `12345` is masked as `12***`.
   *
   * @generated from field: bool reverse_order = 3;
   */
  reverseOrder: boolean;

  /**
   * When masking a string, items in this list will be skipped when replacing
   * characters. For example, if the input string is `555-555-5555` and you
   * instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP
   * returns `***-**5-5555`.
   *
   * @generated from field: repeated google.privacy.dlp.v2.CharsToIgnore characters_to_ignore = 4;
   */
  charactersToIgnore: CharsToIgnore[];
};

/**
 * Describes the message google.privacy.dlp.v2.CharacterMaskConfig.
 * Use `create(CharacterMaskConfigSchema)` to create a new message.
 */
export const CharacterMaskConfigSchema: GenMessage<CharacterMaskConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 65);

/**
 * Buckets values based on fixed size ranges. The
 * Bucketing transformation can provide all of this functionality,
 * but requires more configuration. This message is provided as a convenience to
 * the user for simple bucketing strategies.
 *
 * The transformed value will be a hyphenated string of
 * {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound
 * = 20, all values that are within this bucket will be replaced with "10-20".
 *
 * This can be used on data of type: double, long.
 *
 * If the bound Value type differs from the type of data
 * being transformed, we will first attempt converting the type of the data to
 * be transformed to match the type of the bound before comparing.
 *
 * See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to
 * learn more.
 *
 * @generated from message google.privacy.dlp.v2.FixedSizeBucketingConfig
 */
export type FixedSizeBucketingConfig = Message<"google.privacy.dlp.v2.FixedSizeBucketingConfig"> & {
  /**
   * Required. Lower bound value of buckets. All values less than `lower_bound`
   * are grouped together into a single bucket; for example if `lower_bound` =
   * 10, then all values less than 10 are replaced with the value "-10".
   *
   * @generated from field: google.privacy.dlp.v2.Value lower_bound = 1;
   */
  lowerBound?: Value;

  /**
   * Required. Upper bound value of buckets. All values greater than upper_bound
   * are grouped together into a single bucket; for example if `upper_bound` =
   * 89, then all values greater than 89 are replaced with the value "89+".
   *
   * @generated from field: google.privacy.dlp.v2.Value upper_bound = 2;
   */
  upperBound?: Value;

  /**
   * Required. Size of each bucket (except for minimum and maximum buckets). So
   * if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
   * following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
   * 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
   *
   * @generated from field: double bucket_size = 3;
   */
  bucketSize: number;
};

/**
 * Describes the message google.privacy.dlp.v2.FixedSizeBucketingConfig.
 * Use `create(FixedSizeBucketingConfigSchema)` to create a new message.
 */
export const FixedSizeBucketingConfigSchema: GenMessage<FixedSizeBucketingConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 66);

/**
 * Generalization function that buckets values based on ranges. The ranges and
 * replacement values are dynamically provided by the user for custom behavior,
 * such as 1-30 -> LOW, 31-65 -> MEDIUM, 66-100 -> HIGH.
 *
 * This can be used on data of type: number, long, string, timestamp.
 *
 * If the bound `Value` type differs from the type of data being transformed, we
 * will first attempt converting the type of the data to be transformed to match
 * the type of the bound before comparing.
 * See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to
 * learn more.
 *
 * @generated from message google.privacy.dlp.v2.BucketingConfig
 */
export type BucketingConfig = Message<"google.privacy.dlp.v2.BucketingConfig"> & {
  /**
   * Set of buckets. Ranges must be non-overlapping.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BucketingConfig.Bucket buckets = 1;
   */
  buckets: BucketingConfig_Bucket[];
};

/**
 * Describes the message google.privacy.dlp.v2.BucketingConfig.
 * Use `create(BucketingConfigSchema)` to create a new message.
 */
export const BucketingConfigSchema: GenMessage<BucketingConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 67);

/**
 * Bucket is represented as a range, along with replacement values.
 *
 * @generated from message google.privacy.dlp.v2.BucketingConfig.Bucket
 */
export type BucketingConfig_Bucket = Message<"google.privacy.dlp.v2.BucketingConfig.Bucket"> & {
  /**
   * Lower bound of the range, inclusive. Type should be the same as max if
   * used.
   *
   * @generated from field: google.privacy.dlp.v2.Value min = 1;
   */
  min?: Value;

  /**
   * Upper bound of the range, exclusive; type must match min.
   *
   * @generated from field: google.privacy.dlp.v2.Value max = 2;
   */
  max?: Value;

  /**
   * Required. Replacement value for this bucket.
   *
   * @generated from field: google.privacy.dlp.v2.Value replacement_value = 3;
   */
  replacementValue?: Value;
};

/**
 * Describes the message google.privacy.dlp.v2.BucketingConfig.Bucket.
 * Use `create(BucketingConfig_BucketSchema)` to create a new message.
 */
export const BucketingConfig_BucketSchema: GenMessage<BucketingConfig_Bucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 67, 0);

/**
 * Replaces an identifier with a surrogate using Format Preserving Encryption
 * (FPE) with the FFX mode of operation; however when used in the
 * `ReidentifyContent` API method, it serves the opposite function by reversing
 * the surrogate back into the original identifier. The identifier must be
 * encoded as ASCII. For a given crypto key and context, the same identifier
 * will be replaced with the same surrogate. Identifiers must be at least two
 * characters long. In the case that the identifier is the empty string, it will
 * be skipped. See
 * https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to
 * learn more.
 *
 * Note: We recommend using  CryptoDeterministicConfig for all use cases which
 * do not require preserving the input alphabet space and size, plus warrant
 * referential integrity.
 *
 * @generated from message google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig
 */
export type CryptoReplaceFfxFpeConfig = Message<"google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig"> & {
  /**
   * Required. The key used by the encryption algorithm.
   *
   * @generated from field: google.privacy.dlp.v2.CryptoKey crypto_key = 1;
   */
  cryptoKey?: CryptoKey;

  /**
   * The 'tweak', a context may be used for higher security since the same
   * identifier in two different contexts won't be given the same surrogate. If
   * the context is not set, a default tweak will be used.
   *
   * If the context is set but:
   *
   * 1. there is no record present when transforming a given value or
   * 1. the field is not present when transforming a given value,
   *
   * a default tweak will be used.
   *
   * Note that case (1) is expected when an `InfoTypeTransformation` is
   * applied to both structured and unstructured `ContentItem`s.
   * Currently, the referenced field may be of value type integer or string.
   *
   * The tweak is constructed as a sequence of bytes in big endian byte order
   * such that:
   *
   * - a 64 bit integer is encoded followed by a single byte of value 1
   * - a string is encoded in UTF-8 format followed by a single byte of value 2
   *
   * @generated from field: google.privacy.dlp.v2.FieldId context = 2;
   */
  context?: FieldId;

  /**
   * Choose an alphabet which the data being transformed will be made up of.
   *
   * @generated from oneof google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.alphabet
   */
  alphabet: {
    /**
     * Common alphabets.
     *
     * @generated from field: google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet common_alphabet = 4;
     */
    value: CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet;
    case: "commonAlphabet";
  } | {
    /**
     * This is supported by mapping these to the alphanumeric characters
     * that the FFX mode natively supports. This happens before/after
     * encryption/decryption.
     * Each character listed must appear only once.
     * Number of characters must be in the range [2, 95].
     * This must be encoded as ASCII.
     * The order of characters does not matter.
     * The full list of allowed characters is:
     * ``0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~`!@#$%^&*()_-+={[}]|\:;"'<,>.?/``
     *
     * @generated from field: string custom_alphabet = 5;
     */
    value: string;
    case: "customAlphabet";
  } | {
    /**
     * The native way to select the alphabet. Must be in the range [2, 95].
     *
     * @generated from field: int32 radix = 6;
     */
    value: number;
    case: "radix";
  } | { case: undefined; value?: undefined };

  /**
   * The custom infoType to annotate the surrogate with.
   * This annotation will be applied to the surrogate by prefixing it with
   * the name of the custom infoType followed by the number of
   * characters comprising the surrogate. The following scheme defines the
   * format: info_type_name(surrogate_character_count):surrogate
   *
   * For example, if the name of custom infoType is 'MY_TOKEN_INFO_TYPE' and
   * the surrogate is 'abc', the full replacement value
   * will be: 'MY_TOKEN_INFO_TYPE(3):abc'
   *
   * This annotation identifies the surrogate when inspecting content using the
   * custom infoType
   * [`SurrogateType`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/InspectConfig#surrogatetype).
   * This facilitates reversal of the surrogate when it occurs in free text.
   *
   * In order for inspection to work properly, the name of this infoType must
   * not occur naturally anywhere in your data; otherwise, inspection may
   * find a surrogate that does not correspond to an actual identifier.
   * Therefore, choose your custom infoType name carefully after considering
   * what your data looks like. One way to select a name that has a high chance
   * of yielding reliable detection is to include one or more unicode characters
   * that are highly improbable to exist in your data.
   * For example, assuming your data is entered from a regular ASCII keyboard,
   * the symbol with the hex code point 29DD might be used like so:
   * ⧝MY_TOKEN_TYPE
   *
   * @generated from field: google.privacy.dlp.v2.InfoType surrogate_info_type = 8;
   */
  surrogateInfoType?: InfoType;
};

/**
 * Describes the message google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.
 * Use `create(CryptoReplaceFfxFpeConfigSchema)` to create a new message.
 */
export const CryptoReplaceFfxFpeConfigSchema: GenMessage<CryptoReplaceFfxFpeConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 68);

/**
 * These are commonly used subsets of the alphabet that the FFX mode
 * natively supports. In the algorithm, the alphabet is selected using
 * the "radix". Therefore each corresponds to a particular radix.
 *
 * @generated from enum google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet
 */
export enum CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet {
  /**
   * Unused.
   *
   * @generated from enum value: FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED = 0;
   */
  FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED = 0,

  /**
   * `[0-9]` (radix of 10)
   *
   * @generated from enum value: NUMERIC = 1;
   */
  NUMERIC = 1,

  /**
   * `[0-9A-F]` (radix of 16)
   *
   * @generated from enum value: HEXADECIMAL = 2;
   */
  HEXADECIMAL = 2,

  /**
   * `[0-9A-Z]` (radix of 36)
   *
   * @generated from enum value: UPPER_CASE_ALPHA_NUMERIC = 3;
   */
  UPPER_CASE_ALPHA_NUMERIC = 3,

  /**
   * `[0-9A-Za-z]` (radix of 62)
   *
   * @generated from enum value: ALPHA_NUMERIC = 4;
   */
  ALPHA_NUMERIC = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.CryptoReplaceFfxFpeConfig.FfxCommonNativeAlphabet.
 */
export const CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabetSchema: GenEnum<CryptoReplaceFfxFpeConfig_FfxCommonNativeAlphabet> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 68, 0);

/**
 * This is a data encryption key (DEK) (as opposed to
 * a key encryption key (KEK) stored by Cloud Key Management Service
 * (Cloud KMS).
 * When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate
 * IAM policy on the KEK to ensure an attacker cannot
 * unwrap the DEK.
 *
 * @generated from message google.privacy.dlp.v2.CryptoKey
 */
export type CryptoKey = Message<"google.privacy.dlp.v2.CryptoKey"> & {
  /**
   * Sources of crypto keys.
   *
   * @generated from oneof google.privacy.dlp.v2.CryptoKey.source
   */
  source: {
    /**
     * Transient crypto key
     *
     * @generated from field: google.privacy.dlp.v2.TransientCryptoKey transient = 1;
     */
    value: TransientCryptoKey;
    case: "transient";
  } | {
    /**
     * Unwrapped crypto key
     *
     * @generated from field: google.privacy.dlp.v2.UnwrappedCryptoKey unwrapped = 2;
     */
    value: UnwrappedCryptoKey;
    case: "unwrapped";
  } | {
    /**
     * Key wrapped using Cloud KMS
     *
     * @generated from field: google.privacy.dlp.v2.KmsWrappedCryptoKey kms_wrapped = 3;
     */
    value: KmsWrappedCryptoKey;
    case: "kmsWrapped";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.CryptoKey.
 * Use `create(CryptoKeySchema)` to create a new message.
 */
export const CryptoKeySchema: GenMessage<CryptoKey> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 69);

/**
 * Use this to have a random data crypto key generated.
 * It will be discarded after the request finishes.
 *
 * @generated from message google.privacy.dlp.v2.TransientCryptoKey
 */
export type TransientCryptoKey = Message<"google.privacy.dlp.v2.TransientCryptoKey"> & {
  /**
   * Required. Name of the key.
   * This is an arbitrary string used to differentiate different keys.
   * A unique key is generated per name: two separate `TransientCryptoKey`
   * protos share the same generated key if their names are the same.
   * When the data crypto key is generated, this name is not used in any way
   * (repeating the api call will result in a different key being generated).
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.TransientCryptoKey.
 * Use `create(TransientCryptoKeySchema)` to create a new message.
 */
export const TransientCryptoKeySchema: GenMessage<TransientCryptoKey> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 70);

/**
 * Using raw keys is prone to security risks due to accidentally
 * leaking the key. Choose another type of key if possible.
 *
 * @generated from message google.privacy.dlp.v2.UnwrappedCryptoKey
 */
export type UnwrappedCryptoKey = Message<"google.privacy.dlp.v2.UnwrappedCryptoKey"> & {
  /**
   * Required. A 128/192/256 bit key.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;
};

/**
 * Describes the message google.privacy.dlp.v2.UnwrappedCryptoKey.
 * Use `create(UnwrappedCryptoKeySchema)` to create a new message.
 */
export const UnwrappedCryptoKeySchema: GenMessage<UnwrappedCryptoKey> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 71);

/**
 * Include to use an existing data crypto key wrapped by KMS.
 * The wrapped key must be a 128-, 192-, or 256-bit key.
 * Authorization requires the following IAM permissions when sending a request
 * to perform a crypto transformation using a KMS-wrapped crypto key:
 * dlp.kms.encrypt
 *
 * For more information, see [Creating a wrapped key]
 * (https://cloud.google.com/sensitive-data-protection/docs/create-wrapped-key).
 *
 * Note: When you use Cloud KMS for cryptographic operations,
 * [charges apply](https://cloud.google.com/kms/pricing).
 *
 * @generated from message google.privacy.dlp.v2.KmsWrappedCryptoKey
 */
export type KmsWrappedCryptoKey = Message<"google.privacy.dlp.v2.KmsWrappedCryptoKey"> & {
  /**
   * Required. The wrapped data crypto key.
   *
   * @generated from field: bytes wrapped_key = 1;
   */
  wrappedKey: Uint8Array;

  /**
   * Required. The resource name of the KMS CryptoKey to use for unwrapping.
   *
   * @generated from field: string crypto_key_name = 2;
   */
  cryptoKeyName: string;
};

/**
 * Describes the message google.privacy.dlp.v2.KmsWrappedCryptoKey.
 * Use `create(KmsWrappedCryptoKeySchema)` to create a new message.
 */
export const KmsWrappedCryptoKeySchema: GenMessage<KmsWrappedCryptoKey> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 72);

/**
 * Shifts dates by random number of days, with option to be consistent for the
 * same context. See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-date-shifting
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.DateShiftConfig
 */
export type DateShiftConfig = Message<"google.privacy.dlp.v2.DateShiftConfig"> & {
  /**
   * Required. Range of shift in days. Actual shift will be selected at random
   * within this range (inclusive ends). Negative means shift to earlier in
   * time. Must not be more than 365250 days (1000 years) each direction.
   *
   * For example, 3 means shift date to at most 3 days into the future.
   *
   * @generated from field: int32 upper_bound_days = 1;
   */
  upperBoundDays: number;

  /**
   * Required. For example, -5 means shift date to at most 5 days back in the
   * past.
   *
   * @generated from field: int32 lower_bound_days = 2;
   */
  lowerBoundDays: number;

  /**
   * Points to the field that contains the context, for example, an entity id.
   * If set, must also set cryptoKey. If set, shift will be consistent for the
   * given context.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId context = 3;
   */
  context?: FieldId;

  /**
   * Method for calculating shift that takes context into consideration. If
   * set, must also set context. Can only be applied to table items.
   *
   * @generated from oneof google.privacy.dlp.v2.DateShiftConfig.method
   */
  method: {
    /**
     * Causes the shift to be computed based on this key and the context. This
     * results in the same shift for the same context and crypto_key. If
     * set, must also set context. Can only be applied to table items.
     *
     * @generated from field: google.privacy.dlp.v2.CryptoKey crypto_key = 4;
     */
    value: CryptoKey;
    case: "cryptoKey";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DateShiftConfig.
 * Use `create(DateShiftConfigSchema)` to create a new message.
 */
export const DateShiftConfigSchema: GenMessage<DateShiftConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 73);

/**
 * A type of transformation that will scan unstructured text and
 * apply various `PrimitiveTransformation`s to each finding, where the
 * transformation is applied to only values that were identified as a specific
 * info_type.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeTransformations
 */
export type InfoTypeTransformations = Message<"google.privacy.dlp.v2.InfoTypeTransformations"> & {
  /**
   * Required. Transformation for each infoType. Cannot specify more than one
   * for a given infoType.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation transformations = 1;
   */
  transformations: InfoTypeTransformations_InfoTypeTransformation[];
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeTransformations.
 * Use `create(InfoTypeTransformationsSchema)` to create a new message.
 */
export const InfoTypeTransformationsSchema: GenMessage<InfoTypeTransformations> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 74);

/**
 * A transformation to apply to text that is identified as a specific
 * info_type.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation
 */
export type InfoTypeTransformations_InfoTypeTransformation = Message<"google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation"> & {
  /**
   * InfoTypes to apply the transformation to. An empty list will cause
   * this transformation to apply to all findings that correspond to
   * infoTypes that were requested in `InspectConfig`.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoType info_types = 1;
   */
  infoTypes: InfoType[];

  /**
   * Required. Primitive transformation to apply to the infoType.
   *
   * @generated from field: google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 2;
   */
  primitiveTransformation?: PrimitiveTransformation;
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeTransformations.InfoTypeTransformation.
 * Use `create(InfoTypeTransformations_InfoTypeTransformationSchema)` to create a new message.
 */
export const InfoTypeTransformations_InfoTypeTransformationSchema: GenMessage<InfoTypeTransformations_InfoTypeTransformation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 74, 0);

/**
 * The transformation to apply to the field.
 *
 * @generated from message google.privacy.dlp.v2.FieldTransformation
 */
export type FieldTransformation = Message<"google.privacy.dlp.v2.FieldTransformation"> & {
  /**
   * Required. Input field(s) to apply the transformation to.
   * When you have columns that reference their position within a list,
   * omit the index from the FieldId. FieldId name matching ignores the index.
   * For example, instead of "contact.nums[0].type", use "contact.nums.type".
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldId fields = 1;
   */
  fields: FieldId[];

  /**
   * Only apply the transformation if the condition evaluates to true for the
   * given `RecordCondition`. The conditions are allowed to reference fields
   * that are not used in the actual transformation.
   *
   * Example Use Cases:
   *
   * - Apply a different bucket transformation to an age column if the zip code
   * column for the same record is within a specific range.
   * - Redact a field if the date of birth field is greater than 85.
   *
   * @generated from field: google.privacy.dlp.v2.RecordCondition condition = 3;
   */
  condition?: RecordCondition;

  /**
   * Transformation to apply. [required]
   *
   * @generated from oneof google.privacy.dlp.v2.FieldTransformation.transformation
   */
  transformation: {
    /**
     * Apply the transformation to the entire field.
     *
     * @generated from field: google.privacy.dlp.v2.PrimitiveTransformation primitive_transformation = 4;
     */
    value: PrimitiveTransformation;
    case: "primitiveTransformation";
  } | {
    /**
     * Treat the contents of the field as free text, and selectively
     * transform content that matches an `InfoType`.
     *
     * @generated from field: google.privacy.dlp.v2.InfoTypeTransformations info_type_transformations = 5;
     */
    value: InfoTypeTransformations;
    case: "infoTypeTransformations";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.FieldTransformation.
 * Use `create(FieldTransformationSchema)` to create a new message.
 */
export const FieldTransformationSchema: GenMessage<FieldTransformation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 75);

/**
 * A type of transformation that is applied over structured data such as a
 * table.
 *
 * @generated from message google.privacy.dlp.v2.RecordTransformations
 */
export type RecordTransformations = Message<"google.privacy.dlp.v2.RecordTransformations"> & {
  /**
   * Transform the record by applying various field transformations.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldTransformation field_transformations = 1;
   */
  fieldTransformations: FieldTransformation[];

  /**
   * Configuration defining which records get suppressed entirely. Records that
   * match any suppression rule are omitted from the output.
   *
   * @generated from field: repeated google.privacy.dlp.v2.RecordSuppression record_suppressions = 2;
   */
  recordSuppressions: RecordSuppression[];
};

/**
 * Describes the message google.privacy.dlp.v2.RecordTransformations.
 * Use `create(RecordTransformationsSchema)` to create a new message.
 */
export const RecordTransformationsSchema: GenMessage<RecordTransformations> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 76);

/**
 * Configuration to suppress records whose suppression conditions evaluate to
 * true.
 *
 * @generated from message google.privacy.dlp.v2.RecordSuppression
 */
export type RecordSuppression = Message<"google.privacy.dlp.v2.RecordSuppression"> & {
  /**
   * A condition that when it evaluates to true will result in the record being
   * evaluated to be suppressed from the transformed content.
   *
   * @generated from field: google.privacy.dlp.v2.RecordCondition condition = 1;
   */
  condition?: RecordCondition;
};

/**
 * Describes the message google.privacy.dlp.v2.RecordSuppression.
 * Use `create(RecordSuppressionSchema)` to create a new message.
 */
export const RecordSuppressionSchema: GenMessage<RecordSuppression> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 77);

/**
 * A condition for determining whether a transformation should be applied to
 * a field.
 *
 * @generated from message google.privacy.dlp.v2.RecordCondition
 */
export type RecordCondition = Message<"google.privacy.dlp.v2.RecordCondition"> & {
  /**
   * An expression.
   *
   * @generated from field: google.privacy.dlp.v2.RecordCondition.Expressions expressions = 3;
   */
  expressions?: RecordCondition_Expressions;
};

/**
 * Describes the message google.privacy.dlp.v2.RecordCondition.
 * Use `create(RecordConditionSchema)` to create a new message.
 */
export const RecordConditionSchema: GenMessage<RecordCondition> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 78);

/**
 * The field type of `value` and `field` do not need to match to be
 * considered equal, but not all comparisons are possible.
 * EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types,
 * but all other comparisons are invalid with incompatible types.
 * A `value` of type:
 *
 * - `string` can be compared against all other types
 * - `boolean` can only be compared against other booleans
 * - `integer` can be compared against doubles or a string if the string value
 * can be parsed as an integer.
 * - `double` can be compared against integers or a string if the string can
 * be parsed as a double.
 * - `Timestamp` can be compared against strings in RFC 3339 date string
 * format.
 * - `TimeOfDay` can be compared against timestamps and strings in the format
 * of 'HH:mm:ss'.
 *
 * If we fail to compare do to type mismatch, a warning will be given and
 * the condition will evaluate to false.
 *
 * @generated from message google.privacy.dlp.v2.RecordCondition.Condition
 */
export type RecordCondition_Condition = Message<"google.privacy.dlp.v2.RecordCondition.Condition"> & {
  /**
   * Required. Field within the record this condition is evaluated against.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 1;
   */
  field?: FieldId;

  /**
   * Required. Operator used to compare the field or infoType to the value.
   *
   * @generated from field: google.privacy.dlp.v2.RelationalOperator operator = 3;
   */
  operator: RelationalOperator;

  /**
   * Value to compare against. [Mandatory, except for `EXISTS` tests.]
   *
   * @generated from field: google.privacy.dlp.v2.Value value = 4;
   */
  value?: Value;
};

/**
 * Describes the message google.privacy.dlp.v2.RecordCondition.Condition.
 * Use `create(RecordCondition_ConditionSchema)` to create a new message.
 */
export const RecordCondition_ConditionSchema: GenMessage<RecordCondition_Condition> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 78, 0);

/**
 * A collection of conditions.
 *
 * @generated from message google.privacy.dlp.v2.RecordCondition.Conditions
 */
export type RecordCondition_Conditions = Message<"google.privacy.dlp.v2.RecordCondition.Conditions"> & {
  /**
   * A collection of conditions.
   *
   * @generated from field: repeated google.privacy.dlp.v2.RecordCondition.Condition conditions = 1;
   */
  conditions: RecordCondition_Condition[];
};

/**
 * Describes the message google.privacy.dlp.v2.RecordCondition.Conditions.
 * Use `create(RecordCondition_ConditionsSchema)` to create a new message.
 */
export const RecordCondition_ConditionsSchema: GenMessage<RecordCondition_Conditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 78, 1);

/**
 * An expression, consisting of an operator and conditions.
 *
 * @generated from message google.privacy.dlp.v2.RecordCondition.Expressions
 */
export type RecordCondition_Expressions = Message<"google.privacy.dlp.v2.RecordCondition.Expressions"> & {
  /**
   * The operator to apply to the result of conditions. Default and currently
   * only supported value is `AND`.
   *
   * @generated from field: google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator logical_operator = 1;
   */
  logicalOperator: RecordCondition_Expressions_LogicalOperator;

  /**
   * Expression types.
   *
   * @generated from oneof google.privacy.dlp.v2.RecordCondition.Expressions.type
   */
  type: {
    /**
     * Conditions to apply to the expression.
     *
     * @generated from field: google.privacy.dlp.v2.RecordCondition.Conditions conditions = 3;
     */
    value: RecordCondition_Conditions;
    case: "conditions";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.RecordCondition.Expressions.
 * Use `create(RecordCondition_ExpressionsSchema)` to create a new message.
 */
export const RecordCondition_ExpressionsSchema: GenMessage<RecordCondition_Expressions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 78, 2);

/**
 * Logical operators for conditional checks.
 *
 * @generated from enum google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator
 */
export enum RecordCondition_Expressions_LogicalOperator {
  /**
   * Unused
   *
   * @generated from enum value: LOGICAL_OPERATOR_UNSPECIFIED = 0;
   */
  LOGICAL_OPERATOR_UNSPECIFIED = 0,

  /**
   * Conditional AND
   *
   * @generated from enum value: AND = 1;
   */
  AND = 1,
}

/**
 * Describes the enum google.privacy.dlp.v2.RecordCondition.Expressions.LogicalOperator.
 */
export const RecordCondition_Expressions_LogicalOperatorSchema: GenEnum<RecordCondition_Expressions_LogicalOperator> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 78, 2, 0);

/**
 * Overview of the modifications that occurred.
 *
 * @generated from message google.privacy.dlp.v2.TransformationOverview
 */
export type TransformationOverview = Message<"google.privacy.dlp.v2.TransformationOverview"> & {
  /**
   * Total size in bytes that were transformed in some way.
   *
   * @generated from field: int64 transformed_bytes = 2;
   */
  transformedBytes: bigint;

  /**
   * Transformations applied to the dataset.
   *
   * @generated from field: repeated google.privacy.dlp.v2.TransformationSummary transformation_summaries = 3;
   */
  transformationSummaries: TransformationSummary[];
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationOverview.
 * Use `create(TransformationOverviewSchema)` to create a new message.
 */
export const TransformationOverviewSchema: GenMessage<TransformationOverview> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 79);

/**
 * Summary of a single transformation.
 * Only one of 'transformation', 'field_transformation', or 'record_suppress'
 * will be set.
 *
 * @generated from message google.privacy.dlp.v2.TransformationSummary
 */
export type TransformationSummary = Message<"google.privacy.dlp.v2.TransformationSummary"> & {
  /**
   * Set if the transformation was limited to a specific InfoType.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Set if the transformation was limited to a specific FieldId.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field = 2;
   */
  field?: FieldId;

  /**
   * The specific transformation these stats apply to.
   *
   * @generated from field: google.privacy.dlp.v2.PrimitiveTransformation transformation = 3;
   */
  transformation?: PrimitiveTransformation;

  /**
   * The field transformation that was applied.
   * If multiple field transformations are requested for a single field,
   * this list will contain all of them; otherwise, only one is supplied.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FieldTransformation field_transformations = 5;
   */
  fieldTransformations: FieldTransformation[];

  /**
   * The specific suppression option these stats apply to.
   *
   * @generated from field: google.privacy.dlp.v2.RecordSuppression record_suppress = 6;
   */
  recordSuppress?: RecordSuppression;

  /**
   * Collection of all transformations that took place or had an error.
   *
   * @generated from field: repeated google.privacy.dlp.v2.TransformationSummary.SummaryResult results = 4;
   */
  results: TransformationSummary_SummaryResult[];

  /**
   * Total size in bytes that were transformed in some way.
   *
   * @generated from field: int64 transformed_bytes = 7;
   */
  transformedBytes: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationSummary.
 * Use `create(TransformationSummarySchema)` to create a new message.
 */
export const TransformationSummarySchema: GenMessage<TransformationSummary> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 80);

/**
 * A collection that informs the user the number of times a particular
 * `TransformationResultCode` and error details occurred.
 *
 * @generated from message google.privacy.dlp.v2.TransformationSummary.SummaryResult
 */
export type TransformationSummary_SummaryResult = Message<"google.privacy.dlp.v2.TransformationSummary.SummaryResult"> & {
  /**
   * Number of transformations counted by this result.
   *
   * @generated from field: int64 count = 1;
   */
  count: bigint;

  /**
   * Outcome of the transformation.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationSummary.TransformationResultCode code = 2;
   */
  code: TransformationSummary_TransformationResultCode;

  /**
   * A place for warnings or errors to show up if a transformation didn't
   * work as expected.
   *
   * @generated from field: string details = 3;
   */
  details: string;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationSummary.SummaryResult.
 * Use `create(TransformationSummary_SummaryResultSchema)` to create a new message.
 */
export const TransformationSummary_SummaryResultSchema: GenMessage<TransformationSummary_SummaryResult> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 80, 0);

/**
 * Possible outcomes of transformations.
 *
 * @generated from enum google.privacy.dlp.v2.TransformationSummary.TransformationResultCode
 */
export enum TransformationSummary_TransformationResultCode {
  /**
   * Unused
   *
   * @generated from enum value: TRANSFORMATION_RESULT_CODE_UNSPECIFIED = 0;
   */
  TRANSFORMATION_RESULT_CODE_UNSPECIFIED = 0,

  /**
   * Transformation completed without an error.
   *
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * Transformation had an error.
   *
   * @generated from enum value: ERROR = 2;
   */
  ERROR = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.TransformationSummary.TransformationResultCode.
 */
export const TransformationSummary_TransformationResultCodeSchema: GenEnum<TransformationSummary_TransformationResultCode> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 80, 0);

/**
 * A flattened description of a `PrimitiveTransformation` or
 * `RecordSuppression`.
 *
 * @generated from message google.privacy.dlp.v2.TransformationDescription
 */
export type TransformationDescription = Message<"google.privacy.dlp.v2.TransformationDescription"> & {
  /**
   * The transformation type.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationType type = 1;
   */
  type: TransformationType;

  /**
   * A description of the transformation. This is empty for a
   * RECORD_SUPPRESSION, or is the output of calling toString() on the
   * `PrimitiveTransformation` protocol buffer message for any other type of
   * transformation.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * A human-readable string representation of the `RecordCondition`
   * corresponding to this transformation. Set if a `RecordCondition` was used
   * to determine whether or not to apply this transformation.
   *
   * Examples:
   *     * (age_field > 85)
   *     * (age_field <= 18)
   *     * (zip_field exists)
   *     * (zip_field == 01234) && (city_field != "Springville")
   *     * (zip_field == 01234) && (age_field <= 18) && (city_field exists)
   *
   * @generated from field: string condition = 3;
   */
  condition: string;

  /**
   * Set if the transformation was limited to a specific `InfoType`.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 4;
   */
  infoType?: InfoType;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationDescription.
 * Use `create(TransformationDescriptionSchema)` to create a new message.
 */
export const TransformationDescriptionSchema: GenMessage<TransformationDescription> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 81);

/**
 * Details about a single transformation. This object contains a description of
 * the transformation, information about whether the transformation was
 * successfully applied, and the precise location where the transformation
 * occurred. These details are stored in a user-specified BigQuery table.
 *
 * @generated from message google.privacy.dlp.v2.TransformationDetails
 */
export type TransformationDetails = Message<"google.privacy.dlp.v2.TransformationDetails"> & {
  /**
   * The name of the job that completed the transformation.
   *
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * The top level name of the container where the transformation is located
   * (this will be the source file name or table name).
   *
   * @generated from field: string container_name = 2;
   */
  containerName: string;

  /**
   * Description of transformation. This would only contain more than one
   * element if there were multiple matching transformations and which one to
   * apply was ambiguous. Not set for states that contain no transformation,
   * currently only state that contains no transformation is
   * TransformationResultStateType.METADATA_UNRETRIEVABLE.
   *
   * @generated from field: repeated google.privacy.dlp.v2.TransformationDescription transformation = 3;
   */
  transformation: TransformationDescription[];

  /**
   * Status of the transformation, if transformation was not successful, this
   * will specify what caused it to fail, otherwise it will show that the
   * transformation was successful.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationResultStatus status_details = 4;
   */
  statusDetails?: TransformationResultStatus;

  /**
   * The number of bytes that were transformed. If transformation was
   * unsuccessful or did not take place because there was no content to
   * transform, this will be zero.
   *
   * @generated from field: int64 transformed_bytes = 5;
   */
  transformedBytes: bigint;

  /**
   * The precise location of the transformed content in the original container.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationLocation transformation_location = 6;
   */
  transformationLocation?: TransformationLocation;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationDetails.
 * Use `create(TransformationDetailsSchema)` to create a new message.
 */
export const TransformationDetailsSchema: GenMessage<TransformationDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 82);

/**
 * Specifies the location of a transformation.
 *
 * @generated from message google.privacy.dlp.v2.TransformationLocation
 */
export type TransformationLocation = Message<"google.privacy.dlp.v2.TransformationLocation"> & {
  /**
   * Location type.
   *
   * @generated from oneof google.privacy.dlp.v2.TransformationLocation.location_type
   */
  locationType: {
    /**
     * For infotype transformations, link to the corresponding findings ID so
     * that location information does not need to be duplicated. Each findings
     * ID correlates to an entry in the findings output table, this table only
     * gets created when users specify to save findings (add the save findings
     * action to the request).
     *
     * @generated from field: string finding_id = 1;
     */
    value: string;
    case: "findingId";
  } | {
    /**
     * For record transformations, provide a field and container information.
     *
     * @generated from field: google.privacy.dlp.v2.RecordTransformation record_transformation = 2;
     */
    value: RecordTransformation;
    case: "recordTransformation";
  } | { case: undefined; value?: undefined };

  /**
   * Information about the functionality of the container where this finding
   * occurred, if available.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationContainerType container_type = 3;
   */
  containerType: TransformationContainerType;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationLocation.
 * Use `create(TransformationLocationSchema)` to create a new message.
 */
export const TransformationLocationSchema: GenMessage<TransformationLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 83);

/**
 * The field in a record to transform.
 *
 * @generated from message google.privacy.dlp.v2.RecordTransformation
 */
export type RecordTransformation = Message<"google.privacy.dlp.v2.RecordTransformation"> & {
  /**
   * For record transformations, provide a field.
   *
   * @generated from field: google.privacy.dlp.v2.FieldId field_id = 1;
   */
  fieldId?: FieldId;

  /**
   * Findings container modification timestamp, if applicable.
   *
   * @generated from field: google.protobuf.Timestamp container_timestamp = 2;
   */
  containerTimestamp?: Timestamp;

  /**
   * Container version, if available ("generation" for Cloud Storage).
   *
   * @generated from field: string container_version = 3;
   */
  containerVersion: string;
};

/**
 * Describes the message google.privacy.dlp.v2.RecordTransformation.
 * Use `create(RecordTransformationSchema)` to create a new message.
 */
export const RecordTransformationSchema: GenMessage<RecordTransformation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 84);

/**
 * The outcome of a transformation.
 *
 * @generated from message google.privacy.dlp.v2.TransformationResultStatus
 */
export type TransformationResultStatus = Message<"google.privacy.dlp.v2.TransformationResultStatus"> & {
  /**
   * Transformation result status type, this will be either SUCCESS, or it will
   * be the reason for why the transformation was not completely successful.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationResultStatusType result_status_type = 1;
   */
  resultStatusType: TransformationResultStatusType;

  /**
   * Detailed error codes and messages
   *
   * @generated from field: google.rpc.Status details = 2;
   */
  details?: Status;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationResultStatus.
 * Use `create(TransformationResultStatusSchema)` to create a new message.
 */
export const TransformationResultStatusSchema: GenMessage<TransformationResultStatus> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 85);

/**
 * Config for storing transformation details.
 *
 * @generated from message google.privacy.dlp.v2.TransformationDetailsStorageConfig
 */
export type TransformationDetailsStorageConfig = Message<"google.privacy.dlp.v2.TransformationDetailsStorageConfig"> & {
  /**
   * Location to store the transformation summary.
   *
   * @generated from oneof google.privacy.dlp.v2.TransformationDetailsStorageConfig.type
   */
  type: {
    /**
     * The BigQuery table in which to store the output. This may be an existing
     * table or in a new table in an existing dataset.
     * If table_id is not set a new one will be generated for you with the
     * following format:
     * dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific
     * time zone will be used for generating the date details.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryTable table = 1;
     */
    value: BigQueryTable;
    case: "table";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationDetailsStorageConfig.
 * Use `create(TransformationDetailsStorageConfigSchema)` to create a new message.
 */
export const TransformationDetailsStorageConfigSchema: GenMessage<TransformationDetailsStorageConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 86);

/**
 * Schedule for inspect job triggers.
 *
 * @generated from message google.privacy.dlp.v2.Schedule
 */
export type Schedule = Message<"google.privacy.dlp.v2.Schedule"> & {
  /**
   * Type of schedule.
   *
   * @generated from oneof google.privacy.dlp.v2.Schedule.option
   */
  option: {
    /**
     * With this option a job is started on a regular periodic basis. For
     * example: every day (86400 seconds).
     *
     * A scheduled start time will be skipped if the previous
     * execution has not ended when its scheduled time occurs.
     *
     * This value must be set to a time duration greater than or equal
     * to 1 day and can be no longer than 60 days.
     *
     * @generated from field: google.protobuf.Duration recurrence_period_duration = 1;
     */
    value: Duration;
    case: "recurrencePeriodDuration";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.Schedule.
 * Use `create(ScheduleSchema)` to create a new message.
 */
export const ScheduleSchema: GenMessage<Schedule> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 87);

/**
 * Job trigger option for hybrid jobs. Jobs must be manually created
 * and finished.
 *
 * @generated from message google.privacy.dlp.v2.Manual
 */
export type Manual = Message<"google.privacy.dlp.v2.Manual"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Manual.
 * Use `create(ManualSchema)` to create a new message.
 */
export const ManualSchema: GenMessage<Manual> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 88);

/**
 * The inspectTemplate contains a configuration (set of types of sensitive data
 * to be detected) to be used anywhere you otherwise would normally specify
 * InspectConfig. See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-templates to
 * learn more.
 *
 * @generated from message google.privacy.dlp.v2.InspectTemplate
 */
export type InspectTemplate = Message<"google.privacy.dlp.v2.InspectTemplate"> & {
  /**
   * Output only. The template name.
   *
   * The template will have one of the following formats:
   * `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR
   * `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`;
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Display name (max 256 chars).
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Short description (max 256 chars).
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Output only. The creation timestamp of an inspectTemplate.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of an inspectTemplate.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * The core content of the template. Configuration of the scanning process.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 6;
   */
  inspectConfig?: InspectConfig;
};

/**
 * Describes the message google.privacy.dlp.v2.InspectTemplate.
 * Use `create(InspectTemplateSchema)` to create a new message.
 */
export const InspectTemplateSchema: GenMessage<InspectTemplate> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 89);

/**
 * DeidentifyTemplates contains instructions on how to de-identify content.
 * See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-templates to
 * learn more.
 *
 * @generated from message google.privacy.dlp.v2.DeidentifyTemplate
 */
export type DeidentifyTemplate = Message<"google.privacy.dlp.v2.DeidentifyTemplate"> & {
  /**
   * Output only. The template name.
   *
   * The template will have one of the following formats:
   * `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR
   * `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Display name (max 256 chars).
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * Short description (max 256 chars).
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Output only. The creation timestamp of an inspectTemplate.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of an inspectTemplate.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 5;
   */
  updateTime?: Timestamp;

  /**
   * The core content of the template.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyConfig deidentify_config = 6;
   */
  deidentifyConfig?: DeidentifyConfig;
};

/**
 * Describes the message google.privacy.dlp.v2.DeidentifyTemplate.
 * Use `create(DeidentifyTemplateSchema)` to create a new message.
 */
export const DeidentifyTemplateSchema: GenMessage<DeidentifyTemplate> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 90);

/**
 * Details information about an error encountered during job execution or
 * the results of an unsuccessful activation of the JobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.Error
 */
export type Error = Message<"google.privacy.dlp.v2.Error"> & {
  /**
   * Detailed error codes and messages.
   *
   * @generated from field: google.rpc.Status details = 1;
   */
  details?: Status;

  /**
   * The times the error occurred. List includes the oldest timestamp and the
   * last 9 timestamps.
   *
   * @generated from field: repeated google.protobuf.Timestamp timestamps = 2;
   */
  timestamps: Timestamp[];

  /**
   * Additional information about the error.
   *
   * @generated from field: google.privacy.dlp.v2.Error.ErrorExtraInfo extra_info = 4;
   */
  extraInfo: Error_ErrorExtraInfo;
};

/**
 * Describes the message google.privacy.dlp.v2.Error.
 * Use `create(ErrorSchema)` to create a new message.
 */
export const ErrorSchema: GenMessage<Error> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 91);

/**
 * Additional information about the error.
 *
 * @generated from enum google.privacy.dlp.v2.Error.ErrorExtraInfo
 */
export enum Error_ErrorExtraInfo {
  /**
   * Unused.
   *
   * @generated from enum value: ERROR_INFO_UNSPECIFIED = 0;
   */
  ERROR_INFO_UNSPECIFIED = 0,

  /**
   * Image scan is not available in the region.
   *
   * @generated from enum value: IMAGE_SCAN_UNAVAILABLE_IN_REGION = 1;
   */
  IMAGE_SCAN_UNAVAILABLE_IN_REGION = 1,

  /**
   * File store cluster is not supported for profile generation.
   *
   * @generated from enum value: FILE_STORE_CLUSTER_UNSUPPORTED = 2;
   */
  FILE_STORE_CLUSTER_UNSUPPORTED = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.Error.ErrorExtraInfo.
 */
export const Error_ErrorExtraInfoSchema: GenEnum<Error_ErrorExtraInfo> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 91, 0);

/**
 * Contains a configuration to make API calls on a repeating basis.
 * See
 * https://cloud.google.com/sensitive-data-protection/docs/concepts-job-triggers
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.JobTrigger
 */
export type JobTrigger = Message<"google.privacy.dlp.v2.JobTrigger"> & {
  /**
   * Unique resource name for the triggeredJob, assigned by the service when the
   * triggeredJob is created, for example
   * `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Display name (max 100 chars)
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * User provided description (max 256 chars)
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * The configuration details for the specific type of job to run.
   *
   * @generated from oneof google.privacy.dlp.v2.JobTrigger.job
   */
  job: {
    /**
     * For inspect jobs, a snapshot of the configuration.
     *
     * @generated from field: google.privacy.dlp.v2.InspectJobConfig inspect_job = 4;
     */
    value: InspectJobConfig;
    case: "inspectJob";
  } | { case: undefined; value?: undefined };

  /**
   * A list of triggers which will be OR'ed together. Only one in the list
   * needs to trigger for a job to be started. The list may contain only
   * a single Schedule trigger and must have at least one object.
   *
   * @generated from field: repeated google.privacy.dlp.v2.JobTrigger.Trigger triggers = 5;
   */
  triggers: JobTrigger_Trigger[];

  /**
   * Output only. A stream of errors encountered when the trigger was activated.
   * Repeated errors may result in the JobTrigger automatically being paused.
   * Will return the last 100 errors. Whenever the JobTrigger is modified
   * this list will be cleared.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 6;
   */
  errors: Error[];

  /**
   * Output only. The creation timestamp of a triggeredJob.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of a triggeredJob.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The timestamp of the last time this trigger executed.
   *
   * @generated from field: google.protobuf.Timestamp last_run_time = 9;
   */
  lastRunTime?: Timestamp;

  /**
   * Required. A status for this trigger.
   *
   * @generated from field: google.privacy.dlp.v2.JobTrigger.Status status = 10;
   */
  status: JobTrigger_Status;
};

/**
 * Describes the message google.privacy.dlp.v2.JobTrigger.
 * Use `create(JobTriggerSchema)` to create a new message.
 */
export const JobTriggerSchema: GenMessage<JobTrigger> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 92);

/**
 * What event needs to occur for a new job to be started.
 *
 * @generated from message google.privacy.dlp.v2.JobTrigger.Trigger
 */
export type JobTrigger_Trigger = Message<"google.privacy.dlp.v2.JobTrigger.Trigger"> & {
  /**
   * What event needs to occur for a new job to be started.
   *
   * @generated from oneof google.privacy.dlp.v2.JobTrigger.Trigger.trigger
   */
  trigger: {
    /**
     * Create a job on a repeating basis based on the elapse of time.
     *
     * @generated from field: google.privacy.dlp.v2.Schedule schedule = 1;
     */
    value: Schedule;
    case: "schedule";
  } | {
    /**
     * For use with hybrid jobs. Jobs must be manually created and finished.
     *
     * @generated from field: google.privacy.dlp.v2.Manual manual = 2;
     */
    value: Manual;
    case: "manual";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.JobTrigger.Trigger.
 * Use `create(JobTrigger_TriggerSchema)` to create a new message.
 */
export const JobTrigger_TriggerSchema: GenMessage<JobTrigger_Trigger> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 92, 0);

/**
 * Whether the trigger is currently active. If PAUSED or CANCELLED, no jobs
 * will be created with this configuration. The service may automatically
 * pause triggers experiencing frequent errors. To restart a job, set the
 * status to HEALTHY after correcting user errors.
 *
 * @generated from enum google.privacy.dlp.v2.JobTrigger.Status
 */
export enum JobTrigger_Status {
  /**
   * Unused.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * Trigger is healthy.
   *
   * @generated from enum value: HEALTHY = 1;
   */
  HEALTHY = 1,

  /**
   * Trigger is temporarily paused.
   *
   * @generated from enum value: PAUSED = 2;
   */
  PAUSED = 2,

  /**
   * Trigger is cancelled and can not be resumed.
   *
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.JobTrigger.Status.
 */
export const JobTrigger_StatusSchema: GenEnum<JobTrigger_Status> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 92, 0);

/**
 * A task to execute on the completion of a job.
 * See https://cloud.google.com/sensitive-data-protection/docs/concepts-actions
 * to learn more.
 *
 * @generated from message google.privacy.dlp.v2.Action
 */
export type Action = Message<"google.privacy.dlp.v2.Action"> & {
  /**
   * Extra events to execute after the job has finished.
   *
   * @generated from oneof google.privacy.dlp.v2.Action.action
   */
  action: {
    /**
     * Save resulting findings in a provided location.
     *
     * @generated from field: google.privacy.dlp.v2.Action.SaveFindings save_findings = 1;
     */
    value: Action_SaveFindings;
    case: "saveFindings";
  } | {
    /**
     * Publish a notification to a Pub/Sub topic.
     *
     * @generated from field: google.privacy.dlp.v2.Action.PublishToPubSub pub_sub = 2;
     */
    value: Action_PublishToPubSub;
    case: "pubSub";
  } | {
    /**
     * Publish summary to Cloud Security Command Center (Alpha).
     *
     * @generated from field: google.privacy.dlp.v2.Action.PublishSummaryToCscc publish_summary_to_cscc = 3;
     */
    value: Action_PublishSummaryToCscc;
    case: "publishSummaryToCscc";
  } | {
    /**
     * Publish findings to Cloud Datahub.
     *
     * @generated from field: google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog publish_findings_to_cloud_data_catalog = 5;
     */
    value: Action_PublishFindingsToCloudDataCatalog;
    case: "publishFindingsToCloudDataCatalog";
  } | {
    /**
     * Create a de-identified copy of the input data.
     *
     * @generated from field: google.privacy.dlp.v2.Action.Deidentify deidentify = 7;
     */
    value: Action_Deidentify;
    case: "deidentify";
  } | {
    /**
     * Sends an email when the job completes. The email goes to IAM project
     * owners and technical [Essential
     * Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
     *
     * @generated from field: google.privacy.dlp.v2.Action.JobNotificationEmails job_notification_emails = 8;
     */
    value: Action_JobNotificationEmails;
    case: "jobNotificationEmails";
  } | {
    /**
     * Enable Stackdriver metric dlp.googleapis.com/finding_count.
     *
     * @generated from field: google.privacy.dlp.v2.Action.PublishToStackdriver publish_to_stackdriver = 9;
     */
    value: Action_PublishToStackdriver;
    case: "publishToStackdriver";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93);

/**
 * If set, the detailed findings will be persisted to the specified
 * OutputStorageConfig. Only a single instance of this action can be
 * specified.
 * Compatible with: Inspect, Risk
 *
 * @generated from message google.privacy.dlp.v2.Action.SaveFindings
 */
export type Action_SaveFindings = Message<"google.privacy.dlp.v2.Action.SaveFindings"> & {
  /**
   * Location to store findings outside of DLP.
   *
   * @generated from field: google.privacy.dlp.v2.OutputStorageConfig output_config = 1;
   */
  outputConfig?: OutputStorageConfig;
};

/**
 * Describes the message google.privacy.dlp.v2.Action.SaveFindings.
 * Use `create(Action_SaveFindingsSchema)` to create a new message.
 */
export const Action_SaveFindingsSchema: GenMessage<Action_SaveFindings> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 0);

/**
 * Publish a message into a given Pub/Sub topic when DlpJob has completed. The
 * message contains a single field, `DlpJobName`, which is equal to the
 * finished job's
 * [`DlpJob.name`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/projects.dlpJobs#DlpJob).
 * Compatible with: Inspect, Risk
 *
 * @generated from message google.privacy.dlp.v2.Action.PublishToPubSub
 */
export type Action_PublishToPubSub = Message<"google.privacy.dlp.v2.Action.PublishToPubSub"> & {
  /**
   * Cloud Pub/Sub topic to send notifications to. The topic must have given
   * publishing access rights to the DLP API service account executing
   * the long running DlpJob sending the notifications.
   * Format is projects/{project}/topics/{topic}.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;
};

/**
 * Describes the message google.privacy.dlp.v2.Action.PublishToPubSub.
 * Use `create(Action_PublishToPubSubSchema)` to create a new message.
 */
export const Action_PublishToPubSubSchema: GenMessage<Action_PublishToPubSub> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 1);

/**
 * Publish the result summary of a DlpJob to [Security Command
 * Center](https://cloud.google.com/security-command-center). This action is
 * available for only projects that belong to an organization. This action
 * publishes the count of finding instances and their infoTypes. The summary
 * of findings are persisted in Security Command Center and are governed by
 * [service-specific policies for Security Command
 * Center](https://cloud.google.com/terms/service-terms). Only a single
 * instance of this action can be specified. Compatible with: Inspect
 *
 * @generated from message google.privacy.dlp.v2.Action.PublishSummaryToCscc
 */
export type Action_PublishSummaryToCscc = Message<"google.privacy.dlp.v2.Action.PublishSummaryToCscc"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Action.PublishSummaryToCscc.
 * Use `create(Action_PublishSummaryToCsccSchema)` to create a new message.
 */
export const Action_PublishSummaryToCsccSchema: GenMessage<Action_PublishSummaryToCscc> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 2);

/**
 * Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag
 * templates are applied to the resource that Cloud DLP scanned. Data
 * Catalog tag templates are stored in the same project and region where the
 * BigQuery table exists. For Cloud DLP to create and apply the tag template,
 * the Cloud DLP service agent must have the
 * `roles/datacatalog.tagTemplateOwner` permission on the project. The tag
 * template contains fields summarizing the results of the DlpJob. Any field
 * values previously written by another DlpJob are deleted. [InfoType naming
 * patterns][google.privacy.dlp.v2.InfoType] are strictly enforced when using
 * this feature.
 *
 * Findings are persisted in Data Catalog storage and are governed by
 * service-specific policies for Data Catalog. For more information, see
 * [Service Specific Terms](https://cloud.google.com/terms/service-terms).
 *
 * Only a single instance of this action can be specified. This action is
 * allowed only if all resources being scanned are BigQuery tables.
 * Compatible with: Inspect
 *
 * @generated from message google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog
 */
export type Action_PublishFindingsToCloudDataCatalog = Message<"google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Action.PublishFindingsToCloudDataCatalog.
 * Use `create(Action_PublishFindingsToCloudDataCatalogSchema)` to create a new message.
 */
export const Action_PublishFindingsToCloudDataCatalogSchema: GenMessage<Action_PublishFindingsToCloudDataCatalog> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 3);

/**
 * Create a de-identified copy of the requested table or files.
 *
 * A TransformationDetail will be created for each transformation.
 *
 * If any rows in BigQuery are skipped during de-identification
 * (transformation errors or row size exceeds BigQuery insert API limits) they
 * are placed in the failure output table. If the original row exceeds
 * the BigQuery insert API limit it will be truncated when written to the
 * failure output table. The failure output table can be set in the
 * action.deidentify.output.big_query_output.deidentified_failure_output_table
 * field, if no table is set, a table will be automatically created in the
 * same project and dataset as the original table.
 *
 * Compatible with: Inspect
 *
 * @generated from message google.privacy.dlp.v2.Action.Deidentify
 */
export type Action_Deidentify = Message<"google.privacy.dlp.v2.Action.Deidentify"> & {
  /**
   * User specified deidentify templates and configs for structured,
   * unstructured, and image files.
   *
   * @generated from field: google.privacy.dlp.v2.TransformationConfig transformation_config = 7;
   */
  transformationConfig?: TransformationConfig;

  /**
   * Config for storing transformation details. This is separate from the
   * de-identified content, and contains metadata about the successful
   * transformations and/or failures that occurred while de-identifying. This
   * needs to be set in order for users to access information about the status
   * of each transformation (see
   * [TransformationDetails][google.privacy.dlp.v2.TransformationDetails]
   * message for more information about what is noted).
   *
   * @generated from field: google.privacy.dlp.v2.TransformationDetailsStorageConfig transformation_details_storage_config = 3;
   */
  transformationDetailsStorageConfig?: TransformationDetailsStorageConfig;

  /**
   * Where to store the output.
   *
   * @generated from oneof google.privacy.dlp.v2.Action.Deidentify.output
   */
  output: {
    /**
     * Required. User settable Cloud Storage bucket and folders to store
     * de-identified files. This field must be set for Cloud Storage
     * deidentification. The output Cloud Storage bucket must be different
     * from the input bucket. De-identified files will overwrite files in the
     * output path.
     *
     * Form of: gs://bucket/folder/ or gs://bucket
     *
     * @generated from field: string cloud_storage_output = 9;
     */
    value: string;
    case: "cloudStorageOutput";
  } | { case: undefined; value?: undefined };

  /**
   * List of user-specified file type groups to transform. If specified, only
   * the files with these file types will be transformed. If empty, all
   * supported files will be transformed. Supported types may be automatically
   * added over time. If a file type is set in this field that isn't supported
   * by the Deidentify action then the job will fail and will not be
   * successfully created/started. Currently the only file types supported
   * are: IMAGES, TEXT_FILES, CSV, TSV.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileType file_types_to_transform = 8;
   */
  fileTypesToTransform: FileType[];
};

/**
 * Describes the message google.privacy.dlp.v2.Action.Deidentify.
 * Use `create(Action_DeidentifySchema)` to create a new message.
 */
export const Action_DeidentifySchema: GenMessage<Action_Deidentify> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 4);

/**
 * Sends an email when the job completes. The email goes to IAM project owners
 * and technical [Essential
 * Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
 *
 * @generated from message google.privacy.dlp.v2.Action.JobNotificationEmails
 */
export type Action_JobNotificationEmails = Message<"google.privacy.dlp.v2.Action.JobNotificationEmails"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Action.JobNotificationEmails.
 * Use `create(Action_JobNotificationEmailsSchema)` to create a new message.
 */
export const Action_JobNotificationEmailsSchema: GenMessage<Action_JobNotificationEmails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 5);

/**
 * Enable Stackdriver metric dlp.googleapis.com/finding_count. This
 * will publish a metric to stack driver on each infotype requested and
 * how many findings were found for it. CustomDetectors will be bucketed
 * as 'Custom' under the Stackdriver label 'info_type'.
 *
 * @generated from message google.privacy.dlp.v2.Action.PublishToStackdriver
 */
export type Action_PublishToStackdriver = Message<"google.privacy.dlp.v2.Action.PublishToStackdriver"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Action.PublishToStackdriver.
 * Use `create(Action_PublishToStackdriverSchema)` to create a new message.
 */
export const Action_PublishToStackdriverSchema: GenMessage<Action_PublishToStackdriver> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 93, 6);

/**
 * User specified templates and configs for how to deidentify structured,
 * unstructures, and image files. User must provide either a unstructured
 * deidentify template or at least one redact image config.
 *
 * @generated from message google.privacy.dlp.v2.TransformationConfig
 */
export type TransformationConfig = Message<"google.privacy.dlp.v2.TransformationConfig"> & {
  /**
   * De-identify template.
   * If this template is specified, it will serve as the default de-identify
   * template. This template cannot contain `record_transformations` since it
   * can be used for unstructured content such as free-form text files. If this
   * template is not set, a default `ReplaceWithInfoTypeConfig` will be used to
   * de-identify unstructured content.
   *
   * @generated from field: string deidentify_template = 1;
   */
  deidentifyTemplate: string;

  /**
   * Structured de-identify template.
   * If this template is specified, it will serve as the de-identify template
   * for structured content such as delimited files and tables. If this template
   * is not set but the `deidentify_template` is set, then `deidentify_template`
   * will also apply to the structured content. If neither template is set, a
   * default `ReplaceWithInfoTypeConfig` will be used to de-identify structured
   * content.
   *
   * @generated from field: string structured_deidentify_template = 2;
   */
  structuredDeidentifyTemplate: string;

  /**
   * Image redact template.
   * If this template is specified, it will serve as the de-identify template
   * for images. If this template is not set, all findings in the image will be
   * redacted with a black box.
   *
   * @generated from field: string image_redact_template = 4;
   */
  imageRedactTemplate: string;
};

/**
 * Describes the message google.privacy.dlp.v2.TransformationConfig.
 * Use `create(TransformationConfigSchema)` to create a new message.
 */
export const TransformationConfigSchema: GenMessage<TransformationConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 94);

/**
 * Request message for CreateInspectTemplate.
 *
 * @generated from message google.privacy.dlp.v2.CreateInspectTemplateRequest
 */
export type CreateInspectTemplateRequest = Message<"google.privacy.dlp.v2.CreateInspectTemplateRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   * + Organizations scope, location specified:
   *   `organizations/{org_id}/locations/{location_id}`
   * + Organizations scope, no location specified (defaults to global):
   *   `organizations/{org_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The InspectTemplate to create.
   *
   * @generated from field: google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
   */
  inspectTemplate?: InspectTemplate;

  /**
   * The template id can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string template_id = 3;
   */
  templateId: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 4;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateInspectTemplateRequest.
 * Use `create(CreateInspectTemplateRequestSchema)` to create a new message.
 */
export const CreateInspectTemplateRequestSchema: GenMessage<CreateInspectTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 95);

/**
 * Request message for UpdateInspectTemplate.
 *
 * @generated from message google.privacy.dlp.v2.UpdateInspectTemplateRequest
 */
export type UpdateInspectTemplateRequest = Message<"google.privacy.dlp.v2.UpdateInspectTemplateRequest"> & {
  /**
   * Required. Resource name of organization and inspectTemplate to be updated,
   * for example `organizations/433245324/inspectTemplates/432452342` or
   * projects/project-id/inspectTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * New InspectTemplate value.
   *
   * @generated from field: google.privacy.dlp.v2.InspectTemplate inspect_template = 2;
   */
  inspectTemplate?: InspectTemplate;

  /**
   * Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateInspectTemplateRequest.
 * Use `create(UpdateInspectTemplateRequestSchema)` to create a new message.
 */
export const UpdateInspectTemplateRequestSchema: GenMessage<UpdateInspectTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 96);

/**
 * Request message for GetInspectTemplate.
 *
 * @generated from message google.privacy.dlp.v2.GetInspectTemplateRequest
 */
export type GetInspectTemplateRequest = Message<"google.privacy.dlp.v2.GetInspectTemplateRequest"> & {
  /**
   * Required. Resource name of the organization and inspectTemplate to be read,
   * for example `organizations/433245324/inspectTemplates/432452342` or
   * projects/project-id/inspectTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetInspectTemplateRequest.
 * Use `create(GetInspectTemplateRequestSchema)` to create a new message.
 */
export const GetInspectTemplateRequestSchema: GenMessage<GetInspectTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 97);

/**
 * Request message for ListInspectTemplates.
 *
 * @generated from message google.privacy.dlp.v2.ListInspectTemplatesRequest
 */
export type ListInspectTemplatesRequest = Message<"google.privacy.dlp.v2.ListInspectTemplatesRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   * + Organizations scope, location specified:
   *   `organizations/{org_id}/locations/{location_id}`
   * + Organizations scope, no location specified (defaults to global):
   *   `organizations/{org_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval. Comes from the previous call
   * to `ListInspectTemplates`.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc,update_time, create_time desc`
   *
   * Supported fields are:
   *
   * - `create_time`: corresponds to the time the template was created.
   * - `update_time`: corresponds to the time the template was last updated.
   * - `name`: corresponds to the template's name.
   * - `display_name`: corresponds to the template's display name.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 5;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListInspectTemplatesRequest.
 * Use `create(ListInspectTemplatesRequestSchema)` to create a new message.
 */
export const ListInspectTemplatesRequestSchema: GenMessage<ListInspectTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 98);

/**
 * Response message for ListInspectTemplates.
 *
 * @generated from message google.privacy.dlp.v2.ListInspectTemplatesResponse
 */
export type ListInspectTemplatesResponse = Message<"google.privacy.dlp.v2.ListInspectTemplatesResponse"> & {
  /**
   * List of inspectTemplates, up to page_size in ListInspectTemplatesRequest.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InspectTemplate inspect_templates = 1;
   */
  inspectTemplates: InspectTemplate[];

  /**
   * If the next page is available then the next page token to be used in the
   * following ListInspectTemplates request.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListInspectTemplatesResponse.
 * Use `create(ListInspectTemplatesResponseSchema)` to create a new message.
 */
export const ListInspectTemplatesResponseSchema: GenMessage<ListInspectTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 99);

/**
 * Request message for DeleteInspectTemplate.
 *
 * @generated from message google.privacy.dlp.v2.DeleteInspectTemplateRequest
 */
export type DeleteInspectTemplateRequest = Message<"google.privacy.dlp.v2.DeleteInspectTemplateRequest"> & {
  /**
   * Required. Resource name of the organization and inspectTemplate to be
   * deleted, for example `organizations/433245324/inspectTemplates/432452342`
   * or projects/project-id/inspectTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteInspectTemplateRequest.
 * Use `create(DeleteInspectTemplateRequestSchema)` to create a new message.
 */
export const DeleteInspectTemplateRequestSchema: GenMessage<DeleteInspectTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 100);

/**
 * Request message for CreateJobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.CreateJobTriggerRequest
 */
export type CreateJobTriggerRequest = Message<"google.privacy.dlp.v2.CreateJobTriggerRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The JobTrigger to create.
   *
   * @generated from field: google.privacy.dlp.v2.JobTrigger job_trigger = 2;
   */
  jobTrigger?: JobTrigger;

  /**
   * The trigger id can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string trigger_id = 3;
   */
  triggerId: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 4;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateJobTriggerRequest.
 * Use `create(CreateJobTriggerRequestSchema)` to create a new message.
 */
export const CreateJobTriggerRequestSchema: GenMessage<CreateJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 101);

/**
 * Request message for ActivateJobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.ActivateJobTriggerRequest
 */
export type ActivateJobTriggerRequest = Message<"google.privacy.dlp.v2.ActivateJobTriggerRequest"> & {
  /**
   * Required. Resource name of the trigger to activate, for example
   * `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ActivateJobTriggerRequest.
 * Use `create(ActivateJobTriggerRequestSchema)` to create a new message.
 */
export const ActivateJobTriggerRequestSchema: GenMessage<ActivateJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 102);

/**
 * Request message for UpdateJobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.UpdateJobTriggerRequest
 */
export type UpdateJobTriggerRequest = Message<"google.privacy.dlp.v2.UpdateJobTriggerRequest"> & {
  /**
   * Required. Resource name of the project and the triggeredJob, for example
   * `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * New JobTrigger value.
   *
   * @generated from field: google.privacy.dlp.v2.JobTrigger job_trigger = 2;
   */
  jobTrigger?: JobTrigger;

  /**
   * Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateJobTriggerRequest.
 * Use `create(UpdateJobTriggerRequestSchema)` to create a new message.
 */
export const UpdateJobTriggerRequestSchema: GenMessage<UpdateJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 103);

/**
 * Request message for GetJobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.GetJobTriggerRequest
 */
export type GetJobTriggerRequest = Message<"google.privacy.dlp.v2.GetJobTriggerRequest"> & {
  /**
   * Required. Resource name of the project and the triggeredJob, for example
   * `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetJobTriggerRequest.
 * Use `create(GetJobTriggerRequestSchema)` to create a new message.
 */
export const GetJobTriggerRequestSchema: GenMessage<GetJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 104);

/**
 * Request message for CreateDiscoveryConfig.
 *
 * @generated from message google.privacy.dlp.v2.CreateDiscoveryConfigRequest
 */
export type CreateDiscoveryConfigRequest = Message<"google.privacy.dlp.v2.CreateDiscoveryConfigRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization):
   *
   * + Projects scope:
   *   `projects/{project_id}/locations/{location_id}`
   * + Organizations scope:
   *   `organizations/{org_id}/locations/{location_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The DiscoveryConfig to create.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryConfig discovery_config = 2;
   */
  discoveryConfig?: DiscoveryConfig;

  /**
   * The config ID can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string config_id = 3;
   */
  configId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateDiscoveryConfigRequest.
 * Use `create(CreateDiscoveryConfigRequestSchema)` to create a new message.
 */
export const CreateDiscoveryConfigRequestSchema: GenMessage<CreateDiscoveryConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 105);

/**
 * Request message for UpdateDiscoveryConfig.
 *
 * @generated from message google.privacy.dlp.v2.UpdateDiscoveryConfigRequest
 */
export type UpdateDiscoveryConfigRequest = Message<"google.privacy.dlp.v2.UpdateDiscoveryConfigRequest"> & {
  /**
   * Required. Resource name of the project and the configuration, for example
   * `projects/dlp-test-project/discoveryConfigs/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. New DiscoveryConfig value.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryConfig discovery_config = 2;
   */
  discoveryConfig?: DiscoveryConfig;

  /**
   * Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateDiscoveryConfigRequest.
 * Use `create(UpdateDiscoveryConfigRequestSchema)` to create a new message.
 */
export const UpdateDiscoveryConfigRequestSchema: GenMessage<UpdateDiscoveryConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 106);

/**
 * Request message for GetDiscoveryConfig.
 *
 * @generated from message google.privacy.dlp.v2.GetDiscoveryConfigRequest
 */
export type GetDiscoveryConfigRequest = Message<"google.privacy.dlp.v2.GetDiscoveryConfigRequest"> & {
  /**
   * Required. Resource name of the project and the configuration, for example
   * `projects/dlp-test-project/discoveryConfigs/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetDiscoveryConfigRequest.
 * Use `create(GetDiscoveryConfigRequestSchema)` to create a new message.
 */
export const GetDiscoveryConfigRequestSchema: GenMessage<GetDiscoveryConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 107);

/**
 * Request message for ListDiscoveryConfigs.
 *
 * @generated from message google.privacy.dlp.v2.ListDiscoveryConfigsRequest
 */
export type ListDiscoveryConfigsRequest = Message<"google.privacy.dlp.v2.ListDiscoveryConfigsRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value is as follows:
   * `projects/{project_id}/locations/{location_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval. Comes from the previous call
   * to ListDiscoveryConfigs. `order_by` field must not
   * change for subsequent calls.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by a server.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of config fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc,update_time, create_time desc`
   *
   * Supported fields are:
   *
   * - `last_run_time`: corresponds to the last time the DiscoveryConfig ran.
   * - `name`: corresponds to the DiscoveryConfig's name.
   * - `status`: corresponds to DiscoveryConfig's status.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDiscoveryConfigsRequest.
 * Use `create(ListDiscoveryConfigsRequestSchema)` to create a new message.
 */
export const ListDiscoveryConfigsRequestSchema: GenMessage<ListDiscoveryConfigsRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 108);

/**
 * Response message for ListDiscoveryConfigs.
 *
 * @generated from message google.privacy.dlp.v2.ListDiscoveryConfigsResponse
 */
export type ListDiscoveryConfigsResponse = Message<"google.privacy.dlp.v2.ListDiscoveryConfigsResponse"> & {
  /**
   * List of configs, up to page_size in ListDiscoveryConfigsRequest.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryConfig discovery_configs = 1;
   */
  discoveryConfigs: DiscoveryConfig[];

  /**
   * If the next page is available then this value is the next page token to be
   * used in the following ListDiscoveryConfigs request.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDiscoveryConfigsResponse.
 * Use `create(ListDiscoveryConfigsResponseSchema)` to create a new message.
 */
export const ListDiscoveryConfigsResponseSchema: GenMessage<ListDiscoveryConfigsResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 109);

/**
 * Request message for DeleteDiscoveryConfig.
 *
 * @generated from message google.privacy.dlp.v2.DeleteDiscoveryConfigRequest
 */
export type DeleteDiscoveryConfigRequest = Message<"google.privacy.dlp.v2.DeleteDiscoveryConfigRequest"> & {
  /**
   * Required. Resource name of the project and the config, for example
   * `projects/dlp-test-project/discoveryConfigs/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteDiscoveryConfigRequest.
 * Use `create(DeleteDiscoveryConfigRequestSchema)` to create a new message.
 */
export const DeleteDiscoveryConfigRequestSchema: GenMessage<DeleteDiscoveryConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 110);

/**
 * Request message for CreateDlpJobRequest. Used to initiate long running
 * jobs such as calculating risk metrics or inspecting Google Cloud
 * Storage.
 *
 * @generated from message google.privacy.dlp.v2.CreateDlpJobRequest
 */
export type CreateDlpJobRequest = Message<"google.privacy.dlp.v2.CreateDlpJobRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The configuration details for the specific type of job to run.
   *
   * @generated from oneof google.privacy.dlp.v2.CreateDlpJobRequest.job
   */
  job: {
    /**
     * An inspection job scans a storage repository for InfoTypes.
     *
     * @generated from field: google.privacy.dlp.v2.InspectJobConfig inspect_job = 2;
     */
    value: InspectJobConfig;
    case: "inspectJob";
  } | {
    /**
     * A risk analysis job calculates re-identification risk metrics for a
     * BigQuery table.
     *
     * @generated from field: google.privacy.dlp.v2.RiskAnalysisJobConfig risk_job = 3;
     */
    value: RiskAnalysisJobConfig;
    case: "riskJob";
  } | { case: undefined; value?: undefined };

  /**
   * The job id can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string job_id = 4;
   */
  jobId: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 5;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateDlpJobRequest.
 * Use `create(CreateDlpJobRequestSchema)` to create a new message.
 */
export const CreateDlpJobRequestSchema: GenMessage<CreateDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 111);

/**
 * Request message for ListJobTriggers.
 *
 * @generated from message google.privacy.dlp.v2.ListJobTriggersRequest
 */
export type ListJobTriggersRequest = Message<"google.privacy.dlp.v2.ListJobTriggersRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval. Comes from the previous call
   * to ListJobTriggers. `order_by` field must not
   * change for subsequent calls.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by a server.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of triggeredJob fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc,update_time, create_time desc`
   *
   * Supported fields are:
   *
   * - `create_time`: corresponds to the time the JobTrigger was created.
   * - `update_time`: corresponds to the time the JobTrigger was last updated.
   * - `last_run_time`: corresponds to the last time the JobTrigger ran.
   * - `name`: corresponds to the JobTrigger's name.
   * - `display_name`: corresponds to the JobTrigger's display name.
   * - `status`: corresponds to JobTrigger's status.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values for inspect triggers:
   *     - `status` - HEALTHY|PAUSED|CANCELLED
   *     - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *     - 'last_run_time` - RFC 3339 formatted timestamp, surrounded by
   *     quotation marks. Nanoseconds are ignored.
   *     - 'error_count' - Number of errors that have occurred while running.
   * * The operator must be `=` or `!=` for status and inspected_storage.
   *
   * Examples:
   *
   * * inspected_storage = cloud_storage AND status = HEALTHY
   * * inspected_storage = cloud_storage OR inspected_storage = bigquery
   * * inspected_storage = cloud_storage AND (state = PAUSED OR state = HEALTHY)
   * * last_run_time > \"2017-12-12T00:00:00+00:00\"
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;

  /**
   * The type of jobs. Will use `DlpJobType.INSPECT` if not set.
   *
   * @generated from field: google.privacy.dlp.v2.DlpJobType type = 6;
   */
  type: DlpJobType;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 7;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListJobTriggersRequest.
 * Use `create(ListJobTriggersRequestSchema)` to create a new message.
 */
export const ListJobTriggersRequestSchema: GenMessage<ListJobTriggersRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 112);

/**
 * Response message for ListJobTriggers.
 *
 * @generated from message google.privacy.dlp.v2.ListJobTriggersResponse
 */
export type ListJobTriggersResponse = Message<"google.privacy.dlp.v2.ListJobTriggersResponse"> & {
  /**
   * List of triggeredJobs, up to page_size in ListJobTriggersRequest.
   *
   * @generated from field: repeated google.privacy.dlp.v2.JobTrigger job_triggers = 1;
   */
  jobTriggers: JobTrigger[];

  /**
   * If the next page is available then this value is the next page token to be
   * used in the following ListJobTriggers request.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListJobTriggersResponse.
 * Use `create(ListJobTriggersResponseSchema)` to create a new message.
 */
export const ListJobTriggersResponseSchema: GenMessage<ListJobTriggersResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 113);

/**
 * Request message for DeleteJobTrigger.
 *
 * @generated from message google.privacy.dlp.v2.DeleteJobTriggerRequest
 */
export type DeleteJobTriggerRequest = Message<"google.privacy.dlp.v2.DeleteJobTriggerRequest"> & {
  /**
   * Required. Resource name of the project and the triggeredJob, for example
   * `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteJobTriggerRequest.
 * Use `create(DeleteJobTriggerRequestSchema)` to create a new message.
 */
export const DeleteJobTriggerRequestSchema: GenMessage<DeleteJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 114);

/**
 * Controls what and how to inspect for findings.
 *
 * @generated from message google.privacy.dlp.v2.InspectJobConfig
 */
export type InspectJobConfig = Message<"google.privacy.dlp.v2.InspectJobConfig"> & {
  /**
   * The data to scan.
   *
   * @generated from field: google.privacy.dlp.v2.StorageConfig storage_config = 1;
   */
  storageConfig?: StorageConfig;

  /**
   * How and what to scan for.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 2;
   */
  inspectConfig?: InspectConfig;

  /**
   * If provided, will be used as the default for all values in InspectConfig.
   * `inspect_config` will be merged into the values persisted as part of the
   * template.
   *
   * @generated from field: string inspect_template_name = 3;
   */
  inspectTemplateName: string;

  /**
   * Actions to execute at the completion of the job.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Action actions = 4;
   */
  actions: Action[];
};

/**
 * Describes the message google.privacy.dlp.v2.InspectJobConfig.
 * Use `create(InspectJobConfigSchema)` to create a new message.
 */
export const InspectJobConfigSchema: GenMessage<InspectJobConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 115);

/**
 * A task to execute when a data profile has been generated.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction
 */
export type DataProfileAction = Message<"google.privacy.dlp.v2.DataProfileAction"> & {
  /**
   * Type of action to execute when a profile is generated.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfileAction.action
   */
  action: {
    /**
     * Export data profiles into a provided location.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfileAction.Export export_data = 1;
     */
    value: DataProfileAction_Export;
    case: "exportData";
  } | {
    /**
     * Publish a message into the Pub/Sub topic.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfileAction.PubSubNotification pub_sub_notification = 2;
     */
    value: DataProfileAction_PubSubNotification;
    case: "pubSubNotification";
  } | {
    /**
     * Publishes generated data profiles to Google Security Operations.
     * For more information, see [Use Sensitive Data Protection data in
     * context-aware
     * analytics](https://cloud.google.com/chronicle/docs/detection/usecase-dlp-high-risk-user-download).
     *
     * @generated from field: google.privacy.dlp.v2.DataProfileAction.PublishToChronicle publish_to_chronicle = 3;
     */
    value: DataProfileAction_PublishToChronicle;
    case: "publishToChronicle";
  } | {
    /**
     * Publishes findings to SCC for each data profile.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfileAction.PublishToSecurityCommandCenter publish_to_scc = 4;
     */
    value: DataProfileAction_PublishToSecurityCommandCenter;
    case: "publishToScc";
  } | {
    /**
     * Tags the profiled resources with the specified tag values.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfileAction.TagResources tag_resources = 8;
     */
    value: DataProfileAction_TagResources;
    case: "tagResources";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.
 * Use `create(DataProfileActionSchema)` to create a new message.
 */
export const DataProfileActionSchema: GenMessage<DataProfileAction> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116);

/**
 * If set, the detailed data profiles will be persisted to the location
 * of your choice whenever updated.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.Export
 */
export type DataProfileAction_Export = Message<"google.privacy.dlp.v2.DataProfileAction.Export"> & {
  /**
   * Store all table and column profiles in an existing table or a new table
   * in an existing dataset. Each re-generation will result in new rows in
   * BigQuery. Data is inserted using [streaming
   * insert](https://cloud.google.com/blog/products/bigquery/life-of-a-bigquery-streaming-insert)
   * and so data may be in the buffer for a period of time after the profile
   * has finished. The Pub/Sub notification is sent before the streaming
   * buffer is guaranteed to be written, so data may not be instantly
   * visible to queries by the time your topic receives the Pub/Sub
   * notification.
   *
   * @generated from field: google.privacy.dlp.v2.BigQueryTable profile_table = 1;
   */
  profileTable?: BigQueryTable;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.Export.
 * Use `create(DataProfileAction_ExportSchema)` to create a new message.
 */
export const DataProfileAction_ExportSchema: GenMessage<DataProfileAction_Export> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 0);

/**
 * Send a Pub/Sub message into the given Pub/Sub topic to connect other
 * systems to data profile generation. The message payload data will
 * be the byte serialization of `DataProfilePubSubMessage`.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.PubSubNotification
 */
export type DataProfileAction_PubSubNotification = Message<"google.privacy.dlp.v2.DataProfileAction.PubSubNotification"> & {
  /**
   * Cloud Pub/Sub topic to send notifications to.
   * Format is projects/{project}/topics/{topic}.
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * The type of event that triggers a Pub/Sub. At most one
   * `PubSubNotification` per EventType is permitted.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileAction.EventType event = 2;
   */
  event: DataProfileAction_EventType;

  /**
   * Conditions (e.g., data risk or sensitivity level) for triggering a
   * Pub/Sub.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfilePubSubCondition pubsub_condition = 3;
   */
  pubsubCondition?: DataProfilePubSubCondition;

  /**
   * How much data to include in the Pub/Sub message. If the user wishes to
   * limit the size of the message, they can use resource_name and fetch the
   * profile fields they wish to. Per table profile (not per column).
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileAction.PubSubNotification.DetailLevel detail_of_message = 4;
   */
  detailOfMessage: DataProfileAction_PubSubNotification_DetailLevel;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.PubSubNotification.
 * Use `create(DataProfileAction_PubSubNotificationSchema)` to create a new message.
 */
export const DataProfileAction_PubSubNotificationSchema: GenMessage<DataProfileAction_PubSubNotification> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 1);

/**
 * The levels of detail that can be included in the Pub/Sub message.
 *
 * @generated from enum google.privacy.dlp.v2.DataProfileAction.PubSubNotification.DetailLevel
 */
export enum DataProfileAction_PubSubNotification_DetailLevel {
  /**
   * Unused.
   *
   * @generated from enum value: DETAIL_LEVEL_UNSPECIFIED = 0;
   */
  DETAIL_LEVEL_UNSPECIFIED = 0,

  /**
   * The full table data profile.
   *
   * @generated from enum value: TABLE_PROFILE = 1;
   */
  TABLE_PROFILE = 1,

  /**
   * The name of the profiled resource.
   *
   * @generated from enum value: RESOURCE_NAME = 2;
   */
  RESOURCE_NAME = 2,

  /**
   * The full file store data profile.
   *
   * @generated from enum value: FILE_STORE_PROFILE = 3;
   */
  FILE_STORE_PROFILE = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataProfileAction.PubSubNotification.DetailLevel.
 */
export const DataProfileAction_PubSubNotification_DetailLevelSchema: GenEnum<DataProfileAction_PubSubNotification_DetailLevel> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 116, 1, 0);

/**
 * Message expressing intention to publish to Google Security Operations.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.PublishToChronicle
 */
export type DataProfileAction_PublishToChronicle = Message<"google.privacy.dlp.v2.DataProfileAction.PublishToChronicle"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.PublishToChronicle.
 * Use `create(DataProfileAction_PublishToChronicleSchema)` to create a new message.
 */
export const DataProfileAction_PublishToChronicleSchema: GenMessage<DataProfileAction_PublishToChronicle> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 2);

/**
 * If set, a summary finding will be created/updated in SCC for each profile.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.PublishToSecurityCommandCenter
 */
export type DataProfileAction_PublishToSecurityCommandCenter = Message<"google.privacy.dlp.v2.DataProfileAction.PublishToSecurityCommandCenter"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.PublishToSecurityCommandCenter.
 * Use `create(DataProfileAction_PublishToSecurityCommandCenterSchema)` to create a new message.
 */
export const DataProfileAction_PublishToSecurityCommandCenterSchema: GenMessage<DataProfileAction_PublishToSecurityCommandCenter> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 3);

/**
 * If set, attaches the [tags]
 * (https://cloud.google.com/resource-manager/docs/tags/tags-overview)
 * provided to profiled resources. Tags support [access
 * control](https://cloud.google.com/iam/docs/tags-access-control). You can
 * conditionally grant or deny access to a resource based on whether the
 * resource has a specific tag.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.TagResources
 */
export type DataProfileAction_TagResources = Message<"google.privacy.dlp.v2.DataProfileAction.TagResources"> & {
  /**
   * The tags to associate with different conditions.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DataProfileAction.TagResources.TagCondition tag_conditions = 1;
   */
  tagConditions: DataProfileAction_TagResources_TagCondition[];

  /**
   * The profile generations for which the tag should be attached to
   * resources. If you attach a tag to only new profiles, then if the
   * sensitivity score of a profile subsequently changes, its tag doesn't
   * change. By default, this field includes only new profiles. To include
   * both new and updated profiles for tagging, this field should explicitly
   * include both `PROFILE_GENERATION_NEW` and `PROFILE_GENERATION_UPDATE`.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ProfileGeneration profile_generations_to_tag = 2;
   */
  profileGenerationsToTag: ProfileGeneration[];

  /**
   * Whether applying a tag to a resource should lower the risk of the profile
   * for that resource. For example, in conjunction with an [IAM deny
   * policy](https://cloud.google.com/iam/docs/deny-overview), you can deny
   * all principals a permission if a tag value is present, mitigating the
   * risk of the resource. This also lowers the data risk of resources at the
   * lower levels of the resource hierarchy. For example, reducing the data
   * risk of a table data profile also reduces the data risk of the
   * constituent column data profiles.
   *
   * @generated from field: bool lower_data_risk_to_low = 3;
   */
  lowerDataRiskToLow: boolean;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.TagResources.
 * Use `create(DataProfileAction_TagResourcesSchema)` to create a new message.
 */
export const DataProfileAction_TagResourcesSchema: GenMessage<DataProfileAction_TagResources> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 4);

/**
 * The tag to attach to profiles matching the condition. At most one
 * `TagCondition` can be specified per sensitivity level.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.TagResources.TagCondition
 */
export type DataProfileAction_TagResources_TagCondition = Message<"google.privacy.dlp.v2.DataProfileAction.TagResources.TagCondition"> & {
  /**
   * The tag value to attach to resources.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileAction.TagResources.TagValue tag = 1;
   */
  tag?: DataProfileAction_TagResources_TagValue;

  /**
   * The type of condition on which attaching the tag will be predicated.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfileAction.TagResources.TagCondition.type
   */
  type: {
    /**
     * Conditions attaching the tag to a resource on its profile having this
     * sensitivity score.
     *
     * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 2;
     */
    value: SensitivityScore;
    case: "sensitivityScore";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.TagResources.TagCondition.
 * Use `create(DataProfileAction_TagResources_TagConditionSchema)` to create a new message.
 */
export const DataProfileAction_TagResources_TagConditionSchema: GenMessage<DataProfileAction_TagResources_TagCondition> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 4, 0);

/**
 * A value of a tag.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileAction.TagResources.TagValue
 */
export type DataProfileAction_TagResources_TagValue = Message<"google.privacy.dlp.v2.DataProfileAction.TagResources.TagValue"> & {
  /**
   * The format of the tag value.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfileAction.TagResources.TagValue.format
   */
  format: {
    /**
     * The namespaced name for the tag value to attach to resources. Must be
     * in the format `{parent_id}/{tag_key_short_name}/{short_name}`, for
     * example, "123456/environment/prod".
     *
     * @generated from field: string namespaced_value = 1;
     */
    value: string;
    case: "namespacedValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileAction.TagResources.TagValue.
 * Use `create(DataProfileAction_TagResources_TagValueSchema)` to create a new message.
 */
export const DataProfileAction_TagResources_TagValueSchema: GenMessage<DataProfileAction_TagResources_TagValue> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 116, 4, 1);

/**
 * Types of event that can trigger an action.
 *
 * @generated from enum google.privacy.dlp.v2.DataProfileAction.EventType
 */
export enum DataProfileAction_EventType {
  /**
   * Unused.
   *
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * New profile (not a re-profile).
   *
   * @generated from enum value: NEW_PROFILE = 1;
   */
  NEW_PROFILE = 1,

  /**
   * One of the following profile metrics changed: Data risk score,
   * Sensitivity score, Resource visibility, Encryption type, Predicted
   * infoTypes, Other infoTypes
   *
   * @generated from enum value: CHANGED_PROFILE = 2;
   */
  CHANGED_PROFILE = 2,

  /**
   * Table data risk score or sensitivity score increased.
   *
   * @generated from enum value: SCORE_INCREASED = 3;
   */
  SCORE_INCREASED = 3,

  /**
   * A user (non-internal) error occurred.
   *
   * @generated from enum value: ERROR_CHANGED = 4;
   */
  ERROR_CHANGED = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataProfileAction.EventType.
 */
export const DataProfileAction_EventTypeSchema: GenEnum<DataProfileAction_EventType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 116, 0);

/**
 * Configuration for setting up a job to scan resources for profile generation.
 * Only one data profile configuration may exist per organization, folder,
 * or project.
 *
 * The generated data profiles are retained according to the
 * [data retention policy]
 * (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
 *
 * @generated from message google.privacy.dlp.v2.DataProfileJobConfig
 */
export type DataProfileJobConfig = Message<"google.privacy.dlp.v2.DataProfileJobConfig"> & {
  /**
   * The data to scan.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileLocation location = 1;
   */
  location?: DataProfileLocation;

  /**
   * The project that will run the scan. The DLP service
   * account that exists within this project must have access to all resources
   * that are profiled, and the Cloud DLP API must be enabled.
   *
   * @generated from field: string project_id = 5;
   */
  projectId: string;

  /**
   * Must be set only when scanning other clouds.
   *
   * @generated from field: google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation other_cloud_starting_location = 8;
   */
  otherCloudStartingLocation?: OtherCloudDiscoveryStartingLocation;

  /**
   * Detection logic for profile generation.
   *
   * Not all template features are used by profiles. FindingLimits,
   * include_quote and exclude_info_types have no impact on
   * data profiling.
   *
   * Multiple templates may be provided if there is data in multiple regions.
   * At most one template must be specified per-region (including "global").
   * Each region is scanned using the applicable template. If no region-specific
   * template is specified, but a "global" template is specified, it will be
   * copied to that region and used instead. If no global or region-specific
   * template is provided for a region with data, that region's data will not be
   * scanned.
   *
   * For more information, see
   * https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.
   *
   * @generated from field: repeated string inspect_templates = 7;
   */
  inspectTemplates: string[];

  /**
   * Actions to execute at the completion of the job.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DataProfileAction data_profile_actions = 6;
   */
  dataProfileActions: DataProfileAction[];
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileJobConfig.
 * Use `create(DataProfileJobConfigSchema)` to create a new message.
 */
export const DataProfileJobConfigSchema: GenMessage<DataProfileJobConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 117);

/**
 * A pattern to match against one or more tables, datasets, or projects that
 * contain BigQuery tables. At least one pattern must be specified.
 * Regular expressions use RE2
 * [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found
 * under the google/re2 repository on GitHub.
 *
 * @generated from message google.privacy.dlp.v2.BigQueryRegex
 */
export type BigQueryRegex = Message<"google.privacy.dlp.v2.BigQueryRegex"> & {
  /**
   * For organizations, if unset, will match all projects. Has no effect
   * for data profile configurations created within a project.
   *
   * @generated from field: string project_id_regex = 1;
   */
  projectIdRegex: string;

  /**
   * If unset, this property matches all datasets.
   *
   * @generated from field: string dataset_id_regex = 2;
   */
  datasetIdRegex: string;

  /**
   * If unset, this property matches all tables.
   *
   * @generated from field: string table_id_regex = 3;
   */
  tableIdRegex: string;
};

/**
 * Describes the message google.privacy.dlp.v2.BigQueryRegex.
 * Use `create(BigQueryRegexSchema)` to create a new message.
 */
export const BigQueryRegexSchema: GenMessage<BigQueryRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 118);

/**
 * A collection of regular expressions to determine what tables to match
 * against.
 *
 * @generated from message google.privacy.dlp.v2.BigQueryRegexes
 */
export type BigQueryRegexes = Message<"google.privacy.dlp.v2.BigQueryRegexes"> & {
  /**
   * A single BigQuery regular expression pattern to match against one or more
   * tables, datasets, or projects that contain BigQuery tables.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BigQueryRegex patterns = 1;
   */
  patterns: BigQueryRegex[];
};

/**
 * Describes the message google.privacy.dlp.v2.BigQueryRegexes.
 * Use `create(BigQueryRegexesSchema)` to create a new message.
 */
export const BigQueryRegexesSchema: GenMessage<BigQueryRegexes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 119);

/**
 * The types of BigQuery tables supported by Cloud DLP.
 *
 * @generated from message google.privacy.dlp.v2.BigQueryTableTypes
 */
export type BigQueryTableTypes = Message<"google.privacy.dlp.v2.BigQueryTableTypes"> & {
  /**
   * A set of BigQuery table types.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BigQueryTableType types = 1;
   */
  types: BigQueryTableType[];
};

/**
 * Describes the message google.privacy.dlp.v2.BigQueryTableTypes.
 * Use `create(BigQueryTableTypesSchema)` to create a new message.
 */
export const BigQueryTableTypesSchema: GenMessage<BigQueryTableTypes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 120);

/**
 * Do not profile the tables.
 *
 * @generated from message google.privacy.dlp.v2.Disabled
 */
export type Disabled = Message<"google.privacy.dlp.v2.Disabled"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.Disabled.
 * Use `create(DisabledSchema)` to create a new message.
 */
export const DisabledSchema: GenMessage<Disabled> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 121);

/**
 * The data that will be profiled.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileLocation
 */
export type DataProfileLocation = Message<"google.privacy.dlp.v2.DataProfileLocation"> & {
  /**
   * The location to be scanned.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfileLocation.location
   */
  location: {
    /**
     * The ID of an organization to scan.
     *
     * @generated from field: int64 organization_id = 1;
     */
    value: bigint;
    case: "organizationId";
  } | {
    /**
     * The ID of the folder within an organization to scan.
     *
     * @generated from field: int64 folder_id = 2;
     */
    value: bigint;
    case: "folderId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileLocation.
 * Use `create(DataProfileLocationSchema)` to create a new message.
 */
export const DataProfileLocationSchema: GenMessage<DataProfileLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 122);

/**
 * Configuration for discovery to scan resources for profile generation.
 * Only one discovery configuration may exist per organization, folder,
 * or project.
 *
 * The generated data profiles are retained according to the
 * [data retention policy]
 * (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryConfig
 */
export type DiscoveryConfig = Message<"google.privacy.dlp.v2.DiscoveryConfig"> & {
  /**
   * Unique resource name for the DiscoveryConfig, assigned by the service when
   * the DiscoveryConfig is created, for example
   * `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Display name (max 100 chars)
   *
   * @generated from field: string display_name = 11;
   */
  displayName: string;

  /**
   * Only set when the parent is an org.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryConfig.OrgConfig org_config = 2;
   */
  orgConfig?: DiscoveryConfig_OrgConfig;

  /**
   * Must be set only when scanning other clouds.
   *
   * @generated from field: google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation other_cloud_starting_location = 12;
   */
  otherCloudStartingLocation?: OtherCloudDiscoveryStartingLocation;

  /**
   * Detection logic for profile generation.
   *
   * Not all template features are used by Discovery. FindingLimits,
   * include_quote and exclude_info_types have no impact on
   * Discovery.
   *
   * Multiple templates may be provided if there is data in multiple regions.
   * At most one template must be specified per-region (including "global").
   * Each region is scanned using the applicable template. If no region-specific
   * template is specified, but a "global" template is specified, it will be
   * copied to that region and used instead. If no global or region-specific
   * template is provided for a region with data, that region's data will not be
   * scanned.
   *
   * For more information, see
   * https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.
   *
   * @generated from field: repeated string inspect_templates = 3;
   */
  inspectTemplates: string[];

  /**
   * Actions to execute at the completion of scanning.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DataProfileAction actions = 4;
   */
  actions: DataProfileAction[];

  /**
   * Target to match against for determining what to scan and how frequently.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryTarget targets = 5;
   */
  targets: DiscoveryTarget[];

  /**
   * Output only. A stream of errors encountered when the config was activated.
   * Repeated errors may result in the config automatically being paused. Output
   * only field. Will return the last 100 errors. Whenever the config is
   * modified this list will be cleared.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 6;
   */
  errors: Error[];

  /**
   * Output only. The creation timestamp of a DiscoveryConfig.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last update timestamp of a DiscoveryConfig.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * Output only. The timestamp of the last time this config was executed.
   *
   * @generated from field: google.protobuf.Timestamp last_run_time = 9;
   */
  lastRunTime?: Timestamp;

  /**
   * Required. A status for this configuration.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryConfig.Status status = 10;
   */
  status: DiscoveryConfig_Status;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryConfig.
 * Use `create(DiscoveryConfigSchema)` to create a new message.
 */
export const DiscoveryConfigSchema: GenMessage<DiscoveryConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 123);

/**
 * Project and scan location information. Only set when the parent is an org.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryConfig.OrgConfig
 */
export type DiscoveryConfig_OrgConfig = Message<"google.privacy.dlp.v2.DiscoveryConfig.OrgConfig"> & {
  /**
   * The data to scan: folder, org, or project
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryStartingLocation location = 1;
   */
  location?: DiscoveryStartingLocation;

  /**
   * The project that will run the scan. The DLP service
   * account that exists within this project must have access to all resources
   * that are profiled, and the Cloud DLP API must be enabled.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryConfig.OrgConfig.
 * Use `create(DiscoveryConfig_OrgConfigSchema)` to create a new message.
 */
export const DiscoveryConfig_OrgConfigSchema: GenMessage<DiscoveryConfig_OrgConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 123, 0);

/**
 * Whether the discovery config is currently active. New options may be added
 * at a later time.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryConfig.Status
 */
export enum DiscoveryConfig_Status {
  /**
   * Unused
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * The discovery config is currently active.
   *
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * The discovery config is paused temporarily.
   *
   * @generated from enum value: PAUSED = 2;
   */
  PAUSED = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryConfig.Status.
 */
export const DiscoveryConfig_StatusSchema: GenEnum<DiscoveryConfig_Status> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 123, 0);

/**
 * Target used to match against for Discovery.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryTarget
 */
export type DiscoveryTarget = Message<"google.privacy.dlp.v2.DiscoveryTarget"> & {
  /**
   * A target to match against for Discovery.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryTarget.target
   */
  target: {
    /**
     * BigQuery target for Discovery. The first target to match a table will be
     * the one applied.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryDiscoveryTarget big_query_target = 1;
     */
    value: BigQueryDiscoveryTarget;
    case: "bigQueryTarget";
  } | {
    /**
     * Cloud SQL target for Discovery. The first target to match a table will be
     * the one applied.
     *
     * @generated from field: google.privacy.dlp.v2.CloudSqlDiscoveryTarget cloud_sql_target = 2;
     */
    value: CloudSqlDiscoveryTarget;
    case: "cloudSqlTarget";
  } | {
    /**
     * Discovery target that looks for credentials and secrets stored in cloud
     * resource metadata and reports them as vulnerabilities to Security Command
     * Center. Only one target of this type is allowed.
     *
     * @generated from field: google.privacy.dlp.v2.SecretsDiscoveryTarget secrets_target = 3;
     */
    value: SecretsDiscoveryTarget;
    case: "secretsTarget";
  } | {
    /**
     * Cloud Storage target for Discovery. The first target to match a table
     * will be the one applied.
     *
     * @generated from field: google.privacy.dlp.v2.CloudStorageDiscoveryTarget cloud_storage_target = 4;
     */
    value: CloudStorageDiscoveryTarget;
    case: "cloudStorageTarget";
  } | {
    /**
     * Other clouds target for discovery. The first target to match a resource
     * will be the one applied.
     *
     * @generated from field: google.privacy.dlp.v2.OtherCloudDiscoveryTarget other_cloud_target = 5;
     */
    value: OtherCloudDiscoveryTarget;
    case: "otherCloudTarget";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryTarget.
 * Use `create(DiscoveryTargetSchema)` to create a new message.
 */
export const DiscoveryTargetSchema: GenMessage<DiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 124);

/**
 * Target used to match against for discovery with BigQuery tables
 *
 * @generated from message google.privacy.dlp.v2.BigQueryDiscoveryTarget
 */
export type BigQueryDiscoveryTarget = Message<"google.privacy.dlp.v2.BigQueryDiscoveryTarget"> & {
  /**
   * Required. The tables the discovery cadence applies to. The first target
   * with a matching filter will be the one to apply to a table.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryBigQueryFilter filter = 1;
   */
  filter?: DiscoveryBigQueryFilter;

  /**
   * In addition to matching the filter, these conditions must be true
   * before a profile is generated.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryBigQueryConditions conditions = 2;
   */
  conditions?: DiscoveryBigQueryConditions;

  /**
   * The generation rule includes the logic on how frequently
   * to update the data profiles. If not specified, discovery will re-run and
   * update no more than once a month if new columns appear in the table.
   *
   * @generated from oneof google.privacy.dlp.v2.BigQueryDiscoveryTarget.frequency
   */
  frequency: {
    /**
     * How often and when to update profiles. New tables that match both the
     * filter and conditions are scanned as quickly as possible depending on
     * system capacity.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryGenerationCadence cadence = 3;
     */
    value: DiscoveryGenerationCadence;
    case: "cadence";
  } | {
    /**
     * Tables that match this filter will not have profiles created.
     *
     * @generated from field: google.privacy.dlp.v2.Disabled disabled = 4;
     */
    value: Disabled;
    case: "disabled";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.BigQueryDiscoveryTarget.
 * Use `create(BigQueryDiscoveryTargetSchema)` to create a new message.
 */
export const BigQueryDiscoveryTargetSchema: GenMessage<BigQueryDiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 125);

/**
 * Determines what tables will have profiles generated within an organization
 * or project. Includes the ability to filter by regular expression patterns
 * on project ID, dataset ID, and table ID.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryBigQueryFilter
 */
export type DiscoveryBigQueryFilter = Message<"google.privacy.dlp.v2.DiscoveryBigQueryFilter"> & {
  /**
   * Whether the filter applies to a specific set of tables or all other tables
   * within the location being profiled. The first filter to match will be
   * applied, regardless of the condition. If none is set, will default to
   * `other_tables`.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryBigQueryFilter.filter
   */
  filter: {
    /**
     * A specific set of tables for this filter to apply to. A table collection
     * must be specified in only one filter per config.
     * If a table id or dataset is empty, Cloud DLP assumes all tables in that
     * collection must be profiled. Must specify a project ID.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryTableCollection tables = 1;
     */
    value: BigQueryTableCollection;
    case: "tables";
  } | {
    /**
     * Catch-all. This should always be the last filter in the list because
     * anything above it will apply first. Should only appear once in a
     * configuration. If none is specified, a default one will be added
     * automatically.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables other_tables = 2;
     */
    value: DiscoveryBigQueryFilter_AllOtherBigQueryTables;
    case: "otherTables";
  } | {
    /**
     * The table to scan. Discovery configurations including this can only
     * include one DiscoveryTarget (the DiscoveryTarget with this
     * TableReference).
     *
     * @generated from field: google.privacy.dlp.v2.TableReference table_reference = 3;
     */
    value: TableReference;
    case: "tableReference";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryBigQueryFilter.
 * Use `create(DiscoveryBigQueryFilterSchema)` to create a new message.
 */
export const DiscoveryBigQueryFilterSchema: GenMessage<DiscoveryBigQueryFilter> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 126);

/**
 * Catch-all for all other tables not specified by other filters. Should
 * always be last, except for single-table configurations, which will only
 * have a TableReference target.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables
 */
export type DiscoveryBigQueryFilter_AllOtherBigQueryTables = Message<"google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryBigQueryFilter.AllOtherBigQueryTables.
 * Use `create(DiscoveryBigQueryFilter_AllOtherBigQueryTablesSchema)` to create a new message.
 */
export const DiscoveryBigQueryFilter_AllOtherBigQueryTablesSchema: GenMessage<DiscoveryBigQueryFilter_AllOtherBigQueryTables> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 126, 0);

/**
 * Specifies a collection of BigQuery tables. Used for Discovery.
 *
 * @generated from message google.privacy.dlp.v2.BigQueryTableCollection
 */
export type BigQueryTableCollection = Message<"google.privacy.dlp.v2.BigQueryTableCollection"> & {
  /**
   * Maximum of 100 entries.
   * The first filter containing a pattern that matches a table will be used.
   *
   * @generated from oneof google.privacy.dlp.v2.BigQueryTableCollection.pattern
   */
  pattern: {
    /**
     * A collection of regular expressions to match a BigQuery table against.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryRegexes include_regexes = 1;
     */
    value: BigQueryRegexes;
    case: "includeRegexes";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.BigQueryTableCollection.
 * Use `create(BigQueryTableCollectionSchema)` to create a new message.
 */
export const BigQueryTableCollectionSchema: GenMessage<BigQueryTableCollection> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 127);

/**
 * Requirements that must be true before a table is scanned in discovery for the
 * first time. There is an AND relationship between the top-level attributes.
 * Additionally, minimum conditions with an OR relationship that must be met
 * before Cloud DLP scans a table can be set (like a minimum row count or a
 * minimum table age).
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryBigQueryConditions
 */
export type DiscoveryBigQueryConditions = Message<"google.privacy.dlp.v2.DiscoveryBigQueryConditions"> & {
  /**
   * BigQuery table must have been created after this date. Used to avoid
   * backfilling.
   *
   * @generated from field: google.protobuf.Timestamp created_after = 1;
   */
  createdAfter?: Timestamp;

  /**
   * The type of BigQuery tables to scan. If nothing is set the default
   * behavior is to scan only tables of type TABLE and to give errors
   * for all unsupported tables.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryBigQueryConditions.included_types
   */
  includedTypes: {
    /**
     * Restrict discovery to specific table types.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryTableTypes types = 2;
     */
    value: BigQueryTableTypes;
    case: "types";
  } | {
    /**
     * Restrict discovery to categories of table types.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryTableTypeCollection type_collection = 3;
     */
    value: BigQueryTableTypeCollection;
    case: "typeCollection";
  } | { case: undefined; value?: undefined };

  /**
   * At least one of the conditions must be true for a table to be scanned.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions or_conditions = 4;
   */
  orConditions?: DiscoveryBigQueryConditions_OrConditions;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryBigQueryConditions.
 * Use `create(DiscoveryBigQueryConditionsSchema)` to create a new message.
 */
export const DiscoveryBigQueryConditionsSchema: GenMessage<DiscoveryBigQueryConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 128);

/**
 * There is an OR relationship between these attributes. They are used to
 * determine if a table should be scanned or not in Discovery.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions
 */
export type DiscoveryBigQueryConditions_OrConditions = Message<"google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions"> & {
  /**
   * Minimum number of rows that should be present before Cloud DLP
   * profiles a table
   *
   * @generated from field: int32 min_row_count = 1;
   */
  minRowCount: number;

  /**
   * Minimum age a table must have before Cloud DLP can profile it. Value must
   * be 1 hour or greater.
   *
   * @generated from field: google.protobuf.Duration min_age = 2;
   */
  minAge?: Duration;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryBigQueryConditions.OrConditions.
 * Use `create(DiscoveryBigQueryConditions_OrConditionsSchema)` to create a new message.
 */
export const DiscoveryBigQueryConditions_OrConditionsSchema: GenMessage<DiscoveryBigQueryConditions_OrConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 128, 0);

/**
 * What must take place for a profile to be updated and how
 * frequently it should occur.
 * New tables are scanned as quickly as possible depending on system
 * capacity.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryGenerationCadence
 */
export type DiscoveryGenerationCadence = Message<"google.privacy.dlp.v2.DiscoveryGenerationCadence"> & {
  /**
   * Governs when to update data profiles when a schema is modified.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoverySchemaModifiedCadence schema_modified_cadence = 1;
   */
  schemaModifiedCadence?: DiscoverySchemaModifiedCadence;

  /**
   * Governs when to update data profiles when a table is modified.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryTableModifiedCadence table_modified_cadence = 2;
   */
  tableModifiedCadence?: DiscoveryTableModifiedCadence;

  /**
   * Governs when to update data profiles when the inspection rules
   * defined by the `InspectTemplate` change.
   * If not set, changing the template will not cause a data profile to update.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence inspect_template_modified_cadence = 3;
   */
  inspectTemplateModifiedCadence?: DiscoveryInspectTemplateModifiedCadence;

  /**
   * Frequency at which profiles should be updated, regardless of whether the
   * underlying resource has changed. Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency refresh_frequency = 4;
   */
  refreshFrequency: DataProfileUpdateFrequency;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryGenerationCadence.
 * Use `create(DiscoveryGenerationCadenceSchema)` to create a new message.
 */
export const DiscoveryGenerationCadenceSchema: GenMessage<DiscoveryGenerationCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 129);

/**
 * The cadence at which to update data profiles when a table is modified.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryTableModifiedCadence
 */
export type DiscoveryTableModifiedCadence = Message<"google.privacy.dlp.v2.DiscoveryTableModifiedCadence"> & {
  /**
   * The type of events to consider when deciding if the table has been
   * modified and should have the profile updated. Defaults to
   * MODIFIED_TIMESTAMP.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BigQueryTableModification types = 1;
   */
  types: BigQueryTableModification[];

  /**
   * How frequently data profiles can be updated when tables are modified.
   * Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency frequency = 2;
   */
  frequency: DataProfileUpdateFrequency;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryTableModifiedCadence.
 * Use `create(DiscoveryTableModifiedCadenceSchema)` to create a new message.
 */
export const DiscoveryTableModifiedCadenceSchema: GenMessage<DiscoveryTableModifiedCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 130);

/**
 * The cadence at which to update data profiles when a schema is modified.
 *
 * @generated from message google.privacy.dlp.v2.DiscoverySchemaModifiedCadence
 */
export type DiscoverySchemaModifiedCadence = Message<"google.privacy.dlp.v2.DiscoverySchemaModifiedCadence"> & {
  /**
   * The type of events to consider when deciding if the table's schema
   * has been modified and should have the profile updated. Defaults to
   * NEW_COLUMNS.
   *
   * @generated from field: repeated google.privacy.dlp.v2.BigQuerySchemaModification types = 1;
   */
  types: BigQuerySchemaModification[];

  /**
   * How frequently profiles may be updated when schemas are
   * modified. Defaults to monthly.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency frequency = 2;
   */
  frequency: DataProfileUpdateFrequency;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoverySchemaModifiedCadence.
 * Use `create(DiscoverySchemaModifiedCadenceSchema)` to create a new message.
 */
export const DiscoverySchemaModifiedCadenceSchema: GenMessage<DiscoverySchemaModifiedCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 131);

/**
 * The cadence at which to update data profiles when the inspection rules
 * defined by the `InspectTemplate` change.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence
 */
export type DiscoveryInspectTemplateModifiedCadence = Message<"google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence"> & {
  /**
   * How frequently data profiles can be updated when the template is modified.
   * Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency frequency = 1;
   */
  frequency: DataProfileUpdateFrequency;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence.
 * Use `create(DiscoveryInspectTemplateModifiedCadenceSchema)` to create a new message.
 */
export const DiscoveryInspectTemplateModifiedCadenceSchema: GenMessage<DiscoveryInspectTemplateModifiedCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 132);

/**
 * Target used to match against for discovery with Cloud SQL tables.
 *
 * @generated from message google.privacy.dlp.v2.CloudSqlDiscoveryTarget
 */
export type CloudSqlDiscoveryTarget = Message<"google.privacy.dlp.v2.CloudSqlDiscoveryTarget"> & {
  /**
   * Required. The tables the discovery cadence applies to. The first target
   * with a matching filter will be the one to apply to a table.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryCloudSqlFilter filter = 1;
   */
  filter?: DiscoveryCloudSqlFilter;

  /**
   * In addition to matching the filter, these conditions must be true
   * before a profile is generated.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryCloudSqlConditions conditions = 2;
   */
  conditions?: DiscoveryCloudSqlConditions;

  /**
   * Type of schedule.
   *
   * @generated from oneof google.privacy.dlp.v2.CloudSqlDiscoveryTarget.cadence
   */
  cadence: {
    /**
     * How often and when to update profiles. New tables that match both the
     * filter and conditions are scanned as quickly as possible depending on
     * system capacity.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence generation_cadence = 3;
     */
    value: DiscoveryCloudSqlGenerationCadence;
    case: "generationCadence";
  } | {
    /**
     * Disable profiling for database resources that match this filter.
     *
     * @generated from field: google.privacy.dlp.v2.Disabled disabled = 4;
     */
    value: Disabled;
    case: "disabled";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.CloudSqlDiscoveryTarget.
 * Use `create(CloudSqlDiscoveryTargetSchema)` to create a new message.
 */
export const CloudSqlDiscoveryTargetSchema: GenMessage<CloudSqlDiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 133);

/**
 * Determines what tables will have profiles generated within an organization
 * or project. Includes the ability to filter by regular expression patterns
 * on project ID, location, instance, database, and database resource name.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudSqlFilter
 */
export type DiscoveryCloudSqlFilter = Message<"google.privacy.dlp.v2.DiscoveryCloudSqlFilter"> & {
  /**
   * Whether the filter applies to a specific set of database resources or all
   * other database resources within the location being profiled. The first
   * filter to match will be applied, regardless of the condition. If none is
   * set, will default to `others`.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryCloudSqlFilter.filter
   */
  filter: {
    /**
     * A specific set of database resources for this filter to apply to.
     *
     * @generated from field: google.privacy.dlp.v2.DatabaseResourceCollection collection = 1;
     */
    value: DatabaseResourceCollection;
    case: "collection";
  } | {
    /**
     * Catch-all. This should always be the last target in the list because
     * anything above it will apply first. Should only appear once in a
     * configuration. If none is specified, a default one will be added
     * automatically.
     *
     * @generated from field: google.privacy.dlp.v2.AllOtherDatabaseResources others = 2;
     */
    value: AllOtherDatabaseResources;
    case: "others";
  } | {
    /**
     * The database resource to scan. Targets including this can only include
     * one target (the target with this database resource reference).
     *
     * @generated from field: google.privacy.dlp.v2.DatabaseResourceReference database_resource_reference = 3;
     */
    value: DatabaseResourceReference;
    case: "databaseResourceReference";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudSqlFilter.
 * Use `create(DiscoveryCloudSqlFilterSchema)` to create a new message.
 */
export const DiscoveryCloudSqlFilterSchema: GenMessage<DiscoveryCloudSqlFilter> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 134);

/**
 * Match database resources using regex filters. Examples of database
 * resources are tables, views, and stored procedures.
 *
 * @generated from message google.privacy.dlp.v2.DatabaseResourceCollection
 */
export type DatabaseResourceCollection = Message<"google.privacy.dlp.v2.DatabaseResourceCollection"> & {
  /**
   * The first filter containing a pattern that matches a database resource will
   * be used.
   *
   * @generated from oneof google.privacy.dlp.v2.DatabaseResourceCollection.pattern
   */
  pattern: {
    /**
     * A collection of regular expressions to match a database resource against.
     *
     * @generated from field: google.privacy.dlp.v2.DatabaseResourceRegexes include_regexes = 1;
     */
    value: DatabaseResourceRegexes;
    case: "includeRegexes";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DatabaseResourceCollection.
 * Use `create(DatabaseResourceCollectionSchema)` to create a new message.
 */
export const DatabaseResourceCollectionSchema: GenMessage<DatabaseResourceCollection> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 135);

/**
 * A collection of regular expressions to determine what database resources to
 * match against.
 *
 * @generated from message google.privacy.dlp.v2.DatabaseResourceRegexes
 */
export type DatabaseResourceRegexes = Message<"google.privacy.dlp.v2.DatabaseResourceRegexes"> & {
  /**
   * A group of regular expression patterns to match against one or more
   * database resources.
   * Maximum of 100 entries. The sum of all regular expression's length can't
   * exceed 10 KiB.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DatabaseResourceRegex patterns = 1;
   */
  patterns: DatabaseResourceRegex[];
};

/**
 * Describes the message google.privacy.dlp.v2.DatabaseResourceRegexes.
 * Use `create(DatabaseResourceRegexesSchema)` to create a new message.
 */
export const DatabaseResourceRegexesSchema: GenMessage<DatabaseResourceRegexes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 136);

/**
 * A pattern to match against one or more database resources. At least one
 * pattern must be specified. Regular expressions use RE2
 * [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found
 * under the google/re2 repository on GitHub.
 *
 * @generated from message google.privacy.dlp.v2.DatabaseResourceRegex
 */
export type DatabaseResourceRegex = Message<"google.privacy.dlp.v2.DatabaseResourceRegex"> & {
  /**
   * For organizations, if unset, will match all projects. Has no effect
   * for configurations created within a project.
   *
   * @generated from field: string project_id_regex = 1;
   */
  projectIdRegex: string;

  /**
   * Regex to test the instance name against. If empty, all instances match.
   *
   * @generated from field: string instance_regex = 2;
   */
  instanceRegex: string;

  /**
   * Regex to test the database name against. If empty, all databases match.
   *
   * @generated from field: string database_regex = 3;
   */
  databaseRegex: string;

  /**
   * Regex to test the database resource's name against. An example of a
   * database resource name is a table's name. Other database resource names
   * like view names could be included in the future. If empty, all database
   * resources match.
   *
   * @generated from field: string database_resource_name_regex = 4;
   */
  databaseResourceNameRegex: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DatabaseResourceRegex.
 * Use `create(DatabaseResourceRegexSchema)` to create a new message.
 */
export const DatabaseResourceRegexSchema: GenMessage<DatabaseResourceRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 137);

/**
 * Match database resources not covered by any other filter.
 *
 * @generated from message google.privacy.dlp.v2.AllOtherDatabaseResources
 */
export type AllOtherDatabaseResources = Message<"google.privacy.dlp.v2.AllOtherDatabaseResources"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.AllOtherDatabaseResources.
 * Use `create(AllOtherDatabaseResourcesSchema)` to create a new message.
 */
export const AllOtherDatabaseResourcesSchema: GenMessage<AllOtherDatabaseResources> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 138);

/**
 * Identifies a single database resource, like a table within a database.
 *
 * @generated from message google.privacy.dlp.v2.DatabaseResourceReference
 */
export type DatabaseResourceReference = Message<"google.privacy.dlp.v2.DatabaseResourceReference"> & {
  /**
   * Required. If within a project-level config, then this must match the
   * config's project ID.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. The instance where this resource is located. For example: Cloud
   * SQL instance ID.
   *
   * @generated from field: string instance = 2;
   */
  instance: string;

  /**
   * Required. Name of a database within the instance.
   *
   * @generated from field: string database = 3;
   */
  database: string;

  /**
   * Required. Name of a database resource, for example, a table within the
   * database.
   *
   * @generated from field: string database_resource = 4;
   */
  databaseResource: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DatabaseResourceReference.
 * Use `create(DatabaseResourceReferenceSchema)` to create a new message.
 */
export const DatabaseResourceReferenceSchema: GenMessage<DatabaseResourceReference> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 139);

/**
 * Requirements that must be true before a table is profiled for the
 * first time.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudSqlConditions
 */
export type DiscoveryCloudSqlConditions = Message<"google.privacy.dlp.v2.DiscoveryCloudSqlConditions"> & {
  /**
   * Optional. Database engines that should be profiled.
   * Optional. Defaults to ALL_SUPPORTED_DATABASE_ENGINES if unspecified.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseEngine database_engines = 1;
   */
  databaseEngines: DiscoveryCloudSqlConditions_DatabaseEngine[];

  /**
   * Data profiles will only be generated for the database resource types
   * specified in this field.
   * If not specified, defaults to [DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES].
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseResourceType types = 3;
   */
  types: DiscoveryCloudSqlConditions_DatabaseResourceType[];
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudSqlConditions.
 * Use `create(DiscoveryCloudSqlConditionsSchema)` to create a new message.
 */
export const DiscoveryCloudSqlConditionsSchema: GenMessage<DiscoveryCloudSqlConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 140);

/**
 * The database engines that should be profiled.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseEngine
 */
export enum DiscoveryCloudSqlConditions_DatabaseEngine {
  /**
   * Unused.
   *
   * @generated from enum value: DATABASE_ENGINE_UNSPECIFIED = 0;
   */
  DATABASE_ENGINE_UNSPECIFIED = 0,

  /**
   * Include all supported database engines.
   *
   * @generated from enum value: ALL_SUPPORTED_DATABASE_ENGINES = 1;
   */
  ALL_SUPPORTED_DATABASE_ENGINES = 1,

  /**
   * MySQL database.
   *
   * @generated from enum value: MYSQL = 2;
   */
  MYSQL = 2,

  /**
   * PostgreSQL database.
   *
   * @generated from enum value: POSTGRES = 3;
   */
  POSTGRES = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseEngine.
 */
export const DiscoveryCloudSqlConditions_DatabaseEngineSchema: GenEnum<DiscoveryCloudSqlConditions_DatabaseEngine> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 140, 0);

/**
 * Cloud SQL database resource types. New values can be added at a later time.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseResourceType
 */
export enum DiscoveryCloudSqlConditions_DatabaseResourceType {
  /**
   * Unused.
   *
   * @generated from enum value: DATABASE_RESOURCE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Includes database resource types that become supported at a later time.
   *
   * @generated from enum value: DATABASE_RESOURCE_TYPE_ALL_SUPPORTED_TYPES = 1;
   */
  ALL_SUPPORTED_TYPES = 1,

  /**
   * Tables.
   *
   * @generated from enum value: DATABASE_RESOURCE_TYPE_TABLE = 2;
   */
  TABLE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryCloudSqlConditions.DatabaseResourceType.
 */
export const DiscoveryCloudSqlConditions_DatabaseResourceTypeSchema: GenEnum<DiscoveryCloudSqlConditions_DatabaseResourceType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 140, 1);

/**
 * How often existing tables should have their profiles refreshed.
 * New tables are scanned as quickly as possible depending on system
 * capacity.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence
 */
export type DiscoveryCloudSqlGenerationCadence = Message<"google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence"> & {
  /**
   * When to reprofile if the schema has changed.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence schema_modified_cadence = 1;
   */
  schemaModifiedCadence?: DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence;

  /**
   * Data changes (non-schema changes) in Cloud SQL tables can't trigger
   * reprofiling. If you set this field, profiles are refreshed at this
   * frequency regardless of whether the underlying tables have changed.
   * Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency refresh_frequency = 2;
   */
  refreshFrequency: DataProfileUpdateFrequency;

  /**
   * Governs when to update data profiles when the inspection rules
   * defined by the `InspectTemplate` change.
   * If not set, changing the template will not cause a data profile to update.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence inspect_template_modified_cadence = 3;
   */
  inspectTemplateModifiedCadence?: DiscoveryInspectTemplateModifiedCadence;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.
 * Use `create(DiscoveryCloudSqlGenerationCadenceSchema)` to create a new message.
 */
export const DiscoveryCloudSqlGenerationCadenceSchema: GenMessage<DiscoveryCloudSqlGenerationCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 141);

/**
 * How frequently to modify the profile when the table's schema is modified.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence
 */
export type DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence = Message<"google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence"> & {
  /**
   * The types of schema modifications to consider.
   * Defaults to NEW_COLUMNS.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence.CloudSqlSchemaModification types = 1;
   */
  types: DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence_CloudSqlSchemaModification[];

  /**
   * Frequency to regenerate data profiles when the schema is modified.
   * Defaults to monthly.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency frequency = 2;
   */
  frequency: DataProfileUpdateFrequency;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence.
 * Use `create(DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadenceSchema)` to create a new message.
 */
export const DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadenceSchema: GenMessage<DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 141, 0);

/**
 * The type of modification that causes a profile update.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence.CloudSqlSchemaModification
 */
export enum DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence_CloudSqlSchemaModification {
  /**
   * Unused.
   *
   * @generated from enum value: SQL_SCHEMA_MODIFICATION_UNSPECIFIED = 0;
   */
  SQL_SCHEMA_MODIFICATION_UNSPECIFIED = 0,

  /**
   * New columns have appeared.
   *
   * @generated from enum value: NEW_COLUMNS = 1;
   */
  NEW_COLUMNS = 1,

  /**
   * Columns have been removed from the table.
   *
   * @generated from enum value: REMOVED_COLUMNS = 2;
   */
  REMOVED_COLUMNS = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryCloudSqlGenerationCadence.SchemaModifiedCadence.CloudSqlSchemaModification.
 */
export const DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence_CloudSqlSchemaModificationSchema: GenEnum<DiscoveryCloudSqlGenerationCadence_SchemaModifiedCadence_CloudSqlSchemaModification> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 141, 0, 0);

/**
 * Discovery target for credentials and secrets in cloud resource metadata.
 *
 * This target does not include any filtering or frequency controls. Cloud
 * DLP will scan cloud resource metadata for secrets daily.
 *
 * No inspect template should be included in the discovery config for a
 * security benchmarks scan. Instead, the built-in list of secrets and
 * credentials infoTypes will be used (see
 * https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference#credentials_and_secrets).
 *
 * Credentials and secrets discovered will be reported as vulnerabilities to
 * Security Command Center.
 *
 * @generated from message google.privacy.dlp.v2.SecretsDiscoveryTarget
 */
export type SecretsDiscoveryTarget = Message<"google.privacy.dlp.v2.SecretsDiscoveryTarget"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.SecretsDiscoveryTarget.
 * Use `create(SecretsDiscoveryTargetSchema)` to create a new message.
 */
export const SecretsDiscoveryTargetSchema: GenMessage<SecretsDiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 142);

/**
 * Target used to match against for discovery with Cloud Storage buckets.
 *
 * @generated from message google.privacy.dlp.v2.CloudStorageDiscoveryTarget
 */
export type CloudStorageDiscoveryTarget = Message<"google.privacy.dlp.v2.CloudStorageDiscoveryTarget"> & {
  /**
   * Required. The buckets the generation_cadence applies to. The first target
   * with a matching filter will be the one to apply to a bucket.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryCloudStorageFilter filter = 1;
   */
  filter?: DiscoveryCloudStorageFilter;

  /**
   * Optional. In addition to matching the filter, these conditions must be true
   * before a profile is generated.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryFileStoreConditions conditions = 4;
   */
  conditions?: DiscoveryFileStoreConditions;

  /**
   * How often and when to update profiles.
   *
   * @generated from oneof google.privacy.dlp.v2.CloudStorageDiscoveryTarget.cadence
   */
  cadence: {
    /**
     * Optional. How often and when to update profiles. New buckets that match
     * both the filter and conditions are scanned as quickly as possible
     * depending on system capacity.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryCloudStorageGenerationCadence generation_cadence = 2;
     */
    value: DiscoveryCloudStorageGenerationCadence;
    case: "generationCadence";
  } | {
    /**
     * Optional. Disable profiling for buckets that match this filter.
     *
     * @generated from field: google.privacy.dlp.v2.Disabled disabled = 3;
     */
    value: Disabled;
    case: "disabled";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.CloudStorageDiscoveryTarget.
 * Use `create(CloudStorageDiscoveryTargetSchema)` to create a new message.
 */
export const CloudStorageDiscoveryTargetSchema: GenMessage<CloudStorageDiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 143);

/**
 * Determines which buckets will have profiles generated within an organization
 * or project. Includes the ability to filter by regular expression patterns
 * on project ID and bucket name.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudStorageFilter
 */
export type DiscoveryCloudStorageFilter = Message<"google.privacy.dlp.v2.DiscoveryCloudStorageFilter"> & {
  /**
   * Whether the filter applies to a specific set of buckets or all
   * other buckets within the location being profiled. The first
   * filter to match will be applied, regardless of the condition. If none is
   * set, will default to `others`.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryCloudStorageFilter.filter
   */
  filter: {
    /**
     * Optional. A specific set of buckets for this filter to apply to.
     *
     * @generated from field: google.privacy.dlp.v2.FileStoreCollection collection = 1;
     */
    value: FileStoreCollection;
    case: "collection";
  } | {
    /**
     * Optional. The bucket to scan. Targets including this can only include one
     * target (the target with this bucket). This enables profiling the contents
     * of a single bucket, while the other options allow for easy profiling of
     * many bucets within a project or an organization.
     *
     * @generated from field: google.privacy.dlp.v2.CloudStorageResourceReference cloud_storage_resource_reference = 2;
     */
    value: CloudStorageResourceReference;
    case: "cloudStorageResourceReference";
  } | {
    /**
     * Optional. Catch-all. This should always be the last target in the list
     * because anything above it will apply first. Should only appear once in a
     * configuration. If none is specified, a default one will be added
     * automatically.
     *
     * @generated from field: google.privacy.dlp.v2.AllOtherResources others = 100;
     */
    value: AllOtherResources;
    case: "others";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudStorageFilter.
 * Use `create(DiscoveryCloudStorageFilterSchema)` to create a new message.
 */
export const DiscoveryCloudStorageFilterSchema: GenMessage<DiscoveryCloudStorageFilter> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 144);

/**
 * Match file stores (e.g. buckets) using regex filters.
 *
 * @generated from message google.privacy.dlp.v2.FileStoreCollection
 */
export type FileStoreCollection = Message<"google.privacy.dlp.v2.FileStoreCollection"> & {
  /**
   * The first filter containing a pattern that matches a file store will
   * be used.
   *
   * @generated from oneof google.privacy.dlp.v2.FileStoreCollection.pattern
   */
  pattern: {
    /**
     * Optional. A collection of regular expressions to match a file store
     * against.
     *
     * @generated from field: google.privacy.dlp.v2.FileStoreRegexes include_regexes = 1;
     */
    value: FileStoreRegexes;
    case: "includeRegexes";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.FileStoreCollection.
 * Use `create(FileStoreCollectionSchema)` to create a new message.
 */
export const FileStoreCollectionSchema: GenMessage<FileStoreCollection> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 145);

/**
 * A collection of regular expressions to determine what file store to match
 * against.
 *
 * @generated from message google.privacy.dlp.v2.FileStoreRegexes
 */
export type FileStoreRegexes = Message<"google.privacy.dlp.v2.FileStoreRegexes"> & {
  /**
   * Required. The group of regular expression patterns to match against one or
   * more file stores. Maximum of 100 entries. The sum of all regular
   * expression's length can't exceed 10 KiB.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileStoreRegex patterns = 1;
   */
  patterns: FileStoreRegex[];
};

/**
 * Describes the message google.privacy.dlp.v2.FileStoreRegexes.
 * Use `create(FileStoreRegexesSchema)` to create a new message.
 */
export const FileStoreRegexesSchema: GenMessage<FileStoreRegexes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 146);

/**
 * A pattern to match against one or more file stores.
 *
 * @generated from message google.privacy.dlp.v2.FileStoreRegex
 */
export type FileStoreRegex = Message<"google.privacy.dlp.v2.FileStoreRegex"> & {
  /**
   * The type of resource regex to use.
   *
   * @generated from oneof google.privacy.dlp.v2.FileStoreRegex.resource_regex
   */
  resourceRegex: {
    /**
     * Optional. Regex for Cloud Storage.
     *
     * @generated from field: google.privacy.dlp.v2.CloudStorageRegex cloud_storage_regex = 1;
     */
    value: CloudStorageRegex;
    case: "cloudStorageRegex";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.FileStoreRegex.
 * Use `create(FileStoreRegexSchema)` to create a new message.
 */
export const FileStoreRegexSchema: GenMessage<FileStoreRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 147);

/**
 * A pattern to match against one or more file stores. At least one
 * pattern must be specified. Regular expressions use RE2
 * [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found
 * under the google/re2 repository on GitHub.
 *
 * @generated from message google.privacy.dlp.v2.CloudStorageRegex
 */
export type CloudStorageRegex = Message<"google.privacy.dlp.v2.CloudStorageRegex"> & {
  /**
   * Optional. For organizations, if unset, will match all projects.
   *
   * @generated from field: string project_id_regex = 1;
   */
  projectIdRegex: string;

  /**
   * Optional. Regex to test the bucket name against. If empty, all buckets
   * match. Example: "marketing2021" or "(marketing)\d{4}" will both match the
   * bucket gs://marketing2021
   *
   * @generated from field: string bucket_name_regex = 2;
   */
  bucketNameRegex: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CloudStorageRegex.
 * Use `create(CloudStorageRegexSchema)` to create a new message.
 */
export const CloudStorageRegexSchema: GenMessage<CloudStorageRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 148);

/**
 * Identifies a single Cloud Storage bucket.
 *
 * @generated from message google.privacy.dlp.v2.CloudStorageResourceReference
 */
export type CloudStorageResourceReference = Message<"google.privacy.dlp.v2.CloudStorageResourceReference"> & {
  /**
   * Required. The bucket to scan.
   *
   * @generated from field: string bucket_name = 1;
   */
  bucketName: string;

  /**
   * Required. If within a project-level config, then this must match the
   * config's project id.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CloudStorageResourceReference.
 * Use `create(CloudStorageResourceReferenceSchema)` to create a new message.
 */
export const CloudStorageResourceReferenceSchema: GenMessage<CloudStorageResourceReference> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 149);

/**
 * How often existing buckets should have their profiles refreshed.
 * New buckets are scanned as quickly as possible depending on system
 * capacity.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudStorageGenerationCadence
 */
export type DiscoveryCloudStorageGenerationCadence = Message<"google.privacy.dlp.v2.DiscoveryCloudStorageGenerationCadence"> & {
  /**
   * Optional. Data changes in Cloud Storage can't trigger reprofiling. If you
   * set this field, profiles are refreshed at this frequency regardless of
   * whether the underlying buckets have changed. Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency refresh_frequency = 1;
   */
  refreshFrequency: DataProfileUpdateFrequency;

  /**
   * Optional. Governs when to update data profiles when the inspection rules
   * defined by the `InspectTemplate` change.
   * If not set, changing the template will not cause a data profile to update.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence inspect_template_modified_cadence = 2;
   */
  inspectTemplateModifiedCadence?: DiscoveryInspectTemplateModifiedCadence;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudStorageGenerationCadence.
 * Use `create(DiscoveryCloudStorageGenerationCadenceSchema)` to create a new message.
 */
export const DiscoveryCloudStorageGenerationCadenceSchema: GenMessage<DiscoveryCloudStorageGenerationCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 150);

/**
 * Requirements that must be true before a Cloud Storage bucket or object is
 * scanned in discovery for the first time. There is an AND relationship between
 * the top-level attributes.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryCloudStorageConditions
 */
export type DiscoveryCloudStorageConditions = Message<"google.privacy.dlp.v2.DiscoveryCloudStorageConditions"> & {
  /**
   * Required. Only objects with the specified attributes will be scanned. If an
   * object has one of the specified attributes but is inside an excluded
   * bucket, it will not be scanned. Defaults to [ALL_SUPPORTED_OBJECTS]. A
   * profile will be created even if no objects match the
   * included_object_attributes.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageObjectAttribute included_object_attributes = 1;
   */
  includedObjectAttributes: DiscoveryCloudStorageConditions_CloudStorageObjectAttribute[];

  /**
   * Required. Only objects with the specified attributes will be scanned.
   * Defaults to [ALL_SUPPORTED_BUCKETS] if unset.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageBucketAttribute included_bucket_attributes = 2;
   */
  includedBucketAttributes: DiscoveryCloudStorageConditions_CloudStorageBucketAttribute[];
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryCloudStorageConditions.
 * Use `create(DiscoveryCloudStorageConditionsSchema)` to create a new message.
 */
export const DiscoveryCloudStorageConditionsSchema: GenMessage<DiscoveryCloudStorageConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 151);

/**
 * The attribute of an object. See
 * https://cloud.google.com/storage/docs/storage-classes for more information
 * on storage classes.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageObjectAttribute
 */
export enum DiscoveryCloudStorageConditions_CloudStorageObjectAttribute {
  /**
   * Unused.
   *
   * @generated from enum value: CLOUD_STORAGE_OBJECT_ATTRIBUTE_UNSPECIFIED = 0;
   */
  CLOUD_STORAGE_OBJECT_ATTRIBUTE_UNSPECIFIED = 0,

  /**
   * Scan objects regardless of the attribute.
   *
   * @generated from enum value: ALL_SUPPORTED_OBJECTS = 1;
   */
  ALL_SUPPORTED_OBJECTS = 1,

  /**
   * Scan objects with the standard storage class.
   *
   * @generated from enum value: STANDARD = 2;
   */
  STANDARD = 2,

  /**
   * Scan objects with the nearline storage class. This will incur retrieval
   * fees.
   *
   * @generated from enum value: NEARLINE = 3;
   */
  NEARLINE = 3,

  /**
   * Scan objects with the coldline storage class. This will incur retrieval
   * fees.
   *
   * @generated from enum value: COLDLINE = 4;
   */
  COLDLINE = 4,

  /**
   * Scan objects with the archive storage class. This will incur retrieval
   * fees.
   *
   * @generated from enum value: ARCHIVE = 5;
   */
  ARCHIVE = 5,

  /**
   * Scan objects with the regional storage class.
   *
   * @generated from enum value: REGIONAL = 6;
   */
  REGIONAL = 6,

  /**
   * Scan objects with the multi-regional storage class.
   *
   * @generated from enum value: MULTI_REGIONAL = 7;
   */
  MULTI_REGIONAL = 7,

  /**
   * Scan objects with the dual-regional storage class. This will incur
   * retrieval fees.
   *
   * @generated from enum value: DURABLE_REDUCED_AVAILABILITY = 8;
   */
  DURABLE_REDUCED_AVAILABILITY = 8,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageObjectAttribute.
 */
export const DiscoveryCloudStorageConditions_CloudStorageObjectAttributeSchema: GenEnum<DiscoveryCloudStorageConditions_CloudStorageObjectAttribute> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 151, 0);

/**
 * The attribute of a bucket.
 *
 * @generated from enum google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageBucketAttribute
 */
export enum DiscoveryCloudStorageConditions_CloudStorageBucketAttribute {
  /**
   * Unused.
   *
   * @generated from enum value: CLOUD_STORAGE_BUCKET_ATTRIBUTE_UNSPECIFIED = 0;
   */
  CLOUD_STORAGE_BUCKET_ATTRIBUTE_UNSPECIFIED = 0,

  /**
   * Scan buckets regardless of the attribute.
   *
   * @generated from enum value: ALL_SUPPORTED_BUCKETS = 1;
   */
  ALL_SUPPORTED_BUCKETS = 1,

  /**
   * Buckets with autoclass disabled
   * (https://cloud.google.com/storage/docs/autoclass). Only one of
   * AUTOCLASS_DISABLED or AUTOCLASS_ENABLED should be set.
   *
   * @generated from enum value: AUTOCLASS_DISABLED = 2;
   */
  AUTOCLASS_DISABLED = 2,

  /**
   * Buckets with autoclass enabled
   * (https://cloud.google.com/storage/docs/autoclass). Only one of
   * AUTOCLASS_DISABLED or AUTOCLASS_ENABLED should be set. Scanning
   * Autoclass-enabled buckets can affect object storage classes.
   *
   * @generated from enum value: AUTOCLASS_ENABLED = 3;
   */
  AUTOCLASS_ENABLED = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.DiscoveryCloudStorageConditions.CloudStorageBucketAttribute.
 */
export const DiscoveryCloudStorageConditions_CloudStorageBucketAttributeSchema: GenEnum<DiscoveryCloudStorageConditions_CloudStorageBucketAttribute> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 151, 1);

/**
 * Requirements that must be true before a file store is scanned in discovery
 * for the first time. There is an AND relationship between the top-level
 * attributes.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryFileStoreConditions
 */
export type DiscoveryFileStoreConditions = Message<"google.privacy.dlp.v2.DiscoveryFileStoreConditions"> & {
  /**
   * Optional. File store must have been created after this date. Used to avoid
   * backfilling.
   *
   * @generated from field: google.protobuf.Timestamp created_after = 1;
   */
  createdAfter?: Timestamp;

  /**
   * Optional. Minimum age a file store must have. If set, the value must be 1
   * hour or greater.
   *
   * @generated from field: google.protobuf.Duration min_age = 2;
   */
  minAge?: Duration;

  /**
   * File store specific conditions.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryFileStoreConditions.conditions
   */
  conditions: {
    /**
     * Optional. Cloud Storage conditions.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryCloudStorageConditions cloud_storage_conditions = 3;
     */
    value: DiscoveryCloudStorageConditions;
    case: "cloudStorageConditions";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryFileStoreConditions.
 * Use `create(DiscoveryFileStoreConditionsSchema)` to create a new message.
 */
export const DiscoveryFileStoreConditionsSchema: GenMessage<DiscoveryFileStoreConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 152);

/**
 * Target used to match against for discovery of resources from other clouds.
 * An [AWS connector in Security Command Center
 * (Enterprise](https://cloud.google.com/security-command-center/docs/connect-scc-to-aws)
 * is required to use this feature.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudDiscoveryTarget
 */
export type OtherCloudDiscoveryTarget = Message<"google.privacy.dlp.v2.OtherCloudDiscoveryTarget"> & {
  /**
   * Required. The type of data profiles generated by this discovery target.
   * Supported values are:
   * * aws/s3/bucket
   *
   * @generated from field: google.privacy.dlp.v2.DataSourceType data_source_type = 1;
   */
  dataSourceType?: DataSourceType;

  /**
   * Required. The resources that the discovery cadence applies to. The
   * first target with a matching filter will be the one to apply to a resource.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryOtherCloudFilter filter = 2;
   */
  filter?: DiscoveryOtherCloudFilter;

  /**
   * Optional. In addition to matching the filter, these conditions must be true
   * before a profile is generated.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryOtherCloudConditions conditions = 3;
   */
  conditions?: DiscoveryOtherCloudConditions;

  /**
   * Type of cadence.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudDiscoveryTarget.cadence
   */
  cadence: {
    /**
     * How often and when to update data profiles. New resources that match both
     * the filter and conditions are scanned as quickly as possible depending on
     * system capacity.
     *
     * @generated from field: google.privacy.dlp.v2.DiscoveryOtherCloudGenerationCadence generation_cadence = 4;
     */
    value: DiscoveryOtherCloudGenerationCadence;
    case: "generationCadence";
  } | {
    /**
     * Disable profiling for resources that match this filter.
     *
     * @generated from field: google.privacy.dlp.v2.Disabled disabled = 5;
     */
    value: Disabled;
    case: "disabled";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudDiscoveryTarget.
 * Use `create(OtherCloudDiscoveryTargetSchema)` to create a new message.
 */
export const OtherCloudDiscoveryTargetSchema: GenMessage<OtherCloudDiscoveryTarget> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 153);

/**
 * Determines which resources from the other cloud will have profiles generated.
 * Includes the ability to filter by resource names.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryOtherCloudFilter
 */
export type DiscoveryOtherCloudFilter = Message<"google.privacy.dlp.v2.DiscoveryOtherCloudFilter"> & {
  /**
   * Whether the filter applies to a specific set of resources or all
   * other resources. The first filter to match will be applied, regardless of
   * the condition. Defaults to `others` if none is set.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryOtherCloudFilter.filter
   */
  filter: {
    /**
     * A collection of resources for this filter to apply to.
     *
     * @generated from field: google.privacy.dlp.v2.OtherCloudResourceCollection collection = 1;
     */
    value: OtherCloudResourceCollection;
    case: "collection";
  } | {
    /**
     * The resource to scan. Configs using this filter can only have one target
     * (the target with this single resource reference).
     *
     * @generated from field: google.privacy.dlp.v2.OtherCloudSingleResourceReference single_resource = 2;
     */
    value: OtherCloudSingleResourceReference;
    case: "singleResource";
  } | {
    /**
     * Optional. Catch-all. This should always be the last target in the list
     * because anything above it will apply first. Should only appear once in a
     * configuration. If none is specified, a default one will be added
     * automatically.
     *
     * @generated from field: google.privacy.dlp.v2.AllOtherResources others = 100;
     */
    value: AllOtherResources;
    case: "others";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryOtherCloudFilter.
 * Use `create(DiscoveryOtherCloudFilterSchema)` to create a new message.
 */
export const DiscoveryOtherCloudFilterSchema: GenMessage<DiscoveryOtherCloudFilter> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 154);

/**
 * Match resources using regex filters.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudResourceCollection
 */
export type OtherCloudResourceCollection = Message<"google.privacy.dlp.v2.OtherCloudResourceCollection"> & {
  /**
   * The first filter containing a pattern that matches a resource will be used.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudResourceCollection.pattern
   */
  pattern: {
    /**
     * A collection of regular expressions to match a resource against.
     *
     * @generated from field: google.privacy.dlp.v2.OtherCloudResourceRegexes include_regexes = 1;
     */
    value: OtherCloudResourceRegexes;
    case: "includeRegexes";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudResourceCollection.
 * Use `create(OtherCloudResourceCollectionSchema)` to create a new message.
 */
export const OtherCloudResourceCollectionSchema: GenMessage<OtherCloudResourceCollection> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 155);

/**
 * A collection of regular expressions to determine what resources to match
 * against.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudResourceRegexes
 */
export type OtherCloudResourceRegexes = Message<"google.privacy.dlp.v2.OtherCloudResourceRegexes"> & {
  /**
   * A group of regular expression patterns to match against one or more
   * resources.
   * Maximum of 100 entries. The sum of all regular expression's length can't
   * exceed 10 KiB.
   *
   * @generated from field: repeated google.privacy.dlp.v2.OtherCloudResourceRegex patterns = 1;
   */
  patterns: OtherCloudResourceRegex[];
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudResourceRegexes.
 * Use `create(OtherCloudResourceRegexesSchema)` to create a new message.
 */
export const OtherCloudResourceRegexesSchema: GenMessage<OtherCloudResourceRegexes> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 156);

/**
 * A pattern to match against one or more resources. At least one pattern must
 * be specified. Regular expressions use RE2
 * [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found
 * under the google/re2 repository on GitHub.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudResourceRegex
 */
export type OtherCloudResourceRegex = Message<"google.privacy.dlp.v2.OtherCloudResourceRegex"> & {
  /**
   * The type of resource regex to use.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudResourceRegex.resource_regex
   */
  resourceRegex: {
    /**
     * Regex for Amazon S3 buckets.
     *
     * @generated from field: google.privacy.dlp.v2.AmazonS3BucketRegex amazon_s3_bucket_regex = 1;
     */
    value: AmazonS3BucketRegex;
    case: "amazonS3BucketRegex";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudResourceRegex.
 * Use `create(OtherCloudResourceRegexSchema)` to create a new message.
 */
export const OtherCloudResourceRegexSchema: GenMessage<OtherCloudResourceRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 157);

/**
 * AWS account regex.
 *
 * @generated from message google.privacy.dlp.v2.AwsAccountRegex
 */
export type AwsAccountRegex = Message<"google.privacy.dlp.v2.AwsAccountRegex"> & {
  /**
   * Optional. Regex to test the AWS account ID against.
   * If empty, all accounts match.
   *
   * @generated from field: string account_id_regex = 1;
   */
  accountIdRegex: string;
};

/**
 * Describes the message google.privacy.dlp.v2.AwsAccountRegex.
 * Use `create(AwsAccountRegexSchema)` to create a new message.
 */
export const AwsAccountRegexSchema: GenMessage<AwsAccountRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 158);

/**
 * Amazon S3 bucket regex.
 *
 * @generated from message google.privacy.dlp.v2.AmazonS3BucketRegex
 */
export type AmazonS3BucketRegex = Message<"google.privacy.dlp.v2.AmazonS3BucketRegex"> & {
  /**
   * The AWS account regex.
   *
   * @generated from field: google.privacy.dlp.v2.AwsAccountRegex aws_account_regex = 1;
   */
  awsAccountRegex?: AwsAccountRegex;

  /**
   * Optional. Regex to test the bucket name against.
   * If empty, all buckets match.
   *
   * @generated from field: string bucket_name_regex = 2;
   */
  bucketNameRegex: string;
};

/**
 * Describes the message google.privacy.dlp.v2.AmazonS3BucketRegex.
 * Use `create(AmazonS3BucketRegexSchema)` to create a new message.
 */
export const AmazonS3BucketRegexSchema: GenMessage<AmazonS3BucketRegex> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 159);

/**
 * Identifies a single resource, like a single Amazon S3 bucket.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudSingleResourceReference
 */
export type OtherCloudSingleResourceReference = Message<"google.privacy.dlp.v2.OtherCloudSingleResourceReference"> & {
  /**
   * The resource to scan.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudSingleResourceReference.resource
   */
  resource: {
    /**
     * Amazon S3 bucket.
     *
     * @generated from field: google.privacy.dlp.v2.AmazonS3Bucket amazon_s3_bucket = 1;
     */
    value: AmazonS3Bucket;
    case: "amazonS3Bucket";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudSingleResourceReference.
 * Use `create(OtherCloudSingleResourceReferenceSchema)` to create a new message.
 */
export const OtherCloudSingleResourceReferenceSchema: GenMessage<OtherCloudSingleResourceReference> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 160);

/**
 * AWS account.
 *
 * @generated from message google.privacy.dlp.v2.AwsAccount
 */
export type AwsAccount = Message<"google.privacy.dlp.v2.AwsAccount"> & {
  /**
   * Required. AWS account ID.
   *
   * @generated from field: string account_id = 1;
   */
  accountId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.AwsAccount.
 * Use `create(AwsAccountSchema)` to create a new message.
 */
export const AwsAccountSchema: GenMessage<AwsAccount> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 161);

/**
 * Amazon S3 bucket.
 *
 * @generated from message google.privacy.dlp.v2.AmazonS3Bucket
 */
export type AmazonS3Bucket = Message<"google.privacy.dlp.v2.AmazonS3Bucket"> & {
  /**
   * The AWS account.
   *
   * @generated from field: google.privacy.dlp.v2.AwsAccount aws_account = 1;
   */
  awsAccount?: AwsAccount;

  /**
   * Required. The bucket name.
   *
   * @generated from field: string bucket_name = 2;
   */
  bucketName: string;
};

/**
 * Describes the message google.privacy.dlp.v2.AmazonS3Bucket.
 * Use `create(AmazonS3BucketSchema)` to create a new message.
 */
export const AmazonS3BucketSchema: GenMessage<AmazonS3Bucket> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 162);

/**
 * Requirements that must be true before a resource is profiled for the first
 * time.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryOtherCloudConditions
 */
export type DiscoveryOtherCloudConditions = Message<"google.privacy.dlp.v2.DiscoveryOtherCloudConditions"> & {
  /**
   * Minimum age a resource must be before Cloud DLP can profile it. Value must
   * be 1 hour or greater.
   *
   * @generated from field: google.protobuf.Duration min_age = 1;
   */
  minAge?: Duration;

  /**
   * The conditions to apply.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryOtherCloudConditions.conditions
   */
  conditions: {
    /**
     * Amazon S3 bucket conditions.
     *
     * @generated from field: google.privacy.dlp.v2.AmazonS3BucketConditions amazon_s3_bucket_conditions = 2;
     */
    value: AmazonS3BucketConditions;
    case: "amazonS3BucketConditions";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryOtherCloudConditions.
 * Use `create(DiscoveryOtherCloudConditionsSchema)` to create a new message.
 */
export const DiscoveryOtherCloudConditionsSchema: GenMessage<DiscoveryOtherCloudConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 163);

/**
 * Amazon S3 bucket conditions.
 *
 * @generated from message google.privacy.dlp.v2.AmazonS3BucketConditions
 */
export type AmazonS3BucketConditions = Message<"google.privacy.dlp.v2.AmazonS3BucketConditions"> & {
  /**
   * Optional. Bucket types that should be profiled.
   * Optional. Defaults to TYPE_ALL_SUPPORTED if unspecified.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AmazonS3BucketConditions.BucketType bucket_types = 1;
   */
  bucketTypes: AmazonS3BucketConditions_BucketType[];

  /**
   * Optional. Object classes that should be profiled.
   * Optional. Defaults to ALL_SUPPORTED_CLASSES if unspecified.
   *
   * @generated from field: repeated google.privacy.dlp.v2.AmazonS3BucketConditions.ObjectStorageClass object_storage_classes = 2;
   */
  objectStorageClasses: AmazonS3BucketConditions_ObjectStorageClass[];
};

/**
 * Describes the message google.privacy.dlp.v2.AmazonS3BucketConditions.
 * Use `create(AmazonS3BucketConditionsSchema)` to create a new message.
 */
export const AmazonS3BucketConditionsSchema: GenMessage<AmazonS3BucketConditions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 164);

/**
 * Supported Amazon S3 bucket types.
 * Defaults to TYPE_ALL_SUPPORTED.
 *
 * @generated from enum google.privacy.dlp.v2.AmazonS3BucketConditions.BucketType
 */
export enum AmazonS3BucketConditions_BucketType {
  /**
   * Unused.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * All supported classes.
   *
   * @generated from enum value: TYPE_ALL_SUPPORTED = 1;
   */
  TYPE_ALL_SUPPORTED = 1,

  /**
   * A general purpose Amazon S3 bucket.
   *
   * @generated from enum value: TYPE_GENERAL_PURPOSE = 2;
   */
  TYPE_GENERAL_PURPOSE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.AmazonS3BucketConditions.BucketType.
 */
export const AmazonS3BucketConditions_BucketTypeSchema: GenEnum<AmazonS3BucketConditions_BucketType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 164, 0);

/**
 * Supported Amazon S3 object storage classes.
 * Defaults to ALL_SUPPORTED_CLASSES.
 *
 * @generated from enum google.privacy.dlp.v2.AmazonS3BucketConditions.ObjectStorageClass
 */
export enum AmazonS3BucketConditions_ObjectStorageClass {
  /**
   * Unused.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * All supported classes.
   *
   * @generated from enum value: ALL_SUPPORTED_CLASSES = 1;
   */
  ALL_SUPPORTED_CLASSES = 1,

  /**
   * Standard object class.
   *
   * @generated from enum value: STANDARD = 2;
   */
  STANDARD = 2,

  /**
   * Standard - infrequent access object class.
   *
   * @generated from enum value: STANDARD_INFREQUENT_ACCESS = 4;
   */
  STANDARD_INFREQUENT_ACCESS = 4,

  /**
   * Glacier - instant retrieval object class.
   *
   * @generated from enum value: GLACIER_INSTANT_RETRIEVAL = 6;
   */
  GLACIER_INSTANT_RETRIEVAL = 6,

  /**
   * Objects in the S3 Intelligent-Tiering access tiers.
   *
   * @generated from enum value: INTELLIGENT_TIERING = 7;
   */
  INTELLIGENT_TIERING = 7,
}

/**
 * Describes the enum google.privacy.dlp.v2.AmazonS3BucketConditions.ObjectStorageClass.
 */
export const AmazonS3BucketConditions_ObjectStorageClassSchema: GenEnum<AmazonS3BucketConditions_ObjectStorageClass> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 164, 1);

/**
 * How often existing resources should have their profiles refreshed.
 * New resources are scanned as quickly as possible depending on system
 * capacity.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryOtherCloudGenerationCadence
 */
export type DiscoveryOtherCloudGenerationCadence = Message<"google.privacy.dlp.v2.DiscoveryOtherCloudGenerationCadence"> & {
  /**
   * Optional. Frequency to update profiles regardless of whether the underlying
   * resource has changes. Defaults to never.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileUpdateFrequency refresh_frequency = 1;
   */
  refreshFrequency: DataProfileUpdateFrequency;

  /**
   * Optional. Governs when to update data profiles when the inspection rules
   * defined by the `InspectTemplate` change.
   * If not set, changing the template will not cause a data profile to update.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryInspectTemplateModifiedCadence inspect_template_modified_cadence = 2;
   */
  inspectTemplateModifiedCadence?: DiscoveryInspectTemplateModifiedCadence;
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryOtherCloudGenerationCadence.
 * Use `create(DiscoveryOtherCloudGenerationCadenceSchema)` to create a new message.
 */
export const DiscoveryOtherCloudGenerationCadenceSchema: GenMessage<DiscoveryOtherCloudGenerationCadence> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 165);

/**
 * The location to begin a discovery scan. Denotes an organization ID or folder
 * ID within an organization.
 *
 * @generated from message google.privacy.dlp.v2.DiscoveryStartingLocation
 */
export type DiscoveryStartingLocation = Message<"google.privacy.dlp.v2.DiscoveryStartingLocation"> & {
  /**
   * The location to be scanned.
   *
   * @generated from oneof google.privacy.dlp.v2.DiscoveryStartingLocation.location
   */
  location: {
    /**
     * The ID of an organization to scan.
     *
     * @generated from field: int64 organization_id = 1;
     */
    value: bigint;
    case: "organizationId";
  } | {
    /**
     * The ID of the folder within an organization to be scanned.
     *
     * @generated from field: int64 folder_id = 2;
     */
    value: bigint;
    case: "folderId";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DiscoveryStartingLocation.
 * Use `create(DiscoveryStartingLocationSchema)` to create a new message.
 */
export const DiscoveryStartingLocationSchema: GenMessage<DiscoveryStartingLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 166);

/**
 * The other cloud starting location for discovery.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation
 */
export type OtherCloudDiscoveryStartingLocation = Message<"google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation"> & {
  /**
   * The other cloud starting location for discovery.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.location
   */
  location: {
    /**
     * The AWS starting location for discovery.
     *
     * @generated from field: google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation aws_location = 1;
     */
    value: OtherCloudDiscoveryStartingLocation_AwsDiscoveryStartingLocation;
    case: "awsLocation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.
 * Use `create(OtherCloudDiscoveryStartingLocationSchema)` to create a new message.
 */
export const OtherCloudDiscoveryStartingLocationSchema: GenMessage<OtherCloudDiscoveryStartingLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 167);

/**
 * The AWS starting location for discovery.
 *
 * @generated from message google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation
 */
export type OtherCloudDiscoveryStartingLocation_AwsDiscoveryStartingLocation = Message<"google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation"> & {
  /**
   * The scope of this starting location.
   *
   * @generated from oneof google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation.scope
   */
  scope: {
    /**
     * The AWS account ID that this discovery config applies to.
     * Within an AWS organization, you can find the AWS account ID inside an
     * AWS account ARN. Example:
     * arn:{partition}:organizations::{management_account_id}:account/{org_id}/{account_id}
     *
     * @generated from field: string account_id = 2;
     */
    value: string;
    case: "accountId";
  } | {
    /**
     * All AWS assets stored in Asset Inventory that didn't match other AWS
     * discovery configs.
     *
     * @generated from field: bool all_asset_inventory_assets = 3;
     */
    value: boolean;
    case: "allAssetInventoryAssets";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.OtherCloudDiscoveryStartingLocation.AwsDiscoveryStartingLocation.
 * Use `create(OtherCloudDiscoveryStartingLocation_AwsDiscoveryStartingLocationSchema)` to create a new message.
 */
export const OtherCloudDiscoveryStartingLocation_AwsDiscoveryStartingLocationSchema: GenMessage<OtherCloudDiscoveryStartingLocation_AwsDiscoveryStartingLocation> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 167, 0);

/**
 * Match discovery resources not covered by any other filter.
 *
 * @generated from message google.privacy.dlp.v2.AllOtherResources
 */
export type AllOtherResources = Message<"google.privacy.dlp.v2.AllOtherResources"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.AllOtherResources.
 * Use `create(AllOtherResourcesSchema)` to create a new message.
 */
export const AllOtherResourcesSchema: GenMessage<AllOtherResources> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 168);

/**
 * Combines all of the information about a DLP job.
 *
 * @generated from message google.privacy.dlp.v2.DlpJob
 */
export type DlpJob = Message<"google.privacy.dlp.v2.DlpJob"> & {
  /**
   * The server-assigned name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The type of job.
   *
   * @generated from field: google.privacy.dlp.v2.DlpJobType type = 2;
   */
  type: DlpJobType;

  /**
   * State of a job.
   *
   * @generated from field: google.privacy.dlp.v2.DlpJob.JobState state = 3;
   */
  state: DlpJob_JobState;

  /**
   * Job details.
   *
   * @generated from oneof google.privacy.dlp.v2.DlpJob.details
   */
  details: {
    /**
     * Results from analyzing risk of a data source.
     *
     * @generated from field: google.privacy.dlp.v2.AnalyzeDataSourceRiskDetails risk_details = 4;
     */
    value: AnalyzeDataSourceRiskDetails;
    case: "riskDetails";
  } | {
    /**
     * Results from inspecting a data source.
     *
     * @generated from field: google.privacy.dlp.v2.InspectDataSourceDetails inspect_details = 5;
     */
    value: InspectDataSourceDetails;
    case: "inspectDetails";
  } | { case: undefined; value?: undefined };

  /**
   * Time when the job was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * Time when the job started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 7;
   */
  startTime?: Timestamp;

  /**
   * Time when the job finished.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 8;
   */
  endTime?: Timestamp;

  /**
   * Time when the job was last modified by the system.
   *
   * @generated from field: google.protobuf.Timestamp last_modified = 15;
   */
  lastModified?: Timestamp;

  /**
   * If created by a job trigger, the resource name of the trigger that
   * instantiated the job.
   *
   * @generated from field: string job_trigger_name = 10;
   */
  jobTriggerName: string;

  /**
   * A stream of errors encountered running the job.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 11;
   */
  errors: Error[];

  /**
   * Events that should occur after the job has completed.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ActionDetails action_details = 12;
   */
  actionDetails: ActionDetails[];
};

/**
 * Describes the message google.privacy.dlp.v2.DlpJob.
 * Use `create(DlpJobSchema)` to create a new message.
 */
export const DlpJobSchema: GenMessage<DlpJob> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 169);

/**
 * Possible states of a job. New items may be added.
 *
 * @generated from enum google.privacy.dlp.v2.DlpJob.JobState
 */
export enum DlpJob_JobState {
  /**
   * Unused.
   *
   * @generated from enum value: JOB_STATE_UNSPECIFIED = 0;
   */
  JOB_STATE_UNSPECIFIED = 0,

  /**
   * The job has not yet started.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * The job is currently running. Once a job has finished it will transition
   * to FAILED or DONE.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * The job is no longer running.
   *
   * @generated from enum value: DONE = 3;
   */
  DONE = 3,

  /**
   * The job was canceled before it could be completed.
   *
   * @generated from enum value: CANCELED = 4;
   */
  CANCELED = 4,

  /**
   * The job had an error and did not complete.
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * The job is currently accepting findings via hybridInspect.
   * A hybrid job in ACTIVE state may continue to have findings added to it
   * through the calling of hybridInspect. After the job has finished no more
   * calls to hybridInspect may be made. ACTIVE jobs can transition to DONE.
   *
   * @generated from enum value: ACTIVE = 6;
   */
  ACTIVE = 6,
}

/**
 * Describes the enum google.privacy.dlp.v2.DlpJob.JobState.
 */
export const DlpJob_JobStateSchema: GenEnum<DlpJob_JobState> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 169, 0);

/**
 * The request message for [DlpJobs.GetDlpJob][].
 *
 * @generated from message google.privacy.dlp.v2.GetDlpJobRequest
 */
export type GetDlpJobRequest = Message<"google.privacy.dlp.v2.GetDlpJobRequest"> & {
  /**
   * Required. The name of the DlpJob resource.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetDlpJobRequest.
 * Use `create(GetDlpJobRequestSchema)` to create a new message.
 */
export const GetDlpJobRequestSchema: GenMessage<GetDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 170);

/**
 * The request message for listing DLP jobs.
 *
 * @generated from message google.privacy.dlp.v2.ListDlpJobsRequest
 */
export type ListDlpJobsRequest = Message<"google.privacy.dlp.v2.ListDlpJobsRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on whether you have [specified a
   * processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 4;
   */
  parent: string;

  /**
   * Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values for inspect jobs:
   *     - `state` - PENDING|RUNNING|CANCELED|FINISHED|FAILED
   *     - `inspected_storage` - DATASTORE|CLOUD_STORAGE|BIGQUERY
   *     - `trigger_name` - The name of the trigger that created the job.
   *     - 'end_time` - Corresponds to the time the job finished.
   *     - 'start_time` - Corresponds to the time the job finished.
   * * Supported fields for risk analysis jobs:
   *     - `state` - RUNNING|CANCELED|FINISHED|FAILED
   *     - 'end_time` - Corresponds to the time the job finished.
   *     - 'start_time` - Corresponds to the time the job finished.
   * * The operator must be `=` or `!=`.
   *
   * Examples:
   *
   * * inspected_storage = cloud_storage AND state = done
   * * inspected_storage = cloud_storage OR inspected_storage = bigquery
   * * inspected_storage = cloud_storage AND (state = done OR state = canceled)
   * * end_time > \"2017-12-12T00:00:00+00:00\"
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 1;
   */
  filter: string;

  /**
   * The standard list page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The standard list page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The type of job. Defaults to `DlpJobType.INSPECT`
   *
   * @generated from field: google.privacy.dlp.v2.DlpJobType type = 5;
   */
  type: DlpJobType;

  /**
   * Comma-separated list of fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc, end_time asc, create_time desc`
   *
   * Supported fields are:
   *
   * - `create_time`: corresponds to the time the job was created.
   * - `end_time`: corresponds to the time the job ended.
   * - `name`: corresponds to the job's name.
   * - `state`: corresponds to `state`
   *
   * @generated from field: string order_by = 6;
   */
  orderBy: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 7;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDlpJobsRequest.
 * Use `create(ListDlpJobsRequestSchema)` to create a new message.
 */
export const ListDlpJobsRequestSchema: GenMessage<ListDlpJobsRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 171);

/**
 * The response message for listing DLP jobs.
 *
 * @generated from message google.privacy.dlp.v2.ListDlpJobsResponse
 */
export type ListDlpJobsResponse = Message<"google.privacy.dlp.v2.ListDlpJobsResponse"> & {
  /**
   * A list of DlpJobs that matches the specified filter in the request.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DlpJob jobs = 1;
   */
  jobs: DlpJob[];

  /**
   * The standard List next-page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDlpJobsResponse.
 * Use `create(ListDlpJobsResponseSchema)` to create a new message.
 */
export const ListDlpJobsResponseSchema: GenMessage<ListDlpJobsResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 172);

/**
 * The request message for canceling a DLP job.
 *
 * @generated from message google.privacy.dlp.v2.CancelDlpJobRequest
 */
export type CancelDlpJobRequest = Message<"google.privacy.dlp.v2.CancelDlpJobRequest"> & {
  /**
   * Required. The name of the DlpJob resource to be cancelled.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CancelDlpJobRequest.
 * Use `create(CancelDlpJobRequestSchema)` to create a new message.
 */
export const CancelDlpJobRequestSchema: GenMessage<CancelDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 173);

/**
 * The request message for finishing a DLP hybrid job.
 *
 * @generated from message google.privacy.dlp.v2.FinishDlpJobRequest
 */
export type FinishDlpJobRequest = Message<"google.privacy.dlp.v2.FinishDlpJobRequest"> & {
  /**
   * Required. The name of the DlpJob resource to be finished.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.FinishDlpJobRequest.
 * Use `create(FinishDlpJobRequestSchema)` to create a new message.
 */
export const FinishDlpJobRequestSchema: GenMessage<FinishDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 174);

/**
 * The request message for deleting a DLP job.
 *
 * @generated from message google.privacy.dlp.v2.DeleteDlpJobRequest
 */
export type DeleteDlpJobRequest = Message<"google.privacy.dlp.v2.DeleteDlpJobRequest"> & {
  /**
   * Required. The name of the DlpJob resource to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteDlpJobRequest.
 * Use `create(DeleteDlpJobRequestSchema)` to create a new message.
 */
export const DeleteDlpJobRequestSchema: GenMessage<DeleteDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 175);

/**
 * Request message for CreateDeidentifyTemplate.
 *
 * @generated from message google.privacy.dlp.v2.CreateDeidentifyTemplateRequest
 */
export type CreateDeidentifyTemplateRequest = Message<"google.privacy.dlp.v2.CreateDeidentifyTemplateRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   * + Organizations scope, location specified:
   *   `organizations/{org_id}/locations/{location_id}`
   * + Organizations scope, no location specified (defaults to global):
   *   `organizations/{org_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The DeidentifyTemplate to create.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
   */
  deidentifyTemplate?: DeidentifyTemplate;

  /**
   * The template id can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string template_id = 3;
   */
  templateId: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 4;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateDeidentifyTemplateRequest.
 * Use `create(CreateDeidentifyTemplateRequestSchema)` to create a new message.
 */
export const CreateDeidentifyTemplateRequestSchema: GenMessage<CreateDeidentifyTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 176);

/**
 * Request message for UpdateDeidentifyTemplate.
 *
 * @generated from message google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest
 */
export type UpdateDeidentifyTemplateRequest = Message<"google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest"> & {
  /**
   * Required. Resource name of organization and deidentify template to be
   * updated, for example
   * `organizations/433245324/deidentifyTemplates/432452342` or
   * projects/project-id/deidentifyTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * New DeidentifyTemplate value.
   *
   * @generated from field: google.privacy.dlp.v2.DeidentifyTemplate deidentify_template = 2;
   */
  deidentifyTemplate?: DeidentifyTemplate;

  /**
   * Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateDeidentifyTemplateRequest.
 * Use `create(UpdateDeidentifyTemplateRequestSchema)` to create a new message.
 */
export const UpdateDeidentifyTemplateRequestSchema: GenMessage<UpdateDeidentifyTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 177);

/**
 * Request message for GetDeidentifyTemplate.
 *
 * @generated from message google.privacy.dlp.v2.GetDeidentifyTemplateRequest
 */
export type GetDeidentifyTemplateRequest = Message<"google.privacy.dlp.v2.GetDeidentifyTemplateRequest"> & {
  /**
   * Required. Resource name of the organization and deidentify template to be
   * read, for example `organizations/433245324/deidentifyTemplates/432452342`
   * or projects/project-id/deidentifyTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetDeidentifyTemplateRequest.
 * Use `create(GetDeidentifyTemplateRequestSchema)` to create a new message.
 */
export const GetDeidentifyTemplateRequestSchema: GenMessage<GetDeidentifyTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 178);

/**
 * Request message for ListDeidentifyTemplates.
 *
 * @generated from message google.privacy.dlp.v2.ListDeidentifyTemplatesRequest
 */
export type ListDeidentifyTemplatesRequest = Message<"google.privacy.dlp.v2.ListDeidentifyTemplatesRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   * + Organizations scope, location specified:
   *   `organizations/{org_id}/locations/{location_id}`
   * + Organizations scope, no location specified (defaults to global):
   *   `organizations/{org_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval. Comes from the previous call
   * to `ListDeidentifyTemplates`.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc,update_time, create_time desc`
   *
   * Supported fields are:
   *
   * - `create_time`: corresponds to the time the template was created.
   * - `update_time`: corresponds to the time the template was last updated.
   * - `name`: corresponds to the template's name.
   * - `display_name`: corresponds to the template's display name.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 5;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDeidentifyTemplatesRequest.
 * Use `create(ListDeidentifyTemplatesRequestSchema)` to create a new message.
 */
export const ListDeidentifyTemplatesRequestSchema: GenMessage<ListDeidentifyTemplatesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 179);

/**
 * Response message for ListDeidentifyTemplates.
 *
 * @generated from message google.privacy.dlp.v2.ListDeidentifyTemplatesResponse
 */
export type ListDeidentifyTemplatesResponse = Message<"google.privacy.dlp.v2.ListDeidentifyTemplatesResponse"> & {
  /**
   * List of deidentify templates, up to page_size in
   * ListDeidentifyTemplatesRequest.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DeidentifyTemplate deidentify_templates = 1;
   */
  deidentifyTemplates: DeidentifyTemplate[];

  /**
   * If the next page is available then the next page token to be used in the
   * following ListDeidentifyTemplates request.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListDeidentifyTemplatesResponse.
 * Use `create(ListDeidentifyTemplatesResponseSchema)` to create a new message.
 */
export const ListDeidentifyTemplatesResponseSchema: GenMessage<ListDeidentifyTemplatesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 180);

/**
 * Request message for DeleteDeidentifyTemplate.
 *
 * @generated from message google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest
 */
export type DeleteDeidentifyTemplateRequest = Message<"google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest"> & {
  /**
   * Required. Resource name of the organization and deidentify template to be
   * deleted, for example
   * `organizations/433245324/deidentifyTemplates/432452342` or
   * projects/project-id/deidentifyTemplates/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteDeidentifyTemplateRequest.
 * Use `create(DeleteDeidentifyTemplateRequestSchema)` to create a new message.
 */
export const DeleteDeidentifyTemplateRequestSchema: GenMessage<DeleteDeidentifyTemplateRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 181);

/**
 * Configuration for a custom dictionary created from a data source of any size
 * up to the maximum size defined in the
 * [limits](https://cloud.google.com/sensitive-data-protection/limits) page. The
 * artifacts of dictionary creation are stored in the specified Cloud Storage
 * location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries
 * that satisfy the size requirements.
 *
 * @generated from message google.privacy.dlp.v2.LargeCustomDictionaryConfig
 */
export type LargeCustomDictionaryConfig = Message<"google.privacy.dlp.v2.LargeCustomDictionaryConfig"> & {
  /**
   * Location to store dictionary artifacts in Cloud Storage. These files
   * will only be accessible by project owners and the DLP API. If any of these
   * artifacts are modified, the dictionary is considered invalid and can no
   * longer be used.
   *
   * @generated from field: google.privacy.dlp.v2.CloudStoragePath output_path = 1;
   */
  outputPath?: CloudStoragePath;

  /**
   * Source of the dictionary.
   *
   * @generated from oneof google.privacy.dlp.v2.LargeCustomDictionaryConfig.source
   */
  source: {
    /**
     * Set of files containing newline-delimited lists of dictionary phrases.
     *
     * @generated from field: google.privacy.dlp.v2.CloudStorageFileSet cloud_storage_file_set = 2;
     */
    value: CloudStorageFileSet;
    case: "cloudStorageFileSet";
  } | {
    /**
     * Field in a BigQuery table where each cell represents a dictionary phrase.
     *
     * @generated from field: google.privacy.dlp.v2.BigQueryField big_query_field = 3;
     */
    value: BigQueryField;
    case: "bigQueryField";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.LargeCustomDictionaryConfig.
 * Use `create(LargeCustomDictionaryConfigSchema)` to create a new message.
 */
export const LargeCustomDictionaryConfigSchema: GenMessage<LargeCustomDictionaryConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 182);

/**
 * Summary statistics of a custom dictionary.
 *
 * @generated from message google.privacy.dlp.v2.LargeCustomDictionaryStats
 */
export type LargeCustomDictionaryStats = Message<"google.privacy.dlp.v2.LargeCustomDictionaryStats"> & {
  /**
   * Approximate number of distinct phrases in the dictionary.
   *
   * @generated from field: int64 approx_num_phrases = 1;
   */
  approxNumPhrases: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.LargeCustomDictionaryStats.
 * Use `create(LargeCustomDictionaryStatsSchema)` to create a new message.
 */
export const LargeCustomDictionaryStatsSchema: GenMessage<LargeCustomDictionaryStats> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 183);

/**
 * Configuration for stored infoTypes. All fields and subfield are provided
 * by the user. For more information, see
 * https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes.
 *
 * @generated from message google.privacy.dlp.v2.StoredInfoTypeConfig
 */
export type StoredInfoTypeConfig = Message<"google.privacy.dlp.v2.StoredInfoTypeConfig"> & {
  /**
   * Display name of the StoredInfoType (max 256 characters).
   *
   * @generated from field: string display_name = 1;
   */
  displayName: string;

  /**
   * Description of the StoredInfoType (max 256 characters).
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Stored infotype types.
   *
   * @generated from oneof google.privacy.dlp.v2.StoredInfoTypeConfig.type
   */
  type: {
    /**
     * StoredInfoType where findings are defined by a dictionary of phrases.
     *
     * @generated from field: google.privacy.dlp.v2.LargeCustomDictionaryConfig large_custom_dictionary = 3;
     */
    value: LargeCustomDictionaryConfig;
    case: "largeCustomDictionary";
  } | {
    /**
     * Store dictionary-based CustomInfoType.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.Dictionary dictionary = 4;
     */
    value: CustomInfoType_Dictionary;
    case: "dictionary";
  } | {
    /**
     * Store regular expression-based StoredInfoType.
     *
     * @generated from field: google.privacy.dlp.v2.CustomInfoType.Regex regex = 5;
     */
    value: CustomInfoType_Regex;
    case: "regex";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.StoredInfoTypeConfig.
 * Use `create(StoredInfoTypeConfigSchema)` to create a new message.
 */
export const StoredInfoTypeConfigSchema: GenMessage<StoredInfoTypeConfig> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 184);

/**
 * Statistics for a StoredInfoType.
 *
 * @generated from message google.privacy.dlp.v2.StoredInfoTypeStats
 */
export type StoredInfoTypeStats = Message<"google.privacy.dlp.v2.StoredInfoTypeStats"> & {
  /**
   * Stat types
   *
   * @generated from oneof google.privacy.dlp.v2.StoredInfoTypeStats.type
   */
  type: {
    /**
     * StoredInfoType where findings are defined by a dictionary of phrases.
     *
     * @generated from field: google.privacy.dlp.v2.LargeCustomDictionaryStats large_custom_dictionary = 1;
     */
    value: LargeCustomDictionaryStats;
    case: "largeCustomDictionary";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.StoredInfoTypeStats.
 * Use `create(StoredInfoTypeStatsSchema)` to create a new message.
 */
export const StoredInfoTypeStatsSchema: GenMessage<StoredInfoTypeStats> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 185);

/**
 * Version of a StoredInfoType, including the configuration used to build it,
 * create timestamp, and current state.
 *
 * @generated from message google.privacy.dlp.v2.StoredInfoTypeVersion
 */
export type StoredInfoTypeVersion = Message<"google.privacy.dlp.v2.StoredInfoTypeVersion"> & {
  /**
   * StoredInfoType configuration.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeConfig config = 1;
   */
  config?: StoredInfoTypeConfig;

  /**
   * Create timestamp of the version. Read-only, determined by the system
   * when the version is created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Stored info type version state. Read-only, updated by the system
   * during dictionary creation.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeState state = 3;
   */
  state: StoredInfoTypeState;

  /**
   * Errors that occurred when creating this storedInfoType version, or
   * anomalies detected in the storedInfoType data that render it unusable. Only
   * the five most recent errors will be displayed, with the most recent error
   * appearing first.
   *
   * For example, some of the data for stored custom dictionaries is put in
   * the user's Cloud Storage bucket, and if this data is modified or
   * deleted by the user or another system, the dictionary becomes invalid.
   *
   * If any errors occur, fix the problem indicated by the error message and
   * use the UpdateStoredInfoType API method to create another version of the
   * storedInfoType to continue using it, reusing the same `config` if it was
   * not the source of the error.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 4;
   */
  errors: Error[];

  /**
   * Statistics about this storedInfoType version.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeStats stats = 5;
   */
  stats?: StoredInfoTypeStats;
};

/**
 * Describes the message google.privacy.dlp.v2.StoredInfoTypeVersion.
 * Use `create(StoredInfoTypeVersionSchema)` to create a new message.
 */
export const StoredInfoTypeVersionSchema: GenMessage<StoredInfoTypeVersion> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 186);

/**
 * StoredInfoType resource message that contains information about the current
 * version and any pending updates.
 *
 * @generated from message google.privacy.dlp.v2.StoredInfoType
 */
export type StoredInfoType = Message<"google.privacy.dlp.v2.StoredInfoType"> & {
  /**
   * Resource name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Current version of the stored info type.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeVersion current_version = 2;
   */
  currentVersion?: StoredInfoTypeVersion;

  /**
   * Pending versions of the stored info type. Empty if no versions are
   * pending.
   *
   * @generated from field: repeated google.privacy.dlp.v2.StoredInfoTypeVersion pending_versions = 3;
   */
  pendingVersions: StoredInfoTypeVersion[];
};

/**
 * Describes the message google.privacy.dlp.v2.StoredInfoType.
 * Use `create(StoredInfoTypeSchema)` to create a new message.
 */
export const StoredInfoTypeSchema: GenMessage<StoredInfoType> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 187);

/**
 * Request message for CreateStoredInfoType.
 *
 * @generated from message google.privacy.dlp.v2.CreateStoredInfoTypeRequest
 */
export type CreateStoredInfoTypeRequest = Message<"google.privacy.dlp.v2.CreateStoredInfoTypeRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   * + Organizations scope, location specified:
   *   `organizations/{org_id}/locations/{location_id}`
   * + Organizations scope, no location specified (defaults to global):
   *   `organizations/{org_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Configuration of the storedInfoType to create.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
   */
  config?: StoredInfoTypeConfig;

  /**
   * The storedInfoType ID can contain uppercase and lowercase letters,
   * numbers, and hyphens; that is, it must match the regular
   * expression: `[a-zA-Z\d-_]+`. The maximum length is 100
   * characters. Can be empty to allow the system to generate one.
   *
   * @generated from field: string stored_info_type_id = 3;
   */
  storedInfoTypeId: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 4;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateStoredInfoTypeRequest.
 * Use `create(CreateStoredInfoTypeRequestSchema)` to create a new message.
 */
export const CreateStoredInfoTypeRequestSchema: GenMessage<CreateStoredInfoTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 188);

/**
 * Request message for UpdateStoredInfoType.
 *
 * @generated from message google.privacy.dlp.v2.UpdateStoredInfoTypeRequest
 */
export type UpdateStoredInfoTypeRequest = Message<"google.privacy.dlp.v2.UpdateStoredInfoTypeRequest"> & {
  /**
   * Required. Resource name of organization and storedInfoType to be updated,
   * for example `organizations/433245324/storedInfoTypes/432452342` or
   * projects/project-id/storedInfoTypes/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Updated configuration for the storedInfoType. If not provided, a new
   * version of the storedInfoType will be created with the existing
   * configuration.
   *
   * @generated from field: google.privacy.dlp.v2.StoredInfoTypeConfig config = 2;
   */
  config?: StoredInfoTypeConfig;

  /**
   * Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateStoredInfoTypeRequest.
 * Use `create(UpdateStoredInfoTypeRequestSchema)` to create a new message.
 */
export const UpdateStoredInfoTypeRequestSchema: GenMessage<UpdateStoredInfoTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 189);

/**
 * Request message for GetStoredInfoType.
 *
 * @generated from message google.privacy.dlp.v2.GetStoredInfoTypeRequest
 */
export type GetStoredInfoTypeRequest = Message<"google.privacy.dlp.v2.GetStoredInfoTypeRequest"> & {
  /**
   * Required. Resource name of the organization and storedInfoType to be read,
   * for example `organizations/433245324/storedInfoTypes/432452342` or
   * projects/project-id/storedInfoTypes/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetStoredInfoTypeRequest.
 * Use `create(GetStoredInfoTypeRequestSchema)` to create a new message.
 */
export const GetStoredInfoTypeRequestSchema: GenMessage<GetStoredInfoTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 190);

/**
 * Request message for ListStoredInfoTypes.
 *
 * @generated from message google.privacy.dlp.v2.ListStoredInfoTypesRequest
 */
export type ListStoredInfoTypesRequest = Message<"google.privacy.dlp.v2.ListStoredInfoTypesRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization) and whether you have [specified a processing
   * location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location):
   *
   * + Projects scope, location specified:
   *   `projects/{project_id}/locations/{location_id}`
   * + Projects scope, no location specified (defaults to global):
   *   `projects/{project_id}`
   *
   * The following example `parent` string specifies a parent project with the
   * identifier `example-project`, and specifies the `europe-west3` location
   * for processing data:
   *
   *     parent=projects/example-project/locations/europe-west3
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval. Comes from the previous call
   * to `ListStoredInfoTypes`.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by,
   * followed by `asc` or `desc` postfix. This list is case insensitive. The
   * default sorting order is ascending. Redundant space characters are
   * insignificant.
   *
   * Example: `name asc, display_name, create_time desc`
   *
   * Supported fields are:
   *
   * - `create_time`: corresponds to the time the most recent version of the
   * resource was created.
   * - `state`: corresponds to the state of the resource.
   * - `name`: corresponds to resource name.
   * - `display_name`: corresponds to info type's display name.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Deprecated. This field has no effect.
   *
   * @generated from field: string location_id = 5;
   */
  locationId: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListStoredInfoTypesRequest.
 * Use `create(ListStoredInfoTypesRequestSchema)` to create a new message.
 */
export const ListStoredInfoTypesRequestSchema: GenMessage<ListStoredInfoTypesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 191);

/**
 * Response message for ListStoredInfoTypes.
 *
 * @generated from message google.privacy.dlp.v2.ListStoredInfoTypesResponse
 */
export type ListStoredInfoTypesResponse = Message<"google.privacy.dlp.v2.ListStoredInfoTypesResponse"> & {
  /**
   * List of storedInfoTypes, up to page_size in ListStoredInfoTypesRequest.
   *
   * @generated from field: repeated google.privacy.dlp.v2.StoredInfoType stored_info_types = 1;
   */
  storedInfoTypes: StoredInfoType[];

  /**
   * If the next page is available then the next page token to be used
   * in the following ListStoredInfoTypes request.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListStoredInfoTypesResponse.
 * Use `create(ListStoredInfoTypesResponseSchema)` to create a new message.
 */
export const ListStoredInfoTypesResponseSchema: GenMessage<ListStoredInfoTypesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 192);

/**
 * Request message for DeleteStoredInfoType.
 *
 * @generated from message google.privacy.dlp.v2.DeleteStoredInfoTypeRequest
 */
export type DeleteStoredInfoTypeRequest = Message<"google.privacy.dlp.v2.DeleteStoredInfoTypeRequest"> & {
  /**
   * Required. Resource name of the organization and storedInfoType to be
   * deleted, for example `organizations/433245324/storedInfoTypes/432452342` or
   * projects/project-id/storedInfoTypes/432452342.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteStoredInfoTypeRequest.
 * Use `create(DeleteStoredInfoTypeRequestSchema)` to create a new message.
 */
export const DeleteStoredInfoTypeRequestSchema: GenMessage<DeleteStoredInfoTypeRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 193);

/**
 * Request to search for potentially sensitive info in a custom location.
 *
 * @generated from message google.privacy.dlp.v2.HybridInspectJobTriggerRequest
 */
export type HybridInspectJobTriggerRequest = Message<"google.privacy.dlp.v2.HybridInspectJobTriggerRequest"> & {
  /**
   * Required. Resource name of the trigger to execute a hybrid inspect on, for
   * example `projects/dlp-test-project/jobTriggers/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The item to inspect.
   *
   * @generated from field: google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
   */
  hybridItem?: HybridContentItem;
};

/**
 * Describes the message google.privacy.dlp.v2.HybridInspectJobTriggerRequest.
 * Use `create(HybridInspectJobTriggerRequestSchema)` to create a new message.
 */
export const HybridInspectJobTriggerRequestSchema: GenMessage<HybridInspectJobTriggerRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 194);

/**
 * Request to search for potentially sensitive info in a custom location.
 *
 * @generated from message google.privacy.dlp.v2.HybridInspectDlpJobRequest
 */
export type HybridInspectDlpJobRequest = Message<"google.privacy.dlp.v2.HybridInspectDlpJobRequest"> & {
  /**
   * Required. Resource name of the job to execute a hybrid inspect on, for
   * example `projects/dlp-test-project/dlpJob/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The item to inspect.
   *
   * @generated from field: google.privacy.dlp.v2.HybridContentItem hybrid_item = 3;
   */
  hybridItem?: HybridContentItem;
};

/**
 * Describes the message google.privacy.dlp.v2.HybridInspectDlpJobRequest.
 * Use `create(HybridInspectDlpJobRequestSchema)` to create a new message.
 */
export const HybridInspectDlpJobRequestSchema: GenMessage<HybridInspectDlpJobRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 195);

/**
 * An individual hybrid item to inspect. Will be stored temporarily during
 * processing.
 *
 * @generated from message google.privacy.dlp.v2.HybridContentItem
 */
export type HybridContentItem = Message<"google.privacy.dlp.v2.HybridContentItem"> & {
  /**
   * The item to inspect.
   *
   * @generated from field: google.privacy.dlp.v2.ContentItem item = 1;
   */
  item?: ContentItem;

  /**
   * Supplementary information that will be added to each finding.
   *
   * @generated from field: google.privacy.dlp.v2.HybridFindingDetails finding_details = 2;
   */
  findingDetails?: HybridFindingDetails;
};

/**
 * Describes the message google.privacy.dlp.v2.HybridContentItem.
 * Use `create(HybridContentItemSchema)` to create a new message.
 */
export const HybridContentItemSchema: GenMessage<HybridContentItem> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 196);

/**
 * Populate to associate additional data with each finding.
 *
 * @generated from message google.privacy.dlp.v2.HybridFindingDetails
 */
export type HybridFindingDetails = Message<"google.privacy.dlp.v2.HybridFindingDetails"> & {
  /**
   * Details about the container where the content being inspected is from.
   *
   * @generated from field: google.privacy.dlp.v2.Container container_details = 1;
   */
  containerDetails?: Container;

  /**
   * Offset in bytes of the line, from the beginning of the file, where the
   * finding  is located. Populate if the item being scanned is only part of a
   * bigger item, such as a shard of a file and you want to track the absolute
   * position of the finding.
   *
   * @generated from field: int64 file_offset = 2;
   */
  fileOffset: bigint;

  /**
   * Offset of the row for tables. Populate if the row(s) being scanned are
   * part of a bigger dataset and you want to keep track of their absolute
   * position.
   *
   * @generated from field: int64 row_offset = 3;
   */
  rowOffset: bigint;

  /**
   * If the container is a table, additional information to make findings
   * meaningful such as the columns that are primary keys. If not known ahead
   * of time, can also be set within each inspect hybrid call and the two
   * will be merged. Note that identifying_fields will only be stored to
   * BigQuery, and only if the BigQuery action has been included.
   *
   * @generated from field: google.privacy.dlp.v2.TableOptions table_options = 4;
   */
  tableOptions?: TableOptions;

  /**
   * Labels to represent user provided metadata about the data being inspected.
   * If configured by the job, some key values may be required.
   * The labels associated with `Finding`'s produced by hybrid
   * inspection.
   *
   * Label keys must be between 1 and 63 characters long and must conform
   * to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`.
   *
   * Label values must be between 0 and 63 characters long and must conform
   * to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.
   *
   * No more than 10 labels can be associated with a given finding.
   *
   * Examples:
   *
   * * `"environment" : "production"`
   * * `"pipeline" : "etl"`
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.privacy.dlp.v2.HybridFindingDetails.
 * Use `create(HybridFindingDetailsSchema)` to create a new message.
 */
export const HybridFindingDetailsSchema: GenMessage<HybridFindingDetails> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 197);

/**
 * Quota exceeded errors will be thrown once quota has been met.
 *
 * @generated from message google.privacy.dlp.v2.HybridInspectResponse
 */
export type HybridInspectResponse = Message<"google.privacy.dlp.v2.HybridInspectResponse"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.HybridInspectResponse.
 * Use `create(HybridInspectResponseSchema)` to create a new message.
 */
export const HybridInspectResponseSchema: GenMessage<HybridInspectResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 198);

/**
 * Request to list the profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListProjectDataProfilesRequest
 */
export type ListProjectDataProfilesRequest = Message<"google.privacy.dlp.v2.ListProjectDataProfilesRequest"> & {
  /**
   * Required. organizations/{org_id}/locations/{loc_id}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero, server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by, followed by `asc` or `desc`
   * postfix. This list is case insensitive. The default sorting order is
   * ascending. Redundant space characters are insignificant. Only one order
   * field at a time is allowed.
   *
   * Examples:
   * * `project_id`
   * * `sensitivity_level desc`
   *
   * Supported fields are:
   *
   * - `project_id`: Google Cloud project ID
   * - `sensitivity_level`: How sensitive the data in a project is, at most.
   * - `data_risk_level`: How much risk is associated with this data.
   * - `profile_last_generated`: When the profile was last updated in epoch
   * seconds.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values:
   *     - `sensitivity_level` - HIGH|MODERATE|LOW
   *     - `data_risk_level` - HIGH|MODERATE|LOW
   *     - `status_code` - an RPC status code as defined in
   *     https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   * * The operator must be `=` or `!=`.
   *
   * Examples:
   *
   * * `project_id = 12345 AND status_code = 1`
   * * `project_id = 12345 AND sensitivity_level = HIGH`
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListProjectDataProfilesRequest.
 * Use `create(ListProjectDataProfilesRequestSchema)` to create a new message.
 */
export const ListProjectDataProfilesRequestSchema: GenMessage<ListProjectDataProfilesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 199);

/**
 * List of profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListProjectDataProfilesResponse
 */
export type ListProjectDataProfilesResponse = Message<"google.privacy.dlp.v2.ListProjectDataProfilesResponse"> & {
  /**
   * List of data profiles.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ProjectDataProfile project_data_profiles = 1;
   */
  projectDataProfiles: ProjectDataProfile[];

  /**
   * The next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListProjectDataProfilesResponse.
 * Use `create(ListProjectDataProfilesResponseSchema)` to create a new message.
 */
export const ListProjectDataProfilesResponseSchema: GenMessage<ListProjectDataProfilesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 200);

/**
 * Request to list the profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListTableDataProfilesRequest
 */
export type ListTableDataProfilesRequest = Message<"google.privacy.dlp.v2.ListTableDataProfilesRequest"> & {
  /**
   * Required. Resource name of the organization or project, for
   * example `organizations/433245324/locations/europe` or
   * `projects/project-id/locations/asia`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero, server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by, followed by `asc` or `desc`
   * postfix. This list is case insensitive. The default sorting order is
   * ascending. Redundant space characters are insignificant. Only one order
   * field at a time is allowed.
   *
   * Examples:
   * * `project_id asc`
   * * `table_id`
   * * `sensitivity_level desc`
   *
   * Supported fields are:
   *
   * - `project_id`: The Google Cloud project ID.
   * - `dataset_id`: The ID of a BigQuery dataset.
   * - `table_id`: The ID of a BigQuery table.
   * - `sensitivity_level`: How sensitive the data in a table is, at most.
   * - `data_risk_level`: How much risk is associated with this data.
   * - `profile_last_generated`: When the profile was last updated in epoch
   * seconds.
   * - `last_modified`: The last time the resource was modified.
   * - `resource_visibility`: Visibility restriction for this resource.
   * - `row_count`: Number of rows in this resource.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values:
   *     - `project_id` - The Google Cloud project ID.
   *     - `dataset_id` - The BigQuery dataset ID.
   *     - `table_id` - The ID of the BigQuery table.
   *     - `sensitivity_level` - HIGH|MODERATE|LOW
   *     - `data_risk_level` - HIGH|MODERATE|LOW
   *     - `resource_visibility`: PUBLIC|RESTRICTED
   *     - `status_code` - an RPC status code as defined in
   *     https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   * * The operator must be `=` or `!=`.
   *
   * Examples:
   *
   * * `project_id = 12345 AND status_code = 1`
   * * `project_id = 12345 AND sensitivity_level = HIGH`
   * * `project_id = 12345 AND resource_visibility = PUBLIC`
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListTableDataProfilesRequest.
 * Use `create(ListTableDataProfilesRequestSchema)` to create a new message.
 */
export const ListTableDataProfilesRequestSchema: GenMessage<ListTableDataProfilesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 201);

/**
 * List of profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListTableDataProfilesResponse
 */
export type ListTableDataProfilesResponse = Message<"google.privacy.dlp.v2.ListTableDataProfilesResponse"> & {
  /**
   * List of data profiles.
   *
   * @generated from field: repeated google.privacy.dlp.v2.TableDataProfile table_data_profiles = 1;
   */
  tableDataProfiles: TableDataProfile[];

  /**
   * The next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListTableDataProfilesResponse.
 * Use `create(ListTableDataProfilesResponseSchema)` to create a new message.
 */
export const ListTableDataProfilesResponseSchema: GenMessage<ListTableDataProfilesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 202);

/**
 * Request to list the profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListColumnDataProfilesRequest
 */
export type ListColumnDataProfilesRequest = Message<"google.privacy.dlp.v2.ListColumnDataProfilesRequest"> & {
  /**
   * Required. Resource name of the organization or project, for
   * example `organizations/433245324/locations/europe` or
   * `projects/project-id/locations/asia`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Page token to continue retrieval.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Size of the page. This value can be limited by the server. If zero, server
   * returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Comma-separated list of fields to order by, followed by `asc` or `desc`
   * postfix. This list is case insensitive. The default sorting order is
   * ascending. Redundant space characters are insignificant. Only one order
   * field at a time is allowed.
   *
   * Examples:
   *
   * * `project_id asc`
   * * `table_id`
   * * `sensitivity_level desc`
   *
   * Supported fields are:
   *
   * - `project_id`: The Google Cloud project ID.
   * - `dataset_id`: The ID of a BigQuery dataset.
   * - `table_id`: The ID of a BigQuery table.
   * - `sensitivity_level`: How sensitive the data in a column is, at most.
   * - `data_risk_level`: How much risk is associated with this data.
   * - `profile_last_generated`: When the profile was last updated in epoch
   * seconds.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values:
   *     - `table_data_profile_name` - The name of the related table data
   *     profile.
   *     - `project_id` - The Google Cloud project ID. (REQUIRED)
   *     - `dataset_id` - The BigQuery dataset ID. (REQUIRED)
   *     - `table_id` - The BigQuery table ID. (REQUIRED)
   *     - `field_id` - The ID of the BigQuery field.
   *     - `info_type` - The infotype detected in the resource.
   *     - `sensitivity_level` - HIGH|MEDIUM|LOW
   *     - `data_risk_level`: How much risk is associated with this data.
   *     - `status_code` - an RPC status code as defined in
   *     https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   * * The operator must be `=` for project_id, dataset_id, and table_id. Other
   *   filters also support `!=`.
   *
   * Examples:
   *
   * * project_id = 12345 AND status_code = 1
   * * project_id = 12345 AND sensitivity_level = HIGH
   * * project_id = 12345 AND info_type = STREET_ADDRESS
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListColumnDataProfilesRequest.
 * Use `create(ListColumnDataProfilesRequestSchema)` to create a new message.
 */
export const ListColumnDataProfilesRequestSchema: GenMessage<ListColumnDataProfilesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 203);

/**
 * List of profiles generated for a given organization or project.
 *
 * @generated from message google.privacy.dlp.v2.ListColumnDataProfilesResponse
 */
export type ListColumnDataProfilesResponse = Message<"google.privacy.dlp.v2.ListColumnDataProfilesResponse"> & {
  /**
   * List of data profiles.
   *
   * @generated from field: repeated google.privacy.dlp.v2.ColumnDataProfile column_data_profiles = 1;
   */
  columnDataProfiles: ColumnDataProfile[];

  /**
   * The next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListColumnDataProfilesResponse.
 * Use `create(ListColumnDataProfilesResponseSchema)` to create a new message.
 */
export const ListColumnDataProfilesResponseSchema: GenMessage<ListColumnDataProfilesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 204);

/**
 * Score is a summary of all elements in the data profile.
 * A higher number means more risk.
 *
 * @generated from message google.privacy.dlp.v2.DataRiskLevel
 */
export type DataRiskLevel = Message<"google.privacy.dlp.v2.DataRiskLevel"> & {
  /**
   * The score applied to the resource.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel.DataRiskLevelScore score = 1;
   */
  score: DataRiskLevel_DataRiskLevelScore;
};

/**
 * Describes the message google.privacy.dlp.v2.DataRiskLevel.
 * Use `create(DataRiskLevelSchema)` to create a new message.
 */
export const DataRiskLevelSchema: GenMessage<DataRiskLevel> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 205);

/**
 * Various score levels for resources.
 *
 * @generated from enum google.privacy.dlp.v2.DataRiskLevel.DataRiskLevelScore
 */
export enum DataRiskLevel_DataRiskLevelScore {
  /**
   * Unused.
   *
   * @generated from enum value: RISK_SCORE_UNSPECIFIED = 0;
   */
  RISK_SCORE_UNSPECIFIED = 0,

  /**
   * Low risk - Lower indication of sensitive data that appears to have
   * additional access restrictions in place or no indication of sensitive
   * data found.
   *
   * @generated from enum value: RISK_LOW = 10;
   */
  RISK_LOW = 10,

  /**
   * Unable to determine risk.
   *
   * @generated from enum value: RISK_UNKNOWN = 12;
   */
  RISK_UNKNOWN = 12,

  /**
   * Medium risk - Sensitive data may be present but additional access or fine
   * grain access restrictions appear to be present.  Consider limiting
   * access even further or transform data to mask.
   *
   * @generated from enum value: RISK_MODERATE = 20;
   */
  RISK_MODERATE = 20,

  /**
   * High risk – SPII may be present. Access controls may include public
   * ACLs. Exfiltration of data may lead to user data loss. Re-identification
   * of users may be possible. Consider limiting usage and or removing SPII.
   *
   * @generated from enum value: RISK_HIGH = 30;
   */
  RISK_HIGH = 30,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataRiskLevel.DataRiskLevelScore.
 */
export const DataRiskLevel_DataRiskLevelScoreSchema: GenEnum<DataRiskLevel_DataRiskLevelScore> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 205, 0);

/**
 * An aggregated profile for this project, based on the resources profiled
 * within it.
 *
 * @generated from message google.privacy.dlp.v2.ProjectDataProfile
 */
export type ProjectDataProfile = Message<"google.privacy.dlp.v2.ProjectDataProfile"> & {
  /**
   * The resource name of the profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Project ID or account that was profiled.
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * The last time the profile was generated.
   *
   * @generated from field: google.protobuf.Timestamp profile_last_generated = 3;
   */
  profileLastGenerated?: Timestamp;

  /**
   * The sensitivity score of this project.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 4;
   */
  sensitivityScore?: SensitivityScore;

  /**
   * The data risk level of this project.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel data_risk_level = 5;
   */
  dataRiskLevel?: DataRiskLevel;

  /**
   * Success or error status of the last attempt to profile the project.
   *
   * @generated from field: google.privacy.dlp.v2.ProfileStatus profile_status = 7;
   */
  profileStatus?: ProfileStatus;

  /**
   * The number of table data profiles generated for this project.
   *
   * @generated from field: int64 table_data_profile_count = 9;
   */
  tableDataProfileCount: bigint;

  /**
   * The number of file store data profiles generated for this project.
   *
   * @generated from field: int64 file_store_data_profile_count = 10;
   */
  fileStoreDataProfileCount: bigint;
};

/**
 * Describes the message google.privacy.dlp.v2.ProjectDataProfile.
 * Use `create(ProjectDataProfileSchema)` to create a new message.
 */
export const ProjectDataProfileSchema: GenMessage<ProjectDataProfile> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 206);

/**
 * Snapshot of the configurations used to generate the profile.
 *
 * @generated from message google.privacy.dlp.v2.DataProfileConfigSnapshot
 */
export type DataProfileConfigSnapshot = Message<"google.privacy.dlp.v2.DataProfileConfigSnapshot"> & {
  /**
   * A copy of the inspection config used to generate this profile. This
   * is a copy of the inspect_template specified in `DataProfileJobConfig`.
   *
   * @generated from field: google.privacy.dlp.v2.InspectConfig inspect_config = 2;
   */
  inspectConfig?: InspectConfig;

  /**
   * A copy of the configuration used to generate this profile. This is
   * deprecated, and the DiscoveryConfig field is preferred moving forward.
   * DataProfileJobConfig will still be written here for Discovery in BigQuery
   * for backwards compatibility, but will not be updated with new fields, while
   * DiscoveryConfig will.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileJobConfig data_profile_job = 3 [deprecated = true];
   * @deprecated
   */
  dataProfileJob?: DataProfileJobConfig;

  /**
   * A copy of the configuration used to generate this profile.
   *
   * @generated from field: google.privacy.dlp.v2.DiscoveryConfig discovery_config = 4;
   */
  discoveryConfig?: DiscoveryConfig;

  /**
   * Name of the inspection template used to generate this profile
   *
   * @generated from field: string inspect_template_name = 5;
   */
  inspectTemplateName: string;

  /**
   * Timestamp when the template was modified
   *
   * @generated from field: google.protobuf.Timestamp inspect_template_modified_time = 6;
   */
  inspectTemplateModifiedTime?: Timestamp;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfileConfigSnapshot.
 * Use `create(DataProfileConfigSnapshotSchema)` to create a new message.
 */
export const DataProfileConfigSnapshotSchema: GenMessage<DataProfileConfigSnapshot> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 207);

/**
 * The profile for a scanned table.
 *
 * @generated from message google.privacy.dlp.v2.TableDataProfile
 */
export type TableDataProfile = Message<"google.privacy.dlp.v2.TableDataProfile"> & {
  /**
   * The name of the profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource type that was profiled.
   *
   * @generated from field: google.privacy.dlp.v2.DataSourceType data_source_type = 36;
   */
  dataSourceType?: DataSourceType;

  /**
   * The resource name of the project data profile for this table.
   *
   * @generated from field: string project_data_profile = 2;
   */
  projectDataProfile: string;

  /**
   * The Google Cloud project ID that owns the resource.
   *
   * @generated from field: string dataset_project_id = 24;
   */
  datasetProjectId: string;

  /**
   * If supported, the location where the dataset's data is stored.
   * See https://cloud.google.com/bigquery/docs/locations for supported
   * locations.
   *
   * @generated from field: string dataset_location = 29;
   */
  datasetLocation: string;

  /**
   * If the resource is BigQuery, the  dataset ID.
   *
   * @generated from field: string dataset_id = 25;
   */
  datasetId: string;

  /**
   * If the resource is BigQuery, the BigQuery table ID.
   *
   * @generated from field: string table_id = 26;
   */
  tableId: string;

  /**
   * The resource name of the resource profiled.
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   *
   * @generated from field: string full_resource = 3;
   */
  fullResource: string;

  /**
   * Success or error status from the most recent profile generation attempt.
   * May be empty if the profile is still being generated.
   *
   * @generated from field: google.privacy.dlp.v2.ProfileStatus profile_status = 21;
   */
  profileStatus?: ProfileStatus;

  /**
   * State of a profile.
   *
   * @generated from field: google.privacy.dlp.v2.TableDataProfile.State state = 22;
   */
  state: TableDataProfile_State;

  /**
   * The sensitivity score of this table.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 5;
   */
  sensitivityScore?: SensitivityScore;

  /**
   * The data risk level of this table.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel data_risk_level = 6;
   */
  dataRiskLevel?: DataRiskLevel;

  /**
   * The infoTypes predicted from this table's data.
   *
   * @generated from field: repeated google.privacy.dlp.v2.InfoTypeSummary predicted_info_types = 27;
   */
  predictedInfoTypes: InfoTypeSummary[];

  /**
   * Other infoTypes found in this table's data.
   *
   * @generated from field: repeated google.privacy.dlp.v2.OtherInfoTypeSummary other_info_types = 28;
   */
  otherInfoTypes: OtherInfoTypeSummary[];

  /**
   * The snapshot of the configurations used to generate the profile.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileConfigSnapshot config_snapshot = 7;
   */
  configSnapshot?: DataProfileConfigSnapshot;

  /**
   * The time when this table was last modified
   *
   * @generated from field: google.protobuf.Timestamp last_modified_time = 8;
   */
  lastModifiedTime?: Timestamp;

  /**
   * Optional. The time when this table expires.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 9;
   */
  expirationTime?: Timestamp;

  /**
   * The number of columns profiled in the table.
   *
   * @generated from field: int64 scanned_column_count = 10;
   */
  scannedColumnCount: bigint;

  /**
   * The number of columns skipped in the table because of an error.
   *
   * @generated from field: int64 failed_column_count = 11;
   */
  failedColumnCount: bigint;

  /**
   * The size of the table when the profile was generated.
   *
   * @generated from field: int64 table_size_bytes = 12;
   */
  tableSizeBytes: bigint;

  /**
   * Number of rows in the table when the profile was generated.
   * This will not be populated for BigLake tables.
   *
   * @generated from field: int64 row_count = 13;
   */
  rowCount: bigint;

  /**
   * How the table is encrypted.
   *
   * @generated from field: google.privacy.dlp.v2.EncryptionStatus encryption_status = 14;
   */
  encryptionStatus: EncryptionStatus;

  /**
   * How broadly a resource has been shared.
   *
   * @generated from field: google.privacy.dlp.v2.ResourceVisibility resource_visibility = 15;
   */
  resourceVisibility: ResourceVisibility;

  /**
   * The last time the profile was generated.
   *
   * @generated from field: google.protobuf.Timestamp profile_last_generated = 16;
   */
  profileLastGenerated?: Timestamp;

  /**
   * The labels applied to the resource at the time the profile was generated.
   *
   * @generated from field: map<string, string> resource_labels = 17;
   */
  resourceLabels: { [key: string]: string };

  /**
   * The time at which the table was created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 23;
   */
  createTime?: Timestamp;
};

/**
 * Describes the message google.privacy.dlp.v2.TableDataProfile.
 * Use `create(TableDataProfileSchema)` to create a new message.
 */
export const TableDataProfileSchema: GenMessage<TableDataProfile> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 208);

/**
 * Possible states of a profile. New items may be added.
 *
 * @generated from enum google.privacy.dlp.v2.TableDataProfile.State
 */
export enum TableDataProfile_State {
  /**
   * Unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The profile is currently running. Once a profile has finished it will
   * transition to DONE.
   *
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * The profile is no longer generating.
   * If profile_status.status.code is 0, the profile succeeded, otherwise, it
   * failed.
   *
   * @generated from enum value: DONE = 2;
   */
  DONE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.TableDataProfile.State.
 */
export const TableDataProfile_StateSchema: GenEnum<TableDataProfile_State> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 208, 0);

/**
 * Success or errors for the profile generation.
 *
 * @generated from message google.privacy.dlp.v2.ProfileStatus
 */
export type ProfileStatus = Message<"google.privacy.dlp.v2.ProfileStatus"> & {
  /**
   * Profiling status code and optional message. The `status.code` value is 0
   * (default value) for OK.
   *
   * @generated from field: google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * Time when the profile generation status was updated
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message google.privacy.dlp.v2.ProfileStatus.
 * Use `create(ProfileStatusSchema)` to create a new message.
 */
export const ProfileStatusSchema: GenMessage<ProfileStatus> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 209);

/**
 * The infoType details for this column.
 *
 * @generated from message google.privacy.dlp.v2.InfoTypeSummary
 */
export type InfoTypeSummary = Message<"google.privacy.dlp.v2.InfoTypeSummary"> & {
  /**
   * The infoType.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Not populated for predicted infotypes.
   *
   * @generated from field: int32 estimated_prevalence = 2 [deprecated = true];
   * @deprecated
   */
  estimatedPrevalence: number;
};

/**
 * Describes the message google.privacy.dlp.v2.InfoTypeSummary.
 * Use `create(InfoTypeSummarySchema)` to create a new message.
 */
export const InfoTypeSummarySchema: GenMessage<InfoTypeSummary> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 210);

/**
 * Infotype details for other infoTypes found within a column.
 *
 * @generated from message google.privacy.dlp.v2.OtherInfoTypeSummary
 */
export type OtherInfoTypeSummary = Message<"google.privacy.dlp.v2.OtherInfoTypeSummary"> & {
  /**
   * The other infoType.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;

  /**
   * Approximate percentage of non-null rows that contained data detected by
   * this infotype.
   *
   * @generated from field: int32 estimated_prevalence = 2;
   */
  estimatedPrevalence: number;

  /**
   * Whether this infoType was excluded from sensitivity and risk analysis due
   * to factors such as low prevalence (subject to change).
   *
   * @generated from field: bool excluded_from_analysis = 3;
   */
  excludedFromAnalysis: boolean;
};

/**
 * Describes the message google.privacy.dlp.v2.OtherInfoTypeSummary.
 * Use `create(OtherInfoTypeSummarySchema)` to create a new message.
 */
export const OtherInfoTypeSummarySchema: GenMessage<OtherInfoTypeSummary> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 211);

/**
 * The profile for a scanned column within a table.
 *
 * @generated from message google.privacy.dlp.v2.ColumnDataProfile
 */
export type ColumnDataProfile = Message<"google.privacy.dlp.v2.ColumnDataProfile"> & {
  /**
   * The name of the profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Success or error status from the most recent profile generation attempt.
   * May be empty if the profile is still being generated.
   *
   * @generated from field: google.privacy.dlp.v2.ProfileStatus profile_status = 17;
   */
  profileStatus?: ProfileStatus;

  /**
   * State of a profile.
   *
   * @generated from field: google.privacy.dlp.v2.ColumnDataProfile.State state = 18;
   */
  state: ColumnDataProfile_State;

  /**
   * The last time the profile was generated.
   *
   * @generated from field: google.protobuf.Timestamp profile_last_generated = 3;
   */
  profileLastGenerated?: Timestamp;

  /**
   * The resource name of the table data profile.
   *
   * @generated from field: string table_data_profile = 4;
   */
  tableDataProfile: string;

  /**
   * The resource name of the resource this column is within.
   *
   * @generated from field: string table_full_resource = 5;
   */
  tableFullResource: string;

  /**
   * The Google Cloud project ID that owns the profiled resource.
   *
   * @generated from field: string dataset_project_id = 19;
   */
  datasetProjectId: string;

  /**
   * The BigQuery location where the dataset's data is stored.
   * See https://cloud.google.com/bigquery/docs/locations for supported
   * locations.
   *
   * @generated from field: string dataset_location = 20;
   */
  datasetLocation: string;

  /**
   * The BigQuery dataset ID.
   *
   * @generated from field: string dataset_id = 21;
   */
  datasetId: string;

  /**
   * The BigQuery table ID.
   *
   * @generated from field: string table_id = 22;
   */
  tableId: string;

  /**
   * The name of the column.
   *
   * @generated from field: string column = 6;
   */
  column: string;

  /**
   * The sensitivity of this column.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 7;
   */
  sensitivityScore?: SensitivityScore;

  /**
   * The data risk level for this column.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel data_risk_level = 8;
   */
  dataRiskLevel?: DataRiskLevel;

  /**
   * If it's been determined this column can be identified as a single type,
   * this will be set. Otherwise the column either has unidentifiable content
   * or mixed types.
   *
   * @generated from field: google.privacy.dlp.v2.InfoTypeSummary column_info_type = 9;
   */
  columnInfoType?: InfoTypeSummary;

  /**
   * Other types found within this column. List will be unordered.
   *
   * @generated from field: repeated google.privacy.dlp.v2.OtherInfoTypeSummary other_matches = 10;
   */
  otherMatches: OtherInfoTypeSummary[];

  /**
   * Approximate percentage of entries being null in the column.
   *
   * @generated from field: google.privacy.dlp.v2.NullPercentageLevel estimated_null_percentage = 23;
   */
  estimatedNullPercentage: NullPercentageLevel;

  /**
   * Approximate uniqueness of the column.
   *
   * @generated from field: google.privacy.dlp.v2.UniquenessScoreLevel estimated_uniqueness_score = 24;
   */
  estimatedUniquenessScore: UniquenessScoreLevel;

  /**
   * The likelihood that this column contains free-form text.
   * A value close to 1 may indicate the column is likely to contain
   * free-form or natural language text.
   * Range in 0-1.
   *
   * @generated from field: double free_text_score = 13;
   */
  freeTextScore: number;

  /**
   * The data type of a given column.
   *
   * @generated from field: google.privacy.dlp.v2.ColumnDataProfile.ColumnDataType column_type = 14;
   */
  columnType: ColumnDataProfile_ColumnDataType;

  /**
   * Indicates if a policy tag has been applied to the column.
   *
   * @generated from field: google.privacy.dlp.v2.ColumnDataProfile.ColumnPolicyState policy_state = 15;
   */
  policyState: ColumnDataProfile_ColumnPolicyState;
};

/**
 * Describes the message google.privacy.dlp.v2.ColumnDataProfile.
 * Use `create(ColumnDataProfileSchema)` to create a new message.
 */
export const ColumnDataProfileSchema: GenMessage<ColumnDataProfile> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 212);

/**
 * Possible states of a profile. New items may be added.
 *
 * @generated from enum google.privacy.dlp.v2.ColumnDataProfile.State
 */
export enum ColumnDataProfile_State {
  /**
   * Unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The profile is currently running. Once a profile has finished it will
   * transition to DONE.
   *
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * The profile is no longer generating.
   * If profile_status.status.code is 0, the profile succeeded, otherwise, it
   * failed.
   *
   * @generated from enum value: DONE = 2;
   */
  DONE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.ColumnDataProfile.State.
 */
export const ColumnDataProfile_StateSchema: GenEnum<ColumnDataProfile_State> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 212, 0);

/**
 * Data types of the data in a column. Types may be added over time.
 *
 * @generated from enum google.privacy.dlp.v2.ColumnDataProfile.ColumnDataType
 */
export enum ColumnDataProfile_ColumnDataType {
  /**
   * Invalid type.
   *
   * @generated from enum value: COLUMN_DATA_TYPE_UNSPECIFIED = 0;
   */
  COLUMN_DATA_TYPE_UNSPECIFIED = 0,

  /**
   * Encoded as a string in decimal format.
   *
   * @generated from enum value: TYPE_INT64 = 1;
   */
  TYPE_INT64 = 1,

  /**
   * Encoded as a boolean "false" or "true".
   *
   * @generated from enum value: TYPE_BOOL = 2;
   */
  TYPE_BOOL = 2,

  /**
   * Encoded as a number, or string "NaN", "Infinity" or "-Infinity".
   *
   * @generated from enum value: TYPE_FLOAT64 = 3;
   */
  TYPE_FLOAT64 = 3,

  /**
   * Encoded as a string value.
   *
   * @generated from enum value: TYPE_STRING = 4;
   */
  TYPE_STRING = 4,

  /**
   * Encoded as a base64 string per RFC 4648, section 4.
   *
   * @generated from enum value: TYPE_BYTES = 5;
   */
  TYPE_BYTES = 5,

  /**
   * Encoded as an RFC 3339 timestamp with mandatory "Z" time zone string:
   * 1985-04-12T23:20:50.52Z
   *
   * @generated from enum value: TYPE_TIMESTAMP = 6;
   */
  TYPE_TIMESTAMP = 6,

  /**
   * Encoded as RFC 3339 full-date format string: 1985-04-12
   *
   * @generated from enum value: TYPE_DATE = 7;
   */
  TYPE_DATE = 7,

  /**
   * Encoded as RFC 3339 partial-time format string: 23:20:50.52
   *
   * @generated from enum value: TYPE_TIME = 8;
   */
  TYPE_TIME = 8,

  /**
   * Encoded as RFC 3339 full-date "T" partial-time: 1985-04-12T23:20:50.52
   *
   * @generated from enum value: TYPE_DATETIME = 9;
   */
  TYPE_DATETIME = 9,

  /**
   * Encoded as WKT
   *
   * @generated from enum value: TYPE_GEOGRAPHY = 10;
   */
  TYPE_GEOGRAPHY = 10,

  /**
   * Encoded as a decimal string.
   *
   * @generated from enum value: TYPE_NUMERIC = 11;
   */
  TYPE_NUMERIC = 11,

  /**
   * Container of ordered fields, each with a type and field name.
   *
   * @generated from enum value: TYPE_RECORD = 12;
   */
  TYPE_RECORD = 12,

  /**
   * Decimal type.
   *
   * @generated from enum value: TYPE_BIGNUMERIC = 13;
   */
  TYPE_BIGNUMERIC = 13,

  /**
   * Json type.
   *
   * @generated from enum value: TYPE_JSON = 14;
   */
  TYPE_JSON = 14,

  /**
   * Interval type.
   *
   * @generated from enum value: TYPE_INTERVAL = 15;
   */
  TYPE_INTERVAL = 15,

  /**
   * `Range<Date>` type.
   *
   * @generated from enum value: TYPE_RANGE_DATE = 16;
   */
  TYPE_RANGE_DATE = 16,

  /**
   * `Range<Datetime>` type.
   *
   * @generated from enum value: TYPE_RANGE_DATETIME = 17;
   */
  TYPE_RANGE_DATETIME = 17,

  /**
   * `Range<Timestamp>` type.
   *
   * @generated from enum value: TYPE_RANGE_TIMESTAMP = 18;
   */
  TYPE_RANGE_TIMESTAMP = 18,
}

/**
 * Describes the enum google.privacy.dlp.v2.ColumnDataProfile.ColumnDataType.
 */
export const ColumnDataProfile_ColumnDataTypeSchema: GenEnum<ColumnDataProfile_ColumnDataType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 212, 1);

/**
 * The possible policy states for a column.
 *
 * @generated from enum google.privacy.dlp.v2.ColumnDataProfile.ColumnPolicyState
 */
export enum ColumnDataProfile_ColumnPolicyState {
  /**
   * No policy tags.
   *
   * @generated from enum value: COLUMN_POLICY_STATE_UNSPECIFIED = 0;
   */
  COLUMN_POLICY_STATE_UNSPECIFIED = 0,

  /**
   * Column has policy tag applied.
   *
   * @generated from enum value: COLUMN_POLICY_TAGGED = 1;
   */
  COLUMN_POLICY_TAGGED = 1,
}

/**
 * Describes the enum google.privacy.dlp.v2.ColumnDataProfile.ColumnPolicyState.
 */
export const ColumnDataProfile_ColumnPolicyStateSchema: GenEnum<ColumnDataProfile_ColumnPolicyState> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 212, 2);

/**
 * The profile for a file store.
 *
 * * Cloud Storage: maps 1:1 with a bucket.
 * * Amazon S3: maps 1:1 with a bucket.
 *
 * @generated from message google.privacy.dlp.v2.FileStoreDataProfile
 */
export type FileStoreDataProfile = Message<"google.privacy.dlp.v2.FileStoreDataProfile"> & {
  /**
   * The name of the profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource type that was profiled.
   *
   * @generated from field: google.privacy.dlp.v2.DataSourceType data_source_type = 2;
   */
  dataSourceType?: DataSourceType;

  /**
   * The resource name of the project data profile for this file store.
   *
   * @generated from field: string project_data_profile = 3;
   */
  projectDataProfile: string;

  /**
   * The Google Cloud project ID that owns the resource.
   * For Amazon S3 buckets, this is the AWS Account Id.
   *
   * @generated from field: string project_id = 4;
   */
  projectId: string;

  /**
   * The location of the file store.
   *
   * * Cloud Storage:
   * https://cloud.google.com/storage/docs/locations#available-locations
   * * Amazon S3:
   * https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints
   *
   * @generated from field: string file_store_location = 5;
   */
  fileStoreLocation: string;

  /**
   * For resources that have multiple storage locations, these are those
   * regions. For Cloud Storage this is the list of regions chosen for
   * dual-region storage. `file_store_location` will normally be the
   * corresponding multi-region for the list of individual locations. The first
   * region is always picked as the processing and storage location for the data
   * profile.
   *
   * @generated from field: repeated string data_storage_locations = 19;
   */
  dataStorageLocations: string[];

  /**
   * The location type of the bucket (region, dual-region, multi-region, etc).
   * If dual-region, expect data_storage_locations to be populated.
   *
   * @generated from field: string location_type = 20;
   */
  locationType: string;

  /**
   * The file store path.
   *
   * * Cloud Storage: `gs://{bucket}`
   * * Amazon S3: `s3://{bucket}`
   *
   * @generated from field: string file_store_path = 6;
   */
  fileStorePath: string;

  /**
   * The resource name of the resource profiled.
   * https://cloud.google.com/apis/design/resource_names#full_resource_name
   *
   * Example format of an S3 bucket full resource name:
   * `//cloudasset.googleapis.com/organizations/{org_id}/otherCloudConnections/aws/arn:aws:s3:::{bucket_name}`
   *
   * @generated from field: string full_resource = 24;
   */
  fullResource: string;

  /**
   * The snapshot of the configurations used to generate the profile.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileConfigSnapshot config_snapshot = 7;
   */
  configSnapshot?: DataProfileConfigSnapshot;

  /**
   * Success or error status from the most recent profile generation attempt.
   * May be empty if the profile is still being generated.
   *
   * @generated from field: google.privacy.dlp.v2.ProfileStatus profile_status = 8;
   */
  profileStatus?: ProfileStatus;

  /**
   * State of a profile.
   *
   * @generated from field: google.privacy.dlp.v2.FileStoreDataProfile.State state = 9;
   */
  state: FileStoreDataProfile_State;

  /**
   * The last time the profile was generated.
   *
   * @generated from field: google.protobuf.Timestamp profile_last_generated = 10;
   */
  profileLastGenerated?: Timestamp;

  /**
   * How broadly a resource has been shared.
   *
   * @generated from field: google.privacy.dlp.v2.ResourceVisibility resource_visibility = 11;
   */
  resourceVisibility: ResourceVisibility;

  /**
   * The sensitivity score of this resource.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 12;
   */
  sensitivityScore?: SensitivityScore;

  /**
   * The data risk level of this resource.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel data_risk_level = 13;
   */
  dataRiskLevel?: DataRiskLevel;

  /**
   * The time the file store was first created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 14;
   */
  createTime?: Timestamp;

  /**
   * The time the file store was last modified.
   *
   * @generated from field: google.protobuf.Timestamp last_modified_time = 15;
   */
  lastModifiedTime?: Timestamp;

  /**
   * FileClusterSummary per each cluster.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileClusterSummary file_cluster_summaries = 16;
   */
  fileClusterSummaries: FileClusterSummary[];

  /**
   * Attributes of the resource being profiled.
   * Currently used attributes:
   *
   * * customer_managed_encryption: boolean
   *     - true: the resource is encrypted with a customer-managed key.
   *     - false: the resource is encrypted with a provider-managed key.
   *
   * @generated from field: map<string, google.privacy.dlp.v2.Value> resource_attributes = 17;
   */
  resourceAttributes: { [key: string]: Value };

  /**
   * The labels applied to the resource at the time the profile was generated.
   *
   * @generated from field: map<string, string> resource_labels = 18;
   */
  resourceLabels: { [key: string]: string };

  /**
   * InfoTypes detected in this file store.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileStoreInfoTypeSummary file_store_info_type_summaries = 21;
   */
  fileStoreInfoTypeSummaries: FileStoreInfoTypeSummary[];

  /**
   * The file store does not have any files.
   *
   * @generated from field: bool file_store_is_empty = 23;
   */
  fileStoreIsEmpty: boolean;
};

/**
 * Describes the message google.privacy.dlp.v2.FileStoreDataProfile.
 * Use `create(FileStoreDataProfileSchema)` to create a new message.
 */
export const FileStoreDataProfileSchema: GenMessage<FileStoreDataProfile> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 213);

/**
 * Possible states of a profile. New items may be added.
 *
 * @generated from enum google.privacy.dlp.v2.FileStoreDataProfile.State
 */
export enum FileStoreDataProfile_State {
  /**
   * Unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The profile is currently running. Once a profile has finished it will
   * transition to DONE.
   *
   * @generated from enum value: RUNNING = 1;
   */
  RUNNING = 1,

  /**
   * The profile is no longer generating.
   * If profile_status.status.code is 0, the profile succeeded, otherwise, it
   * failed.
   *
   * @generated from enum value: DONE = 2;
   */
  DONE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.FileStoreDataProfile.State.
 */
export const FileStoreDataProfile_StateSchema: GenEnum<FileStoreDataProfile_State> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 213, 0);

/**
 * Information regarding the discovered InfoType.
 *
 * @generated from message google.privacy.dlp.v2.FileStoreInfoTypeSummary
 */
export type FileStoreInfoTypeSummary = Message<"google.privacy.dlp.v2.FileStoreInfoTypeSummary"> & {
  /**
   * The InfoType seen.
   *
   * @generated from field: google.privacy.dlp.v2.InfoType info_type = 1;
   */
  infoType?: InfoType;
};

/**
 * Describes the message google.privacy.dlp.v2.FileStoreInfoTypeSummary.
 * Use `create(FileStoreInfoTypeSummarySchema)` to create a new message.
 */
export const FileStoreInfoTypeSummarySchema: GenMessage<FileStoreInfoTypeSummary> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 214);

/**
 * Information regarding the discovered file extension.
 *
 * @generated from message google.privacy.dlp.v2.FileExtensionInfo
 */
export type FileExtensionInfo = Message<"google.privacy.dlp.v2.FileExtensionInfo"> & {
  /**
   * The file extension if set. (aka .pdf, .jpg, .txt)
   *
   * @generated from field: string file_extension = 1;
   */
  fileExtension: string;
};

/**
 * Describes the message google.privacy.dlp.v2.FileExtensionInfo.
 * Use `create(FileExtensionInfoSchema)` to create a new message.
 */
export const FileExtensionInfoSchema: GenMessage<FileExtensionInfo> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 215);

/**
 * The file cluster summary.
 *
 * @generated from message google.privacy.dlp.v2.FileClusterSummary
 */
export type FileClusterSummary = Message<"google.privacy.dlp.v2.FileClusterSummary"> & {
  /**
   * The file cluster type.
   *
   * @generated from field: google.privacy.dlp.v2.FileClusterType file_cluster_type = 1;
   */
  fileClusterType?: FileClusterType;

  /**
   * InfoTypes detected in this cluster.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileStoreInfoTypeSummary file_store_info_type_summaries = 2;
   */
  fileStoreInfoTypeSummaries: FileStoreInfoTypeSummary[];

  /**
   * The sensitivity score of this cluster. The score will be SENSITIVITY_LOW
   * if nothing has been scanned.
   *
   * @generated from field: google.privacy.dlp.v2.SensitivityScore sensitivity_score = 3;
   */
  sensitivityScore?: SensitivityScore;

  /**
   * The data risk level of this cluster. RISK_LOW if nothing has been
   * scanned.
   *
   * @generated from field: google.privacy.dlp.v2.DataRiskLevel data_risk_level = 4;
   */
  dataRiskLevel?: DataRiskLevel;

  /**
   * A list of errors detected while scanning this cluster. The list is
   * truncated to 10 per cluster.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 6;
   */
  errors: Error[];

  /**
   * A sample of file types scanned in this cluster. Empty if no files were
   * scanned. File extensions can be derived from the file name or the file
   * content.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileExtensionInfo file_extensions_scanned = 7;
   */
  fileExtensionsScanned: FileExtensionInfo[];

  /**
   * A sample of file types seen in this cluster. Empty if no files were seen.
   * File extensions can be derived from the file name or the file content.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileExtensionInfo file_extensions_seen = 8;
   */
  fileExtensionsSeen: FileExtensionInfo[];

  /**
   * True if no files exist in this cluster. If the bucket had more files than
   * could be listed, this will be false even if no files for this cluster
   * were seen and file_extensions_seen is empty.
   *
   * @generated from field: bool no_files_exist = 9;
   */
  noFilesExist: boolean;
};

/**
 * Describes the message google.privacy.dlp.v2.FileClusterSummary.
 * Use `create(FileClusterSummarySchema)` to create a new message.
 */
export const FileClusterSummarySchema: GenMessage<FileClusterSummary> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 216);

/**
 * Request to get a project data profile.
 *
 * @generated from message google.privacy.dlp.v2.GetProjectDataProfileRequest
 */
export type GetProjectDataProfileRequest = Message<"google.privacy.dlp.v2.GetProjectDataProfileRequest"> & {
  /**
   * Required. Resource name, for example
   * `organizations/12345/locations/us/projectDataProfiles/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetProjectDataProfileRequest.
 * Use `create(GetProjectDataProfileRequestSchema)` to create a new message.
 */
export const GetProjectDataProfileRequestSchema: GenMessage<GetProjectDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 217);

/**
 * Request to get a file store data profile.
 *
 * @generated from message google.privacy.dlp.v2.GetFileStoreDataProfileRequest
 */
export type GetFileStoreDataProfileRequest = Message<"google.privacy.dlp.v2.GetFileStoreDataProfileRequest"> & {
  /**
   * Required. Resource name, for example
   * `organizations/12345/locations/us/fileStoreDataProfiles/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetFileStoreDataProfileRequest.
 * Use `create(GetFileStoreDataProfileRequestSchema)` to create a new message.
 */
export const GetFileStoreDataProfileRequestSchema: GenMessage<GetFileStoreDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 218);

/**
 * Request to list the file store profiles generated for a given organization or
 * project.
 *
 * @generated from message google.privacy.dlp.v2.ListFileStoreDataProfilesRequest
 */
export type ListFileStoreDataProfilesRequest = Message<"google.privacy.dlp.v2.ListFileStoreDataProfilesRequest"> & {
  /**
   * Required. Resource name of the organization or project, for
   * example `organizations/433245324/locations/europe` or
   * `projects/project-id/locations/asia`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Page token to continue retrieval.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. Size of the page. This value can be limited by the server. If
   * zero, server returns a page of max size 100.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Optional. Comma-separated list of fields to order by, followed by `asc` or
   * `desc` postfix. This list is case insensitive. The default sorting order is
   * ascending. Redundant space characters are insignificant. Only one order
   * field at a time is allowed.
   *
   * Examples:
   *
   * * `project_id asc`
   * * `name`
   * * `sensitivity_level desc`
   *
   * Supported fields are:
   *
   * - `project_id`: The Google Cloud project ID.
   * - `sensitivity_level`: How sensitive the data in a table is, at most.
   * - `data_risk_level`: How much risk is associated with this data.
   * - `profile_last_generated`: When the profile was last updated in epoch
   * seconds.
   * - `last_modified`: The last time the resource was modified.
   * - `resource_visibility`: Visibility restriction for this resource.
   * - `name`: The name of the profile.
   * - `create_time`: The time the file store was first created.
   *
   * @generated from field: string order_by = 4;
   */
  orderBy: string;

  /**
   * Optional. Allows filtering.
   *
   * Supported syntax:
   *
   * * Filter expressions are made up of one or more restrictions.
   * * Restrictions can be combined by `AND` or `OR` logical operators. A
   * sequence of restrictions implicitly uses `AND`.
   * * A restriction has the form of `{field} {operator} {value}`.
   * * Supported fields/values:
   *     - `project_id` - The Google Cloud project ID.
   *     - `account_id` - The AWS account ID.
   *     - `file_store_path` - The path like "gs://bucket".
   *     - `data_source_type` - The profile's data source type, like
   *     "google/storage/bucket".
   *     - `data_storage_location` - The location where the file store's data is
   *     stored, like "us-central1".
   *     - `sensitivity_level` - HIGH|MODERATE|LOW
   *     - `data_risk_level` - HIGH|MODERATE|LOW
   *     - `resource_visibility`: PUBLIC|RESTRICTED
   *     - `status_code` - an RPC status code as defined in
   *     https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   * * The operator must be `=` or `!=`.
   *
   * Examples:
   *
   * * `project_id = 12345 AND status_code = 1`
   * * `project_id = 12345 AND sensitivity_level = HIGH`
   * * `project_id = 12345 AND resource_visibility = PUBLIC`
   * * `file_store_path = "gs://mybucket"`
   *
   * The length of this field should be no more than 500 characters.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListFileStoreDataProfilesRequest.
 * Use `create(ListFileStoreDataProfilesRequestSchema)` to create a new message.
 */
export const ListFileStoreDataProfilesRequestSchema: GenMessage<ListFileStoreDataProfilesRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 219);

/**
 * List of file store data profiles generated for a given organization or
 * project.
 *
 * @generated from message google.privacy.dlp.v2.ListFileStoreDataProfilesResponse
 */
export type ListFileStoreDataProfilesResponse = Message<"google.privacy.dlp.v2.ListFileStoreDataProfilesResponse"> & {
  /**
   * List of data profiles.
   *
   * @generated from field: repeated google.privacy.dlp.v2.FileStoreDataProfile file_store_data_profiles = 1;
   */
  fileStoreDataProfiles: FileStoreDataProfile[];

  /**
   * The next page token.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListFileStoreDataProfilesResponse.
 * Use `create(ListFileStoreDataProfilesResponseSchema)` to create a new message.
 */
export const ListFileStoreDataProfilesResponseSchema: GenMessage<ListFileStoreDataProfilesResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 220);

/**
 * Request message for DeleteFileStoreProfile.
 *
 * @generated from message google.privacy.dlp.v2.DeleteFileStoreDataProfileRequest
 */
export type DeleteFileStoreDataProfileRequest = Message<"google.privacy.dlp.v2.DeleteFileStoreDataProfileRequest"> & {
  /**
   * Required. Resource name of the file store data profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteFileStoreDataProfileRequest.
 * Use `create(DeleteFileStoreDataProfileRequestSchema)` to create a new message.
 */
export const DeleteFileStoreDataProfileRequestSchema: GenMessage<DeleteFileStoreDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 221);

/**
 * Request to get a table data profile.
 *
 * @generated from message google.privacy.dlp.v2.GetTableDataProfileRequest
 */
export type GetTableDataProfileRequest = Message<"google.privacy.dlp.v2.GetTableDataProfileRequest"> & {
  /**
   * Required. Resource name, for example
   * `organizations/12345/locations/us/tableDataProfiles/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetTableDataProfileRequest.
 * Use `create(GetTableDataProfileRequestSchema)` to create a new message.
 */
export const GetTableDataProfileRequestSchema: GenMessage<GetTableDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 222);

/**
 * Request to get a column data profile.
 *
 * @generated from message google.privacy.dlp.v2.GetColumnDataProfileRequest
 */
export type GetColumnDataProfileRequest = Message<"google.privacy.dlp.v2.GetColumnDataProfileRequest"> & {
  /**
   * Required. Resource name, for example
   * `organizations/12345/locations/us/columnDataProfiles/53234423`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetColumnDataProfileRequest.
 * Use `create(GetColumnDataProfileRequestSchema)` to create a new message.
 */
export const GetColumnDataProfileRequestSchema: GenMessage<GetColumnDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 223);

/**
 * A condition for determining whether a Pub/Sub should be triggered.
 *
 * @generated from message google.privacy.dlp.v2.DataProfilePubSubCondition
 */
export type DataProfilePubSubCondition = Message<"google.privacy.dlp.v2.DataProfilePubSubCondition"> & {
  /**
   * An expression.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions expressions = 1;
   */
  expressions?: DataProfilePubSubCondition_PubSubExpressions;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfilePubSubCondition.
 * Use `create(DataProfilePubSubConditionSchema)` to create a new message.
 */
export const DataProfilePubSubConditionSchema: GenMessage<DataProfilePubSubCondition> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 224);

/**
 * A condition consisting of a value.
 *
 * @generated from message google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubCondition
 */
export type DataProfilePubSubCondition_PubSubCondition = Message<"google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubCondition"> & {
  /**
   * The value for the condition to trigger.
   *
   * @generated from oneof google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubCondition.value
   */
  value: {
    /**
     * The minimum data risk score that triggers the condition.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfilePubSubCondition.ProfileScoreBucket minimum_risk_score = 1;
     */
    value: DataProfilePubSubCondition_ProfileScoreBucket;
    case: "minimumRiskScore";
  } | {
    /**
     * The minimum sensitivity level that triggers the condition.
     *
     * @generated from field: google.privacy.dlp.v2.DataProfilePubSubCondition.ProfileScoreBucket minimum_sensitivity_score = 2;
     */
    value: DataProfilePubSubCondition_ProfileScoreBucket;
    case: "minimumSensitivityScore";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubCondition.
 * Use `create(DataProfilePubSubCondition_PubSubConditionSchema)` to create a new message.
 */
export const DataProfilePubSubCondition_PubSubConditionSchema: GenMessage<DataProfilePubSubCondition_PubSubCondition> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 224, 0);

/**
 * An expression, consisting of an operator and conditions.
 *
 * @generated from message google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions
 */
export type DataProfilePubSubCondition_PubSubExpressions = Message<"google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions"> & {
  /**
   * The operator to apply to the collection of conditions.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions.PubSubLogicalOperator logical_operator = 1;
   */
  logicalOperator: DataProfilePubSubCondition_PubSubExpressions_PubSubLogicalOperator;

  /**
   * Conditions to apply to the expression.
   *
   * @generated from field: repeated google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubCondition conditions = 2;
   */
  conditions: DataProfilePubSubCondition_PubSubCondition[];
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions.
 * Use `create(DataProfilePubSubCondition_PubSubExpressionsSchema)` to create a new message.
 */
export const DataProfilePubSubCondition_PubSubExpressionsSchema: GenMessage<DataProfilePubSubCondition_PubSubExpressions> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 224, 1);

/**
 * Logical operators for conditional checks.
 *
 * @generated from enum google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions.PubSubLogicalOperator
 */
export enum DataProfilePubSubCondition_PubSubExpressions_PubSubLogicalOperator {
  /**
   * Unused.
   *
   * @generated from enum value: LOGICAL_OPERATOR_UNSPECIFIED = 0;
   */
  LOGICAL_OPERATOR_UNSPECIFIED = 0,

  /**
   * Conditional OR.
   *
   * @generated from enum value: OR = 1;
   */
  OR = 1,

  /**
   * Conditional AND.
   *
   * @generated from enum value: AND = 2;
   */
  AND = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataProfilePubSubCondition.PubSubExpressions.PubSubLogicalOperator.
 */
export const DataProfilePubSubCondition_PubSubExpressions_PubSubLogicalOperatorSchema: GenEnum<DataProfilePubSubCondition_PubSubExpressions_PubSubLogicalOperator> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 224, 1, 0);

/**
 * Various score levels for resources.
 *
 * @generated from enum google.privacy.dlp.v2.DataProfilePubSubCondition.ProfileScoreBucket
 */
export enum DataProfilePubSubCondition_ProfileScoreBucket {
  /**
   * Unused.
   *
   * @generated from enum value: PROFILE_SCORE_BUCKET_UNSPECIFIED = 0;
   */
  PROFILE_SCORE_BUCKET_UNSPECIFIED = 0,

  /**
   * High risk/sensitivity detected.
   *
   * @generated from enum value: HIGH = 1;
   */
  HIGH = 1,

  /**
   * Medium or high risk/sensitivity detected.
   *
   * @generated from enum value: MEDIUM_OR_HIGH = 2;
   */
  MEDIUM_OR_HIGH = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataProfilePubSubCondition.ProfileScoreBucket.
 */
export const DataProfilePubSubCondition_ProfileScoreBucketSchema: GenEnum<DataProfilePubSubCondition_ProfileScoreBucket> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 224, 0);

/**
 * Pub/Sub topic message for a DataProfileAction.PubSubNotification event.
 * To receive a message of protocol buffer schema type, convert the message data
 * to an object of this proto class.
 *
 * @generated from message google.privacy.dlp.v2.DataProfilePubSubMessage
 */
export type DataProfilePubSubMessage = Message<"google.privacy.dlp.v2.DataProfilePubSubMessage"> & {
  /**
   * If `DetailLevel` is `TABLE_PROFILE` this will be fully populated.
   * Otherwise, if `DetailLevel` is `RESOURCE_NAME`, then only `name` and
   * `full_resource` will be populated.
   *
   * @generated from field: google.privacy.dlp.v2.TableDataProfile profile = 1;
   */
  profile?: TableDataProfile;

  /**
   * If `DetailLevel` is `FILE_STORE_PROFILE` this will be fully populated.
   * Otherwise, if `DetailLevel` is `RESOURCE_NAME`, then only `name` and
   * `file_store_path` will be populated.
   *
   * @generated from field: google.privacy.dlp.v2.FileStoreDataProfile file_store_profile = 3;
   */
  fileStoreProfile?: FileStoreDataProfile;

  /**
   * The event that caused the Pub/Sub message to be sent.
   *
   * @generated from field: google.privacy.dlp.v2.DataProfileAction.EventType event = 2;
   */
  event: DataProfileAction_EventType;
};

/**
 * Describes the message google.privacy.dlp.v2.DataProfilePubSubMessage.
 * Use `create(DataProfilePubSubMessageSchema)` to create a new message.
 */
export const DataProfilePubSubMessageSchema: GenMessage<DataProfilePubSubMessage> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 225);

/**
 * Request message for CreateConnection.
 *
 * @generated from message google.privacy.dlp.v2.CreateConnectionRequest
 */
export type CreateConnectionRequest = Message<"google.privacy.dlp.v2.CreateConnectionRequest"> & {
  /**
   * Required. Parent resource name.
   *
   * The format of this value varies depending on the scope of the request
   * (project or organization):
   *
   * + Projects scope:
   *   `projects/{project_id}/locations/{location_id}`
   * + Organizations scope:
   *   `organizations/{org_id}/locations/{location_id}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The connection resource.
   *
   * @generated from field: google.privacy.dlp.v2.Connection connection = 2;
   */
  connection?: Connection;
};

/**
 * Describes the message google.privacy.dlp.v2.CreateConnectionRequest.
 * Use `create(CreateConnectionRequestSchema)` to create a new message.
 */
export const CreateConnectionRequestSchema: GenMessage<CreateConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 226);

/**
 * Request message for GetConnection.
 *
 * @generated from message google.privacy.dlp.v2.GetConnectionRequest
 */
export type GetConnectionRequest = Message<"google.privacy.dlp.v2.GetConnectionRequest"> & {
  /**
   * Required. Resource name in the format:
   * `projects/{project}/locations/{location}/connections/{connection}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.GetConnectionRequest.
 * Use `create(GetConnectionRequestSchema)` to create a new message.
 */
export const GetConnectionRequestSchema: GenMessage<GetConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 227);

/**
 * Request message for ListConnections.
 *
 * @generated from message google.privacy.dlp.v2.ListConnectionsRequest
 */
export type ListConnectionsRequest = Message<"google.privacy.dlp.v2.ListConnectionsRequest"> & {
  /**
   * Required. Resource name of the organization or project, for
   * example, `organizations/433245324/locations/europe` or
   * `projects/project-id/locations/asia`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Number of results per page, max 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Page token from a previous page to return the next set of
   * results. If set, all other request fields must match the original request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Supported field/value: `state` - MISSING|AVAILABLE|ERROR
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListConnectionsRequest.
 * Use `create(ListConnectionsRequestSchema)` to create a new message.
 */
export const ListConnectionsRequestSchema: GenMessage<ListConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 228);

/**
 * Request message for SearchConnections.
 *
 * @generated from message google.privacy.dlp.v2.SearchConnectionsRequest
 */
export type SearchConnectionsRequest = Message<"google.privacy.dlp.v2.SearchConnectionsRequest"> & {
  /**
   * Required. Resource name of the organization or project with a wildcard
   * location, for example, `organizations/433245324/locations/-` or
   * `projects/project-id/locations/-`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Number of results per page, max 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. Page token from a previous page to return the next set of
   * results. If set, all other request fields must match the original request.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. Supported field/value: - `state` - MISSING|AVAILABLE|ERROR
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.privacy.dlp.v2.SearchConnectionsRequest.
 * Use `create(SearchConnectionsRequestSchema)` to create a new message.
 */
export const SearchConnectionsRequestSchema: GenMessage<SearchConnectionsRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 229);

/**
 * Response message for ListConnections.
 *
 * @generated from message google.privacy.dlp.v2.ListConnectionsResponse
 */
export type ListConnectionsResponse = Message<"google.privacy.dlp.v2.ListConnectionsResponse"> & {
  /**
   * List of connections.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Connection connections = 1;
   */
  connections: Connection[];

  /**
   * Token to retrieve the next page of results. An empty value means there are
   * no more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.ListConnectionsResponse.
 * Use `create(ListConnectionsResponseSchema)` to create a new message.
 */
export const ListConnectionsResponseSchema: GenMessage<ListConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 230);

/**
 * Response message for SearchConnections.
 *
 * @generated from message google.privacy.dlp.v2.SearchConnectionsResponse
 */
export type SearchConnectionsResponse = Message<"google.privacy.dlp.v2.SearchConnectionsResponse"> & {
  /**
   * List of connections that match the search query. Note that only a subset
   * of the fields will be populated, and only "name" is guaranteed to be set.
   * For full details of a Connection, call GetConnection with the name.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Connection connections = 1;
   */
  connections: Connection[];

  /**
   * Token to retrieve the next page of results. An empty value means there are
   * no more results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.privacy.dlp.v2.SearchConnectionsResponse.
 * Use `create(SearchConnectionsResponseSchema)` to create a new message.
 */
export const SearchConnectionsResponseSchema: GenMessage<SearchConnectionsResponse> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 231);

/**
 * Request message for UpdateConnection.
 *
 * @generated from message google.privacy.dlp.v2.UpdateConnectionRequest
 */
export type UpdateConnectionRequest = Message<"google.privacy.dlp.v2.UpdateConnectionRequest"> & {
  /**
   * Required. Resource name in the format:
   * `projects/{project}/locations/{location}/connections/{connection}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The connection with new values for the relevant fields.
   *
   * @generated from field: google.privacy.dlp.v2.Connection connection = 2;
   */
  connection?: Connection;

  /**
   * Optional. Mask to control which fields get updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.privacy.dlp.v2.UpdateConnectionRequest.
 * Use `create(UpdateConnectionRequestSchema)` to create a new message.
 */
export const UpdateConnectionRequestSchema: GenMessage<UpdateConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 232);

/**
 * Request message for DeleteConnection.
 *
 * @generated from message google.privacy.dlp.v2.DeleteConnectionRequest
 */
export type DeleteConnectionRequest = Message<"google.privacy.dlp.v2.DeleteConnectionRequest"> & {
  /**
   * Required. Resource name of the Connection to be deleted, in the format:
   * `projects/{project}/locations/{location}/connections/{connection}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteConnectionRequest.
 * Use `create(DeleteConnectionRequestSchema)` to create a new message.
 */
export const DeleteConnectionRequestSchema: GenMessage<DeleteConnectionRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 233);

/**
 * A data connection to allow DLP to profile data in locations that require
 * additional configuration.
 *
 * @generated from message google.privacy.dlp.v2.Connection
 */
export type Connection = Message<"google.privacy.dlp.v2.Connection"> & {
  /**
   * Output only. Name of the connection:
   * `projects/{project}/locations/{location}/connections/{name}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The connection's state in its lifecycle.
   *
   * @generated from field: google.privacy.dlp.v2.ConnectionState state = 2;
   */
  state: ConnectionState;

  /**
   * Output only. Set if status == ERROR, to provide additional details. Will
   * store the last 10 errors sorted with the most recent first.
   *
   * @generated from field: repeated google.privacy.dlp.v2.Error errors = 3;
   */
  errors: Error[];

  /**
   * Type of connection.
   *
   * @generated from oneof google.privacy.dlp.v2.Connection.properties
   */
  properties: {
    /**
     * Connect to a Cloud SQL instance.
     *
     * @generated from field: google.privacy.dlp.v2.CloudSqlProperties cloud_sql = 4;
     */
    value: CloudSqlProperties;
    case: "cloudSql";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.Connection.
 * Use `create(ConnectionSchema)` to create a new message.
 */
export const ConnectionSchema: GenMessage<Connection> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 234);

/**
 * A credential consisting of a username and password, where the password is
 * stored in a Secret Manager resource.
 * Note: Secret Manager [charges
 * apply](https://cloud.google.com/secret-manager/pricing).
 *
 * @generated from message google.privacy.dlp.v2.SecretManagerCredential
 */
export type SecretManagerCredential = Message<"google.privacy.dlp.v2.SecretManagerCredential"> & {
  /**
   * Required. The username.
   *
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * Required. The name of the Secret Manager resource that stores the password,
   * in the form `projects/project-id/secrets/secret-name/versions/version`.
   *
   * @generated from field: string password_secret_version_name = 2;
   */
  passwordSecretVersionName: string;
};

/**
 * Describes the message google.privacy.dlp.v2.SecretManagerCredential.
 * Use `create(SecretManagerCredentialSchema)` to create a new message.
 */
export const SecretManagerCredentialSchema: GenMessage<SecretManagerCredential> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 235);

/**
 * Use IAM authentication to connect. This requires the Cloud SQL IAM feature
 * to be enabled on the instance, which is not the default for Cloud SQL.
 * See https://cloud.google.com/sql/docs/postgres/authentication and
 * https://cloud.google.com/sql/docs/mysql/authentication.
 *
 * @generated from message google.privacy.dlp.v2.CloudSqlIamCredential
 */
export type CloudSqlIamCredential = Message<"google.privacy.dlp.v2.CloudSqlIamCredential"> & {
};

/**
 * Describes the message google.privacy.dlp.v2.CloudSqlIamCredential.
 * Use `create(CloudSqlIamCredentialSchema)` to create a new message.
 */
export const CloudSqlIamCredentialSchema: GenMessage<CloudSqlIamCredential> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 236);

/**
 * Cloud SQL connection properties.
 *
 * @generated from message google.privacy.dlp.v2.CloudSqlProperties
 */
export type CloudSqlProperties = Message<"google.privacy.dlp.v2.CloudSqlProperties"> & {
  /**
   * Optional. Immutable. The Cloud SQL instance for which the connection is
   * defined. Only one connection per instance is allowed. This can only be set
   * at creation time, and cannot be updated.
   *
   * It is an error to use a connection_name from different project or region
   * than the one that holds the connection.
   * For example, a Connection resource for Cloud SQL connection_name
   * `project-id:us-central1:sql-instance`
   * must be created under the parent
   * `projects/project-id/locations/us-central1`
   *
   * @generated from field: string connection_name = 1;
   */
  connectionName: string;

  /**
   * How to authenticate to the instance.
   *
   * @generated from oneof google.privacy.dlp.v2.CloudSqlProperties.credential
   */
  credential: {
    /**
     * A username and password stored in Secret Manager.
     *
     * @generated from field: google.privacy.dlp.v2.SecretManagerCredential username_password = 2;
     */
    value: SecretManagerCredential;
    case: "usernamePassword";
  } | {
    /**
     * Built-in IAM authentication (must be configured in Cloud SQL).
     *
     * @generated from field: google.privacy.dlp.v2.CloudSqlIamCredential cloud_sql_iam = 3;
     */
    value: CloudSqlIamCredential;
    case: "cloudSqlIam";
  } | { case: undefined; value?: undefined };

  /**
   * Required. DLP will limit its connections to max_connections.
   * Must be 2 or greater.
   *
   * @generated from field: int32 max_connections = 4;
   */
  maxConnections: number;

  /**
   * Required. The database engine used by the Cloud SQL instance that this
   * connection configures.
   *
   * @generated from field: google.privacy.dlp.v2.CloudSqlProperties.DatabaseEngine database_engine = 7;
   */
  databaseEngine: CloudSqlProperties_DatabaseEngine;
};

/**
 * Describes the message google.privacy.dlp.v2.CloudSqlProperties.
 * Use `create(CloudSqlPropertiesSchema)` to create a new message.
 */
export const CloudSqlPropertiesSchema: GenMessage<CloudSqlProperties> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 237);

/**
 * Database engine of a Cloud SQL instance.
 * New values may be added over time.
 *
 * @generated from enum google.privacy.dlp.v2.CloudSqlProperties.DatabaseEngine
 */
export enum CloudSqlProperties_DatabaseEngine {
  /**
   * An engine that is not currently supported by Sensitive Data Protection.
   *
   * @generated from enum value: DATABASE_ENGINE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Cloud SQL for MySQL instance.
   *
   * @generated from enum value: DATABASE_ENGINE_MYSQL = 1;
   */
  MYSQL = 1,

  /**
   * Cloud SQL for PostgreSQL instance.
   *
   * @generated from enum value: DATABASE_ENGINE_POSTGRES = 2;
   */
  POSTGRES = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.CloudSqlProperties.DatabaseEngine.
 */
export const CloudSqlProperties_DatabaseEngineSchema: GenEnum<CloudSqlProperties_DatabaseEngine> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 237, 0);

/**
 * Request message for DeleteTableProfile.
 *
 * @generated from message google.privacy.dlp.v2.DeleteTableDataProfileRequest
 */
export type DeleteTableDataProfileRequest = Message<"google.privacy.dlp.v2.DeleteTableDataProfileRequest"> & {
  /**
   * Required. Resource name of the table data profile.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DeleteTableDataProfileRequest.
 * Use `create(DeleteTableDataProfileRequestSchema)` to create a new message.
 */
export const DeleteTableDataProfileRequestSchema: GenMessage<DeleteTableDataProfileRequest> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 238);

/**
 * Message used to identify the type of resource being profiled.
 *
 * @generated from message google.privacy.dlp.v2.DataSourceType
 */
export type DataSourceType = Message<"google.privacy.dlp.v2.DataSourceType"> & {
  /**
   * Output only. An identifying string to the type of resource being profiled.
   * Current values:
   *
   * * google/bigquery/table
   * * google/project
   * * google/sql/table
   * * google/gcs/bucket
   *
   * @generated from field: string data_source = 1;
   */
  dataSource: string;
};

/**
 * Describes the message google.privacy.dlp.v2.DataSourceType.
 * Use `create(DataSourceTypeSchema)` to create a new message.
 */
export const DataSourceTypeSchema: GenMessage<DataSourceType> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 239);

/**
 * Message used to identify file cluster type being profiled.
 *
 * @generated from message google.privacy.dlp.v2.FileClusterType
 */
export type FileClusterType = Message<"google.privacy.dlp.v2.FileClusterType"> & {
  /**
   * File cluster type.
   *
   * @generated from oneof google.privacy.dlp.v2.FileClusterType.file_cluster_type
   */
  fileClusterType: {
    /**
     * Cluster type.
     *
     * @generated from field: google.privacy.dlp.v2.FileClusterType.Cluster cluster = 1;
     */
    value: FileClusterType_Cluster;
    case: "cluster";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.privacy.dlp.v2.FileClusterType.
 * Use `create(FileClusterTypeSchema)` to create a new message.
 */
export const FileClusterTypeSchema: GenMessage<FileClusterType> = /*@__PURE__*/
  messageDesc(file_google_privacy_dlp_v2_dlp, 240);

/**
 * Cluster type. Each cluster corresponds to a set of file types.
 * Over time, new types may be added and files may move between clusters.
 *
 * @generated from enum google.privacy.dlp.v2.FileClusterType.Cluster
 */
export enum FileClusterType_Cluster {
  /**
   * Unused.
   *
   * @generated from enum value: CLUSTER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Unsupported files.
   *
   * @generated from enum value: CLUSTER_UNKNOWN = 1;
   */
  UNKNOWN = 1,

  /**
   * Plain text.
   *
   * @generated from enum value: CLUSTER_TEXT = 2;
   */
  TEXT = 2,

  /**
   * Structured data like CSV, TSV etc.
   *
   * @generated from enum value: CLUSTER_STRUCTURED_DATA = 3;
   */
  STRUCTURED_DATA = 3,

  /**
   * Source code.
   *
   * @generated from enum value: CLUSTER_SOURCE_CODE = 4;
   */
  SOURCE_CODE = 4,

  /**
   * Rich document like docx, xlsx etc.
   *
   * @generated from enum value: CLUSTER_RICH_DOCUMENT = 5;
   */
  RICH_DOCUMENT = 5,

  /**
   * Images like jpeg, bmp.
   *
   * @generated from enum value: CLUSTER_IMAGE = 6;
   */
  IMAGE = 6,

  /**
   * Archives and containers like .zip, .tar etc.
   *
   * @generated from enum value: CLUSTER_ARCHIVE = 7;
   */
  ARCHIVE = 7,

  /**
   * Multimedia like .mp4, .avi etc.
   *
   * @generated from enum value: CLUSTER_MULTIMEDIA = 8;
   */
  MULTIMEDIA = 8,

  /**
   * Executable files like .exe, .class, .apk etc.
   *
   * @generated from enum value: CLUSTER_EXECUTABLE = 9;
   */
  EXECUTABLE = 9,
}

/**
 * Describes the enum google.privacy.dlp.v2.FileClusterType.Cluster.
 */
export const FileClusterType_ClusterSchema: GenEnum<FileClusterType_Cluster> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 240, 0);

/**
 * Enum of possible outcomes of transformations. SUCCESS if transformation and
 * storing of transformation was successful, otherwise, reason for not
 * transforming.
 *
 * @generated from enum google.privacy.dlp.v2.TransformationResultStatusType
 */
export enum TransformationResultStatusType {
  /**
   * Unused.
   *
   * @generated from enum value: STATE_TYPE_UNSPECIFIED = 0;
   */
  STATE_TYPE_UNSPECIFIED = 0,

  /**
   * This will be set when a finding could not be transformed (i.e. outside user
   * set bucket range).
   *
   * @generated from enum value: INVALID_TRANSFORM = 1;
   */
  INVALID_TRANSFORM = 1,

  /**
   * This will be set when a BigQuery transformation was successful but could
   * not be stored back in BigQuery because the transformed row exceeds
   * BigQuery's max row size.
   *
   * @generated from enum value: BIGQUERY_MAX_ROW_SIZE_EXCEEDED = 2;
   */
  BIGQUERY_MAX_ROW_SIZE_EXCEEDED = 2,

  /**
   * This will be set when there is a finding in the custom metadata of a file,
   * but at the write time of the transformed file, this key / value pair is
   * unretrievable.
   *
   * @generated from enum value: METADATA_UNRETRIEVABLE = 3;
   */
  METADATA_UNRETRIEVABLE = 3,

  /**
   * This will be set when the transformation and storing of it is successful.
   *
   * @generated from enum value: SUCCESS = 4;
   */
  SUCCESS = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.TransformationResultStatusType.
 */
export const TransformationResultStatusTypeSchema: GenEnum<TransformationResultStatusType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 0);

/**
 * Describes functionality of a given container in its original format.
 *
 * @generated from enum google.privacy.dlp.v2.TransformationContainerType
 */
export enum TransformationContainerType {
  /**
   * Unused.
   *
   * @generated from enum value: TRANSFORM_UNKNOWN_CONTAINER = 0;
   */
  TRANSFORM_UNKNOWN_CONTAINER = 0,

  /**
   * Body of a file.
   *
   * @generated from enum value: TRANSFORM_BODY = 1;
   */
  TRANSFORM_BODY = 1,

  /**
   * Metadata for a file.
   *
   * @generated from enum value: TRANSFORM_METADATA = 2;
   */
  TRANSFORM_METADATA = 2,

  /**
   * A table.
   *
   * @generated from enum value: TRANSFORM_TABLE = 3;
   */
  TRANSFORM_TABLE = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.TransformationContainerType.
 */
export const TransformationContainerTypeSchema: GenEnum<TransformationContainerType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 1);

/**
 * An enum of rules that can be used to transform a value. Can be a
 * record suppression, or one of the transformation rules specified under
 * `PrimitiveTransformation`.
 *
 * @generated from enum google.privacy.dlp.v2.TransformationType
 */
export enum TransformationType {
  /**
   * Unused
   *
   * @generated from enum value: TRANSFORMATION_TYPE_UNSPECIFIED = 0;
   */
  TRANSFORMATION_TYPE_UNSPECIFIED = 0,

  /**
   * Record suppression
   *
   * @generated from enum value: RECORD_SUPPRESSION = 1;
   */
  RECORD_SUPPRESSION = 1,

  /**
   * Replace value
   *
   * @generated from enum value: REPLACE_VALUE = 2;
   */
  REPLACE_VALUE = 2,

  /**
   * Replace value using a dictionary.
   *
   * @generated from enum value: REPLACE_DICTIONARY = 15;
   */
  REPLACE_DICTIONARY = 15,

  /**
   * Redact
   *
   * @generated from enum value: REDACT = 3;
   */
  REDACT = 3,

  /**
   * Character mask
   *
   * @generated from enum value: CHARACTER_MASK = 4;
   */
  CHARACTER_MASK = 4,

  /**
   * FFX-FPE
   *
   * @generated from enum value: CRYPTO_REPLACE_FFX_FPE = 5;
   */
  CRYPTO_REPLACE_FFX_FPE = 5,

  /**
   * Fixed size bucketing
   *
   * @generated from enum value: FIXED_SIZE_BUCKETING = 6;
   */
  FIXED_SIZE_BUCKETING = 6,

  /**
   * Bucketing
   *
   * @generated from enum value: BUCKETING = 7;
   */
  BUCKETING = 7,

  /**
   * Replace with info type
   *
   * @generated from enum value: REPLACE_WITH_INFO_TYPE = 8;
   */
  REPLACE_WITH_INFO_TYPE = 8,

  /**
   * Time part
   *
   * @generated from enum value: TIME_PART = 9;
   */
  TIME_PART = 9,

  /**
   * Crypto hash
   *
   * @generated from enum value: CRYPTO_HASH = 10;
   */
  CRYPTO_HASH = 10,

  /**
   * Date shift
   *
   * @generated from enum value: DATE_SHIFT = 12;
   */
  DATE_SHIFT = 12,

  /**
   * Deterministic crypto
   *
   * @generated from enum value: CRYPTO_DETERMINISTIC_CONFIG = 13;
   */
  CRYPTO_DETERMINISTIC_CONFIG = 13,

  /**
   * Redact image
   *
   * @generated from enum value: REDACT_IMAGE = 14;
   */
  REDACT_IMAGE = 14,
}

/**
 * Describes the enum google.privacy.dlp.v2.TransformationType.
 */
export const TransformationTypeSchema: GenEnum<TransformationType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 2);

/**
 * Whether a profile being created is the first generation or an update.
 *
 * @generated from enum google.privacy.dlp.v2.ProfileGeneration
 */
export enum ProfileGeneration {
  /**
   * Unused.
   *
   * @generated from enum value: PROFILE_GENERATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The profile is the first profile for the resource.
   *
   * @generated from enum value: PROFILE_GENERATION_NEW = 1;
   */
  NEW = 1,

  /**
   * The profile is an update to a previous profile.
   *
   * @generated from enum value: PROFILE_GENERATION_UPDATE = 2;
   */
  UPDATE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.ProfileGeneration.
 */
export const ProfileGenerationSchema: GenEnum<ProfileGeneration> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 3);

/**
 * Over time new types may be added. Currently VIEW, MATERIALIZED_VIEW,
 * and SNAPSHOT are not supported.
 *
 * @generated from enum google.privacy.dlp.v2.BigQueryTableTypeCollection
 */
export enum BigQueryTableTypeCollection {
  /**
   * Unused.
   *
   * @generated from enum value: BIG_QUERY_COLLECTION_UNSPECIFIED = 0;
   */
  BIG_QUERY_COLLECTION_UNSPECIFIED = 0,

  /**
   * Automatically generate profiles for all tables, even if the table type is
   * not yet fully supported for analysis. Profiles for unsupported tables will
   * be generated with errors to indicate their partial support. When full
   * support is added, the tables will automatically be profiled during the next
   * scheduled run.
   *
   * @generated from enum value: BIG_QUERY_COLLECTION_ALL_TYPES = 1;
   */
  BIG_QUERY_COLLECTION_ALL_TYPES = 1,

  /**
   * Only those types fully supported will be profiled. Will expand
   * automatically as Cloud DLP adds support for new table types. Unsupported
   * table types will not have partial profiles generated.
   *
   * @generated from enum value: BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES = 2;
   */
  BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.BigQueryTableTypeCollection.
 */
export const BigQueryTableTypeCollectionSchema: GenEnum<BigQueryTableTypeCollection> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 4);

/**
 * Over time new types may be added. Currently VIEW, MATERIALIZED_VIEW,
 * SNAPSHOT, and non-BigLake external tables are not supported.
 *
 * @generated from enum google.privacy.dlp.v2.BigQueryTableType
 */
export enum BigQueryTableType {
  /**
   * Unused.
   *
   * @generated from enum value: BIG_QUERY_TABLE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A normal BigQuery table.
   *
   * @generated from enum value: BIG_QUERY_TABLE_TYPE_TABLE = 1;
   */
  TABLE = 1,

  /**
   * A table that references data stored in Cloud Storage.
   *
   * @generated from enum value: BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE = 2;
   */
  EXTERNAL_BIG_LAKE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.BigQueryTableType.
 */
export const BigQueryTableTypeSchema: GenEnum<BigQueryTableType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 5);

/**
 * How frequently data profiles can be updated. New options can be added at a
 * later time.
 *
 * @generated from enum google.privacy.dlp.v2.DataProfileUpdateFrequency
 */
export enum DataProfileUpdateFrequency {
  /**
   * Unspecified.
   *
   * @generated from enum value: UPDATE_FREQUENCY_UNSPECIFIED = 0;
   */
  UPDATE_FREQUENCY_UNSPECIFIED = 0,

  /**
   * After the data profile is created, it will never be updated.
   *
   * @generated from enum value: UPDATE_FREQUENCY_NEVER = 1;
   */
  UPDATE_FREQUENCY_NEVER = 1,

  /**
   * The data profile can be updated up to once every 24 hours.
   *
   * @generated from enum value: UPDATE_FREQUENCY_DAILY = 2;
   */
  UPDATE_FREQUENCY_DAILY = 2,

  /**
   * The data profile can be updated up to once every 30 days. Default.
   *
   * @generated from enum value: UPDATE_FREQUENCY_MONTHLY = 4;
   */
  UPDATE_FREQUENCY_MONTHLY = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.DataProfileUpdateFrequency.
 */
export const DataProfileUpdateFrequencySchema: GenEnum<DataProfileUpdateFrequency> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 6);

/**
 * Attributes evaluated to determine if a table has been modified. New values
 * may be added at a later time.
 *
 * @generated from enum google.privacy.dlp.v2.BigQueryTableModification
 */
export enum BigQueryTableModification {
  /**
   * Unused.
   *
   * @generated from enum value: TABLE_MODIFICATION_UNSPECIFIED = 0;
   */
  TABLE_MODIFICATION_UNSPECIFIED = 0,

  /**
   * A table will be considered modified when the last_modified_time from
   * BigQuery has been updated.
   *
   * @generated from enum value: TABLE_MODIFIED_TIMESTAMP = 1;
   */
  TABLE_MODIFIED_TIMESTAMP = 1,
}

/**
 * Describes the enum google.privacy.dlp.v2.BigQueryTableModification.
 */
export const BigQueryTableModificationSchema: GenEnum<BigQueryTableModification> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 7);

/**
 * Attributes evaluated to determine if a schema has been modified. New values
 * may be added at a later time.
 *
 * @generated from enum google.privacy.dlp.v2.BigQuerySchemaModification
 */
export enum BigQuerySchemaModification {
  /**
   * Unused
   *
   * @generated from enum value: SCHEMA_MODIFICATION_UNSPECIFIED = 0;
   */
  SCHEMA_MODIFICATION_UNSPECIFIED = 0,

  /**
   * Profiles should be regenerated when new columns are added to the table.
   * Default.
   *
   * @generated from enum value: SCHEMA_NEW_COLUMNS = 1;
   */
  SCHEMA_NEW_COLUMNS = 1,

  /**
   * Profiles should be regenerated when columns are removed from the table.
   *
   * @generated from enum value: SCHEMA_REMOVED_COLUMNS = 2;
   */
  SCHEMA_REMOVED_COLUMNS = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.BigQuerySchemaModification.
 */
export const BigQuerySchemaModificationSchema: GenEnum<BigQuerySchemaModification> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 8);

/**
 * Operators available for comparing the value of fields.
 *
 * @generated from enum google.privacy.dlp.v2.RelationalOperator
 */
export enum RelationalOperator {
  /**
   * Unused
   *
   * @generated from enum value: RELATIONAL_OPERATOR_UNSPECIFIED = 0;
   */
  RELATIONAL_OPERATOR_UNSPECIFIED = 0,

  /**
   * Equal. Attempts to match even with incompatible types.
   *
   * @generated from enum value: EQUAL_TO = 1;
   */
  EQUAL_TO = 1,

  /**
   * Not equal to. Attempts to match even with incompatible types.
   *
   * @generated from enum value: NOT_EQUAL_TO = 2;
   */
  NOT_EQUAL_TO = 2,

  /**
   * Greater than.
   *
   * @generated from enum value: GREATER_THAN = 3;
   */
  GREATER_THAN = 3,

  /**
   * Less than.
   *
   * @generated from enum value: LESS_THAN = 4;
   */
  LESS_THAN = 4,

  /**
   * Greater than or equals.
   *
   * @generated from enum value: GREATER_THAN_OR_EQUALS = 5;
   */
  GREATER_THAN_OR_EQUALS = 5,

  /**
   * Less than or equals.
   *
   * @generated from enum value: LESS_THAN_OR_EQUALS = 6;
   */
  LESS_THAN_OR_EQUALS = 6,

  /**
   * Exists
   *
   * @generated from enum value: EXISTS = 7;
   */
  EXISTS = 7,
}

/**
 * Describes the enum google.privacy.dlp.v2.RelationalOperator.
 */
export const RelationalOperatorSchema: GenEnum<RelationalOperator> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 9);

/**
 * Type of the match which can be applied to different ways of matching, like
 * Dictionary, regular expression and intersecting with findings of another
 * info type.
 *
 * @generated from enum google.privacy.dlp.v2.MatchingType
 */
export enum MatchingType {
  /**
   * Invalid.
   *
   * @generated from enum value: MATCHING_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Full match.
   *
   * - Dictionary: join of Dictionary results matched complete finding quote
   * - Regex: all regex matches fill a finding quote start to end
   * - Exclude info type: completely inside affecting info types findings
   *
   * @generated from enum value: MATCHING_TYPE_FULL_MATCH = 1;
   */
  FULL_MATCH = 1,

  /**
   * Partial match.
   *
   * - Dictionary: at least one of the tokens in the finding matches
   * - Regex: substring of the finding matches
   * - Exclude info type: intersects with affecting info types findings
   *
   * @generated from enum value: MATCHING_TYPE_PARTIAL_MATCH = 2;
   */
  PARTIAL_MATCH = 2,

  /**
   * Inverse match.
   *
   * - Dictionary: no tokens in the finding match the dictionary
   * - Regex: finding doesn't match the regex
   * - Exclude info type: no intersection with affecting info types findings
   *
   * @generated from enum value: MATCHING_TYPE_INVERSE_MATCH = 3;
   */
  INVERSE_MATCH = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.MatchingType.
 */
export const MatchingTypeSchema: GenEnum<MatchingType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 10);

/**
 * Deprecated and unused.
 *
 * @generated from enum google.privacy.dlp.v2.ContentOption
 */
export enum ContentOption {
  /**
   * Includes entire content of a file or a data stream.
   *
   * @generated from enum value: CONTENT_UNSPECIFIED = 0;
   */
  CONTENT_UNSPECIFIED = 0,

  /**
   * Text content within the data, excluding any metadata.
   *
   * @generated from enum value: CONTENT_TEXT = 1;
   */
  CONTENT_TEXT = 1,

  /**
   * Images found in the data.
   *
   * @generated from enum value: CONTENT_IMAGE = 2;
   */
  CONTENT_IMAGE = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.ContentOption.
 */
export const ContentOptionSchema: GenEnum<ContentOption> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 11);

/**
 * Type of metadata containing the finding.
 *
 * @generated from enum google.privacy.dlp.v2.MetadataType
 */
export enum MetadataType {
  /**
   * Unused
   *
   * @generated from enum value: METADATATYPE_UNSPECIFIED = 0;
   */
  METADATATYPE_UNSPECIFIED = 0,

  /**
   * General file metadata provided by Cloud Storage.
   *
   * @generated from enum value: STORAGE_METADATA = 2;
   */
  STORAGE_METADATA = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.MetadataType.
 */
export const MetadataTypeSchema: GenEnum<MetadataType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 12);

/**
 * Parts of the APIs which use certain infoTypes.
 *
 * @generated from enum google.privacy.dlp.v2.InfoTypeSupportedBy
 */
export enum InfoTypeSupportedBy {
  /**
   * Unused.
   *
   * @generated from enum value: ENUM_TYPE_UNSPECIFIED = 0;
   */
  ENUM_TYPE_UNSPECIFIED = 0,

  /**
   * Supported by the inspect operations.
   *
   * @generated from enum value: INSPECT = 1;
   */
  INSPECT = 1,

  /**
   * Supported by the risk analysis operations.
   *
   * @generated from enum value: RISK_ANALYSIS = 2;
   */
  RISK_ANALYSIS = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.InfoTypeSupportedBy.
 */
export const InfoTypeSupportedBySchema: GenEnum<InfoTypeSupportedBy> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 13);

/**
 * An enum to represent the various types of DLP jobs.
 *
 * @generated from enum google.privacy.dlp.v2.DlpJobType
 */
export enum DlpJobType {
  /**
   * Defaults to INSPECT_JOB.
   *
   * @generated from enum value: DLP_JOB_TYPE_UNSPECIFIED = 0;
   */
  DLP_JOB_TYPE_UNSPECIFIED = 0,

  /**
   * The job inspected Google Cloud for sensitive data.
   *
   * @generated from enum value: INSPECT_JOB = 1;
   */
  INSPECT_JOB = 1,

  /**
   * The job executed a Risk Analysis computation.
   *
   * @generated from enum value: RISK_ANALYSIS_JOB = 2;
   */
  RISK_ANALYSIS_JOB = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.DlpJobType.
 */
export const DlpJobTypeSchema: GenEnum<DlpJobType> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 14);

/**
 * State of a StoredInfoType version.
 *
 * @generated from enum google.privacy.dlp.v2.StoredInfoTypeState
 */
export enum StoredInfoTypeState {
  /**
   * Unused
   *
   * @generated from enum value: STORED_INFO_TYPE_STATE_UNSPECIFIED = 0;
   */
  STORED_INFO_TYPE_STATE_UNSPECIFIED = 0,

  /**
   * StoredInfoType version is being created.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * StoredInfoType version is ready for use.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * StoredInfoType creation failed. All relevant error messages are returned in
   * the `StoredInfoTypeVersion` message.
   *
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,

  /**
   * StoredInfoType is no longer valid because artifacts stored in
   * user-controlled storage were modified. To fix an invalid StoredInfoType,
   * use the `UpdateStoredInfoType` method to create a new version.
   *
   * @generated from enum value: INVALID = 4;
   */
  INVALID = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.StoredInfoTypeState.
 */
export const StoredInfoTypeStateSchema: GenEnum<StoredInfoTypeState> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 15);

/**
 * How broadly the data in the resource has been shared. New items may be added
 * over time. A higher number means more restricted.
 *
 * @generated from enum google.privacy.dlp.v2.ResourceVisibility
 */
export enum ResourceVisibility {
  /**
   * Unused.
   *
   * @generated from enum value: RESOURCE_VISIBILITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Visible to any user.
   *
   * @generated from enum value: RESOURCE_VISIBILITY_PUBLIC = 10;
   */
  PUBLIC = 10,

  /**
   * May contain public items.
   * For example, if a Cloud Storage bucket has uniform bucket level access
   * disabled, some objects inside it may be public, but none are known yet.
   *
   * @generated from enum value: RESOURCE_VISIBILITY_INCONCLUSIVE = 15;
   */
  INCONCLUSIVE = 15,

  /**
   * Visible only to specific users.
   *
   * @generated from enum value: RESOURCE_VISIBILITY_RESTRICTED = 20;
   */
  RESTRICTED = 20,
}

/**
 * Describes the enum google.privacy.dlp.v2.ResourceVisibility.
 */
export const ResourceVisibilitySchema: GenEnum<ResourceVisibility> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 16);

/**
 * How a resource is encrypted.
 *
 * @generated from enum google.privacy.dlp.v2.EncryptionStatus
 */
export enum EncryptionStatus {
  /**
   * Unused.
   *
   * @generated from enum value: ENCRYPTION_STATUS_UNSPECIFIED = 0;
   */
  ENCRYPTION_STATUS_UNSPECIFIED = 0,

  /**
   * Google manages server-side encryption keys on your behalf.
   *
   * @generated from enum value: ENCRYPTION_GOOGLE_MANAGED = 1;
   */
  ENCRYPTION_GOOGLE_MANAGED = 1,

  /**
   * Customer provides the key.
   *
   * @generated from enum value: ENCRYPTION_CUSTOMER_MANAGED = 2;
   */
  ENCRYPTION_CUSTOMER_MANAGED = 2,
}

/**
 * Describes the enum google.privacy.dlp.v2.EncryptionStatus.
 */
export const EncryptionStatusSchema: GenEnum<EncryptionStatus> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 17);

/**
 * Bucketized nullness percentage levels. A higher level means a higher
 * percentage of the column is null.
 *
 * @generated from enum google.privacy.dlp.v2.NullPercentageLevel
 */
export enum NullPercentageLevel {
  /**
   * Unused.
   *
   * @generated from enum value: NULL_PERCENTAGE_LEVEL_UNSPECIFIED = 0;
   */
  NULL_PERCENTAGE_LEVEL_UNSPECIFIED = 0,

  /**
   * Very few null entries.
   *
   * @generated from enum value: NULL_PERCENTAGE_VERY_LOW = 1;
   */
  NULL_PERCENTAGE_VERY_LOW = 1,

  /**
   * Some null entries.
   *
   * @generated from enum value: NULL_PERCENTAGE_LOW = 2;
   */
  NULL_PERCENTAGE_LOW = 2,

  /**
   * A few null entries.
   *
   * @generated from enum value: NULL_PERCENTAGE_MEDIUM = 3;
   */
  NULL_PERCENTAGE_MEDIUM = 3,

  /**
   * A lot of null entries.
   *
   * @generated from enum value: NULL_PERCENTAGE_HIGH = 4;
   */
  NULL_PERCENTAGE_HIGH = 4,
}

/**
 * Describes the enum google.privacy.dlp.v2.NullPercentageLevel.
 */
export const NullPercentageLevelSchema: GenEnum<NullPercentageLevel> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 18);

/**
 * Bucketized uniqueness score levels. A higher uniqueness score is a strong
 * signal that the column may contain a unique identifier like user id. A low
 * value indicates that the column contains few unique values like booleans or
 * other classifiers.
 *
 * @generated from enum google.privacy.dlp.v2.UniquenessScoreLevel
 */
export enum UniquenessScoreLevel {
  /**
   * Some columns do not have estimated uniqueness. Possible reasons include
   * having too few values.
   *
   * @generated from enum value: UNIQUENESS_SCORE_LEVEL_UNSPECIFIED = 0;
   */
  UNIQUENESS_SCORE_LEVEL_UNSPECIFIED = 0,

  /**
   * Low uniqueness, possibly a boolean, enum or similiarly typed column.
   *
   * @generated from enum value: UNIQUENESS_SCORE_LOW = 1;
   */
  UNIQUENESS_SCORE_LOW = 1,

  /**
   * Medium uniqueness.
   *
   * @generated from enum value: UNIQUENESS_SCORE_MEDIUM = 2;
   */
  UNIQUENESS_SCORE_MEDIUM = 2,

  /**
   * High uniqueness, possibly a column of free text or unique identifiers.
   *
   * @generated from enum value: UNIQUENESS_SCORE_HIGH = 3;
   */
  UNIQUENESS_SCORE_HIGH = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.UniquenessScoreLevel.
 */
export const UniquenessScoreLevelSchema: GenEnum<UniquenessScoreLevel> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 19);

/**
 * State of the connection.
 * New values may be added over time.
 *
 * @generated from enum google.privacy.dlp.v2.ConnectionState
 */
export enum ConnectionState {
  /**
   * Unused
   *
   * @generated from enum value: CONNECTION_STATE_UNSPECIFIED = 0;
   */
  CONNECTION_STATE_UNSPECIFIED = 0,

  /**
   * DLP automatically created this connection during an initial scan, and it is
   * awaiting full configuration by a user.
   *
   * @generated from enum value: MISSING_CREDENTIALS = 1;
   */
  MISSING_CREDENTIALS = 1,

  /**
   * A configured connection that has not encountered any errors.
   *
   * @generated from enum value: AVAILABLE = 2;
   */
  AVAILABLE = 2,

  /**
   * A configured connection that encountered errors during its last use. It
   * will not be used again until it is set to AVAILABLE.
   *
   * If the resolution requires external action, then the client must send a
   * request to set the status to AVAILABLE when the connection is ready for
   * use. If the resolution doesn't require external action, then any changes to
   * the connection properties will automatically mark it as AVAILABLE.
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}

/**
 * Describes the enum google.privacy.dlp.v2.ConnectionState.
 */
export const ConnectionStateSchema: GenEnum<ConnectionState> = /*@__PURE__*/
  enumDesc(file_google_privacy_dlp_v2_dlp, 20);

/**
 * The Cloud Data Loss Prevention (DLP) API is a service that allows clients
 * to detect the presence of Personally Identifiable Information (PII) and other
 * privacy-sensitive data in user-supplied, unstructured data streams, like text
 * blocks or images.
 * The service also includes methods for sensitive data redaction and
 * scheduling of data scans on Google Cloud Platform based data sets.
 *
 * To learn more about concepts and find how-to guides see
 * https://cloud.google.com/sensitive-data-protection/docs/.
 *
 * @generated from service google.privacy.dlp.v2.DlpService
 */
export const DlpService: GenService<{
  /**
   * Finds potentially sensitive info in content.
   * This method has limits on input size, processing time, and output size.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * For how to guides, see
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-images
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-text,
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.InspectContent
   */
  inspectContent: {
    methodKind: "unary";
    input: typeof InspectContentRequestSchema;
    output: typeof InspectContentResponseSchema;
  },
  /**
   * Redacts potentially sensitive info from an image.
   * This method has limits on input size, processing time, and output size.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/redacting-sensitive-data-images
   * to learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.RedactImage
   */
  redactImage: {
    methodKind: "unary";
    input: typeof RedactImageRequestSchema;
    output: typeof RedactImageResponseSchema;
  },
  /**
   * De-identifies potentially sensitive info from a ContentItem.
   * This method has limits on input size and output size.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/deidentify-sensitive-data
   * to learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in this request, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeidentifyContent
   */
  deidentifyContent: {
    methodKind: "unary";
    input: typeof DeidentifyContentRequestSchema;
    output: typeof DeidentifyContentResponseSchema;
  },
  /**
   * Re-identifies content that has been de-identified.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/pseudonymization#re-identification_in_free_text_code_example
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ReidentifyContent
   */
  reidentifyContent: {
    methodKind: "unary";
    input: typeof ReidentifyContentRequestSchema;
    output: typeof ReidentifyContentResponseSchema;
  },
  /**
   * Returns a list of the sensitive information types that DLP API
   * supports. See
   * https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListInfoTypes
   */
  listInfoTypes: {
    methodKind: "unary";
    input: typeof ListInfoTypesRequestSchema;
    output: typeof ListInfoTypesResponseSchema;
  },
  /**
   * Creates an InspectTemplate for reusing frequently used configuration
   * for inspecting content, images, and storage.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateInspectTemplate
   */
  createInspectTemplate: {
    methodKind: "unary";
    input: typeof CreateInspectTemplateRequestSchema;
    output: typeof InspectTemplateSchema;
  },
  /**
   * Updates the InspectTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateInspectTemplate
   */
  updateInspectTemplate: {
    methodKind: "unary";
    input: typeof UpdateInspectTemplateRequestSchema;
    output: typeof InspectTemplateSchema;
  },
  /**
   * Gets an InspectTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetInspectTemplate
   */
  getInspectTemplate: {
    methodKind: "unary";
    input: typeof GetInspectTemplateRequestSchema;
    output: typeof InspectTemplateSchema;
  },
  /**
   * Lists InspectTemplates.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListInspectTemplates
   */
  listInspectTemplates: {
    methodKind: "unary";
    input: typeof ListInspectTemplatesRequestSchema;
    output: typeof ListInspectTemplatesResponseSchema;
  },
  /**
   * Deletes an InspectTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteInspectTemplate
   */
  deleteInspectTemplate: {
    methodKind: "unary";
    input: typeof DeleteInspectTemplateRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a DeidentifyTemplate for reusing frequently used configuration
   * for de-identifying content, images, and storage.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateDeidentifyTemplate
   */
  createDeidentifyTemplate: {
    methodKind: "unary";
    input: typeof CreateDeidentifyTemplateRequestSchema;
    output: typeof DeidentifyTemplateSchema;
  },
  /**
   * Updates the DeidentifyTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateDeidentifyTemplate
   */
  updateDeidentifyTemplate: {
    methodKind: "unary";
    input: typeof UpdateDeidentifyTemplateRequestSchema;
    output: typeof DeidentifyTemplateSchema;
  },
  /**
   * Gets a DeidentifyTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetDeidentifyTemplate
   */
  getDeidentifyTemplate: {
    methodKind: "unary";
    input: typeof GetDeidentifyTemplateRequestSchema;
    output: typeof DeidentifyTemplateSchema;
  },
  /**
   * Lists DeidentifyTemplates.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListDeidentifyTemplates
   */
  listDeidentifyTemplates: {
    methodKind: "unary";
    input: typeof ListDeidentifyTemplatesRequestSchema;
    output: typeof ListDeidentifyTemplatesResponseSchema;
  },
  /**
   * Deletes a DeidentifyTemplate.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteDeidentifyTemplate
   */
  deleteDeidentifyTemplate: {
    methodKind: "unary";
    input: typeof DeleteDeidentifyTemplateRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a job trigger to run DLP actions such as scanning storage for
   * sensitive information on a set schedule.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateJobTrigger
   */
  createJobTrigger: {
    methodKind: "unary";
    input: typeof CreateJobTriggerRequestSchema;
    output: typeof JobTriggerSchema;
  },
  /**
   * Updates a job trigger.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateJobTrigger
   */
  updateJobTrigger: {
    methodKind: "unary";
    input: typeof UpdateJobTriggerRequestSchema;
    output: typeof JobTriggerSchema;
  },
  /**
   * Inspect hybrid content and store findings to a trigger. The inspection
   * will be processed asynchronously. To review the findings monitor the
   * jobs within the trigger.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.HybridInspectJobTrigger
   */
  hybridInspectJobTrigger: {
    methodKind: "unary";
    input: typeof HybridInspectJobTriggerRequestSchema;
    output: typeof HybridInspectResponseSchema;
  },
  /**
   * Gets a job trigger.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetJobTrigger
   */
  getJobTrigger: {
    methodKind: "unary";
    input: typeof GetJobTriggerRequestSchema;
    output: typeof JobTriggerSchema;
  },
  /**
   * Lists job triggers.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListJobTriggers
   */
  listJobTriggers: {
    methodKind: "unary";
    input: typeof ListJobTriggersRequestSchema;
    output: typeof ListJobTriggersResponseSchema;
  },
  /**
   * Deletes a job trigger.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-job-triggers
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteJobTrigger
   */
  deleteJobTrigger: {
    methodKind: "unary";
    input: typeof DeleteJobTriggerRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Activate a job trigger. Causes the immediate execute of a trigger
   * instead of waiting on the trigger event to occur.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ActivateJobTrigger
   */
  activateJobTrigger: {
    methodKind: "unary";
    input: typeof ActivateJobTriggerRequestSchema;
    output: typeof DlpJobSchema;
  },
  /**
   * Creates a config for discovery to scan and profile storage.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateDiscoveryConfig
   */
  createDiscoveryConfig: {
    methodKind: "unary";
    input: typeof CreateDiscoveryConfigRequestSchema;
    output: typeof DiscoveryConfigSchema;
  },
  /**
   * Updates a discovery configuration.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateDiscoveryConfig
   */
  updateDiscoveryConfig: {
    methodKind: "unary";
    input: typeof UpdateDiscoveryConfigRequestSchema;
    output: typeof DiscoveryConfigSchema;
  },
  /**
   * Gets a discovery configuration.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetDiscoveryConfig
   */
  getDiscoveryConfig: {
    methodKind: "unary";
    input: typeof GetDiscoveryConfigRequestSchema;
    output: typeof DiscoveryConfigSchema;
  },
  /**
   * Lists discovery configurations.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListDiscoveryConfigs
   */
  listDiscoveryConfigs: {
    methodKind: "unary";
    input: typeof ListDiscoveryConfigsRequestSchema;
    output: typeof ListDiscoveryConfigsResponseSchema;
  },
  /**
   * Deletes a discovery configuration.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteDiscoveryConfig
   */
  deleteDiscoveryConfig: {
    methodKind: "unary";
    input: typeof DeleteDiscoveryConfigRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a new job to inspect storage or calculate risk metrics.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis
   * to learn more.
   *
   * When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the
   * system will automatically choose what detectors to run. By default this may
   * be all types, but may change over time as detectors are updated.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateDlpJob
   */
  createDlpJob: {
    methodKind: "unary";
    input: typeof CreateDlpJobRequestSchema;
    output: typeof DlpJobSchema;
  },
  /**
   * Lists DlpJobs that match the specified filter in the request.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListDlpJobs
   */
  listDlpJobs: {
    methodKind: "unary";
    input: typeof ListDlpJobsRequestSchema;
    output: typeof ListDlpJobsResponseSchema;
  },
  /**
   * Gets the latest state of a long-running DlpJob.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetDlpJob
   */
  getDlpJob: {
    methodKind: "unary";
    input: typeof GetDlpJobRequestSchema;
    output: typeof DlpJobSchema;
  },
  /**
   * Deletes a long-running DlpJob. This method indicates that the client is
   * no longer interested in the DlpJob result. The job will be canceled if
   * possible.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteDlpJob
   */
  deleteDlpJob: {
    methodKind: "unary";
    input: typeof DeleteDlpJobRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Starts asynchronous cancellation on a long-running DlpJob. The server
   * makes a best effort to cancel the DlpJob, but success is not
   * guaranteed.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/inspecting-storage
   * and
   * https://cloud.google.com/sensitive-data-protection/docs/compute-risk-analysis
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CancelDlpJob
   */
  cancelDlpJob: {
    methodKind: "unary";
    input: typeof CancelDlpJobRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Creates a pre-built stored infoType to be used for inspection.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateStoredInfoType
   */
  createStoredInfoType: {
    methodKind: "unary";
    input: typeof CreateStoredInfoTypeRequestSchema;
    output: typeof StoredInfoTypeSchema;
  },
  /**
   * Updates the stored infoType by creating a new version. The existing version
   * will continue to be used until the new version is ready.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateStoredInfoType
   */
  updateStoredInfoType: {
    methodKind: "unary";
    input: typeof UpdateStoredInfoTypeRequestSchema;
    output: typeof StoredInfoTypeSchema;
  },
  /**
   * Gets a stored infoType.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetStoredInfoType
   */
  getStoredInfoType: {
    methodKind: "unary";
    input: typeof GetStoredInfoTypeRequestSchema;
    output: typeof StoredInfoTypeSchema;
  },
  /**
   * Lists stored infoTypes.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListStoredInfoTypes
   */
  listStoredInfoTypes: {
    methodKind: "unary";
    input: typeof ListStoredInfoTypesRequestSchema;
    output: typeof ListStoredInfoTypesResponseSchema;
  },
  /**
   * Deletes a stored infoType.
   * See
   * https://cloud.google.com/sensitive-data-protection/docs/creating-stored-infotypes
   * to learn more.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteStoredInfoType
   */
  deleteStoredInfoType: {
    methodKind: "unary";
    input: typeof DeleteStoredInfoTypeRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists project data profiles for an organization.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListProjectDataProfiles
   */
  listProjectDataProfiles: {
    methodKind: "unary";
    input: typeof ListProjectDataProfilesRequestSchema;
    output: typeof ListProjectDataProfilesResponseSchema;
  },
  /**
   * Lists table data profiles for an organization.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListTableDataProfiles
   */
  listTableDataProfiles: {
    methodKind: "unary";
    input: typeof ListTableDataProfilesRequestSchema;
    output: typeof ListTableDataProfilesResponseSchema;
  },
  /**
   * Lists column data profiles for an organization.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListColumnDataProfiles
   */
  listColumnDataProfiles: {
    methodKind: "unary";
    input: typeof ListColumnDataProfilesRequestSchema;
    output: typeof ListColumnDataProfilesResponseSchema;
  },
  /**
   * Gets a project data profile.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetProjectDataProfile
   */
  getProjectDataProfile: {
    methodKind: "unary";
    input: typeof GetProjectDataProfileRequestSchema;
    output: typeof ProjectDataProfileSchema;
  },
  /**
   * Lists file store data profiles for an organization.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListFileStoreDataProfiles
   */
  listFileStoreDataProfiles: {
    methodKind: "unary";
    input: typeof ListFileStoreDataProfilesRequestSchema;
    output: typeof ListFileStoreDataProfilesResponseSchema;
  },
  /**
   * Gets a file store data profile.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetFileStoreDataProfile
   */
  getFileStoreDataProfile: {
    methodKind: "unary";
    input: typeof GetFileStoreDataProfileRequestSchema;
    output: typeof FileStoreDataProfileSchema;
  },
  /**
   * Delete a FileStoreDataProfile. Will not prevent the profile from being
   * regenerated if the resource is still included in a discovery configuration.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteFileStoreDataProfile
   */
  deleteFileStoreDataProfile: {
    methodKind: "unary";
    input: typeof DeleteFileStoreDataProfileRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets a table data profile.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetTableDataProfile
   */
  getTableDataProfile: {
    methodKind: "unary";
    input: typeof GetTableDataProfileRequestSchema;
    output: typeof TableDataProfileSchema;
  },
  /**
   * Gets a column data profile.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetColumnDataProfile
   */
  getColumnDataProfile: {
    methodKind: "unary";
    input: typeof GetColumnDataProfileRequestSchema;
    output: typeof ColumnDataProfileSchema;
  },
  /**
   * Delete a TableDataProfile. Will not prevent the profile from being
   * regenerated if the table is still included in a discovery configuration.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteTableDataProfile
   */
  deleteTableDataProfile: {
    methodKind: "unary";
    input: typeof DeleteTableDataProfileRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Inspect hybrid content and store findings to a job.
   * To review the findings, inspect the job. Inspection will occur
   * asynchronously.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.HybridInspectDlpJob
   */
  hybridInspectDlpJob: {
    methodKind: "unary";
    input: typeof HybridInspectDlpJobRequestSchema;
    output: typeof HybridInspectResponseSchema;
  },
  /**
   * Finish a running hybrid DlpJob. Triggers the finalization steps and running
   * of any enabled actions that have not yet run.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.FinishDlpJob
   */
  finishDlpJob: {
    methodKind: "unary";
    input: typeof FinishDlpJobRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Create a Connection to an external data source.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.CreateConnection
   */
  createConnection: {
    methodKind: "unary";
    input: typeof CreateConnectionRequestSchema;
    output: typeof ConnectionSchema;
  },
  /**
   * Get a Connection by name.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.GetConnection
   */
  getConnection: {
    methodKind: "unary";
    input: typeof GetConnectionRequestSchema;
    output: typeof ConnectionSchema;
  },
  /**
   * Lists Connections in a parent. Use SearchConnections to see all connections
   * within an organization.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.ListConnections
   */
  listConnections: {
    methodKind: "unary";
    input: typeof ListConnectionsRequestSchema;
    output: typeof ListConnectionsResponseSchema;
  },
  /**
   * Searches for Connections in a parent.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.SearchConnections
   */
  searchConnections: {
    methodKind: "unary";
    input: typeof SearchConnectionsRequestSchema;
    output: typeof SearchConnectionsResponseSchema;
  },
  /**
   * Delete a Connection.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.DeleteConnection
   */
  deleteConnection: {
    methodKind: "unary";
    input: typeof DeleteConnectionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Update a Connection.
   *
   * @generated from rpc google.privacy.dlp.v2.DlpService.UpdateConnection
   */
  updateConnection: {
    methodKind: "unary";
    input: typeof UpdateConnectionRequestSchema;
    output: typeof ConnectionSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_privacy_dlp_v2_dlp, 0);

