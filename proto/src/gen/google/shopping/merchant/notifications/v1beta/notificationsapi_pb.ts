// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/shopping/merchant/notifications/v1beta/notificationsapi.proto (package google.shopping.merchant.notifications.v1beta, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask } from "@bufbuild/protobuf/wkt";
import type { ReportingContext_ReportingContextEnum } from "../../../type/types_pb";
import { file_google_shopping_type_types } from "../../../type/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/shopping/merchant/notifications/v1beta/notificationsapi.proto.
 */
export const file_google_shopping_merchant_notifications_v1beta_notificationsapi: GenFile = /*@__PURE__*/
  fileDesc("CkRnb29nbGUvc2hvcHBpbmcvbWVyY2hhbnQvbm90aWZpY2F0aW9ucy92MWJldGEvbm90aWZpY2F0aW9uc2FwaS5wcm90bxItZ29vZ2xlLnNob3BwaW5nLm1lcmNoYW50Lm5vdGlmaWNhdGlvbnMudjFiZXRhIm8KIkdldE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblJlcXVlc3QSSQoEbmFtZRgBIAEoCUI74EEC+kE1CjNtZXJjaGFudGFwaS5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25TdWJzY3JpcHRpb24i5QEKJUNyZWF0ZU5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblJlcXVlc3QSSwoGcGFyZW50GAEgASgJQjvgQQL6QTUSM21lcmNoYW50YXBpLmdvb2dsZWFwaXMuY29tL05vdGlmaWNhdGlvblN1YnNjcmlwdGlvbhJvChlub3RpZmljYXRpb25fc3Vic2NyaXB0aW9uGAIgASgLMkcuZ29vZ2xlLnNob3BwaW5nLm1lcmNoYW50Lm5vdGlmaWNhdGlvbnMudjFiZXRhLk5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbkID4EECIskBCiVVcGRhdGVOb3RpZmljYXRpb25TdWJzY3JpcHRpb25SZXF1ZXN0Em8KGW5vdGlmaWNhdGlvbl9zdWJzY3JpcHRpb24YASABKAsyRy5nb29nbGUuc2hvcHBpbmcubWVyY2hhbnQubm90aWZpY2F0aW9ucy52MWJldGEuTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uQgPgQQISLwoLdXBkYXRlX21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrInIKJURlbGV0ZU5vdGlmaWNhdGlvblN1YnNjcmlwdGlvblJlcXVlc3QSSQoEbmFtZRgBIAEoCUI74EEC+kE1CjNtZXJjaGFudGFwaS5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25TdWJzY3JpcHRpb24imgEKJExpc3ROb3RpZmljYXRpb25TdWJzY3JpcHRpb25zUmVxdWVzdBJLCgZwYXJlbnQYASABKAlCO+BBAvpBNRIzbWVyY2hhbnRhcGkuZ29vZ2xlYXBpcy5jb20vTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJIq0BCiVMaXN0Tm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uc1Jlc3BvbnNlEmsKGm5vdGlmaWNhdGlvbl9zdWJzY3JpcHRpb25zGAEgAygLMkcuZ29vZ2xlLnNob3BwaW5nLm1lcmNoYW50Lm5vdGlmaWNhdGlvbnMudjFiZXRhLk5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAki6gMKGE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbhIeChRhbGxfbWFuYWdlZF9hY2NvdW50cxgDIAEoCEgAEhgKDnRhcmdldF9hY2NvdW50GAQgASgJSAASEQoEbmFtZRgBIAEoCUID4EEDEncKEHJlZ2lzdGVyZWRfZXZlbnQYAiABKA4yXS5nb29nbGUuc2hvcHBpbmcubWVyY2hhbnQubm90aWZpY2F0aW9ucy52MWJldGEuTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uLk5vdGlmaWNhdGlvbkV2ZW50VHlwZRIVCg1jYWxsX2JhY2tfdXJpGAUgASgJIlsKFU5vdGlmaWNhdGlvbkV2ZW50VHlwZRInCiNOT1RJRklDQVRJT05fRVZFTlRfVFlQRV9VTlNQRUNJRklFRBAAEhkKFVBST0RVQ1RfU1RBVFVTX0NIQU5HRRABOoIB6kF/CjNtZXJjaGFudGFwaS5nb29nbGVhcGlzLmNvbS9Ob3RpZmljYXRpb25TdWJzY3JpcHRpb24SSGFjY291bnRzL3thY2NvdW50fS9ub3RpZmljYXRpb25zdWJzY3JpcHRpb25zL3tub3RpZmljYXRpb25fc3Vic2NyaXB0aW9ufUIPCg1pbnRlcmVzdGVkX2luIvgBCg1Qcm9kdWN0Q2hhbmdlEhYKCW9sZF92YWx1ZRgBIAEoCUgAiAEBEhYKCW5ld192YWx1ZRgCIAEoCUgBiAEBEhgKC3JlZ2lvbl9jb2RlGAMgASgJSAKIAQESWwoRcmVwb3J0aW5nX2NvbnRleHQYBCABKA4yOy5nb29nbGUuc2hvcHBpbmcudHlwZS5SZXBvcnRpbmdDb250ZXh0LlJlcG9ydGluZ0NvbnRleHRFbnVtSAOIAQFCDAoKX29sZF92YWx1ZUIMCgpfbmV3X3ZhbHVlQg4KDF9yZWdpb25fY29kZUIUChJfcmVwb3J0aW5nX2NvbnRleHQi1gMKGlByb2R1Y3RTdGF0dXNDaGFuZ2VNZXNzYWdlEhQKB2FjY291bnQYASABKAlIAIgBARIdChBtYW5hZ2luZ19hY2NvdW50GAIgASgJSAGIAQESUwoNcmVzb3VyY2VfdHlwZRgDIAEoDjI3Lmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5SZXNvdXJjZUgCiAEBElAKCWF0dHJpYnV0ZRgEIAEoDjI4Lmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5BdHRyaWJ1dGVIA4gBARJNCgdjaGFuZ2VzGAUgAygLMjwuZ29vZ2xlLnNob3BwaW5nLm1lcmNoYW50Lm5vdGlmaWNhdGlvbnMudjFiZXRhLlByb2R1Y3RDaGFuZ2USGAoLcmVzb3VyY2VfaWQYBiABKAlIBIgBARIVCghyZXNvdXJjZRgHIAEoCUgFiAEBQgoKCF9hY2NvdW50QhMKEV9tYW5hZ2luZ19hY2NvdW50QhAKDl9yZXNvdXJjZV90eXBlQgwKCl9hdHRyaWJ1dGVCDgoMX3Jlc291cmNlX2lkQgsKCV9yZXNvdXJjZSoxCghSZXNvdXJjZRIYChRSRVNPVVJDRV9VTlNQRUNJRklFRBAAEgsKB1BST0RVQ1QQASoyCglBdHRyaWJ1dGUSGQoVQVRUUklCVVRFX1VOU1BFQ0lGSUVEEAASCgoGU1RBVFVTEAEytQwKF05vdGlmaWNhdGlvbnNBcGlTZXJ2aWNlEo0CChtHZXROb3RpZmljYXRpb25TdWJzY3JpcHRpb24SUS5nb29nbGUuc2hvcHBpbmcubWVyY2hhbnQubm90aWZpY2F0aW9ucy52MWJldGEuR2V0Tm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uUmVxdWVzdBpHLmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5Ob3RpZmljYXRpb25TdWJzY3JpcHRpb24iUtpBBG5hbWWC0+STAkUSQy9ub3RpZmljYXRpb25zL3YxYmV0YS97bmFtZT1hY2NvdW50cy8qL25vdGlmaWNhdGlvbnN1YnNjcmlwdGlvbnMvKn0SywIKHkNyZWF0ZU5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbhJULmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5DcmVhdGVOb3RpZmljYXRpb25TdWJzY3JpcHRpb25SZXF1ZXN0GkcuZ29vZ2xlLnNob3BwaW5nLm1lcmNoYW50Lm5vdGlmaWNhdGlvbnMudjFiZXRhLk5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbiKJAdpBIHBhcmVudCxub3RpZmljYXRpb25fc3Vic2NyaXB0aW9ugtPkkwJgOhlub3RpZmljYXRpb25fc3Vic2NyaXB0aW9uIkMvbm90aWZpY2F0aW9ucy92MWJldGEve3BhcmVudD1hY2NvdW50cy8qfS9ub3RpZmljYXRpb25zdWJzY3JpcHRpb25zEuoCCh5VcGRhdGVOb3RpZmljYXRpb25TdWJzY3JpcHRpb24SVC5nb29nbGUuc2hvcHBpbmcubWVyY2hhbnQubm90aWZpY2F0aW9ucy52MWJldGEuVXBkYXRlTm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uUmVxdWVzdBpHLmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5Ob3RpZmljYXRpb25TdWJzY3JpcHRpb24iqAHaQSVub3RpZmljYXRpb25fc3Vic2NyaXB0aW9uLHVwZGF0ZV9tYXNrgtPkkwJ6Ohlub3RpZmljYXRpb25fc3Vic2NyaXB0aW9uMl0vbm90aWZpY2F0aW9ucy92MWJldGEve25vdGlmaWNhdGlvbl9zdWJzY3JpcHRpb24ubmFtZT1hY2NvdW50cy8qL25vdGlmaWNhdGlvbnN1YnNjcmlwdGlvbnMvKn0S4gEKHkRlbGV0ZU5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbhJULmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5EZWxldGVOb3RpZmljYXRpb25TdWJzY3JpcHRpb25SZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IlLaQQRuYW1lgtPkkwJFKkMvbm90aWZpY2F0aW9ucy92MWJldGEve25hbWU9YWNjb3VudHMvKi9ub3RpZmljYXRpb25zdWJzY3JpcHRpb25zLyp9EqACCh1MaXN0Tm90aWZpY2F0aW9uU3Vic2NyaXB0aW9ucxJTLmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YS5MaXN0Tm90aWZpY2F0aW9uU3Vic2NyaXB0aW9uc1JlcXVlc3QaVC5nb29nbGUuc2hvcHBpbmcubWVyY2hhbnQubm90aWZpY2F0aW9ucy52MWJldGEuTGlzdE5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbnNSZXNwb25zZSJU2kEGcGFyZW50gtPkkwJFEkMvbm90aWZpY2F0aW9ucy92MWJldGEve3BhcmVudD1hY2NvdW50cy8qfS9ub3RpZmljYXRpb25zdWJzY3JpcHRpb25zGkfKQRptZXJjaGFudGFwaS5nb29nbGVhcGlzLmNvbdJBJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY29udGVudELmAQoxY29tLmdvb2dsZS5zaG9wcGluZy5tZXJjaGFudC5ub3RpZmljYXRpb25zLnYxYmV0YUIVTm90aWZpY2F0aW9uc0FwaVByb3RvUAFaXWNsb3VkLmdvb2dsZS5jb20vZ28vc2hvcHBpbmcvbWVyY2hhbnQvbm90aWZpY2F0aW9ucy9hcGl2MWJldGEvbm90aWZpY2F0aW9uc3BiO25vdGlmaWNhdGlvbnNwYupBOAoibWVyY2hhbnRhcGkuZ29vZ2xlYXBpcy5jb20vQWNjb3VudBISYWNjb3VudHMve2FjY291bnR9YgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_shopping_type_types]);

/**
 * Request message for the GetNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.GetNotificationSubscriptionRequest
 */
export type GetNotificationSubscriptionRequest = Message<"google.shopping.merchant.notifications.v1beta.GetNotificationSubscriptionRequest"> & {
  /**
   * Required. The `name` of the notification subscription.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.GetNotificationSubscriptionRequest.
 * Use `create(GetNotificationSubscriptionRequestSchema)` to create a new message.
 */
export const GetNotificationSubscriptionRequestSchema: GenMessage<GetNotificationSubscriptionRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 0);

/**
 * Request message for the CreateNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.CreateNotificationSubscriptionRequest
 */
export type CreateNotificationSubscriptionRequest = Message<"google.shopping.merchant.notifications.v1beta.CreateNotificationSubscriptionRequest"> & {
  /**
   * Required. The merchant account that owns the new notification subscription.
   * Format: `accounts/{account}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The notification subscription to create.
   *
   * @generated from field: google.shopping.merchant.notifications.v1beta.NotificationSubscription notification_subscription = 2;
   */
  notificationSubscription?: NotificationSubscription;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.CreateNotificationSubscriptionRequest.
 * Use `create(CreateNotificationSubscriptionRequestSchema)` to create a new message.
 */
export const CreateNotificationSubscriptionRequestSchema: GenMessage<CreateNotificationSubscriptionRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 1);

/**
 * Request message for the UpdateNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.UpdateNotificationSubscriptionRequest
 */
export type UpdateNotificationSubscriptionRequest = Message<"google.shopping.merchant.notifications.v1beta.UpdateNotificationSubscriptionRequest"> & {
  /**
   * Required. The new version of the notification subscription that should be
   * updated.
   *
   * @generated from field: google.shopping.merchant.notifications.v1beta.NotificationSubscription notification_subscription = 1;
   */
  notificationSubscription?: NotificationSubscription;

  /**
   * List of fields being updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.UpdateNotificationSubscriptionRequest.
 * Use `create(UpdateNotificationSubscriptionRequestSchema)` to create a new message.
 */
export const UpdateNotificationSubscriptionRequestSchema: GenMessage<UpdateNotificationSubscriptionRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 2);

/**
 * Request message for the DeleteNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.DeleteNotificationSubscriptionRequest
 */
export type DeleteNotificationSubscriptionRequest = Message<"google.shopping.merchant.notifications.v1beta.DeleteNotificationSubscriptionRequest"> & {
  /**
   * Required. The name of the notification subscription to be deleted.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.DeleteNotificationSubscriptionRequest.
 * Use `create(DeleteNotificationSubscriptionRequestSchema)` to create a new message.
 */
export const DeleteNotificationSubscriptionRequestSchema: GenMessage<DeleteNotificationSubscriptionRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 3);

/**
 * Request message for the ListNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsRequest
 */
export type ListNotificationSubscriptionsRequest = Message<"google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsRequest"> & {
  /**
   * Required. The merchant account who owns the notification subscriptions.
   * Format: `accounts/{account}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of notification subscriptions to return in a page.
   * The default value for `page_size` is 100. The
   * maximum value is `200`. Values above `200` will be coerced to `200`.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Token (if provided) to retrieve the subsequent page. All other parameters
   * must match the original call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsRequest.
 * Use `create(ListNotificationSubscriptionsRequestSchema)` to create a new message.
 */
export const ListNotificationSubscriptionsRequestSchema: GenMessage<ListNotificationSubscriptionsRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 4);

/**
 * Response message for the ListNotificationSubscription method.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsResponse
 */
export type ListNotificationSubscriptionsResponse = Message<"google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsResponse"> & {
  /**
   * The list of notification subscriptions requested by the merchant.
   *
   * @generated from field: repeated google.shopping.merchant.notifications.v1beta.NotificationSubscription notification_subscriptions = 1;
   */
  notificationSubscriptions: NotificationSubscription[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.ListNotificationSubscriptionsResponse.
 * Use `create(ListNotificationSubscriptionsResponseSchema)` to create a new message.
 */
export const ListNotificationSubscriptionsResponseSchema: GenMessage<ListNotificationSubscriptionsResponse> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 5);

/**
 * Represents a notification subscription owned by a Merchant account.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.NotificationSubscription
 */
export type NotificationSubscription = Message<"google.shopping.merchant.notifications.v1beta.NotificationSubscription"> & {
  /**
   * @generated from oneof google.shopping.merchant.notifications.v1beta.NotificationSubscription.interested_in
   */
  interestedIn: {
    /**
     * If this value is true, the requesting account is notified of the
     * specified event for all managed accounts (can be subaccounts or other
     * linked accounts) including newly added accounts on a daily basis.
     *
     * @generated from field: bool all_managed_accounts = 3;
     */
    value: boolean;
    case: "allManagedAccounts";
  } | {
    /**
     * The `name` of the account you want to receive notifications for.
     * Format: `accounts/{account}`
     *
     * @generated from field: string target_account = 4;
     */
    value: string;
    case: "targetAccount";
  } | { case: undefined; value?: undefined };

  /**
   * Output only. The `name` of the notification configuration. Generated by the
   * Content API upon creation of a new `NotificationSubscription`. The
   * `account` represents the merchant ID of the merchant that owns the
   * configuration. Format:
   * `accounts/{account}/notificationsubscriptions/{notification_subscription}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The event that the merchant wants to be notified about.
   *
   * @generated from field: google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType registered_event = 2;
   */
  registeredEvent: NotificationSubscription_NotificationEventType;

  /**
   * URL to be used to push the notification to the merchant.
   *
   * @generated from field: string call_back_uri = 5;
   */
  callBackUri: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.NotificationSubscription.
 * Use `create(NotificationSubscriptionSchema)` to create a new message.
 */
export const NotificationSubscriptionSchema: GenMessage<NotificationSubscription> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 6);

/**
 * Represents the event type that the merchant is interested in receiving
 * notifications for.
 *
 * @generated from enum google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType
 */
export enum NotificationSubscription_NotificationEventType {
  /**
   * Notifications event type is unspecified.
   *
   * @generated from enum value: NOTIFICATION_EVENT_TYPE_UNSPECIFIED = 0;
   */
  NOTIFICATION_EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * Notification of product status changes, for example when product becomes
   * disapproved.
   *
   * @generated from enum value: PRODUCT_STATUS_CHANGE = 1;
   */
  PRODUCT_STATUS_CHANGE = 1,
}

/**
 * Describes the enum google.shopping.merchant.notifications.v1beta.NotificationSubscription.NotificationEventType.
 */
export const NotificationSubscription_NotificationEventTypeSchema: GenEnum<NotificationSubscription_NotificationEventType> = /*@__PURE__*/
  enumDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 6, 0);

/**
 * The change that happened to the product including old value, new value,
 * country code as the region code and reporting context.
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.ProductChange
 */
export type ProductChange = Message<"google.shopping.merchant.notifications.v1beta.ProductChange"> & {
  /**
   * The old value of the changed resource or attribute.
   *
   * @generated from field: optional string old_value = 1;
   */
  oldValue?: string;

  /**
   * The new value of the changed resource or attribute.
   *
   * @generated from field: optional string new_value = 2;
   */
  newValue?: string;

  /**
   * Countries that have the change (if applicable)
   *
   * @generated from field: optional string region_code = 3;
   */
  regionCode?: string;

  /**
   * Reporting contexts that have the change (if applicable)
   *
   * @generated from field: optional google.shopping.type.ReportingContext.ReportingContextEnum reporting_context = 4;
   */
  reportingContext?: ReportingContext_ReportingContextEnum;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.ProductChange.
 * Use `create(ProductChangeSchema)` to create a new message.
 */
export const ProductChangeSchema: GenMessage<ProductChange> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 7);

/**
 * The message that the merchant will receive to notify about product status
 * change event
 *
 * @generated from message google.shopping.merchant.notifications.v1beta.ProductStatusChangeMessage
 */
export type ProductStatusChangeMessage = Message<"google.shopping.merchant.notifications.v1beta.ProductStatusChangeMessage"> & {
  /**
   * The target account that owns the entity that changed.
   * Format : `accounts/{merchant_id}`
   *
   * @generated from field: optional string account = 1;
   */
  account?: string;

  /**
   * The account that manages the merchant's account. can be the same as
   * merchant id if it is standalone account. Format :
   * `accounts/{service_provider_id}`
   *
   * @generated from field: optional string managing_account = 2;
   */
  managingAccount?: string;

  /**
   * The resource that changed, in this case it will always be `Product`.
   *
   * @generated from field: optional google.shopping.merchant.notifications.v1beta.Resource resource_type = 3;
   */
  resourceType?: Resource;

  /**
   * The attribute in the resource that changed, in this case it will be always
   * `Status`.
   *
   * @generated from field: optional google.shopping.merchant.notifications.v1beta.Attribute attribute = 4;
   */
  attribute?: Attribute;

  /**
   * A message to describe the change that happened to the product
   *
   * @generated from field: repeated google.shopping.merchant.notifications.v1beta.ProductChange changes = 5;
   */
  changes: ProductChange[];

  /**
   * The product id.
   *
   * @generated from field: optional string resource_id = 6;
   */
  resourceId?: string;

  /**
   * The product name.
   * Format: `{product.name=accounts/{account}/products/{product}}`
   *
   * @generated from field: optional string resource = 7;
   */
  resource?: string;
};

/**
 * Describes the message google.shopping.merchant.notifications.v1beta.ProductStatusChangeMessage.
 * Use `create(ProductStatusChangeMessageSchema)` to create a new message.
 */
export const ProductStatusChangeMessageSchema: GenMessage<ProductStatusChangeMessage> = /*@__PURE__*/
  messageDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 8);

/**
 * Enum to specify the resource that is being changed to notify the merchant
 * about.
 *
 * @generated from enum google.shopping.merchant.notifications.v1beta.Resource
 */
export enum Resource {
  /**
   * Unspecified resource
   *
   * @generated from enum value: RESOURCE_UNSPECIFIED = 0;
   */
  RESOURCE_UNSPECIFIED = 0,

  /**
   * Resource type : product
   *
   * @generated from enum value: PRODUCT = 1;
   */
  PRODUCT = 1,
}

/**
 * Describes the enum google.shopping.merchant.notifications.v1beta.Resource.
 */
export const ResourceSchema: GenEnum<Resource> = /*@__PURE__*/
  enumDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 0);

/**
 * Enum to specify the attribute in the resource that is being changed to
 * notify the merchant about.
 *
 * @generated from enum google.shopping.merchant.notifications.v1beta.Attribute
 */
export enum Attribute {
  /**
   * Unspecified attribute
   *
   * @generated from enum value: ATTRIBUTE_UNSPECIFIED = 0;
   */
  ATTRIBUTE_UNSPECIFIED = 0,

  /**
   * Status of the changed entity
   *
   * @generated from enum value: STATUS = 1;
   */
  STATUS = 1,
}

/**
 * Describes the enum google.shopping.merchant.notifications.v1beta.Attribute.
 */
export const AttributeSchema: GenEnum<Attribute> = /*@__PURE__*/
  enumDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 1);

/**
 * Service to manage notification subscriptions for merchants
 *
 * @generated from service google.shopping.merchant.notifications.v1beta.NotificationsApiService
 */
export const NotificationsApiService: GenService<{
  /**
   * Gets notification subscriptions for an account.
   *
   * @generated from rpc google.shopping.merchant.notifications.v1beta.NotificationsApiService.GetNotificationSubscription
   */
  getNotificationSubscription: {
    methodKind: "unary";
    input: typeof GetNotificationSubscriptionRequestSchema;
    output: typeof NotificationSubscriptionSchema;
  },
  /**
   * Creates a notification subscription for a merchant. We will allow the
   * following types of notification subscriptions to exist together (per
   * merchant as a subscriber per event type):
   * 1. Subscription for all managed accounts + subscription for self
   * 2. Multiple "partial" subscriptions for managed accounts + subscription
   * for self
   *
   * we will not allow (per merchant as a subscriber per event type):
   * 1. multiple self subscriptions.
   * 2. multiple "all managed accounts" subscriptions.
   * 3. all and partial subscriptions at the same time.
   * 4. multiple partial subscriptions for the same target account
   *
   * @generated from rpc google.shopping.merchant.notifications.v1beta.NotificationsApiService.CreateNotificationSubscription
   */
  createNotificationSubscription: {
    methodKind: "unary";
    input: typeof CreateNotificationSubscriptionRequestSchema;
    output: typeof NotificationSubscriptionSchema;
  },
  /**
   * Updates an existing notification subscription for a merchant.
   *
   * @generated from rpc google.shopping.merchant.notifications.v1beta.NotificationsApiService.UpdateNotificationSubscription
   */
  updateNotificationSubscription: {
    methodKind: "unary";
    input: typeof UpdateNotificationSubscriptionRequestSchema;
    output: typeof NotificationSubscriptionSchema;
  },
  /**
   * Deletes a notification subscription for a merchant.
   *
   * @generated from rpc google.shopping.merchant.notifications.v1beta.NotificationsApiService.DeleteNotificationSubscription
   */
  deleteNotificationSubscription: {
    methodKind: "unary";
    input: typeof DeleteNotificationSubscriptionRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets all the notification subscriptions for a merchant.
   *
   * @generated from rpc google.shopping.merchant.notifications.v1beta.NotificationsApiService.ListNotificationSubscriptions
   */
  listNotificationSubscriptions: {
    methodKind: "unary";
    input: typeof ListNotificationSubscriptionsRequestSchema;
    output: typeof ListNotificationSubscriptionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_shopping_merchant_notifications_v1beta_notificationsapi, 0);

