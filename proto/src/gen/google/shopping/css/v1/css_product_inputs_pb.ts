// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/shopping/css/v1/css_product_inputs.proto (package google.shopping.css.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Attributes } from "./css_product_common_pb";
import { file_google_shopping_css_v1_css_product_common } from "./css_product_common_pb";
import type { CustomAttribute } from "../../type/types_pb";
import { file_google_shopping_type_types } from "../../type/types_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/shopping/css/v1/css_product_inputs.proto.
 */
export const file_google_shopping_css_v1_css_product_inputs: GenFile = /*@__PURE__*/
  fileDesc("Ci9nb29nbGUvc2hvcHBpbmcvY3NzL3YxL2Nzc19wcm9kdWN0X2lucHV0cy5wcm90bxIWZ29vZ2xlLnNob3BwaW5nLmNzcy52MSKeAwoPQ3NzUHJvZHVjdElucHV0EgwKBG5hbWUYASABKAkSFwoKZmluYWxfbmFtZRgCIAEoCUID4EEDEhwKD3Jhd19wcm92aWRlZF9pZBgDIAEoCUID4EECEh0KEGNvbnRlbnRfbGFuZ3VhZ2UYBCABKAlCA+BBAhIXCgpmZWVkX2xhYmVsGAUgASgJQgPgQQISMgoOZnJlc2huZXNzX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKCmF0dHJpYnV0ZXMYByABKAsyIi5nb29nbGUuc2hvcHBpbmcuY3NzLnYxLkF0dHJpYnV0ZXMSQAoRY3VzdG9tX2F0dHJpYnV0ZXMYCCADKAsyJS5nb29nbGUuc2hvcHBpbmcudHlwZS5DdXN0b21BdHRyaWJ1dGU6YOpBXQoiY3NzLmdvb2dsZWFwaXMuY29tL0Nzc1Byb2R1Y3RJbnB1dBI3YWNjb3VudHMve2FjY291bnR9L2Nzc1Byb2R1Y3RJbnB1dHMve2Nzc19wcm9kdWN0X2lucHV0fSK5AQocSW5zZXJ0Q3NzUHJvZHVjdElucHV0UmVxdWVzdBI6CgZwYXJlbnQYASABKAlCKuBBAvpBJBIiY3NzLmdvb2dsZWFwaXMuY29tL0Nzc1Byb2R1Y3RJbnB1dBJHChFjc3NfcHJvZHVjdF9pbnB1dBgCIAEoCzInLmdvb2dsZS5zaG9wcGluZy5jc3MudjEuQ3NzUHJvZHVjdElucHV0QgPgQQISFAoHZmVlZF9pZBgDIAEoA0ID4EECIpQBChxEZWxldGVDc3NQcm9kdWN0SW5wdXRSZXF1ZXN0EjgKBG5hbWUYASABKAlCKuBBAvpBJAoiY3NzLmdvb2dsZWFwaXMuY29tL0Nzc1Byb2R1Y3RJbnB1dBIhChRzdXBwbGVtZW50YWxfZmVlZF9pZBgCIAEoA0gAiAEBQhcKFV9zdXBwbGVtZW50YWxfZmVlZF9pZDLAAwoXQ3NzUHJvZHVjdElucHV0c1NlcnZpY2USwgEKFUluc2VydENzc1Byb2R1Y3RJbnB1dBI0Lmdvb2dsZS5zaG9wcGluZy5jc3MudjEuSW5zZXJ0Q3NzUHJvZHVjdElucHV0UmVxdWVzdBonLmdvb2dsZS5zaG9wcGluZy5jc3MudjEuQ3NzUHJvZHVjdElucHV0IkqC0+STAkQ6EWNzc19wcm9kdWN0X2lucHV0Ii8vdjEve3BhcmVudD1hY2NvdW50cy8qfS9jc3NQcm9kdWN0SW5wdXRzOmluc2VydBKeAQoVRGVsZXRlQ3NzUHJvZHVjdElucHV0EjQuZ29vZ2xlLnNob3BwaW5nLmNzcy52MS5EZWxldGVDc3NQcm9kdWN0SW5wdXRSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IjfaQQRuYW1lgtPkkwIqKigvdjEve25hbWU9YWNjb3VudHMvKi9jc3NQcm9kdWN0SW5wdXRzLyp9Gj/KQRJjc3MuZ29vZ2xlYXBpcy5jb23SQSdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NvbnRlbnRCtwEKGmNvbS5nb29nbGUuc2hvcHBpbmcuY3NzLnYxQhVDc3NQcm9kdWN0SW5wdXRzUHJvdG9QAVoyY2xvdWQuZ29vZ2xlLmNvbS9nby9zaG9wcGluZy9jc3MvYXBpdjEvY3NzcGI7Y3NzcGKqAhZHb29nbGUuU2hvcHBpbmcuQ3NzLlYxygIWR29vZ2xlXFNob3BwaW5nXENzc1xWMeoCGUdvb2dsZTo6U2hvcHBpbmc6OkNzczo6VjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_empty, file_google_protobuf_timestamp, file_google_shopping_css_v1_css_product_common, file_google_shopping_type_types]);

/**
 * This resource represents input data you submit for a CSS Product, not
 * the processed CSS Product that you see in CSS Center, in Shopping Ads, or
 * across Google surfaces.
 *
 * @generated from message google.shopping.css.v1.CssProductInput
 */
export type CssProductInput = Message<"google.shopping.css.v1.CssProductInput"> & {
  /**
   * The name of the CSS Product input.
   * Format:
   * `accounts/{account}/cssProductInputs/{css_product_input}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The name of the processed CSS Product.
   * Format:
   * `accounts/{account}/cssProducts/{css_product}`
   * "
   *
   * @generated from field: string final_name = 2;
   */
  finalName: string;

  /**
   * Required. Your unique identifier for the CSS Product. This is the same for
   * the CSS Product input and processed CSS Product. We only allow ids with
   * alphanumerics, underscores and dashes. See the [products feed
   * specification](https://support.google.com/merchants/answer/188494#id) for
   * details.
   *
   * @generated from field: string raw_provided_id = 3;
   */
  rawProvidedId: string;

  /**
   * Required. The two-letter [ISO
   * 639-1](http://en.wikipedia.org/wiki/ISO_639-1) language code for the CSS
   * Product.
   *
   * @generated from field: string content_language = 4;
   */
  contentLanguage: string;

  /**
   * Required. The [feed
   * label](https://developers.google.com/shopping-content/guides/products/feed-labels)
   * for the CSS Product.
   * Feed Label is synonymous to "target country" and hence should always be a
   * valid region code. For example: 'DE' for Germany, 'FR' for France.
   *
   * @generated from field: string feed_label = 5;
   */
  feedLabel: string;

  /**
   * Represents the existing version (freshness) of the CSS Product, which
   * can be used to preserve the right order when multiple updates are done at
   * the same time.
   *
   * This field must not be set to the future time.
   *
   * If set, the update is prevented if a newer version of the item already
   * exists in our system (that is the last update time of the existing
   * CSS products is later than the freshness time set in the update). If
   * the update happens, the last update time is then set to this freshness
   * time.
   *
   * If not set, the update will not be prevented and the last update time will
   * default to when this request was received by the CSS API.
   *
   * If the operation is prevented, the aborted exception will be
   * thrown.
   *
   * @generated from field: google.protobuf.Timestamp freshness_time = 6;
   */
  freshnessTime?: Timestamp;

  /**
   * A list of CSS Product attributes.
   *
   * @generated from field: google.shopping.css.v1.Attributes attributes = 7;
   */
  attributes?: Attributes;

  /**
   * A list of custom (CSS-provided) attributes. It can also be used for
   * submitting any attribute of the feed specification in its generic
   * form (for example:
   * `{ "name": "size type", "value": "regular" }`).
   * This is useful for submitting attributes not explicitly exposed by the
   * API, such as additional attributes used for Buy on Google.
   *
   * @generated from field: repeated google.shopping.type.CustomAttribute custom_attributes = 8;
   */
  customAttributes: CustomAttribute[];
};

/**
 * Describes the message google.shopping.css.v1.CssProductInput.
 * Use `create(CssProductInputSchema)` to create a new message.
 */
export const CssProductInputSchema: GenMessage<CssProductInput> = /*@__PURE__*/
  messageDesc(file_google_shopping_css_v1_css_product_inputs, 0);

/**
 * Request message for the InsertCssProductInput method.
 *
 * @generated from message google.shopping.css.v1.InsertCssProductInputRequest
 */
export type InsertCssProductInputRequest = Message<"google.shopping.css.v1.InsertCssProductInputRequest"> & {
  /**
   * Required. The account where this CSS Product will be inserted.
   * Format: accounts/{account}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The CSS Product Input to insert.
   *
   * @generated from field: google.shopping.css.v1.CssProductInput css_product_input = 2;
   */
  cssProductInput?: CssProductInput;

  /**
   * Required. The primary or supplemental feed id. If CSS Product already
   * exists and feed id provided is different, then the CSS Product will be
   * moved to a new feed. Note: For now, CSSs do not need to provide feed ids as
   * we create feeds on the fly. We do not have supplemental feed support for
   * CSS Products yet.
   *
   * @generated from field: int64 feed_id = 3;
   */
  feedId: bigint;
};

/**
 * Describes the message google.shopping.css.v1.InsertCssProductInputRequest.
 * Use `create(InsertCssProductInputRequestSchema)` to create a new message.
 */
export const InsertCssProductInputRequestSchema: GenMessage<InsertCssProductInputRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_css_v1_css_product_inputs, 1);

/**
 * Request message for the DeleteCssProductInput method.
 *
 * @generated from message google.shopping.css.v1.DeleteCssProductInputRequest
 */
export type DeleteCssProductInputRequest = Message<"google.shopping.css.v1.DeleteCssProductInputRequest"> & {
  /**
   * Required. The name of the CSS product input resource to delete.
   * Format: accounts/{account}/cssProductInputs/{css_product_input}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The Content API Supplemental Feed ID.
   * The field must not be set if the action applies to a primary feed.
   * If the field is set, then product action applies to a supplemental feed
   * instead of primary Content API feed.
   *
   * @generated from field: optional int64 supplemental_feed_id = 2;
   */
  supplementalFeedId?: bigint;
};

/**
 * Describes the message google.shopping.css.v1.DeleteCssProductInputRequest.
 * Use `create(DeleteCssProductInputRequestSchema)` to create a new message.
 */
export const DeleteCssProductInputRequestSchema: GenMessage<DeleteCssProductInputRequest> = /*@__PURE__*/
  messageDesc(file_google_shopping_css_v1_css_product_inputs, 2);

/**
 * Service to use CssProductInput resource.
 * This service helps to insert/update/delete CSS Products.
 *
 * @generated from service google.shopping.css.v1.CssProductInputsService
 */
export const CssProductInputsService: GenService<{
  /**
   * Uploads a CssProductInput to your CSS Center account. If an
   * input with the same contentLanguage, identity, feedLabel and feedId already
   * exists, this method replaces that entry.
   *
   * After inserting, updating, or deleting a CSS Product input, it may
   * take several minutes before the processed CSS Product can be retrieved.
   *
   * @generated from rpc google.shopping.css.v1.CssProductInputsService.InsertCssProductInput
   */
  insertCssProductInput: {
    methodKind: "unary";
    input: typeof InsertCssProductInputRequestSchema;
    output: typeof CssProductInputSchema;
  },
  /**
   * Deletes a CSS Product input from your CSS Center account.
   *
   * After a delete it may take several minutes until the input is no longer
   * available.
   *
   * @generated from rpc google.shopping.css.v1.CssProductInputsService.DeleteCssProductInput
   */
  deleteCssProductInput: {
    methodKind: "unary";
    input: typeof DeleteCssProductInputRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_shopping_css_v1_css_product_inputs, 0);

