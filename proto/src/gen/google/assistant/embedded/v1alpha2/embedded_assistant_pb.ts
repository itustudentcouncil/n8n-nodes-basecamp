// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/assistant/embedded/v1alpha2/embedded_assistant.proto (package google.assistant.embedded.v1alpha2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import type { LatLng } from "../../../type/latlng_pb";
import { file_google_type_latlng } from "../../../type/latlng_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/assistant/embedded/v1alpha2/embedded_assistant.proto.
 */
export const file_google_assistant_embedded_v1alpha2_embedded_assistant: GenFile = /*@__PURE__*/
  fileDesc("Cjtnb29nbGUvYXNzaXN0YW50L2VtYmVkZGVkL3YxYWxwaGEyL2VtYmVkZGVkX2Fzc2lzdGFudC5wcm90bxIiZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMiJvCg1Bc3Npc3RSZXF1ZXN0EkIKBmNvbmZpZxgBIAEoCzIwLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuQXNzaXN0Q29uZmlnSAASEgoIYXVkaW9faW4YAiABKAxIAEIGCgR0eXBlItQECg5Bc3Npc3RSZXNwb25zZRJQCgpldmVudF90eXBlGAEgASgOMjwuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5Bc3Npc3RSZXNwb25zZS5FdmVudFR5cGUSPwoJYXVkaW9fb3V0GAMgASgLMiwuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5BdWRpb091dBJBCgpzY3JlZW5fb3V0GAQgASgLMi0uZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5TY3JlZW5PdXQSRwoNZGV2aWNlX2FjdGlvbhgGIAEoCzIwLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuRGV2aWNlQWN0aW9uElMKDnNwZWVjaF9yZXN1bHRzGAIgAygLMjsuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5TcGVlY2hSZWNvZ25pdGlvblJlc3VsdBJMChBkaWFsb2dfc3RhdGVfb3V0GAUgASgLMjIuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EaWFsb2dTdGF0ZU91dBJBCgpkZWJ1Z19pbmZvGAggASgLMi0uZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EZWJ1Z0luZm8iPQoJRXZlbnRUeXBlEhoKFkVWRU5UX1RZUEVfVU5TUEVDSUZJRUQQABIUChBFTkRfT0ZfVVRURVJBTkNFEAEiMAoJRGVidWdJbmZvEiMKG2FvZ19hZ2VudF90b19hc3Npc3RhbnRfanNvbhgBIAEoCSL0AwoMQXNzaXN0Q29uZmlnEkwKD2F1ZGlvX2luX2NvbmZpZxgBIAEoCzIxLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuQXVkaW9JbkNvbmZpZ0gAEhQKCnRleHRfcXVlcnkYBiABKAlIABJMChBhdWRpb19vdXRfY29uZmlnGAIgASgLMjIuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5BdWRpb091dENvbmZpZxJOChFzY3JlZW5fb3V0X2NvbmZpZxgIIAEoCzIzLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuU2NyZWVuT3V0Q29uZmlnEkoKD2RpYWxvZ19zdGF0ZV9pbhgDIAEoCzIxLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuRGlhbG9nU3RhdGVJbhJHCg1kZXZpY2VfY29uZmlnGAQgASgLMjAuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EZXZpY2VDb25maWcSRQoMZGVidWdfY29uZmlnGAUgASgLMi8uZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EZWJ1Z0NvbmZpZ0IGCgR0eXBlIrYBCg1BdWRpb0luQ29uZmlnEkwKCGVuY29kaW5nGAEgASgOMjouZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5BdWRpb0luQ29uZmlnLkVuY29kaW5nEhkKEXNhbXBsZV9yYXRlX2hlcnR6GAIgASgFIjwKCEVuY29kaW5nEhgKFEVOQ09ESU5HX1VOU1BFQ0lGSUVEEAASDAoITElORUFSMTYQARIICgRGTEFDEAIi4wEKDkF1ZGlvT3V0Q29uZmlnEk0KCGVuY29kaW5nGAEgASgOMjsuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5BdWRpb091dENvbmZpZy5FbmNvZGluZxIZChFzYW1wbGVfcmF0ZV9oZXJ0ehgCIAEoBRIZChF2b2x1bWVfcGVyY2VudGFnZRgDIAEoBSJMCghFbmNvZGluZxIYChRFTkNPRElOR19VTlNQRUNJRklFRBAAEgwKCExJTkVBUjE2EAESBwoDTVAzEAISDwoLT1BVU19JTl9PR0cQAyKnAQoPU2NyZWVuT3V0Q29uZmlnElMKC3NjcmVlbl9tb2RlGAEgASgOMj4uZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5TY3JlZW5PdXRDb25maWcuU2NyZWVuTW9kZSI/CgpTY3JlZW5Nb2RlEhsKF1NDUkVFTl9NT0RFX1VOU1BFQ0lGSUVEEAASBwoDT0ZGEAESCwoHUExBWUlORxADIqwBCg1EaWFsb2dTdGF0ZUluEhoKEmNvbnZlcnNhdGlvbl9zdGF0ZRgBIAEoDBIVCg1sYW5ndWFnZV9jb2RlGAIgASgJEksKD2RldmljZV9sb2NhdGlvbhgFIAEoCzIyLmdvb2dsZS5hc3Npc3RhbnQuZW1iZWRkZWQudjFhbHBoYTIuRGV2aWNlTG9jYXRpb24SGwoTaXNfbmV3X2NvbnZlcnNhdGlvbhgHIAEoCCI6CgxEZXZpY2VDb25maWcSEQoJZGV2aWNlX2lkGAEgASgJEhcKD2RldmljZV9tb2RlbF9pZBgDIAEoCSIeCghBdWRpb091dBISCgphdWRpb19kYXRhGAEgASgMIosBCglTY3JlZW5PdXQSRAoGZm9ybWF0GAEgASgOMjQuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5TY3JlZW5PdXQuRm9ybWF0EgwKBGRhdGEYAiABKAwiKgoGRm9ybWF0EhYKEkZPUk1BVF9VTlNQRUNJRklFRBAAEggKBEhUTUwQASIrCgxEZXZpY2VBY3Rpb24SGwoTZGV2aWNlX3JlcXVlc3RfanNvbhgBIAEoCSJAChdTcGVlY2hSZWNvZ25pdGlvblJlc3VsdBISCgp0cmFuc2NyaXB0GAEgASgJEhEKCXN0YWJpbGl0eRgCIAEoAiKlAgoORGlhbG9nU3RhdGVPdXQSIQoZc3VwcGxlbWVudGFsX2Rpc3BsYXlfdGV4dBgBIAEoCRIaChJjb252ZXJzYXRpb25fc3RhdGUYAiABKAwSWgoPbWljcm9waG9uZV9tb2RlGAMgASgOMkEuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5EaWFsb2dTdGF0ZU91dC5NaWNyb3Bob25lTW9kZRIZChF2b2x1bWVfcGVyY2VudGFnZRgEIAEoBSJdCg5NaWNyb3Bob25lTW9kZRIfChtNSUNST1BIT05FX01PREVfVU5TUEVDSUZJRUQQABIUChBDTE9TRV9NSUNST1BIT05FEAESFAoQRElBTE9HX0ZPTExPV19PThACIigKC0RlYnVnQ29uZmlnEhkKEXJldHVybl9kZWJ1Z19pbmZvGAYgASgIIkQKDkRldmljZUxvY2F0aW9uEioKC2Nvb3JkaW5hdGVzGAEgASgLMhMuZ29vZ2xlLnR5cGUuTGF0TG5nSABCBgoEdHlwZTKIAQoRRW1iZWRkZWRBc3Npc3RhbnQScwoGQXNzaXN0EjEuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5Bc3Npc3RSZXF1ZXN0GjIuZ29vZ2xlLmFzc2lzdGFudC5lbWJlZGRlZC52MWFscGhhMi5Bc3Npc3RSZXNwb25zZSgBMAFCjwEKJmNvbS5nb29nbGUuYXNzaXN0YW50LmVtYmVkZGVkLnYxYWxwaGEyQg5Bc3Npc3RhbnRQcm90b1ABWkpnb29nbGUuZ29sYW5nLm9yZy9nZW5wcm90by9nb29nbGVhcGlzL2Fzc2lzdGFudC9lbWJlZGRlZC92MWFscGhhMjtlbWJlZGRlZKICBkFTVFNES2IGcHJvdG8z", [file_google_api_annotations, file_google_type_latlng]);

/**
 * The top-level message sent by the client. Clients must send at least two, and
 * typically numerous `AssistRequest` messages. The first message must
 * contain a `config` message and must not contain `audio_in` data. All
 * subsequent messages must contain `audio_in` data and must not contain a
 * `config` message.
 *
 * @generated from message google.assistant.embedded.v1alpha2.AssistRequest
 */
export type AssistRequest = Message<"google.assistant.embedded.v1alpha2.AssistRequest"> & {
  /**
   * Exactly one of these fields must be specified in each `AssistRequest`.
   *
   * @generated from oneof google.assistant.embedded.v1alpha2.AssistRequest.type
   */
  type: {
    /**
     * The `config` message provides information to the recognizer that
     * specifies how to process the request.
     * The first `AssistRequest` message must contain a `config` message.
     *
     * @generated from field: google.assistant.embedded.v1alpha2.AssistConfig config = 1;
     */
    value: AssistConfig;
    case: "config";
  } | {
    /**
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `AssistRequest` messages. The first `AssistRequest`
     * message must not contain `audio_in` data and all subsequent
     * `AssistRequest` messages must contain `audio_in` data. The audio bytes
     * must be encoded as specified in `AudioInConfig`.
     * Audio must be sent at approximately real-time (16000 samples per second).
     * An error will be returned if audio is sent significantly faster or
     * slower.
     *
     * @generated from field: bytes audio_in = 2;
     */
    value: Uint8Array;
    case: "audioIn";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AssistRequest.
 * Use `create(AssistRequestSchema)` to create a new message.
 */
export const AssistRequestSchema: GenMessage<AssistRequest> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 0);

/**
 * The top-level message received by the client. A series of one or more
 * `AssistResponse` messages are streamed back to the client.
 *
 * @generated from message google.assistant.embedded.v1alpha2.AssistResponse
 */
export type AssistResponse = Message<"google.assistant.embedded.v1alpha2.AssistResponse"> & {
  /**
   * *Output-only* Indicates the type of event.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.AssistResponse.EventType event_type = 1;
   */
  eventType: AssistResponse_EventType;

  /**
   * *Output-only* The audio containing the Assistant's response to the query.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.AudioOut audio_out = 3;
   */
  audioOut?: AudioOut;

  /**
   * *Output-only* Contains the Assistant's visual response to the query.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.ScreenOut screen_out = 4;
   */
  screenOut?: ScreenOut;

  /**
   * *Output-only* Contains the action triggered by the query with the
   * appropriate payloads and semantic parsing.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DeviceAction device_action = 6;
   */
  deviceAction?: DeviceAction;

  /**
   * *Output-only* This repeated list contains zero or more speech recognition
   * results that correspond to consecutive portions of the audio currently
   * being processed, starting with the portion corresponding to the earliest
   * audio (and most stable portion) to the portion corresponding to the most
   * recent audio. The strings can be concatenated to view the full
   * in-progress response. When the speech recognition completes, this list
   * will contain one item with `stability` of `1.0`.
   *
   * @generated from field: repeated google.assistant.embedded.v1alpha2.SpeechRecognitionResult speech_results = 2;
   */
  speechResults: SpeechRecognitionResult[];

  /**
   * *Output-only* Contains output related to the user's query.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DialogStateOut dialog_state_out = 5;
   */
  dialogStateOut?: DialogStateOut;

  /**
   * *Output-only* Debugging info for developer. Only returned if request set
   * `return_debug_info` to true.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DebugInfo debug_info = 8;
   */
  debugInfo?: DebugInfo;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AssistResponse.
 * Use `create(AssistResponseSchema)` to create a new message.
 */
export const AssistResponseSchema: GenMessage<AssistResponse> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 1);

/**
 * Indicates the type of event.
 *
 * @generated from enum google.assistant.embedded.v1alpha2.AssistResponse.EventType
 */
export enum AssistResponse_EventType {
  /**
   * No event specified.
   *
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  EVENT_TYPE_UNSPECIFIED = 0,

  /**
   * This event indicates that the server has detected the end of the user's
   * speech utterance and expects no additional speech. Therefore, the server
   * will not process additional audio (although it may subsequently return
   * additional results). The client should stop sending additional audio
   * data, half-close the gRPC connection, and wait for any additional results
   * until the server closes the gRPC connection.
   *
   * @generated from enum value: END_OF_UTTERANCE = 1;
   */
  END_OF_UTTERANCE = 1,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.AssistResponse.EventType.
 */
export const AssistResponse_EventTypeSchema: GenEnum<AssistResponse_EventType> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 1, 0);

/**
 * Debug info for developer. Only returned if request set `return_debug_info`
 * to true.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DebugInfo
 */
export type DebugInfo = Message<"google.assistant.embedded.v1alpha2.DebugInfo"> & {
  /**
   * The original JSON response from an Action-on-Google agent to Google server.
   * See
   * https://developers.google.com/actions/reference/rest/Shared.Types/AppResponse.
   * It will only be populated if the request maker owns the AoG project and the
   * AoG project is in preview mode.
   *
   * @generated from field: string aog_agent_to_assistant_json = 1;
   */
  aogAgentToAssistantJson: string;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DebugInfo.
 * Use `create(DebugInfoSchema)` to create a new message.
 */
export const DebugInfoSchema: GenMessage<DebugInfo> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 2);

/**
 * Specifies how to process the `AssistRequest` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha2.AssistConfig
 */
export type AssistConfig = Message<"google.assistant.embedded.v1alpha2.AssistConfig"> & {
  /**
   * @generated from oneof google.assistant.embedded.v1alpha2.AssistConfig.type
   */
  type: {
    /**
     * Specifies how to process the subsequent incoming audio. Required if
     * [AssistRequest.audio_in][google.assistant.embedded.v1alpha2.AssistRequest.audio_in]
     * bytes will be provided in subsequent requests.
     *
     * @generated from field: google.assistant.embedded.v1alpha2.AudioInConfig audio_in_config = 1;
     */
    value: AudioInConfig;
    case: "audioInConfig";
  } | {
    /**
     * The text input to be sent to the Assistant. This can be populated from a
     * text interface if audio input is not available.
     *
     * @generated from field: string text_query = 6;
     */
    value: string;
    case: "textQuery";
  } | { case: undefined; value?: undefined };

  /**
   * *Required* Specifies how to format the audio that will be returned.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.AudioOutConfig audio_out_config = 2;
   */
  audioOutConfig?: AudioOutConfig;

  /**
   * *Optional* Specifies the desired format to use when server returns a
   * visual screen response.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.ScreenOutConfig screen_out_config = 8;
   */
  screenOutConfig?: ScreenOutConfig;

  /**
   * *Required* Represents the current dialog state.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DialogStateIn dialog_state_in = 3;
   */
  dialogStateIn?: DialogStateIn;

  /**
   * Device configuration that uniquely identifies a specific device.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DeviceConfig device_config = 4;
   */
  deviceConfig?: DeviceConfig;

  /**
   * *Optional* Debugging parameters for the whole `Assist` RPC.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DebugConfig debug_config = 5;
   */
  debugConfig?: DebugConfig;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AssistConfig.
 * Use `create(AssistConfigSchema)` to create a new message.
 */
export const AssistConfigSchema: GenMessage<AssistConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 3);

/**
 * Specifies how to process the `audio_in` data that will be provided in
 * subsequent requests. For recommended settings, see the Google Assistant SDK
 * [best
 * practices](https://developers.google.com/assistant/sdk/guides/service/python/best-practices/audio).
 *
 * @generated from message google.assistant.embedded.v1alpha2.AudioInConfig
 */
export type AudioInConfig = Message<"google.assistant.embedded.v1alpha2.AudioInConfig"> & {
  /**
   * *Required* Encoding of audio data sent in all `audio_in` messages.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.AudioInConfig.Encoding encoding = 1;
   */
  encoding: AudioInConfig_Encoding;

  /**
   * *Required* Sample rate (in Hertz) of the audio data sent in all `audio_in`
   * messages. Valid values are from 16000-24000, but 16000 is optimal.
   * For best results, set the sampling rate of the audio source to 16000 Hz.
   * If that's not possible, use the native sample rate of the audio source
   * (instead of re-sampling).
   *
   * @generated from field: int32 sample_rate_hertz = 2;
   */
  sampleRateHertz: number;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AudioInConfig.
 * Use `create(AudioInConfigSchema)` to create a new message.
 */
export const AudioInConfigSchema: GenMessage<AudioInConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 4);

/**
 * Audio encoding of the data sent in the audio message.
 * Audio must be one-channel (mono).
 *
 * @generated from enum google.assistant.embedded.v1alpha2.AudioInConfig.Encoding
 */
export enum AudioInConfig_Encoding {
  /**
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   *
   * @generated from enum value: ENCODING_UNSPECIFIED = 0;
   */
  ENCODING_UNSPECIFIED = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   * This encoding includes no header, only the raw audio bytes.
   *
   * @generated from enum value: LINEAR16 = 1;
   */
  LINEAR16 = 1,

  /**
   * [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`. This encoding
   * includes the `FLAC` stream header followed by audio data. It supports
   * 16-bit and 24-bit samples, however, not all fields in `STREAMINFO` are
   * supported.
   *
   * @generated from enum value: FLAC = 2;
   */
  FLAC = 2,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.AudioInConfig.Encoding.
 */
export const AudioInConfig_EncodingSchema: GenEnum<AudioInConfig_Encoding> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 4, 0);

/**
 * Specifies the desired format for the server to use when it returns
 * `audio_out` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha2.AudioOutConfig
 */
export type AudioOutConfig = Message<"google.assistant.embedded.v1alpha2.AudioOutConfig"> & {
  /**
   * *Required* The encoding of audio data to be returned in all `audio_out`
   * messages.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding encoding = 1;
   */
  encoding: AudioOutConfig_Encoding;

  /**
   * *Required* The sample rate in Hertz of the audio data returned in
   * `audio_out` messages. Valid values are: 16000-24000.
   *
   * @generated from field: int32 sample_rate_hertz = 2;
   */
  sampleRateHertz: number;

  /**
   * *Required* Current volume setting of the device's audio output.
   * Valid values are 1 to 100 (corresponding to 1% to 100%).
   *
   * @generated from field: int32 volume_percentage = 3;
   */
  volumePercentage: number;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AudioOutConfig.
 * Use `create(AudioOutConfigSchema)` to create a new message.
 */
export const AudioOutConfigSchema: GenMessage<AudioOutConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 5);

/**
 * Audio encoding of the data returned in the audio message. All encodings are
 * raw audio bytes with no header, except as indicated below.
 *
 * @generated from enum google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding
 */
export enum AudioOutConfig_Encoding {
  /**
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   *
   * @generated from enum value: ENCODING_UNSPECIFIED = 0;
   */
  ENCODING_UNSPECIFIED = 0,

  /**
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   *
   * @generated from enum value: LINEAR16 = 1;
   */
  LINEAR16 = 1,

  /**
   * MP3 audio encoding. The sample rate is encoded in the payload.
   *
   * @generated from enum value: MP3 = 2;
   */
  MP3 = 2,

  /**
   * Opus-encoded audio wrapped in an ogg container. The result will be a
   * file which can be played natively on Android and in some browsers (such
   * as Chrome). The quality of the encoding is considerably higher than MP3
   * while using the same bitrate. The sample rate is encoded in the payload.
   *
   * @generated from enum value: OPUS_IN_OGG = 3;
   */
  OPUS_IN_OGG = 3,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.AudioOutConfig.Encoding.
 */
export const AudioOutConfig_EncodingSchema: GenEnum<AudioOutConfig_Encoding> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 5, 0);

/**
 * Specifies the desired format for the server to use when it returns
 * `screen_out` response.
 *
 * @generated from message google.assistant.embedded.v1alpha2.ScreenOutConfig
 */
export type ScreenOutConfig = Message<"google.assistant.embedded.v1alpha2.ScreenOutConfig"> & {
  /**
   * Current visual screen-mode for the device while issuing the query.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode screen_mode = 1;
   */
  screenMode: ScreenOutConfig_ScreenMode;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.ScreenOutConfig.
 * Use `create(ScreenOutConfigSchema)` to create a new message.
 */
export const ScreenOutConfigSchema: GenMessage<ScreenOutConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 6);

/**
 * Possible modes for visual screen-output on the device.
 *
 * @generated from enum google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode
 */
export enum ScreenOutConfig_ScreenMode {
  /**
   * No video mode specified.
   * The Assistant may respond as if in `OFF` mode.
   *
   * @generated from enum value: SCREEN_MODE_UNSPECIFIED = 0;
   */
  SCREEN_MODE_UNSPECIFIED = 0,

  /**
   * Screen is off (or has brightness or other settings set so low it is
   * not visible). The Assistant will typically not return a screen response
   * in this mode.
   *
   * @generated from enum value: OFF = 1;
   */
  OFF = 1,

  /**
   * The Assistant will typically return a partial-screen response in this
   * mode.
   *
   * @generated from enum value: PLAYING = 3;
   */
  PLAYING = 3,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.ScreenOutConfig.ScreenMode.
 */
export const ScreenOutConfig_ScreenModeSchema: GenEnum<ScreenOutConfig_ScreenMode> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 6, 0);

/**
 * Provides information about the current dialog state.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DialogStateIn
 */
export type DialogStateIn = Message<"google.assistant.embedded.v1alpha2.DialogStateIn"> & {
  /**
   * *Required* This field must always be set to the
   * [DialogStateOut.conversation_state][google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state]
   * value that was returned in the prior `Assist` RPC. It should only be
   * omitted (field not set) if there was no prior `Assist` RPC because this is
   * the first `Assist` RPC made by this device after it was first setup and/or
   * a factory-default reset.
   *
   * @generated from field: bytes conversation_state = 1;
   */
  conversationState: Uint8Array;

  /**
   * *Required* Language of the request in
   * [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example,
   * "en-US"). See [Language
   * Support](https://developers.google.com/assistant/sdk/reference/rpc/languages)
   * for more information. If you have selected a language for this `device_id`
   * using the
   * [Settings](https://developers.google.com/assistant/sdk/reference/assistant-app/assistant-settings)
   * menu in your phone's Google Assistant app, that selection will override
   * this value.
   *
   * @generated from field: string language_code = 2;
   */
  languageCode: string;

  /**
   * *Optional* Location of the device where the query originated.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DeviceLocation device_location = 5;
   */
  deviceLocation?: DeviceLocation;

  /**
   * *Optional* If true, the server will treat the request as a new conversation
   * and not use state from the prior request. Set this field to true when the
   * conversation should be restarted, such as after a device reboot, or after a
   * significant lapse of time since the prior query.
   *
   * @generated from field: bool is_new_conversation = 7;
   */
  isNewConversation: boolean;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DialogStateIn.
 * Use `create(DialogStateInSchema)` to create a new message.
 */
export const DialogStateInSchema: GenMessage<DialogStateIn> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 7);

/**
 * *Required* Fields that identify the device to the Assistant.
 *
 * See also:
 *
 * *   [Register a Device - REST
 * API](https://developers.google.com/assistant/sdk/reference/device-registration/register-device-manual)
 * *   [Device Model and Instance
 * Schemas](https://developers.google.com/assistant/sdk/reference/device-registration/model-and-instance-schemas)
 * *   [Device
 * Proto](https://developers.google.com/assistant/sdk/reference/rpc/google.assistant.devices.v1alpha2#device)
 *
 * @generated from message google.assistant.embedded.v1alpha2.DeviceConfig
 */
export type DeviceConfig = Message<"google.assistant.embedded.v1alpha2.DeviceConfig"> & {
  /**
   * *Required* Unique identifier for the device. The id length must be 128
   * characters or less. Example: DBCDW098234. This MUST match the device_id
   * returned from device registration. This device_id is used to match against
   * the user's registered devices to lookup the supported traits and
   * capabilities of this device. This information should not change across
   * device reboots. However, it should not be saved across
   * factory-default resets.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * *Required* Unique identifier for the device model. The combination of
   * device_model_id and device_id must have been previously associated through
   * device registration.
   *
   * @generated from field: string device_model_id = 3;
   */
  deviceModelId: string;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DeviceConfig.
 * Use `create(DeviceConfigSchema)` to create a new message.
 */
export const DeviceConfigSchema: GenMessage<DeviceConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 8);

/**
 * The audio containing the Assistant's response to the query. Sequential chunks
 * of audio data are received in sequential `AssistResponse` messages.
 *
 * @generated from message google.assistant.embedded.v1alpha2.AudioOut
 */
export type AudioOut = Message<"google.assistant.embedded.v1alpha2.AudioOut"> & {
  /**
   * *Output-only* The audio data containing the Assistant's response to the
   * query. Sequential chunks of audio data are received in sequential
   * `AssistResponse` messages.
   *
   * @generated from field: bytes audio_data = 1;
   */
  audioData: Uint8Array;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.AudioOut.
 * Use `create(AudioOutSchema)` to create a new message.
 */
export const AudioOutSchema: GenMessage<AudioOut> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 9);

/**
 * The Assistant's visual output response to query. Enabled by
 * `screen_out_config`.
 *
 * @generated from message google.assistant.embedded.v1alpha2.ScreenOut
 */
export type ScreenOut = Message<"google.assistant.embedded.v1alpha2.ScreenOut"> & {
  /**
   * *Output-only* The format of the provided screen data.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.ScreenOut.Format format = 1;
   */
  format: ScreenOut_Format;

  /**
   * *Output-only* The raw screen data to be displayed as the result of the
   * Assistant query.
   *
   * @generated from field: bytes data = 2;
   */
  data: Uint8Array;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.ScreenOut.
 * Use `create(ScreenOutSchema)` to create a new message.
 */
export const ScreenOutSchema: GenMessage<ScreenOut> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 10);

/**
 * Possible formats of the screen data.
 *
 * @generated from enum google.assistant.embedded.v1alpha2.ScreenOut.Format
 */
export enum ScreenOut_Format {
  /**
   * No format specified.
   *
   * @generated from enum value: FORMAT_UNSPECIFIED = 0;
   */
  FORMAT_UNSPECIFIED = 0,

  /**
   * Data will contain a fully-formed HTML5 layout encoded in UTF-8, e.g.
   * `<html><body><div>...</div></body></html>`. It is intended to be rendered
   * along with the audio response. Note that HTML5 doctype should be included
   * in the actual HTML data.
   *
   * @generated from enum value: HTML = 1;
   */
  HTML = 1,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.ScreenOut.Format.
 */
export const ScreenOut_FormatSchema: GenEnum<ScreenOut_Format> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 10, 0);

/**
 * The response returned to the device if the user has triggered a Device
 * Action. For example, a device which supports the query *Turn on the light*
 * would receive a `DeviceAction` with a JSON payload containing the semantics
 * of the request.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DeviceAction
 */
export type DeviceAction = Message<"google.assistant.embedded.v1alpha2.DeviceAction"> & {
  /**
   * JSON containing the device command response generated from the triggered
   * Device Action grammar. The format is given by the
   * `action.devices.EXECUTE` intent for a given
   * [trait](https://developers.google.com/assistant/sdk/reference/traits/).
   *
   * @generated from field: string device_request_json = 1;
   */
  deviceRequestJson: string;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DeviceAction.
 * Use `create(DeviceActionSchema)` to create a new message.
 */
export const DeviceActionSchema: GenMessage<DeviceAction> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 11);

/**
 * The estimated transcription of a phrase the user has spoken. This could be
 * a single segment or the full guess of the user's spoken query.
 *
 * @generated from message google.assistant.embedded.v1alpha2.SpeechRecognitionResult
 */
export type SpeechRecognitionResult = Message<"google.assistant.embedded.v1alpha2.SpeechRecognitionResult"> & {
  /**
   * *Output-only* Transcript text representing the words that the user spoke.
   *
   * @generated from field: string transcript = 1;
   */
  transcript: string;

  /**
   * *Output-only* An estimate of the likelihood that the Assistant will not
   * change its guess about this result. Values range from 0.0 (completely
   * unstable) to 1.0 (completely stable and final). The default of 0.0 is a
   * sentinel value indicating `stability` was not set.
   *
   * @generated from field: float stability = 2;
   */
  stability: number;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.SpeechRecognitionResult.
 * Use `create(SpeechRecognitionResultSchema)` to create a new message.
 */
export const SpeechRecognitionResultSchema: GenMessage<SpeechRecognitionResult> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 12);

/**
 * The dialog state resulting from the user's query. Multiple of these messages
 * may be received.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DialogStateOut
 */
export type DialogStateOut = Message<"google.assistant.embedded.v1alpha2.DialogStateOut"> & {
  /**
   * *Output-only* Supplemental display text from the Assistant. This could be
   * the same as the speech spoken in `AssistResponse.audio_out` or it could
   * be some additional information which aids the user's understanding.
   *
   * @generated from field: string supplemental_display_text = 1;
   */
  supplementalDisplayText: string;

  /**
   * *Output-only* State information for the subsequent `Assist` RPC. This
   * value should be saved in the client and returned in the
   * [`DialogStateIn.conversation_state`](#dialogstatein) field with the next
   * `Assist` RPC. (The client does not need to interpret or otherwise use this
   * value.) This information should be saved across device reboots. However,
   * this value should be cleared (not saved in the client) during a
   * factory-default reset.
   *
   * @generated from field: bytes conversation_state = 2;
   */
  conversationState: Uint8Array;

  /**
   * *Output-only* Specifies the mode of the microphone after this `Assist`
   * RPC is processed.
   *
   * @generated from field: google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode microphone_mode = 3;
   */
  microphoneMode: DialogStateOut_MicrophoneMode;

  /**
   * *Output-only* Updated volume level. The value will be 0 or omitted
   * (indicating no change) unless a voice command such as *Increase the volume*
   * or *Set volume level 4* was recognized, in which case the value will be
   * between 1 and 100 (corresponding to the new volume level of 1% to 100%).
   * Typically, a client should use this volume level when playing the
   * `audio_out` data, and retain this value as the current volume level and
   * supply it in the `AudioOutConfig` of the next `AssistRequest`. (Some
   * clients may also implement other ways to allow the current volume level to
   * be changed, for example, by providing a knob that the user can turn.)
   *
   * @generated from field: int32 volume_percentage = 4;
   */
  volumePercentage: number;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DialogStateOut.
 * Use `create(DialogStateOutSchema)` to create a new message.
 */
export const DialogStateOutSchema: GenMessage<DialogStateOut> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 13);

/**
 * Possible states of the microphone after a `Assist` RPC completes.
 *
 * @generated from enum google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode
 */
export enum DialogStateOut_MicrophoneMode {
  /**
   * No mode specified.
   *
   * @generated from enum value: MICROPHONE_MODE_UNSPECIFIED = 0;
   */
  MICROPHONE_MODE_UNSPECIFIED = 0,

  /**
   * The service is not expecting a follow-on question from the user.
   * The microphone should remain off until the user re-activates it.
   *
   * @generated from enum value: CLOSE_MICROPHONE = 1;
   */
  CLOSE_MICROPHONE = 1,

  /**
   * The service is expecting a follow-on question from the user. The
   * microphone should be re-opened when the `AudioOut` playback completes
   * (by starting a new `Assist` RPC call to send the new audio).
   *
   * @generated from enum value: DIALOG_FOLLOW_ON = 2;
   */
  DIALOG_FOLLOW_ON = 2,
}

/**
 * Describes the enum google.assistant.embedded.v1alpha2.DialogStateOut.MicrophoneMode.
 */
export const DialogStateOut_MicrophoneModeSchema: GenEnum<DialogStateOut_MicrophoneMode> = /*@__PURE__*/
  enumDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 13, 0);

/**
 * Debugging parameters for the current request.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DebugConfig
 */
export type DebugConfig = Message<"google.assistant.embedded.v1alpha2.DebugConfig"> & {
  /**
   * When this field is set to true, the `debug_info` field in `AssistResponse`
   * may be populated. However it will significantly increase latency of
   * responses. Do not set this field true in production code.
   *
   * @generated from field: bool return_debug_info = 6;
   */
  returnDebugInfo: boolean;
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DebugConfig.
 * Use `create(DebugConfigSchema)` to create a new message.
 */
export const DebugConfigSchema: GenMessage<DebugConfig> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 14);

/**
 * There are three sources of locations. They are used with this precedence:
 *
 * 1. This `DeviceLocation`, which is primarily used for mobile devices with
 *    GPS .
 * 2. Location specified by the user during device setup; this is per-user, per
 *    device. This location is used if `DeviceLocation` is not specified.
 * 3. Inferred location based on IP address. This is used only if neither of the
 *    above are specified.
 *
 * @generated from message google.assistant.embedded.v1alpha2.DeviceLocation
 */
export type DeviceLocation = Message<"google.assistant.embedded.v1alpha2.DeviceLocation"> & {
  /**
   * @generated from oneof google.assistant.embedded.v1alpha2.DeviceLocation.type
   */
  type: {
    /**
     * Latitude and longitude of device.
     *
     * @generated from field: google.type.LatLng coordinates = 1;
     */
    value: LatLng;
    case: "coordinates";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.assistant.embedded.v1alpha2.DeviceLocation.
 * Use `create(DeviceLocationSchema)` to create a new message.
 */
export const DeviceLocationSchema: GenMessage<DeviceLocation> = /*@__PURE__*/
  messageDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 15);

/**
 * Service that implements the Google Assistant API.
 *
 * @generated from service google.assistant.embedded.v1alpha2.EmbeddedAssistant
 */
export const EmbeddedAssistant: GenService<{
  /**
   * Initiates or continues a conversation with the embedded Assistant Service.
   * Each call performs one round-trip, sending an audio request to the service
   * and receiving the audio response. Uses bidirectional streaming to receive
   * results, such as the `END_OF_UTTERANCE` event, while sending audio.
   *
   * A conversation is one or more gRPC connections, each consisting of several
   * streamed requests and responses.
   * For example, the user says *Add to my shopping list* and the Assistant
   * responds *What do you want to add?*. The sequence of streamed requests and
   * responses in the first gRPC message could be:
   *
   * *   AssistRequest.config
   * *   AssistRequest.audio_in
   * *   AssistRequest.audio_in
   * *   AssistRequest.audio_in
   * *   AssistRequest.audio_in
   * *   AssistResponse.event_type.END_OF_UTTERANCE
   * *   AssistResponse.speech_results.transcript "add to my shopping list"
   * *   AssistResponse.dialog_state_out.microphone_mode.DIALOG_FOLLOW_ON
   * *   AssistResponse.audio_out
   * *   AssistResponse.audio_out
   * *   AssistResponse.audio_out
   *
   *
   * The user then says *bagels* and the Assistant responds
   * *OK, I've added bagels to your shopping list*. This is sent as another gRPC
   * connection call to the `Assist` method, again with streamed requests and
   * responses, such as:
   *
   * *   AssistRequest.config
   * *   AssistRequest.audio_in
   * *   AssistRequest.audio_in
   * *   AssistRequest.audio_in
   * *   AssistResponse.event_type.END_OF_UTTERANCE
   * *   AssistResponse.dialog_state_out.microphone_mode.CLOSE_MICROPHONE
   * *   AssistResponse.audio_out
   * *   AssistResponse.audio_out
   * *   AssistResponse.audio_out
   * *   AssistResponse.audio_out
   *
   * Although the precise order of responses is not guaranteed, sequential
   * `AssistResponse.audio_out` messages will always contain sequential portions
   * of audio.
   *
   * @generated from rpc google.assistant.embedded.v1alpha2.EmbeddedAssistant.Assist
   */
  assist: {
    methodKind: "bidi_streaming";
    input: typeof AssistRequestSchema;
    output: typeof AssistResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_assistant_embedded_v1alpha2_embedded_assistant, 0);

