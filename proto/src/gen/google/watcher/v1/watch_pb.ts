// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/watcher/v1/watch.proto (package google.watcher.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/watcher/v1/watch.proto.
 */
export const file_google_watcher_v1_watch: GenFile = /*@__PURE__*/
  fileDesc("Ch1nb29nbGUvd2F0Y2hlci92MS93YXRjaC5wcm90bxIRZ29vZ2xlLndhdGNoZXIudjEiMAoHUmVxdWVzdBIOCgZ0YXJnZXQYASABKAkSFQoNcmVzdW1lX21hcmtlchgCIAEoDCI5CgtDaGFuZ2VCYXRjaBIqCgdjaGFuZ2VzGAEgAygLMhkuZ29vZ2xlLndhdGNoZXIudjEuQ2hhbmdlIuYBCgZDaGFuZ2USDwoHZWxlbWVudBgBIAEoCRIuCgVzdGF0ZRgCIAEoDjIfLmdvb2dsZS53YXRjaGVyLnYxLkNoYW5nZS5TdGF0ZRIiCgRkYXRhGAYgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueRIVCg1yZXN1bWVfbWFya2VyGAQgASgMEhEKCWNvbnRpbnVlZBgFIAEoCCJNCgVTdGF0ZRIKCgZFWElTVFMQABISCg5ET0VTX05PVF9FWElTVBABEhkKFUlOSVRJQUxfU1RBVEVfU0tJUFBFRBACEgkKBUVSUk9SEAMyYwoHV2F0Y2hlchJYCgVXYXRjaBIaLmdvb2dsZS53YXRjaGVyLnYxLlJlcXVlc3QaHi5nb29nbGUud2F0Y2hlci52MS5DaGFuZ2VCYXRjaCIRgtPkkwILEgkvdjEvd2F0Y2gwAUJfChVjb20uZ29vZ2xlLndhdGNoZXIudjFCCldhdGNoUHJvdG9QAVo4Z29vZ2xlLmdvbGFuZy5vcmcvZ2VucHJvdG8vZ29vZ2xlYXBpcy93YXRjaGVyL3YxO3dhdGNoZXJiBnByb3RvMw", [file_google_api_annotations, file_google_protobuf_any, file_google_protobuf_empty]);

/**
 * The message used by the client to register interest in an entity.
 *
 * @generated from message google.watcher.v1.Request
 */
export type Request = Message<"google.watcher.v1.Request"> & {
  /**
   * The `target` value **must** be a valid URL path pointing to an entity
   * to watch. Note that the service name **must** be
   * removed from the target field (e.g., the target field must say
   * "/foo/bar", not "myservice.googleapis.com/foo/bar"). A client is
   * also allowed to pass system-specific parameters in the URL that
   * are only obeyed by some implementations. Some parameters will be
   * implementation-specific. However, some have predefined meaning
   * and are listed here:
   *
   *  * recursive = true|false [default=false]
   *    If set to true, indicates that the client wants to watch all elements
   *    of entities in the subtree rooted at the entity's name in `target`. For
   *    descendants that are not the immediate children of the target, the
   *    `Change.element` will contain slashes.
   *
   *    Note that some namespaces and entities will not support recursive
   *    watching. When watching such an entity, a client must not set recursive
   *    to true. Otherwise, it will receive an `UNIMPLEMENTED` error.
   *
   * Normal URL encoding must be used inside `target`.  For example, if a query
   * parameter name or value, or the non-query parameter portion of `target`
   * contains a special character, it must be %-encoded.  We recommend that
   * clients and servers use their runtime's URL library to produce and consume
   * target values.
   *
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * The `resume_marker` specifies how much of the existing underlying state is
   * delivered to the client when the watch request is received by the
   * system. The client can set this marker in one of the following ways to get
   * different semantics:
   *
   * *   Parameter is not specified or has the value "".
   *     Semantics: Fetch initial state.
   *     The client wants the entity's initial state to be delivered. See the
   *     description in "Initial State".
   *
   * *   Parameter is set to the string "now" (UTF-8 encoding).
   *     Semantics: Fetch new changes only.
   *     The client just wants to get the changes received by the system after
   *     the watch point. The system may deliver changes from before the watch
   *     point as well.
   *
   * *   Parameter is set to a value received in an earlier
   *     `Change.resume_marker` field while watching the same entity.
   *     Semantics: Resume from a specific point.
   *     The client wants to receive the changes from a specific point; this
   *     value must correspond to a value received in the `Change.resume_marker`
   *     field. The system may deliver changes from before the `resume_marker`
   *     as well. If the system cannot resume the stream from this point (e.g.,
   *     if it is too far behind in the stream), it can raise the
   *     `FAILED_PRECONDITION` error.
   *
   * An implementation MUST support an unspecified parameter and the
   * empty string "" marker (initial state fetching) and the "now" marker.
   * It need not support resuming from a specific point.
   *
   * @generated from field: bytes resume_marker = 2;
   */
  resumeMarker: Uint8Array;
};

/**
 * Describes the message google.watcher.v1.Request.
 * Use `create(RequestSchema)` to create a new message.
 */
export const RequestSchema: GenMessage<Request> = /*@__PURE__*/
  messageDesc(file_google_watcher_v1_watch, 0);

/**
 * A batch of Change messages.
 *
 * @generated from message google.watcher.v1.ChangeBatch
 */
export type ChangeBatch = Message<"google.watcher.v1.ChangeBatch"> & {
  /**
   * A list of Change messages.
   *
   * @generated from field: repeated google.watcher.v1.Change changes = 1;
   */
  changes: Change[];
};

/**
 * Describes the message google.watcher.v1.ChangeBatch.
 * Use `create(ChangeBatchSchema)` to create a new message.
 */
export const ChangeBatchSchema: GenMessage<ChangeBatch> = /*@__PURE__*/
  messageDesc(file_google_watcher_v1_watch, 1);

/**
 * A Change indicates the most recent state of an element.
 *
 * @generated from message google.watcher.v1.Change
 */
export type Change = Message<"google.watcher.v1.Change"> & {
  /**
   * Name of the element, interpreted relative to the entity's actual
   * name. "" refers to the entity itself. The element name is a valid
   * UTF-8 string.
   *
   * @generated from field: string element = 1;
   */
  element: string;

  /**
   * The state of the `element`.
   *
   * @generated from field: google.watcher.v1.Change.State state = 2;
   */
  state: Change_State;

  /**
   * The actual change data. This field is present only when `state() == EXISTS`
   * or `state() == ERROR`. Please see
   * [google.protobuf.Any][google.protobuf.Any] about how to use the Any type.
   *
   * @generated from field: google.protobuf.Any data = 6;
   */
  data?: Any;

  /**
   * If present, provides a compact representation of all the messages that have
   * been received by the caller for the given entity, e.g., it could be a
   * sequence number or a multi-part timestamp/version vector. This marker can
   * be provided in the Request message, allowing the caller to resume the
   * stream watching at a specific point without fetching the initial state.
   *
   * @generated from field: bytes resume_marker = 4;
   */
  resumeMarker: Uint8Array;

  /**
   * If true, this Change is followed by more Changes that are in the same group
   * as this Change.
   *
   * @generated from field: bool continued = 5;
   */
  continued: boolean;
};

/**
 * Describes the message google.watcher.v1.Change.
 * Use `create(ChangeSchema)` to create a new message.
 */
export const ChangeSchema: GenMessage<Change> = /*@__PURE__*/
  messageDesc(file_google_watcher_v1_watch, 2);

/**
 * A reported value can be in one of the following states:
 *
 * @generated from enum google.watcher.v1.Change.State
 */
export enum Change_State {
  /**
   * The element exists and its full value is included in data.
   *
   * @generated from enum value: EXISTS = 0;
   */
  EXISTS = 0,

  /**
   * The element does not exist.
   *
   * @generated from enum value: DOES_NOT_EXIST = 1;
   */
  DOES_NOT_EXIST = 1,

  /**
   * Element may or may not exist. Used only for initial state delivery when
   * the client is not interested in fetching the initial state. See the
   * "Initial State" section above.
   *
   * @generated from enum value: INITIAL_STATE_SKIPPED = 2;
   */
  INITIAL_STATE_SKIPPED = 2,

  /**
   * The element may exist, but some error has occurred. More information is
   * available in the data field - the value is a serialized Status
   * proto (from [google.rpc.Status][])
   *
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}

/**
 * Describes the enum google.watcher.v1.Change.State.
 */
export const Change_StateSchema: GenEnum<Change_State> = /*@__PURE__*/
  enumDesc(file_google_watcher_v1_watch, 2, 0);

/**
 * The service that a client uses to connect to the watcher system.
 * The errors returned by the service are in the canonical error space,
 * see [google.rpc.Code][].
 *
 * @generated from service google.watcher.v1.Watcher
 */
export const Watcher: GenService<{
  /**
   * Start a streaming RPC to get watch information from the server.
   *
   * @generated from rpc google.watcher.v1.Watcher.Watch
   */
  watch: {
    methodKind: "server_streaming";
    input: typeof RequestSchema;
    output: typeof ChangeBatchSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_watcher_v1_watch, 0);

