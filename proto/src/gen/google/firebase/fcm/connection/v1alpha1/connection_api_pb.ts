// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/firebase/fcm/connection/v1alpha1/connection_api.proto (package google.firebase.fcm.connection.v1alpha1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file google/firebase/fcm/connection/v1alpha1/connection_api.proto.
 */
export const file_google_firebase_fcm_connection_v1alpha1_connection_api: GenFile = /*@__PURE__*/
  fileDesc("Cjxnb29nbGUvZmlyZWJhc2UvZmNtL2Nvbm5lY3Rpb24vdjFhbHBoYTEvY29ubmVjdGlvbl9hcGkucHJvdG8SJ2dvb2dsZS5maXJlYmFzZS5mY20uY29ubmVjdGlvbi52MWFscGhhMSJeCg9VcHN0cmVhbVJlcXVlc3QSOwoDYWNrGAEgASgLMiwuZ29vZ2xlLmZpcmViYXNlLmZjbS5jb25uZWN0aW9uLnYxYWxwaGExLkFja0gAQg4KDHJlcXVlc3RfdHlwZSJqChJEb3duc3RyZWFtUmVzcG9uc2USQwoHbWVzc2FnZRgBIAEoCzIwLmdvb2dsZS5maXJlYmFzZS5mY20uY29ubmVjdGlvbi52MWFscGhhMS5NZXNzYWdlSABCDwoNcmVzcG9uc2VfdHlwZSIZCgNBY2sSEgoKbWVzc2FnZV9pZBgBIAEoCSL2AQoHTWVzc2FnZRISCgptZXNzYWdlX2lkGAEgASgJEi8KC2NyZWF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIvCgtleHBpcmVfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASSAoEZGF0YRgEIAMoCzI6Lmdvb2dsZS5maXJlYmFzZS5mY20uY29ubmVjdGlvbi52MWFscGhhMS5NZXNzYWdlLkRhdGFFbnRyeRorCglEYXRhRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ATKYAQoNQ29ubmVjdGlvbkFwaRKGAQoHQ29ubmVjdBI4Lmdvb2dsZS5maXJlYmFzZS5mY20uY29ubmVjdGlvbi52MWFscGhhMS5VcHN0cmVhbVJlcXVlc3QaOy5nb29nbGUuZmlyZWJhc2UuZmNtLmNvbm5lY3Rpb24udjFhbHBoYTEuRG93bnN0cmVhbVJlc3BvbnNlIgAoATABQoIBCitjb20uZ29vZ2xlLmZpcmViYXNlLmZjbS5jb25uZWN0aW9uLnYxYWxwaGExUAFaUWdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZmlyZWJhc2UvZmNtL2Nvbm5lY3Rpb24vdjFhbHBoYTE7Y29ubmVjdGlvbmIGcHJvdG8z", [file_google_api_annotations, file_google_protobuf_timestamp]);

/**
 * Request sent to FCM from the connected client.
 *
 * @generated from message google.firebase.fcm.connection.v1alpha1.UpstreamRequest
 */
export type UpstreamRequest = Message$1<"google.firebase.fcm.connection.v1alpha1.UpstreamRequest"> & {
  /**
   * The type of request the client is making to FCM.
   *
   * @generated from oneof google.firebase.fcm.connection.v1alpha1.UpstreamRequest.request_type
   */
  requestType: {
    /**
     * Message acknowledgement.
     *
     * @generated from field: google.firebase.fcm.connection.v1alpha1.Ack ack = 1;
     */
    value: Ack;
    case: "ack";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firebase.fcm.connection.v1alpha1.UpstreamRequest.
 * Use `create(UpstreamRequestSchema)` to create a new message.
 */
export const UpstreamRequestSchema: GenMessage<UpstreamRequest> = /*@__PURE__*/
  messageDesc(file_google_firebase_fcm_connection_v1alpha1_connection_api, 0);

/**
 * Response sent to the connected client from FCM.
 *
 * @generated from message google.firebase.fcm.connection.v1alpha1.DownstreamResponse
 */
export type DownstreamResponse = Message$1<"google.firebase.fcm.connection.v1alpha1.DownstreamResponse"> & {
  /**
   * The type of response FCM is sending to the client.
   *
   * @generated from oneof google.firebase.fcm.connection.v1alpha1.DownstreamResponse.response_type
   */
  responseType: {
    /**
     * Message sent to FCM via the [Send
     * API](https://firebase.google.com/docs/cloud-messaging/send-message)
     * targeting this client.
     *
     * @generated from field: google.firebase.fcm.connection.v1alpha1.Message message = 1;
     */
    value: Message;
    case: "message";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.firebase.fcm.connection.v1alpha1.DownstreamResponse.
 * Use `create(DownstreamResponseSchema)` to create a new message.
 */
export const DownstreamResponseSchema: GenMessage<DownstreamResponse> = /*@__PURE__*/
  messageDesc(file_google_firebase_fcm_connection_v1alpha1_connection_api, 1);

/**
 * Acknowledgement to indicate a client successfully received an FCM message.
 *
 * If a message is not acked, FCM will continously resend the message until
 * it expires. Duplicate delivery in this case is working as intended.
 *
 * @generated from message google.firebase.fcm.connection.v1alpha1.Ack
 */
export type Ack = Message$1<"google.firebase.fcm.connection.v1alpha1.Ack"> & {
  /**
   * Id of message being acknowledged
   *
   * @generated from field: string message_id = 1;
   */
  messageId: string;
};

/**
 * Describes the message google.firebase.fcm.connection.v1alpha1.Ack.
 * Use `create(AckSchema)` to create a new message.
 */
export const AckSchema: GenMessage<Ack> = /*@__PURE__*/
  messageDesc(file_google_firebase_fcm_connection_v1alpha1_connection_api, 2);

/**
 * Message created through the [Send
 * API](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message).
 *
 * @generated from message google.firebase.fcm.connection.v1alpha1.Message
 */
export type Message = Message$1<"google.firebase.fcm.connection.v1alpha1.Message"> & {
  /**
   * The identifier of the message. Used to ack the message.
   *
   * @generated from field: string message_id = 1;
   */
  messageId: string;

  /**
   * Time the message was received in FCM.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 2;
   */
  createTime?: Timestamp;

  /**
   * Expiry time of the message. Currently it is always 4 weeks.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;

  /**
   * The arbitrary payload set in the [Send
   * API](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message).
   *
   * @generated from field: map<string, string> data = 4;
   */
  data: { [key: string]: string };
};

/**
 * Describes the message google.firebase.fcm.connection.v1alpha1.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_google_firebase_fcm_connection_v1alpha1_connection_api, 3);

/**
 * FCM's service to create client connections to send/receive messages.
 *
 * @generated from service google.firebase.fcm.connection.v1alpha1.ConnectionApi
 */
export const ConnectionApi: GenService<{
  /**
   * Creates a streaming connection with FCM to send messages and their
   * respective ACKs.
   *
   * The client credentials need to be passed in the [gRPC
   * Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
   * of the header is:
   *   Key: "authorization"
   *   Value: "Checkin [client_id:secret]"
   *
   *
   * The project's API key also needs to be sent to authorize the project.
   * That can be set in the X-Goog-Api-Key Metadata header.
   *
   * @generated from rpc google.firebase.fcm.connection.v1alpha1.ConnectionApi.Connect
   */
  connect: {
    methodKind: "bidi_streaming";
    input: typeof UpstreamRequestSchema;
    output: typeof DownstreamResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_firebase_fcm_connection_v1alpha1_connection_api, 0);

