// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/bigtable/admin/v2/bigtable_table_admin.proto (package google.bigtable.admin.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../api/annotations_pb";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../api/resource_pb";
import type { OperationProgress } from "./common_pb";
import { file_google_bigtable_admin_v2_common } from "./common_pb";
import type { AuthorizedView, AuthorizedView_ResponseView, AuthorizedViewSchema, Backup, BackupInfo, BackupSchema, ColumnFamily, RestoreSourceType, Snapshot, SnapshotSchema, Table, Table_View, TableSchema } from "./table_pb";
import { file_google_bigtable_admin_v2_table } from "./table_pb";
import type { GetIamPolicyRequestSchema, SetIamPolicyRequestSchema, TestIamPermissionsRequestSchema, TestIamPermissionsResponseSchema } from "../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../iam/v1/iam_policy_pb";
import type { PolicySchema } from "../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../iam/v1/policy_pb";
import type { OperationSchema } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Duration, EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/bigtable/admin/v2/bigtable_table_admin.proto.
 */
export const file_google_bigtable_admin_v2_bigtable_table_admin: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_bigtable_admin_v2_common, file_google_bigtable_admin_v2_table, file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * The request for
 * [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable].
 *
 * @generated from message google.bigtable.admin.v2.RestoreTableRequest
 */
export type RestoreTableRequest = Message<"google.bigtable.admin.v2.RestoreTableRequest"> & {
  /**
   * Required. The name of the instance in which to create the restored
   * table. Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The id of the table to create and restore to. This
   * table must not already exist. The `table_id` appended to
   * `parent` forms the full table name of the form
   * `projects/<project>/instances/<instance>/tables/<table_id>`.
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Required. The source from which to restore.
   *
   * @generated from oneof google.bigtable.admin.v2.RestoreTableRequest.source
   */
  source: {
    /**
     * Name of the backup from which to restore.  Values are of the form
     * `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
     *
     * @generated from field: string backup = 3;
     */
    value: string;
    case: "backup";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.bigtable.admin.v2.RestoreTableRequest.
 * Use `create(RestoreTableRequestSchema)` to create a new message.
 */
export const RestoreTableRequestSchema: GenMessage<RestoreTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 0);

/**
 * Metadata type for the long-running operation returned by
 * [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable].
 *
 * @generated from message google.bigtable.admin.v2.RestoreTableMetadata
 */
export type RestoreTableMetadata = Message<"google.bigtable.admin.v2.RestoreTableMetadata"> & {
  /**
   * Name of the table being created and restored to.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The type of the restore source.
   *
   * @generated from field: google.bigtable.admin.v2.RestoreSourceType source_type = 2;
   */
  sourceType: RestoreSourceType;

  /**
   * Information about the source used to restore the table, as specified by
   * `source` in
   * [RestoreTableRequest][google.bigtable.admin.v2.RestoreTableRequest].
   *
   * @generated from oneof google.bigtable.admin.v2.RestoreTableMetadata.source_info
   */
  sourceInfo: {
    /**
     * @generated from field: google.bigtable.admin.v2.BackupInfo backup_info = 3;
     */
    value: BackupInfo;
    case: "backupInfo";
  } | { case: undefined; value?: undefined };

  /**
   * If exists, the name of the long-running operation that will be used to
   * track the post-restore optimization process to optimize the performance of
   * the restored table. The metadata type of the long-running operation is
   * [OptimizeRestoreTableMetadata][]. The response type is
   * [Empty][google.protobuf.Empty]. This long-running operation may be
   * automatically created by the system if applicable after the
   * RestoreTable long-running operation completes successfully. This operation
   * may not be created if the table is already optimized or the restore was
   * not successful.
   *
   * @generated from field: string optimize_table_operation_name = 4;
   */
  optimizeTableOperationName: string;

  /**
   * The progress of the
   * [RestoreTable][google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable]
   * operation.
   *
   * @generated from field: google.bigtable.admin.v2.OperationProgress progress = 5;
   */
  progress?: OperationProgress;
};

/**
 * Describes the message google.bigtable.admin.v2.RestoreTableMetadata.
 * Use `create(RestoreTableMetadataSchema)` to create a new message.
 */
export const RestoreTableMetadataSchema: GenMessage<RestoreTableMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 1);

/**
 * Metadata type for the long-running operation used to track the progress
 * of optimizations performed on a newly restored table. This long-running
 * operation is automatically created by the system after the successful
 * completion of a table restore, and cannot be cancelled.
 *
 * @generated from message google.bigtable.admin.v2.OptimizeRestoredTableMetadata
 */
export type OptimizeRestoredTableMetadata = Message<"google.bigtable.admin.v2.OptimizeRestoredTableMetadata"> & {
  /**
   * Name of the restored table being optimized.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The progress of the post-restore optimizations.
   *
   * @generated from field: google.bigtable.admin.v2.OperationProgress progress = 2;
   */
  progress?: OperationProgress;
};

/**
 * Describes the message google.bigtable.admin.v2.OptimizeRestoredTableMetadata.
 * Use `create(OptimizeRestoredTableMetadataSchema)` to create a new message.
 */
export const OptimizeRestoredTableMetadataSchema: GenMessage<OptimizeRestoredTableMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 2);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CreateTable][google.bigtable.admin.v2.BigtableTableAdmin.CreateTable]
 *
 * @generated from message google.bigtable.admin.v2.CreateTableRequest
 */
export type CreateTableRequest = Message<"google.bigtable.admin.v2.CreateTableRequest"> & {
  /**
   * Required. The unique name of the instance in which to create the table.
   * Values are of the form `projects/{project}/instances/{instance}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The name by which the new table should be referred to within the
   * parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   * Maximum 50 characters.
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Required. The Table to create.
   *
   * @generated from field: google.bigtable.admin.v2.Table table = 3;
   */
  table?: Table;

  /**
   * The optional list of row keys that will be used to initially split the
   * table into several tablets (tablets are similar to HBase regions).
   * Given two split keys, `s1` and `s2`, three tablets will be created,
   * spanning the key ranges: `[, s1), [s1, s2), [s2, )`.
   *
   * Example:
   *
   * * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",`
   *                `"other", "zz"]`
   * * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]`
   * * Key assignment:
   *     - Tablet 1 `[, apple)                => {"a"}.`
   *     - Tablet 2 `[apple, customer_1)      => {"apple", "custom"}.`
   *     - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.`
   *     - Tablet 4 `[customer_2, other)      => {"customer_2"}.`
   *     - Tablet 5 `[other, )                => {"other", "zz"}.`
   *
   * @generated from field: repeated google.bigtable.admin.v2.CreateTableRequest.Split initial_splits = 4;
   */
  initialSplits: CreateTableRequest_Split[];
};

/**
 * Describes the message google.bigtable.admin.v2.CreateTableRequest.
 * Use `create(CreateTableRequestSchema)` to create a new message.
 */
export const CreateTableRequestSchema: GenMessage<CreateTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 3);

/**
 * An initial split point for a newly created table.
 *
 * @generated from message google.bigtable.admin.v2.CreateTableRequest.Split
 */
export type CreateTableRequest_Split = Message<"google.bigtable.admin.v2.CreateTableRequest.Split"> & {
  /**
   * Row key to use as an initial tablet boundary.
   *
   * @generated from field: bytes key = 1;
   */
  key: Uint8Array;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateTableRequest.Split.
 * Use `create(CreateTableRequest_SplitSchema)` to create a new message.
 */
export const CreateTableRequest_SplitSchema: GenMessage<CreateTableRequest_Split> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 3, 0);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshot]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.CreateTableFromSnapshotRequest
 */
export type CreateTableFromSnapshotRequest = Message<"google.bigtable.admin.v2.CreateTableFromSnapshotRequest"> & {
  /**
   * Required. The unique name of the instance in which to create the table.
   * Values are of the form `projects/{project}/instances/{instance}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The name by which the new table should be referred to within the
   * parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`.
   *
   * @generated from field: string table_id = 2;
   */
  tableId: string;

  /**
   * Required. The unique name of the snapshot from which to restore the table.
   * The snapshot and the table must be in the same instance. Values are of the
   * form
   * `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   *
   * @generated from field: string source_snapshot = 3;
   */
  sourceSnapshot: string;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateTableFromSnapshotRequest.
 * Use `create(CreateTableFromSnapshotRequestSchema)` to create a new message.
 */
export const CreateTableFromSnapshotRequestSchema: GenMessage<CreateTableFromSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 4);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange][google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange]
 *
 * @generated from message google.bigtable.admin.v2.DropRowRangeRequest
 */
export type DropRowRangeRequest = Message<"google.bigtable.admin.v2.DropRowRangeRequest"> & {
  /**
   * Required. The unique name of the table on which to drop a range of rows.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Delete all rows or by prefix.
   *
   * @generated from oneof google.bigtable.admin.v2.DropRowRangeRequest.target
   */
  target: {
    /**
     * Delete all rows that start with this row key prefix. Prefix cannot be
     * zero length.
     *
     * @generated from field: bytes row_key_prefix = 2;
     */
    value: Uint8Array;
    case: "rowKeyPrefix";
  } | {
    /**
     * Delete all rows in the table. Setting this to false is a no-op.
     *
     * @generated from field: bool delete_all_data_from_table = 3;
     */
    value: boolean;
    case: "deleteAllDataFromTable";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.bigtable.admin.v2.DropRowRangeRequest.
 * Use `create(DropRowRangeRequestSchema)` to create a new message.
 */
export const DropRowRangeRequestSchema: GenMessage<DropRowRangeRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 5);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
 *
 * @generated from message google.bigtable.admin.v2.ListTablesRequest
 */
export type ListTablesRequest = Message<"google.bigtable.admin.v2.ListTablesRequest"> & {
  /**
   * Required. The unique name of the instance for which tables should be
   * listed. Values are of the form `projects/{project}/instances/{instance}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The view to be applied to the returned tables' fields.
   * NAME_ONLY view (default) and REPLICATION_VIEW are supported.
   *
   * @generated from field: google.bigtable.admin.v2.Table.View view = 2;
   */
  view: Table_View;

  /**
   * Maximum number of results per page.
   *
   * A page_size of zero lets the server choose the number of items to return.
   * A page_size which is strictly positive will return at most that many items.
   * A negative page_size will cause an error.
   *
   * Following the first request, subsequent paginated calls are not required
   * to pass a page_size. If a page_size is set in subsequent calls, it must
   * match the page_size given in the first request.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListTablesRequest.
 * Use `create(ListTablesRequestSchema)` to create a new message.
 */
export const ListTablesRequestSchema: GenMessage<ListTablesRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 6);

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListTables][google.bigtable.admin.v2.BigtableTableAdmin.ListTables]
 *
 * @generated from message google.bigtable.admin.v2.ListTablesResponse
 */
export type ListTablesResponse = Message<"google.bigtable.admin.v2.ListTablesResponse"> & {
  /**
   * The tables present in the requested instance.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Table tables = 1;
   */
  tables: Table[];

  /**
   * Set if not all tables could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListTablesResponse.
 * Use `create(ListTablesResponseSchema)` to create a new message.
 */
export const ListTablesResponseSchema: GenMessage<ListTablesResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 7);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GetTable][google.bigtable.admin.v2.BigtableTableAdmin.GetTable]
 *
 * @generated from message google.bigtable.admin.v2.GetTableRequest
 */
export type GetTableRequest = Message<"google.bigtable.admin.v2.GetTableRequest"> & {
  /**
   * Required. The unique name of the requested table.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The view to be applied to the returned table's fields.
   * Defaults to `SCHEMA_VIEW` if unspecified.
   *
   * @generated from field: google.bigtable.admin.v2.Table.View view = 2;
   */
  view: Table_View;
};

/**
 * Describes the message google.bigtable.admin.v2.GetTableRequest.
 * Use `create(GetTableRequestSchema)` to create a new message.
 */
export const GetTableRequestSchema: GenMessage<GetTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 8);

/**
 * The request for
 * [UpdateTable][google.bigtable.admin.v2.BigtableTableAdmin.UpdateTable].
 *
 * @generated from message google.bigtable.admin.v2.UpdateTableRequest
 */
export type UpdateTableRequest = Message<"google.bigtable.admin.v2.UpdateTableRequest"> & {
  /**
   * Required. The table to update.
   * The table's `name` field is used to identify the table to update.
   *
   * @generated from field: google.bigtable.admin.v2.Table table = 1;
   */
  table?: Table;

  /**
   * Required. The list of fields to update.
   * A mask specifying which fields (e.g. `change_stream_config`) in the `table`
   * field should be updated. This mask is relative to the `table` field, not to
   * the request message. The wildcard (*) path is currently not supported.
   * Currently UpdateTable is only supported for the following fields:
   *
   * * `change_stream_config`
   * * `change_stream_config.retention_period`
   * * `deletion_protection`
   *
   * If `column_families` is set in `update_mask`, it will return an
   * UNIMPLEMENTED error.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.bigtable.admin.v2.UpdateTableRequest.
 * Use `create(UpdateTableRequestSchema)` to create a new message.
 */
export const UpdateTableRequestSchema: GenMessage<UpdateTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 9);

/**
 * Metadata type for the operation returned by
 * [UpdateTable][google.bigtable.admin.v2.BigtableTableAdmin.UpdateTable].
 *
 * @generated from message google.bigtable.admin.v2.UpdateTableMetadata
 */
export type UpdateTableMetadata = Message<"google.bigtable.admin.v2.UpdateTableMetadata"> & {
  /**
   * The name of the table being updated.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The time at which this operation started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * If set, the time at which this operation finished or was canceled.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.UpdateTableMetadata.
 * Use `create(UpdateTableMetadataSchema)` to create a new message.
 */
export const UpdateTableMetadataSchema: GenMessage<UpdateTableMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 10);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable]
 *
 * @generated from message google.bigtable.admin.v2.DeleteTableRequest
 */
export type DeleteTableRequest = Message<"google.bigtable.admin.v2.DeleteTableRequest"> & {
  /**
   * Required. The unique name of the table to be deleted.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.DeleteTableRequest.
 * Use `create(DeleteTableRequestSchema)` to create a new message.
 */
export const DeleteTableRequestSchema: GenMessage<DeleteTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 11);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.UndeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.UndeleteTable]
 *
 * @generated from message google.bigtable.admin.v2.UndeleteTableRequest
 */
export type UndeleteTableRequest = Message<"google.bigtable.admin.v2.UndeleteTableRequest"> & {
  /**
   * Required. The unique name of the table to be restored.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.UndeleteTableRequest.
 * Use `create(UndeleteTableRequestSchema)` to create a new message.
 */
export const UndeleteTableRequestSchema: GenMessage<UndeleteTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 12);

/**
 * Metadata type for the operation returned by
 * [google.bigtable.admin.v2.BigtableTableAdmin.UndeleteTable][google.bigtable.admin.v2.BigtableTableAdmin.UndeleteTable].
 *
 * @generated from message google.bigtable.admin.v2.UndeleteTableMetadata
 */
export type UndeleteTableMetadata = Message<"google.bigtable.admin.v2.UndeleteTableMetadata"> & {
  /**
   * The name of the table being restored.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The time at which this operation started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * If set, the time at which this operation finished or was cancelled.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.UndeleteTableMetadata.
 * Use `create(UndeleteTableMetadataSchema)` to create a new message.
 */
export const UndeleteTableMetadataSchema: GenMessage<UndeleteTableMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 13);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies][google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies]
 *
 * @generated from message google.bigtable.admin.v2.ModifyColumnFamiliesRequest
 */
export type ModifyColumnFamiliesRequest = Message<"google.bigtable.admin.v2.ModifyColumnFamiliesRequest"> & {
  /**
   * Required. The unique name of the table whose families should be modified.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. Modifications to be atomically applied to the specified table's
   * families. Entries are applied in order, meaning that earlier modifications
   * can be masked by later ones (in the case of repeated updates to the same
   * family, for example).
   *
   * @generated from field: repeated google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification modifications = 2;
   */
  modifications: ModifyColumnFamiliesRequest_Modification[];

  /**
   * Optional. If true, ignore safety checks when modifying the column families.
   *
   * @generated from field: bool ignore_warnings = 3;
   */
  ignoreWarnings: boolean;
};

/**
 * Describes the message google.bigtable.admin.v2.ModifyColumnFamiliesRequest.
 * Use `create(ModifyColumnFamiliesRequestSchema)` to create a new message.
 */
export const ModifyColumnFamiliesRequestSchema: GenMessage<ModifyColumnFamiliesRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 14);

/**
 * A create, update, or delete of a particular column family.
 *
 * @generated from message google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification
 */
export type ModifyColumnFamiliesRequest_Modification = Message<"google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification"> & {
  /**
   * The ID of the column family to be modified.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Column family modifications.
   *
   * @generated from oneof google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.mod
   */
  mod: {
    /**
     * Create a new column family with the specified schema, or fail if
     * one already exists with the given ID.
     *
     * @generated from field: google.bigtable.admin.v2.ColumnFamily create = 2;
     */
    value: ColumnFamily;
    case: "create";
  } | {
    /**
     * Update an existing column family to the specified schema, or fail
     * if no column family exists with the given ID.
     *
     * @generated from field: google.bigtable.admin.v2.ColumnFamily update = 3;
     */
    value: ColumnFamily;
    case: "update";
  } | {
    /**
     * Drop (delete) the column family with the given ID, or fail if no such
     * family exists.
     *
     * @generated from field: bool drop = 4;
     */
    value: boolean;
    case: "drop";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. A mask specifying which fields (e.g. `gc_rule`) in the `update`
   * mod should be updated, ignored for other modification types. If unset or
   * empty, we treat it as updating `gc_rule` to be backward compatible.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 6;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.bigtable.admin.v2.ModifyColumnFamiliesRequest.Modification.
 * Use `create(ModifyColumnFamiliesRequest_ModificationSchema)` to create a new message.
 */
export const ModifyColumnFamiliesRequest_ModificationSchema: GenMessage<ModifyColumnFamiliesRequest_Modification> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 14, 0);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken][google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken]
 *
 * @generated from message google.bigtable.admin.v2.GenerateConsistencyTokenRequest
 */
export type GenerateConsistencyTokenRequest = Message<"google.bigtable.admin.v2.GenerateConsistencyTokenRequest"> & {
  /**
   * Required. The unique name of the Table for which to create a consistency
   * token. Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.GenerateConsistencyTokenRequest.
 * Use `create(GenerateConsistencyTokenRequestSchema)` to create a new message.
 */
export const GenerateConsistencyTokenRequestSchema: GenMessage<GenerateConsistencyTokenRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 15);

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken][google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken]
 *
 * @generated from message google.bigtable.admin.v2.GenerateConsistencyTokenResponse
 */
export type GenerateConsistencyTokenResponse = Message<"google.bigtable.admin.v2.GenerateConsistencyTokenResponse"> & {
  /**
   * The generated consistency token.
   *
   * @generated from field: string consistency_token = 1;
   */
  consistencyToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.GenerateConsistencyTokenResponse.
 * Use `create(GenerateConsistencyTokenResponseSchema)` to create a new message.
 */
export const GenerateConsistencyTokenResponseSchema: GenMessage<GenerateConsistencyTokenResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 16);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency][google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency]
 *
 * @generated from message google.bigtable.admin.v2.CheckConsistencyRequest
 */
export type CheckConsistencyRequest = Message<"google.bigtable.admin.v2.CheckConsistencyRequest"> & {
  /**
   * Required. The unique name of the Table for which to check replication
   * consistency. Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The token created using GenerateConsistencyToken for the Table.
   *
   * @generated from field: string consistency_token = 2;
   */
  consistencyToken: string;

  /**
   * Which type of read needs to consistently observe which type of write?
   * Default: `standard_read_remote_writes`
   *
   * @generated from oneof google.bigtable.admin.v2.CheckConsistencyRequest.mode
   */
  mode: {
    /**
     * Checks that reads using an app profile with `StandardIsolation` can
     * see all writes committed before the token was created, even if the
     * read and write target different clusters.
     *
     * @generated from field: google.bigtable.admin.v2.StandardReadRemoteWrites standard_read_remote_writes = 3;
     */
    value: StandardReadRemoteWrites;
    case: "standardReadRemoteWrites";
  } | {
    /**
     * Checks that reads using an app profile with `DataBoostIsolationReadOnly`
     * can see all writes committed before the token was created, but only if
     * the read and write target the same cluster.
     *
     * @generated from field: google.bigtable.admin.v2.DataBoostReadLocalWrites data_boost_read_local_writes = 4;
     */
    value: DataBoostReadLocalWrites;
    case: "dataBoostReadLocalWrites";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.bigtable.admin.v2.CheckConsistencyRequest.
 * Use `create(CheckConsistencyRequestSchema)` to create a new message.
 */
export const CheckConsistencyRequestSchema: GenMessage<CheckConsistencyRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 17);

/**
 * Checks that all writes before the consistency token was generated are
 * replicated in every cluster and readable.
 *
 * @generated from message google.bigtable.admin.v2.StandardReadRemoteWrites
 */
export type StandardReadRemoteWrites = Message<"google.bigtable.admin.v2.StandardReadRemoteWrites"> & {
};

/**
 * Describes the message google.bigtable.admin.v2.StandardReadRemoteWrites.
 * Use `create(StandardReadRemoteWritesSchema)` to create a new message.
 */
export const StandardReadRemoteWritesSchema: GenMessage<StandardReadRemoteWrites> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 18);

/**
 * Checks that all writes before the consistency token was generated in the same
 * cluster are readable by Databoost.
 *
 * @generated from message google.bigtable.admin.v2.DataBoostReadLocalWrites
 */
export type DataBoostReadLocalWrites = Message<"google.bigtable.admin.v2.DataBoostReadLocalWrites"> & {
};

/**
 * Describes the message google.bigtable.admin.v2.DataBoostReadLocalWrites.
 * Use `create(DataBoostReadLocalWritesSchema)` to create a new message.
 */
export const DataBoostReadLocalWritesSchema: GenMessage<DataBoostReadLocalWrites> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 19);

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency][google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency]
 *
 * @generated from message google.bigtable.admin.v2.CheckConsistencyResponse
 */
export type CheckConsistencyResponse = Message<"google.bigtable.admin.v2.CheckConsistencyResponse"> & {
  /**
   * True only if the token is consistent. A token is consistent if replication
   * has caught up with the restrictions specified in the request.
   *
   * @generated from field: bool consistent = 1;
   */
  consistent: boolean;
};

/**
 * Describes the message google.bigtable.admin.v2.CheckConsistencyResponse.
 * Use `create(CheckConsistencyResponseSchema)` to create a new message.
 */
export const CheckConsistencyResponseSchema: GenMessage<CheckConsistencyResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 20);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTable][google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTable]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.SnapshotTableRequest
 */
export type SnapshotTableRequest = Message<"google.bigtable.admin.v2.SnapshotTableRequest"> & {
  /**
   * Required. The unique name of the table to have the snapshot taken.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The name of the cluster where the snapshot will be created in.
   * Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *
   * @generated from field: string cluster = 2;
   */
  cluster: string;

  /**
   * Required. The ID by which the new snapshot should be referred to within the
   * parent cluster, e.g., `mysnapshot` of the form:
   * `[_a-zA-Z0-9][-_.a-zA-Z0-9]*` rather than
   * `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/mysnapshot`.
   *
   * @generated from field: string snapshot_id = 3;
   */
  snapshotId: string;

  /**
   * The amount of time that the new snapshot can stay active after it is
   * created. Once 'ttl' expires, the snapshot will get deleted. The maximum
   * amount of time a snapshot can stay active is 7 days. If 'ttl' is not
   * specified, the default value of 24 hours will be used.
   *
   * @generated from field: google.protobuf.Duration ttl = 4;
   */
  ttl?: Duration;

  /**
   * Description of the snapshot.
   *
   * @generated from field: string description = 5;
   */
  description: string;
};

/**
 * Describes the message google.bigtable.admin.v2.SnapshotTableRequest.
 * Use `create(SnapshotTableRequestSchema)` to create a new message.
 */
export const SnapshotTableRequestSchema: GenMessage<SnapshotTableRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 21);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshot]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.GetSnapshotRequest
 */
export type GetSnapshotRequest = Message<"google.bigtable.admin.v2.GetSnapshotRequest"> & {
  /**
   * Required. The unique name of the requested snapshot.
   * Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.GetSnapshotRequest.
 * Use `create(GetSnapshotRequestSchema)` to create a new message.
 */
export const GetSnapshotRequestSchema: GenMessage<GetSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 22);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots][google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.ListSnapshotsRequest
 */
export type ListSnapshotsRequest = Message<"google.bigtable.admin.v2.ListSnapshotsRequest"> & {
  /**
   * Required. The unique name of the cluster for which snapshots should be
   * listed. Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}`.
   * Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
   * e.g., `projects/{project}/instances/{instance}/clusters/-`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of snapshots to return per page.
   * CURRENTLY UNIMPLEMENTED AND IGNORED.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListSnapshotsRequest.
 * Use `create(ListSnapshotsRequestSchema)` to create a new message.
 */
export const ListSnapshotsRequestSchema: GenMessage<ListSnapshotsRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 23);

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots][google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.ListSnapshotsResponse
 */
export type ListSnapshotsResponse = Message<"google.bigtable.admin.v2.ListSnapshotsResponse"> & {
  /**
   * The snapshots present in the requested cluster.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Snapshot snapshots = 1;
   */
  snapshots: Snapshot[];

  /**
   * Set if not all snapshots could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListSnapshotsResponse.
 * Use `create(ListSnapshotsResponseSchema)` to create a new message.
 */
export const ListSnapshotsResponseSchema: GenMessage<ListSnapshotsResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 24);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshot][google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshot]
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.DeleteSnapshotRequest
 */
export type DeleteSnapshotRequest = Message<"google.bigtable.admin.v2.DeleteSnapshotRequest"> & {
  /**
   * Required. The unique name of the snapshot to be deleted.
   * Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.DeleteSnapshotRequest.
 * Use `create(DeleteSnapshotRequestSchema)` to create a new message.
 */
export const DeleteSnapshotRequestSchema: GenMessage<DeleteSnapshotRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 25);

/**
 * The metadata for the Operation returned by SnapshotTable.
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.SnapshotTableMetadata
 */
export type SnapshotTableMetadata = Message<"google.bigtable.admin.v2.SnapshotTableMetadata"> & {
  /**
   * The request that prompted the initiation of this SnapshotTable operation.
   *
   * @generated from field: google.bigtable.admin.v2.SnapshotTableRequest original_request = 1;
   */
  originalRequest?: SnapshotTableRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.SnapshotTableMetadata.
 * Use `create(SnapshotTableMetadataSchema)` to create a new message.
 */
export const SnapshotTableMetadataSchema: GenMessage<SnapshotTableMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 26);

/**
 * The metadata for the Operation returned by CreateTableFromSnapshot.
 *
 * Note: This is a private alpha release of Cloud Bigtable snapshots. This
 * feature is not currently available to most Cloud Bigtable customers. This
 * feature might be changed in backward-incompatible ways and is not recommended
 * for production use. It is not subject to any SLA or deprecation policy.
 *
 * @generated from message google.bigtable.admin.v2.CreateTableFromSnapshotMetadata
 */
export type CreateTableFromSnapshotMetadata = Message<"google.bigtable.admin.v2.CreateTableFromSnapshotMetadata"> & {
  /**
   * The request that prompted the initiation of this CreateTableFromSnapshot
   * operation.
   *
   * @generated from field: google.bigtable.admin.v2.CreateTableFromSnapshotRequest original_request = 1;
   */
  originalRequest?: CreateTableFromSnapshotRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateTableFromSnapshotMetadata.
 * Use `create(CreateTableFromSnapshotMetadataSchema)` to create a new message.
 */
export const CreateTableFromSnapshotMetadataSchema: GenMessage<CreateTableFromSnapshotMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 27);

/**
 * The request for
 * [CreateBackup][google.bigtable.admin.v2.BigtableTableAdmin.CreateBackup].
 *
 * @generated from message google.bigtable.admin.v2.CreateBackupRequest
 */
export type CreateBackupRequest = Message<"google.bigtable.admin.v2.CreateBackupRequest"> & {
  /**
   * Required. This must be one of the clusters in the instance in which this
   * table is located. The backup will be stored in this cluster. Values are
   * of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The id of the backup to be created. The `backup_id` along with
   * the parent `parent` are combined as {parent}/backups/{backup_id} to create
   * the full backup name, of the form:
   * `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
   * This string must be between 1 and 50 characters in length and match the
   * regex [_a-zA-Z0-9][-_.a-zA-Z0-9]*.
   *
   * @generated from field: string backup_id = 2;
   */
  backupId: string;

  /**
   * Required. The backup to create.
   *
   * @generated from field: google.bigtable.admin.v2.Backup backup = 3;
   */
  backup?: Backup;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateBackupRequest.
 * Use `create(CreateBackupRequestSchema)` to create a new message.
 */
export const CreateBackupRequestSchema: GenMessage<CreateBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 28);

/**
 * Metadata type for the operation returned by
 * [CreateBackup][google.bigtable.admin.v2.BigtableTableAdmin.CreateBackup].
 *
 * @generated from message google.bigtable.admin.v2.CreateBackupMetadata
 */
export type CreateBackupMetadata = Message<"google.bigtable.admin.v2.CreateBackupMetadata"> & {
  /**
   * The name of the backup being created.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The name of the table the backup is created from.
   *
   * @generated from field: string source_table = 2;
   */
  sourceTable: string;

  /**
   * The time at which this operation started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * If set, the time at which this operation finished or was cancelled.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateBackupMetadata.
 * Use `create(CreateBackupMetadataSchema)` to create a new message.
 */
export const CreateBackupMetadataSchema: GenMessage<CreateBackupMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 29);

/**
 * The request for
 * [UpdateBackup][google.bigtable.admin.v2.BigtableTableAdmin.UpdateBackup].
 *
 * @generated from message google.bigtable.admin.v2.UpdateBackupRequest
 */
export type UpdateBackupRequest = Message<"google.bigtable.admin.v2.UpdateBackupRequest"> & {
  /**
   * Required. The backup to update. `backup.name`, and the fields to be updated
   * as specified by `update_mask` are required. Other fields are ignored.
   * Update is only supported for the following fields:
   *
   *  * `backup.expire_time`.
   *
   * @generated from field: google.bigtable.admin.v2.Backup backup = 1;
   */
  backup?: Backup;

  /**
   * Required. A mask specifying which fields (e.g. `expire_time`) in the
   * Backup resource should be updated. This mask is relative to the Backup
   * resource, not to the request message. The field mask must always be
   * specified; this prevents any future fields from being erased accidentally
   * by clients that do not know about them.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.bigtable.admin.v2.UpdateBackupRequest.
 * Use `create(UpdateBackupRequestSchema)` to create a new message.
 */
export const UpdateBackupRequestSchema: GenMessage<UpdateBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 30);

/**
 * The request for
 * [GetBackup][google.bigtable.admin.v2.BigtableTableAdmin.GetBackup].
 *
 * @generated from message google.bigtable.admin.v2.GetBackupRequest
 */
export type GetBackupRequest = Message<"google.bigtable.admin.v2.GetBackupRequest"> & {
  /**
   * Required. Name of the backup.
   * Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.GetBackupRequest.
 * Use `create(GetBackupRequestSchema)` to create a new message.
 */
export const GetBackupRequestSchema: GenMessage<GetBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 31);

/**
 * The request for
 * [DeleteBackup][google.bigtable.admin.v2.BigtableTableAdmin.DeleteBackup].
 *
 * @generated from message google.bigtable.admin.v2.DeleteBackupRequest
 */
export type DeleteBackupRequest = Message<"google.bigtable.admin.v2.DeleteBackupRequest"> & {
  /**
   * Required. Name of the backup to delete.
   * Values are of the form
   * `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.bigtable.admin.v2.DeleteBackupRequest.
 * Use `create(DeleteBackupRequestSchema)` to create a new message.
 */
export const DeleteBackupRequestSchema: GenMessage<DeleteBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 32);

/**
 * The request for
 * [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups].
 *
 * @generated from message google.bigtable.admin.v2.ListBackupsRequest
 */
export type ListBackupsRequest = Message<"google.bigtable.admin.v2.ListBackupsRequest"> & {
  /**
   * Required. The cluster to list backups from.  Values are of the
   * form `projects/{project}/instances/{instance}/clusters/{cluster}`.
   * Use `{cluster} = '-'` to list backups for all clusters in an instance,
   * e.g., `projects/{project}/instances/{instance}/clusters/-`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * A filter expression that filters backups listed in the response.
   * The expression must specify the field name, a comparison operator,
   * and the value that you want to use for filtering. The value must be a
   * string, a number, or a boolean. The comparison operator must be
   * <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
   * roughly synonymous with equality. Filter rules are case insensitive.
   *
   * The fields eligible for filtering are:
   *
   * * `name`
   * * `source_table`
   * * `state`
   * * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   * * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   * * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
   * * `size_bytes`
   *
   * To filter on multiple expressions, provide each separate expression within
   * parentheses. By default, each expression is an AND expression. However,
   * you can include AND, OR, and NOT expressions explicitly.
   *
   * Some examples of using filters are:
   *
   * * `name:"exact"` --> The backup's name is the string "exact".
   * * `name:howl` --> The backup's name contains the string "howl".
   * * `source_table:prod`
   *        --> The source_table's name contains the string "prod".
   * * `state:CREATING` --> The backup is pending creation.
   * * `state:READY` --> The backup is fully created and ready for use.
   * * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
   *        --> The backup name contains the string "howl" and start_time
   *            of the backup is before 2018-03-28T14:50:00Z.
   * * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * An expression for specifying the sort order of the results of the request.
   * The string value should specify one or more fields in
   * [Backup][google.bigtable.admin.v2.Backup]. The full syntax is described at
   * https://aip.dev/132#ordering.
   *
   * Fields supported are:
   *
   * * name
   * * source_table
   * * expire_time
   * * start_time
   * * end_time
   * * size_bytes
   * * state
   *
   * For example, "start_time". The default sorting order is ascending.
   * To specify descending order for the field, a suffix " desc" should
   * be appended to the field name. For example, "start_time desc".
   * Redundant space characters in the syntax are insigificant.
   *
   * If order_by is empty, results will be sorted by `start_time` in descending
   * order starting from the most recently created backup.
   *
   * @generated from field: string order_by = 3;
   */
  orderBy: string;

  /**
   * Number of backups to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.bigtable.admin.v2.ListBackupsResponse.next_page_token]
   * from a previous
   * [ListBackupsResponse][google.bigtable.admin.v2.ListBackupsResponse] to the
   * same `parent` and with the same `filter`.
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListBackupsRequest.
 * Use `create(ListBackupsRequestSchema)` to create a new message.
 */
export const ListBackupsRequestSchema: GenMessage<ListBackupsRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 33);

/**
 * The response for
 * [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups].
 *
 * @generated from message google.bigtable.admin.v2.ListBackupsResponse
 */
export type ListBackupsResponse = Message<"google.bigtable.admin.v2.ListBackupsResponse"> & {
  /**
   * The list of matching backups.
   *
   * @generated from field: repeated google.bigtable.admin.v2.Backup backups = 1;
   */
  backups: Backup[];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListBackups][google.bigtable.admin.v2.BigtableTableAdmin.ListBackups] call
   * to fetch more of the matching backups.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListBackupsResponse.
 * Use `create(ListBackupsResponseSchema)` to create a new message.
 */
export const ListBackupsResponseSchema: GenMessage<ListBackupsResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 34);

/**
 * The request for
 * [CopyBackup][google.bigtable.admin.v2.BigtableTableAdmin.CopyBackup].
 *
 * @generated from message google.bigtable.admin.v2.CopyBackupRequest
 */
export type CopyBackupRequest = Message<"google.bigtable.admin.v2.CopyBackupRequest"> & {
  /**
   * Required. The name of the destination cluster that will contain the backup
   * copy. The cluster must already exist. Values are of the form:
   * `projects/{project}/instances/{instance}/clusters/{cluster}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The id of the new backup. The `backup_id` along with `parent`
   * are combined as {parent}/backups/{backup_id} to create the full backup
   * name, of the form:
   * `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
   * This string must be between 1 and 50 characters in length and match the
   * regex [_a-zA-Z0-9][-_.a-zA-Z0-9]*.
   *
   * @generated from field: string backup_id = 2;
   */
  backupId: string;

  /**
   * Required. The source backup to be copied from.
   * The source backup needs to be in READY state for it to be copied.
   * Copying a copied backup is not allowed.
   * Once CopyBackup is in progress, the source backup cannot be deleted or
   * cleaned up on expiration until CopyBackup is finished.
   * Values are of the form:
   * `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
   *
   * @generated from field: string source_backup = 3;
   */
  sourceBackup: string;

  /**
   * Required. Required. The expiration time of the copied backup with
   * microsecond granularity that must be at least 6 hours and at most 30 days
   * from the time the request is received. Once the `expire_time` has
   * passed, Cloud Bigtable will delete the backup and free the resources used
   * by the backup.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.CopyBackupRequest.
 * Use `create(CopyBackupRequestSchema)` to create a new message.
 */
export const CopyBackupRequestSchema: GenMessage<CopyBackupRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 35);

/**
 * Metadata type for the google.longrunning.Operation returned by
 * [CopyBackup][google.bigtable.admin.v2.BigtableTableAdmin.CopyBackup].
 *
 * @generated from message google.bigtable.admin.v2.CopyBackupMetadata
 */
export type CopyBackupMetadata = Message<"google.bigtable.admin.v2.CopyBackupMetadata"> & {
  /**
   * The name of the backup being created through the copy operation.
   * Values are of the form
   * `projects/<project>/instances/<instance>/clusters/<cluster>/backups/<backup>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Information about the source backup that is being copied from.
   *
   * @generated from field: google.bigtable.admin.v2.BackupInfo source_backup_info = 2;
   */
  sourceBackupInfo?: BackupInfo;

  /**
   * The progress of the
   * [CopyBackup][google.bigtable.admin.v2.BigtableTableAdmin.CopyBackup]
   * operation.
   *
   * @generated from field: google.bigtable.admin.v2.OperationProgress progress = 3;
   */
  progress?: OperationProgress;
};

/**
 * Describes the message google.bigtable.admin.v2.CopyBackupMetadata.
 * Use `create(CopyBackupMetadataSchema)` to create a new message.
 */
export const CopyBackupMetadataSchema: GenMessage<CopyBackupMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 36);

/**
 * The request for
 * [CreateAuthorizedView][google.bigtable.admin.v2.BigtableTableAdmin.CreateAuthorizedView]
 *
 * @generated from message google.bigtable.admin.v2.CreateAuthorizedViewRequest
 */
export type CreateAuthorizedViewRequest = Message<"google.bigtable.admin.v2.CreateAuthorizedViewRequest"> & {
  /**
   * Required. This is the name of the table the AuthorizedView belongs to.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The id of the AuthorizedView to create. This AuthorizedView must
   * not already exist. The `authorized_view_id` appended to `parent` forms the
   * full AuthorizedView name of the form
   * `projects/{project}/instances/{instance}/tables/{table}/authorizedView/{authorized_view}`.
   *
   * @generated from field: string authorized_view_id = 2;
   */
  authorizedViewId: string;

  /**
   * Required. The AuthorizedView to create.
   *
   * @generated from field: google.bigtable.admin.v2.AuthorizedView authorized_view = 3;
   */
  authorizedView?: AuthorizedView;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateAuthorizedViewRequest.
 * Use `create(CreateAuthorizedViewRequestSchema)` to create a new message.
 */
export const CreateAuthorizedViewRequestSchema: GenMessage<CreateAuthorizedViewRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 37);

/**
 * The metadata for the Operation returned by CreateAuthorizedView.
 *
 * @generated from message google.bigtable.admin.v2.CreateAuthorizedViewMetadata
 */
export type CreateAuthorizedViewMetadata = Message<"google.bigtable.admin.v2.CreateAuthorizedViewMetadata"> & {
  /**
   * The request that prompted the initiation of this CreateInstance operation.
   *
   * @generated from field: google.bigtable.admin.v2.CreateAuthorizedViewRequest original_request = 1;
   */
  originalRequest?: CreateAuthorizedViewRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.CreateAuthorizedViewMetadata.
 * Use `create(CreateAuthorizedViewMetadataSchema)` to create a new message.
 */
export const CreateAuthorizedViewMetadataSchema: GenMessage<CreateAuthorizedViewMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 38);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListAuthorizedViews][google.bigtable.admin.v2.BigtableTableAdmin.ListAuthorizedViews]
 *
 * @generated from message google.bigtable.admin.v2.ListAuthorizedViewsRequest
 */
export type ListAuthorizedViewsRequest = Message<"google.bigtable.admin.v2.ListAuthorizedViewsRequest"> & {
  /**
   * Required. The unique name of the table for which AuthorizedViews should be
   * listed. Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. Maximum number of results per page.
   *
   * A page_size of zero lets the server choose the number of items to return.
   * A page_size which is strictly positive will return at most that many items.
   * A negative page_size will cause an error.
   *
   * Following the first request, subsequent paginated calls are not required
   * to pass a page_size. If a page_size is set in subsequent calls, it must
   * match the page_size given in the first request.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. The value of `next_page_token` returned by a previous call.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. The resource_view to be applied to the returned views' fields.
   * Default to NAME_ONLY.
   *
   * @generated from field: google.bigtable.admin.v2.AuthorizedView.ResponseView view = 4;
   */
  view: AuthorizedView_ResponseView;
};

/**
 * Describes the message google.bigtable.admin.v2.ListAuthorizedViewsRequest.
 * Use `create(ListAuthorizedViewsRequestSchema)` to create a new message.
 */
export const ListAuthorizedViewsRequestSchema: GenMessage<ListAuthorizedViewsRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 39);

/**
 * Response message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.ListAuthorizedViews][google.bigtable.admin.v2.BigtableTableAdmin.ListAuthorizedViews]
 *
 * @generated from message google.bigtable.admin.v2.ListAuthorizedViewsResponse
 */
export type ListAuthorizedViewsResponse = Message<"google.bigtable.admin.v2.ListAuthorizedViewsResponse"> & {
  /**
   * The AuthorizedViews present in the requested table.
   *
   * @generated from field: repeated google.bigtable.admin.v2.AuthorizedView authorized_views = 1;
   */
  authorizedViews: AuthorizedView[];

  /**
   * Set if not all tables could be returned in a single response.
   * Pass this value to `page_token` in another request to get the next
   * page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.bigtable.admin.v2.ListAuthorizedViewsResponse.
 * Use `create(ListAuthorizedViewsResponseSchema)` to create a new message.
 */
export const ListAuthorizedViewsResponseSchema: GenMessage<ListAuthorizedViewsResponse> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 40);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.GetAuthorizedView][google.bigtable.admin.v2.BigtableTableAdmin.GetAuthorizedView]
 *
 * @generated from message google.bigtable.admin.v2.GetAuthorizedViewRequest
 */
export type GetAuthorizedViewRequest = Message<"google.bigtable.admin.v2.GetAuthorizedViewRequest"> & {
  /**
   * Required. The unique name of the requested AuthorizedView.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The resource_view to be applied to the returned AuthorizedView's
   * fields. Default to BASIC.
   *
   * @generated from field: google.bigtable.admin.v2.AuthorizedView.ResponseView view = 2;
   */
  view: AuthorizedView_ResponseView;
};

/**
 * Describes the message google.bigtable.admin.v2.GetAuthorizedViewRequest.
 * Use `create(GetAuthorizedViewRequestSchema)` to create a new message.
 */
export const GetAuthorizedViewRequestSchema: GenMessage<GetAuthorizedViewRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 41);

/**
 * The request for
 * [UpdateAuthorizedView][google.bigtable.admin.v2.BigtableTableAdmin.UpdateAuthorizedView].
 *
 * @generated from message google.bigtable.admin.v2.UpdateAuthorizedViewRequest
 */
export type UpdateAuthorizedViewRequest = Message<"google.bigtable.admin.v2.UpdateAuthorizedViewRequest"> & {
  /**
   * Required. The AuthorizedView to update. The `name` in `authorized_view` is
   * used to identify the AuthorizedView. AuthorizedView name must in this
   * format
   * projects/<project>/instances/<instance>/tables/<table>/authorizedViews/<authorized_view>
   *
   * @generated from field: google.bigtable.admin.v2.AuthorizedView authorized_view = 1;
   */
  authorizedView?: AuthorizedView;

  /**
   * Optional. The list of fields to update.
   * A mask specifying which fields in the AuthorizedView resource should be
   * updated. This mask is relative to the AuthorizedView resource, not to the
   * request message. A field will be overwritten if it is in the mask. If
   * empty, all fields set in the request will be overwritten. A special value
   * `*` means to overwrite all fields (including fields not set in the
   * request).
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. If true, ignore the safety checks when updating the
   * AuthorizedView.
   *
   * @generated from field: bool ignore_warnings = 3;
   */
  ignoreWarnings: boolean;
};

/**
 * Describes the message google.bigtable.admin.v2.UpdateAuthorizedViewRequest.
 * Use `create(UpdateAuthorizedViewRequestSchema)` to create a new message.
 */
export const UpdateAuthorizedViewRequestSchema: GenMessage<UpdateAuthorizedViewRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 42);

/**
 * Metadata for the google.longrunning.Operation returned by
 * [UpdateAuthorizedView][google.bigtable.admin.v2.BigtableTableAdmin.UpdateAuthorizedView].
 *
 * @generated from message google.bigtable.admin.v2.UpdateAuthorizedViewMetadata
 */
export type UpdateAuthorizedViewMetadata = Message<"google.bigtable.admin.v2.UpdateAuthorizedViewMetadata"> & {
  /**
   * The request that prompted the initiation of this UpdateAuthorizedView
   * operation.
   *
   * @generated from field: google.bigtable.admin.v2.UpdateAuthorizedViewRequest original_request = 1;
   */
  originalRequest?: UpdateAuthorizedViewRequest;

  /**
   * The time at which the original request was received.
   *
   * @generated from field: google.protobuf.Timestamp request_time = 2;
   */
  requestTime?: Timestamp;

  /**
   * The time at which the operation failed or was completed successfully.
   *
   * @generated from field: google.protobuf.Timestamp finish_time = 3;
   */
  finishTime?: Timestamp;
};

/**
 * Describes the message google.bigtable.admin.v2.UpdateAuthorizedViewMetadata.
 * Use `create(UpdateAuthorizedViewMetadataSchema)` to create a new message.
 */
export const UpdateAuthorizedViewMetadataSchema: GenMessage<UpdateAuthorizedViewMetadata> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 43);

/**
 * Request message for
 * [google.bigtable.admin.v2.BigtableTableAdmin.DeleteAuthorizedView][google.bigtable.admin.v2.BigtableTableAdmin.DeleteAuthorizedView]
 *
 * @generated from message google.bigtable.admin.v2.DeleteAuthorizedViewRequest
 */
export type DeleteAuthorizedViewRequest = Message<"google.bigtable.admin.v2.DeleteAuthorizedViewRequest"> & {
  /**
   * Required. The unique name of the AuthorizedView to be deleted.
   * Values are of the form
   * `projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The current etag of the AuthorizedView.
   * If an etag is provided and does not match the current etag of the
   * AuthorizedView, deletion will be blocked and an ABORTED error will be
   * returned.
   *
   * @generated from field: string etag = 2;
   */
  etag: string;
};

/**
 * Describes the message google.bigtable.admin.v2.DeleteAuthorizedViewRequest.
 * Use `create(DeleteAuthorizedViewRequestSchema)` to create a new message.
 */
export const DeleteAuthorizedViewRequestSchema: GenMessage<DeleteAuthorizedViewRequest> = /*@__PURE__*/
  messageDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 44);

/**
 * Service for creating, configuring, and deleting Cloud Bigtable tables.
 *
 *
 * Provides access to the table schemas only, not the data stored within
 * the tables.
 *
 * @generated from service google.bigtable.admin.v2.BigtableTableAdmin
 */
export const BigtableTableAdmin: GenService<{
  /**
   * Creates a new table in the specified instance.
   * The table can be created with a full set of initial column families,
   * specified in the request.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CreateTable
   */
  createTable: {
    methodKind: "unary";
    input: typeof CreateTableRequestSchema;
    output: typeof TableSchema;
  },
  /**
   * Creates a new table from the specified snapshot. The target table must
   * not exist. The snapshot and the table must be in the same instance.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CreateTableFromSnapshot
   */
  createTableFromSnapshot: {
    methodKind: "unary";
    input: typeof CreateTableFromSnapshotRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all tables served from a specified instance.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.ListTables
   */
  listTables: {
    methodKind: "unary";
    input: typeof ListTablesRequestSchema;
    output: typeof ListTablesResponseSchema;
  },
  /**
   * Gets metadata information about the specified table.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GetTable
   */
  getTable: {
    methodKind: "unary";
    input: typeof GetTableRequestSchema;
    output: typeof TableSchema;
  },
  /**
   * Updates a specified table.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.UpdateTable
   */
  updateTable: {
    methodKind: "unary";
    input: typeof UpdateTableRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Permanently deletes a specified table and all of its data.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.DeleteTable
   */
  deleteTable: {
    methodKind: "unary";
    input: typeof DeleteTableRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Restores a specified table which was accidentally deleted.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.UndeleteTable
   */
  undeleteTable: {
    methodKind: "unary";
    input: typeof UndeleteTableRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Creates a new AuthorizedView in a table.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CreateAuthorizedView
   */
  createAuthorizedView: {
    methodKind: "unary";
    input: typeof CreateAuthorizedViewRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists all AuthorizedViews from a specific table.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.ListAuthorizedViews
   */
  listAuthorizedViews: {
    methodKind: "unary";
    input: typeof ListAuthorizedViewsRequestSchema;
    output: typeof ListAuthorizedViewsResponseSchema;
  },
  /**
   * Gets information from a specified AuthorizedView.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GetAuthorizedView
   */
  getAuthorizedView: {
    methodKind: "unary";
    input: typeof GetAuthorizedViewRequestSchema;
    output: typeof AuthorizedViewSchema;
  },
  /**
   * Updates an AuthorizedView in a table.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.UpdateAuthorizedView
   */
  updateAuthorizedView: {
    methodKind: "unary";
    input: typeof UpdateAuthorizedViewRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Permanently deletes a specified AuthorizedView.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.DeleteAuthorizedView
   */
  deleteAuthorizedView: {
    methodKind: "unary";
    input: typeof DeleteAuthorizedViewRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Performs a series of column family modifications on the specified table.
   * Either all or none of the modifications will occur before this method
   * returns, but data requests received prior to that point may see a table
   * where only some modifications have taken effect.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies
   */
  modifyColumnFamilies: {
    methodKind: "unary";
    input: typeof ModifyColumnFamiliesRequestSchema;
    output: typeof TableSchema;
  },
  /**
   * Permanently drop/delete a row range from a specified table. The request can
   * specify whether to delete all rows in a table, or only those that match a
   * particular prefix.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.DropRowRange
   */
  dropRowRange: {
    methodKind: "unary";
    input: typeof DropRowRangeRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Generates a consistency token for a Table, which can be used in
   * CheckConsistency to check whether mutations to the table that finished
   * before this call started have been replicated. The tokens will be available
   * for 90 days.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GenerateConsistencyToken
   */
  generateConsistencyToken: {
    methodKind: "unary";
    input: typeof GenerateConsistencyTokenRequestSchema;
    output: typeof GenerateConsistencyTokenResponseSchema;
  },
  /**
   * Checks replication consistency based on a consistency token, that is, if
   * replication has caught up based on the conditions specified in the token
   * and the check request.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CheckConsistency
   */
  checkConsistency: {
    methodKind: "unary";
    input: typeof CheckConsistencyRequestSchema;
    output: typeof CheckConsistencyResponseSchema;
  },
  /**
   * Creates a new snapshot in the specified cluster from the specified
   * source table. The cluster and the table must be in the same instance.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.SnapshotTable
   */
  snapshotTable: {
    methodKind: "unary";
    input: typeof SnapshotTableRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets metadata information about the specified snapshot.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GetSnapshot
   */
  getSnapshot: {
    methodKind: "unary";
    input: typeof GetSnapshotRequestSchema;
    output: typeof SnapshotSchema;
  },
  /**
   * Lists all snapshots associated with the specified cluster.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.ListSnapshots
   */
  listSnapshots: {
    methodKind: "unary";
    input: typeof ListSnapshotsRequestSchema;
    output: typeof ListSnapshotsResponseSchema;
  },
  /**
   * Permanently deletes the specified snapshot.
   *
   * Note: This is a private alpha release of Cloud Bigtable snapshots. This
   * feature is not currently available to most Cloud Bigtable customers. This
   * feature might be changed in backward-incompatible ways and is not
   * recommended for production use. It is not subject to any SLA or deprecation
   * policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.DeleteSnapshot
   */
  deleteSnapshot: {
    methodKind: "unary";
    input: typeof DeleteSnapshotRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Starts creating a new Cloud Bigtable Backup.  The returned backup
   * [long-running operation][google.longrunning.Operation] can be used to
   * track creation of the backup. The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
   * [response][google.longrunning.Operation.response] field type is
   * [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
   * returned operation will stop the creation and delete the backup.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CreateBackup
   */
  createBackup: {
    methodKind: "unary";
    input: typeof CreateBackupRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets metadata on a pending or completed Cloud Bigtable Backup.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GetBackup
   */
  getBackup: {
    methodKind: "unary";
    input: typeof GetBackupRequestSchema;
    output: typeof BackupSchema;
  },
  /**
   * Updates a pending or completed Cloud Bigtable Backup.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.UpdateBackup
   */
  updateBackup: {
    methodKind: "unary";
    input: typeof UpdateBackupRequestSchema;
    output: typeof BackupSchema;
  },
  /**
   * Deletes a pending or completed Cloud Bigtable backup.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.DeleteBackup
   */
  deleteBackup: {
    methodKind: "unary";
    input: typeof DeleteBackupRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists Cloud Bigtable backups. Returns both completed and pending
   * backups.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.ListBackups
   */
  listBackups: {
    methodKind: "unary";
    input: typeof ListBackupsRequestSchema;
    output: typeof ListBackupsResponseSchema;
  },
  /**
   * Create a new table by restoring from a completed backup.  The
   * returned table [long-running operation][google.longrunning.Operation] can
   * be used to track the progress of the operation, and to cancel it.  The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
   * [response][google.longrunning.Operation.response] type is
   * [Table][google.bigtable.admin.v2.Table], if successful.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.RestoreTable
   */
  restoreTable: {
    methodKind: "unary";
    input: typeof RestoreTableRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Copy a Cloud Bigtable backup to a new backup in the destination cluster
   * located in the destination instance and project.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.CopyBackup
   */
  copyBackup: {
    methodKind: "unary";
    input: typeof CopyBackupRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the access control policy for a Table or Backup resource.
   * Returns an empty policy if the resource exists but does not have a policy
   * set.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.GetIamPolicy
   */
  getIamPolicy: {
    methodKind: "unary";
    input: typeof GetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Sets the access control policy on a Table or Backup resource.
   * Replaces any existing policy.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.SetIamPolicy
   */
  setIamPolicy: {
    methodKind: "unary";
    input: typeof SetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Returns permissions that the caller has on the specified Table or Backup
   * resource.
   *
   * @generated from rpc google.bigtable.admin.v2.BigtableTableAdmin.TestIamPermissions
   */
  testIamPermissions: {
    methodKind: "unary";
    input: typeof TestIamPermissionsRequestSchema;
    output: typeof TestIamPermissionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_bigtable_admin_v2_bigtable_table_admin, 0);

