// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/spanner/executor/v1/cloud_executor.proto (package google.spanner.executor.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_client } from "../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../api/field_behavior_pb";
import type { Operation } from "../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../longrunning/operations_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Status } from "../../../rpc/status_pb";
import { file_google_rpc_status } from "../../../rpc/status_pb";
import type { Backup } from "../../admin/database/v1/backup_pb";
import { file_google_spanner_admin_database_v1_backup } from "../../admin/database/v1/backup_pb";
import type { EncryptionConfig } from "../../admin/database/v1/common_pb";
import { file_google_spanner_admin_database_v1_common } from "../../admin/database/v1/common_pb";
import type { Database } from "../../admin/database/v1/spanner_database_admin_pb";
import { file_google_spanner_admin_database_v1_spanner_database_admin } from "../../admin/database/v1/spanner_database_admin_pb";
import type { AutoscalingConfig, Instance, InstanceConfig, ReplicaInfo } from "../../admin/instance/v1/spanner_instance_admin_pb";
import { file_google_spanner_admin_instance_v1_spanner_instance_admin } from "../../admin/instance/v1/spanner_instance_admin_pb";
import type { RequestOptions_Priority } from "../../v1/spanner_pb";
import { file_google_spanner_v1_spanner } from "../../v1/spanner_pb";
import type { StructType, Type } from "../../v1/type_pb";
import { file_google_spanner_v1_type } from "../../v1/type_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/spanner/executor/v1/cloud_executor.proto.
 */
export const file_google_spanner_executor_v1_cloud_executor: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_client, file_google_api_field_behavior, file_google_longrunning_operations, file_google_protobuf_timestamp, file_google_rpc_status, file_google_spanner_admin_database_v1_backup, file_google_spanner_admin_database_v1_common, file_google_spanner_admin_database_v1_spanner_database_admin, file_google_spanner_admin_instance_v1_spanner_instance_admin, file_google_spanner_v1_spanner, file_google_spanner_v1_type]);

/**
 * Request to executor service that start a new Spanner action.
 *
 * @generated from message google.spanner.executor.v1.SpannerAsyncActionRequest
 */
export type SpannerAsyncActionRequest = Message<"google.spanner.executor.v1.SpannerAsyncActionRequest"> & {
  /**
   * Action id to uniquely identify this action request.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;

  /**
   * The actual SpannerAction to perform.
   *
   * @generated from field: google.spanner.executor.v1.SpannerAction action = 2;
   */
  action?: SpannerAction;
};

/**
 * Describes the message google.spanner.executor.v1.SpannerAsyncActionRequest.
 * Use `create(SpannerAsyncActionRequestSchema)` to create a new message.
 */
export const SpannerAsyncActionRequestSchema: GenMessage<SpannerAsyncActionRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 0);

/**
 * Response from executor service.
 *
 * @generated from message google.spanner.executor.v1.SpannerAsyncActionResponse
 */
export type SpannerAsyncActionResponse = Message<"google.spanner.executor.v1.SpannerAsyncActionResponse"> & {
  /**
   * Action id corresponds to the request.
   *
   * @generated from field: int32 action_id = 1;
   */
  actionId: number;

  /**
   * If action results are split into multiple responses, only the last response
   * can and should contain status.
   *
   * @generated from field: google.spanner.executor.v1.SpannerActionOutcome outcome = 2;
   */
  outcome?: SpannerActionOutcome;
};

/**
 * Describes the message google.spanner.executor.v1.SpannerAsyncActionResponse.
 * Use `create(SpannerAsyncActionResponseSchema)` to create a new message.
 */
export const SpannerAsyncActionResponseSchema: GenMessage<SpannerAsyncActionResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 1);

/**
 * SpannerAction defines a primitive action that can be performed against
 * Spanner, such as begin or commit a transaction, or perform a read or
 * mutation.
 *
 * @generated from message google.spanner.executor.v1.SpannerAction
 */
export type SpannerAction = Message<"google.spanner.executor.v1.SpannerAction"> & {
  /**
   * Database against which to perform action.
   * In a context where a series of actions take place, an action may omit
   * database path if it applies to the same database as the previous action.
   *
   * @generated from field: string database_path = 1;
   */
  databasePath: string;

  /**
   * Configuration options for Spanner backend
   *
   * @generated from field: google.spanner.executor.v1.SpannerOptions spanner_options = 2;
   */
  spannerOptions?: SpannerOptions;

  /**
   * Action represents a spanner action kind, there will only be one action kind
   * per SpannerAction.
   *
   * @generated from oneof google.spanner.executor.v1.SpannerAction.action
   */
  action: {
    /**
     * Action to start a transaction.
     *
     * @generated from field: google.spanner.executor.v1.StartTransactionAction start = 10;
     */
    value: StartTransactionAction;
    case: "start";
  } | {
    /**
     * Action to finish a transaction.
     *
     * @generated from field: google.spanner.executor.v1.FinishTransactionAction finish = 11;
     */
    value: FinishTransactionAction;
    case: "finish";
  } | {
    /**
     * Action to do a normal read.
     *
     * @generated from field: google.spanner.executor.v1.ReadAction read = 20;
     */
    value: ReadAction;
    case: "read";
  } | {
    /**
     * Action to do a query.
     *
     * @generated from field: google.spanner.executor.v1.QueryAction query = 21;
     */
    value: QueryAction;
    case: "query";
  } | {
    /**
     * Action to buffer a mutation.
     *
     * @generated from field: google.spanner.executor.v1.MutationAction mutation = 22;
     */
    value: MutationAction;
    case: "mutation";
  } | {
    /**
     * Action to a DML.
     *
     * @generated from field: google.spanner.executor.v1.DmlAction dml = 23;
     */
    value: DmlAction;
    case: "dml";
  } | {
    /**
     * Action to a batch DML.
     *
     * @generated from field: google.spanner.executor.v1.BatchDmlAction batch_dml = 24;
     */
    value: BatchDmlAction;
    case: "batchDml";
  } | {
    /**
     * Action to write a mutation.
     *
     * @generated from field: google.spanner.executor.v1.WriteMutationsAction write = 25;
     */
    value: WriteMutationsAction;
    case: "write";
  } | {
    /**
     * Action to a partitioned update.
     *
     * @generated from field: google.spanner.executor.v1.PartitionedUpdateAction partitioned_update = 27;
     */
    value: PartitionedUpdateAction;
    case: "partitionedUpdate";
  } | {
    /**
     * Action that contains any administrative operation, like database,
     * instance manipulation.
     *
     * @generated from field: google.spanner.executor.v1.AdminAction admin = 30;
     */
    value: AdminAction;
    case: "admin";
  } | {
    /**
     * Action to start a batch transaction.
     *
     * @generated from field: google.spanner.executor.v1.StartBatchTransactionAction start_batch_txn = 40;
     */
    value: StartBatchTransactionAction;
    case: "startBatchTxn";
  } | {
    /**
     * Action to close a batch transaction.
     *
     * @generated from field: google.spanner.executor.v1.CloseBatchTransactionAction close_batch_txn = 41;
     */
    value: CloseBatchTransactionAction;
    case: "closeBatchTxn";
  } | {
    /**
     * Action to generate database partitions for batch read.
     *
     * @generated from field: google.spanner.executor.v1.GenerateDbPartitionsForReadAction generate_db_partitions_read = 42;
     */
    value: GenerateDbPartitionsForReadAction;
    case: "generateDbPartitionsRead";
  } | {
    /**
     * Action to generate database partitions for batch query.
     *
     * @generated from field: google.spanner.executor.v1.GenerateDbPartitionsForQueryAction generate_db_partitions_query = 43;
     */
    value: GenerateDbPartitionsForQueryAction;
    case: "generateDbPartitionsQuery";
  } | {
    /**
     * Action to execute batch actions on generated partitions.
     *
     * @generated from field: google.spanner.executor.v1.ExecutePartitionAction execute_partition = 44;
     */
    value: ExecutePartitionAction;
    case: "executePartition";
  } | {
    /**
     * Action to execute change stream query.
     *
     * @generated from field: google.spanner.executor.v1.ExecuteChangeStreamQuery execute_change_stream_query = 50;
     */
    value: ExecuteChangeStreamQuery;
    case: "executeChangeStreamQuery";
  } | {
    /**
     * Query cancellation action for testing the cancellation of a query.
     *
     * @generated from field: google.spanner.executor.v1.QueryCancellationAction query_cancellation = 51;
     */
    value: QueryCancellationAction;
    case: "queryCancellation";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.executor.v1.SpannerAction.
 * Use `create(SpannerActionSchema)` to create a new message.
 */
export const SpannerActionSchema: GenMessage<SpannerAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 2);

/**
 * A single read request.
 *
 * @generated from message google.spanner.executor.v1.ReadAction
 */
export type ReadAction = Message<"google.spanner.executor.v1.ReadAction"> & {
  /**
   * The table to read at.
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * The index to read at if it's an index read.
   *
   * @generated from field: optional string index = 2;
   */
  index?: string;

  /**
   * List of columns must begin with the key columns used for the read.
   *
   * @generated from field: repeated string column = 3;
   */
  column: string[];

  /**
   * Keys for performing this read.
   *
   * @generated from field: google.spanner.executor.v1.KeySet keys = 4;
   */
  keys?: KeySet;

  /**
   * Limit on number of rows to read. If set, must be positive.
   *
   * @generated from field: int32 limit = 5;
   */
  limit: number;
};

/**
 * Describes the message google.spanner.executor.v1.ReadAction.
 * Use `create(ReadActionSchema)` to create a new message.
 */
export const ReadActionSchema: GenMessage<ReadAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 3);

/**
 * A SQL query request.
 *
 * @generated from message google.spanner.executor.v1.QueryAction
 */
export type QueryAction = Message<"google.spanner.executor.v1.QueryAction"> & {
  /**
   * The SQL string.
   *
   * @generated from field: string sql = 1;
   */
  sql: string;

  /**
   * Parameters for the SQL string.
   *
   * @generated from field: repeated google.spanner.executor.v1.QueryAction.Parameter params = 2;
   */
  params: QueryAction_Parameter[];
};

/**
 * Describes the message google.spanner.executor.v1.QueryAction.
 * Use `create(QueryActionSchema)` to create a new message.
 */
export const QueryActionSchema: GenMessage<QueryAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 4);

/**
 * Parameter that bind to placeholders in the SQL string
 *
 * @generated from message google.spanner.executor.v1.QueryAction.Parameter
 */
export type QueryAction_Parameter = Message<"google.spanner.executor.v1.QueryAction.Parameter"> & {
  /**
   * Name of the parameter (with no leading @).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Type of the parameter.
   *
   * @generated from field: google.spanner.v1.Type type = 2;
   */
  type?: Type;

  /**
   * Value of the parameter.
   *
   * @generated from field: google.spanner.executor.v1.Value value = 3;
   */
  value?: Value;
};

/**
 * Describes the message google.spanner.executor.v1.QueryAction.Parameter.
 * Use `create(QueryAction_ParameterSchema)` to create a new message.
 */
export const QueryAction_ParameterSchema: GenMessage<QueryAction_Parameter> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 4, 0);

/**
 * A single DML statement.
 *
 * @generated from message google.spanner.executor.v1.DmlAction
 */
export type DmlAction = Message<"google.spanner.executor.v1.DmlAction"> & {
  /**
   * DML statement.
   *
   * @generated from field: google.spanner.executor.v1.QueryAction update = 1;
   */
  update?: QueryAction;

  /**
   * Whether to autocommit the transaction after executing the DML statement,
   * if the Executor supports autocommit.
   *
   * @generated from field: optional bool autocommit_if_supported = 2;
   */
  autocommitIfSupported?: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.DmlAction.
 * Use `create(DmlActionSchema)` to create a new message.
 */
export const DmlActionSchema: GenMessage<DmlAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 5);

/**
 * Batch of DML statements invoked using batched execution.
 *
 * @generated from message google.spanner.executor.v1.BatchDmlAction
 */
export type BatchDmlAction = Message<"google.spanner.executor.v1.BatchDmlAction"> & {
  /**
   * DML statements.
   *
   * @generated from field: repeated google.spanner.executor.v1.QueryAction updates = 1;
   */
  updates: QueryAction[];
};

/**
 * Describes the message google.spanner.executor.v1.BatchDmlAction.
 * Use `create(BatchDmlActionSchema)` to create a new message.
 */
export const BatchDmlActionSchema: GenMessage<BatchDmlAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 6);

/**
 * Value represents a single value that can be read or written to/from
 * Spanner.
 *
 * @generated from message google.spanner.executor.v1.Value
 */
export type Value = Message<"google.spanner.executor.v1.Value"> & {
  /**
   * Exactly one of the following fields will be present.
   *
   * @generated from oneof google.spanner.executor.v1.Value.value_type
   */
  valueType: {
    /**
     * If is_null is set, then this value is null.
     *
     * @generated from field: bool is_null = 1;
     */
    value: boolean;
    case: "isNull";
  } | {
    /**
     * Int type value. It's used for all integer number types, like int32 and
     * int64.
     *
     * @generated from field: int64 int_value = 2;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * Bool type value.
     *
     * @generated from field: bool bool_value = 3;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * Double type value. It's used for all float point types, like float and
     * double.
     *
     * @generated from field: double double_value = 4;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * Bytes type value, stored in CORD. It's also used for PROTO type value.
     *
     * @generated from field: bytes bytes_value = 5;
     */
    value: Uint8Array;
    case: "bytesValue";
  } | {
    /**
     * String type value, stored in CORD.
     *
     * @generated from field: string string_value = 6;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * Struct type value. It contains a ValueList representing the values in
     * this struct.
     *
     * @generated from field: google.spanner.executor.v1.ValueList struct_value = 7;
     */
    value: ValueList;
    case: "structValue";
  } | {
    /**
     * Timestamp type value.
     *
     * @generated from field: google.protobuf.Timestamp timestamp_value = 8;
     */
    value: Timestamp;
    case: "timestampValue";
  } | {
    /**
     * Date type value. Date is specified as a number of days since Unix epoch.
     *
     * @generated from field: int32 date_days_value = 9;
     */
    value: number;
    case: "dateDaysValue";
  } | {
    /**
     * If set, holds the sentinel value for the transaction CommitTimestamp.
     *
     * @generated from field: bool is_commit_timestamp = 10;
     */
    value: boolean;
    case: "isCommitTimestamp";
  } | {
    /**
     * Array type value. The underlying Valuelist should have values that have
     * the same type.
     *
     * @generated from field: google.spanner.executor.v1.ValueList array_value = 11;
     */
    value: ValueList;
    case: "arrayValue";
  } | { case: undefined; value?: undefined };

  /**
   * Type of array element. Only set if value is an array.
   *
   * @generated from field: optional google.spanner.v1.Type array_type = 12;
   */
  arrayType?: Type;
};

/**
 * Describes the message google.spanner.executor.v1.Value.
 * Use `create(ValueSchema)` to create a new message.
 */
export const ValueSchema: GenMessage<Value> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 7);

/**
 * KeyRange represents a range of rows in a table or index.
 *
 * A range has a start key and an end key. These keys can be open or
 * closed, indicating if the range includes rows with that key.
 *
 * Keys are represented by "ValueList", where the ith value in the list
 * corresponds to the ith component of the table or index primary key.
 *
 * @generated from message google.spanner.executor.v1.KeyRange
 */
export type KeyRange = Message<"google.spanner.executor.v1.KeyRange"> & {
  /**
   * "start" and "limit" must have the same number of key parts,
   * though they may name only a prefix of the table or index key.
   * The start key of this KeyRange.
   *
   * @generated from field: google.spanner.executor.v1.ValueList start = 1;
   */
  start?: ValueList;

  /**
   * The end key of this KeyRange.
   *
   * @generated from field: google.spanner.executor.v1.ValueList limit = 2;
   */
  limit?: ValueList;

  /**
   * "start" and "limit" type for this KeyRange.
   *
   * @generated from field: optional google.spanner.executor.v1.KeyRange.Type type = 3;
   */
  type?: KeyRange_Type;
};

/**
 * Describes the message google.spanner.executor.v1.KeyRange.
 * Use `create(KeyRangeSchema)` to create a new message.
 */
export const KeyRangeSchema: GenMessage<KeyRange> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 8);

/**
 * Type controls whether "start" and "limit" are open or closed. By default,
 * "start" is closed, and "limit" is open.
 *
 * @generated from enum google.spanner.executor.v1.KeyRange.Type
 */
export enum KeyRange_Type {
  /**
   * "TYPE_UNSPECIFIED" is equivalent to "CLOSED_OPEN".
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * [start,limit]
   *
   * @generated from enum value: CLOSED_CLOSED = 1;
   */
  CLOSED_CLOSED = 1,

  /**
   * [start,limit)
   *
   * @generated from enum value: CLOSED_OPEN = 2;
   */
  CLOSED_OPEN = 2,

  /**
   * (start,limit]
   *
   * @generated from enum value: OPEN_CLOSED = 3;
   */
  OPEN_CLOSED = 3,

  /**
   * (start,limit)
   *
   * @generated from enum value: OPEN_OPEN = 4;
   */
  OPEN_OPEN = 4,
}

/**
 * Describes the enum google.spanner.executor.v1.KeyRange.Type.
 */
export const KeyRange_TypeSchema: GenEnum<KeyRange_Type> = /*@__PURE__*/
  enumDesc(file_google_spanner_executor_v1_cloud_executor, 8, 0);

/**
 * KeySet defines a collection of Spanner keys and/or key ranges. All
 * the keys are expected to be in the same table. The keys need not be
 * sorted in any particular way.
 *
 * @generated from message google.spanner.executor.v1.KeySet
 */
export type KeySet = Message<"google.spanner.executor.v1.KeySet"> & {
  /**
   * A list of specific keys. Entries in "keys" should have exactly as
   * many elements as there are columns in the primary or index key
   * with which this "KeySet" is used.
   *
   * @generated from field: repeated google.spanner.executor.v1.ValueList point = 1;
   */
  point: ValueList[];

  /**
   * A list of key ranges.
   *
   * @generated from field: repeated google.spanner.executor.v1.KeyRange range = 2;
   */
  range: KeyRange[];

  /**
   * For convenience "all" can be set to "true" to indicate that this
   * "KeySet" matches all keys in the table or index. Note that any keys
   * specified in "keys" or "ranges" are only yielded once.
   *
   * @generated from field: bool all = 3;
   */
  all: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.KeySet.
 * Use `create(KeySetSchema)` to create a new message.
 */
export const KeySetSchema: GenMessage<KeySet> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 9);

/**
 * List of values.
 *
 * @generated from message google.spanner.executor.v1.ValueList
 */
export type ValueList = Message<"google.spanner.executor.v1.ValueList"> & {
  /**
   * Values contained in this ValueList.
   *
   * @generated from field: repeated google.spanner.executor.v1.Value value = 1;
   */
  value: Value[];
};

/**
 * Describes the message google.spanner.executor.v1.ValueList.
 * Use `create(ValueListSchema)` to create a new message.
 */
export const ValueListSchema: GenMessage<ValueList> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 10);

/**
 * A single mutation request.
 *
 * @generated from message google.spanner.executor.v1.MutationAction
 */
export type MutationAction = Message<"google.spanner.executor.v1.MutationAction"> & {
  /**
   * Mods that contained in this mutation.
   *
   * @generated from field: repeated google.spanner.executor.v1.MutationAction.Mod mod = 1;
   */
  mod: MutationAction_Mod[];
};

/**
 * Describes the message google.spanner.executor.v1.MutationAction.
 * Use `create(MutationActionSchema)` to create a new message.
 */
export const MutationActionSchema: GenMessage<MutationAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 11);

/**
 * Arguments to Insert, InsertOrUpdate, and Replace operations.
 *
 * @generated from message google.spanner.executor.v1.MutationAction.InsertArgs
 */
export type MutationAction_InsertArgs = Message<"google.spanner.executor.v1.MutationAction.InsertArgs"> & {
  /**
   * The names of the columns to be written.
   *
   * @generated from field: repeated string column = 1;
   */
  column: string[];

  /**
   * Type information for the "values" entries below.
   *
   * @generated from field: repeated google.spanner.v1.Type type = 2;
   */
  type: Type[];

  /**
   * The values to be written.
   *
   * @generated from field: repeated google.spanner.executor.v1.ValueList values = 3;
   */
  values: ValueList[];
};

/**
 * Describes the message google.spanner.executor.v1.MutationAction.InsertArgs.
 * Use `create(MutationAction_InsertArgsSchema)` to create a new message.
 */
export const MutationAction_InsertArgsSchema: GenMessage<MutationAction_InsertArgs> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 11, 0);

/**
 * Arguments to Update.
 *
 * @generated from message google.spanner.executor.v1.MutationAction.UpdateArgs
 */
export type MutationAction_UpdateArgs = Message<"google.spanner.executor.v1.MutationAction.UpdateArgs"> & {
  /**
   * The columns to be updated. Identical to InsertArgs.column.
   *
   * @generated from field: repeated string column = 1;
   */
  column: string[];

  /**
   * Type information for "values". Identical to InsertArgs.type.
   *
   * @generated from field: repeated google.spanner.v1.Type type = 2;
   */
  type: Type[];

  /**
   * The values to be updated. Identical to InsertArgs.values.
   *
   * @generated from field: repeated google.spanner.executor.v1.ValueList values = 3;
   */
  values: ValueList[];
};

/**
 * Describes the message google.spanner.executor.v1.MutationAction.UpdateArgs.
 * Use `create(MutationAction_UpdateArgsSchema)` to create a new message.
 */
export const MutationAction_UpdateArgsSchema: GenMessage<MutationAction_UpdateArgs> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 11, 1);

/**
 * Mod represents the write action that will be perform to a table. Each mod
 * will specify exactly one action, from insert, update, insert_or_update,
 * replace and delete.
 *
 * @generated from message google.spanner.executor.v1.MutationAction.Mod
 */
export type MutationAction_Mod = Message<"google.spanner.executor.v1.MutationAction.Mod"> & {
  /**
   * The table to write.
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * Exactly one of the remaining elements may be present.
   * Insert new rows into "table".
   *
   * @generated from field: google.spanner.executor.v1.MutationAction.InsertArgs insert = 2;
   */
  insert?: MutationAction_InsertArgs;

  /**
   * Update columns stored in existing rows of "table".
   *
   * @generated from field: google.spanner.executor.v1.MutationAction.UpdateArgs update = 3;
   */
  update?: MutationAction_UpdateArgs;

  /**
   * Insert or update existing rows of "table".
   *
   * @generated from field: google.spanner.executor.v1.MutationAction.InsertArgs insert_or_update = 4;
   */
  insertOrUpdate?: MutationAction_InsertArgs;

  /**
   * Replace existing rows of "table".
   *
   * @generated from field: google.spanner.executor.v1.MutationAction.InsertArgs replace = 5;
   */
  replace?: MutationAction_InsertArgs;

  /**
   * Delete rows from "table".
   *
   * @generated from field: google.spanner.executor.v1.KeySet delete_keys = 6;
   */
  deleteKeys?: KeySet;
};

/**
 * Describes the message google.spanner.executor.v1.MutationAction.Mod.
 * Use `create(MutationAction_ModSchema)` to create a new message.
 */
export const MutationAction_ModSchema: GenMessage<MutationAction_Mod> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 11, 2);

/**
 * WriteMutationAction defines an action of flushing the mutation so they
 * are visible to subsequent operations in the transaction.
 *
 * @generated from message google.spanner.executor.v1.WriteMutationsAction
 */
export type WriteMutationsAction = Message<"google.spanner.executor.v1.WriteMutationsAction"> & {
  /**
   * The mutation to write.
   *
   * @generated from field: google.spanner.executor.v1.MutationAction mutation = 1;
   */
  mutation?: MutationAction;
};

/**
 * Describes the message google.spanner.executor.v1.WriteMutationsAction.
 * Use `create(WriteMutationsActionSchema)` to create a new message.
 */
export const WriteMutationsActionSchema: GenMessage<WriteMutationsAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 12);

/**
 * PartitionedUpdateAction defines an action to execute a partitioned DML
 * which runs different partitions in parallel.
 *
 * @generated from message google.spanner.executor.v1.PartitionedUpdateAction
 */
export type PartitionedUpdateAction = Message<"google.spanner.executor.v1.PartitionedUpdateAction"> & {
  /**
   * Options for partitioned update.
   *
   * @generated from field: optional google.spanner.executor.v1.PartitionedUpdateAction.ExecutePartitionedUpdateOptions options = 1;
   */
  options?: PartitionedUpdateAction_ExecutePartitionedUpdateOptions;

  /**
   * Partitioned dml query.
   *
   * @generated from field: google.spanner.executor.v1.QueryAction update = 2;
   */
  update?: QueryAction;
};

/**
 * Describes the message google.spanner.executor.v1.PartitionedUpdateAction.
 * Use `create(PartitionedUpdateActionSchema)` to create a new message.
 */
export const PartitionedUpdateActionSchema: GenMessage<PartitionedUpdateAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 13);

/**
 * @generated from message google.spanner.executor.v1.PartitionedUpdateAction.ExecutePartitionedUpdateOptions
 */
export type PartitionedUpdateAction_ExecutePartitionedUpdateOptions = Message<"google.spanner.executor.v1.PartitionedUpdateAction.ExecutePartitionedUpdateOptions"> & {
  /**
   * RPC Priority
   *
   * @generated from field: optional google.spanner.v1.RequestOptions.Priority rpc_priority = 1;
   */
  rpcPriority?: RequestOptions_Priority;

  /**
   * Transaction tag
   *
   * @generated from field: optional string tag = 2;
   */
  tag?: string;
};

/**
 * Describes the message google.spanner.executor.v1.PartitionedUpdateAction.ExecutePartitionedUpdateOptions.
 * Use `create(PartitionedUpdateAction_ExecutePartitionedUpdateOptionsSchema)` to create a new message.
 */
export const PartitionedUpdateAction_ExecutePartitionedUpdateOptionsSchema: GenMessage<PartitionedUpdateAction_ExecutePartitionedUpdateOptions> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 13, 0);

/**
 * StartTransactionAction defines an action of initializing a transaction.
 *
 * @generated from message google.spanner.executor.v1.StartTransactionAction
 */
export type StartTransactionAction = Message<"google.spanner.executor.v1.StartTransactionAction"> & {
  /**
   * Concurrency is for read-only transactions and must be omitted for
   * read-write transactions.
   *
   * @generated from field: optional google.spanner.executor.v1.Concurrency concurrency = 1;
   */
  concurrency?: Concurrency;

  /**
   * Metadata about tables and columns that will be involved in this
   * transaction. It is to convert values of key parts correctly.
   *
   * @generated from field: repeated google.spanner.executor.v1.TableMetadata table = 2;
   */
  table: TableMetadata[];

  /**
   * Transaction_seed contains workid and op pair for this transaction, used for
   * testing.
   *
   * @generated from field: string transaction_seed = 3;
   */
  transactionSeed: string;

  /**
   * Execution options (e.g., whether transaction is opaque, optimistic).
   *
   * @generated from field: optional google.spanner.executor.v1.TransactionExecutionOptions execution_options = 4;
   */
  executionOptions?: TransactionExecutionOptions;
};

/**
 * Describes the message google.spanner.executor.v1.StartTransactionAction.
 * Use `create(StartTransactionActionSchema)` to create a new message.
 */
export const StartTransactionActionSchema: GenMessage<StartTransactionAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 14);

/**
 * Concurrency for read-only transactions.
 *
 * @generated from message google.spanner.executor.v1.Concurrency
 */
export type Concurrency = Message<"google.spanner.executor.v1.Concurrency"> & {
  /**
   * Concurrency mode set for read-only transactions, exactly one mode below
   * should be set.
   *
   * @generated from oneof google.spanner.executor.v1.Concurrency.concurrency_mode
   */
  concurrencyMode: {
    /**
     * Indicates a read at a consistent timestamp that is specified relative to
     * now. That is, if the caller has specified an exact staleness of s
     * seconds, we will read at now - s.
     *
     * @generated from field: double staleness_seconds = 1;
     */
    value: number;
    case: "stalenessSeconds";
  } | {
    /**
     * Indicates a boundedly stale read that reads at a timestamp >= T.
     *
     * @generated from field: int64 min_read_timestamp_micros = 2;
     */
    value: bigint;
    case: "minReadTimestampMicros";
  } | {
    /**
     * Indicates a boundedly stale read that is at most N seconds stale.
     *
     * @generated from field: double max_staleness_seconds = 3;
     */
    value: number;
    case: "maxStalenessSeconds";
  } | {
    /**
     * Indicates a read at a consistent timestamp.
     *
     * @generated from field: int64 exact_timestamp_micros = 4;
     */
    value: bigint;
    case: "exactTimestampMicros";
  } | {
    /**
     * Indicates a strong read, must only be set to true, or unset.
     *
     * @generated from field: bool strong = 5;
     */
    value: boolean;
    case: "strong";
  } | {
    /**
     * Indicates a batch read, must only be set to true, or unset.
     *
     * @generated from field: bool batch = 6;
     */
    value: boolean;
    case: "batch";
  } | { case: undefined; value?: undefined };

  /**
   * True if exact_timestamp_micros is set, and the chosen timestamp is that of
   * a snapshot epoch.
   *
   * @generated from field: bool snapshot_epoch_read = 7;
   */
  snapshotEpochRead: boolean;

  /**
   * If set, this is a snapshot epoch read constrained to read only the
   * specified log scope root table, and its children. Will not be set for full
   * database epochs.
   *
   * @generated from field: string snapshot_epoch_root_table = 8;
   */
  snapshotEpochRootTable: string;

  /**
   * Set only when batch is true.
   *
   * @generated from field: int64 batch_read_timestamp_micros = 9;
   */
  batchReadTimestampMicros: bigint;
};

/**
 * Describes the message google.spanner.executor.v1.Concurrency.
 * Use `create(ConcurrencySchema)` to create a new message.
 */
export const ConcurrencySchema: GenMessage<Concurrency> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 15);

/**
 * TableMetadata contains metadata of a single table.
 *
 * @generated from message google.spanner.executor.v1.TableMetadata
 */
export type TableMetadata = Message<"google.spanner.executor.v1.TableMetadata"> & {
  /**
   * Table name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Columns, in the same order as in the schema.
   *
   * @generated from field: repeated google.spanner.executor.v1.ColumnMetadata column = 2;
   */
  column: ColumnMetadata[];

  /**
   * Keys, in order. Column name is currently not populated.
   *
   * @generated from field: repeated google.spanner.executor.v1.ColumnMetadata key_column = 3;
   */
  keyColumn: ColumnMetadata[];
};

/**
 * Describes the message google.spanner.executor.v1.TableMetadata.
 * Use `create(TableMetadataSchema)` to create a new message.
 */
export const TableMetadataSchema: GenMessage<TableMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 16);

/**
 * ColumnMetadata represents metadata of a single column.
 *
 * @generated from message google.spanner.executor.v1.ColumnMetadata
 */
export type ColumnMetadata = Message<"google.spanner.executor.v1.ColumnMetadata"> & {
  /**
   * Column name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Column type.
   *
   * @generated from field: google.spanner.v1.Type type = 2;
   */
  type?: Type;
};

/**
 * Describes the message google.spanner.executor.v1.ColumnMetadata.
 * Use `create(ColumnMetadataSchema)` to create a new message.
 */
export const ColumnMetadataSchema: GenMessage<ColumnMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 17);

/**
 * Options for executing the transaction.
 *
 * @generated from message google.spanner.executor.v1.TransactionExecutionOptions
 */
export type TransactionExecutionOptions = Message<"google.spanner.executor.v1.TransactionExecutionOptions"> & {
  /**
   * Whether optimistic concurrency should be used to execute this transaction.
   *
   * @generated from field: bool optimistic = 1;
   */
  optimistic: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.TransactionExecutionOptions.
 * Use `create(TransactionExecutionOptionsSchema)` to create a new message.
 */
export const TransactionExecutionOptionsSchema: GenMessage<TransactionExecutionOptions> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 18);

/**
 * FinishTransactionAction defines an action of finishing a transaction.
 *
 * @generated from message google.spanner.executor.v1.FinishTransactionAction
 */
export type FinishTransactionAction = Message<"google.spanner.executor.v1.FinishTransactionAction"> & {
  /**
   * Defines how exactly the transaction should be completed, e.g. with
   * commit or abortion.
   *
   * @generated from field: google.spanner.executor.v1.FinishTransactionAction.Mode mode = 1;
   */
  mode: FinishTransactionAction_Mode;
};

/**
 * Describes the message google.spanner.executor.v1.FinishTransactionAction.
 * Use `create(FinishTransactionActionSchema)` to create a new message.
 */
export const FinishTransactionActionSchema: GenMessage<FinishTransactionAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 19);

/**
 * Mode indicates how the transaction should be finished.
 *
 * @generated from enum google.spanner.executor.v1.FinishTransactionAction.Mode
 */
export enum FinishTransactionAction_Mode {
  /**
   * "MODE_UNSPECIFIED" is equivalent to "COMMIT".
   *
   * @generated from enum value: MODE_UNSPECIFIED = 0;
   */
  MODE_UNSPECIFIED = 0,

  /**
   * Commit the transaction.
   *
   * @generated from enum value: COMMIT = 1;
   */
  COMMIT = 1,

  /**
   * Drop the transaction without committing it.
   *
   * @generated from enum value: ABANDON = 2;
   */
  ABANDON = 2,
}

/**
 * Describes the enum google.spanner.executor.v1.FinishTransactionAction.Mode.
 */
export const FinishTransactionAction_ModeSchema: GenEnum<FinishTransactionAction_Mode> = /*@__PURE__*/
  enumDesc(file_google_spanner_executor_v1_cloud_executor, 19, 0);

/**
 * AdminAction defines all the cloud spanner admin actions, including
 * instance/database admin ops, backup ops and operation actions.
 *
 * @generated from message google.spanner.executor.v1.AdminAction
 */
export type AdminAction = Message<"google.spanner.executor.v1.AdminAction"> & {
  /**
   * Exactly one of the actions below will be performed in AdminAction.
   *
   * @generated from oneof google.spanner.executor.v1.AdminAction.action
   */
  action: {
    /**
     * Action that creates a user instance config.
     *
     * @generated from field: google.spanner.executor.v1.CreateUserInstanceConfigAction create_user_instance_config = 1;
     */
    value: CreateUserInstanceConfigAction;
    case: "createUserInstanceConfig";
  } | {
    /**
     * Action that updates a user instance config.
     *
     * @generated from field: google.spanner.executor.v1.UpdateUserInstanceConfigAction update_user_instance_config = 2;
     */
    value: UpdateUserInstanceConfigAction;
    case: "updateUserInstanceConfig";
  } | {
    /**
     * Action that deletes a user instance config.
     *
     * @generated from field: google.spanner.executor.v1.DeleteUserInstanceConfigAction delete_user_instance_config = 3;
     */
    value: DeleteUserInstanceConfigAction;
    case: "deleteUserInstanceConfig";
  } | {
    /**
     * Action that gets a user instance config.
     *
     * @generated from field: google.spanner.executor.v1.GetCloudInstanceConfigAction get_cloud_instance_config = 4;
     */
    value: GetCloudInstanceConfigAction;
    case: "getCloudInstanceConfig";
  } | {
    /**
     * Action that lists user instance configs.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudInstanceConfigsAction list_instance_configs = 5;
     */
    value: ListCloudInstanceConfigsAction;
    case: "listInstanceConfigs";
  } | {
    /**
     * Action that creates a Cloud Spanner instance.
     *
     * @generated from field: google.spanner.executor.v1.CreateCloudInstanceAction create_cloud_instance = 6;
     */
    value: CreateCloudInstanceAction;
    case: "createCloudInstance";
  } | {
    /**
     * Action that updates a Cloud Spanner instance.
     *
     * @generated from field: google.spanner.executor.v1.UpdateCloudInstanceAction update_cloud_instance = 7;
     */
    value: UpdateCloudInstanceAction;
    case: "updateCloudInstance";
  } | {
    /**
     * Action that deletes a Cloud Spanner instance.
     *
     * @generated from field: google.spanner.executor.v1.DeleteCloudInstanceAction delete_cloud_instance = 8;
     */
    value: DeleteCloudInstanceAction;
    case: "deleteCloudInstance";
  } | {
    /**
     * Action that lists Cloud Spanner instances.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudInstancesAction list_cloud_instances = 9;
     */
    value: ListCloudInstancesAction;
    case: "listCloudInstances";
  } | {
    /**
     * Action that retrieves a Cloud Spanner instance.
     *
     * @generated from field: google.spanner.executor.v1.GetCloudInstanceAction get_cloud_instance = 10;
     */
    value: GetCloudInstanceAction;
    case: "getCloudInstance";
  } | {
    /**
     * Action that creates a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.CreateCloudDatabaseAction create_cloud_database = 11;
     */
    value: CreateCloudDatabaseAction;
    case: "createCloudDatabase";
  } | {
    /**
     * Action that updates the schema of a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.UpdateCloudDatabaseDdlAction update_cloud_database_ddl = 12;
     */
    value: UpdateCloudDatabaseDdlAction;
    case: "updateCloudDatabaseDdl";
  } | {
    /**
     * Action that updates the schema of a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.UpdateCloudDatabaseAction update_cloud_database = 27;
     */
    value: UpdateCloudDatabaseAction;
    case: "updateCloudDatabase";
  } | {
    /**
     * Action that drops a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.DropCloudDatabaseAction drop_cloud_database = 13;
     */
    value: DropCloudDatabaseAction;
    case: "dropCloudDatabase";
  } | {
    /**
     * Action that lists Cloud Spanner databases.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudDatabasesAction list_cloud_databases = 14;
     */
    value: ListCloudDatabasesAction;
    case: "listCloudDatabases";
  } | {
    /**
     * Action that lists Cloud Spanner database operations.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudDatabaseOperationsAction list_cloud_database_operations = 15;
     */
    value: ListCloudDatabaseOperationsAction;
    case: "listCloudDatabaseOperations";
  } | {
    /**
     * Action that restores a Cloud Spanner database from a backup.
     *
     * @generated from field: google.spanner.executor.v1.RestoreCloudDatabaseAction restore_cloud_database = 16;
     */
    value: RestoreCloudDatabaseAction;
    case: "restoreCloudDatabase";
  } | {
    /**
     * Action that gets a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.GetCloudDatabaseAction get_cloud_database = 17;
     */
    value: GetCloudDatabaseAction;
    case: "getCloudDatabase";
  } | {
    /**
     * Action that creates a Cloud Spanner database backup.
     *
     * @generated from field: google.spanner.executor.v1.CreateCloudBackupAction create_cloud_backup = 18;
     */
    value: CreateCloudBackupAction;
    case: "createCloudBackup";
  } | {
    /**
     * Action that copies a Cloud Spanner database backup.
     *
     * @generated from field: google.spanner.executor.v1.CopyCloudBackupAction copy_cloud_backup = 19;
     */
    value: CopyCloudBackupAction;
    case: "copyCloudBackup";
  } | {
    /**
     * Action that gets a Cloud Spanner database backup.
     *
     * @generated from field: google.spanner.executor.v1.GetCloudBackupAction get_cloud_backup = 20;
     */
    value: GetCloudBackupAction;
    case: "getCloudBackup";
  } | {
    /**
     * Action that updates a Cloud Spanner database backup.
     *
     * @generated from field: google.spanner.executor.v1.UpdateCloudBackupAction update_cloud_backup = 21;
     */
    value: UpdateCloudBackupAction;
    case: "updateCloudBackup";
  } | {
    /**
     * Action that deletes a Cloud Spanner database backup.
     *
     * @generated from field: google.spanner.executor.v1.DeleteCloudBackupAction delete_cloud_backup = 22;
     */
    value: DeleteCloudBackupAction;
    case: "deleteCloudBackup";
  } | {
    /**
     * Action that lists Cloud Spanner database backups.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudBackupsAction list_cloud_backups = 23;
     */
    value: ListCloudBackupsAction;
    case: "listCloudBackups";
  } | {
    /**
     * Action that lists Cloud Spanner database backup operations.
     *
     * @generated from field: google.spanner.executor.v1.ListCloudBackupOperationsAction list_cloud_backup_operations = 24;
     */
    value: ListCloudBackupOperationsAction;
    case: "listCloudBackupOperations";
  } | {
    /**
     * Action that gets an operation.
     *
     * @generated from field: google.spanner.executor.v1.GetOperationAction get_operation = 25;
     */
    value: GetOperationAction;
    case: "getOperation";
  } | {
    /**
     * Action that cancels an operation.
     *
     * @generated from field: google.spanner.executor.v1.CancelOperationAction cancel_operation = 26;
     */
    value: CancelOperationAction;
    case: "cancelOperation";
  } | {
    /**
     * Action that changes quorum of a Cloud Spanner database.
     *
     * @generated from field: google.spanner.executor.v1.ChangeQuorumCloudDatabaseAction change_quorum_cloud_database = 28;
     */
    value: ChangeQuorumCloudDatabaseAction;
    case: "changeQuorumCloudDatabase";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.executor.v1.AdminAction.
 * Use `create(AdminActionSchema)` to create a new message.
 */
export const AdminActionSchema: GenMessage<AdminAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 20);

/**
 * Action that creates a user instance config.
 *
 * @generated from message google.spanner.executor.v1.CreateUserInstanceConfigAction
 */
export type CreateUserInstanceConfigAction = Message<"google.spanner.executor.v1.CreateUserInstanceConfigAction"> & {
  /**
   * User instance config ID (not path), e.g. "custom-config".
   *
   * @generated from field: string user_config_id = 1;
   */
  userConfigId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Base config ID, e.g. "test-config".
   *
   * @generated from field: string base_config_id = 3;
   */
  baseConfigId: string;

  /**
   * Replicas that should be included in the user config.
   *
   * @generated from field: repeated google.spanner.admin.instance.v1.ReplicaInfo replicas = 4;
   */
  replicas: ReplicaInfo[];
};

/**
 * Describes the message google.spanner.executor.v1.CreateUserInstanceConfigAction.
 * Use `create(CreateUserInstanceConfigActionSchema)` to create a new message.
 */
export const CreateUserInstanceConfigActionSchema: GenMessage<CreateUserInstanceConfigAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 21);

/**
 * Action that updates a user instance config.
 *
 * @generated from message google.spanner.executor.v1.UpdateUserInstanceConfigAction
 */
export type UpdateUserInstanceConfigAction = Message<"google.spanner.executor.v1.UpdateUserInstanceConfigAction"> & {
  /**
   * User instance config ID (not path), e.g. "custom-config".
   *
   * @generated from field: string user_config_id = 1;
   */
  userConfigId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * The descriptive name for this instance config as it appears in UIs.
   *
   * @generated from field: optional string display_name = 3;
   */
  displayName?: string;

  /**
   * labels.
   *
   * @generated from field: map<string, string> labels = 4;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.spanner.executor.v1.UpdateUserInstanceConfigAction.
 * Use `create(UpdateUserInstanceConfigActionSchema)` to create a new message.
 */
export const UpdateUserInstanceConfigActionSchema: GenMessage<UpdateUserInstanceConfigAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 22);

/**
 * Action that gets a user instance config.
 *
 * @generated from message google.spanner.executor.v1.GetCloudInstanceConfigAction
 */
export type GetCloudInstanceConfigAction = Message<"google.spanner.executor.v1.GetCloudInstanceConfigAction"> & {
  /**
   * Instance config ID (not path), e.g. "custom-config".
   *
   * @generated from field: string instance_config_id = 1;
   */
  instanceConfigId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.spanner.executor.v1.GetCloudInstanceConfigAction.
 * Use `create(GetCloudInstanceConfigActionSchema)` to create a new message.
 */
export const GetCloudInstanceConfigActionSchema: GenMessage<GetCloudInstanceConfigAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 23);

/**
 * Action that deletes a user instance configs.
 *
 * @generated from message google.spanner.executor.v1.DeleteUserInstanceConfigAction
 */
export type DeleteUserInstanceConfigAction = Message<"google.spanner.executor.v1.DeleteUserInstanceConfigAction"> & {
  /**
   * User instance config ID (not path), e.g. "custom-config".
   *
   * @generated from field: string user_config_id = 1;
   */
  userConfigId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.spanner.executor.v1.DeleteUserInstanceConfigAction.
 * Use `create(DeleteUserInstanceConfigActionSchema)` to create a new message.
 */
export const DeleteUserInstanceConfigActionSchema: GenMessage<DeleteUserInstanceConfigAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 24);

/**
 * Action that lists user instance configs.
 *
 * @generated from message google.spanner.executor.v1.ListCloudInstanceConfigsAction
 */
export type ListCloudInstanceConfigsAction = Message<"google.spanner.executor.v1.ListCloudInstanceConfigsAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Number of instance configs to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: optional int32 page_size = 2;
   */
  pageSize?: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListInstanceConfigsResponse to the same "parent".
   *
   * @generated from field: optional string page_token = 3;
   */
  pageToken?: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudInstanceConfigsAction.
 * Use `create(ListCloudInstanceConfigsActionSchema)` to create a new message.
 */
export const ListCloudInstanceConfigsActionSchema: GenMessage<ListCloudInstanceConfigsAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 25);

/**
 * Action that creates a Cloud Spanner instance.
 *
 * @generated from message google.spanner.executor.v1.CreateCloudInstanceAction
 */
export type CreateCloudInstanceAction = Message<"google.spanner.executor.v1.CreateCloudInstanceAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Instance config ID, e.g. "test-config".
   *
   * @generated from field: string instance_config_id = 3;
   */
  instanceConfigId: string;

  /**
   * Number of nodes (processing_units should not be set or set to 0 if used).
   *
   * @generated from field: optional int32 node_count = 4;
   */
  nodeCount?: number;

  /**
   * Number of processing units (node_count should be set to 0 if used).
   *
   * @generated from field: optional int32 processing_units = 6;
   */
  processingUnits?: number;

  /**
   * The autoscaling config for this instance. If non-empty, an autoscaling
   * instance will be created (processing_units and node_count should be set to
   * 0 if used).
   *
   * @generated from field: optional google.spanner.admin.instance.v1.AutoscalingConfig autoscaling_config = 7;
   */
  autoscalingConfig?: AutoscalingConfig;

  /**
   * labels.
   *
   * @generated from field: map<string, string> labels = 5;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.spanner.executor.v1.CreateCloudInstanceAction.
 * Use `create(CreateCloudInstanceActionSchema)` to create a new message.
 */
export const CreateCloudInstanceActionSchema: GenMessage<CreateCloudInstanceAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 26);

/**
 * Action that updates a Cloud Spanner instance.
 *
 * @generated from message google.spanner.executor.v1.UpdateCloudInstanceAction
 */
export type UpdateCloudInstanceAction = Message<"google.spanner.executor.v1.UpdateCloudInstanceAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * The descriptive name for this instance as it appears in UIs.
   * Must be unique per project and between 4 and 30 characters in length.
   *
   * @generated from field: optional string display_name = 3;
   */
  displayName?: string;

  /**
   * The number of nodes allocated to this instance. At most one of either
   * node_count or processing_units should be present in the message.
   *
   * @generated from field: optional int32 node_count = 4;
   */
  nodeCount?: number;

  /**
   * The number of processing units allocated to this instance. At most one of
   * processing_units or node_count should be present in the message.
   *
   * @generated from field: optional int32 processing_units = 5;
   */
  processingUnits?: number;

  /**
   * The autoscaling config for this instance. If non-empty, this instance is
   * using autoscaling (processing_units and node_count should be set to
   * 0 if used).
   *
   * @generated from field: optional google.spanner.admin.instance.v1.AutoscalingConfig autoscaling_config = 7;
   */
  autoscalingConfig?: AutoscalingConfig;

  /**
   * labels.
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.spanner.executor.v1.UpdateCloudInstanceAction.
 * Use `create(UpdateCloudInstanceActionSchema)` to create a new message.
 */
export const UpdateCloudInstanceActionSchema: GenMessage<UpdateCloudInstanceAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 27);

/**
 * Action that deletes a Cloud Spanner instance.
 *
 * @generated from message google.spanner.executor.v1.DeleteCloudInstanceAction
 */
export type DeleteCloudInstanceAction = Message<"google.spanner.executor.v1.DeleteCloudInstanceAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;
};

/**
 * Describes the message google.spanner.executor.v1.DeleteCloudInstanceAction.
 * Use `create(DeleteCloudInstanceActionSchema)` to create a new message.
 */
export const DeleteCloudInstanceActionSchema: GenMessage<DeleteCloudInstanceAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 28);

/**
 * Action that creates a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.CreateCloudDatabaseAction
 */
export type CreateCloudDatabaseAction = Message<"google.spanner.executor.v1.CreateCloudDatabaseAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Cloud database ID (not full path), e.g. "db0".
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;

  /**
   * SDL statements to apply to the new database.
   *
   * @generated from field: repeated string sdl_statement = 4;
   */
  sdlStatement: string[];

  /**
   * The KMS key used to encrypt the database to be created if the database
   * should be CMEK protected.
   *
   * @generated from field: google.spanner.admin.database.v1.EncryptionConfig encryption_config = 5;
   */
  encryptionConfig?: EncryptionConfig;

  /**
   * Optional SQL dialect (GOOGLESQL or POSTGRESQL).  Default: GOOGLESQL.
   *
   * @generated from field: optional string dialect = 6;
   */
  dialect?: string;

  /**
   * @generated from field: optional bytes proto_descriptors = 7;
   */
  protoDescriptors?: Uint8Array;
};

/**
 * Describes the message google.spanner.executor.v1.CreateCloudDatabaseAction.
 * Use `create(CreateCloudDatabaseActionSchema)` to create a new message.
 */
export const CreateCloudDatabaseActionSchema: GenMessage<CreateCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 29);

/**
 * Action that updates the schema of a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.UpdateCloudDatabaseDdlAction
 */
export type UpdateCloudDatabaseDdlAction = Message<"google.spanner.executor.v1.UpdateCloudDatabaseDdlAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Cloud database ID (not full path), e.g. "db0".
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;

  /**
   * SDL statements to apply to the database.
   *
   * @generated from field: repeated string sdl_statement = 4;
   */
  sdlStatement: string[];

  /**
   * Op ID can be used to track progress of the update. If set, it must be
   * unique per database. If not set, Cloud Spanner will generate operation ID
   * automatically.
   *
   * @generated from field: string operation_id = 5;
   */
  operationId: string;

  /**
   * @generated from field: optional bytes proto_descriptors = 6;
   */
  protoDescriptors?: Uint8Array;
};

/**
 * Describes the message google.spanner.executor.v1.UpdateCloudDatabaseDdlAction.
 * Use `create(UpdateCloudDatabaseDdlActionSchema)` to create a new message.
 */
export const UpdateCloudDatabaseDdlActionSchema: GenMessage<UpdateCloudDatabaseDdlAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 30);

/**
 * Action that updates a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.UpdateCloudDatabaseAction
 */
export type UpdateCloudDatabaseAction = Message<"google.spanner.executor.v1.UpdateCloudDatabaseAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Cloud database name (not full path), e.g. "db0".
   *
   * @generated from field: string database_name = 3;
   */
  databaseName: string;

  /**
   * Updated value of enable_drop_protection, this is the only field that has
   * supported to be updated.
   *
   * @generated from field: bool enable_drop_protection = 4;
   */
  enableDropProtection: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.UpdateCloudDatabaseAction.
 * Use `create(UpdateCloudDatabaseActionSchema)` to create a new message.
 */
export const UpdateCloudDatabaseActionSchema: GenMessage<UpdateCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 31);

/**
 * Action that drops a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.DropCloudDatabaseAction
 */
export type DropCloudDatabaseAction = Message<"google.spanner.executor.v1.DropCloudDatabaseAction"> & {
  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId: string;

  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 2;
   */
  projectId: string;

  /**
   * Cloud database ID (not full path), e.g. "db0".
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;
};

/**
 * Describes the message google.spanner.executor.v1.DropCloudDatabaseAction.
 * Use `create(DropCloudDatabaseActionSchema)` to create a new message.
 */
export const DropCloudDatabaseActionSchema: GenMessage<DropCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 32);

/**
 * Action that changes quorum of a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.ChangeQuorumCloudDatabaseAction
 */
export type ChangeQuorumCloudDatabaseAction = Message<"google.spanner.executor.v1.ChangeQuorumCloudDatabaseAction"> & {
  /**
   * The fully qualified uri of the database whose quorum has to be changed.
   *
   * @generated from field: optional string database_uri = 1;
   */
  databaseUri?: string;

  /**
   * The locations of the serving regions, e.g. "asia-south1".
   *
   * @generated from field: repeated string serving_locations = 2;
   */
  servingLocations: string[];
};

/**
 * Describes the message google.spanner.executor.v1.ChangeQuorumCloudDatabaseAction.
 * Use `create(ChangeQuorumCloudDatabaseActionSchema)` to create a new message.
 */
export const ChangeQuorumCloudDatabaseActionSchema: GenMessage<ChangeQuorumCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 33);

/**
 * Action that lists Cloud Spanner databases.
 *
 * @generated from message google.spanner.executor.v1.ListCloudDatabasesAction
 */
export type ListCloudDatabasesAction = Message<"google.spanner.executor.v1.ListCloudDatabasesAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) to list databases from, e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Number of databases to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListDatabasesResponse to the same "parent"
   * and with the same "filter".
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudDatabasesAction.
 * Use `create(ListCloudDatabasesActionSchema)` to create a new message.
 */
export const ListCloudDatabasesActionSchema: GenMessage<ListCloudDatabasesAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 34);

/**
 * Action that lists Cloud Spanner databases.
 *
 * @generated from message google.spanner.executor.v1.ListCloudInstancesAction
 */
export type ListCloudInstancesAction = Message<"google.spanner.executor.v1.ListCloudInstancesAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * A filter expression that filters what operations are returned in the
   * response.
   * The expression must specify the field name, a comparison operator,
   * and the value that you want to use for filtering.
   * Refer spanner_instance_admin.proto.ListInstancesRequest for
   * detail.
   *
   * @generated from field: optional string filter = 2;
   */
  filter?: string;

  /**
   * Number of instances to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: optional int32 page_size = 3;
   */
  pageSize?: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListInstancesResponse to the same "parent"
   * and with the same "filter".
   *
   * @generated from field: optional string page_token = 4;
   */
  pageToken?: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudInstancesAction.
 * Use `create(ListCloudInstancesActionSchema)` to create a new message.
 */
export const ListCloudInstancesActionSchema: GenMessage<ListCloudInstancesAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 35);

/**
 * Action that retrieves a Cloud Spanner instance.
 *
 * @generated from message google.spanner.executor.v1.GetCloudInstanceAction
 */
export type GetCloudInstanceAction = Message<"google.spanner.executor.v1.GetCloudInstanceAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) to retrieve the instance from,
   * e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;
};

/**
 * Describes the message google.spanner.executor.v1.GetCloudInstanceAction.
 * Use `create(GetCloudInstanceActionSchema)` to create a new message.
 */
export const GetCloudInstanceActionSchema: GenMessage<GetCloudInstanceAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 36);

/**
 * Action that lists Cloud Spanner database operations.
 *
 * @generated from message google.spanner.executor.v1.ListCloudDatabaseOperationsAction
 */
export type ListCloudDatabaseOperationsAction = Message<"google.spanner.executor.v1.ListCloudDatabaseOperationsAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) to list database operations from,
   * e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * A filter expression that filters what operations are returned in the
   * response.
   * The expression must specify the field name, a comparison operator,
   * and the value that you want to use for filtering.
   * Refer spanner_database_admin.proto.ListDatabaseOperationsRequest for
   * detail.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Number of databases to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListDatabaseOperationsResponse to the same "parent"
   * and with the same "filter".
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudDatabaseOperationsAction.
 * Use `create(ListCloudDatabaseOperationsActionSchema)` to create a new message.
 */
export const ListCloudDatabaseOperationsActionSchema: GenMessage<ListCloudDatabaseOperationsAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 37);

/**
 * Action that restores a Cloud Spanner database from a backup.
 *
 * @generated from message google.spanner.executor.v1.RestoreCloudDatabaseAction
 */
export type RestoreCloudDatabaseAction = Message<"google.spanner.executor.v1.RestoreCloudDatabaseAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) containing the backup, e.g. "backup-instance".
   *
   * @generated from field: string backup_instance_id = 2;
   */
  backupInstanceId: string;

  /**
   * The id of the backup from which to restore, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;

  /**
   * Cloud instance ID (not path) containing the database, e.g.
   * "database-instance".
   *
   * @generated from field: string database_instance_id = 4;
   */
  databaseInstanceId: string;

  /**
   * The id of the database to create and restore to, e.g. "db0". Note that this
   * database must not already exist.
   *
   * @generated from field: string database_id = 5;
   */
  databaseId: string;

  /**
   * The KMS key(s) used to encrypt the restored database to be created if the
   * restored database should be CMEK protected.
   *
   * @generated from field: google.spanner.admin.database.v1.EncryptionConfig encryption_config = 7;
   */
  encryptionConfig?: EncryptionConfig;
};

/**
 * Describes the message google.spanner.executor.v1.RestoreCloudDatabaseAction.
 * Use `create(RestoreCloudDatabaseActionSchema)` to create a new message.
 */
export const RestoreCloudDatabaseActionSchema: GenMessage<RestoreCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 38);

/**
 * Action that gets a Cloud Spanner database.
 *
 * @generated from message google.spanner.executor.v1.GetCloudDatabaseAction
 */
export type GetCloudDatabaseAction = Message<"google.spanner.executor.v1.GetCloudDatabaseAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the database to get, e.g. "db0".
   *
   * @generated from field: string database_id = 3;
   */
  databaseId: string;
};

/**
 * Describes the message google.spanner.executor.v1.GetCloudDatabaseAction.
 * Use `create(GetCloudDatabaseActionSchema)` to create a new message.
 */
export const GetCloudDatabaseActionSchema: GenMessage<GetCloudDatabaseAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 39);

/**
 * Action that creates a Cloud Spanner database backup.
 *
 * @generated from message google.spanner.executor.v1.CreateCloudBackupAction
 */
export type CreateCloudBackupAction = Message<"google.spanner.executor.v1.CreateCloudBackupAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the backup to be created, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;

  /**
   * The id of the database from which this backup was
   * created, e.g. "db0". Note that this needs to be in the
   * same instance as the backup.
   *
   * @generated from field: string database_id = 4;
   */
  databaseId: string;

  /**
   * Output only. The expiration time of the backup, which must be at least 6
   * hours and at most 366 days from the time the request is received.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;

  /**
   * The version time of the backup, which must be within the time range of
   * [earliest_version_time, NOW], where earliest_version_time is retrieved by
   * cloud spanner frontend API (See details: go/cs-pitr-lite-design).
   *
   * @generated from field: optional google.protobuf.Timestamp version_time = 6;
   */
  versionTime?: Timestamp;

  /**
   * The KMS key(s) used to encrypt the backup to be created if the backup
   * should be CMEK protected.
   *
   * @generated from field: google.spanner.admin.database.v1.EncryptionConfig encryption_config = 7;
   */
  encryptionConfig?: EncryptionConfig;
};

/**
 * Describes the message google.spanner.executor.v1.CreateCloudBackupAction.
 * Use `create(CreateCloudBackupActionSchema)` to create a new message.
 */
export const CreateCloudBackupActionSchema: GenMessage<CreateCloudBackupAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 40);

/**
 * Action that copies a Cloud Spanner database backup.
 *
 * @generated from message google.spanner.executor.v1.CopyCloudBackupAction
 */
export type CopyCloudBackupAction = Message<"google.spanner.executor.v1.CopyCloudBackupAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the backup to be created, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;

  /**
   * The fully qualified uri of the source backup from which this
   * backup was copied. eg.
   * "projects/<project_id>/instances/<instance_id>/backups/<backup_id>".
   *
   * @generated from field: string source_backup = 4;
   */
  sourceBackup: string;

  /**
   * Output only. The expiration time of the backup, which must be at least 6
   * hours and at most 366 days from the time the request is received.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 5;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.spanner.executor.v1.CopyCloudBackupAction.
 * Use `create(CopyCloudBackupActionSchema)` to create a new message.
 */
export const CopyCloudBackupActionSchema: GenMessage<CopyCloudBackupAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 41);

/**
 * Action that gets a Cloud Spanner database backup.
 *
 * @generated from message google.spanner.executor.v1.GetCloudBackupAction
 */
export type GetCloudBackupAction = Message<"google.spanner.executor.v1.GetCloudBackupAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the backup to get, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;
};

/**
 * Describes the message google.spanner.executor.v1.GetCloudBackupAction.
 * Use `create(GetCloudBackupActionSchema)` to create a new message.
 */
export const GetCloudBackupActionSchema: GenMessage<GetCloudBackupAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 42);

/**
 * Action that updates a Cloud Spanner database backup.
 *
 * @generated from message google.spanner.executor.v1.UpdateCloudBackupAction
 */
export type UpdateCloudBackupAction = Message<"google.spanner.executor.v1.UpdateCloudBackupAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the backup to update, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;

  /**
   * Output only. Updated value of expire_time, this is the only field
   * that supported to be updated.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 4;
   */
  expireTime?: Timestamp;
};

/**
 * Describes the message google.spanner.executor.v1.UpdateCloudBackupAction.
 * Use `create(UpdateCloudBackupActionSchema)` to create a new message.
 */
export const UpdateCloudBackupActionSchema: GenMessage<UpdateCloudBackupAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 43);

/**
 * Action that deletes a Cloud Spanner database backup.
 *
 * @generated from message google.spanner.executor.v1.DeleteCloudBackupAction
 */
export type DeleteCloudBackupAction = Message<"google.spanner.executor.v1.DeleteCloudBackupAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path), e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * The id of the backup to delete, e.g. "test-backup".
   *
   * @generated from field: string backup_id = 3;
   */
  backupId: string;
};

/**
 * Describes the message google.spanner.executor.v1.DeleteCloudBackupAction.
 * Use `create(DeleteCloudBackupActionSchema)` to create a new message.
 */
export const DeleteCloudBackupActionSchema: GenMessage<DeleteCloudBackupAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 44);

/**
 * Action that lists Cloud Spanner database backups.
 *
 * @generated from message google.spanner.executor.v1.ListCloudBackupsAction
 */
export type ListCloudBackupsAction = Message<"google.spanner.executor.v1.ListCloudBackupsAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) to list backups from, e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * A filter expression that filters backups listed in the response.
   * The expression must specify the field name, a comparison operator,
   * and the value that you want to use for filtering.
   * Refer backup.proto.ListBackupsRequest for detail.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Number of backups to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListBackupsResponse to the same "parent"
   * and with the same "filter".
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudBackupsAction.
 * Use `create(ListCloudBackupsActionSchema)` to create a new message.
 */
export const ListCloudBackupsActionSchema: GenMessage<ListCloudBackupsAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 45);

/**
 * Action that lists Cloud Spanner database backup operations.
 *
 * @generated from message google.spanner.executor.v1.ListCloudBackupOperationsAction
 */
export type ListCloudBackupOperationsAction = Message<"google.spanner.executor.v1.ListCloudBackupOperationsAction"> & {
  /**
   * Cloud project ID, e.g. "spanner-cloud-systest".
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Cloud instance ID (not path) to list backup operations from,
   * e.g. "test-instance".
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * A filter expression that filters what operations are returned in the
   * response.
   * The expression must specify the field name, a comparison operator,
   * and the value that you want to use for filtering.
   * Refer backup.proto.ListBackupOperationsRequest for detail.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;

  /**
   * Number of backups to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 4;
   */
  pageSize: number;

  /**
   * If non-empty, "page_token" should contain a next_page_token
   * from a previous ListBackupOperationsResponse to the same "parent"
   * and with the same "filter".
   *
   * @generated from field: string page_token = 5;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.executor.v1.ListCloudBackupOperationsAction.
 * Use `create(ListCloudBackupOperationsActionSchema)` to create a new message.
 */
export const ListCloudBackupOperationsActionSchema: GenMessage<ListCloudBackupOperationsAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 46);

/**
 * Action that gets an operation.
 *
 * @generated from message google.spanner.executor.v1.GetOperationAction
 */
export type GetOperationAction = Message<"google.spanner.executor.v1.GetOperationAction"> & {
  /**
   * The name of the operation resource.
   *
   * @generated from field: string operation = 1;
   */
  operation: string;
};

/**
 * Describes the message google.spanner.executor.v1.GetOperationAction.
 * Use `create(GetOperationActionSchema)` to create a new message.
 */
export const GetOperationActionSchema: GenMessage<GetOperationAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 47);

/**
 * Query cancellation action defines the long running query and the cancel query
 * format depening on the Cloud database dialect.
 *
 * @generated from message google.spanner.executor.v1.QueryCancellationAction
 */
export type QueryCancellationAction = Message<"google.spanner.executor.v1.QueryCancellationAction"> & {
  /**
   * Long running query.
   *
   * @generated from field: string long_running_sql = 1;
   */
  longRunningSql: string;

  /**
   * Format of the cancel query for the cloud database dialect.
   *
   * @generated from field: string cancel_query = 2;
   */
  cancelQuery: string;
};

/**
 * Describes the message google.spanner.executor.v1.QueryCancellationAction.
 * Use `create(QueryCancellationActionSchema)` to create a new message.
 */
export const QueryCancellationActionSchema: GenMessage<QueryCancellationAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 48);

/**
 * Action that cancels an operation.
 *
 * @generated from message google.spanner.executor.v1.CancelOperationAction
 */
export type CancelOperationAction = Message<"google.spanner.executor.v1.CancelOperationAction"> & {
  /**
   * The name of the operation resource to be cancelled.
   *
   * @generated from field: string operation = 1;
   */
  operation: string;
};

/**
 * Describes the message google.spanner.executor.v1.CancelOperationAction.
 * Use `create(CancelOperationActionSchema)` to create a new message.
 */
export const CancelOperationActionSchema: GenMessage<CancelOperationAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 49);

/**
 * Starts a batch read-only transaction in executor. Successful outcomes of this
 * action will contain batch_txn_id--the identificator that can be used to start
 * the same transaction in other Executors to parallelize partition processing.
 *
 * Example of a batch read flow:
 * 1. Start batch transaction with a timestamp (StartBatchTransactionAction)
 * 2. Generate database partitions for a read or query
 * (GenerateDbPartitionsForReadAction/GenerateDbPartitionsForQueryAction)
 * 3. Call ExecutePartitionAction for some or all partitions, process rows
 * 4. Clean up the transaction (CloseBatchTransactionAction).
 *
 * More sophisticated example, with parallel processing:
 * 1. Start batch transaction with a timestamp (StartBatchTransactionAction),
 * note the returned BatchTransactionId
 * 2. Generate database partitions for a read or query
 * (GenerateDbPartitionsForReadAction/GenerateDbPartitionsForQueryAction)
 * 3. Distribute the partitions over a pool of workers, along with the
 * transaction ID.
 *
 * In each worker:
 * 4-1. StartBatchTransactionAction with the given transaction ID
 * 4-2. ExecutePartitionAction for each partition it got, process read results
 * 4-3. Close (not cleanup) the transaction (CloseBatchTransactionAction).
 *
 * When all workers are done:
 * 5. Cleanup the transaction (CloseBatchTransactionAction). This can be done
 * either by the last worker to finish the job, or by the main Executor that
 * initialized this transaction in the first place. It is also possible to clean
 * it up with a brand new Executor -- just execute StartBatchTransactionAction
 * with the ID, then clean it up right away.
 *
 * Cleaning up is optional, but recommended.
 *
 * @generated from message google.spanner.executor.v1.StartBatchTransactionAction
 */
export type StartBatchTransactionAction = Message<"google.spanner.executor.v1.StartBatchTransactionAction"> & {
  /**
   * To start a new transaction, specify an exact timestamp. Alternatively, an
   * existing batch transaction ID can be used. Either one of two must be
   * set.
   *
   * @generated from oneof google.spanner.executor.v1.StartBatchTransactionAction.param
   */
  param: {
    /**
     * The exact timestamp to start the batch transaction.
     *
     * @generated from field: google.protobuf.Timestamp batch_txn_time = 1;
     */
    value: Timestamp;
    case: "batchTxnTime";
  } | {
    /**
     * ID of a batch read-only transaction. It can be used to start the same
     * batch transaction on multiple executors and parallelize partition
     * processing.
     *
     * @generated from field: bytes tid = 2;
     */
    value: Uint8Array;
    case: "tid";
  } | { case: undefined; value?: undefined };

  /**
   * Database role to assume while performing this action. Setting the
   * database_role will enforce additional role-based access checks on this
   * action.
   *
   * @generated from field: string cloud_database_role = 3;
   */
  cloudDatabaseRole: string;
};

/**
 * Describes the message google.spanner.executor.v1.StartBatchTransactionAction.
 * Use `create(StartBatchTransactionActionSchema)` to create a new message.
 */
export const StartBatchTransactionActionSchema: GenMessage<StartBatchTransactionAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 50);

/**
 * Closes or cleans up the currently opened batch read-only transaction.
 *
 * Once a transaction is closed, the Executor can be disposed of or used to
 * start start another transaction. Closing a batch transaction in one Executor
 * doesn't affect the transaction's state in other Executors that also read from
 * it.
 *
 * When a transaction is cleaned up, it becomes globally invalid. Cleaning up is
 * optional, but recommended.
 *
 * @generated from message google.spanner.executor.v1.CloseBatchTransactionAction
 */
export type CloseBatchTransactionAction = Message<"google.spanner.executor.v1.CloseBatchTransactionAction"> & {
  /**
   * Indicates whether the transaction needs to be cleaned up.
   *
   * @generated from field: bool cleanup = 1;
   */
  cleanup: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.CloseBatchTransactionAction.
 * Use `create(CloseBatchTransactionActionSchema)` to create a new message.
 */
export const CloseBatchTransactionActionSchema: GenMessage<CloseBatchTransactionAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 51);

/**
 * Generate database partitions for the given read. Successful outcomes will
 * contain database partitions in the db_partition field.
 *
 * @generated from message google.spanner.executor.v1.GenerateDbPartitionsForReadAction
 */
export type GenerateDbPartitionsForReadAction = Message<"google.spanner.executor.v1.GenerateDbPartitionsForReadAction"> & {
  /**
   * Read to generate partitions for.
   *
   * @generated from field: google.spanner.executor.v1.ReadAction read = 1;
   */
  read?: ReadAction;

  /**
   * Metadata related to the tables involved in the read.
   *
   * @generated from field: repeated google.spanner.executor.v1.TableMetadata table = 2;
   */
  table: TableMetadata[];

  /**
   * Desired size of data in each partition. Spanner doesn't guarantee to
   * respect this value.
   *
   * @generated from field: optional int64 desired_bytes_per_partition = 3;
   */
  desiredBytesPerPartition?: bigint;

  /**
   * If set, the desired max number of partitions. Spanner doesn't guarantee to
   * respect this value.
   *
   * @generated from field: optional int64 max_partition_count = 4;
   */
  maxPartitionCount?: bigint;
};

/**
 * Describes the message google.spanner.executor.v1.GenerateDbPartitionsForReadAction.
 * Use `create(GenerateDbPartitionsForReadActionSchema)` to create a new message.
 */
export const GenerateDbPartitionsForReadActionSchema: GenMessage<GenerateDbPartitionsForReadAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 52);

/**
 * Generate database partitions for the given query. Successful outcomes will
 * contain database partitions in the db_partition field.
 *
 * @generated from message google.spanner.executor.v1.GenerateDbPartitionsForQueryAction
 */
export type GenerateDbPartitionsForQueryAction = Message<"google.spanner.executor.v1.GenerateDbPartitionsForQueryAction"> & {
  /**
   * Query to generate partitions for.
   *
   * @generated from field: google.spanner.executor.v1.QueryAction query = 1;
   */
  query?: QueryAction;

  /**
   * Desired size of data in each partition. Spanner doesn't guarantee to
   * respect this value.
   *
   * @generated from field: optional int64 desired_bytes_per_partition = 2;
   */
  desiredBytesPerPartition?: bigint;
};

/**
 * Describes the message google.spanner.executor.v1.GenerateDbPartitionsForQueryAction.
 * Use `create(GenerateDbPartitionsForQueryActionSchema)` to create a new message.
 */
export const GenerateDbPartitionsForQueryActionSchema: GenMessage<GenerateDbPartitionsForQueryAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 53);

/**
 * Identifies a database partition generated for a particular read or query. To
 * read rows from the partition, use ExecutePartitionAction.
 *
 * @generated from message google.spanner.executor.v1.BatchPartition
 */
export type BatchPartition = Message<"google.spanner.executor.v1.BatchPartition"> & {
  /**
   * Serialized Partition instance.
   *
   * @generated from field: bytes partition = 1;
   */
  partition: Uint8Array;

  /**
   * The partition token decrypted from partition.
   *
   * @generated from field: bytes partition_token = 2;
   */
  partitionToken: Uint8Array;

  /**
   * Table name is set iff the partition was generated for a read (as opposed to
   * a query).
   *
   * @generated from field: optional string table = 3;
   */
  table?: string;

  /**
   * Index name if the partition was generated for an index read.
   *
   * @generated from field: optional string index = 4;
   */
  index?: string;
};

/**
 * Describes the message google.spanner.executor.v1.BatchPartition.
 * Use `create(BatchPartitionSchema)` to create a new message.
 */
export const BatchPartitionSchema: GenMessage<BatchPartition> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 54);

/**
 * Performs a read or query for the given partitions. This action must be
 * executed in the context of the same transaction that was used to generate
 * given partitions.
 *
 * @generated from message google.spanner.executor.v1.ExecutePartitionAction
 */
export type ExecutePartitionAction = Message<"google.spanner.executor.v1.ExecutePartitionAction"> & {
  /**
   * Batch partition to execute on.
   *
   * @generated from field: google.spanner.executor.v1.BatchPartition partition = 1;
   */
  partition?: BatchPartition;
};

/**
 * Describes the message google.spanner.executor.v1.ExecutePartitionAction.
 * Use `create(ExecutePartitionActionSchema)` to create a new message.
 */
export const ExecutePartitionActionSchema: GenMessage<ExecutePartitionAction> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 55);

/**
 * Execute a change stream TVF query.
 *
 * @generated from message google.spanner.executor.v1.ExecuteChangeStreamQuery
 */
export type ExecuteChangeStreamQuery = Message<"google.spanner.executor.v1.ExecuteChangeStreamQuery"> & {
  /**
   * Name for this change stream.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Specifies that records with commit_timestamp greater than or equal to
   * start_time should be returned.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * Specifies that records with commit_timestamp less than or equal to
   * end_time should be returned.
   *
   * @generated from field: optional google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  /**
   * Specifies which change stream partition to query, based on the content of
   * child partitions records.
   *
   * @generated from field: optional string partition_token = 4;
   */
  partitionToken?: string;

  /**
   * Read options for this change stream query.
   *
   * @generated from field: repeated string read_options = 5;
   */
  readOptions: string[];

  /**
   * Determines how frequently a heartbeat ChangeRecord will be returned in case
   * there are no transactions committed in this partition, in milliseconds.
   *
   * @generated from field: optional int32 heartbeat_milliseconds = 6;
   */
  heartbeatMilliseconds?: number;

  /**
   * Deadline for this change stream query, in seconds.
   *
   * @generated from field: optional int64 deadline_seconds = 7;
   */
  deadlineSeconds?: bigint;

  /**
   * Database role to assume while performing this action. This should only be
   * set for cloud requests. Setting the database role will enforce additional
   * role-based access checks on this action.
   *
   * @generated from field: optional string cloud_database_role = 8;
   */
  cloudDatabaseRole?: string;
};

/**
 * Describes the message google.spanner.executor.v1.ExecuteChangeStreamQuery.
 * Use `create(ExecuteChangeStreamQuerySchema)` to create a new message.
 */
export const ExecuteChangeStreamQuerySchema: GenMessage<ExecuteChangeStreamQuery> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 56);

/**
 * SpannerActionOutcome defines a result of execution of a single SpannerAction.
 *
 * @generated from message google.spanner.executor.v1.SpannerActionOutcome
 */
export type SpannerActionOutcome = Message<"google.spanner.executor.v1.SpannerActionOutcome"> & {
  /**
   * If an outcome is split into multiple parts, status will be set only in the
   * last part.
   *
   * @generated from field: optional google.rpc.Status status = 1;
   */
  status?: Status;

  /**
   * Transaction timestamp. It must be set for successful committed actions.
   *
   * @generated from field: optional google.protobuf.Timestamp commit_time = 2;
   */
  commitTime?: Timestamp;

  /**
   * Result of a ReadAction. This field must be set for ReadActions even if
   * no rows were read.
   *
   * @generated from field: optional google.spanner.executor.v1.ReadResult read_result = 3;
   */
  readResult?: ReadResult;

  /**
   * Result of a Query. This field must be set for Queries even if no rows were
   * read.
   *
   * @generated from field: optional google.spanner.executor.v1.QueryResult query_result = 4;
   */
  queryResult?: QueryResult;

  /**
   * This bit indicates that Spanner has restarted the current transaction. It
   * means that the client should replay all the reads and writes.
   * Setting it to true is only valid in the context of a read-write
   * transaction, as an outcome of a committing FinishTransactionAction.
   *
   * @generated from field: optional bool transaction_restarted = 5;
   */
  transactionRestarted?: boolean;

  /**
   * In successful StartBatchTransactionAction outcomes, this contains the ID of
   * the transaction.
   *
   * @generated from field: optional bytes batch_txn_id = 6;
   */
  batchTxnId?: Uint8Array;

  /**
   * Generated database partitions (result of a
   * GenetageDbPartitionsForReadAction/GenerateDbPartitionsForQueryAction).
   *
   * @generated from field: repeated google.spanner.executor.v1.BatchPartition db_partition = 7;
   */
  dbPartition: BatchPartition[];

  /**
   * Result of admin related actions.
   *
   * @generated from field: optional google.spanner.executor.v1.AdminResult admin_result = 8;
   */
  adminResult?: AdminResult;

  /**
   * Stores rows modified by query in single DML or batch DML action.
   * In case of batch DML action, stores 0 as row count of errored DML query.
   *
   * @generated from field: repeated int64 dml_rows_modified = 9;
   */
  dmlRowsModified: bigint[];

  /**
   * Change stream records returned by a change stream query.
   *
   * @generated from field: repeated google.spanner.executor.v1.ChangeStreamRecord change_stream_records = 10;
   */
  changeStreamRecords: ChangeStreamRecord[];
};

/**
 * Describes the message google.spanner.executor.v1.SpannerActionOutcome.
 * Use `create(SpannerActionOutcomeSchema)` to create a new message.
 */
export const SpannerActionOutcomeSchema: GenMessage<SpannerActionOutcome> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 57);

/**
 * AdminResult contains admin action results, for database/backup/operation.
 *
 * @generated from message google.spanner.executor.v1.AdminResult
 */
export type AdminResult = Message<"google.spanner.executor.v1.AdminResult"> & {
  /**
   * Results of cloud backup related actions.
   *
   * @generated from field: google.spanner.executor.v1.CloudBackupResponse backup_response = 1;
   */
  backupResponse?: CloudBackupResponse;

  /**
   * Results of operation related actions.
   *
   * @generated from field: google.spanner.executor.v1.OperationResponse operation_response = 2;
   */
  operationResponse?: OperationResponse;

  /**
   * Results of database related actions.
   *
   * @generated from field: google.spanner.executor.v1.CloudDatabaseResponse database_response = 3;
   */
  databaseResponse?: CloudDatabaseResponse;

  /**
   * Results of instance related actions.
   *
   * @generated from field: google.spanner.executor.v1.CloudInstanceResponse instance_response = 4;
   */
  instanceResponse?: CloudInstanceResponse;

  /**
   * Results of instance config related actions.
   *
   * @generated from field: google.spanner.executor.v1.CloudInstanceConfigResponse instance_config_response = 5;
   */
  instanceConfigResponse?: CloudInstanceConfigResponse;
};

/**
 * Describes the message google.spanner.executor.v1.AdminResult.
 * Use `create(AdminResultSchema)` to create a new message.
 */
export const AdminResultSchema: GenMessage<AdminResult> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 58);

/**
 * CloudBackupResponse contains results returned by cloud backup related
 * actions.
 *
 * @generated from message google.spanner.executor.v1.CloudBackupResponse
 */
export type CloudBackupResponse = Message<"google.spanner.executor.v1.CloudBackupResponse"> & {
  /**
   * List of backups returned by ListCloudBackupsAction.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.Backup listed_backups = 1;
   */
  listedBackups: Backup[];

  /**
   * List of operations returned by ListCloudBackupOperationsAction.
   *
   * @generated from field: repeated google.longrunning.Operation listed_backup_operations = 2;
   */
  listedBackupOperations: Operation[];

  /**
   * "next_page_token" can be sent in a subsequent list action
   * to fetch more of the matching data.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  /**
   * Backup returned by GetCloudBackupAction/UpdateCloudBackupAction.
   *
   * @generated from field: google.spanner.admin.database.v1.Backup backup = 4;
   */
  backup?: Backup;
};

/**
 * Describes the message google.spanner.executor.v1.CloudBackupResponse.
 * Use `create(CloudBackupResponseSchema)` to create a new message.
 */
export const CloudBackupResponseSchema: GenMessage<CloudBackupResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 59);

/**
 * OperationResponse contains results returned by operation related actions.
 *
 * @generated from message google.spanner.executor.v1.OperationResponse
 */
export type OperationResponse = Message<"google.spanner.executor.v1.OperationResponse"> & {
  /**
   * List of operations returned by ListOperationsAction.
   *
   * @generated from field: repeated google.longrunning.Operation listed_operations = 1;
   */
  listedOperations: Operation[];

  /**
   * "next_page_token" can be sent in a subsequent list action
   * to fetch more of the matching data.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Operation returned by GetOperationAction.
   *
   * @generated from field: google.longrunning.Operation operation = 3;
   */
  operation?: Operation;
};

/**
 * Describes the message google.spanner.executor.v1.OperationResponse.
 * Use `create(OperationResponseSchema)` to create a new message.
 */
export const OperationResponseSchema: GenMessage<OperationResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 60);

/**
 * CloudInstanceResponse contains results returned by cloud instance related
 * actions.
 *
 * @generated from message google.spanner.executor.v1.CloudInstanceResponse
 */
export type CloudInstanceResponse = Message<"google.spanner.executor.v1.CloudInstanceResponse"> & {
  /**
   * List of instances returned by ListCloudInstancesAction.
   *
   * @generated from field: repeated google.spanner.admin.instance.v1.Instance listed_instances = 1;
   */
  listedInstances: Instance[];

  /**
   * "next_page_token" can be sent in a subsequent list action
   * to fetch more of the matching data.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Instance returned by GetCloudInstanceAction
   *
   * @generated from field: google.spanner.admin.instance.v1.Instance instance = 3;
   */
  instance?: Instance;
};

/**
 * Describes the message google.spanner.executor.v1.CloudInstanceResponse.
 * Use `create(CloudInstanceResponseSchema)` to create a new message.
 */
export const CloudInstanceResponseSchema: GenMessage<CloudInstanceResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 61);

/**
 * CloudInstanceConfigResponse contains results returned by cloud instance
 * config related actions.
 *
 * @generated from message google.spanner.executor.v1.CloudInstanceConfigResponse
 */
export type CloudInstanceConfigResponse = Message<"google.spanner.executor.v1.CloudInstanceConfigResponse"> & {
  /**
   * List of instance configs returned by ListCloudInstanceConfigsAction.
   *
   * @generated from field: repeated google.spanner.admin.instance.v1.InstanceConfig listed_instance_configs = 1;
   */
  listedInstanceConfigs: InstanceConfig[];

  /**
   * "next_page_token" can be sent in a subsequent list action
   * to fetch more of the matching data.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * Instance config returned by GetCloudInstanceConfigAction.
   *
   * @generated from field: google.spanner.admin.instance.v1.InstanceConfig instance_config = 3;
   */
  instanceConfig?: InstanceConfig;
};

/**
 * Describes the message google.spanner.executor.v1.CloudInstanceConfigResponse.
 * Use `create(CloudInstanceConfigResponseSchema)` to create a new message.
 */
export const CloudInstanceConfigResponseSchema: GenMessage<CloudInstanceConfigResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 62);

/**
 * CloudDatabaseResponse contains results returned by cloud database related
 * actions.
 *
 * @generated from message google.spanner.executor.v1.CloudDatabaseResponse
 */
export type CloudDatabaseResponse = Message<"google.spanner.executor.v1.CloudDatabaseResponse"> & {
  /**
   * List of databases returned by ListCloudDatabasesAction.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.Database listed_databases = 1;
   */
  listedDatabases: Database[];

  /**
   * List of operations returned by ListCloudDatabaseOperationsAction.
   *
   * @generated from field: repeated google.longrunning.Operation listed_database_operations = 2;
   */
  listedDatabaseOperations: Operation[];

  /**
   * "next_page_token" can be sent in a subsequent list action
   * to fetch more of the matching data.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;

  /**
   * Database returned by GetCloudDatabaseAction
   *
   * @generated from field: google.spanner.admin.database.v1.Database database = 4;
   */
  database?: Database;
};

/**
 * Describes the message google.spanner.executor.v1.CloudDatabaseResponse.
 * Use `create(CloudDatabaseResponseSchema)` to create a new message.
 */
export const CloudDatabaseResponseSchema: GenMessage<CloudDatabaseResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 63);

/**
 * ReadResult contains rows read.
 *
 * @generated from message google.spanner.executor.v1.ReadResult
 */
export type ReadResult = Message<"google.spanner.executor.v1.ReadResult"> & {
  /**
   * Table name.
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * Index name, if read from an index.
   *
   * @generated from field: optional string index = 2;
   */
  index?: string;

  /**
   * Request index (multiread only).
   *
   * @generated from field: optional int32 request_index = 3;
   */
  requestIndex?: number;

  /**
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   *
   * @generated from field: repeated google.spanner.executor.v1.ValueList row = 4;
   */
  row: ValueList[];

  /**
   * The type of rows read. It must be set if at least one row was read.
   *
   * @generated from field: optional google.spanner.v1.StructType row_type = 5;
   */
  rowType?: StructType;
};

/**
 * Describes the message google.spanner.executor.v1.ReadResult.
 * Use `create(ReadResultSchema)` to create a new message.
 */
export const ReadResultSchema: GenMessage<ReadResult> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 64);

/**
 * QueryResult contains result of a Query.
 *
 * @generated from message google.spanner.executor.v1.QueryResult
 */
export type QueryResult = Message<"google.spanner.executor.v1.QueryResult"> & {
  /**
   * Rows read. Each row is a struct with multiple fields, one for each column
   * in read result. All rows have the same type.
   *
   * @generated from field: repeated google.spanner.executor.v1.ValueList row = 1;
   */
  row: ValueList[];

  /**
   * The type of rows read. It must be set if at least one row was read.
   *
   * @generated from field: optional google.spanner.v1.StructType row_type = 2;
   */
  rowType?: StructType;
};

/**
 * Describes the message google.spanner.executor.v1.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export const QueryResultSchema: GenMessage<QueryResult> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 65);

/**
 * Raw ChangeStream records.
 * Encodes one of: DataChangeRecord, HeartbeatRecord, ChildPartitionsRecord
 * returned from the ChangeStream API.
 *
 * @generated from message google.spanner.executor.v1.ChangeStreamRecord
 */
export type ChangeStreamRecord = Message<"google.spanner.executor.v1.ChangeStreamRecord"> & {
  /**
   * Record represents one type of the change stream record.
   *
   * @generated from oneof google.spanner.executor.v1.ChangeStreamRecord.record
   */
  record: {
    /**
     * Data change record.
     *
     * @generated from field: google.spanner.executor.v1.DataChangeRecord data_change = 1;
     */
    value: DataChangeRecord;
    case: "dataChange";
  } | {
    /**
     * Child partitions record.
     *
     * @generated from field: google.spanner.executor.v1.ChildPartitionsRecord child_partition = 2;
     */
    value: ChildPartitionsRecord;
    case: "childPartition";
  } | {
    /**
     * Heartbeat record.
     *
     * @generated from field: google.spanner.executor.v1.HeartbeatRecord heartbeat = 3;
     */
    value: HeartbeatRecord;
    case: "heartbeat";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.executor.v1.ChangeStreamRecord.
 * Use `create(ChangeStreamRecordSchema)` to create a new message.
 */
export const ChangeStreamRecordSchema: GenMessage<ChangeStreamRecord> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 66);

/**
 * ChangeStream data change record.
 *
 * @generated from message google.spanner.executor.v1.DataChangeRecord
 */
export type DataChangeRecord = Message<"google.spanner.executor.v1.DataChangeRecord"> & {
  /**
   * The timestamp in which the change was committed.
   *
   * @generated from field: google.protobuf.Timestamp commit_time = 1;
   */
  commitTime?: Timestamp;

  /**
   * The sequence number for the record within the transaction.
   *
   * @generated from field: string record_sequence = 2;
   */
  recordSequence: string;

  /**
   * A globally unique string that represents the transaction in which the
   * change was committed.
   *
   * @generated from field: string transaction_id = 3;
   */
  transactionId: string;

  /**
   * Indicates whether this is the last record for a transaction in the current
   * partition.
   *
   * @generated from field: bool is_last_record = 4;
   */
  isLastRecord: boolean;

  /**
   * Name of the table affected by the change.
   *
   * @generated from field: string table = 5;
   */
  table: string;

  /**
   * Column types defined in the schema.
   *
   * @generated from field: repeated google.spanner.executor.v1.DataChangeRecord.ColumnType column_types = 6;
   */
  columnTypes: DataChangeRecord_ColumnType[];

  /**
   * Changes made in the transaction.
   *
   * @generated from field: repeated google.spanner.executor.v1.DataChangeRecord.Mod mods = 7;
   */
  mods: DataChangeRecord_Mod[];

  /**
   * Describes the type of change. One of INSERT, UPDATE or DELETE.
   *
   * @generated from field: string mod_type = 8;
   */
  modType: string;

  /**
   * One of value capture type: NEW_VALUES, OLD_VALUES, OLD_AND_NEW_VALUES.
   *
   * @generated from field: string value_capture_type = 9;
   */
  valueCaptureType: string;

  /**
   * Number of records in transactions.
   *
   * @generated from field: int64 record_count = 10;
   */
  recordCount: bigint;

  /**
   * Number of partitions in transactions.
   *
   * @generated from field: int64 partition_count = 11;
   */
  partitionCount: bigint;

  /**
   * Transaction tag info.
   *
   * @generated from field: string transaction_tag = 12;
   */
  transactionTag: string;

  /**
   * Whether the transaction is a system transactionn.
   *
   * @generated from field: bool is_system_transaction = 13;
   */
  isSystemTransaction: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.DataChangeRecord.
 * Use `create(DataChangeRecordSchema)` to create a new message.
 */
export const DataChangeRecordSchema: GenMessage<DataChangeRecord> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 67);

/**
 * Column types.
 *
 * @generated from message google.spanner.executor.v1.DataChangeRecord.ColumnType
 */
export type DataChangeRecord_ColumnType = Message<"google.spanner.executor.v1.DataChangeRecord.ColumnType"> & {
  /**
   * Column name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Column type in JSON.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Whether the column is a primary key column.
   *
   * @generated from field: bool is_primary_key = 3;
   */
  isPrimaryKey: boolean;

  /**
   * The position of the column as defined in the schema.
   *
   * @generated from field: int64 ordinal_position = 4;
   */
  ordinalPosition: bigint;
};

/**
 * Describes the message google.spanner.executor.v1.DataChangeRecord.ColumnType.
 * Use `create(DataChangeRecord_ColumnTypeSchema)` to create a new message.
 */
export const DataChangeRecord_ColumnTypeSchema: GenMessage<DataChangeRecord_ColumnType> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 67, 0);

/**
 * Describes the changes that were made.
 *
 * @generated from message google.spanner.executor.v1.DataChangeRecord.Mod
 */
export type DataChangeRecord_Mod = Message<"google.spanner.executor.v1.DataChangeRecord.Mod"> & {
  /**
   * The primary key values in JSON.
   *
   * @generated from field: string keys = 1;
   */
  keys: string;

  /**
   * The new values of the changed columns in JSON. Only contain the non-key
   * columns.
   *
   * @generated from field: string new_values = 2;
   */
  newValues: string;

  /**
   * The old values of the changed columns in JSON. Only contain the non-key
   * columns.
   *
   * @generated from field: string old_values = 3;
   */
  oldValues: string;
};

/**
 * Describes the message google.spanner.executor.v1.DataChangeRecord.Mod.
 * Use `create(DataChangeRecord_ModSchema)` to create a new message.
 */
export const DataChangeRecord_ModSchema: GenMessage<DataChangeRecord_Mod> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 67, 1);

/**
 * ChangeStream child partition record.
 *
 * @generated from message google.spanner.executor.v1.ChildPartitionsRecord
 */
export type ChildPartitionsRecord = Message<"google.spanner.executor.v1.ChildPartitionsRecord"> & {
  /**
   * Data change records returned from child partitions in this child partitions
   * record will have a commit timestamp greater than or equal to start_time.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * A monotonically increasing sequence number that can be used to define the
   * ordering of the child partitions record when there are multiple child
   * partitions records returned with the same start_time in a particular
   * partition.
   *
   * @generated from field: string record_sequence = 2;
   */
  recordSequence: string;

  /**
   * A set of child partitions and their associated information.
   *
   * @generated from field: repeated google.spanner.executor.v1.ChildPartitionsRecord.ChildPartition child_partitions = 3;
   */
  childPartitions: ChildPartitionsRecord_ChildPartition[];
};

/**
 * Describes the message google.spanner.executor.v1.ChildPartitionsRecord.
 * Use `create(ChildPartitionsRecordSchema)` to create a new message.
 */
export const ChildPartitionsRecordSchema: GenMessage<ChildPartitionsRecord> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 68);

/**
 * A single child partition.
 *
 * @generated from message google.spanner.executor.v1.ChildPartitionsRecord.ChildPartition
 */
export type ChildPartitionsRecord_ChildPartition = Message<"google.spanner.executor.v1.ChildPartitionsRecord.ChildPartition"> & {
  /**
   * Partition token string used to identify the child partition in queries.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * Parent partition tokens of this child partition.
   *
   * @generated from field: repeated string parent_partition_tokens = 2;
   */
  parentPartitionTokens: string[];
};

/**
 * Describes the message google.spanner.executor.v1.ChildPartitionsRecord.ChildPartition.
 * Use `create(ChildPartitionsRecord_ChildPartitionSchema)` to create a new message.
 */
export const ChildPartitionsRecord_ChildPartitionSchema: GenMessage<ChildPartitionsRecord_ChildPartition> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 68, 0);

/**
 * ChangeStream heartbeat record.
 *
 * @generated from message google.spanner.executor.v1.HeartbeatRecord
 */
export type HeartbeatRecord = Message<"google.spanner.executor.v1.HeartbeatRecord"> & {
  /**
   * Timestamp for this heartbeat check.
   *
   * @generated from field: google.protobuf.Timestamp heartbeat_time = 1;
   */
  heartbeatTime?: Timestamp;
};

/**
 * Describes the message google.spanner.executor.v1.HeartbeatRecord.
 * Use `create(HeartbeatRecordSchema)` to create a new message.
 */
export const HeartbeatRecordSchema: GenMessage<HeartbeatRecord> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 69);

/**
 * Options for Cloud Spanner Service.
 *
 * @generated from message google.spanner.executor.v1.SpannerOptions
 */
export type SpannerOptions = Message<"google.spanner.executor.v1.SpannerOptions"> & {
  /**
   * Options for configuring the session pool
   *
   * @generated from field: google.spanner.executor.v1.SessionPoolOptions session_pool_options = 1;
   */
  sessionPoolOptions?: SessionPoolOptions;
};

/**
 * Describes the message google.spanner.executor.v1.SpannerOptions.
 * Use `create(SpannerOptionsSchema)` to create a new message.
 */
export const SpannerOptionsSchema: GenMessage<SpannerOptions> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 70);

/**
 * Options for the session pool used by the DatabaseClient.
 *
 * @generated from message google.spanner.executor.v1.SessionPoolOptions
 */
export type SessionPoolOptions = Message<"google.spanner.executor.v1.SessionPoolOptions"> & {
  /**
   * passing this as true, will make applicable RPCs use multiplexed sessions
   * instead of regular sessions
   *
   * @generated from field: bool use_multiplexed = 1;
   */
  useMultiplexed: boolean;
};

/**
 * Describes the message google.spanner.executor.v1.SessionPoolOptions.
 * Use `create(SessionPoolOptionsSchema)` to create a new message.
 */
export const SessionPoolOptionsSchema: GenMessage<SessionPoolOptions> = /*@__PURE__*/
  messageDesc(file_google_spanner_executor_v1_cloud_executor, 71);

/**
 * Service that executes SpannerActions asynchronously.
 *
 * @generated from service google.spanner.executor.v1.SpannerExecutorProxy
 */
export const SpannerExecutorProxy: GenService<{
  /**
   * ExecuteActionAsync is a streaming call that starts executing a new Spanner
   * action.
   *
   * For each request, the server will reply with one or more responses, but
   * only the last response will contain status in the outcome.
   *
   * Responses can be matched to requests by action_id. It is allowed to have
   * multiple actions in flight--in that case, actions are be executed in
   * parallel.
   *
   * @generated from rpc google.spanner.executor.v1.SpannerExecutorProxy.ExecuteActionAsync
   */
  executeActionAsync: {
    methodKind: "bidi_streaming";
    input: typeof SpannerAsyncActionRequestSchema;
    output: typeof SpannerAsyncActionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_spanner_executor_v1_cloud_executor, 0);

