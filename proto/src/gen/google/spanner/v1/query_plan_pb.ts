// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/spanner/v1/query_plan.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/spanner/v1/query_plan.proto.
 */
export const file_google_spanner_v1_query_plan: GenFile = /*@__PURE__*/
  fileDesc("CiJnb29nbGUvc3Bhbm5lci92MS9xdWVyeV9wbGFuLnByb3RvEhFnb29nbGUuc3Bhbm5lci52MSL4BAoIUGxhbk5vZGUSDQoFaW5kZXgYASABKAUSLgoEa2luZBgCIAEoDjIgLmdvb2dsZS5zcGFubmVyLnYxLlBsYW5Ob2RlLktpbmQSFAoMZGlzcGxheV9uYW1lGAMgASgJEjoKC2NoaWxkX2xpbmtzGAQgAygLMiUuZ29vZ2xlLnNwYW5uZXIudjEuUGxhbk5vZGUuQ2hpbGRMaW5rEk0KFHNob3J0X3JlcHJlc2VudGF0aW9uGAUgASgLMi8uZ29vZ2xlLnNwYW5uZXIudjEuUGxhbk5vZGUuU2hvcnRSZXByZXNlbnRhdGlvbhIpCghtZXRhZGF0YRgGIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3QSMAoPZXhlY3V0aW9uX3N0YXRzGAcgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBpACglDaGlsZExpbmsSEwoLY2hpbGRfaW5kZXgYASABKAUSDAoEdHlwZRgCIAEoCRIQCgh2YXJpYWJsZRgDIAEoCRqyAQoTU2hvcnRSZXByZXNlbnRhdGlvbhITCgtkZXNjcmlwdGlvbhgBIAEoCRJTCgpzdWJxdWVyaWVzGAIgAygLMj8uZ29vZ2xlLnNwYW5uZXIudjEuUGxhbk5vZGUuU2hvcnRSZXByZXNlbnRhdGlvbi5TdWJxdWVyaWVzRW50cnkaMQoPU3VicXVlcmllc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoBToCOAEiOAoES2luZBIUChBLSU5EX1VOU1BFQ0lGSUVEEAASDgoKUkVMQVRJT05BTBABEgoKBlNDQUxBUhACIjwKCVF1ZXJ5UGxhbhIvCgpwbGFuX25vZGVzGAEgAygLMhsuZ29vZ2xlLnNwYW5uZXIudjEuUGxhbk5vZGVCsQEKFWNvbS5nb29nbGUuc3Bhbm5lci52MUIOUXVlcnlQbGFuUHJvdG9QAVo1Y2xvdWQuZ29vZ2xlLmNvbS9nby9zcGFubmVyL2FwaXYxL3NwYW5uZXJwYjtzcGFubmVycGKqAhdHb29nbGUuQ2xvdWQuU3Bhbm5lci5WMcoCF0dvb2dsZVxDbG91ZFxTcGFubmVyXFYx6gIaR29vZ2xlOjpDbG91ZDo6U3Bhbm5lcjo6VjFiBnByb3RvMw", [file_google_protobuf_struct]);

/**
 * Node information for nodes appearing in a [QueryPlan.plan_nodes][google.spanner.v1.QueryPlan.plan_nodes].
 *
 * @generated from message google.spanner.v1.PlanNode
 */
export type PlanNode = Message<"google.spanner.v1.PlanNode"> & {
  /**
   * The `PlanNode`'s index in [node list][google.spanner.v1.QueryPlan.plan_nodes].
   *
   * @generated from field: int32 index = 1;
   */
  index: number;

  /**
   * Used to determine the type of node. May be needed for visualizing
   * different kinds of nodes differently. For example, If the node is a
   * [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] node, it will have a condensed representation
   * which can be used to directly embed a description of the node in its
   * parent.
   *
   * @generated from field: google.spanner.v1.PlanNode.Kind kind = 2;
   */
  kind: PlanNode_Kind;

  /**
   * The display name for the node.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * List of child node `index`es and their relationship to this parent.
   *
   * @generated from field: repeated google.spanner.v1.PlanNode.ChildLink child_links = 4;
   */
  childLinks: PlanNode_ChildLink[];

  /**
   * Condensed representation for [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] nodes.
   *
   * @generated from field: google.spanner.v1.PlanNode.ShortRepresentation short_representation = 5;
   */
  shortRepresentation?: PlanNode_ShortRepresentation;

  /**
   * Attributes relevant to the node contained in a group of key-value pairs.
   * For example, a Parameter Reference node could have the following
   * information in its metadata:
   *
   *     {
   *       "parameter_reference": "param1",
   *       "parameter_type": "array"
   *     }
   *
   * @generated from field: google.protobuf.Struct metadata = 6;
   */
  metadata?: JsonObject;

  /**
   * The execution statistics associated with the node, contained in a group of
   * key-value pairs. Only present if the plan was returned as a result of a
   * profile query. For example, number of executions, number of rows/time per
   * execution etc.
   *
   * @generated from field: google.protobuf.Struct execution_stats = 7;
   */
  executionStats?: JsonObject;
};

/**
 * Describes the message google.spanner.v1.PlanNode.
 * Use `create(PlanNodeSchema)` to create a new message.
 */
export const PlanNodeSchema: GenMessage<PlanNode> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_query_plan, 0);

/**
 * Metadata associated with a parent-child relationship appearing in a
 * [PlanNode][google.spanner.v1.PlanNode].
 *
 * @generated from message google.spanner.v1.PlanNode.ChildLink
 */
export type PlanNode_ChildLink = Message<"google.spanner.v1.PlanNode.ChildLink"> & {
  /**
   * The node to which the link points.
   *
   * @generated from field: int32 child_index = 1;
   */
  childIndex: number;

  /**
   * The type of the link. For example, in Hash Joins this could be used to
   * distinguish between the build child and the probe child, or in the case
   * of the child being an output variable, to represent the tag associated
   * with the output variable.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Only present if the child node is [SCALAR][google.spanner.v1.PlanNode.Kind.SCALAR] and corresponds
   * to an output variable of the parent node. The field carries the name of
   * the output variable.
   * For example, a `TableScan` operator that reads rows from a table will
   * have child links to the `SCALAR` nodes representing the output variables
   * created for each column that is read by the operator. The corresponding
   * `variable` fields will be set to the variable names assigned to the
   * columns.
   *
   * @generated from field: string variable = 3;
   */
  variable: string;
};

/**
 * Describes the message google.spanner.v1.PlanNode.ChildLink.
 * Use `create(PlanNode_ChildLinkSchema)` to create a new message.
 */
export const PlanNode_ChildLinkSchema: GenMessage<PlanNode_ChildLink> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_query_plan, 0, 0);

/**
 * Condensed representation of a node and its subtree. Only present for
 * `SCALAR` [PlanNode(s)][google.spanner.v1.PlanNode].
 *
 * @generated from message google.spanner.v1.PlanNode.ShortRepresentation
 */
export type PlanNode_ShortRepresentation = Message<"google.spanner.v1.PlanNode.ShortRepresentation"> & {
  /**
   * A string representation of the expression subtree rooted at this node.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * A mapping of (subquery variable name) -> (subquery node id) for cases
   * where the `description` string of this node references a `SCALAR`
   * subquery contained in the expression subtree rooted at this node. The
   * referenced `SCALAR` subquery may not necessarily be a direct child of
   * this node.
   *
   * @generated from field: map<string, int32> subqueries = 2;
   */
  subqueries: { [key: string]: number };
};

/**
 * Describes the message google.spanner.v1.PlanNode.ShortRepresentation.
 * Use `create(PlanNode_ShortRepresentationSchema)` to create a new message.
 */
export const PlanNode_ShortRepresentationSchema: GenMessage<PlanNode_ShortRepresentation> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_query_plan, 0, 1);

/**
 * The kind of [PlanNode][google.spanner.v1.PlanNode]. Distinguishes between the two different kinds of
 * nodes that can appear in a query plan.
 *
 * @generated from enum google.spanner.v1.PlanNode.Kind
 */
export enum PlanNode_Kind {
  /**
   * Not specified.
   *
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * Denotes a Relational operator node in the expression tree. Relational
   * operators represent iterative processing of rows during query execution.
   * For example, a `TableScan` operation that reads rows from a table.
   *
   * @generated from enum value: RELATIONAL = 1;
   */
  RELATIONAL = 1,

  /**
   * Denotes a Scalar node in the expression tree. Scalar nodes represent
   * non-iterable entities in the query plan. For example, constants or
   * arithmetic operators appearing inside predicate expressions or references
   * to column names.
   *
   * @generated from enum value: SCALAR = 2;
   */
  SCALAR = 2,
}

/**
 * Describes the enum google.spanner.v1.PlanNode.Kind.
 */
export const PlanNode_KindSchema: GenEnum<PlanNode_Kind> = /*@__PURE__*/
  enumDesc(file_google_spanner_v1_query_plan, 0, 0);

/**
 * Contains an ordered list of nodes appearing in the query plan.
 *
 * @generated from message google.spanner.v1.QueryPlan
 */
export type QueryPlan = Message<"google.spanner.v1.QueryPlan"> & {
  /**
   * The nodes in the query plan. Plan nodes are returned in pre-order starting
   * with the plan root. Each [PlanNode][google.spanner.v1.PlanNode]'s `id` corresponds to its index in
   * `plan_nodes`.
   *
   * @generated from field: repeated google.spanner.v1.PlanNode plan_nodes = 1;
   */
  planNodes: PlanNode[];
};

/**
 * Describes the message google.spanner.v1.QueryPlan.
 * Use `create(QueryPlanSchema)` to create a new message.
 */
export const QueryPlanSchema: GenMessage<QueryPlan> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_query_plan, 1);

