// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/spanner/v1/mutation.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { ListValue } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { KeySet } from "./keys_pb";
import { file_google_spanner_v1_keys } from "./keys_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/spanner/v1/mutation.proto.
 */
export const file_google_spanner_v1_mutation: GenFile = /*@__PURE__*/
  fileDesc("CiBnb29nbGUvc3Bhbm5lci92MS9tdXRhdGlvbi5wcm90bxIRZ29vZ2xlLnNwYW5uZXIudjEi1QMKCE11dGF0aW9uEjMKBmluc2VydBgBIAEoCzIhLmdvb2dsZS5zcGFubmVyLnYxLk11dGF0aW9uLldyaXRlSAASMwoGdXBkYXRlGAIgASgLMiEuZ29vZ2xlLnNwYW5uZXIudjEuTXV0YXRpb24uV3JpdGVIABI9ChBpbnNlcnRfb3JfdXBkYXRlGAMgASgLMiEuZ29vZ2xlLnNwYW5uZXIudjEuTXV0YXRpb24uV3JpdGVIABI0CgdyZXBsYWNlGAQgASgLMiEuZ29vZ2xlLnNwYW5uZXIudjEuTXV0YXRpb24uV3JpdGVIABI0CgZkZWxldGUYBSABKAsyIi5nb29nbGUuc3Bhbm5lci52MS5NdXRhdGlvbi5EZWxldGVIABpYCgVXcml0ZRISCgV0YWJsZRgBIAEoCUID4EECEg8KB2NvbHVtbnMYAiADKAkSKgoGdmFsdWVzGAMgAygLMhouZ29vZ2xlLnByb3RvYnVmLkxpc3RWYWx1ZRpNCgZEZWxldGUSEgoFdGFibGUYASABKAlCA+BBAhIvCgdrZXlfc2V0GAIgASgLMhkuZ29vZ2xlLnNwYW5uZXIudjEuS2V5U2V0QgPgQQJCCwoJb3BlcmF0aW9uQrABChVjb20uZ29vZ2xlLnNwYW5uZXIudjFCDU11dGF0aW9uUHJvdG9QAVo1Y2xvdWQuZ29vZ2xlLmNvbS9nby9zcGFubmVyL2FwaXYxL3NwYW5uZXJwYjtzcGFubmVycGKqAhdHb29nbGUuQ2xvdWQuU3Bhbm5lci5WMcoCF0dvb2dsZVxDbG91ZFxTcGFubmVyXFYx6gIaR29vZ2xlOjpDbG91ZDo6U3Bhbm5lcjo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_protobuf_struct, file_google_spanner_v1_keys]);

/**
 * A modification to one or more Cloud Spanner rows.  Mutations can be
 * applied to a Cloud Spanner database by sending them in a
 * [Commit][google.spanner.v1.Spanner.Commit] call.
 *
 * @generated from message google.spanner.v1.Mutation
 */
export type Mutation = Message<"google.spanner.v1.Mutation"> & {
  /**
   * Required. The operation to perform.
   *
   * @generated from oneof google.spanner.v1.Mutation.operation
   */
  operation: {
    /**
     * Insert new rows in a table. If any of the rows already exist,
     * the write or transaction fails with error `ALREADY_EXISTS`.
     *
     * @generated from field: google.spanner.v1.Mutation.Write insert = 1;
     */
    value: Mutation_Write;
    case: "insert";
  } | {
    /**
     * Update existing rows in a table. If any of the rows does not
     * already exist, the transaction fails with error `NOT_FOUND`.
     *
     * @generated from field: google.spanner.v1.Mutation.Write update = 2;
     */
    value: Mutation_Write;
    case: "update";
  } | {
    /**
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, then
     * its column values are overwritten with the ones provided. Any
     * column values not explicitly written are preserved.
     *
     * When using [insert_or_update][google.spanner.v1.Mutation.insert_or_update], just as when using [insert][google.spanner.v1.Mutation.insert], all `NOT
     * NULL` columns in the table must be given a value. This holds true
     * even when the row already exists and will therefore actually be updated.
     *
     * @generated from field: google.spanner.v1.Mutation.Write insert_or_update = 3;
     */
    value: Mutation_Write;
    case: "insertOrUpdate";
  } | {
    /**
     * Like [insert][google.spanner.v1.Mutation.insert], except that if the row already exists, it is
     * deleted, and the column values provided are inserted
     * instead. Unlike [insert_or_update][google.spanner.v1.Mutation.insert_or_update], this means any values not
     * explicitly written become `NULL`.
     *
     * In an interleaved table, if you create the child table with the
     * `ON DELETE CASCADE` annotation, then replacing a parent row
     * also deletes the child rows. Otherwise, you must delete the
     * child rows before you replace the parent row.
     *
     * @generated from field: google.spanner.v1.Mutation.Write replace = 4;
     */
    value: Mutation_Write;
    case: "replace";
  } | {
    /**
     * Delete rows from a table. Succeeds whether or not the named
     * rows were present.
     *
     * @generated from field: google.spanner.v1.Mutation.Delete delete = 5;
     */
    value: Mutation_Delete;
    case: "delete";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.v1.Mutation.
 * Use `create(MutationSchema)` to create a new message.
 */
export const MutationSchema: GenMessage<Mutation> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_mutation, 0);

/**
 * Arguments to [insert][google.spanner.v1.Mutation.insert], [update][google.spanner.v1.Mutation.update], [insert_or_update][google.spanner.v1.Mutation.insert_or_update], and
 * [replace][google.spanner.v1.Mutation.replace] operations.
 *
 * @generated from message google.spanner.v1.Mutation.Write
 */
export type Mutation_Write = Message<"google.spanner.v1.Mutation.Write"> & {
  /**
   * Required. The table whose rows will be written.
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * The names of the columns in [table][google.spanner.v1.Mutation.Write.table] to be written.
   *
   * The list of columns must contain enough columns to allow
   * Cloud Spanner to derive values for all primary key columns in the
   * row(s) to be modified.
   *
   * @generated from field: repeated string columns = 2;
   */
  columns: string[];

  /**
   * The values to be written. `values` can contain more than one
   * list of values. If it does, then multiple rows are written, one
   * for each entry in `values`. Each list in `values` must have
   * exactly as many entries as there are entries in [columns][google.spanner.v1.Mutation.Write.columns]
   * above. Sending multiple lists is equivalent to sending multiple
   * `Mutation`s, each containing one `values` entry and repeating
   * [table][google.spanner.v1.Mutation.Write.table] and [columns][google.spanner.v1.Mutation.Write.columns]. Individual values in each list are
   * encoded as described [here][google.spanner.v1.TypeCode].
   *
   * @generated from field: repeated google.protobuf.ListValue values = 3;
   */
  values: ListValue[];
};

/**
 * Describes the message google.spanner.v1.Mutation.Write.
 * Use `create(Mutation_WriteSchema)` to create a new message.
 */
export const Mutation_WriteSchema: GenMessage<Mutation_Write> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_mutation, 0, 0);

/**
 * Arguments to [delete][google.spanner.v1.Mutation.delete] operations.
 *
 * @generated from message google.spanner.v1.Mutation.Delete
 */
export type Mutation_Delete = Message<"google.spanner.v1.Mutation.Delete"> & {
  /**
   * Required. The table whose rows will be deleted.
   *
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * Required. The primary keys of the rows within [table][google.spanner.v1.Mutation.Delete.table] to delete.  The
   * primary keys must be specified in the order in which they appear in the
   * `PRIMARY KEY()` clause of the table's equivalent DDL statement (the DDL
   * statement used to create the table).
   * Delete is idempotent. The transaction will succeed even if some or all
   * rows do not exist.
   *
   * @generated from field: google.spanner.v1.KeySet key_set = 2;
   */
  keySet?: KeySet;
};

/**
 * Describes the message google.spanner.v1.Mutation.Delete.
 * Use `create(Mutation_DeleteSchema)` to create a new message.
 */
export const Mutation_DeleteSchema: GenMessage<Mutation_Delete> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_mutation, 0, 1);

