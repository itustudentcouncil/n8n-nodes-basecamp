// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/spanner/v1/result_set.proto (package google.spanner.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { ListValue, Value } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { QueryPlan } from "./query_plan_pb";
import { file_google_spanner_v1_query_plan } from "./query_plan_pb";
import type { Transaction } from "./transaction_pb";
import { file_google_spanner_v1_transaction } from "./transaction_pb";
import type { StructType } from "./type_pb";
import { file_google_spanner_v1_type } from "./type_pb";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/spanner/v1/result_set.proto.
 */
export const file_google_spanner_v1_result_set: GenFile = /*@__PURE__*/
  fileDesc("CiJnb29nbGUvc3Bhbm5lci92MS9yZXN1bHRfc2V0LnByb3RvEhFnb29nbGUuc3Bhbm5lci52MSKfAQoJUmVzdWx0U2V0EjYKCG1ldGFkYXRhGAEgASgLMiQuZ29vZ2xlLnNwYW5uZXIudjEuUmVzdWx0U2V0TWV0YWRhdGESKAoEcm93cxgCIAMoCzIaLmdvb2dsZS5wcm90b2J1Zi5MaXN0VmFsdWUSMAoFc3RhdHMYAyABKAsyIS5nb29nbGUuc3Bhbm5lci52MS5SZXN1bHRTZXRTdGF0cyLRAQoQUGFydGlhbFJlc3VsdFNldBI2CghtZXRhZGF0YRgBIAEoCzIkLmdvb2dsZS5zcGFubmVyLnYxLlJlc3VsdFNldE1ldGFkYXRhEiYKBnZhbHVlcxgCIAMoCzIWLmdvb2dsZS5wcm90b2J1Zi5WYWx1ZRIVCg1jaHVua2VkX3ZhbHVlGAMgASgIEhQKDHJlc3VtZV90b2tlbhgEIAEoDBIwCgVzdGF0cxgFIAEoCzIhLmdvb2dsZS5zcGFubmVyLnYxLlJlc3VsdFNldFN0YXRzIrcBChFSZXN1bHRTZXRNZXRhZGF0YRIvCghyb3dfdHlwZRgBIAEoCzIdLmdvb2dsZS5zcGFubmVyLnYxLlN0cnVjdFR5cGUSMwoLdHJhbnNhY3Rpb24YAiABKAsyHi5nb29nbGUuc3Bhbm5lci52MS5UcmFuc2FjdGlvbhI8ChV1bmRlY2xhcmVkX3BhcmFtZXRlcnMYAyABKAsyHS5nb29nbGUuc3Bhbm5lci52MS5TdHJ1Y3RUeXBlIrkBCg5SZXN1bHRTZXRTdGF0cxIwCgpxdWVyeV9wbGFuGAEgASgLMhwuZ29vZ2xlLnNwYW5uZXIudjEuUXVlcnlQbGFuEiwKC3F1ZXJ5X3N0YXRzGAIgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdBIZCg9yb3dfY291bnRfZXhhY3QYAyABKANIABIfChVyb3dfY291bnRfbG93ZXJfYm91bmQYBCABKANIAEILCglyb3dfY291bnRCtAEKFWNvbS5nb29nbGUuc3Bhbm5lci52MUIOUmVzdWx0U2V0UHJvdG9QAVo1Y2xvdWQuZ29vZ2xlLmNvbS9nby9zcGFubmVyL2FwaXYxL3NwYW5uZXJwYjtzcGFubmVycGL4AQGqAhdHb29nbGUuQ2xvdWQuU3Bhbm5lci5WMcoCF0dvb2dsZVxDbG91ZFxTcGFubmVyXFYx6gIaR29vZ2xlOjpDbG91ZDo6U3Bhbm5lcjo6VjFiBnByb3RvMw", [file_google_protobuf_struct, file_google_spanner_v1_query_plan, file_google_spanner_v1_transaction, file_google_spanner_v1_type]);

/**
 * Results from [Read][google.spanner.v1.Spanner.Read] or
 * [ExecuteSql][google.spanner.v1.Spanner.ExecuteSql].
 *
 * @generated from message google.spanner.v1.ResultSet
 */
export type ResultSet = Message<"google.spanner.v1.ResultSet"> & {
  /**
   * Metadata about the result set, such as row type information.
   *
   * @generated from field: google.spanner.v1.ResultSetMetadata metadata = 1;
   */
  metadata?: ResultSetMetadata;

  /**
   * Each element in `rows` is a row whose format is defined by
   * [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. The ith element
   * in each row matches the ith field in
   * [metadata.row_type][google.spanner.v1.ResultSetMetadata.row_type]. Elements are
   * encoded based on type as described
   * [here][google.spanner.v1.TypeCode].
   *
   * @generated from field: repeated google.protobuf.ListValue rows = 2;
   */
  rows: ListValue[];

  /**
   * Query plan and execution statistics for the SQL statement that
   * produced this result set. These can be requested by setting
   * [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode].
   * DML statements always produce stats containing the number of rows
   * modified, unless executed using the
   * [ExecuteSqlRequest.QueryMode.PLAN][google.spanner.v1.ExecuteSqlRequest.QueryMode.PLAN] [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode].
   * Other fields may or may not be populated, based on the
   * [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode].
   *
   * @generated from field: google.spanner.v1.ResultSetStats stats = 3;
   */
  stats?: ResultSetStats;
};

/**
 * Describes the message google.spanner.v1.ResultSet.
 * Use `create(ResultSetSchema)` to create a new message.
 */
export const ResultSetSchema: GenMessage<ResultSet> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_result_set, 0);

/**
 * Partial results from a streaming read or SQL query. Streaming reads and
 * SQL queries better tolerate large result sets, large rows, and large
 * values, but are a little trickier to consume.
 *
 * @generated from message google.spanner.v1.PartialResultSet
 */
export type PartialResultSet = Message<"google.spanner.v1.PartialResultSet"> & {
  /**
   * Metadata about the result set, such as row type information.
   * Only present in the first response.
   *
   * @generated from field: google.spanner.v1.ResultSetMetadata metadata = 1;
   */
  metadata?: ResultSetMetadata;

  /**
   * A streamed result set consists of a stream of values, which might
   * be split into many `PartialResultSet` messages to accommodate
   * large rows and/or large values. Every N complete values defines a
   * row, where N is equal to the number of entries in
   * [metadata.row_type.fields][google.spanner.v1.StructType.fields].
   *
   * Most values are encoded based on type as described
   * [here][google.spanner.v1.TypeCode].
   *
   * It is possible that the last value in values is "chunked",
   * meaning that the rest of the value is sent in subsequent
   * `PartialResultSet`(s). This is denoted by the [chunked_value][google.spanner.v1.PartialResultSet.chunked_value]
   * field. Two or more chunked values can be merged to form a
   * complete value as follows:
   *
   *   * `bool/number/null`: cannot be chunked
   *   * `string`: concatenate the strings
   *   * `list`: concatenate the lists. If the last element in a list is a
   *     `string`, `list`, or `object`, merge it with the first element in
   *     the next list by applying these rules recursively.
   *   * `object`: concatenate the (field name, field value) pairs. If a
   *     field name is duplicated, then apply these rules recursively
   *     to merge the field values.
   *
   * Some examples of merging:
   *
   *     # Strings are concatenated.
   *     "foo", "bar" => "foobar"
   *
   *     # Lists of non-strings are concatenated.
   *     [2, 3], [4] => [2, 3, 4]
   *
   *     # Lists are concatenated, but the last and first elements are merged
   *     # because they are strings.
   *     ["a", "b"], ["c", "d"] => ["a", "bc", "d"]
   *
   *     # Lists are concatenated, but the last and first elements are merged
   *     # because they are lists. Recursively, the last and first elements
   *     # of the inner lists are merged because they are strings.
   *     ["a", ["b", "c"]], [["d"], "e"] => ["a", ["b", "cd"], "e"]
   *
   *     # Non-overlapping object fields are combined.
   *     {"a": "1"}, {"b": "2"} => {"a": "1", "b": 2"}
   *
   *     # Overlapping object fields are merged.
   *     {"a": "1"}, {"a": "2"} => {"a": "12"}
   *
   *     # Examples of merging objects containing lists of strings.
   *     {"a": ["1"]}, {"a": ["2"]} => {"a": ["12"]}
   *
   * For a more complete example, suppose a streaming SQL query is
   * yielding a result set whose rows contain a single string
   * field. The following `PartialResultSet`s might be yielded:
   *
   *     {
   *       "metadata": { ... }
   *       "values": ["Hello", "W"]
   *       "chunked_value": true
   *       "resume_token": "Af65..."
   *     }
   *     {
   *       "values": ["orl"]
   *       "chunked_value": true
   *       "resume_token": "Bqp2..."
   *     }
   *     {
   *       "values": ["d"]
   *       "resume_token": "Zx1B..."
   *     }
   *
   * This sequence of `PartialResultSet`s encodes two rows, one
   * containing the field value `"Hello"`, and a second containing the
   * field value `"World" = "W" + "orl" + "d"`.
   *
   * @generated from field: repeated google.protobuf.Value values = 2;
   */
  values: Value[];

  /**
   * If true, then the final value in [values][google.spanner.v1.PartialResultSet.values] is chunked, and must
   * be combined with more values from subsequent `PartialResultSet`s
   * to obtain a complete field value.
   *
   * @generated from field: bool chunked_value = 3;
   */
  chunkedValue: boolean;

  /**
   * Streaming calls might be interrupted for a variety of reasons, such
   * as TCP connection loss. If this occurs, the stream of results can
   * be resumed by re-sending the original request and including
   * `resume_token`. Note that executing any other transaction in the
   * same session invalidates the token.
   *
   * @generated from field: bytes resume_token = 4;
   */
  resumeToken: Uint8Array;

  /**
   * Query plan and execution statistics for the statement that produced this
   * streaming result set. These can be requested by setting
   * [ExecuteSqlRequest.query_mode][google.spanner.v1.ExecuteSqlRequest.query_mode] and are sent
   * only once with the last response in the stream.
   * This field will also be present in the last response for DML
   * statements.
   *
   * @generated from field: google.spanner.v1.ResultSetStats stats = 5;
   */
  stats?: ResultSetStats;
};

/**
 * Describes the message google.spanner.v1.PartialResultSet.
 * Use `create(PartialResultSetSchema)` to create a new message.
 */
export const PartialResultSetSchema: GenMessage<PartialResultSet> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_result_set, 1);

/**
 * Metadata about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
 *
 * @generated from message google.spanner.v1.ResultSetMetadata
 */
export type ResultSetMetadata = Message<"google.spanner.v1.ResultSetMetadata"> & {
  /**
   * Indicates the field names and types for the rows in the result
   * set.  For example, a SQL query like `"SELECT UserId, UserName FROM
   * Users"` could return a `row_type` value like:
   *
   *     "fields": [
   *       { "name": "UserId", "type": { "code": "INT64" } },
   *       { "name": "UserName", "type": { "code": "STRING" } },
   *     ]
   *
   * @generated from field: google.spanner.v1.StructType row_type = 1;
   */
  rowType?: StructType;

  /**
   * If the read or SQL query began a transaction as a side-effect, the
   * information about the new transaction is yielded here.
   *
   * @generated from field: google.spanner.v1.Transaction transaction = 2;
   */
  transaction?: Transaction;

  /**
   * A SQL query can be parameterized. In PLAN mode, these parameters can be
   * undeclared. This indicates the field names and types for those undeclared
   * parameters in the SQL query. For example, a SQL query like `"SELECT * FROM
   * Users where UserId = @userId and UserName = @userName "` could return a
   * `undeclared_parameters` value like:
   *
   *     "fields": [
   *       { "name": "UserId", "type": { "code": "INT64" } },
   *       { "name": "UserName", "type": { "code": "STRING" } },
   *     ]
   *
   * @generated from field: google.spanner.v1.StructType undeclared_parameters = 3;
   */
  undeclaredParameters?: StructType;
};

/**
 * Describes the message google.spanner.v1.ResultSetMetadata.
 * Use `create(ResultSetMetadataSchema)` to create a new message.
 */
export const ResultSetMetadataSchema: GenMessage<ResultSetMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_result_set, 2);

/**
 * Additional statistics about a [ResultSet][google.spanner.v1.ResultSet] or [PartialResultSet][google.spanner.v1.PartialResultSet].
 *
 * @generated from message google.spanner.v1.ResultSetStats
 */
export type ResultSetStats = Message<"google.spanner.v1.ResultSetStats"> & {
  /**
   * [QueryPlan][google.spanner.v1.QueryPlan] for the query associated with this result.
   *
   * @generated from field: google.spanner.v1.QueryPlan query_plan = 1;
   */
  queryPlan?: QueryPlan;

  /**
   * Aggregated statistics from the execution of the query. Only present when
   * the query is profiled. For example, a query could return the statistics as
   * follows:
   *
   *     {
   *       "rows_returned": "3",
   *       "elapsed_time": "1.22 secs",
   *       "cpu_time": "1.19 secs"
   *     }
   *
   * @generated from field: google.protobuf.Struct query_stats = 2;
   */
  queryStats?: JsonObject;

  /**
   * The number of rows modified by the DML statement.
   *
   * @generated from oneof google.spanner.v1.ResultSetStats.row_count
   */
  rowCount: {
    /**
     * Standard DML returns an exact count of rows that were modified.
     *
     * @generated from field: int64 row_count_exact = 3;
     */
    value: bigint;
    case: "rowCountExact";
  } | {
    /**
     * Partitioned DML does not offer exactly-once semantics, so it
     * returns a lower bound of the rows modified.
     *
     * @generated from field: int64 row_count_lower_bound = 4;
     */
    value: bigint;
    case: "rowCountLowerBound";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.v1.ResultSetStats.
 * Use `create(ResultSetStatsSchema)` to create a new message.
 */
export const ResultSetStatsSchema: GenMessage<ResultSetStats> = /*@__PURE__*/
  messageDesc(file_google_spanner_v1_result_set, 3);

