// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/spanner/admin/database/v1/spanner_database_admin.proto (package google.spanner.admin.database.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../../../api/annotations_pb";
import { file_google_api_client } from "../../../../api/client_pb";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { GetIamPolicyRequestSchema, SetIamPolicyRequestSchema, TestIamPermissionsRequestSchema, TestIamPermissionsResponseSchema } from "../../../../iam/v1/iam_policy_pb";
import { file_google_iam_v1_iam_policy } from "../../../../iam/v1/iam_policy_pb";
import type { PolicySchema } from "../../../../iam/v1/policy_pb";
import { file_google_iam_v1_policy } from "../../../../iam/v1/policy_pb";
import type { Operation, OperationSchema } from "../../../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../../../longrunning/operations_pb";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { BackupInfo, BackupSchema, CopyBackupRequestSchema, CreateBackupRequestSchema, DeleteBackupRequestSchema, GetBackupRequestSchema, ListBackupOperationsRequestSchema, ListBackupOperationsResponseSchema, ListBackupsRequestSchema, ListBackupsResponseSchema, UpdateBackupRequestSchema } from "./backup_pb";
import { file_google_spanner_admin_database_v1_backup } from "./backup_pb";
import type { BackupScheduleSchema, CreateBackupScheduleRequestSchema, DeleteBackupScheduleRequestSchema, GetBackupScheduleRequestSchema, ListBackupSchedulesRequestSchema, ListBackupSchedulesResponseSchema, UpdateBackupScheduleRequestSchema } from "./backup_schedule_pb";
import { file_google_spanner_admin_database_v1_backup_schedule } from "./backup_schedule_pb";
import type { DatabaseDialect, EncryptionConfig, EncryptionInfo, OperationProgress } from "./common_pb";
import { file_google_spanner_admin_database_v1_common } from "./common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/spanner/admin/database/v1/spanner_database_admin.proto.
 */
export const file_google_spanner_admin_database_v1_spanner_database_admin: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_iam_v1_iam_policy, file_google_iam_v1_policy, file_google_longrunning_operations, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_google_spanner_admin_database_v1_backup, file_google_spanner_admin_database_v1_backup_schedule, file_google_spanner_admin_database_v1_common]);

/**
 * Information about the database restore.
 *
 * @generated from message google.spanner.admin.database.v1.RestoreInfo
 */
export type RestoreInfo = Message<"google.spanner.admin.database.v1.RestoreInfo"> & {
  /**
   * The type of the restore source.
   *
   * @generated from field: google.spanner.admin.database.v1.RestoreSourceType source_type = 1;
   */
  sourceType: RestoreSourceType;

  /**
   * Information about the source used to restore the database.
   *
   * @generated from oneof google.spanner.admin.database.v1.RestoreInfo.source_info
   */
  sourceInfo: {
    /**
     * Information about the backup used to restore the database. The backup
     * may no longer exist.
     *
     * @generated from field: google.spanner.admin.database.v1.BackupInfo backup_info = 2;
     */
    value: BackupInfo;
    case: "backupInfo";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.spanner.admin.database.v1.RestoreInfo.
 * Use `create(RestoreInfoSchema)` to create a new message.
 */
export const RestoreInfoSchema: GenMessage<RestoreInfo> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 0);

/**
 * A Cloud Spanner database.
 *
 * @generated from message google.spanner.admin.database.v1.Database
 */
export type Database = Message<"google.spanner.admin.database.v1.Database"> & {
  /**
   * Required. The name of the database. Values are of the form
   * `projects/<project>/instances/<instance>/databases/<database>`,
   * where `<database>` is as specified in the `CREATE DATABASE`
   * statement. This name can be passed to other API methods to
   * identify the database.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The current database state.
   *
   * @generated from field: google.spanner.admin.database.v1.Database.State state = 2;
   */
  state: Database_State;

  /**
   * Output only. If exists, the time at which the database creation started.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. Applicable only for restored databases. Contains information
   * about the restore source.
   *
   * @generated from field: google.spanner.admin.database.v1.RestoreInfo restore_info = 4;
   */
  restoreInfo?: RestoreInfo;

  /**
   * Output only. For databases that are using customer managed encryption, this
   * field contains the encryption configuration for the database.
   * For databases that are using Google default or other types of encryption,
   * this field is empty.
   *
   * @generated from field: google.spanner.admin.database.v1.EncryptionConfig encryption_config = 5;
   */
  encryptionConfig?: EncryptionConfig;

  /**
   * Output only. For databases that are using customer managed encryption, this
   * field contains the encryption information for the database, such as
   * all Cloud KMS key versions that are in use. The `encryption_status' field
   * inside of each `EncryptionInfo` is not populated.
   *
   * For databases that are using Google default or other types of encryption,
   * this field is empty.
   *
   * This field is propagated lazily from the backend. There might be a delay
   * from when a key version is being used and when it appears in this field.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.EncryptionInfo encryption_info = 8;
   */
  encryptionInfo: EncryptionInfo[];

  /**
   * Output only. The period in which Cloud Spanner retains all versions of data
   * for the database. This is the same as the value of version_retention_period
   * database option set using
   * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl].
   * Defaults to 1 hour, if not set.
   *
   * @generated from field: string version_retention_period = 6;
   */
  versionRetentionPeriod: string;

  /**
   * Output only. Earliest timestamp at which older versions of the data can be
   * read. This value is continuously updated by Cloud Spanner and becomes stale
   * the moment it is queried. If you are using this value to recover data, make
   * sure to account for the time from the moment when the value is queried to
   * the moment when you initiate the recovery.
   *
   * @generated from field: google.protobuf.Timestamp earliest_version_time = 7;
   */
  earliestVersionTime?: Timestamp;

  /**
   * Output only. The read-write region which contains the database's leader
   * replicas.
   *
   * This is the same as the value of default_leader
   * database option set using DatabaseAdmin.CreateDatabase or
   * DatabaseAdmin.UpdateDatabaseDdl. If not explicitly set, this is empty.
   *
   * @generated from field: string default_leader = 9;
   */
  defaultLeader: string;

  /**
   * Output only. The dialect of the Cloud Spanner Database.
   *
   * @generated from field: google.spanner.admin.database.v1.DatabaseDialect database_dialect = 10;
   */
  databaseDialect: DatabaseDialect;

  /**
   * Whether drop protection is enabled for this database. Defaults to false,
   * if not set. For more details, please see how to [prevent accidental
   * database
   * deletion](https://cloud.google.com/spanner/docs/prevent-database-deletion).
   *
   * @generated from field: bool enable_drop_protection = 11;
   */
  enableDropProtection: boolean;

  /**
   * Output only. If true, the database is being updated. If false, there are no
   * ongoing update operations for the database.
   *
   * @generated from field: bool reconciling = 12;
   */
  reconciling: boolean;
};

/**
 * Describes the message google.spanner.admin.database.v1.Database.
 * Use `create(DatabaseSchema)` to create a new message.
 */
export const DatabaseSchema: GenMessage<Database> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 1);

/**
 * Indicates the current state of the database.
 *
 * @generated from enum google.spanner.admin.database.v1.Database.State
 */
export enum Database_State {
  /**
   * Not specified.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The database is still being created. Operations on the database may fail
   * with `FAILED_PRECONDITION` in this state.
   *
   * @generated from enum value: CREATING = 1;
   */
  CREATING = 1,

  /**
   * The database is fully created and ready for use.
   *
   * @generated from enum value: READY = 2;
   */
  READY = 2,

  /**
   * The database is fully created and ready for use, but is still
   * being optimized for performance and cannot handle full load.
   *
   * In this state, the database still references the backup
   * it was restore from, preventing the backup
   * from being deleted. When optimizations are complete, the full performance
   * of the database will be restored, and the database will transition to
   * `READY` state.
   *
   * @generated from enum value: READY_OPTIMIZING = 3;
   */
  READY_OPTIMIZING = 3,
}

/**
 * Describes the enum google.spanner.admin.database.v1.Database.State.
 */
export const Database_StateSchema: GenEnum<Database_State> = /*@__PURE__*/
  enumDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 1, 0);

/**
 * The request for
 * [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabasesRequest
 */
export type ListDatabasesRequest = Message<"google.spanner.admin.database.v1.ListDatabasesRequest"> & {
  /**
   * Required. The instance whose databases should be listed.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Number of databases to be returned in the response. If 0 or less,
   * defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token]
   * from a previous
   * [ListDatabasesResponse][google.spanner.admin.database.v1.ListDatabasesResponse].
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabasesRequest.
 * Use `create(ListDatabasesRequestSchema)` to create a new message.
 */
export const ListDatabasesRequestSchema: GenMessage<ListDatabasesRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 2);

/**
 * The response for
 * [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabasesResponse
 */
export type ListDatabasesResponse = Message<"google.spanner.admin.database.v1.ListDatabasesResponse"> & {
  /**
   * Databases that matched the request.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.Database databases = 1;
   */
  databases: Database[];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListDatabases][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases]
   * call to fetch more of the matching databases.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabasesResponse.
 * Use `create(ListDatabasesResponseSchema)` to create a new message.
 */
export const ListDatabasesResponseSchema: GenMessage<ListDatabasesResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 3);

/**
 * The request for
 * [CreateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.CreateDatabaseRequest
 */
export type CreateDatabaseRequest = Message<"google.spanner.admin.database.v1.CreateDatabaseRequest"> & {
  /**
   * Required. The name of the instance that will serve the new database.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. A `CREATE DATABASE` statement, which specifies the ID of the
   * new database.  The database ID must conform to the regular expression
   * `[a-z][a-z0-9_\-]*[a-z0-9]` and be between 2 and 30 characters in length.
   * If the database ID is a reserved word or if it contains a hyphen, the
   * database ID must be enclosed in backticks (`` ` ``).
   *
   * @generated from field: string create_statement = 2;
   */
  createStatement: string;

  /**
   * Optional. A list of DDL statements to run inside the newly created
   * database. Statements can create tables, indexes, etc. These
   * statements execute atomically with the creation of the database:
   * if there is an error in any statement, the database is not created.
   *
   * @generated from field: repeated string extra_statements = 3;
   */
  extraStatements: string[];

  /**
   * Optional. The encryption configuration for the database. If this field is
   * not specified, Cloud Spanner will encrypt/decrypt all data at rest using
   * Google default encryption.
   *
   * @generated from field: google.spanner.admin.database.v1.EncryptionConfig encryption_config = 4;
   */
  encryptionConfig?: EncryptionConfig;

  /**
   * Optional. The dialect of the Cloud Spanner Database.
   *
   * @generated from field: google.spanner.admin.database.v1.DatabaseDialect database_dialect = 5;
   */
  databaseDialect: DatabaseDialect;

  /**
   * Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements in
   * 'extra_statements' above.
   * Contains a protobuf-serialized
   * [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto).
   * To generate it, [install](https://grpc.io/docs/protoc-installation/) and
   * run `protoc` with --include_imports and --descriptor_set_out. For example,
   * to generate for moon/shot/app.proto, run
   * ```
   * $protoc  --proto_path=/app_path --proto_path=/lib_path \
   *          --include_imports \
   *          --descriptor_set_out=descriptors.data \
   *          moon/shot/app.proto
   * ```
   * For more details, see protobuffer [self
   * description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
   *
   * @generated from field: bytes proto_descriptors = 6;
   */
  protoDescriptors: Uint8Array;
};

/**
 * Describes the message google.spanner.admin.database.v1.CreateDatabaseRequest.
 * Use `create(CreateDatabaseRequestSchema)` to create a new message.
 */
export const CreateDatabaseRequestSchema: GenMessage<CreateDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 4);

/**
 * Metadata type for the operation returned by
 * [CreateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.CreateDatabaseMetadata
 */
export type CreateDatabaseMetadata = Message<"google.spanner.admin.database.v1.CreateDatabaseMetadata"> & {
  /**
   * The database being created.
   *
   * @generated from field: string database = 1;
   */
  database: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.CreateDatabaseMetadata.
 * Use `create(CreateDatabaseMetadataSchema)` to create a new message.
 */
export const CreateDatabaseMetadataSchema: GenMessage<CreateDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 5);

/**
 * The request for
 * [GetDatabase][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.GetDatabaseRequest
 */
export type GetDatabaseRequest = Message<"google.spanner.admin.database.v1.GetDatabaseRequest"> & {
  /**
   * Required. The name of the requested database. Values are of the form
   * `projects/<project>/instances/<instance>/databases/<database>`.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.GetDatabaseRequest.
 * Use `create(GetDatabaseRequestSchema)` to create a new message.
 */
export const GetDatabaseRequestSchema: GenMessage<GetDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 6);

/**
 * The request for
 * [UpdateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.UpdateDatabaseRequest
 */
export type UpdateDatabaseRequest = Message<"google.spanner.admin.database.v1.UpdateDatabaseRequest"> & {
  /**
   * Required. The database to update.
   * The `name` field of the database is of the form
   * `projects/<project>/instances/<instance>/databases/<database>`.
   *
   * @generated from field: google.spanner.admin.database.v1.Database database = 1;
   */
  database?: Database;

  /**
   * Required. The list of fields to update. Currently, only
   * `enable_drop_protection` field can be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.spanner.admin.database.v1.UpdateDatabaseRequest.
 * Use `create(UpdateDatabaseRequestSchema)` to create a new message.
 */
export const UpdateDatabaseRequestSchema: GenMessage<UpdateDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 7);

/**
 * Metadata type for the operation returned by
 * [UpdateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.UpdateDatabaseMetadata
 */
export type UpdateDatabaseMetadata = Message<"google.spanner.admin.database.v1.UpdateDatabaseMetadata"> & {
  /**
   * The request for
   * [UpdateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabase].
   *
   * @generated from field: google.spanner.admin.database.v1.UpdateDatabaseRequest request = 1;
   */
  request?: UpdateDatabaseRequest;

  /**
   * The progress of the
   * [UpdateDatabase][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabase]
   * operation.
   *
   * @generated from field: google.spanner.admin.database.v1.OperationProgress progress = 2;
   */
  progress?: OperationProgress;

  /**
   * The time at which this operation was cancelled. If set, this operation is
   * in the process of undoing itself (which is best-effort).
   *
   * @generated from field: google.protobuf.Timestamp cancel_time = 3;
   */
  cancelTime?: Timestamp;
};

/**
 * Describes the message google.spanner.admin.database.v1.UpdateDatabaseMetadata.
 * Use `create(UpdateDatabaseMetadataSchema)` to create a new message.
 */
export const UpdateDatabaseMetadataSchema: GenMessage<UpdateDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 8);

/**
 * Enqueues the given DDL statements to be applied, in order but not
 * necessarily all at once, to the database schema at some point (or
 * points) in the future. The server checks that the statements
 * are executable (syntactically valid, name tables that exist, etc.)
 * before enqueueing them, but they may still fail upon
 * later execution (e.g., if a statement from another batch of
 * statements is applied first and it conflicts in some way, or if
 * there is some data-related problem like a `NULL` value in a column to
 * which `NOT NULL` would be added). If a statement fails, all
 * subsequent statements in the batch are automatically cancelled.
 *
 * Each batch of statements is assigned a name which can be used with
 * the [Operations][google.longrunning.Operations] API to monitor
 * progress. See the
 * [operation_id][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id]
 * field for more details.
 *
 * @generated from message google.spanner.admin.database.v1.UpdateDatabaseDdlRequest
 */
export type UpdateDatabaseDdlRequest = Message<"google.spanner.admin.database.v1.UpdateDatabaseDdlRequest"> & {
  /**
   * Required. The database to update.
   *
   * @generated from field: string database = 1;
   */
  database: string;

  /**
   * Required. DDL statements to be applied to the database.
   *
   * @generated from field: repeated string statements = 2;
   */
  statements: string[];

  /**
   * If empty, the new update request is assigned an
   * automatically-generated operation ID. Otherwise, `operation_id`
   * is used to construct the name of the resulting
   * [Operation][google.longrunning.Operation].
   *
   * Specifying an explicit operation ID simplifies determining
   * whether the statements were executed in the event that the
   * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
   * call is replayed, or the return value is otherwise lost: the
   * [database][google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database]
   * and `operation_id` fields can be combined to form the
   * [name][google.longrunning.Operation.name] of the resulting
   * [longrunning.Operation][google.longrunning.Operation]:
   * `<database>/operations/<operation_id>`.
   *
   * `operation_id` should be unique within the database, and must be
   * a valid identifier: `[a-z][a-z0-9_]*`. Note that
   * automatically-generated operation IDs always begin with an
   * underscore. If the named operation already exists,
   * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
   * returns `ALREADY_EXISTS`.
   *
   * @generated from field: string operation_id = 3;
   */
  operationId: string;

  /**
   * Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements.
   * Contains a protobuf-serialized
   * [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto).
   * To generate it, [install](https://grpc.io/docs/protoc-installation/) and
   * run `protoc` with --include_imports and --descriptor_set_out. For example,
   * to generate for moon/shot/app.proto, run
   * ```
   * $protoc  --proto_path=/app_path --proto_path=/lib_path \
   *          --include_imports \
   *          --descriptor_set_out=descriptors.data \
   *          moon/shot/app.proto
   * ```
   * For more details, see protobuffer [self
   * description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
   *
   * @generated from field: bytes proto_descriptors = 4;
   */
  protoDescriptors: Uint8Array;
};

/**
 * Describes the message google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.
 * Use `create(UpdateDatabaseDdlRequestSchema)` to create a new message.
 */
export const UpdateDatabaseDdlRequestSchema: GenMessage<UpdateDatabaseDdlRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 9);

/**
 * Action information extracted from a DDL statement. This proto is used to
 * display the brief info of the DDL statement for the operation
 * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl].
 *
 * @generated from message google.spanner.admin.database.v1.DdlStatementActionInfo
 */
export type DdlStatementActionInfo = Message<"google.spanner.admin.database.v1.DdlStatementActionInfo"> & {
  /**
   * The action for the DDL statement, e.g. CREATE, ALTER, DROP, GRANT, etc.
   * This field is a non-empty string.
   *
   * @generated from field: string action = 1;
   */
  action: string;

  /**
   * The entity type for the DDL statement, e.g. TABLE, INDEX, VIEW, etc.
   * This field can be empty string for some DDL statement,
   * e.g. for statement "ANALYZE", `entity_type` = "".
   *
   * @generated from field: string entity_type = 2;
   */
  entityType: string;

  /**
   * The entity name(s) being operated on the DDL statement.
   * E.g.
   * 1. For statement "CREATE TABLE t1(...)", `entity_names` = ["t1"].
   * 2. For statement "GRANT ROLE r1, r2 ...", `entity_names` = ["r1", "r2"].
   * 3. For statement "ANALYZE", `entity_names` = [].
   *
   * @generated from field: repeated string entity_names = 3;
   */
  entityNames: string[];
};

/**
 * Describes the message google.spanner.admin.database.v1.DdlStatementActionInfo.
 * Use `create(DdlStatementActionInfoSchema)` to create a new message.
 */
export const DdlStatementActionInfoSchema: GenMessage<DdlStatementActionInfo> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 10);

/**
 * Metadata type for the operation returned by
 * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl].
 *
 * @generated from message google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata
 */
export type UpdateDatabaseDdlMetadata = Message<"google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata"> & {
  /**
   * The database being modified.
   *
   * @generated from field: string database = 1;
   */
  database: string;

  /**
   * For an update this list contains all the statements. For an
   * individual statement, this list contains only that statement.
   *
   * @generated from field: repeated string statements = 2;
   */
  statements: string[];

  /**
   * Reports the commit timestamps of all statements that have
   * succeeded so far, where `commit_timestamps[i]` is the commit
   * timestamp for the statement `statements[i]`.
   *
   * @generated from field: repeated google.protobuf.Timestamp commit_timestamps = 3;
   */
  commitTimestamps: Timestamp[];

  /**
   * Output only. When true, indicates that the operation is throttled e.g.
   * due to resource constraints. When resources become available the operation
   * will resume and this field will be false again.
   *
   * @generated from field: bool throttled = 4;
   */
  throttled: boolean;

  /**
   * The progress of the
   * [UpdateDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl]
   * operations. All DDL statements will have continuously updating progress,
   * and `progress[i]` is the operation progress for `statements[i]`. Also,
   * `progress[i]` will have start time and end time populated with commit
   * timestamp of operation, as well as a progress of 100% once the operation
   * has completed.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.OperationProgress progress = 5;
   */
  progress: OperationProgress[];

  /**
   * The brief action info for the DDL statements.
   * `actions[i]` is the brief info for `statements[i]`.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.DdlStatementActionInfo actions = 6;
   */
  actions: DdlStatementActionInfo[];
};

/**
 * Describes the message google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.
 * Use `create(UpdateDatabaseDdlMetadataSchema)` to create a new message.
 */
export const UpdateDatabaseDdlMetadataSchema: GenMessage<UpdateDatabaseDdlMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 11);

/**
 * The request for
 * [DropDatabase][google.spanner.admin.database.v1.DatabaseAdmin.DropDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.DropDatabaseRequest
 */
export type DropDatabaseRequest = Message<"google.spanner.admin.database.v1.DropDatabaseRequest"> & {
  /**
   * Required. The database to be dropped.
   *
   * @generated from field: string database = 1;
   */
  database: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.DropDatabaseRequest.
 * Use `create(DropDatabaseRequestSchema)` to create a new message.
 */
export const DropDatabaseRequestSchema: GenMessage<DropDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 12);

/**
 * The request for
 * [GetDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl].
 *
 * @generated from message google.spanner.admin.database.v1.GetDatabaseDdlRequest
 */
export type GetDatabaseDdlRequest = Message<"google.spanner.admin.database.v1.GetDatabaseDdlRequest"> & {
  /**
   * Required. The database whose schema we wish to get.
   * Values are of the form
   * `projects/<project>/instances/<instance>/databases/<database>`
   *
   * @generated from field: string database = 1;
   */
  database: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.GetDatabaseDdlRequest.
 * Use `create(GetDatabaseDdlRequestSchema)` to create a new message.
 */
export const GetDatabaseDdlRequestSchema: GenMessage<GetDatabaseDdlRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 13);

/**
 * The response for
 * [GetDatabaseDdl][google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl].
 *
 * @generated from message google.spanner.admin.database.v1.GetDatabaseDdlResponse
 */
export type GetDatabaseDdlResponse = Message<"google.spanner.admin.database.v1.GetDatabaseDdlResponse"> & {
  /**
   * A list of formatted DDL statements defining the schema of the database
   * specified in the request.
   *
   * @generated from field: repeated string statements = 1;
   */
  statements: string[];

  /**
   * Proto descriptors stored in the database.
   * Contains a protobuf-serialized
   * [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto).
   * For more details, see protobuffer [self
   * description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).
   *
   * @generated from field: bytes proto_descriptors = 2;
   */
  protoDescriptors: Uint8Array;
};

/**
 * Describes the message google.spanner.admin.database.v1.GetDatabaseDdlResponse.
 * Use `create(GetDatabaseDdlResponseSchema)` to create a new message.
 */
export const GetDatabaseDdlResponseSchema: GenMessage<GetDatabaseDdlResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 14);

/**
 * The request for
 * [ListDatabaseOperations][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseOperations].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabaseOperationsRequest
 */
export type ListDatabaseOperationsRequest = Message<"google.spanner.admin.database.v1.ListDatabaseOperationsRequest"> & {
  /**
   * Required. The instance of the database operations.
   * Values are of the form `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * An expression that filters the list of returned operations.
   *
   * A filter expression consists of a field name, a
   * comparison operator, and a value for filtering.
   * The value must be a string, a number, or a boolean. The comparison operator
   * must be one of: `<`, `>`, `<=`, `>=`, `!=`, `=`, or `:`.
   * Colon `:` is the contains operator. Filter rules are not case sensitive.
   *
   * The following fields in the [Operation][google.longrunning.Operation]
   * are eligible for filtering:
   *
   *   * `name` - The name of the long-running operation
   *   * `done` - False if the operation is in progress, else true.
   *   * `metadata.@type` - the type of metadata. For example, the type string
   *      for
   *      [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata]
   *      is
   *      `type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata`.
   *   * `metadata.<field_name>` - any field in metadata.value.
   *      `metadata.@type` must be specified first, if filtering on metadata
   *      fields.
   *   * `error` - Error associated with the long-running operation.
   *   * `response.@type` - the type of response.
   *   * `response.<field_name>` - any field in response.value.
   *
   * You can combine multiple expressions by enclosing each expression in
   * parentheses. By default, expressions are combined with AND logic. However,
   * you can specify AND, OR, and NOT logic explicitly.
   *
   * Here are a few examples:
   *
   *   * `done:true` - The operation is complete.
   *   * `(metadata.@type=type.googleapis.com/google.spanner.admin.database.v1.RestoreDatabaseMetadata) AND` \
   *     `(metadata.source_type:BACKUP) AND` \
   *     `(metadata.backup_info.backup:backup_howl) AND` \
   *     `(metadata.name:restored_howl) AND` \
   *     `(metadata.progress.start_time < \"2018-03-28T14:50:00Z\") AND` \
   *     `(error:*)` - Return operations where:
   *     * The operation's metadata type is
   *     [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
   *     * The database is restored from a backup.
   *     * The backup name contains "backup_howl".
   *     * The restored database's name contains "restored_howl".
   *     * The operation started before 2018-03-28T14:50:00Z.
   *     * The operation resulted in an error.
   *
   * @generated from field: string filter = 2;
   */
  filter: string;

  /**
   * Number of operations to be returned in the response. If 0 or
   * less, defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.spanner.admin.database.v1.ListDatabaseOperationsResponse.next_page_token]
   * from a previous
   * [ListDatabaseOperationsResponse][google.spanner.admin.database.v1.ListDatabaseOperationsResponse]
   * to the same `parent` and with the same `filter`.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabaseOperationsRequest.
 * Use `create(ListDatabaseOperationsRequestSchema)` to create a new message.
 */
export const ListDatabaseOperationsRequestSchema: GenMessage<ListDatabaseOperationsRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 15);

/**
 * The response for
 * [ListDatabaseOperations][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseOperations].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabaseOperationsResponse
 */
export type ListDatabaseOperationsResponse = Message<"google.spanner.admin.database.v1.ListDatabaseOperationsResponse"> & {
  /**
   * The list of matching database [long-running
   * operations][google.longrunning.Operation]. Each operation's name will be
   * prefixed by the database's name. The operation's
   * [metadata][google.longrunning.Operation.metadata] field type
   * `metadata.type_url` describes the type of the metadata.
   *
   * @generated from field: repeated google.longrunning.Operation operations = 1;
   */
  operations: Operation[];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListDatabaseOperations][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseOperations]
   * call to fetch more of the matching metadata.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabaseOperationsResponse.
 * Use `create(ListDatabaseOperationsResponseSchema)` to create a new message.
 */
export const ListDatabaseOperationsResponseSchema: GenMessage<ListDatabaseOperationsResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 16);

/**
 * The request for
 * [RestoreDatabase][google.spanner.admin.database.v1.DatabaseAdmin.RestoreDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.RestoreDatabaseRequest
 */
export type RestoreDatabaseRequest = Message<"google.spanner.admin.database.v1.RestoreDatabaseRequest"> & {
  /**
   * Required. The name of the instance in which to create the
   * restored database. This instance must be in the same project and
   * have the same instance configuration as the instance containing
   * the source backup. Values are of the form
   * `projects/<project>/instances/<instance>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The id of the database to create and restore to. This
   * database must not already exist. The `database_id` appended to
   * `parent` forms the full database name of the form
   * `projects/<project>/instances/<instance>/databases/<database_id>`.
   *
   * @generated from field: string database_id = 2;
   */
  databaseId: string;

  /**
   * Required. The source from which to restore.
   *
   * @generated from oneof google.spanner.admin.database.v1.RestoreDatabaseRequest.source
   */
  source: {
    /**
     * Name of the backup from which to restore.  Values are of the form
     * `projects/<project>/instances/<instance>/backups/<backup>`.
     *
     * @generated from field: string backup = 3;
     */
    value: string;
    case: "backup";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. An encryption configuration describing the encryption type and
   * key resources in Cloud KMS used to encrypt/decrypt the database to restore
   * to. If this field is not specified, the restored database will use the same
   * encryption configuration as the backup by default, namely
   * [encryption_type][google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.encryption_type]
   * = `USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION`.
   *
   * @generated from field: google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig encryption_config = 4;
   */
  encryptionConfig?: RestoreDatabaseEncryptionConfig;
};

/**
 * Describes the message google.spanner.admin.database.v1.RestoreDatabaseRequest.
 * Use `create(RestoreDatabaseRequestSchema)` to create a new message.
 */
export const RestoreDatabaseRequestSchema: GenMessage<RestoreDatabaseRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 17);

/**
 * Encryption configuration for the restored database.
 *
 * @generated from message google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig
 */
export type RestoreDatabaseEncryptionConfig = Message<"google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig"> & {
  /**
   * Required. The encryption type of the restored database.
   *
   * @generated from field: google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.EncryptionType encryption_type = 1;
   */
  encryptionType: RestoreDatabaseEncryptionConfig_EncryptionType;

  /**
   * Optional. The Cloud KMS key that will be used to encrypt/decrypt the
   * restored database. This field should be set only when
   * [encryption_type][google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.encryption_type]
   * is `CUSTOMER_MANAGED_ENCRYPTION`. Values are of the form
   * `projects/<project>/locations/<location>/keyRings/<key_ring>/cryptoKeys/<kms_key_name>`.
   *
   * @generated from field: string kms_key_name = 2;
   */
  kmsKeyName: string;

  /**
   * Optional. Specifies the KMS configuration for the one or more keys used to
   * encrypt the database. Values are of the form
   * `projects/<project>/locations/<location>/keyRings/<key_ring>/cryptoKeys/<kms_key_name>`.
   *
   * The keys referenced by kms_key_names must fully cover all
   * regions of the database instance configuration. Some examples:
   * * For single region database instance configs, specify a single regional
   * location KMS key.
   * * For multi-regional database instance configs of type GOOGLE_MANAGED,
   * either specify a multi-regional location KMS key or multiple regional
   * location KMS keys that cover all regions in the instance config.
   * * For a database instance config of type USER_MANAGED, please specify only
   * regional location KMS keys to cover each region in the instance config.
   * Multi-regional location KMS keys are not supported for USER_MANAGED
   * instance configs.
   *
   * @generated from field: repeated string kms_key_names = 3;
   */
  kmsKeyNames: string[];
};

/**
 * Describes the message google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.
 * Use `create(RestoreDatabaseEncryptionConfigSchema)` to create a new message.
 */
export const RestoreDatabaseEncryptionConfigSchema: GenMessage<RestoreDatabaseEncryptionConfig> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 18);

/**
 * Encryption types for the database to be restored.
 *
 * @generated from enum google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.EncryptionType
 */
export enum RestoreDatabaseEncryptionConfig_EncryptionType {
  /**
   * Unspecified. Do not use.
   *
   * @generated from enum value: ENCRYPTION_TYPE_UNSPECIFIED = 0;
   */
  ENCRYPTION_TYPE_UNSPECIFIED = 0,

  /**
   * This is the default option when
   * [encryption_config][google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig]
   * is not specified.
   *
   * @generated from enum value: USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION = 1;
   */
  USE_CONFIG_DEFAULT_OR_BACKUP_ENCRYPTION = 1,

  /**
   * Use Google default encryption.
   *
   * @generated from enum value: GOOGLE_DEFAULT_ENCRYPTION = 2;
   */
  GOOGLE_DEFAULT_ENCRYPTION = 2,

  /**
   * Use customer managed encryption. If specified, `kms_key_name` must
   * must contain a valid Cloud KMS key.
   *
   * @generated from enum value: CUSTOMER_MANAGED_ENCRYPTION = 3;
   */
  CUSTOMER_MANAGED_ENCRYPTION = 3,
}

/**
 * Describes the enum google.spanner.admin.database.v1.RestoreDatabaseEncryptionConfig.EncryptionType.
 */
export const RestoreDatabaseEncryptionConfig_EncryptionTypeSchema: GenEnum<RestoreDatabaseEncryptionConfig_EncryptionType> = /*@__PURE__*/
  enumDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 18, 0);

/**
 * Metadata type for the long-running operation returned by
 * [RestoreDatabase][google.spanner.admin.database.v1.DatabaseAdmin.RestoreDatabase].
 *
 * @generated from message google.spanner.admin.database.v1.RestoreDatabaseMetadata
 */
export type RestoreDatabaseMetadata = Message<"google.spanner.admin.database.v1.RestoreDatabaseMetadata"> & {
  /**
   * Name of the database being created and restored to.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The type of the restore source.
   *
   * @generated from field: google.spanner.admin.database.v1.RestoreSourceType source_type = 2;
   */
  sourceType: RestoreSourceType;

  /**
   * Information about the source used to restore the database, as specified by
   * `source` in
   * [RestoreDatabaseRequest][google.spanner.admin.database.v1.RestoreDatabaseRequest].
   *
   * @generated from oneof google.spanner.admin.database.v1.RestoreDatabaseMetadata.source_info
   */
  sourceInfo: {
    /**
     * Information about the backup used to restore the database.
     *
     * @generated from field: google.spanner.admin.database.v1.BackupInfo backup_info = 3;
     */
    value: BackupInfo;
    case: "backupInfo";
  } | { case: undefined; value?: undefined };

  /**
   * The progress of the
   * [RestoreDatabase][google.spanner.admin.database.v1.DatabaseAdmin.RestoreDatabase]
   * operation.
   *
   * @generated from field: google.spanner.admin.database.v1.OperationProgress progress = 4;
   */
  progress?: OperationProgress;

  /**
   * The time at which cancellation of this operation was received.
   * [Operations.CancelOperation][google.longrunning.Operations.CancelOperation]
   * starts asynchronous cancellation on a long-running operation. The server
   * makes a best effort to cancel the operation, but success is not guaranteed.
   * Clients can use
   * [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an [Operation.error][google.longrunning.Operation.error] value with a
   * [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
   * `Code.CANCELLED`.
   *
   * @generated from field: google.protobuf.Timestamp cancel_time = 5;
   */
  cancelTime?: Timestamp;

  /**
   * If exists, the name of the long-running operation that will be used to
   * track the post-restore optimization process to optimize the performance of
   * the restored database, and remove the dependency on the restore source.
   * The name is of the form
   * `projects/<project>/instances/<instance>/databases/<database>/operations/<operation>`
   * where the <database> is the name of database being created and restored to.
   * The metadata type of the  long-running operation is
   * [OptimizeRestoredDatabaseMetadata][google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata].
   * This long-running operation will be automatically created by the system
   * after the RestoreDatabase long-running operation completes successfully.
   * This operation will not be created if the restore was not successful.
   *
   * @generated from field: string optimize_database_operation_name = 6;
   */
  optimizeDatabaseOperationName: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.RestoreDatabaseMetadata.
 * Use `create(RestoreDatabaseMetadataSchema)` to create a new message.
 */
export const RestoreDatabaseMetadataSchema: GenMessage<RestoreDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 19);

/**
 * Metadata type for the long-running operation used to track the progress
 * of optimizations performed on a newly restored database. This long-running
 * operation is automatically created by the system after the successful
 * completion of a database restore, and cannot be cancelled.
 *
 * @generated from message google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata
 */
export type OptimizeRestoredDatabaseMetadata = Message<"google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata"> & {
  /**
   * Name of the restored database being optimized.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The progress of the post-restore optimizations.
   *
   * @generated from field: google.spanner.admin.database.v1.OperationProgress progress = 2;
   */
  progress?: OperationProgress;
};

/**
 * Describes the message google.spanner.admin.database.v1.OptimizeRestoredDatabaseMetadata.
 * Use `create(OptimizeRestoredDatabaseMetadataSchema)` to create a new message.
 */
export const OptimizeRestoredDatabaseMetadataSchema: GenMessage<OptimizeRestoredDatabaseMetadata> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 20);

/**
 * A Cloud Spanner database role.
 *
 * @generated from message google.spanner.admin.database.v1.DatabaseRole
 */
export type DatabaseRole = Message<"google.spanner.admin.database.v1.DatabaseRole"> & {
  /**
   * Required. The name of the database role. Values are of the form
   * `projects/<project>/instances/<instance>/databases/<database>/databaseRoles/<role>`
   * where `<role>` is as specified in the `CREATE ROLE` DDL statement.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.DatabaseRole.
 * Use `create(DatabaseRoleSchema)` to create a new message.
 */
export const DatabaseRoleSchema: GenMessage<DatabaseRole> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 21);

/**
 * The request for
 * [ListDatabaseRoles][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseRoles].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabaseRolesRequest
 */
export type ListDatabaseRolesRequest = Message<"google.spanner.admin.database.v1.ListDatabaseRolesRequest"> & {
  /**
   * Required. The database whose roles should be listed.
   * Values are of the form
   * `projects/<project>/instances/<instance>/databases/<database>`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Number of database roles to be returned in the response. If 0 or less,
   * defaults to the server's maximum allowed page size.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * If non-empty, `page_token` should contain a
   * [next_page_token][google.spanner.admin.database.v1.ListDatabaseRolesResponse.next_page_token]
   * from a previous
   * [ListDatabaseRolesResponse][google.spanner.admin.database.v1.ListDatabaseRolesResponse].
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabaseRolesRequest.
 * Use `create(ListDatabaseRolesRequestSchema)` to create a new message.
 */
export const ListDatabaseRolesRequestSchema: GenMessage<ListDatabaseRolesRequest> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 22);

/**
 * The response for
 * [ListDatabaseRoles][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseRoles].
 *
 * @generated from message google.spanner.admin.database.v1.ListDatabaseRolesResponse
 */
export type ListDatabaseRolesResponse = Message<"google.spanner.admin.database.v1.ListDatabaseRolesResponse"> & {
  /**
   * Database roles that matched the request.
   *
   * @generated from field: repeated google.spanner.admin.database.v1.DatabaseRole database_roles = 1;
   */
  databaseRoles: DatabaseRole[];

  /**
   * `next_page_token` can be sent in a subsequent
   * [ListDatabaseRoles][google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseRoles]
   * call to fetch more of the matching roles.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.spanner.admin.database.v1.ListDatabaseRolesResponse.
 * Use `create(ListDatabaseRolesResponseSchema)` to create a new message.
 */
export const ListDatabaseRolesResponseSchema: GenMessage<ListDatabaseRolesResponse> = /*@__PURE__*/
  messageDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 23);

/**
 * Indicates the type of the restore source.
 *
 * @generated from enum google.spanner.admin.database.v1.RestoreSourceType
 */
export enum RestoreSourceType {
  /**
   * No restore associated.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * A backup was used as the source of the restore.
   *
   * @generated from enum value: BACKUP = 1;
   */
  BACKUP = 1,
}

/**
 * Describes the enum google.spanner.admin.database.v1.RestoreSourceType.
 */
export const RestoreSourceTypeSchema: GenEnum<RestoreSourceType> = /*@__PURE__*/
  enumDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 0);

/**
 * Cloud Spanner Database Admin API
 *
 * The Cloud Spanner Database Admin API can be used to:
 *   * create, drop, and list databases
 *   * update the schema of pre-existing databases
 *   * create, delete, copy and list backups for a database
 *   * restore a database from an existing backup
 *
 * @generated from service google.spanner.admin.database.v1.DatabaseAdmin
 */
export const DatabaseAdmin: GenService<{
  /**
   * Lists Cloud Spanner databases.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases
   */
  listDatabases: {
    methodKind: "unary";
    input: typeof ListDatabasesRequestSchema;
    output: typeof ListDatabasesResponseSchema;
  },
  /**
   * Creates a new Cloud Spanner database and starts to prepare it for serving.
   * The returned [long-running operation][google.longrunning.Operation] will
   * have a name of the format `<database_name>/operations/<operation_id>` and
   * can be used to track preparation of the database. The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [CreateDatabaseMetadata][google.spanner.admin.database.v1.CreateDatabaseMetadata].
   * The [response][google.longrunning.Operation.response] field type is
   * [Database][google.spanner.admin.database.v1.Database], if successful.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.CreateDatabase
   */
  createDatabase: {
    methodKind: "unary";
    input: typeof CreateDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets the state of a Cloud Spanner database.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.GetDatabase
   */
  getDatabase: {
    methodKind: "unary";
    input: typeof GetDatabaseRequestSchema;
    output: typeof DatabaseSchema;
  },
  /**
   * Updates a Cloud Spanner database. The returned
   * [long-running operation][google.longrunning.Operation] can be used to track
   * the progress of updating the database. If the named database does not
   * exist, returns `NOT_FOUND`.
   *
   * While the operation is pending:
   *
   *   * The database's
   *     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
   *     field is set to true.
   *   * Cancelling the operation is best-effort. If the cancellation succeeds,
   *     the operation metadata's
   *     [cancel_time][google.spanner.admin.database.v1.UpdateDatabaseMetadata.cancel_time]
   *     is set, the updates are reverted, and the operation terminates with a
   *     `CANCELLED` status.
   *   * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error
   *     until the pending operation is done (returns successfully or with
   *     error).
   *   * Reading the database via the API continues to give the pre-request
   *     values.
   *
   * Upon completion of the returned operation:
   *
   *   * The new values are in effect and readable via the API.
   *   * The database's
   *     [reconciling][google.spanner.admin.database.v1.Database.reconciling]
   *     field becomes false.
   *
   * The returned [long-running operation][google.longrunning.Operation] will
   * have a name of the format
   * `projects/<project>/instances/<instance>/databases/<database>/operations/<operation_id>`
   * and can be used to track the database modification. The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [UpdateDatabaseMetadata][google.spanner.admin.database.v1.UpdateDatabaseMetadata].
   * The [response][google.longrunning.Operation.response] field type is
   * [Database][google.spanner.admin.database.v1.Database], if successful.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabase
   */
  updateDatabase: {
    methodKind: "unary";
    input: typeof UpdateDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Updates the schema of a Cloud Spanner database by
   * creating/altering/dropping tables, columns, indexes, etc. The returned
   * [long-running operation][google.longrunning.Operation] will have a name of
   * the format `<database_name>/operations/<operation_id>` and can be used to
   * track execution of the schema change(s). The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [UpdateDatabaseDdlMetadata][google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata].
   * The operation has no response.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.UpdateDatabaseDdl
   */
  updateDatabaseDdl: {
    methodKind: "unary";
    input: typeof UpdateDatabaseDdlRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Drops (aka deletes) a Cloud Spanner database.
   * Completed backups for the database will be retained according to their
   * `expire_time`.
   * Note: Cloud Spanner might continue to accept requests for a few seconds
   * after the database has been deleted.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.DropDatabase
   */
  dropDatabase: {
    methodKind: "unary";
    input: typeof DropDatabaseRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Returns the schema of a Cloud Spanner database as a list of formatted
   * DDL statements. This method does not show pending schema updates, those may
   * be queried using the [Operations][google.longrunning.Operations] API.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.GetDatabaseDdl
   */
  getDatabaseDdl: {
    methodKind: "unary";
    input: typeof GetDatabaseDdlRequestSchema;
    output: typeof GetDatabaseDdlResponseSchema;
  },
  /**
   * Sets the access control policy on a database or backup resource.
   * Replaces any existing policy.
   *
   * Authorization requires `spanner.databases.setIamPolicy`
   * permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
   * For backups, authorization requires `spanner.backups.setIamPolicy`
   * permission on [resource][google.iam.v1.SetIamPolicyRequest.resource].
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.SetIamPolicy
   */
  setIamPolicy: {
    methodKind: "unary";
    input: typeof SetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Gets the access control policy for a database or backup resource.
   * Returns an empty policy if a database or backup exists but does not have a
   * policy set.
   *
   * Authorization requires `spanner.databases.getIamPolicy` permission on
   * [resource][google.iam.v1.GetIamPolicyRequest.resource].
   * For backups, authorization requires `spanner.backups.getIamPolicy`
   * permission on [resource][google.iam.v1.GetIamPolicyRequest.resource].
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.GetIamPolicy
   */
  getIamPolicy: {
    methodKind: "unary";
    input: typeof GetIamPolicyRequestSchema;
    output: typeof PolicySchema;
  },
  /**
   * Returns permissions that the caller has on the specified database or backup
   * resource.
   *
   * Attempting this RPC on a non-existent Cloud Spanner database will
   * result in a NOT_FOUND error if the user has
   * `spanner.databases.list` permission on the containing Cloud
   * Spanner instance. Otherwise returns an empty set of permissions.
   * Calling this method on a backup that does not exist will
   * result in a NOT_FOUND error if the user has
   * `spanner.backups.list` permission on the containing instance.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.TestIamPermissions
   */
  testIamPermissions: {
    methodKind: "unary";
    input: typeof TestIamPermissionsRequestSchema;
    output: typeof TestIamPermissionsResponseSchema;
  },
  /**
   * Starts creating a new Cloud Spanner Backup.
   * The returned backup [long-running operation][google.longrunning.Operation]
   * will have a name of the format
   * `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation_id>`
   * and can be used to track creation of the backup. The
   * [metadata][google.longrunning.Operation.metadata] field type is
   * [CreateBackupMetadata][google.spanner.admin.database.v1.CreateBackupMetadata].
   * The [response][google.longrunning.Operation.response] field type is
   * [Backup][google.spanner.admin.database.v1.Backup], if successful.
   * Cancelling the returned operation will stop the creation and delete the
   * backup. There can be only one pending backup creation per database. Backup
   * creation of different databases can run concurrently.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.CreateBackup
   */
  createBackup: {
    methodKind: "unary";
    input: typeof CreateBackupRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Starts copying a Cloud Spanner Backup.
   * The returned backup [long-running operation][google.longrunning.Operation]
   * will have a name of the format
   * `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation_id>`
   * and can be used to track copying of the backup. The operation is associated
   * with the destination backup.
   * The [metadata][google.longrunning.Operation.metadata] field type is
   * [CopyBackupMetadata][google.spanner.admin.database.v1.CopyBackupMetadata].
   * The [response][google.longrunning.Operation.response] field type is
   * [Backup][google.spanner.admin.database.v1.Backup], if successful.
   * Cancelling the returned operation will stop the copying and delete the
   * destination backup. Concurrent CopyBackup requests can run on the same
   * source backup.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.CopyBackup
   */
  copyBackup: {
    methodKind: "unary";
    input: typeof CopyBackupRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Gets metadata on a pending or completed
   * [Backup][google.spanner.admin.database.v1.Backup].
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.GetBackup
   */
  getBackup: {
    methodKind: "unary";
    input: typeof GetBackupRequestSchema;
    output: typeof BackupSchema;
  },
  /**
   * Updates a pending or completed
   * [Backup][google.spanner.admin.database.v1.Backup].
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.UpdateBackup
   */
  updateBackup: {
    methodKind: "unary";
    input: typeof UpdateBackupRequestSchema;
    output: typeof BackupSchema;
  },
  /**
   * Deletes a pending or completed
   * [Backup][google.spanner.admin.database.v1.Backup].
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.DeleteBackup
   */
  deleteBackup: {
    methodKind: "unary";
    input: typeof DeleteBackupRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists completed and pending backups.
   * Backups returned are ordered by `create_time` in descending order,
   * starting from the most recent `create_time`.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListBackups
   */
  listBackups: {
    methodKind: "unary";
    input: typeof ListBackupsRequestSchema;
    output: typeof ListBackupsResponseSchema;
  },
  /**
   * Create a new database by restoring from a completed backup. The new
   * database must be in the same project and in an instance with the same
   * instance configuration as the instance containing
   * the backup. The returned database [long-running
   * operation][google.longrunning.Operation] has a name of the format
   * `projects/<project>/instances/<instance>/databases/<database>/operations/<operation_id>`,
   * and can be used to track the progress of the operation, and to cancel it.
   * The [metadata][google.longrunning.Operation.metadata] field type is
   * [RestoreDatabaseMetadata][google.spanner.admin.database.v1.RestoreDatabaseMetadata].
   * The [response][google.longrunning.Operation.response] type
   * is [Database][google.spanner.admin.database.v1.Database], if
   * successful. Cancelling the returned operation will stop the restore and
   * delete the database.
   * There can be only one database being restored into an instance at a time.
   * Once the restore operation completes, a new restore operation can be
   * initiated, without waiting for the optimize operation associated with the
   * first restore to complete.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.RestoreDatabase
   */
  restoreDatabase: {
    methodKind: "unary";
    input: typeof RestoreDatabaseRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Lists database [longrunning-operations][google.longrunning.Operation].
   * A database operation has a name of the form
   * `projects/<project>/instances/<instance>/databases/<database>/operations/<operation>`.
   * The long-running operation
   * [metadata][google.longrunning.Operation.metadata] field type
   * `metadata.type_url` describes the type of the metadata. Operations returned
   * include those that have completed/failed/canceled within the last 7 days,
   * and pending operations.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseOperations
   */
  listDatabaseOperations: {
    methodKind: "unary";
    input: typeof ListDatabaseOperationsRequestSchema;
    output: typeof ListDatabaseOperationsResponseSchema;
  },
  /**
   * Lists the backup [long-running operations][google.longrunning.Operation] in
   * the given instance. A backup operation has a name of the form
   * `projects/<project>/instances/<instance>/backups/<backup>/operations/<operation>`.
   * The long-running operation
   * [metadata][google.longrunning.Operation.metadata] field type
   * `metadata.type_url` describes the type of the metadata. Operations returned
   * include those that have completed/failed/canceled within the last 7 days,
   * and pending operations. Operations returned are ordered by
   * `operation.metadata.value.progress.start_time` in descending order starting
   * from the most recently started operation.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListBackupOperations
   */
  listBackupOperations: {
    methodKind: "unary";
    input: typeof ListBackupOperationsRequestSchema;
    output: typeof ListBackupOperationsResponseSchema;
  },
  /**
   * Lists Cloud Spanner database roles.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListDatabaseRoles
   */
  listDatabaseRoles: {
    methodKind: "unary";
    input: typeof ListDatabaseRolesRequestSchema;
    output: typeof ListDatabaseRolesResponseSchema;
  },
  /**
   * Creates a new backup schedule.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.CreateBackupSchedule
   */
  createBackupSchedule: {
    methodKind: "unary";
    input: typeof CreateBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * Gets backup schedule for the input schedule name.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.GetBackupSchedule
   */
  getBackupSchedule: {
    methodKind: "unary";
    input: typeof GetBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * Updates a backup schedule.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.UpdateBackupSchedule
   */
  updateBackupSchedule: {
    methodKind: "unary";
    input: typeof UpdateBackupScheduleRequestSchema;
    output: typeof BackupScheduleSchema;
  },
  /**
   * Deletes a backup schedule.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.DeleteBackupSchedule
   */
  deleteBackupSchedule: {
    methodKind: "unary";
    input: typeof DeleteBackupScheduleRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Lists all the backup schedules for the database.
   *
   * @generated from rpc google.spanner.admin.database.v1.DatabaseAdmin.ListBackupSchedules
   */
  listBackupSchedules: {
    methodKind: "unary";
    input: typeof ListBackupSchedulesRequestSchema;
    output: typeof ListBackupSchedulesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_spanner_admin_database_v1_spanner_database_admin, 0);

