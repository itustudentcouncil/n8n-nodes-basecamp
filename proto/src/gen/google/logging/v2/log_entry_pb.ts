// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/logging/v2/log_entry.proto (package google.logging.v2, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { MonitoredResource } from "../../api/monitored_resource_pb";
import { file_google_api_monitored_resource } from "../../api/monitored_resource_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { HttpRequest } from "../type/http_request_pb";
import { file_google_logging_type_http_request } from "../type/http_request_pb";
import type { LogSeverity } from "../type/log_severity_pb";
import { file_google_logging_type_log_severity } from "../type/log_severity_pb";
import type { Any, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/logging/v2/log_entry.proto.
 */
export const file_google_logging_v2_log_entry: GenFile = /*@__PURE__*/
  fileDesc("CiFnb29nbGUvbG9nZ2luZy92Mi9sb2dfZW50cnkucHJvdG8SEWdvb2dsZS5sb2dnaW5nLnYyIoMICghMb2dFbnRyeRIVCghsb2dfbmFtZRgMIAEoCUID4EECEjQKCHJlc291cmNlGAggASgLMh0uZ29vZ2xlLmFwaS5Nb25pdG9yZWRSZXNvdXJjZUID4EECEi0KDXByb3RvX3BheWxvYWQYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55SAASFgoMdGV4dF9wYXlsb2FkGAMgASgJSAASLwoManNvbl9wYXlsb2FkGAYgASgLMhcuZ29vZ2xlLnByb3RvYnVmLlN0cnVjdEgAEjIKCXRpbWVzdGFtcBgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBARI6ChFyZWNlaXZlX3RpbWVzdGFtcBgYIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxI3CghzZXZlcml0eRgKIAEoDjIgLmdvb2dsZS5sb2dnaW5nLnR5cGUuTG9nU2V2ZXJpdHlCA+BBARIWCglpbnNlcnRfaWQYBCABKAlCA+BBARI7CgxodHRwX3JlcXVlc3QYByABKAsyIC5nb29nbGUubG9nZ2luZy50eXBlLkh0dHBSZXF1ZXN0QgPgQQESPAoGbGFiZWxzGAsgAygLMicuZ29vZ2xlLmxvZ2dpbmcudjIuTG9nRW50cnkuTGFiZWxzRW50cnlCA+BBARI8CglvcGVyYXRpb24YDyABKAsyJC5nb29nbGUubG9nZ2luZy52Mi5Mb2dFbnRyeU9wZXJhdGlvbkID4EEBEhIKBXRyYWNlGBYgASgJQgPgQQESFAoHc3Bhbl9pZBgbIAEoCUID4EEBEhoKDXRyYWNlX3NhbXBsZWQYHiABKAhCA+BBARJHCg9zb3VyY2VfbG9jYXRpb24YFyABKAsyKS5nb29nbGUubG9nZ2luZy52Mi5Mb2dFbnRyeVNvdXJjZUxvY2F0aW9uQgPgQQESLwoFc3BsaXQYIyABKAsyGy5nb29nbGUubG9nZ2luZy52Mi5Mb2dTcGxpdEID4EEBGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAE6vQHqQbkBChpsb2dnaW5nLmdvb2dsZWFwaXMuY29tL0xvZxIdcHJvamVjdHMve3Byb2plY3R9L2xvZ3Mve2xvZ30SJ29yZ2FuaXphdGlvbnMve29yZ2FuaXphdGlvbn0vbG9ncy97bG9nfRIbZm9sZGVycy97Zm9sZGVyfS9sb2dzL3tsb2d9EixiaWxsaW5nQWNjb3VudHMve2JpbGxpbmdfYWNjb3VudH0vbG9ncy97bG9nfRoIbG9nX25hbWVCCQoHcGF5bG9hZCJiChFMb2dFbnRyeU9wZXJhdGlvbhIPCgJpZBgBIAEoCUID4EEBEhUKCHByb2R1Y2VyGAIgASgJQgPgQQESEgoFZmlyc3QYAyABKAhCA+BBARIRCgRsYXN0GAQgASgIQgPgQQEiVQoWTG9nRW50cnlTb3VyY2VMb2NhdGlvbhIRCgRmaWxlGAEgASgJQgPgQQESEQoEbGluZRgCIAEoA0ID4EEBEhUKCGZ1bmN0aW9uGAMgASgJQgPgQQEiPAoITG9nU3BsaXQSCwoDdWlkGAEgASgJEg0KBWluZGV4GAIgASgFEhQKDHRvdGFsX3NwbGl0cxgDIAEoBUKzAQoVY29tLmdvb2dsZS5sb2dnaW5nLnYyQg1Mb2dFbnRyeVByb3RvUAFaNWNsb3VkLmdvb2dsZS5jb20vZ28vbG9nZ2luZy9hcGl2Mi9sb2dnaW5ncGI7bG9nZ2luZ3Bi+AEBqgIXR29vZ2xlLkNsb3VkLkxvZ2dpbmcuVjLKAhdHb29nbGVcQ2xvdWRcTG9nZ2luZ1xWMuoCGkdvb2dsZTo6Q2xvdWQ6OkxvZ2dpbmc6OlYyYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_monitored_resource, file_google_api_resource, file_google_logging_type_http_request, file_google_logging_type_log_severity, file_google_protobuf_any, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * An individual entry in a log.
 *
 * @generated from message google.logging.v2.LogEntry
 */
export type LogEntry = Message<"google.logging.v2.LogEntry"> & {
  /**
   * Required. The resource name of the log to which this log entry belongs:
   *
   *     "projects/[PROJECT_ID]/logs/[LOG_ID]"
   *     "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
   *     "billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]"
   *     "folders/[FOLDER_ID]/logs/[LOG_ID]"
   *
   * A project number may be used in place of PROJECT_ID. The project number is
   * translated to its corresponding PROJECT_ID internally and the `log_name`
   * field will contain PROJECT_ID in queries and exports.
   *
   * `[LOG_ID]` must be URL-encoded within `log_name`. Example:
   * `"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity"`.
   *
   * `[LOG_ID]` must be less than 512 characters long and can only include the
   * following characters: upper and lower case alphanumeric characters,
   * forward-slash, underscore, hyphen, and period.
   *
   * For backward compatibility, if `log_name` begins with a forward-slash, such
   * as `/projects/...`, then the log entry is ingested as usual, but the
   * forward-slash is removed. Listing the log entry will not show the leading
   * slash and filtering for a log name with a leading slash will never return
   * any results.
   *
   * @generated from field: string log_name = 12;
   */
  logName: string;

  /**
   * Required. The monitored resource that produced this log entry.
   *
   * Example: a log entry that reports a database error would be associated with
   * the monitored resource designating the particular database that reported
   * the error.
   *
   * @generated from field: google.api.MonitoredResource resource = 8;
   */
  resource?: MonitoredResource;

  /**
   * The log entry payload, which can be one of multiple types.
   *
   * @generated from oneof google.logging.v2.LogEntry.payload
   */
  payload: {
    /**
     * The log entry payload, represented as a protocol buffer. Some Google
     * Cloud Platform services use this field for their log entry payloads.
     *
     * The following protocol buffer types are supported; user-defined types
     * are not supported:
     *
     *   "type.googleapis.com/google.cloud.audit.AuditLog"
     *   "type.googleapis.com/google.appengine.logging.v1.RequestLog"
     *
     * @generated from field: google.protobuf.Any proto_payload = 2;
     */
    value: Any;
    case: "protoPayload";
  } | {
    /**
     * The log entry payload, represented as a Unicode string (UTF-8).
     *
     * @generated from field: string text_payload = 3;
     */
    value: string;
    case: "textPayload";
  } | {
    /**
     * The log entry payload, represented as a structure that is
     * expressed as a JSON object.
     *
     * @generated from field: google.protobuf.Struct json_payload = 6;
     */
    value: JsonObject;
    case: "jsonPayload";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. The time the event described by the log entry occurred. This time
   * is used to compute the log entry's age and to enforce the logs retention
   * period. If this field is omitted in a new log entry, then Logging assigns
   * it the current time. Timestamps have nanosecond accuracy, but trailing
   * zeros in the fractional seconds might be omitted when the timestamp is
   * displayed.
   *
   * Incoming log entries must have timestamps that don't exceed the
   * [logs retention
   * period](https://cloud.google.com/logging/quotas#logs_retention_periods) in
   * the past, and that don't exceed 24 hours in the future. Log entries outside
   * those time boundaries aren't ingested by Logging.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 9;
   */
  timestamp?: Timestamp;

  /**
   * Output only. The time the log entry was received by Logging.
   *
   * @generated from field: google.protobuf.Timestamp receive_timestamp = 24;
   */
  receiveTimestamp?: Timestamp;

  /**
   * Optional. The severity of the log entry. The default value is
   * `LogSeverity.DEFAULT`.
   *
   * @generated from field: google.logging.type.LogSeverity severity = 10;
   */
  severity: LogSeverity;

  /**
   * Optional. A unique identifier for the log entry. If you provide a value,
   * then Logging considers other log entries in the same project, with the same
   * `timestamp`, and with the same `insert_id` to be duplicates which are
   * removed in a single query result. However, there are no guarantees of
   * de-duplication in the export of logs.
   *
   * If the `insert_id` is omitted when writing a log entry, the Logging API
   * assigns its own unique identifier in this field.
   *
   * In queries, the `insert_id` is also used to order log entries that have
   * the same `log_name` and `timestamp` values.
   *
   * @generated from field: string insert_id = 4;
   */
  insertId: string;

  /**
   * Optional. Information about the HTTP request associated with this log
   * entry, if applicable.
   *
   * @generated from field: google.logging.type.HttpRequest http_request = 7;
   */
  httpRequest?: HttpRequest;

  /**
   * Optional. A map of key, value pairs that provides additional information
   * about the log entry. The labels can be user-defined or system-defined.
   *
   * User-defined labels are arbitrary key, value pairs that you can use to
   * classify logs.
   *
   * System-defined labels are defined by GCP services for platform logs.
   * They have two components - a service namespace component and the
   * attribute name. For example: `compute.googleapis.com/resource_name`.
   *
   * Cloud Logging truncates label keys that exceed 512 B and label
   * values that exceed 64 KB upon their associated log entry being
   * written. The truncation is indicated by an ellipsis at the
   * end of the character string.
   *
   * @generated from field: map<string, string> labels = 11;
   */
  labels: { [key: string]: string };

  /**
   * Optional. Information about an operation associated with the log entry, if
   * applicable.
   *
   * @generated from field: google.logging.v2.LogEntryOperation operation = 15;
   */
  operation?: LogEntryOperation;

  /**
   * Optional. The REST resource name of the trace being written to
   * [Cloud Trace](https://cloud.google.com/trace) in
   * association with this log entry. For example, if your trace data is stored
   * in the Cloud project "my-trace-project" and if the service that is creating
   * the log entry receives a trace header that includes the trace ID "12345",
   * then the service should use "projects/my-tracing-project/traces/12345".
   *
   * The `trace` field provides the link between logs and traces. By using
   * this field, you can navigate from a log entry to a trace.
   *
   * @generated from field: string trace = 22;
   */
  trace: string;

  /**
   * Optional. The ID of the [Cloud Trace](https://cloud.google.com/trace) span
   * associated with the current operation in which the log is being written.
   * For example, if a span has the REST resource name of
   * "projects/some-project/traces/some-trace/spans/some-span-id", then the
   * `span_id` field is "some-span-id".
   *
   * A
   * [Span](https://cloud.google.com/trace/docs/reference/v2/rest/v2/projects.traces/batchWrite#Span)
   * represents a single operation within a trace. Whereas a trace may involve
   * multiple different microservices running on multiple different machines,
   * a span generally corresponds to a single logical operation being performed
   * in a single instance of a microservice on one specific machine. Spans
   * are the nodes within the tree that is a trace.
   *
   * Applications that are [instrumented for
   * tracing](https://cloud.google.com/trace/docs/setup) will generally assign a
   * new, unique span ID on each incoming request. It is also common to create
   * and record additional spans corresponding to internal processing elements
   * as well as issuing requests to dependencies.
   *
   * The span ID is expected to be a 16-character, hexadecimal encoding of an
   * 8-byte array and should not be zero. It should be unique within the trace
   * and should, ideally, be generated in a manner that is uniformly random.
   *
   * Example values:
   *
   *   - `000000000000004a`
   *   - `7a2190356c3fc94b`
   *   - `0000f00300090021`
   *   - `d39223e101960076`
   *
   * @generated from field: string span_id = 27;
   */
  spanId: string;

  /**
   * Optional. The sampling decision of the trace associated with the log entry.
   *
   * True means that the trace resource name in the `trace` field was sampled
   * for storage in a trace backend. False means that the trace was not sampled
   * for storage when this log entry was written, or the sampling decision was
   * unknown at the time. A non-sampled `trace` value is still useful as a
   * request correlation identifier. The default is False.
   *
   * @generated from field: bool trace_sampled = 30;
   */
  traceSampled: boolean;

  /**
   * Optional. Source code location information associated with the log entry,
   * if any.
   *
   * @generated from field: google.logging.v2.LogEntrySourceLocation source_location = 23;
   */
  sourceLocation?: LogEntrySourceLocation;

  /**
   * Optional. Information indicating this LogEntry is part of a sequence of
   * multiple log entries split from a single LogEntry.
   *
   * @generated from field: google.logging.v2.LogSplit split = 35;
   */
  split?: LogSplit;
};

/**
 * Describes the message google.logging.v2.LogEntry.
 * Use `create(LogEntrySchema)` to create a new message.
 */
export const LogEntrySchema: GenMessage<LogEntry> = /*@__PURE__*/
  messageDesc(file_google_logging_v2_log_entry, 0);

/**
 * Additional information about a potentially long-running operation with which
 * a log entry is associated.
 *
 * @generated from message google.logging.v2.LogEntryOperation
 */
export type LogEntryOperation = Message<"google.logging.v2.LogEntryOperation"> & {
  /**
   * Optional. An arbitrary operation identifier. Log entries with the same
   * identifier are assumed to be part of the same operation.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional. An arbitrary producer identifier. The combination of `id` and
   * `producer` must be globally unique. Examples for `producer`:
   * `"MyDivision.MyBigCompany.com"`, `"github.com/MyProject/MyApplication"`.
   *
   * @generated from field: string producer = 2;
   */
  producer: string;

  /**
   * Optional. Set this to True if this is the first log entry in the operation.
   *
   * @generated from field: bool first = 3;
   */
  first: boolean;

  /**
   * Optional. Set this to True if this is the last log entry in the operation.
   *
   * @generated from field: bool last = 4;
   */
  last: boolean;
};

/**
 * Describes the message google.logging.v2.LogEntryOperation.
 * Use `create(LogEntryOperationSchema)` to create a new message.
 */
export const LogEntryOperationSchema: GenMessage<LogEntryOperation> = /*@__PURE__*/
  messageDesc(file_google_logging_v2_log_entry, 1);

/**
 * Additional information about the source code location that produced the log
 * entry.
 *
 * @generated from message google.logging.v2.LogEntrySourceLocation
 */
export type LogEntrySourceLocation = Message<"google.logging.v2.LogEntrySourceLocation"> & {
  /**
   * Optional. Source file name. Depending on the runtime environment, this
   * might be a simple name or a fully-qualified name.
   *
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * Optional. Line within the source file. 1-based; 0 indicates no line number
   * available.
   *
   * @generated from field: int64 line = 2;
   */
  line: bigint;

  /**
   * Optional. Human-readable name of the function or method being invoked, with
   * optional context such as the class or package name. This information may be
   * used in contexts such as the logs viewer, where a file and line number are
   * less meaningful. The format can vary by language. For example:
   * `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function`
   * (Python).
   *
   * @generated from field: string function = 3;
   */
  function: string;
};

/**
 * Describes the message google.logging.v2.LogEntrySourceLocation.
 * Use `create(LogEntrySourceLocationSchema)` to create a new message.
 */
export const LogEntrySourceLocationSchema: GenMessage<LogEntrySourceLocation> = /*@__PURE__*/
  messageDesc(file_google_logging_v2_log_entry, 2);

/**
 * Additional information used to correlate multiple log entries. Used when a
 * single LogEntry would exceed the Google Cloud Logging size limit and is
 * split across multiple log entries.
 *
 * @generated from message google.logging.v2.LogSplit
 */
export type LogSplit = Message<"google.logging.v2.LogSplit"> & {
  /**
   * A globally unique identifier for all log entries in a sequence of split log
   * entries. All log entries with the same |LogSplit.uid| are assumed to be
   * part of the same sequence of split log entries.
   *
   * @generated from field: string uid = 1;
   */
  uid: string;

  /**
   * The index of this LogEntry in the sequence of split log entries. Log
   * entries are given |index| values 0, 1, ..., n-1 for a sequence of n log
   * entries.
   *
   * @generated from field: int32 index = 2;
   */
  index: number;

  /**
   * The total number of log entries that the original LogEntry was split into.
   *
   * @generated from field: int32 total_splits = 3;
   */
  totalSplits: number;
};

/**
 * Describes the message google.logging.v2.LogSplit.
 * Use `create(LogSplitSchema)` to create a new message.
 */
export const LogSplitSchema: GenMessage<LogSplit> = /*@__PURE__*/
  messageDesc(file_google_logging_v2_log_entry, 3);

