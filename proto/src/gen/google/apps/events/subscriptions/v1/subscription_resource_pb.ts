// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/apps/events/subscriptions/v1/subscription_resource.proto (package google.apps.events.subscriptions.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import { file_google_api_resource } from "../../../../api/resource_pb";
import type { Duration, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/apps/events/subscriptions/v1/subscription_resource.proto.
 */
export const file_google_apps_events_subscriptions_v1_subscription_resource: GenFile = /*@__PURE__*/
  fileDesc("Cj9nb29nbGUvYXBwcy9ldmVudHMvc3Vic2NyaXB0aW9ucy92MS9zdWJzY3JpcHRpb25fcmVzb3VyY2UucHJvdG8SI2dvb2dsZS5hcHBzLmV2ZW50cy5zdWJzY3JpcHRpb25zLnYxIr8JCgxTdWJzY3JpcHRpb24SNgoLZXhwaXJlX3RpbWUYDSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQdIABItCgN0dGwYDiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CA+BBBEgAEhcKBG5hbWUYASABKAlCCeBBCOBBBeBBARIQCgN1aWQYAiABKAlCA+BBAxIlCg90YXJnZXRfcmVzb3VyY2UYBCABKAlCDOBBBeBBAvpBAwoBKhIeCgtldmVudF90eXBlcxgFIAMoCUIJ4EEC4EEG4EEFElEKD3BheWxvYWRfb3B0aW9ucxgGIAEoCzIzLmdvb2dsZS5hcHBzLmV2ZW50cy5zdWJzY3JpcHRpb25zLnYxLlBheWxvYWRPcHRpb25zQgPgQQESYAoVbm90aWZpY2F0aW9uX2VuZHBvaW50GAcgASgLMjkuZ29vZ2xlLmFwcHMuZXZlbnRzLnN1YnNjcmlwdGlvbnMudjEuTm90aWZpY2F0aW9uRW5kcG9pbnRCBuBBAuBBBRJLCgVzdGF0ZRgIIAEoDjI3Lmdvb2dsZS5hcHBzLmV2ZW50cy5zdWJzY3JpcHRpb25zLnYxLlN1YnNjcmlwdGlvbi5TdGF0ZUID4EEDElsKEXN1c3BlbnNpb25fcmVhc29uGBIgASgOMjsuZ29vZ2xlLmFwcHMuZXZlbnRzLnN1YnNjcmlwdGlvbnMudjEuU3Vic2NyaXB0aW9uLkVycm9yVHlwZUID4EEDEjwKCWF1dGhvcml0eRgKIAEoCUIp4EED+kEjCiFjbG91ZGlkZW50aXR5Lmdvb2dsZWFwaXMuY29tL1VzZXISNAoLY3JlYXRlX3RpbWUYCyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLdXBkYXRlX3RpbWUYDCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSGAoLcmVjb25jaWxpbmcYDyABKAhCA+BBAxIRCgRldGFnGBEgASgJQgPgQQEiRgoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABIKCgZBQ1RJVkUQARINCglTVVNQRU5ERUQQAhILCgdERUxFVEVEEAMi2QEKCUVycm9yVHlwZRIaChZFUlJPUl9UWVBFX1VOU1BFQ0lGSUVEEAASFgoSVVNFUl9TQ09QRV9SRVZPS0VEEAESFAoQUkVTT1VSQ0VfREVMRVRFRBACEh4KGlVTRVJfQVVUSE9SSVpBVElPTl9GQUlMVVJFEAMSHgoaRU5EUE9JTlRfUEVSTUlTU0lPTl9ERU5JRUQQBBIWChJFTkRQT0lOVF9OT1RfRk9VTkQQBhIfChtFTkRQT0lOVF9SRVNPVVJDRV9FWEhBVVNURUQQBxIJCgVPVEhFUhAFOm7qQWsKK3dvcmtzcGFjZWV2ZW50cy5nb29nbGVhcGlzLmNvbS9TdWJzY3JpcHRpb24SHHN1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbn0qDXN1YnNjcmlwdGlvbnMyDHN1YnNjcmlwdGlvblIBAUIMCgpleHBpcmF0aW9uImQKDlBheWxvYWRPcHRpb25zEh0KEGluY2x1ZGVfcmVzb3VyY2UYASABKAhCA+BBARIzCgpmaWVsZF9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0ID4EEBIl8KFE5vdGlmaWNhdGlvbkVuZHBvaW50EjsKDHB1YnN1Yl90b3BpYxgBIAEoCUIj4EEF+kEdChtwdWJzdWIuZ29vZ2xlYXBpcy5jb20vVG9waWNIAEIKCghlbmRwb2ludEKIAwonY29tLmdvb2dsZS5hcHBzLmV2ZW50cy5zdWJzY3JpcHRpb25zLnYxQhlTdWJzY3JpcHRpb25SZXNvdXJjZVByb3RvUAFaU2Nsb3VkLmdvb2dsZS5jb20vZ28vYXBwcy9ldmVudHMvc3Vic2NyaXB0aW9ucy9hcGl2MS9zdWJzY3JpcHRpb25zcGI7c3Vic2NyaXB0aW9uc3BiqgIjR29vZ2xlLkFwcHMuRXZlbnRzLlN1YnNjcmlwdGlvbnMuVjHKAiNHb29nbGVcQXBwc1xFdmVudHNcU3Vic2NyaXB0aW9uc1xWMeoCJ0dvb2dsZTo6QXBwczo6RXZlbnRzOjpTdWJzY3JpcHRpb25zOjpWMepBMQohY2xvdWRpZGVudGl0eS5nb29nbGVhcGlzLmNvbS9Vc2VyEgx1c2Vycy97dXNlcn3qQUAKG3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9Ub3BpYxIhcHJvamVjdHMve3Byb2plY3R9L3RvcGljcy97dG9waWN9YgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_duration, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A subscription to receive events about a Google Workspace resource. To learn
 * more about subscriptions, see the [Google Workspace Events API
 * overview](https://developers.google.com/workspace/events).
 *
 * @generated from message google.apps.events.subscriptions.v1.Subscription
 */
export type Subscription = Message<"google.apps.events.subscriptions.v1.Subscription"> & {
  /**
   * The time when the subscription expires.
   *
   * The maximum expiration time depends on whether your subscription includes
   * resource data in event payloads (specified in the
   * [PayloadOptions][google.apps.events.subscriptions.v1.PayloadOptions]
   * field):
   *
   * * If payloads omit resource data, up to 7 days.
   * * If payloads include resource data, up to 4 hours. If your Google
   * Workspace organization grants access to the resource through [domain-wide
   * delegation](https://support.google.com/a/answer/162106), you can extend the
   * subscription's expiration time to up to 24 hours.
   *
   * After a subscription expires, it's deleted automatically. You receive
   * lifecycle events to the
   * [notification_endpoint][google.apps.events.subscriptions.v1.Subscription.notification_endpoint]
   * 12 hours and one hour before the subscription expires. For details, see
   * [Receive and respond to lifecycle
   * events](https://developers.google.com/workspace/events/guides/events-lifecycle).
   *
   * To prevent a subscription from expiring, you can use the
   * [`UpdateSubscription`][google.apps.events.subscriptions.v1.SubscriptionsService.UpdateSubscription]
   * method to extend its expiration date. For details, see [Update or renew a
   * subscription](https://developers.google.com/workspace/events/guides/update-subscription).
   *
   * @generated from oneof google.apps.events.subscriptions.v1.Subscription.expiration
   */
  expiration: {
    /**
     * Non-empty default. The timestamp in UTC when the subscription expires.
     * Always displayed on output, regardless of what was used on input.
     *
     * @generated from field: google.protobuf.Timestamp expire_time = 13;
     */
    value: Timestamp;
    case: "expireTime";
  } | {
    /**
     * Input only. The time-to-live (TTL) or duration for the subscription. If
     * unspecified or set to `0`, uses the maximum possible duration.
     *
     * @generated from field: google.protobuf.Duration ttl = 14;
     */
    value: Duration;
    case: "ttl";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Immutable. Identifier. Resource name of the subscription.
   *
   * Format: `subscriptions/{subscription}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. System-assigned unique identifier for the subscription.
   *
   * @generated from field: string uid = 2;
   */
  uid: string;

  /**
   * Required. Immutable. The Google Workspace resource that's monitored for
   * events, formatted as the [full resource
   * name](https://google.aip.dev/122#full-resource-names). To learn about
   * target resources and the events that they support, see [Supported Google
   * Workspace
   * events](https://developers.google.com/workspace/events#supported-events).
   *
   * A user can only authorize your app to create one subscription for a given
   * target resource. If your app tries to create another subscription with the
   * same user credentials, the request returns an `ALREADY_EXISTS` error.
   *
   * @generated from field: string target_resource = 4;
   */
  targetResource: string;

  /**
   * Required. Immutable. Unordered list. Input for creating a subscription.
   * Otherwise, output only. One or more types of events to receive about the
   * target resource. Formatted according to the CloudEvents specification.
   *
   * The supported event types depend on the target resource of your
   * subscription. For details, see [Supported Google Workspace
   * events](https://developers.google.com/workspace/events/guides#supported-events).
   *
   * By default, you also receive events about the [lifecycle of your
   * subscription](https://developers.google.com/workspace/events/guides/events-lifecycle).
   * You don't need to specify lifecycle events for this field.
   *
   * If you specify an event type that doesn't exist for the target resource,
   * the request returns an HTTP `400 Bad Request` status code.
   *
   * @generated from field: repeated string event_types = 5;
   */
  eventTypes: string[];

  /**
   * Optional. Options about what data to include in the event payload. Only
   * supported for Google Chat events.
   *
   * @generated from field: google.apps.events.subscriptions.v1.PayloadOptions payload_options = 6;
   */
  payloadOptions?: PayloadOptions;

  /**
   * Required. Immutable. The endpoint where the subscription delivers events,
   * such as a Pub/Sub topic.
   *
   * @generated from field: google.apps.events.subscriptions.v1.NotificationEndpoint notification_endpoint = 7;
   */
  notificationEndpoint?: NotificationEndpoint;

  /**
   * Output only. The state of the subscription. Determines whether the
   * subscription can receive events and deliver them to the notification
   * endpoint.
   *
   * @generated from field: google.apps.events.subscriptions.v1.Subscription.State state = 8;
   */
  state: Subscription_State;

  /**
   * Output only. The error that suspended the subscription.
   *
   * To reactivate the subscription, resolve the error and call the
   * [`ReactivateSubscription`][google.apps.events.subscriptions.v1.SubscriptionsService.ReactivateSubscription]
   * method.
   *
   * @generated from field: google.apps.events.subscriptions.v1.Subscription.ErrorType suspension_reason = 18;
   */
  suspensionReason: Subscription_ErrorType;

  /**
   * Output only. The user who authorized the creation of the
   * subscription.
   *
   * Format: `users/{user}`
   *
   * For Google Workspace users, the `{user}` value is the
   * [`user.id`](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users#User.FIELDS.ids)
   * field from the Directory API.
   *
   * @generated from field: string authority = 10;
   */
  authority: string;

  /**
   * Output only. The time when the subscription is created.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 11;
   */
  createTime?: Timestamp;

  /**
   * Output only. The last time that the subscription is updated.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 12;
   */
  updateTime?: Timestamp;

  /**
   * Output only. If `true`, the subscription is in the process of being
   * updated.
   *
   * @generated from field: bool reconciling = 15;
   */
  reconciling: boolean;

  /**
   * Optional. This checksum is computed by the server based on the value of
   * other fields, and might be sent on update requests to ensure the client has
   * an up-to-date value before proceeding.
   *
   * @generated from field: string etag = 17;
   */
  etag: string;
};

/**
 * Describes the message google.apps.events.subscriptions.v1.Subscription.
 * Use `create(SubscriptionSchema)` to create a new message.
 */
export const SubscriptionSchema: GenMessage<Subscription> = /*@__PURE__*/
  messageDesc(file_google_apps_events_subscriptions_v1_subscription_resource, 0);

/**
 * Possible states for the subscription.
 *
 * @generated from enum google.apps.events.subscriptions.v1.Subscription.State
 */
export enum Subscription_State {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: STATE_UNSPECIFIED = 0;
   */
  STATE_UNSPECIFIED = 0,

  /**
   * The subscription is active and can receive and deliver events to its
   * notification endpoint.
   *
   * @generated from enum value: ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * The subscription is unable to receive events due to an error.
   * To identify the error, see the
   * [`suspension_reason`][google.apps.events.subscriptions.v1.Subscription.suspension_reason]
   * field.
   *
   * @generated from enum value: SUSPENDED = 2;
   */
  SUSPENDED = 2,

  /**
   * The subscription is deleted.
   *
   * @generated from enum value: DELETED = 3;
   */
  DELETED = 3,
}

/**
 * Describes the enum google.apps.events.subscriptions.v1.Subscription.State.
 */
export const Subscription_StateSchema: GenEnum<Subscription_State> = /*@__PURE__*/
  enumDesc(file_google_apps_events_subscriptions_v1_subscription_resource, 0, 0);

/**
 * Possible errors for a subscription.
 *
 * @generated from enum google.apps.events.subscriptions.v1.Subscription.ErrorType
 */
export enum Subscription_ErrorType {
  /**
   * Default value. This value is unused.
   *
   * @generated from enum value: ERROR_TYPE_UNSPECIFIED = 0;
   */
  ERROR_TYPE_UNSPECIFIED = 0,

  /**
   * The authorizing user has revoked the grant of one or more OAuth scopes.
   * To learn more about authorization for Google Workspace, see [Configure
   * the OAuth consent
   * screen](https://developers.google.com/workspace/guides/configure-oauth-consent#choose-scopes).
   *
   * @generated from enum value: USER_SCOPE_REVOKED = 1;
   */
  USER_SCOPE_REVOKED = 1,

  /**
   * The target resource for the subscription no longer exists.
   *
   * @generated from enum value: RESOURCE_DELETED = 2;
   */
  RESOURCE_DELETED = 2,

  /**
   * The user that authorized the creation of the subscription no longer has
   * access to the subscription's target resource.
   *
   * @generated from enum value: USER_AUTHORIZATION_FAILURE = 3;
   */
  USER_AUTHORIZATION_FAILURE = 3,

  /**
   * The Google Workspace application doesn't have access to deliver
   * events to your subscription's notification endpoint.
   *
   * @generated from enum value: ENDPOINT_PERMISSION_DENIED = 4;
   */
  ENDPOINT_PERMISSION_DENIED = 4,

  /**
   * The subscription's notification endpoint doesn't exist, or the endpoint
   * can't be found in the Google Cloud project where you created the
   * subscription.
   *
   * @generated from enum value: ENDPOINT_NOT_FOUND = 6;
   */
  ENDPOINT_NOT_FOUND = 6,

  /**
   * The subscription's notification endpoint failed to receive events due to
   * insufficient quota or reaching rate limiting.
   *
   * @generated from enum value: ENDPOINT_RESOURCE_EXHAUSTED = 7;
   */
  ENDPOINT_RESOURCE_EXHAUSTED = 7,

  /**
   * An unidentified error has occurred.
   *
   * @generated from enum value: OTHER = 5;
   */
  OTHER = 5,
}

/**
 * Describes the enum google.apps.events.subscriptions.v1.Subscription.ErrorType.
 */
export const Subscription_ErrorTypeSchema: GenEnum<Subscription_ErrorType> = /*@__PURE__*/
  enumDesc(file_google_apps_events_subscriptions_v1_subscription_resource, 0, 1);

/**
 * Options about what data to include in the event payload. Only supported for
 * Google Chat events.
 *
 * @generated from message google.apps.events.subscriptions.v1.PayloadOptions
 */
export type PayloadOptions = Message<"google.apps.events.subscriptions.v1.PayloadOptions"> & {
  /**
   * Optional. Whether the event payload includes data about the resource that
   * changed. For example, for an event where a Google Chat message was created,
   * whether the payload contains data about the
   * [`Message`](https://developers.google.com/chat/api/reference/rest/v1/spaces.messages)
   * resource. If false, the event payload only includes the name of the changed
   * resource.
   *
   * @generated from field: bool include_resource = 1;
   */
  includeResource: boolean;

  /**
   * Optional. If `include_resource` is set to `true`, the list of fields to
   * include in the event payload. Separate fields with a comma. For example, to
   * include a Google Chat message's sender and create time, enter
   * `message.sender,message.createTime`. If omitted, the payload includes all
   * fields for the resource.
   *
   * If you specify a field that doesn't exist for the resource, the system
   * ignores the field.
   *
   * @generated from field: google.protobuf.FieldMask field_mask = 2;
   */
  fieldMask?: FieldMask;
};

/**
 * Describes the message google.apps.events.subscriptions.v1.PayloadOptions.
 * Use `create(PayloadOptionsSchema)` to create a new message.
 */
export const PayloadOptionsSchema: GenMessage<PayloadOptions> = /*@__PURE__*/
  messageDesc(file_google_apps_events_subscriptions_v1_subscription_resource, 1);

/**
 * The endpoint where the subscription delivers events.
 *
 * @generated from message google.apps.events.subscriptions.v1.NotificationEndpoint
 */
export type NotificationEndpoint = Message<"google.apps.events.subscriptions.v1.NotificationEndpoint"> & {
  /**
   * @generated from oneof google.apps.events.subscriptions.v1.NotificationEndpoint.endpoint
   */
  endpoint: {
    /**
     * Immutable. The Cloud Pub/Sub topic that receives events for the
     * subscription.
     *
     * Format: `projects/{project}/topics/{topic}`
     *
     *
     * You must create the topic in the same Google Cloud project where
     * you create this subscription.
     *
     * When the topic receives events, the events are encoded as Cloud Pub/Sub
     * messages. For details, see the [Google Cloud Pub/Sub Protocol Binding for
     * CloudEvents](https://github.com/googleapis/google-cloudevents/blob/main/docs/spec/pubsub.md).
     *
     * @generated from field: string pubsub_topic = 1;
     */
    value: string;
    case: "pubsubTopic";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.events.subscriptions.v1.NotificationEndpoint.
 * Use `create(NotificationEndpointSchema)` to create a new message.
 */
export const NotificationEndpointSchema: GenMessage<NotificationEndpoint> = /*@__PURE__*/
  messageDesc(file_google_apps_events_subscriptions_v1_subscription_resource, 2);

