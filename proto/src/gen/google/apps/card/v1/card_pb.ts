// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/apps/card/v1/card.proto (package google.apps.card.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Color } from "../../../type/color_pb";
import { file_google_type_color } from "../../../type/color_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/apps/card/v1/card.proto.
 */
export const file_google_apps_card_v1_card: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_type_color]);

/**
 * A card interface displayed in a Google Chat message or Google Workspace
 * Add-on.
 *
 * Cards support a defined layout, interactive UI elements like buttons, and
 * rich media like images. Use cards to present detailed information,
 * gather information from users, and guide users to take a next step.
 *
 * [Card builder](https://addons.gsuite.google.com/uikit/builder)
 *
 * To learn how
 * to build cards, see the following documentation:
 *
 * * For Google Chat apps, see [Design the components of a card or
 *   dialog](https://developers.google.com/workspace/chat/design-components-card-dialog).
 * * For Google Workspace Add-ons, see [Card-based
 * interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards).
 *
 * **Example: Card message for a Google Chat app**
 *
 * ![Example contact
 * card](https://developers.google.com/workspace/chat/images/card_api_reference.png)
 *
 * To create the sample card message in Google Chat, use the following JSON:
 *
 * ```
 * {
 *   "cardsV2": [
 *     {
 *       "cardId": "unique-card-id",
 *       "card": {
 *         "header": {
 *            "title": "Sasha",
 *            "subtitle": "Software Engineer",
 *            "imageUrl":
 *            "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
 *            "imageType": "CIRCLE",
 *            "imageAltText": "Avatar for Sasha"
 *          },
 *          "sections": [
 *            {
 *              "header": "Contact Info",
 *              "collapsible": true,
 *              "uncollapsibleWidgetsCount": 1,
 *              "widgets": [
 *                {
 *                  "decoratedText": {
 *                    "startIcon": {
 *                      "knownIcon": "EMAIL"
 *                    },
 *                    "text": "sasha@example.com"
 *                  }
 *                },
 *                {
 *                  "decoratedText": {
 *                    "startIcon": {
 *                      "knownIcon": "PERSON"
 *                    },
 *                    "text": "<font color=\"#80e27e\">Online</font>"
 *                  }
 *                },
 *                {
 *                  "decoratedText": {
 *                    "startIcon": {
 *                      "knownIcon": "PHONE"
 *                    },
 *                    "text": "+1 (555) 555-1234"
 *                  }
 *                },
 *                {
 *                  "buttonList": {
 *                    "buttons": [
 *                      {
 *                        "text": "Share",
 *                        "onClick": {
 *                         "openLink": {
 *                            "url": "https://example.com/share"
 *                          }
 *                        }
 *                      },
 *                      {
 *                        "text": "Edit",
 *                        "onClick": {
 *                          "action": {
 *                            "function": "goToView",
 *                            "parameters": [
 *                              {
 *                                "key": "viewType",
 *                                "value": "EDIT"
 *                              }
 *                            ]
 *                          }
 *                        }
 *                      }
 *                    ]
 *                  }
 *                }
 *              ]
 *            }
 *          ]
 *        }
 *     }
 *   ]
 * }
 * ```
 *
 * @generated from message google.apps.card.v1.Card
 */
export type Card = Message<"google.apps.card.v1.Card"> & {
  /**
   * The header of the card. A header usually contains a leading image and a
   * title. Headers always appear at the top of a card.
   *
   * @generated from field: google.apps.card.v1.Card.CardHeader header = 1;
   */
  header?: Card_CardHeader;

  /**
   * Contains a collection of widgets. Each section has its own, optional
   * header. Sections are visually separated by a line divider. For an example
   * in Google Chat apps, see [Define a section of a
   * card](https://developers.google.com/workspace/chat/design-components-card-dialog#define_a_section_of_a_card).
   *
   * @generated from field: repeated google.apps.card.v1.Card.Section sections = 2;
   */
  sections: Card_Section[];

  /**
   * The divider style between sections.
   *
   * @generated from field: google.apps.card.v1.Card.DividerStyle section_divider_style = 9;
   */
  sectionDividerStyle: Card_DividerStyle;

  /**
   * The card's actions. Actions are added to the card's toolbar menu.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * For example, the following JSON constructs a card action menu with
   * `Settings` and `Send Feedback` options:
   *
   * ```
   * "card_actions": [
   *   {
   *     "actionLabel": "Settings",
   *     "onClick": {
   *       "action": {
   *         "functionName": "goToView",
   *         "parameters": [
   *           {
   *             "key": "viewType",
   *             "value": "SETTING"
   *          }
   *         ],
   *         "loadIndicator": "LoadIndicator.SPINNER"
   *       }
   *     }
   *   },
   *   {
   *     "actionLabel": "Send Feedback",
   *     "onClick": {
   *       "openLink": {
   *         "url": "https://example.com/feedback"
   *       }
   *     }
   *   }
   * ]
   * ```
   *
   * @generated from field: repeated google.apps.card.v1.Card.CardAction card_actions = 3;
   */
  cardActions: Card_CardAction[];

  /**
   * Name of the card. Used as a card identifier in card navigation.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * The fixed footer shown at the bottom of this card.
   *
   * Setting `fixedFooter` without specifying a `primaryButton` or a
   * `secondaryButton` causes an error. For Chat apps, you can use fixed footers
   * in
   * [dialogs](https://developers.google.com/workspace/chat/dialogs), but not
   * [card
   * messages](https://developers.google.com/workspace/chat/create-messages#create).
   *
   * [Google Workspace Add-ons and Chat
   * apps](https://developers.google.com/workspace/extend):
   *
   * @generated from field: google.apps.card.v1.Card.CardFixedFooter fixed_footer = 5;
   */
  fixedFooter?: Card_CardFixedFooter;

  /**
   * In Google Workspace Add-ons, sets the display properties of the
   * `peekCardHeader`.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: google.apps.card.v1.Card.DisplayStyle display_style = 6;
   */
  displayStyle: Card_DisplayStyle;

  /**
   * When displaying contextual content, the peek card header acts as a
   * placeholder so that the user can navigate forward between the homepage
   * cards and the contextual cards.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: google.apps.card.v1.Card.CardHeader peek_card_header = 7;
   */
  peekCardHeader?: Card_CardHeader;
};

/**
 * Describes the message google.apps.card.v1.Card.
 * Use `create(CardSchema)` to create a new message.
 */
export const CardSchema: GenMessage<Card> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 0);

/**
 * Represents a card header. For an example in Google Chat apps, see [Add a
 * header](https://developers.google.com/workspace/chat/design-components-card-dialog#add_a_header).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Card.CardHeader
 */
export type Card_CardHeader = Message<"google.apps.card.v1.Card.CardHeader"> & {
  /**
   * Required. The title of the card header.
   * The header has a fixed height: if both a
   * title and subtitle are specified, each takes up one line. If only the
   * title is specified, it takes up both lines.
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * The subtitle of the card header. If specified, appears on its own line
   * below the `title`.
   *
   * @generated from field: string subtitle = 2;
   */
  subtitle: string;

  /**
   * The shape used to crop the image.
   *
   * [Google Workspace Add-ons and Chat
   * apps](https://developers.google.com/workspace/extend):
   *
   * @generated from field: google.apps.card.v1.Widget.ImageType image_type = 3;
   */
  imageType: Widget_ImageType;

  /**
   * The HTTPS URL of the image in the card header.
   *
   * @generated from field: string image_url = 4;
   */
  imageUrl: string;

  /**
   * The alternative text of this image that's used for accessibility.
   *
   * @generated from field: string image_alt_text = 5;
   */
  imageAltText: string;
};

/**
 * Describes the message google.apps.card.v1.Card.CardHeader.
 * Use `create(Card_CardHeaderSchema)` to create a new message.
 */
export const Card_CardHeaderSchema: GenMessage<Card_CardHeader> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 0, 0);

/**
 * A section contains a collection of widgets that are rendered
 * vertically in the order that they're specified.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Card.Section
 */
export type Card_Section = Message<"google.apps.card.v1.Card.Section"> & {
  /**
   * Text that appears at the top of a section.
   * Supports simple HTML formatted text. For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   *
   * @generated from field: string header = 1;
   */
  header: string;

  /**
   * All the widgets in the section.
   * Must contain at least one widget.
   *
   * @generated from field: repeated google.apps.card.v1.Widget widgets = 2;
   */
  widgets: Widget[];

  /**
   * Indicates whether this section is collapsible.
   *
   * Collapsible sections hide some or all widgets, but users can expand the
   * section to reveal the hidden widgets by clicking **Show more**. Users
   * can hide the widgets again by clicking **Show less**.
   *
   * To determine which widgets are hidden, specify
   * `uncollapsibleWidgetsCount`.
   *
   * @generated from field: bool collapsible = 5;
   */
  collapsible: boolean;

  /**
   * The number of uncollapsible widgets which remain visible even when a
   * section is collapsed.
   *
   * For example, when a section
   * contains five widgets and the `uncollapsibleWidgetsCount` is set to `2`,
   * the first two widgets are always shown and the last three are collapsed
   * by default. The `uncollapsibleWidgetsCount` is taken into account only
   * when `collapsible` is `true`.
   *
   * @generated from field: int32 uncollapsible_widgets_count = 6;
   */
  uncollapsibleWidgetsCount: number;
};

/**
 * Describes the message google.apps.card.v1.Card.Section.
 * Use `create(Card_SectionSchema)` to create a new message.
 */
export const Card_SectionSchema: GenMessage<Card_Section> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 0, 1);

/**
 * A card action is the action associated with the card. For example,
 * an invoice card might include actions such as delete invoice, email
 * invoice, or open the invoice in a browser.
 *
 * [Google Workspace
 * Add-ons](https://developers.google.com/workspace/add-ons):
 *
 * @generated from message google.apps.card.v1.Card.CardAction
 */
export type Card_CardAction = Message<"google.apps.card.v1.Card.CardAction"> & {
  /**
   * The label that displays as the action menu item.
   *
   * @generated from field: string action_label = 1;
   */
  actionLabel: string;

  /**
   * The `onClick` action for this action item.
   *
   * @generated from field: google.apps.card.v1.OnClick on_click = 2;
   */
  onClick?: OnClick;
};

/**
 * Describes the message google.apps.card.v1.Card.CardAction.
 * Use `create(Card_CardActionSchema)` to create a new message.
 */
export const Card_CardActionSchema: GenMessage<Card_CardAction> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 0, 2);

/**
 * A persistent (sticky) footer that that appears at the bottom of the card.
 *
 * Setting `fixedFooter` without specifying a `primaryButton` or a
 * `secondaryButton` causes an error.
 *
 * For Chat apps, you can use fixed footers in
 * [dialogs](https://developers.google.com/workspace/chat/dialogs), but not
 * [card
 * messages](https://developers.google.com/workspace/chat/create-messages#create).
 * For an example in Google Chat apps, see [Add a persistent
 * footer](https://developers.google.com/workspace/chat/design-components-card-dialog#add_a_persistent_footer).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Card.CardFixedFooter
 */
export type Card_CardFixedFooter = Message<"google.apps.card.v1.Card.CardFixedFooter"> & {
  /**
   * The primary button of the fixed footer. The button must be a text button
   * with text and color set.
   *
   * @generated from field: google.apps.card.v1.Button primary_button = 1;
   */
  primaryButton?: Button;

  /**
   * The secondary button of the fixed footer.  The button must be a text
   * button with text and color set.
   * If `secondaryButton` is set, you must also set `primaryButton`.
   *
   * @generated from field: google.apps.card.v1.Button secondary_button = 2;
   */
  secondaryButton?: Button;
};

/**
 * Describes the message google.apps.card.v1.Card.CardFixedFooter.
 * Use `create(Card_CardFixedFooterSchema)` to create a new message.
 */
export const Card_CardFixedFooterSchema: GenMessage<Card_CardFixedFooter> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 0, 3);

/**
 * The divider style of a card. Currently only used for dividers betweens card
 * sections.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.Card.DividerStyle
 */
export enum Card_DividerStyle {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: DIVIDER_STYLE_UNSPECIFIED = 0;
   */
  DIVIDER_STYLE_UNSPECIFIED = 0,

  /**
   * Default option. Render a solid divider between sections.
   *
   * @generated from enum value: SOLID_DIVIDER = 1;
   */
  SOLID_DIVIDER = 1,

  /**
   * If set, no divider is rendered between sections.
   *
   * @generated from enum value: NO_DIVIDER = 2;
   */
  NO_DIVIDER = 2,
}

/**
 * Describes the enum google.apps.card.v1.Card.DividerStyle.
 */
export const Card_DividerStyleSchema: GenEnum<Card_DividerStyle> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 0, 0);

/**
 * In Google Workspace Add-ons,
 * determines how a card is displayed.
 *
 * [Google Workspace
 * Add-ons](https://developers.google.com/workspace/add-ons):
 *
 * @generated from enum google.apps.card.v1.Card.DisplayStyle
 */
export enum Card_DisplayStyle {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: DISPLAY_STYLE_UNSPECIFIED = 0;
   */
  DISPLAY_STYLE_UNSPECIFIED = 0,

  /**
   * The header of the card appears at the bottom of the
   * sidebar, partially covering the current top card of the stack. Clicking
   * the header pops the card into the card stack. If the card has no header,
   * a generated header is used instead.
   *
   * @generated from enum value: PEEK = 1;
   */
  PEEK = 1,

  /**
   * Default value. The card is shown by replacing the view of the top card in
   * the card stack.
   *
   * @generated from enum value: REPLACE = 2;
   */
  REPLACE = 2,
}

/**
 * Describes the enum google.apps.card.v1.Card.DisplayStyle.
 */
export const Card_DisplayStyleSchema: GenEnum<Card_DisplayStyle> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 0, 1);

/**
 * Each card is made up of widgets.
 *
 * A widget is a composite object that can represent one of text, images,
 * buttons, and other object types.
 *
 * @generated from message google.apps.card.v1.Widget
 */
export type Widget = Message<"google.apps.card.v1.Widget"> & {
  /**
   * A widget can only have one of the following items. You can use multiple
   * widget fields to display more items.
   *
   * @generated from oneof google.apps.card.v1.Widget.data
   */
  data: {
    /**
     * Displays a text paragraph. Supports simple HTML formatted text. For more
     * information about formatting text, see
     * [Formatting text in Google Chat
     * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
     * and
     * [Formatting
     * text in Google Workspace
     * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
     *
     * For example, the following JSON creates a bolded text:
     * ```
     * "textParagraph": {
     *   "text": "  <b>bold text</b>"
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.TextParagraph text_paragraph = 1;
     */
    value: TextParagraph;
    case: "textParagraph";
  } | {
    /**
     * Displays an image.
     *
     * For example, the following JSON creates an image with alternative text:
     * ```
     * "image": {
     *   "imageUrl":
     *   "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
     *   "altText": "Chat app avatar"
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.Image image = 2;
     */
    value: Image;
    case: "image";
  } | {
    /**
     * Displays a decorated text item.
     *
     * For example, the following JSON creates a decorated text widget showing
     * email address:
     *
     * ```
     * "decoratedText": {
     *   "icon": {
     *     "knownIcon": "EMAIL"
     *   },
     *   "topLabel": "Email Address",
     *   "text": "sasha@example.com",
     *   "bottomLabel": "This is a new Email address!",
     *   "switchControl": {
     *     "name": "has_send_welcome_email_to_sasha",
     *     "selected": false,
     *     "controlType": "CHECKBOX"
     *   }
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.DecoratedText decorated_text = 3;
     */
    value: DecoratedText;
    case: "decoratedText";
  } | {
    /**
     * A list of buttons.
     *
     * For example, the following JSON creates two buttons. The first
     * is a blue text button and the second is an image button that opens a
     * link:
     * ```
     * "buttonList": {
     *   "buttons": [
     *     {
     *       "text": "Edit",
     *       "color": {
     *         "red": 0,
     *         "green": 0,
     *         "blue": 1,
     *         "alpha": 1
     *       },
     *       "disabled": true,
     *     },
     *     {
     *       "icon": {
     *         "knownIcon": "INVITE",
     *         "altText": "check calendar"
     *       },
     *       "onClick": {
     *         "openLink": {
     *           "url": "https://example.com/calendar"
     *         }
     *       }
     *     }
     *   ]
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.ButtonList button_list = 4;
     */
    value: ButtonList;
    case: "buttonList";
  } | {
    /**
     * Displays a text box that users can type into.
     *
     * For example, the following JSON creates a text input for an email
     * address:
     *
     * ```
     * "textInput": {
     *   "name": "mailing_address",
     *   "label": "Mailing Address"
     * }
     * ```
     *
     * As another example, the following JSON creates a text input for a
     * programming language with static suggestions:
     * ```
     * "textInput": {
     *   "name": "preferred_programing_language",
     *   "label": "Preferred Language",
     *   "initialSuggestions": {
     *     "items": [
     *       {
     *         "text": "C++"
     *       },
     *       {
     *         "text": "Java"
     *       },
     *       {
     *         "text": "JavaScript"
     *       },
     *       {
     *         "text": "Python"
     *       }
     *     ]
     *   }
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.TextInput text_input = 5;
     */
    value: TextInput;
    case: "textInput";
  } | {
    /**
     * Displays a selection control that lets users select items. Selection
     * controls can be checkboxes, radio buttons, switches, or dropdown menus.
     *
     * For example, the following JSON creates a dropdown menu that lets users
     * choose a size:
     *
     * ```
     * "selectionInput": {
     *   "name": "size",
     *   "label": "Size"
     *   "type": "DROPDOWN",
     *   "items": [
     *     {
     *       "text": "S",
     *       "value": "small",
     *       "selected": false
     *     },
     *     {
     *       "text": "M",
     *       "value": "medium",
     *       "selected": true
     *     },
     *     {
     *       "text": "L",
     *       "value": "large",
     *       "selected": false
     *     },
     *     {
     *       "text": "XL",
     *       "value": "extra_large",
     *       "selected": false
     *     }
     *   ]
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.SelectionInput selection_input = 6;
     */
    value: SelectionInput;
    case: "selectionInput";
  } | {
    /**
     * Displays a widget that lets users input a date, time, or date and time.
     *
     * For example, the following JSON creates a date time picker to schedule an
     * appointment:
     *
     *
     * ```
     * "dateTimePicker": {
     *   "name": "appointment_time",
     *   "label": "Book your appointment at:",
     *   "type": "DATE_AND_TIME",
     *   "valueMsEpoch": "796435200000"
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.DateTimePicker date_time_picker = 7;
     */
    value: DateTimePicker;
    case: "dateTimePicker";
  } | {
    /**
     * Displays a horizontal line divider between widgets.
     *
     * For example, the following JSON creates a divider:
     * ```
     * "divider": {
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.Divider divider = 9;
     */
    value: Divider;
    case: "divider";
  } | {
    /**
     * Displays a grid with a collection of items.
     *
     * A grid supports any number of columns and items. The number of rows is
     * determined by the upper bounds of the number items divided by the number
     * of columns. A grid with 10 items and 2 columns has 5 rows. A grid with 11
     * items and 2 columns has 6 rows.
     *
     * [Google Workspace Add-ons and
     * Chat apps](https://developers.google.com/workspace/extend):
     *
     * For example, the following JSON creates a 2 column grid with a single
     * item:
     *
     * ```
     * "grid": {
     *   "title": "A fine collection of items",
     *   "columnCount": 2,
     *   "borderStyle": {
     *     "type": "STROKE",
     *     "cornerRadius": 4
     *   },
     *   "items": [
     *     {
     *       "image": {
     *         "imageUri": "https://www.example.com/image.png",
     *         "cropStyle": {
     *           "type": "SQUARE"
     *         },
     *         "borderStyle": {
     *           "type": "STROKE"
     *         }
     *       },
     *       "title": "An item",
     *       "textAlignment": "CENTER"
     *     }
     *   ],
     *   "onClick": {
     *     "openLink": {
     *       "url": "https://www.example.com"
     *     }
     *   }
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.Grid grid = 10;
     */
    value: Grid;
    case: "grid";
  } | {
    /**
     * Displays up to 2 columns.
     *
     * To include more than 2 columns, or to use rows, use the `Grid` widget.
     *
     * For example, the following JSON creates 2 columns that each contain
     * text paragraphs:
     *
     * ```
     * "columns": {
     *   "columnItems": [
     *     {
     *       "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
     *       "horizontalAlignment": "CENTER",
     *       "verticalAlignment": "CENTER",
     *       "widgets": [
     *         {
     *           "textParagraph": {
     *             "text": "First column text paragraph"
     *           }
     *         }
     *       ]
     *     },
     *     {
     *       "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
     *       "horizontalAlignment": "CENTER",
     *       "verticalAlignment": "CENTER",
     *       "widgets": [
     *         {
     *           "textParagraph": {
     *             "text": "Second column text paragraph"
     *           }
     *         }
     *       ]
     *     }
     *   ]
     * }
     * ```
     *
     * @generated from field: google.apps.card.v1.Columns columns = 11;
     */
    value: Columns;
    case: "columns";
  } | { case: undefined; value?: undefined };

  /**
   * Specifies whether widgets align to the left, right, or center of a column.
   *
   * @generated from field: google.apps.card.v1.Widget.HorizontalAlignment horizontal_alignment = 8;
   */
  horizontalAlignment: Widget_HorizontalAlignment;
};

/**
 * Describes the message google.apps.card.v1.Widget.
 * Use `create(WidgetSchema)` to create a new message.
 */
export const WidgetSchema: GenMessage<Widget> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 1);

/**
 * The shape used to crop the image.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.Widget.ImageType
 */
export enum Widget_ImageType {
  /**
   * Default value. Applies a square mask to the image. For example, a 4x3
   * image becomes 3x3.
   *
   * @generated from enum value: SQUARE = 0;
   */
  SQUARE = 0,

  /**
   * Applies a circular mask to the image. For example, a 4x3 image becomes a
   * circle with a diameter of 3.
   *
   * @generated from enum value: CIRCLE = 1;
   */
  CIRCLE = 1,
}

/**
 * Describes the enum google.apps.card.v1.Widget.ImageType.
 */
export const Widget_ImageTypeSchema: GenEnum<Widget_ImageType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 1, 0);

/**
 * Specifies whether widgets align to the left, right, or center of a column.
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 *
 * @generated from enum google.apps.card.v1.Widget.HorizontalAlignment
 */
export enum Widget_HorizontalAlignment {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0;
   */
  HORIZONTAL_ALIGNMENT_UNSPECIFIED = 0,

  /**
   * Default value. Aligns widgets to the start position of the column. For
   * left-to-right layouts, aligns to the left. For right-to-left layouts,
   * aligns to the right.
   *
   * @generated from enum value: START = 1;
   */
  START = 1,

  /**
   * Aligns widgets to the center of the column.
   *
   * @generated from enum value: CENTER = 2;
   */
  CENTER = 2,

  /**
   * Aligns widgets to the end position of the column. For left-to-right
   * layouts, aligns widgets to the right. For right-to-left layouts, aligns
   * widgets to the left.
   *
   * @generated from enum value: END = 3;
   */
  END = 3,
}

/**
 * Describes the enum google.apps.card.v1.Widget.HorizontalAlignment.
 */
export const Widget_HorizontalAlignmentSchema: GenEnum<Widget_HorizontalAlignment> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 1, 1);

/**
 * A paragraph of text that supports formatting. For an example in
 * Google Chat apps, see [Add a paragraph of formatted
 * text](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_a_paragraph_of_formatted_text).
 * For more information
 * about formatting text, see
 * [Formatting text in Google Chat
 * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 * and
 * [Formatting
 * text in Google Workspace
 * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 *
 * [Google Workspace Add-ons and
 * Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.TextParagraph
 */
export type TextParagraph = Message<"google.apps.card.v1.TextParagraph"> & {
  /**
   * The text that's shown in the widget.
   *
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message google.apps.card.v1.TextParagraph.
 * Use `create(TextParagraphSchema)` to create a new message.
 */
export const TextParagraphSchema: GenMessage<TextParagraph> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 2);

/**
 * An image that is specified by a URL and can have an `onClick` action. For an
 * example, see [Add an
 * image](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_image).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Image
 */
export type Image = Message<"google.apps.card.v1.Image"> & {
  /**
   * The HTTPS URL that hosts the image.
   *
   * For example:
   *
   * ```
   * https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png
   * ```
   *
   * @generated from field: string image_url = 1;
   */
  imageUrl: string;

  /**
   * When a user clicks the image, the click triggers this action.
   *
   * @generated from field: google.apps.card.v1.OnClick on_click = 2;
   */
  onClick?: OnClick;

  /**
   * The alternative text of this image that's used for accessibility.
   *
   * @generated from field: string alt_text = 3;
   */
  altText: string;
};

/**
 * Describes the message google.apps.card.v1.Image.
 * Use `create(ImageSchema)` to create a new message.
 */
export const ImageSchema: GenMessage<Image> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 3);

/**
 * Displays a divider between widgets as a horizontal line. For an example in
 * Google Chat apps, see
 * [Add a horizontal divider between
 * widgets](https://developers.google.com/workspace/chat/format-structure-card-dialog#add_a_horizontal_divider_between_widgets).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * For example, the following JSON creates a divider:
 *
 * ```
 * "divider": {}
 * ```
 *
 * @generated from message google.apps.card.v1.Divider
 */
export type Divider = Message<"google.apps.card.v1.Divider"> & {
};

/**
 * Describes the message google.apps.card.v1.Divider.
 * Use `create(DividerSchema)` to create a new message.
 */
export const DividerSchema: GenMessage<Divider> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 4);

/**
 * A widget that displays text with optional decorations such as a label above
 * or below the text, an icon in front of the text, a selection widget, or a
 * button after the text. For an example in
 * Google Chat apps, see [Display text with decorative
 * text](https://developers.google.com/workspace/chat/add-text-image-card-dialog#display_text_with_decorative_elements).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.DecoratedText
 */
export type DecoratedText = Message<"google.apps.card.v1.DecoratedText"> & {
  /**
   * Deprecated in favor of `startIcon`.
   *
   * @generated from field: google.apps.card.v1.Icon icon = 1 [deprecated = true];
   * @deprecated
   */
  icon?: Icon;

  /**
   * The icon displayed in front of the text.
   *
   * @generated from field: google.apps.card.v1.Icon start_icon = 12;
   */
  startIcon?: Icon;

  /**
   * The text that appears above `text`. Always truncates.
   *
   * @generated from field: string top_label = 3;
   */
  topLabel: string;

  /**
   * Required. The primary text.
   *
   * Supports simple formatting. For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   *
   * @generated from field: string text = 4;
   */
  text: string;

  /**
   * The wrap text setting. If `true`, the text wraps and displays on
   * multiple lines. Otherwise, the text is truncated.
   *
   * Only applies to `text`, not `topLabel` and `bottomLabel`.
   *
   * @generated from field: bool wrap_text = 5;
   */
  wrapText: boolean;

  /**
   * The text that appears below `text`. Always wraps.
   *
   * @generated from field: string bottom_label = 6;
   */
  bottomLabel: string;

  /**
   * This action is triggered when users click `topLabel` or `bottomLabel`.
   *
   * @generated from field: google.apps.card.v1.OnClick on_click = 7;
   */
  onClick?: OnClick;

  /**
   * A button, switch, checkbox, or image that appears to the right-hand side
   * of text in the `decoratedText` widget.
   *
   * @generated from oneof google.apps.card.v1.DecoratedText.control
   */
  control: {
    /**
     * A button that a user can click to trigger an action.
     *
     * @generated from field: google.apps.card.v1.Button button = 8;
     */
    value: Button;
    case: "button";
  } | {
    /**
     * A switch widget that a user can click to change its state and trigger an
     * action.
     *
     * @generated from field: google.apps.card.v1.DecoratedText.SwitchControl switch_control = 9;
     */
    value: DecoratedText_SwitchControl;
    case: "switchControl";
  } | {
    /**
     * An icon displayed after the text.
     *
     * Supports
     * [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
     * and
     * [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
     * icons.
     *
     * @generated from field: google.apps.card.v1.Icon end_icon = 11;
     */
    value: Icon;
    case: "endIcon";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.DecoratedText.
 * Use `create(DecoratedTextSchema)` to create a new message.
 */
export const DecoratedTextSchema: GenMessage<DecoratedText> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 5);

/**
 * Either a toggle-style switch or a checkbox inside a `decoratedText` widget.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * Only supported in the `decoratedText` widget.
 *
 * @generated from message google.apps.card.v1.DecoratedText.SwitchControl
 */
export type DecoratedText_SwitchControl = Message<"google.apps.card.v1.DecoratedText.SwitchControl"> & {
  /**
   * The name by which the switch widget is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The value entered by a user, returned as part of a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * When `true`, the switch is selected.
   *
   * @generated from field: bool selected = 3;
   */
  selected: boolean;

  /**
   * The action to perform when the switch state is changed, such as what
   *  function to run.
   *
   * @generated from field: google.apps.card.v1.Action on_change_action = 4;
   */
  onChangeAction?: Action;

  /**
   * How the switch appears in the user interface.
   *
   * [Google Workspace Add-ons
   * and Chat apps](https://developers.google.com/workspace/extend):
   *
   * @generated from field: google.apps.card.v1.DecoratedText.SwitchControl.ControlType control_type = 5;
   */
  controlType: DecoratedText_SwitchControl_ControlType;
};

/**
 * Describes the message google.apps.card.v1.DecoratedText.SwitchControl.
 * Use `create(DecoratedText_SwitchControlSchema)` to create a new message.
 */
export const DecoratedText_SwitchControlSchema: GenMessage<DecoratedText_SwitchControl> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 5, 0);

/**
 * How the switch appears in the user interface.
 *
 * [Google Workspace Add-ons
 * and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.DecoratedText.SwitchControl.ControlType
 */
export enum DecoratedText_SwitchControl_ControlType {
  /**
   * A toggle-style switch.
   *
   * @generated from enum value: SWITCH = 0;
   */
  SWITCH = 0,

  /**
   * Deprecated in favor of `CHECK_BOX`.
   *
   * @generated from enum value: CHECKBOX = 1;
   */
  CHECKBOX = 1,

  /**
   * A checkbox.
   *
   * @generated from enum value: CHECK_BOX = 2;
   */
  CHECK_BOX = 2,
}

/**
 * Describes the enum google.apps.card.v1.DecoratedText.SwitchControl.ControlType.
 */
export const DecoratedText_SwitchControl_ControlTypeSchema: GenEnum<DecoratedText_SwitchControl_ControlType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 5, 0, 0);

/**
 * A field in which users can enter text. Supports suggestions and on-change
 * actions. For an example in Google Chat apps, see [Add a field in which a user
 * can enter
 * text](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_field_in_which_a_user_can_enter_text).
 *
 * Chat apps receive and can process the value of entered text during form input
 * events. For details about working with form inputs, see [Receive form
 * data](https://developers.google.com/workspace/chat/read-form-data).
 *
 * When you need to collect undefined or abstract data from users,
 * use a text input. To collect defined or enumerated data from users, use the
 * [SelectionInput][google.apps.card.v1.SelectionInput] widget.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.TextInput
 */
export type TextInput = Message<"google.apps.card.v1.TextInput"> & {
  /**
   * The name by which the text input is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The text that appears above the text input field in the user interface.
   *
   * Specify text that helps the user enter the information your app needs.
   * For example, if you are asking someone's name, but specifically need their
   * surname, write `surname` instead of `name`.
   *
   * Required if `hintText` is unspecified. Otherwise, optional.
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * Text that appears below the text input field meant to assist users by
   * prompting them to enter a certain value. This text is always visible.
   *
   * Required if `label` is unspecified. Otherwise, optional.
   *
   * @generated from field: string hint_text = 3;
   */
  hintText: string;

  /**
   * The value entered by a user, returned as part of a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string value = 4;
   */
  value: string;

  /**
   * How a text input field appears in the user interface.
   * For example, whether the field is single or multi-line.
   *
   * @generated from field: google.apps.card.v1.TextInput.Type type = 5;
   */
  type: TextInput_Type;

  /**
   * What to do when a change occurs in the text input field. For example, a
   * user adding to the field or deleting text.
   *
   * Examples of actions to take include running a custom function or opening
   * a [dialog](https://developers.google.com/workspace/chat/dialogs)
   * in Google Chat.
   *
   * @generated from field: google.apps.card.v1.Action on_change_action = 6;
   */
  onChangeAction?: Action;

  /**
   * Suggested values that users can enter. These values appear when users click
   * inside the text input field. As users type, the suggested values
   * dynamically filter to match what the users have typed.
   *
   * For example, a text input field for programming language might suggest
   * Java, JavaScript, Python, and C++. When users start typing `Jav`, the list
   * of suggestions filters to show just `Java` and `JavaScript`.
   *
   * Suggested values help guide users to enter values that your app can make
   * sense of. When referring to JavaScript, some users might enter `javascript`
   * and others `java script`. Suggesting `JavaScript` can standardize how users
   * interact with your app.
   *
   * When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set
   * to `MULTIPLE_LINE`.
   *
   * [Google Workspace
   * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
   *
   * @generated from field: google.apps.card.v1.Suggestions initial_suggestions = 7;
   */
  initialSuggestions?: Suggestions;

  /**
   * Optional. Specify what action to take when the text input field provides
   * suggestions to users who interact with it.
   *
   * If unspecified, the suggestions are set by `initialSuggestions` and
   * are processed by the client.
   *
   * If specified, the app takes the action specified here, such as running
   * a custom function.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: google.apps.card.v1.Action auto_complete_action = 8;
   */
  autoCompleteAction?: Action;

  /**
   * Text that appears in the text input field when the field is empty.
   * Use this text to prompt users to enter a value. For example, `Enter a
   * number from 0 to 100`.
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   *
   * @generated from field: string placeholder_text = 12;
   */
  placeholderText: string;
};

/**
 * Describes the message google.apps.card.v1.TextInput.
 * Use `create(TextInputSchema)` to create a new message.
 */
export const TextInputSchema: GenMessage<TextInput> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 6);

/**
 * How a text input field appears in the user interface. For example,
 * whether it's a single line input field, or a multi-line input. If
 * `initialSuggestions` is specified, `type` is always `SINGLE_LINE`,
 * even if it's set to `MULTIPLE_LINE`.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.TextInput.Type
 */
export enum TextInput_Type {
  /**
   * The text input field has a fixed height of one line.
   *
   * @generated from enum value: SINGLE_LINE = 0;
   */
  SINGLE_LINE = 0,

  /**
   * The text input field has a fixed height of multiple lines.
   *
   * @generated from enum value: MULTIPLE_LINE = 1;
   */
  MULTIPLE_LINE = 1,
}

/**
 * Describes the enum google.apps.card.v1.TextInput.Type.
 */
export const TextInput_TypeSchema: GenEnum<TextInput_Type> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 6, 0);

/**
 * Suggested values that users can enter. These values appear when users click
 * inside the text input field. As users type, the suggested values
 * dynamically filter to match what the users have typed.
 *
 * For example, a text input field for programming language might suggest
 * Java, JavaScript, Python, and C++. When users start typing `Jav`, the list
 * of suggestions filters to show `Java` and `JavaScript`.
 *
 * Suggested values help guide users to enter values that your app can make
 * sense of. When referring to JavaScript, some users might enter `javascript`
 * and others `java script`. Suggesting `JavaScript` can standardize how users
 * interact with your app.
 *
 * When specified, `TextInput.type` is always `SINGLE_LINE`, even if it's set
 * to `MULTIPLE_LINE`.
 *
 * [Google Workspace
 * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Suggestions
 */
export type Suggestions = Message<"google.apps.card.v1.Suggestions"> & {
  /**
   * A list of suggestions used for autocomplete recommendations in text input
   * fields.
   *
   * @generated from field: repeated google.apps.card.v1.Suggestions.SuggestionItem items = 1;
   */
  items: Suggestions_SuggestionItem[];
};

/**
 * Describes the message google.apps.card.v1.Suggestions.
 * Use `create(SuggestionsSchema)` to create a new message.
 */
export const SuggestionsSchema: GenMessage<Suggestions> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 7);

/**
 * One suggested value that users can enter in a text input field.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Suggestions.SuggestionItem
 */
export type Suggestions_SuggestionItem = Message<"google.apps.card.v1.Suggestions.SuggestionItem"> & {
  /**
   * @generated from oneof google.apps.card.v1.Suggestions.SuggestionItem.content
   */
  content: {
    /**
     * The value of a suggested input to a text input field. This is
     * equivalent to what users enter themselves.
     *
     * @generated from field: string text = 1;
     */
    value: string;
    case: "text";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.Suggestions.SuggestionItem.
 * Use `create(Suggestions_SuggestionItemSchema)` to create a new message.
 */
export const Suggestions_SuggestionItemSchema: GenMessage<Suggestions_SuggestionItem> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 7, 0);

/**
 * A list of buttons layed out horizontally. For an example in
 * Google Chat apps, see
 * [Add a
 * button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.ButtonList
 */
export type ButtonList = Message<"google.apps.card.v1.ButtonList"> & {
  /**
   * An array of buttons.
   *
   * @generated from field: repeated google.apps.card.v1.Button buttons = 1;
   */
  buttons: Button[];
};

/**
 * Describes the message google.apps.card.v1.ButtonList.
 * Use `create(ButtonListSchema)` to create a new message.
 */
export const ButtonListSchema: GenMessage<ButtonList> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 8);

/**
 * A widget that creates one or more UI items that users can select.
 * For example, a dropdown menu or checkboxes. You can use this widget to
 * collect data that can be predicted or enumerated. For an example in Google
 * Chat apps, see [Add selectable UI
 * elements](/workspace/chat/design-interactive-card-dialog#add_selectable_ui_elements).
 *
 * Chat apps can process the value of items that users select or input. For
 * details about working with form inputs, see [Receive form
 * data](https://developers.google.com/workspace/chat/read-form-data).
 *
 * To collect undefined or abstract data from users, use
 * the [TextInput][google.apps.card.v1.TextInput] widget.
 *
 * [Google Workspace Add-ons
 * and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.SelectionInput
 */
export type SelectionInput = Message<"google.apps.card.v1.SelectionInput"> & {
  /**
   * The name that identifies the selection input in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The text that appears above the selection input field in the user
   * interface.
   *
   * Specify text that helps the user enter the information your app needs.
   * For example, if users are selecting the urgency of a work ticket from a
   * drop-down menu, the label might be "Urgency" or "Select urgency".
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * The type of items that are displayed to users in a `SelectionInput` widget.
   * Selection types support different types of interactions. For example, users
   * can select one or more checkboxes, but they can only select one value from
   * a dropdown menu.
   *
   * @generated from field: google.apps.card.v1.SelectionInput.SelectionType type = 3;
   */
  type: SelectionInput_SelectionType;

  /**
   * An array of selectable items. For example, an array of radio buttons or
   * checkboxes. Supports up to 100 items.
   *
   * @generated from field: repeated google.apps.card.v1.SelectionInput.SelectionItem items = 4;
   */
  items: SelectionInput_SelectionItem[];

  /**
   * If specified, the form is submitted when the selection changes. If not
   * specified, you must specify a separate button that submits the form.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: google.apps.card.v1.Action on_change_action = 5;
   */
  onChangeAction?: Action;

  /**
   * For multiselect menus, the maximum number of items that a user can select.
   * Minimum value is 1 item. If unspecified, defaults to 3 items.
   *
   * @generated from field: int32 multi_select_max_selected_items = 6;
   */
  multiSelectMaxSelectedItems: number;

  /**
   * For multiselect menus, the number of text characters that a user inputs
   * before the app queries autocomplete and displays suggested items
   * in the menu.
   *
   * If unspecified, defaults to 0 characters for static data sources and 3
   * characters for external data sources.
   *
   * @generated from field: int32 multi_select_min_query_length = 7;
   */
  multiSelectMinQueryLength: number;

  /**
   * For a multiselect menu, the data source that populates
   * selection items.
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   *
   * @generated from oneof google.apps.card.v1.SelectionInput.multi_select_data_source
   */
  multiSelectDataSource: {
    /**
     * An external data source, such as a relational data base.
     *
     * @generated from field: google.apps.card.v1.Action external_data_source = 8;
     */
    value: Action;
    case: "externalDataSource";
  } | {
    /**
     * A data source from Google Workspace.
     *
     * @generated from field: google.apps.card.v1.SelectionInput.PlatformDataSource platform_data_source = 9;
     */
    value: SelectionInput_PlatformDataSource;
    case: "platformDataSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.SelectionInput.
 * Use `create(SelectionInputSchema)` to create a new message.
 */
export const SelectionInputSchema: GenMessage<SelectionInput> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 9);

/**
 * An item that users can select in a selection input, such as a checkbox
 * or switch.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.SelectionInput.SelectionItem
 */
export type SelectionInput_SelectionItem = Message<"google.apps.card.v1.SelectionInput.SelectionItem"> & {
  /**
   * The text that identifies or describes the item to users.
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * The value associated with this item. The client should use this as a form
   * input value.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string value = 2;
   */
  value: string;

  /**
   * Whether the item is selected by default. If the selection input only
   * accepts one value (such as for radio buttons or a dropdown menu), only
   * set this field for one item.
   *
   * @generated from field: bool selected = 3;
   */
  selected: boolean;

  /**
   * For multiselect menus, the URL for the icon displayed next to
   * the item's `text` field. Supports PNG and JPEG files. Must be an `HTTPS`
   * URL. For example,
   * `https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png`.
   *
   * @generated from field: string start_icon_uri = 4;
   */
  startIconUri: string;

  /**
   * For multiselect menus, a text description or label that's
   * displayed below the item's `text` field.
   *
   * @generated from field: string bottom_text = 5;
   */
  bottomText: string;
};

/**
 * Describes the message google.apps.card.v1.SelectionInput.SelectionItem.
 * Use `create(SelectionInput_SelectionItemSchema)` to create a new message.
 */
export const SelectionInput_SelectionItemSchema: GenMessage<SelectionInput_SelectionItem> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 9, 0);

/**
 * For a
 * [`SelectionInput`][google.apps.card.v1.SelectionInput] widget that uses a
 * multiselect menu, a data source from Google Workspace. Used to populate
 * items in a multiselect menu.
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 *
 * @generated from message google.apps.card.v1.SelectionInput.PlatformDataSource
 */
export type SelectionInput_PlatformDataSource = Message<"google.apps.card.v1.SelectionInput.PlatformDataSource"> & {
  /**
   * The data source.
   *
   * @generated from oneof google.apps.card.v1.SelectionInput.PlatformDataSource.data_source
   */
  dataSource: {
    /**
     * A data source shared by all Google Workspace applications, such as
     * users in a Google Workspace organization.
     *
     * @generated from field: google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource common_data_source = 1;
     */
    value: SelectionInput_PlatformDataSource_CommonDataSource;
    case: "commonDataSource";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.SelectionInput.PlatformDataSource.
 * Use `create(SelectionInput_PlatformDataSourceSchema)` to create a new message.
 */
export const SelectionInput_PlatformDataSourceSchema: GenMessage<SelectionInput_PlatformDataSource> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 9, 1);

/**
 * A data source shared by all [Google Workspace
 * applications]
 * (https://developers.google.com/workspace/chat/api/reference/rest/v1/HostApp).
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 *
 * @generated from enum google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource
 */
export enum SelectionInput_PlatformDataSource_CommonDataSource {
  /**
   * Default value. Don't use.
   *
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * Google Workspace users. The user can only view and select users from
   * their Google Workspace organization.
   *
   * @generated from enum value: USER = 1;
   */
  USER = 1,
}

/**
 * Describes the enum google.apps.card.v1.SelectionInput.PlatformDataSource.CommonDataSource.
 */
export const SelectionInput_PlatformDataSource_CommonDataSourceSchema: GenEnum<SelectionInput_PlatformDataSource_CommonDataSource> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 9, 1, 0);

/**
 * The format for the items that users can select. Different options support
 * different types of interactions. For example, users can select multiple
 * checkboxes, but can only select one item from a dropdown menu.
 *
 * Each selection input supports one type of selection. Mixing checkboxes
 * and switches, for example, isn't supported.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.SelectionInput.SelectionType
 */
export enum SelectionInput_SelectionType {
  /**
   * A set of checkboxes. Users can select one or more checkboxes.
   *
   * @generated from enum value: CHECK_BOX = 0;
   */
  CHECK_BOX = 0,

  /**
   * A set of radio buttons. Users can select one radio button.
   *
   * @generated from enum value: RADIO_BUTTON = 1;
   */
  RADIO_BUTTON = 1,

  /**
   * A set of switches. Users can turn on one or more switches.
   *
   * @generated from enum value: SWITCH = 2;
   */
  SWITCH = 2,

  /**
   * A dropdown menu. Users can select one item from the menu.
   *
   * @generated from enum value: DROPDOWN = 3;
   */
  DROPDOWN = 3,

  /**
   * A multiselect menu for static or dynamic data. From the menu bar,
   * users select one or more items. Users can also input values to populate
   * dynamic data. For example, users can start typing the name of a Google
   * Chat space and the widget autosuggests the space.
   *
   * To populate items for a multiselect menu, you can use one of the
   * following types of data sources:
   *
   *  * Static data: Items are specified as `SelectionItem` objects in the
   *    widget. Up to 100 items.
   *  * Google Workspace data: Items are populated using data from Google
   *    Workspace, such as Google Workspace users or Google Chat spaces.
   *  * External data: Items are populated from an external data
   *    source outside of Google Workspace.
   *
   * For examples of how to implement multiselect menus, see
   * [Add a multiselect
   * menu](https://developers.google.com/workspace/chat/design-interactive-card-dialog#multiselect-menu).
   *
   * [Google Workspace Add-ons and Chat
   * apps](https://developers.google.com/workspace/extend):
   * Multiselect for Google Workspace Add-ons are in
   * Developer Preview.
   *
   * @generated from enum value: MULTI_SELECT = 4;
   */
  MULTI_SELECT = 4,
}

/**
 * Describes the enum google.apps.card.v1.SelectionInput.SelectionType.
 */
export const SelectionInput_SelectionTypeSchema: GenEnum<SelectionInput_SelectionType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 9, 0);

/**
 * Lets users input a date, a time, or both a date and a time. For an example in
 * Google Chat apps, see [Let a user pick a date and
 * time](https://developers.google.com/workspace/chat/design-interactive-card-dialog#let_a_user_pick_a_date_and_time).
 *
 * Users can input text or use the picker to select dates and times. If users
 * input an invalid date or time, the picker shows an error that prompts users
 * to input the information correctly.
 *
 * [Google Workspace
 * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.DateTimePicker
 */
export type DateTimePicker = Message<"google.apps.card.v1.DateTimePicker"> & {
  /**
   * The name by which the `DateTimePicker` is identified in a form input event.
   *
   * For details about working with form inputs, see [Receive form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The text that prompts users to input a date, a time, or a date and time.
   * For example, if users are scheduling an appointment, use a label such as
   * `Appointment date` or `Appointment date and time`.
   *
   * @generated from field: string label = 2;
   */
  label: string;

  /**
   * Whether the widget supports inputting a date, a time, or the date and time.
   *
   * @generated from field: google.apps.card.v1.DateTimePicker.DateTimePickerType type = 3;
   */
  type: DateTimePicker_DateTimePickerType;

  /**
   * The default value displayed in the widget, in milliseconds since [Unix
   * epoch time](https://en.wikipedia.org/wiki/Unix_time).
   *
   * Specify the value based on the type of picker (`DateTimePickerType`):
   *
   * * `DATE_AND_TIME`: a calendar date and time in UTC. For example, to
   *   represent January 1, 2023 at 12:00 PM UTC, use `1672574400000`.
   * * `DATE_ONLY`: a calendar date at 00:00:00 UTC. For example, to represent
   *   January 1, 2023, use `1672531200000`.
   * * `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
   *   `43200000` (or `12 * 60 * 60 * 1000`).
   *
   * @generated from field: int64 value_ms_epoch = 4;
   */
  valueMsEpoch: bigint;

  /**
   * The number representing the time zone offset from UTC, in minutes.
   * If set, the `value_ms_epoch` is displayed in the specified time zone.
   * If unset, the value defaults to the user's time zone setting.
   *
   * @generated from field: int32 timezone_offset_date = 5;
   */
  timezoneOffsetDate: number;

  /**
   * Triggered when the user clicks **Save** or **Clear** from the
   * `DateTimePicker` interface.
   *
   * @generated from field: google.apps.card.v1.Action on_change_action = 6;
   */
  onChangeAction?: Action;
};

/**
 * Describes the message google.apps.card.v1.DateTimePicker.
 * Use `create(DateTimePickerSchema)` to create a new message.
 */
export const DateTimePickerSchema: GenMessage<DateTimePicker> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 10);

/**
 * The format for the date and time in the `DateTimePicker` widget.
 * Determines whether users can input a date, a time, or both a date and time.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.DateTimePicker.DateTimePickerType
 */
export enum DateTimePicker_DateTimePickerType {
  /**
   * Users input a date and time.
   *
   * @generated from enum value: DATE_AND_TIME = 0;
   */
  DATE_AND_TIME = 0,

  /**
   * Users input a date.
   *
   * @generated from enum value: DATE_ONLY = 1;
   */
  DATE_ONLY = 1,

  /**
   * Users input a time.
   *
   * @generated from enum value: TIME_ONLY = 2;
   */
  TIME_ONLY = 2,
}

/**
 * Describes the enum google.apps.card.v1.DateTimePicker.DateTimePickerType.
 */
export const DateTimePicker_DateTimePickerTypeSchema: GenEnum<DateTimePicker_DateTimePickerType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 10, 0);

/**
 * A text, icon, or text and icon button that users can click. For an example in
 * Google Chat apps, see
 * [Add a
 * button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
 *
 * To make an image a clickable button, specify an
 * [`Image`][google.apps.card.v1.Image] (not an
 * [`ImageComponent`][google.apps.card.v1.ImageComponent]) and set an
 * `onClick` action.
 *
 * [Google Workspace
 * Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Button
 */
export type Button = Message<"google.apps.card.v1.Button"> & {
  /**
   * The text displayed inside the button.
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * The icon image. If both `icon` and `text` are set, then the icon appears
   * before the text.
   *
   * @generated from field: google.apps.card.v1.Icon icon = 2;
   */
  icon?: Icon;

  /**
   * If set, the button is filled with a solid background color and the font
   * color changes to maintain contrast with the background color. For example,
   * setting a blue background likely results in white text.
   *
   * If unset, the image background is white and the font color is blue.
   *
   * For red, green, and blue, the value of each field is a `float` number that
   * you can express in either of two ways: as a number between 0 and 255
   * divided by 255 (153/255), or as a value between 0 and 1 (0.6). 0 represents
   * the absence of a color and 1 or 255/255 represent the full presence of that
   * color on the RGB scale.
   *
   * Optionally set `alpha`, which sets a level of transparency using this
   * equation:
   *
   * ```
   * pixel color = alpha * (this color) + (1.0 - alpha) * (background color)
   * ```
   *
   * For `alpha`, a value of `1` corresponds with a solid color, and a value of
   * `0` corresponds with a completely transparent color.
   *
   * For example, the following color represents a half transparent red:
   *
   * ```
   * "color": {
   *    "red": 1,
   *    "green": 0,
   *    "blue": 0,
   *    "alpha": 0.5
   * }
   * ```
   *
   * @generated from field: google.type.Color color = 3;
   */
  color?: Color;

  /**
   * Required. The action to perform when a user clicks the button, such as
   * opening a hyperlink or running a custom function.
   *
   * @generated from field: google.apps.card.v1.OnClick on_click = 4;
   */
  onClick?: OnClick;

  /**
   * If `true`, the button is displayed in an inactive state and doesn't respond
   * to user actions.
   *
   * @generated from field: bool disabled = 5;
   */
  disabled: boolean;

  /**
   * The alternative text that's used for accessibility.
   *
   * Set descriptive text that lets users know what the button does. For
   * example, if a button opens a hyperlink, you might write: "Opens a new
   * browser tab and navigates to the Google Chat developer documentation at
   * https://developers.google.com/workspace/chat".
   *
   * @generated from field: string alt_text = 6;
   */
  altText: string;
};

/**
 * Describes the message google.apps.card.v1.Button.
 * Use `create(ButtonSchema)` to create a new message.
 */
export const ButtonSchema: GenMessage<Button> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 11);

/**
 * An icon displayed in a widget on a card. For an example in Google Chat apps,
 * see [Add an
 * icon](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_icon).
 *
 * Supports
 * [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
 * and
 * [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
 * icons.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Icon
 */
export type Icon = Message<"google.apps.card.v1.Icon"> & {
  /**
   * The icon displayed in the widget on the card.
   *
   * @generated from oneof google.apps.card.v1.Icon.icons
   */
  icons: {
    /**
     * Display one of the built-in icons provided by Google Workspace.
     *
     * For example, to display an airplane icon, specify `AIRPLANE`.
     * For a bus, specify `BUS`.
     *
     * For a full list of supported icons, see [built-in
     * icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
     *
     * @generated from field: string known_icon = 1;
     */
    value: string;
    case: "knownIcon";
  } | {
    /**
     * Display a custom icon hosted at an HTTPS URL.
     *
     * For example:
     *
     * ```
     * "iconUrl":
     * "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
     * ```
     *
     * Supported file types include `.png` and `.jpg`.
     *
     * @generated from field: string icon_url = 2;
     */
    value: string;
    case: "iconUrl";
  } | {
    /**
     * Display one of the [Google Material
     * Icons](https://fonts.google.com/icons).
     *
     * For example, to display a [checkbox
     * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
     * use
     * ```
     * "material_icon": {
     *   "name": "check_box"
     * }
     * ```
     *
     * [Google Chat apps](https://developers.google.com/workspace/chat):
     *
     * @generated from field: google.apps.card.v1.MaterialIcon material_icon = 5;
     */
    value: MaterialIcon;
    case: "materialIcon";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. A description of the icon used for accessibility.
   * If unspecified, the default value `Button` is provided. As a best practice,
   * you should set a helpful description for what the icon displays, and if
   * applicable, what it does. For example, `A user's account portrait`, or
   * `Opens a new browser tab and navigates to the Google Chat developer
   * documentation at https://developers.google.com/workspace/chat`.
   *
   * If the icon is set in a [`Button`][google.apps.card.v1.Button], the
   * `altText` appears as helper text when the user hovers over the button.
   * However, if the button also sets `text`, the icon's `altText` is ignored.
   *
   * @generated from field: string alt_text = 3;
   */
  altText: string;

  /**
   * The crop style applied to the image. In some cases, applying a
   * `CIRCLE` crop causes the image to be drawn larger than a built-in
   * icon.
   *
   * @generated from field: google.apps.card.v1.Widget.ImageType image_type = 4;
   */
  imageType: Widget_ImageType;
};

/**
 * Describes the message google.apps.card.v1.Icon.
 * Use `create(IconSchema)` to create a new message.
 */
export const IconSchema: GenMessage<Icon> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 12);

/**
 * A [Google Material Icon](https://fonts.google.com/icons), which includes over
 * 2500+ options.
 *
 * For example, to display a [checkbox
 * icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048)
 * with customized weight and grade, write the following:
 *
 * ```
 * {
 *   "name": "check_box",
 *   "fill": true,
 *   "weight": 300,
 *   "grade": -25
 * }
 * ```
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 *
 * @generated from message google.apps.card.v1.MaterialIcon
 */
export type MaterialIcon = Message<"google.apps.card.v1.MaterialIcon"> & {
  /**
   * The icon name defined in the [Google Material
   * Icon](https://fonts.google.com/icons), for example, `check_box`. Any
   * invalid names are abandoned and replaced with empty string and
   * results in the icon failing to render.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Whether the icon renders as filled. Default value is false.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   *
   * @generated from field: bool fill = 2;
   */
  fill: boolean;

  /**
   * The stroke weight of the icon. Choose from {100, 200, 300, 400,
   * 500, 600, 700}. If absent, default value is 400. If any other value is
   * specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   *
   * @generated from field: int32 weight = 3;
   */
  weight: number;

  /**
   * Weight and grade affect a symbol’s thickness. Adjustments to grade are more
   * granular than adjustments to weight and have a small impact on the size of
   * the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If
   * any other value is specified, the default value is used.
   *
   * To preview different icon settings, go to
   * [Google Font Icons](https://fonts.google.com/icons) and adjust the
   * settings under **Customize**.
   *
   * @generated from field: int32 grade = 4;
   */
  grade: number;
};

/**
 * Describes the message google.apps.card.v1.MaterialIcon.
 * Use `create(MaterialIconSchema)` to create a new message.
 */
export const MaterialIconSchema: GenMessage<MaterialIcon> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 13);

/**
 * Represents the crop style applied to an image.
 *
 * [Google Workspace Add-ons and
 * Chat apps](https://developers.google.com/workspace/extend):
 *
 * For example, here's how to apply a 16:9 aspect ratio:
 *
 * ```
 * cropStyle {
 *  "type": "RECTANGLE_CUSTOM",
 *  "aspectRatio": 16/9
 * }
 * ```
 *
 * @generated from message google.apps.card.v1.ImageCropStyle
 */
export type ImageCropStyle = Message<"google.apps.card.v1.ImageCropStyle"> & {
  /**
   * The crop type.
   *
   * @generated from field: google.apps.card.v1.ImageCropStyle.ImageCropType type = 1;
   */
  type: ImageCropStyle_ImageCropType;

  /**
   * The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.
   *
   * For example, here's how to apply a 16:9 aspect ratio:
   *
   * ```
   * cropStyle {
   *  "type": "RECTANGLE_CUSTOM",
   *  "aspectRatio": 16/9
   * }
   * ```
   *
   * @generated from field: double aspect_ratio = 2;
   */
  aspectRatio: number;
};

/**
 * Describes the message google.apps.card.v1.ImageCropStyle.
 * Use `create(ImageCropStyleSchema)` to create a new message.
 */
export const ImageCropStyleSchema: GenMessage<ImageCropStyle> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 14);

/**
 * Represents the crop style applied to an image.
 *
 * [Google Workspace Add-ons
 * and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.ImageCropStyle.ImageCropType
 */
export enum ImageCropStyle_ImageCropType {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: IMAGE_CROP_TYPE_UNSPECIFIED = 0;
   */
  IMAGE_CROP_TYPE_UNSPECIFIED = 0,

  /**
   * Default value. Applies a square crop.
   *
   * @generated from enum value: SQUARE = 1;
   */
  SQUARE = 1,

  /**
   * Applies a circular crop.
   *
   * @generated from enum value: CIRCLE = 2;
   */
  CIRCLE = 2,

  /**
   * Applies a rectangular crop with a custom aspect ratio. Set the custom
   * aspect ratio with `aspectRatio`.
   *
   * @generated from enum value: RECTANGLE_CUSTOM = 3;
   */
  RECTANGLE_CUSTOM = 3,

  /**
   * Applies a rectangular crop with a 4:3 aspect ratio.
   *
   * @generated from enum value: RECTANGLE_4_3 = 4;
   */
  RECTANGLE_4_3 = 4,
}

/**
 * Describes the enum google.apps.card.v1.ImageCropStyle.ImageCropType.
 */
export const ImageCropStyle_ImageCropTypeSchema: GenEnum<ImageCropStyle_ImageCropType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 14, 0);

/**
 * The style options for the border of a card or widget, including the border
 * type and color.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.BorderStyle
 */
export type BorderStyle = Message<"google.apps.card.v1.BorderStyle"> & {
  /**
   * The border type.
   *
   * @generated from field: google.apps.card.v1.BorderStyle.BorderType type = 1;
   */
  type: BorderStyle_BorderType;

  /**
   * The colors to use when the type is `BORDER_TYPE_STROKE`.
   *
   * @generated from field: google.type.Color stroke_color = 2;
   */
  strokeColor?: Color;

  /**
   * The corner radius for the border.
   *
   * @generated from field: int32 corner_radius = 3;
   */
  cornerRadius: number;
};

/**
 * Describes the message google.apps.card.v1.BorderStyle.
 * Use `create(BorderStyleSchema)` to create a new message.
 */
export const BorderStyleSchema: GenMessage<BorderStyle> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 15);

/**
 * Represents the border types applied to widgets.
 *
 * [Google Workspace Add-ons
 * and Chat apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.BorderStyle.BorderType
 */
export enum BorderStyle_BorderType {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: BORDER_TYPE_UNSPECIFIED = 0;
   */
  BORDER_TYPE_UNSPECIFIED = 0,

  /**
   * Default value. No border.
   *
   * @generated from enum value: NO_BORDER = 1;
   */
  NO_BORDER = 1,

  /**
   * Outline.
   *
   * @generated from enum value: STROKE = 2;
   */
  STROKE = 2,
}

/**
 * Describes the enum google.apps.card.v1.BorderStyle.BorderType.
 */
export const BorderStyle_BorderTypeSchema: GenEnum<BorderStyle_BorderType> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 15, 0);

/**
 * Represents an image.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.ImageComponent
 */
export type ImageComponent = Message<"google.apps.card.v1.ImageComponent"> & {
  /**
   * The image URL.
   *
   * @generated from field: string image_uri = 1;
   */
  imageUri: string;

  /**
   * The accessibility label for the image.
   *
   * @generated from field: string alt_text = 2;
   */
  altText: string;

  /**
   * The crop style to apply to the image.
   *
   * @generated from field: google.apps.card.v1.ImageCropStyle crop_style = 3;
   */
  cropStyle?: ImageCropStyle;

  /**
   * The border style to apply to the image.
   *
   * @generated from field: google.apps.card.v1.BorderStyle border_style = 4;
   */
  borderStyle?: BorderStyle;
};

/**
 * Describes the message google.apps.card.v1.ImageComponent.
 * Use `create(ImageComponentSchema)` to create a new message.
 */
export const ImageComponentSchema: GenMessage<ImageComponent> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 16);

/**
 * Displays a grid with a collection of items. Items can only include text or
 * images. For responsive columns, or to include more than text or images, use
 * [`Columns`][google.apps.card.v1.Columns]. For an example in Google Chat apps,
 * see [Display a Grid with a collection of
 * items](https://developers.google.com/workspace/chat/format-structure-card-dialog#display_a_grid_with_a_collection_of_items).
 *
 * A grid supports any number of columns and items. The number of rows is
 * determined by items divided by columns. A grid with
 * 10 items and 2 columns has 5 rows. A grid with 11 items and 2 columns
 * has 6 rows.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * For example, the following JSON creates a 2 column grid with a single
 * item:
 *
 * ```
 * "grid": {
 *   "title": "A fine collection of items",
 *   "columnCount": 2,
 *   "borderStyle": {
 *     "type": "STROKE",
 *     "cornerRadius": 4
 *   },
 *   "items": [
 *     {
 *       "image": {
 *         "imageUri": "https://www.example.com/image.png",
 *         "cropStyle": {
 *           "type": "SQUARE"
 *         },
 *         "borderStyle": {
 *           "type": "STROKE"
 *         }
 *       },
 *       "title": "An item",
 *       "textAlignment": "CENTER"
 *     }
 *   ],
 *   "onClick": {
 *     "openLink": {
 *       "url": "https://www.example.com"
 *     }
 *   }
 * }
 * ```
 *
 * @generated from message google.apps.card.v1.Grid
 */
export type Grid = Message<"google.apps.card.v1.Grid"> & {
  /**
   * The text that displays in the grid header.
   *
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * The items to display in the grid.
   *
   * @generated from field: repeated google.apps.card.v1.Grid.GridItem items = 2;
   */
  items: Grid_GridItem[];

  /**
   * The border style to apply to each grid item.
   *
   * @generated from field: google.apps.card.v1.BorderStyle border_style = 3;
   */
  borderStyle?: BorderStyle;

  /**
   * The number of columns to display in the grid. A default value
   * is used if this field isn't specified, and that default value is
   * different depending on where the grid is shown (dialog versus companion).
   *
   * @generated from field: int32 column_count = 4;
   */
  columnCount: number;

  /**
   * This callback is reused by each individual grid item, but with the
   * item's identifier and index in the items list added to the callback's
   * parameters.
   *
   * @generated from field: google.apps.card.v1.OnClick on_click = 5;
   */
  onClick?: OnClick;
};

/**
 * Describes the message google.apps.card.v1.Grid.
 * Use `create(GridSchema)` to create a new message.
 */
export const GridSchema: GenMessage<Grid> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 17);

/**
 * Represents an item in a grid layout. Items can contain text, an image, or
 * both text and an image.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Grid.GridItem
 */
export type Grid_GridItem = Message<"google.apps.card.v1.Grid.GridItem"> & {
  /**
   * A user-specified identifier for this grid item. This identifier is
   * returned in the parent grid's `onClick` callback parameters.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The image that displays in the grid item.
   *
   * @generated from field: google.apps.card.v1.ImageComponent image = 2;
   */
  image?: ImageComponent;

  /**
   * The grid item's title.
   *
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * The grid item's subtitle.
   *
   * @generated from field: string subtitle = 4;
   */
  subtitle: string;

  /**
   * The layout to use for the grid item.
   *
   * @generated from field: google.apps.card.v1.Grid.GridItem.GridItemLayout layout = 9;
   */
  layout: Grid_GridItem_GridItemLayout;
};

/**
 * Describes the message google.apps.card.v1.Grid.GridItem.
 * Use `create(Grid_GridItemSchema)` to create a new message.
 */
export const Grid_GridItemSchema: GenMessage<Grid_GridItem> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 17, 0);

/**
 * Represents the various layout options available for a grid item.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.Grid.GridItem.GridItemLayout
 */
export enum Grid_GridItem_GridItemLayout {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: GRID_ITEM_LAYOUT_UNSPECIFIED = 0;
   */
  GRID_ITEM_LAYOUT_UNSPECIFIED = 0,

  /**
   * The title and subtitle are shown below the grid item's image.
   *
   * @generated from enum value: TEXT_BELOW = 1;
   */
  TEXT_BELOW = 1,

  /**
   * The title and subtitle are shown above the grid item's image.
   *
   * @generated from enum value: TEXT_ABOVE = 2;
   */
  TEXT_ABOVE = 2,
}

/**
 * Describes the enum google.apps.card.v1.Grid.GridItem.GridItemLayout.
 */
export const Grid_GridItem_GridItemLayoutSchema: GenEnum<Grid_GridItem_GridItemLayout> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 17, 0, 0);

/**
 * The `Columns` widget displays up to 2 columns in a card or dialog. You can
 * add widgets to each column; the widgets appear in the order that they are
 * specified. For an example in Google Chat apps, see
 * [Display cards and dialogs in
 * columns](https://developers.google.com/workspace/chat/format-structure-card-dialog#display_cards_and_dialogs_in_columns).
 *
 * The height of each column is determined by the taller column. For example, if
 * the first column is taller than the second column, both columns have the
 * height of the first column. Because each column can contain a different
 * number of widgets, you can't define rows or align widgets between the
 * columns.
 *
 * Columns are displayed side-by-side. You can customize the width of each
 * column using the `HorizontalSizeStyle` field. If the user's
 * screen width is too narrow, the second column wraps below the first:
 *
 * * On web, the second column wraps if the screen width is less than or equal
 *   to 480 pixels.
 * * On iOS devices, the second column wraps if the screen width is
 *   less than or equal to 300 pt.
 * * On Android devices, the second column wraps if the screen width is
 *   less than or equal to 320 dp.
 *
 * To include more than 2 columns, or to use rows, use the
 * [`Grid`][google.apps.card.v1.Grid] widget.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * Columns for Google Workspace Add-ons are in
 * Developer Preview.
 *
 * @generated from message google.apps.card.v1.Columns
 */
export type Columns = Message<"google.apps.card.v1.Columns"> & {
  /**
   * An array of columns. You can include up to 2 columns in a card or dialog.
   *
   * @generated from field: repeated google.apps.card.v1.Columns.Column column_items = 2;
   */
  columnItems: Columns_Column[];
};

/**
 * Describes the message google.apps.card.v1.Columns.
 * Use `create(ColumnsSchema)` to create a new message.
 */
export const ColumnsSchema: GenMessage<Columns> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 18);

/**
 * A column.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * Columns for Google Workspace Add-ons are in
 * Developer Preview.
 *
 * @generated from message google.apps.card.v1.Columns.Column
 */
export type Columns_Column = Message<"google.apps.card.v1.Columns.Column"> & {
  /**
   * Specifies how a column fills the width of the card.
   *
   * @generated from field: google.apps.card.v1.Columns.Column.HorizontalSizeStyle horizontal_size_style = 1;
   */
  horizontalSizeStyle: Columns_Column_HorizontalSizeStyle;

  /**
   * Specifies whether widgets align to the left, right, or center of a
   * column.
   *
   * @generated from field: google.apps.card.v1.Widget.HorizontalAlignment horizontal_alignment = 2;
   */
  horizontalAlignment: Widget_HorizontalAlignment;

  /**
   * Specifies whether widgets align to the top, bottom, or center of a
   * column.
   *
   * @generated from field: google.apps.card.v1.Columns.Column.VerticalAlignment vertical_alignment = 3;
   */
  verticalAlignment: Columns_Column_VerticalAlignment;

  /**
   * An array of widgets included in a column. Widgets appear in the order
   * that they are specified.
   *
   * @generated from field: repeated google.apps.card.v1.Columns.Column.Widgets widgets = 4;
   */
  widgets: Columns_Column_Widgets[];
};

/**
 * Describes the message google.apps.card.v1.Columns.Column.
 * Use `create(Columns_ColumnSchema)` to create a new message.
 */
export const Columns_ColumnSchema: GenMessage<Columns_Column> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 18, 0);

/**
 * The supported widgets that you can include in a column.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * Columns for Google Workspace Add-ons are in
 * Developer Preview.
 *
 * @generated from message google.apps.card.v1.Columns.Column.Widgets
 */
export type Columns_Column_Widgets = Message<"google.apps.card.v1.Columns.Column.Widgets"> & {
  /**
   * @generated from oneof google.apps.card.v1.Columns.Column.Widgets.data
   */
  data: {
    /**
     * [TextParagraph][google.apps.card.v1.TextParagraph] widget.
     *
     * @generated from field: google.apps.card.v1.TextParagraph text_paragraph = 1;
     */
    value: TextParagraph;
    case: "textParagraph";
  } | {
    /**
     * [Image][google.apps.card.v1.Image] widget.
     *
     * @generated from field: google.apps.card.v1.Image image = 2;
     */
    value: Image;
    case: "image";
  } | {
    /**
     * [DecoratedText][google.apps.card.v1.DecoratedText] widget.
     *
     * @generated from field: google.apps.card.v1.DecoratedText decorated_text = 3;
     */
    value: DecoratedText;
    case: "decoratedText";
  } | {
    /**
     * [ButtonList][google.apps.card.v1.ButtonList] widget.
     *
     * @generated from field: google.apps.card.v1.ButtonList button_list = 4;
     */
    value: ButtonList;
    case: "buttonList";
  } | {
    /**
     * [TextInput][google.apps.card.v1.TextInput] widget.
     *
     * @generated from field: google.apps.card.v1.TextInput text_input = 5;
     */
    value: TextInput;
    case: "textInput";
  } | {
    /**
     * [SelectionInput][google.apps.card.v1.SelectionInput] widget.
     *
     * @generated from field: google.apps.card.v1.SelectionInput selection_input = 6;
     */
    value: SelectionInput;
    case: "selectionInput";
  } | {
    /**
     * [DateTimePicker][google.apps.card.v1.DateTimePicker] widget.
     *
     * @generated from field: google.apps.card.v1.DateTimePicker date_time_picker = 7;
     */
    value: DateTimePicker;
    case: "dateTimePicker";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.Columns.Column.Widgets.
 * Use `create(Columns_Column_WidgetsSchema)` to create a new message.
 */
export const Columns_Column_WidgetsSchema: GenMessage<Columns_Column_Widgets> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 18, 0, 0);

/**
 * Specifies how a column fills the width of the card. The width of each
 * column depends on both the `HorizontalSizeStyle` and the width of the
 * widgets within the column.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * Columns for Google Workspace Add-ons are in
 * Developer Preview.
 *
 * @generated from enum google.apps.card.v1.Columns.Column.HorizontalSizeStyle
 */
export enum Columns_Column_HorizontalSizeStyle {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: HORIZONTAL_SIZE_STYLE_UNSPECIFIED = 0;
   */
  HORIZONTAL_SIZE_STYLE_UNSPECIFIED = 0,

  /**
   * Default value. Column fills the available space, up to 70% of the
   * card's width. If both columns are set to `FILL_AVAILABLE_SPACE`, each
   * column fills 50% of the space.
   *
   * @generated from enum value: FILL_AVAILABLE_SPACE = 1;
   */
  FILL_AVAILABLE_SPACE = 1,

  /**
   * Column fills the least amount of space possible and no more than 30% of
   * the card's width.
   *
   * @generated from enum value: FILL_MINIMUM_SPACE = 2;
   */
  FILL_MINIMUM_SPACE = 2,
}

/**
 * Describes the enum google.apps.card.v1.Columns.Column.HorizontalSizeStyle.
 */
export const Columns_Column_HorizontalSizeStyleSchema: GenEnum<Columns_Column_HorizontalSizeStyle> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 18, 0, 0);

/**
 * Specifies whether widgets align to the top, bottom, or center of a
 * column.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 * Columns for Google Workspace Add-ons are in
 * Developer Preview.
 *
 * @generated from enum google.apps.card.v1.Columns.Column.VerticalAlignment
 */
export enum Columns_Column_VerticalAlignment {
  /**
   * Don't use. Unspecified.
   *
   * @generated from enum value: VERTICAL_ALIGNMENT_UNSPECIFIED = 0;
   */
  VERTICAL_ALIGNMENT_UNSPECIFIED = 0,

  /**
   * Default value. Aligns widgets to the center of a column.
   *
   * @generated from enum value: CENTER = 1;
   */
  CENTER = 1,

  /**
   * Aligns widgets to the top of a column.
   *
   * @generated from enum value: TOP = 2;
   */
  TOP = 2,

  /**
   * Aligns widgets to the bottom of a column.
   *
   * @generated from enum value: BOTTOM = 3;
   */
  BOTTOM = 3,
}

/**
 * Describes the enum google.apps.card.v1.Columns.Column.VerticalAlignment.
 */
export const Columns_Column_VerticalAlignmentSchema: GenEnum<Columns_Column_VerticalAlignment> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 18, 0, 1);

/**
 * Represents how to respond when users click an interactive element on
 * a card, such as a button.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.OnClick
 */
export type OnClick = Message<"google.apps.card.v1.OnClick"> & {
  /**
   * @generated from oneof google.apps.card.v1.OnClick.data
   */
  data: {
    /**
     * If specified, an action is triggered by this `onClick`.
     *
     * @generated from field: google.apps.card.v1.Action action = 1;
     */
    value: Action;
    case: "action";
  } | {
    /**
     * If specified, this `onClick` triggers an open link action.
     *
     * @generated from field: google.apps.card.v1.OpenLink open_link = 2;
     */
    value: OpenLink;
    case: "openLink";
  } | {
    /**
     * An add-on triggers this action when the action needs to open a
     * link. This differs from the `open_link` above in that this needs to talk
     * to server to get the link. Thus some preparation work is required for
     * web client to do before the open link action response comes back.
     *
     * [Google Workspace
     * Add-ons](https://developers.google.com/workspace/add-ons):
     *
     * @generated from field: google.apps.card.v1.Action open_dynamic_link_action = 3;
     */
    value: Action;
    case: "openDynamicLinkAction";
  } | {
    /**
     * A new card is pushed to the card stack after clicking if specified.
     *
     * [Google Workspace
     * Add-ons](https://developers.google.com/workspace/add-ons):
     *
     * @generated from field: google.apps.card.v1.Card card = 4;
     */
    value: Card;
    case: "card";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.apps.card.v1.OnClick.
 * Use `create(OnClickSchema)` to create a new message.
 */
export const OnClickSchema: GenMessage<OnClick> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 19);

/**
 * Represents an `onClick` event that opens a hyperlink.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.OpenLink
 */
export type OpenLink = Message<"google.apps.card.v1.OpenLink"> & {
  /**
   * The URL to open.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * How to open a link.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: google.apps.card.v1.OpenLink.OpenAs open_as = 2;
   */
  openAs: OpenLink_OpenAs;

  /**
   * Whether the client forgets about a link after opening it, or observes it
   * until the window closes.
   *
   * [Google Workspace
   * Add-ons](https://developers.google.com/workspace/add-ons):
   *
   * @generated from field: google.apps.card.v1.OpenLink.OnClose on_close = 3;
   */
  onClose: OpenLink_OnClose;
};

/**
 * Describes the message google.apps.card.v1.OpenLink.
 * Use `create(OpenLinkSchema)` to create a new message.
 */
export const OpenLinkSchema: GenMessage<OpenLink> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 20);

/**
 * When an `OnClick` action opens a link, then the client can either open it
 * as a full-size window (if that's the frame used by the client), or an
 * overlay (such as a pop-up). The implementation depends on the client
 * platform capabilities, and the value selected might be ignored if the
 * client doesn't support it. `FULL_SIZE` is supported by all clients.
 *
 * [Google Workspace
 * Add-ons](https://developers.google.com/workspace/add-ons):
 *
 * @generated from enum google.apps.card.v1.OpenLink.OpenAs
 */
export enum OpenLink_OpenAs {
  /**
   * The link opens as a full-size window (if that's the frame used by the
   * client).
   *
   * @generated from enum value: FULL_SIZE = 0;
   */
  FULL_SIZE = 0,

  /**
   * The link opens as an overlay, such as a pop-up.
   *
   * @generated from enum value: OVERLAY = 1;
   */
  OVERLAY = 1,
}

/**
 * Describes the enum google.apps.card.v1.OpenLink.OpenAs.
 */
export const OpenLink_OpenAsSchema: GenEnum<OpenLink_OpenAs> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 20, 0);

/**
 * What the client does when a link opened by an `OnClick` action is closed.
 *
 * Implementation depends on client platform capabilities. For example, a web
 * browser might open a link in a pop-up window with an `OnClose` handler.
 *
 * If both `OnOpen` and `OnClose` handlers are set, and the client platform
 * can't support both values, `OnClose` takes precedence.
 *
 * [Google Workspace
 * Add-ons](https://developers.google.com/workspace/add-ons):
 *
 * @generated from enum google.apps.card.v1.OpenLink.OnClose
 */
export enum OpenLink_OnClose {
  /**
   * Default value. The card doesn't reload; nothing happens.
   *
   * @generated from enum value: NOTHING = 0;
   */
  NOTHING = 0,

  /**
   * Reloads the card after the child window closes.
   *
   * If used in conjunction with
   * [`OpenAs.OVERLAY`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
   * the child window acts as a modal dialog and the parent card is blocked
   * until the child window closes.
   *
   * @generated from enum value: RELOAD = 1;
   */
  RELOAD = 1,
}

/**
 * Describes the enum google.apps.card.v1.OpenLink.OnClose.
 */
export const OpenLink_OnCloseSchema: GenEnum<OpenLink_OnClose> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 20, 1);

/**
 * An action that describes the behavior when the form is submitted.
 * For example, you can invoke an Apps Script script to handle the form.
 * If the action is triggered, the form values are sent to the server.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Action
 */
export type Action = Message<"google.apps.card.v1.Action"> & {
  /**
   * A custom function to invoke when the containing element is
   * clicked or othrwise activated.
   *
   * For example usage, see [Read form
   * data](https://developers.google.com/workspace/chat/read-form-data).
   *
   * @generated from field: string function = 1;
   */
  function: string;

  /**
   * List of action parameters.
   *
   * @generated from field: repeated google.apps.card.v1.Action.ActionParameter parameters = 2;
   */
  parameters: Action_ActionParameter[];

  /**
   * Specifies the loading indicator that the action displays while
   * making the call to the action.
   *
   * @generated from field: google.apps.card.v1.Action.LoadIndicator load_indicator = 3;
   */
  loadIndicator: Action_LoadIndicator;

  /**
   * Indicates whether form values persist after the action. The default value
   * is `false`.
   *
   * If `true`, form values remain after the action is triggered. To let the
   * user make changes while the action is being processed, set
   * [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
   * to `NONE`. For [card
   * messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/create#create)
   * in Chat apps, you must also set the action's
   * [`ResponseType`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages#responsetype)
   * to `UPDATE_MESSAGE` and use the same
   * [`card_id`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages#CardWithId)
   * from the card that contained the action.
   *
   * If `false`, the form values are cleared when the action is triggered.
   * To prevent the user from making changes while the action is being
   * processed, set
   * [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
   * to `SPINNER`.
   *
   * @generated from field: bool persist_values = 4;
   */
  persistValues: boolean;

  /**
   * Optional. Required when opening a
   * [dialog](https://developers.google.com/workspace/chat/dialogs).
   *
   * What to do in response to an interaction with a user, such as a user
   * clicking a button in a card message.
   *
   * If unspecified, the app responds by executing an `action`—like opening a
   * link or running a function—as normal.
   *
   * By specifying an `interaction`, the app can respond in special interactive
   * ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can
   * open a [dialog](https://developers.google.com/workspace/chat/dialogs). When
   * specified, a loading indicator isn't shown. If specified for
   * an add-on, the entire card is stripped and nothing is shown in the client.
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   *
   * @generated from field: google.apps.card.v1.Action.Interaction interaction = 5;
   */
  interaction: Action_Interaction;
};

/**
 * Describes the message google.apps.card.v1.Action.
 * Use `create(ActionSchema)` to create a new message.
 */
export const ActionSchema: GenMessage<Action> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 21);

/**
 * List of string parameters to supply when the action method is invoked.
 * For example, consider three snooze buttons: snooze now, snooze one day,
 * or snooze next week. You might use `action method = snooze()`, passing the
 * snooze type and snooze time in the list of string parameters.
 *
 * To learn more, see
 * [`CommonEventObject`](https://developers.google.com/workspace/chat/api/reference/rest/v1/Event#commoneventobject).
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from message google.apps.card.v1.Action.ActionParameter
 */
export type Action_ActionParameter = Message<"google.apps.card.v1.Action.ActionParameter"> & {
  /**
   * The name of the parameter for the action script.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value of the parameter.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.apps.card.v1.Action.ActionParameter.
 * Use `create(Action_ActionParameterSchema)` to create a new message.
 */
export const Action_ActionParameterSchema: GenMessage<Action_ActionParameter> = /*@__PURE__*/
  messageDesc(file_google_apps_card_v1_card, 21, 0);

/**
 * Specifies the loading indicator that the action displays while
 * making the call to the action.
 *
 * [Google Workspace Add-ons and Chat
 * apps](https://developers.google.com/workspace/extend):
 *
 * @generated from enum google.apps.card.v1.Action.LoadIndicator
 */
export enum Action_LoadIndicator {
  /**
   * Displays a spinner to indicate that content is loading.
   *
   * @generated from enum value: SPINNER = 0;
   */
  SPINNER = 0,

  /**
   * Nothing is displayed.
   *
   * @generated from enum value: NONE = 1;
   */
  NONE = 1,
}

/**
 * Describes the enum google.apps.card.v1.Action.LoadIndicator.
 */
export const Action_LoadIndicatorSchema: GenEnum<Action_LoadIndicator> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 21, 0);

/**
 * Optional. Required when opening a
 * [dialog](https://developers.google.com/workspace/chat/dialogs).
 *
 * What to do in response to an interaction with a user, such as a user
 * clicking a button in a card message.
 *
 * If unspecified, the app responds by executing an `action`—like opening a
 * link or running a function—as normal.
 *
 * By specifying an `interaction`, the app can respond in special interactive
 * ways. For example, by setting `interaction` to `OPEN_DIALOG`, the app can
 * open a [dialog](https://developers.google.com/workspace/chat/dialogs).
 *
 * When specified, a loading indicator isn't shown. If specified for
 * an add-on, the entire card is stripped and nothing is shown in the client.
 *
 * [Google Chat apps](https://developers.google.com/workspace/chat):
 *
 * @generated from enum google.apps.card.v1.Action.Interaction
 */
export enum Action_Interaction {
  /**
   * Default value. The `action` executes as normal.
   *
   * @generated from enum value: INTERACTION_UNSPECIFIED = 0;
   */
  INTERACTION_UNSPECIFIED = 0,

  /**
   * Opens a [dialog](https://developers.google.com/workspace/chat/dialogs), a
   * windowed, card-based interface that Chat apps use to interact with users.
   *
   * Only supported by Chat apps in response to button-clicks on card
   * messages. If specified for
   * an add-on, the entire card is stripped and nothing is shown in the
   * client.
   *
   * [Google Chat apps](https://developers.google.com/workspace/chat):
   *
   * @generated from enum value: OPEN_DIALOG = 1;
   */
  OPEN_DIALOG = 1,
}

/**
 * Describes the enum google.apps.card.v1.Action.Interaction.
 */
export const Action_InteractionSchema: GenEnum<Action_Interaction> = /*@__PURE__*/
  enumDesc(file_google_apps_card_v1_card, 21, 1);

