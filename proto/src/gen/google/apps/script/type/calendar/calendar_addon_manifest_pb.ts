// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/apps/script/type/calendar/calendar_addon_manifest.proto (package google.apps.script.type.calendar, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../../api/field_behavior_pb";
import type { HomepageExtensionPoint } from "../extension_point_pb";
import { file_google_apps_script_type_extension_point } from "../extension_point_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/apps/script/type/calendar/calendar_addon_manifest.proto.
 */
export const file_google_apps_script_type_calendar_calendar_addon_manifest: GenFile = /*@__PURE__*/
  fileDesc("Cj5nb29nbGUvYXBwcy9zY3JpcHQvdHlwZS9jYWxlbmRhci9jYWxlbmRhcl9hZGRvbl9tYW5pZmVzdC5wcm90bxIgZ29vZ2xlLmFwcHMuc2NyaXB0LnR5cGUuY2FsZW5kYXIivwQKFUNhbGVuZGFyQWRkT25NYW5pZmVzdBJJChBob21lcGFnZV90cmlnZ2VyGAYgASgLMi8uZ29vZ2xlLmFwcHMuc2NyaXB0LnR5cGUuSG9tZXBhZ2VFeHRlbnNpb25Qb2ludBJRChNjb25mZXJlbmNlX3NvbHV0aW9uGAMgAygLMjQuZ29vZ2xlLmFwcHMuc2NyaXB0LnR5cGUuY2FsZW5kYXIuQ29uZmVyZW5jZVNvbHV0aW9uEiQKHGNyZWF0ZV9zZXR0aW5nc191cmxfZnVuY3Rpb24YBSABKAkSVAoSZXZlbnRfb3Blbl90cmlnZ2VyGAogASgLMjguZ29vZ2xlLmFwcHMuc2NyaXB0LnR5cGUuY2FsZW5kYXIuQ2FsZW5kYXJFeHRlbnNpb25Qb2ludBJWChRldmVudF91cGRhdGVfdHJpZ2dlchgLIAEoCzI4Lmdvb2dsZS5hcHBzLnNjcmlwdC50eXBlLmNhbGVuZGFyLkNhbGVuZGFyRXh0ZW5zaW9uUG9pbnQSYQoUY3VycmVudF9ldmVudF9hY2Nlc3MYDCABKA4yQy5nb29nbGUuYXBwcy5zY3JpcHQudHlwZS5jYWxlbmRhci5DYWxlbmRhckFkZE9uTWFuaWZlc3QuRXZlbnRBY2Nlc3MiUQoLRXZlbnRBY2Nlc3MSDwoLVU5TUEVDSUZJRUQQABIMCghNRVRBREFUQRABEggKBFJFQUQQAxIJCgVXUklURRAEEg4KClJFQURfV1JJVEUQBSJwChJDb25mZXJlbmNlU29sdXRpb24SHwoSb25fY3JlYXRlX2Z1bmN0aW9uGAEgASgJQgPgQQISDwoCaWQYBCABKAlCA+BBAhIRCgRuYW1lGAUgASgJQgPgQQISFQoIbG9nb191cmwYBiABKAlCA+BBAiIzChZDYWxlbmRhckV4dGVuc2lvblBvaW50EhkKDHJ1bl9mdW5jdGlvbhgBIAEoCUID4EECQvIBCiRjb20uZ29vZ2xlLmFwcHMuc2NyaXB0LnR5cGUuY2FsZW5kYXJCGkNhbGVuZGFyQWRkT25NYW5pZmVzdFByb3RvUAFaP2dvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvYXBwcy9zY3JpcHQvdHlwZS9jYWxlbmRhcqoCIEdvb2dsZS5BcHBzLlNjcmlwdC5UeXBlLkNhbGVuZGFyygIgR29vZ2xlXEFwcHNcU2NyaXB0XFR5cGVcQ2FsZW5kYXLqAiRHb29nbGU6OkFwcHM6OlNjcmlwdDo6VHlwZTo6Q2FsZW5kYXJiBnByb3RvMw", [file_google_api_field_behavior, file_google_apps_script_type_extension_point]);

/**
 * Calendar add-on manifest.
 *
 * @generated from message google.apps.script.type.calendar.CalendarAddOnManifest
 */
export type CalendarAddOnManifest = Message<"google.apps.script.type.calendar.CalendarAddOnManifest"> & {
  /**
   * Defines an endpoint that will be executed contexts that don't
   * match a declared contextual trigger. Any cards generated by this function
   * will always be available to the user, but may be eclipsed by contextual
   * content when this add-on declares more targeted triggers.
   *
   * If present, this overrides the configuration from
   * `addOns.common.homepageTrigger`.
   *
   * @generated from field: google.apps.script.type.HomepageExtensionPoint homepage_trigger = 6;
   */
  homepageTrigger?: HomepageExtensionPoint;

  /**
   * Defines conference solutions provided by this add-on.
   *
   * @generated from field: repeated google.apps.script.type.calendar.ConferenceSolution conference_solution = 3;
   */
  conferenceSolution: ConferenceSolution[];

  /**
   * An endpoint to execute that creates a URL to the add-on's settings page.
   *
   * @generated from field: string create_settings_url_function = 5;
   */
  createSettingsUrlFunction: string;

  /**
   * An endpoint to trigger when an event is opened (viewed/edited).
   *
   * @generated from field: google.apps.script.type.calendar.CalendarExtensionPoint event_open_trigger = 10;
   */
  eventOpenTrigger?: CalendarExtensionPoint;

  /**
   * An endpoint to trigger when the open event is updated.
   *
   * @generated from field: google.apps.script.type.calendar.CalendarExtensionPoint event_update_trigger = 11;
   */
  eventUpdateTrigger?: CalendarExtensionPoint;

  /**
   * Define the level of data access when an event addon is triggered.
   *
   * @generated from field: google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess current_event_access = 12;
   */
  currentEventAccess: CalendarAddOnManifest_EventAccess;
};

/**
 * Describes the message google.apps.script.type.calendar.CalendarAddOnManifest.
 * Use `create(CalendarAddOnManifestSchema)` to create a new message.
 */
export const CalendarAddOnManifestSchema: GenMessage<CalendarAddOnManifest> = /*@__PURE__*/
  messageDesc(file_google_apps_script_type_calendar_calendar_addon_manifest, 0);

/**
 * An enum defining the level of data access event triggers require.
 *
 * @generated from enum google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess
 */
export enum CalendarAddOnManifest_EventAccess {
  /**
   * Default value when nothing is set for EventAccess.
   *
   * @generated from enum value: UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * METADATA gives event triggers the permission to access the metadata of
   * events such as event id and calendar id.
   *
   * @generated from enum value: METADATA = 1;
   */
  METADATA = 1,

  /**
   * READ gives event triggers access to all provided event fields including
   * the metadata, attendees, and conference data.
   *
   * @generated from enum value: READ = 3;
   */
  READ = 3,

  /**
   * WRITE gives event triggers access to the metadata of events and the
   * ability to perform all actions, including adding attendees and setting
   * conference data.
   *
   * @generated from enum value: WRITE = 4;
   */
  WRITE = 4,

  /**
   * READ_WRITE gives event triggers access to all provided event fields
   * including the metadata, attendees, and conference data and the ability to
   * perform all actions.
   *
   * @generated from enum value: READ_WRITE = 5;
   */
  READ_WRITE = 5,
}

/**
 * Describes the enum google.apps.script.type.calendar.CalendarAddOnManifest.EventAccess.
 */
export const CalendarAddOnManifest_EventAccessSchema: GenEnum<CalendarAddOnManifest_EventAccess> = /*@__PURE__*/
  enumDesc(file_google_apps_script_type_calendar_calendar_addon_manifest, 0, 0);

/**
 * Defines conference related values.
 *
 * @generated from message google.apps.script.type.calendar.ConferenceSolution
 */
export type ConferenceSolution = Message<"google.apps.script.type.calendar.ConferenceSolution"> & {
  /**
   * Required. The endpoint to call when ConferenceData should be created.
   *
   * @generated from field: string on_create_function = 1;
   */
  onCreateFunction: string;

  /**
   * Required. IDs should be unique across ConferenceSolutions within one
   * add-on, but this is not strictly enforced. It is up to the add-on developer
   * to assign them uniquely, otherwise the wrong ConferenceSolution may be
   * used when the add-on is triggered. While the developer may change the
   * display name of an add-on, the ID should not be changed.
   *
   * @generated from field: string id = 4;
   */
  id: string;

  /**
   * Required. The display name of the ConferenceSolution.
   *
   * @generated from field: string name = 5;
   */
  name: string;

  /**
   * Required. The URL for the logo image of the ConferenceSolution.
   *
   * @generated from field: string logo_url = 6;
   */
  logoUrl: string;
};

/**
 * Describes the message google.apps.script.type.calendar.ConferenceSolution.
 * Use `create(ConferenceSolutionSchema)` to create a new message.
 */
export const ConferenceSolutionSchema: GenMessage<ConferenceSolution> = /*@__PURE__*/
  messageDesc(file_google_apps_script_type_calendar_calendar_addon_manifest, 1);

/**
 * Common format for declaring a calendar add-on's triggers.
 *
 * @generated from message google.apps.script.type.calendar.CalendarExtensionPoint
 */
export type CalendarExtensionPoint = Message<"google.apps.script.type.calendar.CalendarExtensionPoint"> & {
  /**
   * Required. The endpoint to execute when this extension point is
   * activated.
   *
   * @generated from field: string run_function = 1;
   */
  runFunction: string;
};

/**
 * Describes the message google.apps.script.type.calendar.CalendarExtensionPoint.
 * Use `create(CalendarExtensionPointSchema)` to create a new message.
 */
export const CalendarExtensionPointSchema: GenMessage<CalendarExtensionPoint> = /*@__PURE__*/
  messageDesc(file_google_apps_script_type_calendar_calendar_addon_manifest, 2);

