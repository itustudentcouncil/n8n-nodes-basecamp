// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/genomics/v1alpha2/pipelines.proto (package google.genomics.v1alpha2, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import type { OperationSchema } from "../../longrunning/operations_pb";
import { file_google_longrunning_operations } from "../../longrunning/operations_pb";
import type { Duration, EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Code } from "../../rpc/code_pb";
import { file_google_rpc_code } from "../../rpc/code_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/genomics/v1alpha2/pipelines.proto.
 */
export const file_google_genomics_v1alpha2_pipelines: GenFile = /*@__PURE__*/
  fileDesc("Cihnb29nbGUvZ2Vub21pY3MvdjFhbHBoYTIvcGlwZWxpbmVzLnByb3RvEhhnb29nbGUuZ2Vub21pY3MudjFhbHBoYTIiXgoNQ29tcHV0ZUVuZ2luZRIVCg1pbnN0YW5jZV9uYW1lGAEgASgJEgwKBHpvbmUYAiABKAkSFAoMbWFjaGluZV90eXBlGAMgASgJEhIKCmRpc2tfbmFtZXMYBCADKAkiUgoPUnVudGltZU1ldGFkYXRhEj8KDmNvbXB1dGVfZW5naW5lGAEgASgLMicuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLkNvbXB1dGVFbmdpbmUi7QIKCFBpcGVsaW5lEhIKCnByb2plY3RfaWQYASABKAkSDAoEbmFtZRgCIAEoCRITCgtkZXNjcmlwdGlvbhgDIAEoCRJFChBpbnB1dF9wYXJhbWV0ZXJzGAggAygLMisuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lUGFyYW1ldGVyEkYKEW91dHB1dF9wYXJhbWV0ZXJzGAkgAygLMisuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lUGFyYW1ldGVyEjoKBmRvY2tlchgFIAEoCzIoLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5Eb2NrZXJFeGVjdXRvckgAEj4KCXJlc291cmNlcxgGIAEoCzIrLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5QaXBlbGluZVJlc291cmNlcxITCgtwaXBlbGluZV9pZBgHIAEoCUIKCghleGVjdXRvciJNChVDcmVhdGVQaXBlbGluZVJlcXVlc3QSNAoIcGlwZWxpbmUYASABKAsyIi5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUGlwZWxpbmUioQUKD1J1blBpcGVsaW5lQXJncxISCgpwcm9qZWN0X2lkGAEgASgJEkUKBmlucHV0cxgCIAMoCzI1Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5SdW5QaXBlbGluZUFyZ3MuSW5wdXRzRW50cnkSRwoHb3V0cHV0cxgDIAMoCzI2Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5SdW5QaXBlbGluZUFyZ3MuT3V0cHV0c0VudHJ5EkEKD3NlcnZpY2VfYWNjb3VudBgEIAEoCzIoLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5TZXJ2aWNlQWNjb3VudBIRCgljbGllbnRfaWQYBSABKAkSPgoJcmVzb3VyY2VzGAYgASgLMisuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lUmVzb3VyY2VzEjkKB2xvZ2dpbmcYByABKAsyKC5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuTG9nZ2luZ09wdGlvbnMSRAoha2VlcF92bV9hbGl2ZV9vbl9mYWlsdXJlX2R1cmF0aW9uGAggASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEkUKBmxhYmVscxgJIAMoCzI1Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5SdW5QaXBlbGluZUFyZ3MuTGFiZWxzRW50cnkaLQoLSW5wdXRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARouCgxPdXRwdXRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIrsBChJSdW5QaXBlbGluZVJlcXVlc3QSFQoLcGlwZWxpbmVfaWQYASABKAlIABJAChJlcGhlbWVyYWxfcGlwZWxpbmUYAiABKAsyIi5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUGlwZWxpbmVIABJACg1waXBlbGluZV9hcmdzGAMgASgLMikuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlJ1blBpcGVsaW5lQXJnc0IKCghwaXBlbGluZSIpChJHZXRQaXBlbGluZVJlcXVlc3QSEwoLcGlwZWxpbmVfaWQYASABKAkiZgoUTGlzdFBpcGVsaW5lc1JlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRITCgtuYW1lX3ByZWZpeBgCIAEoCRIRCglwYWdlX3NpemUYAyABKAUSEgoKcGFnZV90b2tlbhgEIAEoCSJnChVMaXN0UGlwZWxpbmVzUmVzcG9uc2USNQoJcGlwZWxpbmVzGAEgAygLMiIuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSIsChVEZWxldGVQaXBlbGluZVJlcXVlc3QSEwoLcGlwZWxpbmVfaWQYASABKAkiTAoaR2V0Q29udHJvbGxlckNvbmZpZ1JlcXVlc3QSFAoMb3BlcmF0aW9uX2lkGAEgASgJEhgKEHZhbGlkYXRpb25fdG9rZW4YAiABKAQi2QUKEENvbnRyb2xsZXJDb25maWcSDQoFaW1hZ2UYASABKAkSCwoDY21kGAIgASgJEhQKDGdjc19sb2dfcGF0aBgDIAEoCRIUCgxtYWNoaW5lX3R5cGUYBCABKAkSQgoEdmFycxgFIAMoCzI0Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5Db250cm9sbGVyQ29uZmlnLlZhcnNFbnRyeRJECgVkaXNrcxgGIAMoCzI1Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5Db250cm9sbGVyQ29uZmlnLkRpc2tzRW50cnkSTwoLZ2NzX3NvdXJjZXMYByADKAsyOi5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuQ29udHJvbGxlckNvbmZpZy5HY3NTb3VyY2VzRW50cnkSSwoJZ2NzX3NpbmtzGAggAygLMjguZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLkNvbnRyb2xsZXJDb25maWcuR2NzU2lua3NFbnRyeRogCg5SZXBlYXRlZFN0cmluZxIOCgZ2YWx1ZXMYASADKAkaKwoJVmFyc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaLAoKRGlza3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGmwKD0djc1NvdXJjZXNFbnRyeRILCgNrZXkYASABKAkSSAoFdmFsdWUYAiABKAsyOS5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuQ29udHJvbGxlckNvbmZpZy5SZXBlYXRlZFN0cmluZzoCOAEaagoNR2NzU2lua3NFbnRyeRILCgNrZXkYASABKAkSSAoFdmFsdWUYAiABKAsyOS5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuQ29udHJvbGxlckNvbmZpZy5SZXBlYXRlZFN0cmluZzoCOAEiVAoOVGltZXN0YW1wRXZlbnQSEwoLZGVzY3JpcHRpb24YASABKAkSLQoJdGltZXN0YW1wGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCLMAQoZU2V0T3BlcmF0aW9uU3RhdHVzUmVxdWVzdBIUCgxvcGVyYXRpb25faWQYASABKAkSQgoQdGltZXN0YW1wX2V2ZW50cxgCIAMoCzIoLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5UaW1lc3RhbXBFdmVudBIkCgplcnJvcl9jb2RlGAMgASgOMhAuZ29vZ2xlLnJwYy5Db2RlEhUKDWVycm9yX21lc3NhZ2UYBCABKAkSGAoQdmFsaWRhdGlvbl90b2tlbhgFIAEoBCIvCg5TZXJ2aWNlQWNjb3VudBINCgVlbWFpbBgBIAEoCRIOCgZzY29wZXMYAiADKAkiIgoOTG9nZ2luZ09wdGlvbnMSEAoIZ2NzX3BhdGgYASABKAki1gMKEVBpcGVsaW5lUmVzb3VyY2VzEhkKEW1pbmltdW1fY3B1X2NvcmVzGAEgASgFEhMKC3ByZWVtcHRpYmxlGAIgASgIEhYKDm1pbmltdW1fcmFtX2diGAMgASgBEj8KBWRpc2tzGAQgAygLMjAuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lUmVzb3VyY2VzLkRpc2sSDQoFem9uZXMYBSADKAkSGQoRYm9vdF9kaXNrX3NpemVfZ2IYBiABKAUSEgoKbm9fYWRkcmVzcxgHIAEoCBr5AQoERGlzaxIMCgRuYW1lGAEgASgJEkMKBHR5cGUYAiABKA4yNS5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUGlwZWxpbmVSZXNvdXJjZXMuRGlzay5UeXBlEg8KB3NpemVfZ2IYAyABKAUSDgoGc291cmNlGAQgASgJEhMKC2F1dG9fZGVsZXRlGAYgASgIEhMKC21vdW50X3BvaW50GAggASgJIlMKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEhIKDlBFUlNJU1RFTlRfSEREEAESEgoOUEVSU0lTVEVOVF9TU0QQAhINCglMT0NBTF9TU0QQAyLBAQoRUGlwZWxpbmVQYXJhbWV0ZXISDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIVCg1kZWZhdWx0X3ZhbHVlGAUgASgJEkkKCmxvY2FsX2NvcHkYBiABKAsyNS5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUGlwZWxpbmVQYXJhbWV0ZXIuTG9jYWxDb3B5GicKCUxvY2FsQ29weRIMCgRwYXRoGAEgASgJEgwKBGRpc2sYAiABKAkiMQoORG9ja2VyRXhlY3V0b3ISEgoKaW1hZ2VfbmFtZRgBIAEoCRILCgNjbWQYAiABKAkyiAgKEVBpcGVsaW5lc1YxQWxwaGEyEowBCg5DcmVhdGVQaXBlbGluZRIvLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5DcmVhdGVQaXBlbGluZVJlcXVlc3QaIi5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUGlwZWxpbmUiJYLT5JMCHzoIcGlwZWxpbmUiEy92MWFscGhhMi9waXBlbGluZXMSfgoLUnVuUGlwZWxpbmUSLC5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuUnVuUGlwZWxpbmVSZXF1ZXN0Gh0uZ29vZ2xlLmxvbmdydW5uaW5nLk9wZXJhdGlvbiIigtPkkwIcOgEqIhcvdjFhbHBoYTIvcGlwZWxpbmVzOnJ1bhKKAQoLR2V0UGlwZWxpbmUSLC5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuR2V0UGlwZWxpbmVSZXF1ZXN0GiIuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlBpcGVsaW5lIimC0+STAiMSIS92MWFscGhhMi9waXBlbGluZXMve3BpcGVsaW5lX2lkfRKNAQoNTGlzdFBpcGVsaW5lcxIuLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5MaXN0UGlwZWxpbmVzUmVxdWVzdBovLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5MaXN0UGlwZWxpbmVzUmVzcG9uc2UiG4LT5JMCFRITL3YxYWxwaGEyL3BpcGVsaW5lcxKEAQoORGVsZXRlUGlwZWxpbmUSLy5nb29nbGUuZ2Vub21pY3MudjFhbHBoYTIuRGVsZXRlUGlwZWxpbmVSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IimC0+STAiMqIS92MWFscGhhMi9waXBlbGluZXMve3BpcGVsaW5lX2lkfRKoAQoTR2V0Q29udHJvbGxlckNvbmZpZxI0Lmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5HZXRDb250cm9sbGVyQ29uZmlnUmVxdWVzdBoqLmdvb2dsZS5nZW5vbWljcy52MWFscGhhMi5Db250cm9sbGVyQ29uZmlnIi+C0+STAikSJy92MWFscGhhMi9waXBlbGluZXM6Z2V0Q29udHJvbGxlckNvbmZpZxKUAQoSU2V0T3BlcmF0aW9uU3RhdHVzEjMuZ29vZ2xlLmdlbm9taWNzLnYxYWxwaGEyLlNldE9wZXJhdGlvblN0YXR1c1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiMYLT5JMCKzoBKhomL3YxYWxwaGEyL3BpcGVsaW5lczpzZXRPcGVyYXRpb25TdGF0dXNCcAoXY29tLmdvb2dsZS5nZW5vbWljcy52MWFCDlBpcGVsaW5lc1Byb3RvUAFaQGdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ2Vub21pY3MvdjFhbHBoYTI7Z2Vub21pY3P4AQFiBnByb3RvMw", [file_google_api_annotations, file_google_longrunning_operations, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_timestamp, file_google_rpc_code]);

/**
 * Describes a Compute Engine resource that is being managed by a running
 * [pipeline][google.genomics.v1alpha2.Pipeline].
 *
 * @generated from message google.genomics.v1alpha2.ComputeEngine
 */
export type ComputeEngine = Message<"google.genomics.v1alpha2.ComputeEngine"> & {
  /**
   * The instance on which the operation is running.
   *
   * @generated from field: string instance_name = 1;
   */
  instanceName: string;

  /**
   * The availability zone in which the instance resides.
   *
   * @generated from field: string zone = 2;
   */
  zone: string;

  /**
   * The machine type of the instance.
   *
   * @generated from field: string machine_type = 3;
   */
  machineType: string;

  /**
   * The names of the disks that were created for this pipeline.
   *
   * @generated from field: repeated string disk_names = 4;
   */
  diskNames: string[];
};

/**
 * Describes the message google.genomics.v1alpha2.ComputeEngine.
 * Use `create(ComputeEngineSchema)` to create a new message.
 */
export const ComputeEngineSchema: GenMessage<ComputeEngine> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 0);

/**
 * Runtime metadata that will be populated in the
 * [runtimeMetadata][google.genomics.v1.OperationMetadata.runtime_metadata]
 * field of the Operation associated with a RunPipeline execution.
 *
 * @generated from message google.genomics.v1alpha2.RuntimeMetadata
 */
export type RuntimeMetadata = Message<"google.genomics.v1alpha2.RuntimeMetadata"> & {
  /**
   * Execution information specific to Google Compute Engine.
   *
   * @generated from field: google.genomics.v1alpha2.ComputeEngine compute_engine = 1;
   */
  computeEngine?: ComputeEngine;
};

/**
 * Describes the message google.genomics.v1alpha2.RuntimeMetadata.
 * Use `create(RuntimeMetadataSchema)` to create a new message.
 */
export const RuntimeMetadataSchema: GenMessage<RuntimeMetadata> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 1);

/**
 * The pipeline object. Represents a transformation from a set of input
 * parameters to a set of output parameters. The transformation is defined
 * as a docker image and command to run within that image. Each pipeline
 * is run on a Google Compute Engine VM. A pipeline can be created with the
 * `create` method and then later run with the `run` method, or a pipeline can
 * be defined and run all at once with the `run` method.
 *
 * @generated from message google.genomics.v1alpha2.Pipeline
 */
export type Pipeline = Message<"google.genomics.v1alpha2.Pipeline"> & {
  /**
   * Required. The project in which to create the pipeline. The caller must have
   * WRITE access.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Required. A user specified pipeline name that does not have to be unique.
   * This name can be used for filtering Pipelines in ListPipelines.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * User-specified description.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * Input parameters of the pipeline.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineParameter input_parameters = 8;
   */
  inputParameters: PipelineParameter[];

  /**
   * Output parameters of the pipeline.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineParameter output_parameters = 9;
   */
  outputParameters: PipelineParameter[];

  /**
   * Required. The executor indicates in which environment the pipeline runs.
   *
   * @generated from oneof google.genomics.v1alpha2.Pipeline.executor
   */
  executor: {
    /**
     * Specifies the docker run information.
     *
     * @generated from field: google.genomics.v1alpha2.DockerExecutor docker = 5;
     */
    value: DockerExecutor;
    case: "docker";
  } | { case: undefined; value?: undefined };

  /**
   * Required. Specifies resource requirements for the pipeline run.
   * Required fields:
   *
   * *
   * [minimumCpuCores][google.genomics.v1alpha2.PipelineResources.minimum_cpu_cores]
   *
   * *
   * [minimumRamGb][google.genomics.v1alpha2.PipelineResources.minimum_ram_gb]
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources resources = 6;
   */
  resources?: PipelineResources;

  /**
   * Unique pipeline id that is generated by the service when CreatePipeline
   * is called. Cannot be specified in the Pipeline used in the
   * CreatePipelineRequest, and will be populated in the response to
   * CreatePipeline and all subsequent Get and List calls. Indicates that the
   * service has registered this pipeline.
   *
   * @generated from field: string pipeline_id = 7;
   */
  pipelineId: string;
};

/**
 * Describes the message google.genomics.v1alpha2.Pipeline.
 * Use `create(PipelineSchema)` to create a new message.
 */
export const PipelineSchema: GenMessage<Pipeline> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 2);

/**
 * The request to create a pipeline. The pipeline field here should not have
 * `pipelineId` populated, as that will be populated by the server.
 *
 * @generated from message google.genomics.v1alpha2.CreatePipelineRequest
 */
export type CreatePipelineRequest = Message<"google.genomics.v1alpha2.CreatePipelineRequest"> & {
  /**
   * The pipeline to create. Should not have `pipelineId` populated.
   *
   * @generated from field: google.genomics.v1alpha2.Pipeline pipeline = 1;
   */
  pipeline?: Pipeline;
};

/**
 * Describes the message google.genomics.v1alpha2.CreatePipelineRequest.
 * Use `create(CreatePipelineRequestSchema)` to create a new message.
 */
export const CreatePipelineRequestSchema: GenMessage<CreatePipelineRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 3);

/**
 * The pipeline run arguments.
 *
 * @generated from message google.genomics.v1alpha2.RunPipelineArgs
 */
export type RunPipelineArgs = Message<"google.genomics.v1alpha2.RunPipelineArgs"> & {
  /**
   * Required. The project in which to run the pipeline. The caller must have
   * WRITER access to all Google Cloud services and resources (e.g. Google
   * Compute Engine) will be used.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Pipeline input arguments; keys are defined in the pipeline documentation.
   * All input parameters that do not have default values  must be specified.
   * If parameters with defaults are specified here, the defaults will be
   * overridden.
   *
   * @generated from field: map<string, string> inputs = 2;
   */
  inputs: { [key: string]: string };

  /**
   * Pipeline output arguments; keys are defined in the pipeline
   * documentation.  All output parameters of without default values
   * must be specified.  If parameters with defaults are specified
   * here, the defaults will be overridden.
   *
   * @generated from field: map<string, string> outputs = 3;
   */
  outputs: { [key: string]: string };

  /**
   * The Google Cloud Service Account that will be used to access data and
   * services. By default, the compute service account associated with
   * `projectId` is used.
   *
   * @generated from field: google.genomics.v1alpha2.ServiceAccount service_account = 4;
   */
  serviceAccount?: ServiceAccount;

  /**
   * This field is deprecated. Use `labels` instead. Client-specified pipeline
   * operation identifier.
   *
   * @generated from field: string client_id = 5;
   */
  clientId: string;

  /**
   * Specifies resource requirements/overrides for the pipeline run.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources resources = 6;
   */
  resources?: PipelineResources;

  /**
   * Required. Logging options. Used by the service to communicate results
   * to the user.
   *
   * @generated from field: google.genomics.v1alpha2.LoggingOptions logging = 7;
   */
  logging?: LoggingOptions;

  /**
   * How long to keep the VM up after a failure (for example docker command
   * failed, copying input or output files failed, etc). While the VM is up, one
   * can ssh into the VM to debug. Default is 0; maximum allowed value is 1 day.
   *
   * @generated from field: google.protobuf.Duration keep_vm_alive_on_failure_duration = 8;
   */
  keepVmAliveOnFailureDuration?: Duration;

  /**
   * Labels to apply to this pipeline run. Labels will also be applied to
   * compute resources (VM, disks) created by this pipeline run. When listing
   * operations, operations can [filtered by labels]
   * [google.longrunning.ListOperationsRequest.filter].
   * Label keys may not be empty; label values may be empty. Non-empty labels
   * must be 1-63 characters long, and comply with [RFC1035]
   * (https://www.ietf.org/rfc/rfc1035.txt).
   * Specifically, the name must be 1-63 characters long and match the regular
   * expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first
   * character must be a lowercase letter, and all following characters must be
   * a dash, lowercase letter, or digit, except the last character, which cannot
   * be a dash.
   *
   * @generated from field: map<string, string> labels = 9;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message google.genomics.v1alpha2.RunPipelineArgs.
 * Use `create(RunPipelineArgsSchema)` to create a new message.
 */
export const RunPipelineArgsSchema: GenMessage<RunPipelineArgs> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 4);

/**
 * The request to run a pipeline. If `pipelineId` is specified, it
 * refers to a saved pipeline created with CreatePipeline and set as
 * the `pipelineId` of the returned Pipeline object. If
 * `ephemeralPipeline` is specified, that pipeline is run once
 * with the given args and not saved. It is an error to specify both
 * `pipelineId` and `ephemeralPipeline`. `pipelineArgs`
 * must be specified.
 *
 * @generated from message google.genomics.v1alpha2.RunPipelineRequest
 */
export type RunPipelineRequest = Message<"google.genomics.v1alpha2.RunPipelineRequest"> & {
  /**
   * @generated from oneof google.genomics.v1alpha2.RunPipelineRequest.pipeline
   */
  pipeline: {
    /**
     * The already created pipeline to run.
     *
     * @generated from field: string pipeline_id = 1;
     */
    value: string;
    case: "pipelineId";
  } | {
    /**
     * A new pipeline object to run once and then delete.
     *
     * @generated from field: google.genomics.v1alpha2.Pipeline ephemeral_pipeline = 2;
     */
    value: Pipeline;
    case: "ephemeralPipeline";
  } | { case: undefined; value?: undefined };

  /**
   * The arguments to use when running this pipeline.
   *
   * @generated from field: google.genomics.v1alpha2.RunPipelineArgs pipeline_args = 3;
   */
  pipelineArgs?: RunPipelineArgs;
};

/**
 * Describes the message google.genomics.v1alpha2.RunPipelineRequest.
 * Use `create(RunPipelineRequestSchema)` to create a new message.
 */
export const RunPipelineRequestSchema: GenMessage<RunPipelineRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 5);

/**
 * A request to get a saved pipeline by id.
 *
 * @generated from message google.genomics.v1alpha2.GetPipelineRequest
 */
export type GetPipelineRequest = Message<"google.genomics.v1alpha2.GetPipelineRequest"> & {
  /**
   * Caller must have READ access to the project in which this pipeline
   * is defined.
   *
   * @generated from field: string pipeline_id = 1;
   */
  pipelineId: string;
};

/**
 * Describes the message google.genomics.v1alpha2.GetPipelineRequest.
 * Use `create(GetPipelineRequestSchema)` to create a new message.
 */
export const GetPipelineRequestSchema: GenMessage<GetPipelineRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 6);

/**
 * A request to list pipelines in a given project. Pipelines can be
 * filtered by name using `namePrefix`: all pipelines with names that
 * begin with `namePrefix` will be returned. Uses standard pagination:
 * `pageSize` indicates how many pipelines to return, and
 * `pageToken` comes from a previous ListPipelinesResponse to
 * indicate offset.
 *
 * @generated from message google.genomics.v1alpha2.ListPipelinesRequest
 */
export type ListPipelinesRequest = Message<"google.genomics.v1alpha2.ListPipelinesRequest"> & {
  /**
   * Required. The name of the project to search for pipelines. Caller
   * must have READ access to this project.
   *
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * Pipelines with names that match this prefix should be
   * returned.  If unspecified, all pipelines in the project, up to
   * `pageSize`, will be returned.
   *
   * @generated from field: string name_prefix = 2;
   */
  namePrefix: string;

  /**
   * Number of pipelines to return at once. Defaults to 256, and max
   * is 2048.
   *
   * @generated from field: int32 page_size = 3;
   */
  pageSize: number;

  /**
   * Token to use to indicate where to start getting results.
   * If unspecified, returns the first page of results.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;
};

/**
 * Describes the message google.genomics.v1alpha2.ListPipelinesRequest.
 * Use `create(ListPipelinesRequestSchema)` to create a new message.
 */
export const ListPipelinesRequestSchema: GenMessage<ListPipelinesRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 7);

/**
 * The response of ListPipelines. Contains at most `pageSize`
 * pipelines. If it contains `pageSize` pipelines, and more pipelines
 * exist, then `nextPageToken` will be populated and should be
 * used as the `pageToken` argument to a subsequent ListPipelines
 * request.
 *
 * @generated from message google.genomics.v1alpha2.ListPipelinesResponse
 */
export type ListPipelinesResponse = Message<"google.genomics.v1alpha2.ListPipelinesResponse"> & {
  /**
   * The matched pipelines.
   *
   * @generated from field: repeated google.genomics.v1alpha2.Pipeline pipelines = 1;
   */
  pipelines: Pipeline[];

  /**
   * The token to use to get the next page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.genomics.v1alpha2.ListPipelinesResponse.
 * Use `create(ListPipelinesResponseSchema)` to create a new message.
 */
export const ListPipelinesResponseSchema: GenMessage<ListPipelinesResponse> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 8);

/**
 * The request to delete a saved pipeline by ID.
 *
 * @generated from message google.genomics.v1alpha2.DeletePipelineRequest
 */
export type DeletePipelineRequest = Message<"google.genomics.v1alpha2.DeletePipelineRequest"> & {
  /**
   * Caller must have WRITE access to the project in which this pipeline
   * is defined.
   *
   * @generated from field: string pipeline_id = 1;
   */
  pipelineId: string;
};

/**
 * Describes the message google.genomics.v1alpha2.DeletePipelineRequest.
 * Use `create(DeletePipelineRequestSchema)` to create a new message.
 */
export const DeletePipelineRequestSchema: GenMessage<DeletePipelineRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 9);

/**
 * Request to get controller configuation.  Should only be used
 * by VMs created by the Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.GetControllerConfigRequest
 */
export type GetControllerConfigRequest = Message<"google.genomics.v1alpha2.GetControllerConfigRequest"> & {
  /**
   * The operation to retrieve controller configuration for.
   *
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * @generated from field: uint64 validation_token = 2;
   */
  validationToken: bigint;
};

/**
 * Describes the message google.genomics.v1alpha2.GetControllerConfigRequest.
 * Use `create(GetControllerConfigRequestSchema)` to create a new message.
 */
export const GetControllerConfigRequestSchema: GenMessage<GetControllerConfigRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 10);

/**
 * Stores the information that the controller will fetch from the
 * server in order to run. Should only be used by VMs created by the
 * Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.ControllerConfig
 */
export type ControllerConfig = Message<"google.genomics.v1alpha2.ControllerConfig"> & {
  /**
   * @generated from field: string image = 1;
   */
  image: string;

  /**
   * @generated from field: string cmd = 2;
   */
  cmd: string;

  /**
   * @generated from field: string gcs_log_path = 3;
   */
  gcsLogPath: string;

  /**
   * @generated from field: string machine_type = 4;
   */
  machineType: string;

  /**
   * @generated from field: map<string, string> vars = 5;
   */
  vars: { [key: string]: string };

  /**
   * @generated from field: map<string, string> disks = 6;
   */
  disks: { [key: string]: string };

  /**
   * @generated from field: map<string, google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sources = 7;
   */
  gcsSources: { [key: string]: ControllerConfig_RepeatedString };

  /**
   * @generated from field: map<string, google.genomics.v1alpha2.ControllerConfig.RepeatedString> gcs_sinks = 8;
   */
  gcsSinks: { [key: string]: ControllerConfig_RepeatedString };
};

/**
 * Describes the message google.genomics.v1alpha2.ControllerConfig.
 * Use `create(ControllerConfigSchema)` to create a new message.
 */
export const ControllerConfigSchema: GenMessage<ControllerConfig> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 11);

/**
 * @generated from message google.genomics.v1alpha2.ControllerConfig.RepeatedString
 */
export type ControllerConfig_RepeatedString = Message<"google.genomics.v1alpha2.ControllerConfig.RepeatedString"> & {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[];
};

/**
 * Describes the message google.genomics.v1alpha2.ControllerConfig.RepeatedString.
 * Use `create(ControllerConfig_RepeatedStringSchema)` to create a new message.
 */
export const ControllerConfig_RepeatedStringSchema: GenMessage<ControllerConfig_RepeatedString> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 11, 0);

/**
 * Stores the list of events and times they occured for major events in job
 * execution.
 *
 * @generated from message google.genomics.v1alpha2.TimestampEvent
 */
export type TimestampEvent = Message<"google.genomics.v1alpha2.TimestampEvent"> & {
  /**
   * String indicating the type of event
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * The time this event occured.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;
};

/**
 * Describes the message google.genomics.v1alpha2.TimestampEvent.
 * Use `create(TimestampEventSchema)` to create a new message.
 */
export const TimestampEventSchema: GenMessage<TimestampEvent> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 12);

/**
 * Request to set operation status. Should only be used by VMs
 * created by the Pipelines Service and not by end users.
 *
 * @generated from message google.genomics.v1alpha2.SetOperationStatusRequest
 */
export type SetOperationStatusRequest = Message<"google.genomics.v1alpha2.SetOperationStatusRequest"> & {
  /**
   * @generated from field: string operation_id = 1;
   */
  operationId: string;

  /**
   * @generated from field: repeated google.genomics.v1alpha2.TimestampEvent timestamp_events = 2;
   */
  timestampEvents: TimestampEvent[];

  /**
   * @generated from field: google.rpc.Code error_code = 3;
   */
  errorCode: Code;

  /**
   * @generated from field: string error_message = 4;
   */
  errorMessage: string;

  /**
   * @generated from field: uint64 validation_token = 5;
   */
  validationToken: bigint;
};

/**
 * Describes the message google.genomics.v1alpha2.SetOperationStatusRequest.
 * Use `create(SetOperationStatusRequestSchema)` to create a new message.
 */
export const SetOperationStatusRequestSchema: GenMessage<SetOperationStatusRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 13);

/**
 * A Google Cloud Service Account.
 *
 * @generated from message google.genomics.v1alpha2.ServiceAccount
 */
export type ServiceAccount = Message<"google.genomics.v1alpha2.ServiceAccount"> & {
  /**
   * Email address of the service account. Defaults to `default`,
   * which uses the compute service account associated with the project.
   *
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * List of scopes to be enabled for this service account on the VM.
   * The following scopes are automatically included:
   *
   * * https://www.googleapis.com/auth/compute
   * * https://www.googleapis.com/auth/devstorage.full_control
   * * https://www.googleapis.com/auth/genomics
   * * https://www.googleapis.com/auth/logging.write
   * * https://www.googleapis.com/auth/monitoring.write
   *
   * @generated from field: repeated string scopes = 2;
   */
  scopes: string[];
};

/**
 * Describes the message google.genomics.v1alpha2.ServiceAccount.
 * Use `create(ServiceAccountSchema)` to create a new message.
 */
export const ServiceAccountSchema: GenMessage<ServiceAccount> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 14);

/**
 * The logging options for the pipeline run.
 *
 * @generated from message google.genomics.v1alpha2.LoggingOptions
 */
export type LoggingOptions = Message<"google.genomics.v1alpha2.LoggingOptions"> & {
  /**
   * The location in Google Cloud Storage to which the pipeline logs
   * will be copied. Can be specified as a fully qualified directory
   * path, in which case logs will be output with a unique identifier
   * as the filename in that directory, or as a fully specified path,
   * which must end in `.log`, in which case that path will be
   * used, and the user must ensure that logs are not
   * overwritten. Stdout and stderr logs from the run are also
   * generated and output as `-stdout.log` and `-stderr.log`.
   *
   * @generated from field: string gcs_path = 1;
   */
  gcsPath: string;
};

/**
 * Describes the message google.genomics.v1alpha2.LoggingOptions.
 * Use `create(LoggingOptionsSchema)` to create a new message.
 */
export const LoggingOptionsSchema: GenMessage<LoggingOptions> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 15);

/**
 * The system resources for the pipeline run.
 *
 * @generated from message google.genomics.v1alpha2.PipelineResources
 */
export type PipelineResources = Message<"google.genomics.v1alpha2.PipelineResources"> & {
  /**
   * The minimum number of cores to use. Defaults to 1.
   *
   * @generated from field: int32 minimum_cpu_cores = 1;
   */
  minimumCpuCores: number;

  /**
   * Whether to use preemptible VMs. Defaults to `false`. In order to use this,
   * must be true for both create time and run time. Cannot be true at run time
   * if false at create time.
   *
   * @generated from field: bool preemptible = 2;
   */
  preemptible: boolean;

  /**
   * The minimum amount of RAM to use. Defaults to 3.75 (GB)
   *
   * @generated from field: double minimum_ram_gb = 3;
   */
  minimumRamGb: number;

  /**
   * Disks to attach.
   *
   * @generated from field: repeated google.genomics.v1alpha2.PipelineResources.Disk disks = 4;
   */
  disks: PipelineResources_Disk[];

  /**
   * List of Google Compute Engine availability zones to which resource
   * creation will restricted. If empty, any zone may be chosen.
   *
   * @generated from field: repeated string zones = 5;
   */
  zones: string[];

  /**
   * The size of the boot disk. Defaults to 10 (GB).
   *
   * @generated from field: int32 boot_disk_size_gb = 6;
   */
  bootDiskSizeGb: number;

  /**
   * Whether to assign an external IP to the instance. This is an experimental
   * feature that may go away. Defaults to false.
   * Corresponds to `--no_address` flag for [gcloud compute instances create]
   * (https://cloud.google.com/sdk/gcloud/reference/compute/instances/create).
   * In order to use this, must be true for both create time and run time.
   * Cannot be true at run time if false at create time. If you need to ssh into
   * a private IP VM for debugging, you can ssh to a public VM and then ssh into
   * the private VM's Internal IP.  If noAddress is set, this pipeline run may
   * only load docker images from Google Container Registry and not Docker Hub.
   * ** Note: To use this option, your project must be in Google Access for
   * Private IPs Early Access Program.**
   *
   * @generated from field: bool no_address = 7;
   */
  noAddress: boolean;
};

/**
 * Describes the message google.genomics.v1alpha2.PipelineResources.
 * Use `create(PipelineResourcesSchema)` to create a new message.
 */
export const PipelineResourcesSchema: GenMessage<PipelineResources> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 16);

/**
 * A Google Compute Engine disk resource specification.
 *
 * @generated from message google.genomics.v1alpha2.PipelineResources.Disk
 */
export type PipelineResources_Disk = Message<"google.genomics.v1alpha2.PipelineResources.Disk"> & {
  /**
   * Required. The name of the disk that can be used in the pipeline
   * parameters. Must be 1 - 63 characters.
   * The name "boot" is reserved for system use.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Required. The type of the disk to create.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineResources.Disk.Type type = 2;
   */
  type: PipelineResources_Disk_Type;

  /**
   * The size of the disk. Defaults to 500 (GB).
   * This field is not applicable for local SSD.
   *
   * @generated from field: int32 size_gb = 3;
   */
  sizeGb: number;

  /**
   * The full or partial URL of the persistent disk to attach. See
   * https://cloud.google.com/compute/docs/reference/latest/instances#resource
   * and
   * https://cloud.google.com/compute/docs/disks/persistent-disks#snapshots
   * for more details.
   *
   * @generated from field: string source = 4;
   */
  source: string;

  /**
   * Deprecated. Disks created by the Pipelines API will be deleted at the end
   * of the pipeline run, regardless of what this field is set to.
   *
   * @generated from field: bool auto_delete = 6;
   */
  autoDelete: boolean;

  /**
   * Required at create time and cannot be overridden at run time.
   * Specifies the path in the docker container where files on
   * this disk should be located. For example, if `mountPoint`
   * is `/mnt/disk`, and the parameter has `localPath`
   * `inputs/file.txt`, the docker container can access the data at
   * `/mnt/disk/inputs/file.txt`.
   *
   * @generated from field: string mount_point = 8;
   */
  mountPoint: string;
};

/**
 * Describes the message google.genomics.v1alpha2.PipelineResources.Disk.
 * Use `create(PipelineResources_DiskSchema)` to create a new message.
 */
export const PipelineResources_DiskSchema: GenMessage<PipelineResources_Disk> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 16, 0);

/**
 * The types of disks that may be attached to VMs.
 *
 * @generated from enum google.genomics.v1alpha2.PipelineResources.Disk.Type
 */
export enum PipelineResources_Disk_Type {
  /**
   * Default disk type. Use one of the other options below.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Specifies a Google Compute Engine persistent hard disk. See
   * https://cloud.google.com/compute/docs/disks/#pdspecs for details.
   *
   * @generated from enum value: PERSISTENT_HDD = 1;
   */
  PERSISTENT_HDD = 1,

  /**
   * Specifies a Google Compute Engine persistent solid-state disk. See
   * https://cloud.google.com/compute/docs/disks/#pdspecs for details.
   *
   * @generated from enum value: PERSISTENT_SSD = 2;
   */
  PERSISTENT_SSD = 2,

  /**
   * Specifies a Google Compute Engine local SSD.
   * See https://cloud.google.com/compute/docs/disks/local-ssd for details.
   *
   * @generated from enum value: LOCAL_SSD = 3;
   */
  LOCAL_SSD = 3,
}

/**
 * Describes the enum google.genomics.v1alpha2.PipelineResources.Disk.Type.
 */
export const PipelineResources_Disk_TypeSchema: GenEnum<PipelineResources_Disk_Type> = /*@__PURE__*/
  enumDesc(file_google_genomics_v1alpha2_pipelines, 16, 0, 0);

/**
 * Parameters facilitate setting and delivering data into the
 * pipeline's execution environment. They are defined at create time,
 * with optional defaults, and can be overridden at run time.
 *
 * If `localCopy` is unset, then the parameter specifies a string that
 * is passed as-is into the pipeline, as the value of the environment
 * variable with the given name.  A default value can be optionally
 * specified at create time. The default can be overridden at run time
 * using the inputs map. If no default is given, a value must be
 * supplied at runtime.
 *
 * If `localCopy` is defined, then the parameter specifies a data
 * source or sink, both in Google Cloud Storage and on the Docker container
 * where the pipeline computation is run. The [service account associated with
 * the Pipeline][google.genomics.v1alpha2.RunPipelineArgs.service_account] (by
 * default the project's Compute Engine service account) must have access to the
 * Google Cloud Storage paths.
 *
 * At run time, the Google Cloud Storage paths can be overridden if a default
 * was provided at create time, or must be set otherwise. The pipeline runner
 * should add a key/value pair to either the inputs or outputs map. The
 * indicated data copies will be carried out before/after pipeline execution,
 * just as if the corresponding arguments were provided to `gsutil cp`.
 *
 * For example: Given the following `PipelineParameter`, specified
 * in the `inputParameters` list:
 *
 * ```
 * {name: "input_file", localCopy: {path: "file.txt", disk: "pd1"}}
 * ```
 *
 * where `disk` is defined in the `PipelineResources` object as:
 *
 * ```
 * {name: "pd1", mountPoint: "/mnt/disk/"}
 * ```
 *
 * We create a disk named `pd1`, mount it on the host VM, and map
 * `/mnt/pd1` to `/mnt/disk` in the docker container.  At
 * runtime, an entry for `input_file` would be required in the inputs
 * map, such as:
 *
 * ```
 *   inputs["input_file"] = "gs://my-bucket/bar.txt"
 * ```
 *
 * This would generate the following gsutil call:
 *
 * ```
 *   gsutil cp gs://my-bucket/bar.txt /mnt/pd1/file.txt
 * ```
 *
 * The file `/mnt/pd1/file.txt` maps to `/mnt/disk/file.txt` in the
 * Docker container. Acceptable paths are:
 *
 * <table>
 *   <thead>
 *     <tr><th>Google Cloud storage path</th><th>Local path</th></tr>
 *   </thead>
 *   <tbody>
 *     <tr><td>file</td><td>file</td></tr>
 *     <tr><td>glob</td><td>directory</td></tr>
 *   </tbody>
 * </table>
 *
 * For outputs, the direction of the copy is reversed:
 *
 * ```
 *   gsutil cp /mnt/disk/file.txt gs://my-bucket/bar.txt
 * ```
 *
 * Acceptable paths are:
 *
 * <table>
 *   <thead>
 *     <tr><th>Local path</th><th>Google Cloud Storage path</th></tr>
 *   </thead>
 *   <tbody>
 *     <tr><td>file</td><td>file</td></tr>
 *     <tr>
 *       <td>file</td>
 *       <td>directory - directory must already exist</td>
 *     </tr>
 *     <tr>
 *       <td>glob</td>
 *       <td>directory - directory will be created if it doesn't exist</td></tr>
 *   </tbody>
 * </table>
 *
 * One restriction due to docker limitations, is that for outputs that are found
 * on the boot disk, the local path cannot be a glob and must be a file.
 *
 * @generated from message google.genomics.v1alpha2.PipelineParameter
 */
export type PipelineParameter = Message<"google.genomics.v1alpha2.PipelineParameter"> & {
  /**
   * Required. Name of the parameter - the pipeline runner uses this string
   * as the key to the input and output maps in RunPipeline.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Human-readable description.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The default value for this parameter. Can be overridden at runtime.
   * If `localCopy` is present, then this must be a Google Cloud Storage path
   * beginning with `gs://`.
   *
   * @generated from field: string default_value = 5;
   */
  defaultValue: string;

  /**
   * If present, this parameter is marked for copying to and from the VM.
   * `LocalCopy` indicates where on the VM the file should be. The value
   * given to this parameter (either at runtime or using `defaultValue`)
   * must be the remote path where the file should be.
   *
   * @generated from field: google.genomics.v1alpha2.PipelineParameter.LocalCopy local_copy = 6;
   */
  localCopy?: PipelineParameter_LocalCopy;
};

/**
 * Describes the message google.genomics.v1alpha2.PipelineParameter.
 * Use `create(PipelineParameterSchema)` to create a new message.
 */
export const PipelineParameterSchema: GenMessage<PipelineParameter> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 17);

/**
 * LocalCopy defines how a remote file should be copied to and from the VM.
 *
 * @generated from message google.genomics.v1alpha2.PipelineParameter.LocalCopy
 */
export type PipelineParameter_LocalCopy = Message<"google.genomics.v1alpha2.PipelineParameter.LocalCopy"> & {
  /**
   * Required. The path within the user's docker container where
   * this input should be localized to and from, relative to the specified
   * disk's mount point. For example: file.txt,
   *
   * @generated from field: string path = 1;
   */
  path: string;

  /**
   * Required. The name of the disk where this parameter is
   * located. Can be the name of one of the disks specified in the
   * Resources field, or "boot", which represents the Docker
   * instance's boot disk and has a mount point of `/`.
   *
   * @generated from field: string disk = 2;
   */
  disk: string;
};

/**
 * Describes the message google.genomics.v1alpha2.PipelineParameter.LocalCopy.
 * Use `create(PipelineParameter_LocalCopySchema)` to create a new message.
 */
export const PipelineParameter_LocalCopySchema: GenMessage<PipelineParameter_LocalCopy> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 17, 0);

/**
 * The Docker execuctor specification.
 *
 * @generated from message google.genomics.v1alpha2.DockerExecutor
 */
export type DockerExecutor = Message<"google.genomics.v1alpha2.DockerExecutor"> & {
  /**
   * Required. Image name from either Docker Hub or Google Container Registry.
   * Users that run pipelines must have READ access to the image.
   *
   * @generated from field: string image_name = 1;
   */
  imageName: string;

  /**
   * Required. The command or newline delimited script to run. The command
   * string will be executed within a bash shell.
   *
   * If the command exits with a non-zero exit code, output parameter
   * de-localization will be skipped and the pipeline operation's
   * [`error`][google.longrunning.Operation.error] field will be populated.
   *
   * Maximum command string length is 16384.
   *
   * @generated from field: string cmd = 2;
   */
  cmd: string;
};

/**
 * Describes the message google.genomics.v1alpha2.DockerExecutor.
 * Use `create(DockerExecutorSchema)` to create a new message.
 */
export const DockerExecutorSchema: GenMessage<DockerExecutor> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1alpha2_pipelines, 18);

/**
 * A service for running genomics pipelines.
 *
 * @generated from service google.genomics.v1alpha2.PipelinesV1Alpha2
 */
export const PipelinesV1Alpha2: GenService<{
  /**
   * Creates a pipeline that can be run later. Create takes a Pipeline that
   * has all fields other than `pipelineId` populated, and then returns
   * the same pipeline with `pipelineId` populated. This id can be used
   * to run the pipeline.
   *
   * Caller must have WRITE permission to the project.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.CreatePipeline
   */
  createPipeline: {
    methodKind: "unary";
    input: typeof CreatePipelineRequestSchema;
    output: typeof PipelineSchema;
  },
  /**
   * Runs a pipeline. If `pipelineId` is specified in the request, then
   * run a saved pipeline. If `ephemeralPipeline` is specified, then run
   * that pipeline once without saving a copy.
   *
   * The caller must have READ permission to the project where the pipeline
   * is stored and WRITE permission to the project where the pipeline will be
   * run, as VMs will be created and storage will be used.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.RunPipeline
   */
  runPipeline: {
    methodKind: "unary";
    input: typeof RunPipelineRequestSchema;
    output: typeof OperationSchema;
  },
  /**
   * Retrieves a pipeline based on ID.
   *
   * Caller must have READ permission to the project.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.GetPipeline
   */
  getPipeline: {
    methodKind: "unary";
    input: typeof GetPipelineRequestSchema;
    output: typeof PipelineSchema;
  },
  /**
   * Lists pipelines.
   *
   * Caller must have READ permission to the project.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.ListPipelines
   */
  listPipelines: {
    methodKind: "unary";
    input: typeof ListPipelinesRequestSchema;
    output: typeof ListPipelinesResponseSchema;
  },
  /**
   * Deletes a pipeline based on ID.
   *
   * Caller must have WRITE permission to the project.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.DeletePipeline
   */
  deletePipeline: {
    methodKind: "unary";
    input: typeof DeletePipelineRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets controller configuration information. Should only be called
   * by VMs created by the Pipelines Service and not by end users.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.GetControllerConfig
   */
  getControllerConfig: {
    methodKind: "unary";
    input: typeof GetControllerConfigRequestSchema;
    output: typeof ControllerConfigSchema;
  },
  /**
   * Sets status of a given operation. Any new timestamps (as determined by
   * description) are appended to TimestampEvents. Should only be called by VMs
   * created by the Pipelines Service and not by end users.
   *
   * @generated from rpc google.genomics.v1alpha2.PipelinesV1Alpha2.SetOperationStatus
   */
  setOperationStatus: {
    methodKind: "unary";
    input: typeof SetOperationStatusRequestSchema;
    output: typeof EmptySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_genomics_v1alpha2_pipelines, 0);

