// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/genomics/v1/cigar.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/genomics/v1/cigar.proto.
 */
export const file_google_genomics_v1_cigar: GenFile = /*@__PURE__*/
  fileDesc("Ch5nb29nbGUvZ2Vub21pY3MvdjEvY2lnYXIucHJvdG8SEmdvb2dsZS5nZW5vbWljcy52MSKvAgoJQ2lnYXJVbml0EjoKCW9wZXJhdGlvbhgBIAEoDjInLmdvb2dsZS5nZW5vbWljcy52MS5DaWdhclVuaXQuT3BlcmF0aW9uEhgKEG9wZXJhdGlvbl9sZW5ndGgYAiABKAMSGgoScmVmZXJlbmNlX3NlcXVlbmNlGAMgASgJIq8BCglPcGVyYXRpb24SGQoVT1BFUkFUSU9OX1VOU1BFQ0lGSUVEEAASEwoPQUxJR05NRU5UX01BVENIEAESCgoGSU5TRVJUEAISCgoGREVMRVRFEAMSCAoEU0tJUBAEEg0KCUNMSVBfU09GVBAFEg0KCUNMSVBfSEFSRBAGEgcKA1BBRBAHEhIKDlNFUVVFTkNFX01BVENIEAgSFQoRU0VRVUVOQ0VfTUlTTUFUQ0gQCUJlChZjb20uZ29vZ2xlLmdlbm9taWNzLnYxQgpDaWdhclByb3RvUAFaOmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ2Vub21pY3MvdjE7Z2Vub21pY3P4AQFiBnByb3RvMw", [file_google_api_annotations]);

/**
 * A single CIGAR operation.
 *
 * @generated from message google.genomics.v1.CigarUnit
 */
export type CigarUnit = Message<"google.genomics.v1.CigarUnit"> & {
  /**
   * @generated from field: google.genomics.v1.CigarUnit.Operation operation = 1;
   */
  operation: CigarUnit_Operation;

  /**
   * The number of genomic bases that the operation runs for. Required.
   *
   * @generated from field: int64 operation_length = 2;
   */
  operationLength: bigint;

  /**
   * `referenceSequence` is only used at mismatches
   * (`SEQUENCE_MISMATCH`) and deletions (`DELETE`).
   * Filling this field replaces SAM's MD tag. If the relevant information is
   * not available, this field is unset.
   *
   * @generated from field: string reference_sequence = 3;
   */
  referenceSequence: string;
};

/**
 * Describes the message google.genomics.v1.CigarUnit.
 * Use `create(CigarUnitSchema)` to create a new message.
 */
export const CigarUnitSchema: GenMessage<CigarUnit> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_cigar, 0);

/**
 * Describes the different types of CIGAR alignment operations that exist.
 * Used wherever CIGAR alignments are used.
 *
 * @generated from enum google.genomics.v1.CigarUnit.Operation
 */
export enum CigarUnit_Operation {
  /**
   * @generated from enum value: OPERATION_UNSPECIFIED = 0;
   */
  OPERATION_UNSPECIFIED = 0,

  /**
   * An alignment match indicates that a sequence can be aligned to the
   * reference without evidence of an INDEL. Unlike the
   * `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators,
   * the `ALIGNMENT_MATCH` operator does not indicate whether the
   * reference and read sequences are an exact match. This operator is
   * equivalent to SAM's `M`.
   *
   * @generated from enum value: ALIGNMENT_MATCH = 1;
   */
  ALIGNMENT_MATCH = 1,

  /**
   * The insert operator indicates that the read contains evidence of bases
   * being inserted into the reference. This operator is equivalent to SAM's
   * `I`.
   *
   * @generated from enum value: INSERT = 2;
   */
  INSERT = 2,

  /**
   * The delete operator indicates that the read contains evidence of bases
   * being deleted from the reference. This operator is equivalent to SAM's
   * `D`.
   *
   * @generated from enum value: DELETE = 3;
   */
  DELETE = 3,

  /**
   * The skip operator indicates that this read skips a long segment of the
   * reference, but the bases have not been deleted. This operator is commonly
   * used when working with RNA-seq data, where reads may skip long segments
   * of the reference between exons. This operator is equivalent to SAM's
   * `N`.
   *
   * @generated from enum value: SKIP = 4;
   */
  SKIP = 4,

  /**
   * The soft clip operator indicates that bases at the start/end of a read
   * have not been considered during alignment. This may occur if the majority
   * of a read maps, except for low quality bases at the start/end of a read.
   * This operator is equivalent to SAM's `S`. Bases that are soft
   * clipped will still be stored in the read.
   *
   * @generated from enum value: CLIP_SOFT = 5;
   */
  CLIP_SOFT = 5,

  /**
   * The hard clip operator indicates that bases at the start/end of a read
   * have been omitted from this alignment. This may occur if this linear
   * alignment is part of a chimeric alignment, or if the read has been
   * trimmed (for example, during error correction or to trim poly-A tails for
   * RNA-seq). This operator is equivalent to SAM's `H`.
   *
   * @generated from enum value: CLIP_HARD = 6;
   */
  CLIP_HARD = 6,

  /**
   * The pad operator indicates that there is padding in an alignment. This
   * operator is equivalent to SAM's `P`.
   *
   * @generated from enum value: PAD = 7;
   */
  PAD = 7,

  /**
   * This operator indicates that this portion of the aligned sequence exactly
   * matches the reference. This operator is equivalent to SAM's `=`.
   *
   * @generated from enum value: SEQUENCE_MATCH = 8;
   */
  SEQUENCE_MATCH = 8,

  /**
   * This operator indicates that this portion of the aligned sequence is an
   * alignment match to the reference, but a sequence mismatch. This can
   * indicate a SNP or a read error. This operator is equivalent to SAM's
   * `X`.
   *
   * @generated from enum value: SEQUENCE_MISMATCH = 9;
   */
  SEQUENCE_MISMATCH = 9,
}

/**
 * Describes the enum google.genomics.v1.CigarUnit.Operation.
 */
export const CigarUnit_OperationSchema: GenEnum<CigarUnit_Operation> = /*@__PURE__*/
  enumDesc(file_google_genomics_v1_cigar, 0, 0);

