// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/genomics/v1/references.proto (package google.genomics.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_annotations } from "../../api/annotations_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/genomics/v1/references.proto.
 */
export const file_google_genomics_v1_references: GenFile = /*@__PURE__*/
  fileDesc("CiNnb29nbGUvZ2Vub21pY3MvdjEvcmVmZXJlbmNlcy5wcm90bxISZ29vZ2xlLmdlbm9taWNzLnYxIpABCglSZWZlcmVuY2USCgoCaWQYASABKAkSDgoGbGVuZ3RoGAIgASgDEhMKC21kNWNoZWNrc3VtGAMgASgJEgwKBG5hbWUYBCABKAkSEgoKc291cmNlX3VyaRgFIAEoCRIZChFzb3VyY2VfYWNjZXNzaW9ucxgGIAMoCRIVCg1uY2JpX3RheG9uX2lkGAcgASgFIrYBCgxSZWZlcmVuY2VTZXQSCgoCaWQYASABKAkSFQoNcmVmZXJlbmNlX2lkcxgCIAMoCRITCgttZDVjaGVja3N1bRgDIAEoCRIVCg1uY2JpX3RheG9uX2lkGAQgASgFEhMKC2Rlc2NyaXB0aW9uGAUgASgJEhMKC2Fzc2VtYmx5X2lkGAYgASgJEhIKCnNvdXJjZV91cmkYByABKAkSGQoRc291cmNlX2FjY2Vzc2lvbnMYCCADKAkiggEKGlNlYXJjaFJlZmVyZW5jZVNldHNSZXF1ZXN0EhQKDG1kNWNoZWNrc3VtcxgBIAMoCRISCgphY2Nlc3Npb25zGAIgAygJEhMKC2Fzc2VtYmx5X2lkGAMgASgJEhIKCnBhZ2VfdG9rZW4YBCABKAkSEQoJcGFnZV9zaXplGAUgASgFInAKG1NlYXJjaFJlZmVyZW5jZVNldHNSZXNwb25zZRI4Cg5yZWZlcmVuY2Vfc2V0cxgBIAMoCzIgLmdvb2dsZS5nZW5vbWljcy52MS5SZWZlcmVuY2VTZXQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIjIKFkdldFJlZmVyZW5jZVNldFJlcXVlc3QSGAoQcmVmZXJlbmNlX3NldF9pZBgBIAEoCSKEAQoXU2VhcmNoUmVmZXJlbmNlc1JlcXVlc3QSFAoMbWQ1Y2hlY2tzdW1zGAEgAygJEhIKCmFjY2Vzc2lvbnMYAiADKAkSGAoQcmVmZXJlbmNlX3NldF9pZBgDIAEoCRISCgpwYWdlX3Rva2VuGAQgASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBSJmChhTZWFyY2hSZWZlcmVuY2VzUmVzcG9uc2USMQoKcmVmZXJlbmNlcxgBIAMoCzIdLmdvb2dsZS5nZW5vbWljcy52MS5SZWZlcmVuY2USFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIisKE0dldFJlZmVyZW5jZVJlcXVlc3QSFAoMcmVmZXJlbmNlX2lkGAEgASgJImsKEExpc3RCYXNlc1JlcXVlc3QSFAoMcmVmZXJlbmNlX2lkGAEgASgJEg0KBXN0YXJ0GAIgASgDEgsKA2VuZBgDIAEoAxISCgpwYWdlX3Rva2VuGAQgASgJEhEKCXBhZ2Vfc2l6ZRgFIAEoBSJOChFMaXN0QmFzZXNSZXNwb25zZRIOCgZvZmZzZXQYASABKAMSEAoIc2VxdWVuY2UYAiABKAkSFwoPbmV4dF9wYWdlX3Rva2VuGAMgASgJMtsFChJSZWZlcmVuY2VTZXJ2aWNlVjESmwEKE1NlYXJjaFJlZmVyZW5jZVNldHMSLi5nb29nbGUuZ2Vub21pY3MudjEuU2VhcmNoUmVmZXJlbmNlU2V0c1JlcXVlc3QaLy5nb29nbGUuZ2Vub21pY3MudjEuU2VhcmNoUmVmZXJlbmNlU2V0c1Jlc3BvbnNlIiOC0+STAh06ASoiGC92MS9yZWZlcmVuY2VzZXRzL3NlYXJjaBKNAQoPR2V0UmVmZXJlbmNlU2V0EiouZ29vZ2xlLmdlbm9taWNzLnYxLkdldFJlZmVyZW5jZVNldFJlcXVlc3QaIC5nb29nbGUuZ2Vub21pY3MudjEuUmVmZXJlbmNlU2V0IiyC0+STAiYSJC92MS9yZWZlcmVuY2VzZXRzL3tyZWZlcmVuY2Vfc2V0X2lkfRKPAQoQU2VhcmNoUmVmZXJlbmNlcxIrLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hSZWZlcmVuY2VzUmVxdWVzdBosLmdvb2dsZS5nZW5vbWljcy52MS5TZWFyY2hSZWZlcmVuY2VzUmVzcG9uc2UiIILT5JMCGjoBKiIVL3YxL3JlZmVyZW5jZXMvc2VhcmNoEn0KDEdldFJlZmVyZW5jZRInLmdvb2dsZS5nZW5vbWljcy52MS5HZXRSZWZlcmVuY2VSZXF1ZXN0Gh0uZ29vZ2xlLmdlbm9taWNzLnYxLlJlZmVyZW5jZSIlgtPkkwIfEh0vdjEvcmVmZXJlbmNlcy97cmVmZXJlbmNlX2lkfRKFAQoJTGlzdEJhc2VzEiQuZ29vZ2xlLmdlbm9taWNzLnYxLkxpc3RCYXNlc1JlcXVlc3QaJS5nb29nbGUuZ2Vub21pY3MudjEuTGlzdEJhc2VzUmVzcG9uc2UiK4LT5JMCJRIjL3YxL3JlZmVyZW5jZXMve3JlZmVyZW5jZV9pZH0vYmFzZXNCagoWY29tLmdvb2dsZS5nZW5vbWljcy52MUIPUmVmZXJlbmNlc1Byb3RvUAFaOmdvb2dsZS5nb2xhbmcub3JnL2dlbnByb3RvL2dvb2dsZWFwaXMvZ2Vub21pY3MvdjE7Z2Vub21pY3P4AQFiBnByb3RvMw", [file_google_api_annotations]);

/**
 * A reference is a canonical assembled DNA sequence, intended to act as a
 * reference coordinate space for other genomic annotations. A single reference
 * might represent the human chromosome 1 or mitochandrial DNA, for instance. A
 * reference belongs to one or more reference sets.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * @generated from message google.genomics.v1.Reference
 */
export type Reference = Message<"google.genomics.v1.Reference"> & {
  /**
   * The server-generated reference ID, unique across all references.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The length of this reference's sequence.
   *
   * @generated from field: int64 length = 2;
   */
  length: bigint;

  /**
   * MD5 of the upper-case sequence excluding all whitespace characters (this
   * is equivalent to SQ:M5 in SAM). This value is represented in lower case
   * hexadecimal format.
   *
   * @generated from field: string md5checksum = 3;
   */
  md5checksum: string;

  /**
   * The name of this reference, for example `22`.
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * The URI from which the sequence was obtained. Typically specifies a FASTA
   * format file.
   *
   * @generated from field: string source_uri = 5;
   */
  sourceUri: string;

  /**
   * All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
   * with a version number, for example `GCF_000001405.26`.
   *
   * @generated from field: repeated string source_accessions = 6;
   */
  sourceAccessions: string[];

  /**
   * ID from http://www.ncbi.nlm.nih.gov/taxonomy. For example, 9606 for human.
   *
   * @generated from field: int32 ncbi_taxon_id = 7;
   */
  ncbiTaxonId: number;
};

/**
 * Describes the message google.genomics.v1.Reference.
 * Use `create(ReferenceSchema)` to create a new message.
 */
export const ReferenceSchema: GenMessage<Reference> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 0);

/**
 * A reference set is a set of references which typically comprise a reference
 * assembly for a species, such as `GRCh38` which is representative
 * of the human genome. A reference set defines a common coordinate space for
 * comparing reference-aligned experimental data. A reference set contains 1 or
 * more references.
 *
 * For more genomics resource definitions, see [Fundamentals of Google
 * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
 *
 * @generated from message google.genomics.v1.ReferenceSet
 */
export type ReferenceSet = Message<"google.genomics.v1.ReferenceSet"> & {
  /**
   * The server-generated reference set ID, unique across all reference sets.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The IDs of the reference objects that are part of this set.
   * `Reference.md5checksum` must be unique within this set.
   *
   * @generated from field: repeated string reference_ids = 2;
   */
  referenceIds: string[];

  /**
   * Order-independent MD5 checksum which identifies this reference set. The
   * checksum is computed by sorting all lower case hexidecimal string
   * `reference.md5checksum` (for all reference in this set) in
   * ascending lexicographic order, concatenating, and taking the MD5 of that
   * value. The resulting value is represented in lower case hexadecimal format.
   *
   * @generated from field: string md5checksum = 3;
   */
  md5checksum: string;

  /**
   * ID from http://www.ncbi.nlm.nih.gov/taxonomy (for example, 9606 for human)
   * indicating the species which this reference set is intended to model. Note
   * that contained references may specify a different `ncbiTaxonId`, as
   * assemblies may contain reference sequences which do not belong to the
   * modeled species, for example EBV in a human reference genome.
   *
   * @generated from field: int32 ncbi_taxon_id = 4;
   */
  ncbiTaxonId: number;

  /**
   * Free text description of this reference set.
   *
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * Public id of this reference set, such as `GRCh37`.
   *
   * @generated from field: string assembly_id = 6;
   */
  assemblyId: string;

  /**
   * The URI from which the references were obtained.
   *
   * @generated from field: string source_uri = 7;
   */
  sourceUri: string;

  /**
   * All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally
   * with a version number, for example `NC_000001.11`.
   *
   * @generated from field: repeated string source_accessions = 8;
   */
  sourceAccessions: string[];
};

/**
 * Describes the message google.genomics.v1.ReferenceSet.
 * Use `create(ReferenceSetSchema)` to create a new message.
 */
export const ReferenceSetSchema: GenMessage<ReferenceSet> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 1);

/**
 * @generated from message google.genomics.v1.SearchReferenceSetsRequest
 */
export type SearchReferenceSetsRequest = Message<"google.genomics.v1.SearchReferenceSetsRequest"> & {
  /**
   * If present, return reference sets for which the
   * [md5checksum][google.genomics.v1.ReferenceSet.md5checksum] matches exactly.
   *
   * @generated from field: repeated string md5checksums = 1;
   */
  md5checksums: string[];

  /**
   * If present, return reference sets for which a prefix of any of
   * [sourceAccessions][google.genomics.v1.ReferenceSet.source_accessions]
   * match any of these strings. Accession numbers typically have a main number
   * and a version, for example `NC_000001.11`.
   *
   * @generated from field: repeated string accessions = 2;
   */
  accessions: string[];

  /**
   * If present, return reference sets for which a substring of their
   * `assemblyId` matches this string (case insensitive).
   *
   * @generated from field: string assembly_id = 3;
   */
  assemblyId: string;

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  /**
   * The maximum number of results to return in a single page. If unspecified,
   * defaults to 1024. The maximum value is 4096.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize: number;
};

/**
 * Describes the message google.genomics.v1.SearchReferenceSetsRequest.
 * Use `create(SearchReferenceSetsRequestSchema)` to create a new message.
 */
export const SearchReferenceSetsRequestSchema: GenMessage<SearchReferenceSetsRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 2);

/**
 * @generated from message google.genomics.v1.SearchReferenceSetsResponse
 */
export type SearchReferenceSetsResponse = Message<"google.genomics.v1.SearchReferenceSetsResponse"> & {
  /**
   * The matching references sets.
   *
   * @generated from field: repeated google.genomics.v1.ReferenceSet reference_sets = 1;
   */
  referenceSets: ReferenceSet[];

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.genomics.v1.SearchReferenceSetsResponse.
 * Use `create(SearchReferenceSetsResponseSchema)` to create a new message.
 */
export const SearchReferenceSetsResponseSchema: GenMessage<SearchReferenceSetsResponse> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 3);

/**
 * @generated from message google.genomics.v1.GetReferenceSetRequest
 */
export type GetReferenceSetRequest = Message<"google.genomics.v1.GetReferenceSetRequest"> & {
  /**
   * The ID of the reference set.
   *
   * @generated from field: string reference_set_id = 1;
   */
  referenceSetId: string;
};

/**
 * Describes the message google.genomics.v1.GetReferenceSetRequest.
 * Use `create(GetReferenceSetRequestSchema)` to create a new message.
 */
export const GetReferenceSetRequestSchema: GenMessage<GetReferenceSetRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 4);

/**
 * @generated from message google.genomics.v1.SearchReferencesRequest
 */
export type SearchReferencesRequest = Message<"google.genomics.v1.SearchReferencesRequest"> & {
  /**
   * If present, return references for which the
   * [md5checksum][google.genomics.v1.Reference.md5checksum] matches exactly.
   *
   * @generated from field: repeated string md5checksums = 1;
   */
  md5checksums: string[];

  /**
   * If present, return references for which a prefix of any of
   * [sourceAccessions][google.genomics.v1.Reference.source_accessions] match
   * any of these strings. Accession numbers typically have a main number and a
   * version, for example `GCF_000001405.26`.
   *
   * @generated from field: repeated string accessions = 2;
   */
  accessions: string[];

  /**
   * If present, return only references which belong to this reference set.
   *
   * @generated from field: string reference_set_id = 3;
   */
  referenceSetId: string;

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  /**
   * The maximum number of results to return in a single page. If unspecified,
   * defaults to 1024. The maximum value is 4096.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize: number;
};

/**
 * Describes the message google.genomics.v1.SearchReferencesRequest.
 * Use `create(SearchReferencesRequestSchema)` to create a new message.
 */
export const SearchReferencesRequestSchema: GenMessage<SearchReferencesRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 5);

/**
 * @generated from message google.genomics.v1.SearchReferencesResponse
 */
export type SearchReferencesResponse = Message<"google.genomics.v1.SearchReferencesResponse"> & {
  /**
   * The matching references.
   *
   * @generated from field: repeated google.genomics.v1.Reference references = 1;
   */
  references: Reference[];

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.genomics.v1.SearchReferencesResponse.
 * Use `create(SearchReferencesResponseSchema)` to create a new message.
 */
export const SearchReferencesResponseSchema: GenMessage<SearchReferencesResponse> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 6);

/**
 * @generated from message google.genomics.v1.GetReferenceRequest
 */
export type GetReferenceRequest = Message<"google.genomics.v1.GetReferenceRequest"> & {
  /**
   * The ID of the reference.
   *
   * @generated from field: string reference_id = 1;
   */
  referenceId: string;
};

/**
 * Describes the message google.genomics.v1.GetReferenceRequest.
 * Use `create(GetReferenceRequestSchema)` to create a new message.
 */
export const GetReferenceRequestSchema: GenMessage<GetReferenceRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 7);

/**
 * @generated from message google.genomics.v1.ListBasesRequest
 */
export type ListBasesRequest = Message<"google.genomics.v1.ListBasesRequest"> & {
  /**
   * The ID of the reference.
   *
   * @generated from field: string reference_id = 1;
   */
  referenceId: string;

  /**
   * The start position (0-based) of this query. Defaults to 0.
   *
   * @generated from field: int64 start = 2;
   */
  start: bigint;

  /**
   * The end position (0-based, exclusive) of this query. Defaults to the length
   * of this reference.
   *
   * @generated from field: int64 end = 3;
   */
  end: bigint;

  /**
   * The continuation token, which is used to page through large result sets.
   * To get the next page of results, set this parameter to the value of
   * `nextPageToken` from the previous response.
   *
   * @generated from field: string page_token = 4;
   */
  pageToken: string;

  /**
   * The maximum number of bases to return in a single page. If unspecified,
   * defaults to 200Kbp (kilo base pairs). The maximum value is 10Mbp (mega base
   * pairs).
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize: number;
};

/**
 * Describes the message google.genomics.v1.ListBasesRequest.
 * Use `create(ListBasesRequestSchema)` to create a new message.
 */
export const ListBasesRequestSchema: GenMessage<ListBasesRequest> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 8);

/**
 * @generated from message google.genomics.v1.ListBasesResponse
 */
export type ListBasesResponse = Message<"google.genomics.v1.ListBasesResponse"> & {
  /**
   * The offset position (0-based) of the given `sequence` from the
   * start of this `Reference`. This value will differ for each page
   * in a paginated request.
   *
   * @generated from field: int64 offset = 1;
   */
  offset: bigint;

  /**
   * A substring of the bases that make up this reference.
   *
   * @generated from field: string sequence = 2;
   */
  sequence: string;

  /**
   * The continuation token, which is used to page through large result sets.
   * Provide this value in a subsequent request to return the next page of
   * results. This field will be empty if there aren't any additional results.
   *
   * @generated from field: string next_page_token = 3;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.genomics.v1.ListBasesResponse.
 * Use `create(ListBasesResponseSchema)` to create a new message.
 */
export const ListBasesResponseSchema: GenMessage<ListBasesResponse> = /*@__PURE__*/
  messageDesc(file_google_genomics_v1_references, 9);

/**
 * @generated from service google.genomics.v1.ReferenceServiceV1
 */
export const ReferenceServiceV1: GenService<{
  /**
   * Searches for reference sets which match the given criteria.
   *
   * For the definitions of references and other genomics resources, see
   * [Fundamentals of Google
   * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
   *
   * Implements
   * [GlobalAllianceApi.searchReferenceSets](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L71)
   *
   * @generated from rpc google.genomics.v1.ReferenceServiceV1.SearchReferenceSets
   */
  searchReferenceSets: {
    methodKind: "unary";
    input: typeof SearchReferenceSetsRequestSchema;
    output: typeof SearchReferenceSetsResponseSchema;
  },
  /**
   * Gets a reference set.
   *
   * For the definitions of references and other genomics resources, see
   * [Fundamentals of Google
   * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
   *
   * Implements
   * [GlobalAllianceApi.getReferenceSet](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L83).
   *
   * @generated from rpc google.genomics.v1.ReferenceServiceV1.GetReferenceSet
   */
  getReferenceSet: {
    methodKind: "unary";
    input: typeof GetReferenceSetRequestSchema;
    output: typeof ReferenceSetSchema;
  },
  /**
   * Searches for references which match the given criteria.
   *
   * For the definitions of references and other genomics resources, see
   * [Fundamentals of Google
   * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
   *
   * Implements
   * [GlobalAllianceApi.searchReferences](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L146).
   *
   * @generated from rpc google.genomics.v1.ReferenceServiceV1.SearchReferences
   */
  searchReferences: {
    methodKind: "unary";
    input: typeof SearchReferencesRequestSchema;
    output: typeof SearchReferencesResponseSchema;
  },
  /**
   * Gets a reference.
   *
   * For the definitions of references and other genomics resources, see
   * [Fundamentals of Google
   * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
   *
   * Implements
   * [GlobalAllianceApi.getReference](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L158).
   *
   * @generated from rpc google.genomics.v1.ReferenceServiceV1.GetReference
   */
  getReference: {
    methodKind: "unary";
    input: typeof GetReferenceRequestSchema;
    output: typeof ReferenceSchema;
  },
  /**
   * Lists the bases in a reference, optionally restricted to a range.
   *
   * For the definitions of references and other genomics resources, see
   * [Fundamentals of Google
   * Genomics](https://cloud.google.com/genomics/fundamentals-of-google-genomics)
   *
   * Implements
   * [GlobalAllianceApi.getReferenceBases](https://github.com/ga4gh/schemas/blob/v0.5.1/src/main/resources/avro/referencemethods.avdl#L221).
   *
   * @generated from rpc google.genomics.v1.ReferenceServiceV1.ListBases
   */
  listBases: {
    methodKind: "unary";
    input: typeof ListBasesRequestSchema;
    output: typeof ListBasesResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_google_genomics_v1_references, 0);

