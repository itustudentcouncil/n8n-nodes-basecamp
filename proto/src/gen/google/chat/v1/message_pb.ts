// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/message.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { ButtonList, Card, SelectionInput_SelectionItem } from "../../apps/card/v1/card_pb";
import { file_google_apps_card_v1_card } from "../../apps/card/v1/card_pb";
import type { ActionStatus } from "./action_status_pb";
import { file_google_chat_v1_action_status } from "./action_status_pb";
import type { Annotation } from "./annotation_pb";
import { file_google_chat_v1_annotation } from "./annotation_pb";
import type { Attachment } from "./attachment_pb";
import { file_google_chat_v1_attachment } from "./attachment_pb";
import type { ContextualAddOnMarkup_Card } from "./contextual_addon_pb";
import { file_google_chat_v1_contextual_addon } from "./contextual_addon_pb";
import type { DeletionMetadata } from "./deletion_metadata_pb";
import { file_google_chat_v1_deletion_metadata } from "./deletion_metadata_pb";
import type { MatchedUrl } from "./matched_url_pb";
import { file_google_chat_v1_matched_url } from "./matched_url_pb";
import type { EmojiReactionSummary } from "./reaction_pb";
import { file_google_chat_v1_reaction } from "./reaction_pb";
import type { SlashCommand } from "./slash_command_pb";
import { file_google_chat_v1_slash_command } from "./slash_command_pb";
import type { Space } from "./space_pb";
import { file_google_chat_v1_space } from "./space_pb";
import type { User } from "./user_pb";
import { file_google_chat_v1_user } from "./user_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/message.proto.
 */
export const file_google_chat_v1_message: GenFile = /*@__PURE__*/
  fileDesc("Chxnb29nbGUvY2hhdC92MS9tZXNzYWdlLnByb3RvEg5nb29nbGUuY2hhdC52MSKpCgoHTWVzc2FnZRIMCgRuYW1lGAEgASgJEikKBnNlbmRlchgCIAEoCzIULmdvb2dsZS5jaGF0LnYxLlVzZXJCA+BBAxI3CgtjcmVhdGVfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBuBBBeBBARI5ChBsYXN0X3VwZGF0ZV90aW1lGBcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEjQKC2RlbGV0ZV90aW1lGBogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDEgwKBHRleHQYBCABKAkSGwoOZm9ybWF0dGVkX3RleHQYKyABKAlCA+BBAxI9CgVjYXJkcxgFIAMoCzIqLmdvb2dsZS5jaGF0LnYxLkNvbnRleHR1YWxBZGRPbk1hcmt1cC5DYXJkQgIYARIsCghjYXJkc192MhgWIAMoCzIaLmdvb2dsZS5jaGF0LnYxLkNhcmRXaXRoSWQSNAoLYW5ub3RhdGlvbnMYCiADKAsyGi5nb29nbGUuY2hhdC52MS5Bbm5vdGF0aW9uQgPgQQMSJgoGdGhyZWFkGAsgASgLMhYuZ29vZ2xlLmNoYXQudjEuVGhyZWFkEiQKBXNwYWNlGAwgASgLMhUuZ29vZ2xlLmNoYXQudjEuU3BhY2USFQoNZmFsbGJhY2tfdGV4dBgNIAEoCRI8Cg9hY3Rpb25fcmVzcG9uc2UYDiABKAsyHi5nb29nbGUuY2hhdC52MS5BY3Rpb25SZXNwb25zZUID4EEEEhoKDWFyZ3VtZW50X3RleHQYDyABKAlCA+BBAxI4Cg1zbGFzaF9jb21tYW5kGBEgASgLMhwuZ29vZ2xlLmNoYXQudjEuU2xhc2hDb21tYW5kQgPgQQMSLgoKYXR0YWNobWVudBgSIAMoCzIaLmdvb2dsZS5jaGF0LnYxLkF0dGFjaG1lbnQSNAoLbWF0Y2hlZF91cmwYFCABKAsyGi5nb29nbGUuY2hhdC52MS5NYXRjaGVkVXJsQgPgQQMSGQoMdGhyZWFkX3JlcGx5GBkgASgIQgPgQQMSIgoaY2xpZW50X2Fzc2lnbmVkX21lc3NhZ2VfaWQYICABKAkSSwoYZW1vamlfcmVhY3Rpb25fc3VtbWFyaWVzGCEgAygLMiQuZ29vZ2xlLmNoYXQudjEuRW1vamlSZWFjdGlvblN1bW1hcnlCA+BBAxI5ChZwcml2YXRlX21lc3NhZ2Vfdmlld2VyGCQgASgLMhQuZ29vZ2xlLmNoYXQudjEuVXNlckID4EEFEkAKEWRlbGV0aW9uX21ldGFkYXRhGCYgASgLMiAuZ29vZ2xlLmNoYXQudjEuRGVsZXRpb25NZXRhZGF0YUID4EEDEksKF3F1b3RlZF9tZXNzYWdlX21ldGFkYXRhGCcgASgLMiUuZ29vZ2xlLmNoYXQudjEuUXVvdGVkTWVzc2FnZU1ldGFkYXRhQgPgQQMSNwoNYXR0YWNoZWRfZ2lmcxgqIAMoCzIbLmdvb2dsZS5jaGF0LnYxLkF0dGFjaGVkR2lmQgPgQQMSOgoRYWNjZXNzb3J5X3dpZGdldHMYLCADKAsyHy5nb29nbGUuY2hhdC52MS5BY2Nlc3NvcnlXaWRnZXQ6Q+pBQAobY2hhdC5nb29nbGVhcGlzLmNvbS9NZXNzYWdlEiFzcGFjZXMve3NwYWNlfS9tZXNzYWdlcy97bWVzc2FnZX0iHwoLQXR0YWNoZWRHaWYSEAoDdXJpGAEgASgJQgPgQQMiiQIKFVF1b3RlZE1lc3NhZ2VNZXRhZGF0YRIxCgRuYW1lGAEgASgJQiPgQQP6QR0KG2NoYXQuZ29vZ2xlYXBpcy5jb20vTWVzc2FnZRI5ChBsYXN0X3VwZGF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDOoEB6kF+CiljaGF0Lmdvb2dsZWFwaXMuY29tL1F1b3RlZE1lc3NhZ2VNZXRhZGF0YRJRc3BhY2VzL3tzcGFjZX0vbWVzc2FnZXMve21lc3NhZ2V9L3F1b3RlZE1lc3NhZ2VNZXRhZGF0YS97cXVvdGVkX21lc3NhZ2VfbWV0YWRhdGF9InEKBlRocmVhZBIMCgRuYW1lGAEgASgJEhcKCnRocmVhZF9rZXkYAyABKAlCA+BBATpA6kE9ChpjaGF0Lmdvb2dsZWFwaXMuY29tL1RocmVhZBIfc3BhY2VzL3tzcGFjZX0vdGhyZWFkcy97dGhyZWFkfSLSBAoOQWN0aW9uUmVzcG9uc2USPgoEdHlwZRgBIAEoDjIrLmdvb2dsZS5jaGF0LnYxLkFjdGlvblJlc3BvbnNlLlJlc3BvbnNlVHlwZUID4EEEEhAKA3VybBgCIAEoCUID4EEEEjgKDWRpYWxvZ19hY3Rpb24YAyABKAsyHC5nb29nbGUuY2hhdC52MS5EaWFsb2dBY3Rpb25CA+BBBBJJCg51cGRhdGVkX3dpZGdldBgEIAEoCzIsLmdvb2dsZS5jaGF0LnYxLkFjdGlvblJlc3BvbnNlLlVwZGF0ZWRXaWRnZXRCA+BBBBpSCg5TZWxlY3Rpb25JdGVtcxJACgVpdGVtcxgBIAMoCzIxLmdvb2dsZS5hcHBzLmNhcmQudjEuU2VsZWN0aW9uSW5wdXQuU2VsZWN0aW9uSXRlbRp3Cg1VcGRhdGVkV2lkZ2V0EkQKC3N1Z2dlc3Rpb25zGAEgASgLMi0uZ29vZ2xlLmNoYXQudjEuQWN0aW9uUmVzcG9uc2UuU2VsZWN0aW9uSXRlbXNIABIOCgZ3aWRnZXQYAiABKAlCEAoOdXBkYXRlZF93aWRnZXQimwEKDFJlc3BvbnNlVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDwoLTkVXX01FU1NBR0UQARISCg5VUERBVEVfTUVTU0FHRRACEh0KGVVQREFURV9VU0VSX01FU1NBR0VfQ0FSRFMQBhISCg5SRVFVRVNUX0NPTkZJRxADEgoKBkRJQUxPRxAEEhEKDVVQREFURV9XSURHRVQQByJTCg9BY2Nlc3NvcnlXaWRnZXQSNgoLYnV0dG9uX2xpc3QYASABKAsyHy5nb29nbGUuYXBwcy5jYXJkLnYxLkJ1dHRvbkxpc3RIAEIICgZhY3Rpb24iRgoRR2V0TWVzc2FnZVJlcXVlc3QSMQoEbmFtZRgBIAEoCUIj4EEC+kEdChtjaGF0Lmdvb2dsZWFwaXMuY29tL01lc3NhZ2UiWAoURGVsZXRlTWVzc2FnZVJlcXVlc3QSMQoEbmFtZRgBIAEoCUIj4EEC+kEdChtjaGF0Lmdvb2dsZWFwaXMuY29tL01lc3NhZ2USDQoFZm9yY2UYAiABKAgikgEKFFVwZGF0ZU1lc3NhZ2VSZXF1ZXN0Ei0KB21lc3NhZ2UYASABKAsyFy5nb29nbGUuY2hhdC52MS5NZXNzYWdlQgPgQQISLwoLdXBkYXRlX21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrEhoKDWFsbG93X21pc3NpbmcYBCABKAhCA+BBASKkAwoUQ3JlYXRlTWVzc2FnZVJlcXVlc3QSMwoGcGFyZW50GAEgASgJQiPgQQL6QR0SG2NoYXQuZ29vZ2xlYXBpcy5jb20vTWVzc2FnZRItCgdtZXNzYWdlGAQgASgLMhcuZ29vZ2xlLmNoYXQudjEuTWVzc2FnZUID4EECEhkKCnRocmVhZF9rZXkYBiABKAlCBRgB4EEBEhcKCnJlcXVlc3RfaWQYByABKAlCA+BBARJaChRtZXNzYWdlX3JlcGx5X29wdGlvbhgIIAEoDjI3Lmdvb2dsZS5jaGF0LnYxLkNyZWF0ZU1lc3NhZ2VSZXF1ZXN0Lk1lc3NhZ2VSZXBseU9wdGlvbkID4EEBEhcKCm1lc3NhZ2VfaWQYCSABKAlCA+BBASJ/ChJNZXNzYWdlUmVwbHlPcHRpb24SJAogTUVTU0FHRV9SRVBMWV9PUFRJT05fVU5TUEVDSUZJRUQQABIoCiRSRVBMWV9NRVNTQUdFX0ZBTExCQUNLX1RPX05FV19USFJFQUQQARIZChVSRVBMWV9NRVNTQUdFX09SX0ZBSUwQAiKpAQoTTGlzdE1lc3NhZ2VzUmVxdWVzdBIzCgZwYXJlbnQYASABKAlCI+BBAvpBHRIbY2hhdC5nb29nbGVhcGlzLmNvbS9NZXNzYWdlEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJEg4KBmZpbHRlchgEIAEoCRIQCghvcmRlcl9ieRgFIAEoCRIUCgxzaG93X2RlbGV0ZWQYBiABKAgiWgoUTGlzdE1lc3NhZ2VzUmVzcG9uc2USKQoIbWVzc2FnZXMYASADKAsyFy5nb29nbGUuY2hhdC52MS5NZXNzYWdlEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKBAQoMRGlhbG9nQWN0aW9uEi0KBmRpYWxvZxgBIAEoCzIWLmdvb2dsZS5jaGF0LnYxLkRpYWxvZ0ID4EEESAASOAoNYWN0aW9uX3N0YXR1cxgCIAEoCzIcLmdvb2dsZS5jaGF0LnYxLkFjdGlvblN0YXR1c0ID4EEEQggKBmFjdGlvbiI2CgZEaWFsb2cSLAoEYm9keRgBIAEoCzIZLmdvb2dsZS5hcHBzLmNhcmQudjEuQ2FyZEID4EEEIkYKCkNhcmRXaXRoSWQSDwoHY2FyZF9pZBgBIAEoCRInCgRjYXJkGAIgASgLMhkuZ29vZ2xlLmFwcHMuY2FyZC52MS5DYXJkQqUBChJjb20uZ29vZ2xlLmNoYXQudjFCDE1lc3NhZ2VQcm90b1ABWixjbG91ZC5nb29nbGUuY29tL2dvL2NoYXQvYXBpdjEvY2hhdHBiO2NoYXRwYqICC0RZTkFQSVByb3RvqgITR29vZ2xlLkFwcHMuQ2hhdC5WMcoCE0dvb2dsZVxBcHBzXENoYXRcVjHqAhZHb29nbGU6OkFwcHM6OkNoYXQ6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_apps_card_v1_card, file_google_chat_v1_action_status, file_google_chat_v1_annotation, file_google_chat_v1_attachment, file_google_chat_v1_contextual_addon, file_google_chat_v1_deletion_metadata, file_google_chat_v1_matched_url, file_google_chat_v1_reaction, file_google_chat_v1_slash_command, file_google_chat_v1_space, file_google_chat_v1_user, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A message in a Google Chat space.
 *
 * @generated from message google.chat.v1.Message
 */
export type Message = Message$1<"google.chat.v1.Message"> & {
  /**
   * Resource name of the message.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   *
   * Where `{space}` is the ID of the space where the message is posted and
   * `{message}` is a system-assigned ID for the message. For example,
   * `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`.
   *
   * If you set a custom ID when you create a message, you can use this ID to
   * specify the message in a request by replacing `{message}` with the value
   * from the `clientAssignedMessageId` field. For example,
   * `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name
   * a
   * message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The user who created the message.
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * the output populates the
   * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   * `name` and `type`.
   *
   * @generated from field: google.chat.v1.User sender = 2;
   */
  sender?: User;

  /**
   * Optional. Immutable. For spaces created in Chat, the time at which the
   * message was created. This field is output only, except when used in import
   * mode spaces.
   *
   * For import mode spaces, set this field to the historical timestamp at which
   * the message was created in the source in order to preserve the original
   * creation time.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * Output only. The time at which the message was last edited by a user. If
   * the message has never been edited, this field is empty.
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 23;
   */
  lastUpdateTime?: Timestamp;

  /**
   * Output only. The time at which the message was deleted in
   * Google Chat. If the message is never deleted, this field is empty.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 26;
   */
  deleteTime?: Timestamp;

  /**
   * Plain-text body of the message. The first link to an image, video, or web
   * page generates a
   * [preview chip](https://developers.google.com/workspace/chat/preview-links).
   * You can also [@mention a Google Chat
   * user](https://developers.google.com/workspace/chat/format-messages#messages-@mention),
   * or everyone in the space.
   *
   * To learn about creating text messages, see [Send a text
   * message](https://developers.google.com/workspace/chat/create-messages#create-text-messages).
   *
   * @generated from field: string text = 4;
   */
  text: string;

  /**
   * Output only. Contains the message `text` with markups added to communicate
   * formatting. This field might not capture all formatting visible in the UI,
   * but includes the following:
   *
   * * [Markup
   * syntax](https://developers.google.com/workspace/chat/format-messages)
   * for bold, italic, strikethrough, monospace, monospace block, and bulleted
   * list.
   *
   * * [User
   * mentions](https://developers.google.com/workspace/chat/format-messages#messages-@mention)
   * using the format `<users/{user}>`.
   *
   * * Custom hyperlinks using the format `<{url}|{rendered_text}>` where the
   * first string is the URL and the second is the rendered text—for example,
   * `<http://example.com|custom text>`.
   *
   * * Custom emoji using the format `:{emoji_name}:`—for example, `:smile:`.
   * This doesn't apply to Unicode emoji, such as `U+1F600` for a grinning
   * face emoji.
   *
   * For more information, see [View text formatting sent in a
   * message](https://developers.google.com/workspace/chat/format-messages#view_text_formatting_sent_in_a_message)
   *
   * @generated from field: string formatted_text = 43;
   */
  formattedText: string;

  /**
   * Deprecated: Use `cards_v2` instead.
   *
   * Rich, formatted, and interactive cards that you can use to display UI
   * elements such as: formatted texts, buttons, and clickable images. Cards are
   * normally displayed below the plain-text body of the message. `cards` and
   * `cards_v2` can have a maximum size of 32 KB.
   *
   * @generated from field: repeated google.chat.v1.ContextualAddOnMarkup.Card cards = 5 [deprecated = true];
   * @deprecated
   */
  cards: ContextualAddOnMarkup_Card[];

  /**
   * An array of
   * [cards](https://developers.google.com/workspace/chat/api/reference/rest/v1/cards).
   *
   * Only Chat apps can create cards. If your Chat app [authenticates as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * the messages can't contain cards.
   *
   * To learn about cards and how to create them, see [Send card
   * messages](https://developers.google.com/workspace/chat/create-messages#create).
   *
   * [Card builder](https://addons.gsuite.google.com/uikit/builder)
   *
   * @generated from field: repeated google.chat.v1.CardWithId cards_v2 = 22;
   */
  cardsV2: CardWithId[];

  /**
   * Output only. Annotations associated with the `text` in this message.
   *
   * @generated from field: repeated google.chat.v1.Annotation annotations = 10;
   */
  annotations: Annotation[];

  /**
   * The thread the message belongs to. For example usage, see
   * [Start or reply to a message
   * thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
   *
   * @generated from field: google.chat.v1.Thread thread = 11;
   */
  thread?: Thread;

  /**
   * If your Chat app [authenticates as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * the output populates the
   * [space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
   * `name`.
   *
   * @generated from field: google.chat.v1.Space space = 12;
   */
  space?: Space;

  /**
   * A plain-text description of the message's cards, used when the actual cards
   * can't be displayed—for example, mobile notifications.
   *
   * @generated from field: string fallback_text = 13;
   */
  fallbackText: string;

  /**
   * Input only. Parameters that a Chat app can use to configure how its
   * response is posted.
   *
   * @generated from field: google.chat.v1.ActionResponse action_response = 14;
   */
  actionResponse?: ActionResponse;

  /**
   * Output only. Plain-text body of the message with all Chat app mentions
   * stripped out.
   *
   * @generated from field: string argument_text = 15;
   */
  argumentText: string;

  /**
   * Output only. Slash command information, if applicable.
   *
   * @generated from field: google.chat.v1.SlashCommand slash_command = 17;
   */
  slashCommand?: SlashCommand;

  /**
   * User-uploaded attachment.
   *
   * @generated from field: repeated google.chat.v1.Attachment attachment = 18;
   */
  attachment: Attachment[];

  /**
   * Output only. A URL in `spaces.messages.text` that matches a link preview
   * pattern. For more information, see [Preview
   * links](https://developers.google.com/workspace/chat/preview-links).
   *
   * @generated from field: google.chat.v1.MatchedUrl matched_url = 20;
   */
  matchedUrl?: MatchedUrl;

  /**
   * Output only. When `true`, the message is a response in a reply thread. When
   * `false`, the message is visible in the space's top-level conversation as
   * either the first message of a thread or a message with no threaded replies.
   *
   * If the space doesn't support reply in threads, this field is always
   * `false`.
   *
   * @generated from field: bool thread_reply = 25;
   */
  threadReply: boolean;

  /**
   * Optional. A custom ID for the message. You can use field to identify a
   * message, or to get, delete, or update a message. To set a custom ID,
   * specify the
   * [`messageId`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/create#body.QUERY_PARAMETERS.message_id)
   * field when you create the message. For details, see [Name a
   * message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   *
   * @generated from field: string client_assigned_message_id = 32;
   */
  clientAssignedMessageId: string;

  /**
   * Output only. The list of emoji reaction summaries on the message.
   *
   * @generated from field: repeated google.chat.v1.EmojiReactionSummary emoji_reaction_summaries = 33;
   */
  emojiReactionSummaries: EmojiReactionSummary[];

  /**
   * Immutable. Input for creating a message, otherwise output only. The user
   * that can view the message. When set, the message is private and only
   * visible to the specified user and the Chat app. Link previews and
   * attachments aren't supported for private messages.
   *
   * Only Chat apps can send private messages. If your Chat app [authenticates
   * as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
   * to send a message, the message can't be private and must omit this field.
   *
   * For details, see [Send private messages to Google Chat
   * users](https://developers.google.com/workspace/chat/private-messages).
   *
   * @generated from field: google.chat.v1.User private_message_viewer = 36;
   */
  privateMessageViewer?: User;

  /**
   * Output only. Information about a deleted message. A message is deleted when
   * `delete_time` is set.
   *
   * @generated from field: google.chat.v1.DeletionMetadata deletion_metadata = 38;
   */
  deletionMetadata?: DeletionMetadata;

  /**
   * Output only. Information about a message that's quoted by a Google Chat
   * user in a space. Google Chat users can quote a message to reply to it.
   *
   * @generated from field: google.chat.v1.QuotedMessageMetadata quoted_message_metadata = 39;
   */
  quotedMessageMetadata?: QuotedMessageMetadata;

  /**
   * Output only. GIF images that are attached to the message.
   *
   * @generated from field: repeated google.chat.v1.AttachedGif attached_gifs = 42;
   */
  attachedGifs: AttachedGif[];

  /**
   * One or more interactive widgets that appear at the bottom of a message.
   * You can add accessory widgets to messages that contain text, cards, or both
   * text and cards. Not supported for messages that contain dialogs. For
   * details, see [Add interactive widgets at the bottom of a
   * message](https://developers.google.com/workspace/chat/create-messages#add-accessory-widgets).
   *
   * Creating a message with accessory widgets requires [app
   * authentication]
   * (https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   *
   * @generated from field: repeated google.chat.v1.AccessoryWidget accessory_widgets = 44;
   */
  accessoryWidgets: AccessoryWidget[];
};

/**
 * Describes the message google.chat.v1.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 0);

/**
 * A GIF image that's specified by a URL.
 *
 * @generated from message google.chat.v1.AttachedGif
 */
export type AttachedGif = Message$1<"google.chat.v1.AttachedGif"> & {
  /**
   * Output only. The URL that hosts the GIF image.
   *
   * @generated from field: string uri = 1;
   */
  uri: string;
};

/**
 * Describes the message google.chat.v1.AttachedGif.
 * Use `create(AttachedGifSchema)` to create a new message.
 */
export const AttachedGifSchema: GenMessage<AttachedGif> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 1);

/**
 * Information about a quoted message.
 *
 * @generated from message google.chat.v1.QuotedMessageMetadata
 */
export type QuotedMessageMetadata = Message$1<"google.chat.v1.QuotedMessageMetadata"> & {
  /**
   * Output only. Resource name of the quoted message.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The timestamp when the quoted message was created or when the
   * quoted message was last updated.
   *
   * @generated from field: google.protobuf.Timestamp last_update_time = 2;
   */
  lastUpdateTime?: Timestamp;
};

/**
 * Describes the message google.chat.v1.QuotedMessageMetadata.
 * Use `create(QuotedMessageMetadataSchema)` to create a new message.
 */
export const QuotedMessageMetadataSchema: GenMessage<QuotedMessageMetadata> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 2);

/**
 * A thread in a Google Chat space. For example usage, see
 * [Start or reply to a message
 * thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
 *
 * If you specify a thread when creating a message, you can set the
 * [`messageReplyOption`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption)
 * field to determine what happens if no matching thread is found.
 *
 * @generated from message google.chat.v1.Thread
 */
export type Thread = Message$1<"google.chat.v1.Thread"> & {
  /**
   * Output only. Resource name of the thread.
   *
   * Example: `spaces/{space}/threads/{thread}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. Input for creating or updating a thread. Otherwise, output only.
   * ID for the thread. Supports up to 4000 characters.
   *
   * This ID is unique to the Chat app that sets it. For example, if
   * multiple Chat apps create a message using the same thread key,
   * the messages are posted in different threads. To reply in a
   * thread created by a person or another Chat app, specify the thread `name`
   * field instead.
   *
   * @generated from field: string thread_key = 3;
   */
  threadKey: string;
};

/**
 * Describes the message google.chat.v1.Thread.
 * Use `create(ThreadSchema)` to create a new message.
 */
export const ThreadSchema: GenMessage<Thread> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 3);

/**
 * Parameters that a Chat app can use to configure how its response is posted.
 *
 * @generated from message google.chat.v1.ActionResponse
 */
export type ActionResponse = Message$1<"google.chat.v1.ActionResponse"> & {
  /**
   * Input only. The type of Chat app response.
   *
   * @generated from field: google.chat.v1.ActionResponse.ResponseType type = 1;
   */
  type: ActionResponse_ResponseType;

  /**
   * Input only. URL for users to authenticate or configure. (Only for
   * `REQUEST_CONFIG` response types.)
   *
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * Input only. A response to an interaction event related to a
   * [dialog](https://developers.google.com/workspace/chat/dialogs). Must be
   * accompanied by `ResponseType.Dialog`.
   *
   * @generated from field: google.chat.v1.DialogAction dialog_action = 3;
   */
  dialogAction?: DialogAction;

  /**
   * Input only. The response of the updated widget.
   *
   * @generated from field: google.chat.v1.ActionResponse.UpdatedWidget updated_widget = 4;
   */
  updatedWidget?: ActionResponse_UpdatedWidget;
};

/**
 * Describes the message google.chat.v1.ActionResponse.
 * Use `create(ActionResponseSchema)` to create a new message.
 */
export const ActionResponseSchema: GenMessage<ActionResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 4);

/**
 * List of widget autocomplete results.
 *
 * @generated from message google.chat.v1.ActionResponse.SelectionItems
 */
export type ActionResponse_SelectionItems = Message$1<"google.chat.v1.ActionResponse.SelectionItems"> & {
  /**
   * An array of the SelectionItem objects.
   *
   * @generated from field: repeated google.apps.card.v1.SelectionInput.SelectionItem items = 1;
   */
  items: SelectionInput_SelectionItem[];
};

/**
 * Describes the message google.chat.v1.ActionResponse.SelectionItems.
 * Use `create(ActionResponse_SelectionItemsSchema)` to create a new message.
 */
export const ActionResponse_SelectionItemsSchema: GenMessage<ActionResponse_SelectionItems> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 4, 0);

/**
 * The response of the updated widget.
 * Used to provide autocomplete options for a widget.
 *
 * @generated from message google.chat.v1.ActionResponse.UpdatedWidget
 */
export type ActionResponse_UpdatedWidget = Message$1<"google.chat.v1.ActionResponse.UpdatedWidget"> & {
  /**
   * The widget updated in response to a user action.
   *
   * @generated from oneof google.chat.v1.ActionResponse.UpdatedWidget.updated_widget
   */
  updatedWidget: {
    /**
     * List of widget autocomplete results
     *
     * @generated from field: google.chat.v1.ActionResponse.SelectionItems suggestions = 1;
     */
    value: ActionResponse_SelectionItems;
    case: "suggestions";
  } | { case: undefined; value?: undefined };

  /**
   * The ID of the updated widget. The ID must match the one for the
   * widget that triggered the update request.
   *
   * @generated from field: string widget = 2;
   */
  widget: string;
};

/**
 * Describes the message google.chat.v1.ActionResponse.UpdatedWidget.
 * Use `create(ActionResponse_UpdatedWidgetSchema)` to create a new message.
 */
export const ActionResponse_UpdatedWidgetSchema: GenMessage<ActionResponse_UpdatedWidget> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 4, 1);

/**
 * The type of Chat app response.
 *
 * @generated from enum google.chat.v1.ActionResponse.ResponseType
 */
export enum ActionResponse_ResponseType {
  /**
   * Default type that's handled as `NEW_MESSAGE`.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Post as a new message in the topic.
   *
   * @generated from enum value: NEW_MESSAGE = 1;
   */
  NEW_MESSAGE = 1,

  /**
   * Update the Chat app's message. This is only permitted on a `CARD_CLICKED`
   * event where the message sender type is `BOT`.
   *
   * @generated from enum value: UPDATE_MESSAGE = 2;
   */
  UPDATE_MESSAGE = 2,

  /**
   * Update the cards on a user's message. This is only permitted as a
   * response to a `MESSAGE` event with a matched url, or a `CARD_CLICKED`
   * event where the message sender type is `HUMAN`. Text is ignored.
   *
   * @generated from enum value: UPDATE_USER_MESSAGE_CARDS = 6;
   */
  UPDATE_USER_MESSAGE_CARDS = 6,

  /**
   * Privately ask the user for additional authentication or configuration.
   *
   * @generated from enum value: REQUEST_CONFIG = 3;
   */
  REQUEST_CONFIG = 3,

  /**
   * Presents a
   * [dialog](https://developers.google.com/workspace/chat/dialogs).
   *
   * @generated from enum value: DIALOG = 4;
   */
  DIALOG = 4,

  /**
   * Widget text autocomplete options query.
   *
   * @generated from enum value: UPDATE_WIDGET = 7;
   */
  UPDATE_WIDGET = 7,
}

/**
 * Describes the enum google.chat.v1.ActionResponse.ResponseType.
 */
export const ActionResponse_ResponseTypeSchema: GenEnum<ActionResponse_ResponseType> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_message, 4, 0);

/**
 * One or more interactive widgets that appear at the bottom of a message. For
 * details, see [Add interactive widgets at the bottom of a
 * message](https://developers.google.com/workspace/chat/create-messages#add-accessory-widgets).
 *
 * @generated from message google.chat.v1.AccessoryWidget
 */
export type AccessoryWidget = Message$1<"google.chat.v1.AccessoryWidget"> & {
  /**
   * The type of action.
   *
   * @generated from oneof google.chat.v1.AccessoryWidget.action
   */
  action: {
    /**
     * A list of buttons.
     *
     * @generated from field: google.apps.card.v1.ButtonList button_list = 1;
     */
    value: ButtonList;
    case: "buttonList";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.AccessoryWidget.
 * Use `create(AccessoryWidgetSchema)` to create a new message.
 */
export const AccessoryWidgetSchema: GenMessage<AccessoryWidget> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 5);

/**
 * Request to get a message.
 *
 * @generated from message google.chat.v1.GetMessageRequest
 */
export type GetMessageRequest = Message$1<"google.chat.v1.GetMessageRequest"> & {
  /**
   * Required. Resource name of the message.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   * If you've set a custom ID for your message, you can use the value from the
   * `clientAssignedMessageId` field for `{message}`. For details, see [Name a
   * message]
   * (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.GetMessageRequest.
 * Use `create(GetMessageRequestSchema)` to create a new message.
 */
export const GetMessageRequestSchema: GenMessage<GetMessageRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 6);

/**
 * Request to delete a message.
 *
 * @generated from message google.chat.v1.DeleteMessageRequest
 */
export type DeleteMessageRequest = Message$1<"google.chat.v1.DeleteMessageRequest"> & {
  /**
   * Required. Resource name of the message.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   * If you've set a custom ID for your message, you can use the value from the
   * `clientAssignedMessageId` field for `{message}`. For details, see [Name a
   * message]
   * (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When `true`, deleting a message also deletes its threaded replies. When
   * `false`, if a message has threaded replies, deletion fails.
   *
   * Only applies when [authenticating as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   * Has no effect when [authenticating as a Chat app]
   * (https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message google.chat.v1.DeleteMessageRequest.
 * Use `create(DeleteMessageRequestSchema)` to create a new message.
 */
export const DeleteMessageRequestSchema: GenMessage<DeleteMessageRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 7);

/**
 * Request to update a message.
 *
 * @generated from message google.chat.v1.UpdateMessageRequest
 */
export type UpdateMessageRequest = Message$1<"google.chat.v1.UpdateMessageRequest"> & {
  /**
   * Required. Message with fields updated.
   *
   * @generated from field: google.chat.v1.Message message = 1;
   */
  message?: Message;

  /**
   * Required. The field paths to update. Separate multiple values with commas
   * or use `*` to update all field paths.
   *
   * Currently supported field paths:
   *
   * - `text`
   *
   * - `attachment`
   *
   * - `cards` (Requires [app
   * authentication](/chat/api/guides/auth/service-accounts).)
   *
   * - `cards_v2`  (Requires [app
   * authentication](/chat/api/guides/auth/service-accounts).)
   *
   * - `accessory_widgets`  (Requires [app
   * authentication](/chat/api/guides/auth/service-accounts).)
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * Optional. If `true` and the message isn't found, a new message is created
   * and `updateMask` is ignored. The specified message ID must be
   * [client-assigned](https://developers.google.com/workspace/chat/create-messages#name_a_created_message)
   * or the request fails.
   *
   * @generated from field: bool allow_missing = 4;
   */
  allowMissing: boolean;
};

/**
 * Describes the message google.chat.v1.UpdateMessageRequest.
 * Use `create(UpdateMessageRequestSchema)` to create a new message.
 */
export const UpdateMessageRequestSchema: GenMessage<UpdateMessageRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 8);

/**
 * Creates a message.
 *
 * @generated from message google.chat.v1.CreateMessageRequest
 */
export type CreateMessageRequest = Message$1<"google.chat.v1.CreateMessageRequest"> & {
  /**
   * Required. The resource name of the space in which to create a message.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. Message body.
   *
   * @generated from field: google.chat.v1.Message message = 4;
   */
  message?: Message;

  /**
   * Optional. Deprecated: Use
   * [thread.thread_key][google.chat.v1.Thread.thread_key] instead. ID for the
   * thread. Supports up to 4000 characters. To start or add to a thread, create
   * a message and specify a `threadKey` or the
   * [thread.name][google.chat.v1.Thread.name]. For example usage, see [Start or
   * reply to a message
   * thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
   *
   * @generated from field: string thread_key = 6 [deprecated = true];
   * @deprecated
   */
  threadKey: string;

  /**
   * Optional. A unique request ID for this message. Specifying an existing
   * request ID returns the message created with that ID instead of creating a
   * new message.
   *
   * @generated from field: string request_id = 7;
   */
  requestId: string;

  /**
   * Optional. Specifies whether a message starts a thread or replies to one.
   * Only supported in named spaces.
   *
   * @generated from field: google.chat.v1.CreateMessageRequest.MessageReplyOption message_reply_option = 8;
   */
  messageReplyOption: CreateMessageRequest_MessageReplyOption;

  /**
   * Optional. A custom ID for a message. Lets Chat apps get, update, or delete
   * a message without needing to store the system-assigned ID in the message's
   * resource name (represented in the message `name` field).
   *
   * The value for this field must meet the following requirements:
   *
   * * Begins with `client-`. For example, `client-custom-name` is a valid
   *   custom ID, but `custom-name` is not.
   * * Contains up to 63 characters and only lowercase letters, numbers, and
   *   hyphens.
   * * Is unique within a space. A Chat app can't use the same custom ID for
   * different messages.
   *
   * For details, see [Name a
   * message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
   *
   * @generated from field: string message_id = 9;
   */
  messageId: string;
};

/**
 * Describes the message google.chat.v1.CreateMessageRequest.
 * Use `create(CreateMessageRequestSchema)` to create a new message.
 */
export const CreateMessageRequestSchema: GenMessage<CreateMessageRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 9);

/**
 * Specifies how to reply to a message.
 * More states might be added in the future.
 *
 * @generated from enum google.chat.v1.CreateMessageRequest.MessageReplyOption
 */
export enum CreateMessageRequest_MessageReplyOption {
  /**
   * Default. Starts a new thread. Using this option ignores any [thread
   * ID][google.chat.v1.Thread.name] or
   * [`thread_key`][google.chat.v1.Thread.thread_key] that's included.
   *
   * @generated from enum value: MESSAGE_REPLY_OPTION_UNSPECIFIED = 0;
   */
  MESSAGE_REPLY_OPTION_UNSPECIFIED = 0,

  /**
   * Creates the message as a reply to the thread specified by [thread
   * ID][google.chat.v1.Thread.name] or
   * [`thread_key`][google.chat.v1.Thread.thread_key]. If it fails, the
   * message starts a new thread instead.
   *
   * @generated from enum value: REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1;
   */
  REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD = 1,

  /**
   * Creates the message as a reply to the thread specified by [thread
   * ID][google.chat.v1.Thread.name] or
   * [`thread_key`][google.chat.v1.Thread.thread_key]. If a new `thread_key`
   * is used, a new thread is created. If the message creation fails, a
   * `NOT_FOUND` error is returned instead.
   *
   * @generated from enum value: REPLY_MESSAGE_OR_FAIL = 2;
   */
  REPLY_MESSAGE_OR_FAIL = 2,
}

/**
 * Describes the enum google.chat.v1.CreateMessageRequest.MessageReplyOption.
 */
export const CreateMessageRequest_MessageReplyOptionSchema: GenEnum<CreateMessageRequest_MessageReplyOption> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_message, 9, 0);

/**
 * Lists messages in the specified space, that the user is a member of.
 *
 * @generated from message google.chat.v1.ListMessagesRequest
 */
export type ListMessagesRequest = Message$1<"google.chat.v1.ListMessagesRequest"> & {
  /**
   * Required. The resource name of the space to list messages from.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of messages returned. The service might return fewer
   * messages than this value.
   *
   * If unspecified, at most 25 are returned.
   *
   * The maximum value is 1000. If you use a value more than 1000, it's
   * automatically changed to 1000.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional, if resuming from a previous query.
   *
   * A page token received from a previous list messages call. Provide this
   * parameter to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided should match the call that
   * provided the page token. Passing different values to the other parameters
   * might lead to unexpected results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * A query filter.
   *
   * You can filter messages by date (`create_time`) and thread (`thread.name`).
   *
   * To filter messages by the date they were created, specify the `create_time`
   * with a timestamp in [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339)
   * format and double quotation marks. For example,
   * `"2023-04-21T11:30:00-04:00"`. You can use the greater than operator `>` to
   * list messages that were created after a timestamp, or the less than
   * operator `<` to list messages that were created before a timestamp. To
   * filter messages within a time interval, use the `AND` operator between two
   * timestamps.
   *
   * To filter by thread, specify the `thread.name`, formatted as
   * `spaces/{space}/threads/{thread}`. You can only specify one
   * `thread.name` per query.
   *
   * To filter by both thread and date, use the `AND` operator in your query.
   *
   * For example, the following queries are valid:
   *
   * ```
   * create_time > "2012-04-21T11:30:00-04:00"
   *
   * create_time > "2012-04-21T11:30:00-04:00" AND
   *   thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   * create_time > "2012-04-21T11:30:00+00:00" AND
   *
   * create_time < "2013-01-01T00:00:00+00:00" AND
   *   thread.name = spaces/AAAAAAAAAAA/threads/123
   *
   * thread.name = spaces/AAAAAAAAAAA/threads/123
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;

  /**
   * Optional, if resuming from a previous query.
   *
   * How the list of messages is ordered. Specify a value to order by an
   * ordering operation. Valid ordering operation values are as follows:
   *
   * - `ASC` for ascending.
   *
   * - `DESC` for descending.
   *
   * The default ordering is `create_time ASC`.
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;

  /**
   * Whether to include deleted messages. Deleted messages include deleted time
   * and metadata about their deletion, but message content is unavailable.
   *
   * @generated from field: bool show_deleted = 6;
   */
  showDeleted: boolean;
};

/**
 * Describes the message google.chat.v1.ListMessagesRequest.
 * Use `create(ListMessagesRequestSchema)` to create a new message.
 */
export const ListMessagesRequestSchema: GenMessage<ListMessagesRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 10);

/**
 * Response message for listing messages.
 *
 * @generated from message google.chat.v1.ListMessagesResponse
 */
export type ListMessagesResponse = Message$1<"google.chat.v1.ListMessagesResponse"> & {
  /**
   * List of messages.
   *
   * @generated from field: repeated google.chat.v1.Message messages = 1;
   */
  messages: Message[];

  /**
   * You can send a token as `pageToken` to retrieve the next page of
   * results. If empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.chat.v1.ListMessagesResponse.
 * Use `create(ListMessagesResponseSchema)` to create a new message.
 */
export const ListMessagesResponseSchema: GenMessage<ListMessagesResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 11);

/**
 * Contains a
 * [dialog](https://developers.google.com/workspace/chat/dialogs) and request
 * status code.
 *
 * @generated from message google.chat.v1.DialogAction
 */
export type DialogAction = Message$1<"google.chat.v1.DialogAction"> & {
  /**
   * Action to perform.
   *
   * @generated from oneof google.chat.v1.DialogAction.action
   */
  action: {
    /**
     * Input only.
     * [Dialog](https://developers.google.com/workspace/chat/dialogs) for the
     * request.
     *
     * @generated from field: google.chat.v1.Dialog dialog = 1;
     */
    value: Dialog;
    case: "dialog";
  } | { case: undefined; value?: undefined };

  /**
   * Input only. Status for a request to either invoke or submit a
   * [dialog](https://developers.google.com/workspace/chat/dialogs). Displays
   * a status and message to users, if necessary.
   * For example, in case of an error or success.
   *
   * @generated from field: google.chat.v1.ActionStatus action_status = 2;
   */
  actionStatus?: ActionStatus;
};

/**
 * Describes the message google.chat.v1.DialogAction.
 * Use `create(DialogActionSchema)` to create a new message.
 */
export const DialogActionSchema: GenMessage<DialogAction> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 12);

/**
 * Wrapper around the card body of the dialog.
 *
 * @generated from message google.chat.v1.Dialog
 */
export type Dialog = Message$1<"google.chat.v1.Dialog"> & {
  /**
   * Input only. Body of the dialog, which is rendered in a modal.
   * Google Chat apps don't support the following card entities:
   * `DateTimePicker`, `OnChangeAction`.
   *
   * @generated from field: google.apps.card.v1.Card body = 1;
   */
  body?: Card;
};

/**
 * Describes the message google.chat.v1.Dialog.
 * Use `create(DialogSchema)` to create a new message.
 */
export const DialogSchema: GenMessage<Dialog> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 13);

/**
 * A
 * [card](https://developers.google.com/workspace/chat/api/reference/rest/v1/cards)
 * in a Google Chat message.
 *
 * Only Chat apps can create cards. If your Chat app [authenticates as a
 * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 * the message can't contain cards.
 *
 * [Card builder](https://addons.gsuite.google.com/uikit/builder)
 *
 * @generated from message google.chat.v1.CardWithId
 */
export type CardWithId = Message$1<"google.chat.v1.CardWithId"> & {
  /**
   * Required if the message contains multiple cards. A unique identifier for
   * a card in a message.
   *
   * @generated from field: string card_id = 1;
   */
  cardId: string;

  /**
   * A card. Maximum size is 32 KB.
   *
   * @generated from field: google.apps.card.v1.Card card = 2;
   */
  card?: Card;
};

/**
 * Describes the message google.chat.v1.CardWithId.
 * Use `create(CardWithIdSchema)` to create a new message.
 */
export const CardWithIdSchema: GenMessage<CardWithId> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_message, 14);

