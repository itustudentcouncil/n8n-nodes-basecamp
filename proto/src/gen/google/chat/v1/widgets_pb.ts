// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/widgets.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/widgets.proto.
 */
export const file_google_chat_v1_widgets: GenFile = /*@__PURE__*/
  fileDesc("Chxnb29nbGUvY2hhdC92MS93aWRnZXRzLnByb3RvEg5nb29nbGUuY2hhdC52MSL1DgoMV2lkZ2V0TWFya3VwEkQKDnRleHRfcGFyYWdyYXBoGAEgASgLMiouZ29vZ2xlLmNoYXQudjEuV2lkZ2V0TWFya3VwLlRleHRQYXJhZ3JhcGhIABIzCgVpbWFnZRgCIAEoCzIiLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5JbWFnZUgAEjoKCWtleV92YWx1ZRgDIAEoCzIlLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5LZXlWYWx1ZUgAEjQKB2J1dHRvbnMYBiADKAsyIy5nb29nbGUuY2hhdC52MS5XaWRnZXRNYXJrdXAuQnV0dG9uGh0KDVRleHRQYXJhZ3JhcGgSDAoEdGV4dBgBIAEoCRqSAQoGQnV0dG9uEj4KC3RleHRfYnV0dG9uGAEgASgLMicuZ29vZ2xlLmNoYXQudjEuV2lkZ2V0TWFya3VwLlRleHRCdXR0b25IABJACgxpbWFnZV9idXR0b24YAiABKAsyKC5nb29nbGUuY2hhdC52MS5XaWRnZXRNYXJrdXAuSW1hZ2VCdXR0b25IAEIGCgR0eXBlGlIKClRleHRCdXR0b24SDAoEdGV4dBgBIAEoCRI2Cghvbl9jbGljaxgCIAEoCzIkLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5PbkNsaWNrGqkCCghLZXlWYWx1ZRIxCgRpY29uGAEgASgOMiEuZ29vZ2xlLmNoYXQudjEuV2lkZ2V0TWFya3VwLkljb25IABISCghpY29uX3VybBgCIAEoCUgAEhEKCXRvcF9sYWJlbBgDIAEoCRIPCgdjb250ZW50GAQgASgJEhkKEWNvbnRlbnRfbXVsdGlsaW5lGAkgASgIEhQKDGJvdHRvbV9sYWJlbBgFIAEoCRI2Cghvbl9jbGljaxgGIAEoCzIkLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5PbkNsaWNrEjUKBmJ1dHRvbhgHIAEoCzIjLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5CdXR0b25IAUIHCgVpY29uc0IJCgdjb250cm9sGmgKBUltYWdlEhEKCWltYWdlX3VybBgBIAEoCRI2Cghvbl9jbGljaxgCIAEoCzIkLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5PbkNsaWNrEhQKDGFzcGVjdF9yYXRpbxgDIAEoARqjAQoLSW1hZ2VCdXR0b24SMQoEaWNvbhgBIAEoDjIhLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5JY29uSAASEgoIaWNvbl91cmwYAyABKAlIABI2Cghvbl9jbGljaxgCIAEoCzIkLmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5PbkNsaWNrEgwKBG5hbWUYBCABKAlCBwoFaWNvbnMaiAEKB09uQ2xpY2sSOQoGYWN0aW9uGAEgASgLMicuZ29vZ2xlLmNoYXQudjEuV2lkZ2V0TWFya3VwLkZvcm1BY3Rpb25IABI6CglvcGVuX2xpbmsYAiABKAsyJS5nb29nbGUuY2hhdC52MS5XaWRnZXRNYXJrdXAuT3BlbkxpbmtIAEIGCgRkYXRhGhcKCE9wZW5MaW5rEgsKA3VybBgBIAEoCRqkAQoKRm9ybUFjdGlvbhIaChJhY3Rpb25fbWV0aG9kX25hbWUYASABKAkSSwoKcGFyYW1ldGVycxgCIAMoCzI3Lmdvb2dsZS5jaGF0LnYxLldpZGdldE1hcmt1cC5Gb3JtQWN0aW9uLkFjdGlvblBhcmFtZXRlchotCg9BY3Rpb25QYXJhbWV0ZXISCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJIuADCgRJY29uEhQKEElDT05fVU5TUEVDSUZJRUQQABIMCghBSVJQTEFORRABEgwKCEJPT0tNQVJLEBoSBwoDQlVTEBkSBwoDQ0FSEAkSCQoFQ0xPQ0sQAhIcChhDT05GSVJNQVRJT05fTlVNQkVSX0lDT04QDBIKCgZET0xMQVIQDhIPCgtERVNDUklQVElPThAbEgkKBUVNQUlMEAoSEwoPRVZFTlRfUEVSRk9STUVSEBQSDgoKRVZFTlRfU0VBVBAVEhIKDkZMSUdIVF9BUlJJVkFMEBASFAoQRkxJR0hUX0RFUEFSVFVSRRAPEgkKBUhPVEVMEAYSEwoPSE9URUxfUk9PTV9UWVBFEBESCgoGSU5WSVRFEBMSCwoHTUFQX1BJThADEg4KCk1FTUJFUlNISVAQGBITCg9NVUxUSVBMRV9QRU9QTEUQEhIJCgVPRkZFUhAeEgoKBlBFUlNPThALEgkKBVBIT05FEA0SEwoPUkVTVEFVUkFOVF9JQ09OEAcSEQoNU0hPUFBJTkdfQ0FSVBAIEggKBFNUQVIQBRIJCgVTVE9SRRAWEgoKBlRJQ0tFVBAEEgkKBVRSQUlOEBcSEAoMVklERU9fQ0FNRVJBEBwSDgoKVklERU9fUExBWRAdQgYKBGRhdGFCpQEKEmNvbS5nb29nbGUuY2hhdC52MUIMV2lkZ2V0c1Byb3RvUAFaLGNsb3VkLmdvb2dsZS5jb20vZ28vY2hhdC9hcGl2MS9jaGF0cGI7Y2hhdHBiogILRFlOQVBJUHJvdG+qAhNHb29nbGUuQXBwcy5DaGF0LlYxygITR29vZ2xlXEFwcHNcQ2hhdFxWMeoCFkdvb2dsZTo6QXBwczo6Q2hhdDo6VjFiBnByb3RvMw");

/**
 * A widget is a UI element that presents text and images.
 *
 * @generated from message google.chat.v1.WidgetMarkup
 */
export type WidgetMarkup = Message<"google.chat.v1.WidgetMarkup"> & {
  /**
   * A `WidgetMarkup` can only have one of the following items. You can use
   * multiple `WidgetMarkup` fields to display more items.
   *
   * @generated from oneof google.chat.v1.WidgetMarkup.data
   */
  data: {
    /**
     * Display a text paragraph in this widget.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.TextParagraph text_paragraph = 1;
     */
    value: WidgetMarkup_TextParagraph;
    case: "textParagraph";
  } | {
    /**
     * Display an image in this widget.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.Image image = 2;
     */
    value: WidgetMarkup_Image;
    case: "image";
  } | {
    /**
     * Display a key value item in this widget.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.KeyValue key_value = 3;
     */
    value: WidgetMarkup_KeyValue;
    case: "keyValue";
  } | { case: undefined; value?: undefined };

  /**
   * A list of buttons. Buttons is also `oneof data` and only one of these
   * fields should be set.
   *
   * @generated from field: repeated google.chat.v1.WidgetMarkup.Button buttons = 6;
   */
  buttons: WidgetMarkup_Button[];
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.
 * Use `create(WidgetMarkupSchema)` to create a new message.
 */
export const WidgetMarkupSchema: GenMessage<WidgetMarkup> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0);

/**
 * A paragraph of text. Formatted text supported. For more information
 * about formatting text, see
 * [Formatting text in Google Chat
 * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 * and
 * [Formatting
 * text in Google Workspace
 * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 *
 * @generated from message google.chat.v1.WidgetMarkup.TextParagraph
 */
export type WidgetMarkup_TextParagraph = Message<"google.chat.v1.WidgetMarkup.TextParagraph"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.TextParagraph.
 * Use `create(WidgetMarkup_TextParagraphSchema)` to create a new message.
 */
export const WidgetMarkup_TextParagraphSchema: GenMessage<WidgetMarkup_TextParagraph> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 0);

/**
 * A button. Can be a text button or an image button.
 *
 * @generated from message google.chat.v1.WidgetMarkup.Button
 */
export type WidgetMarkup_Button = Message<"google.chat.v1.WidgetMarkup.Button"> & {
  /**
   * @generated from oneof google.chat.v1.WidgetMarkup.Button.type
   */
  type: {
    /**
     * A button with text and `onclick` action.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.TextButton text_button = 1;
     */
    value: WidgetMarkup_TextButton;
    case: "textButton";
  } | {
    /**
     * A button with image and `onclick` action.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.ImageButton image_button = 2;
     */
    value: WidgetMarkup_ImageButton;
    case: "imageButton";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.Button.
 * Use `create(WidgetMarkup_ButtonSchema)` to create a new message.
 */
export const WidgetMarkup_ButtonSchema: GenMessage<WidgetMarkup_Button> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 1);

/**
 * A button with text and `onclick` action.
 *
 * @generated from message google.chat.v1.WidgetMarkup.TextButton
 */
export type WidgetMarkup_TextButton = Message<"google.chat.v1.WidgetMarkup.TextButton"> & {
  /**
   * The text of the button.
   *
   * @generated from field: string text = 1;
   */
  text: string;

  /**
   * The `onclick` action of the button.
   *
   * @generated from field: google.chat.v1.WidgetMarkup.OnClick on_click = 2;
   */
  onClick?: WidgetMarkup_OnClick;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.TextButton.
 * Use `create(WidgetMarkup_TextButtonSchema)` to create a new message.
 */
export const WidgetMarkup_TextButtonSchema: GenMessage<WidgetMarkup_TextButton> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 2);

/**
 * A UI element contains a key (label) and a value (content). This
 * element can also contain some actions such as `onclick` button.
 *
 * @generated from message google.chat.v1.WidgetMarkup.KeyValue
 */
export type WidgetMarkup_KeyValue = Message<"google.chat.v1.WidgetMarkup.KeyValue"> & {
  /**
   * At least one of icons, `top_label` and `bottom_label` must be defined.
   *
   * @generated from oneof google.chat.v1.WidgetMarkup.KeyValue.icons
   */
  icons: {
    /**
     * An enum value that's replaced by the Chat API with the
     * corresponding icon image.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.Icon icon = 1;
     */
    value: WidgetMarkup_Icon;
    case: "icon";
  } | {
    /**
     * The icon specified by a URL.
     *
     * @generated from field: string icon_url = 2;
     */
    value: string;
    case: "iconUrl";
  } | { case: undefined; value?: undefined };

  /**
   * The text of the top label. Formatted text supported. For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   *
   * @generated from field: string top_label = 3;
   */
  topLabel: string;

  /**
   * The text of the content. Formatted text supported and always required.
   * For more information
   * about formatting text, see
   * [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   *
   * @generated from field: string content = 4;
   */
  content: string;

  /**
   * If the content should be multiline.
   *
   * @generated from field: bool content_multiline = 9;
   */
  contentMultiline: boolean;

  /**
   * The text of the bottom label. Formatted text supported. For more
   * information about formatting text, see [Formatting text in Google Chat
   * apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
   * and
   * [Formatting
   * text in Google Workspace
   * Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
   *
   * @generated from field: string bottom_label = 5;
   */
  bottomLabel: string;

  /**
   * The `onclick` action. Only the top label, bottom label, and content
   * region are clickable.
   *
   * @generated from field: google.chat.v1.WidgetMarkup.OnClick on_click = 6;
   */
  onClick?: WidgetMarkup_OnClick;

  /**
   * A control widget. You can set either `button` or `switch_widget`,
   * but not both.
   *
   * @generated from oneof google.chat.v1.WidgetMarkup.KeyValue.control
   */
  control: {
    /**
     * A button that can be clicked to trigger an action.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.Button button = 7;
     */
    value: WidgetMarkup_Button;
    case: "button";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.KeyValue.
 * Use `create(WidgetMarkup_KeyValueSchema)` to create a new message.
 */
export const WidgetMarkup_KeyValueSchema: GenMessage<WidgetMarkup_KeyValue> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 3);

/**
 * An image that's specified by a URL and can have an `onclick` action.
 *
 * @generated from message google.chat.v1.WidgetMarkup.Image
 */
export type WidgetMarkup_Image = Message<"google.chat.v1.WidgetMarkup.Image"> & {
  /**
   * The URL of the image.
   *
   * @generated from field: string image_url = 1;
   */
  imageUrl: string;

  /**
   * The `onclick` action.
   *
   * @generated from field: google.chat.v1.WidgetMarkup.OnClick on_click = 2;
   */
  onClick?: WidgetMarkup_OnClick;

  /**
   * The aspect ratio of this image (width and height). This field lets you
   * reserve the right height for the image while waiting for it to load.
   * It's not meant to override the built-in aspect ratio of the image.
   * If unset, the server fills it by prefetching the image.
   *
   * @generated from field: double aspect_ratio = 3;
   */
  aspectRatio: number;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.Image.
 * Use `create(WidgetMarkup_ImageSchema)` to create a new message.
 */
export const WidgetMarkup_ImageSchema: GenMessage<WidgetMarkup_Image> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 4);

/**
 * An image button with an `onclick` action.
 *
 * @generated from message google.chat.v1.WidgetMarkup.ImageButton
 */
export type WidgetMarkup_ImageButton = Message<"google.chat.v1.WidgetMarkup.ImageButton"> & {
  /**
   * The icon can be specified by an `Icon` `enum` or a URL.
   *
   * @generated from oneof google.chat.v1.WidgetMarkup.ImageButton.icons
   */
  icons: {
    /**
     * The icon specified by an `enum` that indices to an icon provided by
     * Chat API.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.Icon icon = 1;
     */
    value: WidgetMarkup_Icon;
    case: "icon";
  } | {
    /**
     * The icon specified by a URL.
     *
     * @generated from field: string icon_url = 3;
     */
    value: string;
    case: "iconUrl";
  } | { case: undefined; value?: undefined };

  /**
   * The `onclick` action.
   *
   * @generated from field: google.chat.v1.WidgetMarkup.OnClick on_click = 2;
   */
  onClick?: WidgetMarkup_OnClick;

  /**
   * The name of this `image_button` that's used for accessibility.
   * Default value is provided if this name isn't specified.
   *
   * @generated from field: string name = 4;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.ImageButton.
 * Use `create(WidgetMarkup_ImageButtonSchema)` to create a new message.
 */
export const WidgetMarkup_ImageButtonSchema: GenMessage<WidgetMarkup_ImageButton> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 5);

/**
 * An `onclick` action (for example, open a link).
 *
 * @generated from message google.chat.v1.WidgetMarkup.OnClick
 */
export type WidgetMarkup_OnClick = Message<"google.chat.v1.WidgetMarkup.OnClick"> & {
  /**
   * @generated from oneof google.chat.v1.WidgetMarkup.OnClick.data
   */
  data: {
    /**
     * A form action is triggered by this `onclick` action if specified.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.FormAction action = 1;
     */
    value: WidgetMarkup_FormAction;
    case: "action";
  } | {
    /**
     * This `onclick` action triggers an open link action if specified.
     *
     * @generated from field: google.chat.v1.WidgetMarkup.OpenLink open_link = 2;
     */
    value: WidgetMarkup_OpenLink;
    case: "openLink";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.OnClick.
 * Use `create(WidgetMarkup_OnClickSchema)` to create a new message.
 */
export const WidgetMarkup_OnClickSchema: GenMessage<WidgetMarkup_OnClick> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 6);

/**
 * A link that opens a new window.
 *
 * @generated from message google.chat.v1.WidgetMarkup.OpenLink
 */
export type WidgetMarkup_OpenLink = Message<"google.chat.v1.WidgetMarkup.OpenLink"> & {
  /**
   * The URL to open.
   *
   * @generated from field: string url = 1;
   */
  url: string;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.OpenLink.
 * Use `create(WidgetMarkup_OpenLinkSchema)` to create a new message.
 */
export const WidgetMarkup_OpenLinkSchema: GenMessage<WidgetMarkup_OpenLink> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 7);

/**
 * A form action describes the behavior when the form is submitted.
 * For example, you can invoke Apps Script to handle the form.
 *
 * @generated from message google.chat.v1.WidgetMarkup.FormAction
 */
export type WidgetMarkup_FormAction = Message<"google.chat.v1.WidgetMarkup.FormAction"> & {
  /**
   * The method name is used to identify which part of the form triggered the
   * form submission. This information is echoed back to the Chat app as part
   * of the card click event. You can use the same method name for several
   * elements that trigger a common behavior.
   *
   * @generated from field: string action_method_name = 1;
   */
  actionMethodName: string;

  /**
   * List of action parameters.
   *
   * @generated from field: repeated google.chat.v1.WidgetMarkup.FormAction.ActionParameter parameters = 2;
   */
  parameters: WidgetMarkup_FormAction_ActionParameter[];
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.FormAction.
 * Use `create(WidgetMarkup_FormActionSchema)` to create a new message.
 */
export const WidgetMarkup_FormActionSchema: GenMessage<WidgetMarkup_FormAction> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 8);

/**
 * List of string parameters to supply when the action method is invoked.
 * For example, consider three snooze buttons: snooze now, snooze one day,
 * snooze next week. You might use `action method = snooze()`, passing the
 * snooze type and snooze time in the list of string parameters.
 *
 * @generated from message google.chat.v1.WidgetMarkup.FormAction.ActionParameter
 */
export type WidgetMarkup_FormAction_ActionParameter = Message<"google.chat.v1.WidgetMarkup.FormAction.ActionParameter"> & {
  /**
   * The name of the parameter for the action script.
   *
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * The value of the parameter.
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message google.chat.v1.WidgetMarkup.FormAction.ActionParameter.
 * Use `create(WidgetMarkup_FormAction_ActionParameterSchema)` to create a new message.
 */
export const WidgetMarkup_FormAction_ActionParameterSchema: GenMessage<WidgetMarkup_FormAction_ActionParameter> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_widgets, 0, 8, 0);

/**
 * The set of supported icons.
 *
 * @generated from enum google.chat.v1.WidgetMarkup.Icon
 */
export enum WidgetMarkup_Icon {
  /**
   * @generated from enum value: ICON_UNSPECIFIED = 0;
   */
  ICON_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AIRPLANE = 1;
   */
  AIRPLANE = 1,

  /**
   * @generated from enum value: BOOKMARK = 26;
   */
  BOOKMARK = 26,

  /**
   * @generated from enum value: BUS = 25;
   */
  BUS = 25,

  /**
   * @generated from enum value: CAR = 9;
   */
  CAR = 9,

  /**
   * @generated from enum value: CLOCK = 2;
   */
  CLOCK = 2,

  /**
   * @generated from enum value: CONFIRMATION_NUMBER_ICON = 12;
   */
  CONFIRMATION_NUMBER_ICON = 12,

  /**
   * @generated from enum value: DOLLAR = 14;
   */
  DOLLAR = 14,

  /**
   * @generated from enum value: DESCRIPTION = 27;
   */
  DESCRIPTION = 27,

  /**
   * @generated from enum value: EMAIL = 10;
   */
  EMAIL = 10,

  /**
   * @generated from enum value: EVENT_PERFORMER = 20;
   */
  EVENT_PERFORMER = 20,

  /**
   * @generated from enum value: EVENT_SEAT = 21;
   */
  EVENT_SEAT = 21,

  /**
   * @generated from enum value: FLIGHT_ARRIVAL = 16;
   */
  FLIGHT_ARRIVAL = 16,

  /**
   * @generated from enum value: FLIGHT_DEPARTURE = 15;
   */
  FLIGHT_DEPARTURE = 15,

  /**
   * @generated from enum value: HOTEL = 6;
   */
  HOTEL = 6,

  /**
   * @generated from enum value: HOTEL_ROOM_TYPE = 17;
   */
  HOTEL_ROOM_TYPE = 17,

  /**
   * @generated from enum value: INVITE = 19;
   */
  INVITE = 19,

  /**
   * @generated from enum value: MAP_PIN = 3;
   */
  MAP_PIN = 3,

  /**
   * @generated from enum value: MEMBERSHIP = 24;
   */
  MEMBERSHIP = 24,

  /**
   * @generated from enum value: MULTIPLE_PEOPLE = 18;
   */
  MULTIPLE_PEOPLE = 18,

  /**
   * @generated from enum value: OFFER = 30;
   */
  OFFER = 30,

  /**
   * @generated from enum value: PERSON = 11;
   */
  PERSON = 11,

  /**
   * @generated from enum value: PHONE = 13;
   */
  PHONE = 13,

  /**
   * @generated from enum value: RESTAURANT_ICON = 7;
   */
  RESTAURANT_ICON = 7,

  /**
   * @generated from enum value: SHOPPING_CART = 8;
   */
  SHOPPING_CART = 8,

  /**
   * @generated from enum value: STAR = 5;
   */
  STAR = 5,

  /**
   * @generated from enum value: STORE = 22;
   */
  STORE = 22,

  /**
   * @generated from enum value: TICKET = 4;
   */
  TICKET = 4,

  /**
   * @generated from enum value: TRAIN = 23;
   */
  TRAIN = 23,

  /**
   * @generated from enum value: VIDEO_CAMERA = 28;
   */
  VIDEO_CAMERA = 28,

  /**
   * @generated from enum value: VIDEO_PLAY = 29;
   */
  VIDEO_PLAY = 29,
}

/**
 * Describes the enum google.chat.v1.WidgetMarkup.Icon.
 */
export const WidgetMarkup_IconSchema: GenEnum<WidgetMarkup_Icon> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_widgets, 0, 0);

