// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/space_event.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { MembershipBatchCreatedEventData, MembershipBatchDeletedEventData, MembershipBatchUpdatedEventData, MembershipCreatedEventData, MembershipDeletedEventData, MembershipUpdatedEventData, MessageBatchCreatedEventData, MessageBatchDeletedEventData, MessageBatchUpdatedEventData, MessageCreatedEventData, MessageDeletedEventData, MessageUpdatedEventData, ReactionBatchCreatedEventData, ReactionBatchDeletedEventData, ReactionCreatedEventData, ReactionDeletedEventData, SpaceBatchUpdatedEventData, SpaceUpdatedEventData } from "./event_payload_pb";
import { file_google_chat_v1_event_payload } from "./event_payload_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/space_event.proto.
 */
export const file_google_chat_v1_space_event: GenFile = /*@__PURE__*/
  fileDesc("CiBnb29nbGUvY2hhdC92MS9zcGFjZV9ldmVudC5wcm90bxIOZ29vZ2xlLmNoYXQudjEizg0KClNwYWNlRXZlbnQSDAoEbmFtZRgBIAEoCRIuCgpldmVudF90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBISCgpldmVudF90eXBlGAYgASgJEk0KGm1lc3NhZ2VfY3JlYXRlZF9ldmVudF9kYXRhGAwgASgLMicuZ29vZ2xlLmNoYXQudjEuTWVzc2FnZUNyZWF0ZWRFdmVudERhdGFIABJNChptZXNzYWdlX3VwZGF0ZWRfZXZlbnRfZGF0YRgNIAEoCzInLmdvb2dsZS5jaGF0LnYxLk1lc3NhZ2VVcGRhdGVkRXZlbnREYXRhSAASTQoabWVzc2FnZV9kZWxldGVkX2V2ZW50X2RhdGEYDiABKAsyJy5nb29nbGUuY2hhdC52MS5NZXNzYWdlRGVsZXRlZEV2ZW50RGF0YUgAElgKIG1lc3NhZ2VfYmF0Y2hfY3JlYXRlZF9ldmVudF9kYXRhGBogASgLMiwuZ29vZ2xlLmNoYXQudjEuTWVzc2FnZUJhdGNoQ3JlYXRlZEV2ZW50RGF0YUgAElgKIG1lc3NhZ2VfYmF0Y2hfdXBkYXRlZF9ldmVudF9kYXRhGBsgASgLMiwuZ29vZ2xlLmNoYXQudjEuTWVzc2FnZUJhdGNoVXBkYXRlZEV2ZW50RGF0YUgAElgKIG1lc3NhZ2VfYmF0Y2hfZGVsZXRlZF9ldmVudF9kYXRhGBwgASgLMiwuZ29vZ2xlLmNoYXQudjEuTWVzc2FnZUJhdGNoRGVsZXRlZEV2ZW50RGF0YUgAEkkKGHNwYWNlX3VwZGF0ZWRfZXZlbnRfZGF0YRgPIAEoCzIlLmdvb2dsZS5jaGF0LnYxLlNwYWNlVXBkYXRlZEV2ZW50RGF0YUgAElQKHnNwYWNlX2JhdGNoX3VwZGF0ZWRfZXZlbnRfZGF0YRgdIAEoCzIqLmdvb2dsZS5jaGF0LnYxLlNwYWNlQmF0Y2hVcGRhdGVkRXZlbnREYXRhSAASUwodbWVtYmVyc2hpcF9jcmVhdGVkX2V2ZW50X2RhdGEYESABKAsyKi5nb29nbGUuY2hhdC52MS5NZW1iZXJzaGlwQ3JlYXRlZEV2ZW50RGF0YUgAElMKHW1lbWJlcnNoaXBfdXBkYXRlZF9ldmVudF9kYXRhGBIgASgLMiouZ29vZ2xlLmNoYXQudjEuTWVtYmVyc2hpcFVwZGF0ZWRFdmVudERhdGFIABJUCh1tZW1iZXJzaGlwX2RlbGV0ZWRfZXZlbnRfZGF0YRjbASABKAsyKi5nb29nbGUuY2hhdC52MS5NZW1iZXJzaGlwRGVsZXRlZEV2ZW50RGF0YUgAEl4KI21lbWJlcnNoaXBfYmF0Y2hfY3JlYXRlZF9ldmVudF9kYXRhGB8gASgLMi8uZ29vZ2xlLmNoYXQudjEuTWVtYmVyc2hpcEJhdGNoQ3JlYXRlZEV2ZW50RGF0YUgAEl4KI21lbWJlcnNoaXBfYmF0Y2hfdXBkYXRlZF9ldmVudF9kYXRhGCAgASgLMi8uZ29vZ2xlLmNoYXQudjEuTWVtYmVyc2hpcEJhdGNoVXBkYXRlZEV2ZW50RGF0YUgAEl4KI21lbWJlcnNoaXBfYmF0Y2hfZGVsZXRlZF9ldmVudF9kYXRhGCEgASgLMi8uZ29vZ2xlLmNoYXQudjEuTWVtYmVyc2hpcEJhdGNoRGVsZXRlZEV2ZW50RGF0YUgAEk8KG3JlYWN0aW9uX2NyZWF0ZWRfZXZlbnRfZGF0YRgVIAEoCzIoLmdvb2dsZS5jaGF0LnYxLlJlYWN0aW9uQ3JlYXRlZEV2ZW50RGF0YUgAEk8KG3JlYWN0aW9uX2RlbGV0ZWRfZXZlbnRfZGF0YRgWIAEoCzIoLmdvb2dsZS5jaGF0LnYxLlJlYWN0aW9uRGVsZXRlZEV2ZW50RGF0YUgAEloKIXJlYWN0aW9uX2JhdGNoX2NyZWF0ZWRfZXZlbnRfZGF0YRgiIAEoCzItLmdvb2dsZS5jaGF0LnYxLlJlYWN0aW9uQmF0Y2hDcmVhdGVkRXZlbnREYXRhSAASWgohcmVhY3Rpb25fYmF0Y2hfZGVsZXRlZF9ldmVudF9kYXRhGCMgASgLMi0uZ29vZ2xlLmNoYXQudjEuUmVhY3Rpb25CYXRjaERlbGV0ZWRFdmVudERhdGFIADpN6kFKCh5jaGF0Lmdvb2dsZWFwaXMuY29tL1NwYWNlRXZlbnQSKHNwYWNlcy97c3BhY2V9L3NwYWNlRXZlbnRzL3tzcGFjZV9ldmVudH1CCQoHcGF5bG9hZCJMChRHZXRTcGFjZUV2ZW50UmVxdWVzdBI0CgRuYW1lGAEgASgJQibgQQL6QSAKHmNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2VFdmVudCKMAQoWTGlzdFNwYWNlRXZlbnRzUmVxdWVzdBI2CgZwYXJlbnQYASABKAlCJuBBAvpBIBIeY2hhdC5nb29nbGVhcGlzLmNvbS9TcGFjZUV2ZW50EhEKCXBhZ2Vfc2l6ZRgFIAEoBRISCgpwYWdlX3Rva2VuGAYgASgJEhMKBmZpbHRlchgIIAEoCUID4EECImQKF0xpc3RTcGFjZUV2ZW50c1Jlc3BvbnNlEjAKDHNwYWNlX2V2ZW50cxgBIAMoCzIaLmdvb2dsZS5jaGF0LnYxLlNwYWNlRXZlbnQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJQpoBChJjb20uZ29vZ2xlLmNoYXQudjFCD1NwYWNlRXZlbnRQcm90b1ABWixjbG91ZC5nb29nbGUuY29tL2dvL2NoYXQvYXBpdjEvY2hhdHBiO2NoYXRwYqoCE0dvb2dsZS5BcHBzLkNoYXQuVjHKAhNHb29nbGVcQXBwc1xDaGF0XFYx6gIWR29vZ2xlOjpBcHBzOjpDaGF0OjpWMWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_chat_v1_event_payload, file_google_protobuf_timestamp]);

/**
 * An event that represents a change or activity in a Google Chat space. To
 * learn more, see [Work with events from Google
 * Chat](https://developers.google.com/workspace/chat/events-overview).
 *
 * @generated from message google.chat.v1.SpaceEvent
 */
export type SpaceEvent = Message<"google.chat.v1.SpaceEvent"> & {
  /**
   * Resource name of the space event.
   *
   * Format: `spaces/{space}/spaceEvents/{spaceEvent}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Time when the event occurred.
   *
   * @generated from field: google.protobuf.Timestamp event_time = 3;
   */
  eventTime?: Timestamp;

  /**
   * Type of space event. Each event type has a batch version, which
   * represents multiple instances of the event type that occur in a short
   * period of time. For `spaceEvents.list()` requests, omit batch event types
   * in your query filter. By default, the server returns both event type and
   * its batch version.
   *
   * Supported event types for
   * [messages](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages):
   *
   *    * New message: `google.workspace.chat.message.v1.created`
   *    * Updated message: `google.workspace.chat.message.v1.updated`
   *    * Deleted message: `google.workspace.chat.message.v1.deleted`
   *    * Multiple new messages: `google.workspace.chat.message.v1.batchCreated`
   *    * Multiple updated messages:
   *    `google.workspace.chat.message.v1.batchUpdated`
   *    * Multiple deleted messages:
   *    `google.workspace.chat.message.v1.batchDeleted`
   *
   * Supported event types for
   * [memberships](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members):
   *
   *   * New membership: `google.workspace.chat.membership.v1.created`
   *   * Updated membership: `google.workspace.chat.membership.v1.updated`
   *   * Deleted membership: `google.workspace.chat.membership.v1.deleted`
   *   * Multiple new memberships:
   *   `google.workspace.chat.membership.v1.batchCreated`
   *   * Multiple updated memberships:
   *   `google.workspace.chat.membership.v1.batchUpdated`
   *   * Multiple deleted memberships:
   *   `google.workspace.chat.membership.v1.batchDeleted`
   *
   * Supported event types for
   * [reactions](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.reactions):
   *
   *   * New reaction: `google.workspace.chat.reaction.v1.created`
   *   * Deleted reaction: `google.workspace.chat.reaction.v1.deleted`
   *   * Multiple new reactions:
   *   `google.workspace.chat.reaction.v1.batchCreated`
   *   * Multiple deleted reactions:
   *   `google.workspace.chat.reaction.v1.batchDeleted`
   *
   * Supported event types about the
   * [space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces):
   *
   *   * Updated space: `google.workspace.chat.space.v1.updated`
   *   * Multiple space updates: `google.workspace.chat.space.v1.batchUpdated`
   *
   * @generated from field: string event_type = 6;
   */
  eventType: string;

  /**
   * @generated from oneof google.chat.v1.SpaceEvent.payload
   */
  payload: {
    /**
     * Event payload for a new message.
     *
     * Event type: `google.workspace.chat.message.v1.created`
     *
     * @generated from field: google.chat.v1.MessageCreatedEventData message_created_event_data = 12;
     */
    value: MessageCreatedEventData;
    case: "messageCreatedEventData";
  } | {
    /**
     * Event payload for an updated message.
     *
     * Event type: `google.workspace.chat.message.v1.updated`
     *
     * @generated from field: google.chat.v1.MessageUpdatedEventData message_updated_event_data = 13;
     */
    value: MessageUpdatedEventData;
    case: "messageUpdatedEventData";
  } | {
    /**
     * Event payload for a deleted message.
     *
     * Event type: `google.workspace.chat.message.v1.deleted`
     *
     * @generated from field: google.chat.v1.MessageDeletedEventData message_deleted_event_data = 14;
     */
    value: MessageDeletedEventData;
    case: "messageDeletedEventData";
  } | {
    /**
     * Event payload for multiple new messages.
     *
     * Event type: `google.workspace.chat.message.v1.batchCreated`
     *
     * @generated from field: google.chat.v1.MessageBatchCreatedEventData message_batch_created_event_data = 26;
     */
    value: MessageBatchCreatedEventData;
    case: "messageBatchCreatedEventData";
  } | {
    /**
     * Event payload for multiple updated messages.
     *
     * Event type: `google.workspace.chat.message.v1.batchUpdated`
     *
     * @generated from field: google.chat.v1.MessageBatchUpdatedEventData message_batch_updated_event_data = 27;
     */
    value: MessageBatchUpdatedEventData;
    case: "messageBatchUpdatedEventData";
  } | {
    /**
     * Event payload for multiple deleted messages.
     *
     * Event type: `google.workspace.chat.message.v1.batchDeleted`
     *
     * @generated from field: google.chat.v1.MessageBatchDeletedEventData message_batch_deleted_event_data = 28;
     */
    value: MessageBatchDeletedEventData;
    case: "messageBatchDeletedEventData";
  } | {
    /**
     * Event payload for a space update.
     *
     * Event type: `google.workspace.chat.space.v1.updated`
     *
     * @generated from field: google.chat.v1.SpaceUpdatedEventData space_updated_event_data = 15;
     */
    value: SpaceUpdatedEventData;
    case: "spaceUpdatedEventData";
  } | {
    /**
     * Event payload for multiple updates to a space.
     *
     * Event type: `google.workspace.chat.space.v1.batchUpdated`
     *
     * @generated from field: google.chat.v1.SpaceBatchUpdatedEventData space_batch_updated_event_data = 29;
     */
    value: SpaceBatchUpdatedEventData;
    case: "spaceBatchUpdatedEventData";
  } | {
    /**
     * Event payload for a new membership.
     *
     * Event type: `google.workspace.chat.membership.v1.created`
     *
     * @generated from field: google.chat.v1.MembershipCreatedEventData membership_created_event_data = 17;
     */
    value: MembershipCreatedEventData;
    case: "membershipCreatedEventData";
  } | {
    /**
     * Event payload for an updated membership.
     *
     * Event type: `google.workspace.chat.membership.v1.updated`
     *
     * @generated from field: google.chat.v1.MembershipUpdatedEventData membership_updated_event_data = 18;
     */
    value: MembershipUpdatedEventData;
    case: "membershipUpdatedEventData";
  } | {
    /**
     * Event payload for a deleted membership.
     *
     * Event type: `google.workspace.chat.membership.v1.deleted`
     *
     * @generated from field: google.chat.v1.MembershipDeletedEventData membership_deleted_event_data = 219;
     */
    value: MembershipDeletedEventData;
    case: "membershipDeletedEventData";
  } | {
    /**
     * Event payload for multiple new memberships.
     *
     * Event type: `google.workspace.chat.membership.v1.batchCreated`
     *
     * @generated from field: google.chat.v1.MembershipBatchCreatedEventData membership_batch_created_event_data = 31;
     */
    value: MembershipBatchCreatedEventData;
    case: "membershipBatchCreatedEventData";
  } | {
    /**
     * Event payload for multiple updated memberships.
     *
     * Event type: `google.workspace.chat.membership.v1.batchUpdated`
     *
     * @generated from field: google.chat.v1.MembershipBatchUpdatedEventData membership_batch_updated_event_data = 32;
     */
    value: MembershipBatchUpdatedEventData;
    case: "membershipBatchUpdatedEventData";
  } | {
    /**
     * Event payload for multiple deleted memberships.
     *
     * Event type: `google.workspace.chat.membership.v1.batchDeleted`
     *
     * @generated from field: google.chat.v1.MembershipBatchDeletedEventData membership_batch_deleted_event_data = 33;
     */
    value: MembershipBatchDeletedEventData;
    case: "membershipBatchDeletedEventData";
  } | {
    /**
     * Event payload for a new reaction.
     *
     * Event type: `google.workspace.chat.reaction.v1.created`
     *
     * @generated from field: google.chat.v1.ReactionCreatedEventData reaction_created_event_data = 21;
     */
    value: ReactionCreatedEventData;
    case: "reactionCreatedEventData";
  } | {
    /**
     * Event payload for a deleted reaction.
     *
     * Event type: `google.workspace.chat.reaction.v1.deleted`
     *
     * @generated from field: google.chat.v1.ReactionDeletedEventData reaction_deleted_event_data = 22;
     */
    value: ReactionDeletedEventData;
    case: "reactionDeletedEventData";
  } | {
    /**
     * Event payload for multiple new reactions.
     *
     * Event type: `google.workspace.chat.reaction.v1.batchCreated`
     *
     * @generated from field: google.chat.v1.ReactionBatchCreatedEventData reaction_batch_created_event_data = 34;
     */
    value: ReactionBatchCreatedEventData;
    case: "reactionBatchCreatedEventData";
  } | {
    /**
     * Event payload for multiple deleted reactions.
     *
     * Event type: `google.workspace.chat.reaction.v1.batchDeleted`
     *
     * @generated from field: google.chat.v1.ReactionBatchDeletedEventData reaction_batch_deleted_event_data = 35;
     */
    value: ReactionBatchDeletedEventData;
    case: "reactionBatchDeletedEventData";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.SpaceEvent.
 * Use `create(SpaceEventSchema)` to create a new message.
 */
export const SpaceEventSchema: GenMessage<SpaceEvent> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_event, 0);

/**
 * Request message for getting a space event.
 *
 * @generated from message google.chat.v1.GetSpaceEventRequest
 */
export type GetSpaceEventRequest = Message<"google.chat.v1.GetSpaceEventRequest"> & {
  /**
   * Required. The resource name of the space event.
   *
   * Format: `spaces/{space}/spaceEvents/{spaceEvent}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.GetSpaceEventRequest.
 * Use `create(GetSpaceEventRequestSchema)` to create a new message.
 */
export const GetSpaceEventRequestSchema: GenMessage<GetSpaceEventRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_event, 1);

/**
 * Request message for listing space events.
 *
 * @generated from message google.chat.v1.ListSpaceEventsRequest
 */
export type ListSpaceEventsRequest = Message<"google.chat.v1.ListSpaceEventsRequest"> & {
  /**
   * Required. Resource name of the [Google Chat
   * space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
   * where the events occurred.
   *
   * Format: `spaces/{space}`.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of space events returned. The service might
   * return fewer than this value.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize: number;

  /**
   * A page token, received from a previous list space events call. Provide this
   * to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to list space events must
   * match the call that provided the page token. Passing different values to
   * the other parameters might lead to unexpected results.
   *
   * @generated from field: string page_token = 6;
   */
  pageToken: string;

  /**
   * Required. A query filter.
   *
   * You must specify at least one event type (`event_type`)
   * using the has `:` operator. To filter by multiple event types, use the `OR`
   * operator. Omit batch event types in your filter. The request automatically
   * returns any related batch events. For example, if you filter by new
   * reactions
   * (`google.workspace.chat.reaction.v1.created`), the server also returns
   * batch new reactions events
   * (`google.workspace.chat.reaction.v1.batchCreated`). For a list of supported
   * event types, see the [`SpaceEvents` reference
   * documentation](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.event_type).
   *
   * Optionally, you can also filter by start time (`start_time`) and
   * end time (`end_time`):
   *
   * * `start_time`: Exclusive timestamp from which to start listing space
   * events.
   *  You can list events that occurred up to 28 days ago. If unspecified, lists
   *  space events from the past 28 days.
   * * `end_time`: Inclusive timestamp until which space events are listed.
   *  If unspecified, lists events up to the time of the request.
   *
   * To specify a start or end time, use the equals `=` operator and format in
   * [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339). To filter by both
   * `start_time` and `end_time`, use the `AND` operator.
   *
   * For example, the following queries are valid:
   *
   * ```
   * start_time="2023-08-23T19:20:33+00:00" AND
   * end_time="2023-08-23T19:21:54+00:00"
   * ```
   * ```
   * start_time="2023-08-23T19:20:33+00:00" AND
   * (event_types:"google.workspace.chat.space.v1.updated" OR
   * event_types:"google.workspace.chat.message.v1.created")
   * ```
   *
   * The following queries are invalid:
   *
   * ```
   * start_time="2023-08-23T19:20:33+00:00" OR
   * end_time="2023-08-23T19:21:54+00:00"
   * ```
   * ```
   * event_types:"google.workspace.chat.space.v1.updated" AND
   * event_types:"google.workspace.chat.message.v1.created"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   *
   * @generated from field: string filter = 8;
   */
  filter: string;
};

/**
 * Describes the message google.chat.v1.ListSpaceEventsRequest.
 * Use `create(ListSpaceEventsRequestSchema)` to create a new message.
 */
export const ListSpaceEventsRequestSchema: GenMessage<ListSpaceEventsRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_event, 2);

/**
 * Response message for listing space events.
 *
 * @generated from message google.chat.v1.ListSpaceEventsResponse
 */
export type ListSpaceEventsResponse = Message<"google.chat.v1.ListSpaceEventsResponse"> & {
  /**
   * Results are returned in chronological order (oldest event first).
   *
   * @generated from field: repeated google.chat.v1.SpaceEvent space_events = 1;
   */
  spaceEvents: SpaceEvent[];

  /**
   * Continuation token used to fetch more events.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.chat.v1.ListSpaceEventsResponse.
 * Use `create(ListSpaceEventsResponseSchema)` to create a new message.
 */
export const ListSpaceEventsResponseSchema: GenMessage<ListSpaceEventsResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_event, 3);

