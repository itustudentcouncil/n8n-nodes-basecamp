// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/space.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { HistoryState } from "./history_state_pb";
import { file_google_chat_v1_history_state } from "./history_state_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/space.proto.
 */
export const file_google_chat_v1_space: GenFile = /*@__PURE__*/
  fileDesc("Chpnb29nbGUvY2hhdC92MS9zcGFjZS5wcm90bxIOZ29vZ2xlLmNoYXQudjEikgsKBVNwYWNlEgwKBG5hbWUYASABKAkSLwoEdHlwZRgCIAEoDjIaLmdvb2dsZS5jaGF0LnYxLlNwYWNlLlR5cGVCBRgB4EEDEjMKCnNwYWNlX3R5cGUYCiABKA4yHy5nb29nbGUuY2hhdC52MS5TcGFjZS5TcGFjZVR5cGUSHwoSc2luZ2xlX3VzZXJfYm90X2RtGAQgASgIQgPgQQESFwoIdGhyZWFkZWQYBSABKAhCBRgB4EEDEhQKDGRpc3BsYXlfbmFtZRgDIAEoCRIiChVleHRlcm5hbF91c2VyX2FsbG93ZWQYCCABKAhCA+BBBRJNChVzcGFjZV90aHJlYWRpbmdfc3RhdGUYCSABKA4yKS5nb29nbGUuY2hhdC52MS5TcGFjZS5TcGFjZVRocmVhZGluZ1N0YXRlQgPgQQMSOQoNc3BhY2VfZGV0YWlscxgLIAEoCzIiLmdvb2dsZS5jaGF0LnYxLlNwYWNlLlNwYWNlRGV0YWlscxI5ChNzcGFjZV9oaXN0b3J5X3N0YXRlGA0gASgOMhwuZ29vZ2xlLmNoYXQudjEuSGlzdG9yeVN0YXRlEhgKC2ltcG9ydF9tb2RlGBAgASgIQgPgQQESNwoLY3JlYXRlX3RpbWUYESABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgbgQQXgQQESOQoQbGFzdF9hY3RpdmVfdGltZRgSIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBAxIcCg9hZG1pbl9pbnN0YWxsZWQYEyABKAhCA+BBAxJEChBtZW1iZXJzaGlwX2NvdW50GBQgASgLMiUuZ29vZ2xlLmNoYXQudjEuU3BhY2UuTWVtYmVyc2hpcENvdW50QgPgQQMSQgoPYWNjZXNzX3NldHRpbmdzGBcgASgLMiQuZ29vZ2xlLmNoYXQudjEuU3BhY2UuQWNjZXNzU2V0dGluZ3NCA+BBARIWCglzcGFjZV91cmkYGSABKAlCA+BBAxo3CgxTcGFjZURldGFpbHMSEwoLZGVzY3JpcHRpb24YASABKAkSEgoKZ3VpZGVsaW5lcxgCIAEoCRpVCg9NZW1iZXJzaGlwQ291bnQSJgoeam9pbmVkX2RpcmVjdF9odW1hbl91c2VyX2NvdW50GAQgASgFEhoKEmpvaW5lZF9ncm91cF9jb3VudBgFIAEoBRrAAQoOQWNjZXNzU2V0dGluZ3MSSwoMYWNjZXNzX3N0YXRlGAEgASgOMjAuZ29vZ2xlLmNoYXQudjEuU3BhY2UuQWNjZXNzU2V0dGluZ3MuQWNjZXNzU3RhdGVCA+BBAxIVCghhdWRpZW5jZRgDIAEoCUID4EEBIkoKC0FjY2Vzc1N0YXRlEhwKGEFDQ0VTU19TVEFURV9VTlNQRUNJRklFRBAAEgsKB1BSSVZBVEUQARIQCgxESVNDT1ZFUkFCTEUQAiIuCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIICgRST09NEAESBgoCRE0QAiJWCglTcGFjZVR5cGUSGgoWU1BBQ0VfVFlQRV9VTlNQRUNJRklFRBAAEgkKBVNQQUNFEAESDgoKR1JPVVBfQ0hBVBACEhIKDkRJUkVDVF9NRVNTQUdFEAMiggEKE1NwYWNlVGhyZWFkaW5nU3RhdGUSJQohU1BBQ0VfVEhSRUFESU5HX1NUQVRFX1VOU1BFQ0lGSUVEEAASFQoRVEhSRUFERURfTUVTU0FHRVMQAhIUChBHUk9VUEVEX01FU1NBR0VTEAMSFwoTVU5USFJFQURFRF9NRVNTQUdFUxAEOi7qQSsKGWNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2USDnNwYWNlcy97c3BhY2V9IlgKEkNyZWF0ZVNwYWNlUmVxdWVzdBIpCgVzcGFjZRgBIAEoCzIVLmdvb2dsZS5jaGF0LnYxLlNwYWNlQgPgQQISFwoKcmVxdWVzdF9pZBgCIAEoCUID4EEBIlkKEUxpc3RTcGFjZXNSZXF1ZXN0EhYKCXBhZ2Vfc2l6ZRgBIAEoBUID4EEBEhcKCnBhZ2VfdG9rZW4YAiABKAlCA+BBARITCgZmaWx0ZXIYAyABKAlCA+BBASJUChJMaXN0U3BhY2VzUmVzcG9uc2USJQoGc3BhY2VzGAEgAygLMhUuZ29vZ2xlLmNoYXQudjEuU3BhY2USFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIlwKD0dldFNwYWNlUmVxdWVzdBIvCgRuYW1lGAEgASgJQiHgQQL6QRsKGWNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2USGAoQdXNlX2FkbWluX2FjY2VzcxgCIAEoCCItChhGaW5kRGlyZWN0TWVzc2FnZVJlcXVlc3QSEQoEbmFtZRgBIAEoCUID4EECIooBChJVcGRhdGVTcGFjZVJlcXVlc3QSKQoFc3BhY2UYASABKAsyFS5nb29nbGUuY2hhdC52MS5TcGFjZUID4EECEi8KC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzaxIYChB1c2VfYWRtaW5fYWNjZXNzGAMgASgIIoEBChNTZWFyY2hTcGFjZXNSZXF1ZXN0EhgKEHVzZV9hZG1pbl9hY2Nlc3MYASABKAgSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSEgoFcXVlcnkYBCABKAlCA+BBAhIVCghvcmRlcl9ieRgFIAEoCUID4EEBImoKFFNlYXJjaFNwYWNlc1Jlc3BvbnNlEiUKBnNwYWNlcxgBIAMoCzIVLmdvb2dsZS5jaGF0LnYxLlNwYWNlEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCRISCgp0b3RhbF9zaXplGAMgASgFIl8KEkRlbGV0ZVNwYWNlUmVxdWVzdBIvCgRuYW1lGAEgASgJQiHgQQL6QRsKGWNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2USGAoQdXNlX2FkbWluX2FjY2VzcxgCIAEoCCJNChpDb21wbGV0ZUltcG9ydFNwYWNlUmVxdWVzdBIvCgRuYW1lGAEgASgJQiHgQQL6QRsKGWNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2UiQwobQ29tcGxldGVJbXBvcnRTcGFjZVJlc3BvbnNlEiQKBXNwYWNlGAEgASgLMhUuZ29vZ2xlLmNoYXQudjEuU3BhY2VCowEKEmNvbS5nb29nbGUuY2hhdC52MUIKU3BhY2VQcm90b1ABWixjbG91ZC5nb29nbGUuY29tL2dvL2NoYXQvYXBpdjEvY2hhdHBiO2NoYXRwYqICC0RZTkFQSVByb3RvqgITR29vZ2xlLkFwcHMuQ2hhdC5WMcoCE0dvb2dsZVxBcHBzXENoYXRcVjHqAhZHb29nbGU6OkFwcHM6OkNoYXQ6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_chat_v1_history_state, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A space in Google Chat. Spaces are conversations between two or more users
 * or 1:1 messages between a user and a Chat app.
 *
 * @generated from message google.chat.v1.Space
 */
export type Space = Message<"google.chat.v1.Space"> & {
  /**
   * Resource name of the space.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. Deprecated: Use `space_type` instead.
   * The type of a space.
   *
   * @generated from field: google.chat.v1.Space.Type type = 2 [deprecated = true];
   * @deprecated
   */
  type: Space_Type;

  /**
   * The type of space. Required when creating a space or updating the space
   * type of a space. Output only for other usage.
   *
   * @generated from field: google.chat.v1.Space.SpaceType space_type = 10;
   */
  spaceType: Space_SpaceType;

  /**
   * Optional. Whether the space is a DM between a Chat app and a single
   * human.
   *
   * @generated from field: bool single_user_bot_dm = 4;
   */
  singleUserBotDm: boolean;

  /**
   * Output only. Deprecated: Use `spaceThreadingState` instead.
   * Whether messages are threaded in this space.
   *
   * @generated from field: bool threaded = 5 [deprecated = true];
   * @deprecated
   */
  threaded: boolean;

  /**
   * The space's display name. Required when [creating a
   * space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/create).
   * If you receive the error message `ALREADY_EXISTS` when creating a space or
   * updating the `displayName`, try a different `displayName`. An
   * existing space within the Google Workspace organization might already use
   * this display name.
   *
   * For direct messages, this field might be empty.
   *
   * Supports up to 128 characters.
   *
   * @generated from field: string display_name = 3;
   */
  displayName: string;

  /**
   * Immutable. Whether this space permits any Google Chat user as a member.
   * Input when creating a space in a Google Workspace organization. Omit this
   * field when creating spaces in the following conditions:
   *
   *   * The authenticated user uses a consumer account (unmanaged user
   *     account). By default, a space created by a consumer account permits any
   *     Google Chat user.
   *
   *   * The space is used to [import data to Google Chat]
   *     (https://developers.google.com/chat/api/guides/import-data-overview)
   *     because import mode spaces must only permit members from the same
   *     Google Workspace organization. However, as part of the [Google
   *     Workspace Developer Preview
   *     Program](https://developers.google.com/workspace/preview), import mode
   *     spaces can permit any Google Chat user so this field can then be set
   *     for import mode spaces.
   *
   * For existing spaces, this field is output only.
   *
   * @generated from field: bool external_user_allowed = 8;
   */
  externalUserAllowed: boolean;

  /**
   * Output only. The threading state in the Chat space.
   *
   * @generated from field: google.chat.v1.Space.SpaceThreadingState space_threading_state = 9;
   */
  spaceThreadingState: Space_SpaceThreadingState;

  /**
   * Details about the space including description and rules.
   *
   * @generated from field: google.chat.v1.Space.SpaceDetails space_details = 11;
   */
  spaceDetails?: Space_SpaceDetails;

  /**
   * The message history state for messages and threads in this space.
   *
   * @generated from field: google.chat.v1.HistoryState space_history_state = 13;
   */
  spaceHistoryState: HistoryState;

  /**
   * Optional. Whether this space is created in `Import Mode` as part of a data
   * migration into Google Workspace. While spaces are being imported, they
   * aren't visible to users until the import is complete.
   *
   * @generated from field: bool import_mode = 16;
   */
  importMode: boolean;

  /**
   * Optional. Immutable. For spaces created in Chat, the time the space was
   * created. This field is output only, except when used in import mode spaces.
   *
   * For import mode spaces, set this field to the historical timestamp at which
   * the space was created in the source in order to preserve the original
   * creation time.
   *
   * Only populated in the output when `spaceType` is `GROUP_CHAT` or `SPACE`.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 17;
   */
  createTime?: Timestamp;

  /**
   * Output only. Timestamp of the last message in the space.
   *
   * @generated from field: google.protobuf.Timestamp last_active_time = 18;
   */
  lastActiveTime?: Timestamp;

  /**
   * Output only. For direct message (DM) spaces with a Chat app, whether the
   * space was created by a Google Workspace administrator. Administrators can
   * install and set up a direct message with a Chat app on behalf of users in
   * their organization.
   *
   * To support admin install, your Chat app must feature direct messaging.
   *
   * @generated from field: bool admin_installed = 19;
   */
  adminInstalled: boolean;

  /**
   * Output only. The count of joined memberships grouped by member type.
   * Populated when the `space_type` is `SPACE`, `DIRECT_MESSAGE` or
   * `GROUP_CHAT`.
   *
   * @generated from field: google.chat.v1.Space.MembershipCount membership_count = 20;
   */
  membershipCount?: Space_MembershipCount;

  /**
   * Optional. Specifies the [access
   * setting](https://support.google.com/chat/answer/11971020) of the space.
   * Only populated when the `space_type` is `SPACE`.
   *
   * @generated from field: google.chat.v1.Space.AccessSettings access_settings = 23;
   */
  accessSettings?: Space_AccessSettings;

  /**
   * Output only. The URI for a user to access the space.
   *
   * @generated from field: string space_uri = 25;
   */
  spaceUri: string;
};

/**
 * Describes the message google.chat.v1.Space.
 * Use `create(SpaceSchema)` to create a new message.
 */
export const SpaceSchema: GenMessage<Space> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 0);

/**
 * Details about the space including description and rules.
 *
 * @generated from message google.chat.v1.Space.SpaceDetails
 */
export type Space_SpaceDetails = Message<"google.chat.v1.Space.SpaceDetails"> & {
  /**
   * Optional. A description of the space. For example, describe the space's
   * discussion topic, functional purpose, or participants.
   *
   * Supports up to 150 characters.
   *
   * @generated from field: string description = 1;
   */
  description: string;

  /**
   * Optional. The space's rules, expectations, and etiquette.
   *
   * Supports up to 5,000 characters.
   *
   * @generated from field: string guidelines = 2;
   */
  guidelines: string;
};

/**
 * Describes the message google.chat.v1.Space.SpaceDetails.
 * Use `create(Space_SpaceDetailsSchema)` to create a new message.
 */
export const Space_SpaceDetailsSchema: GenMessage<Space_SpaceDetails> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 0, 0);

/**
 * Represents the count of memberships of a space, grouped into categories.
 *
 * @generated from message google.chat.v1.Space.MembershipCount
 */
export type Space_MembershipCount = Message<"google.chat.v1.Space.MembershipCount"> & {
  /**
   * Count of human users that have directly joined the space, not counting
   * users joined by having membership in a joined group.
   *
   * @generated from field: int32 joined_direct_human_user_count = 4;
   */
  joinedDirectHumanUserCount: number;

  /**
   * Count of all groups that have directly joined the space.
   *
   * @generated from field: int32 joined_group_count = 5;
   */
  joinedGroupCount: number;
};

/**
 * Describes the message google.chat.v1.Space.MembershipCount.
 * Use `create(Space_MembershipCountSchema)` to create a new message.
 */
export const Space_MembershipCountSchema: GenMessage<Space_MembershipCount> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 0, 1);

/**
 * Represents the [access
 * setting](https://support.google.com/chat/answer/11971020) of the space.
 *
 * @generated from message google.chat.v1.Space.AccessSettings
 */
export type Space_AccessSettings = Message<"google.chat.v1.Space.AccessSettings"> & {
  /**
   * Output only. Indicates the access state of the space.
   *
   * @generated from field: google.chat.v1.Space.AccessSettings.AccessState access_state = 1;
   */
  accessState: Space_AccessSettings_AccessState;

  /**
   * Optional. The resource name of the [target
   * audience](https://support.google.com/a/answer/9934697) who can discover
   * the space, join the space, and preview the messages in the space. For
   * details, see [Make a space discoverable to a target
   * audience](https://developers.google.com/workspace/chat/space-target-audience).
   *
   * Format: `audiences/{audience}`
   *
   * To use the default target audience for the Google Workspace organization,
   * set to `audiences/default`.
   *
   * @generated from field: string audience = 3;
   */
  audience: string;
};

/**
 * Describes the message google.chat.v1.Space.AccessSettings.
 * Use `create(Space_AccessSettingsSchema)` to create a new message.
 */
export const Space_AccessSettingsSchema: GenMessage<Space_AccessSettings> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 0, 2);

/**
 * Represents the access state of the space.
 *
 * @generated from enum google.chat.v1.Space.AccessSettings.AccessState
 */
export enum Space_AccessSettings_AccessState {
  /**
   * Access state is unknown or not supported in this API.
   *
   * @generated from enum value: ACCESS_STATE_UNSPECIFIED = 0;
   */
  ACCESS_STATE_UNSPECIFIED = 0,

  /**
   * Space is discoverable by added or invited members or groups.
   *
   * @generated from enum value: PRIVATE = 1;
   */
  PRIVATE = 1,

  /**
   * Space is discoverable by the selected [target
   * audience](https://support.google.com/a/answer/9934697), as well as
   * added or invited members or groups.
   *
   * @generated from enum value: DISCOVERABLE = 2;
   */
  DISCOVERABLE = 2,
}

/**
 * Describes the enum google.chat.v1.Space.AccessSettings.AccessState.
 */
export const Space_AccessSettings_AccessStateSchema: GenEnum<Space_AccessSettings_AccessState> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_space, 0, 2, 0);

/**
 * Deprecated: Use `SpaceType` instead.
 *
 * @generated from enum google.chat.v1.Space.Type
 */
export enum Space_Type {
  /**
   * Reserved.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Conversations between two or more humans.
   *
   * @generated from enum value: ROOM = 1;
   */
  ROOM = 1,

  /**
   * 1:1 Direct Message between a human and a Chat app, where all messages are
   * flat. Note that this doesn't include direct messages between two humans.
   *
   * @generated from enum value: DM = 2;
   */
  DM = 2,
}

/**
 * Describes the enum google.chat.v1.Space.Type.
 */
export const Space_TypeSchema: GenEnum<Space_Type> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_space, 0, 0);

/**
 * The type of space. Required when creating or updating a space. Output only
 * for other usage.
 *
 * @generated from enum google.chat.v1.Space.SpaceType
 */
export enum Space_SpaceType {
  /**
   * Reserved.
   *
   * @generated from enum value: SPACE_TYPE_UNSPECIFIED = 0;
   */
  SPACE_TYPE_UNSPECIFIED = 0,

  /**
   * A place where people send messages, share files, and collaborate.
   * A `SPACE` can include Chat apps.
   *
   * @generated from enum value: SPACE = 1;
   */
  SPACE = 1,

  /**
   * Group conversations between 3 or more people.
   * A `GROUP_CHAT` can include Chat apps.
   *
   * @generated from enum value: GROUP_CHAT = 2;
   */
  GROUP_CHAT = 2,

  /**
   * 1:1 messages between two humans or a human and a Chat app.
   *
   * @generated from enum value: DIRECT_MESSAGE = 3;
   */
  DIRECT_MESSAGE = 3,
}

/**
 * Describes the enum google.chat.v1.Space.SpaceType.
 */
export const Space_SpaceTypeSchema: GenEnum<Space_SpaceType> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_space, 0, 1);

/**
 * Specifies the type of threading state in the Chat space.
 *
 * @generated from enum google.chat.v1.Space.SpaceThreadingState
 */
export enum Space_SpaceThreadingState {
  /**
   * Reserved.
   *
   * @generated from enum value: SPACE_THREADING_STATE_UNSPECIFIED = 0;
   */
  SPACE_THREADING_STATE_UNSPECIFIED = 0,

  /**
   * Named spaces that support message threads. When users respond to a
   * message, they can reply in-thread, which keeps their response in the
   * context of the original message.
   *
   * @generated from enum value: THREADED_MESSAGES = 2;
   */
  THREADED_MESSAGES = 2,

  /**
   * Named spaces where the conversation is organized by topic. Topics and
   * their replies are grouped together.
   *
   * @generated from enum value: GROUPED_MESSAGES = 3;
   */
  GROUPED_MESSAGES = 3,

  /**
   * Direct messages (DMs) between two people and group conversations between
   * 3 or more people.
   *
   * @generated from enum value: UNTHREADED_MESSAGES = 4;
   */
  UNTHREADED_MESSAGES = 4,
}

/**
 * Describes the enum google.chat.v1.Space.SpaceThreadingState.
 */
export const Space_SpaceThreadingStateSchema: GenEnum<Space_SpaceThreadingState> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_space, 0, 2);

/**
 * A request to create a named space.
 *
 * @generated from message google.chat.v1.CreateSpaceRequest
 */
export type CreateSpaceRequest = Message<"google.chat.v1.CreateSpaceRequest"> & {
  /**
   * Required. The `displayName` and `spaceType` fields must be populated.  Only
   * `SpaceType.SPACE` is supported.
   *
   * If you receive the error message `ALREADY_EXISTS` when creating a space,
   * try a different `displayName`. An existing space within the Google
   * Workspace organization might already use this display name.
   *
   * The space `name` is assigned on the server so anything specified in this
   * field will be ignored.
   *
   * @generated from field: google.chat.v1.Space space = 1;
   */
  space?: Space;

  /**
   * Optional. A unique identifier for this request.
   * A random UUID is recommended.
   * Specifying an existing request ID returns the space created with that ID
   * instead of creating a new space.
   * Specifying an existing request ID from the same Chat app with a different
   * authenticated user returns an error.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;
};

/**
 * Describes the message google.chat.v1.CreateSpaceRequest.
 * Use `create(CreateSpaceRequestSchema)` to create a new message.
 */
export const CreateSpaceRequestSchema: GenMessage<CreateSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 1);

/**
 * A request to list the spaces the caller is a member of.
 *
 * @generated from message google.chat.v1.ListSpacesRequest
 */
export type ListSpacesRequest = Message<"google.chat.v1.ListSpacesRequest"> & {
  /**
   * Optional. The maximum number of spaces to return. The service might return
   * fewer than this value.
   *
   * If unspecified, at most 100 spaces are returned.
   *
   * The maximum value is 1000. If you use a value more than 1000, it's
   * automatically changed to 1000.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous list spaces call.
   * Provide this parameter to retrieve the subsequent page.
   *
   * When paginating, the filter value should match the call that provided the
   * page token. Passing a different value may lead to unexpected results.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Optional. A query filter.
   *
   * You can filter spaces by the space type
   * ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
   *
   * To filter by space type, you must specify valid enum value, such as
   * `SPACE` or `GROUP_CHAT` (the `space_type` can't be
   * `SPACE_TYPE_UNSPECIFIED`). To query for multiple space types, use the `OR`
   * operator.
   *
   * For example, the following queries are valid:
   *
   * ```
   * space_type = "SPACE"
   * spaceType = "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   *
   * @generated from field: string filter = 3;
   */
  filter: string;
};

/**
 * Describes the message google.chat.v1.ListSpacesRequest.
 * Use `create(ListSpacesRequestSchema)` to create a new message.
 */
export const ListSpacesRequestSchema: GenMessage<ListSpacesRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 2);

/**
 * The response for a list spaces request.
 *
 * @generated from message google.chat.v1.ListSpacesResponse
 */
export type ListSpacesResponse = Message<"google.chat.v1.ListSpacesResponse"> & {
  /**
   * List of spaces in the requested (or first) page.
   *
   * @generated from field: repeated google.chat.v1.Space spaces = 1;
   */
  spaces: Space[];

  /**
   * You can send a token as `pageToken` to retrieve the next page of
   * results. If empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.chat.v1.ListSpacesResponse.
 * Use `create(ListSpacesResponseSchema)` to create a new message.
 */
export const ListSpacesResponseSchema: GenMessage<ListSpacesResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 3);

/**
 * A request to return a single space.
 *
 * @generated from message google.chat.v1.GetSpaceRequest
 */
export type GetSpaceRequest = Message<"google.chat.v1.GetSpaceRequest"> & {
  /**
   * Required. Resource name of the space, in the form `spaces/{space}`.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.spaces` or `chat.admin.spaces.readonly` [OAuth 2.0
   * scopes](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * @generated from field: bool use_admin_access = 2;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.GetSpaceRequest.
 * Use `create(GetSpaceRequestSchema)` to create a new message.
 */
export const GetSpaceRequestSchema: GenMessage<GetSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 4);

/**
 * A request to get direct message space based on the user resource.
 *
 * @generated from message google.chat.v1.FindDirectMessageRequest
 */
export type FindDirectMessageRequest = Message<"google.chat.v1.FindDirectMessageRequest"> & {
  /**
   * Required. Resource name of the user to find direct message with.
   *
   * Format: `users/{user}`, where `{user}` is either the `id` for the
   * [person](https://developers.google.com/people/api/rest/v1/people) from the
   * People API, or the `id` for the
   * [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
   * in the Directory API. For example, if the People API profile ID is
   * `123456789`, you can find a direct message with that person by using
   * `users/123456789` as the `name`. When [authenticated as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * you can use the email as an alias for `{user}`. For example,
   * `users/example@gmail.com` where `example@gmail.com` is the email of the
   * Google Chat user.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.FindDirectMessageRequest.
 * Use `create(FindDirectMessageRequestSchema)` to create a new message.
 */
export const FindDirectMessageRequestSchema: GenMessage<FindDirectMessageRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 5);

/**
 * A request to update a single space.
 *
 * @generated from message google.chat.v1.UpdateSpaceRequest
 */
export type UpdateSpaceRequest = Message<"google.chat.v1.UpdateSpaceRequest"> & {
  /**
   * Required. Space with fields to be updated. `Space.name` must be
   * populated in the form of `spaces/{space}`. Only fields
   * specified by `update_mask` are updated.
   *
   * @generated from field: google.chat.v1.Space space = 1;
   */
  space?: Space;

  /**
   * Required. The updated field paths, comma separated if there are
   * multiple.
   *
   * Currently supported field paths:
   *
   * - `display_name` (Only supports changing the display name of a space with
   * the `SPACE` type, or when also including the `space_type` mask to change a
   * `GROUP_CHAT` space type to `SPACE`. Trying to update the display name of a
   * `GROUP_CHAT` or a `DIRECT_MESSAGE` space results in an invalid argument
   * error. If you receive the error message `ALREADY_EXISTS` when updating the
   * `displayName`, try a different `displayName`. An existing space within the
   * Google Workspace organization might already use this display name.)
   *
   * - `space_type` (Only supports changing a `GROUP_CHAT` space type to
   * `SPACE`. Include `display_name` together
   * with `space_type` in the update mask and ensure that the specified space
   * has a non-empty display name and the `SPACE` space type. Including the
   * `space_type` mask and the `SPACE` type in the specified space when updating
   * the display name is optional if the existing space already has the `SPACE`
   * type. Trying to update the space type in other ways results in an invalid
   * argument error).
   * `space_type` is not supported with admin access.
   *
   * - `space_details`
   *
   * - `space_history_state` (Supports [turning history on or off for the
   * space](https://support.google.com/chat/answer/7664687) if [the organization
   * allows users to change their history
   * setting](https://support.google.com/a/answer/7664184).
   * Warning: mutually exclusive with all other field paths.)
   * `space_history_state` is not supported with admin access.
   *
   * - `access_settings.audience` (Supports changing the [access
   * setting](https://support.google.com/chat/answer/11971020) of who can
   * discover the space, join the space, and preview the messages in space. If
   * no audience is specified in the access setting, the space's access setting
   * is updated to private. Warning: mutually exclusive with all other field
   * paths.)
   * `access_settings.audience` is not supported with admin access.
   *
   * - Developer Preview: Supports changing the [permission
   * settings](https://support.google.com/chat/answer/13340792) of a space,
   * supported field paths
   * include: `permission_settings.manage_members_and_groups`,
   * `permission_settings.modify_space_details`,
   * `permission_settings.toggle_history`,
   * `permission_settings.use_at_mention_all`,
   * `permission_settings.manage_apps`, `permission_settings.manage_webhooks`,
   * `permission_settings.reply_messages`
   *  (Warning: mutually exclusive with all other non-permission settings field
   * paths). `permission_settings` is not supported with admin access.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.spaces` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Some `FieldMask` values are not supported using admin access. For details,
   * see the description of `update_mask`.
   *
   * @generated from field: bool use_admin_access = 3;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.UpdateSpaceRequest.
 * Use `create(UpdateSpaceRequestSchema)` to create a new message.
 */
export const UpdateSpaceRequestSchema: GenMessage<UpdateSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 6);

/**
 * Request to search for a list of spaces based on a query.
 *
 * @generated from message google.chat.v1.SearchSpacesRequest
 */
export type SearchSpacesRequest = Message<"google.chat.v1.SearchSpacesRequest"> & {
  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires either the `chat.admin.spaces.readonly` or `chat.admin.spaces`
   * [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * This method currently only supports admin access, thus only `true` is
   * accepted for this field.
   *
   * @generated from field: bool use_admin_access = 1;
   */
  useAdminAccess: boolean;

  /**
   * The maximum number of spaces to return. The service may return fewer than
   * this value.
   *
   * If unspecified, at most 100 spaces are returned.
   *
   * The maximum value is 1000. If you use a value more than 1000, it's
   * automatically changed to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A token, received from the previous search spaces call. Provide this
   * parameter to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided should match the call that
   * provided the page token. Passing different values to the other parameters
   * might lead to unexpected results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Required. A search query.
   *
   * You can search by using the following parameters:
   *
   * - `create_time`
   * - `customer`
   * - `display_name`
   * - `external_user_allowed`
   * - `last_active_time`
   * - `space_history_state`
   * - `space_type`
   *
   * `create_time` and `last_active_time` accept a timestamp in
   * [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339) format and the supported
   * comparison operators are: `=`, `<`, `>`, `<=`, `>=`.
   *
   * `customer` is required and is used to indicate which customer
   * to fetch spaces from. `customers/my_customer` is the only supported value.
   *
   * `display_name` only accepts the `HAS` (`:`) operator. The text to
   * match is first tokenized into tokens and each token is prefix-matched
   * case-insensitively and independently as a substring anywhere in the space's
   * `display_name`. For example, `Fun Eve` matches `Fun event` or `The
   * evening was fun`, but not `notFun event` or `even`.
   *
   * `external_user_allowed` accepts either `true` or `false`.
   *
   * `space_history_state` only accepts values from the [`historyState`]
   * (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#Space.HistoryState)
   * field of a `space` resource.
   *
   * `space_type` is required and the only valid value is `SPACE`.
   *
   * Across different fields, only `AND` operators are supported. A valid
   * example is `space_type = "SPACE" AND display_name:"Hello"` and an invalid
   * example is `space_type = "SPACE" OR display_name:"Hello"`.
   *
   * Among the same field,
   * `space_type` doesn't support `AND` or `OR` operators.
   * `display_name`, 'space_history_state', and 'external_user_allowed' only
   * support `OR` operators.
   * `last_active_time` and `create_time` support both `AND` and `OR` operators.
   * `AND` can only be used to represent an interval, such as `last_active_time
   * < "2022-01-01T00:00:00+00:00" AND last_active_time >
   * "2023-01-01T00:00:00+00:00"`.
   *
   * The following example queries are valid:
   *
   * ```
   * customer = "customers/my_customer" AND space_type = "SPACE"
   *
   * customer = "customers/my_customer" AND space_type = "SPACE" AND
   * display_name:"Hello World"
   *
   * customer = "customers/my_customer" AND space_type = "SPACE" AND
   * (last_active_time < "2020-01-01T00:00:00+00:00" OR last_active_time >
   * "2022-01-01T00:00:00+00:00")
   *
   * customer = "customers/my_customer" AND space_type = "SPACE" AND
   * (display_name:"Hello World" OR display_name:"Fun event") AND
   * (last_active_time > "2020-01-01T00:00:00+00:00" AND last_active_time <
   * "2022-01-01T00:00:00+00:00")
   *
   * customer = "customers/my_customer" AND space_type = "SPACE" AND
   * (create_time > "2019-01-01T00:00:00+00:00" AND create_time <
   * "2020-01-01T00:00:00+00:00") AND (external_user_allowed = "true") AND
   * (space_history_state = "HISTORY_ON" OR space_history_state = "HISTORY_OFF")
   * ```
   *
   * @generated from field: string query = 4;
   */
  query: string;

  /**
   * Optional. How the list of spaces is ordered.
   *
   * Supported attributes to order by are:
   *
   * - `membership_count.joined_direct_human_user_count` — Denotes the count of
   * human users that have directly joined a space.
   * - `last_active_time` — Denotes the time when last eligible item is added to
   * any topic of this space.
   * - `create_time` — Denotes the time of the space creation.
   *
   * Valid ordering operation values are:
   *
   * - `ASC` for ascending. Default value.
   *
   * - `DESC` for descending.
   *
   * The supported syntax are:
   *
   * - `membership_count.joined_direct_human_user_count DESC`
   * - `membership_count.joined_direct_human_user_count ASC`
   * - `last_active_time DESC`
   * - `last_active_time ASC`
   * - `create_time DESC`
   * - `create_time ASC`
   *
   * @generated from field: string order_by = 5;
   */
  orderBy: string;
};

/**
 * Describes the message google.chat.v1.SearchSpacesRequest.
 * Use `create(SearchSpacesRequestSchema)` to create a new message.
 */
export const SearchSpacesRequestSchema: GenMessage<SearchSpacesRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 7);

/**
 * Response with a list of spaces corresponding to the search spaces request.
 *
 * @generated from message google.chat.v1.SearchSpacesResponse
 */
export type SearchSpacesResponse = Message<"google.chat.v1.SearchSpacesResponse"> & {
  /**
   * A page of the requested spaces.
   *
   * @generated from field: repeated google.chat.v1.Space spaces = 1;
   */
  spaces: Space[];

  /**
   * A token that can be used to retrieve the next page. If this field is empty,
   * there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;

  /**
   * The total number of spaces that match the query, across all pages. If the
   * result is over 10,000 spaces, this value is an estimate.
   *
   * @generated from field: int32 total_size = 3;
   */
  totalSize: number;
};

/**
 * Describes the message google.chat.v1.SearchSpacesResponse.
 * Use `create(SearchSpacesResponseSchema)` to create a new message.
 */
export const SearchSpacesResponseSchema: GenMessage<SearchSpacesResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 8);

/**
 * Request for deleting a space.
 *
 * @generated from message google.chat.v1.DeleteSpaceRequest
 */
export type DeleteSpaceRequest = Message<"google.chat.v1.DeleteSpaceRequest"> & {
  /**
   * Required. Resource name of the space to delete.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.delete` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * @generated from field: bool use_admin_access = 2;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.DeleteSpaceRequest.
 * Use `create(DeleteSpaceRequestSchema)` to create a new message.
 */
export const DeleteSpaceRequestSchema: GenMessage<DeleteSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 9);

/**
 * Request message for completing the import process for a space.
 *
 * @generated from message google.chat.v1.CompleteImportSpaceRequest
 */
export type CompleteImportSpaceRequest = Message<"google.chat.v1.CompleteImportSpaceRequest"> & {
  /**
   * Required. Resource name of the import mode space.
   *
   * Format: `spaces/{space}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.CompleteImportSpaceRequest.
 * Use `create(CompleteImportSpaceRequestSchema)` to create a new message.
 */
export const CompleteImportSpaceRequestSchema: GenMessage<CompleteImportSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 10);

/**
 * Response message for completing the import process for a space.
 *
 * @generated from message google.chat.v1.CompleteImportSpaceResponse
 */
export type CompleteImportSpaceResponse = Message<"google.chat.v1.CompleteImportSpaceResponse"> & {
  /**
   * The import mode space.
   *
   * @generated from field: google.chat.v1.Space space = 1;
   */
  space?: Space;
};

/**
 * Describes the message google.chat.v1.CompleteImportSpaceResponse.
 * Use `create(CompleteImportSpaceResponseSchema)` to create a new message.
 */
export const CompleteImportSpaceResponseSchema: GenMessage<CompleteImportSpaceResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space, 11);

