// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/membership.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { Group } from "./group_pb";
import { file_google_chat_v1_group } from "./group_pb";
import type { User } from "./user_pb";
import { file_google_chat_v1_user } from "./user_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/membership.proto.
 */
export const file_google_chat_v1_membership: GenFile = /*@__PURE__*/
  fileDesc("Ch9nb29nbGUvY2hhdC92MS9tZW1iZXJzaGlwLnByb3RvEg5nb29nbGUuY2hhdC52MSKQBQoKTWVtYmVyc2hpcBIxCgRuYW1lGAEgASgJQiP6QSAKHmNoYXQuZ29vZ2xlYXBpcy5jb20vTWVtYmVyc2hpcBI+CgVzdGF0ZRgCIAEoDjIqLmdvb2dsZS5jaGF0LnYxLk1lbWJlcnNoaXAuTWVtYmVyc2hpcFN0YXRlQgPgQQMSPAoEcm9sZRgHIAEoDjIpLmdvb2dsZS5jaGF0LnYxLk1lbWJlcnNoaXAuTWVtYmVyc2hpcFJvbGVCA+BBARImCgZtZW1iZXIYAyABKAsyFC5nb29nbGUuY2hhdC52MS5Vc2VySAASLQoMZ3JvdXBfbWVtYmVyGAUgASgLMhUuZ29vZ2xlLmNoYXQudjEuR3JvdXBIABI3CgtjcmVhdGVfdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBuBBBeBBARI3CgtkZWxldGVfdGltZRgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBuBBBeBBASJeCg9NZW1iZXJzaGlwU3RhdGUSIAocTUVNQkVSU0hJUF9TVEFURV9VTlNQRUNJRklFRBAAEgoKBkpPSU5FRBABEgsKB0lOVklURUQQAhIQCgxOT1RfQV9NRU1CRVIQAyJUCg5NZW1iZXJzaGlwUm9sZRIfChtNRU1CRVJTSElQX1JPTEVfVU5TUEVDSUZJRUQQABIPCgtST0xFX01FTUJFUhABEhAKDFJPTEVfTUFOQUdFUhACOkTqQUEKHmNoYXQuZ29vZ2xlYXBpcy5jb20vTWVtYmVyc2hpcBIfc3BhY2VzL3tzcGFjZX0vbWVtYmVycy97bWVtYmVyfUIMCgptZW1iZXJUeXBlIqABChdDcmVhdGVNZW1iZXJzaGlwUmVxdWVzdBI2CgZwYXJlbnQYASABKAlCJuBBAvpBIBIeY2hhdC5nb29nbGVhcGlzLmNvbS9NZW1iZXJzaGlwEjMKCm1lbWJlcnNoaXAYAiABKAsyGi5nb29nbGUuY2hhdC52MS5NZW1iZXJzaGlwQgPgQQISGAoQdXNlX2FkbWluX2FjY2VzcxgFIAEoCCKeAQoXVXBkYXRlTWVtYmVyc2hpcFJlcXVlc3QSMwoKbWVtYmVyc2hpcBgBIAEoCzIaLmdvb2dsZS5jaGF0LnYxLk1lbWJlcnNoaXBCA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAhIYChB1c2VfYWRtaW5fYWNjZXNzGAMgASgIIuUBChZMaXN0TWVtYmVyc2hpcHNSZXF1ZXN0EjYKBnBhcmVudBgBIAEoCUIm4EEC+kEgEh5jaGF0Lmdvb2dsZWFwaXMuY29tL01lbWJlcnNoaXASFgoJcGFnZV9zaXplGAIgASgFQgPgQQESFwoKcGFnZV90b2tlbhgDIAEoCUID4EEBEhMKBmZpbHRlchgFIAEoCUID4EEBEhgKC3Nob3dfZ3JvdXBzGAYgASgIQgPgQQESGQoMc2hvd19pbnZpdGVkGAcgASgIQgPgQQESGAoQdXNlX2FkbWluX2FjY2VzcxgIIAEoCCJoChdMaXN0TWVtYmVyc2hpcHNSZXNwb25zZRI0CgttZW1iZXJzaGlwcxgBIAMoCzIaLmdvb2dsZS5jaGF0LnYxLk1lbWJlcnNoaXBCA+BBBhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiZgoUR2V0TWVtYmVyc2hpcFJlcXVlc3QSNAoEbmFtZRgBIAEoCUIm4EEC+kEgCh5jaGF0Lmdvb2dsZWFwaXMuY29tL01lbWJlcnNoaXASGAoQdXNlX2FkbWluX2FjY2VzcxgDIAEoCCJpChdEZWxldGVNZW1iZXJzaGlwUmVxdWVzdBI0CgRuYW1lGAEgASgJQibgQQL6QSAKHmNoYXQuZ29vZ2xlYXBpcy5jb20vTWVtYmVyc2hpcBIYChB1c2VfYWRtaW5fYWNjZXNzGAIgASgIQqgBChJjb20uZ29vZ2xlLmNoYXQudjFCD01lbWJlcnNoaXBQcm90b1ABWixjbG91ZC5nb29nbGUuY29tL2dvL2NoYXQvYXBpdjEvY2hhdHBiO2NoYXRwYqICC0RZTkFQSVByb3RvqgITR29vZ2xlLkFwcHMuQ2hhdC5WMcoCE0dvb2dsZVxBcHBzXENoYXRcVjHqAhZHb29nbGU6OkFwcHM6OkNoYXQ6OlYxYgZwcm90bzM", [file_google_api_field_behavior, file_google_api_resource, file_google_chat_v1_group, file_google_chat_v1_user, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * Represents a membership relation in Google Chat, such as whether a user or
 * Chat app is invited to, part of, or absent from a space.
 *
 * @generated from message google.chat.v1.Membership
 */
export type Membership = Message<"google.chat.v1.Membership"> & {
  /**
   * Resource name of the membership, assigned by the server.
   *
   * Format: `spaces/{space}/members/{member}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. State of the membership.
   *
   * @generated from field: google.chat.v1.Membership.MembershipState state = 2;
   */
  state: Membership_MembershipState;

  /**
   * Optional. User's role within a Chat space, which determines their permitted
   * actions in the space.
   *
   * This field can only be used as input in `UpdateMembership`.
   *
   * @generated from field: google.chat.v1.Membership.MembershipRole role = 7;
   */
  role: Membership_MembershipRole;

  /**
   * Member associated with this membership. Other member types might be
   * supported in the future.
   *
   * @generated from oneof google.chat.v1.Membership.memberType
   */
  memberType: {
    /**
     * The Google Chat user or app the membership corresponds to.
     * If your Chat app [authenticates as a
     * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
     * the output populates the
     * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
     * `name` and `type`.
     *
     * @generated from field: google.chat.v1.User member = 3;
     */
    value: User;
    case: "member";
  } | {
    /**
     * The Google Group the membership corresponds to.
     *
     * @generated from field: google.chat.v1.Group group_member = 5;
     */
    value: Group;
    case: "groupMember";
  } | { case: undefined; value?: undefined };

  /**
   * Optional. Immutable. The creation time of the membership, such as when a
   * member joined or was invited to join a space. This field is output only,
   * except when used to import historical memberships in import mode spaces.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * Optional. Immutable. The deletion time of the membership, such as when a
   * member left or was removed from a space. This field is output only, except
   * when used to import historical memberships in import mode spaces.
   *
   * @generated from field: google.protobuf.Timestamp delete_time = 8;
   */
  deleteTime?: Timestamp;
};

/**
 * Describes the message google.chat.v1.Membership.
 * Use `create(MembershipSchema)` to create a new message.
 */
export const MembershipSchema: GenMessage<Membership> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 0);

/**
 * Specifies the member's relationship with a space. Other membership states
 * might be supported in the future.
 *
 * @generated from enum google.chat.v1.Membership.MembershipState
 */
export enum Membership_MembershipState {
  /**
   * Default value. Don't use.
   *
   * @generated from enum value: MEMBERSHIP_STATE_UNSPECIFIED = 0;
   */
  MEMBERSHIP_STATE_UNSPECIFIED = 0,

  /**
   * The user is added to the space, and can participate in the space.
   *
   * @generated from enum value: JOINED = 1;
   */
  JOINED = 1,

  /**
   * The user is invited to join the space, but hasn't joined it.
   *
   * @generated from enum value: INVITED = 2;
   */
  INVITED = 2,

  /**
   * The user doesn't belong to the space and doesn't have a pending
   * invitation to join the space.
   *
   * @generated from enum value: NOT_A_MEMBER = 3;
   */
  NOT_A_MEMBER = 3,
}

/**
 * Describes the enum google.chat.v1.Membership.MembershipState.
 */
export const Membership_MembershipStateSchema: GenEnum<Membership_MembershipState> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_membership, 0, 0);

/**
 * Represents a user's permitted actions in a Chat space. More enum values
 * might be added in the future.
 *
 * @generated from enum google.chat.v1.Membership.MembershipRole
 */
export enum Membership_MembershipRole {
  /**
   * Default value. For [users][google.chat.v1.Membership.member]: they
   * aren't a member of the space, but can be invited. For
   * [Google Groups][google.chat.v1.Membership.group_member]: they're always
   *  assigned this role (other enum values might be used in the future).
   *
   * @generated from enum value: MEMBERSHIP_ROLE_UNSPECIFIED = 0;
   */
  MEMBERSHIP_ROLE_UNSPECIFIED = 0,

  /**
   * A member of the space. The user has basic permissions, like sending
   * messages to the space. In 1:1 and unnamed group conversations, everyone
   * has this role.
   *
   * @generated from enum value: ROLE_MEMBER = 1;
   */
  ROLE_MEMBER = 1,

  /**
   * A space manager. The user has all basic permissions plus administrative
   * permissions that let them manage the space, like adding or removing
   * members. Only supported in
   * [SpaceType.SPACE][google.chat.v1.Space.SpaceType].
   *
   * @generated from enum value: ROLE_MANAGER = 2;
   */
  ROLE_MANAGER = 2,
}

/**
 * Describes the enum google.chat.v1.Membership.MembershipRole.
 */
export const Membership_MembershipRoleSchema: GenEnum<Membership_MembershipRole> = /*@__PURE__*/
  enumDesc(file_google_chat_v1_membership, 0, 1);

/**
 * Request message for creating a membership.
 *
 * @generated from message google.chat.v1.CreateMembershipRequest
 */
export type CreateMembershipRequest = Message<"google.chat.v1.CreateMembershipRequest"> & {
  /**
   * Required. The resource name of the space for which to create the
   * membership.
   *
   * Format: spaces/{space}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The membership relation to create.
   * The `memberType` field must contain a user with the `user.name` and
   * `user.type` fields populated. The server will assign a resource name
   * and overwrite anything specified.
   * When a Chat app creates a membership relation for a human user, it must use
   * the `chat.memberships` scope, set `user.type` to `HUMAN`, and set
   * `user.name` with format `users/{user}`, where `{user}` can be the email
   * address for the user. For users in the same Workspace organization `{user}`
   * can also be the `id` of the
   * [person](https://developers.google.com/people/api/rest/v1/people) from the
   * People API, or the `id` for the user in the Directory API. For example, if
   * the People API Person profile ID for `user@example.com` is `123456789`, you
   * can add the user to the space by setting the `membership.member.name` to
   * `users/user@example.com` or `users/123456789`. When a Chat app creates a
   * membership relation for itself, it must use the `chat.memberships.app`
   * scope, set `user.type` to `BOT`, and set `user.name` to `users/app`.
   *
   * @generated from field: google.chat.v1.Membership membership = 2;
   */
  membership?: Membership;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Creating app memberships or creating memberships for users outside the
   * administrator's Google Workspace organization isn't supported using admin
   * access.
   *
   * @generated from field: bool use_admin_access = 5;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.CreateMembershipRequest.
 * Use `create(CreateMembershipRequestSchema)` to create a new message.
 */
export const CreateMembershipRequestSchema: GenMessage<CreateMembershipRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 1);

/**
 * Request message for updating a membership.
 *
 * @generated from message google.chat.v1.UpdateMembershipRequest
 */
export type UpdateMembershipRequest = Message<"google.chat.v1.UpdateMembershipRequest"> & {
  /**
   * Required. The membership to update. Only fields specified by `update_mask`
   * are updated.
   *
   * @generated from field: google.chat.v1.Membership membership = 1;
   */
  membership?: Membership;

  /**
   * Required. The field paths to update. Separate multiple values with commas
   * or use `*` to update all field paths.
   *
   * Currently supported field paths:
   *
   * - `role`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * @generated from field: bool use_admin_access = 3;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.UpdateMembershipRequest.
 * Use `create(UpdateMembershipRequestSchema)` to create a new message.
 */
export const UpdateMembershipRequestSchema: GenMessage<UpdateMembershipRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 2);

/**
 * Request message for listing memberships.
 *
 * @generated from message google.chat.v1.ListMembershipsRequest
 */
export type ListMembershipsRequest = Message<"google.chat.v1.ListMembershipsRequest"> & {
  /**
   * Required. The resource name of the space for which to fetch a membership
   * list.
   *
   * Format: spaces/{space}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of memberships to return. The service might
   * return fewer than this value.
   *
   * If unspecified, at most 100 memberships are returned.
   *
   * The maximum value is 1000. If you use a value more than 1000, it's
   * automatically changed to 1000.
   *
   * Negative values return an `INVALID_ARGUMENT` error.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. A page token, received from a previous call to list memberships.
   * Provide this parameter to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided should match the call that
   * provided the page token. Passing different values to the other parameters
   * might lead to unexpected results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. A query filter.
   *
   * You can filter memberships by a member's role
   * ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
   * and type
   * ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
   *
   * To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`.
   *
   * To filter by type, set `member.type` to `HUMAN` or `BOT`. You can also
   * filter for `member.type` using the `!=` operator.
   *
   * To filter by both role and type, use the `AND` operator. To filter by
   * either role or type, use the `OR` operator.
   *
   * Either `member.type = "HUMAN"` or `member.type != "BOT"` is required
   * when `use_admin_access` is set to true. Other member type filters will be
   * rejected.
   *
   * For example, the following queries are valid:
   *
   * ```
   * role = "ROLE_MANAGER" OR role = "ROLE_MEMBER"
   * member.type = "HUMAN" AND role = "ROLE_MANAGER"
   *
   * member.type != "BOT"
   * ```
   *
   * The following queries are invalid:
   *
   * ```
   * member.type = "HUMAN" AND member.type = "BOT"
   * role = "ROLE_MANAGER" AND role = "ROLE_MEMBER"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   *
   * @generated from field: string filter = 5;
   */
  filter: string;

  /**
   * Optional. When `true`, also returns memberships associated with a
   * [Google Group][google.chat.v1.Membership.group_member], in
   * addition to other types of memberships. If a
   * [filter][google.chat.v1.ListMembershipsRequest.filter] is set,
   * [Google Group][google.chat.v1.Membership.group_member]
   * memberships that don't match the filter criteria aren't returned.
   *
   * @generated from field: bool show_groups = 6;
   */
  showGroups: boolean;

  /**
   * Optional. When `true`, also returns memberships associated with
   * [invited][google.chat.v1.Membership.MembershipState.INVITED] members, in
   * addition to other types of memberships. If a
   * filter is set,
   * [invited][google.chat.v1.Membership.MembershipState.INVITED] memberships
   * that don't match the filter criteria aren't returned.
   *
   * Currently requires [user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
   *
   * @generated from field: bool show_invited = 7;
   */
  showInvited: boolean;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires either the `chat.admin.memberships.readonly` or
   * `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Listing app memberships in a space isn't supported when using admin access.
   *
   * @generated from field: bool use_admin_access = 8;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.ListMembershipsRequest.
 * Use `create(ListMembershipsRequestSchema)` to create a new message.
 */
export const ListMembershipsRequestSchema: GenMessage<ListMembershipsRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 3);

/**
 * Response to list memberships of the space.
 *
 * @generated from message google.chat.v1.ListMembershipsResponse
 */
export type ListMembershipsResponse = Message<"google.chat.v1.ListMembershipsResponse"> & {
  /**
   * Unordered list. List of memberships in the requested (or first) page.
   *
   * @generated from field: repeated google.chat.v1.Membership memberships = 1;
   */
  memberships: Membership[];

  /**
   * A token that you can send as `pageToken` to retrieve the next page of
   * results. If empty, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.chat.v1.ListMembershipsResponse.
 * Use `create(ListMembershipsResponseSchema)` to create a new message.
 */
export const ListMembershipsResponseSchema: GenMessage<ListMembershipsResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 4);

/**
 * Request to get a membership of a space.
 *
 * @generated from message google.chat.v1.GetMembershipRequest
 */
export type GetMembershipRequest = Message<"google.chat.v1.GetMembershipRequest"> & {
  /**
   * Required. Resource name of the membership to retrieve.
   *
   * To get the app's own membership [by using user
   * authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * you can optionally use `spaces/{space}/members/app`.
   *
   * Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`
   *
   * When [authenticated as a
   * user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
   * you can use the user's email as an alias for `{member}`. For example,
   * `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   * email of the Google Chat user.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` or `chat.admin.memberships.readonly`
   * [OAuth 2.0
   * scopes](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Getting app memberships in a space isn't supported when using admin access.
   *
   * @generated from field: bool use_admin_access = 3;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.GetMembershipRequest.
 * Use `create(GetMembershipRequestSchema)` to create a new message.
 */
export const GetMembershipRequestSchema: GenMessage<GetMembershipRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 5);

/**
 * Request to delete a membership in a space.
 *
 * @generated from message google.chat.v1.DeleteMembershipRequest
 */
export type DeleteMembershipRequest = Message<"google.chat.v1.DeleteMembershipRequest"> & {
  /**
   * Required. Resource name of the membership to delete. Chat apps can delete
   * human users' or their own memberships. Chat apps can't delete other apps'
   * memberships.
   *
   * When deleting a human membership, requires the `chat.memberships` scope and
   * `spaces/{space}/members/{member}` format. You can use the email as an
   * alias for `{member}`. For example,
   * `spaces/{space}/members/example@gmail.com` where `example@gmail.com` is the
   * email of the Google Chat user.
   *
   * When deleting an app membership, requires the `chat.memberships.app` scope
   * and `spaces/{space}/members/app` format.
   *
   * Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When `true`, the method runs using the user's Google Workspace
   * administrator privileges.
   *
   * The calling user must be a Google Workspace administrator with the
   * [manage chat and spaces conversations
   * privilege](https://support.google.com/a/answer/13369245).
   *
   * Requires the `chat.admin.memberships` [OAuth 2.0
   * scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
   *
   * Deleting app memberships in a space isn't supported using admin access.
   *
   * @generated from field: bool use_admin_access = 2;
   */
  useAdminAccess: boolean;
};

/**
 * Describes the message google.chat.v1.DeleteMembershipRequest.
 * Use `create(DeleteMembershipRequestSchema)` to create a new message.
 */
export const DeleteMembershipRequestSchema: GenMessage<DeleteMembershipRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_membership, 6);

