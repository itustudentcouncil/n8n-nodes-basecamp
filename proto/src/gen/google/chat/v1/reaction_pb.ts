// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/reaction.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { User } from "./user_pb";
import { file_google_chat_v1_user } from "./user_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/reaction.proto.
 */
export const file_google_chat_v1_reaction: GenFile = /*@__PURE__*/
  fileDesc("Ch1nb29nbGUvY2hhdC92MS9yZWFjdGlvbi5wcm90bxIOZ29vZ2xlLmNoYXQudjEiwgEKCFJlYWN0aW9uEgwKBG5hbWUYASABKAkSJwoEdXNlchgCIAEoCzIULmdvb2dsZS5jaGF0LnYxLlVzZXJCA+BBAxIkCgVlbW9qaRgDIAEoCzIVLmdvb2dsZS5jaGF0LnYxLkVtb2ppOlnqQVYKHGNoYXQuZ29vZ2xlYXBpcy5jb20vUmVhY3Rpb24SNnNwYWNlcy97c3BhY2V9L21lc3NhZ2VzL3ttZXNzYWdlfS9yZWFjdGlvbnMve3JlYWN0aW9ufSJfCgVFbW9qaRIRCgd1bmljb2RlGAEgASgJSAASOAoMY3VzdG9tX2Vtb2ppGAIgASgLMhsuZ29vZ2xlLmNoYXQudjEuQ3VzdG9tRW1vamlCA+BBA0gAQgkKB2NvbnRlbnQiHwoLQ3VzdG9tRW1vamkSEAoDdWlkGAEgASgJQgPgQQMibAoURW1vamlSZWFjdGlvblN1bW1hcnkSJAoFZW1vamkYASABKAsyFS5nb29nbGUuY2hhdC52MS5FbW9qaRIbCg5yZWFjdGlvbl9jb3VudBgCIAEoBUgAiAEBQhEKD19yZWFjdGlvbl9jb3VudCJ+ChVDcmVhdGVSZWFjdGlvblJlcXVlc3QSNAoGcGFyZW50GAEgASgJQiTgQQL6QR4SHGNoYXQuZ29vZ2xlYXBpcy5jb20vUmVhY3Rpb24SLwoIcmVhY3Rpb24YAiABKAsyGC5nb29nbGUuY2hhdC52MS5SZWFjdGlvbkID4EECIpIBChRMaXN0UmVhY3Rpb25zUmVxdWVzdBI0CgZwYXJlbnQYASABKAlCJOBBAvpBHhIcY2hhdC5nb29nbGVhcGlzLmNvbS9SZWFjdGlvbhIWCglwYWdlX3NpemUYAiABKAVCA+BBARIXCgpwYWdlX3Rva2VuGAMgASgJQgPgQQESEwoGZmlsdGVyGAQgASgJQgPgQQEiXQoVTGlzdFJlYWN0aW9uc1Jlc3BvbnNlEisKCXJlYWN0aW9ucxgBIAMoCzIYLmdvb2dsZS5jaGF0LnYxLlJlYWN0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJLChVEZWxldGVSZWFjdGlvblJlcXVlc3QSMgoEbmFtZRgBIAEoCUIk4EEC+kEeChxjaGF0Lmdvb2dsZWFwaXMuY29tL1JlYWN0aW9uQqYBChJjb20uZ29vZ2xlLmNoYXQudjFCDVJlYWN0aW9uUHJvdG9QAVosY2xvdWQuZ29vZ2xlLmNvbS9nby9jaGF0L2FwaXYxL2NoYXRwYjtjaGF0cGKiAgtEWU5BUElQcm90b6oCE0dvb2dsZS5BcHBzLkNoYXQuVjHKAhNHb29nbGVcQXBwc1xDaGF0XFYx6gIWR29vZ2xlOjpBcHBzOjpDaGF0OjpWMWIGcHJvdG8z", [file_google_api_field_behavior, file_google_api_resource, file_google_chat_v1_user]);

/**
 * A reaction to a message.
 *
 * @generated from message google.chat.v1.Reaction
 */
export type Reaction = Message<"google.chat.v1.Reaction"> & {
  /**
   * The resource name of the reaction.
   *
   * Format: `spaces/{space}/messages/{message}/reactions/{reaction}`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Output only. The user who created the reaction.
   *
   * @generated from field: google.chat.v1.User user = 2;
   */
  user?: User;

  /**
   * The emoji used in the reaction.
   *
   * @generated from field: google.chat.v1.Emoji emoji = 3;
   */
  emoji?: Emoji;
};

/**
 * Describes the message google.chat.v1.Reaction.
 * Use `create(ReactionSchema)` to create a new message.
 */
export const ReactionSchema: GenMessage<Reaction> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 0);

/**
 * An emoji that is used as a reaction to a message.
 *
 * @generated from message google.chat.v1.Emoji
 */
export type Emoji = Message<"google.chat.v1.Emoji"> & {
  /**
   * The content of the emoji.
   *
   * @generated from oneof google.chat.v1.Emoji.content
   */
  content: {
    /**
     * A basic emoji represented by a unicode string.
     *
     * @generated from field: string unicode = 1;
     */
    value: string;
    case: "unicode";
  } | {
    /**
     * Output only. A custom emoji.
     *
     * @generated from field: google.chat.v1.CustomEmoji custom_emoji = 2;
     */
    value: CustomEmoji;
    case: "customEmoji";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message google.chat.v1.Emoji.
 * Use `create(EmojiSchema)` to create a new message.
 */
export const EmojiSchema: GenMessage<Emoji> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 1);

/**
 * Represents a custom emoji.
 *
 * @generated from message google.chat.v1.CustomEmoji
 */
export type CustomEmoji = Message<"google.chat.v1.CustomEmoji"> & {
  /**
   * Output only. Unique key for the custom emoji resource.
   *
   * @generated from field: string uid = 1;
   */
  uid: string;
};

/**
 * Describes the message google.chat.v1.CustomEmoji.
 * Use `create(CustomEmojiSchema)` to create a new message.
 */
export const CustomEmojiSchema: GenMessage<CustomEmoji> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 2);

/**
 * The number of people who reacted to a message with a specific emoji.
 *
 * @generated from message google.chat.v1.EmojiReactionSummary
 */
export type EmojiReactionSummary = Message<"google.chat.v1.EmojiReactionSummary"> & {
  /**
   * Emoji associated with the reactions.
   *
   * @generated from field: google.chat.v1.Emoji emoji = 1;
   */
  emoji?: Emoji;

  /**
   * The total number of reactions using the associated emoji.
   *
   * @generated from field: optional int32 reaction_count = 2;
   */
  reactionCount?: number;
};

/**
 * Describes the message google.chat.v1.EmojiReactionSummary.
 * Use `create(EmojiReactionSummarySchema)` to create a new message.
 */
export const EmojiReactionSummarySchema: GenMessage<EmojiReactionSummary> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 3);

/**
 * Creates a reaction to a message.
 *
 * @generated from message google.chat.v1.CreateReactionRequest
 */
export type CreateReactionRequest = Message<"google.chat.v1.CreateReactionRequest"> & {
  /**
   * Required. The message where the reaction is created.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Required. The reaction to create.
   *
   * @generated from field: google.chat.v1.Reaction reaction = 2;
   */
  reaction?: Reaction;
};

/**
 * Describes the message google.chat.v1.CreateReactionRequest.
 * Use `create(CreateReactionRequestSchema)` to create a new message.
 */
export const CreateReactionRequestSchema: GenMessage<CreateReactionRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 4);

/**
 * Lists reactions to a message.
 *
 * @generated from message google.chat.v1.ListReactionsRequest
 */
export type ListReactionsRequest = Message<"google.chat.v1.ListReactionsRequest"> & {
  /**
   * Required. The message users reacted to.
   *
   * Format: `spaces/{space}/messages/{message}`
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Optional. The maximum number of reactions returned. The service can return
   * fewer reactions than this value. If unspecified, the default value is 25.
   * The maximum value is 200; values above 200 are changed to 200.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Optional. (If resuming from a previous query.)
   *
   * A page token received from a previous list reactions call. Provide this
   * to retrieve the subsequent page.
   *
   * When paginating, the filter value should match the call that provided the
   * page token. Passing a different value might lead to unexpected results.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Optional. A query filter.
   *
   * You can filter reactions by
   * [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
   * (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
   * [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
   * (`user.name`).
   *
   * To filter reactions for multiple emojis or users, join similar fields
   * with the `OR` operator, such as `emoji.unicode = "üôÇ" OR emoji.unicode =
   * "üëç"` and `user.name = "users/AAAAAA" OR user.name = "users/BBBBBB"`.
   *
   * To filter reactions by emoji and user, use the `AND` operator, such as
   * `emoji.unicode = "üôÇ" AND user.name = "users/AAAAAA"`.
   *
   * If your query uses both `AND` and `OR`, group them with parentheses.
   *
   * For example, the following queries are valid:
   *
   * ```
   * user.name = "users/{user}"
   * emoji.unicode = "üôÇ"
   * emoji.custom_emoji.uid = "{uid}"
   * emoji.unicode = "üôÇ" OR emoji.unicode = "üëç"
   * emoji.unicode = "üôÇ" OR emoji.custom_emoji.uid = "{uid}"
   * emoji.unicode = "üôÇ" AND user.name = "users/{user}"
   * (emoji.unicode = "üôÇ" OR emoji.custom_emoji.uid = "{uid}")
   * AND user.name = "users/{user}"
   * ```
   *
   * The following queries are invalid:
   *
   * ```
   * emoji.unicode = "üôÇ" AND emoji.unicode = "üëç"
   * emoji.unicode = "üôÇ" AND emoji.custom_emoji.uid = "{uid}"
   * emoji.unicode = "üôÇ" OR user.name = "users/{user}"
   * emoji.unicode = "üôÇ" OR emoji.custom_emoji.uid = "{uid}" OR
   * user.name = "users/{user}"
   * emoji.unicode = "üôÇ" OR emoji.custom_emoji.uid = "{uid}"
   * AND user.name = "users/{user}"
   * ```
   *
   * Invalid queries are rejected by the server with an `INVALID_ARGUMENT`
   * error.
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message google.chat.v1.ListReactionsRequest.
 * Use `create(ListReactionsRequestSchema)` to create a new message.
 */
export const ListReactionsRequestSchema: GenMessage<ListReactionsRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 5);

/**
 * Response to a list reactions request.
 *
 * @generated from message google.chat.v1.ListReactionsResponse
 */
export type ListReactionsResponse = Message<"google.chat.v1.ListReactionsResponse"> & {
  /**
   * List of reactions in the requested (or first) page.
   *
   * @generated from field: repeated google.chat.v1.Reaction reactions = 1;
   */
  reactions: Reaction[];

  /**
   * Continuation token to retrieve the next page of results. It's empty
   * for the last page of results.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message google.chat.v1.ListReactionsResponse.
 * Use `create(ListReactionsResponseSchema)` to create a new message.
 */
export const ListReactionsResponseSchema: GenMessage<ListReactionsResponse> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 6);

/**
 * Deletes a reaction to a message.
 *
 * @generated from message google.chat.v1.DeleteReactionRequest
 */
export type DeleteReactionRequest = Message<"google.chat.v1.DeleteReactionRequest"> & {
  /**
   * Required. Name of the reaction to delete.
   *
   * Format: `spaces/{space}/messages/{message}/reactions/{reaction}`
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.DeleteReactionRequest.
 * Use `create(DeleteReactionRequestSchema)` to create a new message.
 */
export const DeleteReactionRequestSchema: GenMessage<DeleteReactionRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_reaction, 7);

