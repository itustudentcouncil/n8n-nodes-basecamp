// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/space_setup.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import type { Membership } from "./membership_pb";
import { file_google_chat_v1_membership } from "./membership_pb";
import type { Space } from "./space_pb";
import { file_google_chat_v1_space } from "./space_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/space_setup.proto.
 */
export const file_google_chat_v1_space_setup: GenFile = /*@__PURE__*/
  fileDesc("CiBnb29nbGUvY2hhdC92MS9zcGFjZV9zZXR1cC5wcm90bxIOZ29vZ2xlLmNoYXQudjEijQEKEVNldFVwU3BhY2VSZXF1ZXN0EikKBXNwYWNlGAEgASgLMhUuZ29vZ2xlLmNoYXQudjEuU3BhY2VCA+BBAhIXCgpyZXF1ZXN0X2lkGAIgASgJQgPgQQESNAoLbWVtYmVyc2hpcHMYBCADKAsyGi5nb29nbGUuY2hhdC52MS5NZW1iZXJzaGlwQgPgQQFCqAEKEmNvbS5nb29nbGUuY2hhdC52MUIPU3BhY2VTZXR1cFByb3RvUAFaLGNsb3VkLmdvb2dsZS5jb20vZ28vY2hhdC9hcGl2MS9jaGF0cGI7Y2hhdHBiogILRFlOQVBJUHJvdG+qAhNHb29nbGUuQXBwcy5DaGF0LlYxygITR29vZ2xlXEFwcHNcQ2hhdFxWMeoCFkdvb2dsZTo6QXBwczo6Q2hhdDo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_chat_v1_membership, file_google_chat_v1_space]);

/**
 * Request to create a space and add specified users to it.
 *
 * @generated from message google.chat.v1.SetUpSpaceRequest
 */
export type SetUpSpaceRequest = Message<"google.chat.v1.SetUpSpaceRequest"> & {
  /**
   * Required. The `Space.spaceType` field is required.
   *
   * To create a space, set `Space.spaceType` to `SPACE` and set
   * `Space.displayName`. If you receive the error message `ALREADY_EXISTS` when
   * setting up a space, try a different `displayName`. An existing space
   * within the Google Workspace organization might already use this display
   * name.
   *
   * To create a group chat, set `Space.spaceType` to
   * `GROUP_CHAT`. Don't set `Space.displayName`.
   *
   * To create a 1:1 conversation between humans,
   * set `Space.spaceType` to `DIRECT_MESSAGE` and set
   * `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
   * `Space.spaceDetails`.
   *
   * To create an 1:1 conversation between a human and the calling Chat app, set
   * `Space.spaceType` to `DIRECT_MESSAGE` and
   * `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or
   * `Space.spaceDetails`.
   *
   * If a `DIRECT_MESSAGE` space already exists, that space is returned instead
   * of creating a new space.
   *
   * @generated from field: google.chat.v1.Space space = 1;
   */
  space?: Space;

  /**
   * Optional. A unique identifier for this request.
   * A random UUID is recommended.
   * Specifying an existing request ID returns the space created with that ID
   * instead of creating a new space.
   * Specifying an existing request ID from the same Chat app with a different
   * authenticated user returns an error.
   *
   * @generated from field: string request_id = 2;
   */
  requestId: string;

  /**
   * Optional. The Google Chat users or groups to invite to join the space. Omit
   * the calling user, as they are added automatically.
   *
   * The set currently allows up to 20 memberships (in addition to the caller).
   *
   * For human membership, the `Membership.member` field must contain a `user`
   * with `name` populated (format: `users/{user}`) and `type` set to
   * `User.Type.HUMAN`. You can only add human users when setting up a space
   * (adding Chat apps is only supported for direct message setup with the
   * calling app). You can also add members using the user's email as an alias
   * for {user}. For example, the `user.name` can be `users/example@gmail.com`.
   * To invite Gmail users or users from external Google Workspace domains,
   * user's email must be used for `{user}`.
   *
   * For Google group membership, the `Membership.group_member` field must
   * contain a `group` with `name` populated (format `groups/{group}`). You
   * can only add Google groups when setting `Space.spaceType` to `SPACE`.
   *
   * Optional when setting `Space.spaceType` to `SPACE`.
   *
   * Required when setting `Space.spaceType` to `GROUP_CHAT`, along with at
   * least two memberships.
   *
   * Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human
   * user, along with exactly one membership.
   *
   * Must be empty when creating a 1:1 conversation between a human and the
   * calling Chat app (when setting `Space.spaceType` to
   * `DIRECT_MESSAGE` and `Space.singleUserBotDm` to `true`).
   *
   * @generated from field: repeated google.chat.v1.Membership memberships = 4;
   */
  memberships: Membership[];
};

/**
 * Describes the message google.chat.v1.SetUpSpaceRequest.
 * Use `create(SetUpSpaceRequestSchema)` to create a new message.
 */
export const SetUpSpaceRequestSchema: GenMessage<SetUpSpaceRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_setup, 0);

