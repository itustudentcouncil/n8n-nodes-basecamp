// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file google/chat/v1/space_read_state.proto (package google.chat.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../api/field_behavior_pb";
import { file_google_api_resource } from "../../api/resource_pb";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file google/chat/v1/space_read_state.proto.
 */
export const file_google_chat_v1_space_read_state: GenFile = /*@__PURE__*/
  fileDesc("CiVnb29nbGUvY2hhdC92MS9zcGFjZV9yZWFkX3N0YXRlLnByb3RvEg5nb29nbGUuY2hhdC52MSK8AQoOU3BhY2VSZWFkU3RhdGUSDAoEbmFtZRgBIAEoCRI3Cg5sYXN0X3JlYWRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCA+BBATpj6kFgCiJjaGF0Lmdvb2dsZWFwaXMuY29tL1NwYWNlUmVhZFN0YXRlEip1c2Vycy97dXNlcn0vc3BhY2VzL3tzcGFjZX0vc3BhY2VSZWFkU3RhdGUyDnNwYWNlUmVhZFN0YXRlIlQKGEdldFNwYWNlUmVhZFN0YXRlUmVxdWVzdBI4CgRuYW1lGAEgASgJQirgQQL6QSQKImNoYXQuZ29vZ2xlYXBpcy5jb20vU3BhY2VSZWFkU3RhdGUikgEKG1VwZGF0ZVNwYWNlUmVhZFN0YXRlUmVxdWVzdBI9ChBzcGFjZV9yZWFkX3N0YXRlGAEgASgLMh4uZ29vZ2xlLmNoYXQudjEuU3BhY2VSZWFkU3RhdGVCA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAkKsAQoSY29tLmdvb2dsZS5jaGF0LnYxQhNTcGFjZVJlYWRTdGF0ZVByb3RvUAFaLGNsb3VkLmdvb2dsZS5jb20vZ28vY2hhdC9hcGl2MS9jaGF0cGI7Y2hhdHBiogILRFlOQVBJUHJvdG+qAhNHb29nbGUuQXBwcy5DaGF0LlYxygITR29vZ2xlXEFwcHNcQ2hhdFxWMeoCFkdvb2dsZTo6QXBwczo6Q2hhdDo6VjFiBnByb3RvMw", [file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp]);

/**
 * A user's read state within a space, used to identify read and unread
 * messages.
 *
 * @generated from message google.chat.v1.SpaceReadState
 */
export type SpaceReadState = Message<"google.chat.v1.SpaceReadState"> & {
  /**
   * Resource name of the space read state.
   *
   * Format: `users/{user}/spaces/{space}/spaceReadState`
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Optional. The time when the user's space read state was updated. Usually
   * this corresponds with either the timestamp of the last read message, or a
   * timestamp specified by the user to mark the last read position in a space.
   *
   * @generated from field: google.protobuf.Timestamp last_read_time = 2;
   */
  lastReadTime?: Timestamp;
};

/**
 * Describes the message google.chat.v1.SpaceReadState.
 * Use `create(SpaceReadStateSchema)` to create a new message.
 */
export const SpaceReadStateSchema: GenMessage<SpaceReadState> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_read_state, 0);

/**
 * Request message for GetSpaceReadState API.
 *
 * @generated from message google.chat.v1.GetSpaceReadStateRequest
 */
export type GetSpaceReadStateRequest = Message<"google.chat.v1.GetSpaceReadStateRequest"> & {
  /**
   * Required. Resource name of the space read state to retrieve.
   *
   * Only supports getting read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message google.chat.v1.GetSpaceReadStateRequest.
 * Use `create(GetSpaceReadStateRequestSchema)` to create a new message.
 */
export const GetSpaceReadStateRequestSchema: GenMessage<GetSpaceReadStateRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_read_state, 1);

/**
 * Request message for UpdateSpaceReadState API.
 *
 * @generated from message google.chat.v1.UpdateSpaceReadStateRequest
 */
export type UpdateSpaceReadStateRequest = Message<"google.chat.v1.UpdateSpaceReadStateRequest"> & {
  /**
   * Required. The space read state and fields to update.
   *
   * Only supports updating read state for the calling user.
   *
   * To refer to the calling user, set one of the following:
   *
   * - The `me` alias. For example, `users/me/spaces/{space}/spaceReadState`.
   *
   * - Their Workspace email address. For example,
   * `users/user@example.com/spaces/{space}/spaceReadState`.
   *
   * - Their user id. For example,
   * `users/123456789/spaces/{space}/spaceReadState`.
   *
   * Format: users/{user}/spaces/{space}/spaceReadState
   *
   * @generated from field: google.chat.v1.SpaceReadState space_read_state = 1;
   */
  spaceReadState?: SpaceReadState;

  /**
   * Required. The field paths to update. Currently supported field paths:
   *
   * - `last_read_time`
   *
   * When the `last_read_time` is before the latest message create time, the
   * space appears as unread in the UI.
   *
   * To mark the space as read, set `last_read_time` to any value later (larger)
   * than the latest message create time. The `last_read_time` is coerced to
   * match the latest message create time. Note that the space read state only
   * affects the read state of messages that are visible in the space's
   * top-level conversation. Replies in threads are unaffected by this
   * timestamp, and instead rely on the thread read state.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message google.chat.v1.UpdateSpaceReadStateRequest.
 * Use `create(UpdateSpaceReadStateRequestSchema)` to create a new message.
 */
export const UpdateSpaceReadStateRequestSchema: GenMessage<UpdateSpaceReadStateRequest> = /*@__PURE__*/
  messageDesc(file_google_chat_v1_space_read_state, 2);

