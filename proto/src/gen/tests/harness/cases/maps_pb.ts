// @generated by protoc-gen-es v2.1.0 with parameter "target=ts"
// @generated from file tests/harness/cases/maps.proto (package tests.harness.cases, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_validate_validate } from "../../../validate/validate_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file tests/harness/cases/maps.proto.
 */
export const file_tests_harness_cases_maps: GenFile = /*@__PURE__*/
  fileDesc("Ch50ZXN0cy9oYXJuZXNzL2Nhc2VzL21hcHMucHJvdG8SE3Rlc3RzLmhhcm5lc3MuY2FzZXMiaQoHTWFwTm9uZRIyCgN2YWwYASADKAsyJS50ZXN0cy5oYXJuZXNzLmNhc2VzLk1hcE5vbmUuVmFsRW50cnkaKgoIVmFsRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgIOgI4ASJxCgZNYXBNaW4SOwoDdmFsGAEgAygLMiQudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBNaW4uVmFsRW50cnlCCPpCBZoBAggCGioKCFZhbEVudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEoAjoCOAEicQoGTWFwTWF4EjsKA3ZhbBgBIAMoCzIkLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwTWF4LlZhbEVudHJ5Qgj6QgWaAQIQAxoqCghWYWxFbnRyeRILCgNrZXkYASABKAMSDQoFdmFsdWUYAiABKAE6AjgBInkKCU1hcE1pbk1heBJACgN2YWwYASADKAsyJy50ZXN0cy5oYXJuZXNzLmNhc2VzLk1hcE1pbk1heC5WYWxFbnRyeUIK+kIHmgEECAIQBBoqCghWYWxFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAg6AjgBIncKCE1hcEV4YWN0Ej8KA3ZhbBgBIAMoCzImLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwRXhhY3QuVmFsRW50cnlCCvpCB5oBBAgDEAMaKgoIVmFsRW50cnkSCwoDa2V5GAEgASgEEg0KBXZhbHVlGAIgASgJOgI4ASKoAQoLTWFwTm9TcGFyc2USQAoDdmFsGAEgAygLMikudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBOb1NwYXJzZS5WYWxFbnRyeUII+kIFmgECGAEaUAoIVmFsRW50cnkSCwoDa2V5GAEgASgNEjMKBXZhbHVlGAIgASgLMiQudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBOb1NwYXJzZS5Nc2c6AjgBGgUKA01zZyJ3CgdNYXBLZXlzEkAKA3ZhbBgBIAMoCzIlLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwS2V5cy5WYWxFbnRyeUIM+kIJmgEGIgRCAhAAGioKCFZhbEVudHJ5EgsKA2tleRgBIAEoEhINCgV2YWx1ZRgCIAEoCToCOAEiewoJTWFwVmFsdWVzEkIKA3ZhbBgBIAMoCzInLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwVmFsdWVzLlZhbEVudHJ5Qgz6QgmaAQYqBHICEAMaKgoIVmFsRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKUAQoOTWFwS2V5c1BhdHRlcm4SVgoDdmFsGAEgAygLMiwudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBLZXlzUGF0dGVybi5WYWxFbnRyeUIb+kIYmgEVIhNyETIPKD9pKV5bYS16MC05XSskGioKCFZhbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEimAEKEE1hcFZhbHVlc1BhdHRlcm4SWAoDdmFsGAEgAygLMi4udGVzdHMuaGFybmVzcy5jYXNlcy5NYXBWYWx1ZXNQYXR0ZXJuLlZhbEVudHJ5Qhv6QhiaARUqE3IRMg8oP2kpXlthLXowLTldKyQaKgoIVmFsRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASK3AQoMTWFwUmVjdXJzaXZlEjcKA3ZhbBgBIAMoCzIqLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwUmVjdXJzaXZlLlZhbEVudHJ5GlEKCFZhbEVudHJ5EgsKA2tleRgBIAEoDRI0CgV2YWx1ZRgCIAEoCzIlLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwUmVjdXJzaXZlLk1zZzoCOAEaGwoDTXNnEhQKA3ZhbBgBIAEoCUIH+kIEcgIQAyKFAQoOTWFwRXhhY3RJZ25vcmUSRwoDdmFsGAEgAygLMiwudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBFeGFjdElnbm9yZS5WYWxFbnRyeUIM+kIJmgEGCAMQAzABGioKCFZhbEVudHJ5EgsKA2tleRgBIAEoBBINCgV2YWx1ZRgCIAEoCToCOAEi/AIKDE11bHRpcGxlTWFwcxJJCgVmaXJzdBgBIAMoCzIsLnRlc3RzLmhhcm5lc3MuY2FzZXMuTXVsdGlwbGVNYXBzLkZpcnN0RW50cnlCDPpCCZoBBiIEKgIgABJLCgZzZWNvbmQYAiADKAsyLS50ZXN0cy5oYXJuZXNzLmNhc2VzLk11bHRpcGxlTWFwcy5TZWNvbmRFbnRyeUIM+kIJmgEGIgQaAhAAEkkKBXRoaXJkGAMgAygLMiwudGVzdHMuaGFybmVzcy5jYXNlcy5NdWx0aXBsZU1hcHMuVGhpcmRFbnRyeUIM+kIJmgEGIgQaAiAAGiwKCkZpcnN0RW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgJOgI4ARotCgtTZWNvbmRFbnRyeRILCgNrZXkYASABKAUSDQoFdmFsdWUYAiABKAg6AjgBGiwKClRoaXJkRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgIOgI4ASKDAQoJTWFwS2V5c0luEkoKA3ZhbBgBIAMoCzInLnRlc3RzLmhhcm5lc3MuY2FzZXMuTWFwS2V5c0luLlZhbEVudHJ5QhT6QhGaAQ4iDHIKUgNmb29SA2JhchoqCghWYWxFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIokBCgxNYXBLZXlzTm90SW4STQoDdmFsGAEgAygLMioudGVzdHMuaGFybmVzcy5jYXNlcy5NYXBLZXlzTm90SW4uVmFsRW50cnlCFPpCEZoBDiIMcgpaA2Zvb1oDYmFyGioKCFZhbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFCSFpGZ2l0aHViLmNvbS9lbnZveXByb3h5L3Byb3RvYy1nZW4tdmFsaWRhdGUvdGVzdHMvaGFybmVzcy9jYXNlcy9nbztjYXNlc2IGcHJvdG8z", [file_validate_validate]);

/**
 * @generated from message tests.harness.cases.MapNone
 */
export type MapNone = Message<"tests.harness.cases.MapNone"> & {
  /**
   * @generated from field: map<uint32, bool> val = 1;
   */
  val: { [key: number]: boolean };
};

/**
 * Describes the message tests.harness.cases.MapNone.
 * Use `create(MapNoneSchema)` to create a new message.
 */
export const MapNoneSchema: GenMessage<MapNone> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 0);

/**
 * @generated from message tests.harness.cases.MapMin
 */
export type MapMin = Message<"tests.harness.cases.MapMin"> & {
  /**
   * @generated from field: map<int32, float> val = 1;
   */
  val: { [key: number]: number };
};

/**
 * Describes the message tests.harness.cases.MapMin.
 * Use `create(MapMinSchema)` to create a new message.
 */
export const MapMinSchema: GenMessage<MapMin> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 1);

/**
 * @generated from message tests.harness.cases.MapMax
 */
export type MapMax = Message<"tests.harness.cases.MapMax"> & {
  /**
   * @generated from field: map<int64, double> val = 1;
   */
  val: { [key: string]: number };
};

/**
 * Describes the message tests.harness.cases.MapMax.
 * Use `create(MapMaxSchema)` to create a new message.
 */
export const MapMaxSchema: GenMessage<MapMax> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 2);

/**
 * @generated from message tests.harness.cases.MapMinMax
 */
export type MapMinMax = Message<"tests.harness.cases.MapMinMax"> & {
  /**
   * @generated from field: map<string, bool> val = 1;
   */
  val: { [key: string]: boolean };
};

/**
 * Describes the message tests.harness.cases.MapMinMax.
 * Use `create(MapMinMaxSchema)` to create a new message.
 */
export const MapMinMaxSchema: GenMessage<MapMinMax> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 3);

/**
 * @generated from message tests.harness.cases.MapExact
 */
export type MapExact = Message<"tests.harness.cases.MapExact"> & {
  /**
   * @generated from field: map<uint64, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapExact.
 * Use `create(MapExactSchema)` to create a new message.
 */
export const MapExactSchema: GenMessage<MapExact> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 4);

/**
 * @generated from message tests.harness.cases.MapNoSparse
 */
export type MapNoSparse = Message<"tests.harness.cases.MapNoSparse"> & {
  /**
   * @generated from field: map<uint32, tests.harness.cases.MapNoSparse.Msg> val = 1;
   */
  val: { [key: number]: MapNoSparse_Msg };
};

/**
 * Describes the message tests.harness.cases.MapNoSparse.
 * Use `create(MapNoSparseSchema)` to create a new message.
 */
export const MapNoSparseSchema: GenMessage<MapNoSparse> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 5);

/**
 * @generated from message tests.harness.cases.MapNoSparse.Msg
 */
export type MapNoSparse_Msg = Message<"tests.harness.cases.MapNoSparse.Msg"> & {
};

/**
 * Describes the message tests.harness.cases.MapNoSparse.Msg.
 * Use `create(MapNoSparse_MsgSchema)` to create a new message.
 */
export const MapNoSparse_MsgSchema: GenMessage<MapNoSparse_Msg> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 5, 0);

/**
 * @generated from message tests.harness.cases.MapKeys
 */
export type MapKeys = Message<"tests.harness.cases.MapKeys"> & {
  /**
   * @generated from field: map<sint64, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapKeys.
 * Use `create(MapKeysSchema)` to create a new message.
 */
export const MapKeysSchema: GenMessage<MapKeys> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 6);

/**
 * @generated from message tests.harness.cases.MapValues
 */
export type MapValues = Message<"tests.harness.cases.MapValues"> & {
  /**
   * @generated from field: map<string, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapValues.
 * Use `create(MapValuesSchema)` to create a new message.
 */
export const MapValuesSchema: GenMessage<MapValues> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 7);

/**
 * @generated from message tests.harness.cases.MapKeysPattern
 */
export type MapKeysPattern = Message<"tests.harness.cases.MapKeysPattern"> & {
  /**
   * @generated from field: map<string, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapKeysPattern.
 * Use `create(MapKeysPatternSchema)` to create a new message.
 */
export const MapKeysPatternSchema: GenMessage<MapKeysPattern> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 8);

/**
 * @generated from message tests.harness.cases.MapValuesPattern
 */
export type MapValuesPattern = Message<"tests.harness.cases.MapValuesPattern"> & {
  /**
   * @generated from field: map<string, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapValuesPattern.
 * Use `create(MapValuesPatternSchema)` to create a new message.
 */
export const MapValuesPatternSchema: GenMessage<MapValuesPattern> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 9);

/**
 * @generated from message tests.harness.cases.MapRecursive
 */
export type MapRecursive = Message<"tests.harness.cases.MapRecursive"> & {
  /**
   * @generated from field: map<uint32, tests.harness.cases.MapRecursive.Msg> val = 1;
   */
  val: { [key: number]: MapRecursive_Msg };
};

/**
 * Describes the message tests.harness.cases.MapRecursive.
 * Use `create(MapRecursiveSchema)` to create a new message.
 */
export const MapRecursiveSchema: GenMessage<MapRecursive> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 10);

/**
 * @generated from message tests.harness.cases.MapRecursive.Msg
 */
export type MapRecursive_Msg = Message<"tests.harness.cases.MapRecursive.Msg"> & {
  /**
   * @generated from field: string val = 1;
   */
  val: string;
};

/**
 * Describes the message tests.harness.cases.MapRecursive.Msg.
 * Use `create(MapRecursive_MsgSchema)` to create a new message.
 */
export const MapRecursive_MsgSchema: GenMessage<MapRecursive_Msg> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 10, 0);

/**
 * @generated from message tests.harness.cases.MapExactIgnore
 */
export type MapExactIgnore = Message<"tests.harness.cases.MapExactIgnore"> & {
  /**
   * @generated from field: map<uint64, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapExactIgnore.
 * Use `create(MapExactIgnoreSchema)` to create a new message.
 */
export const MapExactIgnoreSchema: GenMessage<MapExactIgnore> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 11);

/**
 * @generated from message tests.harness.cases.MultipleMaps
 */
export type MultipleMaps = Message<"tests.harness.cases.MultipleMaps"> & {
  /**
   * @generated from field: map<uint32, string> first = 1;
   */
  first: { [key: number]: string };

  /**
   * @generated from field: map<int32, bool> second = 2;
   */
  second: { [key: number]: boolean };

  /**
   * @generated from field: map<int32, bool> third = 3;
   */
  third: { [key: number]: boolean };
};

/**
 * Describes the message tests.harness.cases.MultipleMaps.
 * Use `create(MultipleMapsSchema)` to create a new message.
 */
export const MultipleMapsSchema: GenMessage<MultipleMaps> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 12);

/**
 * @generated from message tests.harness.cases.MapKeysIn
 */
export type MapKeysIn = Message<"tests.harness.cases.MapKeysIn"> & {
  /**
   * @generated from field: map<string, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapKeysIn.
 * Use `create(MapKeysInSchema)` to create a new message.
 */
export const MapKeysInSchema: GenMessage<MapKeysIn> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 13);

/**
 * @generated from message tests.harness.cases.MapKeysNotIn
 */
export type MapKeysNotIn = Message<"tests.harness.cases.MapKeysNotIn"> & {
  /**
   * @generated from field: map<string, string> val = 1;
   */
  val: { [key: string]: string };
};

/**
 * Describes the message tests.harness.cases.MapKeysNotIn.
 * Use `create(MapKeysNotInSchema)` to create a new message.
 */
export const MapKeysNotInSchema: GenMessage<MapKeysNotIn> = /*@__PURE__*/
  messageDesc(file_tests_harness_cases_maps, 14);

