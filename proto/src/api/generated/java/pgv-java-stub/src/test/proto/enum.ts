// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: java/pgv-java-stub/src/test/proto/enum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "io.envoyproxy.pvg.cases";

export enum TestEnum {
  ZERO = 0,
  ONE = 1,
  TWO = 2,
  UNRECOGNIZED = -1,
}

export function testEnumFromJSON(object: any): TestEnum {
  switch (object) {
    case 0:
    case "ZERO":
      return TestEnum.ZERO;
    case 1:
    case "ONE":
      return TestEnum.ONE;
    case 2:
    case "TWO":
      return TestEnum.TWO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TestEnum.UNRECOGNIZED;
  }
}

export function testEnumToJSON(object: TestEnum): string {
  switch (object) {
    case TestEnum.ZERO:
      return "ZERO";
    case TestEnum.ONE:
      return "ONE";
    case TestEnum.TWO:
      return "TWO";
    case TestEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Outer {
  val: string;
}

function createBaseOuter(): Outer {
  return { val: "" };
}

export const Outer: MessageFns<Outer> = {
  encode(message: Outer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.val !== "") {
      writer.uint32(10).string(message.val);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Outer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOuter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.val = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Outer {
    return { val: isSet(object.val) ? globalThis.String(object.val) : "" };
  },

  toJSON(message: Outer): unknown {
    const obj: any = {};
    if (message.val !== "") {
      obj.val = message.val;
    }
    return obj;
  },

  create(base?: DeepPartial<Outer>): Outer {
    return Outer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Outer>): Outer {
    const message = createBaseOuter();
    message.val = object.val ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
