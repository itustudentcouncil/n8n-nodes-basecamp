// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: google/iam/v1/options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "google.iam.v1";

/** Encapsulates settings provided to GetIamPolicy. */
export interface GetPolicyOptions {
  /**
   * Optional. The maximum policy version that will be used to format the
   * policy.
   *
   * Valid values are 0, 1, and 3. Requests specifying an invalid value will be
   * rejected.
   *
   * Requests for policies with any conditional role bindings must specify
   * version 3. Policies with no conditional role bindings may specify any valid
   * value or leave the field unset.
   *
   * The policy in the response might use the policy version that you specified,
   * or it might use a lower policy version. For example, if you specify version
   * 3, but the policy has no conditional role bindings, the response uses
   * version 1.
   *
   * To learn which resources support conditions in their IAM policies, see the
   * [IAM
   * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
   */
  requestedPolicyVersion: number;
}

function createBaseGetPolicyOptions(): GetPolicyOptions {
  return { requestedPolicyVersion: 0 };
}

export const GetPolicyOptions: MessageFns<GetPolicyOptions> = {
  encode(message: GetPolicyOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestedPolicyVersion !== 0) {
      writer.uint32(8).int32(message.requestedPolicyVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.requestedPolicyVersion = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyOptions {
    return {
      requestedPolicyVersion: isSet(object.requestedPolicyVersion)
        ? globalThis.Number(object.requestedPolicyVersion)
        : 0,
    };
  },

  toJSON(message: GetPolicyOptions): unknown {
    const obj: any = {};
    if (message.requestedPolicyVersion !== 0) {
      obj.requestedPolicyVersion = Math.round(message.requestedPolicyVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<GetPolicyOptions>): GetPolicyOptions {
    return GetPolicyOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPolicyOptions>): GetPolicyOptions {
    const message = createBaseGetPolicyOptions();
    message.requestedPolicyVersion = object.requestedPolicyVersion ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
